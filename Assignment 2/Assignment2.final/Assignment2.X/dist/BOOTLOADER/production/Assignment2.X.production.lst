

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 17 21:34:36 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	text86,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1
   124                           	psect	text100,global,reloc=2,class=CODE,delta=1
   125                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text102,global,reloc=2,class=CODE,delta=1
   127                           	psect	text103,global,reloc=2,class=CODE,delta=1
   128                           	psect	text104,global,reloc=2,class=CODE,delta=1
   129                           	psect	text105,global,reloc=2,class=CODE,delta=1
   130                           	psect	text106,global,reloc=2,class=CODE,delta=1
   131                           	psect	text107,global,reloc=2,class=CODE,delta=1
   132                           	psect	text108,global,reloc=2,class=CODE,delta=1
   133                           	psect	text109,global,reloc=2,class=CODE,delta=1
   134                           	psect	text110,global,reloc=2,class=CODE,delta=1
   135                           	psect	text111,global,reloc=2,class=CODE,delta=1
   136                           	psect	text112,global,reloc=2,class=CODE,delta=1
   137                           	psect	text113,global,reloc=2,class=CODE,delta=1
   138                           	psect	text114,global,reloc=2,class=CODE,delta=1
   139                           	psect	text115,global,reloc=2,class=CODE,delta=1
   140                           	psect	text116,global,reloc=2,class=CODE,delta=1
   141                           	psect	text117,global,reloc=2,class=CODE,delta=1,inline
   142                           	psect	text118,global,reloc=2,class=CODE,delta=1
   143                           	psect	text119,global,reloc=2,class=CODE,delta=1
   144                           	psect	text120,global,reloc=2,class=CODE,delta=1
   145                           	psect	text121,global,reloc=2,class=CODE,delta=1
   146                           	psect	text122,global,reloc=2,class=CODE,delta=1
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	text124,global,reloc=2,class=CODE,delta=1
   149                           	psect	text125,global,reloc=2,class=CODE,delta=1
   150                           	psect	text126,global,reloc=2,class=CODE,delta=1
   151                           	psect	text127,global,reloc=2,class=CODE,delta=1
   152                           	psect	text128,global,reloc=2,class=CODE,delta=1
   153                           	psect	text129,global,reloc=2,class=CODE,delta=1
   154                           	psect	text130,global,reloc=2,class=CODE,delta=1
   155                           	psect	text131,global,reloc=2,class=CODE,delta=1
   156                           	psect	text132,global,reloc=2,class=CODE,delta=1
   157                           	psect	text133,global,reloc=2,class=CODE,delta=1
   158                           	psect	text134,global,reloc=2,class=CODE,delta=1
   159                           	psect	text135,global,reloc=2,class=CODE,delta=1
   160                           	psect	text136,global,reloc=2,class=CODE,delta=1
   161                           	psect	text137,global,reloc=2,class=CODE,delta=1
   162                           	psect	text138,global,reloc=2,class=CODE,delta=1
   163                           	psect	text139,global,reloc=2,class=CODE,delta=1
   164                           	psect	text140,global,reloc=2,class=CODE,delta=1
   165                           	psect	text141,global,reloc=2,class=CODE,delta=1
   166                           	psect	text142,global,reloc=2,class=CODE,delta=1
   167                           	psect	text143,global,reloc=2,class=CODE,delta=1
   168                           	psect	text144,global,reloc=2,class=CODE,delta=1
   169                           	psect	text145,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text146,global,reloc=2,class=CODE,delta=1,group=1
   171                           	psect	text147,global,reloc=2,class=CODE,delta=1
   172                           	psect	text148,global,reloc=2,class=CODE,delta=1
   173                           	psect	text149,global,reloc=2,class=CODE,delta=1
   174                           	psect	text150,global,reloc=2,class=CODE,delta=1
   175                           	psect	text151,global,reloc=2,class=CODE,delta=1
   176                           	psect	text152,global,reloc=2,class=CODE,delta=1
   177                           	psect	text153,global,reloc=2,class=CODE,delta=1
   178                           	psect	text154,global,reloc=2,class=CODE,delta=1
   179                           	psect	text155,global,reloc=2,class=CODE,delta=1,inline
   180                           	psect	text156,global,reloc=2,class=CODE,delta=1
   181                           	psect	text157,global,reloc=2,class=CODE,delta=1
   182                           	psect	text158,global,reloc=2,class=CODE,delta=1
   183                           	psect	text159,global,reloc=2,class=CODE,delta=1
   184                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   185                           	psect	text161,global,reloc=2,class=CODE,delta=1
   186                           	psect	text162,global,reloc=2,class=CODE,delta=1
   187                           	psect	text163,global,reloc=2,class=CODE,delta=1
   188                           	psect	text164,global,reloc=2,class=CODE,delta=1
   189                           	psect	text165,global,reloc=2,class=CODE,delta=1
   190                           	psect	text166,global,reloc=2,class=CODE,delta=1
   191                           	psect	text167,global,reloc=2,class=CODE,delta=1
   192                           	psect	text168,global,reloc=2,class=CODE,delta=1,inline
   193                           	psect	text169,global,reloc=2,class=CODE,delta=1
   194                           	psect	text170,global,reloc=2,class=CODE,delta=1
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	text173,global,reloc=2,class=CODE,delta=1
   198                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   199                           	psect	text174,global,reloc=2,class=CODE,delta=1
   200                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   201                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   202  0000                     
   203                           ; Version 1.43
   204                           ; Generated 25/07/2017 GMT
   205                           ; 
   206                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   207                           ; All rights reserved.
   208                           ; 
   209                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   210                           ; 
   211                           ; Redistribution and use in source and binary forms, with or without modification, are
   212                           ; permitted provided that the following conditions are met:
   213                           ; 
   214                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   215                           ;        conditions and the following disclaimer.
   216                           ; 
   217                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   218                           ;        of conditions and the following disclaimer in the documentation and/or other
   219                           ;        materials provided with the distribution.
   220                           ; 
   221                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   222                           ;        software without specific prior written permission.
   223                           ; 
   224                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   225                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   226                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   227                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   228                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   229                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   230                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   231                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   232                           ; 
   233                           ; 
   234                           ; Code-generator required, PIC18F67J50 Definitions
   235                           ; 
   236                           ; SFR Addresses
   237  0000                     
   238                           	psect	idataCOMRAM
   239  016EA0                     __pidataCOMRAM:
   240                           	opt stack 0
   241                           
   242                           ;initializer for _gCursor
   243  016EA0  0006               	dw	6
   244  016EA2  0006               	dw	6
   245                           
   246                           ;initializer for _Bus_State
   247  016EA4  01                 	db	1
   248                           
   249                           ;initializer for _A
   250  016EA5  41                 	db	65
   251                           
   252                           ;initializer for _a
   253  016EA6  61                 	db	97
   254                           
   255                           ;initializer for _zero
   256  016EA7  30                 	db	48
   257                           
   258                           ;initializer for _l
   259  016EA8  80                 	db	128
   260                           
   261                           ;initializer for _w
   262  016EA9  80                 	db	128
   263                           
   264                           	psect	idataBANK0
   265  016ED6                     __pidataBANK0:
   266                           	opt stack 0
   267                           
   268                           ;initializer for _TimerX
   269  016ED6  0008               	dw	8
   270                           
   271                           ;initializer for _MinDist
   272  016ED8  03E8               	dw	1000
   273                           
   274                           ;initializer for _gForecolour
   275  016EDA  FFFF               	dw	65535
   276                           
   277                           ;initializer for _change
   278  016EDC  01                 	db	1
   279                           
   280                           	psect	idataBANK3
   281  016E1A                     __pidataBANK3:
   282                           	opt stack 0
   283                           
   284                           ;initializer for Console_Render@F6956
   285  016E1A  0006               	dw	6
   286  016E1C  0006               	dw	6
   287                           
   288                           ;initializer for _gLineSize
   289  016E1E  0080               	dw	128
   290  016E20  0007               	dw	7
   291                           
   292                           ;initializer for _gCharSize
   293  016E22  0005               	dw	5
   294  016E24  0007               	dw	7
   295                           
   296                           ;initializer for _corner
   297  016E26  0001               	dw	1
   298                           
   299                           	psect	mediumconst
   300  00FC32                     __pmediumconst:
   301                           	opt stack 0
   302  00FC32  00                 	db	0
   303  00FC33                     _InitList:
   304                           	opt stack 0
   305  00FC33  1100               	dw	4352
   306  00FC35  0080               	dw	128
   307  00FC37  012C               	dw	300
   308  00FC39  B100               	dw	45312
   309  00FC3B  0002               	dw	2
   310  00FC3D  0035               	dw	53
   311  00FC3F  0036               	dw	54
   312  00FC41  B200               	dw	45568
   313  00FC43  0002               	dw	2
   314  00FC45  0035               	dw	53
   315  00FC47  0036               	dw	54
   316  00FC49  B300               	dw	45824
   317  00FC4B  0002               	dw	2
   318  00FC4D  0035               	dw	53
   319  00FC4F  0036               	dw	54
   320  00FC51  0002               	dw	2
   321  00FC53  0035               	dw	53
   322  00FC55  0036               	dw	54
   323  00FC57  B400               	dw	46080
   324  00FC59  0000               	dw	0
   325  00FC5B  C000               	dw	49152
   326  00FC5D  00A2               	dw	162
   327  00FC5F  0002               	dw	2
   328  00FC61  0084               	dw	132
   329  00FC63  C100               	dw	49408
   330  00FC65  00C5               	dw	197
   331  00FC67  C200               	dw	49664
   332  00FC69  000D               	dw	13
   333  00FC6B  0000               	dw	0
   334  00FC6D  C300               	dw	49920
   335  00FC6F  008D               	dw	141
   336  00FC71  002A               	dw	42
   337  00FC73  C400               	dw	50176
   338  00FC75  008D               	dw	141
   339  00FC77  00EE               	dw	238
   340  00FC79  C500               	dw	50432
   341  00FC7B  000A               	dw	10
   342  00FC7D  3600               	dw	13824
   343  00FC7F  00C8               	dw	200
   344  00FC81  E000               	dw	57344
   345  00FC83  0012               	dw	18
   346  00FC85  001C               	dw	28
   347  00FC87  0010               	dw	16
   348  00FC89  0018               	dw	24
   349  00FC8B  0033               	dw	51
   350  00FC8D  002C               	dw	44
   351  00FC8F  0025               	dw	37
   352  00FC91  0028               	dw	40
   353  00FC93  0028               	dw	40
   354  00FC95  0027               	dw	39
   355  00FC97  002F               	dw	47
   356  00FC99  003C               	dw	60
   357  00FC9B  0000               	dw	0
   358  00FC9D  0003               	dw	3
   359  00FC9F  0003               	dw	3
   360  00FCA1  0010               	dw	16
   361  00FCA3  0080               	dw	128
   362  00FCA5  0078               	dw	120
   363  00FCA7  E100               	dw	57600
   364  00FCA9  0012               	dw	18
   365  00FCAB  001C               	dw	28
   366  00FCAD  0010               	dw	16
   367  00FCAF  0018               	dw	24
   368  00FCB1  002D               	dw	45
   369  00FCB3  0028               	dw	40
   370  00FCB5  0023               	dw	35
   371  00FCB7  0028               	dw	40
   372  00FCB9  0028               	dw	40
   373  00FCBB  0026               	dw	38
   374  00FCBD  002F               	dw	47
   375  00FCBF  003B               	dw	59
   376  00FCC1  0000               	dw	0
   377  00FCC3  0003               	dw	3
   378  00FCC5  0003               	dw	3
   379  00FCC7  0010               	dw	16
   380  00FCC9  3A00               	dw	14848
   381  00FCCB  0005               	dw	5
   382  00FCCD  2A00               	dw	10752
   383  00FCCF  0000               	dw	0
   384  00FCD1  0002               	dw	2
   385  00FCD3  0000               	dw	0
   386  00FCD5  0081               	dw	129
   387  00FCD7  2B00               	dw	11008
   388  00FCD9  0000               	dw	0
   389  00FCDB  0003               	dw	3
   390  00FCDD  0000               	dw	0
   391  00FCDF  00A2               	dw	162
   392  00FCE1  2900               	dw	10496
   393  00FCE3  2C00               	dw	11264
   394  00FCE5                     __end_of_InitList:
   395                           	opt stack 0
   396  00FCE5                     Timer0_Init@PRESCALE:
   397                           	opt stack 0
   398  00FCE5  0002               	dw	2
   399  00FCE7  0004               	dw	4
   400  00FCE9  0008               	dw	8
   401  00FCEB  0010               	dw	16
   402  00FCED  0020               	dw	32
   403  00FCEF  0040               	dw	64
   404  00FCF1  0080               	dw	128
   405  00FCF3  0100               	dw	256
   406  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   407                           	opt stack 0
   408  00FCF5                     PortProperty_Valid@F6830:
   409                           	opt stack 0
   410  00FCF5  00                 	db	0
   411  00FCF6  01                 	db	1
   412  00FCF7  02                 	db	2
   413  00FCF8  00                 	db	0
   414  00FCF9  01                 	db	1
   415  00FCFA  00                 	db	0
   416  00FCFB  01                 	db	1
   417  00FCFC  00                 	db	0
   418  00FCFD  02                 	db	2
   419  00FCFE  02                 	db	2
   420  00FCFF  00                 	db	0
   421  00FD00  00                 	db	0
   422  00FD01  03                 	db	3
   423  00FD02  03                 	db	3
   424  00FD03  03                 	db	3
   425  00FD04  00                 	db	0
   426  00FD05                     __end_ofPortProperty_Valid@F6830:
   427                           	opt stack 0
   428  00FD05                     _dpowers:
   429                           	opt stack 0
   430  00FD05  0001               	dw	1
   431  00FD07  000A               	dw	10
   432  00FD09  0064               	dw	100
   433  00FD0B  03E8               	dw	1000
   434  00FD0D  2710               	dw	10000
   435  00FD0F                     __end_of_dpowers:
   436                           	opt stack 0
   437  00FD0F                     _MASKS:
   438                           	opt stack 0
   439  00FD0F  00                 	db	0
   440  00FD10  01                 	db	1
   441  00FD11  03                 	db	3
   442  00FD12  07                 	db	7
   443  00FD13  0F                 	db	15
   444  00FD14  1F                 	db	31
   445  00FD15  3F                 	db	63
   446  00FD16  7F                 	db	127
   447  00FD17  FF                 	db	255
   448  00FD18                     __end_of_MASKS:
   449                           	opt stack 0
   450  00FD18                     HMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD18  00                 	db	0
   453  00FD19  02                 	db	2
   454  00FD1A  01                 	db	1
   455  00FD1B  03                 	db	3
   456  00FD1C                     __end_ofHMI_SetButton@F7213:
   457                           	opt stack 0
   458  00FD1C                     Timer2_Init@PRESCALE:
   459                           	opt stack 0
   460  00FD1C  01                 	db	1
   461  00FD1D  04                 	db	4
   462  00FD1E  10                 	db	16
   463  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   464                           	opt stack 0
   465  00FD1F                     _Font5x7:
   466                           	opt stack 0
   467  00FD1F  00                 	db	0
   468  00FD20  00                 	db	0
   469  00FD21  00                 	db	0
   470  00FD22  00                 	db	0
   471  00FD23  00                 	db	0
   472  00FD24  00                 	db	0
   473  00FD25  00                 	db	0
   474  00FD26  5F                 	db	95
   475  00FD27  00                 	db	0
   476  00FD28  00                 	db	0
   477  00FD29  00                 	db	0
   478  00FD2A  07                 	db	7
   479  00FD2B  00                 	db	0
   480  00FD2C  07                 	db	7
   481  00FD2D  00                 	db	0
   482  00FD2E  14                 	db	20
   483  00FD2F  7F                 	db	127
   484  00FD30  14                 	db	20
   485  00FD31  7F                 	db	127
   486  00FD32  14                 	db	20
   487  00FD33  24                 	db	36
   488  00FD34  2A                 	db	42
   489  00FD35  7F                 	db	127
   490  00FD36  2A                 	db	42
   491  00FD37  12                 	db	18
   492  00FD38  23                 	db	35
   493  00FD39  13                 	db	19
   494  00FD3A  08                 	db	8
   495  00FD3B  64                 	db	100
   496  00FD3C  62                 	db	98
   497  00FD3D  36                 	db	54
   498  00FD3E  49                 	db	73
   499  00FD3F  55                 	db	85
   500  00FD40  22                 	db	34
   501  00FD41  50                 	db	80
   502  00FD42  00                 	db	0
   503  00FD43  05                 	db	5
   504  00FD44  03                 	db	3
   505  00FD45  00                 	db	0
   506  00FD46  00                 	db	0
   507  00FD47  00                 	db	0
   508  00FD48  1C                 	db	28
   509  00FD49  22                 	db	34
   510  00FD4A  41                 	db	65
   511  00FD4B  00                 	db	0
   512  00FD4C  00                 	db	0
   513  00FD4D  41                 	db	65
   514  00FD4E  22                 	db	34
   515  00FD4F  1C                 	db	28
   516  00FD50  00                 	db	0
   517  00FD51  08                 	db	8
   518  00FD52  2A                 	db	42
   519  00FD53  1C                 	db	28
   520  00FD54  2A                 	db	42
   521  00FD55  08                 	db	8
   522  00FD56  08                 	db	8
   523  00FD57  08                 	db	8
   524  00FD58  3E                 	db	62
   525  00FD59  08                 	db	8
   526  00FD5A  08                 	db	8
   527  00FD5B  00                 	db	0
   528  00FD5C  50                 	db	80
   529  00FD5D  30                 	db	48
   530  00FD5E  00                 	db	0
   531  00FD5F  00                 	db	0
   532  00FD60  08                 	db	8
   533  00FD61  08                 	db	8
   534  00FD62  08                 	db	8
   535  00FD63  08                 	db	8
   536  00FD64  08                 	db	8
   537  00FD65  00                 	db	0
   538  00FD66  60                 	db	96
   539  00FD67  60                 	db	96
   540  00FD68  00                 	db	0
   541  00FD69  00                 	db	0
   542  00FD6A  20                 	db	32
   543  00FD6B  10                 	db	16
   544  00FD6C  08                 	db	8
   545  00FD6D  04                 	db	4
   546  00FD6E  02                 	db	2
   547  00FD6F  3E                 	db	62
   548  00FD70  51                 	db	81
   549  00FD71  49                 	db	73
   550  00FD72  45                 	db	69
   551  00FD73  3E                 	db	62
   552  00FD74  00                 	db	0
   553  00FD75  42                 	db	66
   554  00FD76  7F                 	db	127
   555  00FD77  40                 	db	64
   556  00FD78  00                 	db	0
   557  00FD79  42                 	db	66
   558  00FD7A  61                 	db	97
   559  00FD7B  51                 	db	81
   560  00FD7C  49                 	db	73
   561  00FD7D  46                 	db	70
   562  00FD7E  21                 	db	33
   563  00FD7F  41                 	db	65
   564  00FD80  45                 	db	69
   565  00FD81  4B                 	db	75
   566  00FD82  31                 	db	49
   567  00FD83  18                 	db	24
   568  00FD84  14                 	db	20
   569  00FD85  12                 	db	18
   570  00FD86  7F                 	db	127
   571  00FD87  10                 	db	16
   572  00FD88  27                 	db	39
   573  00FD89  45                 	db	69
   574  00FD8A  45                 	db	69
   575  00FD8B  45                 	db	69
   576  00FD8C  39                 	db	57
   577  00FD8D  3C                 	db	60
   578  00FD8E  4A                 	db	74
   579  00FD8F  49                 	db	73
   580  00FD90  49                 	db	73
   581  00FD91  30                 	db	48
   582  00FD92  01                 	db	1
   583  00FD93  71                 	db	113
   584  00FD94  09                 	db	9
   585  00FD95  05                 	db	5
   586  00FD96  03                 	db	3
   587  00FD97  36                 	db	54
   588  00FD98  49                 	db	73
   589  00FD99  49                 	db	73
   590  00FD9A  49                 	db	73
   591  00FD9B  36                 	db	54
   592  00FD9C  06                 	db	6
   593  00FD9D  49                 	db	73
   594  00FD9E  49                 	db	73
   595  00FD9F  29                 	db	41
   596  00FDA0  1E                 	db	30
   597  00FDA1  00                 	db	0
   598  00FDA2  36                 	db	54
   599  00FDA3  36                 	db	54
   600  00FDA4  00                 	db	0
   601  00FDA5  00                 	db	0
   602  00FDA6  00                 	db	0
   603  00FDA7  56                 	db	86
   604  00FDA8  36                 	db	54
   605  00FDA9  00                 	db	0
   606  00FDAA  00                 	db	0
   607  00FDAB  00                 	db	0
   608  00FDAC  08                 	db	8
   609  00FDAD  14                 	db	20
   610  00FDAE  22                 	db	34
   611  00FDAF  41                 	db	65
   612  00FDB0  14                 	db	20
   613  00FDB1  14                 	db	20
   614  00FDB2  14                 	db	20
   615  00FDB3  14                 	db	20
   616  00FDB4  14                 	db	20
   617  00FDB5  41                 	db	65
   618  00FDB6  22                 	db	34
   619  00FDB7  14                 	db	20
   620  00FDB8  08                 	db	8
   621  00FDB9  00                 	db	0
   622  00FDBA  02                 	db	2
   623  00FDBB  01                 	db	1
   624  00FDBC  51                 	db	81
   625  00FDBD  09                 	db	9
   626  00FDBE  06                 	db	6
   627  00FDBF  32                 	db	50
   628  00FDC0  49                 	db	73
   629  00FDC1  79                 	db	121
   630  00FDC2  41                 	db	65
   631  00FDC3  3E                 	db	62
   632  00FDC4  7E                 	db	126
   633  00FDC5  11                 	db	17
   634  00FDC6  11                 	db	17
   635  00FDC7  11                 	db	17
   636  00FDC8  7E                 	db	126
   637  00FDC9  7F                 	db	127
   638  00FDCA  49                 	db	73
   639  00FDCB  49                 	db	73
   640  00FDCC  49                 	db	73
   641  00FDCD  36                 	db	54
   642  00FDCE  3E                 	db	62
   643  00FDCF  41                 	db	65
   644  00FDD0  41                 	db	65
   645  00FDD1  41                 	db	65
   646  00FDD2  22                 	db	34
   647  00FDD3  7F                 	db	127
   648  00FDD4  41                 	db	65
   649  00FDD5  41                 	db	65
   650  00FDD6  22                 	db	34
   651  00FDD7  1C                 	db	28
   652  00FDD8  7F                 	db	127
   653  00FDD9  49                 	db	73
   654  00FDDA  49                 	db	73
   655  00FDDB  49                 	db	73
   656  00FDDC  41                 	db	65
   657  00FDDD  7F                 	db	127
   658  00FDDE  09                 	db	9
   659  00FDDF  09                 	db	9
   660  00FDE0  01                 	db	1
   661  00FDE1  01                 	db	1
   662  00FDE2  3E                 	db	62
   663  00FDE3  41                 	db	65
   664  00FDE4  41                 	db	65
   665  00FDE5  51                 	db	81
   666  00FDE6  32                 	db	50
   667  00FDE7  7F                 	db	127
   668  00FDE8  08                 	db	8
   669  00FDE9  08                 	db	8
   670  00FDEA  08                 	db	8
   671  00FDEB  7F                 	db	127
   672  00FDEC  00                 	db	0
   673  00FDED  41                 	db	65
   674  00FDEE  7F                 	db	127
   675  00FDEF  41                 	db	65
   676  00FDF0  00                 	db	0
   677  00FDF1  20                 	db	32
   678  00FDF2  40                 	db	64
   679  00FDF3  41                 	db	65
   680  00FDF4  3F                 	db	63
   681  00FDF5  01                 	db	1
   682  00FDF6  7F                 	db	127
   683  00FDF7  08                 	db	8
   684  00FDF8  14                 	db	20
   685  00FDF9  22                 	db	34
   686  00FDFA  41                 	db	65
   687  00FDFB  7F                 	db	127
   688  00FDFC  40                 	db	64
   689  00FDFD  40                 	db	64
   690  00FDFE  40                 	db	64
   691  00FDFF  40                 	db	64
   692  00FE00  7F                 	db	127
   693  00FE01  02                 	db	2
   694  00FE02  04                 	db	4
   695  00FE03  02                 	db	2
   696  00FE04  7F                 	db	127
   697  00FE05  7F                 	db	127
   698  00FE06  04                 	db	4
   699  00FE07  08                 	db	8
   700  00FE08  10                 	db	16
   701  00FE09  7F                 	db	127
   702  00FE0A  3E                 	db	62
   703  00FE0B  41                 	db	65
   704  00FE0C  41                 	db	65
   705  00FE0D  41                 	db	65
   706  00FE0E  3E                 	db	62
   707  00FE0F  7F                 	db	127
   708  00FE10  09                 	db	9
   709  00FE11  09                 	db	9
   710  00FE12  09                 	db	9
   711  00FE13  06                 	db	6
   712  00FE14  3E                 	db	62
   713  00FE15  41                 	db	65
   714  00FE16  51                 	db	81
   715  00FE17  21                 	db	33
   716  00FE18  5E                 	db	94
   717  00FE19  7F                 	db	127
   718  00FE1A  09                 	db	9
   719  00FE1B  19                 	db	25
   720  00FE1C  29                 	db	41
   721  00FE1D  46                 	db	70
   722  00FE1E  46                 	db	70
   723  00FE1F  49                 	db	73
   724  00FE20  49                 	db	73
   725  00FE21  49                 	db	73
   726  00FE22  31                 	db	49
   727  00FE23  01                 	db	1
   728  00FE24  01                 	db	1
   729  00FE25  7F                 	db	127
   730  00FE26  01                 	db	1
   731  00FE27  01                 	db	1
   732  00FE28  3F                 	db	63
   733  00FE29  40                 	db	64
   734  00FE2A  40                 	db	64
   735  00FE2B  40                 	db	64
   736  00FE2C  3F                 	db	63
   737  00FE2D  1F                 	db	31
   738  00FE2E  20                 	db	32
   739  00FE2F  40                 	db	64
   740  00FE30  20                 	db	32
   741  00FE31  1F                 	db	31
   742  00FE32  7F                 	db	127
   743  00FE33  20                 	db	32
   744  00FE34  18                 	db	24
   745  00FE35  20                 	db	32
   746  00FE36  7F                 	db	127
   747  00FE37  63                 	db	99
   748  00FE38  14                 	db	20
   749  00FE39  08                 	db	8
   750  00FE3A  14                 	db	20
   751  00FE3B  63                 	db	99
   752  00FE3C  03                 	db	3
   753  00FE3D  04                 	db	4
   754  00FE3E  78                 	db	120
   755  00FE3F  04                 	db	4
   756  00FE40  03                 	db	3
   757  00FE41  61                 	db	97
   758  00FE42  51                 	db	81
   759  00FE43  49                 	db	73
   760  00FE44  45                 	db	69
   761  00FE45  43                 	db	67
   762  00FE46  00                 	db	0
   763  00FE47  00                 	db	0
   764  00FE48  7F                 	db	127
   765  00FE49  41                 	db	65
   766  00FE4A  41                 	db	65
   767  00FE4B  02                 	db	2
   768  00FE4C  04                 	db	4
   769  00FE4D  08                 	db	8
   770  00FE4E  10                 	db	16
   771  00FE4F  20                 	db	32
   772  00FE50  41                 	db	65
   773  00FE51  41                 	db	65
   774  00FE52  7F                 	db	127
   775  00FE53  00                 	db	0
   776  00FE54  00                 	db	0
   777  00FE55  04                 	db	4
   778  00FE56  02                 	db	2
   779  00FE57  01                 	db	1
   780  00FE58  02                 	db	2
   781  00FE59  04                 	db	4
   782  00FE5A  40                 	db	64
   783  00FE5B  40                 	db	64
   784  00FE5C  40                 	db	64
   785  00FE5D  40                 	db	64
   786  00FE5E  40                 	db	64
   787  00FE5F  00                 	db	0
   788  00FE60  01                 	db	1
   789  00FE61  02                 	db	2
   790  00FE62  04                 	db	4
   791  00FE63  00                 	db	0
   792  00FE64  20                 	db	32
   793  00FE65  54                 	db	84
   794  00FE66  54                 	db	84
   795  00FE67  54                 	db	84
   796  00FE68  78                 	db	120
   797  00FE69  7F                 	db	127
   798  00FE6A  48                 	db	72
   799  00FE6B  44                 	db	68
   800  00FE6C  44                 	db	68
   801  00FE6D  38                 	db	56
   802  00FE6E  38                 	db	56
   803  00FE6F  44                 	db	68
   804  00FE70  44                 	db	68
   805  00FE71  44                 	db	68
   806  00FE72  20                 	db	32
   807  00FE73  38                 	db	56
   808  00FE74  44                 	db	68
   809  00FE75  44                 	db	68
   810  00FE76  48                 	db	72
   811  00FE77  7F                 	db	127
   812  00FE78  38                 	db	56
   813  00FE79  54                 	db	84
   814  00FE7A  54                 	db	84
   815  00FE7B  54                 	db	84
   816  00FE7C  18                 	db	24
   817  00FE7D  08                 	db	8
   818  00FE7E  7E                 	db	126
   819  00FE7F  09                 	db	9
   820  00FE80  01                 	db	1
   821  00FE81  02                 	db	2
   822  00FE82  08                 	db	8
   823  00FE83  14                 	db	20
   824  00FE84  54                 	db	84
   825  00FE85  54                 	db	84
   826  00FE86  3C                 	db	60
   827  00FE87  7F                 	db	127
   828  00FE88  08                 	db	8
   829  00FE89  04                 	db	4
   830  00FE8A  04                 	db	4
   831  00FE8B  78                 	db	120
   832  00FE8C  00                 	db	0
   833  00FE8D  44                 	db	68
   834  00FE8E  7D                 	db	125
   835  00FE8F  40                 	db	64
   836  00FE90  00                 	db	0
   837  00FE91  20                 	db	32
   838  00FE92  40                 	db	64
   839  00FE93  44                 	db	68
   840  00FE94  3D                 	db	61
   841  00FE95  00                 	db	0
   842  00FE96  00                 	db	0
   843  00FE97  7F                 	db	127
   844  00FE98  10                 	db	16
   845  00FE99  28                 	db	40
   846  00FE9A  44                 	db	68
   847  00FE9B  00                 	db	0
   848  00FE9C  41                 	db	65
   849  00FE9D  7F                 	db	127
   850  00FE9E  40                 	db	64
   851  00FE9F  00                 	db	0
   852  00FEA0  7C                 	db	124
   853  00FEA1  04                 	db	4
   854  00FEA2  18                 	db	24
   855  00FEA3  04                 	db	4
   856  00FEA4  78                 	db	120
   857  00FEA5  7C                 	db	124
   858  00FEA6  08                 	db	8
   859  00FEA7  04                 	db	4
   860  00FEA8  04                 	db	4
   861  00FEA9  78                 	db	120
   862  00FEAA  38                 	db	56
   863  00FEAB  44                 	db	68
   864  00FEAC  44                 	db	68
   865  00FEAD  44                 	db	68
   866  00FEAE  38                 	db	56
   867  00FEAF  7C                 	db	124
   868  00FEB0  14                 	db	20
   869  00FEB1  14                 	db	20
   870  00FEB2  14                 	db	20
   871  00FEB3  08                 	db	8
   872  00FEB4  08                 	db	8
   873  00FEB5  14                 	db	20
   874  00FEB6  14                 	db	20
   875  00FEB7  18                 	db	24
   876  00FEB8  7C                 	db	124
   877  00FEB9  7C                 	db	124
   878  00FEBA  08                 	db	8
   879  00FEBB  04                 	db	4
   880  00FEBC  04                 	db	4
   881  00FEBD  08                 	db	8
   882  00FEBE  48                 	db	72
   883  00FEBF  54                 	db	84
   884  00FEC0  54                 	db	84
   885  00FEC1  54                 	db	84
   886  00FEC2  20                 	db	32
   887  00FEC3  04                 	db	4
   888  00FEC4  3F                 	db	63
   889  00FEC5  44                 	db	68
   890  00FEC6  40                 	db	64
   891  00FEC7  20                 	db	32
   892  00FEC8  3C                 	db	60
   893  00FEC9  40                 	db	64
   894  00FECA  40                 	db	64
   895  00FECB  20                 	db	32
   896  00FECC  7C                 	db	124
   897  00FECD  1C                 	db	28
   898  00FECE  20                 	db	32
   899  00FECF  40                 	db	64
   900  00FED0  20                 	db	32
   901  00FED1  1C                 	db	28
   902  00FED2  3C                 	db	60
   903  00FED3  40                 	db	64
   904  00FED4  30                 	db	48
   905  00FED5  40                 	db	64
   906  00FED6  3C                 	db	60
   907  00FED7  44                 	db	68
   908  00FED8  28                 	db	40
   909  00FED9  10                 	db	16
   910  00FEDA  28                 	db	40
   911  00FEDB  44                 	db	68
   912  00FEDC  0C                 	db	12
   913  00FEDD  50                 	db	80
   914  00FEDE  50                 	db	80
   915  00FEDF  50                 	db	80
   916  00FEE0  3C                 	db	60
   917  00FEE1  44                 	db	68
   918  00FEE2  64                 	db	100
   919  00FEE3  54                 	db	84
   920  00FEE4  4C                 	db	76
   921  00FEE5  44                 	db	68
   922  00FEE6  00                 	db	0
   923  00FEE7  08                 	db	8
   924  00FEE8  36                 	db	54
   925  00FEE9  41                 	db	65
   926  00FEEA  00                 	db	0
   927  00FEEB  00                 	db	0
   928  00FEEC  00                 	db	0
   929  00FEED  7F                 	db	127
   930  00FEEE  00                 	db	0
   931  00FEEF  00                 	db	0
   932  00FEF0  00                 	db	0
   933  00FEF1  41                 	db	65
   934  00FEF2  36                 	db	54
   935  00FEF3  08                 	db	8
   936  00FEF4  00                 	db	0
   937  00FEF5  08                 	db	8
   938  00FEF6  08                 	db	8
   939  00FEF7  2A                 	db	42
   940  00FEF8  1C                 	db	28
   941  00FEF9  08                 	db	8
   942  00FEFA  08                 	db	8
   943  00FEFB  1C                 	db	28
   944  00FEFC  2A                 	db	42
   945  00FEFD  08                 	db	8
   946  00FEFE  08                 	db	8
   947  00FEFF                     __end_of_Font5x7:
   948                           	opt stack 0
   949  00FEFF                     _PortG_Property:
   950                           	opt stack 0
   951  00FEFF  FC00               	dw	64512
   952  00FF01                     __end_of_PortG_Property:
   953                           	opt stack 0
   954  00FF01                     _PortF_Property:
   955                           	opt stack 0
   956  00FF01  0FFF               	dw	4095
   957  00FF03                     __end_of_PortF_Property:
   958                           	opt stack 0
   959  00FF03                     _PortE_Property:
   960                           	opt stack 0
   961  00FF03  0000               	dw	0
   962  00FF05                     __end_of_PortE_Property:
   963                           	opt stack 0
   964  00FF05                     _PortD_Property:
   965                           	opt stack 0
   966  00FF05  FFFF               	dw	65535
   967  00FF07                     __end_of_PortD_Property:
   968                           	opt stack 0
   969  00FF07                     _PortC_Property:
   970                           	opt stack 0
   971  00FF07  FFF0               	dw	65520
   972  00FF09                     __end_of_PortC_Property:
   973                           	opt stack 0
   974  00FF09                     _PortB_Property:
   975                           	opt stack 0
   976  00FF09  FF00               	dw	65280
   977  00FF0B                     __end_of_PortB_Property:
   978                           	opt stack 0
   979  00FF0B                     _PortA_Property:
   980                           	opt stack 0
   981  00FF0B  00FF               	dw	255
   982  00FF0D                     __end_of_PortA_Property:
   983                           	opt stack 0
   984  0000                     _TMR0	set	4054
   985  0000                     _RCREG1	set	4015
   986  0000                     _TXREG1	set	4014
   987  0000                     _SPBRG1	set	4016
   988  0000                     _TXSTA1bits	set	4013
   989  0000                     _BAUDCON1bits	set	3966
   990  0000                     _RCSTA1	set	4012
   991  0000                     _TXSTA1	set	4013
   992  0000                     _TRISCbits	set	3988
   993  0000                     _PR2	set	4043
   994  0000                     _T2CONbits	set	4042
   995  0000                     _T0CONbits	set	4053
   996  0000                     _RCONbits	set	4048
   997  0000                     _OSCTUNEbits	set	3995
   998  0000                     _PIR3	set	4004
   999  0000                     _PIR2	set	4001
  1000  0000                     _PIR1	set	3998
  1001  0000                     _INTCONbits	set	4082
  1002  0000                     _SSP2CON2bits	set	3947
  1003  0000                     _SSP1CON2bits	set	4037
  1004  0000                     _SSP1ADD	set	4040
  1005  0000                     _ANCON0	set	4033
  1006  0000                     _ADRESL	set	4035
  1007  0000                     _ADRESH	set	4036
  1008  0000                     _ADCON1bits	set	4033
  1009  0000                     _ADCON0bits	set	4034
  1010  0000                     _SSP2CON1bits	set	3948
  1011  0000                     _SSP1CON1bits	set	4038
  1012  0000                     _SSP2STATbits	set	3949
  1013  0000                     _SSP1STATbits	set	4039
  1014  0000                     _PIE3bits	set	4003
  1015  0000                     _PIE1bits	set	3997
  1016  0000                     _PIR3bits	set	4004
  1017  0000                     _PIR1bits	set	3998
  1018  0000                     _IPR3bits	set	4005
  1019  0000                     _IPR1bits	set	3999
  1020  0000                     _PORTFbits	set	3973
  1021  0000                     _SSP2CON2	set	3947
  1022  0000                     _SSP1CON2	set	4037
  1023  0000                     _SSP2BUF	set	3951
  1024  0000                     _SSP2CON1	set	3948
  1025  0000                     _SSP2STAT	set	3949
  1026  0000                     _SSP1BUF	set	4041
  1027  0000                     _SSP1CON1	set	4038
  1028  0000                     _SSP1STAT	set	4039
  1029  0000                     _LATG	set	3983
  1030  0000                     _LATF	set	3982
  1031  0000                     _LATE	set	3981
  1032  0000                     _LATD	set	3980
  1033  0000                     _LATC	set	3979
  1034  0000                     _LATB	set	3978
  1035  0000                     _LATA	set	3977
  1036  0000                     _TRISG	set	3992
  1037  0000                     _TRISF	set	3991
  1038  0000                     _TRISE	set	3990
  1039  0000                     _TRISD	set	3989
  1040  0000                     _TRISC	set	3988
  1041  0000                     _TRISB	set	3987
  1042  0000                     _TRISA	set	3986
  1043  0000                     _PORTG	set	3974
  1044  0000                     _PORTF	set	3973
  1045  0000                     _PORTE	set	3972
  1046  0000                     _PORTD	set	3971
  1047  0000                     _PORTC	set	3970
  1048  0000                     _PORTB	set	3969
  1049  0000                     _PORTA	set	3968
  1050  00FF0D                     STR_14:
  1051  00FF0D  43                 	db	67	;'C'
  1052  00FF0E  6C                 	db	108	;'l'
  1053  00FF0F  6F                 	db	111	;'o'
  1054  00FF10  73                 	db	115	;'s'
  1055  00FF11  65                 	db	101	;'e'
  1056  00FF12  73                 	db	115	;'s'
  1057  00FF13  74                 	db	116	;'t'
  1058  00FF14  20                 	db	32
  1059  00FF15  57                 	db	87	;'W'
  1060  00FF16  61                 	db	97	;'a'
  1061  00FF17  6C                 	db	108	;'l'
  1062  00FF18  6C                 	db	108	;'l'
  1063  00FF19  3A                 	db	58	;':'
  1064  00FF1A  25                 	db	37
  1065  00FF1B  75                 	db	117	;'u'
  1066  00FF1C  0A                 	db	10
  1067  00FF1D  43                 	db	67	;'C'
  1068  00FF1E  6C                 	db	108	;'l'
  1069  00FF1F  6F                 	db	111	;'o'
  1070  00FF20  73                 	db	115	;'s'
  1071  00FF21  65                 	db	101	;'e'
  1072  00FF22  73                 	db	115	;'s'
  1073  00FF23  74                 	db	116	;'t'
  1074  00FF24  20                 	db	32
  1075  00FF25  41                 	db	65	;'A'
  1076  00FF26  6E                 	db	110	;'n'
  1077  00FF27  67                 	db	103	;'g'
  1078  00FF28  6C                 	db	108	;'l'
  1079  00FF29  65                 	db	101	;'e'
  1080  00FF2A  3A                 	db	58	;':'
  1081  00FF2B  25                 	db	37
  1082  00FF2C  64                 	db	100	;'d'
  1083  00FF2D  0A                 	db	10
  1084  00FF2E  4C                 	db	76	;'L'
  1085  00FF2F  65                 	db	101	;'e'
  1086  00FF30  66                 	db	102	;'f'
  1087  00FF31  74                 	db	116	;'t'
  1088  00FF32  20                 	db	32
  1089  00FF33  42                 	db	66	;'B'
  1090  00FF34  75                 	db	117	;'u'
  1091  00FF35  6D                 	db	109	;'m'
  1092  00FF36  70                 	db	112	;'p'
  1093  00FF37  3A                 	db	58	;':'
  1094  00FF38  25                 	db	37
  1095  00FF39  75                 	db	117	;'u'
  1096  00FF3A  0A                 	db	10
  1097  00FF3B  52                 	db	82	;'R'
  1098  00FF3C  69                 	db	105	;'i'
  1099  00FF3D  67                 	db	103	;'g'
  1100  00FF3E  68                 	db	104	;'h'
  1101  00FF3F  74                 	db	116	;'t'
  1102  00FF40  42                 	db	66	;'B'
  1103  00FF41  75                 	db	117	;'u'
  1104  00FF42  6D                 	db	109	;'m'
  1105  00FF43  70                 	db	112	;'p'
  1106  00FF44  3A                 	db	58	;':'
  1107  00FF45  25                 	db	37
  1108  00FF46  75                 	db	117	;'u'
  1109  00FF47  0A                 	db	10
  1110  00FF48  41                 	db	65	;'A'
  1111  00FF49  6E                 	db	110	;'n'
  1112  00FF4A  67                 	db	103	;'g'
  1113  00FF4B  6C                 	db	108	;'l'
  1114  00FF4C  65                 	db	101	;'e'
  1115  00FF4D  54                 	db	84	;'T'
  1116  00FF4E  6F                 	db	111	;'o'
  1117  00FF4F  54                 	db	84	;'T'
  1118  00FF50  75                 	db	117	;'u'
  1119  00FF51  72                 	db	114	;'r'
  1120  00FF52  6E                 	db	110	;'n'
  1121  00FF53  3A                 	db	58	;':'
  1122  00FF54  20                 	db	32
  1123  00FF55  25                 	db	37
  1124  00FF56  64                 	db	100	;'d'
  1125  00FF57  0A                 	db	10
  1126  00FF58  00                 	db	0
  1127  00FF59                     STR_4:
  1128  00FF59  43                 	db	67	;'C'
  1129  00FF5A  6C                 	db	108	;'l'
  1130  00FF5B  6F                 	db	111	;'o'
  1131  00FF5C  73                 	db	115	;'s'
  1132  00FF5D  65                 	db	101	;'e'
  1133  00FF5E  73                 	db	115	;'s'
  1134  00FF5F  74                 	db	116	;'t'
  1135  00FF60  20                 	db	32
  1136  00FF61  57                 	db	87	;'W'
  1137  00FF62  61                 	db	97	;'a'
  1138  00FF63  6C                 	db	108	;'l'
  1139  00FF64  6C                 	db	108	;'l'
  1140  00FF65  3A                 	db	58	;':'
  1141  00FF66  25                 	db	37
  1142  00FF67  75                 	db	117	;'u'
  1143  00FF68  0A                 	db	10
  1144  00FF69  43                 	db	67	;'C'
  1145  00FF6A  6C                 	db	108	;'l'
  1146  00FF6B  6F                 	db	111	;'o'
  1147  00FF6C  73                 	db	115	;'s'
  1148  00FF6D  65                 	db	101	;'e'
  1149  00FF6E  73                 	db	115	;'s'
  1150  00FF6F  74                 	db	116	;'t'
  1151  00FF70  20                 	db	32
  1152  00FF71  41                 	db	65	;'A'
  1153  00FF72  6E                 	db	110	;'n'
  1154  00FF73  67                 	db	103	;'g'
  1155  00FF74  6C                 	db	108	;'l'
  1156  00FF75  65                 	db	101	;'e'
  1157  00FF76  3A                 	db	58	;':'
  1158  00FF77  25                 	db	37
  1159  00FF78  64                 	db	100	;'d'
  1160  00FF79  0A                 	db	10
  1161  00FF7A  4C                 	db	76	;'L'
  1162  00FF7B  65                 	db	101	;'e'
  1163  00FF7C  66                 	db	102	;'f'
  1164  00FF7D  74                 	db	116	;'t'
  1165  00FF7E  20                 	db	32
  1166  00FF7F  42                 	db	66	;'B'
  1167  00FF80  75                 	db	117	;'u'
  1168  00FF81  6D                 	db	109	;'m'
  1169  00FF82  70                 	db	112	;'p'
  1170  00FF83  3A                 	db	58	;':'
  1171  00FF84  25                 	db	37
  1172  00FF85  75                 	db	117	;'u'
  1173  00FF86  0A                 	db	10
  1174  00FF87  52                 	db	82	;'R'
  1175  00FF88  69                 	db	105	;'i'
  1176  00FF89  67                 	db	103	;'g'
  1177  00FF8A  68                 	db	104	;'h'
  1178  00FF8B  74                 	db	116	;'t'
  1179  00FF8C  42                 	db	66	;'B'
  1180  00FF8D  75                 	db	117	;'u'
  1181  00FF8E  6D                 	db	109	;'m'
  1182  00FF8F  70                 	db	112	;'p'
  1183  00FF90  3A                 	db	58	;':'
  1184  00FF91  25                 	db	37
  1185  00FF92  75                 	db	117	;'u'
  1186  00FF93  0A                 	db	10
  1187  00FF94  00                 	db	0
  1188  00FF95                     STR_8:
  1189  00FF95  54                 	db	84	;'T'
  1190  00FF96  6F                 	db	111	;'o'
  1191  00FF97  74                 	db	116	;'t'
  1192  00FF98  61                 	db	97	;'a'
  1193  00FF99  6C                 	db	108	;'l'
  1194  00FF9A  20                 	db	32
  1195  00FF9B  44                 	db	68	;'D'
  1196  00FF9C  69                 	db	105	;'i'
  1197  00FF9D  73                 	db	115	;'s'
  1198  00FF9E  74                 	db	116	;'t'
  1199  00FF9F  61                 	db	97	;'a'
  1200  00FFA0  6E                 	db	110	;'n'
  1201  00FFA1  63                 	db	99	;'c'
  1202  00FFA2  65                 	db	101	;'e'
  1203  00FFA3  3A                 	db	58	;':'
  1204  00FFA4  25                 	db	37
  1205  00FFA5  75                 	db	117	;'u'
  1206  00FFA6  0A                 	db	10
  1207  00FFA7  4C                 	db	76	;'L'
  1208  00FFA8  65                 	db	101	;'e'
  1209  00FFA9  66                 	db	102	;'f'
  1210  00FFAA  74                 	db	116	;'t'
  1211  00FFAB  20                 	db	32
  1212  00FFAC  42                 	db	66	;'B'
  1213  00FFAD  75                 	db	117	;'u'
  1214  00FFAE  6D                 	db	109	;'m'
  1215  00FFAF  70                 	db	112	;'p'
  1216  00FFB0  3A                 	db	58	;':'
  1217  00FFB1  25                 	db	37
  1218  00FFB2  75                 	db	117	;'u'
  1219  00FFB3  0A                 	db	10
  1220  00FFB4  52                 	db	82	;'R'
  1221  00FFB5  69                 	db	105	;'i'
  1222  00FFB6  67                 	db	103	;'g'
  1223  00FFB7  68                 	db	104	;'h'
  1224  00FFB8  74                 	db	116	;'t'
  1225  00FFB9  20                 	db	32
  1226  00FFBA  42                 	db	66	;'B'
  1227  00FFBB  75                 	db	117	;'u'
  1228  00FFBC  6D                 	db	109	;'m'
  1229  00FFBD  70                 	db	112	;'p'
  1230  00FFBE  3A                 	db	58	;':'
  1231  00FFBF  25                 	db	37
  1232  00FFC0  75                 	db	117	;'u'
  1233  00FFC1  0A                 	db	10
  1234  00FFC2  00                 	db	0
  1235  00FFC3                     STR_17:
  1236  00FFC3  20                 	db	32
  1237  00FFC4  20                 	db	32
  1238  00FFC5  20                 	db	32
  1239  00FFC6  20                 	db	32
  1240  00FFC7  20                 	db	32
  1241  00FFC8  20                 	db	32
  1242  00FFC9  20                 	db	32
  1243  00FFCA  20                 	db	32
  1244  00FFCB  20                 	db	32
  1245  00FFCC  20                 	db	32
  1246  00FFCD  20                 	db	32
  1247  00FFCE  20                 	db	32
  1248  00FFCF  20                 	db	32
  1249  00FFD0  20                 	db	32
  1250  00FFD1  20                 	db	32
  1251  00FFD2  20                 	db	32
  1252  00FFD3  20                 	db	32
  1253  00FFD4  20                 	db	32
  1254  00FFD5  20                 	db	32
  1255  00FFD6  0A                 	db	10
  1256  00FFD7  00                 	db	0
  1257  00FFD8                     STR_16:
  1258  00FFD8  50                 	db	80	;'P'
  1259  00FFD9  6C                 	db	108	;'l'
  1260  00FFDA  65                 	db	101	;'e'
  1261  00FFDB  61                 	db	97	;'a'
  1262  00FFDC  73                 	db	115	;'s'
  1263  00FFDD  65                 	db	101	;'e'
  1264  00FFDE  20                 	db	32
  1265  00FFDF  73                 	db	115	;'s'
  1266  00FFE0  65                 	db	101	;'e'
  1267  00FFE1  6C                 	db	108	;'l'
  1268  00FFE2  65                 	db	101	;'e'
  1269  00FFE3  63                 	db	99	;'c'
  1270  00FFE4  74                 	db	116	;'t'
  1271  00FFE5  20                 	db	32
  1272  00FFE6  6D                 	db	109	;'m'
  1273  00FFE7  6F                 	db	111	;'o'
  1274  00FFE8  64                 	db	100	;'d'
  1275  00FFE9  65                 	db	101	;'e'
  1276  00FFEA  2E                 	db	46
  1277  00FFEB  0A                 	db	10
  1278  00FFEC  00                 	db	0
  1279  00FFED                     STR_2:
  1280  00FFED  44                 	db	68	;'D'
  1281  00FFEE  69                 	db	105	;'i'
  1282  00FFEF  73                 	db	115	;'s'
  1283  00FFF0  74                 	db	116	;'t'
  1284  00FFF1  61                 	db	97	;'a'
  1285  00FFF2  6E                 	db	110	;'n'
  1286  00FFF3  63                 	db	99	;'c'
  1287  00FFF4  65                 	db	101	;'e'
  1288  00FFF5  3A                 	db	58	;':'
  1289  00FFF6  20                 	db	32
  1290  00FFF7  25                 	db	37
  1291  00FFF8  64                 	db	100	;'d'
  1292  00FFF9  0A                 	db	10
  1293  00FFFA  00                 	db	0
  1294  00FFFB                     STR_1:
  1295  00FFFB  25                 	db	37
  1296  00FFFC  63                 	db	99	;'c'
  1297  00FFFD  00                 	db	0
  1298  0000                     
  1299                           ; #config settings
  1300  00FFFE  00                 	db	0	; dummy byte at the end
  1301  0000                     
  1302                           	psect	cinit
  1303  014D42                     __pcinit:
  1304                           	opt stack 0
  1305  014D42                     start_initialization:
  1306                           	opt stack 0
  1307  014D42                     __initialization:
  1308                           	opt stack 0
  1309                           
  1310                           ; Initialize objects allocated to BANK3 (14 bytes)
  1311                           ; load TBLPTR registers with __pidataBANK3
  1312  014D42  0E1A               	movlw	low __pidataBANK3
  1313  014D44  6EF6               	movwf	tblptrl,c
  1314  014D46  0E6E               	movlw	high __pidataBANK3
  1315  014D48  6EF7               	movwf	tblptrh,c
  1316  014D4A  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1317  014D4C  6EF8               	movwf	tblptru,c
  1318  014D4E  EE03  F0F1         	lfsr	0,__pdataBANK3
  1319  014D52  EE10 F00E          	lfsr	1,14
  1320  014D56                     copy_data0:
  1321  014D56  0009               	tblrd		*+
  1322  014D58  CFF5 FFEE          	movff	tablat,postinc0
  1323  014D5C  50E5               	movf	postdec1,w,c
  1324  014D5E  50E1               	movf	fsr1l,w,c
  1325  014D60  E1FA               	bnz	copy_data0
  1326                           
  1327                           ; Initialize objects allocated to BANK0 (7 bytes)
  1328                           ; load TBLPTR registers with __pidataBANK0
  1329  014D62  0ED6               	movlw	low __pidataBANK0
  1330  014D64  6EF6               	movwf	tblptrl,c
  1331  014D66  0E6E               	movlw	high __pidataBANK0
  1332  014D68  6EF7               	movwf	tblptrh,c
  1333  014D6A  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1334  014D6C  6EF8               	movwf	tblptru,c
  1335  014D6E  EE00  F0F9         	lfsr	0,__pdataBANK0
  1336  014D72  EE10 F007          	lfsr	1,7
  1337  014D76                     copy_data1:
  1338  014D76  0009               	tblrd		*+
  1339  014D78  CFF5 FFEE          	movff	tablat,postinc0
  1340  014D7C  50E5               	movf	postdec1,w,c
  1341  014D7E  50E1               	movf	fsr1l,w,c
  1342  014D80  E1FA               	bnz	copy_data1
  1343                           
  1344                           ; Initialize objects allocated to COMRAM (10 bytes)
  1345                           ; load TBLPTR registers with __pidataCOMRAM
  1346  014D82  0EA0               	movlw	low __pidataCOMRAM
  1347  014D84  6EF6               	movwf	tblptrl,c
  1348  014D86  0E6E               	movlw	high __pidataCOMRAM
  1349  014D88  6EF7               	movwf	tblptrh,c
  1350  014D8A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1351  014D8C  6EF8               	movwf	tblptru,c
  1352  014D8E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1353  014D92  EE10 F00A          	lfsr	1,10
  1354  014D96                     copy_data2:
  1355  014D96  0009               	tblrd		*+
  1356  014D98  CFF5 FFEE          	movff	tablat,postinc0
  1357  014D9C  50E5               	movf	postdec1,w,c
  1358  014D9E  50E1               	movf	fsr1l,w,c
  1359  014DA0  E1FA               	bnz	copy_data2
  1360                           
  1361                           ; Clear objects allocated to BIGRAM (300 bytes)
  1362  014DA2  EE04  F0B4         	lfsr	0,__pbssBIGRAM
  1363  014DA6  EE11 F02C          	lfsr	1,300
  1364  014DAA                     clear_0:
  1365  014DAA  6AEE               	clrf	postinc0,c
  1366  014DAC  50E5               	movf	postdec1,w,c
  1367  014DAE  50E1               	movf	fsr1l,w,c
  1368  014DB0  E1FC               	bnz	clear_0
  1369  014DB2  50E2               	movf	fsr1h,w,c
  1370  014DB4  E1FA               	bnz	clear_0
  1371                           
  1372                           ; Clear objects allocated to BANK4 (170 bytes)
  1373  014DB6  EE04  F000         	lfsr	0,__pbssBANK4
  1374  014DBA  0EAA               	movlw	170
  1375  014DBC                     clear_1:
  1376  014DBC  6AEE               	clrf	postinc0,c
  1377  014DBE  06E8               	decf	wreg,f,c
  1378  014DC0  E1FD               	bnz	clear_1
  1379                           
  1380                           ; Clear objects allocated to BANK3 (241 bytes)
  1381  014DC2  EE03  F000         	lfsr	0,__pbssBANK3
  1382  014DC6  0EF1               	movlw	241
  1383  014DC8                     clear_2:
  1384  014DC8  6AEE               	clrf	postinc0,c
  1385  014DCA  06E8               	decf	wreg,f,c
  1386  014DCC  E1FD               	bnz	clear_2
  1387                           
  1388                           ; Clear objects allocated to BANK0 (88 bytes)
  1389  014DCE  EE00  F060         	lfsr	0,__pbssBANK0
  1390  014DD2  0E58               	movlw	88
  1391  014DD4                     clear_3:
  1392  014DD4  6AEE               	clrf	postinc0,c
  1393  014DD6  06E8               	decf	wreg,f,c
  1394  014DD8  E1FD               	bnz	clear_3
  1395                           
  1396                           ; Clear objects allocated to COMRAM (30 bytes)
  1397  014DDA  EE00  F029         	lfsr	0,__pbssCOMRAM
  1398  014DDE  0E1E               	movlw	30
  1399  014DE0                     clear_4:
  1400  014DE0  6AEE               	clrf	postinc0,c
  1401  014DE2  06E8               	decf	wreg,f,c
  1402  014DE4  E1FD               	bnz	clear_4
  1403  014DE6                     end_of_initialization:
  1404                           	opt stack 0
  1405  014DE6                     __end_of__initialization:
  1406                           	opt stack 0
  1407  014DE6  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1408  014DE8  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1409  014DEA  0100               	movlb	0
  1410  014DEC  EFC0  F0A0         	goto	_main	;jump to C main() function
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           postdec1	equ	0xFE5
  1418                           fsr1h	equ	0xFE2
  1419                           fsr1l	equ	0xFE1
  1420                           
  1421                           	psect	bssCOMRAM
  1422  000029                     __pbssCOMRAM:
  1423                           	opt stack 0
  1424  000029                     _COUNTER:
  1425                           	opt stack 0
  1426  000029                     	ds	2
  1427  00002B                     HMI_GRender@a:
  1428                           	opt stack 0
  1429  00002B                     	ds	2
  1430  00002D                     SPI_Send9@dat:
  1431                           	opt stack 0
  1432  00002D                     	ds	2
  1433  00002F                     _iRDropCaster:
  1434                           	opt stack 0
  1435  00002F                     	ds	1
  1436  000030                     _iRVirtualWall:
  1437                           	opt stack 0
  1438  000030                     	ds	1
  1439  000031                     _iRCliffR:
  1440                           	opt stack 0
  1441  000031                     	ds	1
  1442  000032                     _iRCliffFR:
  1443                           	opt stack 0
  1444  000032                     	ds	1
  1445  000033                     _iRCliffFL:
  1446                           	opt stack 0
  1447  000033                     	ds	1
  1448  000034                     _iRCliffL:
  1449                           	opt stack 0
  1450  000034                     	ds	1
  1451  000035                     _iRWall:
  1452                           	opt stack 0
  1453  000035                     	ds	1
  1454  000036                     _iRBumpDrop:
  1455                           	opt stack 0
  1456  000036                     	ds	1
  1457  000037                     _iRScriptIndex:
  1458                           	opt stack 0
  1459  000037                     	ds	1
  1460  000038                     _u:
  1461                           	opt stack 0
  1462  000038                     	ds	1
  1463  000039                     _j:
  1464                           	opt stack 0
  1465  000039                     	ds	1
  1466  00003A                     _i:
  1467                           	opt stack 0
  1468  00003A                     	ds	1
  1469  00003B                     rand@screw:
  1470                           	opt stack 0
  1471  00003B                     	ds	1
  1472  00003C                     _ADC_Initialised:
  1473                           	opt stack 0
  1474  00003C                     	ds	1
  1475  00003D                     OutSeg@a:
  1476                           	opt stack 0
  1477  00003D                     	ds	1
  1478  00003E                     OutSeg@segset:
  1479                           	opt stack 0
  1480  00003E                     	ds	1
  1481  00003F                     OutSeg@cur:
  1482                           	opt stack 0
  1483  00003F                     	ds	1
  1484  000040                     _I2C1T:
  1485                           	opt stack 0
  1486  000040                     	ds	7
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1h	equ	0xFE2
  1495                           fsr1l	equ	0xFE1
  1496                           
  1497                           	psect	dataCOMRAM
  1498  000047                     __pdataCOMRAM:
  1499                           	opt stack 0
  1500  000047                     _gCursor:
  1501                           	opt stack 0
  1502  000047                     	ds	4
  1503  00004B                     _Bus_State:
  1504                           	opt stack 0
  1505  00004B                     	ds	1
  1506  00004C                     	ds	1
  1507  00004D                     	ds	1
  1508  00004E                     	ds	1
  1509  00004F                     _l:
  1510                           	opt stack 0
  1511  00004F                     	ds	1
  1512  000050                     _w:
  1513                           	opt stack 0
  1514  000050                     	ds	1
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1h	equ	0xFE2
  1523                           fsr1l	equ	0xFE1
  1524                           
  1525                           	psect	bssBANK0
  1526  000060                     __pbssBANK0:
  1527                           	opt stack 0
  1528  000060                     _lQueue:
  1529                           	opt stack 0
  1530  000060                     	ds	3
  1531  000063                     _lStepFunction:
  1532                           	opt stack 0
  1533  000063                     	ds	3
  1534  000066                     _dummy1:
  1535                           	opt stack 0
  1536  000066                     	ds	2
  1537  000068                     _dist:
  1538                           	opt stack 0
  1539  000068                     	ds	2
  1540  00006A                     _angleToClosestWall:
  1541                           	opt stack 0
  1542  00006A                     	ds	2
  1543  00006C                     _IRValue:
  1544                           	opt stack 0
  1545  00006C                     	ds	2
  1546  00006E                     _Stepstomin:
  1547                           	opt stack 0
  1548  00006E                     	ds	2
  1549  000070                     _StepRotate:
  1550                           	opt stack 0
  1551  000070                     	ds	2
  1552  000072                     _distanceTotal:
  1553                           	opt stack 0
  1554  000072                     	ds	2
  1555  000074                     _iRAngle:
  1556                           	opt stack 0
  1557  000074                     	ds	2
  1558  000076                     _iRDistance:
  1559                           	opt stack 0
  1560  000076                     	ds	2
  1561  000078                     _pShiftVal:
  1562                           	opt stack 0
  1563  000078                     	ds	2
  1564  00007A                     _val:
  1565                           	opt stack 0
  1566  00007A                     	ds	2
  1567  00007C                     _lMotor:
  1568                           	opt stack 0
  1569  00007C                     	ds	2
  1570  00007E                     _lCurrent:
  1571                           	opt stack 0
  1572  00007E                     	ds	2
  1573  000080                     _gBackcolour:
  1574                           	opt stack 0
  1575  000080                     	ds	2
  1576  000082                     _correctOrientation:
  1577                           	opt stack 0
  1578  000082                     	ds	1
  1579  000083                     _iRDropLeft:
  1580                           	opt stack 0
  1581  000083                     	ds	1
  1582  000084                     _iRDropRight:
  1583                           	opt stack 0
  1584  000084                     	ds	1
  1585  000085                     _iRBumpLeft:
  1586                           	opt stack 0
  1587  000085                     	ds	1
  1588  000086                     _iRBumpRight:
  1589                           	opt stack 0
  1590  000086                     	ds	1
  1591  000087                     Event_TestButton@j:
  1592                           	opt stack 0
  1593  000087                     	ds	1
  1594  000088                     Timer2_Init@PRE:
  1595                           	opt stack 0
  1596  000088                     	ds	1
  1597  000089                     Timer2_Init@INDEX:
  1598                           	opt stack 0
  1599  000089                     	ds	1
  1600  00008A                     Timer0_Init@PRE:
  1601                           	opt stack 0
  1602  00008A                     	ds	1
  1603  00008B                     _INDEX:
  1604                           	opt stack 0
  1605  00008B                     	ds	1
  1606  00008C                     _lBufferY:
  1607                           	opt stack 0
  1608  00008C                     	ds	1
  1609  00008D                     _lBufferX:
  1610                           	opt stack 0
  1611  00008D                     	ds	1
  1612  00008E                     _clearall:
  1613                           	opt stack 0
  1614  00008E                     	ds	1
  1615  00008F                     _PortE:
  1616                           	opt stack 0
  1617  00008F                     	ds	10
  1618  000099                     _PortD:
  1619                           	opt stack 0
  1620  000099                     	ds	10
  1621  0000A3                     _PortC:
  1622                           	opt stack 0
  1623  0000A3                     	ds	10
  1624  0000AD                     _Stepper:
  1625                           	opt stack 0
  1626  0000AD                     	ds	6
  1627  0000B3                     _ADC_AN0:
  1628                           	opt stack 0
  1629  0000B3                     	ds	5
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	dataBANK0
  1641  0000F9                     __pdataBANK0:
  1642                           	opt stack 0
  1643  0000F9                     _TimerX:
  1644                           	opt stack 0
  1645  0000F9                     	ds	2
  1646  0000FB                     _MinDist:
  1647                           	opt stack 0
  1648  0000FB                     	ds	2
  1649  0000FD                     _gForecolour:
  1650                           	opt stack 0
  1651  0000FD                     	ds	2
  1652  0000FF                     _change:
  1653                           	opt stack 0
  1654  0000FF                     	ds	1
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1h	equ	0xFE2
  1663                           fsr1l	equ	0xFE1
  1664                           
  1665                           	psect	bssBANK3
  1666  000300                     __pbssBANK3:
  1667                           	opt stack 0
  1668  000300                     _lCBuffer:
  1669                           	opt stack 0
  1670  000300                     	ds	30
  1671  00031E                     _iRAngleSS:
  1672                           	opt stack 0
  1673  00031E                     	ds	4
  1674  000322                     _iRDistanceSS:
  1675                           	opt stack 0
  1676  000322                     	ds	4
  1677  000326                     Timer2_Init@DIV:
  1678                           	opt stack 0
  1679  000326                     	ds	4
  1680  00032A                     Timer0_Init@DIV:
  1681                           	opt stack 0
  1682  00032A                     	ds	4
  1683  00032E                     _gISR:
  1684                           	opt stack 0
  1685  00032E                     	ds	3
  1686  000331                     _I2C2_More:
  1687                           	opt stack 0
  1688  000331                     	ds	3
  1689  000334                     _I2C1_More:
  1690                           	opt stack 0
  1691  000334                     	ds	3
  1692  000337                     _I2C2_Done:
  1693                           	opt stack 0
  1694  000337                     	ds	3
  1695  00033A                     _I2C1_Done:
  1696                           	opt stack 0
  1697  00033A                     	ds	3
  1698  00033D                     _iRValue:
  1699                           	opt stack 0
  1700  00033D                     	ds	2
  1701  00033F                     _angle:
  1702                           	opt stack 0
  1703  00033F                     	ds	2
  1704  000341                     _mode:
  1705                           	opt stack 0
  1706  000341                     	ds	2
  1707  000343                     _dip:
  1708                           	opt stack 0
  1709  000343                     	ds	2
  1710  000345                     _angleTotal:
  1711                           	opt stack 0
  1712  000345                     	ds	2
  1713  000347                     _HMIBoard:
  1714                           	opt stack 0
  1715  000347                     	ds	58
  1716  000381                     _SPI1:
  1717                           	opt stack 0
  1718  000381                     	ds	11
  1719  00038C                     _SPI2:
  1720                           	opt stack 0
  1721  00038C                     	ds	11
  1722  000397                     _DIPSwitch:
  1723                           	opt stack 0
  1724  000397                     	ds	10
  1725  0003A1                     _TestButton:
  1726                           	opt stack 0
  1727  0003A1                     	ds	10
  1728  0003AB                     _PortG:
  1729                           	opt stack 0
  1730  0003AB                     	ds	10
  1731  0003B5                     _PortB:
  1732                           	opt stack 0
  1733  0003B5                     	ds	10
  1734  0003BF                     _PortA:
  1735                           	opt stack 0
  1736  0003BF                     	ds	10
  1737  0003C9                     _PortF:
  1738                           	opt stack 0
  1739  0003C9                     	ds	10
  1740  0003D3                     _I2C2T:
  1741                           	opt stack 0
  1742  0003D3                     	ds	7
  1743  0003DA                     _ADC_AN3:
  1744                           	opt stack 0
  1745  0003DA                     	ds	5
  1746  0003DF                     _ADC_AN2:
  1747                           	opt stack 0
  1748  0003DF                     	ds	5
  1749  0003E4                     _ADC_AN1:
  1750                           	opt stack 0
  1751  0003E4                     	ds	5
  1752  0003E9                     LCD_DrawRectangle@p4:
  1753                           	opt stack 0
  1754  0003E9                     	ds	4
  1755  0003ED                     LCD_DrawRectangle@p2:
  1756                           	opt stack 0
  1757  0003ED                     	ds	4
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           fsr1h	equ	0xFE2
  1766                           fsr1l	equ	0xFE1
  1767                           
  1768                           	psect	dataBANK3
  1769  0003F1                     __pdataBANK3:
  1770                           	opt stack 0
  1771  0003F1                     Console_Render@F6956:
  1772                           	opt stack 0
  1773  0003F1                     	ds	4
  1774  0003F5                     _gLineSize:
  1775                           	opt stack 0
  1776  0003F5                     	ds	4
  1777  0003F9                     _gCharSize:
  1778                           	opt stack 0
  1779  0003F9                     	ds	4
  1780  0003FD                     _corner:
  1781                           	opt stack 0
  1782  0003FD                     	ds	2
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           postdec1	equ	0xFE5
  1790                           fsr1h	equ	0xFE2
  1791                           fsr1l	equ	0xFE1
  1792                           
  1793                           	psect	bssBANK4
  1794  000400                     __pbssBANK4:
  1795                           	opt stack 0
  1796  000400                     _iRScriptStack:
  1797                           	opt stack 0
  1798  000400                     	ds	100
  1799  000464                     Console_MakeField@Fill:
  1800                           	opt stack 0
  1801  000464                     	ds	70
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812                           	psect	bssBIGRAM
  1813  0004B4                     __pbssBIGRAM:
  1814                           	opt stack 0
  1815  0004B4                     _lBuffer:
  1816                           	opt stack 0
  1817  0004B4                     	ds	300
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           postdec1	equ	0xFE5
  1825                           fsr1h	equ	0xFE2
  1826                           fsr1l	equ	0xFE1
  1827                           
  1828                           	psect	cstackBANK4
  1829  0004AA                     __pcstackBANK4:
  1830                           	opt stack 0
  1831  0004AA                     ??_findClosestWall:
  1832  0004AA                     ??_mode1:
  1833                           
  1834                           ; 1 bytes @ 0x0
  1835  0004AA                     	ds	2
  1836  0004AC                     mode1@moveto:
  1837                           	opt stack 0
  1838  0004AC                     _findClosestWall$15619:
  1839                           	opt stack 0
  1840                           
  1841                           ; 4 bytes @ 0x2
  1842  0004AC                     	ds	2
  1843  0004AE                     _mode1$15621:
  1844                           	opt stack 0
  1845                           
  1846                           ; 4 bytes @ 0x4
  1847  0004AE                     	ds	4
  1848  0004B2                     ??_main:
  1849                           
  1850                           ; 1 bytes @ 0x8
  1851  0004B2                     	ds	2
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           
  1862                           	psect	cstackBANK3
  1863  0003FF                     __pcstackBANK3:
  1864                           	opt stack 0
  1865  0003FF                     ??_move_and_rotate:
  1866                           
  1867                           ; 1 bytes @ 0x0
  1868  0003FF                     	ds	1
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1h	equ	0xFE2
  1877                           fsr1l	equ	0xFE1
  1878                           
  1879                           	psect	cstackBANK2
  1880  000200                     __pcstackBANK2:
  1881                           	opt stack 0
  1882  000200                     irobot_query_and_update@TXArray:
  1883                           	opt stack 0
  1884                           
  1885                           ; 256 bytes @ 0x0
  1886  000200                     	ds	256
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1h	equ	0xFE2
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	cstackBANK1
  1898  000100                     __pcstackBANK1:
  1899                           	opt stack 0
  1900  000100                     ___fltol@sign1:
  1901                           	opt stack 0
  1902  000100                     Button_Init@pInput:
  1903                           	opt stack 0
  1904  000100                     Port_Init@pInput:
  1905                           	opt stack 0
  1906  000100                     irobot_query_and_update@RXArray:
  1907                           	opt stack 0
  1908                           
  1909                           ; 256 bytes @ 0x0
  1910  000100                     	ds	1
  1911  000101                     ___fltol@exp1:
  1912                           	opt stack 0
  1913                           
  1914                           ; 1 bytes @ 0x1
  1915  000101                     	ds	1
  1916  000102                     Port_Init@pPort:
  1917                           	opt stack 0
  1918  000102                     Button_Init@pThreshold:
  1919                           	opt stack 0
  1920  000102                     _measureAndDisplayDistance$15620:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x2
  1924  000102                     	ds	1
  1925  000103                     ??_Port_Init:
  1926                           
  1927                           ; 1 bytes @ 0x3
  1928  000103                     	ds	1
  1929  000104                     Button_Init@pInitIO:
  1930                           	opt stack 0
  1931                           
  1932                           ; 3 bytes @ 0x4
  1933  000104                     	ds	2
  1934  000106                     correct_distance@_d1:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x6
  1938  000106                     	ds	1
  1939  000107                     Button_Init@pGetState:
  1940                           	opt stack 0
  1941                           
  1942                           ; 3 bytes @ 0x7
  1943  000107                     	ds	1
  1944  000108                     correct_distance@_d2:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x8
  1948  000108                     	ds	2
  1949  00010A                     correct_distance@_d3:
  1950                           	opt stack 0
  1951  00010A                     Button_Init@pFunction:
  1952                           	opt stack 0
  1953                           
  1954                           ; 3 bytes @ 0xA
  1955  00010A                     	ds	246
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           postdec1	equ	0xFE5
  1963                           fsr1h	equ	0xFE2
  1964                           fsr1l	equ	0xFE1
  1965                           
  1966                           	psect	cstackBANK0
  1967  0000B8                     __pcstackBANK0:
  1968                           	opt stack 0
  1969  0000B8                     ??_Console_ClearCursor:
  1970  0000B8                     ??_ADC_SetChannel:
  1971  0000B8                     ??_ADC_ConversionTime:
  1972  0000B8                     ??_ADC_SetupIO:
  1973  0000B8                     ??_sort_iRBumpDrop:
  1974  0000B8                     ?_load_iRScriptStack:
  1975                           	opt stack 0
  1976  0000B8                     ??_Console_Init:
  1977  0000B8                     ??_Console_NewLine:
  1978  0000B8                     ??_Console_FormFeed:
  1979  0000B8                     ??_HMI_SetButton:
  1980  0000B8                     ?_GetPortProperties:
  1981                           	opt stack 0
  1982  0000B8                     ?_GetPortPORT:
  1983                           	opt stack 0
  1984  0000B8                     ?_GetPortTRIS:
  1985                           	opt stack 0
  1986  0000B8                     ?_twos_complement_of:
  1987                           	opt stack 0
  1988  0000B8                     ?___wmul:
  1989                           	opt stack 0
  1990  0000B8                     ?___awdiv:
  1991                           	opt stack 0
  1992  0000B8                     ?___lwdiv:
  1993                           	opt stack 0
  1994  0000B8                     ?___fldiv:
  1995                           	opt stack 0
  1996  0000B8                     ?___lldiv:
  1997                           	opt stack 0
  1998  0000B8                     ?___xxtofl:
  1999                           	opt stack 0
  2000  0000B8                     Mode_Set@pMode:
  2001                           	opt stack 0
  2002  0000B8                     ToSegment@pCHR:
  2003                           	opt stack 0
  2004  0000B8                     HMI_SetBar@pValue:
  2005                           	opt stack 0
  2006  0000B8                     ADC_ClockDivision@pDivide:
  2007                           	opt stack 0
  2008  0000B8                     get_packet_size@packetID:
  2009                           	opt stack 0
  2010  0000B8                     eusart_putch@eusartSendChar:
  2011                           	opt stack 0
  2012  0000B8                     Port_GetPin@pInput:
  2013                           	opt stack 0
  2014  0000B8                     Port_GetQuad@pInput:
  2015                           	opt stack 0
  2016  0000B8                     SPI_DisableISR@pInput:
  2017                           	opt stack 0
  2018  0000B8                     SPI_DCS@pInput:
  2019                           	opt stack 0
  2020  0000B8                     SPI_Send@pInput:
  2021                           	opt stack 0
  2022  0000B8                     Byte_SetBit@pInput:
  2023                           	opt stack 0
  2024  0000B8                     Byte_GetBit@pInput:
  2025                           	opt stack 0
  2026  0000B8                     Byte_SetZone@pInput:
  2027                           	opt stack 0
  2028  0000B8                     Byte_GetZone@pInput:
  2029                           	opt stack 0
  2030  0000B8                     Byte_SetByte@pInput:
  2031                           	opt stack 0
  2032  0000B8                     delay_ms@ms:
  2033                           	opt stack 0
  2034  0000B8                     delay_us@us:
  2035                           	opt stack 0
  2036  0000B8                     reverse@input:
  2037                           	opt stack 0
  2038  0000B8                     twos_complement_of@complementValue:
  2039                           	opt stack 0
  2040  0000B8                     ___wmul@multiplier:
  2041                           	opt stack 0
  2042  0000B8                     ___awdiv@dividend:
  2043                           	opt stack 0
  2044  0000B8                     ___lwdiv@dividend:
  2045                           	opt stack 0
  2046  0000B8                     MXK_Queue@pCallback:
  2047                           	opt stack 0
  2048  0000B8                     Timer0_Start@pFunction:
  2049                           	opt stack 0
  2050  0000B8                     ___lldiv@dividend:
  2051                           	opt stack 0
  2052  0000B8                     ___fldiv@b:
  2053                           	opt stack 0
  2054  0000B8                     ___xxtofl@val:
  2055                           	opt stack 0
  2056                           
  2057                           ; 4 bytes @ 0x0
  2058  0000B8                     	ds	1
  2059  0000B9                     ADC_SetChannel@pChannel:
  2060                           	opt stack 0
  2061  0000B9                     ADC_ClockDivision@reg:
  2062                           	opt stack 0
  2063  0000B9                     ADC_ConversionTime@pCount:
  2064                           	opt stack 0
  2065  0000B9                     rx_assign@packetIDValue:
  2066                           	opt stack 0
  2067  0000B9                     irobot_song_play@songNumber:
  2068                           	opt stack 0
  2069  0000B9                     HMI_SetSegments@pString:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x1
  2073  0000B9                     	ds	1
  2074  0000BA                     GetPortProperties@pInput:
  2075                           	opt stack 0
  2076  0000BA                     GetPortPORT@pInput:
  2077                           	opt stack 0
  2078  0000BA                     GetPortTRIS@pInput:
  2079                           	opt stack 0
  2080  0000BA                     Port_GetPin@pPin:
  2081                           	opt stack 0
  2082  0000BA                     Port_GetQuad@pQuad:
  2083                           	opt stack 0
  2084  0000BA                     SPI_Send@pData:
  2085                           	opt stack 0
  2086  0000BA                     Byte_SetBit@pBit:
  2087                           	opt stack 0
  2088  0000BA                     Byte_GetBit@pBit:
  2089                           	opt stack 0
  2090  0000BA                     Byte_SetZone@pMax:
  2091                           	opt stack 0
  2092  0000BA                     Byte_GetZone@pMax:
  2093                           	opt stack 0
  2094  0000BA                     Byte_SetByte@pValue:
  2095                           	opt stack 0
  2096  0000BA                     Console_Init@x:
  2097                           	opt stack 0
  2098  0000BA                     Console_FormFeed@x:
  2099                           	opt stack 0
  2100  0000BA                     ADC_SetupIO@pChannel:
  2101                           	opt stack 0
  2102  0000BA                     ADC_ClockDivision@unfound:
  2103                           	opt stack 0
  2104  0000BA                     rx_assign@byteNumber:
  2105                           	opt stack 0
  2106  0000BA                     reverse@length:
  2107                           	opt stack 0
  2108  0000BA                     ADC_Start@pInput:
  2109                           	opt stack 0
  2110  0000BA                     ___wmul@multiplicand:
  2111                           	opt stack 0
  2112  0000BA                     ___awdiv@divisor:
  2113                           	opt stack 0
  2114  0000BA                     ___lwdiv@divisor:
  2115                           	opt stack 0
  2116  0000BA                     delay_ms@u:
  2117                           	opt stack 0
  2118  0000BA                     delay_us@u:
  2119                           	opt stack 0
  2120  0000BA                     HMI_SetButton@reindex:
  2121                           	opt stack 0
  2122                           
  2123                           ; 4 bytes @ 0x2
  2124  0000BA                     	ds	1
  2125  0000BB                     ??_Port_GetPin:
  2126  0000BB                     ??_Port_GetQuad:
  2127  0000BB                     ??_Byte_GetBit:
  2128  0000BB                     ??_rx_assign:
  2129  0000BB                     LCD_Write@mode:
  2130                           	opt stack 0
  2131  0000BB                     Byte_SetBit@pValue:
  2132                           	opt stack 0
  2133  0000BB                     Byte_SetZone@pChunk:
  2134                           	opt stack 0
  2135  0000BB                     Byte_GetZone@pChunk:
  2136                           	opt stack 0
  2137  0000BB                     Console_Init@y:
  2138                           	opt stack 0
  2139  0000BB                     Console_FormFeed@y:
  2140                           	opt stack 0
  2141  0000BB                     OutSeg@pSegment:
  2142                           	opt stack 0
  2143  0000BB                     ADC_SetupIO@MASK:
  2144                           	opt stack 0
  2145  0000BB                     Motor_Move@pMotor:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x3
  2149  0000BB                     	ds	1
  2150  0000BC                     ??_Byte_SetBit:
  2151  0000BC                     ??_Console_IncrementCursor:
  2152  0000BC                     ??_OutSeg:
  2153  0000BC                     ??_ADC_Start:
  2154  0000BC                     ??___xxtofl:
  2155  0000BC                     LCD_Write@value:
  2156                           	opt stack 0
  2157  0000BC                     Byte_GetBit@Output:
  2158                           	opt stack 0
  2159  0000BC                     Byte_SetZone@pChunkSize:
  2160                           	opt stack 0
  2161  0000BC                     Byte_GetZone@pChunkSize:
  2162                           	opt stack 0
  2163  0000BC                     reverse@tempVar:
  2164                           	opt stack 0
  2165  0000BC                     ___awdiv@counter:
  2166                           	opt stack 0
  2167  0000BC                     ___lwdiv@counter:
  2168                           	opt stack 0
  2169  0000BC                     HMI_SetSegments@in:
  2170                           	opt stack 0
  2171  0000BC                     ADC_Init@pInput:
  2172                           	opt stack 0
  2173  0000BC                     ___wmul@product:
  2174                           	opt stack 0
  2175  0000BC                     ___lldiv@divisor:
  2176                           	opt stack 0
  2177  0000BC                     ___fldiv@a:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x4
  2181  0000BC                     	ds	1
  2182  0000BD                     ??_Byte_GetZone:
  2183  0000BD                     ?_Console_MakeField:
  2184                           	opt stack 0
  2185  0000BD                     Set_Addr_Window@ys:
  2186                           	opt stack 0
  2187  0000BD                     Set_Rotation@m:
  2188                           	opt stack 0
  2189  0000BD                     Port_GetPin@Output:
  2190                           	opt stack 0
  2191  0000BD                     Port_GetQuad@Output:
  2192                           	opt stack 0
  2193  0000BD                     Byte_SetZone@pValue:
  2194                           	opt stack 0
  2195  0000BD                     rx_assign@packetID:
  2196                           	opt stack 0
  2197  0000BD                     ___awdiv@sign:
  2198                           	opt stack 0
  2199  0000BD                     LCD_Word_Write@value:
  2200                           	opt stack 0
  2201  0000BD                     reverse@iterator:
  2202                           	opt stack 0
  2203  0000BD                     Motor_Move@pDelta:
  2204                           	opt stack 0
  2205  0000BD                     ___lwdiv@quotient:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x5
  2209  0000BD                     	ds	1
  2210  0000BE                     ?_irobot_query_and_update:
  2211                           	opt stack 0
  2212  0000BE                     ??_Byte_SetZone:
  2213  0000BE                     Set_Addr_Window@xe:
  2214                           	opt stack 0
  2215  0000BE                     Set_Rotation@rotation:
  2216                           	opt stack 0
  2217  0000BE                     Byte_GetZone@MASK:
  2218                           	opt stack 0
  2219  0000BE                     OutSeg@pInput:
  2220                           	opt stack 0
  2221  0000BE                     HMI_SetButton@pValue:
  2222                           	opt stack 0
  2223  0000BE                     ADC_Init@pChannel:
  2224                           	opt stack 0
  2225  0000BE                     MXK_BlockSwitchTo@CUR:
  2226                           	opt stack 0
  2227  0000BE                     MXK_SwitchTo@CUR:
  2228                           	opt stack 0
  2229  0000BE                     ___awdiv@quotient:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x6
  2233  0000BE                     	ds	1
  2234  0000BF                     ??_Console_MakeField:
  2235  0000BF                     ?___lwmod:
  2236                           	opt stack 0
  2237  0000BF                     Set_Addr_Window@ye:
  2238                           	opt stack 0
  2239  0000BF                     Byte_GetZone@Offset:
  2240                           	opt stack 0
  2241  0000BF                     OutSeg@out:
  2242                           	opt stack 0
  2243  0000BF                     HMI_SetButton@v:
  2244                           	opt stack 0
  2245  0000BF                     MXK_BlockSwitchTo@pModule:
  2246                           	opt stack 0
  2247  0000BF                     MXK_SwitchTo@pModule:
  2248                           	opt stack 0
  2249  0000BF                     ___lwmod@dividend:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x7
  2253  0000BF                     	ds	1
  2254  0000C0                     ??___fldiv:
  2255  0000C0                     ??_Console_Tab:
  2256  0000C0                     Set_Addr_Window@xs:
  2257                           	opt stack 0
  2258  0000C0                     Byte_GetZone@Output:
  2259                           	opt stack 0
  2260  0000C0                     ___xxtofl@sign:
  2261                           	opt stack 0
  2262  0000C0                     HMI_Render@a:
  2263                           	opt stack 0
  2264  0000C0                     ___lldiv@quotient:
  2265                           	opt stack 0
  2266                           
  2267                           ; 4 bytes @ 0x8
  2268  0000C0                     	ds	1
  2269  0000C1                     Byte_SetZone@Offset:
  2270                           	opt stack 0
  2271  0000C1                     ___xxtofl@exp:
  2272                           	opt stack 0
  2273  0000C1                     LCD_Fill@pColour:
  2274                           	opt stack 0
  2275  0000C1                     LCD_FillRectangle@pColour:
  2276                           	opt stack 0
  2277  0000C1                     Byte_GetPair@pInput:
  2278                           	opt stack 0
  2279  0000C1                     Console_MakeField@Index:
  2280                           	opt stack 0
  2281  0000C1                     ___lwmod@divisor:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x9
  2285  0000C1                     	ds	1
  2286  0000C2                     ??_load_iRScriptStack:
  2287  0000C2                     Byte_SetZone@MASK:
  2288                           	opt stack 0
  2289  0000C2                     ___xxtofl@arg:
  2290                           	opt stack 0
  2291                           
  2292                           ; 4 bytes @ 0xA
  2293  0000C2                     	ds	1
  2294  0000C3                     LCD_Fill@i:
  2295                           	opt stack 0
  2296  0000C3                     Byte_GetPair@pPair:
  2297                           	opt stack 0
  2298  0000C3                     Console_MakeField@pInput:
  2299                           	opt stack 0
  2300  0000C3                     ___lwmod@counter:
  2301                           	opt stack 0
  2302  0000C3                     Byte_SetPair@pInput:
  2303                           	opt stack 0
  2304  0000C3                     Byte_SetQuad@pInput:
  2305                           	opt stack 0
  2306  0000C3                     LCD_FillRectangle@pPoint:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0xB
  2310  0000C3                     	ds	1
  2311  0000C4                     LCD_Fill@j:
  2312                           	opt stack 0
  2313  0000C4                     ___lldiv@counter:
  2314                           	opt stack 0
  2315  0000C4                     ___fldiv@sign:
  2316                           	opt stack 0
  2317  0000C4                     Word_GetPair@pInput:
  2318                           	opt stack 0
  2319  0000C4                     itos@input:
  2320                           	opt stack 0
  2321  0000C4                     Console_MakeField@Column:
  2322                           	opt stack 0
  2323  0000C4                     load_iRScriptStack@loadByte:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0xC
  2327  0000C4                     	ds	1
  2328  0000C5                     Byte_SetPair@pPair:
  2329                           	opt stack 0
  2330  0000C5                     Byte_SetQuad@pQuad:
  2331                           	opt stack 0
  2332  0000C5                     Console_Tab@t:
  2333                           	opt stack 0
  2334  0000C5                     Timer0_Init@pFrequency:
  2335                           	opt stack 0
  2336  0000C5                     Timer2_Init@pFrequency:
  2337                           	opt stack 0
  2338  0000C5                     ___fldiv@rem:
  2339                           	opt stack 0
  2340                           
  2341                           ; 4 bytes @ 0xD
  2342  0000C5                     	ds	1
  2343  0000C6                     ?___flmul:
  2344                           	opt stack 0
  2345  0000C6                     Byte_SetPair@pValue:
  2346                           	opt stack 0
  2347  0000C6                     Byte_SetQuad@pValue:
  2348                           	opt stack 0
  2349  0000C6                     Word_GetPair@pPair:
  2350                           	opt stack 0
  2351  0000C6                     Console_Tab@i:
  2352                           	opt stack 0
  2353  0000C6                     load_iRScriptStack@bytesToLoad:
  2354                           	opt stack 0
  2355  0000C6                     itos@destination:
  2356                           	opt stack 0
  2357  0000C6                     _Console_MakeField$10974:
  2358                           	opt stack 0
  2359  0000C6                     ___flmul@b:
  2360                           	opt stack 0
  2361                           
  2362                           ; 4 bytes @ 0xE
  2363  0000C6                     	ds	1
  2364  0000C7                     Console_Tab@c:
  2365                           	opt stack 0
  2366  0000C7                     load_iRScriptStack@i:
  2367                           	opt stack 0
  2368  0000C7                     Port_SetPin@pInput:
  2369                           	opt stack 0
  2370  0000C7                     Port_Set@pInput:
  2371                           	opt stack 0
  2372  0000C7                     SPI_MinSpeed@pInput:
  2373                           	opt stack 0
  2374  0000C7                     SPI_MaxSpeed@pInput:
  2375                           	opt stack 0
  2376  0000C7                     Word_SetPair@pInput:
  2377                           	opt stack 0
  2378  0000C7                     PortProperty_Valid@pInput:
  2379                           	opt stack 0
  2380  0000C7                     LCD_FillRectangle@pSize:
  2381                           	opt stack 0
  2382                           
  2383                           ; 4 bytes @ 0xF
  2384  0000C7                     	ds	1
  2385  0000C8                     ??_irobot_query_and_update:
  2386  0000C8                     ??_Console_PrintChar:
  2387  0000C8                     Console_MakeField@x:
  2388                           	opt stack 0
  2389  0000C8                     irobot_leds@LEDBit:
  2390                           	opt stack 0
  2391  0000C8                     itos@Data:
  2392                           	opt stack 0
  2393  0000C8                     irobot_move@moveSpeed:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x10
  2397  0000C8                     	ds	1
  2398  0000C9                     ??_Timer2_Init:
  2399  0000C9                     ??_Timer0_Init:
  2400  0000C9                     Port_SetPin@pPin:
  2401                           	opt stack 0
  2402  0000C9                     Port_Set@pValue:
  2403                           	opt stack 0
  2404  0000C9                     Word_SetPair@pPair:
  2405                           	opt stack 0
  2406  0000C9                     PortProperty_Valid@pPinDrive:
  2407                           	opt stack 0
  2408  0000C9                     Console_MakeField@y:
  2409                           	opt stack 0
  2410  0000C9                     irobot_leds@powerColour:
  2411                           	opt stack 0
  2412  0000C9                     ___fldiv@new_exp:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x11
  2416  0000C9                     	ds	1
  2417  0000CA                     ??_Port_Set:
  2418  0000CA                     Port_SetPin@pValue:
  2419                           	opt stack 0
  2420  0000CA                     Word_SetPair@pValue:
  2421                           	opt stack 0
  2422  0000CA                     PortProperty_Valid@pPin:
  2423                           	opt stack 0
  2424  0000CA                     irobot_leds@powerLuminosity:
  2425                           	opt stack 0
  2426  0000CA                     LCD_DrawField@pField:
  2427                           	opt stack 0
  2428  0000CA                     itos@Length:
  2429                           	opt stack 0
  2430  0000CA                     irobot_move@moveTurnRadius:
  2431                           	opt stack 0
  2432  0000CA                     Timer2_Init@RDIV:
  2433                           	opt stack 0
  2434  0000CA                     ___flmul@a:
  2435                           	opt stack 0
  2436                           
  2437                           ; 4 bytes @ 0x12
  2438  0000CA                     	ds	1
  2439  0000CB                     ??_PortProperty_Valid:
  2440  0000CB                     ??_LCD_FillRectangle:
  2441  0000CB                     Port_SetPin@Type:
  2442                           	opt stack 0
  2443  0000CB                     Console_PrintChar@pInput:
  2444                           	opt stack 0
  2445  0000CB                     irobot_leds@isScript:
  2446                           	opt stack 0
  2447  0000CB                     Timer0_Init@pCPUClock:
  2448                           	opt stack 0
  2449  0000CB                     ___fldiv@grs:
  2450                           	opt stack 0
  2451                           
  2452                           ; 4 bytes @ 0x13
  2453  0000CB                     	ds	1
  2454  0000CC                     ??_irobot_move:
  2455  0000CC                     LED_Set@pValue:
  2456                           	opt stack 0
  2457  0000CC                     putch@c:
  2458                           	opt stack 0
  2459  0000CC                     irobot_led_power_on@powerOnColour:
  2460                           	opt stack 0
  2461  0000CC                     Port_TogglePin@pInput:
  2462                           	opt stack 0
  2463  0000CC                     itos@Out:
  2464                           	opt stack 0
  2465  0000CC                     LCD_DrawField@pPoint:
  2466                           	opt stack 0
  2467                           
  2468                           ; 4 bytes @ 0x14
  2469  0000CC                     	ds	1
  2470  0000CD                     ?_printf:
  2471                           	opt stack 0
  2472  0000CD                     LCD_FillRectangle@i:
  2473                           	opt stack 0
  2474  0000CD                     LED_Set@pLED:
  2475                           	opt stack 0
  2476  0000CD                     irobot_query_and_update@packetIDs:
  2477                           	opt stack 0
  2478  0000CD                     printf@f:
  2479                           	opt stack 0
  2480  0000CD                     PortProperty_Valid@Errors:
  2481                           	opt stack 0
  2482                           
  2483                           ; 16 bytes @ 0x15
  2484  0000CD                     	ds	1
  2485  0000CE                     ??___flmul:
  2486  0000CE                     LCD_FillRectangle@j:
  2487                           	opt stack 0
  2488  0000CE                     Port_TogglePin@pPin:
  2489                           	opt stack 0
  2490  0000CE                     HMI_SetNumber@pInput:
  2491                           	opt stack 0
  2492  0000CE                     Timer2_Init@pCPUClock:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x16
  2496  0000CE                     	ds	1
  2497  0000CF                     Port_TogglePin@Value:
  2498                           	opt stack 0
  2499  0000CF                     irobot_query_and_update@streamSize:
  2500                           	opt stack 0
  2501  0000CF                     ___fldiv@bexp:
  2502                           	opt stack 0
  2503  0000CF                     Timer0_Init@DIVIDE:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0x17
  2507  0000CF                     	ds	1
  2508  0000D0                     LED_Toggle@pLED:
  2509                           	opt stack 0
  2510  0000D0                     irobot_query_and_update@numberOfPacketRequests:
  2511                           	opt stack 0
  2512  0000D0                     irobot_move@isScript:
  2513                           	opt stack 0
  2514  0000D0                     ___fldiv@aexp:
  2515                           	opt stack 0
  2516  0000D0                     LCD_DrawField@pSize:
  2517                           	opt stack 0
  2518                           
  2519                           ; 4 bytes @ 0x18
  2520  0000D0                     	ds	1
  2521  0000D1                     Event_DIPSwitch@pState:
  2522                           	opt stack 0
  2523  0000D1                     Event_TestButton@pState:
  2524                           	opt stack 0
  2525  0000D1                     irobot_query_and_update@packetVariable:
  2526                           	opt stack 0
  2527  0000D1                     irobot_stop_motion@isScript:
  2528                           	opt stack 0
  2529  0000D1                     irobot_move_straight@straightSpeed:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x19
  2533  0000D1                     	ds	1
  2534  0000D2                     Event_DIPSwitch@Bar:
  2535                           	opt stack 0
  2536  0000D2                     irobot_query_and_update@j:
  2537                           	opt stack 0
  2538  0000D2                     ___flmul@sign:
  2539                           	opt stack 0
  2540  0000D2                     Timer2_Init@DIVIDE:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x1A
  2544  0000D2                     	ds	1
  2545  0000D3                     irobot_query_and_update@startIndex:
  2546                           	opt stack 0
  2547  0000D3                     ___flmul@aexp:
  2548                           	opt stack 0
  2549  0000D3                     Button_Poll@pButton:
  2550                           	opt stack 0
  2551  0000D3                     Motor_Speed@pMotor:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x1B
  2555  0000D3                     	ds	1
  2556  0000D4                     ??_LCD_DrawField:
  2557  0000D4                     irobot_query_and_update@i:
  2558                           	opt stack 0
  2559  0000D4                     ___flmul@grs:
  2560                           	opt stack 0
  2561                           
  2562                           ; 4 bytes @ 0x1C
  2563  0000D4                     	ds	1
  2564  0000D5                     Button_Poll@pIncrement:
  2565                           	opt stack 0
  2566  0000D5                     Motor_Speed@pFrequency:
  2567                           	opt stack 0
  2568  0000D5                     irobot_rotate@rotateAngle:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x1D
  2572  0000D5                     	ds	1
  2573  0000D6                     ??_Button_Poll:
  2574  0000D6                     LCD_DrawField@count:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x1E
  2578  0000D6                     	ds	1
  2579  0000D7                     irobot_rotate@rotateSpeed:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x1F
  2583  0000D7                     	ds	1
  2584  0000D8                     LCD_DrawField@xmax:
  2585                           	opt stack 0
  2586  0000D8                     ___flmul@bexp:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x20
  2590  0000D8                     	ds	1
  2591  0000D9                     ??_printf:
  2592  0000D9                     ??_irobot_rotate:
  2593  0000D9                     LCD_DrawField@ymax:
  2594                           	opt stack 0
  2595  0000D9                     ___flmul@prod:
  2596                           	opt stack 0
  2597                           
  2598                           ; 4 bytes @ 0x21
  2599  0000D9                     	ds	1
  2600  0000DA                     LCD_DrawField@i:
  2601                           	opt stack 0
  2602  0000DA                     printf@prec:
  2603                           	opt stack 0
  2604  0000DA                     Port_Set@TypeRequired:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x22
  2608  0000DA                     	ds	1
  2609  0000DB                     ??_Console_Render:
  2610  0000DB                     Button_Poll@Pin:
  2611                           	opt stack 0
  2612  0000DB                     irobot_rotate@isScript:
  2613                           	opt stack 0
  2614  0000DB                     printf@flag:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x23
  2618  0000DB                     	ds	1
  2619  0000DC                     Port_Set@TypeActual:
  2620                           	opt stack 0
  2621  0000DC                     irobot_rotate@rotateDirection:
  2622                           	opt stack 0
  2623  0000DC                     printf@ap:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x24
  2627  0000DC                     	ds	1
  2628  0000DD                     PortProperty_Valid@Pair:
  2629                           	opt stack 0
  2630  0000DD                     Console_Render@temp:
  2631                           	opt stack 0
  2632  0000DD                     ___flmul@temp:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x25
  2636  0000DD                     	ds	1
  2637  0000DE                     Port_Set@Type:
  2638                           	opt stack 0
  2639  0000DE                     Port_CheckPairType@pInput:
  2640                           	opt stack 0
  2641  0000DE                     Port_SetPinType@pInput:
  2642                           	opt stack 0
  2643  0000DE                     irobot_rotate@angleTotal:
  2644                           	opt stack 0
  2645  0000DE                     printf@val:
  2646                           	opt stack 0
  2647  0000DE                     Console_Render@lCursor:
  2648                           	opt stack 0
  2649                           
  2650                           ; 4 bytes @ 0x26
  2651  0000DE                     	ds	1
  2652  0000DF                     ?_ADC_Voltage:
  2653                           	opt stack 0
  2654  0000DF                     ADC_Voltage@pInput:
  2655                           	opt stack 0
  2656                           
  2657                           ; 2 bytes @ 0x27
  2658  0000DF                     	ds	1
  2659  0000E0                     Port_CheckPairType@pPair:
  2660                           	opt stack 0
  2661  0000E0                     Port_SetPinType@pPin:
  2662                           	opt stack 0
  2663  0000E0                     printf@c:
  2664                           	opt stack 0
  2665                           
  2666                           ; 1 bytes @ 0x28
  2667  0000E0                     	ds	1
  2668  0000E1                     Port_CheckPairType@pDrive:
  2669                           	opt stack 0
  2670  0000E1                     Port_SetPinType@pType:
  2671                           	opt stack 0
  2672                           
  2673                           ; 1 bytes @ 0x29
  2674  0000E1                     	ds	1
  2675  0000E2                     Port_CheckPairType@Pin1:
  2676                           	opt stack 0
  2677  0000E2                     Port_SetPinType@Output:
  2678                           	opt stack 0
  2679  0000E2                     Console_Render@x:
  2680                           	opt stack 0
  2681                           
  2682                           ; 1 bytes @ 0x2A
  2683  0000E2                     	ds	1
  2684  0000E3                     ??_ADC_Voltage:
  2685  0000E3                     Port_CheckPairType@Pin2:
  2686                           	opt stack 0
  2687  0000E3                     Console_Render@y:
  2688                           	opt stack 0
  2689  0000E3                     Port_SetPinType@Props:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x2B
  2693  0000E3                     	ds	1
  2694  0000E4                     Port_CheckPairType@Output:
  2695                           	opt stack 0
  2696                           
  2697                           ; 1 bytes @ 0x2C
  2698  0000E4                     	ds	1
  2699  0000E5                     LED_Init@pLED:
  2700                           	opt stack 0
  2701  0000E5                     Port_CheckPairType@Props:
  2702                           	opt stack 0
  2703  0000E5                     Motor_Init@pMotor:
  2704                           	opt stack 0
  2705  0000E5                     SPI_Init@pClock:
  2706                           	opt stack 0
  2707  0000E5                     ADC_Voltage@max:
  2708                           	opt stack 0
  2709                           
  2710                           ; 4 bytes @ 0x2D
  2711  0000E5                     	ds	2
  2712  0000E7                     Port_CheckQuadType@pInput:
  2713                           	opt stack 0
  2714  0000E7                     Motor_Init@pAddress:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x2F
  2718  0000E7                     	ds	2
  2719  0000E9                     Port_CheckQuadType@pQuad:
  2720                           	opt stack 0
  2721  0000E9                     SPI_Init@pChannel:
  2722                           	opt stack 0
  2723  0000E9                     ADC_Voltage@ref:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x31
  2727  0000E9                     	ds	1
  2728  0000EA                     Port_CheckQuadType@pDrive:
  2729                           	opt stack 0
  2730  0000EA                     SPI_Init@pMode:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x32
  2734  0000EA                     	ds	1
  2735  0000EB                     Port_CheckQuadType@Pair1:
  2736                           	opt stack 0
  2737  0000EB                     SPI_Init@pInput:
  2738                           	opt stack 0
  2739                           
  2740                           ; 2 bytes @ 0x33
  2741  0000EB                     	ds	1
  2742  0000EC                     Port_CheckQuadType@Pair2:
  2743                           	opt stack 0
  2744                           
  2745                           ; 1 bytes @ 0x34
  2746  0000EC                     	ds	1
  2747  0000ED                     ??_LCD_Init:
  2748  0000ED                     Port_CheckQuadType@Output:
  2749                           	opt stack 0
  2750  0000ED                     ADC_Voltage@output:
  2751                           	opt stack 0
  2752                           
  2753                           ; 4 bytes @ 0x35
  2754  0000ED                     	ds	1
  2755  0000EE                     Port_CheckPortType@pInput:
  2756                           	opt stack 0
  2757  0000EE                     Port_SetQuadType@pInput:
  2758                           	opt stack 0
  2759                           
  2760                           ; 2 bytes @ 0x36
  2761  0000EE                     	ds	1
  2762  0000EF                     LCD_Init@i:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x37
  2766  0000EF                     	ds	1
  2767  0000F0                     Port_CheckPortType@pDrive:
  2768                           	opt stack 0
  2769  0000F0                     Port_SetQuadType@pQuad:
  2770                           	opt stack 0
  2771                           
  2772                           ; 1 bytes @ 0x38
  2773  0000F0                     	ds	1
  2774  0000F1                     ?___fltol:
  2775                           	opt stack 0
  2776  0000F1                     Port_CheckPortType@Output:
  2777                           	opt stack 0
  2778  0000F1                     Port_SetQuadType@pType:
  2779                           	opt stack 0
  2780  0000F1                     ___fltol@f1:
  2781                           	opt stack 0
  2782                           
  2783                           ; 4 bytes @ 0x39
  2784  0000F1                     	ds	1
  2785  0000F2                     Port_SetQuadType@Output:
  2786                           	opt stack 0
  2787  0000F2                     Port_SetType@pInput:
  2788                           	opt stack 0
  2789                           
  2790                           ; 2 bytes @ 0x3A
  2791  0000F2                     	ds	1
  2792  0000F3                     HMI_Init@in:
  2793                           	opt stack 0
  2794                           
  2795                           ; 2 bytes @ 0x3B
  2796  0000F3                     	ds	1
  2797  0000F4                     Port_SetType@pType:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x3C
  2801  0000F4                     	ds	1
  2802  0000F5                     ??_Port_SetType:
  2803  0000F5                     ??___fltol:
  2804                           
  2805                           ; 1 bytes @ 0x3D
  2806  0000F5                     	ds	2
  2807  0000F7                     Port_SetType@Output:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x3F
  2811  0000F7                     	ds	1
  2812  0000F8                     Port_Init@i:
  2813                           	opt stack 0
  2814                           
  2815                           ; 1 bytes @ 0x40
  2816  0000F8                     	ds	1
  2817  0000F9                     tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           postdec1	equ	0xFE5
  2824                           fsr1h	equ	0xFE2
  2825                           fsr1l	equ	0xFE1
  2826                           
  2827                           ; 1 bytes @ 0x41
  2828                           
  2829                           	psect	cstackCOMRAM
  2830  000001                     __pcstackCOMRAM:
  2831                           	opt stack 0
  2832  000001                     i2Byte_SetBit@pInput:
  2833                           	opt stack 0
  2834  000001                     i2Byte_GetZone@pInput:
  2835                           	opt stack 0
  2836  000001                     i2delay_us@us:
  2837                           	opt stack 0
  2838  000001                     i2MXK_Queue@pCallback:
  2839                           	opt stack 0
  2840                           
  2841                           ; 3 bytes @ 0x0
  2842  000001                     	ds	2
  2843  000003                     i2Byte_SetBit@pBit:
  2844                           	opt stack 0
  2845  000003                     i2Byte_GetZone@pMax:
  2846                           	opt stack 0
  2847  000003                     i2delay_us@u:
  2848                           	opt stack 0
  2849                           
  2850                           ; 4 bytes @ 0x2
  2851  000003                     	ds	1
  2852  000004                     i2Byte_SetBit@pValue:
  2853                           	opt stack 0
  2854  000004                     i2Byte_GetZone@pChunk:
  2855                           	opt stack 0
  2856                           
  2857                           ; 1 bytes @ 0x3
  2858  000004                     	ds	1
  2859  000005                     ??i2_Byte_SetBit:
  2860  000005                     i2Byte_GetZone@pChunkSize:
  2861                           	opt stack 0
  2862                           
  2863                           ; 1 bytes @ 0x4
  2864  000005                     	ds	1
  2865  000006                     ??i2_Byte_GetZone:
  2866                           
  2867                           ; 1 bytes @ 0x5
  2868  000006                     	ds	1
  2869  000007                     i2Byte_GetZone@MASK:
  2870                           	opt stack 0
  2871  000007                     i2MXK_SwitchTo@CUR:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x6
  2875  000007                     	ds	1
  2876  000008                     i2Byte_GetZone@Offset:
  2877                           	opt stack 0
  2878  000008                     i2MXK_SwitchTo@pModule:
  2879                           	opt stack 0
  2880                           
  2881                           ; 1 bytes @ 0x7
  2882  000008                     	ds	1
  2883  000009                     i2Byte_GetZone@Output:
  2884                           	opt stack 0
  2885                           
  2886                           ; 1 bytes @ 0x8
  2887  000009                     	ds	1
  2888  00000A                     i2Byte_GetPair@pInput:
  2889                           	opt stack 0
  2890                           
  2891                           ; 2 bytes @ 0x9
  2892  00000A                     	ds	2
  2893  00000C                     i2Byte_GetPair@pPair:
  2894                           	opt stack 0
  2895                           
  2896                           ; 1 bytes @ 0xB
  2897  00000C                     	ds	1
  2898  00000D                     i2Word_GetPair@pInput:
  2899                           	opt stack 0
  2900                           
  2901                           ; 2 bytes @ 0xC
  2902  00000D                     	ds	2
  2903  00000F                     i2Word_GetPair@pPair:
  2904                           	opt stack 0
  2905                           
  2906                           ; 1 bytes @ 0xE
  2907  00000F                     	ds	1
  2908  000010                     i2Port_SetPin@pInput:
  2909                           	opt stack 0
  2910                           
  2911                           ; 2 bytes @ 0xF
  2912  000010                     	ds	2
  2913  000012                     i2Port_SetPin@pPin:
  2914                           	opt stack 0
  2915                           
  2916                           ; 1 bytes @ 0x11
  2917  000012                     	ds	1
  2918  000013                     i2Port_SetPin@pValue:
  2919                           	opt stack 0
  2920                           
  2921                           ; 1 bytes @ 0x12
  2922  000013                     	ds	1
  2923  000014                     i2Port_SetPin@Type:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x13
  2927  000014                     	ds	1
  2928  000015                     
  2929                           ; 1 bytes @ 0x14
  2930  000015                     	ds	2
  2931  000017                     ??_ISR_Function:
  2932                           
  2933                           ; 1 bytes @ 0x16
  2934  000017                     	ds	18
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1h	equ	0xFE2
  2943                           fsr1l	equ	0xFE1
  2944                           
  2945 ;;
  2946 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2947 ;;
  2948 ;; *************** function _main *****************
  2949 ;; Defined at:
  2950 ;;		line 484 in file "main.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;Total ram usage:        2 bytes
  2969 ;; Hardware stack levels required when called:   18
  2970 ;; This function calls:
  2971 ;;		_Console_Render
  2972 ;;		_HMI_Poll
  2973 ;;		_MXK_Dequeue
  2974 ;;		_MXK_Release
  2975 ;;		_MXK_SwitchTo
  2976 ;;		_getMode
  2977 ;;		_init
  2978 ;;		_measureAndDisplayDistance
  2979 ;;		_mode1
  2980 ;;		_mode2
  2981 ;;		_mode3
  2982 ;;		_mode4
  2983 ;;		_printf
  2984 ;; This function is called by:
  2985 ;;		Startup code after reset
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text0
  2990  014180                     __ptext0:
  2991                           	opt stack 0
  2992  014180                     _main:
  2993                           	opt stack 13
  2994                           
  2995                           ;main.c: 485: init();
  2996                           
  2997                           ;incstack = 0
  2998  014180  ECA2  F0A7         	call	_init	;wreg free
  2999  014184                     l2461:
  3000                           
  3001                           ;main.c: 487: getMode();
  3002  014184  EC74  F0A4         	call	_getMode	;wreg free
  3003                           
  3004                           ;main.c: 488: switch (mode) {
  3005  014188  D053               	goto	l2462
  3006  01418A                     
  3007                           ;main.c: 490: mode1();
  3008  01418A  ECBC  F088         	call	_mode1	;wreg free
  3009                           
  3010                           ;main.c: 491: break;
  3011  01418E  D068               	goto	l2464
  3012  014190                     
  3013                           ;main.c: 493: mode2();
  3014  014190  ECD3  F09F         	call	_mode2	;wreg free
  3015                           
  3016                           ;main.c: 494: break;
  3017  014194  D065               	goto	l2464
  3018  014196                     
  3019                           ;main.c: 496: mode3();
  3020  014196  EC06  F0B3         	call	_mode3	;wreg free
  3021                           
  3022                           ;main.c: 497: break;
  3023  01419A  D062               	goto	l2464
  3024  01419C                     
  3025                           ;main.c: 499: mode4();
  3026  01419C  ECF0  F098         	call	_mode4	;wreg free
  3027                           
  3028                           ;main.c: 500: break;
  3029  0141A0  D05F               	goto	l2464
  3030  0141A2                     
  3031                           ;main.c: 502: if (MXK_SwitchTo(eMXK_HMI)) {
  3032  0141A2  0E01               	movlw	1
  3033  0141A4  EC27  F0B3         	call	_MXK_SwitchTo
  3034  0141A8  0900               	iorlw	0
  3035  0141AA  B4D8               	btfsc	status,2,c
  3036  0141AC  D059               	goto	l2464
  3037                           
  3038                           ;main.c: 503: printf("%c", (char)35);
  3039  0141AE  0EFB               	movlw	low STR_1
  3040  0141B0  0100               	movlb	0	; () banked
  3041  0141B2  6FCD               	movwf	printf@f& (0+255),b
  3042  0141B4  0EFF               	movlw	high STR_1
  3043  0141B6  0100               	movlb	0	; () banked
  3044  0141B8  6FCE               	movwf	(printf@f+1)& (0+255),b
  3045  0141BA  0E00               	movlw	0
  3046  0141BC  0100               	movlb	0	; () banked
  3047  0141BE  6FD0               	movwf	(?_printf+3)& (0+255),b
  3048  0141C0  0E23               	movlw	35
  3049  0141C2  6FCF               	movwf	(?_printf+2)& (0+255),b
  3050  0141C4  ECD4  F094         	call	_printf	;wreg free
  3051                           
  3052                           ;main.c: 504: printf("Please select mode.\n");
  3053  0141C8  0ED8               	movlw	low STR_16
  3054  0141CA  0100               	movlb	0	; () banked
  3055  0141CC  6FCD               	movwf	printf@f& (0+255),b
  3056  0141CE  0EFF               	movlw	high STR_16
  3057  0141D0  0100               	movlb	0	; () banked
  3058  0141D2  6FCE               	movwf	(printf@f+1)& (0+255),b
  3059  0141D4  ECD4  F094         	call	_printf	;wreg free
  3060                           
  3061                           ;main.c: 505: printf("                   \n");
  3062  0141D8  0EC3               	movlw	low STR_17
  3063  0141DA  0100               	movlb	0	; () banked
  3064  0141DC  6FCD               	movwf	printf@f& (0+255),b
  3065  0141DE  0EFF               	movlw	high STR_17
  3066  0141E0  0100               	movlb	0	; () banked
  3067  0141E2  6FCE               	movwf	(printf@f+1)& (0+255),b
  3068  0141E4  ECD4  F094         	call	_printf	;wreg free
  3069                           
  3070                           ;main.c: 506: printf("                   \n");
  3071  0141E8  0EC3               	movlw	low STR_17
  3072  0141EA  0100               	movlb	0	; () banked
  3073  0141EC  6FCD               	movwf	printf@f& (0+255),b
  3074  0141EE  0EFF               	movlw	high STR_17
  3075  0141F0  0100               	movlb	0	; () banked
  3076  0141F2  6FCE               	movwf	(printf@f+1)& (0+255),b
  3077  0141F4  ECD4  F094         	call	_printf	;wreg free
  3078                           
  3079                           ;main.c: 507: printf("                   \n");
  3080  0141F8  0EC3               	movlw	low STR_17
  3081  0141FA  0100               	movlb	0	; () banked
  3082  0141FC  6FCD               	movwf	printf@f& (0+255),b
  3083  0141FE  0EFF               	movlw	high STR_17
  3084  014200  0100               	movlb	0	; () banked
  3085  014202  6FCE               	movwf	(printf@f+1)& (0+255),b
  3086  014204  ECD4  F094         	call	_printf	;wreg free
  3087                           
  3088                           ;main.c: 508: printf("                   \n");
  3089  014208  0EC3               	movlw	low STR_17
  3090  01420A  0100               	movlb	0	; () banked
  3091  01420C  6FCD               	movwf	printf@f& (0+255),b
  3092  01420E  0EFF               	movlw	high STR_17
  3093  014210  0100               	movlb	0	; () banked
  3094  014212  6FCE               	movwf	(printf@f+1)& (0+255),b
  3095  014214  ECD4  F094         	call	_printf	;wreg free
  3096                           
  3097                           ;main.c: 509: Console_Render();
  3098  014218  ECE8  F091         	call	_Console_Render	;wreg free
  3099                           
  3100                           ;main.c: 510: HMI_Poll();
  3101  01421C  ECFC  F0AD         	call	_HMI_Poll	;wreg free
  3102                           
  3103                           ;main.c: 511: if (MXK_Release())
  3104  014220  EC55  F0B6         	call	_MXK_Release	;wreg free
  3105  014224  0900               	iorlw	0
  3106  014226  B4D8               	btfsc	status,2,c
  3107  014228  D01B               	goto	l2464
  3108                           
  3109                           ;main.c: 512: MXK_Dequeue();
  3110  01422A  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3111                           
  3112                           ;main.c: 513: }
  3113                           ;main.c: 514: }
  3114  01422E  D018               	goto	l2464
  3115  014230                     l2462:
  3116  014230  C341  F4B2         	movff	_mode,??_main
  3117  014234  C342  F4B3         	movff	_mode+1,??_main+1
  3118                           
  3119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3120                           ; Switch size 1, requested type "space"
  3121                           ; Number of cases is 1, Range of values is 0 to 0
  3122                           ; switch strategies available:
  3123                           ; Name         Instructions Cycles
  3124                           ; simple_byte            4     3 (average)
  3125                           ;	Chosen strategy is simple_byte
  3126  014238  0104               	movlb	4	; () banked
  3127  01423A  51B3               	movf	(??_main+1)& (0+255),w,b
  3128  01423C  0A00               	xorlw	0	; case 0
  3129  01423E  A4D8               	btfss	status,2,c
  3130  014240  D7B0               	goto	l2468
  3131                           
  3132                           ; BSR set to: 4
  3133                           ; Switch size 1, requested type "space"
  3134                           ; Number of cases is 4, Range of values is 1 to 4
  3135                           ; switch strategies available:
  3136                           ; Name         Instructions Cycles
  3137                           ; simple_byte           13     7 (average)
  3138                           ;	Chosen strategy is simple_byte
  3139  014242  0104               	movlb	4	; () banked
  3140  014244  51B2               	movf	??_main& (0+255),w,b
  3141  014246  0A01               	xorlw	1	; case 1
  3142  014248  B4D8               	btfsc	status,2,c
  3143  01424A  D79F               	goto	l2463
  3144  01424C  0A03               	xorlw	3	; case 2
  3145  01424E  B4D8               	btfsc	status,2,c
  3146  014250  D79F               	goto	l2465
  3147  014252  0A01               	xorlw	1	; case 3
  3148  014254  B4D8               	btfsc	status,2,c
  3149  014256  D79F               	goto	l2466
  3150  014258  0A07               	xorlw	7	; case 4
  3151  01425A  B4D8               	btfsc	status,2,c
  3152  01425C  D79F               	goto	l2467
  3153  01425E  D7A1               	goto	l2468
  3154  014260                     l2464:
  3155                           
  3156                           ;main.c: 515: measureAndDisplayDistance();
  3157                           
  3158                           ; BSR set to: 4
  3159  014260  EC91  F0A9         	call	_measureAndDisplayDistance	;wreg free
  3160                           
  3161                           ;main.c: 516: }
  3162  014264  D78F               	goto	l2461
  3163  014266                     __end_of_main:
  3164                           	opt stack 0
  3165                           tblptru	equ	0xFF8
  3166                           tblptrh	equ	0xFF7
  3167                           tblptrl	equ	0xFF6
  3168                           tablat	equ	0xFF5
  3169                           postinc0	equ	0xFEE
  3170                           wreg	equ	0xFE8
  3171                           postdec1	equ	0xFE5
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           status	equ	0xFD8
  3175                           
  3176 ;; *************** function _mode4 *****************
  3177 ;; Defined at:
  3178 ;;		line 444 in file "main.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;		None
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      void 
  3185 ;; Registers used:
  3186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;Total ram usage:        0 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:   17
  3199 ;; This function calls:
  3200 ;;		_Console_Render
  3201 ;;		_MXK_Dequeue
  3202 ;;		_MXK_Release
  3203 ;;		_MXK_SwitchTo
  3204 ;;		_Motor_Move
  3205 ;;		_Motor_Speed
  3206 ;;		_correct_distance
  3207 ;;		_delay_ms
  3208 ;;		_findClosestWall
  3209 ;;		_irobot_song_play
  3210 ;;		_irobot_stop_motion
  3211 ;;		_measureAndDisplayDistance
  3212 ;;		_printf
  3213 ;;		_safeToGo
  3214 ;;		_update_bump_and_cliff
  3215 ;; This function is called by:
  3216 ;;		_main
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text1
  3221  0131E0                     __ptext1:
  3222                           	opt stack 0
  3223  0131E0                     _mode4:
  3224                           	opt stack 13
  3225                           
  3226                           ;main.c: 445: safeToGo();
  3227                           
  3228                           ;incstack = 0
  3229  0131E0  ECC5  F0B1         	call	_safeToGo	;wreg free
  3230                           
  3231                           ;main.c: 446: findClosestWall();
  3232  0131E4  EC00  F080         	call	_findClosestWall	;wreg free
  3233                           
  3234                           ;main.c: 447: delay_ms(100);
  3235  0131E8  0E00               	movlw	0
  3236  0131EA  0100               	movlb	0	; () banked
  3237  0131EC  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  3238  0131EE  0E64               	movlw	100
  3239  0131F0  6FB8               	movwf	delay_ms@ms& (0+255),b
  3240  0131F2  EC0F  F0AF         	call	_delay_ms	;wreg free
  3241                           
  3242                           ;main.c: 449: if (MXK_SwitchTo(eMXK_Motor)) {
  3243  0131F6  0E08               	movlw	8
  3244  0131F8  EC27  F0B3         	call	_MXK_SwitchTo
  3245  0131FC  0900               	iorlw	0
  3246  0131FE  B4D8               	btfsc	status,2,c
  3247  013200  D020               	goto	l2446
  3248                           
  3249                           ;main.c: 450: Motor_Speed(&Stepper, (100));
  3250  013202  0EAD               	movlw	low _Stepper
  3251  013204  0100               	movlb	0	; () banked
  3252  013206  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  3253  013208  0E00               	movlw	high _Stepper
  3254  01320A  0100               	movlb	0	; () banked
  3255  01320C  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3256  01320E  0E00               	movlw	0
  3257  013210  0100               	movlb	0	; () banked
  3258  013212  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3259  013214  0E64               	movlw	100
  3260  013216  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  3261  013218  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  3262                           
  3263                           ;main.c: 451: Motor_Move(&Stepper, -50);
  3264  01321C  0EAD               	movlw	low _Stepper
  3265  01321E  0100               	movlb	0	; () banked
  3266  013220  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  3267  013222  0E00               	movlw	high _Stepper
  3268  013224  0100               	movlb	0	; () banked
  3269  013226  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3270  013228  0EFF               	movlw	255
  3271  01322A  0100               	movlb	0	; () banked
  3272  01322C  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3273  01322E  0ECE               	movlw	206
  3274  013230  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  3275  013232  EC3F  F0B4         	call	_Motor_Move	;wreg free
  3276                           
  3277                           ;main.c: 452: if (MXK_Release())
  3278  013236  EC55  F0B6         	call	_MXK_Release	;wreg free
  3279  01323A  0900               	iorlw	0
  3280  01323C  A4D8               	btfss	status,2,c
  3281                           
  3282                           ;main.c: 453: MXK_Dequeue();
  3283  01323E  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3284  013242                     l2446:
  3285                           
  3286                           ;main.c: 454: }
  3287                           ;main.c: 455: delay_ms(100);
  3288  013242  0E00               	movlw	0
  3289  013244  0100               	movlb	0	; () banked
  3290  013246  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  3291  013248  0E64               	movlw	100
  3292  01324A  6FB8               	movwf	delay_ms@ms& (0+255),b
  3293  01324C  EC0F  F0AF         	call	_delay_ms	;wreg free
  3294                           
  3295                           ;main.c: 456: measureAndDisplayDistance();
  3296  013250  EC91  F0A9         	call	_measureAndDisplayDistance	;wreg free
  3297                           
  3298                           ;main.c: 457: dummy1 = IRValue;
  3299  013254  C06C  F066         	movff	_IRValue,_dummy1
  3300  013258  C06D  F067         	movff	_IRValue+1,_dummy1+1
  3301                           
  3302                           ;main.c: 459: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3303  01325C  D004               	goto	l2447
  3304  01325E                     
  3305                           ;main.c: 460: correct_distance();
  3306  01325E  EC4A  F0A0         	call	_correct_distance	;wreg free
  3307                           
  3308                           ;main.c: 461: update_bump_and_cliff();
  3309  013262  EC22  F0B4         	call	_update_bump_and_cliff	;wreg free
  3310  013266                     l2447:
  3311  013266  0100               	movlb	0	; () banked
  3312  013268  5185               	movf	_iRBumpLeft& (0+255),w,b
  3313  01326A  A4D8               	btfss	status,2,c
  3314  01326C  D00C               	goto	u15490
  3315                           
  3316                           ; BSR set to: 0
  3317  01326E  0100               	movlb	0	; () banked
  3318  013270  5186               	movf	_iRBumpRight& (0+255),w,b
  3319  013272  A4D8               	btfss	status,2,c
  3320  013274  D008               	goto	u15490
  3321                           
  3322                           ; BSR set to: 0
  3323  013276  0100               	movlb	0	; () banked
  3324  013278  5184               	movf	_iRDropRight& (0+255),w,b
  3325  01327A  A4D8               	btfss	status,2,c
  3326  01327C  D004               	goto	u15490
  3327                           
  3328                           ; BSR set to: 0
  3329  01327E  0100               	movlb	0	; () banked
  3330  013280  5183               	movf	_iRDropLeft& (0+255),w,b
  3331  013282  B4D8               	btfsc	status,2,c
  3332  013284  D7EC               	goto	l2448
  3333  013286                     u15490:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 462: }
  3337                           ;main.c: 464: irobot_stop_motion(0);
  3338                           
  3339                           ; BSR set to: 0
  3340                           
  3341                           ; BSR set to: 0
  3342  013286  0E00               	movlw	0
  3343  013288  EC7B  F0B2         	call	_irobot_stop_motion
  3344                           
  3345                           ;main.c: 465: if (MXK_SwitchTo(eMXK_Motor)) {
  3346  01328C  0E08               	movlw	8
  3347  01328E  EC27  F0B3         	call	_MXK_SwitchTo
  3348  013292  0900               	iorlw	0
  3349  013294  B4D8               	btfsc	status,2,c
  3350  013296  D020               	goto	l2453
  3351                           
  3352                           ;main.c: 466: Motor_Speed(&Stepper, (100));
  3353  013298  0EAD               	movlw	low _Stepper
  3354  01329A  0100               	movlb	0	; () banked
  3355  01329C  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  3356  01329E  0E00               	movlw	high _Stepper
  3357  0132A0  0100               	movlb	0	; () banked
  3358  0132A2  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3359  0132A4  0E00               	movlw	0
  3360  0132A6  0100               	movlb	0	; () banked
  3361  0132A8  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3362  0132AA  0E64               	movlw	100
  3363  0132AC  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  3364  0132AE  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  3365                           
  3366                           ;main.c: 467: Motor_Move(&Stepper, 50);
  3367  0132B2  0EAD               	movlw	low _Stepper
  3368  0132B4  0100               	movlb	0	; () banked
  3369  0132B6  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  3370  0132B8  0E00               	movlw	high _Stepper
  3371  0132BA  0100               	movlb	0	; () banked
  3372  0132BC  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3373  0132BE  0E00               	movlw	0
  3374  0132C0  0100               	movlb	0	; () banked
  3375  0132C2  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3376  0132C4  0E32               	movlw	50
  3377  0132C6  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  3378  0132C8  EC3F  F0B4         	call	_Motor_Move	;wreg free
  3379                           
  3380                           ;main.c: 468: if (MXK_Release())
  3381  0132CC  EC55  F0B6         	call	_MXK_Release	;wreg free
  3382  0132D0  0900               	iorlw	0
  3383  0132D2  A4D8               	btfss	status,2,c
  3384                           
  3385                           ;main.c: 469: MXK_Dequeue();
  3386  0132D4  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3387  0132D8                     l2453:
  3388                           
  3389                           ;main.c: 470: }
  3390                           ;main.c: 471: if (MXK_SwitchTo(eMXK_HMI)) {
  3391  0132D8  0E01               	movlw	1
  3392  0132DA  EC27  F0B3         	call	_MXK_SwitchTo
  3393  0132DE  0900               	iorlw	0
  3394  0132E0  B4D8               	btfsc	status,2,c
  3395  0132E2  D037               	goto	l2455
  3396                           
  3397                           ;main.c: 472: printf("%c", (char)35);
  3398  0132E4  0EFB               	movlw	low STR_1
  3399  0132E6  0100               	movlb	0	; () banked
  3400  0132E8  6FCD               	movwf	printf@f& (0+255),b
  3401  0132EA  0EFF               	movlw	high STR_1
  3402  0132EC  0100               	movlb	0	; () banked
  3403  0132EE  6FCE               	movwf	(printf@f+1)& (0+255),b
  3404  0132F0  0E00               	movlw	0
  3405  0132F2  0100               	movlb	0	; () banked
  3406  0132F4  6FD0               	movwf	(?_printf+3)& (0+255),b
  3407  0132F6  0E23               	movlw	35
  3408  0132F8  6FCF               	movwf	(?_printf+2)& (0+255),b
  3409  0132FA  ECD4  F094         	call	_printf	;wreg free
  3410                           
  3411                           ;main.c: 473: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3412  0132FE  0E0D               	movlw	low STR_14
  3413  013300  0100               	movlb	0	; () banked
  3414  013302  6FCD               	movwf	printf@f& (0+255),b
  3415  013304  0EFF               	movlw	high STR_14
  3416  013306  0100               	movlb	0	; () banked
  3417  013308  6FCE               	movwf	(printf@f+1)& (0+255),b
  3418  01330A  C0FB  F0CF         	movff	_MinDist,?_printf+2
  3419  01330E  C0FC  F0D0         	movff	_MinDist+1,?_printf+3
  3420  013312  C06A  F0D1         	movff	_angleToClosestWall,?_printf+4
  3421  013316  C06B  F0D2         	movff	_angleToClosestWall+1,?_printf+5
  3422  01331A  C085  F0D3         	movff	_iRBumpLeft,?_printf+6
  3423  01331E  0100               	movlb	0	; () banked
  3424  013320  6BD4               	clrf	(?_printf+7)& (0+255),b
  3425  013322  C086  F0D5         	movff	_iRBumpRight,?_printf+8
  3426  013326  0100               	movlb	0	; () banked
  3427  013328  6BD6               	clrf	(?_printf+9)& (0+255),b
  3428  01332A  0EBD               	movlw	189
  3429  01332C  0100               	movlb	0	; () banked
  3430  01332E  256A               	addwf	_angleToClosestWall& (0+255),w,b
  3431  013330  0100               	movlb	0	; () banked
  3432  013332  6FD7               	movwf	(?_printf+10)& (0+255),b
  3433  013334  0EFF               	movlw	255
  3434  013336  0100               	movlb	0	; () banked
  3435  013338  216B               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3436  01333A  0100               	movlb	0	; () banked
  3437  01333C  6FD8               	movwf	(?_printf+11)& (0+255),b
  3438  01333E  ECD4  F094         	call	_printf	;wreg free
  3439                           
  3440                           ;main.c: 474: Console_Render();
  3441  013342  ECE8  F091         	call	_Console_Render	;wreg free
  3442                           
  3443                           ;main.c: 475: if (MXK_Release())
  3444  013346  EC55  F0B6         	call	_MXK_Release	;wreg free
  3445  01334A  0900               	iorlw	0
  3446  01334C  A4D8               	btfss	status,2,c
  3447                           
  3448                           ;main.c: 476: MXK_Dequeue();
  3449  01334E  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3450  013352                     l2455:
  3451                           
  3452                           ;main.c: 477: }
  3453                           ;main.c: 479: irobot_song_play(0);
  3454  013352  0E00               	movlw	0
  3455  013354  ECDE  F0B6         	call	_irobot_song_play
  3456                           
  3457                           ;main.c: 480: irobot_stop_motion(0);
  3458  013358  0E00               	movlw	0
  3459  01335A  EC7B  F0B2         	call	_irobot_stop_motion
  3460  01335E  0012               	return		;funcret
  3461  013360                     __end_of_mode4:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _findClosestWall *****************
  3475 ;; Defined at:
  3476 ;;		line 160 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:        6 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:   13
  3497 ;; This function calls:
  3498 ;;		_ADC_Start
  3499 ;;		_ADC_Voltage
  3500 ;;		_Console_Render
  3501 ;;		_HMI_Render
  3502 ;;		_HMI_SetNumber
  3503 ;;		_MXK_Dequeue
  3504 ;;		_MXK_Release
  3505 ;;		_MXK_SwitchTo
  3506 ;;		_Motor_Move
  3507 ;;		_Motor_Speed
  3508 ;;		___fldiv
  3509 ;;		___flmul
  3510 ;;		___fltol
  3511 ;;		___xxtofl
  3512 ;;		_delay_ms
  3513 ;;		_irobot_rotate
  3514 ;;		_printf
  3515 ;; This function is called by:
  3516 ;;		_mode4
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text2
  3521  010000                     __ptext2:
  3522                           	opt stack 0
  3523  010000                     _findClosestWall:
  3524                           	opt stack 16
  3525                           
  3526                           ;main.c: 161: correctOrientation = 0;
  3527                           
  3528                           ;incstack = 0
  3529  010000  0E00               	movlw	0
  3530  010002  0100               	movlb	0	; () banked
  3531  010004  6F82               	movwf	_correctOrientation& (0+255),b
  3532                           
  3533                           ;main.c: 162: StepRotate = 400;
  3534  010006  0E01               	movlw	1
  3535  010008  0100               	movlb	0	; () banked
  3536  01000A  6F71               	movwf	(_StepRotate+1)& (0+255),b
  3537  01000C  0E90               	movlw	144
  3538  01000E  6F70               	movwf	_StepRotate& (0+255),b
  3539                           
  3540                           ;main.c: 163: MinDist = 1000;
  3541  010010  0E03               	movlw	3
  3542  010012  0100               	movlb	0	; () banked
  3543  010014  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3544  010016  0EE8               	movlw	232
  3545  010018  6FFB               	movwf	_MinDist& (0+255),b
  3546                           
  3547                           ;main.c: 164: Stepstomin = 0;
  3548  01001A  0E00               	movlw	0
  3549  01001C  0100               	movlb	0	; () banked
  3550  01001E  6F6F               	movwf	(_Stepstomin+1)& (0+255),b
  3551  010020  0E00               	movlw	0
  3552  010022  6F6E               	movwf	_Stepstomin& (0+255),b
  3553                           
  3554                           ;main.c: 165: angleToClosestWall = 1000;
  3555  010024  0E03               	movlw	3
  3556  010026  0100               	movlb	0	; () banked
  3557  010028  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  3558  01002A  0EE8               	movlw	232
  3559  01002C  6F6A               	movwf	_angleToClosestWall& (0+255),b
  3560                           
  3561                           ;main.c: 166: IRValue = 0;
  3562  01002E  0E00               	movlw	0
  3563  010030  0100               	movlb	0	; () banked
  3564  010032  6F6D               	movwf	(_IRValue+1)& (0+255),b
  3565  010034  0E00               	movlw	0
  3566  010036  6F6C               	movwf	_IRValue& (0+255),b
  3567                           
  3568                           ;main.c: 167: TimerX = 8;
  3569  010038  0E00               	movlw	0
  3570  01003A  0100               	movlb	0	; () banked
  3571  01003C  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3572  01003E  0E08               	movlw	8
  3573  010040  6FF9               	movwf	_TimerX& (0+255),b
  3574                           
  3575                           ;main.c: 168: angle = 0;
  3576  010042  0E00               	movlw	0
  3577  010044  0103               	movlb	3	; () banked
  3578  010046  6F40               	movwf	(_angle+1)& (0+255),b
  3579  010048  0E00               	movlw	0
  3580  01004A  6F3F               	movwf	_angle& (0+255),b
  3581                           
  3582                           ;main.c: 169: while (StepRotate > 0) {
  3583  01004C  D15A               	goto	l2362
  3584  01004E                     
  3585                           ;main.c: 170: StepRotate--;
  3586                           
  3587                           ; BSR set to: 3
  3588  01004E  0100               	movlb	0	; () banked
  3589  010050  0770               	decf	_StepRotate& (0+255),f,b
  3590  010052  A0D8               	btfss	status,0,c
  3591  010054  0771               	decf	(_StepRotate+1)& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;main.c: 171: ADC_Start(&ADC_AN0);
  3595  010056  0EB3               	movlw	low _ADC_AN0
  3596  010058  0100               	movlb	0	; () banked
  3597  01005A  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  3598  01005C  0E00               	movlw	high _ADC_AN0
  3599  01005E  0100               	movlb	0	; () banked
  3600  010060  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3601  010062  ECD9  F0AB         	call	_ADC_Start	;wreg free
  3602                           
  3603                           ;main.c: 172: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3604  010066  0EB3               	movlw	low _ADC_AN0
  3605  010068  0100               	movlb	0	; () banked
  3606  01006A  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  3607  01006C  0E00               	movlw	high _ADC_AN0
  3608  01006E  0100               	movlb	0	; () banked
  3609  010070  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3610  010072  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  3611  010076  C0DF  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15619
  3612  01007A  C0E0  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15619+1
  3613  01007E  C0E1  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15619+2
  3614  010082  C0E2  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15619+3
  3615                           
  3616                           ;main.c: 172: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3617  010086  C4AC  F0BC         	movff	_findClosestWall$15619,___fldiv@a
  3618  01008A  C4AD  F0BD         	movff	_findClosestWall$15619+1,___fldiv@a+1
  3619  01008E  C4AE  F0BE         	movff	_findClosestWall$15619+2,___fldiv@a+2
  3620  010092  C4AF  F0BF         	movff	_findClosestWall$15619+3,___fldiv@a+3
  3621  010096  0E00               	movlw	0
  3622  010098  0100               	movlb	0	; () banked
  3623  01009A  6FB8               	movwf	___fldiv@b& (0+255),b
  3624  01009C  0E00               	movlw	0
  3625  01009E  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  3626  0100A0  0E6C               	movlw	108
  3627  0100A2  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  3628  0100A4  0E42               	movlw	66
  3629  0100A6  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  3630  0100A8  ECA9  F08A         	call	___fldiv	;wreg free
  3631  0100AC  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  3632  0100B0  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  3633  0100B4  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  3634  0100B8  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  3635  0100BC  EC55  F09E         	call	___fltol	;wreg free
  3636  0100C0  C0F1  F06C         	movff	?___fltol,_IRValue
  3637  0100C4  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  3638                           
  3639                           ;main.c: 173: if (MXK_SwitchTo(eMXK_HMI)) {
  3640  0100C8  0E01               	movlw	1
  3641  0100CA  EC27  F0B3         	call	_MXK_SwitchTo
  3642  0100CE  0900               	iorlw	0
  3643  0100D0  B4D8               	btfsc	status,2,c
  3644  0100D2  D00E               	goto	l2351
  3645                           
  3646                           ;main.c: 174: HMI_SetNumber(IRValue);
  3647  0100D4  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  3648  0100D8  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3649  0100DC  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  3650                           
  3651                           ;main.c: 175: HMI_Render();
  3652  0100E0  EC88  F0B3         	call	_HMI_Render	;wreg free
  3653                           
  3654                           ;main.c: 176: if (MXK_Release())
  3655  0100E4  EC55  F0B6         	call	_MXK_Release	;wreg free
  3656  0100E8  0900               	iorlw	0
  3657  0100EA  A4D8               	btfss	status,2,c
  3658                           
  3659                           ;main.c: 177: MXK_Dequeue();
  3660  0100EC  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3661  0100F0                     l2351:
  3662                           
  3663                           ;main.c: 178: }
  3664                           ;main.c: 179: if (IRValue < MinDist) {
  3665  0100F0  0100               	movlb	0	; () banked
  3666  0100F2  51FB               	movf	_MinDist& (0+255),w,b
  3667  0100F4  0100               	movlb	0	; () banked
  3668  0100F6  5D6C               	subwf	_IRValue& (0+255),w,b
  3669  0100F8  0100               	movlb	0	; () banked
  3670  0100FA  516D               	movf	(_IRValue+1)& (0+255),w,b
  3671  0100FC  0A80               	xorlw	128
  3672  0100FE  0104               	movlb	4	; () banked
  3673  010100  6FAA               	movwf	??_findClosestWall& (0+255),b
  3674  010102  0100               	movlb	0	; () banked
  3675  010104  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3676  010106  0A80               	xorlw	128
  3677  010108  0104               	movlb	4	; () banked
  3678  01010A  59AA               	subwfb	??_findClosestWall& (0+255),w,b
  3679  01010C  B0D8               	btfsc	status,0,c
  3680  01010E  D036               	goto	l2352
  3681                           
  3682                           ; BSR set to: 4
  3683                           ;main.c: 180: MinDist = IRValue;
  3684  010110  C06C  F0FB         	movff	_IRValue,_MinDist
  3685  010114  C06D  F0FC         	movff	_IRValue+1,_MinDist+1
  3686                           
  3687                           ;main.c: 181: Stepstomin = StepRotate;
  3688  010118  C070  F06E         	movff	_StepRotate,_Stepstomin
  3689  01011C  C071  F06F         	movff	_StepRotate+1,_Stepstomin+1
  3690                           
  3691                           ; BSR set to: 4
  3692                           ;main.c: 182: angleToClosestWall = Stepstomin * 0.675;
  3693  010120  0ECD               	movlw	205
  3694  010122  0100               	movlb	0	; () banked
  3695  010124  6FCA               	movwf	___flmul@a& (0+255),b
  3696  010126  0ECC               	movlw	204
  3697  010128  6FCB               	movwf	(___flmul@a+1)& (0+255),b
  3698  01012A  0E2C               	movlw	44
  3699  01012C  6FCC               	movwf	(___flmul@a+2)& (0+255),b
  3700  01012E  0E3F               	movlw	63
  3701  010130  6FCD               	movwf	(___flmul@a+3)& (0+255),b
  3702  010132  C06E  F0B8         	movff	_Stepstomin,___xxtofl@val
  3703  010136  C06F  F0B9         	movff	_Stepstomin+1,___xxtofl@val+1
  3704  01013A  0100               	movlb	0	; () banked
  3705  01013C  0E00               	movlw	0
  3706  01013E  BFB9               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3707  010140  0EFF               	movlw	-1
  3708  010142  6FBA               	movwf	(___xxtofl@val+2)& (0+255),b
  3709  010144  6FBB               	movwf	(___xxtofl@val+3)& (0+255),b
  3710  010146  0E01               	movlw	1
  3711  010148  ECED  F093         	call	___xxtofl
  3712  01014C  C0B8  F0C6         	movff	?___xxtofl,___flmul@b
  3713  010150  C0B9  F0C7         	movff	?___xxtofl+1,___flmul@b+1
  3714  010154  C0BA  F0C8         	movff	?___xxtofl+2,___flmul@b+2
  3715  010158  C0BB  F0C9         	movff	?___xxtofl+3,___flmul@b+3
  3716  01015C  EC5A  F084         	call	___flmul	;wreg free
  3717  010160  C0C6  F0F1         	movff	?___flmul,___fltol@f1
  3718  010164  C0C7  F0F2         	movff	?___flmul+1,___fltol@f1+1
  3719  010168  C0C8  F0F3         	movff	?___flmul+2,___fltol@f1+2
  3720  01016C  C0C9  F0F4         	movff	?___flmul+3,___fltol@f1+3
  3721  010170  EC55  F09E         	call	___fltol	;wreg free
  3722  010174  C0F1  F06A         	movff	?___fltol,_angleToClosestWall
  3723  010178  C0F2  F06B         	movff	?___fltol+1,_angleToClosestWall+1
  3724  01017C                     l2352:
  3725                           
  3726                           ;main.c: 183: }
  3727                           ;main.c: 184: if (MXK_SwitchTo(eMXK_Motor)) {
  3728  01017C  0E08               	movlw	8
  3729  01017E  EC27  F0B3         	call	_MXK_SwitchTo
  3730  010182  0900               	iorlw	0
  3731  010184  B4D8               	btfsc	status,2,c
  3732  010186  D01F               	goto	l2354
  3733                           
  3734                           ;main.c: 185: Motor_Speed(&Stepper, (100));
  3735  010188  0EAD               	movlw	low _Stepper
  3736  01018A  0100               	movlb	0	; () banked
  3737  01018C  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  3738  01018E  0E00               	movlw	high _Stepper
  3739  010190  0100               	movlb	0	; () banked
  3740  010192  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3741  010194  0E00               	movlw	0
  3742  010196  0100               	movlb	0	; () banked
  3743  010198  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3744  01019A  0E64               	movlw	100
  3745  01019C  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  3746  01019E  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  3747                           
  3748                           ;main.c: 186: Motor_Move(&Stepper, -1);
  3749  0101A2  0EAD               	movlw	low _Stepper
  3750  0101A4  0100               	movlb	0	; () banked
  3751  0101A6  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  3752  0101A8  0E00               	movlw	high _Stepper
  3753  0101AA  0100               	movlb	0	; () banked
  3754  0101AC  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3755  0101AE  0EFF               	movlw	255
  3756  0101B0  0100               	movlb	0	; () banked
  3757  0101B2  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3758  0101B4  69BD               	setf	Motor_Move@pDelta& (0+255),b
  3759  0101B6  EC3F  F0B4         	call	_Motor_Move	;wreg free
  3760                           
  3761                           ;main.c: 187: if (MXK_Release())
  3762  0101BA  EC55  F0B6         	call	_MXK_Release	;wreg free
  3763  0101BE  0900               	iorlw	0
  3764  0101C0  A4D8               	btfss	status,2,c
  3765                           
  3766                           ;main.c: 188: MXK_Dequeue();
  3767  0101C2  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3768  0101C6                     l2354:
  3769                           
  3770                           ;main.c: 189: }
  3771                           ;main.c: 190: TimerX = 10;
  3772  0101C6  0E00               	movlw	0
  3773  0101C8  0100               	movlb	0	; () banked
  3774  0101CA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3775  0101CC  0E0A               	movlw	10
  3776  0101CE  6FF9               	movwf	_TimerX& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;main.c: 191: if (TimerX > 0) {
  3780  0101D0  0100               	movlb	0	; () banked
  3781  0101D2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3782  0101D4  D063               	goto	u14920
  3783  0101D6  0100               	movlb	0	; () banked
  3784  0101D8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3785  0101DA  E156               	bnz	l17368
  3786  0101DC  0100               	movlb	0	; () banked
  3787  0101DE  05F9               	decf	_TimerX& (0+255),w,b
  3788  0101E0  B0D8               	btfsc	status,0,c
  3789  0101E2  D052               	goto	l2356
  3790  0101E4  D05B               	goto	u14920
  3791  0101E6                     l17350:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;main.c: 193: ADC_Start(&ADC_AN0);
  3795  0101E6  0EB3               	movlw	low _ADC_AN0
  3796  0101E8  0100               	movlb	0	; () banked
  3797  0101EA  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  3798  0101EC  0E00               	movlw	high _ADC_AN0
  3799  0101EE  0100               	movlb	0	; () banked
  3800  0101F0  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3801  0101F2  ECD9  F0AB         	call	_ADC_Start	;wreg free
  3802                           
  3803                           ;main.c: 194: if (MXK_SwitchTo(eMXK_HMI)) {
  3804  0101F6  0E01               	movlw	1
  3805  0101F8  EC27  F0B3         	call	_MXK_SwitchTo
  3806  0101FC  0900               	iorlw	0
  3807  0101FE  B4D8               	btfsc	status,2,c
  3808  010200  D00E               	goto	l2359
  3809                           
  3810                           ;main.c: 195: HMI_SetNumber(IRValue);
  3811  010202  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  3812  010206  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3813  01020A  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  3814                           
  3815                           ;main.c: 196: HMI_Render();
  3816  01020E  EC88  F0B3         	call	_HMI_Render	;wreg free
  3817                           
  3818                           ;main.c: 197: if (MXK_Release())
  3819  010212  EC55  F0B6         	call	_MXK_Release	;wreg free
  3820  010216  0900               	iorlw	0
  3821  010218  A4D8               	btfss	status,2,c
  3822                           
  3823                           ;main.c: 198: MXK_Dequeue();
  3824  01021A  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3825  01021E                     l2359:
  3826                           
  3827                           ;main.c: 199: }
  3828                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3829  01021E  0EB3               	movlw	low _ADC_AN0
  3830  010220  0100               	movlb	0	; () banked
  3831  010222  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  3832  010224  0E00               	movlw	high _ADC_AN0
  3833  010226  0100               	movlb	0	; () banked
  3834  010228  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3835  01022A  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  3836  01022E  C0DF  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15619
  3837  010232  C0E0  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15619+1
  3838  010236  C0E1  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15619+2
  3839  01023A  C0E2  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15619+3
  3840                           
  3841                           ;main.c: 199: }
  3842                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3843  01023E  C4AC  F0BC         	movff	_findClosestWall$15619,___fldiv@a
  3844  010242  C4AD  F0BD         	movff	_findClosestWall$15619+1,___fldiv@a+1
  3845  010246  C4AE  F0BE         	movff	_findClosestWall$15619+2,___fldiv@a+2
  3846  01024A  C4AF  F0BF         	movff	_findClosestWall$15619+3,___fldiv@a+3
  3847  01024E  0E00               	movlw	0
  3848  010250  0100               	movlb	0	; () banked
  3849  010252  6FB8               	movwf	___fldiv@b& (0+255),b
  3850  010254  0E00               	movlw	0
  3851  010256  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  3852  010258  0E6C               	movlw	108
  3853  01025A  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  3854  01025C  0E42               	movlw	66
  3855  01025E  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  3856  010260  ECA9  F08A         	call	___fldiv	;wreg free
  3857  010264  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  3858  010268  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  3859  01026C  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  3860  010270  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  3861  010274  EC55  F09E         	call	___fltol	;wreg free
  3862  010278  C0F1  F06C         	movff	?___fltol,_IRValue
  3863  01027C  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  3864                           
  3865                           ;main.c: 201: TimerX--;
  3866  010280  0100               	movlb	0	; () banked
  3867  010282  07F9               	decf	_TimerX& (0+255),f,b
  3868  010284  A0D8               	btfss	status,0,c
  3869  010286  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3870  010288                     l2356:
  3871  010288                     l17368:
  3872                           
  3873                           ; BSR set to: 0
  3874  010288  0100               	movlb	0	; () banked
  3875  01028A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3876  01028C  D007               	goto	u14920
  3877  01028E  0100               	movlb	0	; () banked
  3878  010290  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3879  010292  E1A9               	bnz	l17350
  3880  010294  0100               	movlb	0	; () banked
  3881  010296  05F9               	decf	_TimerX& (0+255),w,b
  3882  010298  B0D8               	btfsc	status,0,c
  3883  01029A  D7A5               	goto	l2357
  3884  01029C                     u14920:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;main.c: 202: }
  3888                           ;main.c: 203: }
  3889                           ;main.c: 204: if (MXK_SwitchTo(eMXK_HMI)) {
  3890                           
  3891                           ; BSR set to: 0
  3892                           
  3893                           ; BSR set to: 0
  3894  01029C  0E01               	movlw	1
  3895  01029E  EC27  F0B3         	call	_MXK_SwitchTo
  3896  0102A2  0900               	iorlw	0
  3897  0102A4  B4D8               	btfsc	status,2,c
  3898  0102A6  D02D               	goto	l2362
  3899                           
  3900                           ;main.c: 205: printf("%c", (char)35);
  3901  0102A8  0EFB               	movlw	low STR_1
  3902  0102AA  0100               	movlb	0	; () banked
  3903  0102AC  6FCD               	movwf	printf@f& (0+255),b
  3904  0102AE  0EFF               	movlw	high STR_1
  3905  0102B0  0100               	movlb	0	; () banked
  3906  0102B2  6FCE               	movwf	(printf@f+1)& (0+255),b
  3907  0102B4  0E00               	movlw	0
  3908  0102B6  0100               	movlb	0	; () banked
  3909  0102B8  6FD0               	movwf	(?_printf+3)& (0+255),b
  3910  0102BA  0E23               	movlw	35
  3911  0102BC  6FCF               	movwf	(?_printf+2)& (0+255),b
  3912  0102BE  ECD4  F094         	call	_printf	;wreg free
  3913                           
  3914                           ;main.c: 206: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3915  0102C2  0E59               	movlw	low STR_4
  3916  0102C4  0100               	movlb	0	; () banked
  3917  0102C6  6FCD               	movwf	printf@f& (0+255),b
  3918  0102C8  0EFF               	movlw	high STR_4
  3919  0102CA  0100               	movlb	0	; () banked
  3920  0102CC  6FCE               	movwf	(printf@f+1)& (0+255),b
  3921  0102CE  C0FB  F0CF         	movff	_MinDist,?_printf+2
  3922  0102D2  C0FC  F0D0         	movff	_MinDist+1,?_printf+3
  3923  0102D6  C06A  F0D1         	movff	_angleToClosestWall,?_printf+4
  3924  0102DA  C06B  F0D2         	movff	_angleToClosestWall+1,?_printf+5
  3925  0102DE  C085  F0D3         	movff	_iRBumpLeft,?_printf+6
  3926  0102E2  0100               	movlb	0	; () banked
  3927  0102E4  6BD4               	clrf	(?_printf+7)& (0+255),b
  3928  0102E6  C086  F0D5         	movff	_iRBumpRight,?_printf+8
  3929  0102EA  0100               	movlb	0	; () banked
  3930  0102EC  6BD6               	clrf	(?_printf+9)& (0+255),b
  3931  0102EE  ECD4  F094         	call	_printf	;wreg free
  3932                           
  3933                           ;main.c: 207: Console_Render();
  3934  0102F2  ECE8  F091         	call	_Console_Render	;wreg free
  3935                           
  3936                           ;main.c: 208: if (MXK_Release())
  3937  0102F6  EC55  F0B6         	call	_MXK_Release	;wreg free
  3938  0102FA  0900               	iorlw	0
  3939  0102FC  A4D8               	btfss	status,2,c
  3940                           
  3941                           ;main.c: 209: MXK_Dequeue();
  3942  0102FE  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  3943  010302                     l2362:
  3944  010302  0100               	movlb	0	; () banked
  3945  010304  BF71               	btfsc	(_StepRotate+1)& (0+255),7,b
  3946  010306  D007               	goto	u14950
  3947  010308  0100               	movlb	0	; () banked
  3948  01030A  5171               	movf	(_StepRotate+1)& (0+255),w,b
  3949  01030C  E103               	bnz	u14951
  3950  01030E  0100               	movlb	0	; () banked
  3951  010310  0570               	decf	_StepRotate& (0+255),w,b
  3952  010312  B0D8               	btfsc	status,0,c
  3953  010314                     u14951:
  3954  010314  D69C               	goto	l2349
  3955  010316                     u14950:
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;main.c: 210: }
  3959                           ;main.c: 211: }
  3960                           ;main.c: 212: Motor_Speed(&Stepper, (400));
  3961                           
  3962                           ; BSR set to: 0
  3963  010316  0EAD               	movlw	low _Stepper
  3964  010318  0100               	movlb	0	; () banked
  3965  01031A  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  3966  01031C  0E00               	movlw	high _Stepper
  3967  01031E  0100               	movlb	0	; () banked
  3968  010320  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3969  010322  0E01               	movlw	1
  3970  010324  0100               	movlb	0	; () banked
  3971  010326  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3972  010328  0E90               	movlw	144
  3973  01032A  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  3974  01032C  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  3975                           
  3976                           ;main.c: 213: Motor_Move(&Stepper, 400);
  3977  010330  0EAD               	movlw	low _Stepper
  3978  010332  0100               	movlb	0	; () banked
  3979  010334  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  3980  010336  0E00               	movlw	high _Stepper
  3981  010338  0100               	movlb	0	; () banked
  3982  01033A  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3983  01033C  0E01               	movlw	1
  3984  01033E  0100               	movlb	0	; () banked
  3985  010340  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3986  010342  0E90               	movlw	144
  3987  010344  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  3988  010346  EC3F  F0B4         	call	_Motor_Move	;wreg free
  3989                           
  3990                           ;main.c: 214: angleToClosestWall = angleToClosestWall + 67;
  3991  01034A  0E43               	movlw	67
  3992  01034C  0100               	movlb	0	; () banked
  3993  01034E  256A               	addwf	_angleToClosestWall& (0+255),w,b
  3994  010350  0100               	movlb	0	; () banked
  3995  010352  6F6A               	movwf	_angleToClosestWall& (0+255),b
  3996  010354  0E00               	movlw	0
  3997  010356  0100               	movlb	0	; () banked
  3998  010358  216B               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3999  01035A  0100               	movlb	0	; () banked
  4000  01035C  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;main.c: 215: if(angleToClosestWall > 270) {
  4004  01035E  0100               	movlb	0	; () banked
  4005  010360  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4006  010362  D012               	goto	l2364
  4007  010364  0E0F               	movlw	15
  4008  010366  0100               	movlb	0	; () banked
  4009  010368  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4010  01036A  0E01               	movlw	1
  4011  01036C  0100               	movlb	0	; () banked
  4012  01036E  596B               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  4013  010370  A0D8               	btfss	status,0,c
  4014  010372  D00A               	goto	l2364
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;main.c: 216: angleToClosestWall = angleToClosestWall - 270;
  4018  010374  0EF2               	movlw	242
  4019  010376  0100               	movlb	0	; () banked
  4020  010378  256A               	addwf	_angleToClosestWall& (0+255),w,b
  4021  01037A  0100               	movlb	0	; () banked
  4022  01037C  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4023  01037E  0EFE               	movlw	254
  4024  010380  0100               	movlb	0	; () banked
  4025  010382  216B               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4026  010384  0100               	movlb	0	; () banked
  4027  010386  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4028  010388                     l2364:
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;main.c: 217: }
  4032                           ;main.c: 218: angleToClosestWall = 270 - angleToClosestWall;
  4033  010388  C06A  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4034  01038C  C06B  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4035  010390  0104               	movlb	4	; () banked
  4036  010392  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4037  010394  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4038  010396  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4039  010398  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4040  01039A  0E0E               	movlw	14
  4041  01039C  0104               	movlb	4	; () banked
  4042  01039E  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4043  0103A0  0100               	movlb	0	; () banked
  4044  0103A2  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4045  0103A4  0E01               	movlw	1
  4046  0103A6  0104               	movlb	4	; () banked
  4047  0103A8  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4048  0103AA  0100               	movlb	0	; () banked
  4049  0103AC  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4050                           
  4051                           ;main.c: 219: if(angleToClosestWall < 135) {
  4052  0103AE  0100               	movlb	0	; () banked
  4053  0103B0  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4054  0103B2  D008               	goto	u14970
  4055  0103B4  0100               	movlb	0	; () banked
  4056  0103B6  516B               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4057  0103B8  E112               	bnz	l17392
  4058  0103BA  0E87               	movlw	135
  4059  0103BC  0100               	movlb	0	; () banked
  4060  0103BE  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4061  0103C0  B0D8               	btfsc	status,0,c
  4062  0103C2  D00D               	goto	l2365
  4063  0103C4                     u14970:
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;main.c: 220: irobot_rotate(0, angleToClosestWall, 200);
  4067  0103C4  C06A  F0D5         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  4068  0103C8  C06B  F0D6         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  4069  0103CC  0E00               	movlw	0
  4070  0103CE  0100               	movlb	0	; () banked
  4071  0103D0  6FD8               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4072  0103D2  0EC8               	movlw	200
  4073  0103D4  6FD7               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4074  0103D6  0E00               	movlw	0
  4075  0103D8  ECCF  F09D         	call	_irobot_rotate
  4076                           
  4077                           ;main.c: 221: }
  4078  0103DC  D01B               	goto	l2366
  4079  0103DE                     l2365:
  4080  0103DE                     l17392:
  4081                           
  4082                           ;main.c: 222: else{
  4083                           ;main.c: 223: irobot_rotate(0, 270 - angleToClosestWall, -200);
  4084  0103DE  C06A  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4085  0103E2  C06B  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4086  0103E6  0104               	movlb	4	; () banked
  4087  0103E8  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4088  0103EA  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4089  0103EC  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4090  0103EE  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4091  0103F0  0E0E               	movlw	14
  4092  0103F2  0104               	movlb	4	; () banked
  4093  0103F4  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4094  0103F6  0100               	movlb	0	; () banked
  4095  0103F8  6FD5               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4096  0103FA  0E01               	movlw	1
  4097  0103FC  0104               	movlb	4	; () banked
  4098  0103FE  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4099  010400  0100               	movlb	0	; () banked
  4100  010402  6FD6               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4101  010404  0EFF               	movlw	255
  4102  010406  0100               	movlb	0	; () banked
  4103  010408  6FD8               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4104  01040A  0E38               	movlw	56
  4105  01040C  6FD7               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4106  01040E  0E00               	movlw	0
  4107  010410  ECCF  F09D         	call	_irobot_rotate
  4108  010414                     l2366:
  4109                           
  4110                           ;main.c: 224: }
  4111                           ;main.c: 225: delay_ms(200);
  4112  010414  0E00               	movlw	0
  4113  010416  0100               	movlb	0	; () banked
  4114  010418  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  4115  01041A  0EC8               	movlw	200
  4116  01041C  6FB8               	movwf	delay_ms@ms& (0+255),b
  4117  01041E  EC0F  F0AF         	call	_delay_ms	;wreg free
  4118                           
  4119                           ;main.c: 226: while (!correctOrientation) {
  4120  010422  D228               	goto	l2367
  4121  010424                     
  4122                           ;main.c: 227: StepRotate = 400;
  4123  010424  0E01               	movlw	1
  4124  010426  0100               	movlb	0	; () banked
  4125  010428  6F71               	movwf	(_StepRotate+1)& (0+255),b
  4126  01042A  0E90               	movlw	144
  4127  01042C  6F70               	movwf	_StepRotate& (0+255),b
  4128                           
  4129                           ;main.c: 228: MinDist = 1000;
  4130  01042E  0E03               	movlw	3
  4131  010430  0100               	movlb	0	; () banked
  4132  010432  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4133  010434  0EE8               	movlw	232
  4134  010436  6FFB               	movwf	_MinDist& (0+255),b
  4135                           
  4136                           ;main.c: 229: Stepstomin = 0;
  4137  010438  0E00               	movlw	0
  4138  01043A  0100               	movlb	0	; () banked
  4139  01043C  6F6F               	movwf	(_Stepstomin+1)& (0+255),b
  4140  01043E  0E00               	movlw	0
  4141  010440  6F6E               	movwf	_Stepstomin& (0+255),b
  4142                           
  4143                           ;main.c: 230: angleToClosestWall = 1000;
  4144  010442  0E03               	movlw	3
  4145  010444  0100               	movlb	0	; () banked
  4146  010446  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4147  010448  0EE8               	movlw	232
  4148  01044A  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4149                           
  4150                           ;main.c: 231: IRValue = 0;
  4151  01044C  0E00               	movlw	0
  4152  01044E  0100               	movlb	0	; () banked
  4153  010450  6F6D               	movwf	(_IRValue+1)& (0+255),b
  4154  010452  0E00               	movlw	0
  4155  010454  6F6C               	movwf	_IRValue& (0+255),b
  4156                           
  4157                           ;main.c: 232: TimerX = 8;
  4158  010456  0E00               	movlw	0
  4159  010458  0100               	movlb	0	; () banked
  4160  01045A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4161  01045C  0E08               	movlw	8
  4162  01045E  6FF9               	movwf	_TimerX& (0+255),b
  4163                           
  4164                           ;main.c: 233: angle = 0;
  4165  010460  0E00               	movlw	0
  4166  010462  0103               	movlb	3	; () banked
  4167  010464  6F40               	movwf	(_angle+1)& (0+255),b
  4168  010466  0E00               	movlw	0
  4169  010468  6F3F               	movwf	_angle& (0+255),b
  4170                           
  4171                           ;main.c: 234: while (StepRotate > 0) {
  4172  01046A  D15A               	goto	l2383
  4173  01046C                     
  4174                           ;main.c: 235: StepRotate--;
  4175                           
  4176                           ; BSR set to: 3
  4177  01046C  0100               	movlb	0	; () banked
  4178  01046E  0770               	decf	_StepRotate& (0+255),f,b
  4179  010470  A0D8               	btfss	status,0,c
  4180  010472  0771               	decf	(_StepRotate+1)& (0+255),f,b
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;main.c: 236: ADC_Start(&ADC_AN0);
  4184  010474  0EB3               	movlw	low _ADC_AN0
  4185  010476  0100               	movlb	0	; () banked
  4186  010478  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  4187  01047A  0E00               	movlw	high _ADC_AN0
  4188  01047C  0100               	movlb	0	; () banked
  4189  01047E  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4190  010480  ECD9  F0AB         	call	_ADC_Start	;wreg free
  4191                           
  4192                           ;main.c: 237: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4193  010484  0EB3               	movlw	low _ADC_AN0
  4194  010486  0100               	movlb	0	; () banked
  4195  010488  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  4196  01048A  0E00               	movlw	high _ADC_AN0
  4197  01048C  0100               	movlb	0	; () banked
  4198  01048E  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4199  010490  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  4200  010494  C0DF  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15619
  4201  010498  C0E0  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15619+1
  4202  01049C  C0E1  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15619+2
  4203  0104A0  C0E2  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15619+3
  4204                           
  4205                           ;main.c: 237: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4206  0104A4  C4AC  F0BC         	movff	_findClosestWall$15619,___fldiv@a
  4207  0104A8  C4AD  F0BD         	movff	_findClosestWall$15619+1,___fldiv@a+1
  4208  0104AC  C4AE  F0BE         	movff	_findClosestWall$15619+2,___fldiv@a+2
  4209  0104B0  C4AF  F0BF         	movff	_findClosestWall$15619+3,___fldiv@a+3
  4210  0104B4  0E00               	movlw	0
  4211  0104B6  0100               	movlb	0	; () banked
  4212  0104B8  6FB8               	movwf	___fldiv@b& (0+255),b
  4213  0104BA  0E00               	movlw	0
  4214  0104BC  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  4215  0104BE  0E6C               	movlw	108
  4216  0104C0  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  4217  0104C2  0E42               	movlw	66
  4218  0104C4  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  4219  0104C6  ECA9  F08A         	call	___fldiv	;wreg free
  4220  0104CA  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  4221  0104CE  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  4222  0104D2  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  4223  0104D6  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  4224  0104DA  EC55  F09E         	call	___fltol	;wreg free
  4225  0104DE  C0F1  F06C         	movff	?___fltol,_IRValue
  4226  0104E2  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  4227                           
  4228                           ;main.c: 238: if (MXK_SwitchTo(eMXK_HMI)) {
  4229  0104E6  0E01               	movlw	1
  4230  0104E8  EC27  F0B3         	call	_MXK_SwitchTo
  4231  0104EC  0900               	iorlw	0
  4232  0104EE  B4D8               	btfsc	status,2,c
  4233  0104F0  D00E               	goto	l2372
  4234                           
  4235                           ;main.c: 239: HMI_SetNumber(IRValue);
  4236  0104F2  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  4237  0104F6  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4238  0104FA  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  4239                           
  4240                           ;main.c: 240: HMI_Render();
  4241  0104FE  EC88  F0B3         	call	_HMI_Render	;wreg free
  4242                           
  4243                           ;main.c: 241: if (MXK_Release())
  4244  010502  EC55  F0B6         	call	_MXK_Release	;wreg free
  4245  010506  0900               	iorlw	0
  4246  010508  A4D8               	btfss	status,2,c
  4247                           
  4248                           ;main.c: 242: MXK_Dequeue();
  4249  01050A  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  4250  01050E                     l2372:
  4251                           
  4252                           ;main.c: 243: }
  4253                           ;main.c: 244: if (IRValue < MinDist) {
  4254  01050E  0100               	movlb	0	; () banked
  4255  010510  51FB               	movf	_MinDist& (0+255),w,b
  4256  010512  0100               	movlb	0	; () banked
  4257  010514  5D6C               	subwf	_IRValue& (0+255),w,b
  4258  010516  0100               	movlb	0	; () banked
  4259  010518  516D               	movf	(_IRValue+1)& (0+255),w,b
  4260  01051A  0A80               	xorlw	128
  4261  01051C  0104               	movlb	4	; () banked
  4262  01051E  6FAA               	movwf	??_findClosestWall& (0+255),b
  4263  010520  0100               	movlb	0	; () banked
  4264  010522  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4265  010524  0A80               	xorlw	128
  4266  010526  0104               	movlb	4	; () banked
  4267  010528  59AA               	subwfb	??_findClosestWall& (0+255),w,b
  4268  01052A  B0D8               	btfsc	status,0,c
  4269  01052C  D036               	goto	l2373
  4270                           
  4271                           ; BSR set to: 4
  4272                           ;main.c: 245: MinDist = IRValue;
  4273  01052E  C06C  F0FB         	movff	_IRValue,_MinDist
  4274  010532  C06D  F0FC         	movff	_IRValue+1,_MinDist+1
  4275                           
  4276                           ;main.c: 246: Stepstomin = StepRotate;
  4277  010536  C070  F06E         	movff	_StepRotate,_Stepstomin
  4278  01053A  C071  F06F         	movff	_StepRotate+1,_Stepstomin+1
  4279                           
  4280                           ; BSR set to: 4
  4281                           ;main.c: 247: angleToClosestWall = Stepstomin * 0.675;
  4282  01053E  0ECD               	movlw	205
  4283  010540  0100               	movlb	0	; () banked
  4284  010542  6FCA               	movwf	___flmul@a& (0+255),b
  4285  010544  0ECC               	movlw	204
  4286  010546  6FCB               	movwf	(___flmul@a+1)& (0+255),b
  4287  010548  0E2C               	movlw	44
  4288  01054A  6FCC               	movwf	(___flmul@a+2)& (0+255),b
  4289  01054C  0E3F               	movlw	63
  4290  01054E  6FCD               	movwf	(___flmul@a+3)& (0+255),b
  4291  010550  C06E  F0B8         	movff	_Stepstomin,___xxtofl@val
  4292  010554  C06F  F0B9         	movff	_Stepstomin+1,___xxtofl@val+1
  4293  010558  0100               	movlb	0	; () banked
  4294  01055A  0E00               	movlw	0
  4295  01055C  BFB9               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4296  01055E  0EFF               	movlw	-1
  4297  010560  6FBA               	movwf	(___xxtofl@val+2)& (0+255),b
  4298  010562  6FBB               	movwf	(___xxtofl@val+3)& (0+255),b
  4299  010564  0E01               	movlw	1
  4300  010566  ECED  F093         	call	___xxtofl
  4301  01056A  C0B8  F0C6         	movff	?___xxtofl,___flmul@b
  4302  01056E  C0B9  F0C7         	movff	?___xxtofl+1,___flmul@b+1
  4303  010572  C0BA  F0C8         	movff	?___xxtofl+2,___flmul@b+2
  4304  010576  C0BB  F0C9         	movff	?___xxtofl+3,___flmul@b+3
  4305  01057A  EC5A  F084         	call	___flmul	;wreg free
  4306  01057E  C0C6  F0F1         	movff	?___flmul,___fltol@f1
  4307  010582  C0C7  F0F2         	movff	?___flmul+1,___fltol@f1+1
  4308  010586  C0C8  F0F3         	movff	?___flmul+2,___fltol@f1+2
  4309  01058A  C0C9  F0F4         	movff	?___flmul+3,___fltol@f1+3
  4310  01058E  EC55  F09E         	call	___fltol	;wreg free
  4311  010592  C0F1  F06A         	movff	?___fltol,_angleToClosestWall
  4312  010596  C0F2  F06B         	movff	?___fltol+1,_angleToClosestWall+1
  4313  01059A                     l2373:
  4314                           
  4315                           ;main.c: 248: }
  4316                           ;main.c: 249: if (MXK_SwitchTo(eMXK_Motor)) {
  4317  01059A  0E08               	movlw	8
  4318  01059C  EC27  F0B3         	call	_MXK_SwitchTo
  4319  0105A0  0900               	iorlw	0
  4320  0105A2  B4D8               	btfsc	status,2,c
  4321  0105A4  D01F               	goto	l2375
  4322                           
  4323                           ;main.c: 250: Motor_Speed(&Stepper, (100));
  4324  0105A6  0EAD               	movlw	low _Stepper
  4325  0105A8  0100               	movlb	0	; () banked
  4326  0105AA  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  4327  0105AC  0E00               	movlw	high _Stepper
  4328  0105AE  0100               	movlb	0	; () banked
  4329  0105B0  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4330  0105B2  0E00               	movlw	0
  4331  0105B4  0100               	movlb	0	; () banked
  4332  0105B6  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4333  0105B8  0E64               	movlw	100
  4334  0105BA  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  4335  0105BC  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  4336                           
  4337                           ;main.c: 251: Motor_Move(&Stepper, -1);
  4338  0105C0  0EAD               	movlw	low _Stepper
  4339  0105C2  0100               	movlb	0	; () banked
  4340  0105C4  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  4341  0105C6  0E00               	movlw	high _Stepper
  4342  0105C8  0100               	movlb	0	; () banked
  4343  0105CA  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4344  0105CC  0EFF               	movlw	255
  4345  0105CE  0100               	movlb	0	; () banked
  4346  0105D0  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4347  0105D2  69BD               	setf	Motor_Move@pDelta& (0+255),b
  4348  0105D4  EC3F  F0B4         	call	_Motor_Move	;wreg free
  4349                           
  4350                           ;main.c: 252: if (MXK_Release())
  4351  0105D8  EC55  F0B6         	call	_MXK_Release	;wreg free
  4352  0105DC  0900               	iorlw	0
  4353  0105DE  A4D8               	btfss	status,2,c
  4354                           
  4355                           ;main.c: 253: MXK_Dequeue();
  4356  0105E0  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  4357  0105E4                     l2375:
  4358                           
  4359                           ;main.c: 254: }
  4360                           ;main.c: 255: TimerX = 10;
  4361  0105E4  0E00               	movlw	0
  4362  0105E6  0100               	movlb	0	; () banked
  4363  0105E8  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4364  0105EA  0E0A               	movlw	10
  4365  0105EC  6FF9               	movwf	_TimerX& (0+255),b
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;main.c: 256: if (TimerX > 0) {
  4369  0105EE  0100               	movlb	0	; () banked
  4370  0105F0  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4371  0105F2  D063               	goto	u15060
  4372  0105F4  0100               	movlb	0	; () banked
  4373  0105F6  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4374  0105F8  E156               	bnz	l17456
  4375  0105FA  0100               	movlb	0	; () banked
  4376  0105FC  05F9               	decf	_TimerX& (0+255),w,b
  4377  0105FE  B0D8               	btfsc	status,0,c
  4378  010600  D052               	goto	l2377
  4379  010602  D05B               	goto	u15060
  4380  010604                     l17438:
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;main.c: 258: ADC_Start(&ADC_AN0);
  4384  010604  0EB3               	movlw	low _ADC_AN0
  4385  010606  0100               	movlb	0	; () banked
  4386  010608  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  4387  01060A  0E00               	movlw	high _ADC_AN0
  4388  01060C  0100               	movlb	0	; () banked
  4389  01060E  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4390  010610  ECD9  F0AB         	call	_ADC_Start	;wreg free
  4391                           
  4392                           ;main.c: 259: if (MXK_SwitchTo(eMXK_HMI)) {
  4393  010614  0E01               	movlw	1
  4394  010616  EC27  F0B3         	call	_MXK_SwitchTo
  4395  01061A  0900               	iorlw	0
  4396  01061C  B4D8               	btfsc	status,2,c
  4397  01061E  D00E               	goto	l2380
  4398                           
  4399                           ;main.c: 260: HMI_SetNumber(IRValue);
  4400  010620  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  4401  010624  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4402  010628  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  4403                           
  4404                           ;main.c: 261: HMI_Render();
  4405  01062C  EC88  F0B3         	call	_HMI_Render	;wreg free
  4406                           
  4407                           ;main.c: 262: if (MXK_Release())
  4408  010630  EC55  F0B6         	call	_MXK_Release	;wreg free
  4409  010634  0900               	iorlw	0
  4410  010636  A4D8               	btfss	status,2,c
  4411                           
  4412                           ;main.c: 263: MXK_Dequeue();
  4413  010638  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  4414  01063C                     l2380:
  4415                           
  4416                           ;main.c: 264: }
  4417                           ;main.c: 265: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4418  01063C  0EB3               	movlw	low _ADC_AN0
  4419  01063E  0100               	movlb	0	; () banked
  4420  010640  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  4421  010642  0E00               	movlw	high _ADC_AN0
  4422  010644  0100               	movlb	0	; () banked
  4423  010646  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4424  010648  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  4425  01064C  C0DF  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15619
  4426  010650  C0E0  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15619+1
  4427  010654  C0E1  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15619+2
  4428  010658  C0E2  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15619+3
  4429                           
  4430                           ;main.c: 264: }
  4431                           ;main.c: 265: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4432  01065C  C4AC  F0BC         	movff	_findClosestWall$15619,___fldiv@a
  4433  010660  C4AD  F0BD         	movff	_findClosestWall$15619+1,___fldiv@a+1
  4434  010664  C4AE  F0BE         	movff	_findClosestWall$15619+2,___fldiv@a+2
  4435  010668  C4AF  F0BF         	movff	_findClosestWall$15619+3,___fldiv@a+3
  4436  01066C  0E00               	movlw	0
  4437  01066E  0100               	movlb	0	; () banked
  4438  010670  6FB8               	movwf	___fldiv@b& (0+255),b
  4439  010672  0E00               	movlw	0
  4440  010674  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  4441  010676  0E6C               	movlw	108
  4442  010678  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  4443  01067A  0E42               	movlw	66
  4444  01067C  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  4445  01067E  ECA9  F08A         	call	___fldiv	;wreg free
  4446  010682  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  4447  010686  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  4448  01068A  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  4449  01068E  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  4450  010692  EC55  F09E         	call	___fltol	;wreg free
  4451  010696  C0F1  F06C         	movff	?___fltol,_IRValue
  4452  01069A  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  4453                           
  4454                           ;main.c: 266: TimerX--;
  4455  01069E  0100               	movlb	0	; () banked
  4456  0106A0  07F9               	decf	_TimerX& (0+255),f,b
  4457  0106A2  A0D8               	btfss	status,0,c
  4458  0106A4  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4459  0106A6                     l2377:
  4460  0106A6                     l17456:
  4461                           
  4462                           ; BSR set to: 0
  4463  0106A6  0100               	movlb	0	; () banked
  4464  0106A8  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4465  0106AA  D007               	goto	u15060
  4466  0106AC  0100               	movlb	0	; () banked
  4467  0106AE  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4468  0106B0  E1A9               	bnz	l17438
  4469  0106B2  0100               	movlb	0	; () banked
  4470  0106B4  05F9               	decf	_TimerX& (0+255),w,b
  4471  0106B6  B0D8               	btfsc	status,0,c
  4472  0106B8  D7A5               	goto	l2378
  4473  0106BA                     u15060:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;main.c: 267: }
  4477                           ;main.c: 268: }
  4478                           ;main.c: 269: if (MXK_SwitchTo(eMXK_HMI)) {
  4479                           
  4480                           ; BSR set to: 0
  4481                           
  4482                           ; BSR set to: 0
  4483  0106BA  0E01               	movlw	1
  4484  0106BC  EC27  F0B3         	call	_MXK_SwitchTo
  4485  0106C0  0900               	iorlw	0
  4486  0106C2  B4D8               	btfsc	status,2,c
  4487  0106C4  D02D               	goto	l2383
  4488                           
  4489                           ;main.c: 270: printf("%c", (char)35);
  4490  0106C6  0EFB               	movlw	low STR_1
  4491  0106C8  0100               	movlb	0	; () banked
  4492  0106CA  6FCD               	movwf	printf@f& (0+255),b
  4493  0106CC  0EFF               	movlw	high STR_1
  4494  0106CE  0100               	movlb	0	; () banked
  4495  0106D0  6FCE               	movwf	(printf@f+1)& (0+255),b
  4496  0106D2  0E00               	movlw	0
  4497  0106D4  0100               	movlb	0	; () banked
  4498  0106D6  6FD0               	movwf	(?_printf+3)& (0+255),b
  4499  0106D8  0E23               	movlw	35
  4500  0106DA  6FCF               	movwf	(?_printf+2)& (0+255),b
  4501  0106DC  ECD4  F094         	call	_printf	;wreg free
  4502                           
  4503                           ;main.c: 271: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  4504  0106E0  0E59               	movlw	low STR_4
  4505  0106E2  0100               	movlb	0	; () banked
  4506  0106E4  6FCD               	movwf	printf@f& (0+255),b
  4507  0106E6  0EFF               	movlw	high STR_4
  4508  0106E8  0100               	movlb	0	; () banked
  4509  0106EA  6FCE               	movwf	(printf@f+1)& (0+255),b
  4510  0106EC  C0FB  F0CF         	movff	_MinDist,?_printf+2
  4511  0106F0  C0FC  F0D0         	movff	_MinDist+1,?_printf+3
  4512  0106F4  C06A  F0D1         	movff	_angleToClosestWall,?_printf+4
  4513  0106F8  C06B  F0D2         	movff	_angleToClosestWall+1,?_printf+5
  4514  0106FC  C085  F0D3         	movff	_iRBumpLeft,?_printf+6
  4515  010700  0100               	movlb	0	; () banked
  4516  010702  6BD4               	clrf	(?_printf+7)& (0+255),b
  4517  010704  C086  F0D5         	movff	_iRBumpRight,?_printf+8
  4518  010708  0100               	movlb	0	; () banked
  4519  01070A  6BD6               	clrf	(?_printf+9)& (0+255),b
  4520  01070C  ECD4  F094         	call	_printf	;wreg free
  4521                           
  4522                           ;main.c: 272: Console_Render();
  4523  010710  ECE8  F091         	call	_Console_Render	;wreg free
  4524                           
  4525                           ;main.c: 273: if (MXK_Release())
  4526  010714  EC55  F0B6         	call	_MXK_Release	;wreg free
  4527  010718  0900               	iorlw	0
  4528  01071A  A4D8               	btfss	status,2,c
  4529                           
  4530                           ;main.c: 274: MXK_Dequeue();
  4531  01071C  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  4532  010720                     l2383:
  4533  010720  0100               	movlb	0	; () banked
  4534  010722  BF71               	btfsc	(_StepRotate+1)& (0+255),7,b
  4535  010724  D007               	goto	u15090
  4536  010726  0100               	movlb	0	; () banked
  4537  010728  5171               	movf	(_StepRotate+1)& (0+255),w,b
  4538  01072A  E103               	bnz	u15091
  4539  01072C  0100               	movlb	0	; () banked
  4540  01072E  0570               	decf	_StepRotate& (0+255),w,b
  4541  010730  B0D8               	btfsc	status,0,c
  4542  010732                     u15091:
  4543  010732  D69C               	goto	l2370
  4544  010734                     u15090:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;main.c: 275: }
  4548                           ;main.c: 276: }
  4549                           ;main.c: 277: Motor_Speed(&Stepper, (400));
  4550                           
  4551                           ; BSR set to: 0
  4552  010734  0EAD               	movlw	low _Stepper
  4553  010736  0100               	movlb	0	; () banked
  4554  010738  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  4555  01073A  0E00               	movlw	high _Stepper
  4556  01073C  0100               	movlb	0	; () banked
  4557  01073E  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4558  010740  0E01               	movlw	1
  4559  010742  0100               	movlb	0	; () banked
  4560  010744  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4561  010746  0E90               	movlw	144
  4562  010748  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  4563  01074A  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  4564                           
  4565                           ;main.c: 278: Motor_Move(&Stepper, 400);
  4566  01074E  0EAD               	movlw	low _Stepper
  4567  010750  0100               	movlb	0	; () banked
  4568  010752  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  4569  010754  0E00               	movlw	high _Stepper
  4570  010756  0100               	movlb	0	; () banked
  4571  010758  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4572  01075A  0E01               	movlw	1
  4573  01075C  0100               	movlb	0	; () banked
  4574  01075E  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4575  010760  0E90               	movlw	144
  4576  010762  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  4577  010764  EC3F  F0B4         	call	_Motor_Move	;wreg free
  4578                           
  4579                           ;main.c: 279: if(angleToClosestWall > 193 && angleToClosestWall < 212) {
  4580  010768  0100               	movlb	0	; () banked
  4581  01076A  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4582  01076C  D017               	goto	l2385
  4583  01076E  0100               	movlb	0	; () banked
  4584  010770  516B               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4585  010772  E105               	bnz	u15100
  4586  010774  0EC2               	movlw	194
  4587  010776  0100               	movlb	0	; () banked
  4588  010778  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4589  01077A  A0D8               	btfss	status,0,c
  4590  01077C  D00F               	goto	l2385
  4591  01077E                     u15100:
  4592                           
  4593                           ; BSR set to: 0
  4594  01077E  0100               	movlb	0	; () banked
  4595  010780  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4596  010782  D008               	goto	u15110
  4597  010784  0100               	movlb	0	; () banked
  4598  010786  516B               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4599  010788  E109               	bnz	l17478
  4600  01078A  0ED4               	movlw	212
  4601  01078C  0100               	movlb	0	; () banked
  4602  01078E  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4603  010790  B0D8               	btfsc	status,0,c
  4604  010792  D004               	goto	l2385
  4605  010794                     u15110:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;main.c: 280: correctOrientation = 1;
  4609  010794  0E01               	movlw	1
  4610  010796  0100               	movlb	0	; () banked
  4611  010798  6F82               	movwf	_correctOrientation& (0+255),b
  4612                           
  4613                           ;main.c: 281: }
  4614  01079A  D065               	goto	l2389
  4615  01079C                     l2385:
  4616  01079C                     l17478:
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;main.c: 282: else{
  4620                           ;main.c: 283: angleToClosestWall = angleToClosestWall + 67;
  4621  01079C  0E43               	movlw	67
  4622  01079E  0100               	movlb	0	; () banked
  4623  0107A0  256A               	addwf	_angleToClosestWall& (0+255),w,b
  4624  0107A2  0100               	movlb	0	; () banked
  4625  0107A4  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4626  0107A6  0E00               	movlw	0
  4627  0107A8  0100               	movlb	0	; () banked
  4628  0107AA  216B               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4629  0107AC  0100               	movlb	0	; () banked
  4630  0107AE  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4631                           
  4632                           ;main.c: 284: if(angleToClosestWall > 270) {
  4633  0107B0  0100               	movlb	0	; () banked
  4634  0107B2  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4635  0107B4  D012               	goto	l2387
  4636  0107B6  0E0F               	movlw	15
  4637  0107B8  0100               	movlb	0	; () banked
  4638  0107BA  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4639  0107BC  0E01               	movlw	1
  4640  0107BE  0100               	movlb	0	; () banked
  4641  0107C0  596B               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  4642  0107C2  A0D8               	btfss	status,0,c
  4643  0107C4  D00A               	goto	l2387
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;main.c: 285: angleToClosestWall = angleToClosestWall - 270;
  4647  0107C6  0EF2               	movlw	242
  4648  0107C8  0100               	movlb	0	; () banked
  4649  0107CA  256A               	addwf	_angleToClosestWall& (0+255),w,b
  4650  0107CC  0100               	movlb	0	; () banked
  4651  0107CE  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4652  0107D0  0EFE               	movlw	254
  4653  0107D2  0100               	movlb	0	; () banked
  4654  0107D4  216B               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4655  0107D6  0100               	movlb	0	; () banked
  4656  0107D8  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4657  0107DA                     l2387:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;main.c: 286: }
  4661                           ;main.c: 287: angleToClosestWall = 270 - angleToClosestWall;
  4662  0107DA  C06A  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4663  0107DE  C06B  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4664  0107E2  0104               	movlb	4	; () banked
  4665  0107E4  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4666  0107E6  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4667  0107E8  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4668  0107EA  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4669  0107EC  0E0E               	movlw	14
  4670  0107EE  0104               	movlb	4	; () banked
  4671  0107F0  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4672  0107F2  0100               	movlb	0	; () banked
  4673  0107F4  6F6A               	movwf	_angleToClosestWall& (0+255),b
  4674  0107F6  0E01               	movlw	1
  4675  0107F8  0104               	movlb	4	; () banked
  4676  0107FA  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4677  0107FC  0100               	movlb	0	; () banked
  4678  0107FE  6F6B               	movwf	(_angleToClosestWall+1)& (0+255),b
  4679                           
  4680                           ;main.c: 288: if(angleToClosestWall < 135) {
  4681  010800  0100               	movlb	0	; () banked
  4682  010802  BF6B               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4683  010804  D008               	goto	u15130
  4684  010806  0100               	movlb	0	; () banked
  4685  010808  516B               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4686  01080A  E112               	bnz	l17484
  4687  01080C  0E87               	movlw	135
  4688  01080E  0100               	movlb	0	; () banked
  4689  010810  5D6A               	subwf	_angleToClosestWall& (0+255),w,b
  4690  010812  B0D8               	btfsc	status,0,c
  4691  010814  D00D               	goto	l2388
  4692  010816                     u15130:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;main.c: 289: irobot_rotate(0, angleToClosestWall, 200);
  4696  010816  C06A  F0D5         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  4697  01081A  C06B  F0D6         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  4698  01081E  0E00               	movlw	0
  4699  010820  0100               	movlb	0	; () banked
  4700  010822  6FD8               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4701  010824  0EC8               	movlw	200
  4702  010826  6FD7               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4703  010828  0E00               	movlw	0
  4704  01082A  ECCF  F09D         	call	_irobot_rotate
  4705                           
  4706                           ;main.c: 290: }
  4707  01082E  D01B               	goto	l2389
  4708  010830                     l2388:
  4709  010830                     l17484:
  4710                           
  4711                           ;main.c: 291: else{
  4712                           ;main.c: 292: irobot_rotate(0, 270 - angleToClosestWall, -200);
  4713  010830  C06A  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4714  010834  C06B  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4715  010838  0104               	movlb	4	; () banked
  4716  01083A  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4717  01083C  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4718  01083E  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4719  010840  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4720  010842  0E0E               	movlw	14
  4721  010844  0104               	movlb	4	; () banked
  4722  010846  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4723  010848  0100               	movlb	0	; () banked
  4724  01084A  6FD5               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4725  01084C  0E01               	movlw	1
  4726  01084E  0104               	movlb	4	; () banked
  4727  010850  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4728  010852  0100               	movlb	0	; () banked
  4729  010854  6FD6               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4730  010856  0EFF               	movlw	255
  4731  010858  0100               	movlb	0	; () banked
  4732  01085A  6FD8               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4733  01085C  0E38               	movlw	56
  4734  01085E  6FD7               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4735  010860  0E00               	movlw	0
  4736  010862  ECCF  F09D         	call	_irobot_rotate
  4737  010866                     l2389:
  4738                           
  4739                           ;main.c: 293: }
  4740                           ;main.c: 294: }
  4741                           ;main.c: 295: delay_ms(200);
  4742  010866  0E00               	movlw	0
  4743  010868  0100               	movlb	0	; () banked
  4744  01086A  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  4745  01086C  0EC8               	movlw	200
  4746  01086E  6FB8               	movwf	delay_ms@ms& (0+255),b
  4747  010870  EC0F  F0AF         	call	_delay_ms	;wreg free
  4748  010874                     l2367:
  4749  010874  0100               	movlb	0	; () banked
  4750  010876  5182               	movf	_correctOrientation& (0+255),w,b
  4751  010878  0100               	movlb	0	; () banked
  4752  01087A  B4D8               	btfsc	status,2,c
  4753  01087C  D5D3               	goto	l2368
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;main.c: 296: }
  4757                           ;main.c: 297: Motor_Speed(&Stepper, (400));
  4758                           
  4759                           ; BSR set to: 0
  4760  01087E  0EAD               	movlw	low _Stepper
  4761  010880  0100               	movlb	0	; () banked
  4762  010882  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  4763  010884  0E00               	movlw	high _Stepper
  4764  010886  0100               	movlb	0	; () banked
  4765  010888  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4766  01088A  0E01               	movlw	1
  4767  01088C  0100               	movlb	0	; () banked
  4768  01088E  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4769  010890  0E90               	movlw	144
  4770  010892  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  4771  010894  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  4772                           
  4773                           ;main.c: 298: Motor_Move(&Stepper, -100);
  4774  010898  0EAD               	movlw	low _Stepper
  4775  01089A  0100               	movlb	0	; () banked
  4776  01089C  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  4777  01089E  0E00               	movlw	high _Stepper
  4778  0108A0  0100               	movlb	0	; () banked
  4779  0108A2  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4780  0108A4  0EFF               	movlw	255
  4781  0108A6  0100               	movlb	0	; () banked
  4782  0108A8  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4783  0108AA  0E9C               	movlw	156
  4784  0108AC  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  4785  0108AE  EC3F  F0B4         	call	_Motor_Move	;wreg free
  4786  0108B2  0012               	return		;funcret
  4787  0108B4                     __end_of_findClosestWall:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _correct_distance *****************
  4801 ;; Defined at:
  4802 ;;		line 313 in file "main.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  _d3             2   10[BANK1 ] unsigned short 
  4807 ;;  _d2             2    8[BANK1 ] unsigned short 
  4808 ;;  _d1             2    6[BANK1 ] unsigned short 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;Total ram usage:        6 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:   14
  4825 ;; This function calls:
  4826 ;;		_irobot_move
  4827 ;;		_measureAndDisplayDistance
  4828 ;; This function is called by:
  4829 ;;		_mode4
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text3
  4834  014094                     __ptext3:
  4835                           	opt stack 0
  4836  014094                     _correct_distance:
  4837                           	opt stack 15
  4838                           
  4839                           ;main.c: 314: UINT16 _d1 = dummy1 -8, _d2=dummy1-3, _d3=dummy1+3;
  4840                           
  4841                           ;incstack = 0
  4842  014094  0EF8               	movlw	248
  4843  014096  0100               	movlb	0	; () banked
  4844  014098  2566               	addwf	_dummy1& (0+255),w,b
  4845  01409A  0101               	movlb	1	; () banked
  4846  01409C  6F06               	movwf	correct_distance@_d1& (0+255),b
  4847  01409E  0EFF               	movlw	255
  4848  0140A0  0100               	movlb	0	; () banked
  4849  0140A2  2167               	addwfc	(_dummy1+1)& (0+255),w,b
  4850  0140A4  0101               	movlb	1	; () banked
  4851  0140A6  6F07               	movwf	(correct_distance@_d1+1)& (0+255),b
  4852  0140A8  0EFD               	movlw	253
  4853  0140AA  0100               	movlb	0	; () banked
  4854  0140AC  2566               	addwf	_dummy1& (0+255),w,b
  4855  0140AE  0101               	movlb	1	; () banked
  4856  0140B0  6F08               	movwf	correct_distance@_d2& (0+255),b
  4857  0140B2  0EFF               	movlw	255
  4858  0140B4  0100               	movlb	0	; () banked
  4859  0140B6  2167               	addwfc	(_dummy1+1)& (0+255),w,b
  4860  0140B8  0101               	movlb	1	; () banked
  4861  0140BA  6F09               	movwf	(correct_distance@_d2+1)& (0+255),b
  4862  0140BC  0E03               	movlw	3
  4863  0140BE  0100               	movlb	0	; () banked
  4864  0140C0  2566               	addwf	_dummy1& (0+255),w,b
  4865  0140C2  0101               	movlb	1	; () banked
  4866  0140C4  6F0A               	movwf	correct_distance@_d3& (0+255),b
  4867  0140C6  0E00               	movlw	0
  4868  0140C8  0100               	movlb	0	; () banked
  4869  0140CA  2167               	addwfc	(_dummy1+1)& (0+255),w,b
  4870  0140CC  0101               	movlb	1	; () banked
  4871  0140CE  6F0B               	movwf	(correct_distance@_d3+1)& (0+255),b
  4872                           
  4873                           ; BSR set to: 1
  4874                           ;main.c: 315: measureAndDisplayDistance();
  4875  0140D0  EC91  F0A9         	call	_measureAndDisplayDistance	;wreg free
  4876                           
  4877                           ;main.c: 316: if(IRValue < _d1){
  4878  0140D4  0101               	movlb	1	; () banked
  4879  0140D6  5106               	movf	correct_distance@_d1& (0+255),w,b
  4880  0140D8  0100               	movlb	0	; () banked
  4881  0140DA  5D6C               	subwf	_IRValue& (0+255),w,b
  4882  0140DC  0101               	movlb	1	; () banked
  4883  0140DE  5107               	movf	(correct_distance@_d1+1)& (0+255),w,b
  4884  0140E0  0100               	movlb	0	; () banked
  4885  0140E2  596D               	subwfb	(_IRValue+1)& (0+255),w,b
  4886  0140E4  B0D8               	btfsc	status,0,c
  4887  0140E6  D00E               	goto	l2399
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;main.c: 317: irobot_move(0,200,-500);
  4891  0140E8  0E00               	movlw	0
  4892  0140EA  0100               	movlb	0	; () banked
  4893  0140EC  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4894  0140EE  0EC8               	movlw	200
  4895  0140F0  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  4896  0140F2  0EFE               	movlw	254
  4897  0140F4  0100               	movlb	0	; () banked
  4898  0140F6  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4899  0140F8  0E0C               	movlw	12
  4900  0140FA  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4901  0140FC  0E00               	movlw	0
  4902  0140FE  EC49  F0A6         	call	_irobot_move
  4903                           
  4904                           ;main.c: 318: }
  4905  014102  0012               	return	
  4906  014104                     l2399:
  4907                           
  4908                           ;main.c: 319: else if(IRValue < _d2){
  4909  014104  0101               	movlb	1	; () banked
  4910  014106  5108               	movf	correct_distance@_d2& (0+255),w,b
  4911  014108  0100               	movlb	0	; () banked
  4912  01410A  5D6C               	subwf	_IRValue& (0+255),w,b
  4913  01410C  0101               	movlb	1	; () banked
  4914  01410E  5109               	movf	(correct_distance@_d2+1)& (0+255),w,b
  4915  014110  0100               	movlb	0	; () banked
  4916  014112  596D               	subwfb	(_IRValue+1)& (0+255),w,b
  4917  014114  B0D8               	btfsc	status,0,c
  4918  014116  D00E               	goto	l2401
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;main.c: 320: irobot_move(0,200,-1000);
  4922  014118  0E00               	movlw	0
  4923  01411A  0100               	movlb	0	; () banked
  4924  01411C  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4925  01411E  0EC8               	movlw	200
  4926  014120  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  4927  014122  0EFC               	movlw	252
  4928  014124  0100               	movlb	0	; () banked
  4929  014126  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4930  014128  0E18               	movlw	24
  4931  01412A  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4932  01412C  0E00               	movlw	0
  4933  01412E  EC49  F0A6         	call	_irobot_move
  4934                           
  4935                           ;main.c: 321: }
  4936  014132  0012               	return	
  4937  014134                     l2401:
  4938                           
  4939                           ;main.c: 322: else if(IRValue > _d3){
  4940  014134  0100               	movlb	0	; () banked
  4941  014136  516C               	movf	_IRValue& (0+255),w,b
  4942  014138  0101               	movlb	1	; () banked
  4943  01413A  5D0A               	subwf	correct_distance@_d3& (0+255),w,b
  4944  01413C  0100               	movlb	0	; () banked
  4945  01413E  516D               	movf	(_IRValue+1)& (0+255),w,b
  4946  014140  0101               	movlb	1	; () banked
  4947  014142  590B               	subwfb	(correct_distance@_d3+1)& (0+255),w,b
  4948  014144  B0D8               	btfsc	status,0,c
  4949  014146  D00E               	goto	l2403
  4950                           
  4951                           ; BSR set to: 1
  4952                           ;main.c: 323: irobot_move(0,200,750);
  4953  014148  0E00               	movlw	0
  4954  01414A  0100               	movlb	0	; () banked
  4955  01414C  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4956  01414E  0EC8               	movlw	200
  4957  014150  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  4958  014152  0E02               	movlw	2
  4959  014154  0100               	movlb	0	; () banked
  4960  014156  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4961  014158  0EEE               	movlw	238
  4962  01415A  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4963  01415C  0E00               	movlw	0
  4964  01415E  EC49  F0A6         	call	_irobot_move
  4965                           
  4966                           ;main.c: 324: }
  4967  014162  0012               	return	
  4968  014164                     l2403:
  4969                           
  4970                           ;main.c: 325: else{
  4971                           ;main.c: 326: irobot_move(0,200,1000);
  4972  014164  0E00               	movlw	0
  4973  014166  0100               	movlb	0	; () banked
  4974  014168  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4975  01416A  0EC8               	movlw	200
  4976  01416C  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  4977  01416E  0E03               	movlw	3
  4978  014170  0100               	movlb	0	; () banked
  4979  014172  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4980  014174  0EE8               	movlw	232
  4981  014176  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4982  014178  0E00               	movlw	0
  4983  01417A  EC49  F0A6         	call	_irobot_move
  4984  01417E  0012               	return	
  4985  014180                     __end_of_correct_distance:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1h	equ	0xFE2
  4995                           fsr1l	equ	0xFE1
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _mode3 *****************
  4999 ;; Defined at:
  5000 ;;		line 429 in file "main.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        0 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:   17
  5021 ;; This function calls:
  5022 ;;		_irobot_song_play
  5023 ;;		_move_and_rotate
  5024 ;;		_safeToGo
  5025 ;; This function is called by:
  5026 ;;		_main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text4
  5031  01660C                     __ptext4:
  5032                           	opt stack 0
  5033  01660C                     _mode3:
  5034                           	opt stack 13
  5035                           
  5036                           ;main.c: 430: safeToGo();
  5037                           
  5038                           ;incstack = 0
  5039  01660C  ECC5  F0B1         	call	_safeToGo	;wreg free
  5040                           
  5041                           ;main.c: 431: dist = 0;
  5042  016610  0E00               	movlw	0
  5043  016612  0100               	movlb	0	; () banked
  5044  016614  6F69               	movwf	(_dist+1)& (0+255),b
  5045  016616  0E00               	movlw	0
  5046  016618  6F68               	movwf	_dist& (0+255),b
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;main.c: 432: corner = 1;
  5050  01661A  0E00               	movlw	0
  5051  01661C  0103               	movlb	3	; () banked
  5052  01661E  6FFE               	movwf	(_corner+1)& (0+255),b
  5053  016620  0E01               	movlw	1
  5054  016622  6FFD               	movwf	_corner& (0+255),b
  5055                           
  5056                           ;main.c: 433: move_and_rotate();
  5057  016624  ECE0  F0A2         	call	_move_and_rotate	;wreg free
  5058                           
  5059                           ;main.c: 434: corner++;
  5060  016628  0103               	movlb	3	; () banked
  5061  01662A  4BFD               	infsnz	_corner& (0+255),f,b
  5062  01662C  2BFE               	incf	(_corner+1)& (0+255),f,b
  5063                           
  5064                           ; BSR set to: 3
  5065                           ;main.c: 435: move_and_rotate();
  5066  01662E  ECE0  F0A2         	call	_move_and_rotate	;wreg free
  5067                           
  5068                           ;main.c: 436: corner++;
  5069  016632  0103               	movlb	3	; () banked
  5070  016634  4BFD               	infsnz	_corner& (0+255),f,b
  5071  016636  2BFE               	incf	(_corner+1)& (0+255),f,b
  5072                           
  5073                           ; BSR set to: 3
  5074                           ;main.c: 437: move_and_rotate();
  5075  016638  ECE0  F0A2         	call	_move_and_rotate	;wreg free
  5076                           
  5077                           ;main.c: 438: corner++;
  5078  01663C  0103               	movlb	3	; () banked
  5079  01663E  4BFD               	infsnz	_corner& (0+255),f,b
  5080  016640  2BFE               	incf	(_corner+1)& (0+255),f,b
  5081                           
  5082                           ;main.c: 439: move_and_rotate();
  5083  016642  ECE0  F0A2         	call	_move_and_rotate	;wreg free
  5084                           
  5085                           ;main.c: 440: irobot_song_play(0);
  5086  016646  0E00               	movlw	0
  5087  016648  ECDE  F0B6         	call	_irobot_song_play
  5088  01664C  0012               	return		;funcret
  5089  01664E                     __end_of_mode3:
  5090                           	opt stack 0
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _move_and_rotate *****************
  5103 ;; Defined at:
  5104 ;;		line 143 in file "main.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;Total ram usage:        1 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:   14
  5125 ;; This function calls:
  5126 ;;		_Console_Render
  5127 ;;		___wmul
  5128 ;;		_delay_ms
  5129 ;;		_irobot_move_straight
  5130 ;;		_irobot_rotate
  5131 ;;		_irobot_stop_motion
  5132 ;;		_measureAndDisplayDistance
  5133 ;;		_printf
  5134 ;;		_update_distance
  5135 ;; This function is called by:
  5136 ;;		_mode3
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text5
  5141  0145C0                     __ptext5:
  5142                           	opt stack 0
  5143  0145C0                     _move_and_rotate:
  5144                           	opt stack 15
  5145                           
  5146                           ;main.c: 144: irobot_move_straight(100);
  5147                           
  5148                           ;incstack = 0
  5149  0145C0  0E00               	movlw	0
  5150  0145C2  0100               	movlb	0	; () banked
  5151  0145C4  6FD2               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  5152  0145C6  0E64               	movlw	100
  5153  0145C8  6FD1               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  5154  0145CA  EC7E  F0B6         	call	_irobot_move_straight	;wreg free
  5155                           
  5156                           ;main.c: 145: while (dist < (corner * 1000)) {
  5157  0145CE  D027               	goto	l2342
  5158  0145D0                     
  5159                           ;main.c: 146: update_distance();
  5160  0145D0  ECF2  F0B6         	call	_update_distance	;wreg free
  5161                           
  5162                           ;main.c: 147: dist += iRDistance;
  5163  0145D4  0100               	movlb	0	; () banked
  5164  0145D6  5176               	movf	_iRDistance& (0+255),w,b
  5165  0145D8  0100               	movlb	0	; () banked
  5166  0145DA  2768               	addwf	_dist& (0+255),f,b
  5167  0145DC  0100               	movlb	0	; () banked
  5168  0145DE  5177               	movf	(_iRDistance+1)& (0+255),w,b
  5169  0145E0  0100               	movlb	0	; () banked
  5170  0145E2  2369               	addwfc	(_dist+1)& (0+255),f,b
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;main.c: 148: printf("%c", (char)35);
  5174  0145E4  0EFB               	movlw	low STR_1
  5175  0145E6  0100               	movlb	0	; () banked
  5176  0145E8  6FCD               	movwf	printf@f& (0+255),b
  5177  0145EA  0EFF               	movlw	high STR_1
  5178  0145EC  0100               	movlb	0	; () banked
  5179  0145EE  6FCE               	movwf	(printf@f+1)& (0+255),b
  5180  0145F0  0E00               	movlw	0
  5181  0145F2  0100               	movlb	0	; () banked
  5182  0145F4  6FD0               	movwf	(?_printf+3)& (0+255),b
  5183  0145F6  0E23               	movlw	35
  5184  0145F8  6FCF               	movwf	(?_printf+2)& (0+255),b
  5185  0145FA  ECD4  F094         	call	_printf	;wreg free
  5186                           
  5187                           ;main.c: 149: printf("Distance: %d\n", dist);
  5188  0145FE  0EED               	movlw	low STR_2
  5189  014600  0100               	movlb	0	; () banked
  5190  014602  6FCD               	movwf	printf@f& (0+255),b
  5191  014604  0EFF               	movlw	high STR_2
  5192  014606  0100               	movlb	0	; () banked
  5193  014608  6FCE               	movwf	(printf@f+1)& (0+255),b
  5194  01460A  C068  F0CF         	movff	_dist,?_printf+2
  5195  01460E  C069  F0D0         	movff	_dist+1,?_printf+3
  5196  014612  ECD4  F094         	call	_printf	;wreg free
  5197                           
  5198                           ;main.c: 150: Console_Render();
  5199  014616  ECE8  F091         	call	_Console_Render	;wreg free
  5200                           
  5201                           ;main.c: 151: measureAndDisplayDistance();
  5202  01461A  EC91  F0A9         	call	_measureAndDisplayDistance	;wreg free
  5203  01461E                     l2342:
  5204  01461E  C3FD  F0B8         	movff	_corner,___wmul@multiplier
  5205  014622  C3FE  F0B9         	movff	_corner+1,___wmul@multiplier+1
  5206  014626  0E03               	movlw	3
  5207  014628  0100               	movlb	0	; () banked
  5208  01462A  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5209  01462C  0EE8               	movlw	232
  5210  01462E  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  5211  014630  EC5C  F0B4         	call	___wmul	;wreg free
  5212  014634  0100               	movlb	0	; () banked
  5213  014636  51B8               	movf	?___wmul& (0+255),w,b
  5214  014638  0100               	movlb	0	; () banked
  5215  01463A  5D68               	subwf	_dist& (0+255),w,b
  5216  01463C  0100               	movlb	0	; () banked
  5217  01463E  5169               	movf	(_dist+1)& (0+255),w,b
  5218  014640  0A80               	xorlw	128
  5219  014642  0103               	movlb	3	; () banked
  5220  014644  6FFF               	movwf	??_move_and_rotate& (0+255),b
  5221  014646  0100               	movlb	0	; () banked
  5222  014648  51B9               	movf	(?___wmul+1)& (0+255),w,b
  5223  01464A  0A80               	xorlw	128
  5224  01464C  0103               	movlb	3	; () banked
  5225  01464E  59FF               	subwfb	??_move_and_rotate& (0+255),w,b
  5226  014650  A0D8               	btfss	status,0,c
  5227  014652  D7BE               	goto	l2343
  5228                           
  5229                           ; BSR set to: 3
  5230                           ;main.c: 152: }
  5231                           ;main.c: 153: irobot_stop_motion(0);
  5232                           
  5233                           ; BSR set to: 3
  5234  014654  0E00               	movlw	0
  5235  014656  EC7B  F0B2         	call	_irobot_stop_motion
  5236                           
  5237                           ;main.c: 154: delay_ms(100);
  5238  01465A  0E00               	movlw	0
  5239  01465C  0100               	movlb	0	; () banked
  5240  01465E  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  5241  014660  0E64               	movlw	100
  5242  014662  6FB8               	movwf	delay_ms@ms& (0+255),b
  5243  014664  EC0F  F0AF         	call	_delay_ms	;wreg free
  5244                           
  5245                           ;main.c: 155: irobot_rotate(0, 68, 200);
  5246  014668  0E00               	movlw	0
  5247  01466A  0100               	movlb	0	; () banked
  5248  01466C  6FD6               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  5249  01466E  0E44               	movlw	68
  5250  014670  6FD5               	movwf	irobot_rotate@rotateAngle& (0+255),b
  5251  014672  0E00               	movlw	0
  5252  014674  0100               	movlb	0	; () banked
  5253  014676  6FD8               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  5254  014678  0EC8               	movlw	200
  5255  01467A  6FD7               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  5256  01467C  0E00               	movlw	0
  5257  01467E  ECCF  F09D         	call	_irobot_rotate
  5258                           
  5259                           ;main.c: 156: delay_ms(100);
  5260  014682  0E00               	movlw	0
  5261  014684  0100               	movlb	0	; () banked
  5262  014686  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
  5263  014688  0E64               	movlw	100
  5264  01468A  6FB8               	movwf	delay_ms@ms& (0+255),b
  5265  01468C  EC0F  F0AF         	call	_delay_ms	;wreg free
  5266  014690  0012               	return		;funcret
  5267  014692                     __end_of_move_and_rotate:
  5268                           	opt stack 0
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           status	equ	0xFD8
  5279                           
  5280 ;; *************** function _irobot_rotate *****************
  5281 ;; Defined at:
  5282 ;;		line 301 in file "Library/iRobotSerial.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;  isScript        1    wreg     unsigned char 
  5285 ;;  rotateAngle     2   29[BANK0 ] short 
  5286 ;;  rotateSpeed     2   31[BANK0 ] short 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  isScript        1   35[BANK0 ] unsigned char 
  5289 ;;  angleTotal      2   38[BANK0 ] short 
  5290 ;;  rotateDirect    2   36[BANK0 ] short 
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;Total ram usage:       11 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:   11
  5307 ;; This function calls:
  5308 ;;		_irobot_move
  5309 ;;		_irobot_stop_motion
  5310 ;;		_update_angle
  5311 ;; This function is called by:
  5312 ;;		_move_and_rotate
  5313 ;;		_findClosestWall
  5314 ;;		_irobot_rotate_to
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text6
  5319  013B9E                     __ptext6:
  5320                           	opt stack 0
  5321  013B9E                     _irobot_rotate:
  5322                           	opt stack 17
  5323                           
  5324                           ;incstack = 0
  5325                           ;irobot_rotate@isScript stored from wreg
  5326  013B9E  0100               	movlb	0	; () banked
  5327  013BA0  6FDB               	movwf	irobot_rotate@isScript& (0+255),b
  5328                           
  5329                           ;iRobotSerial.c: 302: INT16 angleTotal = 0;
  5330  013BA2  0E00               	movlw	0
  5331  013BA4  0100               	movlb	0	; () banked
  5332  013BA6  6FDF               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  5333  013BA8  0E00               	movlw	0
  5334  013BAA  6FDE               	movwf	irobot_rotate@angleTotal& (0+255),b
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;iRobotSerial.c: 303: INT16 rotateDirection;
  5338                           ;iRobotSerial.c: 305: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  5339  013BAC  0100               	movlb	0	; () banked
  5340  013BAE  BFD6               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  5341  013BB0  D00D               	goto	l2156
  5342  013BB2  0100               	movlb	0	; () banked
  5343  013BB4  51D6               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5344  013BB6  E104               	bnz	u11560
  5345  013BB8  0100               	movlb	0	; () banked
  5346  013BBA  05D5               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  5347  013BBC  A0D8               	btfss	status,0,c
  5348  013BBE  D006               	goto	l2156
  5349  013BC0                     u11560:
  5350                           
  5351                           ; BSR set to: 0
  5352  013BC0  0E00               	movlw	0
  5353  013BC2  0100               	movlb	0	; () banked
  5354  013BC4  6FDD               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  5355  013BC6  0E01               	movlw	1
  5356  013BC8  6FDC               	movwf	irobot_rotate@rotateDirection& (0+255),b
  5357  013BCA  D003               	goto	l2158
  5358  013BCC                     l2156:
  5359                           
  5360                           ; BSR set to: 0
  5361  013BCC  0100               	movlb	0	; () banked
  5362  013BCE  69D5               	setf	irobot_rotate@rotateAngle& (0+255),b
  5363  013BD0  69D6               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  5364  013BD2                     l2158:
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;iRobotSerial.c: 306: if (isScript) {
  5368                           
  5369                           ; BSR set to: 0
  5370  013BD2  0100               	movlb	0	; () banked
  5371  013BD4  51DB               	movf	irobot_rotate@isScript& (0+255),w,b
  5372  013BD6  0100               	movlb	0	; () banked
  5373  013BD8  B4D8               	btfsc	status,2,c
  5374  013BDA  D00C               	goto	l2159
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;iRobotSerial.c: 307: irobot_move(1, rotateSpeed, rotateDirection);
  5378  013BDC  C0D7  F0C8         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5379  013BE0  C0D8  F0C9         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5380  013BE4  C0DC  F0CA         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5381  013BE8  C0DD  F0CB         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5382  013BEC  0E01               	movlw	1
  5383  013BEE  EC49  F0A6         	call	_irobot_move
  5384                           
  5385                           ;iRobotSerial.c: 308: } else {
  5386  013BF2  0012               	return	
  5387  013BF4                     l2159:
  5388                           
  5389                           ;iRobotSerial.c: 309: irobot_move(0, rotateSpeed, rotateDirection);
  5390  013BF4  C0D7  F0C8         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5391  013BF8  C0D8  F0C9         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5392  013BFC  C0DC  F0CA         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5393  013C00  C0DD  F0CB         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5394  013C04  0E00               	movlw	0
  5395  013C06  EC49  F0A6         	call	_irobot_move
  5396                           
  5397                           ;iRobotSerial.c: 310: if (rotateSpeed > 0) {
  5398  013C0A  0100               	movlb	0	; () banked
  5399  013C0C  BFD8               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5400  013C0E  D022               	goto	u11590
  5401  013C10  0100               	movlb	0	; () banked
  5402  013C12  51D8               	movf	(irobot_rotate@rotateSpeed+1)& (0+255),w,b
  5403  013C14  E10F               	bnz	l14706
  5404  013C16  0100               	movlb	0	; () banked
  5405  013C18  05D7               	decf	irobot_rotate@rotateSpeed& (0+255),w,b
  5406  013C1A  B0D8               	btfsc	status,0,c
  5407  013C1C  D00B               	goto	l2162
  5408  013C1E  D01A               	goto	u11590
  5409  013C20                     
  5410                           ; BSR set to: 0
  5411                           ;iRobotSerial.c: 312: update_angle();
  5412                           
  5413                           ; BSR set to: 0
  5414  013C20  ECFB  F0B6         	call	_update_angle	;wreg free
  5415                           
  5416                           ;iRobotSerial.c: 313: angleTotal += iRAngle;
  5417  013C24  0100               	movlb	0	; () banked
  5418  013C26  5174               	movf	_iRAngle& (0+255),w,b
  5419  013C28  0100               	movlb	0	; () banked
  5420  013C2A  27DE               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5421  013C2C  0100               	movlb	0	; () banked
  5422  013C2E  5175               	movf	(_iRAngle+1)& (0+255),w,b
  5423  013C30  0100               	movlb	0	; () banked
  5424  013C32  23DF               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5425  013C34                     l2162:
  5426  013C34                     l14706:
  5427                           
  5428                           ; BSR set to: 0
  5429  013C34  0100               	movlb	0	; () banked
  5430  013C36  51D5               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5431  013C38  0100               	movlb	0	; () banked
  5432  013C3A  5DDE               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5433  013C3C  0100               	movlb	0	; () banked
  5434  013C3E  51DF               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5435  013C40  0A80               	xorlw	128
  5436  013C42  0100               	movlb	0	; () banked
  5437  013C44  6FD9               	movwf	??_irobot_rotate& (0+255),b
  5438  013C46  0100               	movlb	0	; () banked
  5439  013C48  51D6               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5440  013C4A  0A80               	xorlw	128
  5441  013C4C  0100               	movlb	0	; () banked
  5442  013C4E  59D9               	subwfb	??_irobot_rotate& (0+255),w,b
  5443  013C50  A0D8               	btfss	status,0,c
  5444  013C52  D7E6               	goto	l2163
  5445  013C54                     u11590:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;iRobotSerial.c: 314: }
  5449                           ;iRobotSerial.c: 315: }
  5450                           ;iRobotSerial.c: 316: if (rotateSpeed < 0) {
  5451                           
  5452                           ; BSR set to: 0
  5453                           
  5454                           ; BSR set to: 0
  5455  013C54  0100               	movlb	0	; () banked
  5456  013C56  BFD8               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5457  013C58  D014               	goto	l2166
  5458  013C5A  D023               	goto	u11610
  5459  013C5C                     
  5460                           ; BSR set to: 0
  5461                           ;iRobotSerial.c: 318: update_angle();
  5462                           
  5463                           ; BSR set to: 0
  5464  013C5C  ECFB  F0B6         	call	_update_angle	;wreg free
  5465                           
  5466                           ;iRobotSerial.c: 319: angleTotal += -iRAngle;
  5467  013C60  C074  F0D9         	movff	_iRAngle,??_irobot_rotate
  5468  013C64  C075  F0DA         	movff	_iRAngle+1,??_irobot_rotate+1
  5469  013C68  0100               	movlb	0	; () banked
  5470  013C6A  1FD9               	comf	??_irobot_rotate& (0+255),f,b
  5471  013C6C  1FDA               	comf	(??_irobot_rotate+1)& (0+255),f,b
  5472  013C6E  4BD9               	infsnz	??_irobot_rotate& (0+255),f,b
  5473  013C70  2BDA               	incf	(??_irobot_rotate+1)& (0+255),f,b
  5474  013C72  0100               	movlb	0	; () banked
  5475  013C74  51D9               	movf	??_irobot_rotate& (0+255),w,b
  5476  013C76  0100               	movlb	0	; () banked
  5477  013C78  27DE               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5478  013C7A  0100               	movlb	0	; () banked
  5479  013C7C  51DA               	movf	(??_irobot_rotate+1)& (0+255),w,b
  5480  013C7E  0100               	movlb	0	; () banked
  5481  013C80  23DF               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5482  013C82                     l2166:
  5483                           
  5484                           ; BSR set to: 0
  5485                           
  5486                           ; BSR set to: 0
  5487  013C82  0100               	movlb	0	; () banked
  5488  013C84  51D5               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5489  013C86  0100               	movlb	0	; () banked
  5490  013C88  5DDE               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5491  013C8A  0100               	movlb	0	; () banked
  5492  013C8C  51DF               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5493  013C8E  0A80               	xorlw	128
  5494  013C90  0100               	movlb	0	; () banked
  5495  013C92  6FD9               	movwf	??_irobot_rotate& (0+255),b
  5496  013C94  0100               	movlb	0	; () banked
  5497  013C96  51D6               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5498  013C98  0A80               	xorlw	128
  5499  013C9A  0100               	movlb	0	; () banked
  5500  013C9C  59D9               	subwfb	??_irobot_rotate& (0+255),w,b
  5501  013C9E  A0D8               	btfss	status,0,c
  5502  013CA0  D7DD               	goto	l2167
  5503  013CA2                     u11610:
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;iRobotSerial.c: 320: }
  5507                           ;iRobotSerial.c: 321: }
  5508                           ;iRobotSerial.c: 322: irobot_stop_motion(0);
  5509                           
  5510                           ; BSR set to: 0
  5511                           
  5512                           ; BSR set to: 0
  5513  013CA2  0E00               	movlw	0
  5514  013CA4  EC7B  F0B2         	call	_irobot_stop_motion
  5515  013CA8  0012               	return	
  5516  013CAA                     __end_of_irobot_rotate:
  5517                           	opt stack 0
  5518                           tblptru	equ	0xFF8
  5519                           tblptrh	equ	0xFF7
  5520                           tblptrl	equ	0xFF6
  5521                           tablat	equ	0xFF5
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           postdec1	equ	0xFE5
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _mode2 *****************
  5530 ;; Defined at:
  5531 ;;		line 403 in file "main.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:   17
  5552 ;; This function calls:
  5553 ;;		_Console_Render
  5554 ;;		_MXK_Dequeue
  5555 ;;		_MXK_Release
  5556 ;;		_MXK_SwitchTo
  5557 ;;		_irobot_move_straight
  5558 ;;		_irobot_song_play
  5559 ;;		_irobot_stop_motion
  5560 ;;		_measureAndDisplayDistance
  5561 ;;		_printf
  5562 ;;		_safeToGo
  5563 ;;		_update_distance
  5564 ;; This function is called by:
  5565 ;;		_main
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text7
  5570  013FA6                     __ptext7:
  5571                           	opt stack 0
  5572  013FA6                     _mode2:
  5573                           	opt stack 13
  5574                           
  5575                           ;main.c: 404: safeToGo();
  5576                           
  5577                           ;incstack = 0
  5578  013FA6  ECC5  F0B1         	call	_safeToGo	;wreg free
  5579                           
  5580                           ;main.c: 405: if (MXK_SwitchTo(eMXK_HMI)) {
  5581  013FAA  0E01               	movlw	1
  5582  013FAC  EC27  F0B3         	call	_MXK_SwitchTo
  5583  013FB0  0900               	iorlw	0
  5584  013FB2  B4D8               	btfsc	status,2,c
  5585  013FB4  D06B               	goto	l2438
  5586                           
  5587                           ;main.c: 406: printf("%c", (char)35);
  5588  013FB6  0EFB               	movlw	low STR_1
  5589  013FB8  0100               	movlb	0	; () banked
  5590  013FBA  6FCD               	movwf	printf@f& (0+255),b
  5591  013FBC  0EFF               	movlw	high STR_1
  5592  013FBE  0100               	movlb	0	; () banked
  5593  013FC0  6FCE               	movwf	(printf@f+1)& (0+255),b
  5594  013FC2  0E00               	movlw	0
  5595  013FC4  0100               	movlb	0	; () banked
  5596  013FC6  6FD0               	movwf	(?_printf+3)& (0+255),b
  5597  013FC8  0E23               	movlw	35
  5598  013FCA  6FCF               	movwf	(?_printf+2)& (0+255),b
  5599  013FCC  ECD4  F094         	call	_printf	;wreg free
  5600                           
  5601                           ;main.c: 407: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5602  013FD0  0E95               	movlw	low STR_8
  5603  013FD2  0100               	movlb	0	; () banked
  5604  013FD4  6FCD               	movwf	printf@f& (0+255),b
  5605  013FD6  0EFF               	movlw	high STR_8
  5606  013FD8  0100               	movlb	0	; () banked
  5607  013FDA  6FCE               	movwf	(printf@f+1)& (0+255),b
  5608  013FDC  C072  F0CF         	movff	_distanceTotal,?_printf+2
  5609  013FE0  C073  F0D0         	movff	_distanceTotal+1,?_printf+3
  5610  013FE4  C085  F0D1         	movff	_iRBumpLeft,?_printf+4
  5611  013FE8  0100               	movlb	0	; () banked
  5612  013FEA  6BD2               	clrf	(?_printf+5)& (0+255),b
  5613  013FEC  C086  F0D3         	movff	_iRBumpRight,?_printf+6
  5614  013FF0  0100               	movlb	0	; () banked
  5615  013FF2  6BD4               	clrf	(?_printf+7)& (0+255),b
  5616  013FF4  ECD4  F094         	call	_printf	;wreg free
  5617                           
  5618                           ;main.c: 408: Console_Render();
  5619  013FF8  ECE8  F091         	call	_Console_Render	;wreg free
  5620                           
  5621                           ;main.c: 410: dist = 0;
  5622  013FFC  0E00               	movlw	0
  5623  013FFE  0100               	movlb	0	; () banked
  5624  014000  6F69               	movwf	(_dist+1)& (0+255),b
  5625  014002  0E00               	movlw	0
  5626  014004  6F68               	movwf	_dist& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;main.c: 411: irobot_move_straight(200);
  5630  014006  0E00               	movlw	0
  5631  014008  0100               	movlb	0	; () banked
  5632  01400A  6FD2               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  5633  01400C  0EC8               	movlw	200
  5634  01400E  6FD1               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  5635  014010  EC7E  F0B6         	call	_irobot_move_straight	;wreg free
  5636                           
  5637                           ;main.c: 412: while (dist < 5000) {
  5638  014014  D027               	goto	l2435
  5639  014016                     
  5640                           ;main.c: 413: update_distance();
  5641  014016  ECF2  F0B6         	call	_update_distance	;wreg free
  5642                           
  5643                           ;main.c: 414: dist += iRDistance;
  5644  01401A  0100               	movlb	0	; () banked
  5645  01401C  5176               	movf	_iRDistance& (0+255),w,b
  5646  01401E  0100               	movlb	0	; () banked
  5647  014020  2768               	addwf	_dist& (0+255),f,b
  5648  014022  0100               	movlb	0	; () banked
  5649  014024  5177               	movf	(_iRDistance+1)& (0+255),w,b
  5650  014026  0100               	movlb	0	; () banked
  5651  014028  2369               	addwfc	(_dist+1)& (0+255),f,b
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;main.c: 415: printf("%c", (char)35);
  5655  01402A  0EFB               	movlw	low STR_1
  5656  01402C  0100               	movlb	0	; () banked
  5657  01402E  6FCD               	movwf	printf@f& (0+255),b
  5658  014030  0EFF               	movlw	high STR_1
  5659  014032  0100               	movlb	0	; () banked
  5660  014034  6FCE               	movwf	(printf@f+1)& (0+255),b
  5661  014036  0E00               	movlw	0
  5662  014038  0100               	movlb	0	; () banked
  5663  01403A  6FD0               	movwf	(?_printf+3)& (0+255),b
  5664  01403C  0E23               	movlw	35
  5665  01403E  6FCF               	movwf	(?_printf+2)& (0+255),b
  5666  014040  ECD4  F094         	call	_printf	;wreg free
  5667                           
  5668                           ;main.c: 416: printf("Distance: %d\n", dist);
  5669  014044  0EED               	movlw	low STR_2
  5670  014046  0100               	movlb	0	; () banked
  5671  014048  6FCD               	movwf	printf@f& (0+255),b
  5672  01404A  0EFF               	movlw	high STR_2
  5673  01404C  0100               	movlb	0	; () banked
  5674  01404E  6FCE               	movwf	(printf@f+1)& (0+255),b
  5675  014050  C068  F0CF         	movff	_dist,?_printf+2
  5676  014054  C069  F0D0         	movff	_dist+1,?_printf+3
  5677  014058  ECD4  F094         	call	_printf	;wreg free
  5678                           
  5679                           ;main.c: 417: Console_Render();
  5680  01405C  ECE8  F091         	call	_Console_Render	;wreg free
  5681                           
  5682                           ;main.c: 418: measureAndDisplayDistance();
  5683  014060  EC91  F0A9         	call	_measureAndDisplayDistance	;wreg free
  5684  014064                     l2435:
  5685  014064  0100               	movlb	0	; () banked
  5686  014066  BF69               	btfsc	(_dist+1)& (0+255),7,b
  5687  014068  D7D6               	goto	l2436
  5688  01406A  0E88               	movlw	136
  5689  01406C  0100               	movlb	0	; () banked
  5690  01406E  5D68               	subwf	_dist& (0+255),w,b
  5691  014070  0E13               	movlw	19
  5692  014072  0100               	movlb	0	; () banked
  5693  014074  5969               	subwfb	(_dist+1)& (0+255),w,b
  5694  014076  A0D8               	btfss	status,0,c
  5695  014078  D7CE               	goto	l2436
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;main.c: 419: }
  5699                           ;main.c: 420: irobot_stop_motion(0);
  5700                           
  5701                           ; BSR set to: 0
  5702  01407A  0E00               	movlw	0
  5703  01407C  EC7B  F0B2         	call	_irobot_stop_motion
  5704                           
  5705                           ;main.c: 422: if (MXK_Release())
  5706  014080  EC55  F0B6         	call	_MXK_Release	;wreg free
  5707  014084  0900               	iorlw	0
  5708  014086  A4D8               	btfss	status,2,c
  5709                           
  5710                           ;main.c: 423: MXK_Dequeue();
  5711  014088  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  5712  01408C                     l2438:
  5713                           
  5714                           ;main.c: 424: }
  5715                           ;main.c: 425: irobot_song_play(0);
  5716  01408C  0E00               	movlw	0
  5717  01408E  ECDE  F0B6         	call	_irobot_song_play
  5718  014092  0012               	return		;funcret
  5719  014094                     __end_of_mode2:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           postinc0	equ	0xFEE
  5726                           wreg	equ	0xFE8
  5727                           postdec1	equ	0xFE5
  5728                           fsr1h	equ	0xFE2
  5729                           fsr1l	equ	0xFE1
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _measureAndDisplayDistance *****************
  5733 ;; Defined at:
  5734 ;;		line 302 in file "main.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:        4 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:   13
  5755 ;; This function calls:
  5756 ;;		_ADC_Start
  5757 ;;		_ADC_Voltage
  5758 ;;		_HMI_Render
  5759 ;;		_HMI_SetNumber
  5760 ;;		_MXK_Dequeue
  5761 ;;		_MXK_Release
  5762 ;;		_MXK_SwitchTo
  5763 ;;		___fldiv
  5764 ;;		___fltol
  5765 ;; This function is called by:
  5766 ;;		_move_and_rotate
  5767 ;;		_correct_distance
  5768 ;;		_mode2
  5769 ;;		_mode4
  5770 ;;		_main
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text8
  5775  015322                     __ptext8:
  5776                           	opt stack 0
  5777  015322                     _measureAndDisplayDistance:
  5778                           	opt stack 16
  5779                           
  5780                           ;main.c: 303: ADC_Start(&ADC_AN0);
  5781                           
  5782                           ;incstack = 0
  5783  015322  0EB3               	movlw	low _ADC_AN0
  5784  015324  0100               	movlb	0	; () banked
  5785  015326  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  5786  015328  0E00               	movlw	high _ADC_AN0
  5787  01532A  0100               	movlb	0	; () banked
  5788  01532C  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5789  01532E  ECD9  F0AB         	call	_ADC_Start	;wreg free
  5790                           
  5791                           ;main.c: 304: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5792  015332  0EB3               	movlw	low _ADC_AN0
  5793  015334  0100               	movlb	0	; () banked
  5794  015336  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  5795  015338  0E00               	movlw	high _ADC_AN0
  5796  01533A  0100               	movlb	0	; () banked
  5797  01533C  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5798  01533E  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  5799  015342  C0DF  F102         	movff	?_ADC_Voltage,_measureAndDisplayDistance$15620
  5800  015346  C0E0  F103         	movff	?_ADC_Voltage+1,_measureAndDisplayDistance$15620+1
  5801  01534A  C0E1  F104         	movff	?_ADC_Voltage+2,_measureAndDisplayDistance$15620+2
  5802  01534E  C0E2  F105         	movff	?_ADC_Voltage+3,_measureAndDisplayDistance$15620+3
  5803                           
  5804                           ;main.c: 304: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5805  015352  C102  F0BC         	movff	_measureAndDisplayDistance$15620,___fldiv@a
  5806  015356  C103  F0BD         	movff	_measureAndDisplayDistance$15620+1,___fldiv@a+1
  5807  01535A  C104  F0BE         	movff	_measureAndDisplayDistance$15620+2,___fldiv@a+2
  5808  01535E  C105  F0BF         	movff	_measureAndDisplayDistance$15620+3,___fldiv@a+3
  5809  015362  0E00               	movlw	0
  5810  015364  0100               	movlb	0	; () banked
  5811  015366  6FB8               	movwf	___fldiv@b& (0+255),b
  5812  015368  0E00               	movlw	0
  5813  01536A  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  5814  01536C  0E6C               	movlw	108
  5815  01536E  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  5816  015370  0E42               	movlw	66
  5817  015372  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  5818  015374  ECA9  F08A         	call	___fldiv	;wreg free
  5819  015378  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  5820  01537C  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  5821  015380  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  5822  015384  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  5823  015388  EC55  F09E         	call	___fltol	;wreg free
  5824  01538C  C0F1  F06C         	movff	?___fltol,_IRValue
  5825  015390  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  5826                           
  5827                           ;main.c: 305: if (MXK_SwitchTo(eMXK_HMI)) {
  5828  015394  0E01               	movlw	1
  5829  015396  EC27  F0B3         	call	_MXK_SwitchTo
  5830  01539A  0900               	iorlw	0
  5831  01539C  B4D8               	btfsc	status,2,c
  5832  01539E  0012               	return	
  5833                           
  5834                           ;main.c: 306: HMI_SetNumber(IRValue);
  5835  0153A0  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  5836  0153A4  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5837  0153A8  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  5838                           
  5839                           ;main.c: 307: HMI_Render();
  5840  0153AC  EC88  F0B3         	call	_HMI_Render	;wreg free
  5841                           
  5842                           ;main.c: 308: if (MXK_Release())
  5843  0153B0  EC55  F0B6         	call	_MXK_Release	;wreg free
  5844  0153B4  0900               	iorlw	0
  5845  0153B6  B4D8               	btfsc	status,2,c
  5846  0153B8  0012               	return	
  5847                           
  5848                           ;main.c: 309: MXK_Dequeue();
  5849  0153BA  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  5850  0153BE  0012               	return	
  5851  0153C0                     __end_of_measureAndDisplayDistance:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           postdec1	equ	0xFE5
  5860                           fsr1h	equ	0xFE2
  5861                           fsr1l	equ	0xFE1
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function _irobot_move_straight *****************
  5865 ;; Defined at:
  5866 ;;		line 346 in file "Library/iRobotSerial.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  straightSpee    2   25[BANK0 ] short 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;Total ram usage:        2 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    9
  5887 ;; This function calls:
  5888 ;;		_irobot_move
  5889 ;; This function is called by:
  5890 ;;		_move_and_rotate
  5891 ;;		_mode2
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text9
  5896  016CFC                     __ptext9:
  5897                           	opt stack 0
  5898  016CFC                     _irobot_move_straight:
  5899                           	opt stack 19
  5900                           
  5901                           ;iRobotSerial.c: 347: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  5902                           
  5903                           ;incstack = 0
  5904  016CFC  C0D1  F0C8         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  5905  016D00  C0D2  F0C9         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  5906  016D04  0E7F               	movlw	127
  5907  016D06  0100               	movlb	0	; () banked
  5908  016D08  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  5909  016D0A  69CA               	setf	irobot_move@moveTurnRadius& (0+255),b
  5910  016D0C  0E00               	movlw	0
  5911  016D0E  EC49  F0A6         	call	_irobot_move
  5912  016D12  0012               	return		;funcret
  5913  016D14                     __end_of_irobot_move_straight:
  5914                           	opt stack 0
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1h	equ	0xFE2
  5923                           fsr1l	equ	0xFE1
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _mode1 *****************
  5927 ;; Defined at:
  5928 ;;		line 332 in file "main.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  moveto          2    2[BANK4 ] int 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;Total ram usage:        8 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:   17
  5949 ;; This function calls:
  5950 ;;		_ADC_Start
  5951 ;;		_ADC_Voltage
  5952 ;;		_Console_Render
  5953 ;;		_HMI_Render
  5954 ;;		_HMI_SetNumber
  5955 ;;		_MXK_Dequeue
  5956 ;;		_MXK_Release
  5957 ;;		_MXK_SwitchTo
  5958 ;;		_Motor_Move
  5959 ;;		_Motor_Speed
  5960 ;;		___fldiv
  5961 ;;		___fltol
  5962 ;;		_irobot_song_play
  5963 ;;		_printf
  5964 ;;		_safeToGo
  5965 ;; This function is called by:
  5966 ;;		_main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text10
  5971  011178                     __ptext10:
  5972                           	opt stack 0
  5973  011178                     _mode1:
  5974                           	opt stack 13
  5975                           
  5976                           ;main.c: 333: safeToGo();
  5977                           
  5978                           ;incstack = 0
  5979  011178  ECC5  F0B1         	call	_safeToGo	;wreg free
  5980                           
  5981                           ;main.c: 334: if (MXK_SwitchTo(eMXK_HMI)) {
  5982  01117C  0E01               	movlw	1
  5983  01117E  EC27  F0B3         	call	_MXK_SwitchTo
  5984  011182  0900               	iorlw	0
  5985  011184  B4D8               	btfsc	status,2,c
  5986  011186  D029               	goto	l2409
  5987                           
  5988                           ;main.c: 335: printf("%c", (char)35);
  5989  011188  0EFB               	movlw	low STR_1
  5990  01118A  0100               	movlb	0	; () banked
  5991  01118C  6FCD               	movwf	printf@f& (0+255),b
  5992  01118E  0EFF               	movlw	high STR_1
  5993  011190  0100               	movlb	0	; () banked
  5994  011192  6FCE               	movwf	(printf@f+1)& (0+255),b
  5995  011194  0E00               	movlw	0
  5996  011196  0100               	movlb	0	; () banked
  5997  011198  6FD0               	movwf	(?_printf+3)& (0+255),b
  5998  01119A  0E23               	movlw	35
  5999  01119C  6FCF               	movwf	(?_printf+2)& (0+255),b
  6000  01119E  ECD4  F094         	call	_printf	;wreg free
  6001                           
  6002                           ;main.c: 336: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  6003  0111A2  0E95               	movlw	low STR_8
  6004  0111A4  0100               	movlb	0	; () banked
  6005  0111A6  6FCD               	movwf	printf@f& (0+255),b
  6006  0111A8  0EFF               	movlw	high STR_8
  6007  0111AA  0100               	movlb	0	; () banked
  6008  0111AC  6FCE               	movwf	(printf@f+1)& (0+255),b
  6009  0111AE  C072  F0CF         	movff	_distanceTotal,?_printf+2
  6010  0111B2  C073  F0D0         	movff	_distanceTotal+1,?_printf+3
  6011  0111B6  C085  F0D1         	movff	_iRBumpLeft,?_printf+4
  6012  0111BA  0100               	movlb	0	; () banked
  6013  0111BC  6BD2               	clrf	(?_printf+5)& (0+255),b
  6014  0111BE  C086  F0D3         	movff	_iRBumpRight,?_printf+6
  6015  0111C2  0100               	movlb	0	; () banked
  6016  0111C4  6BD4               	clrf	(?_printf+7)& (0+255),b
  6017  0111C6  ECD4  F094         	call	_printf	;wreg free
  6018                           
  6019                           ;main.c: 337: Console_Render();
  6020  0111CA  ECE8  F091         	call	_Console_Render	;wreg free
  6021                           
  6022                           ;main.c: 338: if (MXK_Release())
  6023  0111CE  EC55  F0B6         	call	_MXK_Release	;wreg free
  6024  0111D2  0900               	iorlw	0
  6025  0111D4  A4D8               	btfss	status,2,c
  6026                           
  6027                           ;main.c: 339: MXK_Dequeue();
  6028  0111D6  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6029  0111DA                     l2409:
  6030                           
  6031                           ;main.c: 340: }
  6032                           ;main.c: 341: StepRotate = 0;
  6033  0111DA  0E00               	movlw	0
  6034  0111DC  0100               	movlb	0	; () banked
  6035  0111DE  6F71               	movwf	(_StepRotate+1)& (0+255),b
  6036  0111E0  0E00               	movlw	0
  6037  0111E2  6F70               	movwf	_StepRotate& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 342: MinDist = 1000;
  6041  0111E4  0E03               	movlw	3
  6042  0111E6  0100               	movlb	0	; () banked
  6043  0111E8  6FFC               	movwf	(_MinDist+1)& (0+255),b
  6044  0111EA  0EE8               	movlw	232
  6045  0111EC  6FFB               	movwf	_MinDist& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;main.c: 343: Stepstomin = 0;
  6049  0111EE  0E00               	movlw	0
  6050  0111F0  0100               	movlb	0	; () banked
  6051  0111F2  6F6F               	movwf	(_Stepstomin+1)& (0+255),b
  6052  0111F4  0E00               	movlw	0
  6053  0111F6  6F6E               	movwf	_Stepstomin& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;main.c: 344: IRValue = 0;
  6057  0111F8  0E00               	movlw	0
  6058  0111FA  0100               	movlb	0	; () banked
  6059  0111FC  6F6D               	movwf	(_IRValue+1)& (0+255),b
  6060  0111FE  0E00               	movlw	0
  6061  011200  6F6C               	movwf	_IRValue& (0+255),b
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;main.c: 345: TimerX = 8;
  6065  011202  0E00               	movlw	0
  6066  011204  0100               	movlb	0	; () banked
  6067  011206  6FFA               	movwf	(_TimerX+1)& (0+255),b
  6068  011208  0E08               	movlw	8
  6069  01120A  6FF9               	movwf	_TimerX& (0+255),b
  6070                           
  6071                           ;main.c: 346: while (StepRotate < 400) {
  6072  01120C  D0F9               	goto	u15340
  6073  01120E                     
  6074                           ; BSR set to: 0
  6075                           ;main.c: 347: StepRotate++;
  6076                           
  6077                           ; BSR set to: 0
  6078  01120E  0100               	movlb	0	; () banked
  6079  011210  4B70               	infsnz	_StepRotate& (0+255),f,b
  6080  011212  2B71               	incf	(_StepRotate+1)& (0+255),f,b
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;main.c: 348: ADC_Start(&ADC_AN0);
  6084  011214  0EB3               	movlw	low _ADC_AN0
  6085  011216  0100               	movlb	0	; () banked
  6086  011218  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  6087  01121A  0E00               	movlw	high _ADC_AN0
  6088  01121C  0100               	movlb	0	; () banked
  6089  01121E  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6090  011220  ECD9  F0AB         	call	_ADC_Start	;wreg free
  6091                           
  6092                           ;main.c: 349: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6093  011224  0EB3               	movlw	low _ADC_AN0
  6094  011226  0100               	movlb	0	; () banked
  6095  011228  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  6096  01122A  0E00               	movlw	high _ADC_AN0
  6097  01122C  0100               	movlb	0	; () banked
  6098  01122E  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  6099  011230  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  6100  011234  C0DF  F4AE         	movff	?_ADC_Voltage,_mode1$15621
  6101  011238  C0E0  F4AF         	movff	?_ADC_Voltage+1,_mode1$15621+1
  6102  01123C  C0E1  F4B0         	movff	?_ADC_Voltage+2,_mode1$15621+2
  6103  011240  C0E2  F4B1         	movff	?_ADC_Voltage+3,_mode1$15621+3
  6104                           
  6105                           ;main.c: 349: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6106  011244  C4AE  F0BC         	movff	_mode1$15621,___fldiv@a
  6107  011248  C4AF  F0BD         	movff	_mode1$15621+1,___fldiv@a+1
  6108  01124C  C4B0  F0BE         	movff	_mode1$15621+2,___fldiv@a+2
  6109  011250  C4B1  F0BF         	movff	_mode1$15621+3,___fldiv@a+3
  6110  011254  0E00               	movlw	0
  6111  011256  0100               	movlb	0	; () banked
  6112  011258  6FB8               	movwf	___fldiv@b& (0+255),b
  6113  01125A  0E00               	movlw	0
  6114  01125C  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  6115  01125E  0E6C               	movlw	108
  6116  011260  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  6117  011262  0E42               	movlw	66
  6118  011264  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  6119  011266  ECA9  F08A         	call	___fldiv	;wreg free
  6120  01126A  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  6121  01126E  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  6122  011272  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  6123  011276  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  6124  01127A  EC55  F09E         	call	___fltol	;wreg free
  6125  01127E  C0F1  F06C         	movff	?___fltol,_IRValue
  6126  011282  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  6127                           
  6128                           ;main.c: 350: if (MXK_SwitchTo(eMXK_HMI)) {
  6129  011286  0E01               	movlw	1
  6130  011288  EC27  F0B3         	call	_MXK_SwitchTo
  6131  01128C  0900               	iorlw	0
  6132  01128E  B4D8               	btfsc	status,2,c
  6133  011290  D00E               	goto	l2413
  6134                           
  6135                           ;main.c: 351: HMI_SetNumber(IRValue);
  6136  011292  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  6137  011296  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  6138  01129A  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  6139                           
  6140                           ;main.c: 352: HMI_Render();
  6141  01129E  EC88  F0B3         	call	_HMI_Render	;wreg free
  6142                           
  6143                           ;main.c: 353: if (MXK_Release())
  6144  0112A2  EC55  F0B6         	call	_MXK_Release	;wreg free
  6145  0112A6  0900               	iorlw	0
  6146  0112A8  A4D8               	btfss	status,2,c
  6147                           
  6148                           ;main.c: 354: MXK_Dequeue();
  6149  0112AA  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6150  0112AE                     l2413:
  6151                           
  6152                           ;main.c: 355: }
  6153                           ;main.c: 356: if (IRValue < MinDist) {
  6154  0112AE  0100               	movlb	0	; () banked
  6155  0112B0  51FB               	movf	_MinDist& (0+255),w,b
  6156  0112B2  0100               	movlb	0	; () banked
  6157  0112B4  5D6C               	subwf	_IRValue& (0+255),w,b
  6158  0112B6  0100               	movlb	0	; () banked
  6159  0112B8  516D               	movf	(_IRValue+1)& (0+255),w,b
  6160  0112BA  0A80               	xorlw	128
  6161  0112BC  0104               	movlb	4	; () banked
  6162  0112BE  6FAA               	movwf	??_mode1& (0+255),b
  6163  0112C0  0100               	movlb	0	; () banked
  6164  0112C2  51FC               	movf	(_MinDist+1)& (0+255),w,b
  6165  0112C4  0A80               	xorlw	128
  6166  0112C6  0104               	movlb	4	; () banked
  6167  0112C8  59AA               	subwfb	??_mode1& (0+255),w,b
  6168  0112CA  B0D8               	btfsc	status,0,c
  6169  0112CC  D008               	goto	l2414
  6170                           
  6171                           ; BSR set to: 4
  6172                           ;main.c: 357: MinDist = IRValue;
  6173  0112CE  C06C  F0FB         	movff	_IRValue,_MinDist
  6174  0112D2  C06D  F0FC         	movff	_IRValue+1,_MinDist+1
  6175                           
  6176                           ;main.c: 358: Stepstomin = StepRotate;
  6177  0112D6  C070  F06E         	movff	_StepRotate,_Stepstomin
  6178  0112DA  C071  F06F         	movff	_StepRotate+1,_Stepstomin+1
  6179  0112DE                     l2414:
  6180                           
  6181                           ; BSR set to: 4
  6182                           ;main.c: 359: }
  6183                           ;main.c: 360: if (MXK_SwitchTo(eMXK_Motor)) {
  6184                           
  6185                           ; BSR set to: 4
  6186  0112DE  0E08               	movlw	8
  6187  0112E0  EC27  F0B3         	call	_MXK_SwitchTo
  6188  0112E4  0900               	iorlw	0
  6189  0112E6  B4D8               	btfsc	status,2,c
  6190  0112E8  D020               	goto	l2416
  6191                           
  6192                           ;main.c: 361: Motor_Speed(&Stepper, (50));
  6193  0112EA  0EAD               	movlw	low _Stepper
  6194  0112EC  0100               	movlb	0	; () banked
  6195  0112EE  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  6196  0112F0  0E00               	movlw	high _Stepper
  6197  0112F2  0100               	movlb	0	; () banked
  6198  0112F4  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  6199  0112F6  0E00               	movlw	0
  6200  0112F8  0100               	movlb	0	; () banked
  6201  0112FA  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  6202  0112FC  0E32               	movlw	50
  6203  0112FE  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  6204  011300  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  6205                           
  6206                           ;main.c: 362: Motor_Move(&Stepper, 1);
  6207  011304  0EAD               	movlw	low _Stepper
  6208  011306  0100               	movlb	0	; () banked
  6209  011308  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  6210  01130A  0E00               	movlw	high _Stepper
  6211  01130C  0100               	movlb	0	; () banked
  6212  01130E  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  6213  011310  0E00               	movlw	0
  6214  011312  0100               	movlb	0	; () banked
  6215  011314  6FBE               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  6216  011316  0E01               	movlw	1
  6217  011318  6FBD               	movwf	Motor_Move@pDelta& (0+255),b
  6218  01131A  EC3F  F0B4         	call	_Motor_Move	;wreg free
  6219                           
  6220                           ;main.c: 363: if (MXK_Release())
  6221  01131E  EC55  F0B6         	call	_MXK_Release	;wreg free
  6222  011322  0900               	iorlw	0
  6223  011324  A4D8               	btfss	status,2,c
  6224                           
  6225                           ;main.c: 364: MXK_Dequeue();
  6226  011326  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6227  01132A                     l2416:
  6228                           
  6229                           ;main.c: 365: }
  6230                           ;main.c: 366: TimerX = 10;
  6231  01132A  0E00               	movlw	0
  6232  01132C  0100               	movlb	0	; () banked
  6233  01132E  6FFA               	movwf	(_TimerX+1)& (0+255),b
  6234  011330  0E0A               	movlw	10
  6235  011332  6FF9               	movwf	_TimerX& (0+255),b
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 367: if (TimerX > 0) {
  6239  011334  0100               	movlb	0	; () banked
  6240  011336  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  6241  011338  D063               	goto	u15340
  6242  01133A  0100               	movlb	0	; () banked
  6243  01133C  51FA               	movf	(_TimerX+1)& (0+255),w,b
  6244  01133E  E156               	bnz	l17632
  6245  011340  0100               	movlb	0	; () banked
  6246  011342  05F9               	decf	_TimerX& (0+255),w,b
  6247  011344  B0D8               	btfsc	status,0,c
  6248  011346  D052               	goto	l2418
  6249  011348  D05B               	goto	u15340
  6250  01134A                     l17614:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;main.c: 369: ADC_Start(&ADC_AN0);
  6254  01134A  0EB3               	movlw	low _ADC_AN0
  6255  01134C  0100               	movlb	0	; () banked
  6256  01134E  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  6257  011350  0E00               	movlw	high _ADC_AN0
  6258  011352  0100               	movlb	0	; () banked
  6259  011354  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6260  011356  ECD9  F0AB         	call	_ADC_Start	;wreg free
  6261                           
  6262                           ;main.c: 370: if (MXK_SwitchTo(eMXK_HMI)) {
  6263  01135A  0E01               	movlw	1
  6264  01135C  EC27  F0B3         	call	_MXK_SwitchTo
  6265  011360  0900               	iorlw	0
  6266  011362  B4D8               	btfsc	status,2,c
  6267  011364  D00E               	goto	l2421
  6268                           
  6269                           ;main.c: 371: HMI_SetNumber(IRValue);
  6270  011366  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  6271  01136A  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  6272  01136E  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  6273                           
  6274                           ;main.c: 372: HMI_Render();
  6275  011372  EC88  F0B3         	call	_HMI_Render	;wreg free
  6276                           
  6277                           ;main.c: 373: if (MXK_Release())
  6278  011376  EC55  F0B6         	call	_MXK_Release	;wreg free
  6279  01137A  0900               	iorlw	0
  6280  01137C  A4D8               	btfss	status,2,c
  6281                           
  6282                           ;main.c: 374: MXK_Dequeue();
  6283  01137E  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6284  011382                     l2421:
  6285                           
  6286                           ;main.c: 375: }
  6287                           ;main.c: 376: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6288  011382  0EB3               	movlw	low _ADC_AN0
  6289  011384  0100               	movlb	0	; () banked
  6290  011386  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  6291  011388  0E00               	movlw	high _ADC_AN0
  6292  01138A  0100               	movlb	0	; () banked
  6293  01138C  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  6294  01138E  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  6295  011392  C0DF  F4AE         	movff	?_ADC_Voltage,_mode1$15621
  6296  011396  C0E0  F4AF         	movff	?_ADC_Voltage+1,_mode1$15621+1
  6297  01139A  C0E1  F4B0         	movff	?_ADC_Voltage+2,_mode1$15621+2
  6298  01139E  C0E2  F4B1         	movff	?_ADC_Voltage+3,_mode1$15621+3
  6299                           
  6300                           ;main.c: 375: }
  6301                           ;main.c: 376: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6302  0113A2  C4AE  F0BC         	movff	_mode1$15621,___fldiv@a
  6303  0113A6  C4AF  F0BD         	movff	_mode1$15621+1,___fldiv@a+1
  6304  0113AA  C4B0  F0BE         	movff	_mode1$15621+2,___fldiv@a+2
  6305  0113AE  C4B1  F0BF         	movff	_mode1$15621+3,___fldiv@a+3
  6306  0113B2  0E00               	movlw	0
  6307  0113B4  0100               	movlb	0	; () banked
  6308  0113B6  6FB8               	movwf	___fldiv@b& (0+255),b
  6309  0113B8  0E00               	movlw	0
  6310  0113BA  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  6311  0113BC  0E6C               	movlw	108
  6312  0113BE  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  6313  0113C0  0E42               	movlw	66
  6314  0113C2  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  6315  0113C4  ECA9  F08A         	call	___fldiv	;wreg free
  6316  0113C8  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  6317  0113CC  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  6318  0113D0  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  6319  0113D4  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  6320  0113D8  EC55  F09E         	call	___fltol	;wreg free
  6321  0113DC  C0F1  F06C         	movff	?___fltol,_IRValue
  6322  0113E0  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  6323                           
  6324                           ;main.c: 377: TimerX--;
  6325  0113E4  0100               	movlb	0	; () banked
  6326  0113E6  07F9               	decf	_TimerX& (0+255),f,b
  6327  0113E8  A0D8               	btfss	status,0,c
  6328  0113EA  07FA               	decf	(_TimerX+1)& (0+255),f,b
  6329  0113EC                     l2418:
  6330  0113EC                     l17632:
  6331                           
  6332                           ; BSR set to: 0
  6333  0113EC  0100               	movlb	0	; () banked
  6334  0113EE  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  6335  0113F0  D007               	goto	u15340
  6336  0113F2  0100               	movlb	0	; () banked
  6337  0113F4  51FA               	movf	(_TimerX+1)& (0+255),w,b
  6338  0113F6  E1A9               	bnz	l17614
  6339  0113F8  0100               	movlb	0	; () banked
  6340  0113FA  05F9               	decf	_TimerX& (0+255),w,b
  6341  0113FC  B0D8               	btfsc	status,0,c
  6342  0113FE  D7A5               	goto	l2419
  6343  011400                     u15340:
  6344                           
  6345                           ; BSR set to: 0
  6346                           
  6347                           ; BSR set to: 0
  6348                           
  6349                           ; BSR set to: 0
  6350                           
  6351                           ; BSR set to: 0
  6352  011400  0100               	movlb	0	; () banked
  6353  011402  BF71               	btfsc	(_StepRotate+1)& (0+255),7,b
  6354  011404  D704               	goto	l2411
  6355  011406  0E90               	movlw	144
  6356  011408  0100               	movlb	0	; () banked
  6357  01140A  5D70               	subwf	_StepRotate& (0+255),w,b
  6358  01140C  0E01               	movlw	1
  6359  01140E  0100               	movlb	0	; () banked
  6360  011410  5971               	subwfb	(_StepRotate+1)& (0+255),w,b
  6361  011412  A0D8               	btfss	status,0,c
  6362  011414  D6FC               	goto	l2411
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;main.c: 378: }
  6366                           ;main.c: 379: }
  6367                           ;main.c: 380: }
  6368                           ;main.c: 381: if (MXK_SwitchTo(eMXK_Motor)) {
  6369                           
  6370                           ; BSR set to: 0
  6371  011416  0E08               	movlw	8
  6372  011418  EC27  F0B3         	call	_MXK_SwitchTo
  6373  01141C  0900               	iorlw	0
  6374  01141E  B4D8               	btfsc	status,2,c
  6375  011420  D08A               	goto	l2426
  6376                           
  6377                           ;main.c: 382: Motor_Speed(&Stepper, (50));
  6378  011422  0EAD               	movlw	low _Stepper
  6379  011424  0100               	movlb	0	; () banked
  6380  011426  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
  6381  011428  0E00               	movlw	high _Stepper
  6382  01142A  0100               	movlb	0	; () banked
  6383  01142C  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  6384  01142E  0E00               	movlw	0
  6385  011430  0100               	movlb	0	; () banked
  6386  011432  6FD6               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  6387  011434  0E32               	movlw	50
  6388  011436  6FD5               	movwf	Motor_Speed@pFrequency& (0+255),b
  6389  011438  EC3B  F0B5         	call	_Motor_Speed	;wreg free
  6390                           
  6391                           ;main.c: 383: int moveto = 400 - Stepstomin;
  6392  01143C  C06E  F4AA         	movff	_Stepstomin,??_mode1
  6393  011440  C06F  F4AB         	movff	_Stepstomin+1,??_mode1+1
  6394  011444  0104               	movlb	4	; () banked
  6395  011446  1FAA               	comf	??_mode1& (0+255),f,b
  6396  011448  1FAB               	comf	(??_mode1+1)& (0+255),f,b
  6397  01144A  4BAA               	infsnz	??_mode1& (0+255),f,b
  6398  01144C  2BAB               	incf	(??_mode1+1)& (0+255),f,b
  6399  01144E  0E90               	movlw	144
  6400  011450  0104               	movlb	4	; () banked
  6401  011452  25AA               	addwf	??_mode1& (0+255),w,b
  6402  011454  0104               	movlb	4	; () banked
  6403  011456  6FAC               	movwf	mode1@moveto& (0+255),b
  6404  011458  0E01               	movlw	1
  6405  01145A  0104               	movlb	4	; () banked
  6406  01145C  21AB               	addwfc	(??_mode1+1)& (0+255),w,b
  6407  01145E  0104               	movlb	4	; () banked
  6408  011460  6FAD               	movwf	(mode1@moveto+1)& (0+255),b
  6409                           
  6410                           ; BSR set to: 4
  6411                           ;main.c: 385: Motor_Move(&Stepper, (-moveto));
  6412  011462  0EAD               	movlw	low _Stepper
  6413  011464  0100               	movlb	0	; () banked
  6414  011466  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
  6415  011468  0E00               	movlw	high _Stepper
  6416  01146A  0100               	movlb	0	; () banked
  6417  01146C  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  6418  01146E  C4AC  F4AA         	movff	mode1@moveto,??_mode1
  6419  011472  C4AD  F4AB         	movff	mode1@moveto+1,??_mode1+1
  6420  011476  0104               	movlb	4	; () banked
  6421  011478  1FAA               	comf	??_mode1& (0+255),f,b
  6422  01147A  1FAB               	comf	(??_mode1+1)& (0+255),f,b
  6423  01147C  4BAA               	infsnz	??_mode1& (0+255),f,b
  6424  01147E  2BAB               	incf	(??_mode1+1)& (0+255),f,b
  6425  011480  C4AA  F0BD         	movff	??_mode1,Motor_Move@pDelta
  6426  011484  C4AB  F0BE         	movff	??_mode1+1,Motor_Move@pDelta+1
  6427  011488  EC3F  F0B4         	call	_Motor_Move	;wreg free
  6428                           
  6429                           ;main.c: 386: if (MXK_Release())
  6430  01148C  EC55  F0B6         	call	_MXK_Release	;wreg free
  6431  011490  0900               	iorlw	0
  6432  011492  B4D8               	btfsc	status,2,c
  6433  011494  D050               	goto	l2426
  6434                           
  6435                           ;main.c: 387: MXK_Dequeue();
  6436  011496  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6437                           
  6438                           ;main.c: 388: }
  6439                           ;main.c: 389: while (Stepper.mDelta > 0) {
  6440  01149A  D04D               	goto	l2426
  6441  01149C                     l17648:
  6442                           
  6443                           ;main.c: 390: ADC_Start(&ADC_AN0);
  6444  01149C  0EB3               	movlw	low _ADC_AN0
  6445  01149E  0100               	movlb	0	; () banked
  6446  0114A0  6FBA               	movwf	ADC_Start@pInput& (0+255),b
  6447  0114A2  0E00               	movlw	high _ADC_AN0
  6448  0114A4  0100               	movlb	0	; () banked
  6449  0114A6  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6450  0114A8  ECD9  F0AB         	call	_ADC_Start	;wreg free
  6451                           
  6452                           ;main.c: 391: if (MXK_SwitchTo(eMXK_HMI)) {
  6453  0114AC  0E01               	movlw	1
  6454  0114AE  EC27  F0B3         	call	_MXK_SwitchTo
  6455  0114B2  0900               	iorlw	0
  6456  0114B4  B4D8               	btfsc	status,2,c
  6457  0114B6  D00E               	goto	l2429
  6458                           
  6459                           ;main.c: 392: HMI_SetNumber(IRValue);
  6460  0114B8  C06C  F0CE         	movff	_IRValue,HMI_SetNumber@pInput
  6461  0114BC  C06D  F0CF         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  6462  0114C0  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
  6463                           
  6464                           ;main.c: 393: HMI_Render();
  6465  0114C4  EC88  F0B3         	call	_HMI_Render	;wreg free
  6466                           
  6467                           ;main.c: 394: if (MXK_Release())
  6468  0114C8  EC55  F0B6         	call	_MXK_Release	;wreg free
  6469  0114CC  0900               	iorlw	0
  6470  0114CE  A4D8               	btfss	status,2,c
  6471                           
  6472                           ;main.c: 395: MXK_Dequeue();
  6473  0114D0  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
  6474  0114D4                     l2429:
  6475                           
  6476                           ;main.c: 396: }
  6477                           ;main.c: 397: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6478  0114D4  0EB3               	movlw	low _ADC_AN0
  6479  0114D6  0100               	movlb	0	; () banked
  6480  0114D8  6FDF               	movwf	ADC_Voltage@pInput& (0+255),b
  6481  0114DA  0E00               	movlw	high _ADC_AN0
  6482  0114DC  0100               	movlb	0	; () banked
  6483  0114DE  6FE0               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  6484  0114E0  EC33  F0A1         	call	_ADC_Voltage	;wreg free
  6485  0114E4  C0DF  F4AE         	movff	?_ADC_Voltage,_mode1$15621
  6486  0114E8  C0E0  F4AF         	movff	?_ADC_Voltage+1,_mode1$15621+1
  6487  0114EC  C0E1  F4B0         	movff	?_ADC_Voltage+2,_mode1$15621+2
  6488  0114F0  C0E2  F4B1         	movff	?_ADC_Voltage+3,_mode1$15621+3
  6489                           
  6490                           ;main.c: 396: }
  6491                           ;main.c: 397: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6492  0114F4  C4AE  F0BC         	movff	_mode1$15621,___fldiv@a
  6493  0114F8  C4AF  F0BD         	movff	_mode1$15621+1,___fldiv@a+1
  6494  0114FC  C4B0  F0BE         	movff	_mode1$15621+2,___fldiv@a+2
  6495  011500  C4B1  F0BF         	movff	_mode1$15621+3,___fldiv@a+3
  6496  011504  0E00               	movlw	0
  6497  011506  0100               	movlb	0	; () banked
  6498  011508  6FB8               	movwf	___fldiv@b& (0+255),b
  6499  01150A  0E00               	movlw	0
  6500  01150C  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
  6501  01150E  0E6C               	movlw	108
  6502  011510  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
  6503  011512  0E42               	movlw	66
  6504  011514  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
  6505  011516  ECA9  F08A         	call	___fldiv	;wreg free
  6506  01151A  C0B8  F0F1         	movff	?___fldiv,___fltol@f1
  6507  01151E  C0B9  F0F2         	movff	?___fldiv+1,___fltol@f1+1
  6508  011522  C0BA  F0F3         	movff	?___fldiv+2,___fltol@f1+2
  6509  011526  C0BB  F0F4         	movff	?___fldiv+3,___fltol@f1+3
  6510  01152A  EC55  F09E         	call	___fltol	;wreg free
  6511  01152E  C0F1  F06C         	movff	?___fltol,_IRValue
  6512  011532  C0F2  F06D         	movff	?___fltol+1,_IRValue+1
  6513  011536                     l2426:
  6514  011536  0100               	movlb	0	; () banked
  6515  011538  BFAE               	btfsc	(_Stepper+1)& (0+255),7,b
  6516  01153A  D007               	goto	u15400
  6517  01153C  0100               	movlb	0	; () banked
  6518  01153E  51AE               	movf	(_Stepper+1)& (0+255),w,b
  6519  011540  E1AD               	bnz	l17648
  6520  011542  0100               	movlb	0	; () banked
  6521  011544  05AD               	decf	_Stepper& (0+255),w,b
  6522  011546  B0D8               	btfsc	status,0,c
  6523  011548  D7A9               	goto	l2427
  6524  01154A                     u15400:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 398: }
  6528                           ;main.c: 399: irobot_song_play(0);
  6529                           
  6530                           ; BSR set to: 0
  6531  01154A  0E00               	movlw	0
  6532  01154C  ECDE  F0B6         	call	_irobot_song_play
  6533  011550  0012               	return		;funcret
  6534  011552                     __end_of_mode1:
  6535                           	opt stack 0
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1h	equ	0xFE2
  6544                           fsr1l	equ	0xFE1
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _safeToGo *****************
  6548 ;; Defined at:
  6549 ;;		line 128 in file "main.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:   16
  6570 ;; This function calls:
  6571 ;;		_HMI_Poll
  6572 ;;		_irobot_song_play
  6573 ;;		_irobot_stop_motion
  6574 ;;		_update_angle
  6575 ;;		_update_bump_and_cliff
  6576 ;;		_update_distance
  6577 ;; This function is called by:
  6578 ;;		_mode1
  6579 ;;		_mode2
  6580 ;;		_mode3
  6581 ;;		_mode4
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text11
  6586  01638A                     __ptext11:
  6587                           	opt stack 0
  6588  01638A                     _safeToGo:
  6589                           	opt stack 13
  6590                           
  6591                           ;main.c: 129: update_bump_and_cliff();
  6592                           
  6593                           ;incstack = 0
  6594  01638A  EC22  F0B4         	call	_update_bump_and_cliff	;wreg free
  6595                           
  6596                           ;main.c: 130: update_distance();
  6597  01638E  ECF2  F0B6         	call	_update_distance	;wreg free
  6598                           
  6599                           ;main.c: 131: update_angle();
  6600  016392  ECFB  F0B6         	call	_update_angle	;wreg free
  6601                           
  6602                           ;main.c: 132: if (iRBumpLeft || iRBumpRight) {
  6603  016396  0100               	movlb	0	; () banked
  6604  016398  5185               	movf	_iRBumpLeft& (0+255),w,b
  6605  01639A  A4D8               	btfss	status,2,c
  6606  01639C  D004               	goto	u11890
  6607                           
  6608                           ; BSR set to: 0
  6609  01639E  0100               	movlb	0	; () banked
  6610  0163A0  5186               	movf	_iRBumpRight& (0+255),w,b
  6611  0163A2  B4D8               	btfsc	status,2,c
  6612  0163A4  D006               	goto	l2335
  6613  0163A6                     u11890:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 133: irobot_song_play(0);
  6617                           
  6618                           ; BSR set to: 0
  6619  0163A6  0E00               	movlw	0
  6620  0163A8  ECDE  F0B6         	call	_irobot_song_play
  6621                           
  6622                           ;main.c: 134: irobot_stop_motion(0);
  6623  0163AC  0E00               	movlw	0
  6624  0163AE  EC7B  F0B2         	call	_irobot_stop_motion
  6625  0163B2                     l2335:
  6626                           
  6627                           ;main.c: 135: }
  6628                           ;main.c: 136: if (angleTotal > 83) {
  6629  0163B2  0103               	movlb	3	; () banked
  6630  0163B4  BF46               	btfsc	(_angleTotal+1)& (0+255),7,b
  6631  0163B6  D00B               	goto	l2338
  6632  0163B8  0103               	movlb	3	; () banked
  6633  0163BA  5146               	movf	(_angleTotal+1)& (0+255),w,b
  6634  0163BC  E105               	bnz	u11900
  6635  0163BE  0E54               	movlw	84
  6636  0163C0  0103               	movlb	3	; () banked
  6637  0163C2  5D45               	subwf	_angleTotal& (0+255),w,b
  6638  0163C4  A0D8               	btfss	status,0,c
  6639  0163C6  D003               	goto	l2338
  6640  0163C8                     u11900:
  6641                           
  6642                           ; BSR set to: 3
  6643                           ;main.c: 137: irobot_stop_motion(0);
  6644  0163C8  0E00               	movlw	0
  6645  0163CA  EC7B  F0B2         	call	_irobot_stop_motion
  6646  0163CE                     l2338:
  6647                           
  6648                           ;main.c: 138: }
  6649                           ;main.c: 139: HMI_Poll();
  6650  0163CE  ECFC  F0AD         	call	_HMI_Poll	;wreg free
  6651  0163D2  0012               	return		;funcret
  6652  0163D4                     __end_of_safeToGo:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postdec1	equ	0xFE5
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function _update_distance *****************
  6666 ;; Defined at:
  6667 ;;		line 360 in file "Library/iRobotSerial.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;		None
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;		None
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  1    wreg      void 
  6674 ;; Registers used:
  6675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;Total ram usage:        0 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; Hardware stack levels required when called:   10
  6688 ;; This function calls:
  6689 ;;		_irobot_query_and_update
  6690 ;; This function is called by:
  6691 ;;		_safeToGo
  6692 ;;		_move_and_rotate
  6693 ;;		_mode2
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text12
  6698  016DE4                     __ptext12:
  6699                           	opt stack 0
  6700  016DE4                     _update_distance:
  6701                           	opt stack 18
  6702                           
  6703                           ;iRobotSerial.c: 361: irobot_query_and_update(1, iR_PKT_DISTANCE);
  6704                           
  6705                           ;incstack = 0
  6706  016DE4  0E00               	movlw	0
  6707  016DE6  0100               	movlb	0	; () banked
  6708  016DE8  6FBF               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6709  016DEA  0E13               	movlw	19
  6710  016DEC  6FBE               	movwf	?_irobot_query_and_update& (0+255),b
  6711  016DEE  0E01               	movlw	1
  6712  016DF0  EC2D  F098         	call	_irobot_query_and_update
  6713  016DF4  0012               	return		;funcret
  6714  016DF6                     __end_of_update_distance:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1h	equ	0xFE2
  6724                           fsr1l	equ	0xFE1
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _update_bump_and_cliff *****************
  6728 ;; Defined at:
  6729 ;;		line 352 in file "Library/iRobotSerial.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;Total ram usage:        0 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:   10
  6750 ;; This function calls:
  6751 ;;		_irobot_query_and_update
  6752 ;; This function is called by:
  6753 ;;		_safeToGo
  6754 ;;		_mode4
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text13
  6759  016844                     __ptext13:
  6760                           	opt stack 0
  6761  016844                     _update_bump_and_cliff:
  6762                           	opt stack 19
  6763                           
  6764                           ;iRobotSerial.c: 353: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  6765                           ;iRobotSerial.c: 354: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  6766                           ;iRobotSerial.c: 355: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  6767                           
  6768                           ;incstack = 0
  6769  016844  0E00               	movlw	0
  6770  016846  0100               	movlb	0	; () banked
  6771  016848  6FBF               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6772  01684A  0E07               	movlw	7
  6773  01684C  6FBE               	movwf	?_irobot_query_and_update& (0+255),b
  6774  01684E  0E00               	movlw	0
  6775  016850  0100               	movlb	0	; () banked
  6776  016852  6FC1               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  6777  016854  0E09               	movlw	9
  6778  016856  6FC0               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  6779  016858  0E00               	movlw	0
  6780  01685A  0100               	movlb	0	; () banked
  6781  01685C  6FC3               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  6782  01685E  0E0A               	movlw	10
  6783  016860  6FC2               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  6784  016862  0E00               	movlw	0
  6785  016864  0100               	movlb	0	; () banked
  6786  016866  6FC5               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  6787  016868  0E0B               	movlw	11
  6788  01686A  6FC4               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  6789  01686C  0E00               	movlw	0
  6790  01686E  0100               	movlb	0	; () banked
  6791  016870  6FC7               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  6792  016872  0E0C               	movlw	12
  6793  016874  6FC6               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  6794  016876  0E05               	movlw	5
  6795  016878  EC2D  F098         	call	_irobot_query_and_update
  6796  01687C  0012               	return		;funcret
  6797  01687E                     __end_of_update_bump_and_cliff:
  6798                           	opt stack 0
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           postdec1	equ	0xFE5
  6806                           fsr1h	equ	0xFE2
  6807                           fsr1l	equ	0xFE1
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _update_angle *****************
  6811 ;; Defined at:
  6812 ;;		line 366 in file "Library/iRobotSerial.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:   10
  6833 ;; This function calls:
  6834 ;;		_irobot_query_and_update
  6835 ;; This function is called by:
  6836 ;;		_irobot_rotate
  6837 ;;		_safeToGo
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text14
  6842  016DF6                     __ptext14:
  6843                           	opt stack 0
  6844  016DF6                     _update_angle:
  6845                           	opt stack 18
  6846                           
  6847                           ;iRobotSerial.c: 367: irobot_query_and_update(1, iR_PKT_ANGLE);
  6848                           
  6849                           ;incstack = 0
  6850  016DF6  0E00               	movlw	0
  6851  016DF8  0100               	movlb	0	; () banked
  6852  016DFA  6FBF               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6853  016DFC  0E14               	movlw	20
  6854  016DFE  6FBE               	movwf	?_irobot_query_and_update& (0+255),b
  6855  016E00  0E01               	movlw	1
  6856  016E02  EC2D  F098         	call	_irobot_query_and_update
  6857  016E06  0012               	return		;funcret
  6858  016E08                     __end_of_update_angle:
  6859                           	opt stack 0
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           postinc0	equ	0xFEE
  6865                           wreg	equ	0xFE8
  6866                           postdec1	equ	0xFE5
  6867                           fsr1h	equ	0xFE2
  6868                           fsr1l	equ	0xFE1
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function _irobot_query_and_update *****************
  6872 ;; Defined at:
  6873 ;;		line 142 in file "Library/iRobotSerial.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  numberOfPack    1    wreg     unsigned char 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  6878 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  6879 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  6880 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  6881 ;;		 -> ?_irobot_query_and_update(1), 
  6882 ;;  i               1   28[BANK0 ] unsigned char 
  6883 ;;  startIndex      1   27[BANK0 ] unsigned char 
  6884 ;;  j               1   26[BANK0 ] unsigned char 
  6885 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  6886 ;;  streamSize      1   23[BANK0 ] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6896 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;Total ram usage:      535 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    9
  6903 ;; This function calls:
  6904 ;;		_eusart_getch
  6905 ;;		_eusart_putch
  6906 ;;		_get_packet_size
  6907 ;;		_rx_assign
  6908 ;; This function is called by:
  6909 ;;		_update_bump_and_cliff
  6910 ;;		_update_distance
  6911 ;;		_update_angle
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text15
  6916  01305A                     __ptext15:
  6917                           	opt stack 0
  6918  01305A                     _irobot_query_and_update:
  6919                           	opt stack 19
  6920                           
  6921                           ;incstack = 0
  6922                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  6923  01305A  0100               	movlb	0	; () banked
  6924  01305C  6FD0               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  6925                           
  6926                           ;iRobotSerial.c: 143: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  6927  01305E  0E00               	movlw	0
  6928  013060  0100               	movlb	0	; () banked
  6929  013062  6FCF               	movwf	irobot_query_and_update@streamSize& (0+255),b
  6930  013064  0E00               	movlw	0
  6931  013066  0100               	movlb	0	; () banked
  6932  013068  6FD3               	movwf	irobot_query_and_update@startIndex& (0+255),b
  6933                           
  6934                           ;iRobotSerial.c: 145: va_list packetIDs;
  6935                           ;iRobotSerial.c: 146: *packetIDs = __va_start();
  6936  01306A  0EBE               	movlw	low ?_irobot_query_and_update
  6937  01306C  0100               	movlb	0	; () banked
  6938  01306E  6FCD               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  6939  013070  0E00               	movlw	high ?_irobot_query_and_update
  6940  013072  0100               	movlb	0	; () banked
  6941  013074  6FCE               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;iRobotSerial.c: 147: eusart_putch(iR_QUERY_LIST);
  6945  013076  0E95               	movlw	149
  6946  013078  EC22  F0B7         	call	_eusart_putch
  6947                           
  6948                           ;iRobotSerial.c: 148: eusart_putch(numberOfPacketRequests);
  6949  01307C  0100               	movlb	0	; () banked
  6950  01307E  51D0               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6951  013080  EC22  F0B7         	call	_eusart_putch
  6952                           
  6953                           ;iRobotSerial.c: 149: for (i = 0; i < numberOfPacketRequests; i++) {
  6954  013084  0E00               	movlw	0
  6955  013086  0100               	movlb	0	; () banked
  6956  013088  6FD4               	movwf	irobot_query_and_update@i& (0+255),b
  6957  01308A  D023               	goto	l2095
  6958  01308C                     
  6959                           ; BSR set to: 0
  6960                           ;iRobotSerial.c: 150: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  6961                           
  6962                           ; BSR set to: 0
  6963  01308C  C0CD  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  6964  013090  C0CE  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  6965  013094  50DF               	movf	indf2,w,c
  6966  013096  0100               	movlb	0	; () banked
  6967  013098  6FD1               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  6968                           
  6969                           ; BSR set to: 0
  6970  01309A  0E02               	movlw	2
  6971  01309C  0100               	movlb	0	; () banked
  6972  01309E  27CD               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  6973  0130A0  0E00               	movlw	0
  6974  0130A2  23CE               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;iRobotSerial.c: 151: streamSize += get_packet_size(packetVariable);
  6978  0130A4  0100               	movlb	0	; () banked
  6979  0130A6  51D1               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6980  0130A8  EC79  F0AF         	call	_get_packet_size
  6981  0130AC  0100               	movlb	0	; () banked
  6982  0130AE  27CF               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;iRobotSerial.c: 152: TXArray[i] = packetVariable;
  6986  0130B0  0100               	movlb	0	; () banked
  6987  0130B2  51D4               	movf	irobot_query_and_update@i& (0+255),w,b
  6988  0130B4  0D01               	mullw	1
  6989  0130B6  0E00               	movlw	low irobot_query_and_update@TXArray
  6990  0130B8  24F3               	addwf	prodl,w,c
  6991  0130BA  6ED9               	movwf	fsr2l,c
  6992  0130BC  0E02               	movlw	high irobot_query_and_update@TXArray
  6993  0130BE  20F4               	addwfc	prodh,w,c
  6994  0130C0  6EDA               	movwf	fsr2h,c
  6995  0130C2  C0D1  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;iRobotSerial.c: 153: eusart_putch(packetVariable);
  6999  0130C6  0100               	movlb	0	; () banked
  7000  0130C8  51D1               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  7001  0130CA  EC22  F0B7         	call	_eusart_putch
  7002  0130CE  0100               	movlb	0	; () banked
  7003  0130D0  2BD4               	incf	irobot_query_and_update@i& (0+255),f,b
  7004  0130D2                     l2095:
  7005                           
  7006                           ; BSR set to: 0
  7007                           
  7008                           ; BSR set to: 0
  7009  0130D2  0100               	movlb	0	; () banked
  7010  0130D4  51D0               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  7011  0130D6  0100               	movlb	0	; () banked
  7012  0130D8  5DD4               	subwf	irobot_query_and_update@i& (0+255),w,b
  7013  0130DA  A0D8               	btfss	status,0,c
  7014  0130DC  D7D7               	goto	l2096
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;iRobotSerial.c: 154: }
  7018                           ;iRobotSerial.c: 155: ;
  7019                           ;iRobotSerial.c: 157: for (i = 0; i < streamSize; i++) {
  7020                           
  7021                           ; BSR set to: 0
  7022  0130DE  0E00               	movlw	0
  7023  0130E0  0100               	movlb	0	; () banked
  7024  0130E2  6FD4               	movwf	irobot_query_and_update@i& (0+255),b
  7025  0130E4  D00E               	goto	l2098
  7026  0130E6                     
  7027                           ; BSR set to: 0
  7028                           ;iRobotSerial.c: 158: RXArray[i] = eusart_getch();
  7029                           
  7030                           ; BSR set to: 0
  7031  0130E6  0100               	movlb	0	; () banked
  7032  0130E8  51D4               	movf	irobot_query_and_update@i& (0+255),w,b
  7033  0130EA  0D01               	mullw	1
  7034  0130EC  0E00               	movlw	low irobot_query_and_update@RXArray
  7035  0130EE  24F3               	addwf	prodl,w,c
  7036  0130F0  6ED9               	movwf	fsr2l,c
  7037  0130F2  0E01               	movlw	high irobot_query_and_update@RXArray
  7038  0130F4  20F4               	addwfc	prodh,w,c
  7039  0130F6  6EDA               	movwf	fsr2h,c
  7040  0130F8  EC5F  F0B7         	call	_eusart_getch	;wreg free
  7041  0130FC  6EDF               	movwf	indf2,c
  7042  0130FE  0100               	movlb	0	; () banked
  7043  013100  2BD4               	incf	irobot_query_and_update@i& (0+255),f,b
  7044  013102                     l2098:
  7045                           
  7046                           ; BSR set to: 0
  7047                           
  7048                           ; BSR set to: 0
  7049  013102  0100               	movlb	0	; () banked
  7050  013104  51CF               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  7051  013106  0100               	movlb	0	; () banked
  7052  013108  5DD4               	subwf	irobot_query_and_update@i& (0+255),w,b
  7053  01310A  A0D8               	btfss	status,0,c
  7054  01310C  D7EC               	goto	l2099
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;iRobotSerial.c: 159: }
  7058                           ;iRobotSerial.c: 161: for (i = 0; i < numberOfPacketRequests; i++) {
  7059                           
  7060                           ; BSR set to: 0
  7061  01310E  0E00               	movlw	0
  7062  013110  0100               	movlb	0	; () banked
  7063  013112  6FD4               	movwf	irobot_query_and_update@i& (0+255),b
  7064  013114  D05E               	goto	l2101
  7065  013116                     l2102:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;iRobotSerial.c: 162: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  7069  013116  C0D3  F0D2         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  7070  01311A  D021               	goto	l2103
  7071  01311C                     
  7072                           ; BSR set to: 0
  7073                           ;iRobotSerial.c: 163: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  7074                           
  7075                           ; BSR set to: 0
  7076  01311C  0100               	movlb	0	; () banked
  7077  01311E  51D2               	movf	irobot_query_and_update@j& (0+255),w,b
  7078  013120  0D01               	mullw	1
  7079  013122  0E00               	movlw	low irobot_query_and_update@RXArray
  7080  013124  24F3               	addwf	prodl,w,c
  7081  013126  6ED9               	movwf	fsr2l,c
  7082  013128  0E01               	movlw	high irobot_query_and_update@RXArray
  7083  01312A  20F4               	addwfc	prodh,w,c
  7084  01312C  6EDA               	movwf	fsr2h,c
  7085  01312E  50DF               	movf	indf2,w,c
  7086  013130  0100               	movlb	0	; () banked
  7087  013132  6FB9               	movwf	rx_assign@packetIDValue& (0+255),b
  7088  013134  0100               	movlb	0	; () banked
  7089  013136  51D3               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  7090  013138  0800               	sublw	0
  7091  01313A  0100               	movlb	0	; () banked
  7092  01313C  25D2               	addwf	irobot_query_and_update@j& (0+255),w,b
  7093  01313E  0100               	movlb	0	; () banked
  7094  013140  6FBA               	movwf	rx_assign@byteNumber& (0+255),b
  7095  013142  0100               	movlb	0	; () banked
  7096  013144  51D4               	movf	irobot_query_and_update@i& (0+255),w,b
  7097  013146  0D01               	mullw	1
  7098  013148  0E00               	movlw	low irobot_query_and_update@TXArray
  7099  01314A  24F3               	addwf	prodl,w,c
  7100  01314C  6ED9               	movwf	fsr2l,c
  7101  01314E  0E02               	movlw	high irobot_query_and_update@TXArray
  7102  013150  20F4               	addwfc	prodh,w,c
  7103  013152  6EDA               	movwf	fsr2h,c
  7104  013154  50DF               	movf	indf2,w,c
  7105  013156  EC5B  F09F         	call	_rx_assign
  7106  01315A  0100               	movlb	0	; () banked
  7107  01315C  2BD2               	incf	irobot_query_and_update@j& (0+255),f,b
  7108  01315E                     l2103:
  7109                           
  7110                           ; BSR set to: 0
  7111                           
  7112                           ; BSR set to: 0
  7113  01315E  0100               	movlb	0	; () banked
  7114  013160  51D4               	movf	irobot_query_and_update@i& (0+255),w,b
  7115  013162  0D01               	mullw	1
  7116  013164  0E00               	movlw	low irobot_query_and_update@TXArray
  7117  013166  24F3               	addwf	prodl,w,c
  7118  013168  6ED9               	movwf	fsr2l,c
  7119  01316A  0E02               	movlw	high irobot_query_and_update@TXArray
  7120  01316C  20F4               	addwfc	prodh,w,c
  7121  01316E  6EDA               	movwf	fsr2h,c
  7122  013170  50DF               	movf	indf2,w,c
  7123  013172  EC79  F0AF         	call	_get_packet_size
  7124  013176  0100               	movlb	0	; () banked
  7125  013178  6FC8               	movwf	??_irobot_query_and_update& (0+255),b
  7126  01317A  6BC9               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  7127  01317C  0100               	movlb	0	; () banked
  7128  01317E  51D3               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  7129  013180  0100               	movlb	0	; () banked
  7130  013182  27C8               	addwf	??_irobot_query_and_update& (0+255),f,b
  7131  013184  0E00               	movlw	0
  7132  013186  23C9               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  7133  013188  0100               	movlb	0	; () banked
  7134  01318A  51D2               	movf	irobot_query_and_update@j& (0+255),w,b
  7135  01318C  0100               	movlb	0	; () banked
  7136  01318E  6FCA               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  7137  013190  6BCB               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  7138  013192  0100               	movlb	0	; () banked
  7139  013194  51C8               	movf	??_irobot_query_and_update& (0+255),w,b
  7140  013196  0100               	movlb	0	; () banked
  7141  013198  5DCA               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  7142  01319A  0100               	movlb	0	; () banked
  7143  01319C  51CB               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  7144  01319E  0A80               	xorlw	128
  7145  0131A0  0100               	movlb	0	; () banked
  7146  0131A2  6FCC               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  7147  0131A4  0100               	movlb	0	; () banked
  7148  0131A6  51C9               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  7149  0131A8  0A80               	xorlw	128
  7150  0131AA  0100               	movlb	0	; () banked
  7151  0131AC  59CC               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  7152  0131AE  A0D8               	btfss	status,0,c
  7153  0131B0  D7B5               	goto	l2104
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;iRobotSerial.c: 164: }
  7157                           ;iRobotSerial.c: 165: startIndex += get_packet_size(TXArray[i]);
  7158                           
  7159                           ; BSR set to: 0
  7160  0131B2  0100               	movlb	0	; () banked
  7161  0131B4  51D4               	movf	irobot_query_and_update@i& (0+255),w,b
  7162  0131B6  0D01               	mullw	1
  7163  0131B8  0E00               	movlw	low irobot_query_and_update@TXArray
  7164  0131BA  24F3               	addwf	prodl,w,c
  7165  0131BC  6ED9               	movwf	fsr2l,c
  7166  0131BE  0E02               	movlw	high irobot_query_and_update@TXArray
  7167  0131C0  20F4               	addwfc	prodh,w,c
  7168  0131C2  6EDA               	movwf	fsr2h,c
  7169  0131C4  50DF               	movf	indf2,w,c
  7170  0131C6  EC79  F0AF         	call	_get_packet_size
  7171  0131CA  0100               	movlb	0	; () banked
  7172  0131CC  27D3               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  7173                           
  7174                           ; BSR set to: 0
  7175  0131CE  0100               	movlb	0	; () banked
  7176  0131D0  2BD4               	incf	irobot_query_and_update@i& (0+255),f,b
  7177  0131D2                     l2101:
  7178                           
  7179                           ; BSR set to: 0
  7180                           
  7181                           ; BSR set to: 0
  7182  0131D2  0100               	movlb	0	; () banked
  7183  0131D4  51D0               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  7184  0131D6  0100               	movlb	0	; () banked
  7185  0131D8  5DD4               	subwf	irobot_query_and_update@i& (0+255),w,b
  7186  0131DA  B0D8               	btfsc	status,0,c
  7187  0131DC  0012               	return	
  7188  0131DE  D79B               	goto	l2102
  7189  0131E0                     __end_of_irobot_query_and_update:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _rx_assign *****************
  7208 ;; Defined at:
  7209 ;;		line 74 in file "Library/iRobotSerial.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  packetID        1    wreg     unsigned char 
  7212 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  7213 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  packetID        1    5[BANK0 ] unsigned char 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        5 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    8
  7232 ;; This function calls:
  7233 ;;		_sort_iRBumpDrop
  7234 ;; This function is called by:
  7235 ;;		_irobot_query_and_update
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text16
  7240  013EB6                     __ptext16:
  7241                           	opt stack 0
  7242  013EB6                     _rx_assign:
  7243                           	opt stack 19
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;incstack = 0
  7247                           ;rx_assign@packetID stored from wreg
  7248  013EB6  0100               	movlb	0	; () banked
  7249  013EB8  6FBD               	movwf	rx_assign@packetID& (0+255),b
  7250                           
  7251                           ;iRobotSerial.c: 75: switch (packetID) {
  7252  013EBA  D057               	goto	l2035
  7253  013EBC                     l2036:
  7254                           
  7255                           ; BSR set to: 0
  7256  013EBC  C0B9  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;iRobotSerial.c: 77: sort_iRBumpDrop();
  7260  013EC0  EC09  F0AB         	call	_sort_iRBumpDrop	;wreg free
  7261                           
  7262                           ;iRobotSerial.c: 78: break;
  7263  013EC4  0012               	return	
  7264  013EC6                     l2038:
  7265                           
  7266                           ; BSR set to: 0
  7267  013EC6  C0B9  F035         	movff	rx_assign@packetIDValue,_iRWall
  7268                           
  7269                           ;iRobotSerial.c: 80: break;
  7270  013ECA  0012               	return	
  7271  013ECC                     l2039:
  7272                           
  7273                           ; BSR set to: 0
  7274  013ECC  C0B9  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  7275                           
  7276                           ;iRobotSerial.c: 82: break;
  7277  013ED0  0012               	return	
  7278  013ED2                     l2040:
  7279                           
  7280                           ; BSR set to: 0
  7281  013ED2  C0B9  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  7282                           
  7283                           ;iRobotSerial.c: 84: break;
  7284  013ED6  0012               	return	
  7285  013ED8                     l2041:
  7286                           
  7287                           ; BSR set to: 0
  7288  013ED8  C0B9  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  7289                           
  7290                           ;iRobotSerial.c: 86: break;
  7291  013EDC  0012               	return	
  7292  013EDE                     l2042:
  7293                           
  7294                           ; BSR set to: 0
  7295  013EDE  C0B9  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  7296                           
  7297                           ;iRobotSerial.c: 88: break;
  7298  013EE2  0012               	return	
  7299  013EE4                     l2043:
  7300                           
  7301                           ; BSR set to: 0
  7302  013EE4  C0B9  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  7303                           
  7304                           ;iRobotSerial.c: 90: break;
  7305  013EE8  0012               	return	
  7306  013EEA                     
  7307                           ; BSR set to: 0
  7308                           ;iRobotSerial.c: 92: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  7309                           ;iRobotSerial.c: 93: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB);
  7310                           
  7311                           ; BSR set to: 0
  7312  013EEA  0100               	movlb	0	; () banked
  7313  013EEC  51BA               	movf	rx_assign@byteNumber& (0+255),w,b
  7314  013EEE  0100               	movlb	0	; () banked
  7315  013EF0  A4D8               	btfss	status,2,c
  7316  013EF2  D005               	goto	l2046
  7317                           
  7318                           ; BSR set to: 0
  7319  013EF4  C0B9  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  7320  013EF8  0103               	movlb	3	; () banked
  7321  013EFA  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  7322  013EFC  0012               	return	
  7323  013EFE                     l2046:
  7324                           
  7325                           ; BSR set to: 0
  7326  013EFE  C0B9  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  7327  013F02  0103               	movlb	3	; () banked
  7328  013F04  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  7329                           
  7330                           ; BSR set to: 3
  7331  013F06  0103               	movlb	3	; () banked
  7332  013F08  5122               	movf	_iRDistanceSS& (0+255),w,b
  7333  013F0A  0100               	movlb	0	; () banked
  7334  013F0C  6FBC               	movwf	(??_rx_assign+1)& (0+255),b
  7335  013F0E  6BBB               	clrf	??_rx_assign& (0+255),b
  7336  013F10  0103               	movlb	3	; () banked
  7337  013F12  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  7338  013F14  0100               	movlb	0	; () banked
  7339  013F16  25BB               	addwf	??_rx_assign& (0+255),w,b
  7340  013F18  0100               	movlb	0	; () banked
  7341  013F1A  6F76               	movwf	_iRDistance& (0+255),b
  7342  013F1C  0103               	movlb	3	; () banked
  7343  013F1E  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  7344  013F20  0100               	movlb	0	; () banked
  7345  013F22  21BC               	addwfc	(??_rx_assign+1)& (0+255),w,b
  7346  013F24  0100               	movlb	0	; () banked
  7347  013F26  6F77               	movwf	(_iRDistance+1)& (0+255),b
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;iRobotSerial.c: 94: break;
  7351  013F28  0012               	return	
  7352  013F2A                     
  7353                           ; BSR set to: 0
  7354                           ;iRobotSerial.c: 96: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  7355                           ;iRobotSerial.c: 97: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB);
  7356                           
  7357                           ; BSR set to: 0
  7358  013F2A  0100               	movlb	0	; () banked
  7359  013F2C  51BA               	movf	rx_assign@byteNumber& (0+255),w,b
  7360  013F2E  0100               	movlb	0	; () banked
  7361  013F30  A4D8               	btfss	status,2,c
  7362  013F32  D005               	goto	l2051
  7363                           
  7364                           ; BSR set to: 0
  7365  013F34  C0B9  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  7366  013F38  0103               	movlb	3	; () banked
  7367  013F3A  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  7368  013F3C  0012               	return	
  7369  013F3E                     l2051:
  7370                           
  7371                           ; BSR set to: 0
  7372  013F3E  C0B9  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  7373  013F42  0103               	movlb	3	; () banked
  7374  013F44  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  7375                           
  7376                           ; BSR set to: 3
  7377  013F46  0103               	movlb	3	; () banked
  7378  013F48  511E               	movf	_iRAngleSS& (0+255),w,b
  7379  013F4A  0100               	movlb	0	; () banked
  7380  013F4C  6FBC               	movwf	(??_rx_assign+1)& (0+255),b
  7381  013F4E  6BBB               	clrf	??_rx_assign& (0+255),b
  7382  013F50  0103               	movlb	3	; () banked
  7383  013F52  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  7384  013F54  0100               	movlb	0	; () banked
  7385  013F56  25BB               	addwf	??_rx_assign& (0+255),w,b
  7386  013F58  0100               	movlb	0	; () banked
  7387  013F5A  6F74               	movwf	_iRAngle& (0+255),b
  7388  013F5C  0103               	movlb	3	; () banked
  7389  013F5E  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  7390  013F60  0100               	movlb	0	; () banked
  7391  013F62  21BC               	addwfc	(??_rx_assign+1)& (0+255),w,b
  7392  013F64  0100               	movlb	0	; () banked
  7393  013F66  6F75               	movwf	(_iRAngle+1)& (0+255),b
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;iRobotSerial.c: 99: }
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;iRobotSerial.c: 98: break;
  7400  013F68  0012               	return	
  7401  013F6A                     l2035:
  7402                           
  7403                           ; BSR set to: 0
  7404  013F6A  0100               	movlb	0	; () banked
  7405  013F6C  51BD               	movf	rx_assign@packetID& (0+255),w,b
  7406                           
  7407                           ; Switch size 1, requested type "space"
  7408                           ; Number of cases is 9, Range of values is 7 to 20
  7409                           ; switch strategies available:
  7410                           ; Name         Instructions Cycles
  7411                           ; simple_byte           28    15 (average)
  7412                           ;	Chosen strategy is simple_byte
  7413  013F6E  0A07               	xorlw	7	; case 7
  7414  013F70  B4D8               	btfsc	status,2,c
  7415  013F72  D7A4               	goto	l2036
  7416  013F74  0A0F               	xorlw	15	; case 8
  7417  013F76  B4D8               	btfsc	status,2,c
  7418  013F78  D7A6               	goto	l2038
  7419  013F7A  0A01               	xorlw	1	; case 9
  7420  013F7C  B4D8               	btfsc	status,2,c
  7421  013F7E  D7A6               	goto	l2039
  7422  013F80  0A03               	xorlw	3	; case 10
  7423  013F82  B4D8               	btfsc	status,2,c
  7424  013F84  D7A6               	goto	l2040
  7425  013F86  0A01               	xorlw	1	; case 11
  7426  013F88  B4D8               	btfsc	status,2,c
  7427  013F8A  D7A6               	goto	l2041
  7428  013F8C  0A07               	xorlw	7	; case 12
  7429  013F8E  B4D8               	btfsc	status,2,c
  7430  013F90  D7A6               	goto	l2042
  7431  013F92  0A01               	xorlw	1	; case 13
  7432  013F94  B4D8               	btfsc	status,2,c
  7433  013F96  D7A6               	goto	l2043
  7434  013F98  0A1E               	xorlw	30	; case 19
  7435  013F9A  B4D8               	btfsc	status,2,c
  7436  013F9C  D7A6               	goto	l2044
  7437  013F9E  0A07               	xorlw	7	; case 20
  7438  013FA0  A4D8               	btfss	status,2,c
  7439  013FA2  0012               	return	
  7440  013FA4  D7C2               	goto	l2049
  7441  013FA6                     __end_of_rx_assign:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1h	equ	0xFE2
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _sort_iRBumpDrop *****************
  7460 ;; Defined at:
  7461 ;;		line 102 in file "Library/iRobotSerial.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      void 
  7468 ;; Registers used:
  7469 ;;		wreg, status,2, status,0
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;Total ram usage:        1 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    7
  7482 ;; This function calls:
  7483 ;;		Nothing
  7484 ;; This function is called by:
  7485 ;;		_rx_assign
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text17
  7490  015612                     __ptext17:
  7491                           	opt stack 0
  7492  015612                     _sort_iRBumpDrop:
  7493                           	opt stack 19
  7494                           
  7495                           ;iRobotSerial.c: 103: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  7496                           
  7497                           ;incstack = 0
  7498  015612  A036               	btfss	_iRBumpDrop,0,c
  7499  015614  D002               	goto	l2058
  7500  015616  0E01               	movlw	1
  7501  015618  D001               	goto	L1
  7502  01561A                     l2058:
  7503                           
  7504                           ; BSR set to: 0
  7505  01561A  0E00               	movlw	0
  7506  01561C                     L1:
  7507  01561C  0100               	movlb	0	; () banked
  7508  01561E  6F86               	movwf	_iRBumpRight& (0+255),b
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;iRobotSerial.c: 104: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0
      +                          );
  7512                           
  7513                           ; BSR set to: 0
  7514  015620  C036  F0B8         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7515  015624  0100               	movlb	0	; () banked
  7516  015626  90D8               	bcf	status,0,c
  7517  015628  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7518  01562A  0100               	movlb	0	; () banked
  7519  01562C  A1B8               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7520  01562E  D002               	goto	l2062
  7521                           
  7522                           ; BSR set to: 0
  7523  015630  0E01               	movlw	1
  7524  015632  D001               	goto	L2
  7525  015634                     l2062:
  7526                           
  7527                           ; BSR set to: 0
  7528                           
  7529                           ; BSR set to: 0
  7530  015634  0E00               	movlw	0
  7531  015636                     L2:
  7532  015636  0100               	movlb	0	; () banked
  7533  015638  6F85               	movwf	_iRBumpLeft& (0+255),b
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;iRobotSerial.c: 105: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight =
      +                           0);
  7537                           
  7538                           ; BSR set to: 0
  7539  01563A  C036  F0B8         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7540  01563E  0100               	movlb	0	; () banked
  7541  015640  90D8               	bcf	status,0,c
  7542  015642  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7543  015644  0100               	movlb	0	; () banked
  7544  015646  90D8               	bcf	status,0,c
  7545  015648  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7546  01564A  0100               	movlb	0	; () banked
  7547  01564C  A1B8               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7548  01564E  D002               	goto	l2066
  7549                           
  7550                           ; BSR set to: 0
  7551  015650  0E01               	movlw	1
  7552  015652  D001               	goto	L3
  7553  015654                     l2066:
  7554                           
  7555                           ; BSR set to: 0
  7556                           
  7557                           ; BSR set to: 0
  7558  015654  0E00               	movlw	0
  7559  015656                     L3:
  7560  015656  0100               	movlb	0	; () banked
  7561  015658  6F84               	movwf	_iRDropRight& (0+255),b
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;iRobotSerial.c: 106: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0
      +                          );
  7565                           
  7566                           ; BSR set to: 0
  7567  01565A  C036  F0B8         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7568  01565E  0100               	movlb	0	; () banked
  7569  015660  90D8               	bcf	status,0,c
  7570  015662  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7571  015664  0100               	movlb	0	; () banked
  7572  015666  90D8               	bcf	status,0,c
  7573  015668  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7574  01566A  0100               	movlb	0	; () banked
  7575  01566C  90D8               	bcf	status,0,c
  7576  01566E  33B8               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7577  015670  0100               	movlb	0	; () banked
  7578  015672  A1B8               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7579  015674  D002               	goto	l2070
  7580                           
  7581                           ; BSR set to: 0
  7582  015676  0E01               	movlw	1
  7583  015678  D001               	goto	L4
  7584  01567A                     l2070:
  7585                           
  7586                           ; BSR set to: 0
  7587                           
  7588                           ; BSR set to: 0
  7589  01567A  0E00               	movlw	0
  7590  01567C                     L4:
  7591  01567C  0100               	movlb	0	; () banked
  7592  01567E  6F83               	movwf	_iRDropLeft& (0+255),b
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;iRobotSerial.c: 107: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster
      +                           = 0);
  7596                           
  7597                           ; BSR set to: 0
  7598  015680  C036  F0B8         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7599  015684  0100               	movlb	0	; () banked
  7600  015686  3BB8               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  7601  015688  0E0F               	movlw	15
  7602  01568A  17B8               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  7603  01568C  0100               	movlb	0	; () banked
  7604  01568E  A1B8               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7605  015690  D003               	goto	l2074
  7606                           
  7607                           ; BSR set to: 0
  7608  015692  0E01               	movlw	1
  7609  015694  6E2F               	movwf	_iRDropCaster,c
  7610  015696  0012               	return	
  7611  015698                     l2074:
  7612                           
  7613                           ; BSR set to: 0
  7614                           
  7615                           ; BSR set to: 0
  7616  015698  0E00               	movlw	0
  7617  01569A  6E2F               	movwf	_iRDropCaster,c
  7618  01569C  0012               	return	
  7619  01569E                     __end_of_sort_iRBumpDrop:
  7620                           	opt stack 0
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           postdec1	equ	0xFE5
  7630                           fsr1h	equ	0xFE2
  7631                           fsr1l	equ	0xFE1
  7632                           indf2	equ	0xFDF
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _get_packet_size *****************
  7638 ;; Defined at:
  7639 ;;		line 60 in file "Library/iRobotSerial.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  packetID        1    wreg     unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  packetID        1    0[BANK0 ] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:        1 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    7
  7660 ;; This function calls:
  7661 ;;		Nothing
  7662 ;; This function is called by:
  7663 ;;		_irobot_query_and_update
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text18
  7668  015EF2                     __ptext18:
  7669                           	opt stack 0
  7670  015EF2                     _get_packet_size:
  7671                           	opt stack 20
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;incstack = 0
  7675                           ;get_packet_size@packetID stored from wreg
  7676  015EF2  0100               	movlb	0	; () banked
  7677  015EF4  6FB8               	movwf	get_packet_size@packetID& (0+255),b
  7678                           
  7679                           ;iRobotSerial.c: 61: switch (packetID) {
  7680  015EF6  D012               	goto	l2021
  7681  015EF8  0E01               	movlw	1
  7682  015EFA  0012               	return	
  7683  015EFC  0E01               	movlw	1
  7684  015EFE  0012               	return	
  7685  015F00  0E01               	movlw	1
  7686  015F02  0012               	return	
  7687  015F04  0E01               	movlw	1
  7688  015F06  0012               	return	
  7689  015F08  0E01               	movlw	1
  7690  015F0A  0012               	return	
  7691  015F0C  0E01               	movlw	1
  7692  015F0E  0012               	return	
  7693  015F10  0E01               	movlw	1
  7694  015F12  0012               	return	
  7695  015F14  0E02               	movlw	2
  7696  015F16  0012               	return	
  7697  015F18  0E02               	movlw	2
  7698                           
  7699                           ;iRobotSerial.c: 71: }
  7700  015F1A  0012               	return	
  7701  015F1C                     l2021:
  7702  015F1C  0100               	movlb	0	; () banked
  7703  015F1E  51B8               	movf	get_packet_size@packetID& (0+255),w,b
  7704                           
  7705                           ; Switch size 1, requested type "space"
  7706                           ; Number of cases is 9, Range of values is 7 to 20
  7707                           ; switch strategies available:
  7708                           ; Name         Instructions Cycles
  7709                           ; simple_byte           28    15 (average)
  7710                           ;	Chosen strategy is simple_byte
  7711  015F20  0A07               	xorlw	7	; case 7
  7712  015F22  B4D8               	btfsc	status,2,c
  7713  015F24  D7E9               	goto	l2022
  7714  015F26  0A0F               	xorlw	15	; case 8
  7715  015F28  B4D8               	btfsc	status,2,c
  7716  015F2A  D7E8               	goto	l2024
  7717  015F2C  0A01               	xorlw	1	; case 9
  7718  015F2E  B4D8               	btfsc	status,2,c
  7719  015F30  D7E7               	goto	l2025
  7720  015F32  0A03               	xorlw	3	; case 10
  7721  015F34  B4D8               	btfsc	status,2,c
  7722  015F36  D7E6               	goto	l2026
  7723  015F38  0A01               	xorlw	1	; case 11
  7724  015F3A  B4D8               	btfsc	status,2,c
  7725  015F3C  D7E5               	goto	l2027
  7726  015F3E  0A07               	xorlw	7	; case 12
  7727  015F40  B4D8               	btfsc	status,2,c
  7728  015F42  D7E4               	goto	l2028
  7729  015F44  0A01               	xorlw	1	; case 13
  7730  015F46  B4D8               	btfsc	status,2,c
  7731  015F48  D7E3               	goto	l2029
  7732  015F4A  0A1E               	xorlw	30	; case 19
  7733  015F4C  B4D8               	btfsc	status,2,c
  7734  015F4E  D7E2               	goto	l2030
  7735  015F50  0A07               	xorlw	7	; case 20
  7736  015F52  A4D8               	btfss	status,2,c
  7737  015F54  0012               	return	
  7738  015F56  D7E0               	goto	l2031
  7739  015F58                     __end_of_get_packet_size:
  7740                           	opt stack 0
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           postinc0	equ	0xFEE
  7748                           wreg	equ	0xFE8
  7749                           postdec1	equ	0xFE5
  7750                           fsr1h	equ	0xFE2
  7751                           fsr1l	equ	0xFE1
  7752                           indf2	equ	0xFDF
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _eusart_getch *****************
  7758 ;; Defined at:
  7759 ;;		line 136 in file "Library/iRobotSerial.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      unsigned char 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    7
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_irobot_query_and_update
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text19
  7788  016EBE                     __ptext19:
  7789                           	opt stack 0
  7790  016EBE                     _eusart_getch:
  7791                           	opt stack 20
  7792                           
  7793                           ;iRobotSerial.c: 137: while (!PIR1bits.RC1IF) {
  7794                           
  7795                           ;incstack = 0
  7796  016EBE  AA9E               	btfss	3998,5,c	;volatile
  7797  016EC0  D7FE               	goto	_eusart_getch
  7798                           
  7799                           ;iRobotSerial.c: 138: };
  7800                           ;iRobotSerial.c: 139: return RCREG1;
  7801  016EC2  50AF               	movf	4015,w,c	;volatile
  7802  016EC4  0012               	return	
  7803  016EC6                     __end_of_eusart_getch:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           postinc0	equ	0xFEE
  7812                           wreg	equ	0xFE8
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _irobot_stop_motion *****************
  7822 ;; Defined at:
  7823 ;;		line 328 in file "Library/iRobotSerial.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  isScript        1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  isScript        1   25[BANK0 ] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1    wreg      void 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;Total ram usage:        1 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    9
  7844 ;; This function calls:
  7845 ;;		_irobot_move
  7846 ;; This function is called by:
  7847 ;;		_irobot_rotate
  7848 ;;		_safeToGo
  7849 ;;		_move_and_rotate
  7850 ;;		_mode2
  7851 ;;		_mode4
  7852 ;;		_irobot_move_to_simple
  7853 ;;		_irobot_rotate_to
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text20
  7858  0164F6                     __ptext20:
  7859                           	opt stack 0
  7860  0164F6                     _irobot_stop_motion:
  7861                           	opt stack 19
  7862                           
  7863                           ;incstack = 0
  7864                           ;irobot_stop_motion@isScript stored from wreg
  7865  0164F6  0100               	movlb	0	; () banked
  7866  0164F8  6FD1               	movwf	irobot_stop_motion@isScript& (0+255),b
  7867                           
  7868                           ;iRobotSerial.c: 329: (isScript) ? irobot_move(1, 0, 0) : irobot_move(0, 0, 0);
  7869  0164FA  0100               	movlb	0	; () banked
  7870  0164FC  51D1               	movf	irobot_stop_motion@isScript& (0+255),w,b
  7871  0164FE  0100               	movlb	0	; () banked
  7872  016500  B4D8               	btfsc	status,2,c
  7873  016502  D00E               	goto	l2173
  7874                           
  7875                           ; BSR set to: 0
  7876  016504  0E00               	movlw	0
  7877  016506  0100               	movlb	0	; () banked
  7878  016508  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7879  01650A  0E00               	movlw	0
  7880  01650C  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  7881  01650E  0E00               	movlw	0
  7882  016510  0100               	movlb	0	; () banked
  7883  016512  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7884  016514  0E00               	movlw	0
  7885  016516  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7886  016518  0E01               	movlw	1
  7887  01651A  EC49  F0A6         	call	_irobot_move
  7888  01651E  0012               	return	
  7889  016520                     l2173:
  7890  016520  0E00               	movlw	0
  7891  016522  0100               	movlb	0	; () banked
  7892  016524  6FC9               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7893  016526  0E00               	movlw	0
  7894  016528  6FC8               	movwf	irobot_move@moveSpeed& (0+255),b
  7895  01652A  0E00               	movlw	0
  7896  01652C  0100               	movlb	0	; () banked
  7897  01652E  6FCB               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7898  016530  0E00               	movlw	0
  7899  016532  6FCA               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7900  016534  0E00               	movlw	0
  7901  016536  EC49  F0A6         	call	_irobot_move
  7902  01653A  0012               	return	
  7903  01653C                     __end_of_irobot_stop_motion:
  7904                           	opt stack 0
  7905                           tblptru	equ	0xFF8
  7906                           tblptrh	equ	0xFF7
  7907                           tblptrl	equ	0xFF6
  7908                           tablat	equ	0xFF5
  7909                           prodh	equ	0xFF4
  7910                           prodl	equ	0xFF3
  7911                           postinc0	equ	0xFEE
  7912                           wreg	equ	0xFE8
  7913                           postdec1	equ	0xFE5
  7914                           fsr1h	equ	0xFE2
  7915                           fsr1l	equ	0xFE1
  7916                           indf2	equ	0xFDF
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _irobot_move *****************
  7922 ;; Defined at:
  7923 ;;		line 240 in file "Library/iRobotSerial.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  isScript        1    wreg     unsigned char 
  7926 ;;  moveSpeed       2   16[BANK0 ] short 
  7927 ;;  moveTurnRadi    2   18[BANK0 ] short 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;  isScript        1   24[BANK0 ] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;Total ram usage:        9 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    8
  7946 ;; This function calls:
  7947 ;;		_eusart_putch
  7948 ;;		_load_iRScriptStack
  7949 ;;		_twos_complement_of
  7950 ;; This function is called by:
  7951 ;;		_irobot_rotate
  7952 ;;		_irobot_stop_motion
  7953 ;;		_irobot_move_straight
  7954 ;;		_correct_distance
  7955 ;;		_irobot_move_to_simple
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text21
  7960  014C92                     __ptext21:
  7961                           	opt stack 0
  7962  014C92                     _irobot_move:
  7963                           	opt stack 19
  7964                           
  7965                           ;incstack = 0
  7966                           ;irobot_move@isScript stored from wreg
  7967  014C92  0100               	movlb	0	; () banked
  7968  014C94  6FD0               	movwf	irobot_move@isScript& (0+255),b
  7969                           
  7970                           ;iRobotSerial.c: 241: moveSpeed = twos_complement_of(moveSpeed);
  7971  014C96  C0C8  F0B8         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  7972  014C9A  C0C9  F0B9         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  7973  014C9E  ECE4  F0B2         	call	_twos_complement_of	;wreg free
  7974  014CA2  C0B8  F0C8         	movff	?_twos_complement_of,irobot_move@moveSpeed
  7975  014CA6  C0B9  F0C9         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  7976                           
  7977                           ;iRobotSerial.c: 242: moveTurnRadius = twos_complement_of(moveTurnRadius);
  7978  014CAA  C0CA  F0B8         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  7979  014CAE  C0CB  F0B9         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  7980  014CB2  ECE4  F0B2         	call	_twos_complement_of	;wreg free
  7981  014CB6  C0B8  F0CA         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  7982  014CBA  C0B9  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  7983                           
  7984                           ;iRobotSerial.c: 244: if (isScript) {
  7985  014CBE  0100               	movlb	0	; () banked
  7986  014CC0  51D0               	movf	irobot_move@isScript& (0+255),w,b
  7987  014CC2  0100               	movlb	0	; () banked
  7988  014CC4  B4D8               	btfsc	status,2,c
  7989  014CC6  D029               	goto	l2139
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;iRobotSerial.c: 245: load_iRScriptStack(5, iR_DRIVE,
  7993                           ;iRobotSerial.c: 246: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  7994                           ;iRobotSerial.c: 247: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  7995  014CC8  0E00               	movlw	0
  7996  014CCA  0100               	movlb	0	; () banked
  7997  014CCC  6FB9               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  7998  014CCE  0E89               	movlw	137
  7999  014CD0  6FB8               	movwf	?_load_iRScriptStack& (0+255),b
  8000  014CD2  C0C9  F0CC         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8001  014CD6  0100               	movlb	0	; () banked
  8002  014CD8  6BCD               	clrf	(??_irobot_move+1)& (0+255),b
  8003  014CDA  BFCC               	btfsc	??_irobot_move& (0+255),7,b
  8004  014CDC  69CD               	setf	(??_irobot_move+1)& (0+255),b
  8005  014CDE  0100               	movlb	0	; () banked
  8006  014CE0  51CC               	movf	??_irobot_move& (0+255),w,b
  8007  014CE2  0100               	movlb	0	; () banked
  8008  014CE4  6FBA               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8009  014CE6  6BBB               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8010  014CE8  0100               	movlb	0	; () banked
  8011  014CEA  51C8               	movf	irobot_move@moveSpeed& (0+255),w,b
  8012  014CEC  0100               	movlb	0	; () banked
  8013  014CEE  6FBC               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8014  014CF0  6BBD               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8015  014CF2  C0CB  F0CE         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8016  014CF6  0100               	movlb	0	; () banked
  8017  014CF8  6BCF               	clrf	(??_irobot_move+3)& (0+255),b
  8018  014CFA  BFCE               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8019  014CFC  69CF               	setf	(??_irobot_move+3)& (0+255),b
  8020  014CFE  0100               	movlb	0	; () banked
  8021  014D00  51CE               	movf	(??_irobot_move+2)& (0+255),w,b
  8022  014D02  0100               	movlb	0	; () banked
  8023  014D04  6FBE               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8024  014D06  6BBF               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8025  014D08  0100               	movlb	0	; () banked
  8026  014D0A  51CA               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8027  014D0C  0100               	movlb	0	; () banked
  8028  014D0E  6FC0               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8029  014D10  6BC1               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8030  014D12  0E05               	movlw	5
  8031  014D14  ECDA  F0AE         	call	_load_iRScriptStack
  8032                           
  8033                           ;iRobotSerial.c: 248: } else {
  8034  014D18  0012               	return	
  8035  014D1A                     l2139:
  8036                           
  8037                           ;iRobotSerial.c: 249: eusart_putch(iR_DRIVE);
  8038  014D1A  0E89               	movlw	137
  8039  014D1C  EC22  F0B7         	call	_eusart_putch
  8040                           
  8041                           ;iRobotSerial.c: 250: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8042  014D20  0100               	movlb	0	; () banked
  8043  014D22  51C9               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8044  014D24  EC22  F0B7         	call	_eusart_putch
  8045                           
  8046                           ;iRobotSerial.c: 251: eusart_putch(((moveSpeed) & 0xFF));
  8047  014D28  0100               	movlb	0	; () banked
  8048  014D2A  51C8               	movf	irobot_move@moveSpeed& (0+255),w,b
  8049  014D2C  EC22  F0B7         	call	_eusart_putch
  8050                           
  8051                           ;iRobotSerial.c: 252: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8052  014D30  0100               	movlb	0	; () banked
  8053  014D32  51CB               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8054  014D34  EC22  F0B7         	call	_eusart_putch
  8055                           
  8056                           ;iRobotSerial.c: 253: eusart_putch(((moveTurnRadius) & 0xFF));
  8057  014D38  0100               	movlb	0	; () banked
  8058  014D3A  51CA               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8059  014D3C  EC22  F0B7         	call	_eusart_putch
  8060  014D40  0012               	return	
  8061  014D42                     __end_of_irobot_move:
  8062                           	opt stack 0
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           postdec1	equ	0xFE5
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           indf2	equ	0xFDF
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _twos_complement_of *****************
  8080 ;; Defined at:
  8081 ;;		line 181 in file "Library/iRobotSerial.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  complementVa    2    0[BANK0 ] short 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  2    0[BANK0 ] unsigned short 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8095 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;Total ram usage:        2 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    7
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_irobot_move
  8106 ;;		_irobot_angle_wait
  8107 ;;		_irobot_distance_wait
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text22
  8112  0165C8                     __ptext22:
  8113                           	opt stack 0
  8114  0165C8                     _twos_complement_of:
  8115                           	opt stack 19
  8116                           
  8117                           ;iRobotSerial.c: 182: if (complementValue < 0) {
  8118                           
  8119                           ;incstack = 0
  8120  0165C8  0100               	movlb	0	; () banked
  8121  0165CA  AFB9               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8122  0165CC  D01A               	goto	l2110
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;iRobotSerial.c: 183: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8126  0165CE  0100               	movlb	0	; () banked
  8127  0165D0  BFB9               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8128  0165D2  D007               	goto	u9900
  8129  0165D4  0100               	movlb	0	; () banked
  8130  0165D6  51B9               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8131  0165D8  E10A               	bnz	l2112
  8132  0165DA  0100               	movlb	0	; () banked
  8133  0165DC  05B8               	decf	twos_complement_of@complementValue& (0+255),w,b
  8134  0165DE  B0D8               	btfsc	status,0,c
  8135  0165E0  D006               	goto	l2112
  8136  0165E2                     u9900:
  8137                           
  8138                           ; BSR set to: 0
  8139  0165E2  0100               	movlb	0	; () banked
  8140  0165E4  6DB8               	negf	twos_complement_of@complementValue& (0+255),b
  8141  0165E6  1FB9               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8142  0165E8  B0D8               	btfsc	status,0,c
  8143  0165EA  2BB9               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8144  0165EC  D004               	goto	l2114
  8145  0165EE                     l2112:
  8146                           
  8147                           ; BSR set to: 0
  8148  0165EE  C0B8  F0B8         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8149  0165F2  C0B9  F0B9         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8150  0165F6                     l2114:
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;iRobotSerial.c: 184: complementValue = ~complementValue;
  8154                           
  8155                           ; BSR set to: 0
  8156  0165F6  0100               	movlb	0	; () banked
  8157  0165F8  1FB8               	comf	twos_complement_of@complementValue& (0+255),f,b
  8158  0165FA  1FB9               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8159                           
  8160                           ;iRobotSerial.c: 185: complementValue += 1;
  8161  0165FC  0100               	movlb	0	; () banked
  8162  0165FE  4BB8               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8163  016600  2BB9               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8164  016602                     l2110:
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;iRobotSerial.c: 186: }
  8168                           ;iRobotSerial.c: 187: return complementValue;
  8169                           
  8170                           ; BSR set to: 0
  8171  016602  C0B8  F0B8         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8172  016606  C0B9  F0B9         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8173  01660A  0012               	return	
  8174  01660C                     __end_of_twos_complement_of:
  8175                           	opt stack 0
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           postinc0	equ	0xFEE
  8183                           wreg	equ	0xFE8
  8184                           postdec1	equ	0xFE5
  8185                           fsr1h	equ	0xFE2
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function _irobot_song_play *****************
  8193 ;; Defined at:
  8194 ;;		line 294 in file "Library/iRobotSerial.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  songNumber      1    wreg     unsigned char 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;Total ram usage:        1 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    8
  8215 ;; This function calls:
  8216 ;;		_eusart_putch
  8217 ;; This function is called by:
  8218 ;;		_safeToGo
  8219 ;;		_mode1
  8220 ;;		_mode2
  8221 ;;		_mode3
  8222 ;;		_mode4
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text23
  8227  016DBC                     __ptext23:
  8228                           	opt stack 0
  8229  016DBC                     _irobot_song_play:
  8230                           	opt stack 20
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;incstack = 0
  8234                           ;irobot_song_play@songNumber stored from wreg
  8235  016DBC  0100               	movlb	0	; () banked
  8236  016DBE  6FB9               	movwf	irobot_song_play@songNumber& (0+255),b
  8237                           
  8238                           ;iRobotSerial.c: 295: eusart_putch(iR_SONG_PLAY);
  8239  016DC0  0E8D               	movlw	141
  8240  016DC2  EC22  F0B7         	call	_eusart_putch
  8241                           
  8242                           ;iRobotSerial.c: 296: eusart_putch(songNumber);
  8243  016DC6  0100               	movlb	0	; () banked
  8244  016DC8  51B9               	movf	irobot_song_play@songNumber& (0+255),w,b
  8245  016DCA  EC22  F0B7         	call	_eusart_putch
  8246  016DCE  0012               	return		;funcret
  8247  016DD0                     __end_of_irobot_song_play:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           postinc0	equ	0xFEE
  8256                           wreg	equ	0xFE8
  8257                           postdec1	equ	0xFE5
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           
  8265 ;; *************** function _printf *****************
  8266 ;; Defined at:
  8267 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  8270 ;;		 -> STR_20(21), STR_19(21), STR_18(21), STR_17(21), 
  8271 ;;		 -> STR_16(21), STR_15(3), STR_14(76), STR_13(3), 
  8272 ;;		 -> STR_12(14), STR_11(3), STR_10(46), STR_9(3), 
  8273 ;;		 -> STR_8(46), STR_7(3), STR_6(60), STR_5(3), 
  8274 ;;		 -> STR_4(60), STR_3(3), STR_2(14), STR_1(3), 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  tmpval          4    0        struct .
  8277 ;;  cp              3    0        PTR const unsigned char 
  8278 ;;  val             2   38[BANK0 ] unsigned int 
  8279 ;;  ap              2   36[BANK0 ] PTR void [1]
  8280 ;;		 -> ?_printf(2), 
  8281 ;;  len             2    0        unsigned int 
  8282 ;;  c               1   40[BANK0 ] char 
  8283 ;;  flag            1   35[BANK0 ] unsigned char 
  8284 ;;  prec            1   34[BANK0 ] char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2   21[BANK0 ] int 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8294 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;Total ram usage:       20 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:   12
  8301 ;; This function calls:
  8302 ;;		___lwdiv
  8303 ;;		___lwmod
  8304 ;;		_putch
  8305 ;; This function is called by:
  8306 ;;		_move_and_rotate
  8307 ;;		_findClosestWall
  8308 ;;		_mode1
  8309 ;;		_mode2
  8310 ;;		_mode4
  8311 ;;		_main
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text24
  8316  0129A8                     __ptext24:
  8317                           	opt stack 0
  8318  0129A8                     _printf:
  8319                           	opt stack 18
  8320                           
  8321                           ;doprnt.c: 466: va_list ap;
  8322                           ;doprnt.c: 499: signed char c;
  8323                           ;doprnt.c: 506: signed char prec;
  8324                           ;doprnt.c: 508: unsigned char flag;
  8325                           ;doprnt.c: 523: union {
  8326                           ;doprnt.c: 524: unsigned long vd;
  8327                           ;doprnt.c: 525: double integ;
  8328                           ;doprnt.c: 526: } tmpval;
  8329                           ;doprnt.c: 528: unsigned int val;
  8330                           ;doprnt.c: 529: unsigned len;
  8331                           ;doprnt.c: 530: const char * cp;
  8332                           ;doprnt.c: 533: *ap = __va_start();
  8333                           
  8334                           ;incstack = 0
  8335  0129A8  0ECF               	movlw	low (?_printf+2)
  8336  0129AA  0100               	movlb	0	; () banked
  8337  0129AC  6FDC               	movwf	printf@ap& (0+255),b
  8338  0129AE  0E00               	movlw	high (?_printf+2)
  8339  0129B0  0100               	movlb	0	; () banked
  8340  0129B2  6FDD               	movwf	(printf@ap+1)& (0+255),b
  8341                           
  8342                           ;doprnt.c: 536: while(c = *f++) {
  8343  0129B4  D0C9               	goto	u11690
  8344  0129B6                     
  8345                           ; BSR set to: 0
  8346                           ;doprnt.c: 538: if(c != '%')
  8347                           
  8348                           ; BSR set to: 0
  8349  0129B6  0E25               	movlw	37
  8350  0129B8  0100               	movlb	0	; () banked
  8351  0129BA  19E0               	xorwf	printf@c& (0+255),w,b
  8352  0129BC  B4D8               	btfsc	status,2,c
  8353  0129BE  D005               	goto	l2485
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;doprnt.c: 540: {
  8357                           ;doprnt.c: 541: (putch(c) );
  8358  0129C0  0100               	movlb	0	; () banked
  8359  0129C2  51E0               	movf	printf@c& (0+255),w,b
  8360  0129C4  EC14  F0B7         	call	_putch
  8361                           
  8362                           ;doprnt.c: 542: continue;
  8363  0129C8  D0BF               	goto	u11690
  8364  0129CA                     l2485:
  8365                           
  8366                           ;doprnt.c: 543: }
  8367                           ;doprnt.c: 548: flag = 0;
  8368  0129CA  0E00               	movlw	0
  8369  0129CC  0100               	movlb	0	; () banked
  8370  0129CE  6FDB               	movwf	printf@flag& (0+255),b
  8371                           
  8372                           ;doprnt.c: 635: switch(c = *f++) {
  8373  0129D0  D014               	goto	l2486
  8374  0129D2                     
  8375                           ; BSR set to: 0
  8376                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8377                           
  8378                           ; BSR set to: 0
  8379  0129D2  C0DC  FFD9         	movff	printf@ap,fsr2l
  8380  0129D6  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  8381  0129DA  50DF               	movf	indf2,w,c
  8382  0129DC  0100               	movlb	0	; () banked
  8383  0129DE  6FE0               	movwf	printf@c& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386  0129E0  0E02               	movlw	2
  8387  0129E2  0100               	movlb	0	; () banked
  8388  0129E4  27DC               	addwf	printf@ap& (0+255),f,b
  8389  0129E6  0E00               	movlw	0
  8390  0129E8  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  8391  0129EA                     
  8392                           ; BSR set to: 0
  8393                           ;doprnt.c: 809: (putch(c) );
  8394                           
  8395                           ; BSR set to: 0
  8396  0129EA  0100               	movlb	0	; () banked
  8397  0129EC  51E0               	movf	printf@c& (0+255),w,b
  8398  0129EE  EC14  F0B7         	call	_putch
  8399                           
  8400                           ;doprnt.c: 810: continue;
  8401  0129F2  D0AA               	goto	u11690
  8402  0129F4                     
  8403                           ;doprnt.c: 818: flag |= 0x40;
  8404  0129F4  0100               	movlb	0	; () banked
  8405  0129F6  8DDB               	bsf	printf@flag& (0+255),6,b
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;doprnt.c: 822: }
  8409                           
  8410                           ;doprnt.c: 819: break;
  8411  0129F8  D01E               	goto	l2491
  8412  0129FA                     l2486:
  8413                           
  8414                           ; BSR set to: 0
  8415                           
  8416                           ; BSR set to: 0
  8417  0129FA  C0CD  FFF6         	movff	printf@f,tblptrl
  8418  0129FE  C0CE  FFF7         	movff	printf@f+1,tblptrh
  8419  012A02  0100               	movlb	0	; () banked
  8420  012A04  4BCD               	infsnz	printf@f& (0+255),f,b
  8421  012A06  2BCE               	incf	(printf@f+1)& (0+255),f,b
  8422  012A08                     	if	0	;tblptru may be non-zero
  8423  012A08                     	endif
  8424  012A08                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8425  012A08  0E00               	movlw	low (__mediumconst shr (0+16))
  8426  012A0A  6EF8               	movwf	tblptru,c
  8427  012A0C                     	endif
  8428  012A0C  0008               	tblrd		*
  8429  012A0E  CFF5 F0E0          	movff	tablat,printf@c
  8430  012A12  0100               	movlb	0	; () banked
  8431  012A14  51E0               	movf	printf@c& (0+255),w,b
  8432                           
  8433                           ; Switch size 1, requested type "space"
  8434                           ; Number of cases is 5, Range of values is 0 to 117
  8435                           ; switch strategies available:
  8436                           ; Name         Instructions Cycles
  8437                           ; simple_byte           16     9 (average)
  8438                           ;	Chosen strategy is simple_byte
  8439  012A16  0A00               	xorlw	0	; case 0
  8440  012A18  B4D8               	btfsc	status,2,c
  8441  012A1A  0012               	return	
  8442  012A1C  0A63               	xorlw	99	; case 99
  8443  012A1E  B4D8               	btfsc	status,2,c
  8444  012A20  D7D8               	goto	l2492
  8445  012A22  0A07               	xorlw	7	; case 100
  8446  012A24  B4D8               	btfsc	status,2,c
  8447  012A26  D007               	goto	l2491
  8448  012A28  0A0D               	xorlw	13	; case 105
  8449  012A2A  B4D8               	btfsc	status,2,c
  8450  012A2C  D004               	goto	l2491
  8451  012A2E  0A1C               	xorlw	28	; case 117
  8452  012A30  B4D8               	btfsc	status,2,c
  8453  012A32  D7E0               	goto	l2494
  8454  012A34  D7DA               	goto	l2493
  8455  012A36                     l2491:
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8459  012A36  0100               	movlb	0	; () banked
  8460  012A38  BDDB               	btfsc	printf@flag& (0+255),6,b
  8461  012A3A  D019               	goto	l2495
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;doprnt.c: 1253: {
  8465                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8466  012A3C  C0DC  FFD9         	movff	printf@ap,fsr2l
  8467  012A40  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  8468  012A44  CFDE F0DE          	movff	postinc2,printf@val
  8469  012A48  CFDD F0DF          	movff	postdec2,printf@val+1
  8470                           
  8471                           ; BSR set to: 0
  8472  012A4C  0E02               	movlw	2
  8473  012A4E  0100               	movlb	0	; () banked
  8474  012A50  27DC               	addwf	printf@ap& (0+255),f,b
  8475  012A52  0E00               	movlw	0
  8476  012A54  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;doprnt.c: 1261: if((int)val < 0) {
  8480  012A56  0100               	movlb	0	; () banked
  8481  012A58  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  8482  012A5A  D016               	goto	l2497
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;doprnt.c: 1262: flag |= 0x03;
  8486  012A5C  0E03               	movlw	3
  8487  012A5E  0100               	movlb	0	; () banked
  8488  012A60  13DB               	iorwf	printf@flag& (0+255),f,b
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;doprnt.c: 1263: val = -val;
  8492  012A62  0100               	movlb	0	; () banked
  8493  012A64  6DDE               	negf	printf@val& (0+255),b
  8494  012A66  1FDF               	comf	(printf@val+1)& (0+255),f,b
  8495  012A68  B0D8               	btfsc	status,0,c
  8496  012A6A  2BDF               	incf	(printf@val+1)& (0+255),f,b
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;doprnt.c: 1264: }
  8500                           ;doprnt.c: 1266: }
  8501  012A6C  D00D               	goto	l2497
  8502  012A6E                     l2495:
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;doprnt.c: 1268: else
  8506                           ;doprnt.c: 1273: {
  8507                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8508                           
  8509                           ; BSR set to: 0
  8510  012A6E  C0DC  FFD9         	movff	printf@ap,fsr2l
  8511  012A72  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  8512  012A76  CFDE F0DE          	movff	postinc2,printf@val
  8513  012A7A  CFDD F0DF          	movff	postdec2,printf@val+1
  8514                           
  8515                           ; BSR set to: 0
  8516  012A7E  0E02               	movlw	2
  8517  012A80  0100               	movlb	0	; () banked
  8518  012A82  27DC               	addwf	printf@ap& (0+255),f,b
  8519  012A84  0E00               	movlw	0
  8520  012A86  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  8521  012A88                     l2497:
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;doprnt.c: 1287: }
  8525                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8526                           
  8527                           ; BSR set to: 0
  8528  012A88  0E01               	movlw	1
  8529  012A8A  0100               	movlb	0	; () banked
  8530  012A8C  6FE0               	movwf	printf@c& (0+255),b
  8531  012A8E                     l14762:
  8532                           
  8533                           ; BSR set to: 0
  8534  012A8E  0E05               	movlw	5
  8535  012A90  0100               	movlb	0	; () banked
  8536  012A92  19E0               	xorwf	printf@c& (0+255),w,b
  8537  012A94  B4D8               	btfsc	status,2,c
  8538  012A96  D019               	goto	u11670
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;doprnt.c: 1306: if(val < dpowers[c])
  8542                           
  8543                           ; BSR set to: 0
  8544                           
  8545                           ; BSR set to: 0
  8546  012A98  0100               	movlb	0	; () banked
  8547  012A9A  51E0               	movf	printf@c& (0+255),w,b
  8548  012A9C  0D02               	mullw	2
  8549  012A9E  0E05               	movlw	low _dpowers
  8550  012AA0  24F3               	addwf	prodl,w,c
  8551  012AA2  6EF6               	movwf	tblptrl,c
  8552  012AA4  0EFD               	movlw	high _dpowers
  8553  012AA6  20F4               	addwfc	prodh,w,c
  8554  012AA8  6EF7               	movwf	tblptrh,c
  8555  012AAA                     	if	1	;There are 3 active tblptr bytes
  8556  012AAA  6AF8               	clrf	tblptru,c
  8557  012AAC  0E00               	movlw	low (__mediumconst shr (0+16))
  8558  012AAE  22F8               	addwfc	tblptru,f,c
  8559  012AB0                     	endif
  8560  012AB0  0009               	tblrd		*+
  8561  012AB2  50F5               	movf	tablat,w,c
  8562  012AB4  0100               	movlb	0	; () banked
  8563  012AB6  5DDE               	subwf	printf@val& (0+255),w,b
  8564  012AB8  0009               	tblrd		*+
  8565  012ABA  50F5               	movf	tablat,w,c
  8566  012ABC  0100               	movlb	0	; () banked
  8567  012ABE  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  8568  012AC0  A0D8               	btfss	status,0,c
  8569  012AC2  D003               	goto	u11670
  8570                           
  8571                           ; BSR set to: 0
  8572                           
  8573                           ; BSR set to: 0
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;doprnt.c: 1307: break;
  8577  012AC4  0100               	movlb	0	; () banked
  8578  012AC6  2BE0               	incf	printf@c& (0+255),f,b
  8579  012AC8  D7E2               	goto	l14762
  8580  012ACA                     u11670:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;doprnt.c: 1422: {
  8584                           ;doprnt.c: 1438: if(flag & 0x03)
  8585                           
  8586                           ; BSR set to: 0
  8587  012ACA  C0DB  F0D9         	movff	printf@flag,??_printf
  8588  012ACE  0E03               	movlw	3
  8589  012AD0  0100               	movlb	0	; () banked
  8590  012AD2  17D9               	andwf	??_printf& (0+255),f,b
  8591  012AD4  B4D8               	btfsc	status,2,c
  8592  012AD6  D003               	goto	l2501
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;doprnt.c: 1439: (putch('-') );
  8596  012AD8  0E2D               	movlw	45
  8597  012ADA  EC14  F0B7         	call	_putch
  8598  012ADE                     l2501:
  8599                           
  8600                           ;doprnt.c: 1469: }
  8601                           ;doprnt.c: 1472: prec = c;
  8602  012ADE  C0E0  F0DA         	movff	printf@c,printf@prec
  8603                           
  8604                           ;doprnt.c: 1474: while(prec--) {
  8605  012AE2  D02C               	goto	l2502
  8606  012AE4                     
  8607                           ;doprnt.c: 1478: {
  8608                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8609  012AE4  0100               	movlb	0	; () banked
  8610  012AE6  51DA               	movf	printf@prec& (0+255),w,b
  8611  012AE8  0D02               	mullw	2
  8612  012AEA  0E05               	movlw	low _dpowers
  8613  012AEC  24F3               	addwf	prodl,w,c
  8614  012AEE  6EF6               	movwf	tblptrl,c
  8615  012AF0  0EFD               	movlw	high _dpowers
  8616  012AF2  20F4               	addwfc	prodh,w,c
  8617  012AF4  6EF7               	movwf	tblptrh,c
  8618  012AF6                     	if	1	;There are 3 active tblptr bytes
  8619  012AF6  6AF8               	clrf	tblptru,c
  8620  012AF8  0E00               	movlw	low (__mediumconst shr (0+16))
  8621  012AFA  22F8               	addwfc	tblptru,f,c
  8622  012AFC                     	endif
  8623  012AFC  0009               	tblrd		*+
  8624  012AFE  CFF5 F0BA          	movff	tablat,___lwdiv@divisor
  8625  012B02  000A               	tblrd		*-
  8626  012B04  CFF5 F0BB          	movff	tablat,___lwdiv@divisor+1
  8627  012B08  C0DE  F0B8         	movff	printf@val,___lwdiv@dividend
  8628  012B0C  C0DF  F0B9         	movff	printf@val+1,___lwdiv@dividend+1
  8629  012B10  ECD7  F0AC         	call	___lwdiv	;wreg free
  8630  012B14  C0B8  F0BF         	movff	?___lwdiv,___lwmod@dividend
  8631  012B18  C0B9  F0C0         	movff	?___lwdiv+1,___lwmod@dividend+1
  8632  012B1C  0E00               	movlw	0
  8633  012B1E  0100               	movlb	0	; () banked
  8634  012B20  6FC2               	movwf	(___lwmod@divisor+1)& (0+255),b
  8635  012B22  0E0A               	movlw	10
  8636  012B24  6FC1               	movwf	___lwmod@divisor& (0+255),b
  8637  012B26  EC42  F0B0         	call	___lwmod	;wreg free
  8638  012B2A  0100               	movlb	0	; () banked
  8639  012B2C  51BF               	movf	?___lwmod& (0+255),w,b
  8640  012B2E  0F30               	addlw	48
  8641  012B30  0100               	movlb	0	; () banked
  8642  012B32  6FE0               	movwf	printf@c& (0+255),b
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;doprnt.c: 1523: }
  8646                           ;doprnt.c: 1524: (putch(c) );
  8647  012B34  0100               	movlb	0	; () banked
  8648  012B36  51E0               	movf	printf@c& (0+255),w,b
  8649  012B38  EC14  F0B7         	call	_putch
  8650  012B3C                     l2502:
  8651  012B3C  0100               	movlb	0	; () banked
  8652  012B3E  07DA               	decf	printf@prec& (0+255),f,b
  8653  012B40  0100               	movlb	0	; () banked
  8654  012B42  29DA               	incf	printf@prec& (0+255),w,b
  8655  012B44  A4D8               	btfss	status,2,c
  8656  012B46  D7CE               	goto	l2503
  8657  012B48                     u11690:
  8658                           
  8659                           ; BSR set to: 0
  8660                           
  8661                           ; BSR set to: 0
  8662  012B48  C0CD  FFF6         	movff	printf@f,tblptrl
  8663  012B4C  C0CE  FFF7         	movff	printf@f+1,tblptrh
  8664  012B50  0100               	movlb	0	; () banked
  8665  012B52  4BCD               	infsnz	printf@f& (0+255),f,b
  8666  012B54  2BCE               	incf	(printf@f+1)& (0+255),f,b
  8667  012B56                     	if	0	;tblptru may be non-zero
  8668  012B56                     	endif
  8669  012B56                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8670  012B56  0E00               	movlw	low (__mediumconst shr (0+16))
  8671  012B58  6EF8               	movwf	tblptru,c
  8672  012B5A                     	endif
  8673  012B5A  0008               	tblrd		*
  8674  012B5C  CFF5 F0E0          	movff	tablat,printf@c
  8675  012B60  0100               	movlb	0	; () banked
  8676  012B62  51E0               	movf	printf@c& (0+255),w,b
  8677  012B64  B4D8               	btfsc	status,2,c
  8678  012B66  0012               	return	
  8679  012B68  D726               	goto	l2484
  8680  012B6A                     __end_of_printf:
  8681                           	opt stack 0
  8682                           tblptru	equ	0xFF8
  8683                           tblptrh	equ	0xFF7
  8684                           tblptrl	equ	0xFF6
  8685                           tablat	equ	0xFF5
  8686                           prodh	equ	0xFF4
  8687                           prodl	equ	0xFF3
  8688                           postinc0	equ	0xFEE
  8689                           wreg	equ	0xFE8
  8690                           postdec1	equ	0xFE5
  8691                           fsr1h	equ	0xFE2
  8692                           fsr1l	equ	0xFE1
  8693                           indf2	equ	0xFDF
  8694                           postinc2	equ	0xFDE
  8695                           postdec2	equ	0xFDD
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _putch *****************
  8701 ;; Defined at:
  8702 ;;		line 454 in file "Library/Console.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  c               1    wreg     unsigned char 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  c               1   20[BANK0 ] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;Total ram usage:        1 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:   11
  8723 ;; This function calls:
  8724 ;;		_Console_PrintChar
  8725 ;; This function is called by:
  8726 ;;		_printf
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           	psect	text25
  8731  016E28                     __ptext25:
  8732                           	opt stack 0
  8733  016E28                     _putch:
  8734                           	opt stack 18
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;incstack = 0
  8738                           ;putch@c stored from wreg
  8739  016E28  0100               	movlb	0	; () banked
  8740  016E2A  6FCC               	movwf	putch@c& (0+255),b
  8741                           
  8742                           ;Console.c: 456: Console_PrintChar(c);
  8743  016E2C  0100               	movlb	0	; () banked
  8744  016E2E  51CC               	movf	putch@c& (0+255),w,b
  8745  016E30  EC95  F096         	call	_Console_PrintChar
  8746  016E34  0012               	return		;funcret
  8747  016E36                     __end_of_putch:
  8748                           	opt stack 0
  8749                           tblptru	equ	0xFF8
  8750                           tblptrh	equ	0xFF7
  8751                           tblptrl	equ	0xFF6
  8752                           tablat	equ	0xFF5
  8753                           prodh	equ	0xFF4
  8754                           prodl	equ	0xFF3
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           postdec1	equ	0xFE5
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function _Console_PrintChar *****************
  8768 ;; Defined at:
  8769 ;;		line 322 in file "Library/Console.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  pInput          1    wreg     unsigned char 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  pInput          1   19[BANK0 ] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      void 
  8776 ;; Registers used:
  8777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;Total ram usage:        4 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:   10
  8790 ;; This function calls:
  8791 ;;		_Console_Backspace
  8792 ;;		_Console_FormFeed
  8793 ;;		_Console_IncrementCursor
  8794 ;;		_Console_NewLine
  8795 ;;		_Console_ResetCursor
  8796 ;;		_Console_Tab
  8797 ;; This function is called by:
  8798 ;;		_putch
  8799 ;;		_Console_PrintString
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text26
  8804  012D2A                     __ptext26:
  8805                           	opt stack 0
  8806  012D2A                     _Console_PrintChar:
  8807                           	opt stack 18
  8808                           
  8809                           ;incstack = 0
  8810                           ;Console_PrintChar@pInput stored from wreg
  8811  012D2A  0100               	movlb	0	; () banked
  8812  012D2C  6FCB               	movwf	Console_PrintChar@pInput& (0+255),b
  8813                           
  8814                           ;Console.c: 324: switch(pInput)
  8815  012D2E  D0B1               	goto	l1036
  8816  012D30                     
  8817                           ;Console.c: 327: case '\n':
  8818                           ;Console.c: 328: Console_NewLine();
  8819  012D30  EC40  F0A9         	call	_Console_NewLine	;wreg free
  8820                           
  8821                           ;Console.c: 329: return;
  8822  012D34  0012               	return	
  8823  012D36                     
  8824                           ;Console.c: 331: Console_Backspace();
  8825  012D36  EC73  F0B0         	call	_Console_Backspace	;wreg free
  8826                           
  8827                           ;Console.c: 332: return;
  8828  012D3A  0012               	return	
  8829  012D3C                     
  8830                           ;Console.c: 334: Console_FormFeed();
  8831  012D3C  ECC2  F0AA         	call	_Console_FormFeed	;wreg free
  8832                           
  8833                           ;Console.c: 335: return;
  8834  012D40  0012               	return	
  8835  012D42                     
  8836                           ;Console.c: 337: Console_Tab();
  8837  012D42  EC13  F0A4         	call	_Console_Tab	;wreg free
  8838                           
  8839                           ;Console.c: 338: return;
  8840  012D46  0012               	return	
  8841  012D48                     
  8842                           ;Console.c: 340: Console_IncrementCursor();
  8843  012D48  ECAC  F0AF         	call	_Console_IncrementCursor	;wreg free
  8844                           
  8845                           ;Console.c: 341: return;
  8846  012D4C  0012               	return	
  8847  012D4E                     
  8848                           ;Console.c: 343: Console_ResetCursor();
  8849  012D4E  ECCF  F0B5         	call	_Console_ResetCursor	;wreg free
  8850                           
  8851                           ;Console.c: 344: return;
  8852  012D52  0012               	return	
  8853  012D54                     
  8854                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8855                           
  8856                           ;Console.c: 349: default:
  8857  012D54  C0CB  F0C8         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8858  012D58  0E7F               	movlw	127
  8859  012D5A  0100               	movlb	0	; () banked
  8860  012D5C  17C8               	andwf	??_Console_PrintChar& (0+255),f,b
  8861  012D5E  0100               	movlb	0	; () banked
  8862  012D60  518C               	movf	_lBufferY& (0+255),w,b
  8863  012D62  0D14               	mullw	20
  8864  012D64  0EB4               	movlw	low _lBuffer
  8865  012D66  0100               	movlb	0	; () banked
  8866  012D68  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8867  012D6A  0E04               	movlw	high _lBuffer
  8868  012D6C  0100               	movlb	0	; () banked
  8869  012D6E  6FCA               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8870  012D70  50F3               	movf	prodl,w,c
  8871  012D72  0100               	movlb	0	; () banked
  8872  012D74  27C9               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8873  012D76  50F4               	movf	prodh,w,c
  8874  012D78  0100               	movlb	0	; () banked
  8875  012D7A  23CA               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8876  012D7C  0100               	movlb	0	; () banked
  8877  012D7E  518D               	movf	_lBufferX& (0+255),w,b
  8878  012D80  0D01               	mullw	1
  8879  012D82  50F3               	movf	prodl,w,c
  8880  012D84  0100               	movlb	0	; () banked
  8881  012D86  25C9               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8882  012D88  6ED9               	movwf	fsr2l,c
  8883  012D8A  50F4               	movf	prodh,w,c
  8884  012D8C  0100               	movlb	0	; () banked
  8885  012D8E  21CA               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8886  012D90  6EDA               	movwf	fsr2h,c
  8887  012D92  50DF               	movf	indf2,w,c
  8888  012D94  0B7F               	andlw	127
  8889  012D96  0100               	movlb	0	; () banked
  8890  012D98  19C8               	xorwf	??_Console_PrintChar& (0+255),w,b
  8891  012D9A  B4D8               	btfsc	status,2,c
  8892  012D9C  D02E               	goto	l1047
  8893                           
  8894                           ; BSR set to: 0
  8895                           ;Console.c: 351: {
  8896                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8897  012D9E  0E01               	movlw	1
  8898  012DA0  0100               	movlb	0	; () banked
  8899  012DA2  6FFF               	movwf	_change& (0+255),b
  8900                           
  8901                           ; BSR set to: 0
  8902  012DA4  0100               	movlb	0	; () banked
  8903  012DA6  518C               	movf	_lBufferY& (0+255),w,b
  8904  012DA8  0D14               	mullw	20
  8905  012DAA  0EB4               	movlw	low _lBuffer
  8906  012DAC  0100               	movlb	0	; () banked
  8907  012DAE  6FC8               	movwf	??_Console_PrintChar& (0+255),b
  8908  012DB0  0E04               	movlw	high _lBuffer
  8909  012DB2  0100               	movlb	0	; () banked
  8910  012DB4  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8911  012DB6  50F3               	movf	prodl,w,c
  8912  012DB8  0100               	movlb	0	; () banked
  8913  012DBA  27C8               	addwf	??_Console_PrintChar& (0+255),f,b
  8914  012DBC  50F4               	movf	prodh,w,c
  8915  012DBE  0100               	movlb	0	; () banked
  8916  012DC0  23C9               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8917  012DC2  0100               	movlb	0	; () banked
  8918  012DC4  518D               	movf	_lBufferX& (0+255),w,b
  8919  012DC6  0D01               	mullw	1
  8920  012DC8  50F3               	movf	prodl,w,c
  8921  012DCA  0100               	movlb	0	; () banked
  8922  012DCC  25C8               	addwf	??_Console_PrintChar& (0+255),w,b
  8923  012DCE  6ED9               	movwf	fsr2l,c
  8924  012DD0  50F4               	movf	prodh,w,c
  8925  012DD2  0100               	movlb	0	; () banked
  8926  012DD4  21C9               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8927  012DD6  6EDA               	movwf	fsr2h,c
  8928  012DD8  0100               	movlb	0	; () banked
  8929  012DDA  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  8930  012DDC  0980               	iorlw	128
  8931  012DDE  6EDF               	movwf	indf2,c
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  8935  012DE0  0100               	movlb	0	; () banked
  8936  012DE2  518C               	movf	_lBufferY& (0+255),w,b
  8937  012DE4  0D02               	mullw	2
  8938  012DE6  0E00               	movlw	low _lCBuffer
  8939  012DE8  24F3               	addwf	prodl,w,c
  8940  012DEA  6ED9               	movwf	fsr2l,c
  8941  012DEC  0E03               	movlw	high _lCBuffer
  8942  012DEE  20F4               	addwfc	prodh,w,c
  8943  012DF0  6EDA               	movwf	fsr2h,c
  8944  012DF2  C0FD  FFDE         	movff	_gForecolour,postinc2
  8945  012DF6  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  8946  012DFA                     l1047:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;Console.c: 354: }
  8950                           ;Console.c: 368: if(Console_IncrementCursor())
  8951                           
  8952                           ; BSR set to: 0
  8953  012DFA  ECAC  F0AF         	call	_Console_IncrementCursor	;wreg free
  8954  012DFE  0900               	iorlw	0
  8955  012E00  B4D8               	btfsc	status,2,c
  8956  012E02  0012               	return	
  8957                           
  8958                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8959  012E04  C0CB  F0C8         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8960  012E08  0E7F               	movlw	127
  8961  012E0A  0100               	movlb	0	; () banked
  8962  012E0C  17C8               	andwf	??_Console_PrintChar& (0+255),f,b
  8963  012E0E  0100               	movlb	0	; () banked
  8964  012E10  518C               	movf	_lBufferY& (0+255),w,b
  8965  012E12  0D14               	mullw	20
  8966  012E14  0EB4               	movlw	low _lBuffer
  8967  012E16  0100               	movlb	0	; () banked
  8968  012E18  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8969  012E1A  0E04               	movlw	high _lBuffer
  8970  012E1C  0100               	movlb	0	; () banked
  8971  012E1E  6FCA               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8972  012E20  50F3               	movf	prodl,w,c
  8973  012E22  0100               	movlb	0	; () banked
  8974  012E24  27C9               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8975  012E26  50F4               	movf	prodh,w,c
  8976  012E28  0100               	movlb	0	; () banked
  8977  012E2A  23CA               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8978  012E2C  0100               	movlb	0	; () banked
  8979  012E2E  518D               	movf	_lBufferX& (0+255),w,b
  8980  012E30  0D01               	mullw	1
  8981  012E32  50F3               	movf	prodl,w,c
  8982  012E34  0100               	movlb	0	; () banked
  8983  012E36  25C9               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8984  012E38  6ED9               	movwf	fsr2l,c
  8985  012E3A  50F4               	movf	prodh,w,c
  8986  012E3C  0100               	movlb	0	; () banked
  8987  012E3E  21CA               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8988  012E40  6EDA               	movwf	fsr2h,c
  8989  012E42  50DF               	movf	indf2,w,c
  8990  012E44  0B7F               	andlw	127
  8991  012E46  0100               	movlb	0	; () banked
  8992  012E48  19C8               	xorwf	??_Console_PrintChar& (0+255),w,b
  8993  012E4A  B4D8               	btfsc	status,2,c
  8994  012E4C  0012               	return	
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8998  012E4E  0E01               	movlw	1
  8999  012E50  0100               	movlb	0	; () banked
  9000  012E52  6FFF               	movwf	_change& (0+255),b
  9001                           
  9002                           ; BSR set to: 0
  9003  012E54  0100               	movlb	0	; () banked
  9004  012E56  518C               	movf	_lBufferY& (0+255),w,b
  9005  012E58  0D14               	mullw	20
  9006  012E5A  0EB4               	movlw	low _lBuffer
  9007  012E5C  0100               	movlb	0	; () banked
  9008  012E5E  6FC8               	movwf	??_Console_PrintChar& (0+255),b
  9009  012E60  0E04               	movlw	high _lBuffer
  9010  012E62  0100               	movlb	0	; () banked
  9011  012E64  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  9012  012E66  50F3               	movf	prodl,w,c
  9013  012E68  0100               	movlb	0	; () banked
  9014  012E6A  27C8               	addwf	??_Console_PrintChar& (0+255),f,b
  9015  012E6C  50F4               	movf	prodh,w,c
  9016  012E6E  0100               	movlb	0	; () banked
  9017  012E70  23C9               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  9018  012E72  0100               	movlb	0	; () banked
  9019  012E74  518D               	movf	_lBufferX& (0+255),w,b
  9020  012E76  0D01               	mullw	1
  9021  012E78  50F3               	movf	prodl,w,c
  9022  012E7A  0100               	movlb	0	; () banked
  9023  012E7C  25C8               	addwf	??_Console_PrintChar& (0+255),w,b
  9024  012E7E  6ED9               	movwf	fsr2l,c
  9025  012E80  50F4               	movf	prodh,w,c
  9026  012E82  0100               	movlb	0	; () banked
  9027  012E84  21C9               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  9028  012E86  6EDA               	movwf	fsr2h,c
  9029  012E88  0100               	movlb	0	; () banked
  9030  012E8A  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  9031  012E8C  0980               	iorlw	128
  9032  012E8E  6EDF               	movwf	indf2,c
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;Console.c: 372: };
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;Console.c: 371: return;
  9039                           
  9040                           ; BSR set to: 0
  9041                           
  9042                           ; BSR set to: 0
  9043  012E90  0012               	return	
  9044  012E92                     l1036:
  9045                           
  9046                           ; BSR set to: 0
  9047  012E92  0100               	movlb	0	; () banked
  9048  012E94  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  9049                           
  9050                           ; Switch size 1, requested type "space"
  9051                           ; Number of cases is 8, Range of values is 7 to 35
  9052                           ; switch strategies available:
  9053                           ; Name         Instructions Cycles
  9054                           ; simple_byte           25    13 (average)
  9055                           ;	Chosen strategy is simple_byte
  9056  012E96  0A07               	xorlw	7	; case 7
  9057  012E98  B4D8               	btfsc	status,2,c
  9058  012E9A  D756               	goto	l1043
  9059  012E9C  0A0F               	xorlw	15	; case 8
  9060  012E9E  B4D8               	btfsc	status,2,c
  9061  012EA0  D74A               	goto	l1040
  9062  012EA2  0A01               	xorlw	1	; case 9
  9063  012EA4  B4D8               	btfsc	status,2,c
  9064  012EA6  D74D               	goto	l1042
  9065  012EA8  0A03               	xorlw	3	; case 10
  9066  012EAA  B4D8               	btfsc	status,2,c
  9067  012EAC  D741               	goto	l1037
  9068  012EAE  0A06               	xorlw	6	; case 12
  9069  012EB0  B4D8               	btfsc	status,2,c
  9070  012EB2  D744               	goto	l1041
  9071  012EB4  0A01               	xorlw	1	; case 13
  9072  012EB6  B4D8               	btfsc	status,2,c
  9073  012EB8  D73B               	goto	l1037
  9074  012EBA  0A2D               	xorlw	45	; case 32
  9075  012EBC  B4D8               	btfsc	status,2,c
  9076  012EBE  D74A               	goto	l1045
  9077  012EC0  0A03               	xorlw	3	; case 35
  9078  012EC2  B4D8               	btfsc	status,2,c
  9079  012EC4  D744               	goto	l1044
  9080  012EC6  D746               	goto	l1045
  9081  012EC8                     __end_of_Console_PrintChar:
  9082                           	opt stack 0
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           postdec1	equ	0xFE5
  9092                           fsr1h	equ	0xFE2
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _Console_Tab *****************
  9102 ;; Defined at:
  9103 ;;		line 260 in file "Library/Console.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;		None
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;  c               1   15[BANK0 ] unsigned char 
  9108 ;;  i               1   14[BANK0 ] unsigned char 
  9109 ;;  t               1   13[BANK0 ] unsigned char 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;                  1    wreg      void 
  9112 ;; Registers used:
  9113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;Total ram usage:        8 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    9
  9126 ;; This function calls:
  9127 ;;		_Console_ClearCursor
  9128 ;;		_Console_IncrementCursor
  9129 ;;		___awdiv
  9130 ;; This function is called by:
  9131 ;;		_Console_PrintChar
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text27
  9136  014826                     __ptext27:
  9137                           	opt stack 0
  9138  014826                     _Console_Tab:
  9139                           	opt stack 18
  9140                           
  9141                           ;Console.c: 262: UINT8 i = 0;
  9142                           
  9143                           ;incstack = 0
  9144  014826  0E00               	movlw	0
  9145  014828  0100               	movlb	0	; () banked
  9146  01482A  6FC6               	movwf	Console_Tab@i& (0+255),b
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  9150  01482C  0EFA               	movlw	250
  9151  01482E  2447               	addwf	_gCursor,w,c
  9152  014830  0100               	movlb	0	; () banked
  9153  014832  6FB8               	movwf	___awdiv@dividend& (0+255),b
  9154  014834  0EFF               	movlw	255
  9155  014836  2048               	addwfc	_gCursor+1,w,c
  9156  014838  0100               	movlb	0	; () banked
  9157  01483A  6FB9               	movwf	(___awdiv@dividend+1)& (0+255),b
  9158  01483C  0E00               	movlw	0
  9159  01483E  0100               	movlb	0	; () banked
  9160  014840  6FBB               	movwf	(___awdiv@divisor+1)& (0+255),b
  9161  014842  0E06               	movlw	6
  9162  014844  6FBA               	movwf	___awdiv@divisor& (0+255),b
  9163  014846  ECD4  F0A4         	call	___awdiv	;wreg free
  9164  01484A  0100               	movlb	0	; () banked
  9165  01484C  51B8               	movf	?___awdiv& (0+255),w,b
  9166  01484E  0100               	movlb	0	; () banked
  9167  014850  6FC7               	movwf	Console_Tab@c& (0+255),b
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;Console.c: 264: UINT8 t = c/4;
  9171  014852  C0C7  F0B8         	movff	Console_Tab@c,___awdiv@dividend
  9172  014856  0100               	movlb	0	; () banked
  9173  014858  6BB9               	clrf	(___awdiv@dividend+1)& (0+255),b
  9174  01485A  0E00               	movlw	0
  9175  01485C  0100               	movlb	0	; () banked
  9176  01485E  6FBB               	movwf	(___awdiv@divisor+1)& (0+255),b
  9177  014860  0E04               	movlw	4
  9178  014862  6FBA               	movwf	___awdiv@divisor& (0+255),b
  9179  014864  ECD4  F0A4         	call	___awdiv	;wreg free
  9180  014868  0100               	movlb	0	; () banked
  9181  01486A  51B8               	movf	?___awdiv& (0+255),w,b
  9182  01486C  0100               	movlb	0	; () banked
  9183  01486E  6FC5               	movwf	Console_Tab@t& (0+255),b
  9184                           
  9185                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  9186  014870  0E00               	movlw	0
  9187  014872  0100               	movlb	0	; () banked
  9188  014874  6FC6               	movwf	Console_Tab@i& (0+255),b
  9189  014876  D006               	goto	l1009
  9190  014878                     
  9191                           ; BSR set to: 0
  9192                           ;Console.c: 266: {
  9193                           ;Console.c: 267: Console_ClearCursor();
  9194                           
  9195                           ; BSR set to: 0
  9196  014878  EC48  F0B3         	call	_Console_ClearCursor	;wreg free
  9197                           
  9198                           ;Console.c: 268: Console_IncrementCursor();
  9199  01487C  ECAC  F0AF         	call	_Console_IncrementCursor	;wreg free
  9200  014880  0100               	movlb	0	; () banked
  9201  014882  2BC6               	incf	Console_Tab@i& (0+255),f,b
  9202  014884                     l1009:
  9203                           
  9204                           ; BSR set to: 0
  9205                           
  9206                           ; BSR set to: 0
  9207  014884  0100               	movlb	0	; () banked
  9208  014886  51C5               	movf	Console_Tab@t& (0+255),w,b
  9209  014888  0D04               	mullw	4
  9210  01488A  1EF3               	comf	prodl,f,c
  9211  01488C  1EF4               	comf	prodh,f,c
  9212  01488E  4AF3               	infsnz	prodl,f,c
  9213  014890  2AF4               	incf	prodh,f,c
  9214  014892  0100               	movlb	0	; () banked
  9215  014894  51C7               	movf	Console_Tab@c& (0+255),w,b
  9216  014896  0100               	movlb	0	; () banked
  9217  014898  6FC0               	movwf	??_Console_Tab& (0+255),b
  9218  01489A  6BC1               	clrf	(??_Console_Tab+1)& (0+255),b
  9219  01489C  50F3               	movf	prodl,w,c
  9220  01489E  0100               	movlb	0	; () banked
  9221  0148A0  27C0               	addwf	??_Console_Tab& (0+255),f,b
  9222  0148A2  50F4               	movf	prodh,w,c
  9223  0148A4  0100               	movlb	0	; () banked
  9224  0148A6  23C1               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9225  0148A8  0100               	movlb	0	; () banked
  9226  0148AA  1FC0               	comf	??_Console_Tab& (0+255),f,b
  9227  0148AC  1FC1               	comf	(??_Console_Tab+1)& (0+255),f,b
  9228  0148AE  4BC0               	infsnz	??_Console_Tab& (0+255),f,b
  9229  0148B0  2BC1               	incf	(??_Console_Tab+1)& (0+255),f,b
  9230  0148B2  0E04               	movlw	4
  9231  0148B4  0100               	movlb	0	; () banked
  9232  0148B6  27C0               	addwf	??_Console_Tab& (0+255),f,b
  9233  0148B8  0E00               	movlw	0
  9234  0148BA  23C1               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9235  0148BC  0100               	movlb	0	; () banked
  9236  0148BE  51C6               	movf	Console_Tab@i& (0+255),w,b
  9237  0148C0  0100               	movlb	0	; () banked
  9238  0148C2  6FC2               	movwf	(??_Console_Tab+2)& (0+255),b
  9239  0148C4  6BC3               	clrf	(??_Console_Tab+3)& (0+255),b
  9240  0148C6  0100               	movlb	0	; () banked
  9241  0148C8  51C0               	movf	??_Console_Tab& (0+255),w,b
  9242  0148CA  0100               	movlb	0	; () banked
  9243  0148CC  5DC2               	subwf	(??_Console_Tab+2)& (0+255),w,b
  9244  0148CE  0100               	movlb	0	; () banked
  9245  0148D0  51C3               	movf	(??_Console_Tab+3)& (0+255),w,b
  9246  0148D2  0A80               	xorlw	128
  9247  0148D4  0100               	movlb	0	; () banked
  9248  0148D6  6FC4               	movwf	(??_Console_Tab+4)& (0+255),b
  9249  0148D8  0100               	movlb	0	; () banked
  9250  0148DA  51C1               	movf	(??_Console_Tab+1)& (0+255),w,b
  9251  0148DC  0A80               	xorlw	128
  9252  0148DE  0100               	movlb	0	; () banked
  9253  0148E0  59C4               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  9254  0148E2  B0D8               	btfsc	status,0,c
  9255  0148E4  0012               	return	
  9256  0148E6  D7C8               	goto	l1010
  9257  0148E8                     __end_of_Console_Tab:
  9258                           	opt stack 0
  9259                           tblptru	equ	0xFF8
  9260                           tblptrh	equ	0xFF7
  9261                           tblptrl	equ	0xFF6
  9262                           tablat	equ	0xFF5
  9263                           prodh	equ	0xFF4
  9264                           prodl	equ	0xFF3
  9265                           postinc0	equ	0xFEE
  9266                           wreg	equ	0xFE8
  9267                           postdec1	equ	0xFE5
  9268                           fsr1h	equ	0xFE2
  9269                           fsr1l	equ	0xFE1
  9270                           indf2	equ	0xFDF
  9271                           postinc2	equ	0xFDE
  9272                           postdec2	equ	0xFDD
  9273                           fsr2h	equ	0xFDA
  9274                           fsr2l	equ	0xFD9
  9275                           status	equ	0xFD8
  9276                           
  9277 ;; *************** function ___awdiv *****************
  9278 ;; Defined at:
  9279 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  dividend        2    0[BANK0 ] int 
  9282 ;;  divisor         2    2[BANK0 ] int 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  quotient        2    6[BANK0 ] int 
  9285 ;;  sign            1    5[BANK0 ] unsigned char 
  9286 ;;  counter         1    4[BANK0 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  2    0[BANK0 ] int 
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        8 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    7
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_Console_Tab
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           	psect	text28
  9311  0149A8                     __ptext28:
  9312                           	opt stack 0
  9313  0149A8                     ___awdiv:
  9314                           	opt stack 19
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;incstack = 0
  9318  0149A8  0E00               	movlw	0
  9319  0149AA  0100               	movlb	0	; () banked
  9320  0149AC  6FBD               	movwf	___awdiv@sign& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323  0149AE  0100               	movlb	0	; () banked
  9324  0149B0  AFBB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9325  0149B2  D008               	goto	l2674
  9326                           
  9327                           ; BSR set to: 0
  9328  0149B4  0100               	movlb	0	; () banked
  9329  0149B6  6DBA               	negf	___awdiv@divisor& (0+255),b
  9330  0149B8  1FBB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9331  0149BA  B0D8               	btfsc	status,0,c
  9332  0149BC  2BBB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9333                           
  9334                           ; BSR set to: 0
  9335  0149BE  0E01               	movlw	1
  9336  0149C0  0100               	movlb	0	; () banked
  9337  0149C2  6FBD               	movwf	___awdiv@sign& (0+255),b
  9338  0149C4                     l2674:
  9339                           
  9340                           ; BSR set to: 0
  9341                           
  9342                           ; BSR set to: 0
  9343  0149C4  0100               	movlb	0	; () banked
  9344  0149C6  AFB9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9345  0149C8  D008               	goto	l2675
  9346                           
  9347                           ; BSR set to: 0
  9348  0149CA  0100               	movlb	0	; () banked
  9349  0149CC  6DB8               	negf	___awdiv@dividend& (0+255),b
  9350  0149CE  1FB9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9351  0149D0  B0D8               	btfsc	status,0,c
  9352  0149D2  2BB9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9353                           
  9354                           ; BSR set to: 0
  9355  0149D4  0E01               	movlw	1
  9356  0149D6  0100               	movlb	0	; () banked
  9357  0149D8  1BBD               	xorwf	___awdiv@sign& (0+255),f,b
  9358  0149DA                     l2675:
  9359                           
  9360                           ; BSR set to: 0
  9361                           
  9362                           ; BSR set to: 0
  9363  0149DA  0E00               	movlw	0
  9364  0149DC  0100               	movlb	0	; () banked
  9365  0149DE  6FBF               	movwf	(___awdiv@quotient+1)& (0+255),b
  9366  0149E0  0E00               	movlw	0
  9367  0149E2  6FBE               	movwf	___awdiv@quotient& (0+255),b
  9368                           
  9369                           ; BSR set to: 0
  9370  0149E4  0100               	movlb	0	; () banked
  9371  0149E6  51BA               	movf	___awdiv@divisor& (0+255),w,b
  9372  0149E8  0100               	movlb	0	; () banked
  9373  0149EA  11BB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9374  0149EC  B4D8               	btfsc	status,2,c
  9375  0149EE  D02C               	goto	l2682
  9376                           
  9377                           ; BSR set to: 0
  9378  0149F0  0E01               	movlw	1
  9379  0149F2  0100               	movlb	0	; () banked
  9380  0149F4  6FBC               	movwf	___awdiv@counter& (0+255),b
  9381  0149F6  D006               	goto	l2677
  9382  0149F8                     
  9383                           ; BSR set to: 0
  9384                           
  9385                           ; BSR set to: 0
  9386  0149F8  0100               	movlb	0	; () banked
  9387  0149FA  90D8               	bcf	status,0,c
  9388  0149FC  37BA               	rlcf	___awdiv@divisor& (0+255),f,b
  9389  0149FE  37BB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9390  014A00  0100               	movlb	0	; () banked
  9391  014A02  2BBC               	incf	___awdiv@counter& (0+255),f,b
  9392  014A04                     l2677:
  9393                           
  9394                           ; BSR set to: 0
  9395                           
  9396                           ; BSR set to: 0
  9397  014A04  0100               	movlb	0	; () banked
  9398  014A06  AFBB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9399  014A08  D7F7               	goto	l2678
  9400  014A0A                     u9720:
  9401                           
  9402                           ; BSR set to: 0
  9403                           
  9404                           ; BSR set to: 0
  9405                           
  9406                           ; BSR set to: 0
  9407  014A0A  0100               	movlb	0	; () banked
  9408  014A0C  90D8               	bcf	status,0,c
  9409  014A0E  37BE               	rlcf	___awdiv@quotient& (0+255),f,b
  9410  014A10  37BF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9411                           
  9412                           ; BSR set to: 0
  9413  014A12  0100               	movlb	0	; () banked
  9414  014A14  51BA               	movf	___awdiv@divisor& (0+255),w,b
  9415  014A16  0100               	movlb	0	; () banked
  9416  014A18  5DB8               	subwf	___awdiv@dividend& (0+255),w,b
  9417  014A1A  0100               	movlb	0	; () banked
  9418  014A1C  51BB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9419  014A1E  0100               	movlb	0	; () banked
  9420  014A20  59B9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9421  014A22  A0D8               	btfss	status,0,c
  9422  014A24  D00A               	goto	l2681
  9423                           
  9424                           ; BSR set to: 0
  9425  014A26  0100               	movlb	0	; () banked
  9426  014A28  51BA               	movf	___awdiv@divisor& (0+255),w,b
  9427  014A2A  0100               	movlb	0	; () banked
  9428  014A2C  5FB8               	subwf	___awdiv@dividend& (0+255),f,b
  9429  014A2E  0100               	movlb	0	; () banked
  9430  014A30  51BB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9431  014A32  0100               	movlb	0	; () banked
  9432  014A34  5BB9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9433                           
  9434                           ; BSR set to: 0
  9435  014A36  0100               	movlb	0	; () banked
  9436  014A38  81BE               	bsf	___awdiv@quotient& (0+255),0,b
  9437  014A3A                     l2681:
  9438                           
  9439                           ; BSR set to: 0
  9440                           
  9441                           ; BSR set to: 0
  9442  014A3A  0100               	movlb	0	; () banked
  9443  014A3C  90D8               	bcf	status,0,c
  9444  014A3E  33BB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9445  014A40  33BA               	rrcf	___awdiv@divisor& (0+255),f,b
  9446                           
  9447                           ; BSR set to: 0
  9448  014A42  0100               	movlb	0	; () banked
  9449  014A44  2FBC               	decfsz	___awdiv@counter& (0+255),f,b
  9450  014A46  D7E1               	goto	u9720
  9451  014A48                     l2682:
  9452                           
  9453                           ; BSR set to: 0
  9454                           
  9455                           ; BSR set to: 0
  9456                           
  9457                           ; BSR set to: 0
  9458  014A48  0100               	movlb	0	; () banked
  9459  014A4A  51BD               	movf	___awdiv@sign& (0+255),w,b
  9460  014A4C  0100               	movlb	0	; () banked
  9461  014A4E  B4D8               	btfsc	status,2,c
  9462  014A50  D005               	goto	l2683
  9463                           
  9464                           ; BSR set to: 0
  9465  014A52  0100               	movlb	0	; () banked
  9466  014A54  6DBE               	negf	___awdiv@quotient& (0+255),b
  9467  014A56  1FBF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9468  014A58  B0D8               	btfsc	status,0,c
  9469  014A5A  2BBF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9470  014A5C                     l2683:
  9471                           
  9472                           ; BSR set to: 0
  9473                           
  9474                           ; BSR set to: 0
  9475  014A5C  C0BE  F0B8         	movff	___awdiv@quotient,?___awdiv
  9476  014A60  C0BF  F0B9         	movff	___awdiv@quotient+1,?___awdiv+1
  9477  014A64  0012               	return	
  9478  014A66                     __end_of___awdiv:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           postinc0	equ	0xFEE
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           fsr1h	equ	0xFE2
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           fsr2h	equ	0xFDA
  9495                           fsr2l	equ	0xFD9
  9496                           status	equ	0xFD8
  9497                           
  9498 ;; *************** function _Console_IncrementCursor *****************
  9499 ;; Defined at:
  9500 ;;		line 243 in file "Library/Console.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;		None
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      unsigned char 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;Total ram usage:        2 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    8
  9521 ;; This function calls:
  9522 ;;		_Console_FormFeed
  9523 ;;		_Console_NewLine
  9524 ;; This function is called by:
  9525 ;;		_Console_Tab
  9526 ;;		_Console_PrintChar
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text29
  9531  015F58                     __ptext29:
  9532                           	opt stack 0
  9533  015F58                     _Console_IncrementCursor:
  9534                           	opt stack 18
  9535                           
  9536                           ;Console.c: 246: lBufferX += 1;
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;incstack = 0
  9540  015F58  0100               	movlb	0	; () banked
  9541  015F5A  2B8D               	incf	_lBufferX& (0+255),f,b
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;Console.c: 248: gCursor.x += 6;
  9545  015F5C  0E06               	movlw	6
  9546  015F5E  2647               	addwf	_gCursor,f,c
  9547  015F60  0E00               	movlw	0
  9548  015F62  2248               	addwfc	_gCursor+1,f,c
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  9552  015F64  0E06               	movlw	6
  9553  015F66  2447               	addwf	_gCursor,w,c
  9554  015F68  0100               	movlb	0	; () banked
  9555  015F6A  6FBC               	movwf	??_Console_IncrementCursor& (0+255),b
  9556  015F6C  0E00               	movlw	0
  9557  015F6E  2048               	addwfc	_gCursor+1,w,c
  9558  015F70  0100               	movlb	0	; () banked
  9559  015F72  6FBD               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9560  015F74  0100               	movlb	0	; () banked
  9561  015F76  BFBD               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9562  015F78  D009               	goto	l1004
  9563  015F7A  0100               	movlb	0	; () banked
  9564  015F7C  51BD               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9565  015F7E  E104               	bnz	u9580
  9566  015F80  0E80               	movlw	128
  9567  015F82  0100               	movlb	0	; () banked
  9568  015F84  5DBC               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9569  015F86  B0D8               	btfsc	status,0,c
  9570  015F88                     u9580:
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;Console.c: 250: Console_NewLine();
  9574  015F88  EC40  F0A9         	call	_Console_NewLine	;wreg free
  9575  015F8C                     l1004:
  9576                           
  9577                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  9578  015F8C  0E08               	movlw	8
  9579  015F8E  2449               	addwf	_gCursor+2,w,c
  9580  015F90  0100               	movlb	0	; () banked
  9581  015F92  6FBC               	movwf	??_Console_IncrementCursor& (0+255),b
  9582  015F94  0E00               	movlw	0
  9583  015F96  204A               	addwfc	_gCursor+3,w,c
  9584  015F98  0100               	movlb	0	; () banked
  9585  015F9A  6FBD               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9586  015F9C  0100               	movlb	0	; () banked
  9587  015F9E  BFBD               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9588  015FA0  D00C               	goto	l1005
  9589  015FA2  0100               	movlb	0	; () banked
  9590  015FA4  51BD               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9591  015FA6  E105               	bnz	u9590
  9592  015FA8  0E80               	movlw	128
  9593  015FAA  0100               	movlb	0	; () banked
  9594  015FAC  5DBC               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9595  015FAE  A0D8               	btfss	status,0,c
  9596  015FB0  D004               	goto	l1005
  9597  015FB2                     u9590:
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;Console.c: 252: {
  9601                           ;Console.c: 253: Console_FormFeed();
  9602  015FB2  ECC2  F0AA         	call	_Console_FormFeed	;wreg free
  9603                           
  9604                           ;Console.c: 254: return 1;
  9605  015FB6  0E01               	movlw	1
  9606  015FB8  0012               	return	
  9607  015FBA                     l1005:
  9608                           
  9609                           ;Console.c: 255: }
  9610                           ;Console.c: 257: return 0;
  9611  015FBA  0E00               	movlw	0
  9612  015FBC  0012               	return	
  9613  015FBE                     __end_of_Console_IncrementCursor:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           postdec1	equ	0xFE5
  9624                           fsr1h	equ	0xFE2
  9625                           fsr1l	equ	0xFE1
  9626                           indf2	equ	0xFDF
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _Console_NewLine *****************
  9634 ;; Defined at:
  9635 ;;		line 175 in file "Library/Console.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        2 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    7
  9656 ;; This function calls:
  9657 ;;		Nothing
  9658 ;; This function is called by:
  9659 ;;		_Console_IncrementCursor
  9660 ;;		_Console_PrintChar
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text30
  9665  015280                     __ptext30:
  9666                           	opt stack 0
  9667  015280                     _Console_NewLine:
  9668                           	opt stack 18
  9669                           
  9670                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  9671                           
  9672                           ;incstack = 0
  9673  015280  D03E               	goto	l983
  9674  015282                     
  9675                           ;Console.c: 179: {
  9676                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  9677  015282  0100               	movlb	0	; () banked
  9678  015284  518C               	movf	_lBufferY& (0+255),w,b
  9679  015286  0D14               	mullw	20
  9680  015288  0EB4               	movlw	low _lBuffer
  9681  01528A  0100               	movlb	0	; () banked
  9682  01528C  6FB8               	movwf	??_Console_NewLine& (0+255),b
  9683  01528E  0E04               	movlw	high _lBuffer
  9684  015290  0100               	movlb	0	; () banked
  9685  015292  6FB9               	movwf	(??_Console_NewLine+1)& (0+255),b
  9686  015294  50F3               	movf	prodl,w,c
  9687  015296  0100               	movlb	0	; () banked
  9688  015298  27B8               	addwf	??_Console_NewLine& (0+255),f,b
  9689  01529A  50F4               	movf	prodh,w,c
  9690  01529C  0100               	movlb	0	; () banked
  9691  01529E  23B9               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9692  0152A0  0100               	movlb	0	; () banked
  9693  0152A2  518D               	movf	_lBufferX& (0+255),w,b
  9694  0152A4  0D01               	mullw	1
  9695  0152A6  50F3               	movf	prodl,w,c
  9696  0152A8  0100               	movlb	0	; () banked
  9697  0152AA  25B8               	addwf	??_Console_NewLine& (0+255),w,b
  9698  0152AC  6ED9               	movwf	fsr2l,c
  9699  0152AE  50F4               	movf	prodh,w,c
  9700  0152B0  0100               	movlb	0	; () banked
  9701  0152B2  21B9               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9702  0152B4  6EDA               	movwf	fsr2h,c
  9703  0152B6  50DF               	movf	indf2,w,c
  9704  0152B8  B4D8               	btfsc	status,2,c
  9705  0152BA  D01F               	goto	l985
  9706                           
  9707                           ; BSR set to: 0
  9708                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  9709  0152BC  0E01               	movlw	1
  9710  0152BE  0100               	movlb	0	; () banked
  9711  0152C0  6FFF               	movwf	_change& (0+255),b
  9712                           
  9713                           ; BSR set to: 0
  9714  0152C2  0100               	movlb	0	; () banked
  9715  0152C4  518C               	movf	_lBufferY& (0+255),w,b
  9716  0152C6  0D14               	mullw	20
  9717  0152C8  0EB4               	movlw	low _lBuffer
  9718  0152CA  0100               	movlb	0	; () banked
  9719  0152CC  6FB8               	movwf	??_Console_NewLine& (0+255),b
  9720  0152CE  0E04               	movlw	high _lBuffer
  9721  0152D0  0100               	movlb	0	; () banked
  9722  0152D2  6FB9               	movwf	(??_Console_NewLine+1)& (0+255),b
  9723  0152D4  50F3               	movf	prodl,w,c
  9724  0152D6  0100               	movlb	0	; () banked
  9725  0152D8  27B8               	addwf	??_Console_NewLine& (0+255),f,b
  9726  0152DA  50F4               	movf	prodh,w,c
  9727  0152DC  0100               	movlb	0	; () banked
  9728  0152DE  23B9               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9729  0152E0  0100               	movlb	0	; () banked
  9730  0152E2  518D               	movf	_lBufferX& (0+255),w,b
  9731  0152E4  0D01               	mullw	1
  9732  0152E6  50F3               	movf	prodl,w,c
  9733  0152E8  0100               	movlb	0	; () banked
  9734  0152EA  25B8               	addwf	??_Console_NewLine& (0+255),w,b
  9735  0152EC  6ED9               	movwf	fsr2l,c
  9736  0152EE  50F4               	movf	prodh,w,c
  9737  0152F0  0100               	movlb	0	; () banked
  9738  0152F2  21B9               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9739  0152F4  6EDA               	movwf	fsr2h,c
  9740  0152F6  0E80               	movlw	128
  9741  0152F8  6EDF               	movwf	indf2,c
  9742  0152FA                     l985:
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;Console.c: 182: lBufferX ++;
  9746                           
  9747                           ; BSR set to: 0
  9748  0152FA  0100               	movlb	0	; () banked
  9749  0152FC  2B8D               	incf	_lBufferX& (0+255),f,b
  9750  0152FE                     l983:
  9751                           
  9752                           ; BSR set to: 0
  9753  0152FE  0E13               	movlw	19
  9754  015300  0100               	movlb	0	; () banked
  9755  015302  658D               	cpfsgt	_lBufferX& (0+255),b
  9756  015304  D7BE               	goto	l984
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;Console.c: 183: }
  9760                           ;Console.c: 185: lBufferX = 0;
  9761                           
  9762                           ; BSR set to: 0
  9763  015306  0E00               	movlw	0
  9764  015308  0100               	movlb	0	; () banked
  9765  01530A  6F8D               	movwf	_lBufferX& (0+255),b
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;Console.c: 186: lBufferY ++;
  9769  01530C  0100               	movlb	0	; () banked
  9770  01530E  2B8C               	incf	_lBufferY& (0+255),f,b
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;Console.c: 188: gCursor.y += 8;
  9774  015310  0E08               	movlw	8
  9775  015312  2649               	addwf	_gCursor+2,f,c
  9776  015314  0E00               	movlw	0
  9777  015316  224A               	addwfc	_gCursor+3,f,c
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;Console.c: 189: gCursor.x = 6;
  9781  015318  0E00               	movlw	0
  9782  01531A  6E48               	movwf	_gCursor+1,c
  9783  01531C  0E06               	movlw	6
  9784  01531E  6E47               	movwf	_gCursor,c
  9785                           
  9786                           ; BSR set to: 0
  9787  015320  0012               	return		;funcret
  9788  015322                     __end_of_Console_NewLine:
  9789                           	opt stack 0
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           postinc0	equ	0xFEE
  9797                           wreg	equ	0xFE8
  9798                           postdec1	equ	0xFE5
  9799                           fsr1h	equ	0xFE2
  9800                           fsr1l	equ	0xFE1
  9801                           indf2	equ	0xFDF
  9802                           postinc2	equ	0xFDE
  9803                           postdec2	equ	0xFDD
  9804                           fsr2h	equ	0xFDA
  9805                           fsr2l	equ	0xFD9
  9806                           status	equ	0xFD8
  9807                           
  9808 ;; *************** function _Console_FormFeed *****************
  9809 ;; Defined at:
  9810 ;;		line 192 in file "Library/Console.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;		None
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  y               1    3[BANK0 ] unsigned char 
  9815 ;;  x               1    2[BANK0 ] unsigned char 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  1    wreg      void 
  9818 ;; Registers used:
  9819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;Total ram usage:        4 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    7
  9832 ;; This function calls:
  9833 ;;		Nothing
  9834 ;; This function is called by:
  9835 ;;		_Console_IncrementCursor
  9836 ;;		_Console_PrintChar
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text31
  9841  015584                     __ptext31:
  9842                           	opt stack 0
  9843  015584                     _Console_FormFeed:
  9844                           	opt stack 18
  9845                           
  9846                           ;Console.c: 195: lBufferX = 0;
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;incstack = 0
  9850  015584  0E00               	movlw	0
  9851  015586  0100               	movlb	0	; () banked
  9852  015588  6F8D               	movwf	_lBufferX& (0+255),b
  9853                           
  9854                           ;Console.c: 196: lBufferY = 0;
  9855  01558A  0E00               	movlw	0
  9856  01558C  0100               	movlb	0	; () banked
  9857  01558E  6F8C               	movwf	_lBufferY& (0+255),b
  9858                           
  9859                           ;Console.c: 197: UINT8 x, y;
  9860                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  9861  015590  0E00               	movlw	0
  9862  015592  0100               	movlb	0	; () banked
  9863  015594  6FBB               	movwf	Console_FormFeed@y& (0+255),b
  9864  015596                     l12650:
  9865                           
  9866                           ; BSR set to: 0
  9867  015596  0E0E               	movlw	14
  9868  015598  0100               	movlb	0	; () banked
  9869  01559A  65BB               	cpfsgt	Console_FormFeed@y& (0+255),b
  9870  01559C  D001               	goto	l990
  9871  01559E  D02D               	goto	u9410
  9872  0155A0                     l990:
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9876                           
  9877                           ; BSR set to: 0
  9878  0155A0  0E00               	movlw	0
  9879  0155A2  0100               	movlb	0	; () banked
  9880  0155A4  6FBA               	movwf	Console_FormFeed@x& (0+255),b
  9881  0155A6                     l12656:
  9882                           
  9883                           ; BSR set to: 0
  9884  0155A6  0E13               	movlw	19
  9885  0155A8  0100               	movlb	0	; () banked
  9886  0155AA  65BA               	cpfsgt	Console_FormFeed@x& (0+255),b
  9887  0155AC  D001               	goto	l992
  9888  0155AE  D022               	goto	u9400
  9889  0155B0                     l992:
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  9893                           
  9894                           ; BSR set to: 0
  9895  0155B0  0E01               	movlw	1
  9896  0155B2  0100               	movlb	0	; () banked
  9897  0155B4  6FFF               	movwf	_change& (0+255),b
  9898                           
  9899                           ; BSR set to: 0
  9900  0155B6  0100               	movlb	0	; () banked
  9901  0155B8  51BB               	movf	Console_FormFeed@y& (0+255),w,b
  9902  0155BA  0D14               	mullw	20
  9903  0155BC  0EB4               	movlw	low _lBuffer
  9904  0155BE  0100               	movlb	0	; () banked
  9905  0155C0  6FB8               	movwf	??_Console_FormFeed& (0+255),b
  9906  0155C2  0E04               	movlw	high _lBuffer
  9907  0155C4  0100               	movlb	0	; () banked
  9908  0155C6  6FB9               	movwf	(??_Console_FormFeed+1)& (0+255),b
  9909  0155C8  50F3               	movf	prodl,w,c
  9910  0155CA  0100               	movlb	0	; () banked
  9911  0155CC  27B8               	addwf	??_Console_FormFeed& (0+255),f,b
  9912  0155CE  50F4               	movf	prodh,w,c
  9913  0155D0  0100               	movlb	0	; () banked
  9914  0155D2  23B9               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  9915  0155D4  0100               	movlb	0	; () banked
  9916  0155D6  51BA               	movf	Console_FormFeed@x& (0+255),w,b
  9917  0155D8  0D01               	mullw	1
  9918  0155DA  50F3               	movf	prodl,w,c
  9919  0155DC  0100               	movlb	0	; () banked
  9920  0155DE  25B8               	addwf	??_Console_FormFeed& (0+255),w,b
  9921  0155E0  6ED9               	movwf	fsr2l,c
  9922  0155E2  50F4               	movf	prodh,w,c
  9923  0155E4  0100               	movlb	0	; () banked
  9924  0155E6  21B9               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  9925  0155E8  6EDA               	movwf	fsr2h,c
  9926  0155EA  0E80               	movlw	128
  9927  0155EC  6EDF               	movwf	indf2,c
  9928                           
  9929                           ; BSR set to: 0
  9930  0155EE  0100               	movlb	0	; () banked
  9931  0155F0  2BBA               	incf	Console_FormFeed@x& (0+255),f,b
  9932  0155F2  D7D9               	goto	l12656
  9933  0155F4                     u9400:
  9934                           
  9935                           ; BSR set to: 0
  9936                           
  9937                           ; BSR set to: 0
  9938  0155F4  0100               	movlb	0	; () banked
  9939  0155F6  2BBB               	incf	Console_FormFeed@y& (0+255),f,b
  9940  0155F8  D7CE               	goto	l12650
  9941  0155FA                     u9410:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;Console.c: 204: clearall = 1;
  9945                           
  9946                           ; BSR set to: 0
  9947  0155FA  0E01               	movlw	1
  9948  0155FC  0100               	movlb	0	; () banked
  9949  0155FE  6F8E               	movwf	_clearall& (0+255),b
  9950                           
  9951                           ;Console.c: 205: gCursor.x = 6;
  9952  015600  0E00               	movlw	0
  9953  015602  6E48               	movwf	_gCursor+1,c
  9954  015604  0E06               	movlw	6
  9955  015606  6E47               	movwf	_gCursor,c
  9956                           
  9957                           ;Console.c: 206: gCursor.y = 6;
  9958  015608  0E00               	movlw	0
  9959  01560A  6E4A               	movwf	_gCursor+3,c
  9960  01560C  0E06               	movlw	6
  9961  01560E  6E49               	movwf	_gCursor+2,c
  9962                           
  9963                           ; BSR set to: 0
  9964  015610  0012               	return		;funcret
  9965  015612                     __end_of_Console_FormFeed:
  9966                           	opt stack 0
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           prodh	equ	0xFF4
  9972                           prodl	equ	0xFF3
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           postdec1	equ	0xFE5
  9976                           fsr1h	equ	0xFE2
  9977                           fsr1l	equ	0xFE1
  9978                           indf2	equ	0xFDF
  9979                           postinc2	equ	0xFDE
  9980                           postdec2	equ	0xFDD
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _Console_ResetCursor *****************
  9986 ;; Defined at:
  9987 ;;		line 297 in file "Library/Console.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;		None
  9992 ;; Return value:  Size  Location     Type
  9993 ;;                  1    wreg      void 
  9994 ;; Registers used:
  9995 ;;		wreg, status,2
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;Total ram usage:        0 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    7
 10008 ;; This function calls:
 10009 ;;		Nothing
 10010 ;; This function is called by:
 10011 ;;		_Console_PrintChar
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text32
 10016  016B9E                     __ptext32:
 10017                           	opt stack 0
 10018  016B9E                     _Console_ResetCursor:
 10019                           	opt stack 20
 10020                           
 10021                           ;Console.c: 299: gCursor.x = 6;
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;incstack = 0
 10025  016B9E  0E00               	movlw	0
 10026  016BA0  6E48               	movwf	_gCursor+1,c
 10027  016BA2  0E06               	movlw	6
 10028  016BA4  6E47               	movwf	_gCursor,c
 10029                           
 10030                           ;Console.c: 300: gCursor.y = 6;
 10031  016BA6  0E00               	movlw	0
 10032  016BA8  6E4A               	movwf	_gCursor+3,c
 10033  016BAA  0E06               	movlw	6
 10034  016BAC  6E49               	movwf	_gCursor+2,c
 10035                           
 10036                           ;Console.c: 303: lBufferX = 0;
 10037  016BAE  0E00               	movlw	0
 10038  016BB0  0100               	movlb	0	; () banked
 10039  016BB2  6F8D               	movwf	_lBufferX& (0+255),b
 10040                           
 10041                           ;Console.c: 304: lBufferY = 0;
 10042  016BB4  0E00               	movlw	0
 10043  016BB6  0100               	movlb	0	; () banked
 10044  016BB8  6F8C               	movwf	_lBufferY& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047  016BBA  0012               	return		;funcret
 10048  016BBC                     __end_of_Console_ResetCursor:
 10049                           	opt stack 0
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           postdec1	equ	0xFE5
 10059                           fsr1h	equ	0xFE2
 10060                           fsr1l	equ	0xFE1
 10061                           indf2	equ	0xFDF
 10062                           postinc2	equ	0xFDE
 10063                           postdec2	equ	0xFDD
 10064                           fsr2h	equ	0xFDA
 10065                           fsr2l	equ	0xFD9
 10066                           status	equ	0xFD8
 10067                           
 10068 ;; *************** function _Console_Backspace *****************
 10069 ;; Defined at:
 10070 ;;		line 209 in file "Library/Console.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;		None
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      void 
 10077 ;; Registers used:
 10078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 0/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10088 ;;Total ram usage:        0 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    8
 10091 ;; This function calls:
 10092 ;;		_Console_ClearCursor
 10093 ;; This function is called by:
 10094 ;;		_Console_PrintChar
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text33
 10099  0160E6                     __ptext33:
 10100                           	opt stack 0
 10101  0160E6                     _Console_Backspace:
 10102                           	opt stack 19
 10103                           
 10104                           ;Console.c: 211: if (lBufferX > 0)
 10105                           
 10106                           ; BSR set to: 0
 10107                           ;incstack = 0
 10108  0160E6  0100               	movlb	0	; () banked
 10109  0160E8  518D               	movf	_lBufferX& (0+255),w,b
 10110  0160EA  B4D8               	btfsc	status,2,c
 10111  0160EC  D007               	goto	l997
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;Console.c: 212: {
 10115                           ;Console.c: 213: gCursor.x -= 6;
 10116  0160EE  0EFA               	movlw	250
 10117  0160F0  2647               	addwf	_gCursor,f,c
 10118  0160F2  0EFF               	movlw	255
 10119  0160F4  2248               	addwfc	_gCursor+1,f,c
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;Console.c: 216: lBufferX --;
 10123  0160F6  0100               	movlb	0	; () banked
 10124  0160F8  078D               	decf	_lBufferX& (0+255),f,b
 10125                           
 10126                           ;Console.c: 218: }
 10127  0160FA  D020               	goto	l1000
 10128  0160FC                     l997:
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;Console.c: 219: else if (lBufferY > 0)
 10132                           
 10133                           ; BSR set to: 0
 10134  0160FC  0100               	movlb	0	; () banked
 10135  0160FE  518C               	movf	_lBufferY& (0+255),w,b
 10136  016100  B4D8               	btfsc	status,2,c
 10137  016102  D00E               	goto	l999
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;Console.c: 220: {
 10141                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 10142  016104  0E00               	movlw	0
 10143  016106  6E48               	movwf	_gCursor+1,c
 10144  016108  0E72               	movlw	114
 10145  01610A  6E47               	movwf	_gCursor,c
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;Console.c: 222: gCursor.y -= 8;
 10149  01610C  0EF8               	movlw	248
 10150  01610E  2649               	addwf	_gCursor+2,f,c
 10151  016110  0EFF               	movlw	255
 10152  016112  224A               	addwfc	_gCursor+3,f,c
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 10156  016114  0E13               	movlw	19
 10157  016116  0100               	movlb	0	; () banked
 10158  016118  6F8D               	movwf	_lBufferX& (0+255),b
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;Console.c: 226: lBufferY --;
 10162  01611A  0100               	movlb	0	; () banked
 10163  01611C  078C               	decf	_lBufferY& (0+255),f,b
 10164                           
 10165                           ;Console.c: 228: }
 10166  01611E  D00E               	goto	l1000
 10167  016120                     l999:
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;Console.c: 229: else
 10171                           ;Console.c: 230: {
 10172                           ;Console.c: 231: gCursor.x = 6;
 10173                           
 10174                           ; BSR set to: 0
 10175  016120  0E00               	movlw	0
 10176  016122  6E48               	movwf	_gCursor+1,c
 10177  016124  0E06               	movlw	6
 10178  016126  6E47               	movwf	_gCursor,c
 10179                           
 10180                           ;Console.c: 232: gCursor.y = 6;
 10181  016128  0E00               	movlw	0
 10182  01612A  6E4A               	movwf	_gCursor+3,c
 10183  01612C  0E06               	movlw	6
 10184  01612E  6E49               	movwf	_gCursor+2,c
 10185                           
 10186                           ;Console.c: 235: lBufferX = 0;
 10187  016130  0E00               	movlw	0
 10188  016132  0100               	movlb	0	; () banked
 10189  016134  6F8D               	movwf	_lBufferX& (0+255),b
 10190                           
 10191                           ;Console.c: 236: lBufferY = 0;
 10192  016136  0E00               	movlw	0
 10193  016138  0100               	movlb	0	; () banked
 10194  01613A  6F8C               	movwf	_lBufferY& (0+255),b
 10195  01613C                     l1000:
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;Console.c: 238: }
 10199                           ;Console.c: 240: Console_ClearCursor();
 10200                           
 10201                           ; BSR set to: 0
 10202                           
 10203                           ; BSR set to: 0
 10204  01613C  EC48  F0B3         	call	_Console_ClearCursor	;wreg free
 10205  016140  0012               	return		;funcret
 10206  016142                     __end_of_Console_Backspace:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           postinc0	equ	0xFEE
 10215                           wreg	equ	0xFE8
 10216                           postdec1	equ	0xFE5
 10217                           fsr1h	equ	0xFE2
 10218                           fsr1l	equ	0xFE1
 10219                           indf2	equ	0xFDF
 10220                           postinc2	equ	0xFDE
 10221                           postdec2	equ	0xFDD
 10222                           fsr2h	equ	0xFDA
 10223                           fsr2l	equ	0xFD9
 10224                           status	equ	0xFD8
 10225                           
 10226 ;; *************** function _Console_ClearCursor *****************
 10227 ;; Defined at:
 10228 ;;		line 308 in file "Library/Console.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;		None
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;		None
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  1    wreg      void 
 10235 ;; Registers used:
 10236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;Total ram usage:        2 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    7
 10249 ;; This function calls:
 10250 ;;		Nothing
 10251 ;; This function is called by:
 10252 ;;		_Console_Backspace
 10253 ;;		_Console_Tab
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text34
 10258  016690                     __ptext34:
 10259                           	opt stack 0
 10260  016690                     _Console_ClearCursor:
 10261                           	opt stack 19
 10262                           
 10263                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 10264                           
 10265                           ;incstack = 0
 10266  016690  0E01               	movlw	1
 10267  016692  0100               	movlb	0	; () banked
 10268  016694  6FFF               	movwf	_change& (0+255),b
 10269                           
 10270                           ; BSR set to: 0
 10271  016696  0100               	movlb	0	; () banked
 10272  016698  518C               	movf	_lBufferY& (0+255),w,b
 10273  01669A  0D14               	mullw	20
 10274  01669C  0EB4               	movlw	low _lBuffer
 10275  01669E  0100               	movlb	0	; () banked
 10276  0166A0  6FB8               	movwf	??_Console_ClearCursor& (0+255),b
 10277  0166A2  0E04               	movlw	high _lBuffer
 10278  0166A4  0100               	movlb	0	; () banked
 10279  0166A6  6FB9               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 10280  0166A8  50F3               	movf	prodl,w,c
 10281  0166AA  0100               	movlb	0	; () banked
 10282  0166AC  27B8               	addwf	??_Console_ClearCursor& (0+255),f,b
 10283  0166AE  50F4               	movf	prodh,w,c
 10284  0166B0  0100               	movlb	0	; () banked
 10285  0166B2  23B9               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 10286  0166B4  0100               	movlb	0	; () banked
 10287  0166B6  518D               	movf	_lBufferX& (0+255),w,b
 10288  0166B8  0D01               	mullw	1
 10289  0166BA  50F3               	movf	prodl,w,c
 10290  0166BC  0100               	movlb	0	; () banked
 10291  0166BE  25B8               	addwf	??_Console_ClearCursor& (0+255),w,b
 10292  0166C0  6ED9               	movwf	fsr2l,c
 10293  0166C2  50F4               	movf	prodh,w,c
 10294  0166C4  0100               	movlb	0	; () banked
 10295  0166C6  21B9               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 10296  0166C8  6EDA               	movwf	fsr2h,c
 10297  0166CA  0E80               	movlw	128
 10298  0166CC  6EDF               	movwf	indf2,c
 10299                           
 10300                           ; BSR set to: 0
 10301  0166CE  0012               	return		;funcret
 10302  0166D0                     __end_of_Console_ClearCursor:
 10303                           	opt stack 0
 10304                           tblptru	equ	0xFF8
 10305                           tblptrh	equ	0xFF7
 10306                           tblptrl	equ	0xFF6
 10307                           tablat	equ	0xFF5
 10308                           prodh	equ	0xFF4
 10309                           prodl	equ	0xFF3
 10310                           postinc0	equ	0xFEE
 10311                           wreg	equ	0xFE8
 10312                           postdec1	equ	0xFE5
 10313                           fsr1h	equ	0xFE2
 10314                           fsr1l	equ	0xFE1
 10315                           indf2	equ	0xFDF
 10316                           postinc2	equ	0xFDE
 10317                           postdec2	equ	0xFDD
 10318                           fsr2h	equ	0xFDA
 10319                           fsr2l	equ	0xFD9
 10320                           status	equ	0xFD8
 10321                           
 10322 ;; *************** function ___fltol *****************
 10323 ;; Defined at:
 10324 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;  f1              4   57[BANK0 ] void 
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;  exp1            1    1[BANK1 ] unsigned char 
 10329 ;;  sign1           1    0[BANK1 ] unsigned char 
 10330 ;; Return value:  Size  Location     Type
 10331 ;;                  4   57[BANK0 ] long 
 10332 ;; Registers used:
 10333 ;;		wreg, status,2, status,0
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Totals:         0       8       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;Total ram usage:       10 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    7
 10346 ;; This function calls:
 10347 ;;		Nothing
 10348 ;; This function is called by:
 10349 ;;		_findClosestWall
 10350 ;;		_measureAndDisplayDistance
 10351 ;;		_mode1
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           	psect	text35
 10356  013CAA                     __ptext35:
 10357                           	opt stack 0
 10358  013CAA                     ___fltol:
 10359                           	opt stack 21
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;incstack = 0
 10363  013CAA  0100               	movlb	0	; () banked
 10364  013CAC  35F3               	rlcf	(___fltol@f1+2)& (0+255),w,b
 10365  013CAE  35F4               	rlcf	(___fltol@f1+3)& (0+255),w,b
 10366  013CB0  0101               	movlb	1	; () banked
 10367  013CB2  6F01               	movwf	___fltol@exp1& (0+255),b
 10368  013CB4  0101               	movlb	1	; () banked
 10369  013CB6  5101               	movf	___fltol@exp1& (0+255),w,b
 10370  013CB8  A4D8               	btfss	status,2,c
 10371  013CBA  D00A               	goto	l2736
 10372                           
 10373                           ; BSR set to: 1
 10374  013CBC  0E00               	movlw	0
 10375  013CBE  0100               	movlb	0	; () banked
 10376  013CC0  6FF1               	movwf	?___fltol& (0+255),b
 10377  013CC2  0E00               	movlw	0
 10378  013CC4  6FF2               	movwf	(?___fltol+1)& (0+255),b
 10379  013CC6  0E00               	movlw	0
 10380  013CC8  6FF3               	movwf	(?___fltol+2)& (0+255),b
 10381  013CCA  0E00               	movlw	0
 10382  013CCC  6FF4               	movwf	(?___fltol+3)& (0+255),b
 10383                           
 10384                           ; BSR set to: 0
 10385  013CCE  0012               	return	
 10386  013CD0                     l2736:
 10387                           
 10388                           ; BSR set to: 0
 10389  013CD0  C0F1  F0F5         	movff	___fltol@f1,??___fltol
 10390  013CD4  C0F2  F0F6         	movff	___fltol@f1+1,??___fltol+1
 10391  013CD8  C0F3  F0F7         	movff	___fltol@f1+2,??___fltol+2
 10392  013CDC  C0F4  F0F8         	movff	___fltol@f1+3,??___fltol+3
 10393  013CE0  0E20               	movlw	32
 10394  013CE2  D006               	goto	u11210
 10395  013CE4                     u11215:
 10396  013CE4  0100               	movlb	0	; () banked
 10397  013CE6  90D8               	bcf	status,0,c
 10398  013CE8  33F8               	rrcf	(??___fltol+3)& (0+255),f,b
 10399  013CEA  33F7               	rrcf	(??___fltol+2)& (0+255),f,b
 10400  013CEC  33F6               	rrcf	(??___fltol+1)& (0+255),f,b
 10401  013CEE  33F5               	rrcf	??___fltol& (0+255),f,b
 10402  013CF0                     u11210:
 10403  013CF0  2EE8               	decfsz	wreg,f,c
 10404  013CF2  D7F8               	goto	u11215
 10405  013CF4  0100               	movlb	0	; () banked
 10406  013CF6  51F5               	movf	??___fltol& (0+255),w,b
 10407  013CF8  0101               	movlb	1	; () banked
 10408  013CFA  6F00               	movwf	___fltol@sign1& (0+255),b
 10409                           
 10410                           ; BSR set to: 1
 10411  013CFC  0100               	movlb	0	; () banked
 10412  013CFE  8FF3               	bsf	(___fltol@f1+2)& (0+255),7,b
 10413                           
 10414                           ; BSR set to: 0
 10415  013D00  0EFF               	movlw	255
 10416  013D02  0100               	movlb	0	; () banked
 10417  013D04  17F1               	andwf	___fltol@f1& (0+255),f,b
 10418  013D06  0EFF               	movlw	255
 10419  013D08  17F2               	andwf	(___fltol@f1+1)& (0+255),f,b
 10420  013D0A  0EFF               	movlw	255
 10421  013D0C  17F3               	andwf	(___fltol@f1+2)& (0+255),f,b
 10422  013D0E  0E00               	movlw	0
 10423  013D10  17F4               	andwf	(___fltol@f1+3)& (0+255),f,b
 10424                           
 10425                           ; BSR set to: 0
 10426  013D12  0E96               	movlw	150
 10427  013D14  0101               	movlb	1	; () banked
 10428  013D16  5F01               	subwf	___fltol@exp1& (0+255),f,b
 10429                           
 10430                           ; BSR set to: 1
 10431  013D18  0101               	movlb	1	; () banked
 10432  013D1A  AF01               	btfss	___fltol@exp1& (0+255),7,b
 10433  013D1C  D01A               	goto	l2738
 10434                           
 10435                           ; BSR set to: 1
 10436  013D1E  0101               	movlb	1	; () banked
 10437  013D20  5101               	movf	___fltol@exp1& (0+255),w,b
 10438  013D22  0A80               	xorlw	128
 10439  013D24  0F97               	addlw	151
 10440  013D26  B0D8               	btfsc	status,0,c
 10441  013D28  D00A               	goto	l2739
 10442                           
 10443                           ; BSR set to: 1
 10444  013D2A  0E00               	movlw	0
 10445  013D2C  0100               	movlb	0	; () banked
 10446  013D2E  6FF1               	movwf	?___fltol& (0+255),b
 10447  013D30  0E00               	movlw	0
 10448  013D32  6FF2               	movwf	(?___fltol+1)& (0+255),b
 10449  013D34  0E00               	movlw	0
 10450  013D36  6FF3               	movwf	(?___fltol+2)& (0+255),b
 10451  013D38  0E00               	movlw	0
 10452  013D3A  6FF4               	movwf	(?___fltol+3)& (0+255),b
 10453                           
 10454                           ; BSR set to: 0
 10455  013D3C  0012               	return	
 10456  013D3E                     l2739:
 10457                           
 10458                           ; BSR set to: 0
 10459                           
 10460                           ; BSR set to: 0
 10461  013D3E  0100               	movlb	0	; () banked
 10462  013D40  90D8               	bcf	status,0,c
 10463  013D42  33F4               	rrcf	(___fltol@f1+3)& (0+255),f,b
 10464  013D44  33F3               	rrcf	(___fltol@f1+2)& (0+255),f,b
 10465  013D46  33F2               	rrcf	(___fltol@f1+1)& (0+255),f,b
 10466  013D48  33F1               	rrcf	___fltol@f1& (0+255),f,b
 10467                           
 10468                           ; BSR set to: 0
 10469  013D4A  0101               	movlb	1	; () banked
 10470  013D4C  3F01               	incfsz	___fltol@exp1& (0+255),f,b
 10471  013D4E  D7F7               	goto	l2739
 10472                           
 10473                           ; BSR set to: 1
 10474  013D50  D01B               	goto	u11250
 10475  013D52                     l2738:
 10476                           
 10477                           ; BSR set to: 1
 10478                           
 10479                           ; BSR set to: 1
 10480  013D52  0E1F               	movlw	31
 10481  013D54  0101               	movlb	1	; () banked
 10482  013D56  6501               	cpfsgt	___fltol@exp1& (0+255),b
 10483  013D58  D012               	goto	l2744
 10484                           
 10485                           ; BSR set to: 1
 10486  013D5A  0E00               	movlw	0
 10487  013D5C  0100               	movlb	0	; () banked
 10488  013D5E  6FF1               	movwf	?___fltol& (0+255),b
 10489  013D60  0E00               	movlw	0
 10490  013D62  6FF2               	movwf	(?___fltol+1)& (0+255),b
 10491  013D64  0E00               	movlw	0
 10492  013D66  6FF3               	movwf	(?___fltol+2)& (0+255),b
 10493  013D68  0E00               	movlw	0
 10494  013D6A  6FF4               	movwf	(?___fltol+3)& (0+255),b
 10495                           
 10496                           ; BSR set to: 0
 10497  013D6C  0012               	return	
 10498  013D6E                     
 10499                           ; BSR set to: 0
 10500  013D6E  0100               	movlb	0	; () banked
 10501  013D70  90D8               	bcf	status,0,c
 10502  013D72  37F1               	rlcf	___fltol@f1& (0+255),f,b
 10503  013D74  37F2               	rlcf	(___fltol@f1+1)& (0+255),f,b
 10504  013D76  37F3               	rlcf	(___fltol@f1+2)& (0+255),f,b
 10505  013D78  37F4               	rlcf	(___fltol@f1+3)& (0+255),f,b
 10506  013D7A  0101               	movlb	1	; () banked
 10507  013D7C  0701               	decf	___fltol@exp1& (0+255),f,b
 10508  013D7E                     l2744:
 10509                           
 10510                           ; BSR set to: 1
 10511  013D7E  0101               	movlb	1	; () banked
 10512  013D80  5101               	movf	___fltol@exp1& (0+255),w,b
 10513  013D82  0101               	movlb	1	; () banked
 10514  013D84  A4D8               	btfss	status,2,c
 10515  013D86  D7F3               	goto	l2745
 10516  013D88                     u11250:
 10517                           
 10518                           ; BSR set to: 1
 10519                           
 10520                           ; BSR set to: 1
 10521                           
 10522                           ; BSR set to: 1
 10523  013D88  0101               	movlb	1	; () banked
 10524  013D8A  5100               	movf	___fltol@sign1& (0+255),w,b
 10525  013D8C  0101               	movlb	1	; () banked
 10526  013D8E  B4D8               	btfsc	status,2,c
 10527  013D90  D009               	goto	l2747
 10528                           
 10529                           ; BSR set to: 1
 10530  013D92  0100               	movlb	0	; () banked
 10531  013D94  1FF4               	comf	(___fltol@f1+3)& (0+255),f,b
 10532  013D96  1FF3               	comf	(___fltol@f1+2)& (0+255),f,b
 10533  013D98  1FF2               	comf	(___fltol@f1+1)& (0+255),f,b
 10534  013D9A  6DF1               	negf	___fltol@f1& (0+255),b
 10535  013D9C  0E00               	movlw	0
 10536  013D9E  23F2               	addwfc	(___fltol@f1+1)& (0+255),f,b
 10537  013DA0  23F3               	addwfc	(___fltol@f1+2)& (0+255),f,b
 10538  013DA2  23F4               	addwfc	(___fltol@f1+3)& (0+255),f,b
 10539  013DA4                     l2747:
 10540                           
 10541                           ; BSR set to: 0
 10542  013DA4  C0F1  F0F1         	movff	___fltol@f1,?___fltol
 10543  013DA8  C0F2  F0F2         	movff	___fltol@f1+1,?___fltol+1
 10544  013DAC  C0F3  F0F3         	movff	___fltol@f1+2,?___fltol+2
 10545  013DB0  C0F4  F0F4         	movff	___fltol@f1+3,?___fltol+3
 10546  013DB4  0012               	return	
 10547  013DB6                     __end_of___fltol:
 10548                           	opt stack 0
 10549                           tblptru	equ	0xFF8
 10550                           tblptrh	equ	0xFF7
 10551                           tblptrl	equ	0xFF6
 10552                           tablat	equ	0xFF5
 10553                           prodh	equ	0xFF4
 10554                           prodl	equ	0xFF3
 10555                           postinc0	equ	0xFEE
 10556                           wreg	equ	0xFE8
 10557                           postdec1	equ	0xFE5
 10558                           fsr1h	equ	0xFE2
 10559                           fsr1l	equ	0xFE1
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function _Motor_Speed *****************
 10568 ;; Defined at:
 10569 ;;		line 117 in file "Library/Motor.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 10572 ;;		 -> Stepper(6), 
 10573 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  1    wreg      unsigned char 
 10578 ;; Registers used:
 10579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;Total ram usage:        4 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    9
 10592 ;; This function calls:
 10593 ;;		_Timer0_Init
 10594 ;; This function is called by:
 10595 ;;		_findClosestWall
 10596 ;;		_mode1
 10597 ;;		_mode4
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           	psect	text36
 10602  016A76                     __ptext36:
 10603                           	opt stack 0
 10604  016A76                     _Motor_Speed:
 10605                           	opt stack 19
 10606                           
 10607                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 10608                           
 10609                           ;incstack = 0
 10610  016A76  0100               	movlb	0	; () banked
 10611  016A78  EE20 F002          	lfsr	2,2
 10612  016A7C  51D3               	movf	Motor_Speed@pMotor& (0+255),w,b
 10613  016A7E  26D9               	addwf	fsr2l,f,c
 10614  016A80  51D4               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 10615  016A82  22DA               	addwfc	fsr2h,f,c
 10616  016A84  C0D5  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 10617  016A88  C0D6  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;Motor.c: 120: Timer0_Init(pFrequency);
 10621  016A8C  C0D5  F0C5         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 10622  016A90  C0D6  F0C6         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 10623  016A94  0100               	movlb	0	; () banked
 10624  016A96  6BC7               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 10625  016A98  6BC8               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 10626  016A9A  ECDC  F09B         	call	_Timer0_Init	;wreg free
 10627  016A9E  0012               	return	
 10628  016AA0                     __end_of_Motor_Speed:
 10629                           	opt stack 0
 10630                           tblptru	equ	0xFF8
 10631                           tblptrh	equ	0xFF7
 10632                           tblptrl	equ	0xFF6
 10633                           tablat	equ	0xFF5
 10634                           prodh	equ	0xFF4
 10635                           prodl	equ	0xFF3
 10636                           postinc0	equ	0xFEE
 10637                           wreg	equ	0xFE8
 10638                           postdec1	equ	0xFE5
 10639                           fsr1h	equ	0xFE2
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           fsr2h	equ	0xFDA
 10645                           fsr2l	equ	0xFD9
 10646                           status	equ	0xFD8
 10647                           
 10648 ;; *************** function _Motor_Move *****************
 10649 ;; Defined at:
 10650 ;;		line 51 in file "Library/Motor.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 10653 ;;		 -> Stepper(6), 
 10654 ;;  pDelta          2    5[BANK0 ] short 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;		None
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      unsigned char 
 10659 ;; Registers used:
 10660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;Total ram usage:        6 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    8
 10673 ;; This function calls:
 10674 ;;		_Timer0_Start
 10675 ;; This function is called by:
 10676 ;;		_findClosestWall
 10677 ;;		_mode1
 10678 ;;		_mode4
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           	psect	text37
 10683  01687E                     __ptext37:
 10684                           	opt stack 0
 10685  01687E                     _Motor_Move:
 10686                           	opt stack 20
 10687                           
 10688                           ;Motor.c: 54: lMotor = pMotor;
 10689                           
 10690                           ;incstack = 0
 10691  01687E  C0BB  F07C         	movff	Motor_Move@pMotor,_lMotor
 10692  016882  C0BC  F07D         	movff	Motor_Move@pMotor+1,_lMotor+1
 10693                           
 10694                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 10695  016886  C0BB  FFD9         	movff	Motor_Move@pMotor,fsr2l
 10696  01688A  C0BC  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 10697  01688E  50DE               	movf	postinc2,w,c
 10698  016890  10DE               	iorwf	postinc2,w,c
 10699  016892  A4D8               	btfss	status,2,c
 10700  016894  0012               	return	
 10701                           
 10702                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 10703                           
 10704                           ;Motor.c: 59: return 0;
 10705                           ;	Return value of _Motor_Move is never used
 10706  016896  C0BB  FFD9         	movff	Motor_Move@pMotor,fsr2l
 10707  01689A  C0BC  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 10708  01689E  C0BD  FFDE         	movff	Motor_Move@pDelta,postinc2
 10709  0168A2  C0BE  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 10710                           
 10711                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 10712  0168A6  C063  F0B8         	movff	_lStepFunction,Timer0_Start@pFunction
 10713  0168AA  C064  F0B9         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 10714  0168AE  C065  F0BA         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 10715  0168B2  EC79  F0B5         	call	_Timer0_Start	;wreg free
 10716  0168B6  0012               	return	
 10717  0168B8                     __end_of_Motor_Move:
 10718                           	opt stack 0
 10719                           tblptru	equ	0xFF8
 10720                           tblptrh	equ	0xFF7
 10721                           tblptrl	equ	0xFF6
 10722                           tablat	equ	0xFF5
 10723                           prodh	equ	0xFF4
 10724                           prodl	equ	0xFF3
 10725                           postinc0	equ	0xFEE
 10726                           wreg	equ	0xFE8
 10727                           postdec1	equ	0xFE5
 10728                           fsr1h	equ	0xFE2
 10729                           fsr1l	equ	0xFE1
 10730                           indf2	equ	0xFDF
 10731                           postinc2	equ	0xFDE
 10732                           postdec2	equ	0xFDD
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _Timer0_Start *****************
 10738 ;; Defined at:
 10739 ;;		line 75 in file "Library/Timer0.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 10742 ;;		 -> Absolute function(1), Motor_Step(1), 
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;		None
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  1    wreg      void 
 10747 ;; Registers used:
 10748 ;;		wreg, status,2, status,0
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10754 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;Total ram usage:        3 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    7
 10761 ;; This function calls:
 10762 ;;		Nothing
 10763 ;; This function is called by:
 10764 ;;		_Motor_Move
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           	psect	text38
 10769  016AF2                     __ptext38:
 10770                           	opt stack 0
 10771  016AF2                     _Timer0_Start:
 10772                           	opt stack 20
 10773                           
 10774                           ;Timer0.c: 77: gISR = pFunction;
 10775                           
 10776                           ;incstack = 0
 10777  016AF2  C0B8  F32E         	movff	Timer0_Start@pFunction,_gISR
 10778  016AF6  C0B9  F32F         	movff	Timer0_Start@pFunction+1,_gISR+1
 10779  016AFA  C0BA  F330         	movff	Timer0_Start@pFunction+2,_gISR+2
 10780                           
 10781                           ;Timer0.c: 78: TMR0 = COUNTER;
 10782  016AFE  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10783  016B02  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10784                           
 10785                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 10786  016B06  50D5               	movf	4053,w,c	;volatile
 10787  016B08  0100               	movlb	0	; () banked
 10788  016B0A  198B               	xorwf	_INDEX& (0+255),w,b
 10789  016B0C  0BF8               	andlw	-8
 10790  016B0E  198B               	xorwf	_INDEX& (0+255),w,b
 10791  016B10  6ED5               	movwf	4053,c	;volatile
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 10795  016B12  94F2               	bcf	intcon,2,c	;volatile
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 10799  016B14  8AF2               	bsf	intcon,5,c	;volatile
 10800                           
 10801                           ; BSR set to: 0
 10802  016B16  0012               	return		;funcret
 10803  016B18                     __end_of_Timer0_Start:
 10804                           	opt stack 0
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           intcon	equ	0xFF2
 10812                           postinc0	equ	0xFEE
 10813                           wreg	equ	0xFE8
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824 ;; *************** function _HMI_Render *****************
 10825 ;; Defined at:
 10826 ;;		line 138 in file "HMI.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  a               2    8[BANK0 ] unsigned short 
 10831 ;; Return value:  Size  Location     Type
 10832 ;;                  1    wreg      void 
 10833 ;; Registers used:
 10834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10844 ;;Total ram usage:        2 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    9
 10847 ;; This function calls:
 10848 ;;		_OutSeg
 10849 ;; This function is called by:
 10850 ;;		_findClosestWall
 10851 ;;		_measureAndDisplayDistance
 10852 ;;		_mode1
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text39
 10857  016710                     __ptext39:
 10858                           	opt stack 0
 10859  016710                     _HMI_Render:
 10860                           	opt stack 19
 10861                           
 10862                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;incstack = 0
 10866  016710  0E00               	movlw	0
 10867  016712  0100               	movlb	0	; () banked
 10868  016714  6FC1               	movwf	(HMI_Render@a+1)& (0+255),b
 10869  016716  0E00               	movlw	0
 10870  016718  6FC0               	movwf	HMI_Render@a& (0+255),b
 10871  01671A                     l14256:
 10872                           
 10873                           ; BSR set to: 0
 10874  01671A  0100               	movlb	0	; () banked
 10875  01671C  51C1               	movf	(HMI_Render@a+1)& (0+255),w,b
 10876  01671E  E116               	bnz	l1158
 10877  016720  0E08               	movlw	8
 10878  016722  0100               	movlb	0	; () banked
 10879  016724  5DC0               	subwf	HMI_Render@a& (0+255),w,b
 10880  016726  B0D8               	btfsc	status,0,c
 10881  016728  0012               	return	
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10885                           
 10886                           ; BSR set to: 0
 10887                           
 10888                           ; BSR set to: 0
 10889  01672A  C0C0  F0BB         	movff	HMI_Render@a,OutSeg@pSegment
 10890  01672E  0E47               	movlw	low _HMIBoard
 10891  016730  0100               	movlb	0	; () banked
 10892  016732  25C0               	addwf	HMI_Render@a& (0+255),w,b
 10893  016734  6ED9               	movwf	fsr2l,c
 10894  016736  0E03               	movlw	high _HMIBoard
 10895  016738  0100               	movlb	0	; () banked
 10896  01673A  21C1               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10897  01673C  6EDA               	movwf	fsr2h,c
 10898  01673E  50DF               	movf	indf2,w,c
 10899  016740  EC1B  F0AC         	call	_OutSeg
 10900  016744  0100               	movlb	0	; () banked
 10901  016746  4BC0               	infsnz	HMI_Render@a& (0+255),f,b
 10902  016748  2BC1               	incf	(HMI_Render@a+1)& (0+255),f,b
 10903  01674A  D7E7               	goto	l14256
 10904  01674C                     l1158:
 10905                           
 10906                           ; BSR set to: 0
 10907  01674C  0012               	return		;funcret
 10908  01674E                     __end_of_HMI_Render:
 10909                           	opt stack 0
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           postinc0	equ	0xFEE
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           fsr1h	equ	0xFE2
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8
 10928                           
 10929 ;; *************** function _OutSeg *****************
 10930 ;; Defined at:
 10931 ;;		line 54 in file "HMI.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  pInput          1    wreg     unsigned char 
 10934 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  pInput          1    6[BANK0 ] unsigned char 
 10937 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10938 ;; Return value:  Size  Location     Type
 10939 ;;                  1    wreg      void 
 10940 ;; Registers used:
 10941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10942 ;; Tracked objects:
 10943 ;;		On entry : 0/0
 10944 ;;		On exit  : 0/0
 10945 ;;		Unchanged: 0/0
 10946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10947 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;Total ram usage:        5 bytes
 10952 ;; Hardware stack levels used:    1
 10953 ;; Hardware stack levels required when called:    8
 10954 ;; This function calls:
 10955 ;;		_SPI_Send
 10956 ;; This function is called by:
 10957 ;;		_HMI_Render
 10958 ;;		_HMI_GRender
 10959 ;; This function uses a non-reentrant model
 10960 ;;
 10961                           
 10962                           	psect	text40
 10963  015836                     __ptext40:
 10964                           	opt stack 0
 10965  015836                     _OutSeg:
 10966                           	opt stack 19
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;incstack = 0
 10970                           ;OutSeg@pInput stored from wreg
 10971  015836  0100               	movlb	0	; () banked
 10972  015838  6FBE               	movwf	OutSeg@pInput& (0+255),b
 10973                           
 10974                           ;HMI.c: 58: static UINT8 cur;
 10975                           ;HMI.c: 59: volatile UINT8 out;
 10976                           ;HMI.c: 60: static UINT8 segset;
 10977                           ;HMI.c: 61: static UINT8 a;
 10978                           ;HMI.c: 83: if (pSegment <= 8)
 10979  01583A  0E09               	movlw	9
 10980  01583C  0100               	movlb	0	; () banked
 10981  01583E  61BB               	cpfslt	OutSeg@pSegment& (0+255),b
 10982  015840  0012               	return	
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;HMI.c: 84: {
 10986                           ;HMI.c: 85: cur = pInput;
 10987  015842  C0BE  F03F         	movff	OutSeg@pInput,OutSeg@cur
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10991  015846  0E00               	movlw	0
 10992  015848  6E3D               	movwf	OutSeg@a,c
 10993  01584A                     l13422:
 10994                           
 10995                           ; BSR set to: 0
 10996  01584A  0E07               	movlw	7
 10997  01584C  643D               	cpfsgt	OutSeg@a,c
 10998  01584E  D001               	goto	l1146
 10999  015850  D027               	goto	u10160
 11000  015852                     l1146:
 11001                           
 11002                           ;HMI.c: 87: {
 11003                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 11004                           
 11005                           ; BSR set to: 0
 11006  015852  C03F  F0BC         	movff	OutSeg@cur,??_OutSeg
 11007  015856  0E01               	movlw	1
 11008  015858  0100               	movlb	0	; () banked
 11009  01585A  17BC               	andwf	??_OutSeg& (0+255),f,b
 11010  01585C  0E06               	movlw	6
 11011  01585E  0100               	movlb	0	; () banked
 11012  015860  6FBD               	movwf	(??_OutSeg+1)& (0+255),b
 11013  015862                     u10155:
 11014  015862  0100               	movlb	0	; () banked
 11015  015864  90D8               	bcf	status,0,c
 11016  015866  37BC               	rlcf	??_OutSeg& (0+255),f,b
 11017  015868  0100               	movlb	0	; () banked
 11018  01586A  2FBD               	decfsz	(??_OutSeg+1)& (0+255),f,b
 11019  01586C  D7FA               	goto	u10155
 11020  01586E  0100               	movlb	0	; () banked
 11021  015870  51BC               	movf	??_OutSeg& (0+255),w,b
 11022  015872  6E3E               	movwf	OutSeg@segset,c
 11023                           
 11024                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 11025  015874  0100               	movlb	0	; () banked
 11026  015876  39BB               	swapf	OutSeg@pSegment& (0+255),w,b
 11027  015878  42E8               	rrncf	wreg,f,c
 11028  01587A  0BF8               	andlw	248
 11029  01587C  103D               	iorwf	OutSeg@a,w,c
 11030  01587E  103E               	iorwf	OutSeg@segset,w,c
 11031  015880  0100               	movlb	0	; () banked
 11032  015882  6FBF               	movwf	OutSeg@out& (0+255),b	;volatile
 11033                           
 11034                           ;HMI.c: 90: cur >>= 1;
 11035  015884  90D8               	bcf	status,0,c
 11036  015886  323F               	rrcf	OutSeg@cur,f,c
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 11040  015888  0E81               	movlw	low _SPI1
 11041  01588A  0100               	movlb	0	; () banked
 11042  01588C  6FB8               	movwf	SPI_Send@pInput& (0+255),b
 11043  01588E  0E03               	movlw	high _SPI1
 11044  015890  0100               	movlb	0	; () banked
 11045  015892  6FB9               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11046  015894  C0BF  F0BA         	movff	OutSeg@out,SPI_Send@pData	;volatile
 11047  015898  EC6E  F0AE         	call	_SPI_Send	;wreg free
 11048  01589C  2A3D               	incf	OutSeg@a,f,c
 11049  01589E  D7D5               	goto	l13422
 11050  0158A0                     u10160:
 11051                           
 11052                           ;HMI.c: 96: }
 11053                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 11054  0158A0  0E81               	movlw	low _SPI1
 11055  0158A2  0100               	movlb	0	; () banked
 11056  0158A4  6FB8               	movwf	SPI_Send@pInput& (0+255),b
 11057  0158A6  0E03               	movlw	high _SPI1
 11058  0158A8  0100               	movlb	0	; () banked
 11059  0158AA  6FB9               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11060  0158AC  0E00               	movlw	0
 11061  0158AE  0100               	movlb	0	; () banked
 11062  0158B0  6FBA               	movwf	SPI_Send@pData& (0+255),b
 11063  0158B2  EC6E  F0AE         	call	_SPI_Send	;wreg free
 11064  0158B6  0012               	return	
 11065  0158B8                     __end_of_OutSeg:
 11066                           	opt stack 0
 11067                           tblptru	equ	0xFF8
 11068                           tblptrh	equ	0xFF7
 11069                           tblptrl	equ	0xFF6
 11070                           tablat	equ	0xFF5
 11071                           prodh	equ	0xFF4
 11072                           prodl	equ	0xFF3
 11073                           intcon	equ	0xFF2
 11074                           postinc0	equ	0xFEE
 11075                           wreg	equ	0xFE8
 11076                           postdec1	equ	0xFE5
 11077                           fsr1h	equ	0xFE2
 11078                           fsr1l	equ	0xFE1
 11079                           indf2	equ	0xFDF
 11080                           postinc2	equ	0xFDE
 11081                           postdec2	equ	0xFDD
 11082                           fsr2h	equ	0xFDA
 11083                           fsr2l	equ	0xFD9
 11084                           status	equ	0xFD8
 11085                           
 11086 ;; *************** function _Console_Render *****************
 11087 ;; Defined at:
 11088 ;;		line 377 in file "Library/Console.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;		None
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;  lCursor         4   38[BANK0 ] struct Point
 11093 ;;  y               1   43[BANK0 ] unsigned char 
 11094 ;;  x               1   42[BANK0 ] unsigned char 
 11095 ;;  temp            1   37[BANK0 ] unsigned char 
 11096 ;;  Temp            2    0        unsigned short 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  1    wreg      void 
 11099 ;; Registers used:
 11100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;Total ram usage:        9 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:   11
 11113 ;; This function calls:
 11114 ;;		_Console_MakeField
 11115 ;;		_LCD_DrawField
 11116 ;;		_LCD_FillRectangle
 11117 ;; This function is called by:
 11118 ;;		_move_and_rotate
 11119 ;;		_findClosestWall
 11120 ;;		_mode1
 11121 ;;		_mode2
 11122 ;;		_mode4
 11123 ;;		_main
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text41
 11128  0123D0                     __ptext41:
 11129                           	opt stack 0
 11130  0123D0                     _Console_Render:
 11131                           	opt stack 17
 11132                           
 11133                           ;Console.c: 379: Colour Temp;
 11134                           ;Console.c: 380: if (change)
 11135                           
 11136                           ;incstack = 0
 11137  0123D0  0100               	movlb	0	; () banked
 11138  0123D2  51FF               	movf	_change& (0+255),w,b
 11139  0123D4  B4D8               	btfsc	status,2,c
 11140  0123D6  0012               	return	
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;Console.c: 381: {
 11144                           ;Console.c: 382: UINT8 x, y, temp;
 11145                           ;Console.c: 383: Point lCursor = {6,6};
 11146  0123D8  C3F1  F0DE         	movff	Console_Render@F6956,Console_Render@lCursor
 11147  0123DC  C3F2  F0DF         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 11148  0123E0  C3F3  F0E0         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 11149  0123E4  C3F4  F0E1         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;Console.c: 385: if (clearall)
 11153  0123E8  0100               	movlb	0	; () banked
 11154  0123EA  518E               	movf	_clearall& (0+255),w,b
 11155  0123EC  B4D8               	btfsc	status,2,c
 11156  0123EE  D005               	goto	l1056
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;Console.c: 386: {
 11160                           ;Console.c: 389: temp = lBufferY;
 11161  0123F0  C08C  F0DD         	movff	_lBufferY,Console_Render@temp
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 11165  0123F4  0E0F               	movlw	15
 11166  0123F6  0100               	movlb	0	; () banked
 11167  0123F8  6F8C               	movwf	_lBufferY& (0+255),b
 11168  0123FA                     l1056:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;Console.c: 391: }
 11172                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 11173  0123FA  0E00               	movlw	0
 11174  0123FC  0100               	movlb	0	; () banked
 11175  0123FE  6FE3               	movwf	Console_Render@y& (0+255),b
 11176  012400  D0DF               	goto	l1057
 11177  012402                     
 11178                           ; BSR set to: 0
 11179                           ;Console.c: 394: {
 11180                           ;Console.c: 395: gForecolour = lCBuffer[y];
 11181                           
 11182                           ; BSR set to: 0
 11183  012402  0100               	movlb	0	; () banked
 11184  012404  51E3               	movf	Console_Render@y& (0+255),w,b
 11185  012406  0D02               	mullw	2
 11186  012408  0E00               	movlw	low _lCBuffer
 11187  01240A  24F3               	addwf	prodl,w,c
 11188  01240C  6ED9               	movwf	fsr2l,c
 11189  01240E  0E03               	movlw	high _lCBuffer
 11190  012410  20F4               	addwfc	prodh,w,c
 11191  012412  6EDA               	movwf	fsr2h,c
 11192  012414  CFDE F0FD          	movff	postinc2,_gForecolour
 11193  012418  CFDD F0FE          	movff	postdec2,_gForecolour+1
 11194                           
 11195                           ; BSR set to: 0
 11196                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 11197  01241C  0E00               	movlw	0
 11198  01241E  0100               	movlb	0	; () banked
 11199  012420  6FE2               	movwf	Console_Render@x& (0+255),b
 11200  012422                     l14558:
 11201                           
 11202                           ; BSR set to: 0
 11203  012422  0E13               	movlw	19
 11204  012424  0100               	movlb	0	; () banked
 11205  012426  65E2               	cpfsgt	Console_Render@x& (0+255),b
 11206  012428  D001               	goto	l1059
 11207  01242A  D0BE               	goto	u11440
 11208  01242C                     l1059:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;Console.c: 397: {
 11212                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 11213                           
 11214                           ; BSR set to: 0
 11215  01242C  0100               	movlb	0	; () banked
 11216  01242E  51E3               	movf	Console_Render@y& (0+255),w,b
 11217  012430  0D14               	mullw	20
 11218  012432  0EB4               	movlw	low _lBuffer
 11219  012434  0100               	movlb	0	; () banked
 11220  012436  6FDB               	movwf	??_Console_Render& (0+255),b
 11221  012438  0E04               	movlw	high _lBuffer
 11222  01243A  0100               	movlb	0	; () banked
 11223  01243C  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 11224  01243E  50F3               	movf	prodl,w,c
 11225  012440  0100               	movlb	0	; () banked
 11226  012442  27DB               	addwf	??_Console_Render& (0+255),f,b
 11227  012444  50F4               	movf	prodh,w,c
 11228  012446  0100               	movlb	0	; () banked
 11229  012448  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11230  01244A  0100               	movlb	0	; () banked
 11231  01244C  51E2               	movf	Console_Render@x& (0+255),w,b
 11232  01244E  0D01               	mullw	1
 11233  012450  50F3               	movf	prodl,w,c
 11234  012452  0100               	movlb	0	; () banked
 11235  012454  25DB               	addwf	??_Console_Render& (0+255),w,b
 11236  012456  6ED9               	movwf	fsr2l,c
 11237  012458  50F4               	movf	prodh,w,c
 11238  01245A  0100               	movlb	0	; () banked
 11239  01245C  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11240  01245E  6EDA               	movwf	fsr2h,c
 11241  012460  AEDF               	btfss	indf2,7,c
 11242  012462  D09A               	goto	l1063
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;Console.c: 399: {
 11246                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 11247  012464  0100               	movlb	0	; () banked
 11248  012466  51E3               	movf	Console_Render@y& (0+255),w,b
 11249  012468  0D14               	mullw	20
 11250  01246A  0EB4               	movlw	low _lBuffer
 11251  01246C  0100               	movlb	0	; () banked
 11252  01246E  6FDB               	movwf	??_Console_Render& (0+255),b
 11253  012470  0E04               	movlw	high _lBuffer
 11254  012472  0100               	movlb	0	; () banked
 11255  012474  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 11256  012476  50F3               	movf	prodl,w,c
 11257  012478  0100               	movlb	0	; () banked
 11258  01247A  27DB               	addwf	??_Console_Render& (0+255),f,b
 11259  01247C  50F4               	movf	prodh,w,c
 11260  01247E  0100               	movlb	0	; () banked
 11261  012480  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11262  012482  0100               	movlb	0	; () banked
 11263  012484  51E2               	movf	Console_Render@x& (0+255),w,b
 11264  012486  0D01               	mullw	1
 11265  012488  50F3               	movf	prodl,w,c
 11266  01248A  0100               	movlb	0	; () banked
 11267  01248C  25DB               	addwf	??_Console_Render& (0+255),w,b
 11268  01248E  6ED9               	movwf	fsr2l,c
 11269  012490  50F4               	movf	prodh,w,c
 11270  012492  0100               	movlb	0	; () banked
 11271  012494  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11272  012496  6EDA               	movwf	fsr2h,c
 11273  012498  0E7F               	movlw	127
 11274  01249A  16DF               	andwf	indf2,f,c
 11275                           
 11276                           ;Console.c: 401: if (lBuffer[y][x])
 11277  01249C  0100               	movlb	0	; () banked
 11278  01249E  51E3               	movf	Console_Render@y& (0+255),w,b
 11279  0124A0  0D14               	mullw	20
 11280  0124A2  0EB4               	movlw	low _lBuffer
 11281  0124A4  0100               	movlb	0	; () banked
 11282  0124A6  6FDB               	movwf	??_Console_Render& (0+255),b
 11283  0124A8  0E04               	movlw	high _lBuffer
 11284  0124AA  0100               	movlb	0	; () banked
 11285  0124AC  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 11286  0124AE  50F3               	movf	prodl,w,c
 11287  0124B0  0100               	movlb	0	; () banked
 11288  0124B2  27DB               	addwf	??_Console_Render& (0+255),f,b
 11289  0124B4  50F4               	movf	prodh,w,c
 11290  0124B6  0100               	movlb	0	; () banked
 11291  0124B8  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11292  0124BA  0100               	movlb	0	; () banked
 11293  0124BC  51E2               	movf	Console_Render@x& (0+255),w,b
 11294  0124BE  0D01               	mullw	1
 11295  0124C0  50F3               	movf	prodl,w,c
 11296  0124C2  0100               	movlb	0	; () banked
 11297  0124C4  25DB               	addwf	??_Console_Render& (0+255),w,b
 11298  0124C6  6ED9               	movwf	fsr2l,c
 11299  0124C8  50F4               	movf	prodh,w,c
 11300  0124CA  0100               	movlb	0	; () banked
 11301  0124CC  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11302  0124CE  6EDA               	movwf	fsr2h,c
 11303  0124D0  50DF               	movf	indf2,w,c
 11304  0124D2  B4D8               	btfsc	status,2,c
 11305  0124D4  D04A               	goto	l1062
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;Console.c: 402: {
 11309                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11310  0124D6  C080  F0C1         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11311  0124DA  C081  F0C2         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11312  0124DE  C0DE  F0C3         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11313  0124E2  C0DF  F0C4         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11314  0124E6  C0E0  F0C5         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11315  0124EA  C0E1  F0C6         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11316  0124EE  C3F9  F0C7         	movff	_gCharSize,LCD_FillRectangle@pSize
 11317  0124F2  C3FA  F0C8         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11318  0124F6  C3FB  F0C9         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11319  0124FA  C3FC  F0CA         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11320  0124FE  EC4E  F0AD         	call	_LCD_FillRectangle	;wreg free
 11321                           
 11322                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11323  012502  0100               	movlb	0	; () banked
 11324  012504  51E3               	movf	Console_Render@y& (0+255),w,b
 11325  012506  0D14               	mullw	20
 11326  012508  0EB4               	movlw	low _lBuffer
 11327  01250A  0100               	movlb	0	; () banked
 11328  01250C  6FDB               	movwf	??_Console_Render& (0+255),b
 11329  01250E  0E04               	movlw	high _lBuffer
 11330  012510  0100               	movlb	0	; () banked
 11331  012512  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 11332  012514  50F3               	movf	prodl,w,c
 11333  012516  0100               	movlb	0	; () banked
 11334  012518  27DB               	addwf	??_Console_Render& (0+255),f,b
 11335  01251A  50F4               	movf	prodh,w,c
 11336  01251C  0100               	movlb	0	; () banked
 11337  01251E  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11338  012520  0100               	movlb	0	; () banked
 11339  012522  51E2               	movf	Console_Render@x& (0+255),w,b
 11340  012524  0D01               	mullw	1
 11341  012526  50F3               	movf	prodl,w,c
 11342  012528  0100               	movlb	0	; () banked
 11343  01252A  25DB               	addwf	??_Console_Render& (0+255),w,b
 11344  01252C  6ED9               	movwf	fsr2l,c
 11345  01252E  50F4               	movf	prodh,w,c
 11346  012530  0100               	movlb	0	; () banked
 11347  012532  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11348  012534  6EDA               	movwf	fsr2h,c
 11349  012536  50DF               	movf	indf2,w,c
 11350  012538  EC49  F0A3         	call	_Console_MakeField
 11351  01253C  C0BD  F0CA         	movff	?_Console_MakeField,LCD_DrawField@pField
 11352  012540  C0BE  F0CB         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11353  012544  C0DE  F0CC         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11354  012548  C0DF  F0CD         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11355  01254C  C0E0  F0CE         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11356  012550  C0E1  F0CF         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11357  012554  C3F9  F0D0         	movff	_gCharSize,LCD_DrawField@pSize
 11358  012558  C3FA  F0D1         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11359  01255C  C3FB  F0D2         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11360  012560  C3FC  F0D3         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11361  012564  ECEE  F0A8         	call	_LCD_DrawField	;wreg free
 11362                           
 11363                           ;Console.c: 405: }
 11364  012568  D017               	goto	l1063
 11365  01256A                     l1062:
 11366                           
 11367                           ;Console.c: 406: else
 11368                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11369  01256A  0E00               	movlw	0
 11370  01256C  0100               	movlb	0	; () banked
 11371  01256E  6FC2               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11372  012570  0E00               	movlw	0
 11373  012572  6FC1               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11374  012574  C0DE  F0C3         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11375  012578  C0DF  F0C4         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11376  01257C  C0E0  F0C5         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11377  012580  C0E1  F0C6         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11378  012584  C3F9  F0C7         	movff	_gCharSize,LCD_FillRectangle@pSize
 11379  012588  C3FA  F0C8         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11380  01258C  C3FB  F0C9         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11381  012590  C3FC  F0CA         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11382  012594  EC4E  F0AD         	call	_LCD_FillRectangle	;wreg free
 11383  012598                     l1063:
 11384                           
 11385                           ;Console.c: 408: }
 11386                           ;Console.c: 409: lCursor.x += (5 + 1);
 11387  012598  0E06               	movlw	6
 11388  01259A  0100               	movlb	0	; () banked
 11389  01259C  27DE               	addwf	Console_Render@lCursor& (0+255),f,b
 11390  01259E  0E00               	movlw	0
 11391  0125A0  23DF               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11392                           
 11393                           ; BSR set to: 0
 11394  0125A2  0100               	movlb	0	; () banked
 11395  0125A4  2BE2               	incf	Console_Render@x& (0+255),f,b
 11396  0125A6  D73D               	goto	l14558
 11397  0125A8                     u11440:
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;Console.c: 410: }
 11401                           ;Console.c: 411: lCursor.y += (7 + 1);
 11402                           
 11403                           ; BSR set to: 0
 11404  0125A8  0E08               	movlw	8
 11405  0125AA  0100               	movlb	0	; () banked
 11406  0125AC  27E0               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11407  0125AE  0E00               	movlw	0
 11408  0125B0  23E1               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;Console.c: 412: lCursor.x = 6;
 11412  0125B2  0E00               	movlw	0
 11413  0125B4  0100               	movlb	0	; () banked
 11414  0125B6  6FDF               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11415  0125B8  0E06               	movlw	6
 11416  0125BA  6FDE               	movwf	Console_Render@lCursor& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419  0125BC  0100               	movlb	0	; () banked
 11420  0125BE  2BE3               	incf	Console_Render@y& (0+255),f,b
 11421  0125C0                     l1057:
 11422                           
 11423                           ; BSR set to: 0
 11424                           
 11425                           ; BSR set to: 0
 11426  0125C0  0100               	movlb	0	; () banked
 11427  0125C2  51E3               	movf	Console_Render@y& (0+255),w,b
 11428  0125C4  0100               	movlb	0	; () banked
 11429  0125C6  5D8C               	subwf	_lBufferY& (0+255),w,b
 11430  0125C8  B0D8               	btfsc	status,0,c
 11431  0125CA  D71B               	goto	l1058
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;Console.c: 413: }
 11435                           ;Console.c: 415: if (clearall)
 11436                           
 11437                           ; BSR set to: 0
 11438  0125CC  0100               	movlb	0	; () banked
 11439  0125CE  518E               	movf	_clearall& (0+255),w,b
 11440  0125D0  B4D8               	btfsc	status,2,c
 11441  0125D2  0012               	return	
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;Console.c: 416: {
 11445                           ;Console.c: 417: clearall = 0;
 11446  0125D4  0E00               	movlw	0
 11447  0125D6  0100               	movlb	0	; () banked
 11448  0125D8  6F8E               	movwf	_clearall& (0+255),b
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;Console.c: 418: lBufferY = temp;
 11452  0125DA  C0DD  F08C         	movff	Console_Render@temp,_lBufferY
 11453                           
 11454                           ; BSR set to: 0
 11455  0125DE  0012               	return	
 11456  0125E0                     __end_of_Console_Render:
 11457                           	opt stack 0
 11458                           tblptru	equ	0xFF8
 11459                           tblptrh	equ	0xFF7
 11460                           tblptrl	equ	0xFF6
 11461                           tablat	equ	0xFF5
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           intcon	equ	0xFF2
 11465                           postinc0	equ	0xFEE
 11466                           wreg	equ	0xFE8
 11467                           postdec1	equ	0xFE5
 11468                           fsr1h	equ	0xFE2
 11469                           fsr1l	equ	0xFE1
 11470                           indf2	equ	0xFDF
 11471                           postinc2	equ	0xFDE
 11472                           postdec2	equ	0xFDD
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _LCD_FillRectangle *****************
 11478 ;; Defined at:
 11479 ;;		line 318 in file "Library/LCD.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  pColour         2    9[BANK0 ] unsigned short 
 11482 ;;  pPoint          4   11[BANK0 ] struct Point
 11483 ;;  pSize           4   15[BANK0 ] struct Point
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  j               1   22[BANK0 ] unsigned char 
 11486 ;;  i               1   21[BANK0 ] unsigned char 
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      void 
 11489 ;; Registers used:
 11490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11496 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11500 ;;Total ram usage:       14 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:   10
 11503 ;; This function calls:
 11504 ;;		_LCD_Word_Write
 11505 ;;		_Set_Addr_Window
 11506 ;; This function is called by:
 11507 ;;		_Console_Render
 11508 ;;		_Console_ClearLine
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text42
 11513  015A9C                     __ptext42:
 11514                           	opt stack 0
 11515  015A9C                     _LCD_FillRectangle:
 11516                           	opt stack 17
 11517                           
 11518                           ;LCD.c: 320: UINT8 i = 0x00;
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;incstack = 0
 11522  015A9C  0E00               	movlw	0
 11523  015A9E  0100               	movlb	0	; () banked
 11524  015AA0  6FCD               	movwf	LCD_FillRectangle@i& (0+255),b
 11525                           
 11526                           ;LCD.c: 321: UINT8 j = 0x00;
 11527  015AA2  0E00               	movlw	0
 11528  015AA4  0100               	movlb	0	; () banked
 11529  015AA6  6FCE               	movwf	LCD_FillRectangle@j& (0+255),b
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 11533  015AA8  C0C5  F0BD         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 11534  015AAC  0100               	movlb	0	; () banked
 11535  015AAE  51C3               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11536  015AB0  0100               	movlb	0	; () banked
 11537  015AB2  25C7               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 11538  015AB4  0100               	movlb	0	; () banked
 11539  015AB6  6FCB               	movwf	??_LCD_FillRectangle& (0+255),b
 11540  015AB8  0100               	movlb	0	; () banked
 11541  015ABA  05CB               	decf	??_LCD_FillRectangle& (0+255),w,b
 11542  015ABC  0100               	movlb	0	; () banked
 11543  015ABE  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 11544  015AC0  0100               	movlb	0	; () banked
 11545  015AC2  51C5               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 11546  015AC4  0100               	movlb	0	; () banked
 11547  015AC6  25C9               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 11548  015AC8  0100               	movlb	0	; () banked
 11549  015ACA  6FCC               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 11550  015ACC  0100               	movlb	0	; () banked
 11551  015ACE  05CC               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 11552  015AD0  0100               	movlb	0	; () banked
 11553  015AD2  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 11554  015AD4  0100               	movlb	0	; () banked
 11555  015AD6  51C3               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11556  015AD8  ECF8  F0A6         	call	_Set_Addr_Window
 11557                           
 11558                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 11559  015ADC  C0C9  F0CE         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 11560  015AE0                     l13996:
 11561  015AE0  0100               	movlb	0	; () banked
 11562  015AE2  51CE               	movf	LCD_FillRectangle@j& (0+255),w,b
 11563  015AE4  0100               	movlb	0	; () banked
 11564  015AE6  B4D8               	btfsc	status,2,c
 11565  015AE8  0012               	return	
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 11569                           
 11570                           ; BSR set to: 0
 11571  015AEA  C0C7  F0CD         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 11572  015AEE                     l14000:
 11573                           
 11574                           ; BSR set to: 0
 11575  015AEE  0100               	movlb	0	; () banked
 11576  015AF0  51CD               	movf	LCD_FillRectangle@i& (0+255),w,b
 11577  015AF2  0100               	movlb	0	; () banked
 11578  015AF4  B4D8               	btfsc	status,2,c
 11579  015AF6  D009               	goto	u10880
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;LCD.c: 333: LCD_Word_Write(pColour);
 11583                           
 11584                           ; BSR set to: 0
 11585                           
 11586                           ; BSR set to: 0
 11587  015AF8  C0C1  F0BD         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 11588  015AFC  C0C2  F0BE         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 11589  015B00  ECED  F0B5         	call	_LCD_Word_Write	;wreg free
 11590  015B04  0100               	movlb	0	; () banked
 11591  015B06  07CD               	decf	LCD_FillRectangle@i& (0+255),f,b
 11592  015B08  D7F2               	goto	l14000
 11593  015B0A                     u10880:
 11594                           
 11595                           ; BSR set to: 0
 11596                           
 11597                           ; BSR set to: 0
 11598  015B0A  0100               	movlb	0	; () banked
 11599  015B0C  07CE               	decf	LCD_FillRectangle@j& (0+255),f,b
 11600  015B0E  D7E8               	goto	l13996
 11601  015B10                     __end_of_LCD_FillRectangle:
 11602                           	opt stack 0
 11603                           tblptru	equ	0xFF8
 11604                           tblptrh	equ	0xFF7
 11605                           tblptrl	equ	0xFF6
 11606                           tablat	equ	0xFF5
 11607                           prodh	equ	0xFF4
 11608                           prodl	equ	0xFF3
 11609                           intcon	equ	0xFF2
 11610                           postinc0	equ	0xFEE
 11611                           wreg	equ	0xFE8
 11612                           postdec1	equ	0xFE5
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           indf2	equ	0xFDF
 11616                           postinc2	equ	0xFDE
 11617                           postdec2	equ	0xFDD
 11618                           fsr2h	equ	0xFDA
 11619                           fsr2l	equ	0xFD9
 11620                           status	equ	0xFD8
 11621                           
 11622 ;; *************** function _LCD_DrawField *****************
 11623 ;; Defined at:
 11624 ;;		line 393 in file "Library/LCD.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 11627 ;;		 -> Console_MakeField@Fill(70), 
 11628 ;;  pPoint          4   20[BANK0 ] struct Point
 11629 ;;  pSize           4   24[BANK0 ] struct Point
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  count           2   30[BANK0 ] unsigned short 
 11632 ;;  i               1   34[BANK0 ] unsigned char 
 11633 ;;  ymax            1   33[BANK0 ] unsigned char 
 11634 ;;  xmax            1   32[BANK0 ] unsigned char 
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      void 
 11637 ;; Registers used:
 11638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11644 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;Total ram usage:       17 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:   10
 11651 ;; This function calls:
 11652 ;;		_LCD_Word_Write
 11653 ;;		_Set_Addr_Window
 11654 ;;		___wmul
 11655 ;; This function is called by:
 11656 ;;		_Console_Render
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text43
 11661  0151DC                     __ptext43:
 11662                           	opt stack 0
 11663  0151DC                     _LCD_DrawField:
 11664                           	opt stack 17
 11665                           
 11666                           ;LCD.c: 396: UINT8 i = 0x00;
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;incstack = 0
 11670  0151DC  0E00               	movlw	0
 11671  0151DE  0100               	movlb	0	; () banked
 11672  0151E0  6FDA               	movwf	LCD_DrawField@i& (0+255),b
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 11676  0151E2  0100               	movlb	0	; () banked
 11677  0151E4  51CC               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11678  0151E6  0100               	movlb	0	; () banked
 11679  0151E8  25D0               	addwf	LCD_DrawField@pSize& (0+255),w,b
 11680  0151EA  0100               	movlb	0	; () banked
 11681  0151EC  6FD8               	movwf	LCD_DrawField@xmax& (0+255),b
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 11685  0151EE  0100               	movlb	0	; () banked
 11686  0151F0  51CE               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 11687  0151F2  0100               	movlb	0	; () banked
 11688  0151F4  25D2               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 11689  0151F6  0100               	movlb	0	; () banked
 11690  0151F8  6FD9               	movwf	LCD_DrawField@ymax& (0+255),b
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 11694  0151FA  C0D2  F0B8         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 11695  0151FE  C0D3  F0B9         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 11696  015202  C0D0  F0BA         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 11697  015206  C0D1  F0BB         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 11698  01520A  EC5C  F0B4         	call	___wmul	;wreg free
 11699  01520E  C0B8  F0D6         	movff	?___wmul,LCD_DrawField@count
 11700  015212  C0B9  F0D7         	movff	?___wmul+1,LCD_DrawField@count+1
 11701                           
 11702                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 11703  015216  C0CE  F0BD         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 11704  01521A  0100               	movlb	0	; () banked
 11705  01521C  05D8               	decf	LCD_DrawField@xmax& (0+255),w,b
 11706  01521E  0100               	movlb	0	; () banked
 11707  015220  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 11708  015222  0100               	movlb	0	; () banked
 11709  015224  05D9               	decf	LCD_DrawField@ymax& (0+255),w,b
 11710  015226  0100               	movlb	0	; () banked
 11711  015228  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 11712  01522A  0100               	movlb	0	; () banked
 11713  01522C  51CC               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11714  01522E  ECF8  F0A6         	call	_Set_Addr_Window
 11715                           
 11716                           ;LCD.c: 403: for(i = 0; i < count; i++)
 11717  015232  0E00               	movlw	0
 11718  015234  0100               	movlb	0	; () banked
 11719  015236  6FDA               	movwf	LCD_DrawField@i& (0+255),b
 11720  015238  D013               	goto	l183
 11721  01523A                     
 11722                           ; BSR set to: 0
 11723                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 11724                           
 11725                           ; BSR set to: 0
 11726  01523A  0100               	movlb	0	; () banked
 11727  01523C  51DA               	movf	LCD_DrawField@i& (0+255),w,b
 11728  01523E  0D02               	mullw	2
 11729  015240  50F3               	movf	prodl,w,c
 11730  015242  0100               	movlb	0	; () banked
 11731  015244  25CA               	addwf	LCD_DrawField@pField& (0+255),w,b
 11732  015246  6ED9               	movwf	fsr2l,c
 11733  015248  50F4               	movf	prodh,w,c
 11734  01524A  0100               	movlb	0	; () banked
 11735  01524C  21CB               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 11736  01524E  6EDA               	movwf	fsr2h,c
 11737  015250  CFDE F0BD          	movff	postinc2,LCD_Word_Write@value
 11738  015254  CFDD F0BE          	movff	postdec2,LCD_Word_Write@value+1
 11739  015258  ECED  F0B5         	call	_LCD_Word_Write	;wreg free
 11740  01525C  0100               	movlb	0	; () banked
 11741  01525E  2BDA               	incf	LCD_DrawField@i& (0+255),f,b
 11742  015260                     l183:
 11743                           
 11744                           ; BSR set to: 0
 11745                           
 11746                           ; BSR set to: 0
 11747  015260  0100               	movlb	0	; () banked
 11748  015262  51DA               	movf	LCD_DrawField@i& (0+255),w,b
 11749  015264  0100               	movlb	0	; () banked
 11750  015266  6FD4               	movwf	??_LCD_DrawField& (0+255),b
 11751  015268  6BD5               	clrf	(??_LCD_DrawField+1)& (0+255),b
 11752  01526A  0100               	movlb	0	; () banked
 11753  01526C  51D6               	movf	LCD_DrawField@count& (0+255),w,b
 11754  01526E  0100               	movlb	0	; () banked
 11755  015270  5DD4               	subwf	??_LCD_DrawField& (0+255),w,b
 11756  015272  0100               	movlb	0	; () banked
 11757  015274  51D7               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 11758  015276  0100               	movlb	0	; () banked
 11759  015278  59D5               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 11760  01527A  B0D8               	btfsc	status,0,c
 11761  01527C  0012               	return	
 11762  01527E  D7DD               	goto	l184
 11763  015280                     __end_of_LCD_DrawField:
 11764                           	opt stack 0
 11765                           tblptru	equ	0xFF8
 11766                           tblptrh	equ	0xFF7
 11767                           tblptrl	equ	0xFF6
 11768                           tablat	equ	0xFF5
 11769                           prodh	equ	0xFF4
 11770                           prodl	equ	0xFF3
 11771                           intcon	equ	0xFF2
 11772                           postinc0	equ	0xFEE
 11773                           wreg	equ	0xFE8
 11774                           postdec1	equ	0xFE5
 11775                           fsr1h	equ	0xFE2
 11776                           fsr1l	equ	0xFE1
 11777                           indf2	equ	0xFDF
 11778                           postinc2	equ	0xFDE
 11779                           postdec2	equ	0xFDD
 11780                           fsr2h	equ	0xFDA
 11781                           fsr2l	equ	0xFD9
 11782                           status	equ	0xFD8
 11783                           
 11784 ;; *************** function ___wmul *****************
 11785 ;; Defined at:
 11786 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11789 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11790 ;; Auto vars:     Size  Location     Type
 11791 ;;  product         2    4[BANK0 ] unsigned int 
 11792 ;; Return value:  Size  Location     Type
 11793 ;;                  2    0[BANK0 ] unsigned int 
 11794 ;; Registers used:
 11795 ;;		wreg, status,2, status,0, prodl, prodh
 11796 ;; Tracked objects:
 11797 ;;		On entry : 0/0
 11798 ;;		On exit  : 0/0
 11799 ;;		Unchanged: 0/0
 11800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11801 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;Total ram usage:        6 bytes
 11806 ;; Hardware stack levels used:    1
 11807 ;; Hardware stack levels required when called:    7
 11808 ;; This function calls:
 11809 ;;		Nothing
 11810 ;; This function is called by:
 11811 ;;		_LCD_DrawField
 11812 ;;		_move_and_rotate
 11813 ;; This function uses a non-reentrant model
 11814 ;;
 11815                           
 11816                           	psect	text44
 11817  0168B8                     __ptext44:
 11818                           	opt stack 0
 11819  0168B8                     ___wmul:
 11820                           	opt stack 19
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;incstack = 0
 11824  0168B8  0100               	movlb	0	; () banked
 11825  0168BA  51B8               	movf	___wmul@multiplier& (0+255),w,b
 11826  0168BC  0100               	movlb	0	; () banked
 11827  0168BE  03BA               	mulwf	___wmul@multiplicand& (0+255),b
 11828  0168C0  CFF3 F0BC          	movff	prodl,___wmul@product
 11829  0168C4  CFF4 F0BD          	movff	prodh,___wmul@product+1
 11830  0168C8  0100               	movlb	0	; () banked
 11831  0168CA  51B8               	movf	___wmul@multiplier& (0+255),w,b
 11832  0168CC  0100               	movlb	0	; () banked
 11833  0168CE  03BB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11834  0168D0  50F3               	movf	prodl,w,c
 11835  0168D2  0100               	movlb	0	; () banked
 11836  0168D4  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
 11837  0168D6  0100               	movlb	0	; () banked
 11838  0168D8  51B9               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11839  0168DA  0100               	movlb	0	; () banked
 11840  0168DC  03BA               	mulwf	___wmul@multiplicand& (0+255),b
 11841  0168DE  50F3               	movf	prodl,w,c
 11842  0168E0  0100               	movlb	0	; () banked
 11843  0168E2  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
 11844                           
 11845                           ; BSR set to: 0
 11846  0168E4  C0BC  F0B8         	movff	___wmul@product,?___wmul
 11847  0168E8  C0BD  F0B9         	movff	___wmul@product+1,?___wmul+1
 11848  0168EC  0012               	return	
 11849  0168EE                     __end_of___wmul:
 11850                           	opt stack 0
 11851                           tblptru	equ	0xFF8
 11852                           tblptrh	equ	0xFF7
 11853                           tblptrl	equ	0xFF6
 11854                           tablat	equ	0xFF5
 11855                           prodh	equ	0xFF4
 11856                           prodl	equ	0xFF3
 11857                           intcon	equ	0xFF2
 11858                           postinc0	equ	0xFEE
 11859                           wreg	equ	0xFE8
 11860                           postdec1	equ	0xFE5
 11861                           fsr1h	equ	0xFE2
 11862                           fsr1l	equ	0xFE1
 11863                           indf2	equ	0xFDF
 11864                           postinc2	equ	0xFDE
 11865                           postdec2	equ	0xFDD
 11866                           fsr2h	equ	0xFDA
 11867                           fsr2l	equ	0xFD9
 11868                           status	equ	0xFD8
 11869                           
 11870 ;; *************** function _Console_MakeField *****************
 11871 ;; Defined at:
 11872 ;;		line 435 in file "Library/Console.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;  pInput          1    wreg     unsigned char 
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  pInput          1   11[BANK0 ] unsigned char 
 11877 ;;  y               1   17[BANK0 ] unsigned char 
 11878 ;;  x               1   16[BANK0 ] unsigned char 
 11879 ;;  Column          2   12[BANK0 ] PTR struct Byte
 11880 ;;		 -> Font5x7(480), 
 11881 ;;  Index           2    9[BANK0 ] unsigned short 
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  2    5[BANK0 ] PTR unsigned short 
 11884 ;; Registers used:
 11885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11891 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;Total ram usage:       13 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    8
 11898 ;; This function calls:
 11899 ;;		_Byte_GetBit
 11900 ;; This function is called by:
 11901 ;;		_Console_Render
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text45
 11906  014692                     __ptext45:
 11907                           	opt stack 0
 11908  014692                     _Console_MakeField:
 11909                           	opt stack 19
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;incstack = 0
 11913                           ;Console_MakeField@pInput stored from wreg
 11914  014692  0100               	movlb	0	; () banked
 11915  014694  6FC3               	movwf	Console_MakeField@pInput& (0+255),b
 11916                           
 11917                           ;Console.c: 437: static Colour Fill[7][5];
 11918                           ;Console.c: 438: pInput -= 32;
 11919  014696  0E20               	movlw	32
 11920  014698  0100               	movlb	0	; () banked
 11921  01469A  5FC3               	subwf	Console_MakeField@pInput& (0+255),f,b
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 11925  01469C  0100               	movlb	0	; () banked
 11926  01469E  51C3               	movf	Console_MakeField@pInput& (0+255),w,b
 11927  0146A0  0D05               	mullw	5
 11928  0146A2  CFF3 F0C1          	movff	prodl,Console_MakeField@Index
 11929  0146A6  CFF4 F0C2          	movff	prodh,Console_MakeField@Index+1
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 11933  0146AA  0E1F               	movlw	low _Font5x7
 11934  0146AC  0100               	movlb	0	; () banked
 11935  0146AE  25C1               	addwf	Console_MakeField@Index& (0+255),w,b
 11936  0146B0  0100               	movlb	0	; () banked
 11937  0146B2  6FC4               	movwf	Console_MakeField@Column& (0+255),b
 11938  0146B4  0EFD               	movlw	high _Font5x7
 11939  0146B6  0100               	movlb	0	; () banked
 11940  0146B8  21C2               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 11941  0146BA  0100               	movlb	0	; () banked
 11942  0146BC  6FC5               	movwf	(Console_MakeField@Column+1)& (0+255),b
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 11946  0146BE  0E00               	movlw	0
 11947  0146C0  0100               	movlb	0	; () banked
 11948  0146C2  6FC8               	movwf	Console_MakeField@x& (0+255),b
 11949  0146C4                     l14222:
 11950                           
 11951                           ; BSR set to: 0
 11952  0146C4  0E04               	movlw	4
 11953  0146C6  0100               	movlb	0	; () banked
 11954  0146C8  65C8               	cpfsgt	Console_MakeField@x& (0+255),b
 11955  0146CA  D001               	goto	l1077
 11956  0146CC  D043               	goto	u11070
 11957  0146CE                     l1077:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;Console.c: 444: {
 11961                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 11962                           
 11963                           ; BSR set to: 0
 11964  0146CE  0E00               	movlw	0
 11965  0146D0  0100               	movlb	0	; () banked
 11966  0146D2  6FC9               	movwf	Console_MakeField@y& (0+255),b
 11967  0146D4                     l14228:
 11968                           
 11969                           ; BSR set to: 0
 11970  0146D4  0E06               	movlw	6
 11971  0146D6  0100               	movlb	0	; () banked
 11972  0146D8  65C9               	cpfsgt	Console_MakeField@y& (0+255),b
 11973  0146DA  D001               	goto	l1079
 11974  0146DC  D035               	goto	u11060
 11975  0146DE                     l1079:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 11979                           
 11980                           ; BSR set to: 0
 11981  0146DE  C0C4  F0B8         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11982  0146E2  C0C5  F0B9         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11983  0146E6  C0C9  F0BA         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11984  0146EA  EC92  F0B4         	call	_Byte_GetBit	;wreg free
 11985  0146EE  0900               	iorlw	0
 11986  0146F0  A4D8               	btfss	status,2,c
 11987  0146F2  D005               	goto	l1082
 11988  0146F4  C080  F0C6         	movff	_gBackcolour,_Console_MakeField$10974
 11989  0146F8  C081  F0C7         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11990  0146FC  D004               	goto	l1084
 11991  0146FE                     l1082:
 11992  0146FE  C0FD  F0C6         	movff	_gForecolour,_Console_MakeField$10974
 11993  014702  C0FE  F0C7         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11994  014706                     l1084:
 11995  014706  0100               	movlb	0	; () banked
 11996  014708  51C9               	movf	Console_MakeField@y& (0+255),w,b
 11997  01470A  0D0A               	mullw	10
 11998  01470C  0E64               	movlw	low Console_MakeField@Fill
 11999  01470E  0100               	movlb	0	; () banked
 12000  014710  6FBF               	movwf	??_Console_MakeField& (0+255),b
 12001  014712  0E04               	movlw	high Console_MakeField@Fill
 12002  014714  0100               	movlb	0	; () banked
 12003  014716  6FC0               	movwf	(??_Console_MakeField+1)& (0+255),b
 12004  014718  50F3               	movf	prodl,w,c
 12005  01471A  0100               	movlb	0	; () banked
 12006  01471C  27BF               	addwf	??_Console_MakeField& (0+255),f,b
 12007  01471E  50F4               	movf	prodh,w,c
 12008  014720  0100               	movlb	0	; () banked
 12009  014722  23C0               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 12010  014724  0100               	movlb	0	; () banked
 12011  014726  51C8               	movf	Console_MakeField@x& (0+255),w,b
 12012  014728  0D02               	mullw	2
 12013  01472A  50F3               	movf	prodl,w,c
 12014  01472C  0100               	movlb	0	; () banked
 12015  01472E  25BF               	addwf	??_Console_MakeField& (0+255),w,b
 12016  014730  6ED9               	movwf	fsr2l,c
 12017  014732  50F4               	movf	prodh,w,c
 12018  014734  0100               	movlb	0	; () banked
 12019  014736  21C0               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 12020  014738  6EDA               	movwf	fsr2h,c
 12021  01473A  C0C6  FFDE         	movff	_Console_MakeField$10974,postinc2
 12022  01473E  C0C7  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 12023                           
 12024                           ; BSR set to: 0
 12025  014742  0100               	movlb	0	; () banked
 12026  014744  2BC9               	incf	Console_MakeField@y& (0+255),f,b
 12027  014746  D7C6               	goto	l14228
 12028  014748                     u11060:
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;Console.c: 447: Column += 1;
 12032                           
 12033                           ; BSR set to: 0
 12034  014748  0100               	movlb	0	; () banked
 12035  01474A  4BC4               	infsnz	Console_MakeField@Column& (0+255),f,b
 12036  01474C  2BC5               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 12037  01474E  0100               	movlb	0	; () banked
 12038  014750  2BC8               	incf	Console_MakeField@x& (0+255),f,b
 12039  014752  D7B8               	goto	l14222
 12040  014754                     u11070:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;Console.c: 448: }
 12044                           ;Console.c: 449: return (ColourPtr)Fill;
 12045                           
 12046                           ; BSR set to: 0
 12047  014754  0E64               	movlw	low Console_MakeField@Fill
 12048  014756  0100               	movlb	0	; () banked
 12049  014758  6FBD               	movwf	?_Console_MakeField& (0+255),b
 12050  01475A  0E04               	movlw	high Console_MakeField@Fill
 12051  01475C  0100               	movlb	0	; () banked
 12052  01475E  6FBE               	movwf	(?_Console_MakeField+1)& (0+255),b
 12053  014760  0012               	return	
 12054  014762                     __end_of_Console_MakeField:
 12055                           	opt stack 0
 12056                           tblptru	equ	0xFF8
 12057                           tblptrh	equ	0xFF7
 12058                           tblptrl	equ	0xFF6
 12059                           tablat	equ	0xFF5
 12060                           prodh	equ	0xFF4
 12061                           prodl	equ	0xFF3
 12062                           intcon	equ	0xFF2
 12063                           postinc0	equ	0xFEE
 12064                           wreg	equ	0xFE8
 12065                           postdec1	equ	0xFE5
 12066                           fsr1h	equ	0xFE2
 12067                           fsr1l	equ	0xFE1
 12068                           indf2	equ	0xFDF
 12069                           postinc2	equ	0xFDE
 12070                           postdec2	equ	0xFDD
 12071                           fsr2h	equ	0xFDA
 12072                           fsr2l	equ	0xFD9
 12073                           status	equ	0xFD8
 12074                           
 12075 ;; *************** function _Byte_GetBit *****************
 12076 ;; Defined at:
 12077 ;;		line 38 in file "Library/Types.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12080 ;;		 -> Font5x7(480), 
 12081 ;;  pBit            1    2[BANK0 ] unsigned char 
 12082 ;; Auto vars:     Size  Location     Type
 12083 ;;  Output          1    4[BANK0 ] unsigned char 
 12084 ;; Return value:  Size  Location     Type
 12085 ;;                  1    wreg      unsigned char 
 12086 ;; Registers used:
 12087 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12088 ;; Tracked objects:
 12089 ;;		On entry : 0/0
 12090 ;;		On exit  : 0/0
 12091 ;;		Unchanged: 0/0
 12092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12093 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12096 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;Total ram usage:        5 bytes
 12098 ;; Hardware stack levels used:    1
 12099 ;; Hardware stack levels required when called:    7
 12100 ;; This function calls:
 12101 ;;		Nothing
 12102 ;; This function is called by:
 12103 ;;		_Console_MakeField
 12104 ;;		_Word_GetBit
 12105 ;; This function uses a non-reentrant model
 12106 ;;
 12107                           
 12108                           	psect	text46
 12109  016924                     __ptext46:
 12110                           	opt stack 0
 12111  016924                     _Byte_GetBit:
 12112                           	opt stack 19
 12113                           
 12114                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;incstack = 0
 12118  016924  C0B8  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 12119  016928  C0B9  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 12120  01692C                     	if	0	;tblptru may be non-zero
 12121  01692C                     	endif
 12122  01692C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12123  01692C  0E00               	movlw	low (__mediumconst shr (0+16))
 12124  01692E  6EF8               	movwf	tblptru,c
 12125  016930                     	endif
 12126  016930  0008               	tblrd		*
 12127  016932  CFF5 F0BC          	movff	tablat,Byte_GetBit@Output
 12128                           
 12129                           ;Types.c: 42: Output >>= pBit;
 12130  016936  0100               	movlb	0	; () banked
 12131  016938  29BA               	incf	Byte_GetBit@pBit& (0+255),w,b
 12132  01693A  0100               	movlb	0	; () banked
 12133  01693C  6FBB               	movwf	??_Byte_GetBit& (0+255),b
 12134  01693E  D003               	goto	u10090
 12135  016940                     u10095:
 12136  016940  0100               	movlb	0	; () banked
 12137  016942  90D8               	bcf	status,0,c
 12138  016944  33BC               	rrcf	Byte_GetBit@Output& (0+255),f,b
 12139  016946                     u10090:
 12140  016946  0100               	movlb	0	; () banked
 12141  016948  2FBB               	decfsz	??_Byte_GetBit& (0+255),f,b
 12142  01694A  D7FA               	goto	u10095
 12143                           
 12144                           ;Types.c: 43: Output &= 1;
 12145  01694C  0E01               	movlw	1
 12146  01694E  0100               	movlb	0	; () banked
 12147  016950  17BC               	andwf	Byte_GetBit@Output& (0+255),f,b
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;Types.c: 44: return Output;
 12151  016952  0100               	movlb	0	; () banked
 12152  016954  51BC               	movf	Byte_GetBit@Output& (0+255),w,b
 12153  016956  0012               	return	
 12154  016958                     __end_of_Byte_GetBit:
 12155                           	opt stack 0
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           postinc0	equ	0xFEE
 12164                           wreg	equ	0xFE8
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function _ADC_Voltage *****************
 12176 ;; Defined at:
 12177 ;;		line 259 in file "Library/ADC.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 12180 ;;		 -> ADC_AN0(5), 
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  output          4   53[BANK0 ] float 
 12183 ;;  ref             4   49[BANK0 ] const float 
 12184 ;;  max             4   45[BANK0 ] const float 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  4   39[BANK0 ] float 
 12187 ;; Registers used:
 12188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12194 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12198 ;;Total ram usage:       18 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    8
 12201 ;; This function calls:
 12202 ;;		___fldiv
 12203 ;;		___flmul
 12204 ;;		___xxtofl
 12205 ;; This function is called by:
 12206 ;;		_findClosestWall
 12207 ;;		_measureAndDisplayDistance
 12208 ;;		_mode1
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           	psect	text47
 12213  014266                     __ptext47:
 12214                           	opt stack 0
 12215  014266                     _ADC_Voltage:
 12216                           	opt stack 20
 12217                           
 12218                           ;ADC.c: 261: const float max = 1024;
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;incstack = 0
 12222  014266  0E00               	movlw	0
 12223  014268  0100               	movlb	0	; () banked
 12224  01426A  6FE5               	movwf	ADC_Voltage@max& (0+255),b
 12225  01426C  0E00               	movlw	0
 12226  01426E  6FE6               	movwf	(ADC_Voltage@max+1)& (0+255),b
 12227  014270  0E80               	movlw	128
 12228  014272  6FE7               	movwf	(ADC_Voltage@max+2)& (0+255),b
 12229  014274  0E44               	movlw	68
 12230  014276  6FE8               	movwf	(ADC_Voltage@max+3)& (0+255),b
 12231                           
 12232                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 12233  014278  0E33               	movlw	51
 12234  01427A  0100               	movlb	0	; () banked
 12235  01427C  6FE9               	movwf	ADC_Voltage@ref& (0+255),b
 12236  01427E  0E33               	movlw	51
 12237  014280  6FEA               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 12238  014282  0E53               	movlw	83
 12239  014284  6FEB               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 12240  014286  0E40               	movlw	64
 12241  014288  6FEC               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;ADC.c: 263: float output = pInput->mValue;
 12245  01428A  0100               	movlb	0	; () banked
 12246  01428C  EE20 F001          	lfsr	2,1
 12247  014290  51DF               	movf	ADC_Voltage@pInput& (0+255),w,b
 12248  014292  26D9               	addwf	fsr2l,f,c
 12249  014294  51E0               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 12250  014296  22DA               	addwfc	fsr2h,f,c
 12251  014298  CFDE F0E3          	movff	postinc2,??_ADC_Voltage
 12252  01429C  CFDD F0E4          	movff	postdec2,??_ADC_Voltage+1
 12253  0142A0  C0E3  F0B8         	movff	??_ADC_Voltage,___xxtofl@val
 12254  0142A4  C0E4  F0B9         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 12255  0142A8  0100               	movlb	0	; () banked
 12256  0142AA  6BBA               	clrf	(___xxtofl@val+2)& (0+255),b
 12257  0142AC  6BBB               	clrf	(___xxtofl@val+3)& (0+255),b
 12258  0142AE  0E00               	movlw	0
 12259  0142B0  ECED  F093         	call	___xxtofl
 12260  0142B4  C0B8  F0ED         	movff	?___xxtofl,ADC_Voltage@output
 12261  0142B8  C0B9  F0EE         	movff	?___xxtofl+1,ADC_Voltage@output+1
 12262  0142BC  C0BA  F0EF         	movff	?___xxtofl+2,ADC_Voltage@output+2
 12263  0142C0  C0BB  F0F0         	movff	?___xxtofl+3,ADC_Voltage@output+3
 12264                           
 12265                           ;ADC.c: 265: output /= max;
 12266  0142C4  C0ED  F0B8         	movff	ADC_Voltage@output,___fldiv@b
 12267  0142C8  C0EE  F0B9         	movff	ADC_Voltage@output+1,___fldiv@b+1
 12268  0142CC  C0EF  F0BA         	movff	ADC_Voltage@output+2,___fldiv@b+2
 12269  0142D0  C0F0  F0BB         	movff	ADC_Voltage@output+3,___fldiv@b+3
 12270  0142D4  C0E5  F0BC         	movff	ADC_Voltage@max,___fldiv@a
 12271  0142D8  C0E6  F0BD         	movff	ADC_Voltage@max+1,___fldiv@a+1
 12272  0142DC  C0E7  F0BE         	movff	ADC_Voltage@max+2,___fldiv@a+2
 12273  0142E0  C0E8  F0BF         	movff	ADC_Voltage@max+3,___fldiv@a+3
 12274  0142E4  ECA9  F08A         	call	___fldiv	;wreg free
 12275  0142E8  C0B8  F0ED         	movff	?___fldiv,ADC_Voltage@output
 12276  0142EC  C0B9  F0EE         	movff	?___fldiv+1,ADC_Voltage@output+1
 12277  0142F0  C0BA  F0EF         	movff	?___fldiv+2,ADC_Voltage@output+2
 12278  0142F4  C0BB  F0F0         	movff	?___fldiv+3,ADC_Voltage@output+3
 12279                           
 12280                           ;ADC.c: 266: output *= ref;
 12281  0142F8  C0ED  F0C6         	movff	ADC_Voltage@output,___flmul@b
 12282  0142FC  C0EE  F0C7         	movff	ADC_Voltage@output+1,___flmul@b+1
 12283  014300  C0EF  F0C8         	movff	ADC_Voltage@output+2,___flmul@b+2
 12284  014304  C0F0  F0C9         	movff	ADC_Voltage@output+3,___flmul@b+3
 12285  014308  C0E9  F0CA         	movff	ADC_Voltage@ref,___flmul@a
 12286  01430C  C0EA  F0CB         	movff	ADC_Voltage@ref+1,___flmul@a+1
 12287  014310  C0EB  F0CC         	movff	ADC_Voltage@ref+2,___flmul@a+2
 12288  014314  C0EC  F0CD         	movff	ADC_Voltage@ref+3,___flmul@a+3
 12289  014318  EC5A  F084         	call	___flmul	;wreg free
 12290  01431C  C0C6  F0ED         	movff	?___flmul,ADC_Voltage@output
 12291  014320  C0C7  F0EE         	movff	?___flmul+1,ADC_Voltage@output+1
 12292  014324  C0C8  F0EF         	movff	?___flmul+2,ADC_Voltage@output+2
 12293  014328  C0C9  F0F0         	movff	?___flmul+3,ADC_Voltage@output+3
 12294                           
 12295                           ;ADC.c: 268: return output + (float)0.000;
 12296  01432C  C0ED  F0DF         	movff	ADC_Voltage@output,?_ADC_Voltage
 12297  014330  C0EE  F0E0         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12298  014334  C0EF  F0E1         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12299  014338  C0F0  F0E2         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12300  01433C  0012               	return	
 12301  01433E                     __end_of_ADC_Voltage:
 12302                           	opt stack 0
 12303                           tblptru	equ	0xFF8
 12304                           tblptrh	equ	0xFF7
 12305                           tblptrl	equ	0xFF6
 12306                           tablat	equ	0xFF5
 12307                           prodh	equ	0xFF4
 12308                           prodl	equ	0xFF3
 12309                           intcon	equ	0xFF2
 12310                           postinc0	equ	0xFEE
 12311                           wreg	equ	0xFE8
 12312                           postdec1	equ	0xFE5
 12313                           fsr1h	equ	0xFE2
 12314                           fsr1l	equ	0xFE1
 12315                           indf2	equ	0xFDF
 12316                           postinc2	equ	0xFDE
 12317                           postdec2	equ	0xFDD
 12318                           fsr2h	equ	0xFDA
 12319                           fsr2l	equ	0xFD9
 12320                           status	equ	0xFD8
 12321                           
 12322 ;; *************** function ___xxtofl *****************
 12323 ;; Defined at:
 12324 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12325 ;; Parameters:    Size  Location     Type
 12326 ;;  sign            1    wreg     unsigned char 
 12327 ;;  val             4    0[BANK0 ] long 
 12328 ;; Auto vars:     Size  Location     Type
 12329 ;;  sign            1    8[BANK0 ] unsigned char 
 12330 ;;  arg             4   10[BANK0 ] unsigned long 
 12331 ;;  exp             1    9[BANK0 ] unsigned char 
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  4    0[BANK0 ] unsigned char 
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12341 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12342 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;Total ram usage:       14 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    7
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_ADC_Voltage
 12352 ;;		_findClosestWall
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text48
 12357  0127DA                     __ptext48:
 12358                           	opt stack 0
 12359  0127DA                     ___xxtofl:
 12360                           	opt stack 20
 12361                           
 12362                           ;incstack = 0
 12363                           ;___xxtofl@sign stored from wreg
 12364  0127DA  0100               	movlb	0	; () banked
 12365  0127DC  6FC0               	movwf	___xxtofl@sign& (0+255),b
 12366  0127DE  0100               	movlb	0	; () banked
 12367  0127E0  51C0               	movf	___xxtofl@sign& (0+255),w,b
 12368  0127E2  0100               	movlb	0	; () banked
 12369  0127E4  B4D8               	btfsc	status,2,c
 12370  0127E6  D01E               	goto	l3060
 12371                           
 12372                           ; BSR set to: 0
 12373  0127E8  0100               	movlb	0	; () banked
 12374  0127EA  AFBB               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12375  0127EC  D01B               	goto	l3060
 12376                           
 12377                           ; BSR set to: 0
 12378  0127EE  C0B8  F0BC         	movff	___xxtofl@val,??___xxtofl
 12379  0127F2  C0B9  F0BD         	movff	___xxtofl@val+1,??___xxtofl+1
 12380  0127F6  C0BA  F0BE         	movff	___xxtofl@val+2,??___xxtofl+2
 12381  0127FA  C0BB  F0BF         	movff	___xxtofl@val+3,??___xxtofl+3
 12382  0127FE  0100               	movlb	0	; () banked
 12383  012800  1FBC               	comf	??___xxtofl& (0+255),f,b
 12384  012802  1FBD               	comf	(??___xxtofl+1)& (0+255),f,b
 12385  012804  1FBE               	comf	(??___xxtofl+2)& (0+255),f,b
 12386  012806  1FBF               	comf	(??___xxtofl+3)& (0+255),f,b
 12387  012808  2BBC               	incf	??___xxtofl& (0+255),f,b
 12388  01280A  0E00               	movlw	0
 12389  01280C  23BD               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12390  01280E  23BE               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12391  012810  23BF               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12392  012812  C0BC  F0C2         	movff	??___xxtofl,___xxtofl@arg
 12393  012816  C0BD  F0C3         	movff	??___xxtofl+1,___xxtofl@arg+1
 12394  01281A  C0BE  F0C4         	movff	??___xxtofl+2,___xxtofl@arg+2
 12395  01281E  C0BF  F0C5         	movff	??___xxtofl+3,___xxtofl@arg+3
 12396  012822  D008               	goto	l3061
 12397  012824                     l3060:
 12398                           
 12399                           ; BSR set to: 0
 12400  012824  C0B8  F0C2         	movff	___xxtofl@val,___xxtofl@arg
 12401  012828  C0B9  F0C3         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12402  01282C  C0BA  F0C4         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12403  012830  C0BB  F0C5         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12404  012834                     l3061:
 12405                           
 12406                           ; BSR set to: 0
 12407                           
 12408                           ; BSR set to: 0
 12409  012834  0100               	movlb	0	; () banked
 12410  012836  51B8               	movf	___xxtofl@val& (0+255),w,b
 12411  012838  0100               	movlb	0	; () banked
 12412  01283A  11B9               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12413  01283C  0100               	movlb	0	; () banked
 12414  01283E  11BA               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12415  012840  0100               	movlb	0	; () banked
 12416  012842  11BB               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12417  012844  A4D8               	btfss	status,2,c
 12418  012846  D00A               	goto	l3062
 12419                           
 12420                           ; BSR set to: 0
 12421  012848  0E00               	movlw	0
 12422  01284A  0100               	movlb	0	; () banked
 12423  01284C  6FB8               	movwf	?___xxtofl& (0+255),b
 12424  01284E  0E00               	movlw	0
 12425  012850  6FB9               	movwf	(?___xxtofl+1)& (0+255),b
 12426  012852  0E00               	movlw	0
 12427  012854  6FBA               	movwf	(?___xxtofl+2)& (0+255),b
 12428  012856  0E00               	movlw	0
 12429  012858  6FBB               	movwf	(?___xxtofl+3)& (0+255),b
 12430                           
 12431                           ; BSR set to: 0
 12432  01285A  0012               	return	
 12433  01285C                     l3062:
 12434                           
 12435                           ; BSR set to: 0
 12436                           
 12437                           ; BSR set to: 0
 12438  01285C  0E96               	movlw	150
 12439  01285E  0100               	movlb	0	; () banked
 12440  012860  6FC1               	movwf	___xxtofl@exp& (0+255),b
 12441  012862  D008               	goto	l3064
 12442  012864                     
 12443                           ; BSR set to: 0
 12444                           
 12445                           ; BSR set to: 0
 12446  012864  0100               	movlb	0	; () banked
 12447  012866  2BC1               	incf	___xxtofl@exp& (0+255),f,b
 12448  012868  0100               	movlb	0	; () banked
 12449  01286A  90D8               	bcf	status,0,c
 12450  01286C  33C5               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12451  01286E  33C4               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12452  012870  33C3               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12453  012872  33C2               	rrcf	___xxtofl@arg& (0+255),f,b
 12454  012874                     l3064:
 12455                           
 12456                           ; BSR set to: 0
 12457                           
 12458                           ; BSR set to: 0
 12459  012874  0E00               	movlw	0
 12460  012876  0100               	movlb	0	; () banked
 12461  012878  15C2               	andwf	___xxtofl@arg& (0+255),w,b
 12462  01287A  0100               	movlb	0	; () banked
 12463  01287C  6FBC               	movwf	??___xxtofl& (0+255),b
 12464  01287E  0E00               	movlw	0
 12465  012880  0100               	movlb	0	; () banked
 12466  012882  15C3               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12467  012884  0100               	movlb	0	; () banked
 12468  012886  6FBD               	movwf	(??___xxtofl+1)& (0+255),b
 12469  012888  0E00               	movlw	0
 12470  01288A  0100               	movlb	0	; () banked
 12471  01288C  15C4               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12472  01288E  0100               	movlb	0	; () banked
 12473  012890  6FBE               	movwf	(??___xxtofl+2)& (0+255),b
 12474  012892  0EFE               	movlw	254
 12475  012894  0100               	movlb	0	; () banked
 12476  012896  15C5               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12477  012898  0100               	movlb	0	; () banked
 12478  01289A  6FBF               	movwf	(??___xxtofl+3)& (0+255),b
 12479  01289C  0100               	movlb	0	; () banked
 12480  01289E  51BC               	movf	??___xxtofl& (0+255),w,b
 12481  0128A0  0100               	movlb	0	; () banked
 12482  0128A2  11BD               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12483  0128A4  0100               	movlb	0	; () banked
 12484  0128A6  11BE               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12485  0128A8  0100               	movlb	0	; () banked
 12486  0128AA  11BF               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12487  0128AC  B4D8               	btfsc	status,2,c
 12488  0128AE  D010               	goto	l3067
 12489  0128B0  D7D9               	goto	l3065
 12490  0128B2                     
 12491                           ; BSR set to: 0
 12492                           
 12493                           ; BSR set to: 0
 12494  0128B2  0100               	movlb	0	; () banked
 12495  0128B4  2BC1               	incf	___xxtofl@exp& (0+255),f,b
 12496                           
 12497                           ; BSR set to: 0
 12498  0128B6  0E01               	movlw	1
 12499  0128B8  0100               	movlb	0	; () banked
 12500  0128BA  27C2               	addwf	___xxtofl@arg& (0+255),f,b
 12501  0128BC  0E00               	movlw	0
 12502  0128BE  23C3               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 12503  0128C0  23C4               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 12504  0128C2  23C5               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 12505                           
 12506                           ; BSR set to: 0
 12507  0128C4  0100               	movlb	0	; () banked
 12508  0128C6  90D8               	bcf	status,0,c
 12509  0128C8  33C5               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12510  0128CA  33C4               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12511  0128CC  33C3               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12512  0128CE  33C2               	rrcf	___xxtofl@arg& (0+255),f,b
 12513  0128D0                     l3067:
 12514                           
 12515                           ; BSR set to: 0
 12516  0128D0  0E00               	movlw	0
 12517  0128D2  0100               	movlb	0	; () banked
 12518  0128D4  15C2               	andwf	___xxtofl@arg& (0+255),w,b
 12519  0128D6  0100               	movlb	0	; () banked
 12520  0128D8  6FBC               	movwf	??___xxtofl& (0+255),b
 12521  0128DA  0E00               	movlw	0
 12522  0128DC  0100               	movlb	0	; () banked
 12523  0128DE  15C3               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12524  0128E0  0100               	movlb	0	; () banked
 12525  0128E2  6FBD               	movwf	(??___xxtofl+1)& (0+255),b
 12526  0128E4  0E00               	movlw	0
 12527  0128E6  0100               	movlb	0	; () banked
 12528  0128E8  15C4               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12529  0128EA  0100               	movlb	0	; () banked
 12530  0128EC  6FBE               	movwf	(??___xxtofl+2)& (0+255),b
 12531  0128EE  0EFF               	movlw	255
 12532  0128F0  0100               	movlb	0	; () banked
 12533  0128F2  15C5               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12534  0128F4  0100               	movlb	0	; () banked
 12535  0128F6  6FBF               	movwf	(??___xxtofl+3)& (0+255),b
 12536  0128F8  0100               	movlb	0	; () banked
 12537  0128FA  51BC               	movf	??___xxtofl& (0+255),w,b
 12538  0128FC  0100               	movlb	0	; () banked
 12539  0128FE  11BD               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12540  012900  0100               	movlb	0	; () banked
 12541  012902  11BE               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12542  012904  0100               	movlb	0	; () banked
 12543  012906  11BF               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12544  012908  B4D8               	btfsc	status,2,c
 12545  01290A  D009               	goto	l3070
 12546  01290C  D7D2               	goto	l3068
 12547  01290E                     
 12548                           ; BSR set to: 0
 12549                           
 12550                           ; BSR set to: 0
 12551  01290E  0100               	movlb	0	; () banked
 12552  012910  07C1               	decf	___xxtofl@exp& (0+255),f,b
 12553  012912  0100               	movlb	0	; () banked
 12554  012914  90D8               	bcf	status,0,c
 12555  012916  37C2               	rlcf	___xxtofl@arg& (0+255),f,b
 12556  012918  37C3               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 12557  01291A  37C4               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 12558  01291C  37C5               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 12559  01291E                     l3070:
 12560                           
 12561                           ; BSR set to: 0
 12562                           
 12563                           ; BSR set to: 0
 12564  01291E  0100               	movlb	0	; () banked
 12565  012920  BFC4               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 12566  012922  D004               	goto	u10760
 12567                           
 12568                           ; BSR set to: 0
 12569  012924  0E02               	movlw	2
 12570  012926  0100               	movlb	0	; () banked
 12571  012928  61C1               	cpfslt	___xxtofl@exp& (0+255),b
 12572  01292A  D7F1               	goto	l3071
 12573  01292C                     u10760:
 12574                           
 12575                           ; BSR set to: 0
 12576                           
 12577                           ; BSR set to: 0
 12578  01292C  0100               	movlb	0	; () banked
 12579  01292E  B1C1               	btfsc	___xxtofl@exp& (0+255),0,b
 12580  012930  D009               	goto	l3075
 12581                           
 12582                           ; BSR set to: 0
 12583  012932  0EFF               	movlw	255
 12584  012934  0100               	movlb	0	; () banked
 12585  012936  17C2               	andwf	___xxtofl@arg& (0+255),f,b
 12586  012938  0EFF               	movlw	255
 12587  01293A  17C3               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 12588  01293C  0E7F               	movlw	127
 12589  01293E  17C4               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 12590  012940  0EFF               	movlw	255
 12591  012942  17C5               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 12592  012944                     l3075:
 12593                           
 12594                           ; BSR set to: 0
 12595  012944  0100               	movlb	0	; () banked
 12596  012946  90D8               	bcf	status,0,c
 12597  012948  33C1               	rrcf	___xxtofl@exp& (0+255),f,b
 12598  01294A  C0C1  F0BC         	movff	___xxtofl@exp,??___xxtofl
 12599  01294E  0100               	movlb	0	; () banked
 12600  012950  6BBD               	clrf	(??___xxtofl+1)& (0+255),b
 12601  012952  6BBE               	clrf	(??___xxtofl+2)& (0+255),b
 12602  012954  6BBF               	clrf	(??___xxtofl+3)& (0+255),b
 12603  012956  C0BC  F0BF         	movff	??___xxtofl,??___xxtofl+3
 12604  01295A  0100               	movlb	0	; () banked
 12605  01295C  6BBE               	clrf	(??___xxtofl+2)& (0+255),b
 12606  01295E  6BBD               	clrf	(??___xxtofl+1)& (0+255),b
 12607  012960  6BBC               	clrf	??___xxtofl& (0+255),b
 12608  012962  0100               	movlb	0	; () banked
 12609  012964  51BC               	movf	??___xxtofl& (0+255),w,b
 12610  012966  0100               	movlb	0	; () banked
 12611  012968  13C2               	iorwf	___xxtofl@arg& (0+255),f,b
 12612  01296A  0100               	movlb	0	; () banked
 12613  01296C  51BD               	movf	(??___xxtofl+1)& (0+255),w,b
 12614  01296E  0100               	movlb	0	; () banked
 12615  012970  13C3               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 12616  012972  0100               	movlb	0	; () banked
 12617  012974  51BE               	movf	(??___xxtofl+2)& (0+255),w,b
 12618  012976  0100               	movlb	0	; () banked
 12619  012978  13C4               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 12620  01297A  0100               	movlb	0	; () banked
 12621  01297C  51BF               	movf	(??___xxtofl+3)& (0+255),w,b
 12622  01297E  0100               	movlb	0	; () banked
 12623  012980  13C5               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 12624                           
 12625                           ; BSR set to: 0
 12626  012982  0100               	movlb	0	; () banked
 12627  012984  51C0               	movf	___xxtofl@sign& (0+255),w,b
 12628  012986  0100               	movlb	0	; () banked
 12629  012988  B4D8               	btfsc	status,2,c
 12630  01298A  D005               	goto	l3076
 12631                           
 12632                           ; BSR set to: 0
 12633  01298C  0100               	movlb	0	; () banked
 12634  01298E  AFBB               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12635  012990  D002               	goto	l3076
 12636                           
 12637                           ; BSR set to: 0
 12638  012992  0100               	movlb	0	; () banked
 12639  012994  8FC5               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 12640  012996                     l3076:
 12641                           
 12642                           ; BSR set to: 0
 12643                           
 12644                           ; BSR set to: 0
 12645  012996  C0C2  F0B8         	movff	___xxtofl@arg,?___xxtofl
 12646  01299A  C0C3  F0B9         	movff	___xxtofl@arg+1,?___xxtofl+1
 12647  01299E  C0C4  F0BA         	movff	___xxtofl@arg+2,?___xxtofl+2
 12648  0129A2  C0C5  F0BB         	movff	___xxtofl@arg+3,?___xxtofl+3
 12649  0129A6  0012               	return	
 12650  0129A8                     __end_of___xxtofl:
 12651                           	opt stack 0
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           postinc0	equ	0xFEE
 12660                           wreg	equ	0xFE8
 12661                           postdec1	equ	0xFE5
 12662                           fsr1h	equ	0xFE2
 12663                           fsr1l	equ	0xFE1
 12664                           indf2	equ	0xFDF
 12665                           postinc2	equ	0xFDE
 12666                           postdec2	equ	0xFDD
 12667                           fsr2h	equ	0xFDA
 12668                           fsr2l	equ	0xFD9
 12669                           status	equ	0xFD8
 12670                           
 12671 ;; *************** function ___flmul *****************
 12672 ;; Defined at:
 12673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 12674 ;; Parameters:    Size  Location     Type
 12675 ;;  b               4   14[BANK0 ] unsigned char 
 12676 ;;  a               4   18[BANK0 ] unsigned char 
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;  prod            4   33[BANK0 ] struct .
 12679 ;;  grs             4   28[BANK0 ] unsigned long 
 12680 ;;  temp            2   37[BANK0 ] struct .
 12681 ;;  bexp            1   32[BANK0 ] unsigned char 
 12682 ;;  aexp            1   27[BANK0 ] unsigned char 
 12683 ;;  sign            1   26[BANK0 ] unsigned char 
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  4   14[BANK0 ] unsigned char 
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, status,0, prodl, prodh
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12693 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;Total ram usage:       25 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    7
 12700 ;; This function calls:
 12701 ;;		Nothing
 12702 ;; This function is called by:
 12703 ;;		_ADC_Voltage
 12704 ;;		_findClosestWall
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text49
 12709  0108B4                     __ptext49:
 12710                           	opt stack 0
 12711  0108B4                     ___flmul:
 12712                           	opt stack 20
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;incstack = 0
 12716  0108B4  0100               	movlb	0	; () banked
 12717  0108B6  51C9               	movf	(___flmul@b+3)& (0+255),w,b
 12718  0108B8  0B80               	andlw	128
 12719  0108BA  0100               	movlb	0	; () banked
 12720  0108BC  6FD2               	movwf	___flmul@sign& (0+255),b
 12721  0108BE  0100               	movlb	0	; () banked
 12722  0108C0  51C9               	movf	(___flmul@b+3)& (0+255),w,b
 12723  0108C2  25C9               	addwf	(___flmul@b+3)& (0+255),w,b
 12724  0108C4  0100               	movlb	0	; () banked
 12725  0108C6  6FD8               	movwf	___flmul@bexp& (0+255),b
 12726                           
 12727                           ; BSR set to: 0
 12728  0108C8  0100               	movlb	0	; () banked
 12729  0108CA  AFC8               	btfss	(___flmul@b+2)& (0+255),7,b
 12730  0108CC  D002               	goto	l3031
 12731                           
 12732                           ; BSR set to: 0
 12733  0108CE  0100               	movlb	0	; () banked
 12734  0108D0  81D8               	bsf	___flmul@bexp& (0+255),0,b
 12735  0108D2                     l3031:
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ; BSR set to: 0
 12740  0108D2  0100               	movlb	0	; () banked
 12741  0108D4  51D8               	movf	___flmul@bexp& (0+255),w,b
 12742  0108D6  0100               	movlb	0	; () banked
 12743  0108D8  B4D8               	btfsc	status,2,c
 12744  0108DA  D010               	goto	l3032
 12745                           
 12746                           ; BSR set to: 0
 12747  0108DC  0100               	movlb	0	; () banked
 12748  0108DE  29D8               	incf	___flmul@bexp& (0+255),w,b
 12749  0108E0  A4D8               	btfss	status,2,c
 12750  0108E2  D009               	goto	l3033
 12751                           
 12752                           ; BSR set to: 0
 12753  0108E4  0E00               	movlw	0
 12754  0108E6  0100               	movlb	0	; () banked
 12755  0108E8  6FC6               	movwf	___flmul@b& (0+255),b
 12756  0108EA  0E00               	movlw	0
 12757  0108EC  6FC7               	movwf	(___flmul@b+1)& (0+255),b
 12758  0108EE  0E00               	movlw	0
 12759  0108F0  6FC8               	movwf	(___flmul@b+2)& (0+255),b
 12760  0108F2  0E00               	movlw	0
 12761  0108F4  6FC9               	movwf	(___flmul@b+3)& (0+255),b
 12762  0108F6                     l3033:
 12763                           
 12764                           ; BSR set to: 0
 12765                           
 12766                           ; BSR set to: 0
 12767  0108F6  0100               	movlb	0	; () banked
 12768  0108F8  8FC8               	bsf	(___flmul@b+2)& (0+255),7,b
 12769  0108FA  D009               	goto	l3034
 12770  0108FC                     l3032:
 12771                           
 12772                           ; BSR set to: 0
 12773                           
 12774                           ; BSR set to: 0
 12775  0108FC  0E00               	movlw	0
 12776  0108FE  0100               	movlb	0	; () banked
 12777  010900  6FC6               	movwf	___flmul@b& (0+255),b
 12778  010902  0E00               	movlw	0
 12779  010904  6FC7               	movwf	(___flmul@b+1)& (0+255),b
 12780  010906  0E00               	movlw	0
 12781  010908  6FC8               	movwf	(___flmul@b+2)& (0+255),b
 12782  01090A  0E00               	movlw	0
 12783  01090C  6FC9               	movwf	(___flmul@b+3)& (0+255),b
 12784  01090E                     l3034:
 12785                           
 12786                           ; BSR set to: 0
 12787                           
 12788                           ; BSR set to: 0
 12789  01090E  0100               	movlb	0	; () banked
 12790  010910  51CD               	movf	(___flmul@a+3)& (0+255),w,b
 12791  010912  0B80               	andlw	128
 12792  010914  0100               	movlb	0	; () banked
 12793  010916  1BD2               	xorwf	___flmul@sign& (0+255),f,b
 12794                           
 12795                           ; BSR set to: 0
 12796  010918  0100               	movlb	0	; () banked
 12797  01091A  51CD               	movf	(___flmul@a+3)& (0+255),w,b
 12798  01091C  25CD               	addwf	(___flmul@a+3)& (0+255),w,b
 12799  01091E  0100               	movlb	0	; () banked
 12800  010920  6FD3               	movwf	___flmul@aexp& (0+255),b
 12801                           
 12802                           ; BSR set to: 0
 12803  010922  0100               	movlb	0	; () banked
 12804  010924  AFCC               	btfss	(___flmul@a+2)& (0+255),7,b
 12805  010926  D002               	goto	l3035
 12806                           
 12807                           ; BSR set to: 0
 12808  010928  0100               	movlb	0	; () banked
 12809  01092A  81D3               	bsf	___flmul@aexp& (0+255),0,b
 12810  01092C                     l3035:
 12811                           
 12812                           ; BSR set to: 0
 12813                           
 12814                           ; BSR set to: 0
 12815  01092C  0100               	movlb	0	; () banked
 12816  01092E  51D3               	movf	___flmul@aexp& (0+255),w,b
 12817  010930  0100               	movlb	0	; () banked
 12818  010932  B4D8               	btfsc	status,2,c
 12819  010934  D010               	goto	l3036
 12820                           
 12821                           ; BSR set to: 0
 12822  010936  0100               	movlb	0	; () banked
 12823  010938  29D3               	incf	___flmul@aexp& (0+255),w,b
 12824  01093A  A4D8               	btfss	status,2,c
 12825  01093C  D009               	goto	l3037
 12826                           
 12827                           ; BSR set to: 0
 12828  01093E  0E00               	movlw	0
 12829  010940  0100               	movlb	0	; () banked
 12830  010942  6FCA               	movwf	___flmul@a& (0+255),b
 12831  010944  0E00               	movlw	0
 12832  010946  6FCB               	movwf	(___flmul@a+1)& (0+255),b
 12833  010948  0E00               	movlw	0
 12834  01094A  6FCC               	movwf	(___flmul@a+2)& (0+255),b
 12835  01094C  0E00               	movlw	0
 12836  01094E  6FCD               	movwf	(___flmul@a+3)& (0+255),b
 12837  010950                     l3037:
 12838                           
 12839                           ; BSR set to: 0
 12840                           
 12841                           ; BSR set to: 0
 12842  010950  0100               	movlb	0	; () banked
 12843  010952  8FCC               	bsf	(___flmul@a+2)& (0+255),7,b
 12844  010954  D009               	goto	l3038
 12845  010956                     l3036:
 12846                           
 12847                           ; BSR set to: 0
 12848                           
 12849                           ; BSR set to: 0
 12850  010956  0E00               	movlw	0
 12851  010958  0100               	movlb	0	; () banked
 12852  01095A  6FCA               	movwf	___flmul@a& (0+255),b
 12853  01095C  0E00               	movlw	0
 12854  01095E  6FCB               	movwf	(___flmul@a+1)& (0+255),b
 12855  010960  0E00               	movlw	0
 12856  010962  6FCC               	movwf	(___flmul@a+2)& (0+255),b
 12857  010964  0E00               	movlw	0
 12858  010966  6FCD               	movwf	(___flmul@a+3)& (0+255),b
 12859  010968                     l3038:
 12860                           
 12861                           ; BSR set to: 0
 12862  010968  0100               	movlb	0	; () banked
 12863  01096A  51D3               	movf	___flmul@aexp& (0+255),w,b
 12864  01096C  0100               	movlb	0	; () banked
 12865  01096E  B4D8               	btfsc	status,2,c
 12866  010970  D005               	goto	u10580
 12867                           
 12868                           ; BSR set to: 0
 12869  010972  0100               	movlb	0	; () banked
 12870  010974  51D8               	movf	___flmul@bexp& (0+255),w,b
 12871  010976  0100               	movlb	0	; () banked
 12872  010978  A4D8               	btfss	status,2,c
 12873  01097A  D00A               	goto	l3039
 12874  01097C                     u10580:
 12875                           
 12876                           ; BSR set to: 0
 12877                           
 12878                           ; BSR set to: 0
 12879  01097C  0E00               	movlw	0
 12880  01097E  0100               	movlb	0	; () banked
 12881  010980  6FC6               	movwf	?___flmul& (0+255),b
 12882  010982  0E00               	movlw	0
 12883  010984  6FC7               	movwf	(?___flmul+1)& (0+255),b
 12884  010986  0E00               	movlw	0
 12885  010988  6FC8               	movwf	(?___flmul+2)& (0+255),b
 12886  01098A  0E00               	movlw	0
 12887  01098C  6FC9               	movwf	(?___flmul+3)& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890  01098E  0012               	return	
 12891  010990                     l3039:
 12892                           
 12893                           ; BSR set to: 0
 12894                           
 12895                           ; BSR set to: 0
 12896  010990  0100               	movlb	0	; () banked
 12897  010992  51CC               	movf	(___flmul@a+2)& (0+255),w,b
 12898  010994  0100               	movlb	0	; () banked
 12899  010996  03C6               	mulwf	___flmul@b& (0+255),b
 12900  010998  CFF3 F0DD          	movff	prodl,___flmul@temp
 12901  01099C  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 12902                           
 12903                           ; BSR set to: 0
 12904  0109A0  0100               	movlb	0	; () banked
 12905  0109A2  51DD               	movf	___flmul@temp& (0+255),w,b
 12906  0109A4  0100               	movlb	0	; () banked
 12907  0109A6  6FD4               	movwf	___flmul@grs& (0+255),b
 12908  0109A8  6BD5               	clrf	(___flmul@grs+1)& (0+255),b
 12909  0109AA  6BD6               	clrf	(___flmul@grs+2)& (0+255),b
 12910  0109AC  6BD7               	clrf	(___flmul@grs+3)& (0+255),b
 12911                           
 12912                           ; BSR set to: 0
 12913  0109AE  0100               	movlb	0	; () banked
 12914  0109B0  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 12915  0109B2  0100               	movlb	0	; () banked
 12916  0109B4  6FD9               	movwf	___flmul@prod& (0+255),b
 12917  0109B6  6BDA               	clrf	(___flmul@prod+1)& (0+255),b
 12918  0109B8  6BDB               	clrf	(___flmul@prod+2)& (0+255),b
 12919  0109BA  6BDC               	clrf	(___flmul@prod+3)& (0+255),b
 12920  0109BC  0100               	movlb	0	; () banked
 12921  0109BE  51CB               	movf	(___flmul@a+1)& (0+255),w,b
 12922  0109C0  0100               	movlb	0	; () banked
 12923  0109C2  03C7               	mulwf	(___flmul@b+1)& (0+255),b
 12924  0109C4  CFF3 F0DD          	movff	prodl,___flmul@temp
 12925  0109C8  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 12926                           
 12927                           ; BSR set to: 0
 12928  0109CC  0100               	movlb	0	; () banked
 12929  0109CE  51DD               	movf	___flmul@temp& (0+255),w,b
 12930  0109D0  0100               	movlb	0	; () banked
 12931  0109D2  27D4               	addwf	___flmul@grs& (0+255),f,b
 12932  0109D4  0E00               	movlw	0
 12933  0109D6  23D5               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12934  0109D8  23D6               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12935  0109DA  23D7               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12936                           
 12937                           ; BSR set to: 0
 12938  0109DC  0100               	movlb	0	; () banked
 12939  0109DE  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 12940  0109E0  0100               	movlb	0	; () banked
 12941  0109E2  27D9               	addwf	___flmul@prod& (0+255),f,b
 12942  0109E4  0E00               	movlw	0
 12943  0109E6  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12944  0109E8  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12945  0109EA  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12946  0109EC  0100               	movlb	0	; () banked
 12947  0109EE  51CA               	movf	___flmul@a& (0+255),w,b
 12948  0109F0  0100               	movlb	0	; () banked
 12949  0109F2  03C8               	mulwf	(___flmul@b+2)& (0+255),b
 12950  0109F4  CFF3 F0DD          	movff	prodl,___flmul@temp
 12951  0109F8  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 12952                           
 12953                           ; BSR set to: 0
 12954  0109FC  0100               	movlb	0	; () banked
 12955  0109FE  51DD               	movf	___flmul@temp& (0+255),w,b
 12956  010A00  0100               	movlb	0	; () banked
 12957  010A02  27D4               	addwf	___flmul@grs& (0+255),f,b
 12958  010A04  0E00               	movlw	0
 12959  010A06  23D5               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12960  010A08  23D6               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12961  010A0A  23D7               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12962                           
 12963                           ; BSR set to: 0
 12964  010A0C  0100               	movlb	0	; () banked
 12965  010A0E  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 12966  010A10  0100               	movlb	0	; () banked
 12967  010A12  27D9               	addwf	___flmul@prod& (0+255),f,b
 12968  010A14  0E00               	movlw	0
 12969  010A16  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12970  010A18  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12971  010A1A  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12972                           
 12973                           ; BSR set to: 0
 12974  010A1C  C0D6  F0D7         	movff	___flmul@grs+2,___flmul@grs+3
 12975  010A20  C0D5  F0D6         	movff	___flmul@grs+1,___flmul@grs+2
 12976  010A24  C0D4  F0D5         	movff	___flmul@grs,___flmul@grs+1
 12977  010A28  0100               	movlb	0	; () banked
 12978  010A2A  6BD4               	clrf	___flmul@grs& (0+255),b
 12979                           
 12980                           ; BSR set to: 0
 12981  010A2C  0100               	movlb	0	; () banked
 12982  010A2E  51CA               	movf	___flmul@a& (0+255),w,b
 12983  010A30  0100               	movlb	0	; () banked
 12984  010A32  03C7               	mulwf	(___flmul@b+1)& (0+255),b
 12985  010A34  CFF3 F0DD          	movff	prodl,___flmul@temp
 12986  010A38  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 12987                           
 12988                           ; BSR set to: 0
 12989  010A3C  0100               	movlb	0	; () banked
 12990  010A3E  51DD               	movf	___flmul@temp& (0+255),w,b
 12991  010A40  0100               	movlb	0	; () banked
 12992  010A42  27D4               	addwf	___flmul@grs& (0+255),f,b
 12993  010A44  0100               	movlb	0	; () banked
 12994  010A46  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 12995  010A48  0100               	movlb	0	; () banked
 12996  010A4A  23D5               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12997  010A4C  0E00               	movlw	0
 12998  010A4E  0100               	movlb	0	; () banked
 12999  010A50  23D6               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13000  010A52  0E00               	movlw	0
 13001  010A54  0100               	movlb	0	; () banked
 13002  010A56  23D7               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13003                           
 13004                           ; BSR set to: 0
 13005  010A58  0100               	movlb	0	; () banked
 13006  010A5A  51CB               	movf	(___flmul@a+1)& (0+255),w,b
 13007  010A5C  0100               	movlb	0	; () banked
 13008  010A5E  03C6               	mulwf	___flmul@b& (0+255),b
 13009  010A60  CFF3 F0DD          	movff	prodl,___flmul@temp
 13010  010A64  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 13011                           
 13012                           ; BSR set to: 0
 13013  010A68  0100               	movlb	0	; () banked
 13014  010A6A  51DD               	movf	___flmul@temp& (0+255),w,b
 13015  010A6C  0100               	movlb	0	; () banked
 13016  010A6E  27D4               	addwf	___flmul@grs& (0+255),f,b
 13017  010A70  0100               	movlb	0	; () banked
 13018  010A72  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13019  010A74  0100               	movlb	0	; () banked
 13020  010A76  23D5               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13021  010A78  0E00               	movlw	0
 13022  010A7A  0100               	movlb	0	; () banked
 13023  010A7C  23D6               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13024  010A7E  0E00               	movlw	0
 13025  010A80  0100               	movlb	0	; () banked
 13026  010A82  23D7               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13027                           
 13028                           ; BSR set to: 0
 13029  010A84  C0D6  F0D7         	movff	___flmul@grs+2,___flmul@grs+3
 13030  010A88  C0D5  F0D6         	movff	___flmul@grs+1,___flmul@grs+2
 13031  010A8C  C0D4  F0D5         	movff	___flmul@grs,___flmul@grs+1
 13032  010A90  0100               	movlb	0	; () banked
 13033  010A92  6BD4               	clrf	___flmul@grs& (0+255),b
 13034  010A94  0100               	movlb	0	; () banked
 13035  010A96  51CA               	movf	___flmul@a& (0+255),w,b
 13036  010A98  0100               	movlb	0	; () banked
 13037  010A9A  03C6               	mulwf	___flmul@b& (0+255),b
 13038  010A9C  CFF3 F0DD          	movff	prodl,___flmul@temp
 13039  010AA0  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 13040                           
 13041                           ; BSR set to: 0
 13042  010AA4  0100               	movlb	0	; () banked
 13043  010AA6  51DD               	movf	___flmul@temp& (0+255),w,b
 13044  010AA8  0100               	movlb	0	; () banked
 13045  010AAA  27D4               	addwf	___flmul@grs& (0+255),f,b
 13046  010AAC  0100               	movlb	0	; () banked
 13047  010AAE  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13048  010AB0  0100               	movlb	0	; () banked
 13049  010AB2  23D5               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13050  010AB4  0E00               	movlw	0
 13051  010AB6  0100               	movlb	0	; () banked
 13052  010AB8  23D6               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13053  010ABA  0E00               	movlw	0
 13054  010ABC  0100               	movlb	0	; () banked
 13055  010ABE  23D7               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13056                           
 13057                           ; BSR set to: 0
 13058  010AC0  0100               	movlb	0	; () banked
 13059  010AC2  51CC               	movf	(___flmul@a+2)& (0+255),w,b
 13060  010AC4  0100               	movlb	0	; () banked
 13061  010AC6  03C7               	mulwf	(___flmul@b+1)& (0+255),b
 13062  010AC8  CFF3 F0DD          	movff	prodl,___flmul@temp
 13063  010ACC  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 13064  010AD0  0100               	movlb	0	; () banked
 13065  010AD2  51DD               	movf	___flmul@temp& (0+255),w,b
 13066  010AD4  0100               	movlb	0	; () banked
 13067  010AD6  27D9               	addwf	___flmul@prod& (0+255),f,b
 13068  010AD8  0100               	movlb	0	; () banked
 13069  010ADA  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13070  010ADC  0100               	movlb	0	; () banked
 13071  010ADE  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13072  010AE0  0E00               	movlw	0
 13073  010AE2  0100               	movlb	0	; () banked
 13074  010AE4  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13075  010AE6  0E00               	movlw	0
 13076  010AE8  0100               	movlb	0	; () banked
 13077  010AEA  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13078                           
 13079                           ; BSR set to: 0
 13080  010AEC  0100               	movlb	0	; () banked
 13081  010AEE  51CB               	movf	(___flmul@a+1)& (0+255),w,b
 13082  010AF0  0100               	movlb	0	; () banked
 13083  010AF2  03C8               	mulwf	(___flmul@b+2)& (0+255),b
 13084  010AF4  CFF3 F0DD          	movff	prodl,___flmul@temp
 13085  010AF8  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 13086                           
 13087                           ; BSR set to: 0
 13088  010AFC  0100               	movlb	0	; () banked
 13089  010AFE  51DD               	movf	___flmul@temp& (0+255),w,b
 13090  010B00  0100               	movlb	0	; () banked
 13091  010B02  27D9               	addwf	___flmul@prod& (0+255),f,b
 13092  010B04  0100               	movlb	0	; () banked
 13093  010B06  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13094  010B08  0100               	movlb	0	; () banked
 13095  010B0A  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13096  010B0C  0E00               	movlw	0
 13097  010B0E  0100               	movlb	0	; () banked
 13098  010B10  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13099  010B12  0E00               	movlw	0
 13100  010B14  0100               	movlb	0	; () banked
 13101  010B16  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13102  010B18  0100               	movlb	0	; () banked
 13103  010B1A  51CC               	movf	(___flmul@a+2)& (0+255),w,b
 13104  010B1C  0100               	movlb	0	; () banked
 13105  010B1E  03C8               	mulwf	(___flmul@b+2)& (0+255),b
 13106  010B20  CFF3 F0DD          	movff	prodl,___flmul@temp
 13107  010B24  CFF4 F0DE          	movff	prodh,___flmul@temp+1
 13108                           
 13109                           ; BSR set to: 0
 13110  010B28  0100               	movlb	0	; () banked
 13111  010B2A  51DD               	movf	___flmul@temp& (0+255),w,b
 13112  010B2C  0100               	movlb	0	; () banked
 13113  010B2E  6FCE               	movwf	??___flmul& (0+255),b
 13114  010B30  0100               	movlb	0	; () banked
 13115  010B32  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13116  010B34  0100               	movlb	0	; () banked
 13117  010B36  6FCF               	movwf	(??___flmul+1)& (0+255),b
 13118  010B38  0100               	movlb	0	; () banked
 13119  010B3A  6BD0               	clrf	(??___flmul+2)& (0+255),b
 13120  010B3C  0100               	movlb	0	; () banked
 13121  010B3E  6BD1               	clrf	(??___flmul+3)& (0+255),b
 13122  010B40  C0D0  F0D1         	movff	??___flmul+2,??___flmul+3
 13123  010B44  C0CF  F0D0         	movff	??___flmul+1,??___flmul+2
 13124  010B48  C0CE  F0CF         	movff	??___flmul,??___flmul+1
 13125  010B4C  0100               	movlb	0	; () banked
 13126  010B4E  6BCE               	clrf	??___flmul& (0+255),b
 13127  010B50  0100               	movlb	0	; () banked
 13128  010B52  51CE               	movf	??___flmul& (0+255),w,b
 13129  010B54  0100               	movlb	0	; () banked
 13130  010B56  27D9               	addwf	___flmul@prod& (0+255),f,b
 13131  010B58  0100               	movlb	0	; () banked
 13132  010B5A  51CF               	movf	(??___flmul+1)& (0+255),w,b
 13133  010B5C  0100               	movlb	0	; () banked
 13134  010B5E  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13135  010B60  0100               	movlb	0	; () banked
 13136  010B62  51D0               	movf	(??___flmul+2)& (0+255),w,b
 13137  010B64  0100               	movlb	0	; () banked
 13138  010B66  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13139  010B68  0100               	movlb	0	; () banked
 13140  010B6A  51D1               	movf	(??___flmul+3)& (0+255),w,b
 13141  010B6C  0100               	movlb	0	; () banked
 13142  010B6E  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13143                           
 13144                           ; BSR set to: 0
 13145  010B70  C0D4  F0CE         	movff	___flmul@grs,??___flmul
 13146  010B74  C0D5  F0CF         	movff	___flmul@grs+1,??___flmul+1
 13147  010B78  C0D6  F0D0         	movff	___flmul@grs+2,??___flmul+2
 13148  010B7C  C0D7  F0D1         	movff	___flmul@grs+3,??___flmul+3
 13149  010B80  0E19               	movlw	25
 13150  010B82  D006               	goto	u10590
 13151  010B84                     u10595:
 13152  010B84  0100               	movlb	0	; () banked
 13153  010B86  90D8               	bcf	status,0,c
 13154  010B88  33D1               	rrcf	(??___flmul+3)& (0+255),f,b
 13155  010B8A  33D0               	rrcf	(??___flmul+2)& (0+255),f,b
 13156  010B8C  33CF               	rrcf	(??___flmul+1)& (0+255),f,b
 13157  010B8E  33CE               	rrcf	??___flmul& (0+255),f,b
 13158  010B90                     u10590:
 13159  010B90  2EE8               	decfsz	wreg,f,c
 13160  010B92  D7F8               	goto	u10595
 13161  010B94  0100               	movlb	0	; () banked
 13162  010B96  51CE               	movf	??___flmul& (0+255),w,b
 13163  010B98  0100               	movlb	0	; () banked
 13164  010B9A  27D9               	addwf	___flmul@prod& (0+255),f,b
 13165  010B9C  0100               	movlb	0	; () banked
 13166  010B9E  51CF               	movf	(??___flmul+1)& (0+255),w,b
 13167  010BA0  0100               	movlb	0	; () banked
 13168  010BA2  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13169  010BA4  0100               	movlb	0	; () banked
 13170  010BA6  51D0               	movf	(??___flmul+2)& (0+255),w,b
 13171  010BA8  0100               	movlb	0	; () banked
 13172  010BAA  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13173  010BAC  0100               	movlb	0	; () banked
 13174  010BAE  51D1               	movf	(??___flmul+3)& (0+255),w,b
 13175  010BB0  0100               	movlb	0	; () banked
 13176  010BB2  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13177                           
 13178                           ; BSR set to: 0
 13179  010BB4  C0D6  F0D7         	movff	___flmul@grs+2,___flmul@grs+3
 13180  010BB8  C0D5  F0D6         	movff	___flmul@grs+1,___flmul@grs+2
 13181  010BBC  C0D4  F0D5         	movff	___flmul@grs,___flmul@grs+1
 13182  010BC0  0100               	movlb	0	; () banked
 13183  010BC2  6BD4               	clrf	___flmul@grs& (0+255),b
 13184                           
 13185                           ; BSR set to: 0
 13186  010BC4  0100               	movlb	0	; () banked
 13187  010BC6  51D3               	movf	___flmul@aexp& (0+255),w,b
 13188  010BC8  C0D8  F0CE         	movff	___flmul@bexp,??___flmul
 13189  010BCC  0100               	movlb	0	; () banked
 13190  010BCE  6BCF               	clrf	(??___flmul+1)& (0+255),b
 13191  010BD0  0100               	movlb	0	; () banked
 13192  010BD2  27CE               	addwf	??___flmul& (0+255),f,b
 13193  010BD4  0E00               	movlw	0
 13194  010BD6  23CF               	addwfc	(??___flmul+1)& (0+255),f,b
 13195  010BD8  0E82               	movlw	130
 13196  010BDA  0100               	movlb	0	; () banked
 13197  010BDC  25CE               	addwf	??___flmul& (0+255),w,b
 13198  010BDE  0100               	movlb	0	; () banked
 13199  010BE0  6FDD               	movwf	___flmul@temp& (0+255),b
 13200  010BE2  0EFF               	movlw	255
 13201  010BE4  0100               	movlb	0	; () banked
 13202  010BE6  21CF               	addwfc	(??___flmul+1)& (0+255),w,b
 13203  010BE8  0100               	movlb	0	; () banked
 13204  010BEA  6FDE               	movwf	(___flmul@temp+1)& (0+255),b
 13205  010BEC  D015               	goto	l3043
 13206  010BEE                     
 13207                           ; BSR set to: 0
 13208                           
 13209                           ; BSR set to: 0
 13210  010BEE  0100               	movlb	0	; () banked
 13211  010BF0  90D8               	bcf	status,0,c
 13212  010BF2  37D9               	rlcf	___flmul@prod& (0+255),f,b
 13213  010BF4  37DA               	rlcf	(___flmul@prod+1)& (0+255),f,b
 13214  010BF6  37DB               	rlcf	(___flmul@prod+2)& (0+255),f,b
 13215  010BF8  37DC               	rlcf	(___flmul@prod+3)& (0+255),f,b
 13216                           
 13217                           ; BSR set to: 0
 13218  010BFA  0100               	movlb	0	; () banked
 13219  010BFC  AFD7               	btfss	(___flmul@grs+3)& (0+255),7,b
 13220  010BFE  D002               	goto	l3045
 13221                           
 13222                           ; BSR set to: 0
 13223  010C00  0100               	movlb	0	; () banked
 13224  010C02  81D9               	bsf	___flmul@prod& (0+255),0,b
 13225  010C04                     l3045:
 13226                           
 13227                           ; BSR set to: 0
 13228  010C04  0100               	movlb	0	; () banked
 13229  010C06  90D8               	bcf	status,0,c
 13230  010C08  37D4               	rlcf	___flmul@grs& (0+255),f,b
 13231  010C0A  37D5               	rlcf	(___flmul@grs+1)& (0+255),f,b
 13232  010C0C  37D6               	rlcf	(___flmul@grs+2)& (0+255),f,b
 13233  010C0E  37D7               	rlcf	(___flmul@grs+3)& (0+255),f,b
 13234  010C10  0100               	movlb	0	; () banked
 13235  010C12  07DD               	decf	___flmul@temp& (0+255),f,b
 13236  010C14  A0D8               	btfss	status,0,c
 13237  010C16  07DE               	decf	(___flmul@temp+1)& (0+255),f,b
 13238  010C18                     l3043:
 13239                           
 13240                           ; BSR set to: 0
 13241                           
 13242                           ; BSR set to: 0
 13243  010C18  0100               	movlb	0	; () banked
 13244  010C1A  AFDB               	btfss	(___flmul@prod+2)& (0+255),7,b
 13245  010C1C  D7E8               	goto	l3044
 13246                           
 13247                           ; BSR set to: 0
 13248                           
 13249                           ; BSR set to: 0
 13250  010C1E  0E00               	movlw	0
 13251  010C20  0100               	movlb	0	; () banked
 13252  010C22  6FD3               	movwf	___flmul@aexp& (0+255),b
 13253                           
 13254                           ; BSR set to: 0
 13255  010C24  0100               	movlb	0	; () banked
 13256  010C26  AFD7               	btfss	(___flmul@grs+3)& (0+255),7,b
 13257  010C28  D024               	goto	l3050
 13258                           
 13259                           ; BSR set to: 0
 13260  010C2A  0EFF               	movlw	255
 13261  010C2C  0100               	movlb	0	; () banked
 13262  010C2E  15D4               	andwf	___flmul@grs& (0+255),w,b
 13263  010C30  0100               	movlb	0	; () banked
 13264  010C32  6FCE               	movwf	??___flmul& (0+255),b
 13265  010C34  0EFF               	movlw	255
 13266  010C36  0100               	movlb	0	; () banked
 13267  010C38  15D5               	andwf	(___flmul@grs+1)& (0+255),w,b
 13268  010C3A  0100               	movlb	0	; () banked
 13269  010C3C  6FCF               	movwf	(??___flmul+1)& (0+255),b
 13270  010C3E  0EFF               	movlw	255
 13271  010C40  0100               	movlb	0	; () banked
 13272  010C42  15D6               	andwf	(___flmul@grs+2)& (0+255),w,b
 13273  010C44  0100               	movlb	0	; () banked
 13274  010C46  6FD0               	movwf	(??___flmul+2)& (0+255),b
 13275  010C48  0E7F               	movlw	127
 13276  010C4A  0100               	movlb	0	; () banked
 13277  010C4C  15D7               	andwf	(___flmul@grs+3)& (0+255),w,b
 13278  010C4E  0100               	movlb	0	; () banked
 13279  010C50  6FD1               	movwf	(??___flmul+3)& (0+255),b
 13280  010C52  0100               	movlb	0	; () banked
 13281  010C54  51CE               	movf	??___flmul& (0+255),w,b
 13282  010C56  0100               	movlb	0	; () banked
 13283  010C58  11CF               	iorwf	(??___flmul+1)& (0+255),w,b
 13284  010C5A  0100               	movlb	0	; () banked
 13285  010C5C  11D0               	iorwf	(??___flmul+2)& (0+255),w,b
 13286  010C5E  0100               	movlb	0	; () banked
 13287  010C60  11D1               	iorwf	(??___flmul+3)& (0+255),w,b
 13288  010C62  A4D8               	btfss	status,2,c
 13289  010C64  D003               	goto	u10640
 13290                           
 13291                           ; BSR set to: 0
 13292                           
 13293                           ; BSR set to: 0
 13294  010C66  0100               	movlb	0	; () banked
 13295  010C68  A1D9               	btfss	___flmul@prod& (0+255),0,b
 13296  010C6A  D003               	goto	l3050
 13297  010C6C                     u10640:
 13298                           
 13299                           ; BSR set to: 0
 13300  010C6C  0E01               	movlw	1
 13301  010C6E  0100               	movlb	0	; () banked
 13302  010C70  6FD3               	movwf	___flmul@aexp& (0+255),b
 13303  010C72                     l3050:
 13304                           
 13305                           ; BSR set to: 0
 13306                           
 13307                           ; BSR set to: 0
 13308                           
 13309                           ; BSR set to: 0
 13310  010C72  0100               	movlb	0	; () banked
 13311  010C74  51D3               	movf	___flmul@aexp& (0+255),w,b
 13312  010C76  0100               	movlb	0	; () banked
 13313  010C78  B4D8               	btfsc	status,2,c
 13314  010C7A  D023               	goto	l3052
 13315                           
 13316                           ; BSR set to: 0
 13317  010C7C  0E01               	movlw	1
 13318  010C7E  0100               	movlb	0	; () banked
 13319  010C80  27D9               	addwf	___flmul@prod& (0+255),f,b
 13320  010C82  0E00               	movlw	0
 13321  010C84  23DA               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13322  010C86  23DB               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13323  010C88  23DC               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13324                           
 13325                           ; BSR set to: 0
 13326  010C8A  0100               	movlb	0	; () banked
 13327  010C8C  A1DC               	btfss	(___flmul@prod+3)& (0+255),0,b
 13328  010C8E  D019               	goto	l3052
 13329                           
 13330                           ; BSR set to: 0
 13331  010C90  C0D9  F0CE         	movff	___flmul@prod,??___flmul
 13332  010C94  C0DA  F0CF         	movff	___flmul@prod+1,??___flmul+1
 13333  010C98  C0DB  F0D0         	movff	___flmul@prod+2,??___flmul+2
 13334  010C9C  C0DC  F0D1         	movff	___flmul@prod+3,??___flmul+3
 13335  010CA0  0100               	movlb	0	; () banked
 13336  010CA2  35D1               	rlcf	(??___flmul+3)& (0+255),w,b
 13337  010CA4  33D1               	rrcf	(??___flmul+3)& (0+255),f,b
 13338  010CA6  33D0               	rrcf	(??___flmul+2)& (0+255),f,b
 13339  010CA8  33CF               	rrcf	(??___flmul+1)& (0+255),f,b
 13340  010CAA  33CE               	rrcf	??___flmul& (0+255),f,b
 13341  010CAC  C0CE  F0D9         	movff	??___flmul,___flmul@prod
 13342  010CB0  C0CF  F0DA         	movff	??___flmul+1,___flmul@prod+1
 13343  010CB4  C0D0  F0DB         	movff	??___flmul+2,___flmul@prod+2
 13344  010CB8  C0D1  F0DC         	movff	??___flmul+3,___flmul@prod+3
 13345                           
 13346                           ; BSR set to: 0
 13347  010CBC  0100               	movlb	0	; () banked
 13348  010CBE  4BDD               	infsnz	___flmul@temp& (0+255),f,b
 13349  010CC0  2BDE               	incf	(___flmul@temp+1)& (0+255),f,b
 13350  010CC2                     l3052:
 13351                           
 13352                           ; BSR set to: 0
 13353                           
 13354                           ; BSR set to: 0
 13355                           
 13356                           ; BSR set to: 0
 13357  010CC2  0100               	movlb	0	; () banked
 13358  010CC4  BFDE               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13359  010CC6  D010               	goto	l3053
 13360  010CC8  0100               	movlb	0	; () banked
 13361  010CCA  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13362  010CCC  E104               	bnz	u10670
 13363  010CCE  0100               	movlb	0	; () banked
 13364  010CD0  29DD               	incf	___flmul@temp& (0+255),w,b
 13365  010CD2  A0D8               	btfss	status,0,c
 13366  010CD4  D009               	goto	l3053
 13367  010CD6                     u10670:
 13368                           
 13369                           ; BSR set to: 0
 13370  010CD6  0E00               	movlw	0
 13371  010CD8  0100               	movlb	0	; () banked
 13372  010CDA  6FD9               	movwf	___flmul@prod& (0+255),b
 13373  010CDC  0E00               	movlw	0
 13374  010CDE  6FDA               	movwf	(___flmul@prod+1)& (0+255),b
 13375  010CE0  0E80               	movlw	128
 13376  010CE2  6FDB               	movwf	(___flmul@prod+2)& (0+255),b
 13377  010CE4  0E7F               	movlw	127
 13378  010CE6  D02B               	goto	L5
 13379  010CE8                     l3053:
 13380                           
 13381                           ; BSR set to: 0
 13382                           
 13383                           ; BSR set to: 0
 13384  010CE8  0100               	movlb	0	; () banked
 13385  010CEA  BFDE               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13386  010CEC  D007               	goto	u10680
 13387  010CEE  0100               	movlb	0	; () banked
 13388  010CF0  51DE               	movf	(___flmul@temp+1)& (0+255),w,b
 13389  010CF2  E111               	bnz	l3055
 13390  010CF4  0100               	movlb	0	; () banked
 13391  010CF6  05DD               	decf	___flmul@temp& (0+255),w,b
 13392  010CF8  B0D8               	btfsc	status,0,c
 13393  010CFA  D00D               	goto	l3055
 13394  010CFC                     u10680:
 13395                           
 13396                           ; BSR set to: 0
 13397  010CFC  0E00               	movlw	0
 13398  010CFE  0100               	movlb	0	; () banked
 13399  010D00  6FD9               	movwf	___flmul@prod& (0+255),b
 13400  010D02  0E00               	movlw	0
 13401  010D04  6FDA               	movwf	(___flmul@prod+1)& (0+255),b
 13402  010D06  0E00               	movlw	0
 13403  010D08  6FDB               	movwf	(___flmul@prod+2)& (0+255),b
 13404  010D0A  0E00               	movlw	0
 13405  010D0C  6FDC               	movwf	(___flmul@prod+3)& (0+255),b
 13406  010D0E  0E00               	movlw	0
 13407  010D10  0100               	movlb	0	; () banked
 13408  010D12  6FD2               	movwf	___flmul@sign& (0+255),b
 13409  010D14  D015               	goto	l3056
 13410  010D16                     l3055:
 13411                           
 13412                           ; BSR set to: 0
 13413  010D16  C0DD  F0D8         	movff	___flmul@temp,___flmul@bexp
 13414                           
 13415                           ; BSR set to: 0
 13416  010D1A  0EFF               	movlw	255
 13417  010D1C  0100               	movlb	0	; () banked
 13418  010D1E  17D9               	andwf	___flmul@prod& (0+255),f,b
 13419  010D20  0EFF               	movlw	255
 13420  010D22  17DA               	andwf	(___flmul@prod+1)& (0+255),f,b
 13421  010D24  0E7F               	movlw	127
 13422  010D26  17DB               	andwf	(___flmul@prod+2)& (0+255),f,b
 13423  010D28  0E00               	movlw	0
 13424  010D2A  17DC               	andwf	(___flmul@prod+3)& (0+255),f,b
 13425                           
 13426                           ; BSR set to: 0
 13427  010D2C  0100               	movlb	0	; () banked
 13428  010D2E  A1D8               	btfss	___flmul@bexp& (0+255),0,b
 13429  010D30  D002               	goto	l3057
 13430                           
 13431                           ; BSR set to: 0
 13432  010D32  0100               	movlb	0	; () banked
 13433  010D34  8FDB               	bsf	(___flmul@prod+2)& (0+255),7,b
 13434  010D36                     l3057:
 13435                           
 13436                           ; BSR set to: 0
 13437                           
 13438                           ; BSR set to: 0
 13439  010D36  0100               	movlb	0	; () banked
 13440  010D38  90D8               	bcf	status,0,c
 13441  010D3A  31D8               	rrcf	___flmul@bexp& (0+255),w,b
 13442  010D3C  0100               	movlb	0	; () banked
 13443  010D3E                     L5:
 13444  010D3E  6FDC               	movwf	(___flmul@prod+3)& (0+255),b
 13445  010D40                     l3056:
 13446                           
 13447                           ; BSR set to: 0
 13448                           
 13449                           ; BSR set to: 0
 13450                           
 13451                           ; BSR set to: 0
 13452  010D40  0100               	movlb	0	; () banked
 13453  010D42  51D2               	movf	___flmul@sign& (0+255),w,b
 13454  010D44  0100               	movlb	0	; () banked
 13455  010D46  13DC               	iorwf	(___flmul@prod+3)& (0+255),f,b
 13456                           
 13457                           ; BSR set to: 0
 13458  010D48  C0D9  F0C6         	movff	___flmul@prod,?___flmul
 13459  010D4C  C0DA  F0C7         	movff	___flmul@prod+1,?___flmul+1
 13460  010D50  C0DB  F0C8         	movff	___flmul@prod+2,?___flmul+2
 13461  010D54  C0DC  F0C9         	movff	___flmul@prod+3,?___flmul+3
 13462  010D58  0012               	return	
 13463  010D5A                     __end_of___flmul:
 13464                           	opt stack 0
 13465                           tblptru	equ	0xFF8
 13466                           tblptrh	equ	0xFF7
 13467                           tblptrl	equ	0xFF6
 13468                           tablat	equ	0xFF5
 13469                           prodh	equ	0xFF4
 13470                           prodl	equ	0xFF3
 13471                           intcon	equ	0xFF2
 13472                           postinc0	equ	0xFEE
 13473                           wreg	equ	0xFE8
 13474                           postdec1	equ	0xFE5
 13475                           fsr1h	equ	0xFE2
 13476                           fsr1l	equ	0xFE1
 13477                           indf2	equ	0xFDF
 13478                           postinc2	equ	0xFDE
 13479                           postdec2	equ	0xFDD
 13480                           fsr2h	equ	0xFDA
 13481                           fsr2l	equ	0xFD9
 13482                           status	equ	0xFD8
 13483                           
 13484 ;; *************** function ___fldiv *****************
 13485 ;; Defined at:
 13486 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 13487 ;; Parameters:    Size  Location     Type
 13488 ;;  b               4    0[BANK0 ] unsigned char 
 13489 ;;  a               4    4[BANK0 ] unsigned char 
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;  grs             4   19[BANK0 ] unsigned long 
 13492 ;;  rem             4   13[BANK0 ] unsigned long 
 13493 ;;  new_exp         2   17[BANK0 ] int 
 13494 ;;  aexp            1   24[BANK0 ] unsigned char 
 13495 ;;  bexp            1   23[BANK0 ] unsigned char 
 13496 ;;  sign            1   12[BANK0 ] unsigned char 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;                  4    0[BANK0 ] unsigned char 
 13499 ;; Registers used:
 13500 ;;		wreg, status,2, status,0
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13506 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;Total ram usage:       25 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:    7
 13513 ;; This function calls:
 13514 ;;		Nothing
 13515 ;; This function is called by:
 13516 ;;		_ADC_Voltage
 13517 ;;		_findClosestWall
 13518 ;;		_measureAndDisplayDistance
 13519 ;;		_mode1
 13520 ;; This function uses a non-reentrant model
 13521 ;;
 13522                           
 13523                           	psect	text50
 13524  011552                     __ptext50:
 13525                           	opt stack 0
 13526  011552                     ___fldiv:
 13527                           	opt stack 21
 13528                           
 13529                           ; BSR set to: 0
 13530                           ;incstack = 0
 13531  011552  0100               	movlb	0	; () banked
 13532  011554  51BB               	movf	(___fldiv@b+3)& (0+255),w,b
 13533  011556  0B80               	andlw	128
 13534  011558  0100               	movlb	0	; () banked
 13535  01155A  6FC4               	movwf	___fldiv@sign& (0+255),b
 13536  01155C  0100               	movlb	0	; () banked
 13537  01155E  51BB               	movf	(___fldiv@b+3)& (0+255),w,b
 13538  011560  25BB               	addwf	(___fldiv@b+3)& (0+255),w,b
 13539  011562  0100               	movlb	0	; () banked
 13540  011564  6FCF               	movwf	___fldiv@bexp& (0+255),b
 13541                           
 13542                           ; BSR set to: 0
 13543  011566  0100               	movlb	0	; () banked
 13544  011568  AFBA               	btfss	(___fldiv@b+2)& (0+255),7,b
 13545  01156A  D002               	goto	l2997
 13546                           
 13547                           ; BSR set to: 0
 13548  01156C  0100               	movlb	0	; () banked
 13549  01156E  81CF               	bsf	___fldiv@bexp& (0+255),0,b
 13550  011570                     l2997:
 13551                           
 13552                           ; BSR set to: 0
 13553                           
 13554                           ; BSR set to: 0
 13555  011570  0100               	movlb	0	; () banked
 13556  011572  51CF               	movf	___fldiv@bexp& (0+255),w,b
 13557  011574  0100               	movlb	0	; () banked
 13558  011576  B4D8               	btfsc	status,2,c
 13559  011578  D012               	goto	l2998
 13560                           
 13561                           ; BSR set to: 0
 13562  01157A  0100               	movlb	0	; () banked
 13563  01157C  29CF               	incf	___fldiv@bexp& (0+255),w,b
 13564  01157E  A4D8               	btfss	status,2,c
 13565  011580  D009               	goto	l2999
 13566                           
 13567                           ; BSR set to: 0
 13568  011582  0E00               	movlw	0
 13569  011584  0100               	movlb	0	; () banked
 13570  011586  6FB8               	movwf	___fldiv@b& (0+255),b
 13571  011588  0E00               	movlw	0
 13572  01158A  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 13573  01158C  0E00               	movlw	0
 13574  01158E  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 13575  011590  0E00               	movlw	0
 13576  011592  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 13577  011594                     l2999:
 13578                           
 13579                           ; BSR set to: 0
 13580                           
 13581                           ; BSR set to: 0
 13582  011594  0100               	movlb	0	; () banked
 13583  011596  8FBA               	bsf	(___fldiv@b+2)& (0+255),7,b
 13584                           
 13585                           ; BSR set to: 0
 13586  011598  0E00               	movlw	0
 13587  01159A  0100               	movlb	0	; () banked
 13588  01159C  D008               	goto	L6
 13589  01159E                     l2998:
 13590                           
 13591                           ; BSR set to: 0
 13592                           
 13593                           ; BSR set to: 0
 13594  01159E  0E00               	movlw	0
 13595  0115A0  0100               	movlb	0	; () banked
 13596  0115A2  6FB8               	movwf	___fldiv@b& (0+255),b
 13597  0115A4  0E00               	movlw	0
 13598  0115A6  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 13599  0115A8  0E00               	movlw	0
 13600  0115AA  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 13601  0115AC  0E00               	movlw	0
 13602  0115AE                     L6:
 13603  0115AE  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 13604                           
 13605                           ; BSR set to: 0
 13606                           
 13607                           ; BSR set to: 0
 13608  0115B0  0100               	movlb	0	; () banked
 13609  0115B2  51BF               	movf	(___fldiv@a+3)& (0+255),w,b
 13610  0115B4  0B80               	andlw	128
 13611  0115B6  0100               	movlb	0	; () banked
 13612  0115B8  1BC4               	xorwf	___fldiv@sign& (0+255),f,b
 13613                           
 13614                           ; BSR set to: 0
 13615  0115BA  0100               	movlb	0	; () banked
 13616  0115BC  51BF               	movf	(___fldiv@a+3)& (0+255),w,b
 13617  0115BE  25BF               	addwf	(___fldiv@a+3)& (0+255),w,b
 13618  0115C0  0100               	movlb	0	; () banked
 13619  0115C2  6FD0               	movwf	___fldiv@aexp& (0+255),b
 13620                           
 13621                           ; BSR set to: 0
 13622  0115C4  0100               	movlb	0	; () banked
 13623  0115C6  AFBE               	btfss	(___fldiv@a+2)& (0+255),7,b
 13624  0115C8  D002               	goto	l3001
 13625                           
 13626                           ; BSR set to: 0
 13627  0115CA  0100               	movlb	0	; () banked
 13628  0115CC  81D0               	bsf	___fldiv@aexp& (0+255),0,b
 13629  0115CE                     l3001:
 13630                           
 13631                           ; BSR set to: 0
 13632                           
 13633                           ; BSR set to: 0
 13634  0115CE  0100               	movlb	0	; () banked
 13635  0115D0  51D0               	movf	___fldiv@aexp& (0+255),w,b
 13636  0115D2  0100               	movlb	0	; () banked
 13637  0115D4  B4D8               	btfsc	status,2,c
 13638  0115D6  D012               	goto	l3002
 13639                           
 13640                           ; BSR set to: 0
 13641  0115D8  0100               	movlb	0	; () banked
 13642  0115DA  29D0               	incf	___fldiv@aexp& (0+255),w,b
 13643  0115DC  A4D8               	btfss	status,2,c
 13644  0115DE  D009               	goto	l3003
 13645                           
 13646                           ; BSR set to: 0
 13647  0115E0  0E00               	movlw	0
 13648  0115E2  0100               	movlb	0	; () banked
 13649  0115E4  6FBC               	movwf	___fldiv@a& (0+255),b
 13650  0115E6  0E00               	movlw	0
 13651  0115E8  6FBD               	movwf	(___fldiv@a+1)& (0+255),b
 13652  0115EA  0E00               	movlw	0
 13653  0115EC  6FBE               	movwf	(___fldiv@a+2)& (0+255),b
 13654  0115EE  0E00               	movlw	0
 13655  0115F0  6FBF               	movwf	(___fldiv@a+3)& (0+255),b
 13656  0115F2                     l3003:
 13657                           
 13658                           ; BSR set to: 0
 13659                           
 13660                           ; BSR set to: 0
 13661  0115F2  0100               	movlb	0	; () banked
 13662  0115F4  8FBE               	bsf	(___fldiv@a+2)& (0+255),7,b
 13663                           
 13664                           ; BSR set to: 0
 13665  0115F6  0E00               	movlw	0
 13666  0115F8  0100               	movlb	0	; () banked
 13667  0115FA  D008               	goto	L7
 13668  0115FC                     l3002:
 13669                           
 13670                           ; BSR set to: 0
 13671                           
 13672                           ; BSR set to: 0
 13673  0115FC  0E00               	movlw	0
 13674  0115FE  0100               	movlb	0	; () banked
 13675  011600  6FBC               	movwf	___fldiv@a& (0+255),b
 13676  011602  0E00               	movlw	0
 13677  011604  6FBD               	movwf	(___fldiv@a+1)& (0+255),b
 13678  011606  0E00               	movlw	0
 13679  011608  6FBE               	movwf	(___fldiv@a+2)& (0+255),b
 13680  01160A  0E00               	movlw	0
 13681  01160C                     L7:
 13682  01160C  6FBF               	movwf	(___fldiv@a+3)& (0+255),b
 13683                           
 13684                           ; BSR set to: 0
 13685                           
 13686                           ; BSR set to: 0
 13687  01160E  0100               	movlb	0	; () banked
 13688  011610  51BC               	movf	___fldiv@a& (0+255),w,b
 13689  011612  0100               	movlb	0	; () banked
 13690  011614  11BD               	iorwf	(___fldiv@a+1)& (0+255),w,b
 13691  011616  0100               	movlb	0	; () banked
 13692  011618  11BE               	iorwf	(___fldiv@a+2)& (0+255),w,b
 13693  01161A  0100               	movlb	0	; () banked
 13694  01161C  11BF               	iorwf	(___fldiv@a+3)& (0+255),w,b
 13695  01161E  A4D8               	btfss	status,2,c
 13696  011620  D017               	goto	l3005
 13697                           
 13698                           ; BSR set to: 0
 13699  011622  0E00               	movlw	0
 13700  011624  0100               	movlb	0	; () banked
 13701  011626  6FB8               	movwf	___fldiv@b& (0+255),b
 13702  011628  0E00               	movlw	0
 13703  01162A  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 13704  01162C  0E00               	movlw	0
 13705  01162E  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 13706  011630  0E00               	movlw	0
 13707  011632  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 13708                           
 13709                           ; BSR set to: 0
 13710  011634  0100               	movlb	0	; () banked
 13711  011636  0E80               	movlw	128
 13712  011638  13BA               	iorwf	(___fldiv@b+2)& (0+255),f,b
 13713  01163A  0E7F               	movlw	127
 13714  01163C  13BB               	iorwf	(___fldiv@b+3)& (0+255),f,b
 13715                           
 13716                           ; BSR set to: 0
 13717  01163E  C0B8  F0B8         	movff	___fldiv@b,?___fldiv
 13718  011642  C0B9  F0B9         	movff	___fldiv@b+1,?___fldiv+1
 13719  011646  C0BA  F0BA         	movff	___fldiv@b+2,?___fldiv+2
 13720  01164A  C0BB  F0BB         	movff	___fldiv@b+3,?___fldiv+3
 13721                           
 13722                           ; BSR set to: 0
 13723  01164E  0012               	return	
 13724  011650                     l3005:
 13725                           
 13726                           ; BSR set to: 0
 13727                           
 13728                           ; BSR set to: 0
 13729  011650  0100               	movlb	0	; () banked
 13730  011652  51CF               	movf	___fldiv@bexp& (0+255),w,b
 13731  011654  0100               	movlb	0	; () banked
 13732  011656  A4D8               	btfss	status,2,c
 13733  011658  D012               	goto	l3007
 13734                           
 13735                           ; BSR set to: 0
 13736  01165A  0E00               	movlw	0
 13737  01165C  0100               	movlb	0	; () banked
 13738  01165E  6FB8               	movwf	___fldiv@b& (0+255),b
 13739  011660  0E00               	movlw	0
 13740  011662  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 13741  011664  0E00               	movlw	0
 13742  011666  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 13743  011668  0E00               	movlw	0
 13744  01166A  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 13745                           
 13746                           ; BSR set to: 0
 13747  01166C  C0B8  F0B8         	movff	___fldiv@b,?___fldiv
 13748  011670  C0B9  F0B9         	movff	___fldiv@b+1,?___fldiv+1
 13749  011674  C0BA  F0BA         	movff	___fldiv@b+2,?___fldiv+2
 13750  011678  C0BB  F0BB         	movff	___fldiv@b+3,?___fldiv+3
 13751                           
 13752                           ; BSR set to: 0
 13753  01167C  0012               	return	
 13754  01167E                     l3007:
 13755                           
 13756                           ; BSR set to: 0
 13757                           
 13758                           ; BSR set to: 0
 13759  01167E  0100               	movlb	0	; () banked
 13760  011680  51D0               	movf	___fldiv@aexp& (0+255),w,b
 13761  011682  0100               	movlb	0	; () banked
 13762  011684  6FC0               	movwf	??___fldiv& (0+255),b
 13763  011686  6BC1               	clrf	(??___fldiv+1)& (0+255),b
 13764  011688  0100               	movlb	0	; () banked
 13765  01168A  1FC0               	comf	??___fldiv& (0+255),f,b
 13766  01168C  1FC1               	comf	(??___fldiv+1)& (0+255),f,b
 13767  01168E  4BC0               	infsnz	??___fldiv& (0+255),f,b
 13768  011690  2BC1               	incf	(??___fldiv+1)& (0+255),f,b
 13769  011692  0100               	movlb	0	; () banked
 13770  011694  51CF               	movf	___fldiv@bexp& (0+255),w,b
 13771  011696  0100               	movlb	0	; () banked
 13772  011698  6FC2               	movwf	(??___fldiv+2)& (0+255),b
 13773  01169A  6BC3               	clrf	(??___fldiv+3)& (0+255),b
 13774  01169C  0100               	movlb	0	; () banked
 13775  01169E  51C0               	movf	??___fldiv& (0+255),w,b
 13776  0116A0  0100               	movlb	0	; () banked
 13777  0116A2  27C2               	addwf	(??___fldiv+2)& (0+255),f,b
 13778  0116A4  0100               	movlb	0	; () banked
 13779  0116A6  51C1               	movf	(??___fldiv+1)& (0+255),w,b
 13780  0116A8  0100               	movlb	0	; () banked
 13781  0116AA  23C3               	addwfc	(??___fldiv+3)& (0+255),f,b
 13782  0116AC  0E7F               	movlw	127
 13783  0116AE  0100               	movlb	0	; () banked
 13784  0116B0  25C2               	addwf	(??___fldiv+2)& (0+255),w,b
 13785  0116B2  0100               	movlb	0	; () banked
 13786  0116B4  6FC9               	movwf	___fldiv@new_exp& (0+255),b
 13787  0116B6  0E00               	movlw	0
 13788  0116B8  0100               	movlb	0	; () banked
 13789  0116BA  21C3               	addwfc	(??___fldiv+3)& (0+255),w,b
 13790  0116BC  0100               	movlb	0	; () banked
 13791  0116BE  6FCA               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13792                           
 13793                           ; BSR set to: 0
 13794  0116C0  C0B8  F0C5         	movff	___fldiv@b,___fldiv@rem
 13795  0116C4  C0B9  F0C6         	movff	___fldiv@b+1,___fldiv@rem+1
 13796  0116C8  C0BA  F0C7         	movff	___fldiv@b+2,___fldiv@rem+2
 13797  0116CC  C0BB  F0C8         	movff	___fldiv@b+3,___fldiv@rem+3
 13798                           
 13799                           ; BSR set to: 0
 13800  0116D0  0E00               	movlw	0
 13801  0116D2  0100               	movlb	0	; () banked
 13802  0116D4  6FB8               	movwf	___fldiv@b& (0+255),b
 13803  0116D6  0E00               	movlw	0
 13804  0116D8  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 13805  0116DA  0E00               	movlw	0
 13806  0116DC  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 13807  0116DE  0E00               	movlw	0
 13808  0116E0  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 13809                           
 13810                           ; BSR set to: 0
 13811  0116E2  0E00               	movlw	0
 13812  0116E4  0100               	movlb	0	; () banked
 13813  0116E6  6FCB               	movwf	___fldiv@grs& (0+255),b
 13814  0116E8  0E00               	movlw	0
 13815  0116EA  6FCC               	movwf	(___fldiv@grs+1)& (0+255),b
 13816  0116EC  0E00               	movlw	0
 13817  0116EE  6FCD               	movwf	(___fldiv@grs+2)& (0+255),b
 13818  0116F0  0E00               	movlw	0
 13819  0116F2  6FCE               	movwf	(___fldiv@grs+3)& (0+255),b
 13820                           
 13821                           ; BSR set to: 0
 13822  0116F4  0E00               	movlw	0
 13823  0116F6  0100               	movlb	0	; () banked
 13824  0116F8  6FD0               	movwf	___fldiv@aexp& (0+255),b
 13825  0116FA  D042               	goto	l3008
 13826  0116FC                     
 13827                           ; BSR set to: 0
 13828                           
 13829                           ; BSR set to: 0
 13830  0116FC  0100               	movlb	0	; () banked
 13831  0116FE  51D0               	movf	___fldiv@aexp& (0+255),w,b
 13832  011700  0100               	movlb	0	; () banked
 13833  011702  B4D8               	btfsc	status,2,c
 13834  011704  D017               	goto	l3010
 13835                           
 13836                           ; BSR set to: 0
 13837  011706  0100               	movlb	0	; () banked
 13838  011708  90D8               	bcf	status,0,c
 13839  01170A  37C5               	rlcf	___fldiv@rem& (0+255),f,b
 13840  01170C  37C6               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 13841  01170E  37C7               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 13842  011710  37C8               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 13843  011712  0100               	movlb	0	; () banked
 13844  011714  90D8               	bcf	status,0,c
 13845  011716  37B8               	rlcf	___fldiv@b& (0+255),f,b
 13846  011718  37B9               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13847  01171A  37BA               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13848  01171C  37BB               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13849                           
 13850                           ; BSR set to: 0
 13851  01171E  0100               	movlb	0	; () banked
 13852  011720  AFCE               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13853  011722  D002               	goto	l3011
 13854                           
 13855                           ; BSR set to: 0
 13856  011724  0100               	movlb	0	; () banked
 13857  011726  81B8               	bsf	___fldiv@b& (0+255),0,b
 13858  011728                     l3011:
 13859                           
 13860                           ; BSR set to: 0
 13861  011728  0100               	movlb	0	; () banked
 13862  01172A  90D8               	bcf	status,0,c
 13863  01172C  37CB               	rlcf	___fldiv@grs& (0+255),f,b
 13864  01172E  37CC               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13865  011730  37CD               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13866  011732  37CE               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13867  011734                     l3010:
 13868                           
 13869                           ; BSR set to: 0
 13870                           
 13871                           ; BSR set to: 0
 13872  011734  0100               	movlb	0	; () banked
 13873  011736  51BC               	movf	___fldiv@a& (0+255),w,b
 13874  011738  0100               	movlb	0	; () banked
 13875  01173A  5DC5               	subwf	___fldiv@rem& (0+255),w,b
 13876  01173C  0100               	movlb	0	; () banked
 13877  01173E  51BD               	movf	(___fldiv@a+1)& (0+255),w,b
 13878  011740  0100               	movlb	0	; () banked
 13879  011742  59C6               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 13880  011744  0100               	movlb	0	; () banked
 13881  011746  51BE               	movf	(___fldiv@a+2)& (0+255),w,b
 13882  011748  0100               	movlb	0	; () banked
 13883  01174A  59C7               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 13884  01174C  0100               	movlb	0	; () banked
 13885  01174E  51BF               	movf	(___fldiv@a+3)& (0+255),w,b
 13886  011750  0100               	movlb	0	; () banked
 13887  011752  59C8               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 13888  011754  A0D8               	btfss	status,0,c
 13889  011756  D012               	goto	l3012
 13890                           
 13891                           ; BSR set to: 0
 13892  011758  0100               	movlb	0	; () banked
 13893  01175A  8DCE               	bsf	(___fldiv@grs+3)& (0+255),6,b
 13894                           
 13895                           ; BSR set to: 0
 13896  01175C  0100               	movlb	0	; () banked
 13897  01175E  51BC               	movf	___fldiv@a& (0+255),w,b
 13898  011760  0100               	movlb	0	; () banked
 13899  011762  5FC5               	subwf	___fldiv@rem& (0+255),f,b
 13900  011764  0100               	movlb	0	; () banked
 13901  011766  51BD               	movf	(___fldiv@a+1)& (0+255),w,b
 13902  011768  0100               	movlb	0	; () banked
 13903  01176A  5BC6               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 13904  01176C  0100               	movlb	0	; () banked
 13905  01176E  51BE               	movf	(___fldiv@a+2)& (0+255),w,b
 13906  011770  0100               	movlb	0	; () banked
 13907  011772  5BC7               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 13908  011774  0100               	movlb	0	; () banked
 13909  011776  51BF               	movf	(___fldiv@a+3)& (0+255),w,b
 13910  011778  0100               	movlb	0	; () banked
 13911  01177A  5BC8               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 13912  01177C                     l3012:
 13913                           
 13914                           ; BSR set to: 0
 13915                           
 13916                           ; BSR set to: 0
 13917  01177C  0100               	movlb	0	; () banked
 13918  01177E  2BD0               	incf	___fldiv@aexp& (0+255),f,b
 13919  011780                     l3008:
 13920                           
 13921                           ; BSR set to: 0
 13922  011780  0E19               	movlw	25
 13923  011782  0100               	movlb	0	; () banked
 13924  011784  65D0               	cpfsgt	___fldiv@aexp& (0+255),b
 13925  011786  D7BA               	goto	l3009
 13926                           
 13927                           ; BSR set to: 0
 13928                           
 13929                           ; BSR set to: 0
 13930  011788  0100               	movlb	0	; () banked
 13931  01178A  51C5               	movf	___fldiv@rem& (0+255),w,b
 13932  01178C  0100               	movlb	0	; () banked
 13933  01178E  11C6               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 13934  011790  0100               	movlb	0	; () banked
 13935  011792  11C7               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 13936  011794  0100               	movlb	0	; () banked
 13937  011796  11C8               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 13938  011798  B4D8               	btfsc	status,2,c
 13939  01179A  D018               	goto	l3015
 13940                           
 13941                           ; BSR set to: 0
 13942  01179C  0100               	movlb	0	; () banked
 13943  01179E  81CB               	bsf	___fldiv@grs& (0+255),0,b
 13944                           
 13945                           ; BSR set to: 0
 13946  0117A0  D015               	goto	l3015
 13947  0117A2                     
 13948                           ; BSR set to: 0
 13949                           
 13950                           ; BSR set to: 0
 13951  0117A2  0100               	movlb	0	; () banked
 13952  0117A4  90D8               	bcf	status,0,c
 13953  0117A6  37B8               	rlcf	___fldiv@b& (0+255),f,b
 13954  0117A8  37B9               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13955  0117AA  37BA               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13956  0117AC  37BB               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13957                           
 13958                           ; BSR set to: 0
 13959  0117AE  0100               	movlb	0	; () banked
 13960  0117B0  AFCE               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13961  0117B2  D002               	goto	l3017
 13962                           
 13963                           ; BSR set to: 0
 13964  0117B4  0100               	movlb	0	; () banked
 13965  0117B6  81B8               	bsf	___fldiv@b& (0+255),0,b
 13966  0117B8                     l3017:
 13967                           
 13968                           ; BSR set to: 0
 13969  0117B8  0100               	movlb	0	; () banked
 13970  0117BA  90D8               	bcf	status,0,c
 13971  0117BC  37CB               	rlcf	___fldiv@grs& (0+255),f,b
 13972  0117BE  37CC               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13973  0117C0  37CD               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13974  0117C2  37CE               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13975  0117C4  0100               	movlb	0	; () banked
 13976  0117C6  07C9               	decf	___fldiv@new_exp& (0+255),f,b
 13977  0117C8  A0D8               	btfss	status,0,c
 13978  0117CA  07CA               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 13979  0117CC                     l3015:
 13980                           
 13981                           ; BSR set to: 0
 13982                           
 13983                           ; BSR set to: 0
 13984  0117CC  0100               	movlb	0	; () banked
 13985  0117CE  AFBA               	btfss	(___fldiv@b+2)& (0+255),7,b
 13986  0117D0  D7E8               	goto	l3016
 13987                           
 13988                           ; BSR set to: 0
 13989                           
 13990                           ; BSR set to: 0
 13991  0117D2  0E00               	movlw	0
 13992  0117D4  0100               	movlb	0	; () banked
 13993  0117D6  6FD0               	movwf	___fldiv@aexp& (0+255),b
 13994                           
 13995                           ; BSR set to: 0
 13996  0117D8  0100               	movlb	0	; () banked
 13997  0117DA  AFCE               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13998  0117DC  D024               	goto	l3022
 13999                           
 14000                           ; BSR set to: 0
 14001  0117DE  0EFF               	movlw	255
 14002  0117E0  0100               	movlb	0	; () banked
 14003  0117E2  15CB               	andwf	___fldiv@grs& (0+255),w,b
 14004  0117E4  0100               	movlb	0	; () banked
 14005  0117E6  6FC0               	movwf	??___fldiv& (0+255),b
 14006  0117E8  0EFF               	movlw	255
 14007  0117EA  0100               	movlb	0	; () banked
 14008  0117EC  15CC               	andwf	(___fldiv@grs+1)& (0+255),w,b
 14009  0117EE  0100               	movlb	0	; () banked
 14010  0117F0  6FC1               	movwf	(??___fldiv+1)& (0+255),b
 14011  0117F2  0EFF               	movlw	255
 14012  0117F4  0100               	movlb	0	; () banked
 14013  0117F6  15CD               	andwf	(___fldiv@grs+2)& (0+255),w,b
 14014  0117F8  0100               	movlb	0	; () banked
 14015  0117FA  6FC2               	movwf	(??___fldiv+2)& (0+255),b
 14016  0117FC  0E7F               	movlw	127
 14017  0117FE  0100               	movlb	0	; () banked
 14018  011800  15CE               	andwf	(___fldiv@grs+3)& (0+255),w,b
 14019  011802  0100               	movlb	0	; () banked
 14020  011804  6FC3               	movwf	(??___fldiv+3)& (0+255),b
 14021  011806  0100               	movlb	0	; () banked
 14022  011808  51C0               	movf	??___fldiv& (0+255),w,b
 14023  01180A  0100               	movlb	0	; () banked
 14024  01180C  11C1               	iorwf	(??___fldiv+1)& (0+255),w,b
 14025  01180E  0100               	movlb	0	; () banked
 14026  011810  11C2               	iorwf	(??___fldiv+2)& (0+255),w,b
 14027  011812  0100               	movlb	0	; () banked
 14028  011814  11C3               	iorwf	(??___fldiv+3)& (0+255),w,b
 14029  011816  A4D8               	btfss	status,2,c
 14030  011818  D003               	goto	u10450
 14031                           
 14032                           ; BSR set to: 0
 14033                           
 14034                           ; BSR set to: 0
 14035  01181A  0100               	movlb	0	; () banked
 14036  01181C  A1B8               	btfss	___fldiv@b& (0+255),0,b
 14037  01181E  D003               	goto	l3022
 14038  011820                     u10450:
 14039                           
 14040                           ; BSR set to: 0
 14041  011820  0E01               	movlw	1
 14042  011822  0100               	movlb	0	; () banked
 14043  011824  6FD0               	movwf	___fldiv@aexp& (0+255),b
 14044  011826                     l3022:
 14045                           
 14046                           ; BSR set to: 0
 14047                           
 14048                           ; BSR set to: 0
 14049                           
 14050                           ; BSR set to: 0
 14051  011826  0100               	movlb	0	; () banked
 14052  011828  51D0               	movf	___fldiv@aexp& (0+255),w,b
 14053  01182A  0100               	movlb	0	; () banked
 14054  01182C  B4D8               	btfsc	status,2,c
 14055  01182E  D023               	goto	l3024
 14056                           
 14057                           ; BSR set to: 0
 14058  011830  0E01               	movlw	1
 14059  011832  0100               	movlb	0	; () banked
 14060  011834  27B8               	addwf	___fldiv@b& (0+255),f,b
 14061  011836  0E00               	movlw	0
 14062  011838  23B9               	addwfc	(___fldiv@b+1)& (0+255),f,b
 14063  01183A  23BA               	addwfc	(___fldiv@b+2)& (0+255),f,b
 14064  01183C  23BB               	addwfc	(___fldiv@b+3)& (0+255),f,b
 14065                           
 14066                           ; BSR set to: 0
 14067  01183E  0100               	movlb	0	; () banked
 14068  011840  A1BB               	btfss	(___fldiv@b+3)& (0+255),0,b
 14069  011842  D019               	goto	l3024
 14070                           
 14071                           ; BSR set to: 0
 14072  011844  C0B8  F0C0         	movff	___fldiv@b,??___fldiv
 14073  011848  C0B9  F0C1         	movff	___fldiv@b+1,??___fldiv+1
 14074  01184C  C0BA  F0C2         	movff	___fldiv@b+2,??___fldiv+2
 14075  011850  C0BB  F0C3         	movff	___fldiv@b+3,??___fldiv+3
 14076  011854  0100               	movlb	0	; () banked
 14077  011856  35C3               	rlcf	(??___fldiv+3)& (0+255),w,b
 14078  011858  33C3               	rrcf	(??___fldiv+3)& (0+255),f,b
 14079  01185A  33C2               	rrcf	(??___fldiv+2)& (0+255),f,b
 14080  01185C  33C1               	rrcf	(??___fldiv+1)& (0+255),f,b
 14081  01185E  33C0               	rrcf	??___fldiv& (0+255),f,b
 14082  011860  C0C0  F0B8         	movff	??___fldiv,___fldiv@b
 14083  011864  C0C1  F0B9         	movff	??___fldiv+1,___fldiv@b+1
 14084  011868  C0C2  F0BA         	movff	??___fldiv+2,___fldiv@b+2
 14085  01186C  C0C3  F0BB         	movff	??___fldiv+3,___fldiv@b+3
 14086                           
 14087                           ; BSR set to: 0
 14088  011870  0100               	movlb	0	; () banked
 14089  011872  4BC9               	infsnz	___fldiv@new_exp& (0+255),f,b
 14090  011874  2BCA               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 14091  011876                     l3024:
 14092                           
 14093                           ; BSR set to: 0
 14094                           
 14095                           ; BSR set to: 0
 14096                           
 14097                           ; BSR set to: 0
 14098  011876  0100               	movlb	0	; () banked
 14099  011878  BFCA               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14100  01187A  D014               	goto	l3025
 14101  01187C  0100               	movlb	0	; () banked
 14102  01187E  51CA               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14103  011880  E104               	bnz	u10480
 14104  011882  0100               	movlb	0	; () banked
 14105  011884  29C9               	incf	___fldiv@new_exp& (0+255),w,b
 14106  011886  A0D8               	btfss	status,0,c
 14107  011888  D00D               	goto	l3025
 14108  01188A                     u10480:
 14109                           
 14110                           ; BSR set to: 0
 14111  01188A  0E00               	movlw	0
 14112  01188C  0100               	movlb	0	; () banked
 14113  01188E  6FCA               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14114  011890  69C9               	setf	___fldiv@new_exp& (0+255),b
 14115  011892  0E00               	movlw	0
 14116  011894  0100               	movlb	0	; () banked
 14117  011896  6FB8               	movwf	___fldiv@b& (0+255),b
 14118  011898  0E00               	movlw	0
 14119  01189A  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 14120  01189C  0E00               	movlw	0
 14121  01189E  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 14122  0118A0  0E00               	movlw	0
 14123  0118A2  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 14124  0118A4                     l3025:
 14125                           
 14126                           ; BSR set to: 0
 14127                           
 14128                           ; BSR set to: 0
 14129  0118A4  0100               	movlb	0	; () banked
 14130  0118A6  BFCA               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14131  0118A8  D007               	goto	u10490
 14132  0118AA  0100               	movlb	0	; () banked
 14133  0118AC  51CA               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14134  0118AE  E115               	bnz	l13694
 14135  0118B0  0100               	movlb	0	; () banked
 14136  0118B2  05C9               	decf	___fldiv@new_exp& (0+255),w,b
 14137  0118B4  B0D8               	btfsc	status,0,c
 14138  0118B6  D011               	goto	l3026
 14139  0118B8                     u10490:
 14140                           
 14141                           ; BSR set to: 0
 14142  0118B8  0E00               	movlw	0
 14143  0118BA  0100               	movlb	0	; () banked
 14144  0118BC  6FCA               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14145  0118BE  0E00               	movlw	0
 14146  0118C0  6FC9               	movwf	___fldiv@new_exp& (0+255),b
 14147  0118C2  0E00               	movlw	0
 14148  0118C4  0100               	movlb	0	; () banked
 14149  0118C6  6FB8               	movwf	___fldiv@b& (0+255),b
 14150  0118C8  0E00               	movlw	0
 14151  0118CA  6FB9               	movwf	(___fldiv@b+1)& (0+255),b
 14152  0118CC  0E00               	movlw	0
 14153  0118CE  6FBA               	movwf	(___fldiv@b+2)& (0+255),b
 14154  0118D0  0E00               	movlw	0
 14155  0118D2  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 14156  0118D4  0E00               	movlw	0
 14157  0118D6  0100               	movlb	0	; () banked
 14158  0118D8  6FC4               	movwf	___fldiv@sign& (0+255),b
 14159  0118DA                     l3026:
 14160  0118DA                     l13694:
 14161                           
 14162                           ; BSR set to: 0
 14163  0118DA  C0C9  F0CF         	movff	___fldiv@new_exp,___fldiv@bexp
 14164                           
 14165                           ; BSR set to: 0
 14166  0118DE  0100               	movlb	0	; () banked
 14167  0118E0  A1CF               	btfss	___fldiv@bexp& (0+255),0,b
 14168  0118E2  D003               	goto	l3027
 14169                           
 14170                           ; BSR set to: 0
 14171  0118E4  0100               	movlb	0	; () banked
 14172  0118E6  8FBA               	bsf	(___fldiv@b+2)& (0+255),7,b
 14173  0118E8  D002               	goto	l3028
 14174  0118EA                     l3027:
 14175                           
 14176                           ; BSR set to: 0
 14177                           
 14178                           ; BSR set to: 0
 14179  0118EA  0100               	movlb	0	; () banked
 14180  0118EC  9FBA               	bcf	(___fldiv@b+2)& (0+255),7,b
 14181  0118EE                     l3028:
 14182                           
 14183                           ; BSR set to: 0
 14184                           
 14185                           ; BSR set to: 0
 14186  0118EE  0100               	movlb	0	; () banked
 14187  0118F0  90D8               	bcf	status,0,c
 14188  0118F2  31CF               	rrcf	___fldiv@bexp& (0+255),w,b
 14189  0118F4  0100               	movlb	0	; () banked
 14190  0118F6  6FBB               	movwf	(___fldiv@b+3)& (0+255),b
 14191                           
 14192                           ; BSR set to: 0
 14193  0118F8  0100               	movlb	0	; () banked
 14194  0118FA  51C4               	movf	___fldiv@sign& (0+255),w,b
 14195  0118FC  0100               	movlb	0	; () banked
 14196  0118FE  13BB               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14197                           
 14198                           ; BSR set to: 0
 14199  011900  C0B8  F0B8         	movff	___fldiv@b,?___fldiv
 14200  011904  C0B9  F0B9         	movff	___fldiv@b+1,?___fldiv+1
 14201  011908  C0BA  F0BA         	movff	___fldiv@b+2,?___fldiv+2
 14202  01190C  C0BB  F0BB         	movff	___fldiv@b+3,?___fldiv+3
 14203  011910  0012               	return	
 14204  011912                     __end_of___fldiv:
 14205                           	opt stack 0
 14206                           tblptru	equ	0xFF8
 14207                           tblptrh	equ	0xFF7
 14208                           tblptrl	equ	0xFF6
 14209                           tablat	equ	0xFF5
 14210                           prodh	equ	0xFF4
 14211                           prodl	equ	0xFF3
 14212                           intcon	equ	0xFF2
 14213                           postinc0	equ	0xFEE
 14214                           wreg	equ	0xFE8
 14215                           postdec1	equ	0xFE5
 14216                           fsr1h	equ	0xFE2
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function _init *****************
 14226 ;; Defined at:
 14227 ;;		line 71 in file "main.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:   17
 14248 ;; This function calls:
 14249 ;;		_ADC_Init
 14250 ;;		_ADC_Start
 14251 ;;		_Console_Init
 14252 ;;		_HMI_Init
 14253 ;;		_ISR_Enable
 14254 ;;		_LCD_Init
 14255 ;;		_MXK_BlockSwitchTo
 14256 ;;		_MXK_Dequeue
 14257 ;;		_MXK_Init
 14258 ;;		_MXK_Release
 14259 ;;		_Motor_Init
 14260 ;;		_delay_ms
 14261 ;;		_eusart_init
 14262 ;;		_irobot_init
 14263 ;;		_irobot_init_song_0
 14264 ;;		_irobot_led_power_on
 14265 ;; This function is called by:
 14266 ;;		_main
 14267 ;; This function uses a non-reentrant model
 14268 ;;
 14269                           
 14270                           	psect	text51
 14271  014F44                     __ptext51:
 14272                           	opt stack 0
 14273  014F44                     _init:
 14274                           	opt stack 13
 14275                           
 14276                           ;main.c: 73: MXK_Init();
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;incstack = 0
 14280  014F44  ECB0  F099         	call	_MXK_Init	;wreg free
 14281                           
 14282                           ;main.c: 76: ISR_Enable();
 14283  014F48  EC55  F0B7         	call	_ISR_Enable	;wreg free
 14284                           
 14285                           ;main.c: 79: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14286  014F4C  0E01               	movlw	1
 14287  014F4E  ECC6  F0B3         	call	_MXK_BlockSwitchTo
 14288  014F52  0900               	iorlw	0
 14289  014F54  B4D8               	btfsc	status,2,c
 14290  014F56  D00C               	goto	l2320
 14291                           
 14292                           ;main.c: 80: Console_Init();
 14293  014F58  EC4F  F0AB         	call	_Console_Init	;wreg free
 14294                           
 14295                           ;main.c: 81: HMI_Init();
 14296  014F5C  ECF0  F092         	call	_HMI_Init	;wreg free
 14297                           
 14298                           ;main.c: 82: LCD_Init();
 14299  014F60  EC70  F09A         	call	_LCD_Init	;wreg free
 14300                           
 14301                           ;main.c: 83: if (MXK_Release())
 14302  014F64  EC55  F0B6         	call	_MXK_Release	;wreg free
 14303  014F68  0900               	iorlw	0
 14304  014F6A  A4D8               	btfss	status,2,c
 14305                           
 14306                           ;main.c: 84: MXK_Dequeue();
 14307  014F6C  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
 14308  014F70                     l2320:
 14309                           
 14310                           ;main.c: 85: }
 14311                           ;main.c: 88: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14312  014F70  0E08               	movlw	8
 14313  014F72  ECC6  F0B3         	call	_MXK_BlockSwitchTo
 14314  014F76  0900               	iorlw	0
 14315  014F78  B4D8               	btfsc	status,2,c
 14316  014F7A  D013               	goto	l2322
 14317                           
 14318                           ;main.c: 89: Motor_Init(&Stepper, 0b1000);
 14319  014F7C  0EAD               	movlw	low _Stepper
 14320  014F7E  0100               	movlb	0	; () banked
 14321  014F80  6FE5               	movwf	Motor_Init@pMotor& (0+255),b
 14322  014F82  0E00               	movlw	high _Stepper
 14323  014F84  0100               	movlb	0	; () banked
 14324  014F86  6FE6               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14325  014F88  0E00               	movlw	0
 14326  014F8A  0100               	movlb	0	; () banked
 14327  014F8C  6FE8               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14328  014F8E  0E08               	movlw	8
 14329  014F90  6FE7               	movwf	Motor_Init@pAddress& (0+255),b
 14330  014F92  EC0B  F0A2         	call	_Motor_Init	;wreg free
 14331                           
 14332                           ;main.c: 90: if (MXK_Release())
 14333  014F96  EC55  F0B6         	call	_MXK_Release	;wreg free
 14334  014F9A  0900               	iorlw	0
 14335  014F9C  A4D8               	btfss	status,2,c
 14336                           
 14337                           ;main.c: 91: MXK_Dequeue();
 14338  014F9E  ECA7  F0B3         	call	_MXK_Dequeue	;wreg free
 14339  014FA2                     l2322:
 14340                           
 14341                           ;main.c: 92: }
 14342                           ;main.c: 95: ADC_Init(&ADC_AN0, eADC_Ch0);
 14343  014FA2  0EB3               	movlw	low _ADC_AN0
 14344  014FA4  0100               	movlb	0	; () banked
 14345  014FA6  6FBC               	movwf	ADC_Init@pInput& (0+255),b
 14346  014FA8  0E00               	movlw	high _ADC_AN0
 14347  014FAA  0100               	movlb	0	; () banked
 14348  014FAC  6FBD               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14349  014FAE  0E00               	movlw	0
 14350  014FB0  0100               	movlb	0	; () banked
 14351  014FB2  6FBE               	movwf	ADC_Init@pChannel& (0+255),b
 14352  014FB4  EC9A  F0AC         	call	_ADC_Init	;wreg free
 14353                           
 14354                           ;main.c: 96: float ADC_Voltage(ADCPtr plnput);
 14355                           ;main.c: 97: ADC_Start(&ADC_AN0);
 14356  014FB8  0EB3               	movlw	low _ADC_AN0
 14357  014FBA  0100               	movlb	0	; () banked
 14358  014FBC  6FBA               	movwf	ADC_Start@pInput& (0+255),b
 14359  014FBE  0E00               	movlw	high _ADC_AN0
 14360  014FC0  0100               	movlb	0	; () banked
 14361  014FC2  6FBB               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14362  014FC4  ECD9  F0AB         	call	_ADC_Start	;wreg free
 14363                           
 14364                           ;main.c: 99: eusart_init();
 14365  014FC8  ECDE  F0B5         	call	_eusart_init	;wreg free
 14366                           
 14367                           ;main.c: 100: irobot_init();
 14368  014FCC  EC1B  F0B7         	call	_irobot_init	;wreg free
 14369                           
 14370                           ;main.c: 102: irobot_led_power_on(0xA);
 14371  014FD0  0E0A               	movlw	10
 14372  014FD2  EC47  F0B6         	call	_irobot_led_power_on
 14373                           
 14374                           ;main.c: 103: irobot_init_song_0();
 14375  014FD6  ECBF  F0B5         	call	_irobot_init_song_0	;wreg free
 14376                           
 14377                           ;main.c: 104: delay_ms(20);
 14378  014FDA  0E00               	movlw	0
 14379  014FDC  0100               	movlb	0	; () banked
 14380  014FDE  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 14381  014FE0  0E14               	movlw	20
 14382  014FE2  6FB8               	movwf	delay_ms@ms& (0+255),b
 14383  014FE4  EC0F  F0AF         	call	_delay_ms	;wreg free
 14384  014FE8  0012               	return		;funcret
 14385  014FEA                     __end_of_init:
 14386                           	opt stack 0
 14387                           tblptru	equ	0xFF8
 14388                           tblptrh	equ	0xFF7
 14389                           tblptrl	equ	0xFF6
 14390                           tablat	equ	0xFF5
 14391                           prodh	equ	0xFF4
 14392                           prodl	equ	0xFF3
 14393                           intcon	equ	0xFF2
 14394                           postinc0	equ	0xFEE
 14395                           wreg	equ	0xFE8
 14396                           postdec1	equ	0xFE5
 14397                           fsr1h	equ	0xFE2
 14398                           fsr1l	equ	0xFE1
 14399                           indf2	equ	0xFDF
 14400                           postinc2	equ	0xFDE
 14401                           postdec2	equ	0xFDD
 14402                           fsr2h	equ	0xFDA
 14403                           fsr2l	equ	0xFD9
 14404                           status	equ	0xFD8
 14405                           
 14406 ;; *************** function _irobot_led_power_on *****************
 14407 ;; Defined at:
 14408 ;;		line 334 in file "Library/iRobotSerial.c"
 14409 ;; Parameters:    Size  Location     Type
 14410 ;;  powerOnColou    1    wreg     unsigned char 
 14411 ;; Auto vars:     Size  Location     Type
 14412 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14413 ;; Return value:  Size  Location     Type
 14414 ;;                  1    wreg      void 
 14415 ;; Registers used:
 14416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14417 ;; Tracked objects:
 14418 ;;		On entry : 0/0
 14419 ;;		On exit  : 0/0
 14420 ;;		Unchanged: 0/0
 14421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14426 ;;Total ram usage:        1 bytes
 14427 ;; Hardware stack levels used:    1
 14428 ;; Hardware stack levels required when called:    9
 14429 ;; This function calls:
 14430 ;;		_irobot_leds
 14431 ;; This function is called by:
 14432 ;;		_init
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           	psect	text52
 14437  016C8E                     __ptext52:
 14438                           	opt stack 0
 14439  016C8E                     _irobot_led_power_on:
 14440                           	opt stack 20
 14441                           
 14442                           ;incstack = 0
 14443                           ;irobot_led_power_on@powerOnColour stored from wreg
 14444  016C8E  0100               	movlb	0	; () banked
 14445  016C90  6FCC               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 14446                           
 14447                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 14448  016C92  0E00               	movlw	0
 14449  016C94  0100               	movlb	0	; () banked
 14450  016C96  6FC8               	movwf	irobot_leds@LEDBit& (0+255),b
 14451  016C98  C0CC  F0C9         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 14452  016C9C  0EFF               	movlw	255
 14453  016C9E  0100               	movlb	0	; () banked
 14454  016CA0  6FCA               	movwf	irobot_leds@powerLuminosity& (0+255),b
 14455  016CA2  0E00               	movlw	0
 14456  016CA4  ECCE  F0B0         	call	_irobot_leds
 14457  016CA8  0012               	return		;funcret
 14458  016CAA                     __end_of_irobot_led_power_on:
 14459                           	opt stack 0
 14460                           tblptru	equ	0xFF8
 14461                           tblptrh	equ	0xFF7
 14462                           tblptrl	equ	0xFF6
 14463                           tablat	equ	0xFF5
 14464                           prodh	equ	0xFF4
 14465                           prodl	equ	0xFF3
 14466                           intcon	equ	0xFF2
 14467                           postinc0	equ	0xFEE
 14468                           wreg	equ	0xFE8
 14469                           postdec1	equ	0xFE5
 14470                           fsr1h	equ	0xFE2
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function _irobot_leds *****************
 14480 ;; Defined at:
 14481 ;;		line 259 in file "Library/iRobotSerial.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  isScript        1    wreg     unsigned char 
 14484 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 14485 ;;  powerColour     1   17[BANK0 ] unsigned char 
 14486 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;  isScript        1   19[BANK0 ] unsigned char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;                  1    wreg      void 
 14491 ;; Registers used:
 14492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14498 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14501 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14502 ;;Total ram usage:        4 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    8
 14505 ;; This function calls:
 14506 ;;		_eusart_putch
 14507 ;;		_load_iRScriptStack
 14508 ;; This function is called by:
 14509 ;;		_irobot_led_power_on
 14510 ;;		_irobot_led_power_off
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           	psect	text53
 14515  01619C                     __ptext53:
 14516                           	opt stack 0
 14517  01619C                     _irobot_leds:
 14518                           	opt stack 20
 14519                           
 14520                           ;incstack = 0
 14521                           ;irobot_leds@isScript stored from wreg
 14522  01619C  0100               	movlb	0	; () banked
 14523  01619E  6FCB               	movwf	irobot_leds@isScript& (0+255),b
 14524                           
 14525                           ;iRobotSerial.c: 260: if (isScript) {
 14526  0161A0  0100               	movlb	0	; () banked
 14527  0161A2  51CB               	movf	irobot_leds@isScript& (0+255),w,b
 14528  0161A4  0100               	movlb	0	; () banked
 14529  0161A6  B4D8               	btfsc	status,2,c
 14530  0161A8  D015               	goto	l2144
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
 14534                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
 14535  0161AA  0E00               	movlw	0
 14536  0161AC  0100               	movlb	0	; () banked
 14537  0161AE  6FB9               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 14538  0161B0  0E8B               	movlw	139
 14539  0161B2  6FB8               	movwf	?_load_iRScriptStack& (0+255),b
 14540  0161B4  C0C8  F0BA         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 14541  0161B8  0100               	movlb	0	; () banked
 14542  0161BA  6BBB               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 14543  0161BC  C0C9  F0BC         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 14544  0161C0  0100               	movlb	0	; () banked
 14545  0161C2  6BBD               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 14546  0161C4  C0CA  F0BE         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 14547  0161C8  0100               	movlb	0	; () banked
 14548  0161CA  6BBF               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 14549  0161CC  0E04               	movlw	4
 14550  0161CE  ECDA  F0AE         	call	_load_iRScriptStack
 14551                           
 14552                           ;iRobotSerial.c: 263: } else {
 14553  0161D2  0012               	return	
 14554  0161D4                     l2144:
 14555                           
 14556                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
 14557  0161D4  0E8B               	movlw	139
 14558  0161D6  EC22  F0B7         	call	_eusart_putch
 14559                           
 14560                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
 14561  0161DA  0100               	movlb	0	; () banked
 14562  0161DC  51C8               	movf	irobot_leds@LEDBit& (0+255),w,b
 14563  0161DE  EC22  F0B7         	call	_eusart_putch
 14564                           
 14565                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
 14566  0161E2  0100               	movlb	0	; () banked
 14567  0161E4  51C9               	movf	irobot_leds@powerColour& (0+255),w,b
 14568  0161E6  EC22  F0B7         	call	_eusart_putch
 14569                           
 14570                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
 14571  0161EA  0100               	movlb	0	; () banked
 14572  0161EC  51CA               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 14573  0161EE  EC22  F0B7         	call	_eusart_putch
 14574  0161F2  0012               	return	
 14575  0161F4                     __end_of_irobot_leds:
 14576                           	opt stack 0
 14577                           tblptru	equ	0xFF8
 14578                           tblptrh	equ	0xFF7
 14579                           tblptrl	equ	0xFF6
 14580                           tablat	equ	0xFF5
 14581                           prodh	equ	0xFF4
 14582                           prodl	equ	0xFF3
 14583                           intcon	equ	0xFF2
 14584                           postinc0	equ	0xFEE
 14585                           wreg	equ	0xFE8
 14586                           postdec1	equ	0xFE5
 14587                           fsr1h	equ	0xFE2
 14588                           fsr1l	equ	0xFE1
 14589                           indf2	equ	0xFDF
 14590                           postinc2	equ	0xFDE
 14591                           postdec2	equ	0xFDD
 14592                           fsr2h	equ	0xFDA
 14593                           fsr2l	equ	0xFD9
 14594                           status	equ	0xFD8
 14595                           
 14596 ;; *************** function _load_iRScriptStack *****************
 14597 ;; Defined at:
 14598 ;;		line 190 in file "Library/iRobotSerial.c"
 14599 ;; Parameters:    Size  Location     Type
 14600 ;;  bytesToLoad     1    wreg     unsigned char 
 14601 ;; Auto vars:     Size  Location     Type
 14602 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 14603 ;;  i               1   15[BANK0 ] unsigned char 
 14604 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 14605 ;;		 -> ?_load_iRScriptStack(1), 
 14606 ;; Return value:  Size  Location     Type
 14607 ;;                  1    wreg      void 
 14608 ;; Registers used:
 14609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14615 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14616 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;Total ram usage:       16 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    7
 14622 ;; This function calls:
 14623 ;;		Nothing
 14624 ;; This function is called by:
 14625 ;;		_irobot_move
 14626 ;;		_irobot_leds
 14627 ;;		_irobot_angle_wait
 14628 ;;		_irobot_distance_wait
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           	psect	text54
 14633  015DB4                     __ptext54:
 14634                           	opt stack 0
 14635  015DB4                     _load_iRScriptStack:
 14636                           	opt stack 19
 14637                           
 14638                           ;incstack = 0
 14639                           ;load_iRScriptStack@bytesToLoad stored from wreg
 14640  015DB4  0100               	movlb	0	; () banked
 14641  015DB6  6FC6               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 14642                           
 14643                           ;iRobotSerial.c: 191: va_list loadByte;
 14644                           ;iRobotSerial.c: 192: *loadByte = __va_start();
 14645  015DB8  0EB8               	movlw	low ?_load_iRScriptStack
 14646  015DBA  0100               	movlb	0	; () banked
 14647  015DBC  6FC4               	movwf	load_iRScriptStack@loadByte& (0+255),b
 14648  015DBE  0E00               	movlw	high ?_load_iRScriptStack
 14649  015DC0  0100               	movlb	0	; () banked
 14650  015DC2  6FC5               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 14651                           
 14652                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
 14653  015DC4  0E00               	movlw	0
 14654  015DC6  0100               	movlb	0	; () banked
 14655  015DC8  6FC7               	movwf	load_iRScriptStack@i& (0+255),b
 14656  015DCA  D01F               	goto	l2118
 14657  015DCC                     
 14658                           ; BSR set to: 0
 14659                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 14660                           
 14661                           ; BSR set to: 0
 14662  015DCC  C0C4  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 14663  015DD0  C0C5  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 14664  015DD4  0100               	movlb	0	; () banked
 14665  015DD6  51C7               	movf	load_iRScriptStack@i& (0+255),w,b
 14666  015DD8  C037  F0C2         	movff	_iRScriptIndex,??_load_iRScriptStack
 14667  015DDC  0100               	movlb	0	; () banked
 14668  015DDE  6BC3               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 14669  015DE0  0100               	movlb	0	; () banked
 14670  015DE2  27C2               	addwf	??_load_iRScriptStack& (0+255),f,b
 14671  015DE4  0E00               	movlw	0
 14672  015DE6  23C3               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 14673  015DE8  0E00               	movlw	low _iRScriptStack
 14674  015DEA  0100               	movlb	0	; () banked
 14675  015DEC  25C2               	addwf	??_load_iRScriptStack& (0+255),w,b
 14676  015DEE  6EE1               	movwf	fsr1l,c
 14677  015DF0  0E04               	movlw	high _iRScriptStack
 14678  015DF2  0100               	movlb	0	; () banked
 14679  015DF4  21C3               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 14680  015DF6  6EE2               	movwf	fsr1h,c
 14681  015DF8  CFDF FFE7          	movff	indf2,indf1
 14682                           
 14683                           ; BSR set to: 0
 14684  015DFC  0E02               	movlw	2
 14685  015DFE  0100               	movlb	0	; () banked
 14686  015E00  27C4               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 14687  015E02  0E00               	movlw	0
 14688  015E04  23C5               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 14689                           
 14690                           ; BSR set to: 0
 14691  015E06  0100               	movlb	0	; () banked
 14692  015E08  2BC7               	incf	load_iRScriptStack@i& (0+255),f,b
 14693  015E0A                     l2118:
 14694                           
 14695                           ; BSR set to: 0
 14696                           
 14697                           ; BSR set to: 0
 14698  015E0A  0100               	movlb	0	; () banked
 14699  015E0C  51C6               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14700  015E0E  0100               	movlb	0	; () banked
 14701  015E10  5DC7               	subwf	load_iRScriptStack@i& (0+255),w,b
 14702  015E12  A0D8               	btfss	status,0,c
 14703  015E14  D7DB               	goto	l2119
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;iRobotSerial.c: 195: }
 14707                           ;iRobotSerial.c: 196: ;
 14708                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
 14709                           
 14710                           ; BSR set to: 0
 14711  015E16  0100               	movlb	0	; () banked
 14712  015E18  51C6               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14713  015E1A  2637               	addwf	_iRScriptIndex,f,c
 14714                           
 14715                           ; BSR set to: 0
 14716  015E1C  0012               	return		;funcret
 14717  015E1E                     __end_of_load_iRScriptStack:
 14718                           	opt stack 0
 14719                           tblptru	equ	0xFF8
 14720                           tblptrh	equ	0xFF7
 14721                           tblptrl	equ	0xFF6
 14722                           tablat	equ	0xFF5
 14723                           prodh	equ	0xFF4
 14724                           prodl	equ	0xFF3
 14725                           intcon	equ	0xFF2
 14726                           postinc0	equ	0xFEE
 14727                           wreg	equ	0xFE8
 14728                           indf1	equ	0xFE7
 14729                           postdec1	equ	0xFE5
 14730                           fsr1h	equ	0xFE2
 14731                           fsr1l	equ	0xFE1
 14732                           indf2	equ	0xFDF
 14733                           postinc2	equ	0xFDE
 14734                           postdec2	equ	0xFDD
 14735                           fsr2h	equ	0xFDA
 14736                           fsr2l	equ	0xFD9
 14737                           status	equ	0xFD8
 14738                           
 14739 ;; *************** function _irobot_init_song_0 *****************
 14740 ;; Defined at:
 14741 ;;		line 271 in file "Library/iRobotSerial.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;		None
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;		None
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      void 
 14748 ;; Registers used:
 14749 ;;		wreg, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;Total ram usage:        0 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    8
 14762 ;; This function calls:
 14763 ;;		_eusart_putch
 14764 ;; This function is called by:
 14765 ;;		_init
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769                           	psect	text55
 14770  016B7E                     __ptext55:
 14771                           	opt stack 0
 14772  016B7E                     _irobot_init_song_0:
 14773                           	opt stack 21
 14774                           
 14775                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;incstack = 0
 14779  016B7E  0E8C               	movlw	140
 14780  016B80  EC22  F0B7         	call	_eusart_putch
 14781                           
 14782                           ;iRobotSerial.c: 273: eusart_putch(0);
 14783  016B84  0E00               	movlw	0
 14784  016B86  EC22  F0B7         	call	_eusart_putch
 14785                           
 14786                           ;iRobotSerial.c: 274: eusart_putch(1);
 14787  016B8A  0E01               	movlw	1
 14788  016B8C  EC22  F0B7         	call	_eusart_putch
 14789                           
 14790                           ;iRobotSerial.c: 275: eusart_putch(60);
 14791  016B90  0E3C               	movlw	60
 14792  016B92  EC22  F0B7         	call	_eusart_putch
 14793                           
 14794                           ;iRobotSerial.c: 276: eusart_putch(4);
 14795  016B96  0E04               	movlw	4
 14796  016B98  EC22  F0B7         	call	_eusart_putch
 14797  016B9C  0012               	return		;funcret
 14798  016B9E                     __end_of_irobot_init_song_0:
 14799                           	opt stack 0
 14800                           tblptru	equ	0xFF8
 14801                           tblptrh	equ	0xFF7
 14802                           tblptrl	equ	0xFF6
 14803                           tablat	equ	0xFF5
 14804                           prodh	equ	0xFF4
 14805                           prodl	equ	0xFF3
 14806                           intcon	equ	0xFF2
 14807                           postinc0	equ	0xFEE
 14808                           wreg	equ	0xFE8
 14809                           indf1	equ	0xFE7
 14810                           postdec1	equ	0xFE5
 14811                           fsr1h	equ	0xFE2
 14812                           fsr1l	equ	0xFE1
 14813                           indf2	equ	0xFDF
 14814                           postinc2	equ	0xFDE
 14815                           postdec2	equ	0xFDD
 14816                           fsr2h	equ	0xFDA
 14817                           fsr2l	equ	0xFD9
 14818                           status	equ	0xFD8
 14819                           
 14820 ;; *************** function _irobot_init *****************
 14821 ;; Defined at:
 14822 ;;		line 215 in file "Library/iRobotSerial.c"
 14823 ;; Parameters:    Size  Location     Type
 14824 ;;		None
 14825 ;; Auto vars:     Size  Location     Type
 14826 ;;		None
 14827 ;; Return value:  Size  Location     Type
 14828 ;;                  1    wreg      void 
 14829 ;; Registers used:
 14830 ;;		wreg, cstack
 14831 ;; Tracked objects:
 14832 ;;		On entry : 0/0
 14833 ;;		On exit  : 0/0
 14834 ;;		Unchanged: 0/0
 14835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14840 ;;Total ram usage:        0 bytes
 14841 ;; Hardware stack levels used:    1
 14842 ;; Hardware stack levels required when called:    8
 14843 ;; This function calls:
 14844 ;;		_eusart_putch
 14845 ;; This function is called by:
 14846 ;;		_init
 14847 ;; This function uses a non-reentrant model
 14848 ;;
 14849                           
 14850                           	psect	text56
 14851  016E36                     __ptext56:
 14852                           	opt stack 0
 14853  016E36                     _irobot_init:
 14854                           	opt stack 21
 14855                           
 14856                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
 14857                           
 14858                           ;incstack = 0
 14859  016E36  0E80               	movlw	128
 14860  016E38  EC22  F0B7         	call	_eusart_putch
 14861                           
 14862                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
 14863  016E3C  0E84               	movlw	132
 14864  016E3E  EC22  F0B7         	call	_eusart_putch
 14865  016E42  0012               	return		;funcret
 14866  016E44                     __end_of_irobot_init:
 14867                           	opt stack 0
 14868                           tblptru	equ	0xFF8
 14869                           tblptrh	equ	0xFF7
 14870                           tblptrl	equ	0xFF6
 14871                           tablat	equ	0xFF5
 14872                           prodh	equ	0xFF4
 14873                           prodl	equ	0xFF3
 14874                           intcon	equ	0xFF2
 14875                           postinc0	equ	0xFEE
 14876                           wreg	equ	0xFE8
 14877                           indf1	equ	0xFE7
 14878                           postdec1	equ	0xFE5
 14879                           fsr1h	equ	0xFE2
 14880                           fsr1l	equ	0xFE1
 14881                           indf2	equ	0xFDF
 14882                           postinc2	equ	0xFDE
 14883                           postdec2	equ	0xFDD
 14884                           fsr2h	equ	0xFDA
 14885                           fsr2l	equ	0xFD9
 14886                           status	equ	0xFD8
 14887                           
 14888 ;; *************** function _eusart_putch *****************
 14889 ;; Defined at:
 14890 ;;		line 130 in file "Library/iRobotSerial.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  eusartSendCh    1    wreg     unsigned char 
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      void 
 14897 ;; Registers used:
 14898 ;;		wreg
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;Total ram usage:        1 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    7
 14911 ;; This function calls:
 14912 ;;		Nothing
 14913 ;; This function is called by:
 14914 ;;		_irobot_query_and_update
 14915 ;;		_irobot_init
 14916 ;;		_irobot_move
 14917 ;;		_irobot_leds
 14918 ;;		_irobot_init_song_0
 14919 ;;		_irobot_song_play
 14920 ;;		_irobot_script_play
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           	psect	text57
 14925  016E44                     __ptext57:
 14926                           	opt stack 0
 14927  016E44                     _eusart_putch:
 14928                           	opt stack 20
 14929                           
 14930                           ;incstack = 0
 14931                           ;eusart_putch@eusartSendChar stored from wreg
 14932  016E44  0100               	movlb	0	; () banked
 14933  016E46  6FB8               	movwf	eusart_putch@eusartSendChar& (0+255),b
 14934  016E48                     
 14935                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
 14936  016E48  A2AD               	btfss	4013,1,c	;volatile
 14937  016E4A  D7FE               	goto	l13128
 14938                           
 14939                           ;iRobotSerial.c: 132: };
 14940                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
 14941  016E4C  C0B8  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 14942  016E50  0012               	return		;funcret
 14943  016E52                     __end_of_eusart_putch:
 14944                           	opt stack 0
 14945                           tblptru	equ	0xFF8
 14946                           tblptrh	equ	0xFF7
 14947                           tblptrl	equ	0xFF6
 14948                           tablat	equ	0xFF5
 14949                           prodh	equ	0xFF4
 14950                           prodl	equ	0xFF3
 14951                           intcon	equ	0xFF2
 14952                           postinc0	equ	0xFEE
 14953                           wreg	equ	0xFE8
 14954                           indf1	equ	0xFE7
 14955                           postdec1	equ	0xFE5
 14956                           fsr1h	equ	0xFE2
 14957                           fsr1l	equ	0xFE1
 14958                           indf2	equ	0xFDF
 14959                           postinc2	equ	0xFDE
 14960                           postdec2	equ	0xFDD
 14961                           fsr2h	equ	0xFDA
 14962                           fsr2l	equ	0xFD9
 14963                           status	equ	0xFD8
 14964                           
 14965 ;; *************** function _eusart_init *****************
 14966 ;; Defined at:
 14967 ;;		line 113 in file "Library/iRobotSerial.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;		None
 14970 ;; Auto vars:     Size  Location     Type
 14971 ;;		None
 14972 ;; Return value:  Size  Location     Type
 14973 ;;                  1    wreg      void 
 14974 ;; Registers used:
 14975 ;;		wreg, status,2
 14976 ;; Tracked objects:
 14977 ;;		On entry : 0/0
 14978 ;;		On exit  : 0/0
 14979 ;;		Unchanged: 0/0
 14980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14985 ;;Total ram usage:        0 bytes
 14986 ;; Hardware stack levels used:    1
 14987 ;; Hardware stack levels required when called:    7
 14988 ;; This function calls:
 14989 ;;		Nothing
 14990 ;; This function is called by:
 14991 ;;		_init
 14992 ;; This function uses a non-reentrant model
 14993 ;;
 14994                           
 14995                           	psect	text58
 14996  016BBC                     __ptext58:
 14997                           	opt stack 0
 14998  016BBC                     _eusart_init:
 14999                           	opt stack 22
 15000                           
 15001                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
 15002                           
 15003                           ;incstack = 0
 15004  016BBC  9C94               	bcf	3988,6,c	;volatile
 15005                           
 15006                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
 15007  016BBE  8E94               	bsf	3988,7,c	;volatile
 15008                           
 15009                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
 15010  016BC0  0E24               	movlw	36
 15011  016BC2  6EAD               	movwf	4013,c	;volatile
 15012                           
 15013                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
 15014  016BC4  0E98               	movlw	152
 15015  016BC6  6EAC               	movwf	4012,c	;volatile
 15016                           
 15017                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
 15018  016BC8  9A7E               	bcf	3966,5,c	;volatile
 15019                           
 15020                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
 15021  016BCA  987E               	bcf	3966,4,c	;volatile
 15022                           
 15023                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
 15024  016BCC  927E               	bcf	3966,1,c	;volatile
 15025                           
 15026                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
 15027  016BCE  907E               	bcf	3966,0,c	;volatile
 15028                           
 15029                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
 15030  016BD0  84AD               	bsf	4013,2,c	;volatile
 15031                           
 15032                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
 15033  016BD2  967E               	bcf	3966,3,c	;volatile
 15034                           
 15035                           ;iRobotSerial.c: 127: SPBRG1 = 51;
 15036  016BD4  0E33               	movlw	51
 15037  016BD6  6EB0               	movwf	4016,c	;volatile
 15038  016BD8  0012               	return		;funcret
 15039  016BDA                     __end_of_eusart_init:
 15040                           	opt stack 0
 15041                           tblptru	equ	0xFF8
 15042                           tblptrh	equ	0xFF7
 15043                           tblptrl	equ	0xFF6
 15044                           tablat	equ	0xFF5
 15045                           prodh	equ	0xFF4
 15046                           prodl	equ	0xFF3
 15047                           intcon	equ	0xFF2
 15048                           postinc0	equ	0xFEE
 15049                           wreg	equ	0xFE8
 15050                           indf1	equ	0xFE7
 15051                           postdec1	equ	0xFE5
 15052                           fsr1h	equ	0xFE2
 15053                           fsr1l	equ	0xFE1
 15054                           indf2	equ	0xFDF
 15055                           postinc2	equ	0xFDE
 15056                           postdec2	equ	0xFDD
 15057                           fsr2h	equ	0xFDA
 15058                           fsr2l	equ	0xFD9
 15059                           status	equ	0xFD8
 15060                           
 15061 ;; *************** function _Motor_Init *****************
 15062 ;; Defined at:
 15063 ;;		line 26 in file "Library/Motor.c"
 15064 ;; Parameters:    Size  Location     Type
 15065 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 15066 ;;		 -> Stepper(6), 
 15067 ;;  pAddress        2   47[BANK0 ] unsigned short 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;		None
 15070 ;; Return value:  Size  Location     Type
 15071 ;;                  1    wreg      void 
 15072 ;; Registers used:
 15073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15082 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15083 ;;Total ram usage:        4 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:   12
 15086 ;; This function calls:
 15087 ;;		_Port_SetPin
 15088 ;;		_Port_SetPinType
 15089 ;;		_Timer0_Init
 15090 ;; This function is called by:
 15091 ;;		_init
 15092 ;; This function uses a non-reentrant model
 15093 ;;
 15094                           
 15095                           	psect	text59
 15096  014416                     __ptext59:
 15097                           	opt stack 0
 15098  014416                     _Motor_Init:
 15099                           	opt stack 17
 15100                           
 15101                           ;Motor.c: 28: pMotor->mDelta = 0;
 15102                           
 15103                           ;incstack = 0
 15104  014416  C0E5  FFD9         	movff	Motor_Init@pMotor,fsr2l
 15105  01441A  C0E6  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 15106  01441E  0E00               	movlw	0
 15107  014420  6EDE               	movwf	postinc2,c
 15108  014422  0E00               	movlw	0
 15109  014424  6EDD               	movwf	postdec2,c
 15110                           
 15111                           ;Motor.c: 29: pMotor->mFrequency = 0;
 15112  014426  0100               	movlb	0	; () banked
 15113  014428  EE20 F002          	lfsr	2,2
 15114  01442C  51E5               	movf	Motor_Init@pMotor& (0+255),w,b
 15115  01442E  26D9               	addwf	fsr2l,f,c
 15116  014430  51E6               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15117  014432  22DA               	addwfc	fsr2h,f,c
 15118  014434  0E00               	movlw	0
 15119  014436  6EDE               	movwf	postinc2,c
 15120  014438  0E00               	movlw	0
 15121  01443A  6EDD               	movwf	postdec2,c
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 15125  01443C  0100               	movlb	0	; () banked
 15126  01443E  EE20 F004          	lfsr	2,4
 15127  014442  51E5               	movf	Motor_Init@pMotor& (0+255),w,b
 15128  014444  26D9               	addwf	fsr2l,f,c
 15129  014446  51E6               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15130  014448  22DA               	addwfc	fsr2h,f,c
 15131  01444A  C0E7  FFDE         	movff	Motor_Init@pAddress,postinc2
 15132  01444E  C0E8  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15136  014452  0E8F               	movlw	low _PortE
 15137  014454  0100               	movlb	0	; () banked
 15138  014456  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 15139  014458  0E00               	movlw	high _PortE
 15140  01445A  0100               	movlb	0	; () banked
 15141  01445C  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15142  01445E  0E00               	movlw	0
 15143  014460  0100               	movlb	0	; () banked
 15144  014462  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 15145  014464  0E03               	movlw	3
 15146  014466  0100               	movlb	0	; () banked
 15147  014468  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 15148  01446A  ECB5  F095         	call	_Port_SetPinType	;wreg free
 15149                           
 15150                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15151  01446E  0E8F               	movlw	low _PortE
 15152  014470  0100               	movlb	0	; () banked
 15153  014472  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 15154  014474  0E00               	movlw	high _PortE
 15155  014476  0100               	movlb	0	; () banked
 15156  014478  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15157  01447A  0E01               	movlw	1
 15158  01447C  0100               	movlb	0	; () banked
 15159  01447E  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 15160  014480  0E03               	movlw	3
 15161  014482  0100               	movlb	0	; () banked
 15162  014484  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 15163  014486  ECB5  F095         	call	_Port_SetPinType	;wreg free
 15164                           
 15165                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15166  01448A  0E8F               	movlw	low _PortE
 15167  01448C  0100               	movlb	0	; () banked
 15168  01448E  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15169  014490  0E00               	movlw	high _PortE
 15170  014492  0100               	movlb	0	; () banked
 15171  014494  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15172  014496  0E00               	movlw	0
 15173  014498  0100               	movlb	0	; () banked
 15174  01449A  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15175  01449C  0E00               	movlw	0
 15176  01449E  0100               	movlb	0	; () banked
 15177  0144A0  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15178  0144A2  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 15179                           
 15180                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15181  0144A6  0E8F               	movlw	low _PortE
 15182  0144A8  0100               	movlb	0	; () banked
 15183  0144AA  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15184  0144AC  0E00               	movlw	high _PortE
 15185  0144AE  0100               	movlb	0	; () banked
 15186  0144B0  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15187  0144B2  0E01               	movlw	1
 15188  0144B4  0100               	movlb	0	; () banked
 15189  0144B6  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15190  0144B8  0E00               	movlw	0
 15191  0144BA  0100               	movlb	0	; () banked
 15192  0144BC  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15193  0144BE  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 15194                           
 15195                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15196  0144C2  0E78               	movlw	low _Motor_Step
 15197  0144C4  0100               	movlb	0	; () banked
 15198  0144C6  6F63               	movwf	_lStepFunction& (0+255),b
 15199  0144C8  0E3A               	movlw	high _Motor_Step
 15200  0144CA  0100               	movlb	0	; () banked
 15201  0144CC  6F64               	movwf	(_lStepFunction+1)& (0+255),b
 15202  0144CE  0E01               	movlw	low (_Motor_Step shr (0+16))
 15203  0144D0  0100               	movlb	0	; () banked
 15204  0144D2  6F65               	movwf	(_lStepFunction+2)& (0+255),b
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;Motor.c: 39: Timer0_Init(1000);
 15208  0144D4  0EE8               	movlw	232
 15209  0144D6  0100               	movlb	0	; () banked
 15210  0144D8  6FC5               	movwf	Timer0_Init@pFrequency& (0+255),b
 15211  0144DA  0E03               	movlw	3
 15212  0144DC  6FC6               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15213  0144DE  0E00               	movlw	0
 15214  0144E0  6FC7               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15215  0144E2  0E00               	movlw	0
 15216  0144E4  6FC8               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15217  0144E6  ECDC  F09B         	call	_Timer0_Init	;wreg free
 15218  0144EA  0012               	return		;funcret
 15219  0144EC                     __end_of_Motor_Init:
 15220                           	opt stack 0
 15221                           tblptru	equ	0xFF8
 15222                           tblptrh	equ	0xFF7
 15223                           tblptrl	equ	0xFF6
 15224                           tablat	equ	0xFF5
 15225                           prodh	equ	0xFF4
 15226                           prodl	equ	0xFF3
 15227                           intcon	equ	0xFF2
 15228                           postinc0	equ	0xFEE
 15229                           wreg	equ	0xFE8
 15230                           indf1	equ	0xFE7
 15231                           postdec1	equ	0xFE5
 15232                           fsr1h	equ	0xFE2
 15233                           fsr1l	equ	0xFE1
 15234                           indf2	equ	0xFDF
 15235                           postinc2	equ	0xFDE
 15236                           postdec2	equ	0xFDD
 15237                           fsr2h	equ	0xFDA
 15238                           fsr2l	equ	0xFD9
 15239                           status	equ	0xFD8
 15240                           
 15241 ;; *************** function _Timer0_Init *****************
 15242 ;; Defined at:
 15243 ;;		line 25 in file "Library/Timer0.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 15248 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15258 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;Total ram usage:       14 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; Hardware stack levels required when called:    8
 15265 ;; This function calls:
 15266 ;;		_Timer0_Clear
 15267 ;;		___lldiv
 15268 ;; This function is called by:
 15269 ;;		_Motor_Init
 15270 ;;		_Motor_Speed
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           	psect	text60
 15275  0137B8                     __ptext60:
 15276                           	opt stack 0
 15277  0137B8                     _Timer0_Init:
 15278                           	opt stack 19
 15279                           
 15280                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 15281                           
 15282                           ;incstack = 0
 15283  0137B8  0E80               	movlw	128
 15284  0137BA  0100               	movlb	0	; () banked
 15285  0137BC  6FCB               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15286  0137BE  0E8D               	movlw	141
 15287  0137C0  6FCC               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15288  0137C2  0E5B               	movlw	91
 15289  0137C4  6FCD               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15290  0137C6  0E00               	movlw	0
 15291  0137C8  6FCE               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15295                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15296                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15297                           ;Timer0.c: 34: UINT32 DIVIDE;
 15298                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15299  0137CA  9ED5               	bcf	4053,7,c	;volatile
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;Timer0.c: 38: if (pFrequency == 0)
 15303  0137CC  0100               	movlb	0	; () banked
 15304  0137CE  51C5               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15305  0137D0  0100               	movlb	0	; () banked
 15306  0137D2  11C6               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15307  0137D4  0100               	movlb	0	; () banked
 15308  0137D6  11C7               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15309  0137D8  0100               	movlb	0	; () banked
 15310  0137DA  11C8               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15311  0137DC  B4D8               	btfsc	status,2,c
 15312  0137DE  0012               	return	
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;Timer0.c: 39: return;
 15319  0137E0  96D5               	bcf	4053,3,c	;volatile
 15320                           
 15321                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15322  0137E2  9CD5               	bcf	4053,6,c	;volatile
 15323                           
 15324                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15325  0137E4  9AD5               	bcf	4053,5,c	;volatile
 15326                           
 15327                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15328  0137E6  98D5               	bcf	4053,4,c	;volatile
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15332  0137E8  C0CB  F0B8         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15333  0137EC  C0CC  F0B9         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15334  0137F0  C0CD  F0BA         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15335  0137F4  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15336  0137F8  C0C5  F0BC         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15337  0137FC  C0C6  F0BD         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15338  013800  C0C7  F0BE         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15339  013804  C0C8  F0BF         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15340  013808  EC33  F0A5         	call	___lldiv	;wreg free
 15341  01380C  C0B8  F0CF         	movff	?___lldiv,Timer0_Init@DIVIDE
 15342  013810  C0B9  F0D0         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15343  013814  C0BA  F0D1         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15344  013818  C0BB  F0D2         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15345                           
 15346                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15347  01381C  D00C               	goto	l1787
 15348  01381E                     l14308:
 15349                           
 15350                           ;Timer0.c: 50: {
 15351                           ;Timer0.c: 51: INDEX ++;
 15352  01381E  0100               	movlb	0	; () banked
 15353  013820  2B8B               	incf	_INDEX& (0+255),f,b
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;Timer0.c: 52: if (INDEX >= 3)
 15357  013822  0E02               	movlw	2
 15358  013824  0100               	movlb	0	; () banked
 15359  013826  658B               	cpfsgt	_INDEX& (0+255),b
 15360  013828  D001               	goto	l1785
 15361  01382A  D02F               	goto	u11160
 15362  01382C                     l1785:
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;Timer0.c: 56: if (INDEX >= 8)
 15366                           
 15367                           ; BSR set to: 0
 15368  01382C  0E07               	movlw	7
 15369  01382E  0100               	movlb	0	; () banked
 15370  013830  658B               	cpfsgt	_INDEX& (0+255),b
 15371  013832  D001               	goto	l1787
 15372  013834  0012               	return	
 15373  013836                     l1787:
 15374                           
 15375                           ; BSR set to: 0
 15376                           
 15377                           ; BSR set to: 0
 15378  013836  C0CF  F0B8         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 15379  01383A  C0D0  F0B9         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 15380  01383E  C0D1  F0BA         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 15381  013842  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 15382  013846  0100               	movlb	0	; () banked
 15383  013848  518B               	movf	_INDEX& (0+255),w,b
 15384  01384A  0D02               	mullw	2
 15385  01384C  0EE5               	movlw	low Timer0_Init@PRESCALE
 15386  01384E  24F3               	addwf	prodl,w,c
 15387  013850  6EF6               	movwf	tblptrl,c
 15388  013852  0EFC               	movlw	high Timer0_Init@PRESCALE
 15389  013854  20F4               	addwfc	prodh,w,c
 15390  013856  6EF7               	movwf	tblptrh,c
 15391  013858                     	if	1	;There are 3 active tblptr bytes
 15392  013858  6AF8               	clrf	tblptru,c
 15393  01385A  0E00               	movlw	low (__mediumconst shr (0+16))
 15394  01385C  22F8               	addwfc	tblptru,f,c
 15395  01385E                     	endif
 15396  01385E  0009               	tblrd		*+
 15397  013860  CFF5 F0C9          	movff	tablat,??_Timer0_Init
 15398  013864  0009               	tblrd		*+
 15399  013866  CFF5 F0CA          	movff	tablat,??_Timer0_Init+1
 15400  01386A  C0C9  F0BC         	movff	??_Timer0_Init,___lldiv@divisor
 15401  01386E  C0CA  F0BD         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 15402  013872  0100               	movlb	0	; () banked
 15403  013874  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 15404  013876  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 15405  013878  EC33  F0A5         	call	___lldiv	;wreg free
 15406  01387C  0100               	movlb	0	; () banked
 15407  01387E  51BB               	movf	(?___lldiv+3)& (0+255),w,b
 15408  013880  E1CE               	bnz	l14308
 15409  013882  0100               	movlb	0	; () banked
 15410  013884  05BA               	decf	(?___lldiv+2)& (0+255),w,b
 15411  013886  B0D8               	btfsc	status,0,c
 15412  013888  D7CA               	goto	l1784
 15413  01388A                     u11160:
 15414                           
 15415                           ; BSR set to: 0
 15416                           ;Timer0.c: 58: }
 15417                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 15418                           
 15419                           ; BSR set to: 0
 15420  01388A  0100               	movlb	0	; () banked
 15421  01388C  518B               	movf	_INDEX& (0+255),w,b
 15422  01388E  0D02               	mullw	2
 15423  013890  0EE5               	movlw	low Timer0_Init@PRESCALE
 15424  013892  24F3               	addwf	prodl,w,c
 15425  013894  6EF6               	movwf	tblptrl,c
 15426  013896  0EFC               	movlw	high Timer0_Init@PRESCALE
 15427  013898  20F4               	addwfc	prodh,w,c
 15428  01389A  6EF7               	movwf	tblptrh,c
 15429  01389C                     	if	1	;There are 3 active tblptr bytes
 15430  01389C  6AF8               	clrf	tblptru,c
 15431  01389E  0E00               	movlw	low (__mediumconst shr (0+16))
 15432  0138A0  22F8               	addwfc	tblptru,f,c
 15433  0138A2                     	endif
 15434  0138A2  0008               	tblrd		*
 15435  0138A4  CFF5 F08A          	movff	tablat,Timer0_Init@PRE
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 15439  0138A8  0EFF               	movlw	255
 15440  0138AA  0100               	movlb	0	; () banked
 15441  0138AC  25CF               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 15442  0138AE  0103               	movlb	3	; () banked
 15443  0138B0  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 15444  0138B2  0EFF               	movlw	255
 15445  0138B4  0100               	movlb	0	; () banked
 15446  0138B6  21D0               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 15447  0138B8  0103               	movlb	3	; () banked
 15448  0138BA  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 15449  0138BC  0EFF               	movlw	255
 15450  0138BE  0100               	movlb	0	; () banked
 15451  0138C0  21D1               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 15452  0138C2  0103               	movlb	3	; () banked
 15453  0138C4  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 15454  0138C6  0EFF               	movlw	255
 15455  0138C8  0100               	movlb	0	; () banked
 15456  0138CA  21D2               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 15457  0138CC  0103               	movlb	3	; () banked
 15458  0138CE  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 15459                           
 15460                           ; BSR set to: 3
 15461                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 15462  0138D0  C32A  F0B8         	movff	Timer0_Init@DIV,___lldiv@dividend
 15463  0138D4  C32B  F0B9         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 15464  0138D8  C32C  F0BA         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 15465  0138DC  C32D  F0BB         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 15466  0138E0  0100               	movlb	0	; () banked
 15467  0138E2  518A               	movf	Timer0_Init@PRE& (0+255),w,b
 15468  0138E4  0100               	movlb	0	; () banked
 15469  0138E6  6FBC               	movwf	___lldiv@divisor& (0+255),b
 15470  0138E8  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 15471  0138EA  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 15472  0138EC  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 15473  0138EE  EC33  F0A5         	call	___lldiv	;wreg free
 15474  0138F2  0100               	movlb	0	; () banked
 15475  0138F4  1FB8               	comf	?___lldiv& (0+255),f,b
 15476  0138F6  0100               	movlb	0	; () banked
 15477  0138F8  1FB9               	comf	(?___lldiv+1)& (0+255),f,b
 15478  0138FA  0100               	movlb	0	; () banked
 15479  0138FC  4BB8               	infsnz	?___lldiv& (0+255),f,b
 15480  0138FE  2BB9               	incf	(?___lldiv+1)& (0+255),f,b
 15481  013900  0EFF               	movlw	255
 15482  013902  0100               	movlb	0	; () banked
 15483  013904  25B8               	addwf	?___lldiv& (0+255),w,b
 15484  013906  6E29               	movwf	_COUNTER,c
 15485  013908  0EFF               	movlw	255
 15486  01390A  0100               	movlb	0	; () banked
 15487  01390C  21B9               	addwfc	(?___lldiv+1)& (0+255),w,b
 15488  01390E  6E2A               	movwf	_COUNTER+1,c
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;Timer0.c: 68: Timer0_Clear();
 15492  013910  EC3E  F0B7         	call	_Timer0_Clear	;wreg free
 15493                           
 15494                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 15495  013914  8ED5               	bsf	4053,7,c	;volatile
 15496  013916  0012               	return		;funcret
 15497  013918                     __end_of_Timer0_Init:
 15498                           	opt stack 0
 15499                           tblptru	equ	0xFF8
 15500                           tblptrh	equ	0xFF7
 15501                           tblptrl	equ	0xFF6
 15502                           tablat	equ	0xFF5
 15503                           prodh	equ	0xFF4
 15504                           prodl	equ	0xFF3
 15505                           intcon	equ	0xFF2
 15506                           postinc0	equ	0xFEE
 15507                           wreg	equ	0xFE8
 15508                           indf1	equ	0xFE7
 15509                           postdec1	equ	0xFE5
 15510                           fsr1h	equ	0xFE2
 15511                           fsr1l	equ	0xFE1
 15512                           indf2	equ	0xFDF
 15513                           postinc2	equ	0xFDE
 15514                           postdec2	equ	0xFDD
 15515                           fsr2h	equ	0xFDA
 15516                           fsr2l	equ	0xFD9
 15517                           status	equ	0xFD8
 15518                           
 15519 ;; *************** function _Timer0_Clear *****************
 15520 ;; Defined at:
 15521 ;;		line 20 in file "Library/Timer0.c"
 15522 ;; Parameters:    Size  Location     Type
 15523 ;;		None
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;		None
 15526 ;; Return value:  Size  Location     Type
 15527 ;;                  1    wreg      void 
 15528 ;; Registers used:
 15529 ;;		None
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15539 ;;Total ram usage:        0 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    7
 15542 ;; This function calls:
 15543 ;;		Nothing
 15544 ;; This function is called by:
 15545 ;;		_Timer0_Init
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           	psect	text61
 15550  016E7C                     __ptext61:
 15551                           	opt stack 0
 15552  016E7C                     _Timer0_Clear:
 15553                           	opt stack 19
 15554                           
 15555                           ;Timer0.c: 22: TMR0 = COUNTER;
 15556                           
 15557                           ;incstack = 0
 15558  016E7C  C029  FFD6         	movff	_COUNTER,4054	;volatile
 15559  016E80  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 15560                           
 15561                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 15562  016E84  94F2               	bcf	intcon,2,c	;volatile
 15563  016E86  0012               	return		;funcret
 15564  016E88                     __end_of_Timer0_Clear:
 15565                           	opt stack 0
 15566                           tblptru	equ	0xFF8
 15567                           tblptrh	equ	0xFF7
 15568                           tblptrl	equ	0xFF6
 15569                           tablat	equ	0xFF5
 15570                           prodh	equ	0xFF4
 15571                           prodl	equ	0xFF3
 15572                           intcon	equ	0xFF2
 15573                           postinc0	equ	0xFEE
 15574                           wreg	equ	0xFE8
 15575                           indf1	equ	0xFE7
 15576                           postdec1	equ	0xFE5
 15577                           fsr1h	equ	0xFE2
 15578                           fsr1l	equ	0xFE1
 15579                           indf2	equ	0xFDF
 15580                           postinc2	equ	0xFDE
 15581                           postdec2	equ	0xFDD
 15582                           fsr2h	equ	0xFDA
 15583                           fsr2l	equ	0xFD9
 15584                           status	equ	0xFD8
 15585                           
 15586 ;; *************** function _MXK_Init *****************
 15587 ;; Defined at:
 15588 ;;		line 33 in file "Library/MXK.c"
 15589 ;; Parameters:    Size  Location     Type
 15590 ;;		None
 15591 ;; Auto vars:     Size  Location     Type
 15592 ;;		None
 15593 ;; Return value:  Size  Location     Type
 15594 ;;                  1    wreg      void 
 15595 ;; Registers used:
 15596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15597 ;; Tracked objects:
 15598 ;;		On entry : 0/0
 15599 ;;		On exit  : 0/0
 15600 ;;		Unchanged: 0/0
 15601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15606 ;;Total ram usage:        0 bytes
 15607 ;; Hardware stack levels used:    1
 15608 ;; Hardware stack levels required when called:   16
 15609 ;; This function calls:
 15610 ;;		_LED_Init
 15611 ;;		_Port_Init
 15612 ;;		_Port_SetPin
 15613 ;;		_Port_SetPinType
 15614 ;;		_Port_SetQuadType
 15615 ;;		_Port_SetType
 15616 ;;		_delay_ms
 15617 ;; This function is called by:
 15618 ;;		_init
 15619 ;; This function uses a non-reentrant model
 15620 ;;
 15621                           
 15622                           	psect	text62
 15623  013360                     __ptext62:
 15624                           	opt stack 0
 15625  013360                     _MXK_Init:
 15626                           	opt stack 13
 15627                           
 15628                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 15629                           
 15630                           ;incstack = 0
 15631  013360  0E01               	movlw	1
 15632  013362  6E4B               	movwf	_Bus_State,c
 15633                           
 15634                           ;MXK.c: 36: lQueue = (Function)0;
 15635  013364  0E00               	movlw	0
 15636  013366  0100               	movlb	0	; () banked
 15637  013368  6F60               	movwf	_lQueue& (0+255),b	;volatile
 15638  01336A  0E00               	movlw	0
 15639  01336C  0100               	movlb	0	; () banked
 15640  01336E  6F61               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15641  013370  0E00               	movlw	0
 15642  013372  0100               	movlb	0	; () banked
 15643  013374  6F62               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15644                           
 15645                           ; BSR set to: 0
 15646                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 15647  013376  0EBF               	movlw	low _PortA
 15648  013378  0101               	movlb	1	; () banked
 15649  01337A  6F00               	movwf	Port_Init@pInput& (0+255),b
 15650  01337C  0E03               	movlw	high _PortA
 15651  01337E  0101               	movlb	1	; () banked
 15652  013380  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15653  013382  0E00               	movlw	0
 15654  013384  0101               	movlb	1	; () banked
 15655  013386  6F02               	movwf	Port_Init@pPort& (0+255),b
 15656  013388  EC64  F097         	call	_Port_Init	;wreg free
 15657                           
 15658                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 15659  01338C  0EB5               	movlw	low _PortB
 15660  01338E  0101               	movlb	1	; () banked
 15661  013390  6F00               	movwf	Port_Init@pInput& (0+255),b
 15662  013392  0E03               	movlw	high _PortB
 15663  013394  0101               	movlb	1	; () banked
 15664  013396  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15665  013398  0E01               	movlw	1
 15666  01339A  0101               	movlb	1	; () banked
 15667  01339C  6F02               	movwf	Port_Init@pPort& (0+255),b
 15668  01339E  EC64  F097         	call	_Port_Init	;wreg free
 15669                           
 15670                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 15671  0133A2  0EA3               	movlw	low _PortC
 15672  0133A4  0101               	movlb	1	; () banked
 15673  0133A6  6F00               	movwf	Port_Init@pInput& (0+255),b
 15674  0133A8  0E00               	movlw	high _PortC
 15675  0133AA  0101               	movlb	1	; () banked
 15676  0133AC  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15677  0133AE  0E02               	movlw	2
 15678  0133B0  0101               	movlb	1	; () banked
 15679  0133B2  6F02               	movwf	Port_Init@pPort& (0+255),b
 15680  0133B4  EC64  F097         	call	_Port_Init	;wreg free
 15681                           
 15682                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 15683  0133B8  0E99               	movlw	low _PortD
 15684  0133BA  0101               	movlb	1	; () banked
 15685  0133BC  6F00               	movwf	Port_Init@pInput& (0+255),b
 15686  0133BE  0E00               	movlw	high _PortD
 15687  0133C0  0101               	movlb	1	; () banked
 15688  0133C2  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15689  0133C4  0E03               	movlw	3
 15690  0133C6  0101               	movlb	1	; () banked
 15691  0133C8  6F02               	movwf	Port_Init@pPort& (0+255),b
 15692  0133CA  EC64  F097         	call	_Port_Init	;wreg free
 15693                           
 15694                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 15695  0133CE  0E8F               	movlw	low _PortE
 15696  0133D0  0101               	movlb	1	; () banked
 15697  0133D2  6F00               	movwf	Port_Init@pInput& (0+255),b
 15698  0133D4  0E00               	movlw	high _PortE
 15699  0133D6  0101               	movlb	1	; () banked
 15700  0133D8  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15701  0133DA  0E04               	movlw	4
 15702  0133DC  0101               	movlb	1	; () banked
 15703  0133DE  6F02               	movwf	Port_Init@pPort& (0+255),b
 15704  0133E0  EC64  F097         	call	_Port_Init	;wreg free
 15705                           
 15706                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 15707  0133E4  0EC9               	movlw	low _PortF
 15708  0133E6  0101               	movlb	1	; () banked
 15709  0133E8  6F00               	movwf	Port_Init@pInput& (0+255),b
 15710  0133EA  0E03               	movlw	high _PortF
 15711  0133EC  0101               	movlb	1	; () banked
 15712  0133EE  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15713  0133F0  0E05               	movlw	5
 15714  0133F2  0101               	movlb	1	; () banked
 15715  0133F4  6F02               	movwf	Port_Init@pPort& (0+255),b
 15716  0133F6  EC64  F097         	call	_Port_Init	;wreg free
 15717                           
 15718                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 15719  0133FA  0EAB               	movlw	low _PortG
 15720  0133FC  0101               	movlb	1	; () banked
 15721  0133FE  6F00               	movwf	Port_Init@pInput& (0+255),b
 15722  013400  0E03               	movlw	high _PortG
 15723  013402  0101               	movlb	1	; () banked
 15724  013404  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15725  013406  0E06               	movlw	6
 15726  013408  0101               	movlb	1	; () banked
 15727  01340A  6F02               	movwf	Port_Init@pPort& (0+255),b
 15728  01340C  EC64  F097         	call	_Port_Init	;wreg free
 15729                           
 15730                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 15731  013410  0EC9               	movlw	low _PortF
 15732  013412  0100               	movlb	0	; () banked
 15733  013414  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 15734  013416  0E03               	movlw	high _PortF
 15735  013418  0100               	movlb	0	; () banked
 15736  01341A  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15737  01341C  0E05               	movlw	5
 15738  01341E  0100               	movlb	0	; () banked
 15739  013420  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 15740  013422  0E00               	movlw	0
 15741  013424  0100               	movlb	0	; () banked
 15742  013426  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 15743  013428  ECB5  F095         	call	_Port_SetPinType	;wreg free
 15744                           
 15745                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 15746  01342C  0EB5               	movlw	low _PortB
 15747  01342E  0100               	movlb	0	; () banked
 15748  013430  6FEE               	movwf	Port_SetQuadType@pInput& (0+255),b
 15749  013432  0E03               	movlw	high _PortB
 15750  013434  0100               	movlb	0	; () banked
 15751  013436  6FEF               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15752  013438  0E00               	movlw	0
 15753  01343A  0100               	movlb	0	; () banked
 15754  01343C  6FF0               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15755  01343E  0E00               	movlw	0
 15756  013440  0100               	movlb	0	; () banked
 15757  013442  6FF1               	movwf	Port_SetQuadType@pType& (0+255),b
 15758  013444  ECA8  F08F         	call	_Port_SetQuadType	;wreg free
 15759                           
 15760                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 15761  013448  0EC9               	movlw	low _PortF
 15762  01344A  0100               	movlb	0	; () banked
 15763  01344C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 15764  01344E  0E03               	movlw	high _PortF
 15765  013450  0100               	movlb	0	; () banked
 15766  013452  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15767  013454  0E06               	movlw	6
 15768  013456  0100               	movlb	0	; () banked
 15769  013458  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 15770  01345A  0E03               	movlw	3
 15771  01345C  0100               	movlb	0	; () banked
 15772  01345E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 15773  013460  ECB5  F095         	call	_Port_SetPinType	;wreg free
 15774                           
 15775                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 15776  013464  0EAB               	movlw	low _PortG
 15777  013466  0100               	movlb	0	; () banked
 15778  013468  6FF2               	movwf	Port_SetType@pInput& (0+255),b
 15779  01346A  0E03               	movlw	high _PortG
 15780  01346C  0100               	movlb	0	; () banked
 15781  01346E  6FF3               	movwf	(Port_SetType@pInput+1)& (0+255),b
 15782  013470  0E03               	movlw	3
 15783  013472  0100               	movlb	0	; () banked
 15784  013474  6FF4               	movwf	Port_SetType@pType& (0+255),b
 15785  013476  ECD3  F090         	call	_Port_SetType	;wreg free
 15786                           
 15787                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 15788  01347A  0EAB               	movlw	low _PortG
 15789  01347C  0100               	movlb	0	; () banked
 15790  01347E  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15791  013480  0E03               	movlw	high _PortG
 15792  013482  0100               	movlb	0	; () banked
 15793  013484  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15794  013486  0E04               	movlw	4
 15795  013488  0100               	movlb	0	; () banked
 15796  01348A  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15797  01348C  0E00               	movlw	0
 15798  01348E  0100               	movlb	0	; () banked
 15799  013490  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15800  013492  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 15801                           
 15802                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 15803  013496  0EC9               	movlw	low _PortF
 15804  013498  0100               	movlb	0	; () banked
 15805  01349A  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15806  01349C  0E03               	movlw	high _PortF
 15807  01349E  0100               	movlb	0	; () banked
 15808  0134A0  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15809  0134A2  0E06               	movlw	6
 15810  0134A4  0100               	movlb	0	; () banked
 15811  0134A6  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15812  0134A8  0E01               	movlw	1
 15813  0134AA  0100               	movlb	0	; () banked
 15814  0134AC  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15815  0134AE  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 15816                           
 15817                           ;MXK.c: 55: LED_Init(eLED1);
 15818  0134B2  0E00               	movlw	0
 15819  0134B4  EC11  F0B0         	call	_LED_Init
 15820                           
 15821                           ;MXK.c: 56: LED_Init(eLED2);
 15822  0134B8  0E01               	movlw	1
 15823  0134BA  EC11  F0B0         	call	_LED_Init
 15824                           
 15825                           ;MXK.c: 58: PIR1 = 0;
 15826  0134BE  0E00               	movlw	0
 15827  0134C0  6E9E               	movwf	3998,c	;volatile
 15828                           
 15829                           ;MXK.c: 59: PIR2 = 0;
 15830  0134C2  0E00               	movlw	0
 15831  0134C4  6EA1               	movwf	4001,c	;volatile
 15832                           
 15833                           ;MXK.c: 60: PIR3 = 0;
 15834  0134C6  0E00               	movlw	0
 15835  0134C8  6EA4               	movwf	4004,c	;volatile
 15836                           
 15837                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 15838  0134CA  8E9B               	bsf	3995,7,c	;volatile
 15839                           
 15840                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 15841  0134CC  8C9B               	bsf	3995,6,c	;volatile
 15842                           
 15843                           ;MXK.c: 66: delay_ms(100);
 15844  0134CE  0E00               	movlw	0
 15845  0134D0  0100               	movlb	0	; () banked
 15846  0134D2  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 15847  0134D4  0E64               	movlw	100
 15848  0134D6  6FB8               	movwf	delay_ms@ms& (0+255),b
 15849  0134D8  EC0F  F0AF         	call	_delay_ms	;wreg free
 15850                           
 15851                           ;MXK.c: 68: RCONbits.IPEN = 1;
 15852  0134DC  8ED0               	bsf	4048,7,c	;volatile
 15853  0134DE  0012               	return		;funcret
 15854  0134E0                     __end_of_MXK_Init:
 15855                           	opt stack 0
 15856                           tblptru	equ	0xFF8
 15857                           tblptrh	equ	0xFF7
 15858                           tblptrl	equ	0xFF6
 15859                           tablat	equ	0xFF5
 15860                           prodh	equ	0xFF4
 15861                           prodl	equ	0xFF3
 15862                           intcon	equ	0xFF2
 15863                           postinc0	equ	0xFEE
 15864                           wreg	equ	0xFE8
 15865                           indf1	equ	0xFE7
 15866                           postdec1	equ	0xFE5
 15867                           fsr1h	equ	0xFE2
 15868                           fsr1l	equ	0xFE1
 15869                           indf2	equ	0xFDF
 15870                           postinc2	equ	0xFDE
 15871                           postdec2	equ	0xFDD
 15872                           fsr2h	equ	0xFDA
 15873                           fsr2l	equ	0xFD9
 15874                           status	equ	0xFD8
 15875                           
 15876 ;; *************** function _Port_Init *****************
 15877 ;; Defined at:
 15878 ;;		line 150 in file "Library/Port.c"
 15879 ;; Parameters:    Size  Location     Type
 15880 ;;  pInput          2    0[BANK1 ] const PTR struct Port
 15881 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15882 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15883 ;;  pPort           1    2[BANK1 ] enum E6786
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;  i               1   64[BANK0 ] unsigned char 
 15886 ;; Return value:  Size  Location     Type
 15887 ;;                  1    wreg      void 
 15888 ;; Registers used:
 15889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15890 ;; Tracked objects:
 15891 ;;		On entry : 0/0
 15892 ;;		On exit  : 0/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15895 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15897 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;Total ram usage:        6 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:   15
 15902 ;; This function calls:
 15903 ;;		_GetPortPORT
 15904 ;;		_GetPortProperties
 15905 ;;		_GetPortTRIS
 15906 ;;		_Port_Set
 15907 ;;		_Port_SetPinType
 15908 ;;		_Port_SetType
 15909 ;;		_Word_GetPair
 15910 ;; This function is called by:
 15911 ;;		_MXK_Init
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           	psect	text63
 15916  012EC8                     __ptext63:
 15917                           	opt stack 0
 15918  012EC8                     _Port_Init:
 15919                           	opt stack 13
 15920                           
 15921                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 15922                           
 15923                           ;incstack = 0
 15924  012EC8  0101               	movlb	1	; () banked
 15925  012ECA  5102               	movf	Port_Init@pPort& (0+255),w,b
 15926  012ECC  EC48  F0A8         	call	_GetPortProperties
 15927  012ED0  C100  FFD9         	movff	Port_Init@pInput,fsr2l
 15928  012ED4  C101  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15929  012ED8  0100               	movlb	0	; () banked
 15930  012EDA  C0B8  FFDE         	movff	?_GetPortProperties,postinc2
 15931  012EDE  0100               	movlb	0	; () banked
 15932  012EE0  C0B9  FFDD         	movff	?_GetPortProperties+1,postdec2
 15933                           
 15934                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 15935  012EE4  0101               	movlb	1	; () banked
 15936  012EE6  5102               	movf	Port_Init@pPort& (0+255),w,b
 15937  012EE8  EC9B  F0A8         	call	_GetPortPORT
 15938  012EEC  0101               	movlb	1	; () banked
 15939  012EEE  EE20 F006          	lfsr	2,6
 15940  012EF2  5100               	movf	Port_Init@pInput& (0+255),w,b
 15941  012EF4  26D9               	addwf	fsr2l,f,c
 15942  012EF6  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15943  012EF8  22DA               	addwfc	fsr2h,f,c
 15944  012EFA  0100               	movlb	0	; () banked
 15945  012EFC  C0B8  FFDE         	movff	?_GetPortPORT,postinc2
 15946  012F00  0100               	movlb	0	; () banked
 15947  012F02  C0B9  FFDD         	movff	?_GetPortPORT+1,postdec2
 15948                           
 15949                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 15950  012F06  0101               	movlb	1	; () banked
 15951  012F08  5102               	movf	Port_Init@pPort& (0+255),w,b
 15952  012F0A  EC9B  F0A8         	call	_GetPortPORT
 15953  012F0E  0101               	movlb	1	; () banked
 15954  012F10  EE20 F004          	lfsr	2,4
 15955  012F14  5100               	movf	Port_Init@pInput& (0+255),w,b
 15956  012F16  26D9               	addwf	fsr2l,f,c
 15957  012F18  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15958  012F1A  22DA               	addwfc	fsr2h,f,c
 15959  012F1C  0100               	movlb	0	; () banked
 15960  012F1E  C0B8  FFDE         	movff	?_GetPortPORT,postinc2
 15961  012F22  0100               	movlb	0	; () banked
 15962  012F24  C0B9  FFDD         	movff	?_GetPortPORT+1,postdec2
 15963                           
 15964                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 15965  012F28  0101               	movlb	1	; () banked
 15966  012F2A  5102               	movf	Port_Init@pPort& (0+255),w,b
 15967  012F2C  ECF5  F0A7         	call	_GetPortTRIS
 15968  012F30  0101               	movlb	1	; () banked
 15969  012F32  EE20 F002          	lfsr	2,2
 15970  012F36  5100               	movf	Port_Init@pInput& (0+255),w,b
 15971  012F38  26D9               	addwf	fsr2l,f,c
 15972  012F3A  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15973  012F3C  22DA               	addwfc	fsr2h,f,c
 15974  012F3E  0100               	movlb	0	; () banked
 15975  012F40  C0B8  FFDE         	movff	?_GetPortTRIS,postinc2
 15976  012F44  0100               	movlb	0	; () banked
 15977  012F46  C0B9  FFDD         	movff	?_GetPortTRIS+1,postdec2
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 15981  012F4A  0101               	movlb	1	; () banked
 15982  012F4C  EE20 F004          	lfsr	2,4
 15983  012F50  5100               	movf	Port_Init@pInput& (0+255),w,b
 15984  012F52  26D9               	addwf	fsr2l,f,c
 15985  012F54  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15986  012F56  22DA               	addwfc	fsr2h,f,c
 15987  012F58  CFDE F103          	movff	postinc2,??_Port_Init
 15988  012F5C  CFDD F104          	movff	postdec2,??_Port_Init+1
 15989  012F60  C103  FFD9         	movff	??_Port_Init,fsr2l
 15990  012F64  C104  FFDA         	movff	??_Port_Init+1,fsr2h
 15991  012F68  0E00               	movlw	0
 15992  012F6A  6EDF               	movwf	indf2,c
 15993                           
 15994                           ; BSR set to: 1
 15995                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 15996  012F6C  0101               	movlb	1	; () banked
 15997  012F6E  EE20 F002          	lfsr	2,2
 15998  012F72  5100               	movf	Port_Init@pInput& (0+255),w,b
 15999  012F74  26D9               	addwf	fsr2l,f,c
 16000  012F76  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16001  012F78  22DA               	addwfc	fsr2h,f,c
 16002  012F7A  CFDE F103          	movff	postinc2,??_Port_Init
 16003  012F7E  CFDD F104          	movff	postdec2,??_Port_Init+1
 16004  012F82  C103  FFD9         	movff	??_Port_Init,fsr2l
 16005  012F86  C104  FFDA         	movff	??_Port_Init+1,fsr2h
 16006  012F8A  0EFF               	movlw	255
 16007  012F8C  6EDF               	movwf	indf2,c
 16008                           
 16009                           ; BSR set to: 1
 16010                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 16011  012F8E  C100  F0F2         	movff	Port_Init@pInput,Port_SetType@pInput
 16012  012F92  C101  F0F3         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 16013  012F96  0E00               	movlw	0
 16014  012F98  0100               	movlb	0	; () banked
 16015  012F9A  6FF4               	movwf	Port_SetType@pType& (0+255),b
 16016  012F9C  ECD3  F090         	call	_Port_SetType	;wreg free
 16017                           
 16018                           ;Port.c: 166: UINT8 i;
 16019                           ;Port.c: 167: for (i=0; i<8; i++)
 16020  012FA0  0E00               	movlw	0
 16021  012FA2  0100               	movlb	0	; () banked
 16022  012FA4  6FF8               	movwf	Port_Init@i& (0+255),b
 16023  012FA6                     l14516:
 16024                           
 16025                           ; BSR set to: 0
 16026  012FA6  0E07               	movlw	7
 16027  012FA8  0100               	movlb	0	; () banked
 16028  012FAA  65F8               	cpfsgt	Port_Init@i& (0+255),b
 16029  012FAC  D031               	goto	l403
 16030  012FAE  D04B               	goto	u11380
 16031  012FB0                     
 16032                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 16033                           
 16034                           ; BSR set to: 0
 16035  012FB0  C100  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16036  012FB4  C101  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16037  012FB8  C0F8  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 16038  012FBC  0E03               	movlw	3
 16039  012FBE  0100               	movlb	0	; () banked
 16040  012FC0  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 16041  012FC2  ECB5  F095         	call	_Port_SetPinType	;wreg free
 16042                           
 16043                           ;Port.c: 173: break;
 16044  012FC6  D03C               	goto	l405
 16045  012FC8                     
 16046                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 16047  012FC8  C100  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16048  012FCC  C101  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16049  012FD0  C0F8  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 16050  012FD4  0E02               	movlw	2
 16051  012FD6  0100               	movlb	0	; () banked
 16052  012FD8  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 16053  012FDA  ECB5  F095         	call	_Port_SetPinType	;wreg free
 16054                           
 16055                           ;Port.c: 176: break;
 16056  012FDE  D030               	goto	l405
 16057  012FE0                     
 16058                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 16059  012FE0  C100  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16060  012FE4  C101  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16061  012FE8  C0F8  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 16062  012FEC  0E01               	movlw	1
 16063  012FEE  0100               	movlb	0	; () banked
 16064  012FF0  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 16065  012FF2  ECB5  F095         	call	_Port_SetPinType	;wreg free
 16066                           
 16067                           ;Port.c: 179: break;
 16068  012FF6  D024               	goto	l405
 16069  012FF8                     
 16070                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 16071  012FF8  C100  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16072  012FFC  C101  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16073  013000  C0F8  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 16074  013004  0E00               	movlw	0
 16075  013006  0100               	movlb	0	; () banked
 16076  013008  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 16077  01300A  ECB5  F095         	call	_Port_SetPinType	;wreg free
 16078                           
 16079                           ;Port.c: 183: }
 16080                           
 16081                           ;Port.c: 182: break;
 16082  01300E  D018               	goto	l405
 16083  013010                     l403:
 16084  013010  C100  FFD9         	movff	Port_Init@pInput,fsr2l
 16085  013014  C101  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16086  013018  CFDE F0C4          	movff	postinc2,Word_GetPair@pInput
 16087  01301C  CFDD F0C5          	movff	postdec2,Word_GetPair@pInput+1
 16088  013020  C0F8  F0C6         	movff	Port_Init@i,Word_GetPair@pPair
 16089  013024  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16090                           
 16091                           ; Switch size 1, requested type "space"
 16092                           ; Number of cases is 4, Range of values is 0 to 3
 16093                           ; switch strategies available:
 16094                           ; Name         Instructions Cycles
 16095                           ; simple_byte           13     7 (average)
 16096                           ;	Chosen strategy is simple_byte
 16097  013028  0A00               	xorlw	0	; case 0
 16098  01302A  B4D8               	btfsc	status,2,c
 16099  01302C  D7C1               	goto	l404
 16100  01302E  0A01               	xorlw	1	; case 1
 16101  013030  B4D8               	btfsc	status,2,c
 16102  013032  D7D6               	goto	l407
 16103  013034  0A03               	xorlw	3	; case 2
 16104  013036  B4D8               	btfsc	status,2,c
 16105  013038  D7C7               	goto	l406
 16106  01303A  0A01               	xorlw	1	; case 3
 16107  01303C  B4D8               	btfsc	status,2,c
 16108  01303E  D7DC               	goto	l408
 16109  013040                     l405:
 16110  013040  0100               	movlb	0	; () banked
 16111  013042  2BF8               	incf	Port_Init@i& (0+255),f,b
 16112  013044  D7B0               	goto	l14516
 16113  013046                     u11380:
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;Port.c: 184: }
 16117                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16118                           
 16119                           ; BSR set to: 0
 16120  013046  C100  F0C7         	movff	Port_Init@pInput,Port_Set@pInput
 16121  01304A  C101  F0C8         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16122  01304E  0E00               	movlw	0
 16123  013050  0100               	movlb	0	; () banked
 16124  013052  6FC9               	movwf	Port_Set@pValue& (0+255),b
 16125  013054  EC89  F08C         	call	_Port_Set	;wreg free
 16126  013058  0012               	return		;funcret
 16127  01305A                     __end_of_Port_Init:
 16128                           	opt stack 0
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           postinc0	equ	0xFEE
 16137                           wreg	equ	0xFE8
 16138                           indf1	equ	0xFE7
 16139                           postdec1	equ	0xFE5
 16140                           fsr1h	equ	0xFE2
 16141                           fsr1l	equ	0xFE1
 16142                           indf2	equ	0xFDF
 16143                           postinc2	equ	0xFDE
 16144                           postdec2	equ	0xFDD
 16145                           fsr2h	equ	0xFDA
 16146                           fsr2l	equ	0xFD9
 16147                           status	equ	0xFD8
 16148                           
 16149 ;; *************** function _Port_SetType *****************
 16150 ;; Defined at:
 16151 ;;		line 513 in file "Library/Port.c"
 16152 ;; Parameters:    Size  Location     Type
 16153 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16154 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16155 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16156 ;;  pType           1   60[BANK0 ] enum E6795
 16157 ;; Auto vars:     Size  Location     Type
 16158 ;;  Output          1   63[BANK0 ] enum E6475
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      enum E6475
 16161 ;; Registers used:
 16162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : 0/0
 16165 ;;		On exit  : 0/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16168 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;Total ram usage:        6 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:   14
 16175 ;; This function calls:
 16176 ;;		_Port_CheckPortType
 16177 ;;		_Word_SetPair
 16178 ;; This function is called by:
 16179 ;;		_Port_Init
 16180 ;;		_MXK_Init
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text64
 16185  0121A6                     __ptext64:
 16186                           	opt stack 0
 16187  0121A6                     _Port_SetType:
 16188                           	opt stack 14
 16189                           
 16190                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16191                           
 16192                           ;incstack = 0
 16193  0121A6  0E05               	movlw	5
 16194  0121A8  0100               	movlb	0	; () banked
 16195  0121AA  6FF7               	movwf	Port_SetType@Output& (0+255),b
 16196                           
 16197                           ;Port.c: 517: switch (pType)
 16198  0121AC  D07A               	goto	l509
 16199  0121AE                     
 16200                           ; BSR set to: 0
 16201                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16202                           
 16203                           ; BSR set to: 0
 16204  0121AE  0100               	movlb	0	; () banked
 16205  0121B0  EE20 F002          	lfsr	2,2
 16206  0121B4  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 16207  0121B6  26D9               	addwf	fsr2l,f,c
 16208  0121B8  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16209  0121BA  22DA               	addwfc	fsr2h,f,c
 16210  0121BC  CFDE F0F5          	movff	postinc2,??_Port_SetType
 16211  0121C0  CFDD F0F6          	movff	postdec2,??_Port_SetType+1
 16212  0121C4  C0F5  FFD9         	movff	??_Port_SetType,fsr2l
 16213  0121C8  C0F6  FFDA         	movff	??_Port_SetType+1,fsr2h
 16214  0121CC  0EFF               	movlw	255
 16215  0121CE  D067               	goto	L10
 16216  0121D0                     
 16217                           ; BSR set to: 0
 16218                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16219                           
 16220                           ; BSR set to: 0
 16221  0121D0  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16222  0121D4  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16223  0121D8  0E01               	movlw	1
 16224  0121DA  0100               	movlb	0	; () banked
 16225  0121DC  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16226  0121DE  EC0F  F0B2         	call	_Port_CheckPortType	;wreg free
 16227  0121E2  0100               	movlb	0	; () banked
 16228  0121E4  6FF7               	movwf	Port_SetType@Output& (0+255),b
 16229  0121E6  0100               	movlb	0	; () banked
 16230  0121E8  51F7               	movf	Port_SetType@Output& (0+255),w,b
 16231  0121EA  A4D8               	btfss	status,2,c
 16232  0121EC  0012               	return	
 16233                           
 16234                           ; BSR set to: 0
 16235                           ;Port.c: 527: {
 16236                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16237  0121EE  0100               	movlb	0	; () banked
 16238  0121F0  EE20 F002          	lfsr	2,2
 16239  0121F4  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 16240  0121F6  26D9               	addwf	fsr2l,f,c
 16241  0121F8  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16242  0121FA  22DA               	addwfc	fsr2h,f,c
 16243  0121FC  CFDE F0F5          	movff	postinc2,??_Port_SetType
 16244  012200  CFDD F0F6          	movff	postdec2,??_Port_SetType+1
 16245  012204  C0F5  FFD9         	movff	??_Port_SetType,fsr2l
 16246  012208  C0F6  FFDA         	movff	??_Port_SetType+1,fsr2h
 16247  01220C  0E00               	movlw	0
 16248  01220E  6EDF               	movwf	indf2,c
 16249                           
 16250                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16251  012210  0100               	movlb	0	; () banked
 16252  012212  EE20 F004          	lfsr	2,4
 16253  012216  D036               	goto	L21
 16254  012218                     
 16255                           ; BSR set to: 0
 16256                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16257                           
 16258                           ; BSR set to: 0
 16259  012218  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16260  01221C  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16261  012220  0E02               	movlw	2
 16262  012222  0100               	movlb	0	; () banked
 16263  012224  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16264  012226  EC0F  F0B2         	call	_Port_CheckPortType	;wreg free
 16265  01222A  0100               	movlb	0	; () banked
 16266  01222C  6FF7               	movwf	Port_SetType@Output& (0+255),b
 16267  01222E  0100               	movlb	0	; () banked
 16268  012230  51F7               	movf	Port_SetType@Output& (0+255),w,b
 16269  012232  A4D8               	btfss	status,2,c
 16270  012234  0012               	return	
 16271                           
 16272                           ; BSR set to: 0
 16273                           ;Port.c: 538: {
 16274                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16275  012236  0100               	movlb	0	; () banked
 16276  012238  EE20 F002          	lfsr	2,2
 16277  01223C  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 16278  01223E  26D9               	addwf	fsr2l,f,c
 16279  012240  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16280  012242  22DA               	addwfc	fsr2h,f,c
 16281  012244  CFDE F0F5          	movff	postinc2,??_Port_SetType
 16282  012248  CFDD F0F6          	movff	postdec2,??_Port_SetType+1
 16283  01224C  C0F5  FFD9         	movff	??_Port_SetType,fsr2l
 16284  012250  C0F6  FFDA         	movff	??_Port_SetType+1,fsr2h
 16285  012254  0EFF               	movlw	255
 16286  012256  6EDF               	movwf	indf2,c
 16287                           
 16288                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16289  012258  0100               	movlb	0	; () banked
 16290  01225A  EE20 F004          	lfsr	2,4
 16291  01225E  D7AA               	goto	L11
 16292  012260                     
 16293                           ; BSR set to: 0
 16294                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16295                           
 16296                           ; BSR set to: 0
 16297  012260  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16298  012264  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16299  012268  0E00               	movlw	0
 16300  01226A  0100               	movlb	0	; () banked
 16301  01226C  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16302  01226E  EC0F  F0B2         	call	_Port_CheckPortType	;wreg free
 16303  012272  0100               	movlb	0	; () banked
 16304  012274  6FF7               	movwf	Port_SetType@Output& (0+255),b
 16305  012276  0100               	movlb	0	; () banked
 16306  012278  51F7               	movf	Port_SetType@Output& (0+255),w,b
 16307  01227A  A4D8               	btfss	status,2,c
 16308  01227C  0012               	return	
 16309                           
 16310                           ; BSR set to: 0
 16311                           ;Port.c: 549: {
 16312                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16313  01227E  0100               	movlb	0	; () banked
 16314  012280  EE20 F002          	lfsr	2,2
 16315  012284                     L21:
 16316  012284  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 16317  012286  26D9               	addwf	fsr2l,f,c
 16318  012288  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16319  01228A  22DA               	addwfc	fsr2h,f,c
 16320  01228C  CFDE F0F5          	movff	postinc2,??_Port_SetType
 16321  012290  CFDD F0F6          	movff	postdec2,??_Port_SetType+1
 16322  012294  C0F5  FFD9         	movff	??_Port_SetType,fsr2l
 16323  012298  C0F6  FFDA         	movff	??_Port_SetType+1,fsr2h
 16324  01229C  0E00               	movlw	0
 16325  01229E                     L10:
 16326  01229E  6EDF               	movwf	indf2,c
 16327                           
 16328                           ;Port.c: 552: }
 16329  0122A0  D00E               	goto	l511
 16330  0122A2                     l509:
 16331                           
 16332                           ; BSR set to: 0
 16333                           
 16334                           ; BSR set to: 0
 16335  0122A2  0100               	movlb	0	; () banked
 16336  0122A4  51F4               	movf	Port_SetType@pType& (0+255),w,b
 16337                           
 16338                           ; Switch size 1, requested type "space"
 16339                           ; Number of cases is 4, Range of values is 0 to 3
 16340                           ; switch strategies available:
 16341                           ; Name         Instructions Cycles
 16342                           ; simple_byte           13     7 (average)
 16343                           ;	Chosen strategy is simple_byte
 16344  0122A6  0A00               	xorlw	0	; case 0
 16345  0122A8  B4D8               	btfsc	status,2,c
 16346  0122AA  D781               	goto	l510
 16347  0122AC  0A01               	xorlw	1	; case 1
 16348  0122AE  B4D8               	btfsc	status,2,c
 16349  0122B0  D78F               	goto	l512
 16350  0122B2  0A03               	xorlw	3	; case 2
 16351  0122B4  B4D8               	btfsc	status,2,c
 16352  0122B6  D7B0               	goto	l516
 16353  0122B8  0A01               	xorlw	1	; case 3
 16354  0122BA  B4D8               	btfsc	status,2,c
 16355  0122BC  D7D1               	goto	l519
 16356  0122BE                     l511:
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16360                           
 16361                           ; BSR set to: 0
 16362  0122BE  0E08               	movlw	8
 16363  0122C0  0100               	movlb	0	; () banked
 16364  0122C2  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16365  0122C4  0100               	movlb	0	; () banked
 16366  0122C6  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16367  0122C8  0E00               	movlw	0
 16368  0122CA  0100               	movlb	0	; () banked
 16369  0122CC  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16370  0122CE  0100               	movlb	0	; () banked
 16371  0122D0  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16372  0122D2  0E00               	movlw	0
 16373  0122D4  0100               	movlb	0	; () banked
 16374  0122D6  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16375  0122D8  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16376  0122DC  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16377                           
 16378                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16379  0122E0  0E08               	movlw	8
 16380  0122E2  0100               	movlb	0	; () banked
 16381  0122E4  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16382  0122E6  0100               	movlb	0	; () banked
 16383  0122E8  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16384  0122EA  0E00               	movlw	0
 16385  0122EC  0100               	movlb	0	; () banked
 16386  0122EE  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16387  0122F0  0100               	movlb	0	; () banked
 16388  0122F2  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16389  0122F4  0E01               	movlw	1
 16390  0122F6  0100               	movlb	0	; () banked
 16391  0122F8  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16392  0122FA  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16393  0122FE  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16394                           
 16395                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16396  012302  0E08               	movlw	8
 16397  012304  0100               	movlb	0	; () banked
 16398  012306  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16399  012308  0100               	movlb	0	; () banked
 16400  01230A  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16401  01230C  0E00               	movlw	0
 16402  01230E  0100               	movlb	0	; () banked
 16403  012310  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16404  012312  0100               	movlb	0	; () banked
 16405  012314  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16406  012316  0E02               	movlw	2
 16407  012318  0100               	movlb	0	; () banked
 16408  01231A  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16409  01231C  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16410  012320  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16411                           
 16412                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16413  012324  0E08               	movlw	8
 16414  012326  0100               	movlb	0	; () banked
 16415  012328  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16416  01232A  0100               	movlb	0	; () banked
 16417  01232C  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16418  01232E  0E00               	movlw	0
 16419  012330  0100               	movlb	0	; () banked
 16420  012332  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16421  012334  0100               	movlb	0	; () banked
 16422  012336  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16423  012338  0E03               	movlw	3
 16424  01233A  0100               	movlb	0	; () banked
 16425  01233C  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16426  01233E  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16427  012342  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16428                           
 16429                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16430  012346  0E08               	movlw	8
 16431  012348  0100               	movlb	0	; () banked
 16432  01234A  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16433  01234C  0100               	movlb	0	; () banked
 16434  01234E  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16435  012350  0E00               	movlw	0
 16436  012352  0100               	movlb	0	; () banked
 16437  012354  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16438  012356  0100               	movlb	0	; () banked
 16439  012358  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16440  01235A  0E04               	movlw	4
 16441  01235C  0100               	movlb	0	; () banked
 16442  01235E  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16443  012360  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16444  012364  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16445                           
 16446                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16447  012368  0E08               	movlw	8
 16448  01236A  0100               	movlb	0	; () banked
 16449  01236C  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16450  01236E  0100               	movlb	0	; () banked
 16451  012370  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16452  012372  0E00               	movlw	0
 16453  012374  0100               	movlb	0	; () banked
 16454  012376  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16455  012378  0100               	movlb	0	; () banked
 16456  01237A  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16457  01237C  0E05               	movlw	5
 16458  01237E  0100               	movlb	0	; () banked
 16459  012380  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16460  012382  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16461  012386  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16462                           
 16463                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16464  01238A  0E08               	movlw	8
 16465  01238C  0100               	movlb	0	; () banked
 16466  01238E  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16467  012390  0100               	movlb	0	; () banked
 16468  012392  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16469  012394  0E00               	movlw	0
 16470  012396  0100               	movlb	0	; () banked
 16471  012398  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16472  01239A  0100               	movlb	0	; () banked
 16473  01239C  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16474  01239E  0E06               	movlw	6
 16475  0123A0  0100               	movlb	0	; () banked
 16476  0123A2  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16477  0123A4  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16478  0123A8  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16479                           
 16480                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 16481  0123AC  0E08               	movlw	8
 16482  0123AE  0100               	movlb	0	; () banked
 16483  0123B0  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 16484  0123B2  0100               	movlb	0	; () banked
 16485  0123B4  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 16486  0123B6  0E00               	movlw	0
 16487  0123B8  0100               	movlb	0	; () banked
 16488  0123BA  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16489  0123BC  0100               	movlb	0	; () banked
 16490  0123BE  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16491  0123C0  0E07               	movlw	7
 16492  0123C2  0100               	movlb	0	; () banked
 16493  0123C4  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 16494  0123C6  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 16495  0123CA  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 16496  0123CE  0012               	return	
 16497  0123D0                     __end_of_Port_SetType:
 16498                           	opt stack 0
 16499                           tblptru	equ	0xFF8
 16500                           tblptrh	equ	0xFF7
 16501                           tblptrl	equ	0xFF6
 16502                           tablat	equ	0xFF5
 16503                           prodh	equ	0xFF4
 16504                           prodl	equ	0xFF3
 16505                           intcon	equ	0xFF2
 16506                           postinc0	equ	0xFEE
 16507                           wreg	equ	0xFE8
 16508                           indf1	equ	0xFE7
 16509                           postdec1	equ	0xFE5
 16510                           fsr1h	equ	0xFE2
 16511                           fsr1l	equ	0xFE1
 16512                           indf2	equ	0xFDF
 16513                           postinc2	equ	0xFDE
 16514                           postdec2	equ	0xFDD
 16515                           fsr2h	equ	0xFDA
 16516                           fsr2l	equ	0xFD9
 16517                           status	equ	0xFD8
 16518                           
 16519 ;; *************** function _Port_CheckPortType *****************
 16520 ;; Defined at:
 16521 ;;		line 138 in file "Library/Port.c"
 16522 ;; Parameters:    Size  Location     Type
 16523 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16524 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16525 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16526 ;;  pDrive          1   56[BANK0 ] enum E6469
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;  Output          1   57[BANK0 ] enum E6475
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  1    wreg      enum E6475
 16531 ;; Registers used:
 16532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        4 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; Hardware stack levels required when called:   13
 16545 ;; This function calls:
 16546 ;;		_Port_CheckQuadType
 16547 ;; This function is called by:
 16548 ;;		_Port_SetType
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           	psect	text65
 16553  01641E                     __ptext65:
 16554                           	opt stack 0
 16555  01641E                     _Port_CheckPortType:
 16556                           	opt stack 14
 16557                           
 16558                           ;Port.c: 140: ePinError Output = ePinErrorState;
 16559                           
 16560                           ;incstack = 0
 16561  01641E  0E05               	movlw	5
 16562  016420  0100               	movlb	0	; () banked
 16563  016422  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 16567  016424  C0EE  F0E7         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16568  016428  C0EF  F0E8         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16569  01642C  0E00               	movlw	0
 16570  01642E  0100               	movlb	0	; () banked
 16571  016430  6FE9               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16572  016432  C0F0  F0EA         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16573  016436  ECA1  F0B0         	call	_Port_CheckQuadType	;wreg free
 16574  01643A  0100               	movlb	0	; () banked
 16575  01643C  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 16576  01643E  0100               	movlb	0	; () banked
 16577  016440  51F1               	movf	Port_CheckPortType@Output& (0+255),w,b
 16578  016442  A4D8               	btfss	status,2,c
 16579  016444  D00D               	goto	l397
 16580                           
 16581                           ; BSR set to: 0
 16582                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 16583  016446  C0EE  F0E7         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16584  01644A  C0EF  F0E8         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16585  01644E  0E01               	movlw	1
 16586  016450  0100               	movlb	0	; () banked
 16587  016452  6FE9               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16588  016454  C0F0  F0EA         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16589  016458  ECA1  F0B0         	call	_Port_CheckQuadType	;wreg free
 16590  01645C  0100               	movlb	0	; () banked
 16591  01645E  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 16592  016460                     l397:
 16593                           
 16594                           ; BSR set to: 0
 16595                           ;Port.c: 146: return Output;
 16596                           
 16597                           ; BSR set to: 0
 16598  016460  0100               	movlb	0	; () banked
 16599  016462  51F1               	movf	Port_CheckPortType@Output& (0+255),w,b
 16600  016464  0012               	return	
 16601  016466                     __end_of_Port_CheckPortType:
 16602                           	opt stack 0
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           intcon	equ	0xFF2
 16610                           postinc0	equ	0xFEE
 16611                           wreg	equ	0xFE8
 16612                           indf1	equ	0xFE7
 16613                           postdec1	equ	0xFE5
 16614                           fsr1h	equ	0xFE2
 16615                           fsr1l	equ	0xFE1
 16616                           indf2	equ	0xFDF
 16617                           postinc2	equ	0xFDE
 16618                           postdec2	equ	0xFDD
 16619                           fsr2h	equ	0xFDA
 16620                           fsr2l	equ	0xFD9
 16621                           status	equ	0xFD8
 16622                           
 16623 ;; *************** function _Port_Set *****************
 16624 ;; Defined at:
 16625 ;;		line 570 in file "Library/Port.c"
 16626 ;; Parameters:    Size  Location     Type
 16627 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16628 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16629 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16630 ;;  pValue          1   17[BANK0 ] unsigned char 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 16633 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 16634 ;;  Type            1   38[BANK0 ] enum E6795
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  1    wreg      void 
 16637 ;; Registers used:
 16638 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16644 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16648 ;;Total ram usage:       24 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:   10
 16651 ;; This function calls:
 16652 ;;		_Byte_SetByte
 16653 ;;		_Word_GetPair
 16654 ;; This function is called by:
 16655 ;;		_Port_Init
 16656 ;;		_Port_Toggle
 16657 ;; This function uses a non-reentrant model
 16658 ;;
 16659                           
 16660                           	psect	text66
 16661  011912                     __ptext66:
 16662                           	opt stack 0
 16663  011912                     _Port_Set:
 16664                           	opt stack 17
 16665                           
 16666                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;incstack = 0
 16670  011912  0E08               	movlw	8
 16671  011914  0100               	movlb	0	; () banked
 16672  011916  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16673  011918  0100               	movlb	0	; () banked
 16674  01191A  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16675  01191C  0E00               	movlw	0
 16676  01191E  0100               	movlb	0	; () banked
 16677  011920  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16678  011922  0100               	movlb	0	; () banked
 16679  011924  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16680  011926  0E00               	movlw	0
 16681  011928  0100               	movlb	0	; () banked
 16682  01192A  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 16683  01192C  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16684  011930  0100               	movlb	0	; () banked
 16685  011932  6FDE               	movwf	Port_Set@Type& (0+255),b
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 16689  011934  0100               	movlb	0	; () banked
 16690  011936  51DE               	movf	Port_Set@Type& (0+255),w,b
 16691  011938  0100               	movlb	0	; () banked
 16692  01193A  6FCA               	movwf	??_Port_Set& (0+255),b
 16693  01193C  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 16694  01193E  0E0E               	movlw	14
 16695  011940                     u10945:
 16696  011940  90D8               	bcf	status,0,c
 16697  011942  0100               	movlb	0	; () banked
 16698  011944  37CA               	rlcf	??_Port_Set& (0+255),f,b
 16699  011946  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16700  011948  2EE8               	decfsz	wreg,f,c
 16701  01194A  D7FA               	goto	u10945
 16702  01194C  0100               	movlb	0	; () banked
 16703  01194E  51DE               	movf	Port_Set@Type& (0+255),w,b
 16704  011950  0100               	movlb	0	; () banked
 16705  011952  6FCC               	movwf	(??_Port_Set+2)& (0+255),b
 16706  011954  6BCD               	clrf	(??_Port_Set+3)& (0+255),b
 16707  011956  0E0C               	movlw	12
 16708  011958                     u10955:
 16709  011958  90D8               	bcf	status,0,c
 16710  01195A  0100               	movlb	0	; () banked
 16711  01195C  37CC               	rlcf	(??_Port_Set+2)& (0+255),f,b
 16712  01195E  37CD               	rlcf	(??_Port_Set+3)& (0+255),f,b
 16713  011960  2EE8               	decfsz	wreg,f,c
 16714  011962  D7FA               	goto	u10955
 16715  011964  0100               	movlb	0	; () banked
 16716  011966  51DE               	movf	Port_Set@Type& (0+255),w,b
 16717  011968  0100               	movlb	0	; () banked
 16718  01196A  6FCE               	movwf	(??_Port_Set+4)& (0+255),b
 16719  01196C  6BCF               	clrf	(??_Port_Set+5)& (0+255),b
 16720  01196E  0E0A               	movlw	10
 16721  011970                     u10965:
 16722  011970  90D8               	bcf	status,0,c
 16723  011972  0100               	movlb	0	; () banked
 16724  011974  37CE               	rlcf	(??_Port_Set+4)& (0+255),f,b
 16725  011976  37CF               	rlcf	(??_Port_Set+5)& (0+255),f,b
 16726  011978  2EE8               	decfsz	wreg,f,c
 16727  01197A  D7FA               	goto	u10965
 16728  01197C  0100               	movlb	0	; () banked
 16729  01197E  51DE               	movf	Port_Set@Type& (0+255),w,b
 16730  011980  0100               	movlb	0	; () banked
 16731  011982  6FD1               	movwf	(??_Port_Set+7)& (0+255),b
 16732  011984  6BD0               	clrf	(??_Port_Set+6)& (0+255),b
 16733  011986  0100               	movlb	0	; () banked
 16734  011988  51DE               	movf	Port_Set@Type& (0+255),w,b
 16735  01198A  0100               	movlb	0	; () banked
 16736  01198C  6FD2               	movwf	(??_Port_Set+8)& (0+255),b
 16737  01198E  6BD3               	clrf	(??_Port_Set+9)& (0+255),b
 16738  011990  0E06               	movlw	6
 16739  011992                     u10975:
 16740  011992  90D8               	bcf	status,0,c
 16741  011994  0100               	movlb	0	; () banked
 16742  011996  37D2               	rlcf	(??_Port_Set+8)& (0+255),f,b
 16743  011998  37D3               	rlcf	(??_Port_Set+9)& (0+255),f,b
 16744  01199A  2EE8               	decfsz	wreg,f,c
 16745  01199C  D7FA               	goto	u10975
 16746  01199E  0100               	movlb	0	; () banked
 16747  0119A0  51DE               	movf	Port_Set@Type& (0+255),w,b
 16748  0119A2  0100               	movlb	0	; () banked
 16749  0119A4  6FD4               	movwf	(??_Port_Set+10)& (0+255),b
 16750  0119A6  6BD5               	clrf	(??_Port_Set+11)& (0+255),b
 16751  0119A8  0100               	movlb	0	; () banked
 16752  0119AA  3BD4               	swapf	(??_Port_Set+10)& (0+255),f,b
 16753  0119AC  3BD5               	swapf	(??_Port_Set+11)& (0+255),f,b
 16754  0119AE  0EF0               	movlw	240
 16755  0119B0  17D5               	andwf	(??_Port_Set+11)& (0+255),f,b
 16756  0119B2  51D4               	movf	(??_Port_Set+10)& (0+255),w,b
 16757  0119B4  0B0F               	andlw	15
 16758  0119B6  13D5               	iorwf	(??_Port_Set+11)& (0+255),f,b
 16759  0119B8  0EF0               	movlw	240
 16760  0119BA  17D4               	andwf	(??_Port_Set+10)& (0+255),f,b
 16761  0119BC  0100               	movlb	0	; () banked
 16762  0119BE  51DE               	movf	Port_Set@Type& (0+255),w,b
 16763  0119C0  0100               	movlb	0	; () banked
 16764  0119C2  6FD6               	movwf	(??_Port_Set+12)& (0+255),b
 16765  0119C4  6BD7               	clrf	(??_Port_Set+13)& (0+255),b
 16766  0119C6  0100               	movlb	0	; () banked
 16767  0119C8  90D8               	bcf	status,0,c
 16768  0119CA  37D6               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16769  0119CC  37D7               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16770  0119CE  0100               	movlb	0	; () banked
 16771  0119D0  90D8               	bcf	status,0,c
 16772  0119D2  37D6               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16773  0119D4  37D7               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16774  0119D6  0100               	movlb	0	; () banked
 16775  0119D8  51DE               	movf	Port_Set@Type& (0+255),w,b
 16776  0119DA  0100               	movlb	0	; () banked
 16777  0119DC  6FD8               	movwf	(??_Port_Set+14)& (0+255),b
 16778  0119DE  6BD9               	clrf	(??_Port_Set+15)& (0+255),b
 16779  0119E0  0100               	movlb	0	; () banked
 16780  0119E2  51D6               	movf	(??_Port_Set+12)& (0+255),w,b
 16781  0119E4  0100               	movlb	0	; () banked
 16782  0119E6  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16783  0119E8  0100               	movlb	0	; () banked
 16784  0119EA  51D7               	movf	(??_Port_Set+13)& (0+255),w,b
 16785  0119EC  0100               	movlb	0	; () banked
 16786  0119EE  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16787  0119F0  0100               	movlb	0	; () banked
 16788  0119F2  51D4               	movf	(??_Port_Set+10)& (0+255),w,b
 16789  0119F4  0100               	movlb	0	; () banked
 16790  0119F6  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16791  0119F8  0100               	movlb	0	; () banked
 16792  0119FA  51D5               	movf	(??_Port_Set+11)& (0+255),w,b
 16793  0119FC  0100               	movlb	0	; () banked
 16794  0119FE  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16795  011A00  0100               	movlb	0	; () banked
 16796  011A02  51D2               	movf	(??_Port_Set+8)& (0+255),w,b
 16797  011A04  0100               	movlb	0	; () banked
 16798  011A06  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16799  011A08  0100               	movlb	0	; () banked
 16800  011A0A  51D3               	movf	(??_Port_Set+9)& (0+255),w,b
 16801  011A0C  0100               	movlb	0	; () banked
 16802  011A0E  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16803  011A10  0100               	movlb	0	; () banked
 16804  011A12  51D0               	movf	(??_Port_Set+6)& (0+255),w,b
 16805  011A14  0100               	movlb	0	; () banked
 16806  011A16  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16807  011A18  0100               	movlb	0	; () banked
 16808  011A1A  51D1               	movf	(??_Port_Set+7)& (0+255),w,b
 16809  011A1C  0100               	movlb	0	; () banked
 16810  011A1E  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16811  011A20  0100               	movlb	0	; () banked
 16812  011A22  51CE               	movf	(??_Port_Set+4)& (0+255),w,b
 16813  011A24  0100               	movlb	0	; () banked
 16814  011A26  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16815  011A28  0100               	movlb	0	; () banked
 16816  011A2A  51CF               	movf	(??_Port_Set+5)& (0+255),w,b
 16817  011A2C  0100               	movlb	0	; () banked
 16818  011A2E  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16819  011A30  0100               	movlb	0	; () banked
 16820  011A32  51CC               	movf	(??_Port_Set+2)& (0+255),w,b
 16821  011A34  0100               	movlb	0	; () banked
 16822  011A36  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16823  011A38  0100               	movlb	0	; () banked
 16824  011A3A  51CD               	movf	(??_Port_Set+3)& (0+255),w,b
 16825  011A3C  0100               	movlb	0	; () banked
 16826  011A3E  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16827  011A40  0100               	movlb	0	; () banked
 16828  011A42  51CA               	movf	??_Port_Set& (0+255),w,b
 16829  011A44  0100               	movlb	0	; () banked
 16830  011A46  11D8               	iorwf	(??_Port_Set+14)& (0+255),w,b
 16831  011A48  0100               	movlb	0	; () banked
 16832  011A4A  6FDA               	movwf	Port_Set@TypeRequired& (0+255),b
 16833  011A4C  0100               	movlb	0	; () banked
 16834  011A4E  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 16835  011A50  0100               	movlb	0	; () banked
 16836  011A52  11D9               	iorwf	(??_Port_Set+15)& (0+255),w,b
 16837  011A54  0100               	movlb	0	; () banked
 16838  011A56  6FDB               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 16839                           
 16840                           ; BSR set to: 0
 16841                           ;Port.c: 574: UINT16 TypeActual = Type;
 16842  011A58  C0DE  F0DC         	movff	Port_Set@Type,Port_Set@TypeActual
 16843  011A5C  0100               	movlb	0	; () banked
 16844  011A5E  6BDD               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 16848  011A60  0E08               	movlw	8
 16849  011A62  0100               	movlb	0	; () banked
 16850  011A64  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16851  011A66  0100               	movlb	0	; () banked
 16852  011A68  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16853  011A6A  0E00               	movlw	0
 16854  011A6C  0100               	movlb	0	; () banked
 16855  011A6E  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16856  011A70  0100               	movlb	0	; () banked
 16857  011A72  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16858  011A74  0E01               	movlw	1
 16859  011A76  0100               	movlb	0	; () banked
 16860  011A78  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 16861  011A7A  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16862  011A7E  0100               	movlb	0	; () banked
 16863  011A80  6FCA               	movwf	??_Port_Set& (0+255),b
 16864  011A82  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 16865  011A84  0100               	movlb	0	; () banked
 16866  011A86  90D8               	bcf	status,0,c
 16867  011A88  37CA               	rlcf	??_Port_Set& (0+255),f,b
 16868  011A8A  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16869  011A8C  0100               	movlb	0	; () banked
 16870  011A8E  90D8               	bcf	status,0,c
 16871  011A90  37CA               	rlcf	??_Port_Set& (0+255),f,b
 16872  011A92  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16873  011A94  0100               	movlb	0	; () banked
 16874  011A96  51CA               	movf	??_Port_Set& (0+255),w,b
 16875  011A98  0100               	movlb	0	; () banked
 16876  011A9A  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16877  011A9C  0100               	movlb	0	; () banked
 16878  011A9E  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 16879  011AA0  0100               	movlb	0	; () banked
 16880  011AA2  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16881                           
 16882                           ; BSR set to: 0
 16883                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 16884  011AA4  0E08               	movlw	8
 16885  011AA6  0100               	movlb	0	; () banked
 16886  011AA8  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16887  011AAA  0100               	movlb	0	; () banked
 16888  011AAC  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16889  011AAE  0E00               	movlw	0
 16890  011AB0  0100               	movlb	0	; () banked
 16891  011AB2  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16892  011AB4  0100               	movlb	0	; () banked
 16893  011AB6  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16894  011AB8  0E02               	movlw	2
 16895  011ABA  0100               	movlb	0	; () banked
 16896  011ABC  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 16897  011ABE  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16898  011AC2  0100               	movlb	0	; () banked
 16899  011AC4  6FCA               	movwf	??_Port_Set& (0+255),b
 16900  011AC6  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 16901  011AC8  0100               	movlb	0	; () banked
 16902  011ACA  3BCA               	swapf	??_Port_Set& (0+255),f,b
 16903  011ACC  3BCB               	swapf	(??_Port_Set+1)& (0+255),f,b
 16904  011ACE  0EF0               	movlw	240
 16905  011AD0  17CB               	andwf	(??_Port_Set+1)& (0+255),f,b
 16906  011AD2  51CA               	movf	??_Port_Set& (0+255),w,b
 16907  011AD4  0B0F               	andlw	15
 16908  011AD6  13CB               	iorwf	(??_Port_Set+1)& (0+255),f,b
 16909  011AD8  0EF0               	movlw	240
 16910  011ADA  17CA               	andwf	??_Port_Set& (0+255),f,b
 16911  011ADC  0100               	movlb	0	; () banked
 16912  011ADE  51CA               	movf	??_Port_Set& (0+255),w,b
 16913  011AE0  0100               	movlb	0	; () banked
 16914  011AE2  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16915  011AE4  0100               	movlb	0	; () banked
 16916  011AE6  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 16917  011AE8  0100               	movlb	0	; () banked
 16918  011AEA  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 16922  011AEC  0E08               	movlw	8
 16923  011AEE  0100               	movlb	0	; () banked
 16924  011AF0  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16925  011AF2  0100               	movlb	0	; () banked
 16926  011AF4  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16927  011AF6  0E00               	movlw	0
 16928  011AF8  0100               	movlb	0	; () banked
 16929  011AFA  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16930  011AFC  0100               	movlb	0	; () banked
 16931  011AFE  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16932  011B00  0E03               	movlw	3
 16933  011B02  0100               	movlb	0	; () banked
 16934  011B04  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 16935  011B06  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16936  011B0A  0100               	movlb	0	; () banked
 16937  011B0C  6FCA               	movwf	??_Port_Set& (0+255),b
 16938  011B0E  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 16939  011B10  0E06               	movlw	6
 16940  011B12                     u10985:
 16941  011B12  90D8               	bcf	status,0,c
 16942  011B14  0100               	movlb	0	; () banked
 16943  011B16  37CA               	rlcf	??_Port_Set& (0+255),f,b
 16944  011B18  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16945  011B1A  2EE8               	decfsz	wreg,f,c
 16946  011B1C  D7FA               	goto	u10985
 16947  011B1E  0100               	movlb	0	; () banked
 16948  011B20  51CA               	movf	??_Port_Set& (0+255),w,b
 16949  011B22  0100               	movlb	0	; () banked
 16950  011B24  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16951  011B26  0100               	movlb	0	; () banked
 16952  011B28  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 16953  011B2A  0100               	movlb	0	; () banked
 16954  011B2C  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 16958  011B2E  0E08               	movlw	8
 16959  011B30  0100               	movlb	0	; () banked
 16960  011B32  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16961  011B34  0100               	movlb	0	; () banked
 16962  011B36  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16963  011B38  0E00               	movlw	0
 16964  011B3A  0100               	movlb	0	; () banked
 16965  011B3C  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16966  011B3E  0100               	movlb	0	; () banked
 16967  011B40  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16968  011B42  0E04               	movlw	4
 16969  011B44  0100               	movlb	0	; () banked
 16970  011B46  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 16971  011B48  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 16972  011B4C  0100               	movlb	0	; () banked
 16973  011B4E  6FCA               	movwf	??_Port_Set& (0+255),b
 16974  011B50  0100               	movlb	0	; () banked
 16975  011B52  51CA               	movf	??_Port_Set& (0+255),w,b
 16976  011B54  0100               	movlb	0	; () banked
 16977  011B56  6FCC               	movwf	(??_Port_Set+2)& (0+255),b
 16978  011B58  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 16979  011B5A  0100               	movlb	0	; () banked
 16980  011B5C  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 16981  011B5E  0100               	movlb	0	; () banked
 16982  011B60  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16983  011B62  0100               	movlb	0	; () banked
 16984  011B64  51CC               	movf	(??_Port_Set+2)& (0+255),w,b
 16985  011B66  0100               	movlb	0	; () banked
 16986  011B68  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 16990  011B6A  0E08               	movlw	8
 16991  011B6C  0100               	movlb	0	; () banked
 16992  011B6E  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 16993  011B70  0100               	movlb	0	; () banked
 16994  011B72  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 16995  011B74  0E00               	movlw	0
 16996  011B76  0100               	movlb	0	; () banked
 16997  011B78  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16998  011B7A  0100               	movlb	0	; () banked
 16999  011B7C  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17000  011B7E  0E05               	movlw	5
 17001  011B80  0100               	movlb	0	; () banked
 17002  011B82  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 17003  011B84  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 17004  011B88  0100               	movlb	0	; () banked
 17005  011B8A  6FCA               	movwf	??_Port_Set& (0+255),b
 17006  011B8C  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 17007  011B8E  0E0A               	movlw	10
 17008  011B90                     u10995:
 17009  011B90  90D8               	bcf	status,0,c
 17010  011B92  0100               	movlb	0	; () banked
 17011  011B94  37CA               	rlcf	??_Port_Set& (0+255),f,b
 17012  011B96  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17013  011B98  2EE8               	decfsz	wreg,f,c
 17014  011B9A  D7FA               	goto	u10995
 17015  011B9C  0100               	movlb	0	; () banked
 17016  011B9E  51CA               	movf	??_Port_Set& (0+255),w,b
 17017  011BA0  0100               	movlb	0	; () banked
 17018  011BA2  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17019  011BA4  0100               	movlb	0	; () banked
 17020  011BA6  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 17021  011BA8  0100               	movlb	0	; () banked
 17022  011BAA  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17023                           
 17024                           ; BSR set to: 0
 17025                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 17026  011BAC  0E08               	movlw	8
 17027  011BAE  0100               	movlb	0	; () banked
 17028  011BB0  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 17029  011BB2  0100               	movlb	0	; () banked
 17030  011BB4  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 17031  011BB6  0E00               	movlw	0
 17032  011BB8  0100               	movlb	0	; () banked
 17033  011BBA  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17034  011BBC  0100               	movlb	0	; () banked
 17035  011BBE  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17036  011BC0  0E06               	movlw	6
 17037  011BC2  0100               	movlb	0	; () banked
 17038  011BC4  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 17039  011BC6  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 17040  011BCA  0100               	movlb	0	; () banked
 17041  011BCC  6FCA               	movwf	??_Port_Set& (0+255),b
 17042  011BCE  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 17043  011BD0  0E0C               	movlw	12
 17044  011BD2                     u11005:
 17045  011BD2  90D8               	bcf	status,0,c
 17046  011BD4  0100               	movlb	0	; () banked
 17047  011BD6  37CA               	rlcf	??_Port_Set& (0+255),f,b
 17048  011BD8  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17049  011BDA  2EE8               	decfsz	wreg,f,c
 17050  011BDC  D7FA               	goto	u11005
 17051  011BDE  0100               	movlb	0	; () banked
 17052  011BE0  51CA               	movf	??_Port_Set& (0+255),w,b
 17053  011BE2  0100               	movlb	0	; () banked
 17054  011BE4  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17055  011BE6  0100               	movlb	0	; () banked
 17056  011BE8  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 17057  011BEA  0100               	movlb	0	; () banked
 17058  011BEC  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 17062  011BEE  0E08               	movlw	8
 17063  011BF0  0100               	movlb	0	; () banked
 17064  011BF2  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 17065  011BF4  0100               	movlb	0	; () banked
 17066  011BF6  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 17067  011BF8  0E00               	movlw	0
 17068  011BFA  0100               	movlb	0	; () banked
 17069  011BFC  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17070  011BFE  0100               	movlb	0	; () banked
 17071  011C00  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17072  011C02  0E07               	movlw	7
 17073  011C04  0100               	movlb	0	; () banked
 17074  011C06  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 17075  011C08  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 17076  011C0C  0100               	movlb	0	; () banked
 17077  011C0E  6FCA               	movwf	??_Port_Set& (0+255),b
 17078  011C10  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 17079  011C12  0E0E               	movlw	14
 17080  011C14                     u11015:
 17081  011C14  90D8               	bcf	status,0,c
 17082  011C16  0100               	movlb	0	; () banked
 17083  011C18  37CA               	rlcf	??_Port_Set& (0+255),f,b
 17084  011C1A  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17085  011C1C  2EE8               	decfsz	wreg,f,c
 17086  011C1E  D7FA               	goto	u11015
 17087  011C20  0100               	movlb	0	; () banked
 17088  011C22  51CA               	movf	??_Port_Set& (0+255),w,b
 17089  011C24  0100               	movlb	0	; () banked
 17090  011C26  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17091  011C28  0100               	movlb	0	; () banked
 17092  011C2A  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 17093  011C2C  0100               	movlb	0	; () banked
 17094  011C2E  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17095                           
 17096                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17097  011C30  0100               	movlb	0	; () banked
 17098  011C32  51DC               	movf	Port_Set@TypeActual& (0+255),w,b
 17099  011C34  0100               	movlb	0	; () banked
 17100  011C36  19DA               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17101  011C38  E148               	bnz	l528
 17102  011C3A  0100               	movlb	0	; () banked
 17103  011C3C  51DD               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17104  011C3E  0100               	movlb	0	; () banked
 17105  011C40  19DB               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17106  011C42  A4D8               	btfss	status,2,c
 17107  011C44  0012               	return	
 17108  011C46  D032               	goto	l526
 17109  011C48                     
 17110                           ; BSR set to: 0
 17111                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17112                           
 17113                           ; BSR set to: 0
 17114  011C48  0100               	movlb	0	; () banked
 17115  011C4A  EE20 F002          	lfsr	2,2
 17116  011C4E  51C7               	movf	Port_Set@pInput& (0+255),w,b
 17117  011C50  26D9               	addwf	fsr2l,f,c
 17118  011C52  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17119  011C54  22DA               	addwfc	fsr2h,f,c
 17120  011C56  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 17121  011C5A  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 17122  011C5E  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17123  011C62  EC29  F0B7         	call	_Byte_SetByte	;wreg free
 17124                           
 17125                           ;Port.c: 594: break;
 17126  011C66  0012               	return	
 17127  011C68                     
 17128                           ;Port.c: 597: pValue = ~pValue;
 17129  011C68  0100               	movlb	0	; () banked
 17130  011C6A  1FC9               	comf	Port_Set@pValue& (0+255),f,b
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17134  011C6C  0100               	movlb	0	; () banked
 17135  011C6E  EE20 F002          	lfsr	2,2
 17136  011C72  51C7               	movf	Port_Set@pInput& (0+255),w,b
 17137  011C74  26D9               	addwf	fsr2l,f,c
 17138  011C76  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17139  011C78  22DA               	addwfc	fsr2h,f,c
 17140  011C7A  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 17141  011C7E  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 17142  011C82  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17143  011C86  EC29  F0B7         	call	_Byte_SetByte	;wreg free
 17144                           
 17145                           ;Port.c: 599: break;
 17146  011C8A  0012               	return	
 17147  011C8C                     
 17148                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17149  011C8C  0100               	movlb	0	; () banked
 17150  011C8E  EE20 F004          	lfsr	2,4
 17151  011C92  51C7               	movf	Port_Set@pInput& (0+255),w,b
 17152  011C94  26D9               	addwf	fsr2l,f,c
 17153  011C96  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17154  011C98  22DA               	addwfc	fsr2h,f,c
 17155  011C9A  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 17156  011C9E  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 17157  011CA2  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17158  011CA6  EC29  F0B7         	call	_Byte_SetByte	;wreg free
 17159                           
 17160                           ;Port.c: 606: }
 17161                           
 17162                           ;Port.c: 605: break;
 17163                           
 17164                           ;Port.c: 604: default:
 17165                           
 17166                           ;Port.c: 603: break;
 17167  011CAA  0012               	return	
 17168  011CAC                     l526:
 17169  011CAC  0100               	movlb	0	; () banked
 17170  011CAE  51DE               	movf	Port_Set@Type& (0+255),w,b
 17171                           
 17172                           ; Switch size 1, requested type "space"
 17173                           ; Number of cases is 4, Range of values is 0 to 3
 17174                           ; switch strategies available:
 17175                           ; Name         Instructions Cycles
 17176                           ; simple_byte           13     7 (average)
 17177                           ;	Chosen strategy is simple_byte
 17178  011CB0  0A00               	xorlw	0	; case 0
 17179  011CB2  B4D8               	btfsc	status,2,c
 17180  011CB4  0012               	return	
 17181  011CB6  0A01               	xorlw	1	; case 1
 17182  011CB8  B4D8               	btfsc	status,2,c
 17183  011CBA  D7C6               	goto	l529
 17184  011CBC  0A03               	xorlw	3	; case 2
 17185  011CBE  B4D8               	btfsc	status,2,c
 17186  011CC0  D7D3               	goto	l531
 17187  011CC2  0A01               	xorlw	1	; case 3
 17188  011CC4  A4D8               	btfss	status,2,c
 17189                           
 17190                           ; BSR set to: 0
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;Port.c: 607: }
 17194  011CC6  0012               	return	
 17195  011CC8  D7E1               	goto	l532
 17196  011CCA                     l528:
 17197  011CCA  0012               	return		;funcret
 17198  011CCC                     __end_of_Port_Set:
 17199                           	opt stack 0
 17200                           tblptru	equ	0xFF8
 17201                           tblptrh	equ	0xFF7
 17202                           tblptrl	equ	0xFF6
 17203                           tablat	equ	0xFF5
 17204                           prodh	equ	0xFF4
 17205                           prodl	equ	0xFF3
 17206                           intcon	equ	0xFF2
 17207                           postinc0	equ	0xFEE
 17208                           wreg	equ	0xFE8
 17209                           indf1	equ	0xFE7
 17210                           postdec1	equ	0xFE5
 17211                           fsr1h	equ	0xFE2
 17212                           fsr1l	equ	0xFE1
 17213                           indf2	equ	0xFDF
 17214                           postinc2	equ	0xFDE
 17215                           postdec2	equ	0xFDD
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _Byte_SetByte *****************
 17221 ;; Defined at:
 17222 ;;		line 110 in file "Library/Types.c"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17225 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17226 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17227 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17228 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17229 ;;		 -> NULL(0), 
 17230 ;;  pValue          1    2[BANK0 ] unsigned char 
 17231 ;; Auto vars:     Size  Location     Type
 17232 ;;		None
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      void 
 17235 ;; Registers used:
 17236 ;;		fsr2l, fsr2h
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;Total ram usage:        3 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    7
 17249 ;; This function calls:
 17250 ;;		Nothing
 17251 ;; This function is called by:
 17252 ;;		_Port_Set
 17253 ;;		_I2C_Init
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           	psect	text67
 17258  016E52                     __ptext67:
 17259                           	opt stack 0
 17260  016E52                     _Byte_SetByte:
 17261                           	opt stack 19
 17262                           
 17263                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17264                           
 17265                           ;incstack = 0
 17266  016E52  C0B8  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17267  016E56  C0B9  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17268  016E5A  C0BA  FFDF         	movff	Byte_SetByte@pValue,indf2
 17269  016E5E  0012               	return		;funcret
 17270  016E60                     __end_of_Byte_SetByte:
 17271                           	opt stack 0
 17272                           tblptru	equ	0xFF8
 17273                           tblptrh	equ	0xFF7
 17274                           tblptrl	equ	0xFF6
 17275                           tablat	equ	0xFF5
 17276                           prodh	equ	0xFF4
 17277                           prodl	equ	0xFF3
 17278                           intcon	equ	0xFF2
 17279                           postinc0	equ	0xFEE
 17280                           wreg	equ	0xFE8
 17281                           indf1	equ	0xFE7
 17282                           postdec1	equ	0xFE5
 17283                           fsr1h	equ	0xFE2
 17284                           fsr1l	equ	0xFE1
 17285                           indf2	equ	0xFDF
 17286                           postinc2	equ	0xFDE
 17287                           postdec2	equ	0xFDD
 17288                           fsr2h	equ	0xFDA
 17289                           fsr2l	equ	0xFD9
 17290                           status	equ	0xFD8
 17291                           
 17292 ;; *************** function _GetPortTRIS *****************
 17293 ;; Defined at:
 17294 ;;		line 67 in file "Library/Port.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;  pInput          1    wreg     enum E6786
 17297 ;; Auto vars:     Size  Location     Type
 17298 ;;  pInput          1    2[BANK0 ] enum E6786
 17299 ;; Return value:  Size  Location     Type
 17300 ;;                  2    0[BANK0 ] PTR struct Byte
 17301 ;; Registers used:
 17302 ;;		wreg, status,2, status,0
 17303 ;; Tracked objects:
 17304 ;;		On entry : 0/0
 17305 ;;		On exit  : 0/0
 17306 ;;		Unchanged: 0/0
 17307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17308 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17312 ;;Total ram usage:        3 bytes
 17313 ;; Hardware stack levels used:    1
 17314 ;; Hardware stack levels required when called:    7
 17315 ;; This function calls:
 17316 ;;		Nothing
 17317 ;; This function is called by:
 17318 ;;		_Port_Init
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text68
 17323  014FEA                     __ptext68:
 17324                           	opt stack 0
 17325  014FEA                     _GetPortTRIS:
 17326                           	opt stack 20
 17327                           
 17328                           ;incstack = 0
 17329                           ;GetPortTRIS@pInput stored from wreg
 17330  014FEA  0100               	movlb	0	; () banked
 17331  014FEC  6FBA               	movwf	GetPortTRIS@pInput& (0+255),b
 17332                           
 17333                           ;Port.c: 69: switch (pInput)
 17334  014FEE  D038               	goto	l363
 17335  014FF0                     
 17336                           ;Port.c: 72: return (BytePtr)&TRISA;
 17337  014FF0  0E92               	movlw	146
 17338  014FF2  0100               	movlb	0	; () banked
 17339  014FF4  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17340  014FF6  0E0F               	movlw	15
 17341  014FF8  0100               	movlb	0	; () banked
 17342  014FFA  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17343                           
 17344                           ; BSR set to: 0
 17345  014FFC  0012               	return	
 17346  014FFE                     
 17347                           ; BSR set to: 0
 17348                           ;Port.c: 74: return (BytePtr)&TRISB;
 17349                           
 17350                           ; BSR set to: 0
 17351  014FFE  0E93               	movlw	147
 17352  015000  0100               	movlb	0	; () banked
 17353  015002  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17354  015004  0E0F               	movlw	15
 17355  015006  0100               	movlb	0	; () banked
 17356  015008  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17357                           
 17358                           ; BSR set to: 0
 17359  01500A  0012               	return	
 17360  01500C                     
 17361                           ; BSR set to: 0
 17362                           ;Port.c: 76: return (BytePtr)&TRISC;
 17363                           
 17364                           ; BSR set to: 0
 17365  01500C  0E94               	movlw	148
 17366  01500E  0100               	movlb	0	; () banked
 17367  015010  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17368  015012  0E0F               	movlw	15
 17369  015014  0100               	movlb	0	; () banked
 17370  015016  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17371                           
 17372                           ; BSR set to: 0
 17373  015018  0012               	return	
 17374  01501A                     
 17375                           ; BSR set to: 0
 17376                           ;Port.c: 78: return (BytePtr)&TRISD;
 17377                           
 17378                           ; BSR set to: 0
 17379  01501A  0E95               	movlw	149
 17380  01501C  0100               	movlb	0	; () banked
 17381  01501E  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17382  015020  0E0F               	movlw	15
 17383  015022  0100               	movlb	0	; () banked
 17384  015024  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17385                           
 17386                           ; BSR set to: 0
 17387  015026  0012               	return	
 17388  015028                     
 17389                           ; BSR set to: 0
 17390                           ;Port.c: 80: return (BytePtr)&TRISE;
 17391                           
 17392                           ; BSR set to: 0
 17393  015028  0E96               	movlw	150
 17394  01502A  0100               	movlb	0	; () banked
 17395  01502C  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17396  01502E  0E0F               	movlw	15
 17397  015030  0100               	movlb	0	; () banked
 17398  015032  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17399                           
 17400                           ; BSR set to: 0
 17401  015034  0012               	return	
 17402  015036                     
 17403                           ; BSR set to: 0
 17404                           ;Port.c: 82: return (BytePtr)&TRISF;
 17405                           
 17406                           ; BSR set to: 0
 17407  015036  0E97               	movlw	151
 17408  015038  0100               	movlb	0	; () banked
 17409  01503A  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17410  01503C  0E0F               	movlw	15
 17411  01503E  0100               	movlb	0	; () banked
 17412  015040  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17413                           
 17414                           ; BSR set to: 0
 17415  015042  0012               	return	
 17416  015044                     
 17417                           ; BSR set to: 0
 17418                           ;Port.c: 84: return (BytePtr)&TRISG;
 17419                           
 17420                           ; BSR set to: 0
 17421  015044  0E98               	movlw	152
 17422  015046  0100               	movlb	0	; () banked
 17423  015048  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17424  01504A  0E0F               	movlw	15
 17425  01504C  0100               	movlb	0	; () banked
 17426  01504E  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17427                           
 17428                           ; BSR set to: 0
 17429  015050  0012               	return	
 17430  015052                     
 17431                           ; BSR set to: 0
 17432                           ;Port.c: 86: return (void*)0;
 17433                           
 17434                           ; BSR set to: 0
 17435  015052  0E00               	movlw	0
 17436  015054  0100               	movlb	0	; () banked
 17437  015056  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 17438  015058  0E00               	movlw	0
 17439  01505A  0100               	movlb	0	; () banked
 17440  01505C  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;Port.c: 87: }
 17444                           
 17445                           ; BSR set to: 0
 17446  01505E  0012               	return	
 17447  015060                     l363:
 17448                           
 17449                           ; BSR set to: 0
 17450  015060  0100               	movlb	0	; () banked
 17451  015062  51BA               	movf	GetPortTRIS@pInput& (0+255),w,b
 17452                           
 17453                           ; Switch size 1, requested type "space"
 17454                           ; Number of cases is 7, Range of values is 0 to 6
 17455                           ; switch strategies available:
 17456                           ; Name         Instructions Cycles
 17457                           ; simple_byte           22    12 (average)
 17458                           ;	Chosen strategy is simple_byte
 17459  015064  0A00               	xorlw	0	; case 0
 17460  015066  B4D8               	btfsc	status,2,c
 17461  015068  D7C3               	goto	l364
 17462  01506A  0A01               	xorlw	1	; case 1
 17463  01506C  B4D8               	btfsc	status,2,c
 17464  01506E  D7C7               	goto	l366
 17465  015070  0A03               	xorlw	3	; case 2
 17466  015072  B4D8               	btfsc	status,2,c
 17467  015074  D7CB               	goto	l367
 17468  015076  0A01               	xorlw	1	; case 3
 17469  015078  B4D8               	btfsc	status,2,c
 17470  01507A  D7CF               	goto	l368
 17471  01507C  0A07               	xorlw	7	; case 4
 17472  01507E  B4D8               	btfsc	status,2,c
 17473  015080  D7D3               	goto	l369
 17474  015082  0A01               	xorlw	1	; case 5
 17475  015084  B4D8               	btfsc	status,2,c
 17476  015086  D7D7               	goto	l370
 17477  015088  0A03               	xorlw	3	; case 6
 17478  01508A  B4D8               	btfsc	status,2,c
 17479  01508C  D7DB               	goto	l371
 17480  01508E  D7E1               	goto	l372
 17481  015090                     __end_of_GetPortTRIS:
 17482                           	opt stack 0
 17483                           tblptru	equ	0xFF8
 17484                           tblptrh	equ	0xFF7
 17485                           tblptrl	equ	0xFF6
 17486                           tablat	equ	0xFF5
 17487                           prodh	equ	0xFF4
 17488                           prodl	equ	0xFF3
 17489                           intcon	equ	0xFF2
 17490                           postinc0	equ	0xFEE
 17491                           wreg	equ	0xFE8
 17492                           indf1	equ	0xFE7
 17493                           postdec1	equ	0xFE5
 17494                           fsr1h	equ	0xFE2
 17495                           fsr1l	equ	0xFE1
 17496                           indf2	equ	0xFDF
 17497                           postinc2	equ	0xFDE
 17498                           postdec2	equ	0xFDD
 17499                           fsr2h	equ	0xFDA
 17500                           fsr2l	equ	0xFD9
 17501                           status	equ	0xFD8
 17502                           
 17503 ;; *************** function _GetPortProperties *****************
 17504 ;; Defined at:
 17505 ;;		line 21 in file "Library/Port.c"
 17506 ;; Parameters:    Size  Location     Type
 17507 ;;  pInput          1    wreg     enum E6786
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  pInput          1    2[BANK0 ] enum E6786
 17510 ;; Return value:  Size  Location     Type
 17511 ;;                  2    0[BANK0 ] PTR struct PortProperty
 17512 ;; Registers used:
 17513 ;;		wreg, status,2, status,0
 17514 ;; Tracked objects:
 17515 ;;		On entry : 0/0
 17516 ;;		On exit  : 0/0
 17517 ;;		Unchanged: 0/0
 17518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;Total ram usage:        3 bytes
 17524 ;; Hardware stack levels used:    1
 17525 ;; Hardware stack levels required when called:    7
 17526 ;; This function calls:
 17527 ;;		Nothing
 17528 ;; This function is called by:
 17529 ;;		_Port_Init
 17530 ;; This function uses a non-reentrant model
 17531 ;;
 17532                           
 17533                           	psect	text69
 17534  015090                     __ptext69:
 17535                           	opt stack 0
 17536  015090                     _GetPortProperties:
 17537                           	opt stack 20
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;incstack = 0
 17541                           ;GetPortProperties@pInput stored from wreg
 17542  015090  0100               	movlb	0	; () banked
 17543  015092  6FBA               	movwf	GetPortProperties@pInput& (0+255),b
 17544                           
 17545                           ;Port.c: 23: switch (pInput)
 17546  015094  D038               	goto	l337
 17547  015096                     
 17548                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 17549  015096  0E0B               	movlw	low _PortA_Property
 17550  015098  0100               	movlb	0	; () banked
 17551  01509A  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17552  01509C  0EFF               	movlw	high _PortA_Property
 17553  01509E  0100               	movlb	0	; () banked
 17554  0150A0  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17555                           
 17556                           ; BSR set to: 0
 17557  0150A2  0012               	return	
 17558  0150A4                     
 17559                           ; BSR set to: 0
 17560                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 17561                           
 17562                           ; BSR set to: 0
 17563  0150A4  0E09               	movlw	low _PortB_Property
 17564  0150A6  0100               	movlb	0	; () banked
 17565  0150A8  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17566  0150AA  0EFF               	movlw	high _PortB_Property
 17567  0150AC  0100               	movlb	0	; () banked
 17568  0150AE  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17569                           
 17570                           ; BSR set to: 0
 17571  0150B0  0012               	return	
 17572  0150B2                     
 17573                           ; BSR set to: 0
 17574                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 17575                           
 17576                           ; BSR set to: 0
 17577  0150B2  0E07               	movlw	low _PortC_Property
 17578  0150B4  0100               	movlb	0	; () banked
 17579  0150B6  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17580  0150B8  0EFF               	movlw	high _PortC_Property
 17581  0150BA  0100               	movlb	0	; () banked
 17582  0150BC  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17583                           
 17584                           ; BSR set to: 0
 17585  0150BE  0012               	return	
 17586  0150C0                     
 17587                           ; BSR set to: 0
 17588                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 17589                           
 17590                           ; BSR set to: 0
 17591  0150C0  0E05               	movlw	low _PortD_Property
 17592  0150C2  0100               	movlb	0	; () banked
 17593  0150C4  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17594  0150C6  0EFF               	movlw	high _PortD_Property
 17595  0150C8  0100               	movlb	0	; () banked
 17596  0150CA  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17597                           
 17598                           ; BSR set to: 0
 17599  0150CC  0012               	return	
 17600  0150CE                     
 17601                           ; BSR set to: 0
 17602                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 17603                           
 17604                           ; BSR set to: 0
 17605  0150CE  0E03               	movlw	low _PortE_Property
 17606  0150D0  0100               	movlb	0	; () banked
 17607  0150D2  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17608  0150D4  0EFF               	movlw	high _PortE_Property
 17609  0150D6  0100               	movlb	0	; () banked
 17610  0150D8  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17611                           
 17612                           ; BSR set to: 0
 17613  0150DA  0012               	return	
 17614  0150DC                     
 17615                           ; BSR set to: 0
 17616                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 17617                           
 17618                           ; BSR set to: 0
 17619  0150DC  0E01               	movlw	low _PortF_Property
 17620  0150DE  0100               	movlb	0	; () banked
 17621  0150E0  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17622  0150E2  0EFF               	movlw	high _PortF_Property
 17623  0150E4  0100               	movlb	0	; () banked
 17624  0150E6  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17625                           
 17626                           ; BSR set to: 0
 17627  0150E8  0012               	return	
 17628  0150EA                     
 17629                           ; BSR set to: 0
 17630                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 17631                           
 17632                           ; BSR set to: 0
 17633  0150EA  0EFF               	movlw	low _PortG_Property
 17634  0150EC  0100               	movlb	0	; () banked
 17635  0150EE  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17636  0150F0  0EFE               	movlw	high _PortG_Property
 17637  0150F2  0100               	movlb	0	; () banked
 17638  0150F4  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17639                           
 17640                           ; BSR set to: 0
 17641  0150F6  0012               	return	
 17642  0150F8                     
 17643                           ; BSR set to: 0
 17644                           ;Port.c: 40: return (void*)0;
 17645                           
 17646                           ; BSR set to: 0
 17647  0150F8  0E00               	movlw	0
 17648  0150FA  0100               	movlb	0	; () banked
 17649  0150FC  6FB8               	movwf	?_GetPortProperties& (0+255),b
 17650  0150FE  0E00               	movlw	0
 17651  015100  0100               	movlb	0	; () banked
 17652  015102  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 17653                           
 17654                           ; BSR set to: 0
 17655                           ;Port.c: 41: }
 17656                           
 17657                           ; BSR set to: 0
 17658  015104  0012               	return	
 17659  015106                     l337:
 17660                           
 17661                           ; BSR set to: 0
 17662  015106  0100               	movlb	0	; () banked
 17663  015108  51BA               	movf	GetPortProperties@pInput& (0+255),w,b
 17664                           
 17665                           ; Switch size 1, requested type "space"
 17666                           ; Number of cases is 7, Range of values is 0 to 6
 17667                           ; switch strategies available:
 17668                           ; Name         Instructions Cycles
 17669                           ; simple_byte           22    12 (average)
 17670                           ;	Chosen strategy is simple_byte
 17671  01510A  0A00               	xorlw	0	; case 0
 17672  01510C  B4D8               	btfsc	status,2,c
 17673  01510E  D7C3               	goto	l338
 17674  015110  0A01               	xorlw	1	; case 1
 17675  015112  B4D8               	btfsc	status,2,c
 17676  015114  D7C7               	goto	l340
 17677  015116  0A03               	xorlw	3	; case 2
 17678  015118  B4D8               	btfsc	status,2,c
 17679  01511A  D7CB               	goto	l341
 17680  01511C  0A01               	xorlw	1	; case 3
 17681  01511E  B4D8               	btfsc	status,2,c
 17682  015120  D7CF               	goto	l342
 17683  015122  0A07               	xorlw	7	; case 4
 17684  015124  B4D8               	btfsc	status,2,c
 17685  015126  D7D3               	goto	l343
 17686  015128  0A01               	xorlw	1	; case 5
 17687  01512A  B4D8               	btfsc	status,2,c
 17688  01512C  D7D7               	goto	l344
 17689  01512E  0A03               	xorlw	3	; case 6
 17690  015130  B4D8               	btfsc	status,2,c
 17691  015132  D7DB               	goto	l345
 17692  015134  D7E1               	goto	l346
 17693  015136                     __end_of_GetPortProperties:
 17694                           	opt stack 0
 17695                           tblptru	equ	0xFF8
 17696                           tblptrh	equ	0xFF7
 17697                           tblptrl	equ	0xFF6
 17698                           tablat	equ	0xFF5
 17699                           prodh	equ	0xFF4
 17700                           prodl	equ	0xFF3
 17701                           intcon	equ	0xFF2
 17702                           postinc0	equ	0xFEE
 17703                           wreg	equ	0xFE8
 17704                           indf1	equ	0xFE7
 17705                           postdec1	equ	0xFE5
 17706                           fsr1h	equ	0xFE2
 17707                           fsr1l	equ	0xFE1
 17708                           indf2	equ	0xFDF
 17709                           postinc2	equ	0xFDE
 17710                           postdec2	equ	0xFDD
 17711                           fsr2h	equ	0xFDA
 17712                           fsr2l	equ	0xFD9
 17713                           status	equ	0xFD8
 17714                           
 17715 ;; *************** function _GetPortPORT *****************
 17716 ;; Defined at:
 17717 ;;		line 44 in file "Library/Port.c"
 17718 ;; Parameters:    Size  Location     Type
 17719 ;;  pInput          1    wreg     enum E6786
 17720 ;; Auto vars:     Size  Location     Type
 17721 ;;  pInput          1    2[BANK0 ] enum E6786
 17722 ;; Return value:  Size  Location     Type
 17723 ;;                  2    0[BANK0 ] PTR struct Byte
 17724 ;; Registers used:
 17725 ;;		wreg, status,2, status,0
 17726 ;; Tracked objects:
 17727 ;;		On entry : 0/0
 17728 ;;		On exit  : 0/0
 17729 ;;		Unchanged: 0/0
 17730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17731 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17735 ;;Total ram usage:        3 bytes
 17736 ;; Hardware stack levels used:    1
 17737 ;; Hardware stack levels required when called:    7
 17738 ;; This function calls:
 17739 ;;		Nothing
 17740 ;; This function is called by:
 17741 ;;		_Port_Init
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           	psect	text70
 17746  015136                     __ptext70:
 17747                           	opt stack 0
 17748  015136                     _GetPortPORT:
 17749                           	opt stack 20
 17750                           
 17751                           ; BSR set to: 0
 17752                           ;incstack = 0
 17753                           ;GetPortPORT@pInput stored from wreg
 17754  015136  0100               	movlb	0	; () banked
 17755  015138  6FBA               	movwf	GetPortPORT@pInput& (0+255),b
 17756                           
 17757                           ;Port.c: 46: switch (pInput)
 17758  01513A  D038               	goto	l350
 17759  01513C                     
 17760                           ;Port.c: 49: return (BytePtr)&PORTA;
 17761  01513C  0E80               	movlw	128
 17762  01513E  0100               	movlb	0	; () banked
 17763  015140  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17764  015142  0E0F               	movlw	15
 17765  015144  0100               	movlb	0	; () banked
 17766  015146  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17767                           
 17768                           ; BSR set to: 0
 17769  015148  0012               	return	
 17770  01514A                     
 17771                           ; BSR set to: 0
 17772                           ;Port.c: 51: return (BytePtr)&PORTB;
 17773                           
 17774                           ; BSR set to: 0
 17775  01514A  0E81               	movlw	129
 17776  01514C  0100               	movlb	0	; () banked
 17777  01514E  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17778  015150  0E0F               	movlw	15
 17779  015152  0100               	movlb	0	; () banked
 17780  015154  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17781                           
 17782                           ; BSR set to: 0
 17783  015156  0012               	return	
 17784  015158                     
 17785                           ; BSR set to: 0
 17786                           ;Port.c: 53: return (BytePtr)&PORTC;
 17787                           
 17788                           ; BSR set to: 0
 17789  015158  0E82               	movlw	130
 17790  01515A  0100               	movlb	0	; () banked
 17791  01515C  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17792  01515E  0E0F               	movlw	15
 17793  015160  0100               	movlb	0	; () banked
 17794  015162  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17795                           
 17796                           ; BSR set to: 0
 17797  015164  0012               	return	
 17798  015166                     
 17799                           ; BSR set to: 0
 17800                           ;Port.c: 55: return (BytePtr)&PORTD;
 17801                           
 17802                           ; BSR set to: 0
 17803  015166  0E83               	movlw	131
 17804  015168  0100               	movlb	0	; () banked
 17805  01516A  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17806  01516C  0E0F               	movlw	15
 17807  01516E  0100               	movlb	0	; () banked
 17808  015170  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17809                           
 17810                           ; BSR set to: 0
 17811  015172  0012               	return	
 17812  015174                     
 17813                           ; BSR set to: 0
 17814                           ;Port.c: 57: return (BytePtr)&PORTE;
 17815                           
 17816                           ; BSR set to: 0
 17817  015174  0E84               	movlw	132
 17818  015176  0100               	movlb	0	; () banked
 17819  015178  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17820  01517A  0E0F               	movlw	15
 17821  01517C  0100               	movlb	0	; () banked
 17822  01517E  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17823                           
 17824                           ; BSR set to: 0
 17825  015180  0012               	return	
 17826  015182                     
 17827                           ; BSR set to: 0
 17828                           ;Port.c: 59: return (BytePtr)&PORTF;
 17829                           
 17830                           ; BSR set to: 0
 17831  015182  0E85               	movlw	133
 17832  015184  0100               	movlb	0	; () banked
 17833  015186  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17834  015188  0E0F               	movlw	15
 17835  01518A  0100               	movlb	0	; () banked
 17836  01518C  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17837                           
 17838                           ; BSR set to: 0
 17839  01518E  0012               	return	
 17840  015190                     
 17841                           ; BSR set to: 0
 17842                           ;Port.c: 61: return (BytePtr)&PORTG;
 17843                           
 17844                           ; BSR set to: 0
 17845  015190  0E86               	movlw	134
 17846  015192  0100               	movlb	0	; () banked
 17847  015194  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17848  015196  0E0F               	movlw	15
 17849  015198  0100               	movlb	0	; () banked
 17850  01519A  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17851                           
 17852                           ; BSR set to: 0
 17853  01519C  0012               	return	
 17854  01519E                     
 17855                           ; BSR set to: 0
 17856                           ;Port.c: 63: return (void*)0;
 17857                           
 17858                           ; BSR set to: 0
 17859  01519E  0E00               	movlw	0
 17860  0151A0  0100               	movlb	0	; () banked
 17861  0151A2  6FB8               	movwf	?_GetPortPORT& (0+255),b
 17862  0151A4  0E00               	movlw	0
 17863  0151A6  0100               	movlb	0	; () banked
 17864  0151A8  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 17865                           
 17866                           ; BSR set to: 0
 17867                           ;Port.c: 64: }
 17868                           
 17869                           ; BSR set to: 0
 17870  0151AA  0012               	return	
 17871  0151AC                     l350:
 17872                           
 17873                           ; BSR set to: 0
 17874  0151AC  0100               	movlb	0	; () banked
 17875  0151AE  51BA               	movf	GetPortPORT@pInput& (0+255),w,b
 17876                           
 17877                           ; Switch size 1, requested type "space"
 17878                           ; Number of cases is 7, Range of values is 0 to 6
 17879                           ; switch strategies available:
 17880                           ; Name         Instructions Cycles
 17881                           ; simple_byte           22    12 (average)
 17882                           ;	Chosen strategy is simple_byte
 17883  0151B0  0A00               	xorlw	0	; case 0
 17884  0151B2  B4D8               	btfsc	status,2,c
 17885  0151B4  D7C3               	goto	l351
 17886  0151B6  0A01               	xorlw	1	; case 1
 17887  0151B8  B4D8               	btfsc	status,2,c
 17888  0151BA  D7C7               	goto	l353
 17889  0151BC  0A03               	xorlw	3	; case 2
 17890  0151BE  B4D8               	btfsc	status,2,c
 17891  0151C0  D7CB               	goto	l354
 17892  0151C2  0A01               	xorlw	1	; case 3
 17893  0151C4  B4D8               	btfsc	status,2,c
 17894  0151C6  D7CF               	goto	l355
 17895  0151C8  0A07               	xorlw	7	; case 4
 17896  0151CA  B4D8               	btfsc	status,2,c
 17897  0151CC  D7D3               	goto	l356
 17898  0151CE  0A01               	xorlw	1	; case 5
 17899  0151D0  B4D8               	btfsc	status,2,c
 17900  0151D2  D7D7               	goto	l357
 17901  0151D4  0A03               	xorlw	3	; case 6
 17902  0151D6  B4D8               	btfsc	status,2,c
 17903  0151D8  D7DB               	goto	l358
 17904  0151DA  D7E1               	goto	l359
 17905  0151DC                     __end_of_GetPortPORT:
 17906                           	opt stack 0
 17907                           tblptru	equ	0xFF8
 17908                           tblptrh	equ	0xFF7
 17909                           tblptrl	equ	0xFF6
 17910                           tablat	equ	0xFF5
 17911                           prodh	equ	0xFF4
 17912                           prodl	equ	0xFF3
 17913                           intcon	equ	0xFF2
 17914                           postinc0	equ	0xFEE
 17915                           wreg	equ	0xFE8
 17916                           indf1	equ	0xFE7
 17917                           postdec1	equ	0xFE5
 17918                           fsr1h	equ	0xFE2
 17919                           fsr1l	equ	0xFE1
 17920                           indf2	equ	0xFDF
 17921                           postinc2	equ	0xFDE
 17922                           postdec2	equ	0xFDD
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function _LED_Init *****************
 17928 ;; Defined at:
 17929 ;;		line 15 in file "Library/LED.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  pLED            1    wreg     enum E6739
 17932 ;; Auto vars:     Size  Location     Type
 17933 ;;  pLED            1   45[BANK0 ] enum E6739
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      void 
 17936 ;; Registers used:
 17937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17938 ;; Tracked objects:
 17939 ;;		On entry : 0/0
 17940 ;;		On exit  : 0/0
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17947 ;;Total ram usage:        1 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; Hardware stack levels required when called:   12
 17950 ;; This function calls:
 17951 ;;		_LED_Set
 17952 ;;		_Port_SetPinType
 17953 ;; This function is called by:
 17954 ;;		_MXK_Init
 17955 ;; This function uses a non-reentrant model
 17956 ;;
 17957                           
 17958                           	psect	text71
 17959  016022                     __ptext71:
 17960                           	opt stack 0
 17961  016022                     _LED_Init:
 17962                           	opt stack 16
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;incstack = 0
 17966                           ;LED_Init@pLED stored from wreg
 17967  016022  0100               	movlb	0	; () banked
 17968  016024  6FE5               	movwf	LED_Init@pLED& (0+255),b
 17969                           
 17970                           ;LED.c: 17: switch (pLED)
 17971  016026  D01E               	goto	l220
 17972  016028                     
 17973                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 17974  016028  0EA3               	movlw	low _PortC
 17975  01602A  0100               	movlb	0	; () banked
 17976  01602C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 17977  01602E  0E00               	movlw	high _PortC
 17978  016030  0100               	movlb	0	; () banked
 17979  016032  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17980  016034  0E00               	movlw	0
 17981  016036  0100               	movlb	0	; () banked
 17982  016038  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 17983  01603A  0E03               	movlw	3
 17984  01603C  0100               	movlb	0	; () banked
 17985  01603E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 17986  016040  ECB5  F095         	call	_Port_SetPinType	;wreg free
 17987                           
 17988                           ;LED.c: 21: break;
 17989  016044  D017               	goto	l222
 17990  016046                     
 17991                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 17992  016046  0EA3               	movlw	low _PortC
 17993  016048  0100               	movlb	0	; () banked
 17994  01604A  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 17995  01604C  0E00               	movlw	high _PortC
 17996  01604E  0100               	movlb	0	; () banked
 17997  016050  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17998  016052  0E01               	movlw	1
 17999  016054  0100               	movlb	0	; () banked
 18000  016056  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 18001  016058  0E03               	movlw	3
 18002  01605A  0100               	movlb	0	; () banked
 18003  01605C  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 18004  01605E  ECB5  F095         	call	_Port_SetPinType	;wreg free
 18005                           
 18006                           ;LED.c: 25: }
 18007                           
 18008                           ;LED.c: 24: break;
 18009  016062  D008               	goto	l222
 18010  016064                     l220:
 18011  016064  0100               	movlb	0	; () banked
 18012  016066  51E5               	movf	LED_Init@pLED& (0+255),w,b
 18013                           
 18014                           ; Switch size 1, requested type "space"
 18015                           ; Number of cases is 2, Range of values is 0 to 1
 18016                           ; switch strategies available:
 18017                           ; Name         Instructions Cycles
 18018                           ; simple_byte            7     4 (average)
 18019                           ;	Chosen strategy is simple_byte
 18020  016068  0A00               	xorlw	0	; case 0
 18021  01606A  B4D8               	btfsc	status,2,c
 18022  01606C  D7DD               	goto	l221
 18023  01606E  0A01               	xorlw	1	; case 1
 18024  016070  B4D8               	btfsc	status,2,c
 18025  016072  D7E9               	goto	l223
 18026  016074                     l222:
 18027                           
 18028                           ;LED.c: 26: LED_Set(pLED, 0);
 18029                           
 18030                           ; BSR set to: 0
 18031  016074  0E00               	movlw	0
 18032  016076  0100               	movlb	0	; () banked
 18033  016078  6FCC               	movwf	LED_Set@pValue& (0+255),b
 18034  01607A  0100               	movlb	0	; () banked
 18035  01607C  51E5               	movf	LED_Init@pLED& (0+255),w,b
 18036  01607E  EC4F  F0B1         	call	_LED_Set
 18037  016082  0012               	return		;funcret
 18038  016084                     __end_of_LED_Init:
 18039                           	opt stack 0
 18040                           tblptru	equ	0xFF8
 18041                           tblptrh	equ	0xFF7
 18042                           tblptrl	equ	0xFF6
 18043                           tablat	equ	0xFF5
 18044                           prodh	equ	0xFF4
 18045                           prodl	equ	0xFF3
 18046                           intcon	equ	0xFF2
 18047                           postinc0	equ	0xFEE
 18048                           wreg	equ	0xFE8
 18049                           indf1	equ	0xFE7
 18050                           postdec1	equ	0xFE5
 18051                           fsr1h	equ	0xFE2
 18052                           fsr1l	equ	0xFE1
 18053                           indf2	equ	0xFDF
 18054                           postinc2	equ	0xFDE
 18055                           postdec2	equ	0xFDD
 18056                           fsr2h	equ	0xFDA
 18057                           fsr2l	equ	0xFD9
 18058                           status	equ	0xFD8
 18059                           
 18060 ;; *************** function _LED_Set *****************
 18061 ;; Defined at:
 18062 ;;		line 33 in file "Library/LED.c"
 18063 ;; Parameters:    Size  Location     Type
 18064 ;;  pLED            1    wreg     enum E6739
 18065 ;;  pValue          1   20[BANK0 ] unsigned char 
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;  pLED            1   21[BANK0 ] enum E6739
 18068 ;; Return value:  Size  Location     Type
 18069 ;;                  1    wreg      void 
 18070 ;; Registers used:
 18071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18077 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18081 ;;Total ram usage:        2 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:   11
 18084 ;; This function calls:
 18085 ;;		_Port_SetPin
 18086 ;; This function is called by:
 18087 ;;		_LED_Init
 18088 ;;		_SYSTEM_Initialize
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092                           	psect	text72
 18093  01629E                     __ptext72:
 18094                           	opt stack 0
 18095  01629E                     _LED_Set:
 18096                           	opt stack 16
 18097                           
 18098                           ;incstack = 0
 18099                           ;LED_Set@pLED stored from wreg
 18100  01629E  0100               	movlb	0	; () banked
 18101  0162A0  6FCD               	movwf	LED_Set@pLED& (0+255),b
 18102                           
 18103                           ;LED.c: 35: switch (pLED)
 18104  0162A2  D01C               	goto	l227
 18105  0162A4                     
 18106                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18107  0162A4  0EA3               	movlw	low _PortC
 18108  0162A6  0100               	movlb	0	; () banked
 18109  0162A8  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18110  0162AA  0E00               	movlw	high _PortC
 18111  0162AC  0100               	movlb	0	; () banked
 18112  0162AE  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18113  0162B0  0E00               	movlw	0
 18114  0162B2  0100               	movlb	0	; () banked
 18115  0162B4  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18116  0162B6  C0CC  F0CA         	movff	LED_Set@pValue,Port_SetPin@pValue
 18117  0162BA  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18118                           
 18119                           ;LED.c: 39: break;
 18120  0162BE  0012               	return	
 18121  0162C0                     
 18122                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18123  0162C0  0EA3               	movlw	low _PortC
 18124  0162C2  0100               	movlb	0	; () banked
 18125  0162C4  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18126  0162C6  0E00               	movlw	high _PortC
 18127  0162C8  0100               	movlb	0	; () banked
 18128  0162CA  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18129  0162CC  0E01               	movlw	1
 18130  0162CE  0100               	movlb	0	; () banked
 18131  0162D0  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18132  0162D2  C0CC  F0CA         	movff	LED_Set@pValue,Port_SetPin@pValue
 18133  0162D6  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18134                           
 18135                           ;LED.c: 43: }
 18136                           
 18137                           ;LED.c: 42: break;
 18138  0162DA  0012               	return	
 18139  0162DC                     l227:
 18140  0162DC  0100               	movlb	0	; () banked
 18141  0162DE  51CD               	movf	LED_Set@pLED& (0+255),w,b
 18142                           
 18143                           ; Switch size 1, requested type "space"
 18144                           ; Number of cases is 2, Range of values is 0 to 1
 18145                           ; switch strategies available:
 18146                           ; Name         Instructions Cycles
 18147                           ; simple_byte            7     4 (average)
 18148                           ;	Chosen strategy is simple_byte
 18149  0162E0  0A00               	xorlw	0	; case 0
 18150  0162E2  B4D8               	btfsc	status,2,c
 18151  0162E4  D7DF               	goto	l228
 18152  0162E6  0A01               	xorlw	1	; case 1
 18153  0162E8  A4D8               	btfss	status,2,c
 18154  0162EA  0012               	return	
 18155  0162EC  D7E9               	goto	l230
 18156  0162EE                     __end_of_LED_Set:
 18157                           	opt stack 0
 18158                           tblptru	equ	0xFF8
 18159                           tblptrh	equ	0xFF7
 18160                           tblptrl	equ	0xFF6
 18161                           tablat	equ	0xFF5
 18162                           prodh	equ	0xFF4
 18163                           prodl	equ	0xFF3
 18164                           intcon	equ	0xFF2
 18165                           postinc0	equ	0xFEE
 18166                           wreg	equ	0xFE8
 18167                           indf1	equ	0xFE7
 18168                           postdec1	equ	0xFE5
 18169                           fsr1h	equ	0xFE2
 18170                           fsr1l	equ	0xFE1
 18171                           indf2	equ	0xFDF
 18172                           postinc2	equ	0xFDE
 18173                           postdec2	equ	0xFDD
 18174                           fsr2h	equ	0xFDA
 18175                           fsr2l	equ	0xFD9
 18176                           status	equ	0xFD8
 18177                           
 18178 ;; *************** function _MXK_Dequeue *****************
 18179 ;; Defined at:
 18180 ;;		line 153 in file "Library/MXK.c"
 18181 ;; Parameters:    Size  Location     Type
 18182 ;;		None
 18183 ;; Auto vars:     Size  Location     Type
 18184 ;;		None
 18185 ;; Return value:  Size  Location     Type
 18186 ;;                  1    wreg      void 
 18187 ;; Registers used:
 18188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18189 ;; Tracked objects:
 18190 ;;		On entry : 0/0
 18191 ;;		On exit  : 0/0
 18192 ;;		Unchanged: 0/0
 18193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18198 ;;Total ram usage:        0 bytes
 18199 ;; Hardware stack levels used:    1
 18200 ;; Hardware stack levels required when called:   12
 18201 ;; This function calls:
 18202 ;;		Absolute function
 18203 ;;		_Motor_Step
 18204 ;; This function is called by:
 18205 ;;		_init
 18206 ;;		_findClosestWall
 18207 ;;		_measureAndDisplayDistance
 18208 ;;		_mode1
 18209 ;;		_mode2
 18210 ;;		_mode4
 18211 ;;		_main
 18212 ;; This function uses a non-reentrant model
 18213 ;;
 18214                           
 18215                           	psect	text73
 18216  01674E                     __ptext73:
 18217                           	opt stack 0
 18218  01674E                     _MXK_Dequeue:
 18219                           	opt stack 16
 18220                           
 18221                           ;MXK.c: 155: if (lQueue)
 18222                           
 18223                           ;incstack = 0
 18224  01674E  0100               	movlb	0	; () banked
 18225  016750  5160               	movf	_lQueue& (0+255),w,b	;volatile
 18226  016752  0100               	movlb	0	; () banked
 18227  016754  1161               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18228  016756  0100               	movlb	0	; () banked
 18229  016758  1162               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18230  01675A  B4D8               	btfsc	status,2,c
 18231  01675C  D00D               	goto	u14809
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;MXK.c: 156: lQueue();
 18235  01675E  D801               	call	u14808
 18236  016760  D00B               	goto	u14809
 18237  016762                     u14808:
 18238  016762  0005               	push	
 18239  016764  6EFA               	movwf	pclath,c
 18240  016766  0100               	movlb	0	; () banked
 18241  016768  5160               	movf	_lQueue& (0+255),w,b	;volatile
 18242  01676A  6EFD               	movwf	tosl,c
 18243  01676C  5161               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 18244  01676E  6EFE               	movwf	tosh,c
 18245  016770  5162               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 18246  016772  6EFF               	movwf	tosu,c
 18247  016774  50FA               	movf	pclath,w,c
 18248  016776  0012               	return		;indir
 18249  016778                     u14809:
 18250                           
 18251                           ;MXK.c: 157: lQueue = 0;
 18252  016778  0E00               	movlw	0
 18253  01677A  0100               	movlb	0	; () banked
 18254  01677C  6F60               	movwf	_lQueue& (0+255),b	;volatile
 18255  01677E  0E00               	movlw	0
 18256  016780  0100               	movlb	0	; () banked
 18257  016782  6F61               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18258  016784  0E00               	movlw	0
 18259  016786  0100               	movlb	0	; () banked
 18260  016788  6F62               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18261                           
 18262                           ; BSR set to: 0
 18263  01678A  0012               	return		;funcret
 18264  01678C                     __end_of_MXK_Dequeue:
 18265                           	opt stack 0
 18266                           tosu	equ	0xFFF
 18267                           tosh	equ	0xFFE
 18268                           tosl	equ	0xFFD
 18269                           pclath	equ	0xFFA
 18270                           tblptru	equ	0xFF8
 18271                           tblptrh	equ	0xFF7
 18272                           tblptrl	equ	0xFF6
 18273                           tablat	equ	0xFF5
 18274                           prodh	equ	0xFF4
 18275                           prodl	equ	0xFF3
 18276                           intcon	equ	0xFF2
 18277                           postinc0	equ	0xFEE
 18278                           wreg	equ	0xFE8
 18279                           indf1	equ	0xFE7
 18280                           postdec1	equ	0xFE5
 18281                           fsr1h	equ	0xFE2
 18282                           fsr1l	equ	0xFE1
 18283                           indf2	equ	0xFDF
 18284                           postinc2	equ	0xFDE
 18285                           postdec2	equ	0xFDD
 18286                           fsr2h	equ	0xFDA
 18287                           fsr2l	equ	0xFD9
 18288                           status	equ	0xFD8
 18289                           
 18290 ;; *************** function _Motor_Step *****************
 18291 ;; Defined at:
 18292 ;;		line 75 in file "Library/Motor.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;		None
 18295 ;; Auto vars:     Size  Location     Type
 18296 ;;		None
 18297 ;; Return value:  Size  Location     Type
 18298 ;;                  1    wreg      void 
 18299 ;; Registers used:
 18300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18301 ;; Tracked objects:
 18302 ;;		On entry : 0/0
 18303 ;;		On exit  : 0/0
 18304 ;;		Unchanged: 0/0
 18305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;Total ram usage:        2 bytes
 18311 ;; Hardware stack levels used:    1
 18312 ;; Hardware stack levels required when called:   11
 18313 ;; This function calls:
 18314 ;;		_MXK_Queue
 18315 ;;		_MXK_Release
 18316 ;;		_MXK_SwitchTo
 18317 ;;		_Port_SetPin
 18318 ;;		_Timer0_Restart
 18319 ;;		_Timer0_Stop
 18320 ;; This function is called by:
 18321 ;;		_Motor_Init
 18322 ;;		_MXK_Dequeue
 18323 ;;		_Timer0_ISR
 18324 ;; This function uses a non-reentrant model
 18325 ;;
 18326                           
 18327                           	psect	text74
 18328  013A78                     __ptext74:
 18329                           	opt stack 0
 18330  013A78                     _Motor_Step:
 18331                           	opt stack 0
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;Skip over the trampoline to the duplicate function for level 2
 18335  013A78  B251               	btfsc	btemp,1,c
 18336  013A7A  EFDB  F09E         	goto	i2_Motor_Step
 18337  013A7E                     _Motor_Step$intlevel0:
 18338                           	opt stack 16
 18339                           
 18340                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18341                           
 18342                           ;incstack = 0
 18343  013A7E  0100               	movlb	0	; () banked
 18344  013A80  EE20 F004          	lfsr	2,4
 18345  013A84  517C               	movf	_lMotor& (0+255),w,b
 18346  013A86  26D9               	addwf	fsr2l,f,c
 18347  013A88  517D               	movf	(_lMotor+1)& (0+255),w,b
 18348  013A8A  22DA               	addwfc	fsr2h,f,c
 18349  013A8C  50DF               	movf	indf2,w,c
 18350  013A8E  EC27  F0B3         	call	_MXK_SwitchTo
 18351  013A92  0900               	iorlw	0
 18352  013A94  B4D8               	btfsc	status,2,c
 18353  013A96  D07A               	goto	l1627
 18354                           
 18355                           ;Motor.c: 78: {
 18356                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18357  013A98  C07C  FFD9         	movff	_lMotor,fsr2l
 18358  013A9C  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18359  013AA0  50DE               	movf	postinc2,w,c
 18360  013AA2  10DE               	iorwf	postinc2,w,c
 18361  013AA4  B4D8               	btfsc	status,2,c
 18362  013AA6  D06D               	goto	l1628
 18363                           
 18364                           ;Motor.c: 80: {
 18365                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18366  013AA8  C07C  FFD9         	movff	_lMotor,fsr2l
 18367  013AAC  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18368  013AB0  0E01               	movlw	1
 18369  013AB2  BEDB               	btfsc	plusw2,7,c
 18370  013AB4  D026               	goto	l1629
 18371  013AB6  0E01               	movlw	1
 18372  013AB8  50DB               	movf	plusw2,w,c
 18373  013ABA  E103               	bnz	u10190
 18374  013ABC  04DE               	decf	postinc2,w,c
 18375  013ABE  A0D8               	btfss	status,0,c
 18376  013AC0  D020               	goto	l1629
 18377  013AC2                     u10190:
 18378                           
 18379                           ;Motor.c: 83: {
 18380                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18381  013AC2  C07C  FFD9         	movff	_lMotor,fsr2l
 18382  013AC6  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18383  013ACA  28DE               	incf	postinc2,w,c
 18384  013ACC  E104               	bnz	u10200
 18385  013ACE  0E7F               	movlw	127
 18386  013AD0  18DE               	xorwf	postinc2,w,c
 18387  013AD2  B4D8               	btfsc	status,2,c
 18388  013AD4  D007               	goto	l1630
 18389  013AD6                     u10200:
 18390                           
 18391                           ;Motor.c: 85: lMotor->mDelta --;
 18392  013AD6  C07C  FFD9         	movff	_lMotor,fsr2l
 18393  013ADA  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18394  013ADE  06DE               	decf	postinc2,f,c
 18395  013AE0  0E00               	movlw	0
 18396  013AE2  5ADD               	subwfb	postdec2,f,c
 18397  013AE4                     l1630:
 18398                           
 18399                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18400  013AE4  0E8F               	movlw	low _PortE
 18401  013AE6  0100               	movlb	0	; () banked
 18402  013AE8  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18403  013AEA  0E00               	movlw	high _PortE
 18404  013AEC  0100               	movlb	0	; () banked
 18405  013AEE  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18406  013AF0  0E00               	movlw	0
 18407  013AF2  0100               	movlb	0	; () banked
 18408  013AF4  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18409  013AF6  0E01               	movlw	1
 18410  013AF8  0100               	movlb	0	; () banked
 18411  013AFA  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 18412  013AFC  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18413                           
 18414                           ;Motor.c: 88: }
 18415  013B00  D01F               	goto	l1631
 18416  013B02                     l1629:
 18417                           
 18418                           ;Motor.c: 89: else
 18419                           ;Motor.c: 90: {
 18420                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18421  013B02  C07C  FFD9         	movff	_lMotor,fsr2l
 18422  013B06  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18423  013B0A  04DE               	decf	postinc2,w,c
 18424  013B0C  E104               	bnz	u10210
 18425  013B0E  0E80               	movlw	128
 18426  013B10  18DE               	xorwf	postinc2,w,c
 18427  013B12  B4D8               	btfsc	status,2,c
 18428  013B14  D007               	goto	l1632
 18429  013B16                     u10210:
 18430                           
 18431                           ;Motor.c: 92: lMotor->mDelta ++;
 18432  013B16  C07C  FFD9         	movff	_lMotor,fsr2l
 18433  013B1A  C07D  FFDA         	movff	_lMotor+1,fsr2h
 18434  013B1E  2ADE               	incf	postinc2,f,c
 18435  013B20  0E00               	movlw	0
 18436  013B22  22DD               	addwfc	postdec2,f,c
 18437  013B24                     l1632:
 18438                           
 18439                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18440  013B24  0E8F               	movlw	low _PortE
 18441  013B26  0100               	movlb	0	; () banked
 18442  013B28  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18443  013B2A  0E00               	movlw	high _PortE
 18444  013B2C  0100               	movlb	0	; () banked
 18445  013B2E  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18446  013B30  0E00               	movlw	0
 18447  013B32  0100               	movlb	0	; () banked
 18448  013B34  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18449  013B36  0E00               	movlw	0
 18450  013B38  0100               	movlb	0	; () banked
 18451  013B3A  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 18452  013B3C  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18453  013B40                     l1631:
 18454                           
 18455                           ;Motor.c: 95: }
 18456                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18457  013B40  0E8F               	movlw	low _PortE
 18458  013B42  0100               	movlb	0	; () banked
 18459  013B44  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18460  013B46  0E00               	movlw	high _PortE
 18461  013B48  0100               	movlb	0	; () banked
 18462  013B4A  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18463  013B4C  0E01               	movlw	1
 18464  013B4E  0100               	movlb	0	; () banked
 18465  013B50  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18466  013B52  0E01               	movlw	1
 18467  013B54  0100               	movlb	0	; () banked
 18468  013B56  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 18469  013B58  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18470                           
 18471                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18472  013B5C  0E8F               	movlw	low _PortE
 18473  013B5E  0100               	movlb	0	; () banked
 18474  013B60  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18475  013B62  0E00               	movlw	high _PortE
 18476  013B64  0100               	movlb	0	; () banked
 18477  013B66  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18478  013B68  0E01               	movlw	1
 18479  013B6A  0100               	movlb	0	; () banked
 18480  013B6C  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18481  013B6E  0E00               	movlw	0
 18482  013B70  0100               	movlb	0	; () banked
 18483  013B72  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 18484  013B74  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 18485                           
 18486                           ;Motor.c: 101: MXK_Release();
 18487  013B78  EC55  F0B6         	call	_MXK_Release	;wreg free
 18488                           
 18489                           ;Motor.c: 102: Timer0_Restart();
 18490  013B7C  EC44  F0B7         	call	_Timer0_Restart	;wreg free
 18491                           
 18492                           ;Motor.c: 103: return;
 18493  013B80  0012               	return	
 18494  013B82                     l1628:
 18495                           
 18496                           ;Motor.c: 104: }
 18497                           ;Motor.c: 105: MXK_Release();
 18498  013B82  EC55  F0B6         	call	_MXK_Release	;wreg free
 18499                           
 18500                           ;Motor.c: 106: Timer0_Stop();
 18501  013B86  EC6F  F0B7         	call	_Timer0_Stop	;wreg free
 18502                           
 18503                           ;Motor.c: 107: return;
 18504  013B8A  0012               	return	
 18505  013B8C                     l1627:
 18506                           
 18507                           ;Motor.c: 108: }
 18508                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18509  013B8C  C063  F0B8         	movff	_lStepFunction,MXK_Queue@pCallback
 18510  013B90  C064  F0B9         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 18511  013B94  C065  F0BA         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 18512  013B98  EC30  F0B7         	call	_MXK_Queue	;wreg free
 18513  013B9C  0012               	return		;funcret
 18514  013B9E                     __end_of_Motor_Step:
 18515                           	opt stack 0
 18516                           tosu	equ	0xFFF
 18517                           tosh	equ	0xFFE
 18518                           tosl	equ	0xFFD
 18519                           pclath	equ	0xFFA
 18520                           tblptru	equ	0xFF8
 18521                           tblptrh	equ	0xFF7
 18522                           tblptrl	equ	0xFF6
 18523                           tablat	equ	0xFF5
 18524                           prodh	equ	0xFF4
 18525                           prodl	equ	0xFF3
 18526                           intcon	equ	0xFF2
 18527                           postinc0	equ	0xFEE
 18528                           wreg	equ	0xFE8
 18529                           indf1	equ	0xFE7
 18530                           postdec1	equ	0xFE5
 18531                           fsr1h	equ	0xFE2
 18532                           fsr1l	equ	0xFE1
 18533                           indf2	equ	0xFDF
 18534                           postinc2	equ	0xFDE
 18535                           postdec2	equ	0xFDD
 18536                           plusw2	equ	0xFDB
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _Timer0_Stop *****************
 18542 ;; Defined at:
 18543 ;;		line 89 in file "Library/Timer0.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;		None
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;		None
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  1    wreg      void 
 18550 ;; Registers used:
 18551 ;;		None
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        0 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    7
 18564 ;; This function calls:
 18565 ;;		Nothing
 18566 ;; This function is called by:
 18567 ;;		_Motor_Step
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text75
 18572  016EDE                     __ptext75:
 18573                           	opt stack 0
 18574  016EDE                     _Timer0_Stop:
 18575                           	opt stack 19
 18576                           
 18577                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18578                           
 18579                           ;incstack = 0
 18580  016EDE  9AF2               	bcf	intcon,5,c	;volatile
 18581                           
 18582                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18583  016EE0  94F2               	bcf	intcon,2,c	;volatile
 18584  016EE2  0012               	return		;funcret
 18585  016EE4                     __end_of_Timer0_Stop:
 18586                           	opt stack 0
 18587                           tosu	equ	0xFFF
 18588                           tosh	equ	0xFFE
 18589                           tosl	equ	0xFFD
 18590                           pclath	equ	0xFFA
 18591                           tblptru	equ	0xFF8
 18592                           tblptrh	equ	0xFF7
 18593                           tblptrl	equ	0xFF6
 18594                           tablat	equ	0xFF5
 18595                           prodh	equ	0xFF4
 18596                           prodl	equ	0xFF3
 18597                           intcon	equ	0xFF2
 18598                           postinc0	equ	0xFEE
 18599                           wreg	equ	0xFE8
 18600                           indf1	equ	0xFE7
 18601                           postdec1	equ	0xFE5
 18602                           fsr1h	equ	0xFE2
 18603                           fsr1l	equ	0xFE1
 18604                           indf2	equ	0xFDF
 18605                           postinc2	equ	0xFDE
 18606                           postdec2	equ	0xFDD
 18607                           plusw2	equ	0xFDB
 18608                           fsr2h	equ	0xFDA
 18609                           fsr2l	equ	0xFD9
 18610                           status	equ	0xFD8
 18611                           
 18612 ;; *************** function _Timer0_Restart *****************
 18613 ;; Defined at:
 18614 ;;		line 83 in file "Library/Timer0.c"
 18615 ;; Parameters:    Size  Location     Type
 18616 ;;		None
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;		None
 18619 ;; Return value:  Size  Location     Type
 18620 ;;                  1    wreg      void 
 18621 ;; Registers used:
 18622 ;;		None
 18623 ;; Tracked objects:
 18624 ;;		On entry : 0/0
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18632 ;;Total ram usage:        0 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    7
 18635 ;; This function calls:
 18636 ;;		Nothing
 18637 ;; This function is called by:
 18638 ;;		_Motor_Step
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           	psect	text76
 18643  016E88                     __ptext76:
 18644                           	opt stack 0
 18645  016E88                     _Timer0_Restart:
 18646                           	opt stack 19
 18647                           
 18648                           ;Timer0.c: 85: TMR0 = COUNTER;
 18649                           
 18650                           ;incstack = 0
 18651  016E88  C029  FFD6         	movff	_COUNTER,4054	;volatile
 18652  016E8C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 18653                           
 18654                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18655  016E90  8AF2               	bsf	intcon,5,c	;volatile
 18656  016E92  0012               	return		;funcret
 18657  016E94                     __end_of_Timer0_Restart:
 18658                           	opt stack 0
 18659                           tosu	equ	0xFFF
 18660                           tosh	equ	0xFFE
 18661                           tosl	equ	0xFFD
 18662                           pclath	equ	0xFFA
 18663                           tblptru	equ	0xFF8
 18664                           tblptrh	equ	0xFF7
 18665                           tblptrl	equ	0xFF6
 18666                           tablat	equ	0xFF5
 18667                           prodh	equ	0xFF4
 18668                           prodl	equ	0xFF3
 18669                           intcon	equ	0xFF2
 18670                           postinc0	equ	0xFEE
 18671                           wreg	equ	0xFE8
 18672                           indf1	equ	0xFE7
 18673                           postdec1	equ	0xFE5
 18674                           fsr1h	equ	0xFE2
 18675                           fsr1l	equ	0xFE1
 18676                           indf2	equ	0xFDF
 18677                           postinc2	equ	0xFDE
 18678                           postdec2	equ	0xFDD
 18679                           plusw2	equ	0xFDB
 18680                           fsr2h	equ	0xFDA
 18681                           fsr2l	equ	0xFD9
 18682                           status	equ	0xFD8
 18683                           
 18684 ;; *************** function _MXK_SwitchTo *****************
 18685 ;; Defined at:
 18686 ;;		line 105 in file "Library/MXK.c"
 18687 ;; Parameters:    Size  Location     Type
 18688 ;;  pModule         1    wreg     enum E6927
 18689 ;; Auto vars:     Size  Location     Type
 18690 ;;  pModule         1    7[BANK0 ] enum E6927
 18691 ;;  CUR             1    6[BANK0 ] unsigned char 
 18692 ;; Return value:  Size  Location     Type
 18693 ;;                  1    wreg      unsigned char 
 18694 ;; Registers used:
 18695 ;;		wreg, status,2, status,0, cstack
 18696 ;; Tracked objects:
 18697 ;;		On entry : 0/0
 18698 ;;		On exit  : 0/0
 18699 ;;		Unchanged: 0/0
 18700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;Total ram usage:        2 bytes
 18706 ;; Hardware stack levels used:    1
 18707 ;; Hardware stack levels required when called:    8
 18708 ;; This function calls:
 18709 ;;		_delay_us
 18710 ;; This function is called by:
 18711 ;;		_Motor_Step
 18712 ;;		_findClosestWall
 18713 ;;		_measureAndDisplayDistance
 18714 ;;		_mode1
 18715 ;;		_mode2
 18716 ;;		_mode4
 18717 ;;		_main
 18718 ;; This function uses a non-reentrant model
 18719 ;;
 18720                           
 18721                           	psect	text77
 18722  01664E                     __ptext77:
 18723                           	opt stack 0
 18724  01664E                     _MXK_SwitchTo:
 18725                           	opt stack 20
 18726                           
 18727                           ;incstack = 0
 18728                           ;MXK_SwitchTo@pModule stored from wreg
 18729  01664E  0100               	movlb	0	; () banked
 18730  016650  6FBF               	movwf	MXK_SwitchTo@pModule& (0+255),b
 18731                           
 18732                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18733  016652  5086               	movf	3974,w,c	;volatile
 18734  016654  0B0F               	andlw	15
 18735  016656  0100               	movlb	0	; () banked
 18736  016658  6FBE               	movwf	MXK_SwitchTo@CUR& (0+255),b
 18737                           
 18738                           ; BSR set to: 0
 18739                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18740  01665A  504B               	movf	_Bus_State,w,c
 18741  01665C  A4D8               	btfss	status,2,c
 18742  01665E  D002               	goto	l1730
 18743                           
 18744                           ; BSR set to: 0
 18745                           ;MXK.c: 110: return 0;
 18746  016660  0E00               	movlw	0
 18747                           
 18748                           ; BSR set to: 0
 18749  016662  0012               	return	
 18750  016664                     l1730:
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18754                           
 18755                           ; BSR set to: 0
 18756  016664  0E00               	movlw	0
 18757  016666  6E4B               	movwf	_Bus_State,c
 18758                           
 18759                           ; BSR set to: 0
 18760                           ;MXK.c: 114: if (CUR != pModule)
 18761  016668  0100               	movlb	0	; () banked
 18762  01666A  51BF               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18763  01666C  0100               	movlb	0	; () banked
 18764  01666E  19BE               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 18765  016670  B4D8               	btfsc	status,2,c
 18766  016672  D00C               	goto	l1732
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;MXK.c: 115: {
 18770                           ;MXK.c: 116: PORTG &= ~(0xF);
 18771  016674  0EF0               	movlw	240
 18772  016676  1686               	andwf	3974,f,c	;volatile
 18773                           
 18774                           ;MXK.c: 117: PORTG |= pModule;
 18775  016678  0100               	movlb	0	; () banked
 18776  01667A  51BF               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18777  01667C  1286               	iorwf	3974,f,c	;volatile
 18778                           
 18779                           ; BSR set to: 0
 18780                           ;MXK.c: 120: delay_us(10);
 18781  01667E  0E00               	movlw	0
 18782  016680  0100               	movlb	0	; () banked
 18783  016682  6FB9               	movwf	(delay_us@us+1)& (0+255),b
 18784  016684  0E0A               	movlw	10
 18785  016686  6FB8               	movwf	delay_us@us& (0+255),b
 18786  016688  EC26  F0B1         	call	_delay_us	;wreg free
 18787  01668C                     l1732:
 18788                           
 18789                           ;MXK.c: 121: }
 18790                           ;MXK.c: 122: return 1;
 18791  01668C  0E01               	movlw	1
 18792  01668E  0012               	return	
 18793  016690                     __end_of_MXK_SwitchTo:
 18794                           	opt stack 0
 18795                           tosu	equ	0xFFF
 18796                           tosh	equ	0xFFE
 18797                           tosl	equ	0xFFD
 18798                           pclath	equ	0xFFA
 18799                           tblptru	equ	0xFF8
 18800                           tblptrh	equ	0xFF7
 18801                           tblptrl	equ	0xFF6
 18802                           tablat	equ	0xFF5
 18803                           prodh	equ	0xFF4
 18804                           prodl	equ	0xFF3
 18805                           intcon	equ	0xFF2
 18806                           postinc0	equ	0xFEE
 18807                           wreg	equ	0xFE8
 18808                           indf1	equ	0xFE7
 18809                           postdec1	equ	0xFE5
 18810                           fsr1h	equ	0xFE2
 18811                           fsr1l	equ	0xFE1
 18812                           indf2	equ	0xFDF
 18813                           postinc2	equ	0xFDE
 18814                           postdec2	equ	0xFDD
 18815                           plusw2	equ	0xFDB
 18816                           fsr2h	equ	0xFDA
 18817                           fsr2l	equ	0xFD9
 18818                           status	equ	0xFD8
 18819                           
 18820 ;; *************** function _MXK_Release *****************
 18821 ;; Defined at:
 18822 ;;		line 130 in file "Library/MXK.c"
 18823 ;; Parameters:    Size  Location     Type
 18824 ;;		None
 18825 ;; Auto vars:     Size  Location     Type
 18826 ;;		None
 18827 ;; Return value:  Size  Location     Type
 18828 ;;                  1    wreg      unsigned char 
 18829 ;; Registers used:
 18830 ;;		wreg, status,2, status,0
 18831 ;; Tracked objects:
 18832 ;;		On entry : 0/0
 18833 ;;		On exit  : 0/0
 18834 ;;		Unchanged: 0/0
 18835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;Total ram usage:        0 bytes
 18841 ;; Hardware stack levels used:    1
 18842 ;; Hardware stack levels required when called:    7
 18843 ;; This function calls:
 18844 ;;		Nothing
 18845 ;; This function is called by:
 18846 ;;		_Motor_Step
 18847 ;;		_init
 18848 ;;		_findClosestWall
 18849 ;;		_measureAndDisplayDistance
 18850 ;;		_mode1
 18851 ;;		_mode2
 18852 ;;		_mode4
 18853 ;;		_main
 18854 ;; This function uses a non-reentrant model
 18855 ;;
 18856                           
 18857                           	psect	text78
 18858  016CAA                     __ptext78:
 18859                           	opt stack 0
 18860  016CAA                     _MXK_Release:
 18861                           	opt stack 21
 18862                           
 18863                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 18864                           
 18865                           ;incstack = 0
 18866  016CAA  0E01               	movlw	1
 18867  016CAC  6E4B               	movwf	_Bus_State,c
 18868                           
 18869                           ;MXK.c: 134: if (lQueue != 0)
 18870  016CAE  0100               	movlb	0	; () banked
 18871  016CB0  5160               	movf	_lQueue& (0+255),w,b	;volatile
 18872  016CB2  0100               	movlb	0	; () banked
 18873  016CB4  1161               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18874  016CB6  0100               	movlb	0	; () banked
 18875  016CB8  1162               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18876  016CBA  B4D8               	btfsc	status,2,c
 18877  016CBC  D002               	goto	l1735
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;MXK.c: 135: return 1;
 18881  016CBE  0E01               	movlw	1
 18882                           
 18883                           ; BSR set to: 0
 18884  016CC0  0012               	return	
 18885  016CC2                     l1735:
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;MXK.c: 137: return 0;
 18889                           
 18890                           ; BSR set to: 0
 18891  016CC2  0E00               	movlw	0
 18892  016CC4  0012               	return	
 18893  016CC6                     __end_of_MXK_Release:
 18894                           	opt stack 0
 18895                           tosu	equ	0xFFF
 18896                           tosh	equ	0xFFE
 18897                           tosl	equ	0xFFD
 18898                           pclath	equ	0xFFA
 18899                           tblptru	equ	0xFF8
 18900                           tblptrh	equ	0xFF7
 18901                           tblptrl	equ	0xFF6
 18902                           tablat	equ	0xFF5
 18903                           prodh	equ	0xFF4
 18904                           prodl	equ	0xFF3
 18905                           intcon	equ	0xFF2
 18906                           postinc0	equ	0xFEE
 18907                           wreg	equ	0xFE8
 18908                           indf1	equ	0xFE7
 18909                           postdec1	equ	0xFE5
 18910                           fsr1h	equ	0xFE2
 18911                           fsr1l	equ	0xFE1
 18912                           indf2	equ	0xFDF
 18913                           postinc2	equ	0xFDE
 18914                           postdec2	equ	0xFDD
 18915                           plusw2	equ	0xFDB
 18916                           fsr2h	equ	0xFDA
 18917                           fsr2l	equ	0xFD9
 18918                           status	equ	0xFD8
 18919                           
 18920 ;; *************** function _MXK_Queue *****************
 18921 ;; Defined at:
 18922 ;;		line 144 in file "Library/MXK.c"
 18923 ;; Parameters:    Size  Location     Type
 18924 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 18925 ;;		 -> Absolute function(1), Motor_Step(1), 
 18926 ;; Auto vars:     Size  Location     Type
 18927 ;;		None
 18928 ;; Return value:  Size  Location     Type
 18929 ;;                  1    wreg      void 
 18930 ;; Registers used:
 18931 ;;		wreg, status,2, status,0
 18932 ;; Tracked objects:
 18933 ;;		On entry : 0/0
 18934 ;;		On exit  : 0/0
 18935 ;;		Unchanged: 0/0
 18936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18937 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;Total ram usage:        3 bytes
 18942 ;; Hardware stack levels used:    1
 18943 ;; Hardware stack levels required when called:    7
 18944 ;; This function calls:
 18945 ;;		Nothing
 18946 ;; This function is called by:
 18947 ;;		_Motor_Step
 18948 ;; This function uses a non-reentrant model
 18949 ;;
 18950                           
 18951                           	psect	text79
 18952  016E60                     __ptext79:
 18953                           	opt stack 0
 18954  016E60                     _MXK_Queue:
 18955                           	opt stack 19
 18956                           
 18957                           ;MXK.c: 146: lQueue = pCallback;
 18958                           
 18959                           ; BSR set to: 0
 18960                           ;incstack = 0
 18961  016E60  C0B8  F060         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 18962  016E64  C0B9  F061         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 18963  016E68  C0BA  F062         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 18964  016E6C  0012               	return		;funcret
 18965  016E6E                     __end_of_MXK_Queue:
 18966                           	opt stack 0
 18967                           tosu	equ	0xFFF
 18968                           tosh	equ	0xFFE
 18969                           tosl	equ	0xFFD
 18970                           pclath	equ	0xFFA
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           postinc0	equ	0xFEE
 18979                           wreg	equ	0xFE8
 18980                           indf1	equ	0xFE7
 18981                           postdec1	equ	0xFE5
 18982                           fsr1h	equ	0xFE2
 18983                           fsr1l	equ	0xFE1
 18984                           indf2	equ	0xFDF
 18985                           postinc2	equ	0xFDE
 18986                           postdec2	equ	0xFDD
 18987                           plusw2	equ	0xFDB
 18988                           fsr2h	equ	0xFDA
 18989                           fsr2l	equ	0xFD9
 18990                           status	equ	0xFD8
 18991                           
 18992 ;; *************** function _MXK_BlockSwitchTo *****************
 18993 ;; Defined at:
 18994 ;;		line 82 in file "Library/MXK.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;  pModule         1    wreg     enum E6927
 18997 ;; Auto vars:     Size  Location     Type
 18998 ;;  pModule         1    7[BANK0 ] enum E6927
 18999 ;;  CUR             1    6[BANK0 ] unsigned char 
 19000 ;; Return value:  Size  Location     Type
 19001 ;;                  1    wreg      unsigned char 
 19002 ;; Registers used:
 19003 ;;		wreg, status,2, status,0, cstack
 19004 ;; Tracked objects:
 19005 ;;		On entry : 0/0
 19006 ;;		On exit  : 0/0
 19007 ;;		Unchanged: 0/0
 19008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;Total ram usage:        2 bytes
 19014 ;; Hardware stack levels used:    1
 19015 ;; Hardware stack levels required when called:    8
 19016 ;; This function calls:
 19017 ;;		_delay_us
 19018 ;; This function is called by:
 19019 ;;		_init
 19020 ;; This function uses a non-reentrant model
 19021 ;;
 19022                           
 19023                           	psect	text80
 19024  01678C                     __ptext80:
 19025                           	opt stack 0
 19026  01678C                     _MXK_BlockSwitchTo:
 19027                           	opt stack 21
 19028                           
 19029                           ;incstack = 0
 19030                           ;MXK_BlockSwitchTo@pModule stored from wreg
 19031  01678C  0100               	movlb	0	; () banked
 19032  01678E  6FBF               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 19033                           
 19034                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 19035  016790  5086               	movf	3974,w,c	;volatile
 19036  016792  0B0F               	andlw	15
 19037  016794  0100               	movlb	0	; () banked
 19038  016796  6FBE               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 19039  016798                     
 19040                           ; BSR set to: 0
 19041                           
 19042                           ; BSR set to: 0
 19043  016798  504B               	movf	_Bus_State,w,c
 19044  01679A  B4D8               	btfsc	status,2,c
 19045  01679C  D7FD               	goto	l1724
 19046                           
 19047                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 19048  01679E  0E00               	movlw	0
 19049  0167A0  6E4B               	movwf	_Bus_State,c
 19050                           
 19051                           ;MXK.c: 90: if (CUR != pModule)
 19052  0167A2  0100               	movlb	0	; () banked
 19053  0167A4  51BF               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19054  0167A6  0100               	movlb	0	; () banked
 19055  0167A8  19BE               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 19056  0167AA  B4D8               	btfsc	status,2,c
 19057  0167AC  D00C               	goto	l1726
 19058                           
 19059                           ; BSR set to: 0
 19060                           ;MXK.c: 91: {
 19061                           ;MXK.c: 92: PORTG &= ~(0xF);
 19062  0167AE  0EF0               	movlw	240
 19063  0167B0  1686               	andwf	3974,f,c	;volatile
 19064                           
 19065                           ;MXK.c: 93: PORTG |= pModule;
 19066  0167B2  0100               	movlb	0	; () banked
 19067  0167B4  51BF               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19068  0167B6  1286               	iorwf	3974,f,c	;volatile
 19069                           
 19070                           ; BSR set to: 0
 19071                           ;MXK.c: 96: delay_us(10);
 19072  0167B8  0E00               	movlw	0
 19073  0167BA  0100               	movlb	0	; () banked
 19074  0167BC  6FB9               	movwf	(delay_us@us+1)& (0+255),b
 19075  0167BE  0E0A               	movlw	10
 19076  0167C0  6FB8               	movwf	delay_us@us& (0+255),b
 19077  0167C2  EC26  F0B1         	call	_delay_us	;wreg free
 19078  0167C6                     l1726:
 19079                           
 19080                           ;MXK.c: 97: }
 19081                           ;MXK.c: 98: return 1;
 19082  0167C6  0E01               	movlw	1
 19083  0167C8  0012               	return	
 19084  0167CA                     __end_of_MXK_BlockSwitchTo:
 19085                           	opt stack 0
 19086                           tosu	equ	0xFFF
 19087                           tosh	equ	0xFFE
 19088                           tosl	equ	0xFFD
 19089                           pclath	equ	0xFFA
 19090                           tblptru	equ	0xFF8
 19091                           tblptrh	equ	0xFF7
 19092                           tblptrl	equ	0xFF6
 19093                           tablat	equ	0xFF5
 19094                           prodh	equ	0xFF4
 19095                           prodl	equ	0xFF3
 19096                           intcon	equ	0xFF2
 19097                           postinc0	equ	0xFEE
 19098                           wreg	equ	0xFE8
 19099                           indf1	equ	0xFE7
 19100                           postdec1	equ	0xFE5
 19101                           fsr1h	equ	0xFE2
 19102                           fsr1l	equ	0xFE1
 19103                           indf2	equ	0xFDF
 19104                           postinc2	equ	0xFDE
 19105                           postdec2	equ	0xFDD
 19106                           plusw2	equ	0xFDB
 19107                           fsr2h	equ	0xFDA
 19108                           fsr2l	equ	0xFD9
 19109                           status	equ	0xFD8
 19110                           
 19111 ;; *************** function _delay_us *****************
 19112 ;; Defined at:
 19113 ;;		line 255 in file "Library/Types.c"
 19114 ;; Parameters:    Size  Location     Type
 19115 ;;  us              2    0[BANK0 ] unsigned short 
 19116 ;; Auto vars:     Size  Location     Type
 19117 ;;  u               4    2[BANK0 ] unsigned long 
 19118 ;; Return value:  Size  Location     Type
 19119 ;;                  1    wreg      void 
 19120 ;; Registers used:
 19121 ;;		wreg, status,2, status,0
 19122 ;; Tracked objects:
 19123 ;;		On entry : 0/0
 19124 ;;		On exit  : 0/0
 19125 ;;		Unchanged: 0/0
 19126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19128 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19131 ;;Total ram usage:        6 bytes
 19132 ;; Hardware stack levels used:    1
 19133 ;; Hardware stack levels required when called:    7
 19134 ;; This function calls:
 19135 ;;		Nothing
 19136 ;; This function is called by:
 19137 ;;		_MXK_BlockSwitchTo
 19138 ;;		_MXK_SwitchTo
 19139 ;; This function uses a non-reentrant model
 19140 ;;
 19141                           
 19142                           	psect	text81
 19143  01624C                     __ptext81:
 19144                           	opt stack 0
 19145  01624C                     _delay_us:
 19146                           	opt stack 20
 19147                           
 19148                           ;Types.c: 256: unsigned long u;
 19149                           ;Types.c: 257: while (us--) {
 19150                           
 19151                           ;incstack = 0
 19152  01624C  D01C               	goto	u9530
 19153  01624E                     l12762:
 19154                           
 19155                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19156  01624E  0E00               	movlw	0
 19157  016250  0100               	movlb	0	; () banked
 19158  016252  6FBA               	movwf	delay_us@u& (0+255),b
 19159  016254  0E00               	movlw	0
 19160  016256  6FBB               	movwf	(delay_us@u+1)& (0+255),b
 19161  016258  0E00               	movlw	0
 19162  01625A  6FBC               	movwf	(delay_us@u+2)& (0+255),b
 19163  01625C  0E00               	movlw	0
 19164  01625E  6FBD               	movwf	(delay_us@u+3)& (0+255),b
 19165  016260                     l12764:
 19166                           
 19167                           ; BSR set to: 0
 19168  016260  0100               	movlb	0	; () banked
 19169  016262  51BA               	movf	delay_us@u& (0+255),w,b
 19170  016264  0100               	movlb	0	; () banked
 19171  016266  11BB               	iorwf	(delay_us@u+1)& (0+255),w,b
 19172  016268  0100               	movlb	0	; () banked
 19173  01626A  11BC               	iorwf	(delay_us@u+2)& (0+255),w,b
 19174  01626C  0100               	movlb	0	; () banked
 19175  01626E  11BD               	iorwf	(delay_us@u+3)& (0+255),w,b
 19176  016270  A4D8               	btfss	status,2,c
 19177  016272  D009               	goto	u9530
 19178                           
 19179                           ; BSR set to: 0
 19180                           
 19181                           ; BSR set to: 0
 19182  016274  F000               	nop		; ;# 
 19183  016276  0E01               	movlw	1
 19184  016278  0100               	movlb	0	; () banked
 19185  01627A  27BA               	addwf	delay_us@u& (0+255),f,b
 19186  01627C  0E00               	movlw	0
 19187  01627E  23BB               	addwfc	(delay_us@u+1)& (0+255),f,b
 19188  016280  23BC               	addwfc	(delay_us@u+2)& (0+255),f,b
 19189  016282  23BD               	addwfc	(delay_us@u+3)& (0+255),f,b
 19190  016284  D7ED               	goto	l12764
 19191  016286                     u9530:
 19192                           
 19193                           ; BSR set to: 0
 19194                           
 19195                           ; BSR set to: 0
 19196  016286  0100               	movlb	0	; () banked
 19197  016288  07B8               	decf	delay_us@us& (0+255),f,b
 19198  01628A  A0D8               	btfss	status,0,c
 19199  01628C  07B9               	decf	(delay_us@us+1)& (0+255),f,b
 19200  01628E  0100               	movlb	0	; () banked
 19201  016290  29B8               	incf	delay_us@us& (0+255),w,b
 19202  016292  E1DD               	bnz	l12762
 19203  016294  0100               	movlb	0	; () banked
 19204  016296  29B9               	incf	(delay_us@us+1)& (0+255),w,b
 19205  016298  B4D8               	btfsc	status,2,c
 19206  01629A  0012               	return	
 19207  01629C  D7D8               	goto	l832
 19208  01629E                     __end_of_delay_us:
 19209                           	opt stack 0
 19210                           tosu	equ	0xFFF
 19211                           tosh	equ	0xFFE
 19212                           tosl	equ	0xFFD
 19213                           pclath	equ	0xFFA
 19214                           tblptru	equ	0xFF8
 19215                           tblptrh	equ	0xFF7
 19216                           tblptrl	equ	0xFF6
 19217                           tablat	equ	0xFF5
 19218                           prodh	equ	0xFF4
 19219                           prodl	equ	0xFF3
 19220                           intcon	equ	0xFF2
 19221                           postinc0	equ	0xFEE
 19222                           wreg	equ	0xFE8
 19223                           indf1	equ	0xFE7
 19224                           postdec1	equ	0xFE5
 19225                           fsr1h	equ	0xFE2
 19226                           fsr1l	equ	0xFE1
 19227                           indf2	equ	0xFDF
 19228                           postinc2	equ	0xFDE
 19229                           postdec2	equ	0xFDD
 19230                           plusw2	equ	0xFDB
 19231                           fsr2h	equ	0xFDA
 19232                           fsr2l	equ	0xFD9
 19233                           status	equ	0xFD8
 19234                           
 19235 ;; *************** function _LCD_Init *****************
 19236 ;; Defined at:
 19237 ;;		line 172 in file "Library/LCD.c"
 19238 ;; Parameters:    Size  Location     Type
 19239 ;;		None
 19240 ;; Auto vars:     Size  Location     Type
 19241 ;;  i               2   55[BANK0 ] unsigned short 
 19242 ;; Return value:  Size  Location     Type
 19243 ;;                  1    wreg      void 
 19244 ;; Registers used:
 19245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19254 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19255 ;;Total ram usage:        4 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:   15
 19258 ;; This function calls:
 19259 ;;		_Configure_GPIOs
 19260 ;;		_LCD_Fill
 19261 ;;		_LCD_Write
 19262 ;;		_Set_Rotation
 19263 ;;		_delay_ms
 19264 ;; This function is called by:
 19265 ;;		_init
 19266 ;; This function uses a non-reentrant model
 19267 ;;
 19268                           
 19269                           	psect	text82
 19270  0134E0                     __ptext82:
 19271                           	opt stack 0
 19272  0134E0                     _LCD_Init:
 19273                           	opt stack 14
 19274                           
 19275                           ;LCD.c: 174: UINT16 i;
 19276                           ;LCD.c: 175: Configure_GPIOs();
 19277                           
 19278                           ; BSR set to: 0
 19279                           ;incstack = 0
 19280  0134E0  EC36  F0AE         	call	_Configure_GPIOs	;wreg free
 19281                           
 19282                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19283  0134E4  0E00               	movlw	0
 19284  0134E6  0100               	movlb	0	; () banked
 19285  0134E8  6FF0               	movwf	(LCD_Init@i+1)& (0+255),b
 19286  0134EA  0E00               	movlw	0
 19287  0134EC  6FEF               	movwf	LCD_Init@i& (0+255),b
 19288                           
 19289                           ; BSR set to: 0
 19290  0134EE  0100               	movlb	0	; () banked
 19291  0134F0  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 19292  0134F2  E106               	bnz	u11730
 19293  0134F4  0E59               	movlw	89
 19294  0134F6  0100               	movlb	0	; () banked
 19295  0134F8  5DEF               	subwf	LCD_Init@i& (0+255),w,b
 19296  0134FA  B0D8               	btfsc	status,0,c
 19297  0134FC  D08B               	goto	u11770
 19298  0134FE  D001               	goto	l85
 19299  013500                     u11730:
 19300                           
 19301                           ; BSR set to: 0
 19302  013500  D089               	goto	u11770
 19303  013502                     l85:
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;LCD.c: 178: {
 19307                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19308                           
 19309                           ; BSR set to: 0
 19310  013502  90D8               	bcf	status,0,c
 19311  013504  0100               	movlb	0	; () banked
 19312  013506  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 19313  013508  6EF6               	movwf	tblptrl,c
 19314  01350A  0100               	movlb	0	; () banked
 19315  01350C  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19316  01350E  6EF7               	movwf	tblptrh,c
 19317  013510  0E33               	movlw	low _InitList
 19318  013512  26F6               	addwf	tblptrl,f,c
 19319  013514  0EFC               	movlw	high _InitList
 19320  013516  22F7               	addwfc	tblptrh,f,c
 19321  013518                     	if	1	;There are 3 active tblptr bytes
 19322  013518  6AF8               	clrf	tblptru,c
 19323  01351A  0E00               	movlw	low (__mediumconst shr (0+16))
 19324  01351C  22F8               	addwfc	tblptru,f,c
 19325  01351E                     	endif
 19326  01351E  0009               	tblrd		*+
 19327  013520  0E80               	movlw	128
 19328  013522  18F5               	xorwf	tablat,w,c
 19329  013524  0009               	tblrd		*+
 19330  013526  10F5               	iorwf	tablat,w,c
 19331  013528  A4D8               	btfss	status,2,c
 19332  01352A  D022               	goto	l87
 19333                           
 19334                           ; BSR set to: 0
 19335  01352C  0100               	movlb	0	; () banked
 19336  01352E  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 19337  013530  E11F               	bnz	l14818
 19338  013532  0E58               	movlw	88
 19339  013534  0100               	movlb	0	; () banked
 19340  013536  5DEF               	subwf	LCD_Init@i& (0+255),w,b
 19341  013538  B0D8               	btfsc	status,0,c
 19342  01353A  D01A               	goto	l87
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19346  01353C  0100               	movlb	0	; () banked
 19347  01353E  4BEF               	infsnz	LCD_Init@i& (0+255),f,b
 19348  013540  2BF0               	incf	(LCD_Init@i+1)& (0+255),f,b
 19349  013542  90D8               	bcf	status,0,c
 19350  013544  0100               	movlb	0	; () banked
 19351  013546  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 19352  013548  6EF6               	movwf	tblptrl,c
 19353  01354A  0100               	movlb	0	; () banked
 19354  01354C  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19355  01354E  6EF7               	movwf	tblptrh,c
 19356  013550  0E33               	movlw	low _InitList
 19357  013552  26F6               	addwf	tblptrl,f,c
 19358  013554  0EFC               	movlw	high _InitList
 19359  013556  22F7               	addwfc	tblptrh,f,c
 19360  013558                     	if	1	;There are 3 active tblptr bytes
 19361  013558  6AF8               	clrf	tblptru,c
 19362  01355A  0E00               	movlw	low (__mediumconst shr (0+16))
 19363  01355C  22F8               	addwfc	tblptru,f,c
 19364  01355E                     	endif
 19365  01355E  0009               	tblrd		*+
 19366  013560  CFF5 F0B8          	movff	tablat,delay_ms@ms
 19367  013564  000A               	tblrd		*-
 19368  013566  CFF5 F0B9          	movff	tablat,delay_ms@ms+1
 19369  01356A  EC0F  F0AF         	call	_delay_ms	;wreg free
 19370  01356E  D04B               	goto	l90
 19371  013570                     l87:
 19372  013570                     l14818:
 19373                           
 19374                           ;LCD.c: 181: else
 19375                           ;LCD.c: 182: {
 19376                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19377  013570  90D8               	bcf	status,0,c
 19378  013572  0100               	movlb	0	; () banked
 19379  013574  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 19380  013576  6EF6               	movwf	tblptrl,c
 19381  013578  0100               	movlb	0	; () banked
 19382  01357A  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19383  01357C  6EF7               	movwf	tblptrh,c
 19384  01357E  0E33               	movlw	low _InitList
 19385  013580  26F6               	addwf	tblptrl,f,c
 19386  013582  0EFC               	movlw	high _InitList
 19387  013584  22F7               	addwfc	tblptrh,f,c
 19388  013586                     	if	1	;There are 3 active tblptr bytes
 19389  013586  6AF8               	clrf	tblptru,c
 19390  013588  0E00               	movlw	low (__mediumconst shr (0+16))
 19391  01358A  22F8               	addwfc	tblptru,f,c
 19392  01358C                     	endif
 19393  01358C  0009               	tblrd		*+
 19394  01358E  0E00               	movlw	0
 19395  013590  5EF5               	subwf	tablat,f,c
 19396  013592  0009               	tblrd		*+
 19397  013594  0E01               	movlw	1
 19398  013596  5AF5               	subwfb	tablat,f,c
 19399  013598  A0D8               	btfss	status,0,c
 19400  01359A  D020               	goto	l89
 19401                           
 19402                           ; BSR set to: 0
 19403  01359C  0E00               	movlw	0
 19404  01359E  0100               	movlb	0	; () banked
 19405  0135A0  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19406  0135A2  90D8               	bcf	status,0,c
 19407  0135A4  0100               	movlb	0	; () banked
 19408  0135A6  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 19409  0135A8  6EF6               	movwf	tblptrl,c
 19410  0135AA  0100               	movlb	0	; () banked
 19411  0135AC  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19412  0135AE  6EF7               	movwf	tblptrh,c
 19413  0135B0  0E33               	movlw	low _InitList
 19414  0135B2  26F6               	addwf	tblptrl,f,c
 19415  0135B4  0EFC               	movlw	high _InitList
 19416  0135B6  22F7               	addwfc	tblptrh,f,c
 19417  0135B8                     	if	1	;There are 3 active tblptr bytes
 19418  0135B8  6AF8               	clrf	tblptru,c
 19419  0135BA  0E00               	movlw	low (__mediumconst shr (0+16))
 19420  0135BC  22F8               	addwfc	tblptru,f,c
 19421  0135BE                     	endif
 19422  0135BE  0009               	tblrd		*+
 19423  0135C0  CFF5 F0ED          	movff	tablat,??_LCD_Init
 19424  0135C4  0009               	tblrd		*+
 19425  0135C6  CFF5 F0EE          	movff	tablat,??_LCD_Init+1
 19426  0135CA  C0EE  F0ED         	movff	??_LCD_Init+1,??_LCD_Init
 19427  0135CE  0100               	movlb	0	; () banked
 19428  0135D0  6BEE               	clrf	(??_LCD_Init+1)& (0+255),b
 19429  0135D2  0100               	movlb	0	; () banked
 19430  0135D4  51ED               	movf	??_LCD_Init& (0+255),w,b
 19431  0135D6  EC8C  F0B5         	call	_LCD_Write
 19432  0135DA  D015               	goto	l90
 19433  0135DC                     l89:
 19434                           
 19435                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 19436  0135DC  0E01               	movlw	1
 19437  0135DE  0100               	movlb	0	; () banked
 19438  0135E0  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19439  0135E2  90D8               	bcf	status,0,c
 19440  0135E4  0100               	movlb	0	; () banked
 19441  0135E6  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 19442  0135E8  6EF6               	movwf	tblptrl,c
 19443  0135EA  0100               	movlb	0	; () banked
 19444  0135EC  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19445  0135EE  6EF7               	movwf	tblptrh,c
 19446  0135F0  0E33               	movlw	low _InitList
 19447  0135F2  26F6               	addwf	tblptrl,f,c
 19448  0135F4  0EFC               	movlw	high _InitList
 19449  0135F6  22F7               	addwfc	tblptrh,f,c
 19450  0135F8                     	if	1	;There are 3 active tblptr bytes
 19451  0135F8  6AF8               	clrf	tblptru,c
 19452  0135FA  0E00               	movlw	low (__mediumconst shr (0+16))
 19453  0135FC  22F8               	addwfc	tblptru,f,c
 19454  0135FE                     	endif
 19455  0135FE  0008               	tblrd		*
 19456  013600  50F5               	movf	tablat,w,c
 19457  013602  EC8C  F0B5         	call	_LCD_Write
 19458  013606                     l90:
 19459  013606  0100               	movlb	0	; () banked
 19460  013608  4BEF               	infsnz	LCD_Init@i& (0+255),f,b
 19461  01360A  2BF0               	incf	(LCD_Init@i+1)& (0+255),f,b
 19462                           
 19463                           ; BSR set to: 0
 19464  01360C  0100               	movlb	0	; () banked
 19465  01360E  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 19466  013610  E101               	bnz	l14828
 19467  013612  D770               	goto	L12
 19468  013614                     u11770:
 19469  013614                     l14828:
 19470                           
 19471                           ; BSR set to: 0
 19472                           ;LCD.c: 185: }
 19473                           ;LCD.c: 186: }
 19474                           ;LCD.c: 187: delay_ms(100);
 19475  013614  0E00               	movlw	0
 19476  013616  0100               	movlb	0	; () banked
 19477  013618  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 19478  01361A  0E64               	movlw	100
 19479  01361C  6FB8               	movwf	delay_ms@ms& (0+255),b
 19480  01361E  EC0F  F0AF         	call	_delay_ms	;wreg free
 19481                           
 19482                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 19483  013622  0E00               	movlw	0
 19484  013624  0100               	movlb	0	; () banked
 19485  013626  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19486  013628  0E29               	movlw	41
 19487  01362A  EC8C  F0B5         	call	_LCD_Write
 19488                           
 19489                           ;LCD.c: 189: Set_Rotation(1);
 19490  01362E  0E01               	movlw	1
 19491  013630  EC2E  F0AA         	call	_Set_Rotation
 19492                           
 19493                           ;LCD.c: 191: delay_ms(100);
 19494  013634  0E00               	movlw	0
 19495  013636  0100               	movlb	0	; () banked
 19496  013638  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 19497  01363A  0E64               	movlw	100
 19498  01363C  6FB8               	movwf	delay_ms@ms& (0+255),b
 19499  01363E  EC0F  F0AF         	call	_delay_ms	;wreg free
 19500                           
 19501                           ;LCD.c: 192: LCD_Fill(0x0000);
 19502  013642  0E00               	movlw	0
 19503  013644  0100               	movlb	0	; () banked
 19504  013646  6FC2               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 19505  013648  0E00               	movlw	0
 19506  01364A  6FC1               	movwf	LCD_Fill@pColour& (0+255),b
 19507  01364C  ECFA  F0B0         	call	_LCD_Fill	;wreg free
 19508  013650  0012               	return		;funcret
 19509  013652                     __end_of_LCD_Init:
 19510                           	opt stack 0
 19511                           tosu	equ	0xFFF
 19512                           tosh	equ	0xFFE
 19513                           tosl	equ	0xFFD
 19514                           pclath	equ	0xFFA
 19515                           tblptru	equ	0xFF8
 19516                           tblptrh	equ	0xFF7
 19517                           tblptrl	equ	0xFF6
 19518                           tablat	equ	0xFF5
 19519                           prodh	equ	0xFF4
 19520                           prodl	equ	0xFF3
 19521                           intcon	equ	0xFF2
 19522                           postinc0	equ	0xFEE
 19523                           wreg	equ	0xFE8
 19524                           indf1	equ	0xFE7
 19525                           postdec1	equ	0xFE5
 19526                           fsr1h	equ	0xFE2
 19527                           fsr1l	equ	0xFE1
 19528                           indf2	equ	0xFDF
 19529                           postinc2	equ	0xFDE
 19530                           postdec2	equ	0xFDD
 19531                           plusw2	equ	0xFDB
 19532                           fsr2h	equ	0xFDA
 19533                           fsr2l	equ	0xFD9
 19534                           status	equ	0xFD8
 19535                           
 19536 ;; *************** function _Set_Rotation *****************
 19537 ;; Defined at:
 19538 ;;		line 248 in file "Library/LCD.c"
 19539 ;; Parameters:    Size  Location     Type
 19540 ;;  m               1    wreg     unsigned char 
 19541 ;; Auto vars:     Size  Location     Type
 19542 ;;  m               1    5[BANK0 ] unsigned char 
 19543 ;;  rotation        1    6[BANK0 ] unsigned char 
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;Total ram usage:        2 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    9
 19560 ;; This function calls:
 19561 ;;		_LCD_Write
 19562 ;; This function is called by:
 19563 ;;		_LCD_Init
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           	psect	text83
 19568  01545C                     __ptext83:
 19569                           	opt stack 0
 19570  01545C                     _Set_Rotation:
 19571                           	opt stack 19
 19572                           
 19573                           ;incstack = 0
 19574                           ;Set_Rotation@m stored from wreg
 19575  01545C  0100               	movlb	0	; () banked
 19576  01545E  6FBD               	movwf	Set_Rotation@m& (0+255),b
 19577                           
 19578                           ;LCD.c: 250: UINT8 rotation = 0x00;
 19579  015460  0E00               	movlw	0
 19580  015462  0100               	movlb	0	; () banked
 19581  015464  6FBE               	movwf	Set_Rotation@rotation& (0+255),b
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 19585  015466  0E00               	movlw	0
 19586  015468  0100               	movlb	0	; () banked
 19587  01546A  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19588  01546C  0E36               	movlw	54
 19589  01546E  EC8C  F0B5         	call	_LCD_Write
 19590                           
 19591                           ;LCD.c: 253: rotation = (m % 4);
 19592  015472  0100               	movlb	0	; () banked
 19593  015474  51BD               	movf	Set_Rotation@m& (0+255),w,b
 19594  015476  0B03               	andlw	3
 19595  015478  0100               	movlb	0	; () banked
 19596  01547A  6FBE               	movwf	Set_Rotation@rotation& (0+255),b
 19597                           
 19598                           ;LCD.c: 255: switch(rotation)
 19599  01547C  D02C               	goto	l117
 19600  01547E                     
 19601                           ; BSR set to: 0
 19602                           ;LCD.c: 258: {
 19603                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 19604                           
 19605                           ; BSR set to: 0
 19606  01547E  0E01               	movlw	1
 19607  015480  0100               	movlb	0	; () banked
 19608  015482  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19609  015484  0EC8               	movlw	200
 19610  015486  EC8C  F0B5         	call	_LCD_Write
 19611                           
 19612                           ;LCD.c: 260: w = 128;
 19613  01548A  0E80               	movlw	128
 19614  01548C  6E50               	movwf	_w,c
 19615                           
 19616                           ;LCD.c: 261: l = 128;
 19617  01548E  0E80               	movlw	128
 19618  015490  6E4F               	movwf	_l,c
 19619                           
 19620                           ;LCD.c: 262: break;
 19621  015492  0012               	return	
 19622  015494                     
 19623                           ;LCD.c: 265: {
 19624                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 19625  015494  0E01               	movlw	1
 19626  015496  0100               	movlb	0	; () banked
 19627  015498  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19628  01549A  0EA8               	movlw	168
 19629  01549C  EC8C  F0B5         	call	_LCD_Write
 19630                           
 19631                           ;LCD.c: 267: w = 128;
 19632  0154A0  0E80               	movlw	128
 19633  0154A2  6E50               	movwf	_w,c
 19634                           
 19635                           ;LCD.c: 268: l = 128;
 19636  0154A4  0E80               	movlw	128
 19637  0154A6  6E4F               	movwf	_l,c
 19638                           
 19639                           ;LCD.c: 269: break;
 19640  0154A8  0012               	return	
 19641  0154AA                     
 19642                           ;LCD.c: 272: {
 19643                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 19644  0154AA  0E01               	movlw	1
 19645  0154AC  0100               	movlb	0	; () banked
 19646  0154AE  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19647  0154B0  0E08               	movlw	8
 19648  0154B2  EC8C  F0B5         	call	_LCD_Write
 19649                           
 19650                           ;LCD.c: 274: w = 128;
 19651  0154B6  0E80               	movlw	128
 19652  0154B8  6E50               	movwf	_w,c
 19653                           
 19654                           ;LCD.c: 275: l = 128;
 19655  0154BA  0E80               	movlw	128
 19656  0154BC  6E4F               	movwf	_l,c
 19657                           
 19658                           ;LCD.c: 276: break;
 19659  0154BE  0012               	return	
 19660  0154C0                     
 19661                           ;LCD.c: 279: {
 19662                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 19663  0154C0  0E01               	movlw	1
 19664  0154C2  0100               	movlb	0	; () banked
 19665  0154C4  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19666  0154C6  0E68               	movlw	104
 19667  0154C8  EC8C  F0B5         	call	_LCD_Write
 19668                           
 19669                           ;LCD.c: 281: w = 128;
 19670  0154CC  0E80               	movlw	128
 19671  0154CE  6E50               	movwf	_w,c
 19672                           
 19673                           ;LCD.c: 282: l = 128;
 19674  0154D0  0E80               	movlw	128
 19675  0154D2  6E4F               	movwf	_l,c
 19676                           
 19677                           ;LCD.c: 284: }
 19678                           ;LCD.c: 285: }
 19679                           
 19680                           ;LCD.c: 283: break;
 19681  0154D4  0012               	return	
 19682  0154D6                     l117:
 19683  0154D6  0100               	movlb	0	; () banked
 19684  0154D8  51BE               	movf	Set_Rotation@rotation& (0+255),w,b
 19685                           
 19686                           ; Switch size 1, requested type "space"
 19687                           ; Number of cases is 4, Range of values is 0 to 3
 19688                           ; switch strategies available:
 19689                           ; Name         Instructions Cycles
 19690                           ; simple_byte           13     7 (average)
 19691                           ;	Chosen strategy is simple_byte
 19692  0154DA  0A00               	xorlw	0	; case 0
 19693  0154DC  B4D8               	btfsc	status,2,c
 19694  0154DE  D7CF               	goto	l118
 19695  0154E0  0A01               	xorlw	1	; case 1
 19696  0154E2  B4D8               	btfsc	status,2,c
 19697  0154E4  D7D7               	goto	l120
 19698  0154E6  0A03               	xorlw	3	; case 2
 19699  0154E8  B4D8               	btfsc	status,2,c
 19700  0154EA  D7DF               	goto	l121
 19701  0154EC  0A01               	xorlw	1	; case 3
 19702  0154EE  A4D8               	btfss	status,2,c
 19703  0154F0  0012               	return	
 19704  0154F2  D7E6               	goto	l122
 19705  0154F4                     __end_of_Set_Rotation:
 19706                           	opt stack 0
 19707                           tosu	equ	0xFFF
 19708                           tosh	equ	0xFFE
 19709                           tosl	equ	0xFFD
 19710                           pclath	equ	0xFFA
 19711                           tblptru	equ	0xFF8
 19712                           tblptrh	equ	0xFF7
 19713                           tblptrl	equ	0xFF6
 19714                           tablat	equ	0xFF5
 19715                           prodh	equ	0xFF4
 19716                           prodl	equ	0xFF3
 19717                           intcon	equ	0xFF2
 19718                           postinc0	equ	0xFEE
 19719                           wreg	equ	0xFE8
 19720                           indf1	equ	0xFE7
 19721                           postdec1	equ	0xFE5
 19722                           fsr1h	equ	0xFE2
 19723                           fsr1l	equ	0xFE1
 19724                           indf2	equ	0xFDF
 19725                           postinc2	equ	0xFDE
 19726                           postdec2	equ	0xFDD
 19727                           plusw2	equ	0xFDB
 19728                           fsr2h	equ	0xFDA
 19729                           fsr2l	equ	0xFD9
 19730                           status	equ	0xFD8
 19731                           
 19732 ;; *************** function _LCD_Fill *****************
 19733 ;; Defined at:
 19734 ;;		line 287 in file "Library/LCD.c"
 19735 ;; Parameters:    Size  Location     Type
 19736 ;;  pColour         2    9[BANK0 ] unsigned short 
 19737 ;; Auto vars:     Size  Location     Type
 19738 ;;  j               1   12[BANK0 ] unsigned char 
 19739 ;;  i               1   11[BANK0 ] unsigned char 
 19740 ;; Return value:  Size  Location     Type
 19741 ;;                  1    wreg      void 
 19742 ;; Registers used:
 19743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19744 ;; Tracked objects:
 19745 ;;		On entry : 0/0
 19746 ;;		On exit  : 0/0
 19747 ;;		Unchanged: 0/0
 19748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19749 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19752 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19753 ;;Total ram usage:        4 bytes
 19754 ;; Hardware stack levels used:    1
 19755 ;; Hardware stack levels required when called:   10
 19756 ;; This function calls:
 19757 ;;		_LCD_Word_Write
 19758 ;;		_Set_Addr_Window
 19759 ;; This function is called by:
 19760 ;;		_LCD_Init
 19761 ;; This function uses a non-reentrant model
 19762 ;;
 19763                           
 19764                           	psect	text84
 19765  0161F4                     __ptext84:
 19766                           	opt stack 0
 19767  0161F4                     _LCD_Fill:
 19768                           	opt stack 18
 19769                           
 19770                           ;LCD.c: 296: UINT8 i = 0x00;
 19771                           
 19772                           ;incstack = 0
 19773  0161F4  0E00               	movlw	0
 19774  0161F6  0100               	movlb	0	; () banked
 19775  0161F8  6FC3               	movwf	LCD_Fill@i& (0+255),b
 19776                           
 19777                           ;LCD.c: 297: UINT8 j = 0x00;
 19778  0161FA  0E00               	movlw	0
 19779  0161FC  0100               	movlb	0	; () banked
 19780  0161FE  6FC4               	movwf	LCD_Fill@j& (0+255),b
 19781                           
 19782                           ; BSR set to: 0
 19783                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 19784  016200  0E00               	movlw	0
 19785  016202  0100               	movlb	0	; () banked
 19786  016204  6FBD               	movwf	Set_Addr_Window@ys& (0+255),b
 19787  016206  0450               	decf	_w,w,c
 19788  016208  0100               	movlb	0	; () banked
 19789  01620A  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 19790  01620C  044F               	decf	_l,w,c
 19791  01620E  0100               	movlb	0	; () banked
 19792  016210  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 19793  016212  0E00               	movlw	0
 19794  016214  ECF8  F0A6         	call	_Set_Addr_Window
 19795                           
 19796                           ;LCD.c: 299: for (j = l; j > 0; j--)
 19797  016218  C04F  F0C4         	movff	_l,LCD_Fill@j
 19798  01621C                     l14476:
 19799  01621C  0100               	movlb	0	; () banked
 19800  01621E  51C4               	movf	LCD_Fill@j& (0+255),w,b
 19801  016220  0100               	movlb	0	; () banked
 19802  016222  B4D8               	btfsc	status,2,c
 19803  016224  0012               	return	
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;LCD.c: 300: for (i = w; i > 0; i--)
 19807                           
 19808                           ; BSR set to: 0
 19809  016226  C050  F0C3         	movff	_w,LCD_Fill@i
 19810  01622A                     l14480:
 19811                           
 19812                           ; BSR set to: 0
 19813  01622A  0100               	movlb	0	; () banked
 19814  01622C  51C3               	movf	LCD_Fill@i& (0+255),w,b
 19815  01622E  0100               	movlb	0	; () banked
 19816  016230  B4D8               	btfsc	status,2,c
 19817  016232  D009               	goto	u11350
 19818                           
 19819                           ; BSR set to: 0
 19820                           ;LCD.c: 301: LCD_Word_Write(pColour);
 19821                           
 19822                           ; BSR set to: 0
 19823                           
 19824                           ; BSR set to: 0
 19825  016234  C0C1  F0BD         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 19826  016238  C0C2  F0BE         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 19827  01623C  ECED  F0B5         	call	_LCD_Word_Write	;wreg free
 19828  016240  0100               	movlb	0	; () banked
 19829  016242  07C3               	decf	LCD_Fill@i& (0+255),f,b
 19830  016244  D7F2               	goto	l14480
 19831  016246                     u11350:
 19832                           
 19833                           ; BSR set to: 0
 19834                           
 19835                           ; BSR set to: 0
 19836  016246  0100               	movlb	0	; () banked
 19837  016248  07C4               	decf	LCD_Fill@j& (0+255),f,b
 19838  01624A  D7E8               	goto	l14476
 19839  01624C                     __end_of_LCD_Fill:
 19840                           	opt stack 0
 19841                           tosu	equ	0xFFF
 19842                           tosh	equ	0xFFE
 19843                           tosl	equ	0xFFD
 19844                           pclath	equ	0xFFA
 19845                           tblptru	equ	0xFF8
 19846                           tblptrh	equ	0xFF7
 19847                           tblptrl	equ	0xFF6
 19848                           tablat	equ	0xFF5
 19849                           prodh	equ	0xFF4
 19850                           prodl	equ	0xFF3
 19851                           intcon	equ	0xFF2
 19852                           postinc0	equ	0xFEE
 19853                           wreg	equ	0xFE8
 19854                           indf1	equ	0xFE7
 19855                           postdec1	equ	0xFE5
 19856                           fsr1h	equ	0xFE2
 19857                           fsr1l	equ	0xFE1
 19858                           indf2	equ	0xFDF
 19859                           postinc2	equ	0xFDE
 19860                           postdec2	equ	0xFDD
 19861                           plusw2	equ	0xFDB
 19862                           fsr2h	equ	0xFDA
 19863                           fsr2l	equ	0xFD9
 19864                           status	equ	0xFD8
 19865                           
 19866 ;; *************** function _Set_Addr_Window *****************
 19867 ;; Defined at:
 19868 ;;		line 214 in file "Library/LCD.c"
 19869 ;; Parameters:    Size  Location     Type
 19870 ;;  xs              1    wreg     unsigned char 
 19871 ;;  ys              1    5[BANK0 ] unsigned char 
 19872 ;;  xe              1    6[BANK0 ] unsigned char 
 19873 ;;  ye              1    7[BANK0 ] unsigned char 
 19874 ;; Auto vars:     Size  Location     Type
 19875 ;;  xs              1    8[BANK0 ] unsigned char 
 19876 ;; Return value:  Size  Location     Type
 19877 ;;                  1    wreg      void 
 19878 ;; Registers used:
 19879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19880 ;; Tracked objects:
 19881 ;;		On entry : 0/0
 19882 ;;		On exit  : 0/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19885 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19888 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19889 ;;Total ram usage:        4 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; Hardware stack levels required when called:    9
 19892 ;; This function calls:
 19893 ;;		_LCD_Write
 19894 ;; This function is called by:
 19895 ;;		_LCD_Fill
 19896 ;;		_LCD_FillRectangle
 19897 ;;		_LCD_DrawField
 19898 ;;		_RAM_Address_Set
 19899 ;;		_LCD_DrawPixel
 19900 ;; This function uses a non-reentrant model
 19901 ;;
 19902                           
 19903                           	psect	text85
 19904  014DF0                     __ptext85:
 19905                           	opt stack 0
 19906  014DF0                     _Set_Addr_Window:
 19907                           	opt stack 17
 19908                           
 19909                           ; BSR set to: 0
 19910                           ;incstack = 0
 19911                           ;Set_Addr_Window@xs stored from wreg
 19912  014DF0  0100               	movlb	0	; () banked
 19913  014DF2  6FC0               	movwf	Set_Addr_Window@xs& (0+255),b
 19914                           
 19915                           ;LCD.c: 216: ys+=2;
 19916  014DF4  0E02               	movlw	2
 19917  014DF6  0100               	movlb	0	; () banked
 19918  014DF8  27BD               	addwf	Set_Addr_Window@ys& (0+255),f,b
 19919                           
 19920                           ;LCD.c: 217: ye+=2;
 19921  014DFA  0E02               	movlw	2
 19922  014DFC  0100               	movlb	0	; () banked
 19923  014DFE  27BF               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19924                           
 19925                           ;LCD.c: 218: xs+=3;
 19926  014E00  0E03               	movlw	3
 19927  014E02  0100               	movlb	0	; () banked
 19928  014E04  27C0               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19929                           
 19930                           ;LCD.c: 219: xe+=3;
 19931  014E06  0E03               	movlw	3
 19932  014E08  0100               	movlb	0	; () banked
 19933  014E0A  27BE               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19937  014E0C  0E00               	movlw	0
 19938  014E0E  0100               	movlb	0	; () banked
 19939  014E10  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19940  014E12  0E2A               	movlw	42
 19941  014E14  EC8C  F0B5         	call	_LCD_Write
 19942                           
 19943                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19944  014E18  0E01               	movlw	1
 19945  014E1A  0100               	movlb	0	; () banked
 19946  014E1C  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19947  014E1E  0E00               	movlw	0
 19948  014E20  EC8C  F0B5         	call	_LCD_Write
 19949                           
 19950                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19951  014E24  0E01               	movlw	1
 19952  014E26  0100               	movlb	0	; () banked
 19953  014E28  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19954  014E2A  0100               	movlb	0	; () banked
 19955  014E2C  51C0               	movf	Set_Addr_Window@xs& (0+255),w,b
 19956  014E2E  EC8C  F0B5         	call	_LCD_Write
 19957                           
 19958                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19959  014E32  0E01               	movlw	1
 19960  014E34  0100               	movlb	0	; () banked
 19961  014E36  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19962  014E38  0E00               	movlw	0
 19963  014E3A  EC8C  F0B5         	call	_LCD_Write
 19964                           
 19965                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19966  014E3E  0E01               	movlw	1
 19967  014E40  0100               	movlb	0	; () banked
 19968  014E42  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19969  014E44  0100               	movlb	0	; () banked
 19970  014E46  51BE               	movf	Set_Addr_Window@xe& (0+255),w,b
 19971  014E48  EC8C  F0B5         	call	_LCD_Write
 19972                           
 19973                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19974  014E4C  0E00               	movlw	0
 19975  014E4E  0100               	movlb	0	; () banked
 19976  014E50  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19977  014E52  0E2B               	movlw	43
 19978  014E54  EC8C  F0B5         	call	_LCD_Write
 19979                           
 19980                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19981  014E58  0E01               	movlw	1
 19982  014E5A  0100               	movlb	0	; () banked
 19983  014E5C  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19984  014E5E  0E00               	movlw	0
 19985  014E60  EC8C  F0B5         	call	_LCD_Write
 19986                           
 19987                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19988  014E64  0E01               	movlw	1
 19989  014E66  0100               	movlb	0	; () banked
 19990  014E68  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19991  014E6A  0100               	movlb	0	; () banked
 19992  014E6C  51BD               	movf	Set_Addr_Window@ys& (0+255),w,b
 19993  014E6E  EC8C  F0B5         	call	_LCD_Write
 19994                           
 19995                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19996  014E72  0E01               	movlw	1
 19997  014E74  0100               	movlb	0	; () banked
 19998  014E76  6FBB               	movwf	LCD_Write@mode& (0+255),b
 19999  014E78  0E00               	movlw	0
 20000  014E7A  EC8C  F0B5         	call	_LCD_Write
 20001                           
 20002                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20003  014E7E  0E01               	movlw	1
 20004  014E80  0100               	movlb	0	; () banked
 20005  014E82  6FBB               	movwf	LCD_Write@mode& (0+255),b
 20006  014E84  0100               	movlb	0	; () banked
 20007  014E86  51BF               	movf	Set_Addr_Window@ye& (0+255),w,b
 20008  014E88  EC8C  F0B5         	call	_LCD_Write
 20009                           
 20010                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20011  014E8C  0E00               	movlw	0
 20012  014E8E  0100               	movlb	0	; () banked
 20013  014E90  6FBB               	movwf	LCD_Write@mode& (0+255),b
 20014  014E92  0E2C               	movlw	44
 20015  014E94  EC8C  F0B5         	call	_LCD_Write
 20016  014E98  0012               	return		;funcret
 20017  014E9A                     __end_of_Set_Addr_Window:
 20018                           	opt stack 0
 20019                           tosu	equ	0xFFF
 20020                           tosh	equ	0xFFE
 20021                           tosl	equ	0xFFD
 20022                           pclath	equ	0xFFA
 20023                           tblptru	equ	0xFF8
 20024                           tblptrh	equ	0xFF7
 20025                           tblptrl	equ	0xFF6
 20026                           tablat	equ	0xFF5
 20027                           prodh	equ	0xFF4
 20028                           prodl	equ	0xFF3
 20029                           intcon	equ	0xFF2
 20030                           postinc0	equ	0xFEE
 20031                           wreg	equ	0xFE8
 20032                           indf1	equ	0xFE7
 20033                           postdec1	equ	0xFE5
 20034                           fsr1h	equ	0xFE2
 20035                           fsr1l	equ	0xFE1
 20036                           indf2	equ	0xFDF
 20037                           postinc2	equ	0xFDE
 20038                           postdec2	equ	0xFDD
 20039                           plusw2	equ	0xFDB
 20040                           fsr2h	equ	0xFDA
 20041                           fsr2l	equ	0xFD9
 20042                           status	equ	0xFD8
 20043                           
 20044 ;; *************** function _LCD_Word_Write *****************
 20045 ;; Defined at:
 20046 ;;		line 198 in file "Library/LCD.c"
 20047 ;; Parameters:    Size  Location     Type
 20048 ;;  value           2    5[BANK0 ] unsigned short 
 20049 ;; Auto vars:     Size  Location     Type
 20050 ;;		None
 20051 ;; Return value:  Size  Location     Type
 20052 ;;                  1    wreg      void 
 20053 ;; Registers used:
 20054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20055 ;; Tracked objects:
 20056 ;;		On entry : 0/0
 20057 ;;		On exit  : 0/0
 20058 ;;		Unchanged: 0/0
 20059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20064 ;;Total ram usage:        2 bytes
 20065 ;; Hardware stack levels used:    1
 20066 ;; Hardware stack levels required when called:    9
 20067 ;; This function calls:
 20068 ;;		_LCD_Write
 20069 ;; This function is called by:
 20070 ;;		_LCD_Fill
 20071 ;;		_LCD_FillRectangle
 20072 ;;		_LCD_DrawField
 20073 ;;		_LCD_DrawPixel
 20074 ;; This function uses a non-reentrant model
 20075 ;;
 20076                           
 20077                           	psect	text86
 20078  016BDA                     __ptext86:
 20079                           	opt stack 0
 20080  016BDA                     _LCD_Word_Write:
 20081                           	opt stack 17
 20082                           
 20083                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20084                           
 20085                           ;incstack = 0
 20086  016BDA  0E01               	movlw	1
 20087  016BDC  0100               	movlb	0	; () banked
 20088  016BDE  6FBB               	movwf	LCD_Write@mode& (0+255),b
 20089  016BE0  0100               	movlb	0	; () banked
 20090  016BE2  51BE               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20091  016BE4  EC8C  F0B5         	call	_LCD_Write
 20092                           
 20093                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20094  016BE8  0E01               	movlw	1
 20095  016BEA  0100               	movlb	0	; () banked
 20096  016BEC  6FBB               	movwf	LCD_Write@mode& (0+255),b
 20097  016BEE  0100               	movlb	0	; () banked
 20098  016BF0  51BD               	movf	LCD_Word_Write@value& (0+255),w,b
 20099  016BF2  EC8C  F0B5         	call	_LCD_Write
 20100  016BF6  0012               	return		;funcret
 20101  016BF8                     __end_of_LCD_Word_Write:
 20102                           	opt stack 0
 20103                           tosu	equ	0xFFF
 20104                           tosh	equ	0xFFE
 20105                           tosl	equ	0xFFD
 20106                           pclath	equ	0xFFA
 20107                           tblptru	equ	0xFF8
 20108                           tblptrh	equ	0xFF7
 20109                           tblptrl	equ	0xFF6
 20110                           tablat	equ	0xFF5
 20111                           prodh	equ	0xFF4
 20112                           prodl	equ	0xFF3
 20113                           intcon	equ	0xFF2
 20114                           postinc0	equ	0xFEE
 20115                           wreg	equ	0xFE8
 20116                           indf1	equ	0xFE7
 20117                           postdec1	equ	0xFE5
 20118                           fsr1h	equ	0xFE2
 20119                           fsr1l	equ	0xFE1
 20120                           indf2	equ	0xFDF
 20121                           postinc2	equ	0xFDE
 20122                           postdec2	equ	0xFDD
 20123                           plusw2	equ	0xFDB
 20124                           fsr2h	equ	0xFDA
 20125                           fsr2l	equ	0xFD9
 20126                           status	equ	0xFD8
 20127                           
 20128 ;; *************** function _LCD_Write *****************
 20129 ;; Defined at:
 20130 ;;		line 67 in file "Library/LCD.c"
 20131 ;; Parameters:    Size  Location     Type
 20132 ;;  value           1    wreg     unsigned char 
 20133 ;;  mode            1    3[BANK0 ] enum E6761
 20134 ;; Auto vars:     Size  Location     Type
 20135 ;;  value           1    4[BANK0 ] unsigned char 
 20136 ;; Return value:  Size  Location     Type
 20137 ;;                  1    wreg      void 
 20138 ;; Registers used:
 20139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20140 ;; Tracked objects:
 20141 ;;		On entry : 0/0
 20142 ;;		On exit  : 0/0
 20143 ;;		Unchanged: 0/0
 20144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20145 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20149 ;;Total ram usage:        2 bytes
 20150 ;; Hardware stack levels used:    1
 20151 ;; Hardware stack levels required when called:    8
 20152 ;; This function calls:
 20153 ;;		_Mode_Set
 20154 ;;		_SPI_Send
 20155 ;; This function is called by:
 20156 ;;		_LCD_Init
 20157 ;;		_LCD_Word_Write
 20158 ;;		_Set_Addr_Window
 20159 ;;		_Set_Rotation
 20160 ;;		_LCD_WriteCMD
 20161 ;;		_LCD_WriteData
 20162 ;;		_LCD_Data_Write
 20163 ;;		_LCD_Data_Write_4k
 20164 ;;		_Invert_Display
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text87
 20169  016B18                     __ptext87:
 20170                           	opt stack 0
 20171  016B18                     _LCD_Write:
 20172                           	opt stack 17
 20173                           
 20174                           ;incstack = 0
 20175                           ;LCD_Write@value stored from wreg
 20176  016B18  0100               	movlb	0	; () banked
 20177  016B1A  6FBC               	movwf	LCD_Write@value& (0+255),b
 20178                           
 20179                           ;LCD.c: 89: Mode_Set(mode);
 20180  016B1C  0100               	movlb	0	; () banked
 20181  016B1E  51BB               	movf	LCD_Write@mode& (0+255),w,b
 20182  016B20  EC04  F0B7         	call	_Mode_Set
 20183                           
 20184                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20185  016B24  0E8C               	movlw	low _SPI2
 20186  016B26  0100               	movlb	0	; () banked
 20187  016B28  6FB8               	movwf	SPI_Send@pInput& (0+255),b
 20188  016B2A  0E03               	movlw	high _SPI2
 20189  016B2C  0100               	movlb	0	; () banked
 20190  016B2E  6FB9               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20191  016B30  C0BC  F0BA         	movff	LCD_Write@value,SPI_Send@pData
 20192  016B34  EC6E  F0AE         	call	_SPI_Send	;wreg free
 20193  016B38  0012               	return		;funcret
 20194  016B3A                     __end_of_LCD_Write:
 20195                           	opt stack 0
 20196                           tosu	equ	0xFFF
 20197                           tosh	equ	0xFFE
 20198                           tosl	equ	0xFFD
 20199                           pclath	equ	0xFFA
 20200                           tblptru	equ	0xFF8
 20201                           tblptrh	equ	0xFF7
 20202                           tblptrl	equ	0xFF6
 20203                           tablat	equ	0xFF5
 20204                           prodh	equ	0xFF4
 20205                           prodl	equ	0xFF3
 20206                           intcon	equ	0xFF2
 20207                           postinc0	equ	0xFEE
 20208                           wreg	equ	0xFE8
 20209                           indf1	equ	0xFE7
 20210                           postdec1	equ	0xFE5
 20211                           fsr1h	equ	0xFE2
 20212                           fsr1l	equ	0xFE1
 20213                           indf2	equ	0xFDF
 20214                           postinc2	equ	0xFDE
 20215                           postdec2	equ	0xFDD
 20216                           plusw2	equ	0xFDB
 20217                           fsr2h	equ	0xFDA
 20218                           fsr2l	equ	0xFD9
 20219                           status	equ	0xFD8
 20220                           
 20221 ;; *************** function _SPI_Send *****************
 20222 ;; Defined at:
 20223 ;;		line 226 in file "Library/SPI.c"
 20224 ;; Parameters:    Size  Location     Type
 20225 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20226 ;;		 -> SPI1(11), SPI2(11), 
 20227 ;;  pData           1    2[BANK0 ] unsigned char 
 20228 ;; Auto vars:     Size  Location     Type
 20229 ;;		None
 20230 ;; Return value:  Size  Location     Type
 20231 ;;                  1    wreg      unsigned char 
 20232 ;; Registers used:
 20233 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20234 ;; Tracked objects:
 20235 ;;		On entry : 0/0
 20236 ;;		On exit  : 0/0
 20237 ;;		Unchanged: 0/0
 20238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20239 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;Total ram usage:        3 bytes
 20244 ;; Hardware stack levels used:    1
 20245 ;; Hardware stack levels required when called:    7
 20246 ;; This function calls:
 20247 ;;		Nothing
 20248 ;; This function is called by:
 20249 ;;		_LCD_Write
 20250 ;;		_OutSeg
 20251 ;; This function uses a non-reentrant model
 20252 ;;
 20253                           
 20254                           	psect	text88
 20255  015CDC                     __ptext88:
 20256                           	opt stack 0
 20257  015CDC                     _SPI_Send:
 20258                           	opt stack 19
 20259                           
 20260                           ;SPI.c: 253: switch (pInput->mChannel)
 20261                           
 20262                           ;incstack = 0
 20263  015CDC  D026               	goto	l678
 20264  015CDE                     
 20265                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20266  015CDE  C0A7  FFD9         	movff	_PortC+4,fsr2l
 20267  015CE2  C0A8  FFDA         	movff	_PortC+5,fsr2h
 20268  015CE6  0100               	movlb	0	; () banked
 20269  015CE8  94DF               	bcf	indf2,2,c
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;SPI.c: 257: SSP1BUF = pData;
 20273  015CEA  C0BA  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20274  015CEE                     
 20275                           ; BSR set to: 0
 20276  015CEE  A0C7               	btfss	4039,0,c	;volatile
 20277  015CF0  D7FE               	goto	l681
 20278                           
 20279                           ;SPI.c: 259: pData = SSP1BUF;
 20280  015CF2  CFC9 F0BA          	movff	4041,SPI_Send@pData	;volatile
 20281                           
 20282                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20283  015CF6  C0A7  FFD9         	movff	_PortC+4,fsr2l
 20284  015CFA  C0A8  FFDA         	movff	_PortC+5,fsr2h
 20285  015CFE  0100               	movlb	0	; () banked
 20286  015D00  84DF               	bsf	indf2,2,c
 20287                           
 20288                           ; BSR set to: 0
 20289                           ;SPI.c: 261: return pData;
 20290                           ;	Return value of _SPI_Send is never used
 20291  015D02  0012               	return	
 20292  015D04                     
 20293                           ; BSR set to: 0
 20294                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20295                           
 20296                           ; BSR set to: 0
 20297  015D04  C09D  FFD9         	movff	_PortD+4,fsr2l
 20298  015D08  C09E  FFDA         	movff	_PortD+5,fsr2h
 20299  015D0C  0100               	movlb	0	; () banked
 20300  015D0E  9EDF               	bcf	indf2,7,c
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;SPI.c: 264: SSP2BUF = pData;
 20304  015D10  C0BA  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20305  015D14                     
 20306                           ; BSR set to: 0
 20307  015D14  A06D               	btfss	3949,0,c	;volatile
 20308  015D16  D7FE               	goto	l686
 20309                           
 20310                           ;SPI.c: 266: pData = SSP2BUF;
 20311  015D18  CF6F F0BA          	movff	3951,SPI_Send@pData	;volatile
 20312                           
 20313                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20314  015D1C  C09D  FFD9         	movff	_PortD+4,fsr2l
 20315  015D20  C09E  FFDA         	movff	_PortD+5,fsr2h
 20316  015D24  0100               	movlb	0	; () banked
 20317  015D26  8EDF               	bsf	indf2,7,c
 20318                           
 20319                           ; BSR set to: 0
 20320                           ;SPI.c: 269: };
 20321                           
 20322                           ; BSR set to: 0
 20323                           ;SPI.c: 268: return pData;
 20324                           ;	Return value of _SPI_Send is never used
 20325  015D28  0012               	return	
 20326  015D2A                     l678:
 20327                           
 20328                           ; BSR set to: 0
 20329  015D2A  0100               	movlb	0	; () banked
 20330  015D2C  EE20 F002          	lfsr	2,2
 20331  015D30  51B8               	movf	SPI_Send@pInput& (0+255),w,b
 20332  015D32  26D9               	addwf	fsr2l,f,c
 20333  015D34  51B9               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20334  015D36  22DA               	addwfc	fsr2h,f,c
 20335  015D38  50DF               	movf	indf2,w,c
 20336                           
 20337                           ; Switch size 1, requested type "space"
 20338                           ; Number of cases is 2, Range of values is 0 to 1
 20339                           ; switch strategies available:
 20340                           ; Name         Instructions Cycles
 20341                           ; simple_byte            7     4 (average)
 20342                           ;	Chosen strategy is simple_byte
 20343  015D3A  0A00               	xorlw	0	; case 0
 20344  015D3C  B4D8               	btfsc	status,2,c
 20345  015D3E  D7CF               	goto	l679
 20346  015D40  0A01               	xorlw	1	; case 1
 20347  015D42  A4D8               	btfss	status,2,c
 20348  015D44  0012               	return	
 20349  015D46  D7DE               	goto	l684
 20350  015D48                     __end_of_SPI_Send:
 20351                           	opt stack 0
 20352                           tosu	equ	0xFFF
 20353                           tosh	equ	0xFFE
 20354                           tosl	equ	0xFFD
 20355                           pclath	equ	0xFFA
 20356                           tblptru	equ	0xFF8
 20357                           tblptrh	equ	0xFF7
 20358                           tblptrl	equ	0xFF6
 20359                           tablat	equ	0xFF5
 20360                           prodh	equ	0xFF4
 20361                           prodl	equ	0xFF3
 20362                           intcon	equ	0xFF2
 20363                           postinc0	equ	0xFEE
 20364                           wreg	equ	0xFE8
 20365                           indf1	equ	0xFE7
 20366                           postdec1	equ	0xFE5
 20367                           fsr1h	equ	0xFE2
 20368                           fsr1l	equ	0xFE1
 20369                           indf2	equ	0xFDF
 20370                           postinc2	equ	0xFDE
 20371                           postdec2	equ	0xFDD
 20372                           plusw2	equ	0xFDB
 20373                           fsr2h	equ	0xFDA
 20374                           fsr2l	equ	0xFD9
 20375                           status	equ	0xFD8
 20376                           
 20377 ;; *************** function _Mode_Set *****************
 20378 ;; Defined at:
 20379 ;;		line 40 in file "Library/LCD.c"
 20380 ;; Parameters:    Size  Location     Type
 20381 ;;  pMode           1    wreg     enum E6761
 20382 ;; Auto vars:     Size  Location     Type
 20383 ;;  pMode           1    0[BANK0 ] enum E6761
 20384 ;; Return value:  Size  Location     Type
 20385 ;;                  1    wreg      void 
 20386 ;; Registers used:
 20387 ;;		wreg
 20388 ;; Tracked objects:
 20389 ;;		On entry : 0/0
 20390 ;;		On exit  : 0/0
 20391 ;;		Unchanged: 0/0
 20392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20396 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20397 ;;Total ram usage:        1 bytes
 20398 ;; Hardware stack levels used:    1
 20399 ;; Hardware stack levels required when called:    7
 20400 ;; This function calls:
 20401 ;;		Nothing
 20402 ;; This function is called by:
 20403 ;;		_LCD_Write
 20404 ;; This function uses a non-reentrant model
 20405 ;;
 20406                           
 20407                           	psect	text89
 20408  016E08                     __ptext89:
 20409                           	opt stack 0
 20410  016E08                     _Mode_Set:
 20411                           	opt stack 17
 20412                           
 20413                           ; BSR set to: 0
 20414                           ;incstack = 0
 20415                           ;Mode_Set@pMode stored from wreg
 20416  016E08  0100               	movlb	0	; () banked
 20417  016E0A  6FB8               	movwf	Mode_Set@pMode& (0+255),b
 20418                           
 20419                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20420  016E0C  0100               	movlb	0	; () banked
 20421  016E0E  B1B8               	btfsc	Mode_Set@pMode& (0+255),0,b
 20422  016E10  D002               	bra	u9485
 20423  016E12  9E85               	bcf	3973,7,c	;volatile
 20424  016E14  D001               	bra	u9486
 20425  016E16                     u9485:
 20426  016E16  8E85               	bsf	3973,7,c	;volatile
 20427  016E18                     u9486:
 20428  016E18  0012               	return		;funcret
 20429  016E1A                     __end_of_Mode_Set:
 20430                           	opt stack 0
 20431                           tosu	equ	0xFFF
 20432                           tosh	equ	0xFFE
 20433                           tosl	equ	0xFFD
 20434                           pclath	equ	0xFFA
 20435                           tblptru	equ	0xFF8
 20436                           tblptrh	equ	0xFF7
 20437                           tblptrl	equ	0xFF6
 20438                           tablat	equ	0xFF5
 20439                           prodh	equ	0xFF4
 20440                           prodl	equ	0xFF3
 20441                           intcon	equ	0xFF2
 20442                           postinc0	equ	0xFEE
 20443                           wreg	equ	0xFE8
 20444                           indf1	equ	0xFE7
 20445                           postdec1	equ	0xFE5
 20446                           fsr1h	equ	0xFE2
 20447                           fsr1l	equ	0xFE1
 20448                           indf2	equ	0xFDF
 20449                           postinc2	equ	0xFDE
 20450                           postdec2	equ	0xFDD
 20451                           plusw2	equ	0xFDB
 20452                           fsr2h	equ	0xFDA
 20453                           fsr2l	equ	0xFD9
 20454                           status	equ	0xFD8
 20455                           
 20456 ;; *************** function _Configure_GPIOs *****************
 20457 ;; Defined at:
 20458 ;;		line 46 in file "Library/LCD.c"
 20459 ;; Parameters:    Size  Location     Type
 20460 ;;		None
 20461 ;; Auto vars:     Size  Location     Type
 20462 ;;		None
 20463 ;; Return value:  Size  Location     Type
 20464 ;;                  1    wreg      void 
 20465 ;; Registers used:
 20466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20467 ;; Tracked objects:
 20468 ;;		On entry : 0/0
 20469 ;;		On exit  : 0/0
 20470 ;;		Unchanged: 0/0
 20471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20476 ;;Total ram usage:        0 bytes
 20477 ;; Hardware stack levels used:    1
 20478 ;; Hardware stack levels required when called:   14
 20479 ;; This function calls:
 20480 ;;		_LCD_Reset
 20481 ;;		_Port_SetPinType
 20482 ;;		_SPI_Init
 20483 ;;		_SPI_MaxSpeed
 20484 ;; This function is called by:
 20485 ;;		_LCD_Init
 20486 ;; This function uses a non-reentrant model
 20487 ;;
 20488                           
 20489                           	psect	text90
 20490  015C6C                     __ptext90:
 20491                           	opt stack 0
 20492  015C6C                     _Configure_GPIOs:
 20493                           	opt stack 14
 20494                           
 20495                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 20496                           
 20497                           ;incstack = 0
 20498  015C6C  0EC9               	movlw	low _PortF
 20499  015C6E  0100               	movlb	0	; () banked
 20500  015C70  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 20501  015C72  0E03               	movlw	high _PortF
 20502  015C74  0100               	movlb	0	; () banked
 20503  015C76  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20504  015C78  0E07               	movlw	7
 20505  015C7A  0100               	movlb	0	; () banked
 20506  015C7C  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 20507  015C7E  0E03               	movlw	3
 20508  015C80  0100               	movlb	0	; () banked
 20509  015C82  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 20510  015C84  ECB5  F095         	call	_Port_SetPinType	;wreg free
 20511                           
 20512                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 20513  015C88  0EC9               	movlw	low _PortF
 20514  015C8A  0100               	movlb	0	; () banked
 20515  015C8C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 20516  015C8E  0E03               	movlw	high _PortF
 20517  015C90  0100               	movlb	0	; () banked
 20518  015C92  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20519  015C94  0E06               	movlw	6
 20520  015C96  0100               	movlb	0	; () banked
 20521  015C98  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 20522  015C9A  0E03               	movlw	3
 20523  015C9C  0100               	movlb	0	; () banked
 20524  015C9E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 20525  015CA0  ECB5  F095         	call	_Port_SetPinType	;wreg free
 20526                           
 20527                           ;LCD.c: 55: LCD_Reset();
 20528  015CA4  EC77  F0B1         	call	_LCD_Reset	;wreg free
 20529                           
 20530                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 20531  015CA8  0EC0               	movlw	192
 20532  015CAA  0100               	movlb	0	; () banked
 20533  015CAC  6FE5               	movwf	SPI_Init@pClock& (0+255),b
 20534  015CAE  0EC6               	movlw	198
 20535  015CB0  6FE6               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20536  015CB2  0E2D               	movlw	45
 20537  015CB4  6FE7               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20538  015CB6  0E00               	movlw	0
 20539  015CB8  6FE8               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20540  015CBA  0E01               	movlw	1
 20541  015CBC  0100               	movlb	0	; () banked
 20542  015CBE  6FE9               	movwf	SPI_Init@pChannel& (0+255),b
 20543  015CC0  0E01               	movlw	1
 20544  015CC2  0100               	movlb	0	; () banked
 20545  015CC4  6FEA               	movwf	SPI_Init@pMode& (0+255),b
 20546  015CC6  ECAD  F086         	call	_SPI_Init	;wreg free
 20547                           
 20548                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 20549  015CCA  0E8C               	movlw	low _SPI2
 20550  015CCC  0100               	movlb	0	; () banked
 20551  015CCE  6FC7               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 20552  015CD0  0E03               	movlw	high _SPI2
 20553  015CD2  0100               	movlb	0	; () banked
 20554  015CD4  6FC8               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 20555  015CD6  EC88  F0AD         	call	_SPI_MaxSpeed	;wreg free
 20556  015CDA  0012               	return		;funcret
 20557  015CDC                     __end_of_Configure_GPIOs:
 20558                           	opt stack 0
 20559                           tosu	equ	0xFFF
 20560                           tosh	equ	0xFFE
 20561                           tosl	equ	0xFFD
 20562                           pclath	equ	0xFFA
 20563                           tblptru	equ	0xFF8
 20564                           tblptrh	equ	0xFF7
 20565                           tblptrl	equ	0xFF6
 20566                           tablat	equ	0xFF5
 20567                           prodh	equ	0xFF4
 20568                           prodl	equ	0xFF3
 20569                           intcon	equ	0xFF2
 20570                           postinc0	equ	0xFEE
 20571                           wreg	equ	0xFE8
 20572                           indf1	equ	0xFE7
 20573                           postdec1	equ	0xFE5
 20574                           fsr1h	equ	0xFE2
 20575                           fsr1l	equ	0xFE1
 20576                           indf2	equ	0xFDF
 20577                           postinc2	equ	0xFDE
 20578                           postdec2	equ	0xFDD
 20579                           plusw2	equ	0xFDB
 20580                           fsr2h	equ	0xFDA
 20581                           fsr2l	equ	0xFD9
 20582                           status	equ	0xFD8
 20583                           
 20584 ;; *************** function _SPI_MaxSpeed *****************
 20585 ;; Defined at:
 20586 ;;		line 201 in file "Library/SPI.c"
 20587 ;; Parameters:    Size  Location     Type
 20588 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20589 ;;		 -> SPI2(11), 
 20590 ;; Auto vars:     Size  Location     Type
 20591 ;;		None
 20592 ;; Return value:  Size  Location     Type
 20593 ;;                  1    wreg      void 
 20594 ;; Registers used:
 20595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20596 ;; Tracked objects:
 20597 ;;		On entry : 0/0
 20598 ;;		On exit  : 0/0
 20599 ;;		Unchanged: 0/0
 20600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20601 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20605 ;;Total ram usage:        2 bytes
 20606 ;; Hardware stack levels used:    1
 20607 ;; Hardware stack levels required when called:    9
 20608 ;; This function calls:
 20609 ;;		_Byte_SetBit
 20610 ;;		_Byte_SetQuad
 20611 ;; This function is called by:
 20612 ;;		_Configure_GPIOs
 20613 ;; This function uses a non-reentrant model
 20614 ;;
 20615                           
 20616                           	psect	text91
 20617  015B10                     __ptext91:
 20618                           	opt stack 0
 20619  015B10                     _SPI_MaxSpeed:
 20620                           	opt stack 18
 20621                           
 20622                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20623                           
 20624                           ;incstack = 0
 20625  015B10  0100               	movlb	0	; () banked
 20626  015B12  EE20 F006          	lfsr	2,6
 20627  015B16  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20628  015B18  26D9               	addwf	fsr2l,f,c
 20629  015B1A  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20630  015B1C  22DA               	addwfc	fsr2h,f,c
 20631  015B1E  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 20632  015B22  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 20633  015B26  0E05               	movlw	5
 20634  015B28  0100               	movlb	0	; () banked
 20635  015B2A  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 20636  015B2C  0E00               	movlw	0
 20637  015B2E  0100               	movlb	0	; () banked
 20638  015B30  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 20639  015B32  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 20640                           
 20641                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 20642  015B36  0100               	movlb	0	; () banked
 20643  015B38  EE20 F006          	lfsr	2,6
 20644  015B3C  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20645  015B3E  26D9               	addwf	fsr2l,f,c
 20646  015B40  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20647  015B42  22DA               	addwfc	fsr2h,f,c
 20648  015B44  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 20649  015B48  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 20650  015B4C  0E00               	movlw	0
 20651  015B4E  0100               	movlb	0	; () banked
 20652  015B50  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20653  015B52  0E00               	movlw	0
 20654  015B54  0100               	movlb	0	; () banked
 20655  015B56  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 20656  015B58  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 20657                           
 20658                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20659  015B5C  0100               	movlb	0	; () banked
 20660  015B5E  EE20 F006          	lfsr	2,6
 20661  015B62  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20662  015B64  26D9               	addwf	fsr2l,f,c
 20663  015B66  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20664  015B68  22DA               	addwfc	fsr2h,f,c
 20665  015B6A  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 20666  015B6E  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 20667  015B72  0E05               	movlw	5
 20668  015B74  0100               	movlb	0	; () banked
 20669  015B76  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 20670  015B78  0E01               	movlw	1
 20671  015B7A  0100               	movlb	0	; () banked
 20672  015B7C  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 20673  015B7E  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 20674  015B82  0012               	return		;funcret
 20675  015B84                     __end_of_SPI_MaxSpeed:
 20676                           	opt stack 0
 20677                           tosu	equ	0xFFF
 20678                           tosh	equ	0xFFE
 20679                           tosl	equ	0xFFD
 20680                           pclath	equ	0xFFA
 20681                           tblptru	equ	0xFF8
 20682                           tblptrh	equ	0xFF7
 20683                           tblptrl	equ	0xFF6
 20684                           tablat	equ	0xFF5
 20685                           prodh	equ	0xFF4
 20686                           prodl	equ	0xFF3
 20687                           intcon	equ	0xFF2
 20688                           postinc0	equ	0xFEE
 20689                           wreg	equ	0xFE8
 20690                           indf1	equ	0xFE7
 20691                           postdec1	equ	0xFE5
 20692                           fsr1h	equ	0xFE2
 20693                           fsr1l	equ	0xFE1
 20694                           indf2	equ	0xFDF
 20695                           postinc2	equ	0xFDE
 20696                           postdec2	equ	0xFDD
 20697                           plusw2	equ	0xFDB
 20698                           fsr2h	equ	0xFDA
 20699                           fsr2l	equ	0xFD9
 20700                           status	equ	0xFD8
 20701                           
 20702 ;; *************** function _LCD_Reset *****************
 20703 ;; Defined at:
 20704 ;;		line 95 in file "Library/LCD.c"
 20705 ;; Parameters:    Size  Location     Type
 20706 ;;		None
 20707 ;; Auto vars:     Size  Location     Type
 20708 ;;		None
 20709 ;; Return value:  Size  Location     Type
 20710 ;;                  1    wreg      void 
 20711 ;; Registers used:
 20712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20713 ;; Tracked objects:
 20714 ;;		On entry : 0/0
 20715 ;;		On exit  : 0/0
 20716 ;;		Unchanged: 0/0
 20717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;Total ram usage:        0 bytes
 20723 ;; Hardware stack levels used:    1
 20724 ;; Hardware stack levels required when called:   13
 20725 ;; This function calls:
 20726 ;;		_LED_Toggle
 20727 ;;		_Reset_High
 20728 ;;		_Reset_Low
 20729 ;;		_delay_ms
 20730 ;; This function is called by:
 20731 ;;		_Configure_GPIOs
 20732 ;; This function uses a non-reentrant model
 20733 ;;
 20734                           
 20735                           	psect	text92
 20736  0162EE                     __ptext92:
 20737                           	opt stack 0
 20738  0162EE                     _LCD_Reset:
 20739                           	opt stack 14
 20740                           
 20741                           ;LCD.c: 97: Reset_High();
 20742                           
 20743                           ;incstack = 0
 20744  0162EE  EC0B  F0B6         	call	_Reset_High	;wreg free
 20745                           
 20746                           ;LCD.c: 98: LED_Toggle(eLED2);
 20747  0162F2  0E01               	movlw	1
 20748  0162F4  EC57  F0B2         	call	_LED_Toggle
 20749                           
 20750                           ;LCD.c: 99: delay_ms(0x80);
 20751  0162F8  0E00               	movlw	0
 20752  0162FA  0100               	movlb	0	; () banked
 20753  0162FC  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 20754  0162FE  0E80               	movlw	128
 20755  016300  6FB8               	movwf	delay_ms@ms& (0+255),b
 20756  016302  EC0F  F0AF         	call	_delay_ms	;wreg free
 20757                           
 20758                           ;LCD.c: 100: LED_Toggle(eLED2);
 20759  016306  0E01               	movlw	1
 20760  016308  EC57  F0B2         	call	_LED_Toggle
 20761                           
 20762                           ;LCD.c: 101: Reset_Low();
 20763  01630C  ECFC  F0B5         	call	_Reset_Low	;wreg free
 20764                           
 20765                           ;LCD.c: 102: delay_ms(0x80);
 20766  016310  0E00               	movlw	0
 20767  016312  0100               	movlb	0	; () banked
 20768  016314  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 20769  016316  0E80               	movlw	128
 20770  016318  6FB8               	movwf	delay_ms@ms& (0+255),b
 20771  01631A  EC0F  F0AF         	call	_delay_ms	;wreg free
 20772                           
 20773                           ;LCD.c: 103: LED_Toggle(eLED2);
 20774  01631E  0E01               	movlw	1
 20775  016320  EC57  F0B2         	call	_LED_Toggle
 20776                           
 20777                           ;LCD.c: 104: Reset_High();
 20778  016324  EC0B  F0B6         	call	_Reset_High	;wreg free
 20779                           
 20780                           ;LCD.c: 105: delay_ms(0x80);
 20781  016328  0E00               	movlw	0
 20782  01632A  0100               	movlb	0	; () banked
 20783  01632C  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 20784  01632E  0E80               	movlw	128
 20785  016330  6FB8               	movwf	delay_ms@ms& (0+255),b
 20786  016332  EC0F  F0AF         	call	_delay_ms	;wreg free
 20787                           
 20788                           ;LCD.c: 106: LED_Toggle(eLED2);
 20789  016336  0E01               	movlw	1
 20790  016338  EC57  F0B2         	call	_LED_Toggle
 20791  01633C  0012               	return		;funcret
 20792  01633E                     __end_of_LCD_Reset:
 20793                           	opt stack 0
 20794                           tosu	equ	0xFFF
 20795                           tosh	equ	0xFFE
 20796                           tosl	equ	0xFFD
 20797                           pclath	equ	0xFFA
 20798                           tblptru	equ	0xFF8
 20799                           tblptrh	equ	0xFF7
 20800                           tblptrl	equ	0xFF6
 20801                           tablat	equ	0xFF5
 20802                           prodh	equ	0xFF4
 20803                           prodl	equ	0xFF3
 20804                           intcon	equ	0xFF2
 20805                           postinc0	equ	0xFEE
 20806                           wreg	equ	0xFE8
 20807                           indf1	equ	0xFE7
 20808                           postdec1	equ	0xFE5
 20809                           fsr1h	equ	0xFE2
 20810                           fsr1l	equ	0xFE1
 20811                           indf2	equ	0xFDF
 20812                           postinc2	equ	0xFDE
 20813                           postdec2	equ	0xFDD
 20814                           plusw2	equ	0xFDB
 20815                           fsr2h	equ	0xFDA
 20816                           fsr2l	equ	0xFD9
 20817                           status	equ	0xFD8
 20818                           
 20819 ;; *************** function _delay_ms *****************
 20820 ;; Defined at:
 20821 ;;		line 240 in file "Library/Types.c"
 20822 ;; Parameters:    Size  Location     Type
 20823 ;;  ms              2    0[BANK0 ] unsigned short 
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;  u               4    2[BANK0 ] volatile unsigned long 
 20826 ;; Return value:  Size  Location     Type
 20827 ;;                  1    wreg      void 
 20828 ;; Registers used:
 20829 ;;		wreg, status,2, status,0
 20830 ;; Tracked objects:
 20831 ;;		On entry : 0/0
 20832 ;;		On exit  : 0/0
 20833 ;;		Unchanged: 0/0
 20834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20835 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;Total ram usage:        6 bytes
 20840 ;; Hardware stack levels used:    1
 20841 ;; Hardware stack levels required when called:    7
 20842 ;; This function calls:
 20843 ;;		Nothing
 20844 ;; This function is called by:
 20845 ;;		_LCD_Reset
 20846 ;;		_LCD_Init
 20847 ;;		_MXK_Init
 20848 ;;		_init
 20849 ;;		_move_and_rotate
 20850 ;;		_findClosestWall
 20851 ;;		_mode4
 20852 ;; This function uses a non-reentrant model
 20853 ;;
 20854                           
 20855                           	psect	text93
 20856  015E1E                     __ptext93:
 20857                           	opt stack 0
 20858  015E1E                     _delay_ms:
 20859                           	opt stack 21
 20860                           
 20861                           ;Types.c: 242: volatile unsigned long u;
 20862                           ;Types.c: 243: while (ms--)
 20863                           
 20864                           ;incstack = 0
 20865  015E1E  D01F               	goto	u9990
 20866  015E20                     l13220:
 20867                           
 20868                           ;Types.c: 244: {
 20869                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 20870  015E20  0E00               	movlw	0
 20871  015E22  0100               	movlb	0	; () banked
 20872  015E24  6FBA               	movwf	delay_ms@u& (0+255),b	;volatile
 20873  015E26  0E00               	movlw	0
 20874  015E28  6FBB               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20875  015E2A  0E00               	movlw	0
 20876  015E2C  6FBC               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20877  015E2E  0E00               	movlw	0
 20878  015E30  6FBD               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20879  015E32                     l13222:
 20880                           
 20881                           ; BSR set to: 0
 20882  015E32  0100               	movlb	0	; () banked
 20883  015E34  51BD               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 20884  015E36  0100               	movlb	0	; () banked
 20885  015E38  11BC               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 20886  015E3A  E111               	bnz	l13228
 20887  015E3C  0EB0               	movlw	176
 20888  015E3E  0100               	movlb	0	; () banked
 20889  015E40  5DBA               	subwf	delay_ms@u& (0+255),w,b	;volatile
 20890  015E42  0E04               	movlw	4
 20891  015E44  0100               	movlb	0	; () banked
 20892  015E46  59BB               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 20893  015E48  B0D8               	btfsc	status,0,c
 20894  015E4A  D009               	goto	u9990
 20895                           
 20896                           ; BSR set to: 0
 20897                           
 20898                           ; BSR set to: 0
 20899  015E4C  F000               	nop		; ;# 
 20900  015E4E  0E01               	movlw	1
 20901  015E50  0100               	movlb	0	; () banked
 20902  015E52  27BA               	addwf	delay_ms@u& (0+255),f,b	;volatile
 20903  015E54  0E00               	movlw	0
 20904  015E56  23BB               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 20905  015E58  23BC               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 20906  015E5A  23BD               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 20907  015E5C  D7EA               	goto	l13222
 20908  015E5E                     u9990:
 20909  015E5E                     l13228:
 20910  015E5E  0100               	movlb	0	; () banked
 20911  015E60  07B8               	decf	delay_ms@ms& (0+255),f,b
 20912  015E62  A0D8               	btfss	status,0,c
 20913  015E64  07B9               	decf	(delay_ms@ms+1)& (0+255),f,b
 20914  015E66  0100               	movlb	0	; () banked
 20915  015E68  29B8               	incf	delay_ms@ms& (0+255),w,b
 20916  015E6A  E1DA               	bnz	l13220
 20917  015E6C  0100               	movlb	0	; () banked
 20918  015E6E  29B9               	incf	(delay_ms@ms+1)& (0+255),w,b
 20919  015E70  A4D8               	btfss	status,2,c
 20920  015E72  D7D6               	goto	l824
 20921                           
 20922                           ; BSR set to: 0
 20923                           ;Types.c: 251: }
 20924                           ;Types.c: 252: }
 20925                           ;Types.c: 253: u = 0x8008;
 20926                           
 20927                           ; BSR set to: 0
 20928  015E74  0E08               	movlw	8
 20929  015E76  0100               	movlb	0	; () banked
 20930  015E78  6FBA               	movwf	delay_ms@u& (0+255),b	;volatile
 20931  015E7A  0E80               	movlw	128
 20932  015E7C  6FBB               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20933  015E7E  0E00               	movlw	0
 20934  015E80  6FBC               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20935  015E82  0E00               	movlw	0
 20936  015E84  6FBD               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20937                           
 20938                           ; BSR set to: 0
 20939  015E86  0012               	return		;funcret
 20940  015E88                     __end_of_delay_ms:
 20941                           	opt stack 0
 20942                           tosu	equ	0xFFF
 20943                           tosh	equ	0xFFE
 20944                           tosl	equ	0xFFD
 20945                           pclath	equ	0xFFA
 20946                           tblptru	equ	0xFF8
 20947                           tblptrh	equ	0xFF7
 20948                           tblptrl	equ	0xFF6
 20949                           tablat	equ	0xFF5
 20950                           prodh	equ	0xFF4
 20951                           prodl	equ	0xFF3
 20952                           intcon	equ	0xFF2
 20953                           postinc0	equ	0xFEE
 20954                           wreg	equ	0xFE8
 20955                           indf1	equ	0xFE7
 20956                           postdec1	equ	0xFE5
 20957                           fsr1h	equ	0xFE2
 20958                           fsr1l	equ	0xFE1
 20959                           indf2	equ	0xFDF
 20960                           postinc2	equ	0xFDE
 20961                           postdec2	equ	0xFDD
 20962                           plusw2	equ	0xFDB
 20963                           fsr2h	equ	0xFDA
 20964                           fsr2l	equ	0xFD9
 20965                           status	equ	0xFD8
 20966                           
 20967 ;; *************** function _Reset_Low *****************
 20968 ;; Defined at:
 20969 ;;		line 32 in file "Library/LCD.c"
 20970 ;; Parameters:    Size  Location     Type
 20971 ;;		None
 20972 ;; Auto vars:     Size  Location     Type
 20973 ;;		None
 20974 ;; Return value:  Size  Location     Type
 20975 ;;                  1    wreg      void 
 20976 ;; Registers used:
 20977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20978 ;; Tracked objects:
 20979 ;;		On entry : 0/0
 20980 ;;		On exit  : 0/0
 20981 ;;		Unchanged: 0/0
 20982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;Total ram usage:        0 bytes
 20988 ;; Hardware stack levels used:    1
 20989 ;; Hardware stack levels required when called:   11
 20990 ;; This function calls:
 20991 ;;		_Port_SetPin
 20992 ;; This function is called by:
 20993 ;;		_LCD_Reset
 20994 ;; This function uses a non-reentrant model
 20995 ;;
 20996                           
 20997                           	psect	text94
 20998  016BF8                     __ptext94:
 20999                           	opt stack 0
 21000  016BF8                     _Reset_Low:
 21001                           	opt stack 15
 21002                           
 21003                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 21004                           
 21005                           ; BSR set to: 0
 21006                           ;incstack = 0
 21007  016BF8  0EC9               	movlw	low _PortF
 21008  016BFA  0100               	movlb	0	; () banked
 21009  016BFC  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 21010  016BFE  0E03               	movlw	high _PortF
 21011  016C00  0100               	movlb	0	; () banked
 21012  016C02  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21013  016C04  0E06               	movlw	6
 21014  016C06  0100               	movlb	0	; () banked
 21015  016C08  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 21016  016C0A  0E01               	movlw	1
 21017  016C0C  0100               	movlb	0	; () banked
 21018  016C0E  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 21019  016C10  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 21020  016C14  0012               	return		;funcret
 21021  016C16                     __end_of_Reset_Low:
 21022                           	opt stack 0
 21023                           tosu	equ	0xFFF
 21024                           tosh	equ	0xFFE
 21025                           tosl	equ	0xFFD
 21026                           pclath	equ	0xFFA
 21027                           tblptru	equ	0xFF8
 21028                           tblptrh	equ	0xFF7
 21029                           tblptrl	equ	0xFF6
 21030                           tablat	equ	0xFF5
 21031                           prodh	equ	0xFF4
 21032                           prodl	equ	0xFF3
 21033                           intcon	equ	0xFF2
 21034                           postinc0	equ	0xFEE
 21035                           wreg	equ	0xFE8
 21036                           indf1	equ	0xFE7
 21037                           postdec1	equ	0xFE5
 21038                           fsr1h	equ	0xFE2
 21039                           fsr1l	equ	0xFE1
 21040                           indf2	equ	0xFDF
 21041                           postinc2	equ	0xFDE
 21042                           postdec2	equ	0xFDD
 21043                           plusw2	equ	0xFDB
 21044                           fsr2h	equ	0xFDA
 21045                           fsr2l	equ	0xFD9
 21046                           status	equ	0xFD8
 21047                           
 21048 ;; *************** function _Reset_High *****************
 21049 ;; Defined at:
 21050 ;;		line 36 in file "Library/LCD.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;		None
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;		None
 21055 ;; Return value:  Size  Location     Type
 21056 ;;                  1    wreg      void 
 21057 ;; Registers used:
 21058 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21059 ;; Tracked objects:
 21060 ;;		On entry : 0/0
 21061 ;;		On exit  : 0/0
 21062 ;;		Unchanged: 0/0
 21063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;Total ram usage:        0 bytes
 21069 ;; Hardware stack levels used:    1
 21070 ;; Hardware stack levels required when called:   11
 21071 ;; This function calls:
 21072 ;;		_Port_SetPin
 21073 ;; This function is called by:
 21074 ;;		_LCD_Reset
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           	psect	text95
 21079  016C16                     __ptext95:
 21080                           	opt stack 0
 21081  016C16                     _Reset_High:
 21082                           	opt stack 15
 21083                           
 21084                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21085                           
 21086                           ;incstack = 0
 21087  016C16  0EC9               	movlw	low _PortF
 21088  016C18  0100               	movlb	0	; () banked
 21089  016C1A  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 21090  016C1C  0E03               	movlw	high _PortF
 21091  016C1E  0100               	movlb	0	; () banked
 21092  016C20  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21093  016C22  0E06               	movlw	6
 21094  016C24  0100               	movlb	0	; () banked
 21095  016C26  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 21096  016C28  0E00               	movlw	0
 21097  016C2A  0100               	movlb	0	; () banked
 21098  016C2C  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 21099  016C2E  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 21100  016C32  0012               	return		;funcret
 21101  016C34                     __end_of_Reset_High:
 21102                           	opt stack 0
 21103                           tosu	equ	0xFFF
 21104                           tosh	equ	0xFFE
 21105                           tosl	equ	0xFFD
 21106                           pclath	equ	0xFFA
 21107                           tblptru	equ	0xFF8
 21108                           tblptrh	equ	0xFF7
 21109                           tblptrl	equ	0xFF6
 21110                           tablat	equ	0xFF5
 21111                           prodh	equ	0xFF4
 21112                           prodl	equ	0xFF3
 21113                           intcon	equ	0xFF2
 21114                           postinc0	equ	0xFEE
 21115                           wreg	equ	0xFE8
 21116                           indf1	equ	0xFE7
 21117                           postdec1	equ	0xFE5
 21118                           fsr1h	equ	0xFE2
 21119                           fsr1l	equ	0xFE1
 21120                           indf2	equ	0xFDF
 21121                           postinc2	equ	0xFDE
 21122                           postdec2	equ	0xFDD
 21123                           plusw2	equ	0xFDB
 21124                           fsr2h	equ	0xFDA
 21125                           fsr2l	equ	0xFD9
 21126                           status	equ	0xFD8
 21127                           
 21128 ;; *************** function _ISR_Enable *****************
 21129 ;; Defined at:
 21130 ;;		line 27 in file "Library/ISR.c"
 21131 ;; Parameters:    Size  Location     Type
 21132 ;;		None
 21133 ;; Auto vars:     Size  Location     Type
 21134 ;;		None
 21135 ;; Return value:  Size  Location     Type
 21136 ;;                  1    wreg      void 
 21137 ;; Registers used:
 21138 ;;		None
 21139 ;; Tracked objects:
 21140 ;;		On entry : 0/0
 21141 ;;		On exit  : 0/0
 21142 ;;		Unchanged: 0/0
 21143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21148 ;;Total ram usage:        0 bytes
 21149 ;; Hardware stack levels used:    1
 21150 ;; Hardware stack levels required when called:    7
 21151 ;; This function calls:
 21152 ;;		Nothing
 21153 ;; This function is called by:
 21154 ;;		_init
 21155 ;; This function uses a non-reentrant model
 21156 ;;
 21157                           
 21158                           	psect	text96
 21159  016EAA                     __ptext96:
 21160                           	opt stack 0
 21161  016EAA                     _ISR_Enable:
 21162                           	opt stack 22
 21163                           
 21164                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 21165                           
 21166                           ;incstack = 0
 21167  016EAA  8CF2               	bsf	intcon,6,c	;volatile
 21168                           
 21169                           ;ISR.c: 30: INTCONbits.GIE = 1;
 21170  016EAC  8EF2               	bsf	intcon,7,c	;volatile
 21171                           
 21172                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 21173  016EAE  88F2               	bsf	intcon,4,c	;volatile
 21174                           
 21175                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 21176  016EB0  92F2               	bcf	intcon,1,c	;volatile
 21177  016EB2  0012               	return		;funcret
 21178  016EB4                     __end_of_ISR_Enable:
 21179                           	opt stack 0
 21180                           tosu	equ	0xFFF
 21181                           tosh	equ	0xFFE
 21182                           tosl	equ	0xFFD
 21183                           pclath	equ	0xFFA
 21184                           tblptru	equ	0xFF8
 21185                           tblptrh	equ	0xFF7
 21186                           tblptrl	equ	0xFF6
 21187                           tablat	equ	0xFF5
 21188                           prodh	equ	0xFF4
 21189                           prodl	equ	0xFF3
 21190                           intcon	equ	0xFF2
 21191                           postinc0	equ	0xFEE
 21192                           wreg	equ	0xFE8
 21193                           indf1	equ	0xFE7
 21194                           postdec1	equ	0xFE5
 21195                           fsr1h	equ	0xFE2
 21196                           fsr1l	equ	0xFE1
 21197                           indf2	equ	0xFDF
 21198                           postinc2	equ	0xFDE
 21199                           postdec2	equ	0xFDD
 21200                           plusw2	equ	0xFDB
 21201                           fsr2h	equ	0xFDA
 21202                           fsr2l	equ	0xFD9
 21203                           status	equ	0xFD8
 21204                           
 21205 ;; *************** function _HMI_Init *****************
 21206 ;; Defined at:
 21207 ;;		line 104 in file "HMI.c"
 21208 ;; Parameters:    Size  Location     Type
 21209 ;;		None
 21210 ;; Auto vars:     Size  Location     Type
 21211 ;;  in              2   59[BANK0 ] unsigned short 
 21212 ;; Return value:  Size  Location     Type
 21213 ;;                  1    wreg      void 
 21214 ;; Registers used:
 21215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21216 ;; Tracked objects:
 21217 ;;		On entry : 0/0
 21218 ;;		On exit  : 0/0
 21219 ;;		Unchanged: 0/0
 21220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21225 ;;Total ram usage:        2 bytes
 21226 ;; Hardware stack levels used:    1
 21227 ;; Hardware stack levels required when called:   16
 21228 ;; This function calls:
 21229 ;;		_Button_Init
 21230 ;;		_SPI_Init
 21231 ;;		_SPI_MinSpeed
 21232 ;; This function is called by:
 21233 ;;		_init
 21234 ;; This function uses a non-reentrant model
 21235 ;;
 21236                           
 21237                           	psect	text97
 21238  0125E0                     __ptext97:
 21239                           	opt stack 0
 21240  0125E0                     _HMI_Init:
 21241                           	opt stack 13
 21242                           
 21243                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 21244                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 21245                           
 21246                           ;incstack = 0
 21247  0125E0  0E77               	movlw	low (_HMIBoard+48)
 21248  0125E2  0101               	movlb	1	; () banked
 21249  0125E4  6F00               	movwf	Button_Init@pInput& (0+255),b
 21250  0125E6  0E03               	movlw	high (_HMIBoard+48)
 21251  0125E8  0101               	movlb	1	; () banked
 21252  0125EA  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21253  0125EC  0E00               	movlw	0
 21254  0125EE  0101               	movlb	1	; () banked
 21255  0125F0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21256  0125F2  0E02               	movlw	2
 21257  0125F4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21258  0125F6  0EE4               	movlw	low _HMI_InitButtons
 21259  0125F8  0101               	movlb	1	; () banked
 21260  0125FA  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21261  0125FC  0E6E               	movlw	high _HMI_InitButtons
 21262  0125FE  0101               	movlb	1	; () banked
 21263  012600  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21264  012602  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21265  012604  0101               	movlb	1	; () banked
 21266  012606  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21267  012608  0E2C               	movlw	low _HMI_DIPSwitch
 21268  01260A  0101               	movlb	1	; () banked
 21269  01260C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21270  01260E  0E6D               	movlw	high _HMI_DIPSwitch
 21271  012610  0101               	movlb	1	; () banked
 21272  012612  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21273  012614  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 21274  012616  0101               	movlb	1	; () banked
 21275  012618  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21276  01261A  0E04               	movlw	low _Event_NULL
 21277  01261C  0101               	movlb	1	; () banked
 21278  01261E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21279  012620  0E14               	movlw	high _Event_NULL
 21280  012622  0101               	movlb	1	; () banked
 21281  012624  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21282  012626  0E00               	movlw	low (_Event_NULL shr (0+16))
 21283  012628  0101               	movlb	1	; () banked
 21284  01262A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21285  01262C  EC76  F0A2         	call	_Button_Init	;wreg free
 21286                           
 21287                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 21288                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 21289  012630  0E59               	movlw	low (_HMIBoard+18)
 21290  012632  0101               	movlb	1	; () banked
 21291  012634  6F00               	movwf	Button_Init@pInput& (0+255),b
 21292  012636  0E03               	movlw	high (_HMIBoard+18)
 21293  012638  0101               	movlb	1	; () banked
 21294  01263A  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21295  01263C  0E00               	movlw	0
 21296  01263E  0101               	movlb	1	; () banked
 21297  012640  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21298  012642  0E02               	movlw	2
 21299  012644  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21300  012646  0EE4               	movlw	low _HMI_InitButtons
 21301  012648  0101               	movlb	1	; () banked
 21302  01264A  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21303  01264C  0E6E               	movlw	high _HMI_InitButtons
 21304  01264E  0101               	movlb	1	; () banked
 21305  012650  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21306  012652  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21307  012654  0101               	movlb	1	; () banked
 21308  012656  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21309  012658  0E8C               	movlw	low _HMI_LeftSwitch
 21310  01265A  0101               	movlb	1	; () banked
 21311  01265C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21312  01265E  0E6D               	movlw	high _HMI_LeftSwitch
 21313  012660  0101               	movlb	1	; () banked
 21314  012662  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21315  012664  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 21316  012666  0101               	movlb	1	; () banked
 21317  012668  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21318  01266A  0E04               	movlw	low _Event_NULL
 21319  01266C  0101               	movlb	1	; () banked
 21320  01266E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21321  012670  0E14               	movlw	high _Event_NULL
 21322  012672  0101               	movlb	1	; () banked
 21323  012674  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21324  012676  0E00               	movlw	low (_Event_NULL shr (0+16))
 21325  012678  0101               	movlb	1	; () banked
 21326  01267A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21327  01267C  EC76  F0A2         	call	_Button_Init	;wreg free
 21328                           
 21329                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 21330                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 21331  012680  0E4F               	movlw	low (_HMIBoard+8)
 21332  012682  0101               	movlb	1	; () banked
 21333  012684  6F00               	movwf	Button_Init@pInput& (0+255),b
 21334  012686  0E03               	movlw	high (_HMIBoard+8)
 21335  012688  0101               	movlb	1	; () banked
 21336  01268A  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21337  01268C  0E00               	movlw	0
 21338  01268E  0101               	movlb	1	; () banked
 21339  012690  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21340  012692  0E02               	movlw	2
 21341  012694  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21342  012696  0EE4               	movlw	low _HMI_InitButtons
 21343  012698  0101               	movlb	1	; () banked
 21344  01269A  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21345  01269C  0E6E               	movlw	high _HMI_InitButtons
 21346  01269E  0101               	movlb	1	; () banked
 21347  0126A0  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21348  0126A2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21349  0126A4  0101               	movlb	1	; () banked
 21350  0126A6  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21351  0126A8  0E74               	movlw	low _HMI_RightSwitch
 21352  0126AA  0101               	movlb	1	; () banked
 21353  0126AC  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21354  0126AE  0E6D               	movlw	high _HMI_RightSwitch
 21355  0126B0  0101               	movlb	1	; () banked
 21356  0126B2  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21357  0126B4  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 21358  0126B6  0101               	movlb	1	; () banked
 21359  0126B8  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21360  0126BA  0E04               	movlw	low _Event_NULL
 21361  0126BC  0101               	movlb	1	; () banked
 21362  0126BE  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21363  0126C0  0E14               	movlw	high _Event_NULL
 21364  0126C2  0101               	movlb	1	; () banked
 21365  0126C4  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21366  0126C6  0E00               	movlw	low (_Event_NULL shr (0+16))
 21367  0126C8  0101               	movlb	1	; () banked
 21368  0126CA  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21369  0126CC  EC76  F0A2         	call	_Button_Init	;wreg free
 21370                           
 21371                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 21372                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 21373  0126D0  0E63               	movlw	low (_HMIBoard+28)
 21374  0126D2  0101               	movlb	1	; () banked
 21375  0126D4  6F00               	movwf	Button_Init@pInput& (0+255),b
 21376  0126D6  0E03               	movlw	high (_HMIBoard+28)
 21377  0126D8  0101               	movlb	1	; () banked
 21378  0126DA  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21379  0126DC  0E00               	movlw	0
 21380  0126DE  0101               	movlb	1	; () banked
 21381  0126E0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21382  0126E2  0E02               	movlw	2
 21383  0126E4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21384  0126E6  0EE4               	movlw	low _HMI_InitButtons
 21385  0126E8  0101               	movlb	1	; () banked
 21386  0126EA  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21387  0126EC  0E6E               	movlw	high _HMI_InitButtons
 21388  0126EE  0101               	movlb	1	; () banked
 21389  0126F0  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21390  0126F2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21391  0126F4  0101               	movlb	1	; () banked
 21392  0126F6  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21393  0126F8  0E5C               	movlw	low _HMI_UpSwitch
 21394  0126FA  0101               	movlb	1	; () banked
 21395  0126FC  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21396  0126FE  0E6D               	movlw	high _HMI_UpSwitch
 21397  012700  0101               	movlb	1	; () banked
 21398  012702  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21399  012704  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 21400  012706  0101               	movlb	1	; () banked
 21401  012708  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21402  01270A  0E04               	movlw	low _Event_NULL
 21403  01270C  0101               	movlb	1	; () banked
 21404  01270E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21405  012710  0E14               	movlw	high _Event_NULL
 21406  012712  0101               	movlb	1	; () banked
 21407  012714  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21408  012716  0E00               	movlw	low (_Event_NULL shr (0+16))
 21409  012718  0101               	movlb	1	; () banked
 21410  01271A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21411  01271C  EC76  F0A2         	call	_Button_Init	;wreg free
 21412                           
 21413                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 21414                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 21415  012720  0E6D               	movlw	low (_HMIBoard+38)
 21416  012722  0101               	movlb	1	; () banked
 21417  012724  6F00               	movwf	Button_Init@pInput& (0+255),b
 21418  012726  0E03               	movlw	high (_HMIBoard+38)
 21419  012728  0101               	movlb	1	; () banked
 21420  01272A  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21421  01272C  0E00               	movlw	0
 21422  01272E  0101               	movlb	1	; () banked
 21423  012730  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21424  012732  0E02               	movlw	2
 21425  012734  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21426  012736  0EE4               	movlw	low _HMI_InitButtons
 21427  012738  0101               	movlb	1	; () banked
 21428  01273A  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21429  01273C  0E6E               	movlw	high _HMI_InitButtons
 21430  01273E  0101               	movlb	1	; () banked
 21431  012740  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21432  012742  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21433  012744  0101               	movlb	1	; () banked
 21434  012746  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21435  012748  0E44               	movlw	low _HMI_DownSwitch
 21436  01274A  0101               	movlb	1	; () banked
 21437  01274C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21438  01274E  0E6D               	movlw	high _HMI_DownSwitch
 21439  012750  0101               	movlb	1	; () banked
 21440  012752  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21441  012754  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 21442  012756  0101               	movlb	1	; () banked
 21443  012758  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21444  01275A  0E04               	movlw	low _Event_NULL
 21445  01275C  0101               	movlb	1	; () banked
 21446  01275E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21447  012760  0E14               	movlw	high _Event_NULL
 21448  012762  0101               	movlb	1	; () banked
 21449  012764  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21450  012766  0E00               	movlw	low (_Event_NULL shr (0+16))
 21451  012768  0101               	movlb	1	; () banked
 21452  01276A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21453  01276C  EC76  F0A2         	call	_Button_Init	;wreg free
 21454                           
 21455                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 21456  012770  0EA0               	movlw	160
 21457  012772  0100               	movlb	0	; () banked
 21458  012774  6FE5               	movwf	SPI_Init@pClock& (0+255),b
 21459  012776  0E86               	movlw	134
 21460  012778  6FE6               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21461  01277A  0E01               	movlw	1
 21462  01277C  6FE7               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21463  01277E  0E00               	movlw	0
 21464  012780  6FE8               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21465  012782  0E00               	movlw	0
 21466  012784  0100               	movlb	0	; () banked
 21467  012786  6FE9               	movwf	SPI_Init@pChannel& (0+255),b
 21468  012788  0E02               	movlw	2
 21469  01278A  0100               	movlb	0	; () banked
 21470  01278C  6FEA               	movwf	SPI_Init@pMode& (0+255),b
 21471  01278E  ECAD  F086         	call	_SPI_Init	;wreg free
 21472                           
 21473                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 21474  012792  0E81               	movlw	low _SPI1
 21475  012794  0100               	movlb	0	; () banked
 21476  012796  6FC7               	movwf	SPI_MinSpeed@pInput& (0+255),b
 21477  012798  0E03               	movlw	high _SPI1
 21478  01279A  0100               	movlb	0	; () banked
 21479  01279C  6FC8               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 21480  01279E  ECC2  F0AD         	call	_SPI_MinSpeed	;wreg free
 21481                           
 21482                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 21483  0127A2  0E00               	movlw	0
 21484  0127A4  0100               	movlb	0	; () banked
 21485  0127A6  6FF4               	movwf	(HMI_Init@in+1)& (0+255),b
 21486  0127A8  0E00               	movlw	0
 21487  0127AA  6FF3               	movwf	HMI_Init@in& (0+255),b
 21488  0127AC                     l14868:
 21489                           
 21490                           ; BSR set to: 0
 21491  0127AC  0100               	movlb	0	; () banked
 21492  0127AE  51F4               	movf	(HMI_Init@in+1)& (0+255),w,b
 21493  0127B0  E113               	bnz	l1153
 21494  0127B2  0E08               	movlw	8
 21495  0127B4  0100               	movlb	0	; () banked
 21496  0127B6  5DF3               	subwf	HMI_Init@in& (0+255),w,b
 21497  0127B8  B0D8               	btfsc	status,0,c
 21498  0127BA  0012               	return	
 21499                           
 21500                           ; BSR set to: 0
 21501                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 21502                           
 21503                           ; BSR set to: 0
 21504                           
 21505                           ; BSR set to: 0
 21506  0127BC  0E47               	movlw	low _HMIBoard
 21507  0127BE  0100               	movlb	0	; () banked
 21508  0127C0  25F3               	addwf	HMI_Init@in& (0+255),w,b
 21509  0127C2  6ED9               	movwf	fsr2l,c
 21510  0127C4  0E03               	movlw	high _HMIBoard
 21511  0127C6  0100               	movlb	0	; () banked
 21512  0127C8  21F4               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 21513  0127CA  6EDA               	movwf	fsr2h,c
 21514  0127CC  0E00               	movlw	0
 21515  0127CE  6EDF               	movwf	indf2,c
 21516                           
 21517                           ; BSR set to: 0
 21518  0127D0  0100               	movlb	0	; () banked
 21519  0127D2  4BF3               	infsnz	HMI_Init@in& (0+255),f,b
 21520  0127D4  2BF4               	incf	(HMI_Init@in+1)& (0+255),f,b
 21521  0127D6  D7EA               	goto	l14868
 21522  0127D8                     l1153:
 21523                           
 21524                           ; BSR set to: 0
 21525  0127D8  0012               	return		;funcret
 21526  0127DA                     __end_of_HMI_Init:
 21527                           	opt stack 0
 21528                           tosu	equ	0xFFF
 21529                           tosh	equ	0xFFE
 21530                           tosl	equ	0xFFD
 21531                           pclath	equ	0xFFA
 21532                           tblptru	equ	0xFF8
 21533                           tblptrh	equ	0xFF7
 21534                           tblptrl	equ	0xFF6
 21535                           tablat	equ	0xFF5
 21536                           prodh	equ	0xFF4
 21537                           prodl	equ	0xFF3
 21538                           intcon	equ	0xFF2
 21539                           postinc0	equ	0xFEE
 21540                           wreg	equ	0xFE8
 21541                           indf1	equ	0xFE7
 21542                           postdec1	equ	0xFE5
 21543                           fsr1h	equ	0xFE2
 21544                           fsr1l	equ	0xFE1
 21545                           indf2	equ	0xFDF
 21546                           postinc2	equ	0xFDE
 21547                           postdec2	equ	0xFDD
 21548                           plusw2	equ	0xFDB
 21549                           fsr2h	equ	0xFDA
 21550                           fsr2l	equ	0xFD9
 21551                           status	equ	0xFD8
 21552                           
 21553 ;; *************** function _SPI_MinSpeed *****************
 21554 ;; Defined at:
 21555 ;;		line 190 in file "Library/SPI.c"
 21556 ;; Parameters:    Size  Location     Type
 21557 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21558 ;;		 -> SPI1(11), 
 21559 ;; Auto vars:     Size  Location     Type
 21560 ;;		None
 21561 ;; Return value:  Size  Location     Type
 21562 ;;                  1    wreg      void 
 21563 ;; Registers used:
 21564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21565 ;; Tracked objects:
 21566 ;;		On entry : 0/0
 21567 ;;		On exit  : 0/0
 21568 ;;		Unchanged: 0/0
 21569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21570 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21574 ;;Total ram usage:        2 bytes
 21575 ;; Hardware stack levels used:    1
 21576 ;; Hardware stack levels required when called:    9
 21577 ;; This function calls:
 21578 ;;		_Byte_SetBit
 21579 ;;		_Byte_SetQuad
 21580 ;; This function is called by:
 21581 ;;		_HMI_Init
 21582 ;; This function uses a non-reentrant model
 21583 ;;
 21584                           
 21585                           	psect	text98
 21586  015B84                     __ptext98:
 21587                           	opt stack 0
 21588  015B84                     _SPI_MinSpeed:
 21589                           	opt stack 19
 21590                           
 21591                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;incstack = 0
 21595  015B84  0100               	movlb	0	; () banked
 21596  015B86  EE20 F006          	lfsr	2,6
 21597  015B8A  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21598  015B8C  26D9               	addwf	fsr2l,f,c
 21599  015B8E  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21600  015B90  22DA               	addwfc	fsr2h,f,c
 21601  015B92  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21602  015B96  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21603  015B9A  0E05               	movlw	5
 21604  015B9C  0100               	movlb	0	; () banked
 21605  015B9E  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 21606  015BA0  0E00               	movlw	0
 21607  015BA2  0100               	movlb	0	; () banked
 21608  015BA4  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21609  015BA6  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 21610                           
 21611                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 21612  015BAA  0100               	movlb	0	; () banked
 21613  015BAC  EE20 F006          	lfsr	2,6
 21614  015BB0  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21615  015BB2  26D9               	addwf	fsr2l,f,c
 21616  015BB4  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21617  015BB6  22DA               	addwfc	fsr2h,f,c
 21618  015BB8  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21619  015BBC  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21620  015BC0  0E00               	movlw	0
 21621  015BC2  0100               	movlb	0	; () banked
 21622  015BC4  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21623  015BC6  0E02               	movlw	2
 21624  015BC8  0100               	movlb	0	; () banked
 21625  015BCA  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21626  015BCC  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 21627                           
 21628                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21629  015BD0  0100               	movlb	0	; () banked
 21630  015BD2  EE20 F006          	lfsr	2,6
 21631  015BD6  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21632  015BD8  26D9               	addwf	fsr2l,f,c
 21633  015BDA  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21634  015BDC  22DA               	addwfc	fsr2h,f,c
 21635  015BDE  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21636  015BE2  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21637  015BE6  0E05               	movlw	5
 21638  015BE8  0100               	movlb	0	; () banked
 21639  015BEA  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 21640  015BEC  0E01               	movlw	1
 21641  015BEE  0100               	movlb	0	; () banked
 21642  015BF0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21643  015BF2  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 21644  015BF6  0012               	return		;funcret
 21645  015BF8                     __end_of_SPI_MinSpeed:
 21646                           	opt stack 0
 21647                           tosu	equ	0xFFF
 21648                           tosh	equ	0xFFE
 21649                           tosl	equ	0xFFD
 21650                           pclath	equ	0xFFA
 21651                           tblptru	equ	0xFF8
 21652                           tblptrh	equ	0xFF7
 21653                           tblptrl	equ	0xFF6
 21654                           tablat	equ	0xFF5
 21655                           prodh	equ	0xFF4
 21656                           prodl	equ	0xFF3
 21657                           intcon	equ	0xFF2
 21658                           postinc0	equ	0xFEE
 21659                           wreg	equ	0xFE8
 21660                           indf1	equ	0xFE7
 21661                           postdec1	equ	0xFE5
 21662                           fsr1h	equ	0xFE2
 21663                           fsr1l	equ	0xFE1
 21664                           indf2	equ	0xFDF
 21665                           postinc2	equ	0xFDE
 21666                           postdec2	equ	0xFDD
 21667                           plusw2	equ	0xFDB
 21668                           fsr2h	equ	0xFDA
 21669                           fsr2l	equ	0xFD9
 21670                           status	equ	0xFD8
 21671                           
 21672 ;; *************** function _SPI_Init *****************
 21673 ;; Defined at:
 21674 ;;		line 12 in file "Library/SPI.c"
 21675 ;; Parameters:    Size  Location     Type
 21676 ;;  pClock          4   45[BANK0 ] unsigned long 
 21677 ;;  pChannel        1   49[BANK0 ] enum E6744
 21678 ;;  pMode           1   50[BANK0 ] enum E6748
 21679 ;; Auto vars:     Size  Location     Type
 21680 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 21681 ;;		 -> SPI1(11), SPI2(11), 
 21682 ;; Return value:  Size  Location     Type
 21683 ;;                  1    wreg      void 
 21684 ;; Registers used:
 21685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21686 ;; Tracked objects:
 21687 ;;		On entry : 0/0
 21688 ;;		On exit  : 0/0
 21689 ;;		Unchanged: 0/0
 21690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21691 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;Total ram usage:        8 bytes
 21696 ;; Hardware stack levels used:    1
 21697 ;; Hardware stack levels required when called:   12
 21698 ;; This function calls:
 21699 ;;		_Byte_SetBit
 21700 ;;		_Byte_SetQuad
 21701 ;;		_Port_SetPinType
 21702 ;;		_SPI_DCS
 21703 ;;		_SPI_DisableISR
 21704 ;;		_Timer2_Init
 21705 ;; This function is called by:
 21706 ;;		_Configure_GPIOs
 21707 ;;		_HMI_Init
 21708 ;; This function uses a non-reentrant model
 21709 ;;
 21710                           
 21711                           	psect	text99
 21712  010D5A                     __ptext99:
 21713                           	opt stack 0
 21714  010D5A                     _SPI_Init:
 21715                           	opt stack 15
 21716                           
 21717                           ;SPI.c: 14: SPIPtr pInput;
 21718                           ;SPI.c: 16: switch (pChannel)
 21719                           
 21720                           ;incstack = 0
 21721  010D5A  D00C               	goto	l597
 21722  010D5C                     
 21723                           ;SPI.c: 19: pInput = &SPI1;
 21724  010D5C  0E81               	movlw	low _SPI1
 21725  010D5E  0100               	movlb	0	; () banked
 21726  010D60  6FEB               	movwf	SPI_Init@pInput& (0+255),b
 21727  010D62  0E03               	movlw	high _SPI1
 21728  010D64  D004               	goto	L13
 21729  010D66                     
 21730                           ; BSR set to: 0
 21731                           ;SPI.c: 22: pInput = &SPI2;
 21732                           
 21733                           ; BSR set to: 0
 21734  010D66  0E8C               	movlw	low _SPI2
 21735  010D68  0100               	movlb	0	; () banked
 21736  010D6A  6FEB               	movwf	SPI_Init@pInput& (0+255),b
 21737  010D6C  0E03               	movlw	high _SPI2
 21738  010D6E                     L13:
 21739  010D6E  0100               	movlb	0	; () banked
 21740  010D70  6FEC               	movwf	(SPI_Init@pInput+1)& (0+255),b
 21741                           
 21742                           ; BSR set to: 0
 21743                           ;SPI.c: 24: };
 21744                           
 21745                           ;SPI.c: 23: break;
 21746  010D72  D008               	goto	l599
 21747  010D74                     l597:
 21748                           
 21749                           ; BSR set to: 0
 21750  010D74  0100               	movlb	0	; () banked
 21751  010D76  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 21752                           
 21753                           ; Switch size 1, requested type "space"
 21754                           ; Number of cases is 2, Range of values is 0 to 1
 21755                           ; switch strategies available:
 21756                           ; Name         Instructions Cycles
 21757                           ; simple_byte            7     4 (average)
 21758                           ;	Chosen strategy is simple_byte
 21759  010D78  0A00               	xorlw	0	; case 0
 21760  010D7A  B4D8               	btfsc	status,2,c
 21761  010D7C  D7EF               	goto	l598
 21762  010D7E  0A01               	xorlw	1	; case 1
 21763  010D80  B4D8               	btfsc	status,2,c
 21764  010D82  D7F1               	goto	l600
 21765  010D84                     l599:
 21766                           
 21767                           ; BSR set to: 0
 21768                           ;SPI.c: 26: pInput->mChannel = pChannel;
 21769                           
 21770                           ; BSR set to: 0
 21771  010D84  0100               	movlb	0	; () banked
 21772  010D86  EE20 F002          	lfsr	2,2
 21773  010D8A  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21774  010D8C  26D9               	addwf	fsr2l,f,c
 21775  010D8E  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21776  010D90  22DA               	addwfc	fsr2h,f,c
 21777  010D92  C0E9  FFDF         	movff	SPI_Init@pChannel,indf2
 21778                           
 21779                           ;SPI.c: 35: switch (pChannel)
 21780  010D96  D0B1               	goto	l601
 21781  010D98                     
 21782                           ; BSR set to: 0
 21783                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 21784                           
 21785                           ; BSR set to: 0
 21786  010D98  0EA3               	movlw	low _PortC
 21787  010D9A  0100               	movlb	0	; () banked
 21788  010D9C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21789  010D9E  0E00               	movlw	high _PortC
 21790  010DA0  0100               	movlb	0	; () banked
 21791  010DA2  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21792  010DA4  0E02               	movlw	2
 21793  010DA6  0100               	movlb	0	; () banked
 21794  010DA8  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21795  010DAA  0E03               	movlw	3
 21796  010DAC  0100               	movlb	0	; () banked
 21797  010DAE  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21798  010DB0  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21799                           
 21800                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 21801  010DB4  0EA3               	movlw	low _PortC
 21802  010DB6  0100               	movlb	0	; () banked
 21803  010DB8  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21804  010DBA  0E00               	movlw	high _PortC
 21805  010DBC  0100               	movlb	0	; () banked
 21806  010DBE  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21807  010DC0  0E03               	movlw	3
 21808  010DC2  0100               	movlb	0	; () banked
 21809  010DC4  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21810  010DC6  0E03               	movlw	3
 21811  010DC8  0100               	movlb	0	; () banked
 21812  010DCA  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21813  010DCC  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21814                           
 21815                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 21816  010DD0  0EA3               	movlw	low _PortC
 21817  010DD2  0100               	movlb	0	; () banked
 21818  010DD4  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21819  010DD6  0E00               	movlw	high _PortC
 21820  010DD8  0100               	movlb	0	; () banked
 21821  010DDA  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21822  010DDC  0E05               	movlw	5
 21823  010DDE  0100               	movlb	0	; () banked
 21824  010DE0  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21825  010DE2  0E03               	movlw	3
 21826  010DE4  0100               	movlb	0	; () banked
 21827  010DE6  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21828  010DE8  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21829                           
 21830                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 21831  010DEC  0EA3               	movlw	low _PortC
 21832  010DEE  0100               	movlb	0	; () banked
 21833  010DF0  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21834  010DF2  0E00               	movlw	high _PortC
 21835  010DF4  0100               	movlb	0	; () banked
 21836  010DF6  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21837  010DF8  0E04               	movlw	4
 21838  010DFA  0100               	movlb	0	; () banked
 21839  010DFC  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21840  010DFE  0E00               	movlw	0
 21841  010E00  0100               	movlb	0	; () banked
 21842  010E02  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21843  010E04  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21844                           
 21845                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 21846  010E08  0100               	movlb	0	; () banked
 21847  010E0A  EE20 F003          	lfsr	2,3
 21848  010E0E  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21849  010E10  26D9               	addwf	fsr2l,f,c
 21850  010E12  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21851  010E14  22DA               	addwfc	fsr2h,f,c
 21852  010E16  0EC7               	movlw	199
 21853  010E18  6EDE               	movwf	postinc2,c
 21854  010E1A  0E0F               	movlw	15
 21855  010E1C  6EDD               	movwf	postdec2,c
 21856                           
 21857                           ; BSR set to: 0
 21858                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 21859  010E1E  0100               	movlb	0	; () banked
 21860  010E20  EE20 F006          	lfsr	2,6
 21861  010E24  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21862  010E26  26D9               	addwf	fsr2l,f,c
 21863  010E28  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21864  010E2A  22DA               	addwfc	fsr2h,f,c
 21865  010E2C  0EC6               	movlw	198
 21866  010E2E  6EDE               	movwf	postinc2,c
 21867  010E30  0E0F               	movlw	15
 21868  010E32  6EDD               	movwf	postdec2,c
 21869                           
 21870                           ; BSR set to: 0
 21871                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 21872  010E34  0100               	movlb	0	; () banked
 21873  010E36  EE20 F009          	lfsr	2,9
 21874  010E3A  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21875  010E3C  26D9               	addwf	fsr2l,f,c
 21876  010E3E  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21877  010E40  22DA               	addwfc	fsr2h,f,c
 21878  010E42  0EC9               	movlw	201
 21879  010E44  D056               	goto	L14
 21880  010E46                     
 21881                           ; BSR set to: 0
 21882                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 21883                           
 21884                           ; BSR set to: 0
 21885  010E46  0E99               	movlw	low _PortD
 21886  010E48  0100               	movlb	0	; () banked
 21887  010E4A  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21888  010E4C  0E00               	movlw	high _PortD
 21889  010E4E  0100               	movlb	0	; () banked
 21890  010E50  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21891  010E52  0E07               	movlw	7
 21892  010E54  0100               	movlb	0	; () banked
 21893  010E56  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21894  010E58  0E03               	movlw	3
 21895  010E5A  0100               	movlb	0	; () banked
 21896  010E5C  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21897  010E5E  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21898                           
 21899                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 21900  010E62  0E99               	movlw	low _PortD
 21901  010E64  0100               	movlb	0	; () banked
 21902  010E66  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21903  010E68  0E00               	movlw	high _PortD
 21904  010E6A  0100               	movlb	0	; () banked
 21905  010E6C  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21906  010E6E  0E06               	movlw	6
 21907  010E70  0100               	movlb	0	; () banked
 21908  010E72  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21909  010E74  0E03               	movlw	3
 21910  010E76  0100               	movlb	0	; () banked
 21911  010E78  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21912  010E7A  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21913                           
 21914                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 21915  010E7E  0E99               	movlw	low _PortD
 21916  010E80  0100               	movlb	0	; () banked
 21917  010E82  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21918  010E84  0E00               	movlw	high _PortD
 21919  010E86  0100               	movlb	0	; () banked
 21920  010E88  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21921  010E8A  0E04               	movlw	4
 21922  010E8C  0100               	movlb	0	; () banked
 21923  010E8E  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21924  010E90  0E03               	movlw	3
 21925  010E92  0100               	movlb	0	; () banked
 21926  010E94  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21927  010E96  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21928                           
 21929                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 21930  010E9A  0E99               	movlw	low _PortD
 21931  010E9C  0100               	movlb	0	; () banked
 21932  010E9E  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 21933  010EA0  0E00               	movlw	high _PortD
 21934  010EA2  0100               	movlb	0	; () banked
 21935  010EA4  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21936  010EA6  0E05               	movlw	5
 21937  010EA8  0100               	movlb	0	; () banked
 21938  010EAA  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 21939  010EAC  0E00               	movlw	0
 21940  010EAE  0100               	movlb	0	; () banked
 21941  010EB0  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 21942  010EB2  ECB5  F095         	call	_Port_SetPinType	;wreg free
 21943                           
 21944                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 21945  010EB6  0100               	movlb	0	; () banked
 21946  010EB8  EE20 F003          	lfsr	2,3
 21947  010EBC  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21948  010EBE  26D9               	addwf	fsr2l,f,c
 21949  010EC0  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21950  010EC2  22DA               	addwfc	fsr2h,f,c
 21951  010EC4  0E6D               	movlw	109
 21952  010EC6  6EDE               	movwf	postinc2,c
 21953  010EC8  0E0F               	movlw	15
 21954  010ECA  6EDD               	movwf	postdec2,c
 21955                           
 21956                           ; BSR set to: 0
 21957                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 21958  010ECC  0100               	movlb	0	; () banked
 21959  010ECE  EE20 F006          	lfsr	2,6
 21960  010ED2  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21961  010ED4  26D9               	addwf	fsr2l,f,c
 21962  010ED6  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21963  010ED8  22DA               	addwfc	fsr2h,f,c
 21964  010EDA  0E6C               	movlw	108
 21965  010EDC  6EDE               	movwf	postinc2,c
 21966  010EDE  0E0F               	movlw	15
 21967  010EE0  6EDD               	movwf	postdec2,c
 21968                           
 21969                           ; BSR set to: 0
 21970                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 21971  010EE2  0100               	movlb	0	; () banked
 21972  010EE4  EE20 F009          	lfsr	2,9
 21973  010EE8  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 21974  010EEA  26D9               	addwf	fsr2l,f,c
 21975  010EEC  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21976  010EEE  22DA               	addwfc	fsr2h,f,c
 21977  010EF0  0E6F               	movlw	111
 21978  010EF2                     L14:
 21979  010EF2  6EDE               	movwf	postinc2,c
 21980  010EF4  0E0F               	movlw	15
 21981  010EF6  6EDD               	movwf	postdec2,c
 21982                           
 21983                           ;SPI.c: 68: break;
 21984  010EF8  D009               	goto	l603
 21985  010EFA                     l601:
 21986                           
 21987                           ; BSR set to: 0
 21988                           
 21989                           ; BSR set to: 0
 21990  010EFA  0100               	movlb	0	; () banked
 21991  010EFC  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 21992                           
 21993                           ; Switch size 1, requested type "space"
 21994                           ; Number of cases is 2, Range of values is 0 to 1
 21995                           ; switch strategies available:
 21996                           ; Name         Instructions Cycles
 21997                           ; simple_byte            7     4 (average)
 21998                           ;	Chosen strategy is simple_byte
 21999  010EFE  0A00               	xorlw	0	; case 0
 22000  010F00  B4D8               	btfsc	status,2,c
 22001  010F02  D74A               	goto	l602
 22002  010F04  0A01               	xorlw	1	; case 1
 22003  010F06  A4D8               	btfss	status,2,c
 22004  010F08  0012               	return	
 22005  010F0A  D79D               	goto	l604
 22006  010F0C                     l603:
 22007                           
 22008                           ; BSR set to: 0
 22009                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22010                           
 22011                           ; BSR set to: 0
 22012  010F0C  0100               	movlb	0	; () banked
 22013  010F0E  EE20 F006          	lfsr	2,6
 22014  010F12  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22015  010F14  26D9               	addwf	fsr2l,f,c
 22016  010F16  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22017  010F18  22DA               	addwfc	fsr2h,f,c
 22018  010F1A  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22019  010F1E  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22020  010F22  0E05               	movlw	5
 22021  010F24  0100               	movlb	0	; () banked
 22022  010F26  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22023  010F28  0E00               	movlw	0
 22024  010F2A  0100               	movlb	0	; () banked
 22025  010F2C  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22026  010F2E  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22027                           
 22028                           ;SPI.c: 77: switch(pMode)
 22029  010F32  D09C               	goto	l607
 22030  010F34                     
 22031                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22032  010F34  0100               	movlb	0	; () banked
 22033  010F36  EE20 F006          	lfsr	2,6
 22034  010F3A  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22035  010F3C  26D9               	addwf	fsr2l,f,c
 22036  010F3E  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22037  010F40  22DA               	addwfc	fsr2h,f,c
 22038  010F42  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22039  010F46  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22040  010F4A  0E04               	movlw	4
 22041  010F4C  0100               	movlb	0	; () banked
 22042  010F4E  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22043  010F50  0E00               	movlw	0
 22044  010F52  0100               	movlb	0	; () banked
 22045  010F54  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22046  010F56  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22047                           
 22048                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22049  010F5A  0100               	movlb	0	; () banked
 22050  010F5C  EE20 F003          	lfsr	2,3
 22051  010F60  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22052  010F62  26D9               	addwf	fsr2l,f,c
 22053  010F64  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22054  010F66  22DA               	addwfc	fsr2h,f,c
 22055  010F68  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22056  010F6C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22057  010F70  0E06               	movlw	6
 22058  010F72  0100               	movlb	0	; () banked
 22059  010F74  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22060  010F76  0E00               	movlw	0
 22061  010F78  0100               	movlb	0	; () banked
 22062  010F7A  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22063  010F7C  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22064                           
 22065                           ;SPI.c: 82: break;
 22066  010F80  D084               	goto	l609
 22067  010F82                     
 22068                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22069  010F82  0100               	movlb	0	; () banked
 22070  010F84  EE20 F006          	lfsr	2,6
 22071  010F88  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22072  010F8A  26D9               	addwf	fsr2l,f,c
 22073  010F8C  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22074  010F8E  22DA               	addwfc	fsr2h,f,c
 22075  010F90  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22076  010F94  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22077  010F98  0E04               	movlw	4
 22078  010F9A  0100               	movlb	0	; () banked
 22079  010F9C  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22080  010F9E  0E00               	movlw	0
 22081  010FA0  0100               	movlb	0	; () banked
 22082  010FA2  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22083  010FA4  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22084                           
 22085                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22086  010FA8  0100               	movlb	0	; () banked
 22087  010FAA  EE20 F003          	lfsr	2,3
 22088  010FAE  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22089  010FB0  26D9               	addwf	fsr2l,f,c
 22090  010FB2  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22091  010FB4  22DA               	addwfc	fsr2h,f,c
 22092  010FB6  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22093  010FBA  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22094  010FBE  0E06               	movlw	6
 22095  010FC0  0100               	movlb	0	; () banked
 22096  010FC2  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22097  010FC4  0E01               	movlw	1
 22098  010FC6  0100               	movlb	0	; () banked
 22099  010FC8  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22100  010FCA  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22101                           
 22102                           ;SPI.c: 86: break;
 22103  010FCE  D05D               	goto	l609
 22104  010FD0                     
 22105                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22106  010FD0  0100               	movlb	0	; () banked
 22107  010FD2  EE20 F006          	lfsr	2,6
 22108  010FD6  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22109  010FD8  26D9               	addwf	fsr2l,f,c
 22110  010FDA  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22111  010FDC  22DA               	addwfc	fsr2h,f,c
 22112  010FDE  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22113  010FE2  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22114  010FE6  0E04               	movlw	4
 22115  010FE8  0100               	movlb	0	; () banked
 22116  010FEA  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22117  010FEC  0E01               	movlw	1
 22118  010FEE  0100               	movlb	0	; () banked
 22119  010FF0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22120  010FF2  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22121                           
 22122                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22123  010FF6  0100               	movlb	0	; () banked
 22124  010FF8  EE20 F003          	lfsr	2,3
 22125  010FFC  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22126  010FFE  26D9               	addwf	fsr2l,f,c
 22127  011000  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22128  011002  22DA               	addwfc	fsr2h,f,c
 22129  011004  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22130  011008  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22131  01100C  0E06               	movlw	6
 22132  01100E  0100               	movlb	0	; () banked
 22133  011010  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22134  011012  0E00               	movlw	0
 22135  011014  0100               	movlb	0	; () banked
 22136  011016  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22137  011018  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22138                           
 22139                           ;SPI.c: 90: break;
 22140  01101C  D036               	goto	l609
 22141  01101E                     
 22142                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22143  01101E  0100               	movlb	0	; () banked
 22144  011020  EE20 F006          	lfsr	2,6
 22145  011024  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22146  011026  26D9               	addwf	fsr2l,f,c
 22147  011028  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22148  01102A  22DA               	addwfc	fsr2h,f,c
 22149  01102C  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22150  011030  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22151  011034  0E04               	movlw	4
 22152  011036  0100               	movlb	0	; () banked
 22153  011038  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22154  01103A  0E01               	movlw	1
 22155  01103C  0100               	movlb	0	; () banked
 22156  01103E  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22157  011040  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22158                           
 22159                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22160  011044  0100               	movlb	0	; () banked
 22161  011046  EE20 F003          	lfsr	2,3
 22162  01104A  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22163  01104C  26D9               	addwf	fsr2l,f,c
 22164  01104E  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22165  011050  22DA               	addwfc	fsr2h,f,c
 22166  011052  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22167  011056  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22168  01105A  0E06               	movlw	6
 22169  01105C  0100               	movlb	0	; () banked
 22170  01105E  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22171  011060  0E01               	movlw	1
 22172  011062  0100               	movlb	0	; () banked
 22173  011064  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22174  011066  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22175                           
 22176                           ;SPI.c: 94: break;
 22177  01106A  D00F               	goto	l609
 22178  01106C                     l607:
 22179  01106C  0100               	movlb	0	; () banked
 22180  01106E  51EA               	movf	SPI_Init@pMode& (0+255),w,b
 22181                           
 22182                           ; Switch size 1, requested type "space"
 22183                           ; Number of cases is 4, Range of values is 0 to 3
 22184                           ; switch strategies available:
 22185                           ; Name         Instructions Cycles
 22186                           ; simple_byte           13     7 (average)
 22187                           ;	Chosen strategy is simple_byte
 22188  011070  0A00               	xorlw	0	; case 0
 22189  011072  B4D8               	btfsc	status,2,c
 22190  011074  D75F               	goto	l608
 22191  011076  0A01               	xorlw	1	; case 1
 22192  011078  B4D8               	btfsc	status,2,c
 22193  01107A  D783               	goto	l610
 22194  01107C  0A03               	xorlw	3	; case 2
 22195  01107E  B4D8               	btfsc	status,2,c
 22196  011080  D7A7               	goto	l611
 22197  011082  0A01               	xorlw	1	; case 3
 22198  011084  A4D8               	btfss	status,2,c
 22199  011086  0012               	return	
 22200  011088  D7CA               	goto	l612
 22201  01108A                     l609:
 22202                           
 22203                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 22204                           
 22205                           ; BSR set to: 0
 22206  01108A  0100               	movlb	0	; () banked
 22207  01108C  EE20 F006          	lfsr	2,6
 22208  011090  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22209  011092  26D9               	addwf	fsr2l,f,c
 22210  011094  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22211  011096  22DA               	addwfc	fsr2h,f,c
 22212  011098  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22213  01109C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22214  0110A0  0E07               	movlw	7
 22215  0110A2  0100               	movlb	0	; () banked
 22216  0110A4  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22217  0110A6  0E00               	movlw	0
 22218  0110A8  0100               	movlb	0	; () banked
 22219  0110AA  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22220  0110AC  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22221                           
 22222                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 22223  0110B0  0100               	movlb	0	; () banked
 22224  0110B2  EE20 F006          	lfsr	2,6
 22225  0110B6  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22226  0110B8  26D9               	addwf	fsr2l,f,c
 22227  0110BA  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22228  0110BC  22DA               	addwfc	fsr2h,f,c
 22229  0110BE  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22230  0110C2  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22231  0110C6  0E06               	movlw	6
 22232  0110C8  0100               	movlb	0	; () banked
 22233  0110CA  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22234  0110CC  0E00               	movlw	0
 22235  0110CE  0100               	movlb	0	; () banked
 22236  0110D0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22237  0110D2  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22238                           
 22239                           ;SPI.c: 106: Timer2_Init(pClock);
 22240  0110D6  C0E5  F0C5         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 22241  0110DA  C0E6  F0C6         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 22242  0110DE  C0E7  F0C7         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 22243  0110E2  C0E8  F0C8         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 22244  0110E6  EC8C  F09C         	call	_Timer2_Init	;wreg free
 22245                           
 22246                           ;SPI.c: 112: SPI_DisableISR(pInput);
 22247  0110EA  C0EB  F0B8         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 22248  0110EE  C0EC  F0B9         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 22249  0110F2  EC65  F0B5         	call	_SPI_DisableISR	;wreg free
 22250                           
 22251                           ;SPI.c: 116: switch (pChannel)
 22252  0110F6  D004               	goto	l614
 22253  0110F8                     l615:
 22254                           
 22255                           ; BSR set to: 0
 22256  0110F8  869F               	bsf	3999,3,c	;volatile
 22257  0110FA  D00B               	goto	l616
 22258  0110FC                     l617:
 22259                           
 22260                           ; BSR set to: 0
 22261  0110FC  8EA5               	bsf	4005,7,c	;volatile
 22262  0110FE  D009               	goto	l616
 22263  011100                     l614:
 22264                           
 22265                           ; BSR set to: 0
 22266  011100  0100               	movlb	0	; () banked
 22267  011102  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 22268                           
 22269                           ; Switch size 1, requested type "space"
 22270                           ; Number of cases is 2, Range of values is 0 to 1
 22271                           ; switch strategies available:
 22272                           ; Name         Instructions Cycles
 22273                           ; simple_byte            7     4 (average)
 22274                           ;	Chosen strategy is simple_byte
 22275  011104  0A00               	xorlw	0	; case 0
 22276  011106  B4D8               	btfsc	status,2,c
 22277  011108  D7F7               	goto	l615
 22278  01110A  0A01               	xorlw	1	; case 1
 22279  01110C  A4D8               	btfss	status,2,c
 22280  01110E  0012               	return	
 22281  011110  D7F5               	goto	l617
 22282  011112                     l616:
 22283                           
 22284                           ; BSR set to: 0
 22285                           ;SPI.c: 124: SPI_DCS(pInput);
 22286                           
 22287                           ; BSR set to: 0
 22288  011112  C0EB  F0B8         	movff	SPI_Init@pInput,SPI_DCS@pInput
 22289  011116  C0EC  F0B9         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 22290  01111A  ECC5  F0B4         	call	_SPI_DCS	;wreg free
 22291                           
 22292                           ;SPI.c: 126: pInput->mBusy = 0;
 22293  01111E  C0EB  FFD9         	movff	SPI_Init@pInput,fsr2l
 22294  011122  C0EC  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 22295  011126  0E00               	movlw	0
 22296  011128  6EDF               	movwf	indf2,c
 22297                           
 22298                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 22299  01112A  0100               	movlb	0	; () banked
 22300  01112C  EE20 F006          	lfsr	2,6
 22301  011130  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22302  011132  26D9               	addwf	fsr2l,f,c
 22303  011134  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22304  011136  22DA               	addwfc	fsr2h,f,c
 22305  011138  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 22306  01113C  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 22307  011140  0E00               	movlw	0
 22308  011142  0100               	movlb	0	; () banked
 22309  011144  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22310  011146  0E03               	movlw	3
 22311  011148  0100               	movlb	0	; () banked
 22312  01114A  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 22313  01114C  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 22314                           
 22315                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22316  011150  0100               	movlb	0	; () banked
 22317  011152  EE20 F006          	lfsr	2,6
 22318  011156  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 22319  011158  26D9               	addwf	fsr2l,f,c
 22320  01115A  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22321  01115C  22DA               	addwfc	fsr2h,f,c
 22322  01115E  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 22323  011162  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 22324  011166  0E05               	movlw	5
 22325  011168  0100               	movlb	0	; () banked
 22326  01116A  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 22327  01116C  0E01               	movlw	1
 22328  01116E  0100               	movlb	0	; () banked
 22329  011170  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 22330  011172  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 22331  011176  0012               	return		;funcret
 22332  011178                     __end_of_SPI_Init:
 22333                           	opt stack 0
 22334                           tosu	equ	0xFFF
 22335                           tosh	equ	0xFFE
 22336                           tosl	equ	0xFFD
 22337                           pclath	equ	0xFFA
 22338                           tblptru	equ	0xFF8
 22339                           tblptrh	equ	0xFF7
 22340                           tblptrl	equ	0xFF6
 22341                           tablat	equ	0xFF5
 22342                           prodh	equ	0xFF4
 22343                           prodl	equ	0xFF3
 22344                           intcon	equ	0xFF2
 22345                           postinc0	equ	0xFEE
 22346                           wreg	equ	0xFE8
 22347                           indf1	equ	0xFE7
 22348                           postdec1	equ	0xFE5
 22349                           fsr1h	equ	0xFE2
 22350                           fsr1l	equ	0xFE1
 22351                           indf2	equ	0xFDF
 22352                           postinc2	equ	0xFDE
 22353                           postdec2	equ	0xFDD
 22354                           plusw2	equ	0xFDB
 22355                           fsr2h	equ	0xFDA
 22356                           fsr2l	equ	0xFD9
 22357                           status	equ	0xFD8
 22358                           
 22359 ;; *************** function _Timer2_Init *****************
 22360 ;; Defined at:
 22361 ;;		line 10 in file "Library/Timer2.c"
 22362 ;; Parameters:    Size  Location     Type
 22363 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 22366 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 22367 ;;  RDIV            4   18[BANK0 ] unsigned long 
 22368 ;; Return value:  Size  Location     Type
 22369 ;;                  1    wreg      void 
 22370 ;; Registers used:
 22371 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22372 ;; Tracked objects:
 22373 ;;		On entry : 0/0
 22374 ;;		On exit  : 0/0
 22375 ;;		Unchanged: 0/0
 22376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22378 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22380 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22381 ;;Total ram usage:       17 bytes
 22382 ;; Hardware stack levels used:    1
 22383 ;; Hardware stack levels required when called:    8
 22384 ;; This function calls:
 22385 ;;		_Timer2_Clear
 22386 ;;		___lldiv
 22387 ;; This function is called by:
 22388 ;;		_SPI_Init
 22389 ;; This function uses a non-reentrant model
 22390 ;;
 22391                           
 22392                           	psect	text100
 22393  013918                     __ptext100:
 22394                           	opt stack 0
 22395  013918                     _Timer2_Init:
 22396                           	opt stack 18
 22397                           
 22398                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 22399                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 22400                           ;Timer2.c: 14: static UINT8 PRE = 0;
 22401                           ;Timer2.c: 15: static UINT32 DIV = 0;
 22402                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 22403                           
 22404                           ;incstack = 0
 22405  013918  0E00               	movlw	0
 22406  01391A  0100               	movlb	0	; () banked
 22407  01391C  6FCE               	movwf	Timer2_Init@pCPUClock& (0+255),b
 22408  01391E  0E6C               	movlw	108
 22409  013920  6FCF               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 22410  013922  0EDC               	movlw	220
 22411  013924  6FD0               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 22412  013926  0E02               	movlw	2
 22413  013928  6FD1               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 22414                           
 22415                           ; BSR set to: 0
 22416                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 22417                           ;Timer2.c: 20: pFrequency *= 2;
 22418  01392A  0100               	movlb	0	; () banked
 22419  01392C  90D8               	bcf	status,0,c
 22420  01392E  37C5               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 22421  013930  37C6               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 22422  013932  37C7               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 22423  013934  37C8               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 22424                           
 22425                           ; BSR set to: 0
 22426                           ;Timer2.c: 23: pCPUClock /= 4;
 22427  013936  0E02               	movlw	2
 22428  013938  0100               	movlb	0	; () banked
 22429  01393A  6FC9               	movwf	??_Timer2_Init& (0+255),b
 22430  01393C                     u10055:
 22431  01393C  90D8               	bcf	status,0,c
 22432  01393E  0100               	movlb	0	; () banked
 22433  013940  33D1               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 22434  013942  33D0               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 22435  013944  33CF               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 22436  013946  33CE               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 22437  013948  0100               	movlb	0	; () banked
 22438  01394A  2FC9               	decfsz	??_Timer2_Init& (0+255),f,b
 22439  01394C  D7F7               	goto	u10055
 22440                           
 22441                           ; BSR set to: 0
 22442                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 22443  01394E  C0CE  F0B8         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 22444  013952  C0CF  F0B9         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 22445  013956  C0D0  F0BA         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 22446  01395A  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 22447  01395E  C0C5  F0BC         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 22448  013962  C0C6  F0BD         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 22449  013966  C0C7  F0BE         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 22450  01396A  C0C8  F0BF         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 22451  01396E  EC33  F0A5         	call	___lldiv	;wreg free
 22452  013972  C0B8  F0D2         	movff	?___lldiv,Timer2_Init@DIVIDE
 22453  013976  C0B9  F0D3         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 22454  01397A  C0BA  F0D4         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 22455  01397E  C0BB  F0D5         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 22456                           
 22457                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 22458  013982  D010               	goto	l1828
 22459  013984                     l13302:
 22460                           
 22461                           ;Timer2.c: 28: {
 22462                           ;Timer2.c: 29: RDIV = 0;
 22463  013984  0E00               	movlw	0
 22464  013986  0100               	movlb	0	; () banked
 22465  013988  6FCA               	movwf	Timer2_Init@RDIV& (0+255),b
 22466  01398A  0E00               	movlw	0
 22467  01398C  6FCB               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 22468  01398E  0E00               	movlw	0
 22469  013990  6FCC               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 22470  013992  0E00               	movlw	0
 22471  013994  6FCD               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 22472                           
 22473                           ; BSR set to: 0
 22474                           ;Timer2.c: 30: INDEX ++;
 22475  013996  0100               	movlb	0	; () banked
 22476  013998  2B89               	incf	Timer2_Init@INDEX& (0+255),f,b
 22477                           
 22478                           ; BSR set to: 0
 22479                           ;Timer2.c: 31: if (INDEX >= 3)
 22480  01399A  0E02               	movlw	2
 22481  01399C  0100               	movlb	0	; () banked
 22482  01399E  6589               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 22483  0139A0  D001               	goto	l1828
 22484  0139A2  D026               	goto	u10070
 22485  0139A4                     l1828:
 22486                           
 22487                           ; BSR set to: 0
 22488                           
 22489                           ; BSR set to: 0
 22490  0139A4  C0D2  F0B8         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 22491  0139A8  C0D3  F0B9         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 22492  0139AC  C0D4  F0BA         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 22493  0139B0  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 22494  0139B4  0100               	movlb	0	; () banked
 22495  0139B6  5189               	movf	Timer2_Init@INDEX& (0+255),w,b
 22496  0139B8  0D01               	mullw	1
 22497  0139BA  0E1C               	movlw	low Timer2_Init@PRESCALE
 22498  0139BC  24F3               	addwf	prodl,w,c
 22499  0139BE  6EF6               	movwf	tblptrl,c
 22500  0139C0  0EFD               	movlw	high Timer2_Init@PRESCALE
 22501  0139C2  20F4               	addwfc	prodh,w,c
 22502  0139C4  6EF7               	movwf	tblptrh,c
 22503  0139C6                     	if	1	;There are 3 active tblptr bytes
 22504  0139C6  6AF8               	clrf	tblptru,c
 22505  0139C8  0E00               	movlw	low (__mediumconst shr (0+16))
 22506  0139CA  22F8               	addwfc	tblptru,f,c
 22507  0139CC                     	endif
 22508  0139CC  0008               	tblrd		*
 22509  0139CE  50F5               	movf	tablat,w,c
 22510  0139D0  0100               	movlb	0	; () banked
 22511  0139D2  6FBC               	movwf	___lldiv@divisor& (0+255),b
 22512  0139D4  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 22513  0139D6  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 22514  0139D8  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 22515  0139DA  EC33  F0A5         	call	___lldiv	;wreg free
 22516  0139DE  0100               	movlb	0	; () banked
 22517  0139E0  51BB               	movf	(?___lldiv+3)& (0+255),w,b
 22518  0139E2  0100               	movlb	0	; () banked
 22519  0139E4  11BA               	iorwf	(?___lldiv+2)& (0+255),w,b
 22520  0139E6  E1CE               	bnz	l13302
 22521  0139E8  0100               	movlb	0	; () banked
 22522  0139EA  05B9               	decf	(?___lldiv+1)& (0+255),w,b
 22523  0139EC  B0D8               	btfsc	status,0,c
 22524  0139EE  D7CA               	goto	l1827
 22525  0139F0                     u10070:
 22526                           
 22527                           ; BSR set to: 0
 22528                           ;Timer2.c: 33: }
 22529                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 22530                           
 22531                           ; BSR set to: 0
 22532  0139F0  50CA               	movf	4042,w,c	;volatile
 22533  0139F2  0100               	movlb	0	; () banked
 22534  0139F4  1989               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22535  0139F6  0BFC               	andlw	-4
 22536  0139F8  1989               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22537  0139FA  6ECA               	movwf	4042,c	;volatile
 22538                           
 22539                           ; BSR set to: 0
 22540                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 22541  0139FC  84CA               	bsf	4042,2,c	;volatile
 22542                           
 22543                           ; BSR set to: 0
 22544                           ;Timer2.c: 44: Timer2_Clear();
 22545  0139FE  EC63  F0B7         	call	_Timer2_Clear	;wreg free
 22546                           
 22547                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 22548  013A02  0100               	movlb	0	; () banked
 22549  013A04  5189               	movf	Timer2_Init@INDEX& (0+255),w,b
 22550  013A06  0D01               	mullw	1
 22551  013A08  0E1C               	movlw	low Timer2_Init@PRESCALE
 22552  013A0A  24F3               	addwf	prodl,w,c
 22553  013A0C  6EF6               	movwf	tblptrl,c
 22554  013A0E  0EFD               	movlw	high Timer2_Init@PRESCALE
 22555  013A10  20F4               	addwfc	prodh,w,c
 22556  013A12  6EF7               	movwf	tblptrh,c
 22557  013A14                     	if	1	;There are 3 active tblptr bytes
 22558  013A14  6AF8               	clrf	tblptru,c
 22559  013A16  0E00               	movlw	low (__mediumconst shr (0+16))
 22560  013A18  22F8               	addwfc	tblptru,f,c
 22561  013A1A                     	endif
 22562  013A1A  0008               	tblrd		*
 22563  013A1C  CFF5 F088          	movff	tablat,Timer2_Init@PRE
 22564                           
 22565                           ; BSR set to: 0
 22566                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 22567  013A20  0EFF               	movlw	255
 22568  013A22  0100               	movlb	0	; () banked
 22569  013A24  25D2               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 22570  013A26  0103               	movlb	3	; () banked
 22571  013A28  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 22572  013A2A  0EFF               	movlw	255
 22573  013A2C  0100               	movlb	0	; () banked
 22574  013A2E  21D3               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 22575  013A30  0103               	movlb	3	; () banked
 22576  013A32  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 22577  013A34  0EFF               	movlw	255
 22578  013A36  0100               	movlb	0	; () banked
 22579  013A38  21D4               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 22580  013A3A  0103               	movlb	3	; () banked
 22581  013A3C  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 22582  013A3E  0EFF               	movlw	255
 22583  013A40  0100               	movlb	0	; () banked
 22584  013A42  21D5               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 22585  013A44  0103               	movlb	3	; () banked
 22586  013A46  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 22587                           
 22588                           ; BSR set to: 3
 22589                           ;Timer2.c: 48: INDEX = DIV/PRE;
 22590  013A48  C326  F0B8         	movff	Timer2_Init@DIV,___lldiv@dividend
 22591  013A4C  C327  F0B9         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 22592  013A50  C328  F0BA         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 22593  013A54  C329  F0BB         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 22594  013A58  0100               	movlb	0	; () banked
 22595  013A5A  5188               	movf	Timer2_Init@PRE& (0+255),w,b
 22596  013A5C  0100               	movlb	0	; () banked
 22597  013A5E  6FBC               	movwf	___lldiv@divisor& (0+255),b
 22598  013A60  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 22599  013A62  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 22600  013A64  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 22601  013A66  EC33  F0A5         	call	___lldiv	;wreg free
 22602  013A6A  0100               	movlb	0	; () banked
 22603  013A6C  51B8               	movf	?___lldiv& (0+255),w,b
 22604  013A6E  0100               	movlb	0	; () banked
 22605  013A70  6F89               	movwf	Timer2_Init@INDEX& (0+255),b
 22606                           
 22607                           ; BSR set to: 0
 22608                           ;Timer2.c: 49: PR2 = INDEX;
 22609  013A72  C089  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 22610                           
 22611                           ; BSR set to: 0
 22612  013A76  0012               	return		;funcret
 22613  013A78                     __end_of_Timer2_Init:
 22614                           	opt stack 0
 22615                           tosu	equ	0xFFF
 22616                           tosh	equ	0xFFE
 22617                           tosl	equ	0xFFD
 22618                           pclath	equ	0xFFA
 22619                           tblptru	equ	0xFF8
 22620                           tblptrh	equ	0xFF7
 22621                           tblptrl	equ	0xFF6
 22622                           tablat	equ	0xFF5
 22623                           prodh	equ	0xFF4
 22624                           prodl	equ	0xFF3
 22625                           intcon	equ	0xFF2
 22626                           postinc0	equ	0xFEE
 22627                           wreg	equ	0xFE8
 22628                           indf1	equ	0xFE7
 22629                           postdec1	equ	0xFE5
 22630                           fsr1h	equ	0xFE2
 22631                           fsr1l	equ	0xFE1
 22632                           indf2	equ	0xFDF
 22633                           postinc2	equ	0xFDE
 22634                           postdec2	equ	0xFDD
 22635                           plusw2	equ	0xFDB
 22636                           fsr2h	equ	0xFDA
 22637                           fsr2l	equ	0xFD9
 22638                           status	equ	0xFD8
 22639                           
 22640 ;; *************** function ___lldiv *****************
 22641 ;; Defined at:
 22642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 22643 ;; Parameters:    Size  Location     Type
 22644 ;;  dividend        4    0[BANK0 ] unsigned long 
 22645 ;;  divisor         4    4[BANK0 ] unsigned long 
 22646 ;; Auto vars:     Size  Location     Type
 22647 ;;  quotient        4    8[BANK0 ] unsigned long 
 22648 ;;  counter         1   12[BANK0 ] unsigned char 
 22649 ;; Return value:  Size  Location     Type
 22650 ;;                  4    0[BANK0 ] unsigned long 
 22651 ;; Registers used:
 22652 ;;		wreg, status,2, status,0
 22653 ;; Tracked objects:
 22654 ;;		On entry : 0/0
 22655 ;;		On exit  : 0/0
 22656 ;;		Unchanged: 0/0
 22657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22658 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22662 ;;Total ram usage:       13 bytes
 22663 ;; Hardware stack levels used:    1
 22664 ;; Hardware stack levels required when called:    7
 22665 ;; This function calls:
 22666 ;;		Nothing
 22667 ;; This function is called by:
 22668 ;;		_Timer0_Init
 22669 ;;		_Timer2_Init
 22670 ;;		_rand_between
 22671 ;;		_I2C_Init
 22672 ;; This function uses a non-reentrant model
 22673 ;;
 22674                           
 22675                           	psect	text101
 22676  014A66                     __ptext101:
 22677                           	opt stack 0
 22678  014A66                     ___lldiv:
 22679                           	opt stack 19
 22680                           
 22681                           ; BSR set to: 0
 22682                           ;incstack = 0
 22683  014A66  0E00               	movlw	0
 22684  014A68  0100               	movlb	0	; () banked
 22685  014A6A  6FC0               	movwf	___lldiv@quotient& (0+255),b
 22686  014A6C  0E00               	movlw	0
 22687  014A6E  6FC1               	movwf	(___lldiv@quotient+1)& (0+255),b
 22688  014A70  0E00               	movlw	0
 22689  014A72  6FC2               	movwf	(___lldiv@quotient+2)& (0+255),b
 22690  014A74  0E00               	movlw	0
 22691  014A76  6FC3               	movwf	(___lldiv@quotient+3)& (0+255),b
 22692                           
 22693                           ; BSR set to: 0
 22694  014A78  0100               	movlb	0	; () banked
 22695  014A7A  51BC               	movf	___lldiv@divisor& (0+255),w,b
 22696  014A7C  0100               	movlb	0	; () banked
 22697  014A7E  11BD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 22698  014A80  0100               	movlb	0	; () banked
 22699  014A82  11BE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 22700  014A84  0100               	movlb	0	; () banked
 22701  014A86  11BF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 22702  014A88  B4D8               	btfsc	status,2,c
 22703  014A8A  D042               	goto	l2862
 22704                           
 22705                           ; BSR set to: 0
 22706  014A8C  0E01               	movlw	1
 22707  014A8E  0100               	movlb	0	; () banked
 22708  014A90  6FC4               	movwf	___lldiv@counter& (0+255),b
 22709  014A92  D008               	goto	l2857
 22710  014A94                     
 22711                           ; BSR set to: 0
 22712                           
 22713                           ; BSR set to: 0
 22714  014A94  0100               	movlb	0	; () banked
 22715  014A96  90D8               	bcf	status,0,c
 22716  014A98  37BC               	rlcf	___lldiv@divisor& (0+255),f,b
 22717  014A9A  37BD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 22718  014A9C  37BE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 22719  014A9E  37BF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 22720  014AA0  0100               	movlb	0	; () banked
 22721  014AA2  2BC4               	incf	___lldiv@counter& (0+255),f,b
 22722  014AA4                     l2857:
 22723                           
 22724                           ; BSR set to: 0
 22725                           
 22726                           ; BSR set to: 0
 22727  014AA4  0100               	movlb	0	; () banked
 22728  014AA6  AFBF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 22729  014AA8  D7F5               	goto	l2858
 22730  014AAA                     u9930:
 22731                           
 22732                           ; BSR set to: 0
 22733                           
 22734                           ; BSR set to: 0
 22735                           
 22736                           ; BSR set to: 0
 22737  014AAA  0100               	movlb	0	; () banked
 22738  014AAC  90D8               	bcf	status,0,c
 22739  014AAE  37C0               	rlcf	___lldiv@quotient& (0+255),f,b
 22740  014AB0  37C1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 22741  014AB2  37C2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 22742  014AB4  37C3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 22743                           
 22744                           ; BSR set to: 0
 22745  014AB6  0100               	movlb	0	; () banked
 22746  014AB8  51BC               	movf	___lldiv@divisor& (0+255),w,b
 22747  014ABA  0100               	movlb	0	; () banked
 22748  014ABC  5DB8               	subwf	___lldiv@dividend& (0+255),w,b
 22749  014ABE  0100               	movlb	0	; () banked
 22750  014AC0  51BD               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22751  014AC2  0100               	movlb	0	; () banked
 22752  014AC4  59B9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 22753  014AC6  0100               	movlb	0	; () banked
 22754  014AC8  51BE               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22755  014ACA  0100               	movlb	0	; () banked
 22756  014ACC  59BA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 22757  014ACE  0100               	movlb	0	; () banked
 22758  014AD0  51BF               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22759  014AD2  0100               	movlb	0	; () banked
 22760  014AD4  59BB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 22761  014AD6  A0D8               	btfss	status,0,c
 22762  014AD8  D012               	goto	l2861
 22763                           
 22764                           ; BSR set to: 0
 22765  014ADA  0100               	movlb	0	; () banked
 22766  014ADC  51BC               	movf	___lldiv@divisor& (0+255),w,b
 22767  014ADE  0100               	movlb	0	; () banked
 22768  014AE0  5FB8               	subwf	___lldiv@dividend& (0+255),f,b
 22769  014AE2  0100               	movlb	0	; () banked
 22770  014AE4  51BD               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22771  014AE6  0100               	movlb	0	; () banked
 22772  014AE8  5BB9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 22773  014AEA  0100               	movlb	0	; () banked
 22774  014AEC  51BE               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22775  014AEE  0100               	movlb	0	; () banked
 22776  014AF0  5BBA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 22777  014AF2  0100               	movlb	0	; () banked
 22778  014AF4  51BF               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22779  014AF6  0100               	movlb	0	; () banked
 22780  014AF8  5BBB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 22781                           
 22782                           ; BSR set to: 0
 22783  014AFA  0100               	movlb	0	; () banked
 22784  014AFC  81C0               	bsf	___lldiv@quotient& (0+255),0,b
 22785  014AFE                     l2861:
 22786                           
 22787                           ; BSR set to: 0
 22788                           
 22789                           ; BSR set to: 0
 22790  014AFE  0100               	movlb	0	; () banked
 22791  014B00  90D8               	bcf	status,0,c
 22792  014B02  33BF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 22793  014B04  33BE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 22794  014B06  33BD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 22795  014B08  33BC               	rrcf	___lldiv@divisor& (0+255),f,b
 22796                           
 22797                           ; BSR set to: 0
 22798  014B0A  0100               	movlb	0	; () banked
 22799  014B0C  2FC4               	decfsz	___lldiv@counter& (0+255),f,b
 22800  014B0E  D7CD               	goto	u9930
 22801  014B10                     l2862:
 22802                           
 22803                           ; BSR set to: 0
 22804                           
 22805                           ; BSR set to: 0
 22806  014B10  C0C0  F0B8         	movff	___lldiv@quotient,?___lldiv
 22807  014B14  C0C1  F0B9         	movff	___lldiv@quotient+1,?___lldiv+1
 22808  014B18  C0C2  F0BA         	movff	___lldiv@quotient+2,?___lldiv+2
 22809  014B1C  C0C3  F0BB         	movff	___lldiv@quotient+3,?___lldiv+3
 22810                           
 22811                           ; BSR set to: 0
 22812  014B20  0012               	return		;funcret
 22813  014B22                     __end_of___lldiv:
 22814                           	opt stack 0
 22815                           tosu	equ	0xFFF
 22816                           tosh	equ	0xFFE
 22817                           tosl	equ	0xFFD
 22818                           pclath	equ	0xFFA
 22819                           tblptru	equ	0xFF8
 22820                           tblptrh	equ	0xFF7
 22821                           tblptrl	equ	0xFF6
 22822                           tablat	equ	0xFF5
 22823                           prodh	equ	0xFF4
 22824                           prodl	equ	0xFF3
 22825                           intcon	equ	0xFF2
 22826                           postinc0	equ	0xFEE
 22827                           wreg	equ	0xFE8
 22828                           indf1	equ	0xFE7
 22829                           postdec1	equ	0xFE5
 22830                           fsr1h	equ	0xFE2
 22831                           fsr1l	equ	0xFE1
 22832                           indf2	equ	0xFDF
 22833                           postinc2	equ	0xFDE
 22834                           postdec2	equ	0xFDD
 22835                           plusw2	equ	0xFDB
 22836                           fsr2h	equ	0xFDA
 22837                           fsr2l	equ	0xFD9
 22838                           status	equ	0xFD8
 22839                           
 22840 ;; *************** function _Timer2_Clear *****************
 22841 ;; Defined at:
 22842 ;;		line 3 in file "Library/Timer2.c"
 22843 ;; Parameters:    Size  Location     Type
 22844 ;;		None
 22845 ;; Auto vars:     Size  Location     Type
 22846 ;;		None
 22847 ;; Return value:  Size  Location     Type
 22848 ;;                  1    wreg      void 
 22849 ;; Registers used:
 22850 ;;		None
 22851 ;; Tracked objects:
 22852 ;;		On entry : 0/0
 22853 ;;		On exit  : 0/0
 22854 ;;		Unchanged: 0/0
 22855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22860 ;;Total ram usage:        0 bytes
 22861 ;; Hardware stack levels used:    1
 22862 ;; Hardware stack levels required when called:    7
 22863 ;; This function calls:
 22864 ;;		Nothing
 22865 ;; This function is called by:
 22866 ;;		_Timer2_Init
 22867 ;; This function uses a non-reentrant model
 22868 ;;
 22869                           
 22870                           	psect	text102
 22871  016EC6                     __ptext102:
 22872                           	opt stack 0
 22873  016EC6                     _Timer2_Clear:
 22874                           	opt stack 18
 22875                           
 22876                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 22877                           
 22878                           ; BSR set to: 0
 22879                           ;incstack = 0
 22880  016EC6  929E               	bcf	3998,1,c	;volatile
 22881                           
 22882                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 22883  016EC8  929D               	bcf	3997,1,c	;volatile
 22884                           
 22885                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 22886  016ECA  929F               	bcf	3999,1,c	;volatile
 22887  016ECC  0012               	return		;funcret
 22888  016ECE                     __end_of_Timer2_Clear:
 22889                           	opt stack 0
 22890                           tosu	equ	0xFFF
 22891                           tosh	equ	0xFFE
 22892                           tosl	equ	0xFFD
 22893                           pclath	equ	0xFFA
 22894                           tblptru	equ	0xFF8
 22895                           tblptrh	equ	0xFF7
 22896                           tblptrl	equ	0xFF6
 22897                           tablat	equ	0xFF5
 22898                           prodh	equ	0xFF4
 22899                           prodl	equ	0xFF3
 22900                           intcon	equ	0xFF2
 22901                           postinc0	equ	0xFEE
 22902                           wreg	equ	0xFE8
 22903                           indf1	equ	0xFE7
 22904                           postdec1	equ	0xFE5
 22905                           fsr1h	equ	0xFE2
 22906                           fsr1l	equ	0xFE1
 22907                           indf2	equ	0xFDF
 22908                           postinc2	equ	0xFDE
 22909                           postdec2	equ	0xFDD
 22910                           plusw2	equ	0xFDB
 22911                           fsr2h	equ	0xFDA
 22912                           fsr2l	equ	0xFD9
 22913                           status	equ	0xFD8
 22914                           
 22915 ;; *************** function _SPI_DisableISR *****************
 22916 ;; Defined at:
 22917 ;;		line 181 in file "Library/SPI.c"
 22918 ;; Parameters:    Size  Location     Type
 22919 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22920 ;;		 -> SPI1(11), SPI2(11), 
 22921 ;; Auto vars:     Size  Location     Type
 22922 ;;		None
 22923 ;; Return value:  Size  Location     Type
 22924 ;;                  1    wreg      void 
 22925 ;; Registers used:
 22926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22927 ;; Tracked objects:
 22928 ;;		On entry : 0/0
 22929 ;;		On exit  : 0/0
 22930 ;;		Unchanged: 0/0
 22931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22936 ;;Total ram usage:        2 bytes
 22937 ;; Hardware stack levels used:    1
 22938 ;; Hardware stack levels required when called:    7
 22939 ;; This function calls:
 22940 ;;		Nothing
 22941 ;; This function is called by:
 22942 ;;		_SPI_Init
 22943 ;; This function uses a non-reentrant model
 22944 ;;
 22945                           
 22946                           	psect	text103
 22947  016ACA                     __ptext103:
 22948                           	opt stack 0
 22949  016ACA                     _SPI_DisableISR:
 22950                           	opt stack 19
 22951                           
 22952                           ;SPI.c: 183: switch (pInput->mChannel)
 22953                           
 22954                           ;incstack = 0
 22955  016ACA  D004               	goto	l654
 22956  016ACC                     l655:
 22957                           
 22958                           ; BSR set to: 0
 22959  016ACC  969D               	bcf	3997,3,c	;volatile
 22960  016ACE  0012               	return	
 22961  016AD0                     l657:
 22962                           
 22963                           ; BSR set to: 0
 22964  016AD0  9EA3               	bcf	4003,7,c	;volatile
 22965                           
 22966                           ; BSR set to: 0
 22967                           ;SPI.c: 188: };
 22968                           
 22969                           ; BSR set to: 0
 22970                           
 22971                           ;SPI.c: 187: default: return;
 22972  016AD2  0012               	return	
 22973  016AD4                     l654:
 22974                           
 22975                           ; BSR set to: 0
 22976  016AD4  0100               	movlb	0	; () banked
 22977  016AD6  EE20 F002          	lfsr	2,2
 22978  016ADA  51B8               	movf	SPI_DisableISR@pInput& (0+255),w,b
 22979  016ADC  26D9               	addwf	fsr2l,f,c
 22980  016ADE  51B9               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 22981  016AE0  22DA               	addwfc	fsr2h,f,c
 22982  016AE2  50DF               	movf	indf2,w,c
 22983                           
 22984                           ; Switch size 1, requested type "space"
 22985                           ; Number of cases is 2, Range of values is 0 to 1
 22986                           ; switch strategies available:
 22987                           ; Name         Instructions Cycles
 22988                           ; simple_byte            7     4 (average)
 22989                           ;	Chosen strategy is simple_byte
 22990  016AE4  0A00               	xorlw	0	; case 0
 22991  016AE6  B4D8               	btfsc	status,2,c
 22992  016AE8  D7F1               	goto	l655
 22993  016AEA  0A01               	xorlw	1	; case 1
 22994  016AEC  A4D8               	btfss	status,2,c
 22995  016AEE  0012               	return	
 22996  016AF0  D7EF               	goto	l657
 22997  016AF2                     __end_of_SPI_DisableISR:
 22998                           	opt stack 0
 22999                           tosu	equ	0xFFF
 23000                           tosh	equ	0xFFE
 23001                           tosl	equ	0xFFD
 23002                           pclath	equ	0xFFA
 23003                           tblptru	equ	0xFF8
 23004                           tblptrh	equ	0xFF7
 23005                           tblptrl	equ	0xFF6
 23006                           tablat	equ	0xFF5
 23007                           prodh	equ	0xFF4
 23008                           prodl	equ	0xFF3
 23009                           intcon	equ	0xFF2
 23010                           postinc0	equ	0xFEE
 23011                           wreg	equ	0xFE8
 23012                           indf1	equ	0xFE7
 23013                           postdec1	equ	0xFE5
 23014                           fsr1h	equ	0xFE2
 23015                           fsr1l	equ	0xFE1
 23016                           indf2	equ	0xFDF
 23017                           postinc2	equ	0xFDE
 23018                           postdec2	equ	0xFDD
 23019                           plusw2	equ	0xFDB
 23020                           fsr2h	equ	0xFDA
 23021                           fsr2l	equ	0xFD9
 23022                           status	equ	0xFD8
 23023                           
 23024 ;; *************** function _SPI_DCS *****************
 23025 ;; Defined at:
 23026 ;;		line 219 in file "Library/SPI.c"
 23027 ;; Parameters:    Size  Location     Type
 23028 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23029 ;;		 -> SPI1(11), SPI2(11), 
 23030 ;; Auto vars:     Size  Location     Type
 23031 ;;		None
 23032 ;; Return value:  Size  Location     Type
 23033 ;;                  1    wreg      void 
 23034 ;; Registers used:
 23035 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23036 ;; Tracked objects:
 23037 ;;		On entry : 0/0
 23038 ;;		On exit  : 0/0
 23039 ;;		Unchanged: 0/0
 23040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23041 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23044 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23045 ;;Total ram usage:        2 bytes
 23046 ;; Hardware stack levels used:    1
 23047 ;; Hardware stack levels required when called:    7
 23048 ;; This function calls:
 23049 ;;		Nothing
 23050 ;; This function is called by:
 23051 ;;		_SPI_Init
 23052 ;; This function uses a non-reentrant model
 23053 ;;
 23054                           
 23055                           	psect	text104
 23056  01698A                     __ptext104:
 23057                           	opt stack 0
 23058  01698A                     _SPI_DCS:
 23059                           	opt stack 19
 23060                           
 23061                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;incstack = 0
 23065  01698A  0100               	movlb	0	; () banked
 23066  01698C  EE20 F002          	lfsr	2,2
 23067  016990  51B8               	movf	SPI_DCS@pInput& (0+255),w,b
 23068  016992  26D9               	addwf	fsr2l,f,c
 23069  016994  51B9               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 23070  016996  22DA               	addwfc	fsr2h,f,c
 23071  016998  50DF               	movf	indf2,w,c
 23072  01699A  A4D8               	btfss	status,2,c
 23073  01699C  D007               	goto	l673
 23074                           
 23075                           ; BSR set to: 0
 23076                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 23077  01699E  C0A7  FFD9         	movff	_PortC+4,fsr2l
 23078  0169A2  C0A8  FFDA         	movff	_PortC+5,fsr2h
 23079  0169A6  0100               	movlb	0	; () banked
 23080  0169A8  84DF               	bsf	indf2,2,c
 23081  0169AA  0012               	return	
 23082  0169AC                     l673:
 23083                           
 23084                           ; BSR set to: 0
 23085                           ;SPI.c: 223: else
 23086                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 23087                           
 23088                           ; BSR set to: 0
 23089  0169AC  C09D  FFD9         	movff	_PortD+4,fsr2l
 23090  0169B0  C09E  FFDA         	movff	_PortD+5,fsr2h
 23091  0169B4  0100               	movlb	0	; () banked
 23092  0169B6  8EDF               	bsf	indf2,7,c
 23093  0169B8  0012               	return	
 23094  0169BA                     __end_of_SPI_DCS:
 23095                           	opt stack 0
 23096                           tosu	equ	0xFFF
 23097                           tosh	equ	0xFFE
 23098                           tosl	equ	0xFFD
 23099                           pclath	equ	0xFFA
 23100                           tblptru	equ	0xFF8
 23101                           tblptrh	equ	0xFF7
 23102                           tblptrl	equ	0xFF6
 23103                           tablat	equ	0xFF5
 23104                           prodh	equ	0xFF4
 23105                           prodl	equ	0xFF3
 23106                           intcon	equ	0xFF2
 23107                           postinc0	equ	0xFEE
 23108                           wreg	equ	0xFE8
 23109                           indf1	equ	0xFE7
 23110                           postdec1	equ	0xFE5
 23111                           fsr1h	equ	0xFE2
 23112                           fsr1l	equ	0xFE1
 23113                           indf2	equ	0xFDF
 23114                           postinc2	equ	0xFDE
 23115                           postdec2	equ	0xFDD
 23116                           plusw2	equ	0xFDB
 23117                           fsr2h	equ	0xFDA
 23118                           fsr2l	equ	0xFD9
 23119                           status	equ	0xFD8
 23120                           
 23121 ;; *************** function _Button_Init *****************
 23122 ;; Defined at:
 23123 ;;		line 18 in file "Library/Button.c"
 23124 ;; Parameters:    Size  Location     Type
 23125 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 23126 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 23127 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 23128 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 23129 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 23130 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 23131 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 23132 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 23133 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 23134 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 23135 ;; Auto vars:     Size  Location     Type
 23136 ;;		None
 23137 ;; Return value:  Size  Location     Type
 23138 ;;                  1    wreg      void 
 23139 ;; Registers used:
 23140 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23141 ;; Tracked objects:
 23142 ;;		On entry : 0/0
 23143 ;;		On exit  : 0/0
 23144 ;;		Unchanged: 0/0
 23145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23146 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23149 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23150 ;;Total ram usage:       13 bytes
 23151 ;; Hardware stack levels used:    1
 23152 ;; Hardware stack levels required when called:   15
 23153 ;; This function calls:
 23154 ;;		_HMI_InitButtons
 23155 ;;		_MXK_InitDIPSwitch
 23156 ;;		_MXK_InitTestButton
 23157 ;; This function is called by:
 23158 ;;		_HMI_Init
 23159 ;;		_FunctInitButton
 23160 ;; This function uses a non-reentrant model
 23161 ;;
 23162                           
 23163                           	psect	text105
 23164  0144EC                     __ptext105:
 23165                           	opt stack 0
 23166  0144EC                     _Button_Init:
 23167                           	opt stack 13
 23168                           
 23169                           ;Button.c: 21: if(pInput==(void*)0)
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;incstack = 0
 23173  0144EC  0101               	movlb	1	; () banked
 23174  0144EE  5100               	movf	Button_Init@pInput& (0+255),w,b
 23175  0144F0  0101               	movlb	1	; () banked
 23176  0144F2  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 23177  0144F4  B4D8               	btfsc	status,2,c
 23178  0144F6  0012               	return	
 23179                           
 23180                           ; BSR set to: 1
 23181                           ;Button.c: 23: if(pInitIO==(void*)0)
 23182                           
 23183                           ; BSR set to: 1
 23184                           
 23185                           ; BSR set to: 1
 23186                           ;Button.c: 22: return;
 23187  0144F8  0101               	movlb	1	; () banked
 23188  0144FA  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23189  0144FC  0101               	movlb	1	; () banked
 23190  0144FE  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 23191  014500  0101               	movlb	1	; () banked
 23192  014502  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 23193  014504  B4D8               	btfsc	status,2,c
 23194  014506  0012               	return	
 23195                           
 23196                           ; BSR set to: 1
 23197                           ;Button.c: 25: if(pGetState==(void*)0)
 23198                           
 23199                           ; BSR set to: 1
 23200                           
 23201                           ; BSR set to: 1
 23202                           ;Button.c: 24: return;
 23203  014508  0101               	movlb	1	; () banked
 23204  01450A  5107               	movf	Button_Init@pGetState& (0+255),w,b
 23205  01450C  0101               	movlb	1	; () banked
 23206  01450E  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 23207  014510  0101               	movlb	1	; () banked
 23208  014512  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 23209  014514  B4D8               	btfsc	status,2,c
 23210  014516  0012               	return	
 23211                           
 23212                           ; BSR set to: 1
 23213                           ;Button.c: 27: if(pFunction==(void*)0)
 23214                           
 23215                           ; BSR set to: 1
 23216                           
 23217                           ; BSR set to: 1
 23218                           ;Button.c: 26: return;
 23219  014518  0101               	movlb	1	; () banked
 23220  01451A  510A               	movf	Button_Init@pFunction& (0+255),w,b
 23221  01451C  0101               	movlb	1	; () banked
 23222  01451E  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 23223  014520  0101               	movlb	1	; () banked
 23224  014522  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 23225  014524  B4D8               	btfsc	status,2,c
 23226  014526  0012               	return	
 23227                           
 23228                           ; BSR set to: 1
 23229                           ;Button.c: 30: if(pThreshold == 0)
 23230                           
 23231                           ; BSR set to: 1
 23232                           
 23233                           ; BSR set to: 1
 23234                           ;Button.c: 28: return;
 23235  014528  0101               	movlb	1	; () banked
 23236  01452A  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 23237  01452C  0101               	movlb	1	; () banked
 23238  01452E  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 23239  014530  A4D8               	btfss	status,2,c
 23240  014532  D005               	goto	l8
 23241                           
 23242                           ; BSR set to: 1
 23243                           ;Button.c: 31: pThreshold = 1;
 23244  014534  0E00               	movlw	0
 23245  014536  0101               	movlb	1	; () banked
 23246  014538  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 23247  01453A  0E01               	movlw	1
 23248  01453C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 23249  01453E                     l8:
 23250                           
 23251                           ; BSR set to: 1
 23252                           ;Button.c: 34: pInput->mState = 0;
 23253                           
 23254                           ; BSR set to: 1
 23255  01453E  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 23256  014542  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 23257  014546  0E00               	movlw	0
 23258  014548  6EDF               	movwf	indf2,c
 23259                           
 23260                           ; BSR set to: 1
 23261                           ;Button.c: 35: pInput->mCount = 0;
 23262  01454A  0101               	movlb	1	; () banked
 23263  01454C  EE20 F001          	lfsr	2,1
 23264  014550  5100               	movf	Button_Init@pInput& (0+255),w,b
 23265  014552  26D9               	addwf	fsr2l,f,c
 23266  014554  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23267  014556  22DA               	addwfc	fsr2h,f,c
 23268  014558  0E00               	movlw	0
 23269  01455A  6EDF               	movwf	indf2,c
 23270                           
 23271                           ; BSR set to: 1
 23272                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 23273  01455C  0101               	movlb	1	; () banked
 23274  01455E  EE20 F002          	lfsr	2,2
 23275  014562  5100               	movf	Button_Init@pInput& (0+255),w,b
 23276  014564  26D9               	addwf	fsr2l,f,c
 23277  014566  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23278  014568  22DA               	addwfc	fsr2h,f,c
 23279  01456A  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 23280  01456E  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 23281                           
 23282                           ; BSR set to: 1
 23283                           ;Button.c: 37: pInput->mFunction = pFunction;
 23284  014572  0101               	movlb	1	; () banked
 23285  014574  EE20 F004          	lfsr	2,4
 23286  014578  5100               	movf	Button_Init@pInput& (0+255),w,b
 23287  01457A  26D9               	addwf	fsr2l,f,c
 23288  01457C  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23289  01457E  22DA               	addwfc	fsr2h,f,c
 23290  014580  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 23291  014584  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 23292  014588  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 23293                           
 23294                           ; BSR set to: 1
 23295                           ;Button.c: 38: pInput->mGetState = pGetState;
 23296  01458C  0101               	movlb	1	; () banked
 23297  01458E  EE20 F007          	lfsr	2,7
 23298  014592  5100               	movf	Button_Init@pInput& (0+255),w,b
 23299  014594  26D9               	addwf	fsr2l,f,c
 23300  014596  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23301  014598  22DA               	addwfc	fsr2h,f,c
 23302  01459A  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 23303  01459E  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 23304  0145A2  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 23305                           
 23306                           ; BSR set to: 1
 23307                           ;Button.c: 41: pInitIO();
 23308  0145A6  D801               	call	u11328
 23309  0145A8  0012               	return	
 23310  0145AA                     u11328:
 23311  0145AA  0005               	push	
 23312  0145AC  6EFA               	movwf	pclath,c
 23313  0145AE  0101               	movlb	1	; () banked
 23314  0145B0  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23315  0145B2  6EFD               	movwf	tosl,c
 23316  0145B4  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 23317  0145B6  6EFE               	movwf	tosh,c
 23318  0145B8  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 23319  0145BA  6EFF               	movwf	tosu,c
 23320  0145BC  50FA               	movf	pclath,w,c
 23321  0145BE  0012               	return		;indir
 23322  0145C0                     __end_of_Button_Init:
 23323                           	opt stack 0
 23324                           tosu	equ	0xFFF
 23325                           tosh	equ	0xFFE
 23326                           tosl	equ	0xFFD
 23327                           pclath	equ	0xFFA
 23328                           tblptru	equ	0xFF8
 23329                           tblptrh	equ	0xFF7
 23330                           tblptrl	equ	0xFF6
 23331                           tablat	equ	0xFF5
 23332                           prodh	equ	0xFF4
 23333                           prodl	equ	0xFF3
 23334                           intcon	equ	0xFF2
 23335                           postinc0	equ	0xFEE
 23336                           wreg	equ	0xFE8
 23337                           indf1	equ	0xFE7
 23338                           postdec1	equ	0xFE5
 23339                           fsr1h	equ	0xFE2
 23340                           fsr1l	equ	0xFE1
 23341                           indf2	equ	0xFDF
 23342                           postinc2	equ	0xFDE
 23343                           postdec2	equ	0xFDD
 23344                           plusw2	equ	0xFDB
 23345                           fsr2h	equ	0xFDA
 23346                           fsr2l	equ	0xFD9
 23347                           status	equ	0xFD8
 23348                           
 23349 ;; *************** function _MXK_InitDIPSwitch *****************
 23350 ;; Defined at:
 23351 ;;		line 20 in file "Library/MXK.c"
 23352 ;; Parameters:    Size  Location     Type
 23353 ;;		None
 23354 ;; Auto vars:     Size  Location     Type
 23355 ;;		None
 23356 ;; Return value:  Size  Location     Type
 23357 ;;                  1    wreg      void 
 23358 ;; Registers used:
 23359 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23360 ;; Tracked objects:
 23361 ;;		On entry : 0/0
 23362 ;;		On exit  : 0/0
 23363 ;;		Unchanged: 0/0
 23364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23369 ;;Total ram usage:        0 bytes
 23370 ;; Hardware stack levels used:    1
 23371 ;; Hardware stack levels required when called:   14
 23372 ;; This function calls:
 23373 ;;		_Port_SetQuadType
 23374 ;; This function is called by:
 23375 ;;		_FunctInitButton
 23376 ;;		_Button_Init
 23377 ;; This function uses a non-reentrant model
 23378 ;;
 23379                           
 23380                           	psect	text106
 23381  016C34                     __ptext106:
 23382                           	opt stack 0
 23383  016C34                     _MXK_InitDIPSwitch:
 23384                           	opt stack 13
 23385                           
 23386                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 23387                           
 23388                           ;incstack = 0
 23389  016C34  0E99               	movlw	low _PortD
 23390  016C36  0100               	movlb	0	; () banked
 23391  016C38  6FEE               	movwf	Port_SetQuadType@pInput& (0+255),b
 23392  016C3A  0E00               	movlw	high _PortD
 23393  016C3C  0100               	movlb	0	; () banked
 23394  016C3E  6FEF               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 23395  016C40  0E00               	movlw	0
 23396  016C42  0100               	movlb	0	; () banked
 23397  016C44  6FF0               	movwf	Port_SetQuadType@pQuad& (0+255),b
 23398  016C46  0E00               	movlw	0
 23399  016C48  0100               	movlb	0	; () banked
 23400  016C4A  6FF1               	movwf	Port_SetQuadType@pType& (0+255),b
 23401  016C4C  ECA8  F08F         	call	_Port_SetQuadType	;wreg free
 23402  016C50  0012               	return		;funcret
 23403  016C52                     __end_of_MXK_InitDIPSwitch:
 23404                           	opt stack 0
 23405                           tosu	equ	0xFFF
 23406                           tosh	equ	0xFFE
 23407                           tosl	equ	0xFFD
 23408                           pclath	equ	0xFFA
 23409                           tblptru	equ	0xFF8
 23410                           tblptrh	equ	0xFF7
 23411                           tblptrl	equ	0xFF6
 23412                           tablat	equ	0xFF5
 23413                           prodh	equ	0xFF4
 23414                           prodl	equ	0xFF3
 23415                           intcon	equ	0xFF2
 23416                           postinc0	equ	0xFEE
 23417                           wreg	equ	0xFE8
 23418                           indf1	equ	0xFE7
 23419                           postdec1	equ	0xFE5
 23420                           fsr1h	equ	0xFE2
 23421                           fsr1l	equ	0xFE1
 23422                           indf2	equ	0xFDF
 23423                           postinc2	equ	0xFDE
 23424                           postdec2	equ	0xFDD
 23425                           plusw2	equ	0xFDB
 23426                           fsr2h	equ	0xFDA
 23427                           fsr2l	equ	0xFD9
 23428                           status	equ	0xFD8
 23429                           
 23430 ;; *************** function _HMI_InitButtons *****************
 23431 ;; Defined at:
 23432 ;;		line 21 in file "HMI.c"
 23433 ;; Parameters:    Size  Location     Type
 23434 ;;		None
 23435 ;; Auto vars:     Size  Location     Type
 23436 ;;		None
 23437 ;; Return value:  Size  Location     Type
 23438 ;;                  1    wreg      void 
 23439 ;; Registers used:
 23440 ;;		wreg, status,2
 23441 ;; Tracked objects:
 23442 ;;		On entry : 0/0
 23443 ;;		On exit  : 0/0
 23444 ;;		Unchanged: 0/0
 23445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23450 ;;Total ram usage:        0 bytes
 23451 ;; Hardware stack levels used:    1
 23452 ;; Hardware stack levels required when called:    7
 23453 ;; This function calls:
 23454 ;;		Nothing
 23455 ;; This function is called by:
 23456 ;;		_HMI_Init
 23457 ;;		_Button_Init
 23458 ;; This function uses a non-reentrant model
 23459 ;;
 23460                           
 23461                           	psect	text107
 23462  016EE4                     __ptext107:
 23463                           	opt stack 0
 23464  016EE4                     _HMI_InitButtons:
 23465                           	opt stack 20
 23466                           
 23467                           ;HMI.c: 23: TRISE = 0xFC;
 23468                           
 23469                           ;incstack = 0
 23470  016EE4  0EFC               	movlw	252
 23471  016EE6  6E96               	movwf	3990,c	;volatile
 23472  016EE8  0012               	return		;funcret
 23473  016EEA                     __end_of_HMI_InitButtons:
 23474                           	opt stack 0
 23475                           tosu	equ	0xFFF
 23476                           tosh	equ	0xFFE
 23477                           tosl	equ	0xFFD
 23478                           pclath	equ	0xFFA
 23479                           tblptru	equ	0xFF8
 23480                           tblptrh	equ	0xFF7
 23481                           tblptrl	equ	0xFF6
 23482                           tablat	equ	0xFF5
 23483                           prodh	equ	0xFF4
 23484                           prodl	equ	0xFF3
 23485                           intcon	equ	0xFF2
 23486                           postinc0	equ	0xFEE
 23487                           wreg	equ	0xFE8
 23488                           indf1	equ	0xFE7
 23489                           postdec1	equ	0xFE5
 23490                           fsr1h	equ	0xFE2
 23491                           fsr1l	equ	0xFE1
 23492                           indf2	equ	0xFDF
 23493                           postinc2	equ	0xFDE
 23494                           postdec2	equ	0xFDD
 23495                           plusw2	equ	0xFDB
 23496                           fsr2h	equ	0xFDA
 23497                           fsr2l	equ	0xFD9
 23498                           status	equ	0xFD8
 23499                           
 23500 ;; *************** function _MXK_InitTestButton *****************
 23501 ;; Defined at:
 23502 ;;		line 10 in file "Library/MXK.c"
 23503 ;; Parameters:    Size  Location     Type
 23504 ;;		None
 23505 ;; Auto vars:     Size  Location     Type
 23506 ;;		None
 23507 ;; Return value:  Size  Location     Type
 23508 ;;                  1    wreg      void 
 23509 ;; Registers used:
 23510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23511 ;; Tracked objects:
 23512 ;;		On entry : 0/0
 23513 ;;		On exit  : 0/0
 23514 ;;		Unchanged: 0/0
 23515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;Total ram usage:        0 bytes
 23521 ;; Hardware stack levels used:    1
 23522 ;; Hardware stack levels required when called:   12
 23523 ;; This function calls:
 23524 ;;		_Port_SetPinType
 23525 ;; This function is called by:
 23526 ;;		_FunctInitButton
 23527 ;;		_Button_Init
 23528 ;; This function uses a non-reentrant model
 23529 ;;
 23530                           
 23531                           	psect	text108
 23532  016C52                     __ptext108:
 23533                           	opt stack 0
 23534  016C52                     _MXK_InitTestButton:
 23535                           	opt stack 15
 23536                           
 23537                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 23538                           
 23539                           ;incstack = 0
 23540  016C52  0EB5               	movlw	low _PortB
 23541  016C54  0100               	movlb	0	; () banked
 23542  016C56  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 23543  016C58  0E03               	movlw	high _PortB
 23544  016C5A  0100               	movlb	0	; () banked
 23545  016C5C  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23546  016C5E  0E04               	movlw	4
 23547  016C60  0100               	movlb	0	; () banked
 23548  016C62  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 23549  016C64  0E00               	movlw	0
 23550  016C66  0100               	movlb	0	; () banked
 23551  016C68  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 23552  016C6A  ECB5  F095         	call	_Port_SetPinType	;wreg free
 23553  016C6E  0012               	return		;funcret
 23554  016C70                     __end_of_MXK_InitTestButton:
 23555                           	opt stack 0
 23556                           tosu	equ	0xFFF
 23557                           tosh	equ	0xFFE
 23558                           tosl	equ	0xFFD
 23559                           pclath	equ	0xFFA
 23560                           tblptru	equ	0xFF8
 23561                           tblptrh	equ	0xFF7
 23562                           tblptrl	equ	0xFF6
 23563                           tablat	equ	0xFF5
 23564                           prodh	equ	0xFF4
 23565                           prodl	equ	0xFF3
 23566                           intcon	equ	0xFF2
 23567                           postinc0	equ	0xFEE
 23568                           wreg	equ	0xFE8
 23569                           indf1	equ	0xFE7
 23570                           postdec1	equ	0xFE5
 23571                           fsr1h	equ	0xFE2
 23572                           fsr1l	equ	0xFE1
 23573                           indf2	equ	0xFDF
 23574                           postinc2	equ	0xFDE
 23575                           postdec2	equ	0xFDD
 23576                           plusw2	equ	0xFDB
 23577                           fsr2h	equ	0xFDA
 23578                           fsr2l	equ	0xFD9
 23579                           status	equ	0xFD8
 23580                           
 23581 ;; *************** function _Port_SetPinType *****************
 23582 ;; Defined at:
 23583 ;;		line 189 in file "Library/Port.c"
 23584 ;; Parameters:    Size  Location     Type
 23585 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23586 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23587 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23588 ;;  pPin            1   40[BANK0 ] enum E6750
 23589 ;;  pType           1   41[BANK0 ] enum E6795
 23590 ;; Auto vars:     Size  Location     Type
 23591 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 23592 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 23593 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 23594 ;;  Output          1   42[BANK0 ] enum E6475
 23595 ;; Return value:  Size  Location     Type
 23596 ;;                  1    wreg      enum E6475
 23597 ;; Registers used:
 23598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23599 ;; Tracked objects:
 23600 ;;		On entry : 0/0
 23601 ;;		On exit  : 0/0
 23602 ;;		Unchanged: 0/0
 23603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23605 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23607 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23608 ;;Total ram usage:        7 bytes
 23609 ;; Hardware stack levels used:    1
 23610 ;; Hardware stack levels required when called:   11
 23611 ;; This function calls:
 23612 ;;		_Byte_SetBit
 23613 ;;		_PortProperty_Valid
 23614 ;;		_Word_SetPair
 23615 ;; This function is called by:
 23616 ;;		_Configure_GPIOs
 23617 ;;		_LED_Init
 23618 ;;		_Port_Init
 23619 ;;		_SPI_Init
 23620 ;;		_Motor_Init
 23621 ;;		_MXK_InitTestButton
 23622 ;;		_MXK_Init
 23623 ;;		_I2C_Init
 23624 ;; This function uses a non-reentrant model
 23625 ;;
 23626                           
 23627                           	psect	text109
 23628  012B6A                     __ptext109:
 23629                           	opt stack 0
 23630  012B6A                     _Port_SetPinType:
 23631                           	opt stack 17
 23632                           
 23633                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 23634                           
 23635                           ;incstack = 0
 23636  012B6A  C0DE  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 23637  012B6E  C0DF  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 23638  012B72  CFDE F0E3          	movff	postinc2,Port_SetPinType@Props
 23639  012B76  CFDD F0E4          	movff	postdec2,Port_SetPinType@Props+1
 23640                           
 23641                           ;Port.c: 192: ePinError Output = ePinErrorState;
 23642  012B7A  0E05               	movlw	5
 23643  012B7C  0100               	movlb	0	; () banked
 23644  012B7E  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 23645                           
 23646                           ;Port.c: 193: switch (pType)
 23647  012B80  D0B5               	goto	l412
 23648  012B82                     
 23649                           ; BSR set to: 0
 23650                           ;Port.c: 197: {
 23651                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23652                           
 23653                           ; BSR set to: 0
 23654  012B82  0100               	movlb	0	; () banked
 23655  012B84  EE20 F002          	lfsr	2,2
 23656  012B88  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23657  012B8A  26D9               	addwf	fsr2l,f,c
 23658  012B8C  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23659  012B8E  22DA               	addwfc	fsr2h,f,c
 23660  012B90  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23661  012B94  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23662  012B98  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23663  012B9C  0E01               	movlw	1
 23664  012B9E  0100               	movlb	0	; () banked
 23665  012BA0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23666  012BA2  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23667                           
 23668                           ;Port.c: 203: break;
 23669  012BA6  D0B0               	goto	l414
 23670  012BA8                     
 23671                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 23672  012BA8  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23673  012BAC  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23674  012BB0  0E01               	movlw	1
 23675  012BB2  0100               	movlb	0	; () banked
 23676  012BB4  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23677  012BB6  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23678  012BBA  EC5C  F0AC         	call	_PortProperty_Valid	;wreg free
 23679  012BBE  0100               	movlb	0	; () banked
 23680  012BC0  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 23681  012BC2  0100               	movlb	0	; () banked
 23682  012BC4  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 23683  012BC6  A4D8               	btfss	status,2,c
 23684  012BC8  0012               	return	
 23685                           
 23686                           ; BSR set to: 0
 23687                           ;Port.c: 208: {
 23688                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23689  012BCA  0100               	movlb	0	; () banked
 23690  012BCC  EE20 F002          	lfsr	2,2
 23691  012BD0  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23692  012BD2  26D9               	addwf	fsr2l,f,c
 23693  012BD4  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23694  012BD6  22DA               	addwfc	fsr2h,f,c
 23695  012BD8  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23696  012BDC  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23697  012BE0  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23698  012BE4  0E00               	movlw	0
 23699  012BE6  0100               	movlb	0	; () banked
 23700  012BE8  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23701  012BEA  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23702                           
 23703                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23704  012BEE  0100               	movlb	0	; () banked
 23705  012BF0  EE20 F004          	lfsr	2,4
 23706  012BF4  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23707  012BF6  26D9               	addwf	fsr2l,f,c
 23708  012BF8  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23709  012BFA  22DA               	addwfc	fsr2h,f,c
 23710  012BFC  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23711  012C00  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23712  012C04  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23713  012C08  0E00               	movlw	0
 23714  012C0A  0100               	movlb	0	; () banked
 23715  012C0C  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23716  012C0E  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23717                           
 23718                           ;Port.c: 214: break;
 23719  012C12  D07A               	goto	l414
 23720  012C14                     
 23721                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 23722                           
 23723                           ;Port.c: 218: case eTypeOutputOpenSource:
 23724  012C14  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23725  012C18  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23726  012C1C  0E02               	movlw	2
 23727  012C1E  0100               	movlb	0	; () banked
 23728  012C20  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23729  012C22  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23730  012C26  EC5C  F0AC         	call	_PortProperty_Valid	;wreg free
 23731  012C2A  0100               	movlb	0	; () banked
 23732  012C2C  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 23733  012C2E  0100               	movlb	0	; () banked
 23734  012C30  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 23735  012C32  A4D8               	btfss	status,2,c
 23736  012C34  0012               	return	
 23737                           
 23738                           ; BSR set to: 0
 23739                           ;Port.c: 220: {
 23740                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23741  012C36  0100               	movlb	0	; () banked
 23742  012C38  EE20 F002          	lfsr	2,2
 23743  012C3C  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23744  012C3E  26D9               	addwf	fsr2l,f,c
 23745  012C40  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23746  012C42  22DA               	addwfc	fsr2h,f,c
 23747  012C44  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23748  012C48  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23749  012C4C  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23750  012C50  0E01               	movlw	1
 23751  012C52  0100               	movlb	0	; () banked
 23752  012C54  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23753  012C56  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23754                           
 23755                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 23756  012C5A  0100               	movlb	0	; () banked
 23757  012C5C  EE20 F004          	lfsr	2,4
 23758  012C60  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23759  012C62  26D9               	addwf	fsr2l,f,c
 23760  012C64  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23761  012C66  22DA               	addwfc	fsr2h,f,c
 23762  012C68  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23763  012C6C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23764  012C70  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23765  012C74  0E01               	movlw	1
 23766  012C76  0100               	movlb	0	; () banked
 23767  012C78  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23768  012C7A  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23769                           
 23770                           ;Port.c: 226: break;
 23771  012C7E  D044               	goto	l414
 23772  012C80                     
 23773                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 23774                           
 23775                           ;Port.c: 230: case eTypeOutputPushPull:
 23776  012C80  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23777  012C84  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23778  012C88  0E00               	movlw	0
 23779  012C8A  0100               	movlb	0	; () banked
 23780  012C8C  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23781  012C8E  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23782  012C92  EC5C  F0AC         	call	_PortProperty_Valid	;wreg free
 23783  012C96  0100               	movlb	0	; () banked
 23784  012C98  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 23785  012C9A  0100               	movlb	0	; () banked
 23786  012C9C  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 23787  012C9E  A4D8               	btfss	status,2,c
 23788  012CA0  0012               	return	
 23789                           
 23790                           ; BSR set to: 0
 23791                           ;Port.c: 232: {
 23792                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23793  012CA2  0100               	movlb	0	; () banked
 23794  012CA4  EE20 F002          	lfsr	2,2
 23795  012CA8  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23796  012CAA  26D9               	addwf	fsr2l,f,c
 23797  012CAC  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23798  012CAE  22DA               	addwfc	fsr2h,f,c
 23799  012CB0  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23800  012CB4  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23801  012CB8  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23802  012CBC  0E00               	movlw	0
 23803  012CBE  0100               	movlb	0	; () banked
 23804  012CC0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23805  012CC2  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23806                           
 23807                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23808  012CC6  0100               	movlb	0	; () banked
 23809  012CC8  EE20 F004          	lfsr	2,4
 23810  012CCC  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 23811  012CCE  26D9               	addwf	fsr2l,f,c
 23812  012CD0  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23813  012CD2  22DA               	addwfc	fsr2h,f,c
 23814  012CD4  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 23815  012CD8  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 23816  012CDC  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23817  012CE0  0E00               	movlw	0
 23818  012CE2  0100               	movlb	0	; () banked
 23819  012CE4  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 23820  012CE6  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 23821                           
 23822                           ;Port.c: 239: }
 23823                           
 23824                           ;Port.c: 238: break;
 23825  012CEA  D00E               	goto	l414
 23826  012CEC                     l412:
 23827  012CEC  0100               	movlb	0	; () banked
 23828  012CEE  51E1               	movf	Port_SetPinType@pType& (0+255),w,b
 23829                           
 23830                           ; Switch size 1, requested type "space"
 23831                           ; Number of cases is 4, Range of values is 0 to 3
 23832                           ; switch strategies available:
 23833                           ; Name         Instructions Cycles
 23834                           ; simple_byte           13     7 (average)
 23835                           ;	Chosen strategy is simple_byte
 23836  012CF0  0A00               	xorlw	0	; case 0
 23837  012CF2  B4D8               	btfsc	status,2,c
 23838  012CF4  D746               	goto	l413
 23839  012CF6  0A01               	xorlw	1	; case 1
 23840  012CF8  B4D8               	btfsc	status,2,c
 23841  012CFA  D756               	goto	l415
 23842  012CFC  0A03               	xorlw	3	; case 2
 23843  012CFE  B4D8               	btfsc	status,2,c
 23844  012D00  D789               	goto	l417
 23845  012D02  0A01               	xorlw	1	; case 3
 23846  012D04  B4D8               	btfsc	status,2,c
 23847  012D06  D7BC               	goto	l421
 23848  012D08                     l414:
 23849                           
 23850                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 23851                           
 23852                           ; BSR set to: 0
 23853  012D08  0E08               	movlw	8
 23854  012D0A  0100               	movlb	0	; () banked
 23855  012D0C  25DE               	addwf	Port_SetPinType@pInput& (0+255),w,b
 23856  012D0E  0100               	movlb	0	; () banked
 23857  012D10  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 23858  012D12  0E00               	movlw	0
 23859  012D14  0100               	movlb	0	; () banked
 23860  012D16  21DF               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 23861  012D18  0100               	movlb	0	; () banked
 23862  012D1A  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23863  012D1C  C0E0  F0C9         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 23864  012D20  C0E1  F0CA         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 23865  012D24  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 23866  012D28  0012               	return	
 23867  012D2A                     __end_of_Port_SetPinType:
 23868                           	opt stack 0
 23869                           tosu	equ	0xFFF
 23870                           tosh	equ	0xFFE
 23871                           tosl	equ	0xFFD
 23872                           pclath	equ	0xFFA
 23873                           tblptru	equ	0xFF8
 23874                           tblptrh	equ	0xFF7
 23875                           tblptrl	equ	0xFF6
 23876                           tablat	equ	0xFF5
 23877                           prodh	equ	0xFF4
 23878                           prodl	equ	0xFF3
 23879                           intcon	equ	0xFF2
 23880                           postinc0	equ	0xFEE
 23881                           wreg	equ	0xFE8
 23882                           indf1	equ	0xFE7
 23883                           postdec1	equ	0xFE5
 23884                           fsr1h	equ	0xFE2
 23885                           fsr1l	equ	0xFE1
 23886                           indf2	equ	0xFDF
 23887                           postinc2	equ	0xFDE
 23888                           postdec2	equ	0xFDD
 23889                           plusw2	equ	0xFDB
 23890                           fsr2h	equ	0xFDA
 23891                           fsr2l	equ	0xFD9
 23892                           status	equ	0xFD8
 23893                           
 23894 ;; *************** function _Port_SetQuadType *****************
 23895 ;; Defined at:
 23896 ;;		line 399 in file "Library/Port.c"
 23897 ;; Parameters:    Size  Location     Type
 23898 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 23899 ;;		 -> PortB(10), PortD(10), 
 23900 ;;  pQuad           1   56[BANK0 ] enum E6776
 23901 ;;  pType           1   57[BANK0 ] enum E6795
 23902 ;; Auto vars:     Size  Location     Type
 23903 ;;  Output          1   58[BANK0 ] enum E6475
 23904 ;; Return value:  Size  Location     Type
 23905 ;;                  1    wreg      enum E6475
 23906 ;; Registers used:
 23907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23908 ;; Tracked objects:
 23909 ;;		On entry : 0/0
 23910 ;;		On exit  : 0/0
 23911 ;;		Unchanged: 0/0
 23912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23916 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23917 ;;Total ram usage:        5 bytes
 23918 ;; Hardware stack levels used:    1
 23919 ;; Hardware stack levels required when called:   13
 23920 ;; This function calls:
 23921 ;;		_Byte_SetQuad
 23922 ;;		_Port_CheckQuadType
 23923 ;;		_Word_SetPair
 23924 ;; This function is called by:
 23925 ;;		_MXK_InitDIPSwitch
 23926 ;;		_MXK_Init
 23927 ;; This function uses a non-reentrant model
 23928 ;;
 23929                           
 23930                           	psect	text110
 23931  011F50                     __ptext110:
 23932                           	opt stack 0
 23933  011F50                     _Port_SetQuadType:
 23934                           	opt stack 15
 23935                           
 23936                           ;Port.c: 401: ePinError Output = ePinErrorState;
 23937                           
 23938                           ;incstack = 0
 23939  011F50  0E05               	movlw	5
 23940  011F52  0100               	movlb	0	; () banked
 23941  011F54  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 23942                           
 23943                           ;Port.c: 403: switch (pType)
 23944  011F56  D0C7               	goto	l476
 23945  011F58                     
 23946                           ; BSR set to: 0
 23947                           ;Port.c: 407: {
 23948                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23949                           
 23950                           ; BSR set to: 0
 23951  011F58  0100               	movlb	0	; () banked
 23952  011F5A  EE20 F002          	lfsr	2,2
 23953  011F5E  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23954  011F60  26D9               	addwf	fsr2l,f,c
 23955  011F62  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23956  011F64  22DA               	addwfc	fsr2h,f,c
 23957  011F66  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 23958  011F6A  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 23959  011F6E  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23960  011F72  0E0F               	movlw	15
 23961  011F74  0100               	movlb	0	; () banked
 23962  011F76  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 23963  011F78  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 23964                           
 23965                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23966  011F7C  0100               	movlb	0	; () banked
 23967  011F7E  EE20 F004          	lfsr	2,4
 23968  011F82  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23969  011F84  26D9               	addwf	fsr2l,f,c
 23970  011F86  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23971  011F88  22DA               	addwfc	fsr2h,f,c
 23972  011F8A  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 23973  011F8E  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 23974  011F92  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23975  011F96  0E00               	movlw	0
 23976  011F98  0100               	movlb	0	; () banked
 23977  011F9A  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 23978  011F9C  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 23979                           
 23980                           ;Port.c: 413: }
 23981                           ;Port.c: 415: break;
 23982  011FA0  D0B0               	goto	l478
 23983  011FA2                     
 23984                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23985  011FA2  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23986  011FA6  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23987  011FAA  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23988  011FAE  0E03               	movlw	3
 23989  011FB0  0100               	movlb	0	; () banked
 23990  011FB2  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23991  011FB4  ECA1  F0B0         	call	_Port_CheckQuadType	;wreg free
 23992  011FB8  0100               	movlb	0	; () banked
 23993  011FBA  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 23994  011FBC  0100               	movlb	0	; () banked
 23995  011FBE  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 23996  011FC0  A4D8               	btfss	status,2,c
 23997  011FC2  0012               	return	
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;Port.c: 418: {
 24001                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24002  011FC4  0100               	movlb	0	; () banked
 24003  011FC6  EE20 F002          	lfsr	2,2
 24004  011FCA  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24005  011FCC  26D9               	addwf	fsr2l,f,c
 24006  011FCE  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24007  011FD0  22DA               	addwfc	fsr2h,f,c
 24008  011FD2  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24009  011FD6  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24010  011FDA  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24011  011FDE  0E00               	movlw	0
 24012  011FE0  0100               	movlb	0	; () banked
 24013  011FE2  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24014  011FE4  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24015                           
 24016                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24017  011FE8  0100               	movlb	0	; () banked
 24018  011FEA  EE20 F004          	lfsr	2,4
 24019  011FEE  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24020  011FF0  26D9               	addwf	fsr2l,f,c
 24021  011FF2  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24022  011FF4  22DA               	addwfc	fsr2h,f,c
 24023  011FF6  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24024  011FFA  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24025  011FFE  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24026  012002  0E00               	movlw	0
 24027  012004  0100               	movlb	0	; () banked
 24028  012006  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24029  012008  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24030                           
 24031                           ;Port.c: 424: }
 24032  01200C  D07A               	goto	l478
 24033  01200E                     
 24034                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24035  01200E  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24036  012012  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24037  012016  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24038  01201A  0E03               	movlw	3
 24039  01201C  0100               	movlb	0	; () banked
 24040  01201E  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24041  012020  ECA1  F0B0         	call	_Port_CheckQuadType	;wreg free
 24042  012024  0100               	movlb	0	; () banked
 24043  012026  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 24044  012028  0100               	movlb	0	; () banked
 24045  01202A  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 24046  01202C  A4D8               	btfss	status,2,c
 24047  01202E  0012               	return	
 24048                           
 24049                           ; BSR set to: 0
 24050                           ;Port.c: 429: {
 24051                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 24052  012030  0100               	movlb	0	; () banked
 24053  012032  EE20 F002          	lfsr	2,2
 24054  012036  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24055  012038  26D9               	addwf	fsr2l,f,c
 24056  01203A  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24057  01203C  22DA               	addwfc	fsr2h,f,c
 24058  01203E  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24059  012042  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24060  012046  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24061  01204A  0E0F               	movlw	15
 24062  01204C  0100               	movlb	0	; () banked
 24063  01204E  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24064  012050  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24065                           
 24066                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 24067  012054  0100               	movlb	0	; () banked
 24068  012056  EE20 F004          	lfsr	2,4
 24069  01205A  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24070  01205C  26D9               	addwf	fsr2l,f,c
 24071  01205E  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24072  012060  22DA               	addwfc	fsr2h,f,c
 24073  012062  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24074  012066  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24075  01206A  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24076  01206E  0E0F               	movlw	15
 24077  012070  0100               	movlb	0	; () banked
 24078  012072  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24079  012074  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24080                           
 24081                           ;Port.c: 435: }
 24082  012078  D044               	goto	l478
 24083  01207A                     
 24084                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24085  01207A  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24086  01207E  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24087  012082  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24088  012086  0E03               	movlw	3
 24089  012088  0100               	movlb	0	; () banked
 24090  01208A  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24091  01208C  ECA1  F0B0         	call	_Port_CheckQuadType	;wreg free
 24092  012090  0100               	movlb	0	; () banked
 24093  012092  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 24094  012094  0100               	movlb	0	; () banked
 24095  012096  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 24096  012098  A4D8               	btfss	status,2,c
 24097  01209A  0012               	return	
 24098                           
 24099                           ; BSR set to: 0
 24100                           ;Port.c: 440: {
 24101                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24102  01209C  0100               	movlb	0	; () banked
 24103  01209E  EE20 F002          	lfsr	2,2
 24104  0120A2  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24105  0120A4  26D9               	addwf	fsr2l,f,c
 24106  0120A6  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24107  0120A8  22DA               	addwfc	fsr2h,f,c
 24108  0120AA  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24109  0120AE  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24110  0120B2  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24111  0120B6  0E00               	movlw	0
 24112  0120B8  0100               	movlb	0	; () banked
 24113  0120BA  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24114  0120BC  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24115                           
 24116                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24117  0120C0  0100               	movlb	0	; () banked
 24118  0120C2  EE20 F004          	lfsr	2,4
 24119  0120C6  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24120  0120C8  26D9               	addwf	fsr2l,f,c
 24121  0120CA  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24122  0120CC  22DA               	addwfc	fsr2h,f,c
 24123  0120CE  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 24124  0120D2  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 24125  0120D6  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24126  0120DA  0E00               	movlw	0
 24127  0120DC  0100               	movlb	0	; () banked
 24128  0120DE  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 24129  0120E0  ECAE  F0B5         	call	_Byte_SetQuad	;wreg free
 24130                           
 24131                           ;Port.c: 446: }
 24132  0120E4  D00E               	goto	l478
 24133  0120E6                     l476:
 24134  0120E6  0100               	movlb	0	; () banked
 24135  0120E8  51F1               	movf	Port_SetQuadType@pType& (0+255),w,b
 24136                           
 24137                           ; Switch size 1, requested type "space"
 24138                           ; Number of cases is 4, Range of values is 0 to 3
 24139                           ; switch strategies available:
 24140                           ; Name         Instructions Cycles
 24141                           ; simple_byte           13     7 (average)
 24142                           ;	Chosen strategy is simple_byte
 24143  0120EA  0A00               	xorlw	0	; case 0
 24144  0120EC  B4D8               	btfsc	status,2,c
 24145  0120EE  D734               	goto	l477
 24146  0120F0  0A01               	xorlw	1	; case 1
 24147  0120F2  B4D8               	btfsc	status,2,c
 24148  0120F4  D756               	goto	l479
 24149  0120F6  0A03               	xorlw	3	; case 2
 24150  0120F8  B4D8               	btfsc	status,2,c
 24151  0120FA  D789               	goto	l483
 24152  0120FC  0A01               	xorlw	1	; case 3
 24153  0120FE  B4D8               	btfsc	status,2,c
 24154  012100  D7BC               	goto	l486
 24155  012102                     l478:
 24156                           
 24157                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 24158                           
 24159                           ; BSR set to: 0
 24160  012102  0E08               	movlw	8
 24161  012104  0100               	movlb	0	; () banked
 24162  012106  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24163  012108  0100               	movlb	0	; () banked
 24164  01210A  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 24165  01210C  0E00               	movlw	0
 24166  01210E  0100               	movlb	0	; () banked
 24167  012110  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24168  012112  0100               	movlb	0	; () banked
 24169  012114  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24170  012116  0100               	movlb	0	; () banked
 24171  012118  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24172  01211A  0D04               	mullw	4
 24173  01211C  CFF3 F0C9          	movff	prodl,Word_SetPair@pPair
 24174  012120  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24175  012124  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 24176                           
 24177                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 24178  012128  0E08               	movlw	8
 24179  01212A  0100               	movlb	0	; () banked
 24180  01212C  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24181  01212E  0100               	movlb	0	; () banked
 24182  012130  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 24183  012132  0E00               	movlw	0
 24184  012134  0100               	movlb	0	; () banked
 24185  012136  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24186  012138  0100               	movlb	0	; () banked
 24187  01213A  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24188  01213C  0100               	movlb	0	; () banked
 24189  01213E  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24190  012140  0D04               	mullw	4
 24191  012142  28F3               	incf	prodl,w,c
 24192  012144  0100               	movlb	0	; () banked
 24193  012146  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 24194  012148  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24195  01214C  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 24196                           
 24197                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 24198  012150  0E08               	movlw	8
 24199  012152  0100               	movlb	0	; () banked
 24200  012154  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24201  012156  0100               	movlb	0	; () banked
 24202  012158  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 24203  01215A  0E00               	movlw	0
 24204  01215C  0100               	movlb	0	; () banked
 24205  01215E  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24206  012160  0100               	movlb	0	; () banked
 24207  012162  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24208  012164  0100               	movlb	0	; () banked
 24209  012166  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24210  012168  0D04               	mullw	4
 24211  01216A  50F3               	movf	prodl,w,c
 24212  01216C  0F02               	addlw	2
 24213  01216E  0100               	movlb	0	; () banked
 24214  012170  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 24215  012172  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24216  012176  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 24217                           
 24218                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 24219  01217A  0E08               	movlw	8
 24220  01217C  0100               	movlb	0	; () banked
 24221  01217E  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24222  012180  0100               	movlb	0	; () banked
 24223  012182  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 24224  012184  0E00               	movlw	0
 24225  012186  0100               	movlb	0	; () banked
 24226  012188  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24227  01218A  0100               	movlb	0	; () banked
 24228  01218C  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24229  01218E  0100               	movlb	0	; () banked
 24230  012190  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24231  012192  0D04               	mullw	4
 24232  012194  50F3               	movf	prodl,w,c
 24233  012196  0F03               	addlw	3
 24234  012198  0100               	movlb	0	; () banked
 24235  01219A  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 24236  01219C  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24237  0121A0  EC9E  F0B2         	call	_Word_SetPair	;wreg free
 24238  0121A4  0012               	return	
 24239  0121A6                     __end_of_Port_SetQuadType:
 24240                           	opt stack 0
 24241                           tosu	equ	0xFFF
 24242                           tosh	equ	0xFFE
 24243                           tosl	equ	0xFFD
 24244                           pclath	equ	0xFFA
 24245                           tblptru	equ	0xFF8
 24246                           tblptrh	equ	0xFF7
 24247                           tblptrl	equ	0xFF6
 24248                           tablat	equ	0xFF5
 24249                           prodh	equ	0xFF4
 24250                           prodl	equ	0xFF3
 24251                           intcon	equ	0xFF2
 24252                           postinc0	equ	0xFEE
 24253                           wreg	equ	0xFE8
 24254                           indf1	equ	0xFE7
 24255                           postdec1	equ	0xFE5
 24256                           fsr1h	equ	0xFE2
 24257                           fsr1l	equ	0xFE1
 24258                           indf2	equ	0xFDF
 24259                           postinc2	equ	0xFDE
 24260                           postdec2	equ	0xFDD
 24261                           plusw2	equ	0xFDB
 24262                           fsr2h	equ	0xFDA
 24263                           fsr2l	equ	0xFD9
 24264                           status	equ	0xFD8
 24265                           
 24266 ;; *************** function _Word_SetPair *****************
 24267 ;; Defined at:
 24268 ;;		line 149 in file "Library/Types.c"
 24269 ;; Parameters:    Size  Location     Type
 24270 ;;  pInput          2   15[BANK0 ] PTR struct Word
 24271 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24272 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24273 ;;  pPair           1   17[BANK0 ] unsigned char 
 24274 ;;  pValue          1   18[BANK0 ] unsigned char 
 24275 ;; Auto vars:     Size  Location     Type
 24276 ;;		None
 24277 ;; Return value:  Size  Location     Type
 24278 ;;                  1    wreg      void 
 24279 ;; Registers used:
 24280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24281 ;; Tracked objects:
 24282 ;;		On entry : 0/0
 24283 ;;		On exit  : 0/0
 24284 ;;		Unchanged: 0/0
 24285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24289 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24290 ;;Total ram usage:        4 bytes
 24291 ;; Hardware stack levels used:    1
 24292 ;; Hardware stack levels required when called:    9
 24293 ;; This function calls:
 24294 ;;		_Byte_SetPair
 24295 ;; This function is called by:
 24296 ;;		_Port_SetPinType
 24297 ;;		_Port_SetQuadType
 24298 ;;		_Port_SetType
 24299 ;;		_Port_SetPairType
 24300 ;;		_PortProperty_Init
 24301 ;; This function uses a non-reentrant model
 24302 ;;
 24303                           
 24304                           	psect	text111
 24305  01653C                     __ptext111:
 24306                           	opt stack 0
 24307  01653C                     _Word_SetPair:
 24308                           	opt stack 18
 24309                           
 24310                           ;Types.c: 151: if (pPair >= 4)
 24311                           
 24312                           ;incstack = 0
 24313  01653C  0E03               	movlw	3
 24314  01653E  0100               	movlb	0	; () banked
 24315  016540  65C9               	cpfsgt	Word_SetPair@pPair& (0+255),b
 24316  016542  D014               	goto	l776
 24317                           
 24318                           ; BSR set to: 0
 24319                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 24320  016544  0E01               	movlw	1
 24321  016546  0100               	movlb	0	; () banked
 24322  016548  25C7               	addwf	Word_SetPair@pInput& (0+255),w,b
 24323  01654A  0100               	movlb	0	; () banked
 24324  01654C  6FC3               	movwf	Byte_SetPair@pInput& (0+255),b
 24325  01654E  0E00               	movlw	0
 24326  016550  0100               	movlb	0	; () banked
 24327  016552  21C8               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 24328  016554  0100               	movlb	0	; () banked
 24329  016556  6FC4               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 24330  016558  0100               	movlb	0	; () banked
 24331  01655A  51C9               	movf	Word_SetPair@pPair& (0+255),w,b
 24332  01655C  0FFC               	addlw	252
 24333  01655E  0100               	movlb	0	; () banked
 24334  016560  6FC5               	movwf	Byte_SetPair@pPair& (0+255),b
 24335  016562  C0CA  F0C6         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24336  016566  EC9D  F0B5         	call	_Byte_SetPair	;wreg free
 24337  01656A  0012               	return	
 24338  01656C                     l776:
 24339                           
 24340                           ;Types.c: 153: else
 24341                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 24342  01656C  C0C7  F0C3         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 24343  016570  C0C8  F0C4         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 24344  016574  C0C9  F0C5         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 24345  016578  C0CA  F0C6         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24346  01657C  EC9D  F0B5         	call	_Byte_SetPair	;wreg free
 24347  016580  0012               	return	
 24348  016582                     __end_of_Word_SetPair:
 24349                           	opt stack 0
 24350                           tosu	equ	0xFFF
 24351                           tosh	equ	0xFFE
 24352                           tosl	equ	0xFFD
 24353                           pclath	equ	0xFFA
 24354                           tblptru	equ	0xFF8
 24355                           tblptrh	equ	0xFF7
 24356                           tblptrl	equ	0xFF6
 24357                           tablat	equ	0xFF5
 24358                           prodh	equ	0xFF4
 24359                           prodl	equ	0xFF3
 24360                           intcon	equ	0xFF2
 24361                           postinc0	equ	0xFEE
 24362                           wreg	equ	0xFE8
 24363                           indf1	equ	0xFE7
 24364                           postdec1	equ	0xFE5
 24365                           fsr1h	equ	0xFE2
 24366                           fsr1l	equ	0xFE1
 24367                           indf2	equ	0xFDF
 24368                           postinc2	equ	0xFDE
 24369                           postdec2	equ	0xFDD
 24370                           plusw2	equ	0xFDB
 24371                           fsr2h	equ	0xFDA
 24372                           fsr2l	equ	0xFD9
 24373                           status	equ	0xFD8
 24374                           
 24375 ;; *************** function _Byte_SetPair *****************
 24376 ;; Defined at:
 24377 ;;		line 83 in file "Library/Types.c"
 24378 ;; Parameters:    Size  Location     Type
 24379 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24380 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24381 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24382 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 24383 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 24384 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 24385 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 24386 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 24387 ;;		 -> NULL(0), 
 24388 ;;  pPair           1   13[BANK0 ] unsigned char 
 24389 ;;  pValue          1   14[BANK0 ] unsigned char 
 24390 ;; Auto vars:     Size  Location     Type
 24391 ;;		None
 24392 ;; Return value:  Size  Location     Type
 24393 ;;                  1    wreg      void 
 24394 ;; Registers used:
 24395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24396 ;; Tracked objects:
 24397 ;;		On entry : 0/0
 24398 ;;		On exit  : 0/0
 24399 ;;		Unchanged: 0/0
 24400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24404 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24405 ;;Total ram usage:        4 bytes
 24406 ;; Hardware stack levels used:    1
 24407 ;; Hardware stack levels required when called:    8
 24408 ;; This function calls:
 24409 ;;		_Byte_SetZone
 24410 ;; This function is called by:
 24411 ;;		_Word_SetPair
 24412 ;;		_Port_SetPairType
 24413 ;;		_Port_SetPair
 24414 ;; This function uses a non-reentrant model
 24415 ;;
 24416                           
 24417                           	psect	text112
 24418  016B3A                     __ptext112:
 24419                           	opt stack 0
 24420  016B3A                     _Byte_SetPair:
 24421                           	opt stack 18
 24422                           
 24423                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 24424                           
 24425                           ;incstack = 0
 24426  016B3A  C0C3  F0B8         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 24427  016B3E  C0C4  F0B9         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 24428  016B42  0E04               	movlw	4
 24429  016B44  0100               	movlb	0	; () banked
 24430  016B46  6FBA               	movwf	Byte_SetZone@pMax& (0+255),b
 24431  016B48  C0C5  F0BB         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 24432  016B4C  0E02               	movlw	2
 24433  016B4E  0100               	movlb	0	; () banked
 24434  016B50  6FBC               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24435  016B52  C0C6  F0BD         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 24436  016B56  ECEE  F0A5         	call	_Byte_SetZone	;wreg free
 24437  016B5A  0012               	return		;funcret
 24438  016B5C                     __end_of_Byte_SetPair:
 24439                           	opt stack 0
 24440                           tosu	equ	0xFFF
 24441                           tosh	equ	0xFFE
 24442                           tosl	equ	0xFFD
 24443                           pclath	equ	0xFFA
 24444                           tblptru	equ	0xFF8
 24445                           tblptrh	equ	0xFF7
 24446                           tblptrl	equ	0xFF6
 24447                           tablat	equ	0xFF5
 24448                           prodh	equ	0xFF4
 24449                           prodl	equ	0xFF3
 24450                           intcon	equ	0xFF2
 24451                           postinc0	equ	0xFEE
 24452                           wreg	equ	0xFE8
 24453                           indf1	equ	0xFE7
 24454                           postdec1	equ	0xFE5
 24455                           fsr1h	equ	0xFE2
 24456                           fsr1l	equ	0xFE1
 24457                           indf2	equ	0xFDF
 24458                           postinc2	equ	0xFDE
 24459                           postdec2	equ	0xFDD
 24460                           plusw2	equ	0xFDB
 24461                           fsr2h	equ	0xFDA
 24462                           fsr2l	equ	0xFD9
 24463                           status	equ	0xFD8
 24464                           
 24465 ;; *************** function _Port_CheckQuadType *****************
 24466 ;; Defined at:
 24467 ;;		line 126 in file "Library/Port.c"
 24468 ;; Parameters:    Size  Location     Type
 24469 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 24470 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24471 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24472 ;;  pQuad           1   49[BANK0 ] enum E6776
 24473 ;;  pDrive          1   50[BANK0 ] enum E6469
 24474 ;; Auto vars:     Size  Location     Type
 24475 ;;  Output          1   53[BANK0 ] enum E6475
 24476 ;;  Pair2           1   52[BANK0 ] enum E6760
 24477 ;;  Pair1           1   51[BANK0 ] enum E6760
 24478 ;; Return value:  Size  Location     Type
 24479 ;;                  1    wreg      enum E6475
 24480 ;; Registers used:
 24481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24482 ;; Tracked objects:
 24483 ;;		On entry : 0/0
 24484 ;;		On exit  : 0/0
 24485 ;;		Unchanged: 0/0
 24486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24488 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24490 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24491 ;;Total ram usage:        7 bytes
 24492 ;; Hardware stack levels used:    1
 24493 ;; Hardware stack levels required when called:   12
 24494 ;; This function calls:
 24495 ;;		_Port_CheckPairType
 24496 ;; This function is called by:
 24497 ;;		_Port_CheckPortType
 24498 ;;		_Port_SetQuadType
 24499 ;; This function uses a non-reentrant model
 24500 ;;
 24501                           
 24502                           	psect	text113
 24503  016142                     __ptext113:
 24504                           	opt stack 0
 24505  016142                     _Port_CheckQuadType:
 24506                           	opt stack 14
 24507                           
 24508                           ;Port.c: 128: ePinError Output = ePinErrorState;
 24509                           
 24510                           ;incstack = 0
 24511  016142  0E05               	movlw	5
 24512  016144  0100               	movlb	0	; () banked
 24513  016146  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 24514                           
 24515                           ; BSR set to: 0
 24516                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 24517  016148  0100               	movlb	0	; () banked
 24518  01614A  51E9               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24519  01614C  0D02               	mullw	2
 24520  01614E  CFF3 F0EB          	movff	prodl,Port_CheckQuadType@Pair1
 24521                           
 24522                           ; BSR set to: 0
 24523                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 24524  016152  0100               	movlb	0	; () banked
 24525  016154  51E9               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24526  016156  0D02               	mullw	2
 24527  016158  28F3               	incf	prodl,w,c
 24528  01615A  0100               	movlb	0	; () banked
 24529  01615C  6FEC               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 24530                           
 24531                           ; BSR set to: 0
 24532                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 24533  01615E  C0E7  F0DE         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24534  016162  C0E8  F0DF         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24535  016166  C0EB  F0E0         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 24536  01616A  C0EA  F0E1         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24537  01616E  EC44  F0AF         	call	_Port_CheckPairType	;wreg free
 24538  016172  0100               	movlb	0	; () banked
 24539  016174  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 24540  016176  0100               	movlb	0	; () banked
 24541  016178  51ED               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24542  01617A  A4D8               	btfss	status,2,c
 24543  01617C  D00C               	goto	l393
 24544                           
 24545                           ; BSR set to: 0
 24546                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 24547  01617E  C0E7  F0DE         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24548  016182  C0E8  F0DF         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24549  016186  C0EC  F0E0         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 24550  01618A  C0EA  F0E1         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24551  01618E  EC44  F0AF         	call	_Port_CheckPairType	;wreg free
 24552  016192  0100               	movlb	0	; () banked
 24553  016194  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 24554  016196                     l393:
 24555                           
 24556                           ; BSR set to: 0
 24557                           ;Port.c: 136: return Output;
 24558                           
 24559                           ; BSR set to: 0
 24560  016196  0100               	movlb	0	; () banked
 24561  016198  51ED               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24562  01619A  0012               	return	
 24563  01619C                     __end_of_Port_CheckQuadType:
 24564                           	opt stack 0
 24565                           tosu	equ	0xFFF
 24566                           tosh	equ	0xFFE
 24567                           tosl	equ	0xFFD
 24568                           pclath	equ	0xFFA
 24569                           tblptru	equ	0xFF8
 24570                           tblptrh	equ	0xFF7
 24571                           tblptrl	equ	0xFF6
 24572                           tablat	equ	0xFF5
 24573                           prodh	equ	0xFF4
 24574                           prodl	equ	0xFF3
 24575                           intcon	equ	0xFF2
 24576                           postinc0	equ	0xFEE
 24577                           wreg	equ	0xFE8
 24578                           indf1	equ	0xFE7
 24579                           postdec1	equ	0xFE5
 24580                           fsr1h	equ	0xFE2
 24581                           fsr1l	equ	0xFE1
 24582                           indf2	equ	0xFDF
 24583                           postinc2	equ	0xFDE
 24584                           postdec2	equ	0xFDD
 24585                           plusw2	equ	0xFDB
 24586                           fsr2h	equ	0xFDA
 24587                           fsr2l	equ	0xFD9
 24588                           status	equ	0xFD8
 24589                           
 24590 ;; *************** function _Port_CheckPairType *****************
 24591 ;; Defined at:
 24592 ;;		line 112 in file "Library/Port.c"
 24593 ;; Parameters:    Size  Location     Type
 24594 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24595 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24596 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24597 ;;  pPair           1   40[BANK0 ] enum E6760
 24598 ;;  pDrive          1   41[BANK0 ] enum E6469
 24599 ;; Auto vars:     Size  Location     Type
 24600 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 24601 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24602 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24603 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24604 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24605 ;;  Output          1   44[BANK0 ] enum E6475
 24606 ;;  Pin2            1   43[BANK0 ] enum E6750
 24607 ;;  Pin1            1   42[BANK0 ] enum E6750
 24608 ;; Return value:  Size  Location     Type
 24609 ;;                  1    wreg      enum E6475
 24610 ;; Registers used:
 24611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24612 ;; Tracked objects:
 24613 ;;		On entry : 0/0
 24614 ;;		On exit  : 0/0
 24615 ;;		Unchanged: 0/0
 24616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24618 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24620 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24621 ;;Total ram usage:        9 bytes
 24622 ;; Hardware stack levels used:    1
 24623 ;; Hardware stack levels required when called:   11
 24624 ;; This function calls:
 24625 ;;		_PortProperty_Valid
 24626 ;; This function is called by:
 24627 ;;		_Port_CheckQuadType
 24628 ;;		_Port_SetPairType
 24629 ;; This function uses a non-reentrant model
 24630 ;;
 24631                           
 24632                           	psect	text114
 24633  015E88                     __ptext114:
 24634                           	opt stack 0
 24635  015E88                     _Port_CheckPairType:
 24636                           	opt stack 14
 24637                           
 24638                           ;Port.c: 114: ePinError Output = ePinErrorState;
 24639                           
 24640                           ; BSR set to: 0
 24641                           ;incstack = 0
 24642  015E88  0E05               	movlw	5
 24643  015E8A  0100               	movlb	0	; () banked
 24644  015E8C  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 24645                           
 24646                           ; BSR set to: 0
 24647                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 24648  015E8E  C0DE  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 24649  015E92  C0DF  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 24650  015E96  CFDE F0E5          	movff	postinc2,Port_CheckPairType@Props
 24651  015E9A  CFDD F0E6          	movff	postdec2,Port_CheckPairType@Props+1
 24652                           
 24653                           ; BSR set to: 0
 24654                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 24655  015E9E  0100               	movlb	0	; () banked
 24656  015EA0  51E0               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24657  015EA2  0D02               	mullw	2
 24658  015EA4  CFF3 F0E2          	movff	prodl,Port_CheckPairType@Pin1
 24659                           
 24660                           ; BSR set to: 0
 24661                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 24662  015EA8  0100               	movlb	0	; () banked
 24663  015EAA  51E0               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24664  015EAC  0D02               	mullw	2
 24665  015EAE  28F3               	incf	prodl,w,c
 24666  015EB0  0100               	movlb	0	; () banked
 24667  015EB2  6FE3               	movwf	Port_CheckPairType@Pin2& (0+255),b
 24668                           
 24669                           ; BSR set to: 0
 24670                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 24671  015EB4  C0E5  F0C7         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24672  015EB8  C0E6  F0C8         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24673  015EBC  C0E1  F0C9         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24674  015EC0  C0E2  F0CA         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 24675  015EC4  EC5C  F0AC         	call	_PortProperty_Valid	;wreg free
 24676  015EC8  0100               	movlb	0	; () banked
 24677  015ECA  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 24678  015ECC  0100               	movlb	0	; () banked
 24679  015ECE  51E4               	movf	Port_CheckPairType@Output& (0+255),w,b
 24680  015ED0  A4D8               	btfss	status,2,c
 24681  015ED2  D00C               	goto	l389
 24682                           
 24683                           ; BSR set to: 0
 24684                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 24685  015ED4  C0E5  F0C7         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24686  015ED8  C0E6  F0C8         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24687  015EDC  C0E1  F0C9         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24688  015EE0  C0E3  F0CA         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 24689  015EE4  EC5C  F0AC         	call	_PortProperty_Valid	;wreg free
 24690  015EE8  0100               	movlb	0	; () banked
 24691  015EEA  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 24692  015EEC                     l389:
 24693                           
 24694                           ; BSR set to: 0
 24695                           ;Port.c: 124: return Output;
 24696                           
 24697                           ; BSR set to: 0
 24698  015EEC  0100               	movlb	0	; () banked
 24699  015EEE  51E4               	movf	Port_CheckPairType@Output& (0+255),w,b
 24700  015EF0  0012               	return	
 24701  015EF2                     __end_of_Port_CheckPairType:
 24702                           	opt stack 0
 24703                           tosu	equ	0xFFF
 24704                           tosh	equ	0xFFE
 24705                           tosl	equ	0xFFD
 24706                           pclath	equ	0xFFA
 24707                           tblptru	equ	0xFF8
 24708                           tblptrh	equ	0xFF7
 24709                           tblptrl	equ	0xFF6
 24710                           tablat	equ	0xFF5
 24711                           prodh	equ	0xFF4
 24712                           prodl	equ	0xFF3
 24713                           intcon	equ	0xFF2
 24714                           postinc0	equ	0xFEE
 24715                           wreg	equ	0xFE8
 24716                           indf1	equ	0xFE7
 24717                           postdec1	equ	0xFE5
 24718                           fsr1h	equ	0xFE2
 24719                           fsr1l	equ	0xFE1
 24720                           indf2	equ	0xFDF
 24721                           postinc2	equ	0xFDE
 24722                           postdec2	equ	0xFDD
 24723                           plusw2	equ	0xFDB
 24724                           fsr2h	equ	0xFDA
 24725                           fsr2l	equ	0xFD9
 24726                           status	equ	0xFD8
 24727                           
 24728 ;; *************** function _PortProperty_Valid *****************
 24729 ;; Defined at:
 24730 ;;		line 220 in file "Library/Types.c"
 24731 ;; Parameters:    Size  Location     Type
 24732 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 24733 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24734 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24735 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24736 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24737 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 24738 ;;  pPin            1   18[BANK0 ] unsigned char 
 24739 ;; Auto vars:     Size  Location     Type
 24740 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 24741 ;;  Pair            1   37[BANK0 ] enum E6469
 24742 ;; Return value:  Size  Location     Type
 24743 ;;                  1    wreg      enum E6475
 24744 ;; Registers used:
 24745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24746 ;; Tracked objects:
 24747 ;;		On entry : 0/0
 24748 ;;		On exit  : 0/0
 24749 ;;		Unchanged: 0/0
 24750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24751 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24752 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24754 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24755 ;;Total ram usage:       23 bytes
 24756 ;; Hardware stack levels used:    1
 24757 ;; Hardware stack levels required when called:   10
 24758 ;; This function calls:
 24759 ;;		_Word_GetPair
 24760 ;; This function is called by:
 24761 ;;		_Port_CheckPairType
 24762 ;;		_Port_SetPinType
 24763 ;; This function uses a non-reentrant model
 24764 ;;
 24765                           
 24766                           	psect	text115
 24767  0158B8                     __ptext115:
 24768                           	opt stack 0
 24769  0158B8                     _PortProperty_Valid:
 24770                           	opt stack 17
 24771                           
 24772                           ;Types.c: 222: ePinDrive Pair;
 24773                           ;Types.c: 223: const ePinError Errors[4][4] =
 24774                           ;Types.c: 224: {
 24775                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 24776                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 24777                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 24778                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 24779                           ;Types.c: 230: };
 24780                           
 24781                           ; BSR set to: 0
 24782                           ;incstack = 0
 24783  0158B8  0EF5               	movlw	low PortProperty_Valid@F6830
 24784  0158BA  6EF6               	movwf	tblptrl,c
 24785  0158BC                     	if	1	;There is more than 1 active tblptr byte
 24786  0158BC  0EFC               	movlw	high PortProperty_Valid@F6830
 24787  0158BE  6EF7               	movwf	tblptrh,c
 24788  0158C0                     	endif
 24789  0158C0                     	if	1	;There are 3 active tblptr bytes
 24790  0158C0  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 24791  0158C2  6EF8               	movwf	tblptru,c
 24792  0158C4                     	endif
 24793  0158C4  EE20  F0CD         	lfsr	2,PortProperty_Valid@Errors
 24794  0158C8  0E0F               	movlw	15
 24795  0158CA                     u9280:
 24796  0158CA  0009               	tblrd		*+
 24797  0158CC  CFF5 FFDE          	movff	tablat,postinc2
 24798  0158D0  06E8               	decf	wreg,f,c
 24799  0158D2  E2FB               	bc	u9280
 24800                           
 24801                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 24802  0158D4  C0C7  F0C4         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 24803  0158D8  C0C8  F0C5         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 24804  0158DC  C0CA  F0C6         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 24805  0158E0  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 24806  0158E4  0100               	movlb	0	; () banked
 24807  0158E6  6FDD               	movwf	PortProperty_Valid@Pair& (0+255),b
 24808                           
 24809                           ; BSR set to: 0
 24810                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 24811  0158E8  0E04               	movlw	4
 24812  0158EA  0100               	movlb	0	; () banked
 24813  0158EC  61C9               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 24814  0158EE  D020               	goto	l819
 24815                           
 24816                           ; BSR set to: 0
 24817  0158F0  0E04               	movlw	4
 24818  0158F2  0100               	movlb	0	; () banked
 24819  0158F4  61DD               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 24820  0158F6  D01C               	goto	l819
 24821                           
 24822                           ; BSR set to: 0
 24823                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 24824  0158F8  0100               	movlb	0	; () banked
 24825  0158FA  51C9               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 24826  0158FC  0D04               	mullw	4
 24827  0158FE  0ECD               	movlw	low PortProperty_Valid@Errors
 24828  015900  0100               	movlb	0	; () banked
 24829  015902  6FCB               	movwf	??_PortProperty_Valid& (0+255),b
 24830  015904  0E00               	movlw	high PortProperty_Valid@Errors
 24831  015906  0100               	movlb	0	; () banked
 24832  015908  6FCC               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 24833  01590A  50F3               	movf	prodl,w,c
 24834  01590C  0100               	movlb	0	; () banked
 24835  01590E  27CB               	addwf	??_PortProperty_Valid& (0+255),f,b
 24836  015910  50F4               	movf	prodh,w,c
 24837  015912  0100               	movlb	0	; () banked
 24838  015914  23CC               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 24839  015916  0100               	movlb	0	; () banked
 24840  015918  51DD               	movf	PortProperty_Valid@Pair& (0+255),w,b
 24841  01591A  0D01               	mullw	1
 24842  01591C  50F3               	movf	prodl,w,c
 24843  01591E  0100               	movlb	0	; () banked
 24844  015920  25CB               	addwf	??_PortProperty_Valid& (0+255),w,b
 24845  015922  6ED9               	movwf	fsr2l,c
 24846  015924  50F4               	movf	prodh,w,c
 24847  015926  0100               	movlb	0	; () banked
 24848  015928  21CC               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 24849  01592A  6EDA               	movwf	fsr2h,c
 24850  01592C  50DF               	movf	indf2,w,c
 24851                           
 24852                           ; BSR set to: 0
 24853  01592E  0012               	return	
 24854  015930                     l819:
 24855                           
 24856                           ; BSR set to: 0
 24857                           ;Types.c: 237: return ePinErrorState;
 24858                           
 24859                           ; BSR set to: 0
 24860  015930  0E05               	movlw	5
 24861  015932  0012               	return	
 24862  015934                     __end_of_PortProperty_Valid:
 24863                           	opt stack 0
 24864                           tosu	equ	0xFFF
 24865                           tosh	equ	0xFFE
 24866                           tosl	equ	0xFFD
 24867                           pclath	equ	0xFFA
 24868                           tblptru	equ	0xFF8
 24869                           tblptrh	equ	0xFF7
 24870                           tblptrl	equ	0xFF6
 24871                           tablat	equ	0xFF5
 24872                           prodh	equ	0xFF4
 24873                           prodl	equ	0xFF3
 24874                           intcon	equ	0xFF2
 24875                           postinc0	equ	0xFEE
 24876                           wreg	equ	0xFE8
 24877                           indf1	equ	0xFE7
 24878                           postdec1	equ	0xFE5
 24879                           fsr1h	equ	0xFE2
 24880                           fsr1l	equ	0xFE1
 24881                           indf2	equ	0xFDF
 24882                           postinc2	equ	0xFDE
 24883                           postdec2	equ	0xFDD
 24884                           plusw2	equ	0xFDB
 24885                           fsr2h	equ	0xFDA
 24886                           fsr2l	equ	0xFD9
 24887                           status	equ	0xFD8
 24888                           
 24889 ;; *************** function _Byte_SetQuad *****************
 24890 ;; Defined at:
 24891 ;;		line 101 in file "Library/Types.c"
 24892 ;; Parameters:    Size  Location     Type
 24893 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24894 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 24895 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24896 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24897 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24898 ;;		 -> NULL(0), 
 24899 ;;  pQuad           1   13[BANK0 ] unsigned char 
 24900 ;;  pValue          1   14[BANK0 ] unsigned char 
 24901 ;; Auto vars:     Size  Location     Type
 24902 ;;		None
 24903 ;; Return value:  Size  Location     Type
 24904 ;;                  1    wreg      void 
 24905 ;; Registers used:
 24906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24907 ;; Tracked objects:
 24908 ;;		On entry : 0/0
 24909 ;;		On exit  : 0/0
 24910 ;;		Unchanged: 0/0
 24911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24912 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24915 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24916 ;;Total ram usage:        4 bytes
 24917 ;; Hardware stack levels used:    1
 24918 ;; Hardware stack levels required when called:    8
 24919 ;; This function calls:
 24920 ;;		_Byte_SetZone
 24921 ;; This function is called by:
 24922 ;;		_Port_SetQuadType
 24923 ;;		_SPI_Init
 24924 ;;		_SPI_MinSpeed
 24925 ;;		_SPI_MaxSpeed
 24926 ;;		_Port_SetQuad
 24927 ;;		_Word_SetQuad
 24928 ;;		_I2C_Init
 24929 ;; This function uses a non-reentrant model
 24930 ;;
 24931                           
 24932                           	psect	text116
 24933  016B5C                     __ptext116:
 24934                           	opt stack 0
 24935  016B5C                     _Byte_SetQuad:
 24936                           	opt stack 19
 24937                           
 24938                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 24939                           
 24940                           ; BSR set to: 0
 24941                           ;incstack = 0
 24942  016B5C  C0C3  F0B8         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 24943  016B60  C0C4  F0B9         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 24944  016B64  0E02               	movlw	2
 24945  016B66  0100               	movlb	0	; () banked
 24946  016B68  6FBA               	movwf	Byte_SetZone@pMax& (0+255),b
 24947  016B6A  C0C5  F0BB         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 24948  016B6E  0E04               	movlw	4
 24949  016B70  0100               	movlb	0	; () banked
 24950  016B72  6FBC               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24951  016B74  C0C6  F0BD         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 24952  016B78  ECEE  F0A5         	call	_Byte_SetZone	;wreg free
 24953  016B7C  0012               	return		;funcret
 24954  016B7E                     __end_of_Byte_SetQuad:
 24955                           	opt stack 0
 24956                           tosu	equ	0xFFF
 24957                           tosh	equ	0xFFE
 24958                           tosl	equ	0xFFD
 24959                           pclath	equ	0xFFA
 24960                           tblptru	equ	0xFF8
 24961                           tblptrh	equ	0xFF7
 24962                           tblptrl	equ	0xFF6
 24963                           tablat	equ	0xFF5
 24964                           prodh	equ	0xFF4
 24965                           prodl	equ	0xFF3
 24966                           intcon	equ	0xFF2
 24967                           postinc0	equ	0xFEE
 24968                           wreg	equ	0xFE8
 24969                           indf1	equ	0xFE7
 24970                           postdec1	equ	0xFE5
 24971                           fsr1h	equ	0xFE2
 24972                           fsr1l	equ	0xFE1
 24973                           indf2	equ	0xFDF
 24974                           postinc2	equ	0xFDE
 24975                           postdec2	equ	0xFDD
 24976                           plusw2	equ	0xFDB
 24977                           fsr2h	equ	0xFDA
 24978                           fsr2l	equ	0xFD9
 24979                           status	equ	0xFD8
 24980                           
 24981 ;; *************** function _Byte_SetZone *****************
 24982 ;; Defined at:
 24983 ;;		line 47 in file "Library/Types.c"
 24984 ;; Parameters:    Size  Location     Type
 24985 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24986 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24987 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24988 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 24989 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 24990 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24991 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24992 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24993 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24994 ;;  pMax            1    2[BANK0 ] unsigned char 
 24995 ;;  pChunk          1    3[BANK0 ] unsigned char 
 24996 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 24997 ;;  pValue          1    5[BANK0 ] unsigned char 
 24998 ;; Auto vars:     Size  Location     Type
 24999 ;;  MASK            1   10[BANK0 ] unsigned char 
 25000 ;;  Offset          1    9[BANK0 ] unsigned char 
 25001 ;; Return value:  Size  Location     Type
 25002 ;;                  1    wreg      void 
 25003 ;; Registers used:
 25004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 25005 ;; Tracked objects:
 25006 ;;		On entry : 0/0
 25007 ;;		On exit  : 0/0
 25008 ;;		Unchanged: 0/0
 25009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25010 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25012 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;Total ram usage:       11 bytes
 25015 ;; Hardware stack levels used:    1
 25016 ;; Hardware stack levels required when called:    7
 25017 ;; This function calls:
 25018 ;;		Nothing
 25019 ;; This function is called by:
 25020 ;;		_Byte_SetPair
 25021 ;;		_Byte_SetQuad
 25022 ;;		_Byte_SetTriple
 25023 ;; This function uses a non-reentrant model
 25024 ;;
 25025                           
 25026                           	psect	text117
 25027  014BDC                     __ptext117:
 25028                           	opt stack 0
 25029  014BDC                     _Byte_SetZone:
 25030                           	opt stack 18
 25031                           
 25032                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 25033                           
 25034                           ;incstack = 0
 25035  014BDC  0100               	movlb	0	; () banked
 25036  014BDE  51BC               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 25037  014BE0  0D01               	mullw	1
 25038  014BE2  0E0F               	movlw	low _MASKS
 25039  014BE4  24F3               	addwf	prodl,w,c
 25040  014BE6  6EF6               	movwf	tblptrl,c
 25041  014BE8  0EFD               	movlw	high _MASKS
 25042  014BEA  20F4               	addwfc	prodh,w,c
 25043  014BEC  6EF7               	movwf	tblptrh,c
 25044  014BEE                     	if	1	;There are 3 active tblptr bytes
 25045  014BEE  6AF8               	clrf	tblptru,c
 25046  014BF0  0E00               	movlw	low (__mediumconst shr (0+16))
 25047  014BF2  22F8               	addwfc	tblptru,f,c
 25048  014BF4                     	endif
 25049  014BF4  0008               	tblrd		*
 25050  014BF6  CFF5 F0C2          	movff	tablat,Byte_SetZone@MASK
 25051                           
 25052                           ; BSR set to: 0
 25053                           ;Types.c: 50: UINT8 Offset = 0;
 25054  014BFA  0E00               	movlw	0
 25055  014BFC  0100               	movlb	0	; () banked
 25056  014BFE  6FC1               	movwf	Byte_SetZone@Offset& (0+255),b
 25057                           
 25058                           ;Types.c: 52: while (pChunk >= pMax)
 25059  014C00  D006               	goto	l726
 25060  014C02                     
 25061                           ; BSR set to: 0
 25062                           ;Types.c: 53: {
 25063                           ;Types.c: 54: pChunk -= pMax;
 25064                           
 25065                           ; BSR set to: 0
 25066  014C02  0100               	movlb	0	; () banked
 25067  014C04  51BA               	movf	Byte_SetZone@pMax& (0+255),w,b
 25068  014C06  0100               	movlb	0	; () banked
 25069  014C08  5FBB               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 25070                           
 25071                           ; BSR set to: 0
 25072                           ;Types.c: 55: Offset += 1;
 25073  014C0A  0100               	movlb	0	; () banked
 25074  014C0C  2BC1               	incf	Byte_SetZone@Offset& (0+255),f,b
 25075  014C0E                     l726:
 25076                           
 25077                           ; BSR set to: 0
 25078                           
 25079                           ; BSR set to: 0
 25080  014C0E  0100               	movlb	0	; () banked
 25081  014C10  51BA               	movf	Byte_SetZone@pMax& (0+255),w,b
 25082  014C12  0100               	movlb	0	; () banked
 25083  014C14  5DBB               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 25084  014C16  B0D8               	btfsc	status,0,c
 25085  014C18  D7F4               	goto	l727
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;Types.c: 56: }
 25089                           ;Types.c: 57: pChunk *= pChunkSize;
 25090                           
 25091                           ; BSR set to: 0
 25092  014C1A  0100               	movlb	0	; () banked
 25093  014C1C  51BC               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 25094  014C1E  0100               	movlb	0	; () banked
 25095  014C20  03BB               	mulwf	Byte_SetZone@pChunk& (0+255),b
 25096  014C22  50F3               	movf	prodl,w,c
 25097  014C24  6FBB               	movwf	Byte_SetZone@pChunk& (0+255),b
 25098                           
 25099                           ; BSR set to: 0
 25100                           ;Types.c: 58: pChunk += Offset;
 25101  014C26  0100               	movlb	0	; () banked
 25102  014C28  51C1               	movf	Byte_SetZone@Offset& (0+255),w,b
 25103  014C2A  0100               	movlb	0	; () banked
 25104  014C2C  27BB               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 25105                           
 25106                           ; BSR set to: 0
 25107                           ;Types.c: 60: pValue &= MASK;
 25108  014C2E  0100               	movlb	0	; () banked
 25109  014C30  51C2               	movf	Byte_SetZone@MASK& (0+255),w,b
 25110  014C32  0100               	movlb	0	; () banked
 25111  014C34  17BD               	andwf	Byte_SetZone@pValue& (0+255),f,b
 25112                           
 25113                           ; BSR set to: 0
 25114                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 25115  014C36  C0BB  F0BE         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 25116  014C3A  C0C2  F0BF         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 25117  014C3E  0100               	movlb	0	; () banked
 25118  014C40  2BBE               	incf	??_Byte_SetZone& (0+255),f,b
 25119  014C42  D003               	goto	u9334
 25120  014C44                     u9335:
 25121  014C44  0100               	movlb	0	; () banked
 25122  014C46  90D8               	bcf	status,0,c
 25123  014C48  37BF               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 25124  014C4A                     u9334:
 25125  014C4A  0100               	movlb	0	; () banked
 25126  014C4C  2FBE               	decfsz	??_Byte_SetZone& (0+255),f,b
 25127  014C4E  D7FA               	goto	u9335
 25128  014C50  0100               	movlb	0	; () banked
 25129  014C52  51BF               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 25130  014C54  0AFF               	xorlw	255
 25131  014C56  0100               	movlb	0	; () banked
 25132  014C58  6FC0               	movwf	(??_Byte_SetZone+2)& (0+255),b
 25133  014C5A  C0B8  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 25134  014C5E  C0B9  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 25135  014C62  0100               	movlb	0	; () banked
 25136  014C64  51C0               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 25137  014C66  16DF               	andwf	indf2,f,c
 25138                           
 25139                           ; BSR set to: 0
 25140                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 25141  014C68  C0BB  F0BE         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 25142  014C6C  C0BD  F0BF         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 25143  014C70  0100               	movlb	0	; () banked
 25144  014C72  2BBE               	incf	??_Byte_SetZone& (0+255),f,b
 25145  014C74  D003               	goto	u9344
 25146  014C76                     u9345:
 25147  014C76  0100               	movlb	0	; () banked
 25148  014C78  90D8               	bcf	status,0,c
 25149  014C7A  37BF               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 25150  014C7C                     u9344:
 25151  014C7C  0100               	movlb	0	; () banked
 25152  014C7E  2FBE               	decfsz	??_Byte_SetZone& (0+255),f,b
 25153  014C80  D7FA               	goto	u9345
 25154  014C82  C0B8  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 25155  014C86  C0B9  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 25156  014C8A  0100               	movlb	0	; () banked
 25157  014C8C  51BF               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 25158  014C8E  12DF               	iorwf	indf2,f,c
 25159                           
 25160                           ; BSR set to: 0
 25161  014C90  0012               	return		;funcret
 25162  014C92                     __end_of_Byte_SetZone:
 25163                           	opt stack 0
 25164                           tosu	equ	0xFFF
 25165                           tosh	equ	0xFFE
 25166                           tosl	equ	0xFFD
 25167                           pclath	equ	0xFFA
 25168                           tblptru	equ	0xFF8
 25169                           tblptrh	equ	0xFF7
 25170                           tblptrl	equ	0xFF6
 25171                           tablat	equ	0xFF5
 25172                           prodh	equ	0xFF4
 25173                           prodl	equ	0xFF3
 25174                           intcon	equ	0xFF2
 25175                           postinc0	equ	0xFEE
 25176                           wreg	equ	0xFE8
 25177                           indf1	equ	0xFE7
 25178                           postdec1	equ	0xFE5
 25179                           fsr1h	equ	0xFE2
 25180                           fsr1l	equ	0xFE1
 25181                           indf2	equ	0xFDF
 25182                           postinc2	equ	0xFDE
 25183                           postdec2	equ	0xFDD
 25184                           plusw2	equ	0xFDB
 25185                           fsr2h	equ	0xFDA
 25186                           fsr2l	equ	0xFD9
 25187                           status	equ	0xFD8
 25188                           
 25189 ;; *************** function _Console_Init *****************
 25190 ;; Defined at:
 25191 ;;		line 157 in file "Library/Console.c"
 25192 ;; Parameters:    Size  Location     Type
 25193 ;;		None
 25194 ;; Auto vars:     Size  Location     Type
 25195 ;;  y               1    3[BANK0 ] unsigned char 
 25196 ;;  x               1    2[BANK0 ] unsigned char 
 25197 ;; Return value:  Size  Location     Type
 25198 ;;                  1    wreg      void 
 25199 ;; Registers used:
 25200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25201 ;; Tracked objects:
 25202 ;;		On entry : 0/0
 25203 ;;		On exit  : 0/0
 25204 ;;		Unchanged: 0/0
 25205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25209 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25210 ;;Total ram usage:        4 bytes
 25211 ;; Hardware stack levels used:    1
 25212 ;; Hardware stack levels required when called:    7
 25213 ;; This function calls:
 25214 ;;		Nothing
 25215 ;; This function is called by:
 25216 ;;		_init
 25217 ;; This function uses a non-reentrant model
 25218 ;;
 25219                           
 25220                           	psect	text118
 25221  01569E                     __ptext118:
 25222                           	opt stack 0
 25223  01569E                     _Console_Init:
 25224                           	opt stack 22
 25225                           
 25226                           ;Console.c: 160: lBufferX = 0;
 25227                           
 25228                           ; BSR set to: 0
 25229                           ;incstack = 0
 25230  01569E  0E00               	movlw	0
 25231  0156A0  0100               	movlb	0	; () banked
 25232  0156A2  6F8D               	movwf	_lBufferX& (0+255),b
 25233                           
 25234                           ;Console.c: 161: lBufferY = 0;
 25235  0156A4  0E00               	movlw	0
 25236  0156A6  0100               	movlb	0	; () banked
 25237  0156A8  6F8C               	movwf	_lBufferY& (0+255),b
 25238                           
 25239                           ;Console.c: 163: UINT8 x, y;
 25240                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 25241  0156AA  0E00               	movlw	0
 25242  0156AC  0100               	movlb	0	; () banked
 25243  0156AE  6FBA               	movwf	Console_Init@x& (0+255),b
 25244  0156B0                     l14840:
 25245                           
 25246                           ; BSR set to: 0
 25247  0156B0  0E13               	movlw	19
 25248  0156B2  0100               	movlb	0	; () banked
 25249  0156B4  65BA               	cpfsgt	Console_Init@x& (0+255),b
 25250  0156B6  D001               	goto	l976
 25251  0156B8  0012               	return	
 25252  0156BA                     l976:
 25253                           
 25254                           ; BSR set to: 0
 25255                           ;Console.c: 165: {
 25256                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 25257                           
 25258                           ; BSR set to: 0
 25259  0156BA  0E00               	movlw	0
 25260  0156BC  0100               	movlb	0	; () banked
 25261  0156BE  6FBB               	movwf	Console_Init@y& (0+255),b
 25262  0156C0                     l14846:
 25263                           
 25264                           ; BSR set to: 0
 25265  0156C0  0E0E               	movlw	14
 25266  0156C2  0100               	movlb	0	; () banked
 25267  0156C4  65BB               	cpfsgt	Console_Init@y& (0+255),b
 25268  0156C6  D001               	goto	l978
 25269  0156C8  D02C               	goto	u11800
 25270  0156CA                     l978:
 25271                           
 25272                           ; BSR set to: 0
 25273                           ;Console.c: 167: {
 25274                           ;Console.c: 168: lBuffer[y][x] = '\0';
 25275                           
 25276                           ; BSR set to: 0
 25277  0156CA  0100               	movlb	0	; () banked
 25278  0156CC  51BB               	movf	Console_Init@y& (0+255),w,b
 25279  0156CE  0D14               	mullw	20
 25280  0156D0  0EB4               	movlw	low _lBuffer
 25281  0156D2  0100               	movlb	0	; () banked
 25282  0156D4  6FB8               	movwf	??_Console_Init& (0+255),b
 25283  0156D6  0E04               	movlw	high _lBuffer
 25284  0156D8  0100               	movlb	0	; () banked
 25285  0156DA  6FB9               	movwf	(??_Console_Init+1)& (0+255),b
 25286  0156DC  50F3               	movf	prodl,w,c
 25287  0156DE  0100               	movlb	0	; () banked
 25288  0156E0  27B8               	addwf	??_Console_Init& (0+255),f,b
 25289  0156E2  50F4               	movf	prodh,w,c
 25290  0156E4  0100               	movlb	0	; () banked
 25291  0156E6  23B9               	addwfc	(??_Console_Init+1)& (0+255),f,b
 25292  0156E8  0100               	movlb	0	; () banked
 25293  0156EA  51BA               	movf	Console_Init@x& (0+255),w,b
 25294  0156EC  0D01               	mullw	1
 25295  0156EE  50F3               	movf	prodl,w,c
 25296  0156F0  0100               	movlb	0	; () banked
 25297  0156F2  25B8               	addwf	??_Console_Init& (0+255),w,b
 25298  0156F4  6ED9               	movwf	fsr2l,c
 25299  0156F6  50F4               	movf	prodh,w,c
 25300  0156F8  0100               	movlb	0	; () banked
 25301  0156FA  21B9               	addwfc	(??_Console_Init+1)& (0+255),w,b
 25302  0156FC  6EDA               	movwf	fsr2h,c
 25303  0156FE  0E00               	movlw	0
 25304  015700  6EDF               	movwf	indf2,c
 25305                           
 25306                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 25307  015702  0100               	movlb	0	; () banked
 25308  015704  51BB               	movf	Console_Init@y& (0+255),w,b
 25309  015706  0D02               	mullw	2
 25310  015708  0E00               	movlw	low _lCBuffer
 25311  01570A  24F3               	addwf	prodl,w,c
 25312  01570C  6ED9               	movwf	fsr2l,c
 25313  01570E  0E03               	movlw	high _lCBuffer
 25314  015710  20F4               	addwfc	prodh,w,c
 25315  015712  6EDA               	movwf	fsr2h,c
 25316  015714  0EFF               	movlw	255
 25317  015716  6EDE               	movwf	postinc2,c
 25318  015718  0EFF               	movlw	255
 25319  01571A  6EDD               	movwf	postdec2,c
 25320                           
 25321                           ; BSR set to: 0
 25322  01571C  0100               	movlb	0	; () banked
 25323  01571E  2BBB               	incf	Console_Init@y& (0+255),f,b
 25324  015720  D7CF               	goto	l14846
 25325  015722                     u11800:
 25326                           
 25327                           ; BSR set to: 0
 25328                           
 25329                           ; BSR set to: 0
 25330  015722  0100               	movlb	0	; () banked
 25331  015724  2BBA               	incf	Console_Init@x& (0+255),f,b
 25332  015726  D7C4               	goto	l14840
 25333  015728                     __end_of_Console_Init:
 25334                           	opt stack 0
 25335                           tosu	equ	0xFFF
 25336                           tosh	equ	0xFFE
 25337                           tosl	equ	0xFFD
 25338                           pclath	equ	0xFFA
 25339                           tblptru	equ	0xFF8
 25340                           tblptrh	equ	0xFF7
 25341                           tblptrl	equ	0xFF6
 25342                           tablat	equ	0xFF5
 25343                           prodh	equ	0xFF4
 25344                           prodl	equ	0xFF3
 25345                           intcon	equ	0xFF2
 25346                           postinc0	equ	0xFEE
 25347                           wreg	equ	0xFE8
 25348                           indf1	equ	0xFE7
 25349                           postdec1	equ	0xFE5
 25350                           fsr1h	equ	0xFE2
 25351                           fsr1l	equ	0xFE1
 25352                           indf2	equ	0xFDF
 25353                           postinc2	equ	0xFDE
 25354                           postdec2	equ	0xFDD
 25355                           plusw2	equ	0xFDB
 25356                           fsr2h	equ	0xFDA
 25357                           fsr2l	equ	0xFD9
 25358                           status	equ	0xFD8
 25359                           
 25360 ;; *************** function _ADC_Start *****************
 25361 ;; Defined at:
 25362 ;;		line 114 in file "Library/ADC.c"
 25363 ;; Parameters:    Size  Location     Type
 25364 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 25365 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25366 ;;		 -> NULL(0), 
 25367 ;; Auto vars:     Size  Location     Type
 25368 ;;		None
 25369 ;; Return value:  Size  Location     Type
 25370 ;;                  1    wreg      void 
 25371 ;; Registers used:
 25372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25373 ;; Tracked objects:
 25374 ;;		On entry : 0/0
 25375 ;;		On exit  : 0/0
 25376 ;;		Unchanged: 0/0
 25377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25381 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25382 ;;Total ram usage:        4 bytes
 25383 ;; Hardware stack levels used:    1
 25384 ;; Hardware stack levels required when called:    8
 25385 ;; This function calls:
 25386 ;;		_ADC_Off
 25387 ;;		_ADC_On
 25388 ;;		_ADC_SetChannel
 25389 ;; This function is called by:
 25390 ;;		_init
 25391 ;;		_findClosestWall
 25392 ;;		_measureAndDisplayDistance
 25393 ;;		_mode1
 25394 ;;		_FunctADC
 25395 ;; This function uses a non-reentrant model
 25396 ;;
 25397                           
 25398                           	psect	text119
 25399  0157B2                     __ptext119:
 25400                           	opt stack 0
 25401  0157B2                     _ADC_Start:
 25402                           	opt stack 20
 25403                           
 25404                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 25405                           
 25406                           ; BSR set to: 0
 25407                           ;incstack = 0
 25408  0157B2  B2C2               	btfsc	4034,1,c	;volatile
 25409  0157B4  0012               	return	
 25410  0157B6                     
 25411                           ;ADC.c: 128: {
 25412                           ;ADC.c: 129: ADC_Off();
 25413                           
 25414                           ;ADC.c: 127: for(;;)
 25415  0157B6  EC67  F0B7         	call	_ADC_Off	;wreg free
 25416                           
 25417                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 25418  0157BA  C0BA  FFD9         	movff	ADC_Start@pInput,fsr2l
 25419  0157BE  C0BB  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 25420  0157C2  50DF               	movf	indf2,w,c
 25421  0157C4  EC63  F0B6         	call	_ADC_SetChannel
 25422                           
 25423                           ;ADC.c: 131: ADC_On();
 25424  0157C8  EC75  F0B7         	call	_ADC_On	;wreg free
 25425                           
 25426                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 25427  0157CC  82C2               	bsf	4034,1,c	;volatile
 25428  0157CE  B2C2               	btfsc	4034,1,c	;volatile
 25429  0157D0  D7FE               	goto	l1280
 25430                           
 25431                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 25432  0157D2  50C3               	movf	4035,w,c	;volatile
 25433  0157D4  CFC4 F0BC          	movff	4036,??_ADC_Start	;volatile
 25434  0157D8  0100               	movlb	0	; () banked
 25435  0157DA  6BBD               	clrf	(??_ADC_Start+1)& (0+255),b
 25436  0157DC  C0BC  F0BD         	movff	??_ADC_Start,??_ADC_Start+1
 25437  0157E0  0100               	movlb	0	; () banked
 25438  0157E2  6BBC               	clrf	??_ADC_Start& (0+255),b
 25439  0157E4  0100               	movlb	0	; () banked
 25440  0157E6  13BC               	iorwf	??_ADC_Start& (0+255),f,b
 25441  0157E8  0E00               	movlw	0
 25442  0157EA  13BD               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 25443  0157EC  0100               	movlb	0	; () banked
 25444  0157EE  EE20 F001          	lfsr	2,1
 25445  0157F2  51BA               	movf	ADC_Start@pInput& (0+255),w,b
 25446  0157F4  26D9               	addwf	fsr2l,f,c
 25447  0157F6  51BB               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25448  0157F8  22DA               	addwfc	fsr2h,f,c
 25449  0157FA  C0BC  FFDE         	movff	??_ADC_Start,postinc2
 25450  0157FE  C0BD  FFDD         	movff	??_ADC_Start+1,postdec2
 25451                           
 25452                           ;ADC.c: 141: if (pInput->mNext == 0)
 25453  015802  0100               	movlb	0	; () banked
 25454  015804  EE20 F003          	lfsr	2,3
 25455  015808  51BA               	movf	ADC_Start@pInput& (0+255),w,b
 25456  01580A  26D9               	addwf	fsr2l,f,c
 25457  01580C  51BB               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25458  01580E  22DA               	addwfc	fsr2h,f,c
 25459  015810  50DE               	movf	postinc2,w,c
 25460  015812  10DE               	iorwf	postinc2,w,c
 25461  015814  B4D8               	btfsc	status,2,c
 25462  015816  D00C               	goto	l1283
 25463                           
 25464                           ; BSR set to: 0
 25465                           ;ADC.c: 145: pInput = pInput->mNext;
 25466                           
 25467                           ; BSR set to: 0
 25468                           
 25469                           ; BSR set to: 0
 25470                           ;ADC.c: 142: break;
 25471  015818  0100               	movlb	0	; () banked
 25472  01581A  EE20 F003          	lfsr	2,3
 25473  01581E  51BA               	movf	ADC_Start@pInput& (0+255),w,b
 25474  015820  26D9               	addwf	fsr2l,f,c
 25475  015822  51BB               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25476  015824  22DA               	addwfc	fsr2h,f,c
 25477  015826  CFDE F0BA          	movff	postinc2,ADC_Start@pInput
 25478  01582A  CFDD F0BB          	movff	postdec2,ADC_Start@pInput+1
 25479                           
 25480                           ;ADC.c: 146: }
 25481  01582E  D7C3               	goto	l1276
 25482  015830                     l1283:
 25483                           
 25484                           ; BSR set to: 0
 25485                           ;ADC.c: 147: ADC_Off();
 25486                           
 25487                           ; BSR set to: 0
 25488  015830  EC67  F0B7         	call	_ADC_Off	;wreg free
 25489  015834  0012               	return		;funcret
 25490  015836                     __end_of_ADC_Start:
 25491                           	opt stack 0
 25492                           tosu	equ	0xFFF
 25493                           tosh	equ	0xFFE
 25494                           tosl	equ	0xFFD
 25495                           pclath	equ	0xFFA
 25496                           tblptru	equ	0xFF8
 25497                           tblptrh	equ	0xFF7
 25498                           tblptrl	equ	0xFF6
 25499                           tablat	equ	0xFF5
 25500                           prodh	equ	0xFF4
 25501                           prodl	equ	0xFF3
 25502                           intcon	equ	0xFF2
 25503                           postinc0	equ	0xFEE
 25504                           wreg	equ	0xFE8
 25505                           indf1	equ	0xFE7
 25506                           postdec1	equ	0xFE5
 25507                           fsr1h	equ	0xFE2
 25508                           fsr1l	equ	0xFE1
 25509                           indf2	equ	0xFDF
 25510                           postinc2	equ	0xFDE
 25511                           postdec2	equ	0xFDD
 25512                           plusw2	equ	0xFDB
 25513                           fsr2h	equ	0xFDA
 25514                           fsr2l	equ	0xFD9
 25515                           status	equ	0xFD8
 25516                           
 25517 ;; *************** function _ADC_Init *****************
 25518 ;; Defined at:
 25519 ;;		line 19 in file "Library/ADC.c"
 25520 ;; Parameters:    Size  Location     Type
 25521 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 25522 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25523 ;;  pChannel        1    6[BANK0 ] enum E6742
 25524 ;; Auto vars:     Size  Location     Type
 25525 ;;		None
 25526 ;; Return value:  Size  Location     Type
 25527 ;;                  1    wreg      void 
 25528 ;; Registers used:
 25529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25530 ;; Tracked objects:
 25531 ;;		On entry : 0/0
 25532 ;;		On exit  : 0/0
 25533 ;;		Unchanged: 0/0
 25534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25535 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25539 ;;Total ram usage:        3 bytes
 25540 ;; Hardware stack levels used:    1
 25541 ;; Hardware stack levels required when called:    9
 25542 ;; This function calls:
 25543 ;;		_ADC_Calibrate
 25544 ;;		_ADC_ClockDivision
 25545 ;;		_ADC_ConversionTime
 25546 ;;		_ADC_SetChannel
 25547 ;;		_ADC_SetupIO
 25548 ;; This function is called by:
 25549 ;;		_init
 25550 ;;		_FunctInitADC
 25551 ;; This function uses a non-reentrant model
 25552 ;;
 25553                           
 25554                           	psect	text120
 25555  015934                     __ptext120:
 25556                           	opt stack 0
 25557  015934                     _ADC_Init:
 25558                           	opt stack 20
 25559                           
 25560                           ;ADC.c: 21: if(pInput==(void*)0)
 25561                           
 25562                           ;incstack = 0
 25563  015934  0100               	movlb	0	; () banked
 25564  015936  51BC               	movf	ADC_Init@pInput& (0+255),w,b
 25565  015938  0100               	movlb	0	; () banked
 25566  01593A  11BD               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 25567  01593C  B4D8               	btfsc	status,2,c
 25568  01593E  0012               	return	
 25569                           
 25570                           ; BSR set to: 0
 25571                           ;ADC.c: 25: lCurrent = pInput;
 25572                           
 25573                           ; BSR set to: 0
 25574                           
 25575                           ; BSR set to: 0
 25576                           ;ADC.c: 22: return;
 25577  015940  C0BC  F07E         	movff	ADC_Init@pInput,_lCurrent
 25578  015944  C0BD  F07F         	movff	ADC_Init@pInput+1,_lCurrent+1
 25579                           
 25580                           ; BSR set to: 0
 25581                           ;ADC.c: 27: pInput->mChannel = pChannel;
 25582  015948  C0BC  FFD9         	movff	ADC_Init@pInput,fsr2l
 25583  01594C  C0BD  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 25584  015950  C0BE  FFDF         	movff	ADC_Init@pChannel,indf2
 25585                           
 25586                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 25587  015954  0100               	movlb	0	; () banked
 25588  015956  EE20 F003          	lfsr	2,3
 25589  01595A  51BC               	movf	ADC_Init@pInput& (0+255),w,b
 25590  01595C  26D9               	addwf	fsr2l,f,c
 25591  01595E  51BD               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25592  015960  22DA               	addwfc	fsr2h,f,c
 25593  015962  0E00               	movlw	0
 25594  015964  6EDE               	movwf	postinc2,c
 25595  015966  0E00               	movlw	0
 25596  015968  6EDD               	movwf	postdec2,c
 25597                           
 25598                           ;ADC.c: 29: pInput->mValue = 0;
 25599  01596A  0100               	movlb	0	; () banked
 25600  01596C  EE20 F001          	lfsr	2,1
 25601  015970  51BC               	movf	ADC_Init@pInput& (0+255),w,b
 25602  015972  26D9               	addwf	fsr2l,f,c
 25603  015974  51BD               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25604  015976  22DA               	addwfc	fsr2h,f,c
 25605  015978  0E00               	movlw	0
 25606  01597A  6EDE               	movwf	postinc2,c
 25607  01597C  0E00               	movlw	0
 25608  01597E  6EDD               	movwf	postdec2,c
 25609                           
 25610                           ; BSR set to: 0
 25611                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 25612  015980  0100               	movlb	0	; () banked
 25613  015982  51BE               	movf	ADC_Init@pChannel& (0+255),w,b
 25614  015984  EC63  F0B6         	call	_ADC_SetChannel
 25615                           
 25616                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 25617  015988  9EC2               	bcf	4034,7,c	;volatile
 25618                           
 25619                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 25620  01598A  9CC2               	bcf	4034,6,c	;volatile
 25621                           
 25622                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 25623  01598C  8EC1               	bsf	4033,7,c	;volatile
 25624                           
 25625                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 25626  01598E  8CC1               	bsf	4033,6,c	;volatile
 25627                           
 25628                           ;ADC.c: 43: ADC_ConversionTime(12);
 25629  015990  0E0C               	movlw	12
 25630  015992  EC33  F0B2         	call	_ADC_ConversionTime
 25631                           
 25632                           ;ADC.c: 47: ADC_ClockDivision(16);
 25633  015996  0E10               	movlw	16
 25634  015998  EC94  F0AB         	call	_ADC_ClockDivision
 25635                           
 25636                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 25637  01599C  0100               	movlb	0	; () banked
 25638  01599E  51BE               	movf	ADC_Init@pChannel& (0+255),w,b
 25639  0159A0  ECAC  F0B4         	call	_ADC_SetupIO
 25640                           
 25641                           ;ADC.c: 58: ADC_Initialised = 1;
 25642  0159A4  0E01               	movlw	1
 25643  0159A6  6E3C               	movwf	_ADC_Initialised,c
 25644                           
 25645                           ;ADC.c: 61: ADC_Calibrate();
 25646  0159A8  ECE8  F0B6         	call	_ADC_Calibrate	;wreg free
 25647  0159AC  0012               	return		;funcret
 25648  0159AE                     __end_of_ADC_Init:
 25649                           	opt stack 0
 25650                           tosu	equ	0xFFF
 25651                           tosh	equ	0xFFE
 25652                           tosl	equ	0xFFD
 25653                           pclath	equ	0xFFA
 25654                           tblptru	equ	0xFF8
 25655                           tblptrh	equ	0xFF7
 25656                           tblptrl	equ	0xFF6
 25657                           tablat	equ	0xFF5
 25658                           prodh	equ	0xFF4
 25659                           prodl	equ	0xFF3
 25660                           intcon	equ	0xFF2
 25661                           postinc0	equ	0xFEE
 25662                           wreg	equ	0xFE8
 25663                           indf1	equ	0xFE7
 25664                           postdec1	equ	0xFE5
 25665                           fsr1h	equ	0xFE2
 25666                           fsr1l	equ	0xFE1
 25667                           indf2	equ	0xFDF
 25668                           postinc2	equ	0xFDE
 25669                           postdec2	equ	0xFDD
 25670                           plusw2	equ	0xFDB
 25671                           fsr2h	equ	0xFDA
 25672                           fsr2l	equ	0xFD9
 25673                           status	equ	0xFD8
 25674                           
 25675 ;; *************** function _ADC_SetupIO *****************
 25676 ;; Defined at:
 25677 ;;		line 150 in file "Library/ADC.c"
 25678 ;; Parameters:    Size  Location     Type
 25679 ;;  pChannel        1    wreg     enum E6742
 25680 ;; Auto vars:     Size  Location     Type
 25681 ;;  pChannel        1    2[BANK0 ] enum E6742
 25682 ;;  MASK            1    3[BANK0 ] unsigned char 
 25683 ;; Return value:  Size  Location     Type
 25684 ;;                  1    wreg      void 
 25685 ;; Registers used:
 25686 ;;		wreg, status,2, status,0
 25687 ;; Tracked objects:
 25688 ;;		On entry : 0/0
 25689 ;;		On exit  : 0/0
 25690 ;;		Unchanged: 0/0
 25691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25695 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25696 ;;Total ram usage:        4 bytes
 25697 ;; Hardware stack levels used:    1
 25698 ;; Hardware stack levels required when called:    7
 25699 ;; This function calls:
 25700 ;;		Nothing
 25701 ;; This function is called by:
 25702 ;;		_ADC_Init
 25703 ;; This function uses a non-reentrant model
 25704 ;;
 25705                           
 25706                           	psect	text121
 25707  016958                     __ptext121:
 25708                           	opt stack 0
 25709  016958                     _ADC_SetupIO:
 25710                           	opt stack 21
 25711                           
 25712                           ;incstack = 0
 25713                           ;ADC_SetupIO@pChannel stored from wreg
 25714  016958  0100               	movlb	0	; () banked
 25715  01695A  6FBA               	movwf	ADC_SetupIO@pChannel& (0+255),b
 25716                           
 25717                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 25718  01695C  C0BA  F0B8         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 25719  016960  0E01               	movlw	1
 25720  016962  0100               	movlb	0	; () banked
 25721  016964  6FB9               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 25722  016966  0100               	movlb	0	; () banked
 25723  016968  2BB8               	incf	??_ADC_SetupIO& (0+255),f,b
 25724  01696A  D003               	goto	u11524
 25725  01696C                     u11525:
 25726  01696C  0100               	movlb	0	; () banked
 25727  01696E  90D8               	bcf	status,0,c
 25728  016970  37B9               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 25729  016972                     u11524:
 25730  016972  0100               	movlb	0	; () banked
 25731  016974  2FB8               	decfsz	??_ADC_SetupIO& (0+255),f,b
 25732  016976  D7FA               	goto	u11525
 25733  016978  0100               	movlb	0	; () banked
 25734  01697A  51B9               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 25735  01697C  0AFF               	xorlw	255
 25736  01697E  0100               	movlb	0	; () banked
 25737  016980  6FBB               	movwf	ADC_SetupIO@MASK& (0+255),b
 25738                           
 25739                           ;ADC.c: 153: ANCON0 &= MASK;
 25740  016982  0100               	movlb	0	; () banked
 25741  016984  51BB               	movf	ADC_SetupIO@MASK& (0+255),w,b
 25742  016986  16C1               	andwf	4033,f,c	;volatile
 25743                           
 25744                           ; BSR set to: 0
 25745  016988  0012               	return		;funcret
 25746  01698A                     __end_of_ADC_SetupIO:
 25747                           	opt stack 0
 25748                           tosu	equ	0xFFF
 25749                           tosh	equ	0xFFE
 25750                           tosl	equ	0xFFD
 25751                           pclath	equ	0xFFA
 25752                           tblptru	equ	0xFF8
 25753                           tblptrh	equ	0xFF7
 25754                           tblptrl	equ	0xFF6
 25755                           tablat	equ	0xFF5
 25756                           prodh	equ	0xFF4
 25757                           prodl	equ	0xFF3
 25758                           intcon	equ	0xFF2
 25759                           postinc0	equ	0xFEE
 25760                           wreg	equ	0xFE8
 25761                           indf1	equ	0xFE7
 25762                           postdec1	equ	0xFE5
 25763                           fsr1h	equ	0xFE2
 25764                           fsr1l	equ	0xFE1
 25765                           indf2	equ	0xFDF
 25766                           postinc2	equ	0xFDE
 25767                           postdec2	equ	0xFDD
 25768                           plusw2	equ	0xFDB
 25769                           fsr2h	equ	0xFDA
 25770                           fsr2l	equ	0xFD9
 25771                           status	equ	0xFD8
 25772                           
 25773 ;; *************** function _ADC_SetChannel *****************
 25774 ;; Defined at:
 25775 ;;		line 155 in file "Library/ADC.c"
 25776 ;; Parameters:    Size  Location     Type
 25777 ;;  pChannel        1    wreg     enum E6742
 25778 ;; Auto vars:     Size  Location     Type
 25779 ;;  pChannel        1    1[BANK0 ] enum E6742
 25780 ;; Return value:  Size  Location     Type
 25781 ;;                  1    wreg      void 
 25782 ;; Registers used:
 25783 ;;		wreg, status,2, status,0
 25784 ;; Tracked objects:
 25785 ;;		On entry : 0/0
 25786 ;;		On exit  : 0/0
 25787 ;;		Unchanged: 0/0
 25788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25793 ;;Total ram usage:        2 bytes
 25794 ;; Hardware stack levels used:    1
 25795 ;; Hardware stack levels required when called:    7
 25796 ;; This function calls:
 25797 ;;		Nothing
 25798 ;; This function is called by:
 25799 ;;		_ADC_Init
 25800 ;;		_ADC_Start
 25801 ;;		_ADC_ISR
 25802 ;;		_ADC_Sample
 25803 ;; This function uses a non-reentrant model
 25804 ;;
 25805                           
 25806                           	psect	text122
 25807  016CC6                     __ptext122:
 25808                           	opt stack 0
 25809  016CC6                     _ADC_SetChannel:
 25810                           	opt stack 20
 25811                           
 25812                           ; BSR set to: 0
 25813                           ;incstack = 0
 25814                           ;ADC_SetChannel@pChannel stored from wreg
 25815  016CC6  0100               	movlb	0	; () banked
 25816  016CC8  6FB9               	movwf	ADC_SetChannel@pChannel& (0+255),b
 25817                           
 25818                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 25819  016CCA  C0B9  F0B8         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 25820  016CCE  0100               	movlb	0	; () banked
 25821  016CD0  47B8               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25822  016CD2  47B8               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25823  016CD4  50C2               	movf	4034,w,c	;volatile
 25824  016CD6  0100               	movlb	0	; () banked
 25825  016CD8  19B8               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25826  016CDA  0BC3               	andlw	-61
 25827  016CDC  19B8               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25828  016CDE  6EC2               	movwf	4034,c	;volatile
 25829                           
 25830                           ; BSR set to: 0
 25831  016CE0  0012               	return		;funcret
 25832  016CE2                     __end_of_ADC_SetChannel:
 25833                           	opt stack 0
 25834                           tosu	equ	0xFFF
 25835                           tosh	equ	0xFFE
 25836                           tosl	equ	0xFFD
 25837                           pclath	equ	0xFFA
 25838                           tblptru	equ	0xFF8
 25839                           tblptrh	equ	0xFF7
 25840                           tblptrl	equ	0xFF6
 25841                           tablat	equ	0xFF5
 25842                           prodh	equ	0xFF4
 25843                           prodl	equ	0xFF3
 25844                           intcon	equ	0xFF2
 25845                           postinc0	equ	0xFEE
 25846                           wreg	equ	0xFE8
 25847                           indf1	equ	0xFE7
 25848                           postdec1	equ	0xFE5
 25849                           fsr1h	equ	0xFE2
 25850                           fsr1l	equ	0xFE1
 25851                           indf2	equ	0xFDF
 25852                           postinc2	equ	0xFDE
 25853                           postdec2	equ	0xFDD
 25854                           plusw2	equ	0xFDB
 25855                           fsr2h	equ	0xFDA
 25856                           fsr2l	equ	0xFD9
 25857                           status	equ	0xFD8
 25858                           
 25859 ;; *************** function _ADC_ConversionTime *****************
 25860 ;; Defined at:
 25861 ;;		line 199 in file "Library/ADC.c"
 25862 ;; Parameters:    Size  Location     Type
 25863 ;;  pCount          1    wreg     unsigned char 
 25864 ;; Auto vars:     Size  Location     Type
 25865 ;;  pCount          1    1[BANK0 ] unsigned char 
 25866 ;; Return value:  Size  Location     Type
 25867 ;;                  1    wreg      void 
 25868 ;; Registers used:
 25869 ;;		wreg, status,2, status,0
 25870 ;; Tracked objects:
 25871 ;;		On entry : 0/0
 25872 ;;		On exit  : 0/0
 25873 ;;		Unchanged: 0/0
 25874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25879 ;;Total ram usage:        2 bytes
 25880 ;; Hardware stack levels used:    1
 25881 ;; Hardware stack levels required when called:    7
 25882 ;; This function calls:
 25883 ;;		Nothing
 25884 ;; This function is called by:
 25885 ;;		_ADC_Init
 25886 ;; This function uses a non-reentrant model
 25887 ;;
 25888                           
 25889                           	psect	text123
 25890  016466                     __ptext123:
 25891                           	opt stack 0
 25892  016466                     _ADC_ConversionTime:
 25893                           	opt stack 21
 25894                           
 25895                           ; BSR set to: 0
 25896                           ;incstack = 0
 25897                           ;ADC_ConversionTime@pCount stored from wreg
 25898  016466  0100               	movlb	0	; () banked
 25899  016468  6FB9               	movwf	ADC_ConversionTime@pCount& (0+255),b
 25900                           
 25901                           ;ADC.c: 201: if (pCount == 10)
 25902  01646A  0E0A               	movlw	10
 25903  01646C  0100               	movlb	0	; () banked
 25904  01646E  19B9               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25905  016470  B4D8               	btfsc	status,2,c
 25906  016472  D00A               	goto	u11490
 25907                           
 25908                           ; BSR set to: 0
 25909                           ;ADC.c: 203: else if (pCount == 14)
 25910                           
 25911                           ; BSR set to: 0
 25912                           
 25913                           ; BSR set to: 0
 25914                           ;ADC.c: 202: pCount -= 2;
 25915  016474  0E0E               	movlw	14
 25916  016476  0100               	movlb	0	; () banked
 25917  016478  19B9               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25918  01647A  B4D8               	btfsc	status,2,c
 25919  01647C  D005               	goto	u11490
 25920                           
 25921                           ; BSR set to: 0
 25922                           ;ADC.c: 205: else if (pCount == 18)
 25923                           
 25924                           ; BSR set to: 0
 25925                           
 25926                           ; BSR set to: 0
 25927                           ;ADC.c: 204: pCount -= 2;
 25928  01647E  0E12               	movlw	18
 25929  016480  0100               	movlb	0	; () banked
 25930  016482  19B9               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25931  016484  A4D8               	btfss	status,2,c
 25932  016486  D003               	goto	l1313
 25933  016488                     u11490:
 25934                           
 25935                           ; BSR set to: 0
 25936                           ;ADC.c: 206: pCount -= 2;
 25937  016488  0E02               	movlw	2
 25938  01648A  0100               	movlb	0	; () banked
 25939  01648C  5FB9               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 25940  01648E                     l1313:
 25941                           
 25942                           ; BSR set to: 0
 25943                           ;ADC.c: 208: pCount <<= 1;
 25944                           
 25945                           ; BSR set to: 0
 25946                           
 25947                           ; BSR set to: 0
 25948  01648E  0100               	movlb	0	; () banked
 25949  016490  90D8               	bcf	status,0,c
 25950  016492  37B9               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 25951                           
 25952                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 25953  016494  C0B9  F0B8         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 25954  016498  0100               	movlb	0	; () banked
 25955  01649A  47B8               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25956  01649C  47B8               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25957  01649E  47B8               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25958  0164A0  50C1               	movf	4033,w,c	;volatile
 25959  0164A2  0100               	movlb	0	; () banked
 25960  0164A4  19B8               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25961  0164A6  0BC7               	andlw	-57
 25962  0164A8  19B8               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25963  0164AA  6EC1               	movwf	4033,c	;volatile
 25964                           
 25965                           ; BSR set to: 0
 25966  0164AC  0012               	return		;funcret
 25967  0164AE                     __end_of_ADC_ConversionTime:
 25968                           	opt stack 0
 25969                           tosu	equ	0xFFF
 25970                           tosh	equ	0xFFE
 25971                           tosl	equ	0xFFD
 25972                           pclath	equ	0xFFA
 25973                           tblptru	equ	0xFF8
 25974                           tblptrh	equ	0xFF7
 25975                           tblptrl	equ	0xFF6
 25976                           tablat	equ	0xFF5
 25977                           prodh	equ	0xFF4
 25978                           prodl	equ	0xFF3
 25979                           intcon	equ	0xFF2
 25980                           postinc0	equ	0xFEE
 25981                           wreg	equ	0xFE8
 25982                           indf1	equ	0xFE7
 25983                           postdec1	equ	0xFE5
 25984                           fsr1h	equ	0xFE2
 25985                           fsr1l	equ	0xFE1
 25986                           indf2	equ	0xFDF
 25987                           postinc2	equ	0xFDE
 25988                           postdec2	equ	0xFDD
 25989                           plusw2	equ	0xFDB
 25990                           fsr2h	equ	0xFDA
 25991                           fsr2l	equ	0xFD9
 25992                           status	equ	0xFD8
 25993                           
 25994 ;; *************** function _ADC_ClockDivision *****************
 25995 ;; Defined at:
 25996 ;;		line 159 in file "Library/ADC.c"
 25997 ;; Parameters:    Size  Location     Type
 25998 ;;  pDivide         1    wreg     unsigned char 
 25999 ;; Auto vars:     Size  Location     Type
 26000 ;;  pDivide         1    0[BANK0 ] unsigned char 
 26001 ;;  unfound         1    2[BANK0 ] unsigned char 
 26002 ;;  reg             1    1[BANK0 ] unsigned char 
 26003 ;; Return value:  Size  Location     Type
 26004 ;;                  1    wreg      void 
 26005 ;; Registers used:
 26006 ;;		wreg, status,2, status,0
 26007 ;; Tracked objects:
 26008 ;;		On entry : 0/0
 26009 ;;		On exit  : 0/0
 26010 ;;		Unchanged: 0/0
 26011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26016 ;;Total ram usage:        3 bytes
 26017 ;; Hardware stack levels used:    1
 26018 ;; Hardware stack levels required when called:    7
 26019 ;; This function calls:
 26020 ;;		Nothing
 26021 ;; This function is called by:
 26022 ;;		_ADC_Init
 26023 ;; This function uses a non-reentrant model
 26024 ;;
 26025                           
 26026                           	psect	text124
 26027  015728                     __ptext124:
 26028                           	opt stack 0
 26029  015728                     _ADC_ClockDivision:
 26030                           	opt stack 21
 26031                           
 26032                           ; BSR set to: 0
 26033                           ;incstack = 0
 26034                           ;ADC_ClockDivision@pDivide stored from wreg
 26035  015728  0100               	movlb	0	; () banked
 26036  01572A  6FB8               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 26037                           
 26038                           ;ADC.c: 161: UINT8 reg = 0;
 26039  01572C  0E00               	movlw	0
 26040  01572E  0100               	movlb	0	; () banked
 26041  015730  6FB9               	movwf	ADC_ClockDivision@reg& (0+255),b
 26042                           
 26043                           ;ADC.c: 162: bool unfound = 1;
 26044  015732  0E01               	movlw	1
 26045  015734  D002               	goto	L15
 26046  015736                     
 26047                           ; BSR set to: 0
 26048                           ;ADC.c: 167: reg = 0;
 26049                           
 26050                           ; BSR set to: 0
 26051  015736  0E00               	movlw	0
 26052  015738  D00C               	goto	L20
 26053  01573A                     L15:
 26054  01573A  0100               	movlb	0	; () banked
 26055  01573C  6FBA               	movwf	ADC_ClockDivision@unfound& (0+255),b
 26056                           
 26057                           ;ADC.c: 169: break;
 26058  01573E  D02D               	goto	l1296
 26059  015740                     
 26060                           ; BSR set to: 0
 26061                           ;ADC.c: 171: reg = 0b100;
 26062                           
 26063                           ; BSR set to: 0
 26064  015740  0E04               	movlw	4
 26065  015742  D007               	goto	L20
 26066  015744                     
 26067                           ; BSR set to: 0
 26068                           ;ADC.c: 175: reg = 0b001;
 26069                           
 26070                           ; BSR set to: 0
 26071  015744  0E01               	movlw	1
 26072  015746  D005               	goto	L20
 26073  015748                     
 26074                           ; BSR set to: 0
 26075                           ;ADC.c: 179: reg = 0b101;
 26076                           
 26077                           ; BSR set to: 0
 26078  015748  0E05               	movlw	5
 26079  01574A  D003               	goto	L20
 26080  01574C                     
 26081                           ; BSR set to: 0
 26082                           ;ADC.c: 183: reg = 0b010;
 26083                           
 26084                           ; BSR set to: 0
 26085  01574C  0E02               	movlw	2
 26086  01574E  D001               	goto	L20
 26087  015750                     
 26088                           ; BSR set to: 0
 26089                           ;ADC.c: 187: reg = 0b110;
 26090                           
 26091                           ; BSR set to: 0
 26092  015750  0E06               	movlw	6
 26093  015752                     L20:
 26094  015752  0100               	movlb	0	; () banked
 26095  015754  6FB9               	movwf	ADC_ClockDivision@reg& (0+255),b
 26096                           
 26097                           ;ADC.c: 188: unfound = 0;
 26098  015756  0E00               	movlw	0
 26099  015758  D7F0               	goto	L15
 26100  01575A                     
 26101                           ; BSR set to: 0
 26102                           ;ADC.c: 191: if (pDivide > 2)
 26103                           
 26104                           ; BSR set to: 0
 26105  01575A  0E02               	movlw	2
 26106  01575C  0100               	movlb	0	; () banked
 26107  01575E  65B8               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 26108  015760  D003               	goto	l1303
 26109                           
 26110                           ; BSR set to: 0
 26111                           ;ADC.c: 192: pDivide--;
 26112  015762  0100               	movlb	0	; () banked
 26113  015764  07B8               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 26114  015766  D019               	goto	l1296
 26115  015768                     l1303:
 26116                           
 26117                           ; BSR set to: 0
 26118                           ;ADC.c: 193: else
 26119                           ;ADC.c: 194: pDivide = 2;
 26120                           
 26121                           ; BSR set to: 0
 26122  015768  0E02               	movlw	2
 26123  01576A  0100               	movlb	0	; () banked
 26124  01576C  6FB8               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 26125                           
 26126                           ; BSR set to: 0
 26127                           ;ADC.c: 195: };
 26128  01576E  D015               	goto	l1296
 26129  015770                     
 26130                           ; BSR set to: 0
 26131                           
 26132                           ; BSR set to: 0
 26133  015770  0100               	movlb	0	; () banked
 26134  015772  51B8               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 26135                           
 26136                           ; Switch size 1, requested type "space"
 26137                           ; Number of cases is 6, Range of values is 2 to 64
 26138                           ; switch strategies available:
 26139                           ; Name         Instructions Cycles
 26140                           ; simple_byte           19    10 (average)
 26141                           ;	Chosen strategy is simple_byte
 26142  015774  0A02               	xorlw	2	; case 2
 26143  015776  B4D8               	btfsc	status,2,c
 26144  015778  D7DE               	goto	l1295
 26145  01577A  0A06               	xorlw	6	; case 4
 26146  01577C  B4D8               	btfsc	status,2,c
 26147  01577E  D7E0               	goto	l1297
 26148  015780  0A0C               	xorlw	12	; case 8
 26149  015782  B4D8               	btfsc	status,2,c
 26150  015784  D7DF               	goto	l1298
 26151  015786  0A18               	xorlw	24	; case 16
 26152  015788  B4D8               	btfsc	status,2,c
 26153  01578A  D7DE               	goto	l1299
 26154  01578C  0A30               	xorlw	48	; case 32
 26155  01578E  B4D8               	btfsc	status,2,c
 26156  015790  D7DD               	goto	l1300
 26157  015792  0A60               	xorlw	96	; case 64
 26158  015794  B4D8               	btfsc	status,2,c
 26159  015796  D7DC               	goto	l1301
 26160  015798  D7E0               	goto	l1302
 26161  01579A                     l1296:
 26162                           
 26163                           ; BSR set to: 0
 26164                           
 26165                           ; BSR set to: 0
 26166                           
 26167                           ; BSR set to: 0
 26168  01579A  0100               	movlb	0	; () banked
 26169  01579C  51BA               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 26170  01579E  0100               	movlb	0	; () banked
 26171  0157A0  A4D8               	btfss	status,2,c
 26172  0157A2  D7E6               	goto	l1294
 26173                           
 26174                           ; BSR set to: 0
 26175                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 26176                           
 26177                           ; BSR set to: 0
 26178  0157A4  50C1               	movf	4033,w,c	;volatile
 26179  0157A6  0100               	movlb	0	; () banked
 26180  0157A8  19B9               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 26181  0157AA  0BF8               	andlw	-8
 26182  0157AC  19B9               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 26183  0157AE  6EC1               	movwf	4033,c	;volatile
 26184                           
 26185                           ; BSR set to: 0
 26186  0157B0  0012               	return		;funcret
 26187  0157B2                     __end_of_ADC_ClockDivision:
 26188                           	opt stack 0
 26189                           tosu	equ	0xFFF
 26190                           tosh	equ	0xFFE
 26191                           tosl	equ	0xFFD
 26192                           pclath	equ	0xFFA
 26193                           tblptru	equ	0xFF8
 26194                           tblptrh	equ	0xFF7
 26195                           tblptrl	equ	0xFF6
 26196                           tablat	equ	0xFF5
 26197                           prodh	equ	0xFF4
 26198                           prodl	equ	0xFF3
 26199                           intcon	equ	0xFF2
 26200                           postinc0	equ	0xFEE
 26201                           wreg	equ	0xFE8
 26202                           indf1	equ	0xFE7
 26203                           postdec1	equ	0xFE5
 26204                           fsr1h	equ	0xFE2
 26205                           fsr1l	equ	0xFE1
 26206                           indf2	equ	0xFDF
 26207                           postinc2	equ	0xFDE
 26208                           postdec2	equ	0xFDD
 26209                           plusw2	equ	0xFDB
 26210                           fsr2h	equ	0xFDA
 26211                           fsr2l	equ	0xFD9
 26212                           status	equ	0xFD8
 26213                           
 26214 ;; *************** function _ADC_Calibrate *****************
 26215 ;; Defined at:
 26216 ;;		line 63 in file "Library/ADC.c"
 26217 ;; Parameters:    Size  Location     Type
 26218 ;;		None
 26219 ;; Auto vars:     Size  Location     Type
 26220 ;;		None
 26221 ;; Return value:  Size  Location     Type
 26222 ;;                  1    wreg      void 
 26223 ;; Registers used:
 26224 ;;		cstack
 26225 ;; Tracked objects:
 26226 ;;		On entry : 0/0
 26227 ;;		On exit  : 0/0
 26228 ;;		Unchanged: 0/0
 26229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26234 ;;Total ram usage:        0 bytes
 26235 ;; Hardware stack levels used:    1
 26236 ;; Hardware stack levels required when called:    8
 26237 ;; This function calls:
 26238 ;;		_ADC_Off
 26239 ;;		_ADC_On
 26240 ;; This function is called by:
 26241 ;;		_ADC_Init
 26242 ;; This function uses a non-reentrant model
 26243 ;;
 26244                           
 26245                           	psect	text125
 26246  016DD0                     __ptext125:
 26247                           	opt stack 0
 26248  016DD0                     _ADC_Calibrate:
 26249                           	opt stack 20
 26250                           
 26251                           ;ADC.c: 65: ADC_On();
 26252                           
 26253                           ; BSR set to: 0
 26254                           ;incstack = 0
 26255  016DD0  EC75  F0B7         	call	_ADC_On	;wreg free
 26256                           
 26257                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 26258  016DD4  8CC1               	bsf	4033,6,c	;volatile
 26259                           
 26260                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 26261  016DD6  82C2               	bsf	4034,1,c	;volatile
 26262  016DD8  B2C2               	btfsc	4034,1,c	;volatile
 26263  016DDA  D7FE               	goto	l1254
 26264                           
 26265                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 26266  016DDC  9CC1               	bcf	4033,6,c	;volatile
 26267                           
 26268                           ;ADC.c: 73: ADC_Off();
 26269  016DDE  EC67  F0B7         	call	_ADC_Off	;wreg free
 26270  016DE2  0012               	return		;funcret
 26271  016DE4                     __end_of_ADC_Calibrate:
 26272                           	opt stack 0
 26273                           tosu	equ	0xFFF
 26274                           tosh	equ	0xFFE
 26275                           tosl	equ	0xFFD
 26276                           pclath	equ	0xFFA
 26277                           tblptru	equ	0xFF8
 26278                           tblptrh	equ	0xFF7
 26279                           tblptrl	equ	0xFF6
 26280                           tablat	equ	0xFF5
 26281                           prodh	equ	0xFF4
 26282                           prodl	equ	0xFF3
 26283                           intcon	equ	0xFF2
 26284                           postinc0	equ	0xFEE
 26285                           wreg	equ	0xFE8
 26286                           indf1	equ	0xFE7
 26287                           postdec1	equ	0xFE5
 26288                           fsr1h	equ	0xFE2
 26289                           fsr1l	equ	0xFE1
 26290                           indf2	equ	0xFDF
 26291                           postinc2	equ	0xFDE
 26292                           postdec2	equ	0xFDD
 26293                           plusw2	equ	0xFDB
 26294                           fsr2h	equ	0xFDA
 26295                           fsr2l	equ	0xFD9
 26296                           status	equ	0xFD8
 26297                           
 26298 ;; *************** function _ADC_On *****************
 26299 ;; Defined at:
 26300 ;;		line 85 in file "Library/ADC.c"
 26301 ;; Parameters:    Size  Location     Type
 26302 ;;		None
 26303 ;; Auto vars:     Size  Location     Type
 26304 ;;		None
 26305 ;; Return value:  Size  Location     Type
 26306 ;;                  1    wreg      void 
 26307 ;; Registers used:
 26308 ;;		None
 26309 ;; Tracked objects:
 26310 ;;		On entry : 0/0
 26311 ;;		On exit  : 0/0
 26312 ;;		Unchanged: 0/0
 26313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26318 ;;Total ram usage:        0 bytes
 26319 ;; Hardware stack levels used:    1
 26320 ;; Hardware stack levels required when called:    7
 26321 ;; This function calls:
 26322 ;;		Nothing
 26323 ;; This function is called by:
 26324 ;;		_ADC_Calibrate
 26325 ;;		_ADC_Start
 26326 ;;		_ADC_ISR
 26327 ;;		_ADC_Sample
 26328 ;; This function uses a non-reentrant model
 26329 ;;
 26330                           
 26331                           	psect	text126
 26332  016EEA                     __ptext126:
 26333                           	opt stack 0
 26334  016EEA                     _ADC_On:
 26335                           	opt stack 20
 26336                           
 26337                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 26338                           
 26339                           ;incstack = 0
 26340  016EEA  80C2               	bsf	4034,0,c	;volatile
 26341                           
 26342                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 26343  016EEC  9C9E               	bcf	3998,6,c	;volatile
 26344  016EEE  0012               	return		;funcret
 26345  016EF0                     __end_of_ADC_On:
 26346                           	opt stack 0
 26347                           tosu	equ	0xFFF
 26348                           tosh	equ	0xFFE
 26349                           tosl	equ	0xFFD
 26350                           pclath	equ	0xFFA
 26351                           tblptru	equ	0xFF8
 26352                           tblptrh	equ	0xFF7
 26353                           tblptrl	equ	0xFF6
 26354                           tablat	equ	0xFF5
 26355                           prodh	equ	0xFF4
 26356                           prodl	equ	0xFF3
 26357                           intcon	equ	0xFF2
 26358                           postinc0	equ	0xFEE
 26359                           wreg	equ	0xFE8
 26360                           indf1	equ	0xFE7
 26361                           postdec1	equ	0xFE5
 26362                           fsr1h	equ	0xFE2
 26363                           fsr1l	equ	0xFE1
 26364                           indf2	equ	0xFDF
 26365                           postinc2	equ	0xFDE
 26366                           postdec2	equ	0xFDD
 26367                           plusw2	equ	0xFDB
 26368                           fsr2h	equ	0xFDA
 26369                           fsr2l	equ	0xFD9
 26370                           status	equ	0xFD8
 26371                           
 26372 ;; *************** function _ADC_Off *****************
 26373 ;; Defined at:
 26374 ;;		line 94 in file "Library/ADC.c"
 26375 ;; Parameters:    Size  Location     Type
 26376 ;;		None
 26377 ;; Auto vars:     Size  Location     Type
 26378 ;;		None
 26379 ;; Return value:  Size  Location     Type
 26380 ;;                  1    wreg      void 
 26381 ;; Registers used:
 26382 ;;		None
 26383 ;; Tracked objects:
 26384 ;;		On entry : 0/0
 26385 ;;		On exit  : 0/0
 26386 ;;		Unchanged: 0/0
 26387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26392 ;;Total ram usage:        0 bytes
 26393 ;; Hardware stack levels used:    1
 26394 ;; Hardware stack levels required when called:    7
 26395 ;; This function calls:
 26396 ;;		Nothing
 26397 ;; This function is called by:
 26398 ;;		_ADC_Calibrate
 26399 ;;		_ADC_Start
 26400 ;;		_ADC_ISR
 26401 ;;		_ADC_Sample
 26402 ;; This function uses a non-reentrant model
 26403 ;;
 26404                           
 26405                           	psect	text127
 26406  016ECE                     __ptext127:
 26407                           	opt stack 0
 26408  016ECE                     _ADC_Off:
 26409                           	opt stack 20
 26410                           
 26411                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 26412                           
 26413                           ;incstack = 0
 26414  016ECE  90C2               	bcf	4034,0,c	;volatile
 26415                           
 26416                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 26417  016ED0  9C9E               	bcf	3998,6,c	;volatile
 26418                           
 26419                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 26420  016ED2  9C9D               	bcf	3997,6,c	;volatile
 26421  016ED4  0012               	return		;funcret
 26422  016ED6                     __end_of_ADC_Off:
 26423                           	opt stack 0
 26424                           tosu	equ	0xFFF
 26425                           tosh	equ	0xFFE
 26426                           tosl	equ	0xFFD
 26427                           pclath	equ	0xFFA
 26428                           tblptru	equ	0xFF8
 26429                           tblptrh	equ	0xFF7
 26430                           tblptrl	equ	0xFF6
 26431                           tablat	equ	0xFF5
 26432                           prodh	equ	0xFF4
 26433                           prodl	equ	0xFF3
 26434                           intcon	equ	0xFF2
 26435                           postinc0	equ	0xFEE
 26436                           wreg	equ	0xFE8
 26437                           indf1	equ	0xFE7
 26438                           postdec1	equ	0xFE5
 26439                           fsr1h	equ	0xFE2
 26440                           fsr1l	equ	0xFE1
 26441                           indf2	equ	0xFDF
 26442                           postinc2	equ	0xFDE
 26443                           postdec2	equ	0xFDD
 26444                           plusw2	equ	0xFDB
 26445                           fsr2h	equ	0xFDA
 26446                           fsr2l	equ	0xFD9
 26447                           status	equ	0xFD8
 26448                           
 26449 ;; *************** function _getMode *****************
 26450 ;; Defined at:
 26451 ;;		line 111 in file "main.c"
 26452 ;; Parameters:    Size  Location     Type
 26453 ;;		None
 26454 ;; Auto vars:     Size  Location     Type
 26455 ;;		None
 26456 ;; Return value:  Size  Location     Type
 26457 ;;                  1    wreg      void 
 26458 ;; Registers used:
 26459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26460 ;; Tracked objects:
 26461 ;;		On entry : 0/0
 26462 ;;		On exit  : 0/0
 26463 ;;		Unchanged: 0/0
 26464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26469 ;;Total ram usage:        0 bytes
 26470 ;; Hardware stack levels used:    1
 26471 ;; Hardware stack levels required when called:   16
 26472 ;; This function calls:
 26473 ;;		_HMI_DIPSwitch
 26474 ;;		_HMI_DownSwitch
 26475 ;;		_HMI_LeftSwitch
 26476 ;;		_HMI_Poll
 26477 ;;		_HMI_RightSwitch
 26478 ;;		_HMI_UpSwitch
 26479 ;;		_MXK_DIPSwitch
 26480 ;;		_MXK_TestButton
 26481 ;; This function is called by:
 26482 ;;		_main
 26483 ;; This function uses a non-reentrant model
 26484 ;;
 26485                           
 26486                           	psect	text128
 26487  0148E8                     __ptext128:
 26488                           	opt stack 0
 26489  0148E8                     _getMode:
 26490                           	opt stack 14
 26491                           
 26492                           ;main.c: 112: HMI_Poll();
 26493                           
 26494                           ;incstack = 0
 26495  0148E8  ECFC  F0AD         	call	_HMI_Poll	;wreg free
 26496                           
 26497                           ;main.c: 113: mode = 0;
 26498  0148EC  0E00               	movlw	0
 26499  0148EE  0103               	movlb	3	; () banked
 26500  0148F0  6F42               	movwf	(_mode+1)& (0+255),b
 26501  0148F2  0E00               	movlw	0
 26502  0148F4  6F41               	movwf	_mode& (0+255),b
 26503                           
 26504                           ; BSR set to: 3
 26505                           ;main.c: 114: if (HMIBoard.mUp.mGetState()) {
 26506  0148F6  EE23  F06A         	lfsr	2,_HMIBoard+35
 26507  0148FA  D801               	call	u12538
 26508  0148FC  D00A               	goto	u12539
 26509  0148FE                     u12538:
 26510  0148FE  0005               	push	
 26511  014900  6EFA               	movwf	pclath,c
 26512  014902  50DE               	movf	postinc2,w,c
 26513  014904  6EFD               	movwf	tosl,c
 26514  014906  50DE               	movf	postinc2,w,c
 26515  014908  6EFE               	movwf	tosh,c
 26516  01490A  50DE               	movf	postinc2,w,c
 26517  01490C  6EFF               	movwf	tosu,c
 26518  01490E  50FA               	movf	pclath,w,c
 26519  014910  0012               	return		;indir
 26520  014912                     u12539:
 26521  014912  0900               	iorlw	0
 26522  014914  B4D8               	btfsc	status,2,c
 26523  014916  D005               	goto	l2328
 26524                           
 26525                           ;main.c: 115: mode = 1;
 26526  014918  0E00               	movlw	0
 26527  01491A  0103               	movlb	3	; () banked
 26528  01491C  6F42               	movwf	(_mode+1)& (0+255),b
 26529  01491E  0E01               	movlw	1
 26530  014920  6F41               	movwf	_mode& (0+255),b
 26531  014922                     l2328:
 26532                           
 26533                           ;main.c: 116: }
 26534                           ;main.c: 117: if (HMIBoard.mRight.mGetState()) {
 26535                           
 26536                           ; BSR set to: 3
 26537  014922  EE23  F056         	lfsr	2,_HMIBoard+15
 26538  014926  D801               	call	u12558
 26539  014928  D00A               	goto	u12559
 26540  01492A                     u12558:
 26541  01492A  0005               	push	
 26542  01492C  6EFA               	movwf	pclath,c
 26543  01492E  50DE               	movf	postinc2,w,c
 26544  014930  6EFD               	movwf	tosl,c
 26545  014932  50DE               	movf	postinc2,w,c
 26546  014934  6EFE               	movwf	tosh,c
 26547  014936  50DE               	movf	postinc2,w,c
 26548  014938  6EFF               	movwf	tosu,c
 26549  01493A  50FA               	movf	pclath,w,c
 26550  01493C  0012               	return		;indir
 26551  01493E                     u12559:
 26552  01493E  0900               	iorlw	0
 26553  014940  B4D8               	btfsc	status,2,c
 26554  014942  D005               	goto	l2329
 26555                           
 26556                           ;main.c: 118: mode = 2;
 26557  014944  0E00               	movlw	0
 26558  014946  0103               	movlb	3	; () banked
 26559  014948  6F42               	movwf	(_mode+1)& (0+255),b
 26560  01494A  0E02               	movlw	2
 26561  01494C  6F41               	movwf	_mode& (0+255),b
 26562  01494E                     l2329:
 26563                           
 26564                           ;main.c: 119: }
 26565                           ;main.c: 120: if (HMIBoard.mDown.mGetState()) {
 26566                           
 26567                           ; BSR set to: 3
 26568  01494E  EE23  F074         	lfsr	2,_HMIBoard+45
 26569  014952  D801               	call	u12578
 26570  014954  D00A               	goto	u12579
 26571  014956                     u12578:
 26572  014956  0005               	push	
 26573  014958  6EFA               	movwf	pclath,c
 26574  01495A  50DE               	movf	postinc2,w,c
 26575  01495C  6EFD               	movwf	tosl,c
 26576  01495E  50DE               	movf	postinc2,w,c
 26577  014960  6EFE               	movwf	tosh,c
 26578  014962  50DE               	movf	postinc2,w,c
 26579  014964  6EFF               	movwf	tosu,c
 26580  014966  50FA               	movf	pclath,w,c
 26581  014968  0012               	return		;indir
 26582  01496A                     u12579:
 26583  01496A  0900               	iorlw	0
 26584  01496C  B4D8               	btfsc	status,2,c
 26585  01496E  D005               	goto	l2330
 26586                           
 26587                           ;main.c: 121: mode = 3;
 26588  014970  0E00               	movlw	0
 26589  014972  0103               	movlb	3	; () banked
 26590  014974  6F42               	movwf	(_mode+1)& (0+255),b
 26591  014976  0E03               	movlw	3
 26592  014978  6F41               	movwf	_mode& (0+255),b
 26593  01497A                     l2330:
 26594                           
 26595                           ;main.c: 122: }
 26596                           ;main.c: 123: if (HMIBoard.mLeft.mGetState()) {
 26597                           
 26598                           ; BSR set to: 3
 26599  01497A  EE23  F060         	lfsr	2,_HMIBoard+25
 26600  01497E  D801               	call	u12598
 26601  014980  D00A               	goto	u12599
 26602  014982                     u12598:
 26603  014982  0005               	push	
 26604  014984  6EFA               	movwf	pclath,c
 26605  014986  50DE               	movf	postinc2,w,c
 26606  014988  6EFD               	movwf	tosl,c
 26607  01498A  50DE               	movf	postinc2,w,c
 26608  01498C  6EFE               	movwf	tosh,c
 26609  01498E  50DE               	movf	postinc2,w,c
 26610  014990  6EFF               	movwf	tosu,c
 26611  014992  50FA               	movf	pclath,w,c
 26612  014994  0012               	return		;indir
 26613  014996                     u12599:
 26614  014996  0900               	iorlw	0
 26615  014998  B4D8               	btfsc	status,2,c
 26616  01499A  0012               	return	
 26617                           
 26618                           ;main.c: 124: mode = 4;
 26619  01499C  0E00               	movlw	0
 26620  01499E  0103               	movlb	3	; () banked
 26621  0149A0  6F42               	movwf	(_mode+1)& (0+255),b
 26622  0149A2  0E04               	movlw	4
 26623  0149A4  6F41               	movwf	_mode& (0+255),b
 26624  0149A6  0012               	return	
 26625  0149A8                     __end_of_getMode:
 26626                           	opt stack 0
 26627                           tosu	equ	0xFFF
 26628                           tosh	equ	0xFFE
 26629                           tosl	equ	0xFFD
 26630                           pclath	equ	0xFFA
 26631                           tblptru	equ	0xFF8
 26632                           tblptrh	equ	0xFF7
 26633                           tblptrl	equ	0xFF6
 26634                           tablat	equ	0xFF5
 26635                           prodh	equ	0xFF4
 26636                           prodl	equ	0xFF3
 26637                           intcon	equ	0xFF2
 26638                           postinc0	equ	0xFEE
 26639                           wreg	equ	0xFE8
 26640                           indf1	equ	0xFE7
 26641                           postdec1	equ	0xFE5
 26642                           fsr1h	equ	0xFE2
 26643                           fsr1l	equ	0xFE1
 26644                           indf2	equ	0xFDF
 26645                           postinc2	equ	0xFDE
 26646                           postdec2	equ	0xFDD
 26647                           plusw2	equ	0xFDB
 26648                           fsr2h	equ	0xFDA
 26649                           fsr2l	equ	0xFD9
 26650                           status	equ	0xFD8
 26651                           
 26652 ;; *************** function _HMI_Poll *****************
 26653 ;; Defined at:
 26654 ;;		line 252 in file "HMI.c"
 26655 ;; Parameters:    Size  Location     Type
 26656 ;;		None
 26657 ;; Auto vars:     Size  Location     Type
 26658 ;;		None
 26659 ;; Return value:  Size  Location     Type
 26660 ;;                  1    wreg      void 
 26661 ;; Registers used:
 26662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26663 ;; Tracked objects:
 26664 ;;		On entry : 0/0
 26665 ;;		On exit  : 0/0
 26666 ;;		Unchanged: 0/0
 26667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26672 ;;Total ram usage:        0 bytes
 26673 ;; Hardware stack levels used:    1
 26674 ;; Hardware stack levels required when called:   15
 26675 ;; This function calls:
 26676 ;;		_Button_Poll
 26677 ;; This function is called by:
 26678 ;;		_getMode
 26679 ;;		_safeToGo
 26680 ;;		_main
 26681 ;; This function uses a non-reentrant model
 26682 ;;
 26683                           
 26684                           	psect	text129
 26685  015BF8                     __ptext129:
 26686                           	opt stack 0
 26687  015BF8                     _HMI_Poll:
 26688                           	opt stack 13
 26689                           
 26690                           ;HMI.c: 254: TRISE = 0xFC;
 26691                           
 26692                           ;incstack = 0
 26693  015BF8  0EFC               	movlw	252
 26694  015BFA  6E96               	movwf	3990,c	;volatile
 26695                           
 26696                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 26697  015BFC  0E77               	movlw	low (_HMIBoard+48)
 26698  015BFE  0100               	movlb	0	; () banked
 26699  015C00  6FD3               	movwf	Button_Poll@pButton& (0+255),b
 26700  015C02  0E03               	movlw	high (_HMIBoard+48)
 26701  015C04  0100               	movlb	0	; () banked
 26702  015C06  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26703  015C08  0E01               	movlw	1
 26704  015C0A  0100               	movlb	0	; () banked
 26705  015C0C  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
 26706  015C0E  EC29  F09B         	call	_Button_Poll	;wreg free
 26707                           
 26708                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 26709  015C12  0E59               	movlw	low (_HMIBoard+18)
 26710  015C14  0100               	movlb	0	; () banked
 26711  015C16  6FD3               	movwf	Button_Poll@pButton& (0+255),b
 26712  015C18  0E03               	movlw	high (_HMIBoard+18)
 26713  015C1A  0100               	movlb	0	; () banked
 26714  015C1C  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26715  015C1E  0E01               	movlw	1
 26716  015C20  0100               	movlb	0	; () banked
 26717  015C22  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
 26718  015C24  EC29  F09B         	call	_Button_Poll	;wreg free
 26719                           
 26720                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 26721  015C28  0E4F               	movlw	low (_HMIBoard+8)
 26722  015C2A  0100               	movlb	0	; () banked
 26723  015C2C  6FD3               	movwf	Button_Poll@pButton& (0+255),b
 26724  015C2E  0E03               	movlw	high (_HMIBoard+8)
 26725  015C30  0100               	movlb	0	; () banked
 26726  015C32  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26727  015C34  0E01               	movlw	1
 26728  015C36  0100               	movlb	0	; () banked
 26729  015C38  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
 26730  015C3A  EC29  F09B         	call	_Button_Poll	;wreg free
 26731                           
 26732                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 26733  015C3E  0E63               	movlw	low (_HMIBoard+28)
 26734  015C40  0100               	movlb	0	; () banked
 26735  015C42  6FD3               	movwf	Button_Poll@pButton& (0+255),b
 26736  015C44  0E03               	movlw	high (_HMIBoard+28)
 26737  015C46  0100               	movlb	0	; () banked
 26738  015C48  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26739  015C4A  0E01               	movlw	1
 26740  015C4C  0100               	movlb	0	; () banked
 26741  015C4E  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
 26742  015C50  EC29  F09B         	call	_Button_Poll	;wreg free
 26743                           
 26744                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 26745  015C54  0E6D               	movlw	low (_HMIBoard+38)
 26746  015C56  0100               	movlb	0	; () banked
 26747  015C58  6FD3               	movwf	Button_Poll@pButton& (0+255),b
 26748  015C5A  0E03               	movlw	high (_HMIBoard+38)
 26749  015C5C  0100               	movlb	0	; () banked
 26750  015C5E  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26751  015C60  0E01               	movlw	1
 26752  015C62  0100               	movlb	0	; () banked
 26753  015C64  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
 26754  015C66  EC29  F09B         	call	_Button_Poll	;wreg free
 26755  015C6A  0012               	return		;funcret
 26756  015C6C                     __end_of_HMI_Poll:
 26757                           	opt stack 0
 26758                           tosu	equ	0xFFF
 26759                           tosh	equ	0xFFE
 26760                           tosl	equ	0xFFD
 26761                           pclath	equ	0xFFA
 26762                           tblptru	equ	0xFF8
 26763                           tblptrh	equ	0xFF7
 26764                           tblptrl	equ	0xFF6
 26765                           tablat	equ	0xFF5
 26766                           prodh	equ	0xFF4
 26767                           prodl	equ	0xFF3
 26768                           intcon	equ	0xFF2
 26769                           postinc0	equ	0xFEE
 26770                           wreg	equ	0xFE8
 26771                           indf1	equ	0xFE7
 26772                           postdec1	equ	0xFE5
 26773                           fsr1h	equ	0xFE2
 26774                           fsr1l	equ	0xFE1
 26775                           indf2	equ	0xFDF
 26776                           postinc2	equ	0xFDE
 26777                           postdec2	equ	0xFDD
 26778                           plusw2	equ	0xFDB
 26779                           fsr2h	equ	0xFDA
 26780                           fsr2l	equ	0xFD9
 26781                           status	equ	0xFD8
 26782                           
 26783 ;; *************** function _Button_Poll *****************
 26784 ;; Defined at:
 26785 ;;		line 57 in file "Library/Button.c"
 26786 ;; Parameters:    Size  Location     Type
 26787 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 26788 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 26789 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 26790 ;; Auto vars:     Size  Location     Type
 26791 ;;  Pin             1   35[BANK0 ] unsigned char 
 26792 ;; Return value:  Size  Location     Type
 26793 ;;                  1    wreg      unsigned char 
 26794 ;; Registers used:
 26795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26796 ;; Tracked objects:
 26797 ;;		On entry : 0/0
 26798 ;;		On exit  : 0/0
 26799 ;;		Unchanged: 0/0
 26800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26801 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26803 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26804 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26805 ;;Total ram usage:        9 bytes
 26806 ;; Hardware stack levels used:    1
 26807 ;; Hardware stack levels required when called:   14
 26808 ;; This function calls:
 26809 ;;		_Event_DIPSwitch
 26810 ;;		_Event_NULL
 26811 ;;		_Event_TestButton
 26812 ;;		_HMI_DIPSwitch
 26813 ;;		_HMI_DownSwitch
 26814 ;;		_HMI_LeftSwitch
 26815 ;;		_HMI_RightSwitch
 26816 ;;		_HMI_UpSwitch
 26817 ;;		_MXK_DIPSwitch
 26818 ;;		_MXK_TestButton
 26819 ;; This function is called by:
 26820 ;;		_HMI_Poll
 26821 ;;		_MXK_Poll
 26822 ;; This function uses a non-reentrant model
 26823 ;;
 26824                           
 26825                           	psect	text130
 26826  013652                     __ptext130:
 26827                           	opt stack 0
 26828  013652                     _Button_Poll:
 26829                           	opt stack 13
 26830                           
 26831                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 26832                           
 26833                           ;incstack = 0
 26834  013652  0100               	movlb	0	; () banked
 26835  013654  EE20 F007          	lfsr	2,7
 26836  013658  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26837  01365A  26D9               	addwf	fsr2l,f,c
 26838  01365C  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26839  01365E  22DA               	addwfc	fsr2h,f,c
 26840  013660  D801               	call	u10808
 26841  013662  D00A               	goto	u10809
 26842  013664                     u10808:
 26843  013664  0005               	push	
 26844  013666  6EFA               	movwf	pclath,c
 26845  013668  50DE               	movf	postinc2,w,c
 26846  01366A  6EFD               	movwf	tosl,c
 26847  01366C  50DE               	movf	postinc2,w,c
 26848  01366E  6EFE               	movwf	tosh,c
 26849  013670  50DE               	movf	postinc2,w,c
 26850  013672  6EFF               	movwf	tosu,c
 26851  013674  50FA               	movf	pclath,w,c
 26852  013676  0012               	return		;indir
 26853  013678                     u10809:
 26854  013678  0100               	movlb	0	; () banked
 26855  01367A  6FDB               	movwf	Button_Poll@Pin& (0+255),b
 26856                           
 26857                           ; BSR set to: 0
 26858                           ;Button.c: 61: if (pButton->mState == Pin)
 26859  01367C  C0D3  FFD9         	movff	Button_Poll@pButton,fsr2l
 26860  013680  C0D4  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26861  013684  0100               	movlb	0	; () banked
 26862  013686  51DB               	movf	Button_Poll@Pin& (0+255),w,b
 26863  013688  18DE               	xorwf	postinc2,w,c
 26864  01368A  A4D8               	btfss	status,2,c
 26865  01368C  D021               	goto	l11
 26866                           
 26867                           ; BSR set to: 0
 26868                           ;Button.c: 62: {
 26869                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 26870  01368E  0100               	movlb	0	; () banked
 26871  013690  EE20 F001          	lfsr	2,1
 26872  013694  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26873  013696  26D9               	addwf	fsr2l,f,c
 26874  013698  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26875  01369A  22DA               	addwfc	fsr2h,f,c
 26876  01369C  0100               	movlb	0	; () banked
 26877  01369E  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
 26878  0136A0  5CDE               	subwf	postinc2,w,c
 26879  0136A2  B0D8               	btfsc	status,0,c
 26880  0136A4  D00A               	goto	l12
 26881                           
 26882                           ; BSR set to: 0
 26883                           ;Button.c: 66: pButton->mCount = 0;
 26884  0136A6  0100               	movlb	0	; () banked
 26885  0136A8  EE20 F001          	lfsr	2,1
 26886  0136AC  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26887  0136AE  26D9               	addwf	fsr2l,f,c
 26888  0136B0  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26889  0136B2  22DA               	addwfc	fsr2h,f,c
 26890  0136B4  0E00               	movlw	0
 26891  0136B6  6EDF               	movwf	indf2,c
 26892  0136B8  0012               	return	
 26893  0136BA                     l12:
 26894                           
 26895                           ; BSR set to: 0
 26896                           ;Button.c: 67: else
 26897                           ;Button.c: 68: pButton->mCount -= pIncrement;
 26898                           
 26899                           ; BSR set to: 0
 26900  0136BA  0100               	movlb	0	; () banked
 26901  0136BC  EE20 F001          	lfsr	2,1
 26902  0136C0  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26903  0136C2  26D9               	addwf	fsr2l,f,c
 26904  0136C4  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26905  0136C6  22DA               	addwfc	fsr2h,f,c
 26906  0136C8  0100               	movlb	0	; () banked
 26907  0136CA  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
 26908  0136CC  5EDF               	subwf	indf2,f,c
 26909                           
 26910                           ; BSR set to: 0
 26911                           ;Button.c: 69: }
 26912  0136CE  0012               	return	
 26913  0136D0                     l11:
 26914                           
 26915                           ; BSR set to: 0
 26916                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 26917                           
 26918                           ; BSR set to: 0
 26919  0136D0  0100               	movlb	0	; () banked
 26920  0136D2  EE20 F001          	lfsr	2,1
 26921  0136D6  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26922  0136D8  26D9               	addwf	fsr2l,f,c
 26923  0136DA  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26924  0136DC  22DA               	addwfc	fsr2h,f,c
 26925  0136DE  50DF               	movf	indf2,w,c
 26926  0136E0  0100               	movlb	0	; () banked
 26927  0136E2  6FD6               	movwf	??_Button_Poll& (0+255),b
 26928  0136E4  6BD7               	clrf	(??_Button_Poll+1)& (0+255),b
 26929  0136E6  0100               	movlb	0	; () banked
 26930  0136E8  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
 26931  0136EA  0100               	movlb	0	; () banked
 26932  0136EC  27D6               	addwf	??_Button_Poll& (0+255),f,b
 26933  0136EE  0E00               	movlw	0
 26934  0136F0  23D7               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 26935  0136F2  0100               	movlb	0	; () banked
 26936  0136F4  EE20 F001          	lfsr	2,1
 26937  0136F8  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26938  0136FA  26D9               	addwf	fsr2l,f,c
 26939  0136FC  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26940  0136FE  22DA               	addwfc	fsr2h,f,c
 26941  013700  50DF               	movf	indf2,w,c
 26942  013702  0100               	movlb	0	; () banked
 26943  013704  6FD8               	movwf	(??_Button_Poll+2)& (0+255),b
 26944  013706  6BD9               	clrf	(??_Button_Poll+3)& (0+255),b
 26945  013708  0100               	movlb	0	; () banked
 26946  01370A  51D6               	movf	??_Button_Poll& (0+255),w,b
 26947  01370C  0100               	movlb	0	; () banked
 26948  01370E  5DD8               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26949  013710  0100               	movlb	0	; () banked
 26950  013712  51D9               	movf	(??_Button_Poll+3)& (0+255),w,b
 26951  013714  0A80               	xorlw	128
 26952  013716  0100               	movlb	0	; () banked
 26953  013718  6FDA               	movwf	(??_Button_Poll+4)& (0+255),b
 26954  01371A  0100               	movlb	0	; () banked
 26955  01371C  51D7               	movf	(??_Button_Poll+1)& (0+255),w,b
 26956  01371E  0A80               	xorlw	128
 26957  013720  0100               	movlb	0	; () banked
 26958  013722  59DA               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 26959  013724  B0D8               	btfsc	status,0,c
 26960  013726  0012               	return	
 26961                           
 26962                           ; BSR set to: 0
 26963                           ;Button.c: 73: {
 26964                           ;Button.c: 75: pButton->mCount += pIncrement;
 26965  013728  0100               	movlb	0	; () banked
 26966  01372A  EE20 F001          	lfsr	2,1
 26967  01372E  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26968  013730  26D9               	addwf	fsr2l,f,c
 26969  013732  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26970  013734  22DA               	addwfc	fsr2h,f,c
 26971  013736  0100               	movlb	0	; () banked
 26972  013738  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
 26973  01373A  26DF               	addwf	indf2,f,c
 26974                           
 26975                           ; BSR set to: 0
 26976                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 26977  01373C  0100               	movlb	0	; () banked
 26978  01373E  EE20 F002          	lfsr	2,2
 26979  013742  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26980  013744  26D9               	addwf	fsr2l,f,c
 26981  013746  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26982  013748  22DA               	addwfc	fsr2h,f,c
 26983  01374A  0100               	movlb	0	; () banked
 26984  01374C  EE10 F001          	lfsr	1,1
 26985  013750  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 26986  013752  26E1               	addwf	fsr1l,f,c
 26987  013754  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26988  013756  22E2               	addwfc	fsr1h,f,c
 26989  013758  50E7               	movf	indf1,w,c
 26990  01375A  0100               	movlb	0	; () banked
 26991  01375C  6FD8               	movwf	(??_Button_Poll+2)& (0+255),b
 26992  01375E  6BD9               	clrf	(??_Button_Poll+3)& (0+255),b
 26993  013760  50DE               	movf	postinc2,w,c
 26994  013762  0100               	movlb	0	; () banked
 26995  013764  5DD8               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26996  013766  50DE               	movf	postinc2,w,c
 26997  013768  0100               	movlb	0	; () banked
 26998  01376A  59D9               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 26999  01376C  A0D8               	btfss	status,0,c
 27000  01376E  0012               	return	
 27001                           
 27002                           ; BSR set to: 0
 27003                           ;Button.c: 77: {
 27004                           ;Button.c: 79: pButton->mState = Pin;
 27005  013770  C0D3  FFD9         	movff	Button_Poll@pButton,fsr2l
 27006  013774  C0D4  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 27007  013778  C0DB  FFDF         	movff	Button_Poll@Pin,indf2
 27008                           
 27009                           ; BSR set to: 0
 27010                           ;Button.c: 80: pButton->mCount = 0;
 27011  01377C  0100               	movlb	0	; () banked
 27012  01377E  EE20 F001          	lfsr	2,1
 27013  013782  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 27014  013784  26D9               	addwf	fsr2l,f,c
 27015  013786  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 27016  013788  22DA               	addwfc	fsr2h,f,c
 27017  01378A  0E00               	movlw	0
 27018  01378C  6EDF               	movwf	indf2,c
 27019                           
 27020                           ; BSR set to: 0
 27021                           ;Button.c: 83: pButton->mFunction(Pin);
 27022  01378E  0100               	movlb	0	; () banked
 27023  013790  EE20 F004          	lfsr	2,4
 27024  013794  51D3               	movf	Button_Poll@pButton& (0+255),w,b
 27025  013796  26D9               	addwf	fsr2l,f,c
 27026  013798  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 27027  01379A  22DA               	addwfc	fsr2h,f,c
 27028  01379C  D801               	call	u10858
 27029  01379E  0012               	return	
 27030  0137A0                     u10858:
 27031  0137A0  0005               	push	
 27032  0137A2  6EFA               	movwf	pclath,c
 27033  0137A4  50DE               	movf	postinc2,w,c
 27034  0137A6  6EFD               	movwf	tosl,c
 27035  0137A8  50DE               	movf	postinc2,w,c
 27036  0137AA  6EFE               	movwf	tosh,c
 27037  0137AC  50DE               	movf	postinc2,w,c
 27038  0137AE  6EFF               	movwf	tosu,c
 27039  0137B0  50FA               	movf	pclath,w,c
 27040  0137B2  0100               	movlb	0	; () banked
 27041  0137B4  51DB               	movf	Button_Poll@Pin& (0+255),w,b
 27042  0137B6  0012               	return		;indir
 27043  0137B8                     __end_of_Button_Poll:
 27044                           	opt stack 0
 27045                           tosu	equ	0xFFF
 27046                           tosh	equ	0xFFE
 27047                           tosl	equ	0xFFD
 27048                           pclath	equ	0xFFA
 27049                           tblptru	equ	0xFF8
 27050                           tblptrh	equ	0xFF7
 27051                           tblptrl	equ	0xFF6
 27052                           tablat	equ	0xFF5
 27053                           prodh	equ	0xFF4
 27054                           prodl	equ	0xFF3
 27055                           intcon	equ	0xFF2
 27056                           postinc0	equ	0xFEE
 27057                           wreg	equ	0xFE8
 27058                           indf1	equ	0xFE7
 27059                           postdec1	equ	0xFE5
 27060                           fsr1h	equ	0xFE2
 27061                           fsr1l	equ	0xFE1
 27062                           indf2	equ	0xFDF
 27063                           postinc2	equ	0xFDE
 27064                           postdec2	equ	0xFDD
 27065                           plusw2	equ	0xFDB
 27066                           fsr2h	equ	0xFDA
 27067                           fsr2l	equ	0xFD9
 27068                           status	equ	0xFD8
 27069                           
 27070 ;; *************** function _MXK_DIPSwitch *****************
 27071 ;; Defined at:
 27072 ;;		line 24 in file "Library/MXK.c"
 27073 ;; Parameters:    Size  Location     Type
 27074 ;;		None
 27075 ;; Auto vars:     Size  Location     Type
 27076 ;;		None
 27077 ;; Return value:  Size  Location     Type
 27078 ;;                  1    wreg      unsigned char 
 27079 ;; Registers used:
 27080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27081 ;; Tracked objects:
 27082 ;;		On entry : 0/0
 27083 ;;		On exit  : 0/0
 27084 ;;		Unchanged: 0/0
 27085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27090 ;;Total ram usage:        0 bytes
 27091 ;; Hardware stack levels used:    1
 27092 ;; Hardware stack levels required when called:    8
 27093 ;; This function calls:
 27094 ;;		_Port_GetQuad
 27095 ;; This function is called by:
 27096 ;;		_FunctInitButton
 27097 ;;		_Button_Poll
 27098 ;;		_getMode
 27099 ;; This function uses a non-reentrant model
 27100 ;;
 27101                           
 27102                           	psect	text131
 27103  016D14                     __ptext131:
 27104                           	opt stack 0
 27105  016D14                     _MXK_DIPSwitch:
 27106                           	opt stack 18
 27107                           
 27108                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 27109                           
 27110                           ;incstack = 0
 27111  016D14  0E99               	movlw	low _PortD
 27112  016D16  0100               	movlb	0	; () banked
 27113  016D18  6FB8               	movwf	Port_GetQuad@pInput& (0+255),b
 27114  016D1A  0E00               	movlw	high _PortD
 27115  016D1C  0100               	movlb	0	; () banked
 27116  016D1E  6FB9               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 27117  016D20  0E00               	movlw	0
 27118  016D22  0100               	movlb	0	; () banked
 27119  016D24  6FBA               	movwf	Port_GetQuad@pQuad& (0+255),b
 27120  016D26  ECEA  F0B1         	call	_Port_GetQuad
 27121  016D2A  0012               	return	
 27122  016D2C                     __end_of_MXK_DIPSwitch:
 27123                           	opt stack 0
 27124                           tosu	equ	0xFFF
 27125                           tosh	equ	0xFFE
 27126                           tosl	equ	0xFFD
 27127                           pclath	equ	0xFFA
 27128                           tblptru	equ	0xFF8
 27129                           tblptrh	equ	0xFF7
 27130                           tblptrl	equ	0xFF6
 27131                           tablat	equ	0xFF5
 27132                           prodh	equ	0xFF4
 27133                           prodl	equ	0xFF3
 27134                           intcon	equ	0xFF2
 27135                           postinc0	equ	0xFEE
 27136                           wreg	equ	0xFE8
 27137                           indf1	equ	0xFE7
 27138                           postdec1	equ	0xFE5
 27139                           fsr1h	equ	0xFE2
 27140                           fsr1l	equ	0xFE1
 27141                           indf2	equ	0xFDF
 27142                           postinc2	equ	0xFDE
 27143                           postdec2	equ	0xFDD
 27144                           plusw2	equ	0xFDB
 27145                           fsr2h	equ	0xFDA
 27146                           fsr2l	equ	0xFD9
 27147                           status	equ	0xFD8
 27148                           
 27149 ;; *************** function _HMI_DIPSwitch *****************
 27150 ;; Defined at:
 27151 ;;		line 47 in file "HMI.c"
 27152 ;; Parameters:    Size  Location     Type
 27153 ;;		None
 27154 ;; Auto vars:     Size  Location     Type
 27155 ;;		None
 27156 ;; Return value:  Size  Location     Type
 27157 ;;                  1    wreg      unsigned char 
 27158 ;; Registers used:
 27159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27160 ;; Tracked objects:
 27161 ;;		On entry : 0/0
 27162 ;;		On exit  : 0/0
 27163 ;;		Unchanged: 0/0
 27164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27169 ;;Total ram usage:        0 bytes
 27170 ;; Hardware stack levels used:    1
 27171 ;; Hardware stack levels required when called:    8
 27172 ;; This function calls:
 27173 ;;		_Port_GetQuad
 27174 ;; This function is called by:
 27175 ;;		_HMI_Init
 27176 ;;		_Button_Poll
 27177 ;;		_getMode
 27178 ;; This function uses a non-reentrant model
 27179 ;;
 27180                           
 27181                           	psect	text132
 27182  016D2C                     __ptext132:
 27183                           	opt stack 0
 27184  016D2C                     _HMI_DIPSwitch:
 27185                           	opt stack 18
 27186                           
 27187                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 27188                           
 27189                           ;incstack = 0
 27190  016D2C  0E8F               	movlw	low _PortE
 27191  016D2E  0100               	movlb	0	; () banked
 27192  016D30  6FB8               	movwf	Port_GetQuad@pInput& (0+255),b
 27193  016D32  0E00               	movlw	high _PortE
 27194  016D34  0100               	movlb	0	; () banked
 27195  016D36  6FB9               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 27196  016D38  0E00               	movlw	0
 27197  016D3A  0100               	movlb	0	; () banked
 27198  016D3C  6FBA               	movwf	Port_GetQuad@pQuad& (0+255),b
 27199  016D3E  ECEA  F0B1         	call	_Port_GetQuad	;wreg free
 27200  016D42  0012               	return	
 27201  016D44                     __end_of_HMI_DIPSwitch:
 27202                           	opt stack 0
 27203                           tosu	equ	0xFFF
 27204                           tosh	equ	0xFFE
 27205                           tosl	equ	0xFFD
 27206                           pclath	equ	0xFFA
 27207                           tblptru	equ	0xFF8
 27208                           tblptrh	equ	0xFF7
 27209                           tblptrl	equ	0xFF6
 27210                           tablat	equ	0xFF5
 27211                           prodh	equ	0xFF4
 27212                           prodl	equ	0xFF3
 27213                           intcon	equ	0xFF2
 27214                           postinc0	equ	0xFEE
 27215                           wreg	equ	0xFE8
 27216                           indf1	equ	0xFE7
 27217                           postdec1	equ	0xFE5
 27218                           fsr1h	equ	0xFE2
 27219                           fsr1l	equ	0xFE1
 27220                           indf2	equ	0xFDF
 27221                           postinc2	equ	0xFDE
 27222                           postdec2	equ	0xFDD
 27223                           plusw2	equ	0xFDB
 27224                           fsr2h	equ	0xFDA
 27225                           fsr2l	equ	0xFD9
 27226                           status	equ	0xFD8
 27227                           
 27228 ;; *************** function _HMI_DownSwitch *****************
 27229 ;; Defined at:
 27230 ;;		line 42 in file "HMI.c"
 27231 ;; Parameters:    Size  Location     Type
 27232 ;;		None
 27233 ;; Auto vars:     Size  Location     Type
 27234 ;;		None
 27235 ;; Return value:  Size  Location     Type
 27236 ;;                  1    wreg      unsigned char 
 27237 ;; Registers used:
 27238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27239 ;; Tracked objects:
 27240 ;;		On entry : 0/0
 27241 ;;		On exit  : 0/0
 27242 ;;		Unchanged: 0/0
 27243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27248 ;;Total ram usage:        0 bytes
 27249 ;; Hardware stack levels used:    1
 27250 ;; Hardware stack levels required when called:    8
 27251 ;; This function calls:
 27252 ;;		_Port_GetPin
 27253 ;; This function is called by:
 27254 ;;		_HMI_Init
 27255 ;;		_Button_Poll
 27256 ;;		_getMode
 27257 ;; This function uses a non-reentrant model
 27258 ;;
 27259                           
 27260                           	psect	text133
 27261  016D44                     __ptext133:
 27262                           	opt stack 0
 27263  016D44                     _HMI_DownSwitch:
 27264                           	opt stack 18
 27265                           
 27266                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 27267                           
 27268                           ;incstack = 0
 27269  016D44  0E8F               	movlw	low _PortE
 27270  016D46  0100               	movlb	0	; () banked
 27271  016D48  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
 27272  016D4A  0E00               	movlw	high _PortE
 27273  016D4C  0100               	movlb	0	; () banked
 27274  016D4E  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27275  016D50  0E06               	movlw	6
 27276  016D52  0100               	movlb	0	; () banked
 27277  016D54  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
 27278  016D56  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 27279  016D5A  0012               	return	
 27280  016D5C                     __end_of_HMI_DownSwitch:
 27281                           	opt stack 0
 27282                           tosu	equ	0xFFF
 27283                           tosh	equ	0xFFE
 27284                           tosl	equ	0xFFD
 27285                           pclath	equ	0xFFA
 27286                           tblptru	equ	0xFF8
 27287                           tblptrh	equ	0xFF7
 27288                           tblptrl	equ	0xFF6
 27289                           tablat	equ	0xFF5
 27290                           prodh	equ	0xFF4
 27291                           prodl	equ	0xFF3
 27292                           intcon	equ	0xFF2
 27293                           postinc0	equ	0xFEE
 27294                           wreg	equ	0xFE8
 27295                           indf1	equ	0xFE7
 27296                           postdec1	equ	0xFE5
 27297                           fsr1h	equ	0xFE2
 27298                           fsr1l	equ	0xFE1
 27299                           indf2	equ	0xFDF
 27300                           postinc2	equ	0xFDE
 27301                           postdec2	equ	0xFDD
 27302                           plusw2	equ	0xFDB
 27303                           fsr2h	equ	0xFDA
 27304                           fsr2l	equ	0xFD9
 27305                           status	equ	0xFD8
 27306                           
 27307 ;; *************** function _HMI_UpSwitch *****************
 27308 ;; Defined at:
 27309 ;;		line 37 in file "HMI.c"
 27310 ;; Parameters:    Size  Location     Type
 27311 ;;		None
 27312 ;; Auto vars:     Size  Location     Type
 27313 ;;		None
 27314 ;; Return value:  Size  Location     Type
 27315 ;;                  1    wreg      unsigned char 
 27316 ;; Registers used:
 27317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27318 ;; Tracked objects:
 27319 ;;		On entry : 0/0
 27320 ;;		On exit  : 0/0
 27321 ;;		Unchanged: 0/0
 27322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27327 ;;Total ram usage:        0 bytes
 27328 ;; Hardware stack levels used:    1
 27329 ;; Hardware stack levels required when called:    8
 27330 ;; This function calls:
 27331 ;;		_Port_GetPin
 27332 ;; This function is called by:
 27333 ;;		_HMI_Init
 27334 ;;		_Button_Poll
 27335 ;;		_getMode
 27336 ;; This function uses a non-reentrant model
 27337 ;;
 27338                           
 27339                           	psect	text134
 27340  016D5C                     __ptext134:
 27341                           	opt stack 0
 27342  016D5C                     _HMI_UpSwitch:
 27343                           	opt stack 18
 27344                           
 27345                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 27346                           
 27347                           ;incstack = 0
 27348  016D5C  0E8F               	movlw	low _PortE
 27349  016D5E  0100               	movlb	0	; () banked
 27350  016D60  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
 27351  016D62  0E00               	movlw	high _PortE
 27352  016D64  0100               	movlb	0	; () banked
 27353  016D66  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27354  016D68  0E07               	movlw	7
 27355  016D6A  0100               	movlb	0	; () banked
 27356  016D6C  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
 27357  016D6E  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 27358  016D72  0012               	return	
 27359  016D74                     __end_of_HMI_UpSwitch:
 27360                           	opt stack 0
 27361                           tosu	equ	0xFFF
 27362                           tosh	equ	0xFFE
 27363                           tosl	equ	0xFFD
 27364                           pclath	equ	0xFFA
 27365                           tblptru	equ	0xFF8
 27366                           tblptrh	equ	0xFF7
 27367                           tblptrl	equ	0xFF6
 27368                           tablat	equ	0xFF5
 27369                           prodh	equ	0xFF4
 27370                           prodl	equ	0xFF3
 27371                           intcon	equ	0xFF2
 27372                           postinc0	equ	0xFEE
 27373                           wreg	equ	0xFE8
 27374                           indf1	equ	0xFE7
 27375                           postdec1	equ	0xFE5
 27376                           fsr1h	equ	0xFE2
 27377                           fsr1l	equ	0xFE1
 27378                           indf2	equ	0xFDF
 27379                           postinc2	equ	0xFDE
 27380                           postdec2	equ	0xFDD
 27381                           plusw2	equ	0xFDB
 27382                           fsr2h	equ	0xFDA
 27383                           fsr2l	equ	0xFD9
 27384                           status	equ	0xFD8
 27385                           
 27386 ;; *************** function _HMI_RightSwitch *****************
 27387 ;; Defined at:
 27388 ;;		line 32 in file "HMI.c"
 27389 ;; Parameters:    Size  Location     Type
 27390 ;;		None
 27391 ;; Auto vars:     Size  Location     Type
 27392 ;;		None
 27393 ;; Return value:  Size  Location     Type
 27394 ;;                  1    wreg      unsigned char 
 27395 ;; Registers used:
 27396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27397 ;; Tracked objects:
 27398 ;;		On entry : 0/0
 27399 ;;		On exit  : 0/0
 27400 ;;		Unchanged: 0/0
 27401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27406 ;;Total ram usage:        0 bytes
 27407 ;; Hardware stack levels used:    1
 27408 ;; Hardware stack levels required when called:    8
 27409 ;; This function calls:
 27410 ;;		_Port_GetPin
 27411 ;; This function is called by:
 27412 ;;		_HMI_Init
 27413 ;;		_Button_Poll
 27414 ;;		_getMode
 27415 ;; This function uses a non-reentrant model
 27416 ;;
 27417                           
 27418                           	psect	text135
 27419  016D74                     __ptext135:
 27420                           	opt stack 0
 27421  016D74                     _HMI_RightSwitch:
 27422                           	opt stack 18
 27423                           
 27424                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 27425                           
 27426                           ;incstack = 0
 27427  016D74  0E8F               	movlw	low _PortE
 27428  016D76  0100               	movlb	0	; () banked
 27429  016D78  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
 27430  016D7A  0E00               	movlw	high _PortE
 27431  016D7C  0100               	movlb	0	; () banked
 27432  016D7E  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27433  016D80  0E04               	movlw	4
 27434  016D82  0100               	movlb	0	; () banked
 27435  016D84  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
 27436  016D86  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 27437  016D8A  0012               	return	
 27438  016D8C                     __end_of_HMI_RightSwitch:
 27439                           	opt stack 0
 27440                           tosu	equ	0xFFF
 27441                           tosh	equ	0xFFE
 27442                           tosl	equ	0xFFD
 27443                           pclath	equ	0xFFA
 27444                           tblptru	equ	0xFF8
 27445                           tblptrh	equ	0xFF7
 27446                           tblptrl	equ	0xFF6
 27447                           tablat	equ	0xFF5
 27448                           prodh	equ	0xFF4
 27449                           prodl	equ	0xFF3
 27450                           intcon	equ	0xFF2
 27451                           postinc0	equ	0xFEE
 27452                           wreg	equ	0xFE8
 27453                           indf1	equ	0xFE7
 27454                           postdec1	equ	0xFE5
 27455                           fsr1h	equ	0xFE2
 27456                           fsr1l	equ	0xFE1
 27457                           indf2	equ	0xFDF
 27458                           postinc2	equ	0xFDE
 27459                           postdec2	equ	0xFDD
 27460                           plusw2	equ	0xFDB
 27461                           fsr2h	equ	0xFDA
 27462                           fsr2l	equ	0xFD9
 27463                           status	equ	0xFD8
 27464                           
 27465 ;; *************** function _HMI_LeftSwitch *****************
 27466 ;; Defined at:
 27467 ;;		line 27 in file "HMI.c"
 27468 ;; Parameters:    Size  Location     Type
 27469 ;;		None
 27470 ;; Auto vars:     Size  Location     Type
 27471 ;;		None
 27472 ;; Return value:  Size  Location     Type
 27473 ;;                  1    wreg      unsigned char 
 27474 ;; Registers used:
 27475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27476 ;; Tracked objects:
 27477 ;;		On entry : 0/0
 27478 ;;		On exit  : 0/0
 27479 ;;		Unchanged: 0/0
 27480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27485 ;;Total ram usage:        0 bytes
 27486 ;; Hardware stack levels used:    1
 27487 ;; Hardware stack levels required when called:    8
 27488 ;; This function calls:
 27489 ;;		_Port_GetPin
 27490 ;; This function is called by:
 27491 ;;		_HMI_Init
 27492 ;;		_Button_Poll
 27493 ;;		_getMode
 27494 ;; This function uses a non-reentrant model
 27495 ;;
 27496                           
 27497                           	psect	text136
 27498  016D8C                     __ptext136:
 27499                           	opt stack 0
 27500  016D8C                     _HMI_LeftSwitch:
 27501                           	opt stack 18
 27502                           
 27503                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 27504                           
 27505                           ;incstack = 0
 27506  016D8C  0E8F               	movlw	low _PortE
 27507  016D8E  0100               	movlb	0	; () banked
 27508  016D90  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
 27509  016D92  0E00               	movlw	high _PortE
 27510  016D94  0100               	movlb	0	; () banked
 27511  016D96  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27512  016D98  0E05               	movlw	5
 27513  016D9A  0100               	movlb	0	; () banked
 27514  016D9C  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
 27515  016D9E  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 27516  016DA2  0012               	return	
 27517  016DA4                     __end_of_HMI_LeftSwitch:
 27518                           	opt stack 0
 27519                           tosu	equ	0xFFF
 27520                           tosh	equ	0xFFE
 27521                           tosl	equ	0xFFD
 27522                           pclath	equ	0xFFA
 27523                           tblptru	equ	0xFF8
 27524                           tblptrh	equ	0xFF7
 27525                           tblptrl	equ	0xFF6
 27526                           tablat	equ	0xFF5
 27527                           prodh	equ	0xFF4
 27528                           prodl	equ	0xFF3
 27529                           intcon	equ	0xFF2
 27530                           postinc0	equ	0xFEE
 27531                           wreg	equ	0xFE8
 27532                           indf1	equ	0xFE7
 27533                           postdec1	equ	0xFE5
 27534                           fsr1h	equ	0xFE2
 27535                           fsr1l	equ	0xFE1
 27536                           indf2	equ	0xFDF
 27537                           postinc2	equ	0xFDE
 27538                           postdec2	equ	0xFDD
 27539                           plusw2	equ	0xFDB
 27540                           fsr2h	equ	0xFDA
 27541                           fsr2l	equ	0xFD9
 27542                           status	equ	0xFD8
 27543                           
 27544 ;; *************** function _MXK_TestButton *****************
 27545 ;; Defined at:
 27546 ;;		line 14 in file "Library/MXK.c"
 27547 ;; Parameters:    Size  Location     Type
 27548 ;;		None
 27549 ;; Auto vars:     Size  Location     Type
 27550 ;;		None
 27551 ;; Return value:  Size  Location     Type
 27552 ;;                  1    wreg      unsigned char 
 27553 ;; Registers used:
 27554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27555 ;; Tracked objects:
 27556 ;;		On entry : 0/0
 27557 ;;		On exit  : 0/0
 27558 ;;		Unchanged: 0/0
 27559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27564 ;;Total ram usage:        0 bytes
 27565 ;; Hardware stack levels used:    1
 27566 ;; Hardware stack levels required when called:    8
 27567 ;; This function calls:
 27568 ;;		_Port_GetPin
 27569 ;; This function is called by:
 27570 ;;		_FunctInitButton
 27571 ;;		_Button_Poll
 27572 ;;		_getMode
 27573 ;; This function uses a non-reentrant model
 27574 ;;
 27575                           
 27576                           	psect	text137
 27577  016DA4                     __ptext137:
 27578                           	opt stack 0
 27579  016DA4                     _MXK_TestButton:
 27580                           	opt stack 18
 27581                           
 27582                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 27583                           
 27584                           ;incstack = 0
 27585  016DA4  0EB5               	movlw	low _PortB
 27586  016DA6  0100               	movlb	0	; () banked
 27587  016DA8  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
 27588  016DAA  0E03               	movlw	high _PortB
 27589  016DAC  0100               	movlb	0	; () banked
 27590  016DAE  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27591  016DB0  0E04               	movlw	4
 27592  016DB2  0100               	movlb	0	; () banked
 27593  016DB4  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
 27594  016DB6  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 27595  016DBA  0012               	return	
 27596  016DBC                     __end_of_MXK_TestButton:
 27597                           	opt stack 0
 27598                           tosu	equ	0xFFF
 27599                           tosh	equ	0xFFE
 27600                           tosl	equ	0xFFD
 27601                           pclath	equ	0xFFA
 27602                           tblptru	equ	0xFF8
 27603                           tblptrh	equ	0xFF7
 27604                           tblptrl	equ	0xFF6
 27605                           tablat	equ	0xFF5
 27606                           prodh	equ	0xFF4
 27607                           prodl	equ	0xFF3
 27608                           intcon	equ	0xFF2
 27609                           postinc0	equ	0xFEE
 27610                           wreg	equ	0xFE8
 27611                           indf1	equ	0xFE7
 27612                           postdec1	equ	0xFE5
 27613                           fsr1h	equ	0xFE2
 27614                           fsr1l	equ	0xFE1
 27615                           indf2	equ	0xFDF
 27616                           postinc2	equ	0xFDE
 27617                           postdec2	equ	0xFDD
 27618                           plusw2	equ	0xFDB
 27619                           fsr2h	equ	0xFDA
 27620                           fsr2l	equ	0xFD9
 27621                           status	equ	0xFD8
 27622                           
 27623 ;; *************** function _Port_GetQuad *****************
 27624 ;; Defined at:
 27625 ;;		line 498 in file "Library/Port.c"
 27626 ;; Parameters:    Size  Location     Type
 27627 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 27628 ;;		 -> PortE(10), PortD(10), 
 27629 ;;  pQuad           1    2[BANK0 ] enum E6776
 27630 ;; Auto vars:     Size  Location     Type
 27631 ;;  Output          1    5[BANK0 ] unsigned char 
 27632 ;; Return value:  Size  Location     Type
 27633 ;;                  1    wreg      unsigned char 
 27634 ;; Registers used:
 27635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27636 ;; Tracked objects:
 27637 ;;		On entry : 0/0
 27638 ;;		On exit  : 0/0
 27639 ;;		Unchanged: 0/0
 27640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27641 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27644 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27645 ;;Total ram usage:        6 bytes
 27646 ;; Hardware stack levels used:    1
 27647 ;; Hardware stack levels required when called:    7
 27648 ;; This function calls:
 27649 ;;		Nothing
 27650 ;; This function is called by:
 27651 ;;		_HMI_DIPSwitch
 27652 ;;		_MXK_DIPSwitch
 27653 ;;		_Port_ToggleQuad
 27654 ;; This function uses a non-reentrant model
 27655 ;;
 27656                           
 27657                           	psect	text138
 27658  0163D4                     __ptext138:
 27659                           	opt stack 0
 27660  0163D4                     _Port_GetQuad:
 27661                           	opt stack 18
 27662                           
 27663                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 27664                           
 27665                           ;incstack = 0
 27666  0163D4  0100               	movlb	0	; () banked
 27667  0163D6  EE20 F006          	lfsr	2,6
 27668  0163DA  51B8               	movf	Port_GetQuad@pInput& (0+255),w,b
 27669  0163DC  26D9               	addwf	fsr2l,f,c
 27670  0163DE  51B9               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 27671  0163E0  22DA               	addwfc	fsr2h,f,c
 27672  0163E2  CFDE F0BB          	movff	postinc2,??_Port_GetQuad
 27673  0163E6  CFDD F0BC          	movff	postdec2,??_Port_GetQuad+1
 27674  0163EA  C0BB  FFD9         	movff	??_Port_GetQuad,fsr2l
 27675  0163EE  C0BC  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 27676  0163F2  50DF               	movf	indf2,w,c
 27677  0163F4  0100               	movlb	0	; () banked
 27678  0163F6  6FBD               	movwf	Port_GetQuad@Output& (0+255),b
 27679                           
 27680                           ; BSR set to: 0
 27681                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 27682  0163F8  0100               	movlb	0	; () banked
 27683  0163FA  51BA               	movf	Port_GetQuad@pQuad& (0+255),w,b
 27684  0163FC  0D04               	mullw	4
 27685  0163FE  28F3               	incf	prodl,w,c
 27686  016400  0100               	movlb	0	; () banked
 27687  016402  6FBB               	movwf	??_Port_GetQuad& (0+255),b
 27688  016404  D003               	goto	u9770
 27689  016406                     u9775:
 27690  016406  0100               	movlb	0	; () banked
 27691  016408  90D8               	bcf	status,0,c
 27692  01640A  33BD               	rrcf	Port_GetQuad@Output& (0+255),f,b
 27693  01640C                     u9770:
 27694  01640C  0100               	movlb	0	; () banked
 27695  01640E  2FBB               	decfsz	??_Port_GetQuad& (0+255),f,b
 27696  016410  D7FA               	goto	u9775
 27697                           
 27698                           ;Port.c: 502: Output &= 0xF;
 27699  016412  0E0F               	movlw	15
 27700  016414  0100               	movlb	0	; () banked
 27701  016416  17BD               	andwf	Port_GetQuad@Output& (0+255),f,b
 27702                           
 27703                           ; BSR set to: 0
 27704                           ;Port.c: 503: return Output;
 27705  016418  0100               	movlb	0	; () banked
 27706  01641A  51BD               	movf	Port_GetQuad@Output& (0+255),w,b
 27707  01641C  0012               	return	
 27708  01641E                     __end_of_Port_GetQuad:
 27709                           	opt stack 0
 27710                           tosu	equ	0xFFF
 27711                           tosh	equ	0xFFE
 27712                           tosl	equ	0xFFD
 27713                           pclath	equ	0xFFA
 27714                           tblptru	equ	0xFF8
 27715                           tblptrh	equ	0xFF7
 27716                           tblptrl	equ	0xFF6
 27717                           tablat	equ	0xFF5
 27718                           prodh	equ	0xFF4
 27719                           prodl	equ	0xFF3
 27720                           intcon	equ	0xFF2
 27721                           postinc0	equ	0xFEE
 27722                           wreg	equ	0xFE8
 27723                           indf1	equ	0xFE7
 27724                           postdec1	equ	0xFE5
 27725                           fsr1h	equ	0xFE2
 27726                           fsr1l	equ	0xFE1
 27727                           indf2	equ	0xFDF
 27728                           postinc2	equ	0xFDE
 27729                           postdec2	equ	0xFDD
 27730                           plusw2	equ	0xFDB
 27731                           fsr2h	equ	0xFDA
 27732                           fsr2l	equ	0xFD9
 27733                           status	equ	0xFD8
 27734                           
 27735 ;; *************** function _Event_DIPSwitch *****************
 27736 ;; Defined at:
 27737 ;;		line 22 in file "Events.c"
 27738 ;; Parameters:    Size  Location     Type
 27739 ;;  pState          1    wreg     unsigned char 
 27740 ;; Auto vars:     Size  Location     Type
 27741 ;;  pState          1   25[BANK0 ] unsigned char 
 27742 ;;  Bar             1   26[BANK0 ] unsigned char 
 27743 ;; Return value:  Size  Location     Type
 27744 ;;                  1    wreg      void 
 27745 ;; Registers used:
 27746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27747 ;; Tracked objects:
 27748 ;;		On entry : 0/0
 27749 ;;		On exit  : 0/0
 27750 ;;		Unchanged: 0/0
 27751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27756 ;;Total ram usage:        2 bytes
 27757 ;; Hardware stack levels used:    1
 27758 ;; Hardware stack levels required when called:   13
 27759 ;; This function calls:
 27760 ;;		_HMI_GetBar
 27761 ;;		_HMI_SetBar
 27762 ;;		_LED_Toggle
 27763 ;; This function is called by:
 27764 ;;		_FunctInitButton
 27765 ;;		_Button_Poll
 27766 ;; This function uses a non-reentrant model
 27767 ;;
 27768                           
 27769                           	psect	text139
 27770  016A1A                     __ptext139:
 27771                           	opt stack 0
 27772  016A1A                     _Event_DIPSwitch:
 27773                           	opt stack 13
 27774                           
 27775                           ; BSR set to: 0
 27776                           ;incstack = 0
 27777                           ;Event_DIPSwitch@pState stored from wreg
 27778  016A1A  0100               	movlb	0	; () banked
 27779  016A1C  6FD1               	movwf	Event_DIPSwitch@pState& (0+255),b
 27780                           
 27781                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 27782  016A1E  EC78  F0B7         	call	_HMI_GetBar	;wreg free
 27783  016A22  0100               	movlb	0	; () banked
 27784  016A24  6FD2               	movwf	Event_DIPSwitch@Bar& (0+255),b
 27785                           
 27786                           ; BSR set to: 0
 27787                           ;Events.c: 25: Bar &= 0x0F;
 27788  016A26  0E0F               	movlw	15
 27789  016A28  0100               	movlb	0	; () banked
 27790  016A2A  17D2               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 27791                           
 27792                           ; BSR set to: 0
 27793                           ;Events.c: 26: pState <<= 4;
 27794  016A2C  0100               	movlb	0	; () banked
 27795  016A2E  3BD1               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 27796  016A30  0EF0               	movlw	240
 27797  016A32  17D1               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 27798                           
 27799                           ; BSR set to: 0
 27800                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 27801  016A34  0100               	movlb	0	; () banked
 27802  016A36  51D1               	movf	Event_DIPSwitch@pState& (0+255),w,b
 27803  016A38  0100               	movlb	0	; () banked
 27804  016A3A  11D2               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 27805  016A3C  EC5A  F0B7         	call	_HMI_SetBar
 27806                           
 27807                           ;Events.c: 32: LED_Toggle(eLED1);
 27808  016A40  0E00               	movlw	0
 27809  016A42  EC57  F0B2         	call	_LED_Toggle
 27810  016A46  0012               	return		;funcret
 27811  016A48                     __end_of_Event_DIPSwitch:
 27812                           	opt stack 0
 27813                           tosu	equ	0xFFF
 27814                           tosh	equ	0xFFE
 27815                           tosl	equ	0xFFD
 27816                           pclath	equ	0xFFA
 27817                           tblptru	equ	0xFF8
 27818                           tblptrh	equ	0xFF7
 27819                           tblptrl	equ	0xFF6
 27820                           tablat	equ	0xFF5
 27821                           prodh	equ	0xFF4
 27822                           prodl	equ	0xFF3
 27823                           intcon	equ	0xFF2
 27824                           postinc0	equ	0xFEE
 27825                           wreg	equ	0xFE8
 27826                           indf1	equ	0xFE7
 27827                           postdec1	equ	0xFE5
 27828                           fsr1h	equ	0xFE2
 27829                           fsr1l	equ	0xFE1
 27830                           indf2	equ	0xFDF
 27831                           postinc2	equ	0xFDE
 27832                           postdec2	equ	0xFDD
 27833                           plusw2	equ	0xFDB
 27834                           fsr2h	equ	0xFDA
 27835                           fsr2l	equ	0xFD9
 27836                           status	equ	0xFD8
 27837                           
 27838 ;; *************** function _Event_NULL *****************
 27839 ;; Defined at:
 27840 ;;		line 9 in file "Events.c"
 27841 ;; Parameters:    Size  Location     Type
 27842 ;;  pState          1    wreg     unsigned char 
 27843 ;; Auto vars:     Size  Location     Type
 27844 ;;  pState          1    0[COMRAM] unsigned char 
 27845 ;; Return value:  Size  Location     Type
 27846 ;;                  1    wreg      void 
 27847 ;; Registers used:
 27848 ;;		wreg
 27849 ;; Tracked objects:
 27850 ;;		On entry : 0/0
 27851 ;;		On exit  : 0/0
 27852 ;;		Unchanged: 0/0
 27853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27858 ;;Total ram usage:        0 bytes
 27859 ;; Hardware stack levels used:    1
 27860 ;; Hardware stack levels required when called:    7
 27861 ;; This function calls:
 27862 ;;		Nothing
 27863 ;; This function is called by:
 27864 ;;		_HMI_Init
 27865 ;;		_Button_Poll
 27866 ;; This function uses a non-reentrant model
 27867 ;;
 27868                           
 27869                           	psect	text140
 27870  001404                     __ptext140:
 27871                           	opt stack 0
 27872  001404                     _Event_NULL:
 27873                           	opt stack 19
 27874                           
 27875                           ;incstack = 0
 27876  001404  0012               	return		;funcret
 27877  001406                     __end_of_Event_NULL:
 27878                           	opt stack 0
 27879                           tosu	equ	0xFFF
 27880                           tosh	equ	0xFFE
 27881                           tosl	equ	0xFFD
 27882                           pclath	equ	0xFFA
 27883                           tblptru	equ	0xFF8
 27884                           tblptrh	equ	0xFF7
 27885                           tblptrl	equ	0xFF6
 27886                           tablat	equ	0xFF5
 27887                           prodh	equ	0xFF4
 27888                           prodl	equ	0xFF3
 27889                           intcon	equ	0xFF2
 27890                           postinc0	equ	0xFEE
 27891                           wreg	equ	0xFE8
 27892                           indf1	equ	0xFE7
 27893                           postdec1	equ	0xFE5
 27894                           fsr1h	equ	0xFE2
 27895                           fsr1l	equ	0xFE1
 27896                           indf2	equ	0xFDF
 27897                           postinc2	equ	0xFDE
 27898                           postdec2	equ	0xFDD
 27899                           plusw2	equ	0xFDB
 27900                           fsr2h	equ	0xFDA
 27901                           fsr2l	equ	0xFD9
 27902                           status	equ	0xFD8
 27903                           
 27904 ;; *************** function _Event_TestButton *****************
 27905 ;; Defined at:
 27906 ;;		line 52 in file "Events.c"
 27907 ;; Parameters:    Size  Location     Type
 27908 ;;  pState          1    wreg     unsigned char 
 27909 ;; Auto vars:     Size  Location     Type
 27910 ;;  pState          1   25[BANK0 ] unsigned char 
 27911 ;; Return value:  Size  Location     Type
 27912 ;;                  1    wreg      void 
 27913 ;; Registers used:
 27914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27915 ;; Tracked objects:
 27916 ;;		On entry : 0/0
 27917 ;;		On exit  : 0/0
 27918 ;;		Unchanged: 0/0
 27919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27924 ;;Total ram usage:        1 bytes
 27925 ;; Hardware stack levels used:    1
 27926 ;; Hardware stack levels required when called:   13
 27927 ;; This function calls:
 27928 ;;		_HMI_SetButton
 27929 ;;		_HMI_SetNumber
 27930 ;;		_LED_Toggle
 27931 ;; This function is called by:
 27932 ;;		_FunctInitButton
 27933 ;;		_Button_Poll
 27934 ;; This function uses a non-reentrant model
 27935 ;;
 27936                           
 27937                           	psect	text141
 27938  016808                     __ptext141:
 27939                           	opt stack 0
 27940  016808                     _Event_TestButton:
 27941                           	opt stack 13
 27942                           
 27943                           ;incstack = 0
 27944                           ;Event_TestButton@pState stored from wreg
 27945  016808  0100               	movlb	0	; () banked
 27946  01680A  6FD1               	movwf	Event_TestButton@pState& (0+255),b
 27947                           
 27948                           ;Events.c: 56: static UINT8 j = 0;
 27949                           ;Events.c: 60: if (pState == 0)
 27950  01680C  0100               	movlb	0	; () banked
 27951  01680E  51D1               	movf	Event_TestButton@pState& (0+255),w,b
 27952  016810  0100               	movlb	0	; () banked
 27953  016812  A4D8               	btfss	status,2,c
 27954  016814  D013               	goto	l1873
 27955                           
 27956                           ; BSR set to: 0
 27957                           ;Events.c: 61: {
 27958                           ;Events.c: 62: j++;
 27959  016816  0100               	movlb	0	; () banked
 27960  016818  2B87               	incf	Event_TestButton@j& (0+255),f,b
 27961                           
 27962                           ; BSR set to: 0
 27963                           ;Events.c: 63: val += j;
 27964  01681A  0100               	movlb	0	; () banked
 27965  01681C  5187               	movf	Event_TestButton@j& (0+255),w,b
 27966  01681E  0100               	movlb	0	; () banked
 27967  016820  277A               	addwf	_val& (0+255),f,b
 27968  016822  0E00               	movlw	0
 27969  016824  237B               	addwfc	(_val+1)& (0+255),f,b
 27970                           
 27971                           ; BSR set to: 0
 27972                           ;Events.c: 64: HMI_SetNumber( val );
 27973  016826  C07A  F0CE         	movff	_val,HMI_SetNumber@pInput
 27974  01682A  C07B  F0CF         	movff	_val+1,HMI_SetNumber@pInput+1
 27975  01682E  EC50  F0B5         	call	_HMI_SetNumber	;wreg free
 27976                           
 27977                           ;Events.c: 67: HMI_SetButton( j & 3 );
 27978  016832  0100               	movlb	0	; () banked
 27979  016834  5187               	movf	Event_TestButton@j& (0+255),w,b
 27980  016836  0B03               	andlw	3
 27981  016838  EC7A  F0AA         	call	_HMI_SetButton
 27982  01683C                     l1873:
 27983                           
 27984                           ;Events.c: 68: }
 27985                           ;Events.c: 72: LED_Toggle(eLED1);
 27986  01683C  0E00               	movlw	0
 27987  01683E  EC57  F0B2         	call	_LED_Toggle
 27988  016842  0012               	return		;funcret
 27989  016844                     __end_of_Event_TestButton:
 27990                           	opt stack 0
 27991                           tosu	equ	0xFFF
 27992                           tosh	equ	0xFFE
 27993                           tosl	equ	0xFFD
 27994                           pclath	equ	0xFFA
 27995                           tblptru	equ	0xFF8
 27996                           tblptrh	equ	0xFF7
 27997                           tblptrl	equ	0xFF6
 27998                           tablat	equ	0xFF5
 27999                           prodh	equ	0xFF4
 28000                           prodl	equ	0xFF3
 28001                           intcon	equ	0xFF2
 28002                           postinc0	equ	0xFEE
 28003                           wreg	equ	0xFE8
 28004                           indf1	equ	0xFE7
 28005                           postdec1	equ	0xFE5
 28006                           fsr1h	equ	0xFE2
 28007                           fsr1l	equ	0xFE1
 28008                           indf2	equ	0xFDF
 28009                           postinc2	equ	0xFDE
 28010                           postdec2	equ	0xFDD
 28011                           plusw2	equ	0xFDB
 28012                           fsr2h	equ	0xFDA
 28013                           fsr2l	equ	0xFD9
 28014                           status	equ	0xFD8
 28015                           
 28016 ;; *************** function _HMI_SetNumber *****************
 28017 ;; Defined at:
 28018 ;;		line 221 in file "HMI.c"
 28019 ;; Parameters:    Size  Location     Type
 28020 ;;  pInput          2   22[BANK0 ] int 
 28021 ;; Auto vars:     Size  Location     Type
 28022 ;;		None
 28023 ;; Return value:  Size  Location     Type
 28024 ;;                  1    wreg      void 
 28025 ;; Registers used:
 28026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28027 ;; Tracked objects:
 28028 ;;		On entry : 0/0
 28029 ;;		On exit  : 0/0
 28030 ;;		Unchanged: 0/0
 28031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28036 ;;Total ram usage:        2 bytes
 28037 ;; Hardware stack levels used:    1
 28038 ;; Hardware stack levels required when called:    9
 28039 ;; This function calls:
 28040 ;;		_HMI_SetSegments
 28041 ;;		_itos
 28042 ;; This function is called by:
 28043 ;;		_Event_TestButton
 28044 ;;		_findClosestWall
 28045 ;;		_measureAndDisplayDistance
 28046 ;;		_mode1
 28047 ;;		_Event_HMI_UpButton
 28048 ;;		_Event_HMI_DownButton
 28049 ;; This function uses a non-reentrant model
 28050 ;;
 28051                           
 28052                           	psect	text142
 28053  016AA0                     __ptext142:
 28054                           	opt stack 0
 28055  016AA0                     _HMI_SetNumber:
 28056                           	opt stack 16
 28057                           
 28058                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 28059                           
 28060                           ;incstack = 0
 28061  016AA0  C0CE  F0C4         	movff	HMI_SetNumber@pInput,itos@input
 28062  016AA4  C0CF  F0C5         	movff	HMI_SetNumber@pInput+1,itos@input+1
 28063  016AA8  0E47               	movlw	low _HMIBoard
 28064  016AAA  0100               	movlb	0	; () banked
 28065  016AAC  6FC6               	movwf	itos@destination& (0+255),b
 28066  016AAE  0E03               	movlw	high _HMIBoard
 28067  016AB0  0100               	movlb	0	; () banked
 28068  016AB2  6FC7               	movwf	(itos@destination+1)& (0+255),b
 28069  016AB4  EC9F  F0A1         	call	_itos	;wreg free
 28070                           
 28071                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 28072  016AB8  0E47               	movlw	low _HMIBoard
 28073  016ABA  0100               	movlb	0	; () banked
 28074  016ABC  6FB9               	movwf	HMI_SetSegments@pString& (0+255),b
 28075  016ABE  0E03               	movlw	high _HMIBoard
 28076  016AC0  0100               	movlb	0	; () banked
 28077  016AC2  6FBA               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 28078  016AC4  EC91  F0A5         	call	_HMI_SetSegments	;wreg free
 28079  016AC8  0012               	return		;funcret
 28080  016ACA                     __end_of_HMI_SetNumber:
 28081                           	opt stack 0
 28082                           tosu	equ	0xFFF
 28083                           tosh	equ	0xFFE
 28084                           tosl	equ	0xFFD
 28085                           pclath	equ	0xFFA
 28086                           tblptru	equ	0xFF8
 28087                           tblptrh	equ	0xFF7
 28088                           tblptrl	equ	0xFF6
 28089                           tablat	equ	0xFF5
 28090                           prodh	equ	0xFF4
 28091                           prodl	equ	0xFF3
 28092                           intcon	equ	0xFF2
 28093                           postinc0	equ	0xFEE
 28094                           wreg	equ	0xFE8
 28095                           indf1	equ	0xFE7
 28096                           postdec1	equ	0xFE5
 28097                           fsr1h	equ	0xFE2
 28098                           fsr1l	equ	0xFE1
 28099                           indf2	equ	0xFDF
 28100                           postinc2	equ	0xFDE
 28101                           postdec2	equ	0xFDD
 28102                           plusw2	equ	0xFDB
 28103                           fsr2h	equ	0xFDA
 28104                           fsr2l	equ	0xFD9
 28105                           status	equ	0xFD8
 28106                           
 28107 ;; *************** function _itos *****************
 28108 ;; Defined at:
 28109 ;;		line 369 in file "Library/Types.c"
 28110 ;; Parameters:    Size  Location     Type
 28111 ;;  input           2   12[BANK0 ] unsigned short 
 28112 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 28113 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28114 ;; Auto vars:     Size  Location     Type
 28115 ;;  Out             2   20[BANK0 ] unsigned short 
 28116 ;;  Length          2   18[BANK0 ] unsigned short 
 28117 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 28118 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28119 ;; Return value:  Size  Location     Type
 28120 ;;                  1    wreg      void 
 28121 ;; Registers used:
 28122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28123 ;; Tracked objects:
 28124 ;;		On entry : 0/0
 28125 ;;		On exit  : 0/0
 28126 ;;		Unchanged: 0/0
 28127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28128 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28129 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28131 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28132 ;;Total ram usage:       10 bytes
 28133 ;; Hardware stack levels used:    1
 28134 ;; Hardware stack levels required when called:    8
 28135 ;; This function calls:
 28136 ;;		___lwdiv
 28137 ;;		___lwmod
 28138 ;;		_reverse
 28139 ;; This function is called by:
 28140 ;;		_HMI_SetNumber
 28141 ;; This function uses a non-reentrant model
 28142 ;;
 28143                           
 28144                           	psect	text143
 28145  01433E                     __ptext143:
 28146                           	opt stack 0
 28147  01433E                     _itos:
 28148                           	opt stack 16
 28149                           
 28150                           ;Types.c: 371: UINT16 Out = input;
 28151                           
 28152                           ;incstack = 0
 28153  01433E  C0C4  F0CC         	movff	itos@input,itos@Out
 28154  014342  C0C5  F0CD         	movff	itos@input+1,itos@Out+1
 28155                           
 28156                           ;Types.c: 372: UINT16 Length = 0;
 28157  014346  0E00               	movlw	0
 28158  014348  0100               	movlb	0	; () banked
 28159  01434A  6FCB               	movwf	(itos@Length+1)& (0+255),b
 28160  01434C  0E00               	movlw	0
 28161  01434E  6FCA               	movwf	itos@Length& (0+255),b
 28162                           
 28163                           ; BSR set to: 0
 28164                           ;Types.c: 373: char *Data = destination;
 28165  014350  C0C6  F0C8         	movff	itos@destination,itos@Data
 28166  014354  C0C7  F0C9         	movff	itos@destination+1,itos@Data+1
 28167                           
 28168                           ; BSR set to: 0
 28169                           ;Types.c: 374: if(Out == 0)
 28170  014358  0100               	movlb	0	; () banked
 28171  01435A  51CC               	movf	itos@Out& (0+255),w,b
 28172  01435C  0100               	movlb	0	; () banked
 28173  01435E  11CD               	iorwf	(itos@Out+1)& (0+255),w,b
 28174  014360  A4D8               	btfss	status,2,c
 28175  014362  D034               	goto	l929
 28176                           
 28177                           ; BSR set to: 0
 28178                           ;Types.c: 375: {
 28179                           ;Types.c: 376: Data[0] = (UINT16)'0';
 28180  014364  C0C8  FFD9         	movff	itos@Data,fsr2l
 28181  014368  C0C9  FFDA         	movff	itos@Data+1,fsr2h
 28182  01436C  0E30               	movlw	48
 28183  01436E  6EDF               	movwf	indf2,c
 28184                           
 28185                           ; BSR set to: 0
 28186                           ;Types.c: 377: Length = 1;
 28187  014370  0E00               	movlw	0
 28188  014372  0100               	movlb	0	; () banked
 28189  014374  6FCB               	movwf	(itos@Length+1)& (0+255),b
 28190  014376  0E01               	movlw	1
 28191  014378  6FCA               	movwf	itos@Length& (0+255),b
 28192                           
 28193                           ;Types.c: 378: }
 28194  01437A  D040               	goto	l928
 28195  01437C                     
 28196                           ; BSR set to: 0
 28197                           ;Types.c: 382: {
 28198                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 28199                           
 28200                           ; BSR set to: 0
 28201  01437C  C0CC  F0BF         	movff	itos@Out,___lwmod@dividend
 28202  014380  C0CD  F0C0         	movff	itos@Out+1,___lwmod@dividend+1
 28203  014384  0E00               	movlw	0
 28204  014386  0100               	movlb	0	; () banked
 28205  014388  6FC2               	movwf	(___lwmod@divisor+1)& (0+255),b
 28206  01438A  0E0A               	movlw	10
 28207  01438C  6FC1               	movwf	___lwmod@divisor& (0+255),b
 28208  01438E  EC42  F0B0         	call	___lwmod	;wreg free
 28209  014392  0100               	movlb	0	; () banked
 28210  014394  51BF               	movf	?___lwmod& (0+255),w,b
 28211  014396  0F30               	addlw	48
 28212  014398  C0C8  FFD9         	movff	itos@Data,fsr2l
 28213  01439C  C0C9  FFDA         	movff	itos@Data+1,fsr2h
 28214  0143A0  6EDF               	movwf	indf2,c
 28215                           
 28216                           ; BSR set to: 0
 28217                           ;Types.c: 384: Out /= 10;
 28218  0143A2  C0CC  F0B8         	movff	itos@Out,___lwdiv@dividend
 28219  0143A6  C0CD  F0B9         	movff	itos@Out+1,___lwdiv@dividend+1
 28220  0143AA  0E00               	movlw	0
 28221  0143AC  0100               	movlb	0	; () banked
 28222  0143AE  6FBB               	movwf	(___lwdiv@divisor+1)& (0+255),b
 28223  0143B0  0E0A               	movlw	10
 28224  0143B2  6FBA               	movwf	___lwdiv@divisor& (0+255),b
 28225  0143B4  ECD7  F0AC         	call	___lwdiv	;wreg free
 28226  0143B8  C0B8  F0CC         	movff	?___lwdiv,itos@Out
 28227  0143BC  C0B9  F0CD         	movff	?___lwdiv+1,itos@Out+1
 28228                           
 28229                           ;Types.c: 385: Length ++;
 28230  0143C0  0100               	movlb	0	; () banked
 28231  0143C2  4BCA               	infsnz	itos@Length& (0+255),f,b
 28232  0143C4  2BCB               	incf	(itos@Length+1)& (0+255),f,b
 28233                           
 28234                           ; BSR set to: 0
 28235                           ;Types.c: 386: Data++;
 28236  0143C6  0100               	movlb	0	; () banked
 28237  0143C8  4BC8               	infsnz	itos@Data& (0+255),f,b
 28238  0143CA  2BC9               	incf	(itos@Data+1)& (0+255),f,b
 28239  0143CC                     l929:
 28240                           
 28241                           ; BSR set to: 0
 28242                           
 28243                           ; BSR set to: 0
 28244  0143CC  0100               	movlb	0	; () banked
 28245  0143CE  51CC               	movf	itos@Out& (0+255),w,b
 28246  0143D0  0100               	movlb	0	; () banked
 28247  0143D2  11CD               	iorwf	(itos@Out+1)& (0+255),w,b
 28248  0143D4  B4D8               	btfsc	status,2,c
 28249  0143D6  D008               	goto	u9570
 28250                           
 28251                           ; BSR set to: 0
 28252  0143D8  0100               	movlb	0	; () banked
 28253  0143DA  51CB               	movf	(itos@Length+1)& (0+255),w,b
 28254  0143DC  E105               	bnz	l12796
 28255  0143DE  0E06               	movlw	6
 28256  0143E0  0100               	movlb	0	; () banked
 28257  0143E2  5DCA               	subwf	itos@Length& (0+255),w,b
 28258  0143E4  A0D8               	btfss	status,0,c
 28259  0143E6  D7CA               	goto	l930
 28260  0143E8                     u9570:
 28261  0143E8                     l12796:
 28262                           
 28263                           ; BSR set to: 0
 28264                           ;Types.c: 387: }
 28265                           ;Types.c: 388: reverse(destination, Length);
 28266  0143E8  C0C6  F0B8         	movff	itos@destination,reverse@input
 28267  0143EC  C0C7  F0B9         	movff	itos@destination+1,reverse@input+1
 28268  0143F0  C0CA  F0BA         	movff	itos@Length,reverse@length
 28269  0143F4  C0CB  F0BB         	movff	itos@Length+1,reverse@length+1
 28270  0143F8  ECA4  F0AE         	call	_reverse	;wreg free
 28271  0143FC                     l928:
 28272                           
 28273                           ;Types.c: 389: }
 28274                           ;Types.c: 390: destination[Length] = '\0';
 28275  0143FC  0100               	movlb	0	; () banked
 28276  0143FE  51CA               	movf	itos@Length& (0+255),w,b
 28277  014400  0100               	movlb	0	; () banked
 28278  014402  25C6               	addwf	itos@destination& (0+255),w,b
 28279  014404  6ED9               	movwf	fsr2l,c
 28280  014406  0100               	movlb	0	; () banked
 28281  014408  51CB               	movf	(itos@Length+1)& (0+255),w,b
 28282  01440A  0100               	movlb	0	; () banked
 28283  01440C  21C7               	addwfc	(itos@destination+1)& (0+255),w,b
 28284  01440E  6EDA               	movwf	fsr2h,c
 28285  014410  0E00               	movlw	0
 28286  014412  6EDF               	movwf	indf2,c
 28287                           
 28288                           ; BSR set to: 0
 28289  014414  0012               	return		;funcret
 28290  014416                     __end_of_itos:
 28291                           	opt stack 0
 28292                           tosu	equ	0xFFF
 28293                           tosh	equ	0xFFE
 28294                           tosl	equ	0xFFD
 28295                           pclath	equ	0xFFA
 28296                           tblptru	equ	0xFF8
 28297                           tblptrh	equ	0xFF7
 28298                           tblptrl	equ	0xFF6
 28299                           tablat	equ	0xFF5
 28300                           prodh	equ	0xFF4
 28301                           prodl	equ	0xFF3
 28302                           intcon	equ	0xFF2
 28303                           postinc0	equ	0xFEE
 28304                           wreg	equ	0xFE8
 28305                           indf1	equ	0xFE7
 28306                           postdec1	equ	0xFE5
 28307                           fsr1h	equ	0xFE2
 28308                           fsr1l	equ	0xFE1
 28309                           indf2	equ	0xFDF
 28310                           postinc2	equ	0xFDE
 28311                           postdec2	equ	0xFDD
 28312                           plusw2	equ	0xFDB
 28313                           fsr2h	equ	0xFDA
 28314                           fsr2l	equ	0xFD9
 28315                           status	equ	0xFD8
 28316                           
 28317 ;; *************** function _reverse *****************
 28318 ;; Defined at:
 28319 ;;		line 357 in file "Library/Types.c"
 28320 ;; Parameters:    Size  Location     Type
 28321 ;;  input           2    0[BANK0 ] PTR unsigned char 
 28322 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28323 ;;  length          2    2[BANK0 ] unsigned short 
 28324 ;; Auto vars:     Size  Location     Type
 28325 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 28326 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28327 ;;  tempVar         1    4[BANK0 ] unsigned char 
 28328 ;; Return value:  Size  Location     Type
 28329 ;;                  1    wreg      void 
 28330 ;; Registers used:
 28331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28332 ;; Tracked objects:
 28333 ;;		On entry : 0/0
 28334 ;;		On exit  : 0/0
 28335 ;;		Unchanged: 0/0
 28336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28337 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28338 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28340 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28341 ;;Total ram usage:        7 bytes
 28342 ;; Hardware stack levels used:    1
 28343 ;; Hardware stack levels required when called:    7
 28344 ;; This function calls:
 28345 ;;		Nothing
 28346 ;; This function is called by:
 28347 ;;		_itos
 28348 ;; This function uses a non-reentrant model
 28349 ;;
 28350                           
 28351                           	psect	text144
 28352  015D48                     __ptext144:
 28353                           	opt stack 0
 28354  015D48                     _reverse:
 28355                           	opt stack 16
 28356                           
 28357                           ;Types.c: 359: char tempVar,
 28358                           ;Types.c: 360: *iterator = input + length;
 28359                           
 28360                           ; BSR set to: 0
 28361                           ;incstack = 0
 28362  015D48  0100               	movlb	0	; () banked
 28363  015D4A  51BA               	movf	reverse@length& (0+255),w,b
 28364  015D4C  0100               	movlb	0	; () banked
 28365  015D4E  25B8               	addwf	reverse@input& (0+255),w,b
 28366  015D50  0100               	movlb	0	; () banked
 28367  015D52  6FBD               	movwf	reverse@iterator& (0+255),b
 28368  015D54  0100               	movlb	0	; () banked
 28369  015D56  51BB               	movf	(reverse@length+1)& (0+255),w,b
 28370  015D58  0100               	movlb	0	; () banked
 28371  015D5A  21B9               	addwfc	(reverse@input+1)& (0+255),w,b
 28372  015D5C  0100               	movlb	0	; () banked
 28373  015D5E  6FBE               	movwf	(reverse@iterator+1)& (0+255),b
 28374                           
 28375                           ;Types.c: 362: while ( --iterator > input )
 28376  015D60  D01A               	goto	l921
 28377  015D62                     
 28378                           ; BSR set to: 0
 28379                           ;Types.c: 363: {
 28380                           ;Types.c: 364: tempVar = *input;
 28381                           
 28382                           ; BSR set to: 0
 28383  015D62  C0B8  FFD9         	movff	reverse@input,fsr2l
 28384  015D66  C0B9  FFDA         	movff	reverse@input+1,fsr2h
 28385  015D6A  50DF               	movf	indf2,w,c
 28386  015D6C  0100               	movlb	0	; () banked
 28387  015D6E  6FBC               	movwf	reverse@tempVar& (0+255),b
 28388                           
 28389                           ; BSR set to: 0
 28390                           ;Types.c: 365: *input++=*iterator;
 28391  015D70  C0BD  FFD9         	movff	reverse@iterator,fsr2l
 28392  015D74  C0BE  FFDA         	movff	reverse@iterator+1,fsr2h
 28393  015D78  C0B8  FFE1         	movff	reverse@input,fsr1l
 28394  015D7C  C0B9  FFE2         	movff	reverse@input+1,fsr1h
 28395  015D80  CFDF FFE7          	movff	indf2,indf1
 28396                           
 28397                           ; BSR set to: 0
 28398  015D84  0100               	movlb	0	; () banked
 28399  015D86  4BB8               	infsnz	reverse@input& (0+255),f,b
 28400  015D88  2BB9               	incf	(reverse@input+1)& (0+255),f,b
 28401                           
 28402                           ; BSR set to: 0
 28403                           ;Types.c: 366: *iterator=tempVar;
 28404  015D8A  C0BD  FFD9         	movff	reverse@iterator,fsr2l
 28405  015D8E  C0BE  FFDA         	movff	reverse@iterator+1,fsr2h
 28406  015D92  C0BC  FFDF         	movff	reverse@tempVar,indf2
 28407  015D96                     l921:
 28408                           
 28409                           ; BSR set to: 0
 28410                           
 28411                           ; BSR set to: 0
 28412  015D96  0100               	movlb	0	; () banked
 28413  015D98  07BD               	decf	reverse@iterator& (0+255),f,b
 28414  015D9A  A0D8               	btfss	status,0,c
 28415  015D9C  07BE               	decf	(reverse@iterator+1)& (0+255),f,b
 28416  015D9E  0100               	movlb	0	; () banked
 28417  015DA0  51BD               	movf	reverse@iterator& (0+255),w,b
 28418  015DA2  0100               	movlb	0	; () banked
 28419  015DA4  5DB8               	subwf	reverse@input& (0+255),w,b
 28420  015DA6  0100               	movlb	0	; () banked
 28421  015DA8  51BE               	movf	(reverse@iterator+1)& (0+255),w,b
 28422  015DAA  0100               	movlb	0	; () banked
 28423  015DAC  59B9               	subwfb	(reverse@input+1)& (0+255),w,b
 28424  015DAE  B0D8               	btfsc	status,0,c
 28425  015DB0  0012               	return	
 28426  015DB2  D7D7               	goto	l922
 28427  015DB4                     __end_of_reverse:
 28428                           	opt stack 0
 28429                           tosu	equ	0xFFF
 28430                           tosh	equ	0xFFE
 28431                           tosl	equ	0xFFD
 28432                           pclath	equ	0xFFA
 28433                           tblptru	equ	0xFF8
 28434                           tblptrh	equ	0xFF7
 28435                           tblptrl	equ	0xFF6
 28436                           tablat	equ	0xFF5
 28437                           prodh	equ	0xFF4
 28438                           prodl	equ	0xFF3
 28439                           intcon	equ	0xFF2
 28440                           postinc0	equ	0xFEE
 28441                           wreg	equ	0xFE8
 28442                           indf1	equ	0xFE7
 28443                           postdec1	equ	0xFE5
 28444                           fsr1h	equ	0xFE2
 28445                           fsr1l	equ	0xFE1
 28446                           indf2	equ	0xFDF
 28447                           postinc2	equ	0xFDE
 28448                           postdec2	equ	0xFDD
 28449                           plusw2	equ	0xFDB
 28450                           fsr2h	equ	0xFDA
 28451                           fsr2l	equ	0xFD9
 28452                           status	equ	0xFD8
 28453                           
 28454 ;; *************** function ___lwmod *****************
 28455 ;; Defined at:
 28456 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 28457 ;; Parameters:    Size  Location     Type
 28458 ;;  dividend        2    7[BANK0 ] unsigned int 
 28459 ;;  divisor         2    9[BANK0 ] unsigned int 
 28460 ;; Auto vars:     Size  Location     Type
 28461 ;;  counter         1   11[BANK0 ] unsigned char 
 28462 ;; Return value:  Size  Location     Type
 28463 ;;                  2    7[BANK0 ] unsigned int 
 28464 ;; Registers used:
 28465 ;;		wreg, status,2, status,0
 28466 ;; Tracked objects:
 28467 ;;		On entry : 0/0
 28468 ;;		On exit  : 0/0
 28469 ;;		Unchanged: 0/0
 28470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28474 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28475 ;;Total ram usage:        5 bytes
 28476 ;; Hardware stack levels used:    1
 28477 ;; Hardware stack levels required when called:    7
 28478 ;; This function calls:
 28479 ;;		Nothing
 28480 ;; This function is called by:
 28481 ;;		_itos
 28482 ;;		_printf
 28483 ;; This function uses a non-reentrant model
 28484 ;;
 28485                           
 28486                           	psect	text145
 28487  016084                     __ptext145:
 28488                           	opt stack 0
 28489  016084                     ___lwmod:
 28490                           	opt stack 22
 28491                           
 28492                           ; BSR set to: 0
 28493                           ;incstack = 0
 28494  016084  0100               	movlb	0	; () banked
 28495  016086  51C1               	movf	___lwmod@divisor& (0+255),w,b
 28496  016088  0100               	movlb	0	; () banked
 28497  01608A  11C2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 28498  01608C  B4D8               	btfsc	status,2,c
 28499  01608E  D026               	goto	l2925
 28500                           
 28501                           ; BSR set to: 0
 28502  016090  0E01               	movlw	1
 28503  016092  0100               	movlb	0	; () banked
 28504  016094  6FC3               	movwf	___lwmod@counter& (0+255),b
 28505  016096  D006               	goto	l2920
 28506  016098                     
 28507                           ; BSR set to: 0
 28508                           
 28509                           ; BSR set to: 0
 28510  016098  0100               	movlb	0	; () banked
 28511  01609A  90D8               	bcf	status,0,c
 28512  01609C  37C1               	rlcf	___lwmod@divisor& (0+255),f,b
 28513  01609E  37C2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 28514  0160A0  0100               	movlb	0	; () banked
 28515  0160A2  2BC3               	incf	___lwmod@counter& (0+255),f,b
 28516  0160A4                     l2920:
 28517                           
 28518                           ; BSR set to: 0
 28519                           
 28520                           ; BSR set to: 0
 28521  0160A4  0100               	movlb	0	; () banked
 28522  0160A6  AFC2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 28523  0160A8  D7F7               	goto	l2921
 28524  0160AA                     u9460:
 28525                           
 28526                           ; BSR set to: 0
 28527                           
 28528                           ; BSR set to: 0
 28529                           
 28530                           ; BSR set to: 0
 28531  0160AA  0100               	movlb	0	; () banked
 28532  0160AC  51C1               	movf	___lwmod@divisor& (0+255),w,b
 28533  0160AE  0100               	movlb	0	; () banked
 28534  0160B0  5DBF               	subwf	___lwmod@dividend& (0+255),w,b
 28535  0160B2  0100               	movlb	0	; () banked
 28536  0160B4  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28537  0160B6  0100               	movlb	0	; () banked
 28538  0160B8  59C0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 28539  0160BA  A0D8               	btfss	status,0,c
 28540  0160BC  D008               	goto	l2924
 28541                           
 28542                           ; BSR set to: 0
 28543  0160BE  0100               	movlb	0	; () banked
 28544  0160C0  51C1               	movf	___lwmod@divisor& (0+255),w,b
 28545  0160C2  0100               	movlb	0	; () banked
 28546  0160C4  5FBF               	subwf	___lwmod@dividend& (0+255),f,b
 28547  0160C6  0100               	movlb	0	; () banked
 28548  0160C8  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28549  0160CA  0100               	movlb	0	; () banked
 28550  0160CC  5BC0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 28551  0160CE                     l2924:
 28552                           
 28553                           ; BSR set to: 0
 28554                           
 28555                           ; BSR set to: 0
 28556  0160CE  0100               	movlb	0	; () banked
 28557  0160D0  90D8               	bcf	status,0,c
 28558  0160D2  33C2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 28559  0160D4  33C1               	rrcf	___lwmod@divisor& (0+255),f,b
 28560                           
 28561                           ; BSR set to: 0
 28562  0160D6  0100               	movlb	0	; () banked
 28563  0160D8  2FC3               	decfsz	___lwmod@counter& (0+255),f,b
 28564  0160DA  D7E7               	goto	u9460
 28565  0160DC                     l2925:
 28566                           
 28567                           ; BSR set to: 0
 28568                           
 28569                           ; BSR set to: 0
 28570  0160DC  C0BF  F0BF         	movff	___lwmod@dividend,?___lwmod
 28571  0160E0  C0C0  F0C0         	movff	___lwmod@dividend+1,?___lwmod+1
 28572                           
 28573                           ; BSR set to: 0
 28574  0160E4  0012               	return		;funcret
 28575  0160E6                     __end_of___lwmod:
 28576                           	opt stack 0
 28577                           tosu	equ	0xFFF
 28578                           tosh	equ	0xFFE
 28579                           tosl	equ	0xFFD
 28580                           pclath	equ	0xFFA
 28581                           tblptru	equ	0xFF8
 28582                           tblptrh	equ	0xFF7
 28583                           tblptrl	equ	0xFF6
 28584                           tablat	equ	0xFF5
 28585                           prodh	equ	0xFF4
 28586                           prodl	equ	0xFF3
 28587                           intcon	equ	0xFF2
 28588                           postinc0	equ	0xFEE
 28589                           wreg	equ	0xFE8
 28590                           indf1	equ	0xFE7
 28591                           postdec1	equ	0xFE5
 28592                           fsr1h	equ	0xFE2
 28593                           fsr1l	equ	0xFE1
 28594                           indf2	equ	0xFDF
 28595                           postinc2	equ	0xFDE
 28596                           postdec2	equ	0xFDD
 28597                           plusw2	equ	0xFDB
 28598                           fsr2h	equ	0xFDA
 28599                           fsr2l	equ	0xFD9
 28600                           status	equ	0xFD8
 28601                           
 28602 ;; *************** function ___lwdiv *****************
 28603 ;; Defined at:
 28604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 28605 ;; Parameters:    Size  Location     Type
 28606 ;;  dividend        2    0[BANK0 ] unsigned int 
 28607 ;;  divisor         2    2[BANK0 ] unsigned int 
 28608 ;; Auto vars:     Size  Location     Type
 28609 ;;  quotient        2    5[BANK0 ] unsigned int 
 28610 ;;  counter         1    4[BANK0 ] unsigned char 
 28611 ;; Return value:  Size  Location     Type
 28612 ;;                  2    0[BANK0 ] unsigned int 
 28613 ;; Registers used:
 28614 ;;		wreg, status,2, status,0
 28615 ;; Tracked objects:
 28616 ;;		On entry : 0/0
 28617 ;;		On exit  : 0/0
 28618 ;;		Unchanged: 0/0
 28619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28620 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28621 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28623 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28624 ;;Total ram usage:        7 bytes
 28625 ;; Hardware stack levels used:    1
 28626 ;; Hardware stack levels required when called:    7
 28627 ;; This function calls:
 28628 ;;		Nothing
 28629 ;; This function is called by:
 28630 ;;		_itos
 28631 ;;		_printf
 28632 ;; This function uses a non-reentrant model
 28633 ;;
 28634                           
 28635                           	psect	text146
 28636  0159AE                     __ptext146:
 28637                           	opt stack 0
 28638  0159AE                     ___lwdiv:
 28639                           	opt stack 22
 28640                           
 28641                           ; BSR set to: 0
 28642                           ;incstack = 0
 28643  0159AE  0E00               	movlw	0
 28644  0159B0  0100               	movlb	0	; () banked
 28645  0159B2  6FBE               	movwf	(___lwdiv@quotient+1)& (0+255),b
 28646  0159B4  0E00               	movlw	0
 28647  0159B6  6FBD               	movwf	___lwdiv@quotient& (0+255),b
 28648                           
 28649                           ; BSR set to: 0
 28650  0159B8  0100               	movlb	0	; () banked
 28651  0159BA  51BA               	movf	___lwdiv@divisor& (0+255),w,b
 28652  0159BC  0100               	movlb	0	; () banked
 28653  0159BE  11BB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 28654  0159C0  B4D8               	btfsc	status,2,c
 28655  0159C2  D02C               	goto	l2915
 28656                           
 28657                           ; BSR set to: 0
 28658  0159C4  0E01               	movlw	1
 28659  0159C6  0100               	movlb	0	; () banked
 28660  0159C8  6FBC               	movwf	___lwdiv@counter& (0+255),b
 28661  0159CA  D006               	goto	l2910
 28662  0159CC                     
 28663                           ; BSR set to: 0
 28664                           
 28665                           ; BSR set to: 0
 28666  0159CC  0100               	movlb	0	; () banked
 28667  0159CE  90D8               	bcf	status,0,c
 28668  0159D0  37BA               	rlcf	___lwdiv@divisor& (0+255),f,b
 28669  0159D2  37BB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 28670  0159D4  0100               	movlb	0	; () banked
 28671  0159D6  2BBC               	incf	___lwdiv@counter& (0+255),f,b
 28672  0159D8                     l2910:
 28673                           
 28674                           ; BSR set to: 0
 28675                           
 28676                           ; BSR set to: 0
 28677  0159D8  0100               	movlb	0	; () banked
 28678  0159DA  AFBB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 28679  0159DC  D7F7               	goto	l2911
 28680  0159DE                     u9430:
 28681                           
 28682                           ; BSR set to: 0
 28683                           
 28684                           ; BSR set to: 0
 28685                           
 28686                           ; BSR set to: 0
 28687  0159DE  0100               	movlb	0	; () banked
 28688  0159E0  90D8               	bcf	status,0,c
 28689  0159E2  37BD               	rlcf	___lwdiv@quotient& (0+255),f,b
 28690  0159E4  37BE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 28691                           
 28692                           ; BSR set to: 0
 28693  0159E6  0100               	movlb	0	; () banked
 28694  0159E8  51BA               	movf	___lwdiv@divisor& (0+255),w,b
 28695  0159EA  0100               	movlb	0	; () banked
 28696  0159EC  5DB8               	subwf	___lwdiv@dividend& (0+255),w,b
 28697  0159EE  0100               	movlb	0	; () banked
 28698  0159F0  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28699  0159F2  0100               	movlb	0	; () banked
 28700  0159F4  59B9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 28701  0159F6  A0D8               	btfss	status,0,c
 28702  0159F8  D00A               	goto	l2914
 28703                           
 28704                           ; BSR set to: 0
 28705  0159FA  0100               	movlb	0	; () banked
 28706  0159FC  51BA               	movf	___lwdiv@divisor& (0+255),w,b
 28707  0159FE  0100               	movlb	0	; () banked
 28708  015A00  5FB8               	subwf	___lwdiv@dividend& (0+255),f,b
 28709  015A02  0100               	movlb	0	; () banked
 28710  015A04  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28711  015A06  0100               	movlb	0	; () banked
 28712  015A08  5BB9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 28713                           
 28714                           ; BSR set to: 0
 28715  015A0A  0100               	movlb	0	; () banked
 28716  015A0C  81BD               	bsf	___lwdiv@quotient& (0+255),0,b
 28717  015A0E                     l2914:
 28718                           
 28719                           ; BSR set to: 0
 28720                           
 28721                           ; BSR set to: 0
 28722  015A0E  0100               	movlb	0	; () banked
 28723  015A10  90D8               	bcf	status,0,c
 28724  015A12  33BB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 28725  015A14  33BA               	rrcf	___lwdiv@divisor& (0+255),f,b
 28726                           
 28727                           ; BSR set to: 0
 28728  015A16  0100               	movlb	0	; () banked
 28729  015A18  2FBC               	decfsz	___lwdiv@counter& (0+255),f,b
 28730  015A1A  D7E1               	goto	u9430
 28731  015A1C                     l2915:
 28732                           
 28733                           ; BSR set to: 0
 28734                           
 28735                           ; BSR set to: 0
 28736  015A1C  C0BD  F0B8         	movff	___lwdiv@quotient,?___lwdiv
 28737  015A20  C0BE  F0B9         	movff	___lwdiv@quotient+1,?___lwdiv+1
 28738                           
 28739                           ; BSR set to: 0
 28740  015A24  0012               	return		;funcret
 28741  015A26                     __end_of___lwdiv:
 28742                           	opt stack 0
 28743                           tosu	equ	0xFFF
 28744                           tosh	equ	0xFFE
 28745                           tosl	equ	0xFFD
 28746                           pclath	equ	0xFFA
 28747                           tblptru	equ	0xFF8
 28748                           tblptrh	equ	0xFF7
 28749                           tblptrl	equ	0xFF6
 28750                           tablat	equ	0xFF5
 28751                           prodh	equ	0xFF4
 28752                           prodl	equ	0xFF3
 28753                           intcon	equ	0xFF2
 28754                           postinc0	equ	0xFEE
 28755                           wreg	equ	0xFE8
 28756                           indf1	equ	0xFE7
 28757                           postdec1	equ	0xFE5
 28758                           fsr1h	equ	0xFE2
 28759                           fsr1l	equ	0xFE1
 28760                           indf2	equ	0xFDF
 28761                           postinc2	equ	0xFDE
 28762                           postdec2	equ	0xFDD
 28763                           plusw2	equ	0xFDB
 28764                           fsr2h	equ	0xFDA
 28765                           fsr2l	equ	0xFD9
 28766                           status	equ	0xFD8
 28767                           
 28768 ;; *************** function _HMI_SetSegments *****************
 28769 ;; Defined at:
 28770 ;;		line 226 in file "HMI.c"
 28771 ;; Parameters:    Size  Location     Type
 28772 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 28773 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28774 ;; Auto vars:     Size  Location     Type
 28775 ;;  in              2    4[BANK0 ] unsigned short 
 28776 ;; Return value:  Size  Location     Type
 28777 ;;                  1    wreg      void 
 28778 ;; Registers used:
 28779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28780 ;; Tracked objects:
 28781 ;;		On entry : 0/0
 28782 ;;		On exit  : 0/0
 28783 ;;		Unchanged: 0/0
 28784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28788 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28789 ;;Total ram usage:        5 bytes
 28790 ;; Hardware stack levels used:    1
 28791 ;; Hardware stack levels required when called:    8
 28792 ;; This function calls:
 28793 ;;		_ToSegment
 28794 ;; This function is called by:
 28795 ;;		_HMI_SetNumber
 28796 ;; This function uses a non-reentrant model
 28797 ;;
 28798                           
 28799                           	psect	text147
 28800  014B22                     __ptext147:
 28801                           	opt stack 0
 28802  014B22                     _HMI_SetSegments:
 28803                           	opt stack 16
 28804                           
 28805                           ;HMI.c: 228: UINT16 in=0;
 28806                           
 28807                           ; BSR set to: 0
 28808                           ;incstack = 0
 28809  014B22  0E00               	movlw	0
 28810  014B24  0100               	movlb	0	; () banked
 28811  014B26  6FBD               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 28812  014B28  0E00               	movlw	0
 28813  014B2A  6FBC               	movwf	HMI_SetSegments@in& (0+255),b
 28814                           
 28815                           ;HMI.c: 229: while(*pString)
 28816  014B2C  D038               	goto	l1202
 28817  014B2E                     
 28818                           ; BSR set to: 0
 28819                           ;HMI.c: 230: {
 28820                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 28821                           
 28822                           ; BSR set to: 0
 28823  014B2E  0E47               	movlw	low _HMIBoard
 28824  014B30  0100               	movlb	0	; () banked
 28825  014B32  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
 28826  014B34  6ED9               	movwf	fsr2l,c
 28827  014B36  0E03               	movlw	high _HMIBoard
 28828  014B38  0100               	movlb	0	; () banked
 28829  014B3A  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28830  014B3C  6EDA               	movwf	fsr2h,c
 28831  014B3E  C0B9  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 28832  014B42  C0BA  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 28833  014B46  50E7               	movf	indf1,w,c
 28834  014B48  EC66  F08E         	call	_ToSegment
 28835  014B4C  6EDF               	movwf	indf2,c
 28836                           
 28837                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 28838  014B4E  0E47               	movlw	low _HMIBoard
 28839  014B50  0100               	movlb	0	; () banked
 28840  014B52  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
 28841  014B54  6ED9               	movwf	fsr2l,c
 28842  014B56  0E03               	movlw	high _HMIBoard
 28843  014B58  0100               	movlb	0	; () banked
 28844  014B5A  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28845  014B5C  6EDA               	movwf	fsr2h,c
 28846  014B5E  0E80               	movlw	128
 28847  014B60  18DE               	xorwf	postinc2,w,c
 28848  014B62  A4D8               	btfss	status,2,c
 28849  014B64  D00E               	goto	l1201
 28850                           
 28851                           ; BSR set to: 0
 28852                           ;HMI.c: 234: {
 28853                           ;HMI.c: 235: in--;
 28854  014B66  0100               	movlb	0	; () banked
 28855  014B68  07BC               	decf	HMI_SetSegments@in& (0+255),f,b
 28856  014B6A  A0D8               	btfss	status,0,c
 28857  014B6C  07BD               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 28858                           
 28859                           ; BSR set to: 0
 28860                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 28861  014B6E  0E47               	movlw	low _HMIBoard
 28862  014B70  0100               	movlb	0	; () banked
 28863  014B72  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
 28864  014B74  6ED9               	movwf	fsr2l,c
 28865  014B76  0E03               	movlw	high _HMIBoard
 28866  014B78  0100               	movlb	0	; () banked
 28867  014B7A  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28868  014B7C  6EDA               	movwf	fsr2h,c
 28869  014B7E  0E00               	movlw	0
 28870  014B80  8EDB               	bsf	plusw2,7,c
 28871  014B82                     l1201:
 28872                           
 28873                           ; BSR set to: 0
 28874                           ;HMI.c: 237: }
 28875                           ;HMI.c: 239: pString++;
 28876                           
 28877                           ; BSR set to: 0
 28878  014B82  0100               	movlb	0	; () banked
 28879  014B84  4BB9               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 28880  014B86  2BBA               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 28881                           
 28882                           ; BSR set to: 0
 28883                           ;HMI.c: 240: in++;
 28884  014B88  0100               	movlb	0	; () banked
 28885  014B8A  4BBC               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28886  014B8C  2BBD               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28887                           
 28888                           ; BSR set to: 0
 28889                           ;HMI.c: 241: if (in>=6)
 28890  014B8E  0100               	movlb	0	; () banked
 28891  014B90  51BD               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28892  014B92  E11A               	bnz	l12848
 28893  014B94  0E06               	movlw	6
 28894  014B96  0100               	movlb	0	; () banked
 28895  014B98  5DBC               	subwf	HMI_SetSegments@in& (0+255),w,b
 28896  014B9A  B0D8               	btfsc	status,0,c
 28897  014B9C  D015               	goto	l1204
 28898  014B9E                     l1202:
 28899                           
 28900                           ; BSR set to: 0
 28901                           
 28902                           ; BSR set to: 0
 28903                           
 28904                           ; BSR set to: 0
 28905  014B9E  C0B9  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 28906  014BA2  C0BA  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 28907  014BA6  50DF               	movf	indf2,w,c
 28908  014BA8  B4D8               	btfsc	status,2,c
 28909  014BAA  D00E               	goto	l1204
 28910  014BAC  D7C0               	goto	l1200
 28911  014BAE                     
 28912                           ; BSR set to: 0
 28913                           ;HMI.c: 245: {
 28914                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 28915                           
 28916                           ; BSR set to: 0
 28917  014BAE  0E47               	movlw	low _HMIBoard
 28918  014BB0  0100               	movlb	0	; () banked
 28919  014BB2  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
 28920  014BB4  6ED9               	movwf	fsr2l,c
 28921  014BB6  0E03               	movlw	high _HMIBoard
 28922  014BB8  0100               	movlb	0	; () banked
 28923  014BBA  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28924  014BBC  6EDA               	movwf	fsr2h,c
 28925  014BBE  0E00               	movlw	0
 28926  014BC0  6EDF               	movwf	indf2,c
 28927                           
 28928                           ; BSR set to: 0
 28929                           ;HMI.c: 247: in++;
 28930  014BC2  0100               	movlb	0	; () banked
 28931  014BC4  4BBC               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28932  014BC6  2BBD               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28933  014BC8                     l1204:
 28934  014BC8                     l12848:
 28935                           
 28936                           ; BSR set to: 0
 28937  014BC8  0100               	movlb	0	; () banked
 28938  014BCA  51BD               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28939  014BCC  E106               	bnz	l1207
 28940  014BCE  0E06               	movlw	6
 28941  014BD0  0100               	movlb	0	; () banked
 28942  014BD2  5DBC               	subwf	HMI_SetSegments@in& (0+255),w,b
 28943  014BD4  B0D8               	btfsc	status,0,c
 28944  014BD6  0012               	return	
 28945  014BD8  D7EA               	goto	l1205
 28946  014BDA                     l1207:
 28947                           
 28948                           ; BSR set to: 0
 28949  014BDA  0012               	return		;funcret
 28950  014BDC                     __end_of_HMI_SetSegments:
 28951                           	opt stack 0
 28952                           tosu	equ	0xFFF
 28953                           tosh	equ	0xFFE
 28954                           tosl	equ	0xFFD
 28955                           pclath	equ	0xFFA
 28956                           tblptru	equ	0xFF8
 28957                           tblptrh	equ	0xFF7
 28958                           tblptrl	equ	0xFF6
 28959                           tablat	equ	0xFF5
 28960                           prodh	equ	0xFF4
 28961                           prodl	equ	0xFF3
 28962                           intcon	equ	0xFF2
 28963                           postinc0	equ	0xFEE
 28964                           wreg	equ	0xFE8
 28965                           indf1	equ	0xFE7
 28966                           postdec1	equ	0xFE5
 28967                           fsr1h	equ	0xFE2
 28968                           fsr1l	equ	0xFE1
 28969                           indf2	equ	0xFDF
 28970                           postinc2	equ	0xFDE
 28971                           postdec2	equ	0xFDD
 28972                           plusw2	equ	0xFDB
 28973                           fsr2h	equ	0xFDA
 28974                           fsr2l	equ	0xFD9
 28975                           status	equ	0xFD8
 28976                           
 28977 ;; *************** function _ToSegment *****************
 28978 ;; Defined at:
 28979 ;;		line 284 in file "Library/Types.c"
 28980 ;; Parameters:    Size  Location     Type
 28981 ;;  pCHR            1    wreg     unsigned char 
 28982 ;; Auto vars:     Size  Location     Type
 28983 ;;  pCHR            1    0[BANK0 ] unsigned char 
 28984 ;; Return value:  Size  Location     Type
 28985 ;;                  1    wreg      unsigned char 
 28986 ;; Registers used:
 28987 ;;		wreg, status,2, status,0
 28988 ;; Tracked objects:
 28989 ;;		On entry : 0/0
 28990 ;;		On exit  : 0/0
 28991 ;;		Unchanged: 0/0
 28992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28997 ;;Total ram usage:        1 bytes
 28998 ;; Hardware stack levels used:    1
 28999 ;; Hardware stack levels required when called:    7
 29000 ;; This function calls:
 29001 ;;		Nothing
 29002 ;; This function is called by:
 29003 ;;		_HMI_SetSegments
 29004 ;; This function uses a non-reentrant model
 29005 ;;
 29006                           
 29007                           	psect	text148
 29008  011CCC                     __ptext148:
 29009                           	opt stack 0
 29010  011CCC                     _ToSegment:
 29011                           	opt stack 16
 29012                           
 29013                           ; BSR set to: 0
 29014                           ;incstack = 0
 29015                           ;ToSegment@pCHR stored from wreg
 29016  011CCC  0100               	movlb	0	; () banked
 29017  011CCE  6FB8               	movwf	ToSegment@pCHR& (0+255),b
 29018                           
 29019                           ;Types.c: 286: switch(pCHR)
 29020  011CD0  D07E               	goto	l853
 29021  011CD2  0E3F               	movlw	63
 29022  011CD4  0012               	return	
 29023  011CD6  0E06               	movlw	6
 29024  011CD8  0012               	return	
 29025  011CDA  0E5B               	movlw	91
 29026  011CDC  0012               	return	
 29027  011CDE  0E4F               	movlw	79
 29028  011CE0  0012               	return	
 29029  011CE2  0E66               	movlw	102
 29030  011CE4  0012               	return	
 29031  011CE6  0E6D               	movlw	109
 29032  011CE8  0012               	return	
 29033  011CEA  0E7D               	movlw	125
 29034  011CEC  0012               	return	
 29035  011CEE  0E07               	movlw	7
 29036  011CF0  0012               	return	
 29037  011CF2  0E7F               	movlw	127
 29038  011CF4  0012               	return	
 29039  011CF6  0E6F               	movlw	111
 29040  011CF8  0012               	return	
 29041  011CFA  0E5F               	movlw	95
 29042  011CFC  0012               	return	
 29043  011CFE  0E7C               	movlw	124
 29044  011D00  0012               	return	
 29045  011D02  0E58               	movlw	88
 29046  011D04  0012               	return	
 29047  011D06  0E5E               	movlw	94
 29048  011D08  0012               	return	
 29049  011D0A  0E7B               	movlw	123
 29050  011D0C  0012               	return	
 29051  011D0E  0E71               	movlw	113
 29052  011D10  0012               	return	
 29053  011D12  0E6F               	movlw	111
 29054  011D14  0012               	return	
 29055  011D16  0E74               	movlw	116
 29056  011D18  0012               	return	
 29057  011D1A  0E04               	movlw	4
 29058  011D1C  0012               	return	
 29059  011D1E  0E0E               	movlw	14
 29060  011D20  0012               	return	
 29061  011D22  0E7A               	movlw	122
 29062  011D24  0012               	return	
 29063  011D26  0E06               	movlw	6
 29064  011D28  0012               	return	
 29065  011D2A  0E14               	movlw	20
 29066  011D2C  0012               	return	
 29067  011D2E  0E54               	movlw	84
 29068  011D30  0012               	return	
 29069  011D32  0E5C               	movlw	92
 29070  011D34  0012               	return	
 29071  011D36  0E73               	movlw	115
 29072  011D38  0012               	return	
 29073  011D3A  0E67               	movlw	103
 29074  011D3C  0012               	return	
 29075  011D3E  0E50               	movlw	80
 29076  011D40  0012               	return	
 29077  011D42  0E6D               	movlw	109
 29078  011D44  0012               	return	
 29079  011D46  0E78               	movlw	120
 29080  011D48  0012               	return	
 29081  011D4A  0E1C               	movlw	28
 29082  011D4C  0012               	return	
 29083  011D4E  0E62               	movlw	98
 29084  011D50  0012               	return	
 29085  011D52  0E2A               	movlw	42
 29086  011D54  0012               	return	
 29087  011D56  0E64               	movlw	100
 29088  011D58  0012               	return	
 29089  011D5A  0E6E               	movlw	110
 29090  011D5C  0012               	return	
 29091  011D5E  0E5B               	movlw	91
 29092  011D60  0012               	return	
 29093  011D62  0E77               	movlw	119
 29094  011D64  0012               	return	
 29095  011D66  0E7F               	movlw	127
 29096  011D68  0012               	return	
 29097  011D6A  0E39               	movlw	57
 29098  011D6C  0012               	return	
 29099  011D6E  0E3F               	movlw	63
 29100  011D70  0012               	return	
 29101  011D72  0E79               	movlw	121
 29102  011D74  0012               	return	
 29103  011D76  0E71               	movlw	113
 29104  011D78  0012               	return	
 29105  011D7A  0E3D               	movlw	61
 29106  011D7C  0012               	return	
 29107  011D7E  0E76               	movlw	118
 29108  011D80  0012               	return	
 29109  011D82  0E06               	movlw	6
 29110  011D84  0012               	return	
 29111  011D86  0E1E               	movlw	30
 29112  011D88  0012               	return	
 29113  011D8A  0E57               	movlw	87
 29114  011D8C  0012               	return	
 29115  011D8E  0E38               	movlw	56
 29116  011D90  0012               	return	
 29117  011D92  0E76               	movlw	118
 29118  011D94  0012               	return	
 29119  011D96  0E76               	movlw	118
 29120  011D98  0012               	return	
 29121  011D9A  0E3F               	movlw	63
 29122  011D9C  0012               	return	
 29123  011D9E  0E73               	movlw	115
 29124  011DA0  0012               	return	
 29125  011DA2  0E3F               	movlw	63
 29126  011DA4  0012               	return	
 29127  011DA6  0E77               	movlw	119
 29128  011DA8  0012               	return	
 29129  011DAA  0E6D               	movlw	109
 29130  011DAC  0012               	return	
 29131  011DAE  0E31               	movlw	49
 29132  011DB0  0012               	return	
 29133  011DB2  0E3E               	movlw	62
 29134  011DB4  0012               	return	
 29135  011DB6  0E3E               	movlw	62
 29136  011DB8  0012               	return	
 29137  011DBA  0E7E               	movlw	126
 29138  011DBC  0012               	return	
 29139  011DBE  0E76               	movlw	118
 29140  011DC0  0012               	return	
 29141  011DC2  0E66               	movlw	102
 29142  011DC4  0012               	return	
 29143  011DC6  0E5B               	movlw	91
 29144  011DC8  0012               	return	
 29145  011DCA  0E80               	movlw	128
 29146  011DCC  0012               	return	
 29147  011DCE                     l853:
 29148  011DCE  0100               	movlb	0	; () banked
 29149  011DD0  51B8               	movf	ToSegment@pCHR& (0+255),w,b
 29150                           
 29151                           ; Switch size 1, requested type "space"
 29152                           ; Number of cases is 63, Range of values is 46 to 122
 29153                           ; switch strategies available:
 29154                           ; Name         Instructions Cycles
 29155                           ; simple_byte          190    96 (average)
 29156                           ;	Chosen strategy is simple_byte
 29157  011DD2  0A2E               	xorlw	46	; case 46
 29158  011DD4  B4D8               	btfsc	status,2,c
 29159  011DD6  D7F9               	goto	l917
 29160  011DD8  0A1E               	xorlw	30	; case 48
 29161  011DDA  B4D8               	btfsc	status,2,c
 29162  011DDC  D77A               	goto	l854
 29163  011DDE  0A01               	xorlw	1	; case 49
 29164  011DE0  B4D8               	btfsc	status,2,c
 29165  011DE2  D779               	goto	l856
 29166  011DE4  0A03               	xorlw	3	; case 50
 29167  011DE6  B4D8               	btfsc	status,2,c
 29168  011DE8  D778               	goto	l857
 29169  011DEA  0A01               	xorlw	1	; case 51
 29170  011DEC  B4D8               	btfsc	status,2,c
 29171  011DEE  D777               	goto	l858
 29172  011DF0  0A07               	xorlw	7	; case 52
 29173  011DF2  B4D8               	btfsc	status,2,c
 29174  011DF4  D776               	goto	l859
 29175  011DF6  0A01               	xorlw	1	; case 53
 29176  011DF8  B4D8               	btfsc	status,2,c
 29177  011DFA  D775               	goto	l860
 29178  011DFC  0A03               	xorlw	3	; case 54
 29179  011DFE  B4D8               	btfsc	status,2,c
 29180  011E00  D774               	goto	l861
 29181  011E02  0A01               	xorlw	1	; case 55
 29182  011E04  B4D8               	btfsc	status,2,c
 29183  011E06  D773               	goto	l862
 29184  011E08  0A0F               	xorlw	15	; case 56
 29185  011E0A  B4D8               	btfsc	status,2,c
 29186  011E0C  D772               	goto	l863
 29187  011E0E  0A01               	xorlw	1	; case 57
 29188  011E10  B4D8               	btfsc	status,2,c
 29189  011E12  D771               	goto	l864
 29190  011E14  0A78               	xorlw	120	; case 65
 29191  011E16  B4D8               	btfsc	status,2,c
 29192  011E18  D7A4               	goto	l891
 29193  011E1A  0A03               	xorlw	3	; case 66
 29194  011E1C  B4D8               	btfsc	status,2,c
 29195  011E1E  D7A3               	goto	l892
 29196  011E20  0A01               	xorlw	1	; case 67
 29197  011E22  B4D8               	btfsc	status,2,c
 29198  011E24  D7A2               	goto	l893
 29199  011E26  0A07               	xorlw	7	; case 68
 29200  011E28  B4D8               	btfsc	status,2,c
 29201  011E2A  D7A1               	goto	l894
 29202  011E2C  0A01               	xorlw	1	; case 69
 29203  011E2E  B4D8               	btfsc	status,2,c
 29204  011E30  D7A0               	goto	l895
 29205  011E32  0A03               	xorlw	3	; case 70
 29206  011E34  B4D8               	btfsc	status,2,c
 29207  011E36  D79F               	goto	l896
 29208  011E38  0A01               	xorlw	1	; case 71
 29209  011E3A  B4D8               	btfsc	status,2,c
 29210  011E3C  D79E               	goto	l897
 29211  011E3E  0A0F               	xorlw	15	; case 72
 29212  011E40  B4D8               	btfsc	status,2,c
 29213  011E42  D79D               	goto	l898
 29214  011E44  0A01               	xorlw	1	; case 73
 29215  011E46  B4D8               	btfsc	status,2,c
 29216  011E48  D79C               	goto	l899
 29217  011E4A  0A03               	xorlw	3	; case 74
 29218  011E4C  B4D8               	btfsc	status,2,c
 29219  011E4E  D79B               	goto	l900
 29220  011E50  0A01               	xorlw	1	; case 75
 29221  011E52  B4D8               	btfsc	status,2,c
 29222  011E54  D79A               	goto	l901
 29223  011E56  0A07               	xorlw	7	; case 76
 29224  011E58  B4D8               	btfsc	status,2,c
 29225  011E5A  D799               	goto	l902
 29226  011E5C  0A01               	xorlw	1	; case 77
 29227  011E5E  B4D8               	btfsc	status,2,c
 29228  011E60  D798               	goto	l903
 29229  011E62  0A03               	xorlw	3	; case 78
 29230  011E64  B4D8               	btfsc	status,2,c
 29231  011E66  D797               	goto	l904
 29232  011E68  0A01               	xorlw	1	; case 79
 29233  011E6A  B4D8               	btfsc	status,2,c
 29234  011E6C  D796               	goto	l905
 29235  011E6E  0A1F               	xorlw	31	; case 80
 29236  011E70  B4D8               	btfsc	status,2,c
 29237  011E72  D795               	goto	l906
 29238  011E74  0A01               	xorlw	1	; case 81
 29239  011E76  B4D8               	btfsc	status,2,c
 29240  011E78  D794               	goto	l907
 29241  011E7A  0A03               	xorlw	3	; case 82
 29242  011E7C  B4D8               	btfsc	status,2,c
 29243  011E7E  D793               	goto	l908
 29244  011E80  0A01               	xorlw	1	; case 83
 29245  011E82  B4D8               	btfsc	status,2,c
 29246  011E84  D792               	goto	l909
 29247  011E86  0A07               	xorlw	7	; case 84
 29248  011E88  B4D8               	btfsc	status,2,c
 29249  011E8A  D791               	goto	l910
 29250  011E8C  0A01               	xorlw	1	; case 85
 29251  011E8E  B4D8               	btfsc	status,2,c
 29252  011E90  D790               	goto	l911
 29253  011E92  0A03               	xorlw	3	; case 86
 29254  011E94  B4D8               	btfsc	status,2,c
 29255  011E96  D78F               	goto	l912
 29256  011E98  0A01               	xorlw	1	; case 87
 29257  011E9A  B4D8               	btfsc	status,2,c
 29258  011E9C  D78E               	goto	l913
 29259  011E9E  0A0F               	xorlw	15	; case 88
 29260  011EA0  B4D8               	btfsc	status,2,c
 29261  011EA2  D78D               	goto	l914
 29262  011EA4  0A01               	xorlw	1	; case 89
 29263  011EA6  B4D8               	btfsc	status,2,c
 29264  011EA8  D78C               	goto	l915
 29265  011EAA  0A03               	xorlw	3	; case 90
 29266  011EAC  B4D8               	btfsc	status,2,c
 29267  011EAE  D78B               	goto	l916
 29268  011EB0  0A3B               	xorlw	59	; case 97
 29269  011EB2  B4D8               	btfsc	status,2,c
 29270  011EB4  D722               	goto	l865
 29271  011EB6  0A03               	xorlw	3	; case 98
 29272  011EB8  B4D8               	btfsc	status,2,c
 29273  011EBA  D721               	goto	l866
 29274  011EBC  0A01               	xorlw	1	; case 99
 29275  011EBE  B4D8               	btfsc	status,2,c
 29276  011EC0  D720               	goto	l867
 29277  011EC2  0A07               	xorlw	7	; case 100
 29278  011EC4  B4D8               	btfsc	status,2,c
 29279  011EC6  D71F               	goto	l868
 29280  011EC8  0A01               	xorlw	1	; case 101
 29281  011ECA  B4D8               	btfsc	status,2,c
 29282  011ECC  D71E               	goto	l869
 29283  011ECE  0A03               	xorlw	3	; case 102
 29284  011ED0  B4D8               	btfsc	status,2,c
 29285  011ED2  D71D               	goto	l870
 29286  011ED4  0A01               	xorlw	1	; case 103
 29287  011ED6  B4D8               	btfsc	status,2,c
 29288  011ED8  D71C               	goto	l871
 29289  011EDA  0A0F               	xorlw	15	; case 104
 29290  011EDC  B4D8               	btfsc	status,2,c
 29291  011EDE  D71B               	goto	l872
 29292  011EE0  0A01               	xorlw	1	; case 105
 29293  011EE2  B4D8               	btfsc	status,2,c
 29294  011EE4  D71A               	goto	l873
 29295  011EE6  0A03               	xorlw	3	; case 106
 29296  011EE8  B4D8               	btfsc	status,2,c
 29297  011EEA  D719               	goto	l874
 29298  011EEC  0A01               	xorlw	1	; case 107
 29299  011EEE  B4D8               	btfsc	status,2,c
 29300  011EF0  D718               	goto	l875
 29301  011EF2  0A07               	xorlw	7	; case 108
 29302  011EF4  B4D8               	btfsc	status,2,c
 29303  011EF6  D717               	goto	l876
 29304  011EF8  0A01               	xorlw	1	; case 109
 29305  011EFA  B4D8               	btfsc	status,2,c
 29306  011EFC  D716               	goto	l877
 29307  011EFE  0A03               	xorlw	3	; case 110
 29308  011F00  B4D8               	btfsc	status,2,c
 29309  011F02  D715               	goto	l878
 29310  011F04  0A01               	xorlw	1	; case 111
 29311  011F06  B4D8               	btfsc	status,2,c
 29312  011F08  D714               	goto	l879
 29313  011F0A  0A1F               	xorlw	31	; case 112
 29314  011F0C  B4D8               	btfsc	status,2,c
 29315  011F0E  D713               	goto	l880
 29316  011F10  0A01               	xorlw	1	; case 113
 29317  011F12  B4D8               	btfsc	status,2,c
 29318  011F14  D712               	goto	l881
 29319  011F16  0A03               	xorlw	3	; case 114
 29320  011F18  B4D8               	btfsc	status,2,c
 29321  011F1A  D711               	goto	l882
 29322  011F1C  0A01               	xorlw	1	; case 115
 29323  011F1E  B4D8               	btfsc	status,2,c
 29324  011F20  D710               	goto	l883
 29325  011F22  0A07               	xorlw	7	; case 116
 29326  011F24  B4D8               	btfsc	status,2,c
 29327  011F26  D70F               	goto	l884
 29328  011F28  0A01               	xorlw	1	; case 117
 29329  011F2A  B4D8               	btfsc	status,2,c
 29330  011F2C  D70E               	goto	l885
 29331  011F2E  0A03               	xorlw	3	; case 118
 29332  011F30  B4D8               	btfsc	status,2,c
 29333  011F32  D70D               	goto	l886
 29334  011F34  0A01               	xorlw	1	; case 119
 29335  011F36  B4D8               	btfsc	status,2,c
 29336  011F38  D70C               	goto	l887
 29337  011F3A  0A0F               	xorlw	15	; case 120
 29338  011F3C  B4D8               	btfsc	status,2,c
 29339  011F3E  D70B               	goto	l888
 29340  011F40  0A01               	xorlw	1	; case 121
 29341  011F42  B4D8               	btfsc	status,2,c
 29342  011F44  D70A               	goto	l889
 29343  011F46  0A03               	xorlw	3	; case 122
 29344  011F48  B4D8               	btfsc	status,2,c
 29345  011F4A  D709               	goto	l890
 29346                           
 29347                           ;Types.c: 354: return 0;
 29348                           
 29349                           ; BSR set to: 0
 29350  011F4C  0E00               	movlw	0
 29351  011F4E  0012               	return	
 29352  011F50                     __end_of_ToSegment:
 29353                           	opt stack 0
 29354                           tosu	equ	0xFFF
 29355                           tosh	equ	0xFFE
 29356                           tosl	equ	0xFFD
 29357                           pclath	equ	0xFFA
 29358                           tblptru	equ	0xFF8
 29359                           tblptrh	equ	0xFF7
 29360                           tblptrl	equ	0xFF6
 29361                           tablat	equ	0xFF5
 29362                           prodh	equ	0xFF4
 29363                           prodl	equ	0xFF3
 29364                           intcon	equ	0xFF2
 29365                           postinc0	equ	0xFEE
 29366                           wreg	equ	0xFE8
 29367                           indf1	equ	0xFE7
 29368                           postdec1	equ	0xFE5
 29369                           fsr1h	equ	0xFE2
 29370                           fsr1l	equ	0xFE1
 29371                           indf2	equ	0xFDF
 29372                           postinc2	equ	0xFDE
 29373                           postdec2	equ	0xFDD
 29374                           plusw2	equ	0xFDB
 29375                           fsr2h	equ	0xFDA
 29376                           fsr2l	equ	0xFD9
 29377                           status	equ	0xFD8
 29378                           
 29379 ;; *************** function _HMI_SetButton *****************
 29380 ;; Defined at:
 29381 ;;		line 186 in file "HMI.c"
 29382 ;; Parameters:    Size  Location     Type
 29383 ;;  pValue          1    wreg     unsigned char 
 29384 ;; Auto vars:     Size  Location     Type
 29385 ;;  pValue          1    6[BANK0 ] unsigned char 
 29386 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 29387 ;;  v               1    7[BANK0 ] unsigned char 
 29388 ;; Return value:  Size  Location     Type
 29389 ;;                  1    wreg      void 
 29390 ;; Registers used:
 29391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29392 ;; Tracked objects:
 29393 ;;		On entry : 0/0
 29394 ;;		On exit  : 0/0
 29395 ;;		Unchanged: 0/0
 29396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29398 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29400 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29401 ;;Total ram usage:        8 bytes
 29402 ;; Hardware stack levels used:    1
 29403 ;; Hardware stack levels required when called:    7
 29404 ;; This function calls:
 29405 ;;		Nothing
 29406 ;; This function is called by:
 29407 ;;		_Event_TestButton
 29408 ;; This function uses a non-reentrant model
 29409 ;;
 29410                           
 29411                           	psect	text149
 29412  0154F4                     __ptext149:
 29413                           	opt stack 0
 29414  0154F4                     _HMI_SetButton:
 29415                           	opt stack 18
 29416                           
 29417                           ;incstack = 0
 29418                           ;HMI_SetButton@pValue stored from wreg
 29419  0154F4  0100               	movlb	0	; () banked
 29420  0154F6  6FBE               	movwf	HMI_SetButton@pValue& (0+255),b
 29421                           
 29422                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 29423  0154F8  0E18               	movlw	low HMI_SetButton@F7213
 29424  0154FA  6EF6               	movwf	tblptrl,c
 29425  0154FC                     	if	1	;There is more than 1 active tblptr byte
 29426  0154FC  0EFD               	movlw	high HMI_SetButton@F7213
 29427  0154FE  6EF7               	movwf	tblptrh,c
 29428  015500                     	endif
 29429  015500                     	if	1	;There are 3 active tblptr bytes
 29430  015500  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 29431  015502  6EF8               	movwf	tblptru,c
 29432  015504                     	endif
 29433  015504  0009               	tblrd		*+
 29434  015506  CFF5 F0BA          	movff	tablat,HMI_SetButton@reindex
 29435  01550A  0009               	tblrd		*+
 29436  01550C  CFF5 F0BB          	movff	tablat,HMI_SetButton@reindex+1
 29437  015510  0009               	tblrd		*+
 29438  015512  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex+2
 29439  015516  000A               	tblrd		*-
 29440  015518  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+3
 29441                           
 29442                           ;HMI.c: 189: UINT8 v = 0b00010001;
 29443  01551C  0E11               	movlw	17
 29444  01551E  0100               	movlb	0	; () banked
 29445  015520  6FBF               	movwf	HMI_SetButton@v& (0+255),b
 29446                           
 29447                           ; BSR set to: 0
 29448                           ;HMI.c: 190: pValue &= 3;
 29449  015522  0E03               	movlw	3
 29450  015524  0100               	movlb	0	; () banked
 29451  015526  17BE               	andwf	HMI_SetButton@pValue& (0+255),f,b
 29452                           
 29453                           ; BSR set to: 0
 29454                           ;HMI.c: 191: v = v << reindex[pValue];
 29455  015528  0100               	movlb	0	; () banked
 29456  01552A  51BE               	movf	HMI_SetButton@pValue& (0+255),w,b
 29457  01552C  0D01               	mullw	1
 29458  01552E  0EBA               	movlw	low HMI_SetButton@reindex
 29459  015530  24F3               	addwf	prodl,w,c
 29460  015532  6ED9               	movwf	fsr2l,c
 29461  015534  0E00               	movlw	high HMI_SetButton@reindex
 29462  015536  20F4               	addwfc	prodh,w,c
 29463  015538  6EDA               	movwf	fsr2h,c
 29464  01553A  50DF               	movf	indf2,w,c
 29465  01553C  0100               	movlb	0	; () banked
 29466  01553E  6FB8               	movwf	??_HMI_SetButton& (0+255),b
 29467  015540  C0BF  F0B9         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 29468  015544  0100               	movlb	0	; () banked
 29469  015546  2BB8               	incf	??_HMI_SetButton& (0+255),f,b
 29470  015548  D003               	goto	u9814
 29471  01554A                     u9815:
 29472  01554A  0100               	movlb	0	; () banked
 29473  01554C  90D8               	bcf	status,0,c
 29474  01554E  37B9               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 29475  015550                     u9814:
 29476  015550  0100               	movlb	0	; () banked
 29477  015552  2FB8               	decfsz	??_HMI_SetButton& (0+255),f,b
 29478  015554  D7FA               	goto	u9815
 29479  015556  0100               	movlb	0	; () banked
 29480  015558  51B9               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 29481  01555A  0100               	movlb	0	; () banked
 29482  01555C  6FBF               	movwf	HMI_SetButton@v& (0+255),b
 29483                           
 29484                           ; BSR set to: 0
 29485                           ;HMI.c: 192: v = v >> 4;
 29486  01555E  0100               	movlb	0	; () banked
 29487  015560  39BF               	swapf	HMI_SetButton@v& (0+255),w,b
 29488  015562  0B0F               	andlw	15
 29489  015564  0100               	movlb	0	; () banked
 29490  015566  6FBF               	movwf	HMI_SetButton@v& (0+255),b
 29491                           
 29492                           ; BSR set to: 0
 29493                           ;HMI.c: 193: v = v & 0x0F;
 29494  015568  0100               	movlb	0	; () banked
 29495  01556A  51BF               	movf	HMI_SetButton@v& (0+255),w,b
 29496  01556C  0B0F               	andlw	15
 29497  01556E  0100               	movlb	0	; () banked
 29498  015570  6FBF               	movwf	HMI_SetButton@v& (0+255),b
 29499                           
 29500                           ; BSR set to: 0
 29501                           ;HMI.c: 194: HMIBoard.pButton = v;
 29502  015572  0103               	movlb	3	; () banked
 29503  015574  514D               	movf	(_HMIBoard+6)& (0+255),w,b
 29504  015576  0100               	movlb	0	; () banked
 29505  015578  19BF               	xorwf	HMI_SetButton@v& (0+255),w,b
 29506  01557A  0BF0               	andlw	-16
 29507  01557C  19BF               	xorwf	HMI_SetButton@v& (0+255),w,b
 29508  01557E  0103               	movlb	3	; () banked
 29509  015580  6F4D               	movwf	(_HMIBoard+6)& (0+255),b
 29510                           
 29511                           ; BSR set to: 3
 29512  015582  0012               	return		;funcret
 29513  015584                     __end_of_HMI_SetButton:
 29514                           	opt stack 0
 29515                           tosu	equ	0xFFF
 29516                           tosh	equ	0xFFE
 29517                           tosl	equ	0xFFD
 29518                           pclath	equ	0xFFA
 29519                           tblptru	equ	0xFF8
 29520                           tblptrh	equ	0xFF7
 29521                           tblptrl	equ	0xFF6
 29522                           tablat	equ	0xFF5
 29523                           prodh	equ	0xFF4
 29524                           prodl	equ	0xFF3
 29525                           intcon	equ	0xFF2
 29526                           postinc0	equ	0xFEE
 29527                           wreg	equ	0xFE8
 29528                           indf1	equ	0xFE7
 29529                           postdec1	equ	0xFE5
 29530                           fsr1h	equ	0xFE2
 29531                           fsr1l	equ	0xFE1
 29532                           indf2	equ	0xFDF
 29533                           postinc2	equ	0xFDE
 29534                           postdec2	equ	0xFDD
 29535                           plusw2	equ	0xFDB
 29536                           fsr2h	equ	0xFDA
 29537                           fsr2l	equ	0xFD9
 29538                           status	equ	0xFD8
 29539                           
 29540 ;; *************** function _LED_Toggle *****************
 29541 ;; Defined at:
 29542 ;;		line 50 in file "Library/LED.c"
 29543 ;; Parameters:    Size  Location     Type
 29544 ;;  pLED            1    wreg     enum E6739
 29545 ;; Auto vars:     Size  Location     Type
 29546 ;;  pLED            1   24[BANK0 ] enum E6739
 29547 ;; Return value:  Size  Location     Type
 29548 ;;                  1    wreg      void 
 29549 ;; Registers used:
 29550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29551 ;; Tracked objects:
 29552 ;;		On entry : 0/0
 29553 ;;		On exit  : 0/0
 29554 ;;		Unchanged: 0/0
 29555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29560 ;;Total ram usage:        1 bytes
 29561 ;; Hardware stack levels used:    1
 29562 ;; Hardware stack levels required when called:   12
 29563 ;; This function calls:
 29564 ;;		_Port_TogglePin
 29565 ;; This function is called by:
 29566 ;;		_LCD_Reset
 29567 ;;		_Event_DIPSwitch
 29568 ;;		_Event_TestButton
 29569 ;;		_Event_ADCSequenceComplete
 29570 ;;		_Event_HMI_DIPSwitch
 29571 ;;		_Event_HMI_LeftButton
 29572 ;;		_Event_HMI_RightButton
 29573 ;;		_Event_HMI_UpButton
 29574 ;;		_Event_HMI_DownButton
 29575 ;; This function uses a non-reentrant model
 29576 ;;
 29577                           
 29578                           	psect	text150
 29579  0164AE                     __ptext150:
 29580                           	opt stack 0
 29581  0164AE                     _LED_Toggle:
 29582                           	opt stack 13
 29583                           
 29584                           ; BSR set to: 3
 29585                           ;incstack = 0
 29586                           ;LED_Toggle@pLED stored from wreg
 29587  0164AE  0100               	movlb	0	; () banked
 29588  0164B0  6FD0               	movwf	LED_Toggle@pLED& (0+255),b
 29589                           
 29590                           ;LED.c: 52: switch (pLED)
 29591  0164B2  D018               	goto	l234
 29592  0164B4                     
 29593                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 29594  0164B4  0EA3               	movlw	low _PortC
 29595  0164B6  0100               	movlb	0	; () banked
 29596  0164B8  6FCC               	movwf	Port_TogglePin@pInput& (0+255),b
 29597  0164BA  0E00               	movlw	high _PortC
 29598  0164BC  0100               	movlb	0	; () banked
 29599  0164BE  6FCD               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29600  0164C0  0E00               	movlw	0
 29601  0164C2  0100               	movlb	0	; () banked
 29602  0164C4  6FCE               	movwf	Port_TogglePin@pPin& (0+255),b
 29603  0164C6  ECDD  F0B4         	call	_Port_TogglePin	;wreg free
 29604                           
 29605                           ;LED.c: 56: break;
 29606  0164CA  0012               	return	
 29607  0164CC                     
 29608                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 29609  0164CC  0EA3               	movlw	low _PortC
 29610  0164CE  0100               	movlb	0	; () banked
 29611  0164D0  6FCC               	movwf	Port_TogglePin@pInput& (0+255),b
 29612  0164D2  0E00               	movlw	high _PortC
 29613  0164D4  0100               	movlb	0	; () banked
 29614  0164D6  6FCD               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29615  0164D8  0E01               	movlw	1
 29616  0164DA  0100               	movlb	0	; () banked
 29617  0164DC  6FCE               	movwf	Port_TogglePin@pPin& (0+255),b
 29618  0164DE  ECDD  F0B4         	call	_Port_TogglePin	;wreg free
 29619                           
 29620                           ;LED.c: 60: }
 29621                           
 29622                           ;LED.c: 59: break;
 29623  0164E2  0012               	return	
 29624  0164E4                     l234:
 29625  0164E4  0100               	movlb	0	; () banked
 29626  0164E6  51D0               	movf	LED_Toggle@pLED& (0+255),w,b
 29627                           
 29628                           ; Switch size 1, requested type "space"
 29629                           ; Number of cases is 2, Range of values is 0 to 1
 29630                           ; switch strategies available:
 29631                           ; Name         Instructions Cycles
 29632                           ; simple_byte            7     4 (average)
 29633                           ;	Chosen strategy is simple_byte
 29634  0164E8  0A00               	xorlw	0	; case 0
 29635  0164EA  B4D8               	btfsc	status,2,c
 29636  0164EC  D7E3               	goto	l235
 29637  0164EE  0A01               	xorlw	1	; case 1
 29638  0164F0  A4D8               	btfss	status,2,c
 29639  0164F2  0012               	return	
 29640  0164F4  D7EB               	goto	l237
 29641  0164F6                     __end_of_LED_Toggle:
 29642                           	opt stack 0
 29643                           tosu	equ	0xFFF
 29644                           tosh	equ	0xFFE
 29645                           tosl	equ	0xFFD
 29646                           pclath	equ	0xFFA
 29647                           tblptru	equ	0xFF8
 29648                           tblptrh	equ	0xFF7
 29649                           tblptrl	equ	0xFF6
 29650                           tablat	equ	0xFF5
 29651                           prodh	equ	0xFF4
 29652                           prodl	equ	0xFF3
 29653                           intcon	equ	0xFF2
 29654                           postinc0	equ	0xFEE
 29655                           wreg	equ	0xFE8
 29656                           indf1	equ	0xFE7
 29657                           postdec1	equ	0xFE5
 29658                           fsr1h	equ	0xFE2
 29659                           fsr1l	equ	0xFE1
 29660                           indf2	equ	0xFDF
 29661                           postinc2	equ	0xFDE
 29662                           postdec2	equ	0xFDD
 29663                           plusw2	equ	0xFDB
 29664                           fsr2h	equ	0xFDA
 29665                           fsr2l	equ	0xFD9
 29666                           status	equ	0xFD8
 29667                           
 29668 ;; *************** function _Port_TogglePin *****************
 29669 ;; Defined at:
 29670 ;;		line 278 in file "Library/Port.c"
 29671 ;; Parameters:    Size  Location     Type
 29672 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 29673 ;;		 -> PortC(10), 
 29674 ;;  pPin            1   22[BANK0 ] enum E6750
 29675 ;; Auto vars:     Size  Location     Type
 29676 ;;  Value           1   23[BANK0 ] unsigned char 
 29677 ;; Return value:  Size  Location     Type
 29678 ;;                  1    wreg      void 
 29679 ;; Registers used:
 29680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29681 ;; Tracked objects:
 29682 ;;		On entry : 0/0
 29683 ;;		On exit  : 0/0
 29684 ;;		Unchanged: 0/0
 29685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29686 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29689 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29690 ;;Total ram usage:        4 bytes
 29691 ;; Hardware stack levels used:    1
 29692 ;; Hardware stack levels required when called:   11
 29693 ;; This function calls:
 29694 ;;		_Port_GetPin
 29695 ;;		_Port_SetPin
 29696 ;; This function is called by:
 29697 ;;		_LED_Toggle
 29698 ;; This function uses a non-reentrant model
 29699 ;;
 29700                           
 29701                           	psect	text151
 29702  0169BA                     __ptext151:
 29703                           	opt stack 0
 29704  0169BA                     _Port_TogglePin:
 29705                           	opt stack 13
 29706                           
 29707                           ;Port.c: 280: UINT8 Value;
 29708                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 29709                           
 29710                           ;incstack = 0
 29711  0169BA  C0CC  F0B8         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 29712  0169BE  C0CD  F0B9         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 29713  0169C2  C0CE  F0BA         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 29714  0169C6  ECC1  F0B2         	call	_Port_GetPin	;wreg free
 29715  0169CA  0100               	movlb	0	; () banked
 29716  0169CC  6FCF               	movwf	Port_TogglePin@Value& (0+255),b
 29717                           
 29718                           ; BSR set to: 0
 29719                           ;Port.c: 282: Value ^= 0x01;
 29720  0169CE  0E01               	movlw	1
 29721  0169D0  0100               	movlb	0	; () banked
 29722  0169D2  1BCF               	xorwf	Port_TogglePin@Value& (0+255),f,b
 29723                           
 29724                           ; BSR set to: 0
 29725                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 29726  0169D4  C0CC  F0C7         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 29727  0169D8  C0CD  F0C8         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 29728  0169DC  C0CE  F0C9         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 29729  0169E0  C0CF  F0CA         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 29730  0169E4  ECB1  F0A3         	call	_Port_SetPin	;wreg free
 29731  0169E8  0012               	return		;funcret
 29732  0169EA                     __end_of_Port_TogglePin:
 29733                           	opt stack 0
 29734                           tosu	equ	0xFFF
 29735                           tosh	equ	0xFFE
 29736                           tosl	equ	0xFFD
 29737                           pclath	equ	0xFFA
 29738                           tblptru	equ	0xFF8
 29739                           tblptrh	equ	0xFF7
 29740                           tblptrl	equ	0xFF6
 29741                           tablat	equ	0xFF5
 29742                           prodh	equ	0xFF4
 29743                           prodl	equ	0xFF3
 29744                           intcon	equ	0xFF2
 29745                           postinc0	equ	0xFEE
 29746                           wreg	equ	0xFE8
 29747                           indf1	equ	0xFE7
 29748                           postdec1	equ	0xFE5
 29749                           fsr1h	equ	0xFE2
 29750                           fsr1l	equ	0xFE1
 29751                           indf2	equ	0xFDF
 29752                           postinc2	equ	0xFDE
 29753                           postdec2	equ	0xFDD
 29754                           plusw2	equ	0xFDB
 29755                           fsr2h	equ	0xFDA
 29756                           fsr2l	equ	0xFD9
 29757                           status	equ	0xFD8
 29758                           
 29759 ;; *************** function _Port_SetPin *****************
 29760 ;; Defined at:
 29761 ;;		line 247 in file "Library/Port.c"
 29762 ;; Parameters:    Size  Location     Type
 29763 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 29764 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29765 ;;  pPin            1   17[BANK0 ] enum E6750
 29766 ;;  pValue          1   18[BANK0 ] unsigned char 
 29767 ;; Auto vars:     Size  Location     Type
 29768 ;;  Type            1   19[BANK0 ] enum E6795
 29769 ;; Return value:  Size  Location     Type
 29770 ;;                  1    wreg      void 
 29771 ;; Registers used:
 29772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29773 ;; Tracked objects:
 29774 ;;		On entry : 0/0
 29775 ;;		On exit  : 0/0
 29776 ;;		Unchanged: 0/0
 29777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29778 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29781 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29782 ;;Total ram usage:        5 bytes
 29783 ;; Hardware stack levels used:    1
 29784 ;; Hardware stack levels required when called:   10
 29785 ;; This function calls:
 29786 ;;		_Byte_SetBit
 29787 ;;		_Word_GetPair
 29788 ;; This function is called by:
 29789 ;;		_Reset_Low
 29790 ;;		_Reset_High
 29791 ;;		_LED_Set
 29792 ;;		_Port_TogglePin
 29793 ;;		_Motor_Init
 29794 ;;		_Motor_Step
 29795 ;;		_MXK_Init
 29796 ;; This function uses a non-reentrant model
 29797 ;;
 29798                           
 29799                           	psect	text152
 29800  014762                     __ptext152:
 29801                           	opt stack 0
 29802  014762                     _Port_SetPin:
 29803                           	opt stack 13
 29804                           
 29805                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29806                           
 29807                           ;incstack = 0
 29808  014762  0E08               	movlw	8
 29809  014764  0100               	movlb	0	; () banked
 29810  014766  25C7               	addwf	Port_SetPin@pInput& (0+255),w,b
 29811  014768  0100               	movlb	0	; () banked
 29812  01476A  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 29813  01476C  0E00               	movlw	0
 29814  01476E  0100               	movlb	0	; () banked
 29815  014770  21C8               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 29816  014772  0100               	movlb	0	; () banked
 29817  014774  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 29818  014776  C0C9  F0C6         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 29819  01477A  ECE5  F0B3         	call	_Word_GetPair	;wreg free
 29820  01477E  0100               	movlb	0	; () banked
 29821  014780  6FCB               	movwf	Port_SetPin@Type& (0+255),b
 29822                           
 29823                           ;Port.c: 250: switch (Type)
 29824  014782  D042               	goto	l427
 29825  014784                     
 29826                           ; BSR set to: 0
 29827                           ;Port.c: 256: pValue &= 1;
 29828                           
 29829                           ; BSR set to: 0
 29830  014784  0E01               	movlw	1
 29831  014786  0100               	movlb	0	; () banked
 29832  014788  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 29833                           
 29834                           ; BSR set to: 0
 29835                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29836  01478A  0100               	movlb	0	; () banked
 29837  01478C  EE20 F002          	lfsr	2,2
 29838  014790  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 29839  014792  26D9               	addwf	fsr2l,f,c
 29840  014794  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29841  014796  22DA               	addwfc	fsr2h,f,c
 29842  014798  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 29843  01479C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 29844  0147A0  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29845  0147A4  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29846  0147A8  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 29847                           
 29848                           ;Port.c: 258: break;
 29849  0147AC  0012               	return	
 29850  0147AE                     
 29851                           ;Port.c: 261: pValue &= 1;
 29852  0147AE  0E01               	movlw	1
 29853  0147B0  0100               	movlb	0	; () banked
 29854  0147B2  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 29855                           
 29856                           ;Port.c: 262: pValue ^= 1;
 29857  0147B4  0E01               	movlw	1
 29858  0147B6  0100               	movlb	0	; () banked
 29859  0147B8  1BCA               	xorwf	Port_SetPin@pValue& (0+255),f,b
 29860                           
 29861                           ; BSR set to: 0
 29862                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29863  0147BA  0100               	movlb	0	; () banked
 29864  0147BC  EE20 F002          	lfsr	2,2
 29865  0147C0  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 29866  0147C2  26D9               	addwf	fsr2l,f,c
 29867  0147C4  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29868  0147C6  22DA               	addwfc	fsr2h,f,c
 29869  0147C8  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 29870  0147CC  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 29871  0147D0  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29872  0147D4  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29873  0147D8  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 29874                           
 29875                           ;Port.c: 264: break;
 29876  0147DC  0012               	return	
 29877  0147DE                     
 29878                           ;Port.c: 266: pValue &= 1;
 29879  0147DE  0E01               	movlw	1
 29880  0147E0  0100               	movlb	0	; () banked
 29881  0147E2  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 29882                           
 29883                           ; BSR set to: 0
 29884                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29885  0147E4  0100               	movlb	0	; () banked
 29886  0147E6  EE20 F004          	lfsr	2,4
 29887  0147EA  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 29888  0147EC  26D9               	addwf	fsr2l,f,c
 29889  0147EE  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29890  0147F0  22DA               	addwfc	fsr2h,f,c
 29891  0147F2  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 29892  0147F6  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 29893  0147FA  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29894  0147FE  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29895  014802  ECDF  F0AF         	call	_Byte_SetBit	;wreg free
 29896                           
 29897                           ;Port.c: 269: }
 29898                           
 29899                           ;Port.c: 268: break;
 29900  014806  0012               	return	
 29901  014808                     l427:
 29902  014808  0100               	movlb	0	; () banked
 29903  01480A  51CB               	movf	Port_SetPin@Type& (0+255),w,b
 29904                           
 29905                           ; Switch size 1, requested type "space"
 29906                           ; Number of cases is 4, Range of values is 0 to 3
 29907                           ; switch strategies available:
 29908                           ; Name         Instructions Cycles
 29909                           ; simple_byte           13     7 (average)
 29910                           ;	Chosen strategy is simple_byte
 29911  01480C  0A00               	xorlw	0	; case 0
 29912  01480E  B4D8               	btfsc	status,2,c
 29913  014810  0012               	return	
 29914  014812  0A01               	xorlw	1	; case 1
 29915  014814  B4D8               	btfsc	status,2,c
 29916  014816  D7B6               	goto	l430
 29917  014818  0A03               	xorlw	3	; case 2
 29918  01481A  B4D8               	btfsc	status,2,c
 29919  01481C  D7C8               	goto	l432
 29920  01481E  0A01               	xorlw	1	; case 3
 29921  014820  A4D8               	btfss	status,2,c
 29922  014822  0012               	return	
 29923  014824  D7DC               	goto	l433
 29924  014826                     __end_of_Port_SetPin:
 29925                           	opt stack 0
 29926                           tosu	equ	0xFFF
 29927                           tosh	equ	0xFFE
 29928                           tosl	equ	0xFFD
 29929                           pclath	equ	0xFFA
 29930                           tblptru	equ	0xFF8
 29931                           tblptrh	equ	0xFF7
 29932                           tblptrl	equ	0xFF6
 29933                           tablat	equ	0xFF5
 29934                           prodh	equ	0xFF4
 29935                           prodl	equ	0xFF3
 29936                           intcon	equ	0xFF2
 29937                           postinc0	equ	0xFEE
 29938                           wreg	equ	0xFE8
 29939                           indf1	equ	0xFE7
 29940                           postdec1	equ	0xFE5
 29941                           fsr1h	equ	0xFE2
 29942                           fsr1l	equ	0xFE1
 29943                           indf2	equ	0xFDF
 29944                           postinc2	equ	0xFDE
 29945                           postdec2	equ	0xFDD
 29946                           plusw2	equ	0xFDB
 29947                           fsr2h	equ	0xFDA
 29948                           fsr2l	equ	0xFD9
 29949                           status	equ	0xFD8
 29950                           
 29951 ;; *************** function _Word_GetPair *****************
 29952 ;; Defined at:
 29953 ;;		line 156 in file "Library/Types.c"
 29954 ;; Parameters:    Size  Location     Type
 29955 ;;  pInput          2   12[BANK0 ] PTR struct Word
 29956 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29957 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29958 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29959 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29960 ;;  pPair           1   14[BANK0 ] unsigned char 
 29961 ;; Auto vars:     Size  Location     Type
 29962 ;;		None
 29963 ;; Return value:  Size  Location     Type
 29964 ;;                  1    wreg      unsigned char 
 29965 ;; Registers used:
 29966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29967 ;; Tracked objects:
 29968 ;;		On entry : 0/0
 29969 ;;		On exit  : 0/0
 29970 ;;		Unchanged: 0/0
 29971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29972 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29975 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29976 ;;Total ram usage:        3 bytes
 29977 ;; Hardware stack levels used:    1
 29978 ;; Hardware stack levels required when called:    9
 29979 ;; This function calls:
 29980 ;;		_Byte_GetPair
 29981 ;; This function is called by:
 29982 ;;		_Port_Init
 29983 ;;		_Port_SetPin
 29984 ;;		_Port_Set
 29985 ;;		_PortProperty_Valid
 29986 ;;		_Port_SetPair
 29987 ;;		_Port_SetQuad
 29988 ;; This function uses a non-reentrant model
 29989 ;;
 29990                           
 29991                           	psect	text153
 29992  0167CA                     __ptext153:
 29993                           	opt stack 0
 29994  0167CA                     _Word_GetPair:
 29995                           	opt stack 13
 29996                           
 29997                           ;Types.c: 158: if (pPair >= 4)
 29998                           
 29999                           ;incstack = 0
 30000  0167CA  0E03               	movlw	3
 30001  0167CC  0100               	movlb	0	; () banked
 30002  0167CE  65C6               	cpfsgt	Word_GetPair@pPair& (0+255),b
 30003  0167D0  D012               	goto	l781
 30004                           
 30005                           ; BSR set to: 0
 30006                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30007  0167D2  0E01               	movlw	1
 30008  0167D4  0100               	movlb	0	; () banked
 30009  0167D6  25C4               	addwf	Word_GetPair@pInput& (0+255),w,b
 30010  0167D8  0100               	movlb	0	; () banked
 30011  0167DA  6FC1               	movwf	Byte_GetPair@pInput& (0+255),b
 30012  0167DC  0E00               	movlw	0
 30013  0167DE  0100               	movlb	0	; () banked
 30014  0167E0  21C5               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 30015  0167E2  0100               	movlb	0	; () banked
 30016  0167E4  6FC2               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 30017  0167E6  0100               	movlb	0	; () banked
 30018  0167E8  51C6               	movf	Word_GetPair@pPair& (0+255),w,b
 30019  0167EA  0FFC               	addlw	252
 30020  0167EC  0100               	movlb	0	; () banked
 30021  0167EE  6FC3               	movwf	Byte_GetPair@pPair& (0+255),b
 30022  0167F0  EC38  F0B6         	call	_Byte_GetPair	;wreg free
 30023  0167F4  0012               	return	
 30024  0167F6                     l781:
 30025                           
 30026                           ;Types.c: 160: else
 30027                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30028  0167F6  C0C4  F0C1         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 30029  0167FA  C0C5  F0C2         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 30030  0167FE  C0C6  F0C3         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 30031  016802  EC38  F0B6         	call	_Byte_GetPair	;wreg free
 30032  016806  0012               	return	
 30033  016808                     __end_of_Word_GetPair:
 30034                           	opt stack 0
 30035                           tosu	equ	0xFFF
 30036                           tosh	equ	0xFFE
 30037                           tosl	equ	0xFFD
 30038                           pclath	equ	0xFFA
 30039                           tblptru	equ	0xFF8
 30040                           tblptrh	equ	0xFF7
 30041                           tblptrl	equ	0xFF6
 30042                           tablat	equ	0xFF5
 30043                           prodh	equ	0xFF4
 30044                           prodl	equ	0xFF3
 30045                           intcon	equ	0xFF2
 30046                           postinc0	equ	0xFEE
 30047                           wreg	equ	0xFE8
 30048                           indf1	equ	0xFE7
 30049                           postdec1	equ	0xFE5
 30050                           fsr1h	equ	0xFE2
 30051                           fsr1l	equ	0xFE1
 30052                           indf2	equ	0xFDF
 30053                           postinc2	equ	0xFDE
 30054                           postdec2	equ	0xFDD
 30055                           plusw2	equ	0xFDB
 30056                           fsr2h	equ	0xFDA
 30057                           fsr2l	equ	0xFD9
 30058                           status	equ	0xFD8
 30059                           
 30060 ;; *************** function _Byte_GetPair *****************
 30061 ;; Defined at:
 30062 ;;		line 87 in file "Library/Types.c"
 30063 ;; Parameters:    Size  Location     Type
 30064 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 30065 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30066 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30067 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30068 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30069 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30070 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30071 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30072 ;;		 -> NULL(0), 
 30073 ;;  pPair           1   11[BANK0 ] unsigned char 
 30074 ;; Auto vars:     Size  Location     Type
 30075 ;;		None
 30076 ;; Return value:  Size  Location     Type
 30077 ;;                  1    wreg      unsigned char 
 30078 ;; Registers used:
 30079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30080 ;; Tracked objects:
 30081 ;;		On entry : 0/0
 30082 ;;		On exit  : 0/0
 30083 ;;		Unchanged: 0/0
 30084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30085 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30088 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30089 ;;Total ram usage:        3 bytes
 30090 ;; Hardware stack levels used:    1
 30091 ;; Hardware stack levels required when called:    8
 30092 ;; This function calls:
 30093 ;;		_Byte_GetZone
 30094 ;; This function is called by:
 30095 ;;		_Word_GetPair
 30096 ;; This function uses a non-reentrant model
 30097 ;;
 30098                           
 30099                           	psect	text154
 30100  016C70                     __ptext154:
 30101                           	opt stack 0
 30102  016C70                     _Byte_GetPair:
 30103                           	opt stack 13
 30104                           
 30105                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30106                           
 30107                           ;incstack = 0
 30108  016C70  C0C1  F0B8         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 30109  016C74  C0C2  F0B9         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 30110  016C78  0E04               	movlw	4
 30111  016C7A  0100               	movlb	0	; () banked
 30112  016C7C  6FBA               	movwf	Byte_GetZone@pMax& (0+255),b
 30113  016C7E  C0C3  F0BB         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 30114  016C82  0E02               	movlw	2
 30115  016C84  0100               	movlb	0	; () banked
 30116  016C86  6FBC               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 30117  016C88  ECE0  F0A9         	call	_Byte_GetZone	;wreg free
 30118  016C8C  0012               	return	
 30119  016C8E                     __end_of_Byte_GetPair:
 30120                           	opt stack 0
 30121                           tosu	equ	0xFFF
 30122                           tosh	equ	0xFFE
 30123                           tosl	equ	0xFFD
 30124                           pclath	equ	0xFFA
 30125                           tblptru	equ	0xFF8
 30126                           tblptrh	equ	0xFF7
 30127                           tblptrl	equ	0xFF6
 30128                           tablat	equ	0xFF5
 30129                           prodh	equ	0xFF4
 30130                           prodl	equ	0xFF3
 30131                           intcon	equ	0xFF2
 30132                           postinc0	equ	0xFEE
 30133                           wreg	equ	0xFE8
 30134                           indf1	equ	0xFE7
 30135                           postdec1	equ	0xFE5
 30136                           fsr1h	equ	0xFE2
 30137                           fsr1l	equ	0xFE1
 30138                           indf2	equ	0xFDF
 30139                           postinc2	equ	0xFDE
 30140                           postdec2	equ	0xFDD
 30141                           plusw2	equ	0xFDB
 30142                           fsr2h	equ	0xFDA
 30143                           fsr2l	equ	0xFD9
 30144                           status	equ	0xFD8
 30145                           
 30146 ;; *************** function _Byte_GetZone *****************
 30147 ;; Defined at:
 30148 ;;		line 64 in file "Library/Types.c"
 30149 ;; Parameters:    Size  Location     Type
 30150 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30151 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30152 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30153 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30154 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30155 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30156 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30157 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30158 ;;		 -> NULL(0), 
 30159 ;;  pMax            1    2[BANK0 ] unsigned char 
 30160 ;;  pChunk          1    3[BANK0 ] unsigned char 
 30161 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 30162 ;; Auto vars:     Size  Location     Type
 30163 ;;  Output          1    8[BANK0 ] unsigned char 
 30164 ;;  Offset          1    7[BANK0 ] unsigned char 
 30165 ;;  MASK            1    6[BANK0 ] unsigned char 
 30166 ;; Return value:  Size  Location     Type
 30167 ;;                  1    wreg      unsigned char 
 30168 ;; Registers used:
 30169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30170 ;; Tracked objects:
 30171 ;;		On entry : 0/0
 30172 ;;		On exit  : 0/0
 30173 ;;		Unchanged: 0/0
 30174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30175 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30176 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30178 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30179 ;;Total ram usage:        9 bytes
 30180 ;; Hardware stack levels used:    1
 30181 ;; Hardware stack levels required when called:    7
 30182 ;; This function calls:
 30183 ;;		Nothing
 30184 ;; This function is called by:
 30185 ;;		_Byte_GetPair
 30186 ;;		_Byte_GetTriple
 30187 ;;		_Byte_GetQuad
 30188 ;; This function uses a non-reentrant model
 30189 ;;
 30190                           
 30191                           	psect	text155
 30192  0153C0                     __ptext155:
 30193                           	opt stack 0
 30194  0153C0                     _Byte_GetZone:
 30195                           	opt stack 13
 30196                           
 30197                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30198                           
 30199                           ;incstack = 0
 30200  0153C0  C0B8  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 30201  0153C4  C0B9  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 30202  0153C8  0E00               	movlw	low (__mediumconst shr (0+16))
 30203  0153CA  6EF8               	movwf	tblptru,c
 30204  0153CC  0E0F               	movlw	(high __ramtop+-1)
 30205  0153CE  64F7               	cpfsgt	tblptrh,c
 30206  0153D0  D003               	bra	u9227
 30207  0153D2  0008               	tblrd		*
 30208  0153D4  50F5               	movf	tablat,w,c
 30209  0153D6  D005               	bra	u9220
 30210  0153D8                     u9227:
 30211  0153D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 30212  0153DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 30213  0153E0  50EF               	movf	indf0,w,c
 30214  0153E2                     u9220:
 30215  0153E2  0100               	movlb	0	; () banked
 30216  0153E4  6FC0               	movwf	Byte_GetZone@Output& (0+255),b
 30217                           
 30218                           ; BSR set to: 0
 30219                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30220  0153E6  0100               	movlb	0	; () banked
 30221  0153E8  51BC               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 30222  0153EA  0D01               	mullw	1
 30223  0153EC  0E0F               	movlw	low _MASKS
 30224  0153EE  24F3               	addwf	prodl,w,c
 30225  0153F0  6EF6               	movwf	tblptrl,c
 30226  0153F2  0EFD               	movlw	high _MASKS
 30227  0153F4  20F4               	addwfc	prodh,w,c
 30228  0153F6  6EF7               	movwf	tblptrh,c
 30229  0153F8                     	if	1	;There are 3 active tblptr bytes
 30230  0153F8  6AF8               	clrf	tblptru,c
 30231  0153FA  0E00               	movlw	low (__mediumconst shr (0+16))
 30232  0153FC  22F8               	addwfc	tblptru,f,c
 30233  0153FE                     	endif
 30234  0153FE  0008               	tblrd		*
 30235  015400  CFF5 F0BE          	movff	tablat,Byte_GetZone@MASK
 30236                           
 30237                           ; BSR set to: 0
 30238                           ;Types.c: 68: UINT8 Offset = 0;
 30239  015404  0E00               	movlw	0
 30240  015406  0100               	movlb	0	; () banked
 30241  015408  6FBF               	movwf	Byte_GetZone@Offset& (0+255),b
 30242                           
 30243                           ;Types.c: 70: while (pChunk >= pMax)
 30244  01540A  D006               	goto	l732
 30245  01540C                     
 30246                           ; BSR set to: 0
 30247                           ;Types.c: 71: {
 30248                           ;Types.c: 72: pChunk -= pMax;
 30249                           
 30250                           ; BSR set to: 0
 30251  01540C  0100               	movlb	0	; () banked
 30252  01540E  51BA               	movf	Byte_GetZone@pMax& (0+255),w,b
 30253  015410  0100               	movlb	0	; () banked
 30254  015412  5FBB               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 30255                           
 30256                           ; BSR set to: 0
 30257                           ;Types.c: 73: Offset += 1;
 30258  015414  0100               	movlb	0	; () banked
 30259  015416  2BBF               	incf	Byte_GetZone@Offset& (0+255),f,b
 30260  015418                     l732:
 30261                           
 30262                           ; BSR set to: 0
 30263                           
 30264                           ; BSR set to: 0
 30265  015418  0100               	movlb	0	; () banked
 30266  01541A  51BA               	movf	Byte_GetZone@pMax& (0+255),w,b
 30267  01541C  0100               	movlb	0	; () banked
 30268  01541E  5DBB               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 30269  015420  B0D8               	btfsc	status,0,c
 30270  015422  D7F4               	goto	l733
 30271                           
 30272                           ; BSR set to: 0
 30273                           ;Types.c: 74: }
 30274                           ;Types.c: 75: pChunk *= pChunkSize;
 30275                           
 30276                           ; BSR set to: 0
 30277  015424  0100               	movlb	0	; () banked
 30278  015426  51BC               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 30279  015428  0100               	movlb	0	; () banked
 30280  01542A  03BB               	mulwf	Byte_GetZone@pChunk& (0+255),b
 30281  01542C  50F3               	movf	prodl,w,c
 30282  01542E  6FBB               	movwf	Byte_GetZone@pChunk& (0+255),b
 30283                           
 30284                           ; BSR set to: 0
 30285                           ;Types.c: 76: pChunk += Offset;
 30286  015430  0100               	movlb	0	; () banked
 30287  015432  51BF               	movf	Byte_GetZone@Offset& (0+255),w,b
 30288  015434  0100               	movlb	0	; () banked
 30289  015436  27BB               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 30290                           
 30291                           ; BSR set to: 0
 30292                           ;Types.c: 78: Output >>= pChunk;
 30293  015438  0100               	movlb	0	; () banked
 30294  01543A  29BB               	incf	Byte_GetZone@pChunk& (0+255),w,b
 30295  01543C  0100               	movlb	0	; () banked
 30296  01543E  6FBD               	movwf	??_Byte_GetZone& (0+255),b
 30297  015440  D003               	goto	u9240
 30298  015442                     u9245:
 30299  015442  0100               	movlb	0	; () banked
 30300  015444  90D8               	bcf	status,0,c
 30301  015446  33C0               	rrcf	Byte_GetZone@Output& (0+255),f,b
 30302  015448                     u9240:
 30303  015448  0100               	movlb	0	; () banked
 30304  01544A  2FBD               	decfsz	??_Byte_GetZone& (0+255),f,b
 30305  01544C  D7FA               	goto	u9245
 30306                           
 30307                           ;Types.c: 79: Output &= MASK;
 30308  01544E  0100               	movlb	0	; () banked
 30309  015450  51BE               	movf	Byte_GetZone@MASK& (0+255),w,b
 30310  015452  0100               	movlb	0	; () banked
 30311  015454  17C0               	andwf	Byte_GetZone@Output& (0+255),f,b
 30312                           
 30313                           ; BSR set to: 0
 30314                           ;Types.c: 80: return Output;
 30315  015456  0100               	movlb	0	; () banked
 30316  015458  51C0               	movf	Byte_GetZone@Output& (0+255),w,b
 30317  01545A  0012               	return	
 30318  01545C                     __end_of_Byte_GetZone:
 30319                           	opt stack 0
 30320                           tosu	equ	0xFFF
 30321                           tosh	equ	0xFFE
 30322                           tosl	equ	0xFFD
 30323                           pclath	equ	0xFFA
 30324                           tblptru	equ	0xFF8
 30325                           tblptrh	equ	0xFF7
 30326                           tblptrl	equ	0xFF6
 30327                           tablat	equ	0xFF5
 30328                           prodh	equ	0xFF4
 30329                           prodl	equ	0xFF3
 30330                           intcon	equ	0xFF2
 30331                           indf0	equ	0xFEF
 30332                           postinc0	equ	0xFEE
 30333                           fsr0h	equ	0xFEA
 30334                           fsr0l	equ	0xFE9
 30335                           wreg	equ	0xFE8
 30336                           indf1	equ	0xFE7
 30337                           postdec1	equ	0xFE5
 30338                           fsr1h	equ	0xFE2
 30339                           fsr1l	equ	0xFE1
 30340                           indf2	equ	0xFDF
 30341                           postinc2	equ	0xFDE
 30342                           postdec2	equ	0xFDD
 30343                           plusw2	equ	0xFDB
 30344                           fsr2h	equ	0xFDA
 30345                           fsr2l	equ	0xFD9
 30346                           status	equ	0xFD8
 30347                           
 30348 ;; *************** function _Byte_SetBit *****************
 30349 ;; Defined at:
 30350 ;;		line 32 in file "Library/Types.c"
 30351 ;; Parameters:    Size  Location     Type
 30352 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30353 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30354 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30355 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30356 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30357 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30358 ;;		 -> NULL(0), 
 30359 ;;  pBit            1    2[BANK0 ] unsigned char 
 30360 ;;  pValue          1    3[BANK0 ] unsigned char 
 30361 ;; Auto vars:     Size  Location     Type
 30362 ;;		None
 30363 ;; Return value:  Size  Location     Type
 30364 ;;                  1    wreg      void 
 30365 ;; Registers used:
 30366 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30367 ;; Tracked objects:
 30368 ;;		On entry : 0/0
 30369 ;;		On exit  : 0/0
 30370 ;;		Unchanged: 0/0
 30371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30374 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30375 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30376 ;;Total ram usage:        7 bytes
 30377 ;; Hardware stack levels used:    1
 30378 ;; Hardware stack levels required when called:    7
 30379 ;; This function calls:
 30380 ;;		Nothing
 30381 ;; This function is called by:
 30382 ;;		_Port_SetPinType
 30383 ;;		_Port_SetPin
 30384 ;;		_SPI_Init
 30385 ;;		_SPI_MinSpeed
 30386 ;;		_SPI_MaxSpeed
 30387 ;;		_Word_SetBit
 30388 ;;		_I2C_Init
 30389 ;; This function uses a non-reentrant model
 30390 ;;
 30391                           
 30392                           	psect	text156
 30393  015FBE                     __ptext156:
 30394                           	opt stack 0
 30395  015FBE                     _Byte_SetBit:
 30396                           	opt stack 15
 30397                           
 30398                           ;Types.c: 34: pValue &= 1;
 30399                           
 30400                           ; BSR set to: 0
 30401                           ;incstack = 0
 30402  015FBE  0E01               	movlw	1
 30403  015FC0  0100               	movlb	0	; () banked
 30404  015FC2  17BB               	andwf	Byte_SetBit@pValue& (0+255),f,b
 30405                           
 30406                           ; BSR set to: 0
 30407                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30408  015FC4  C0BA  F0BC         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30409  015FC8  0E01               	movlw	1
 30410  015FCA  0100               	movlb	0	; () banked
 30411  015FCC  6FBD               	movwf	(??_Byte_SetBit+1)& (0+255),b
 30412  015FCE  0100               	movlb	0	; () banked
 30413  015FD0  2BBC               	incf	??_Byte_SetBit& (0+255),f,b
 30414  015FD2  D003               	goto	u9264
 30415  015FD4                     u9265:
 30416  015FD4  0100               	movlb	0	; () banked
 30417  015FD6  90D8               	bcf	status,0,c
 30418  015FD8  37BD               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30419  015FDA                     u9264:
 30420  015FDA  0100               	movlb	0	; () banked
 30421  015FDC  2FBC               	decfsz	??_Byte_SetBit& (0+255),f,b
 30422  015FDE  D7FA               	goto	u9265
 30423  015FE0  0100               	movlb	0	; () banked
 30424  015FE2  51BD               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30425  015FE4  0AFF               	xorlw	255
 30426  015FE6  0100               	movlb	0	; () banked
 30427  015FE8  6FBE               	movwf	(??_Byte_SetBit+2)& (0+255),b
 30428  015FEA  C0B8  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30429  015FEE  C0B9  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30430  015FF2  0100               	movlb	0	; () banked
 30431  015FF4  51BE               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 30432  015FF6  16DF               	andwf	indf2,f,c
 30433                           
 30434                           ; BSR set to: 0
 30435                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30436  015FF8  C0BA  F0BC         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30437  015FFC  C0BB  F0BD         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 30438  016000  0100               	movlb	0	; () banked
 30439  016002  2BBC               	incf	??_Byte_SetBit& (0+255),f,b
 30440  016004  D003               	goto	u9274
 30441  016006                     u9275:
 30442  016006  0100               	movlb	0	; () banked
 30443  016008  90D8               	bcf	status,0,c
 30444  01600A  37BD               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30445  01600C                     u9274:
 30446  01600C  0100               	movlb	0	; () banked
 30447  01600E  2FBC               	decfsz	??_Byte_SetBit& (0+255),f,b
 30448  016010  D7FA               	goto	u9275
 30449  016012  C0B8  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30450  016016  C0B9  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30451  01601A  0100               	movlb	0	; () banked
 30452  01601C  51BD               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30453  01601E  12DF               	iorwf	indf2,f,c
 30454                           
 30455                           ; BSR set to: 0
 30456  016020  0012               	return		;funcret
 30457  016022                     __end_of_Byte_SetBit:
 30458                           	opt stack 0
 30459                           tosu	equ	0xFFF
 30460                           tosh	equ	0xFFE
 30461                           tosl	equ	0xFFD
 30462                           pclath	equ	0xFFA
 30463                           tblptru	equ	0xFF8
 30464                           tblptrh	equ	0xFF7
 30465                           tblptrl	equ	0xFF6
 30466                           tablat	equ	0xFF5
 30467                           prodh	equ	0xFF4
 30468                           prodl	equ	0xFF3
 30469                           intcon	equ	0xFF2
 30470                           indf0	equ	0xFEF
 30471                           postinc0	equ	0xFEE
 30472                           fsr0h	equ	0xFEA
 30473                           fsr0l	equ	0xFE9
 30474                           wreg	equ	0xFE8
 30475                           indf1	equ	0xFE7
 30476                           postdec1	equ	0xFE5
 30477                           fsr1h	equ	0xFE2
 30478                           fsr1l	equ	0xFE1
 30479                           indf2	equ	0xFDF
 30480                           postinc2	equ	0xFDE
 30481                           postdec2	equ	0xFDD
 30482                           plusw2	equ	0xFDB
 30483                           fsr2h	equ	0xFDA
 30484                           fsr2l	equ	0xFD9
 30485                           status	equ	0xFD8
 30486                           
 30487 ;; *************** function _Port_GetPin *****************
 30488 ;; Defined at:
 30489 ;;		line 271 in file "Library/Port.c"
 30490 ;; Parameters:    Size  Location     Type
 30491 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 30492 ;;		 -> PortB(10), PortE(10), PortC(10), 
 30493 ;;  pPin            1    2[BANK0 ] enum E6750
 30494 ;; Auto vars:     Size  Location     Type
 30495 ;;  Output          1    5[BANK0 ] unsigned char 
 30496 ;; Return value:  Size  Location     Type
 30497 ;;                  1    wreg      unsigned char 
 30498 ;; Registers used:
 30499 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30500 ;; Tracked objects:
 30501 ;;		On entry : 0/0
 30502 ;;		On exit  : 0/0
 30503 ;;		Unchanged: 0/0
 30504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30505 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30508 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30509 ;;Total ram usage:        6 bytes
 30510 ;; Hardware stack levels used:    1
 30511 ;; Hardware stack levels required when called:    7
 30512 ;; This function calls:
 30513 ;;		Nothing
 30514 ;; This function is called by:
 30515 ;;		_Port_TogglePin
 30516 ;;		_HMI_LeftSwitch
 30517 ;;		_HMI_RightSwitch
 30518 ;;		_HMI_UpSwitch
 30519 ;;		_HMI_DownSwitch
 30520 ;;		_MXK_TestButton
 30521 ;; This function uses a non-reentrant model
 30522 ;;
 30523                           
 30524                           	psect	text157
 30525  016582                     __ptext157:
 30526                           	opt stack 0
 30527  016582                     _Port_GetPin:
 30528                           	opt stack 18
 30529                           
 30530                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 30531                           
 30532                           ; BSR set to: 0
 30533                           ;incstack = 0
 30534  016582  0100               	movlb	0	; () banked
 30535  016584  EE20 F006          	lfsr	2,6
 30536  016588  51B8               	movf	Port_GetPin@pInput& (0+255),w,b
 30537  01658A  26D9               	addwf	fsr2l,f,c
 30538  01658C  51B9               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 30539  01658E  22DA               	addwfc	fsr2h,f,c
 30540  016590  CFDE F0BB          	movff	postinc2,??_Port_GetPin
 30541  016594  CFDD F0BC          	movff	postdec2,??_Port_GetPin+1
 30542  016598  C0BB  FFD9         	movff	??_Port_GetPin,fsr2l
 30543  01659C  C0BC  FFDA         	movff	??_Port_GetPin+1,fsr2h
 30544  0165A0  50DF               	movf	indf2,w,c
 30545  0165A2  0100               	movlb	0	; () banked
 30546  0165A4  6FBD               	movwf	Port_GetPin@Output& (0+255),b
 30547                           
 30548                           ; BSR set to: 0
 30549                           ;Port.c: 274: Output >>= (UINT8)pPin;
 30550  0165A6  0100               	movlb	0	; () banked
 30551  0165A8  29BA               	incf	Port_GetPin@pPin& (0+255),w,b
 30552  0165AA  0100               	movlb	0	; () banked
 30553  0165AC  6FBB               	movwf	??_Port_GetPin& (0+255),b
 30554  0165AE  D003               	goto	u9310
 30555  0165B0                     u9315:
 30556  0165B0  0100               	movlb	0	; () banked
 30557  0165B2  90D8               	bcf	status,0,c
 30558  0165B4  33BD               	rrcf	Port_GetPin@Output& (0+255),f,b
 30559  0165B6                     u9310:
 30560  0165B6  0100               	movlb	0	; () banked
 30561  0165B8  2FBB               	decfsz	??_Port_GetPin& (0+255),f,b
 30562  0165BA  D7FA               	goto	u9315
 30563                           
 30564                           ;Port.c: 275: Output &= 1;
 30565  0165BC  0E01               	movlw	1
 30566  0165BE  0100               	movlb	0	; () banked
 30567  0165C0  17BD               	andwf	Port_GetPin@Output& (0+255),f,b
 30568                           
 30569                           ; BSR set to: 0
 30570                           ;Port.c: 276: return Output;
 30571  0165C2  0100               	movlb	0	; () banked
 30572  0165C4  51BD               	movf	Port_GetPin@Output& (0+255),w,b
 30573  0165C6  0012               	return	
 30574  0165C8                     __end_of_Port_GetPin:
 30575                           	opt stack 0
 30576                           tosu	equ	0xFFF
 30577                           tosh	equ	0xFFE
 30578                           tosl	equ	0xFFD
 30579                           pclath	equ	0xFFA
 30580                           tblptru	equ	0xFF8
 30581                           tblptrh	equ	0xFF7
 30582                           tblptrl	equ	0xFF6
 30583                           tablat	equ	0xFF5
 30584                           prodh	equ	0xFF4
 30585                           prodl	equ	0xFF3
 30586                           intcon	equ	0xFF2
 30587                           indf0	equ	0xFEF
 30588                           postinc0	equ	0xFEE
 30589                           fsr0h	equ	0xFEA
 30590                           fsr0l	equ	0xFE9
 30591                           wreg	equ	0xFE8
 30592                           indf1	equ	0xFE7
 30593                           postdec1	equ	0xFE5
 30594                           fsr1h	equ	0xFE2
 30595                           fsr1l	equ	0xFE1
 30596                           indf2	equ	0xFDF
 30597                           postinc2	equ	0xFDE
 30598                           postdec2	equ	0xFDD
 30599                           plusw2	equ	0xFDB
 30600                           fsr2h	equ	0xFDA
 30601                           fsr2l	equ	0xFD9
 30602                           status	equ	0xFD8
 30603                           
 30604 ;; *************** function _HMI_SetBar *****************
 30605 ;; Defined at:
 30606 ;;		line 205 in file "HMI.c"
 30607 ;; Parameters:    Size  Location     Type
 30608 ;;  pValue          1    wreg     unsigned char 
 30609 ;; Auto vars:     Size  Location     Type
 30610 ;;  pValue          1    0[BANK0 ] unsigned char 
 30611 ;; Return value:  Size  Location     Type
 30612 ;;                  1    wreg      void 
 30613 ;; Registers used:
 30614 ;;		wreg
 30615 ;; Tracked objects:
 30616 ;;		On entry : 0/0
 30617 ;;		On exit  : 0/0
 30618 ;;		Unchanged: 0/0
 30619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30623 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30624 ;;Total ram usage:        1 bytes
 30625 ;; Hardware stack levels used:    1
 30626 ;; Hardware stack levels required when called:    7
 30627 ;; This function calls:
 30628 ;;		Nothing
 30629 ;; This function is called by:
 30630 ;;		_Event_DIPSwitch
 30631 ;;		_Event_HMI_DIPSwitch
 30632 ;;		_Event_HMI_LeftButton
 30633 ;;		_Event_HMI_RightButton
 30634 ;; This function uses a non-reentrant model
 30635 ;;
 30636                           
 30637                           	psect	text158
 30638  016EB4                     __ptext158:
 30639                           	opt stack 0
 30640  016EB4                     _HMI_SetBar:
 30641                           	opt stack 18
 30642                           
 30643                           ; BSR set to: 0
 30644                           ;incstack = 0
 30645                           ;HMI_SetBar@pValue stored from wreg
 30646  016EB4  0100               	movlb	0	; () banked
 30647  016EB6  6FB8               	movwf	HMI_SetBar@pValue& (0+255),b
 30648                           
 30649                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 30650  016EB8  C0B8  F34E         	movff	HMI_SetBar@pValue,_HMIBoard+7
 30651  016EBC  0012               	return		;funcret
 30652  016EBE                     __end_of_HMI_SetBar:
 30653                           	opt stack 0
 30654                           tosu	equ	0xFFF
 30655                           tosh	equ	0xFFE
 30656                           tosl	equ	0xFFD
 30657                           pclath	equ	0xFFA
 30658                           tblptru	equ	0xFF8
 30659                           tblptrh	equ	0xFF7
 30660                           tblptrl	equ	0xFF6
 30661                           tablat	equ	0xFF5
 30662                           prodh	equ	0xFF4
 30663                           prodl	equ	0xFF3
 30664                           intcon	equ	0xFF2
 30665                           indf0	equ	0xFEF
 30666                           postinc0	equ	0xFEE
 30667                           fsr0h	equ	0xFEA
 30668                           fsr0l	equ	0xFE9
 30669                           wreg	equ	0xFE8
 30670                           indf1	equ	0xFE7
 30671                           postdec1	equ	0xFE5
 30672                           fsr1h	equ	0xFE2
 30673                           fsr1l	equ	0xFE1
 30674                           indf2	equ	0xFDF
 30675                           postinc2	equ	0xFDE
 30676                           postdec2	equ	0xFDD
 30677                           plusw2	equ	0xFDB
 30678                           fsr2h	equ	0xFDA
 30679                           fsr2l	equ	0xFD9
 30680                           status	equ	0xFD8
 30681                           
 30682 ;; *************** function _HMI_GetBar *****************
 30683 ;; Defined at:
 30684 ;;		line 209 in file "HMI.c"
 30685 ;; Parameters:    Size  Location     Type
 30686 ;;		None
 30687 ;; Auto vars:     Size  Location     Type
 30688 ;;		None
 30689 ;; Return value:  Size  Location     Type
 30690 ;;                  1    wreg      unsigned char 
 30691 ;; Registers used:
 30692 ;;		wreg, status,2
 30693 ;; Tracked objects:
 30694 ;;		On entry : 0/0
 30695 ;;		On exit  : 0/0
 30696 ;;		Unchanged: 0/0
 30697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30702 ;;Total ram usage:        0 bytes
 30703 ;; Hardware stack levels used:    1
 30704 ;; Hardware stack levels required when called:    7
 30705 ;; This function calls:
 30706 ;;		Nothing
 30707 ;; This function is called by:
 30708 ;;		_Event_DIPSwitch
 30709 ;;		_Event_HMI_DIPSwitch
 30710 ;; This function uses a non-reentrant model
 30711 ;;
 30712                           
 30713                           	psect	text159
 30714  016EF0                     __ptext159:
 30715                           	opt stack 0
 30716  016EF0                     _HMI_GetBar:
 30717                           	opt stack 18
 30718                           
 30719                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 30720                           
 30721                           ;incstack = 0
 30722  016EF0  0103               	movlb	3	; () banked
 30723  016EF2  514E               	movf	(_HMIBoard+7)& (0+255),w,b
 30724  016EF4  0012               	return	
 30725  016EF6                     __end_of_HMI_GetBar:
 30726                           	opt stack 0
 30727                           tosu	equ	0xFFF
 30728                           tosh	equ	0xFFE
 30729                           tosl	equ	0xFFD
 30730                           pclath	equ	0xFFA
 30731                           tblptru	equ	0xFF8
 30732                           tblptrh	equ	0xFF7
 30733                           tblptrl	equ	0xFF6
 30734                           tablat	equ	0xFF5
 30735                           prodh	equ	0xFF4
 30736                           prodl	equ	0xFF3
 30737                           intcon	equ	0xFF2
 30738                           indf0	equ	0xFEF
 30739                           postinc0	equ	0xFEE
 30740                           fsr0h	equ	0xFEA
 30741                           fsr0l	equ	0xFE9
 30742                           wreg	equ	0xFE8
 30743                           indf1	equ	0xFE7
 30744                           postdec1	equ	0xFE5
 30745                           fsr1h	equ	0xFE2
 30746                           fsr1l	equ	0xFE1
 30747                           indf2	equ	0xFDF
 30748                           postinc2	equ	0xFDE
 30749                           postdec2	equ	0xFDD
 30750                           plusw2	equ	0xFDB
 30751                           fsr2h	equ	0xFDA
 30752                           fsr2l	equ	0xFD9
 30753                           status	equ	0xFD8
 30754                           
 30755 ;; *************** function _ISR_Function *****************
 30756 ;; Defined at:
 30757 ;;		line 38 in file "Library/ISR.c"
 30758 ;; Parameters:    Size  Location     Type
 30759 ;;		None
 30760 ;; Auto vars:     Size  Location     Type
 30761 ;;		None
 30762 ;; Return value:  Size  Location     Type
 30763 ;;                  1    wreg      void 
 30764 ;; Registers used:
 30765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30766 ;; Tracked objects:
 30767 ;;		On entry : 0/0
 30768 ;;		On exit  : 0/0
 30769 ;;		Unchanged: 0/0
 30770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30773 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30774 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30775 ;;Total ram usage:       18 bytes
 30776 ;; Hardware stack levels used:    1
 30777 ;; Hardware stack levels required when called:    6
 30778 ;; This function calls:
 30779 ;;		_Timer0_ISR
 30780 ;; This function is called by:
 30781 ;;		Interrupt level 2
 30782 ;; This function uses a non-reentrant model
 30783 ;;
 30784                           
 30785                           	psect	intcode
 30786  001408                     __pintcode:
 30787                           	opt stack 0
 30788  001408                     _ISR_Function:
 30789                           	opt stack 13
 30790                           
 30791                           ; BSR set to: 3
 30792                           ;incstack = 0
 30793  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 30794  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 30795  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 30796  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 30797  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 30798  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 30799  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 30800  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 30801  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 30802  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 30803  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 30804  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 30805  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 30806  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 30807  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 30808  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 30809  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 30810  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 30811  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 30812                           
 30813                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 30814  001452  92F2               	bcf	intcon,1,c	;volatile
 30815                           
 30816                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 30817  001454  B4F2               	btfsc	intcon,2,c	;volatile
 30818  001456  AAF2               	btfss	intcon,5,c	;volatile
 30819  001458  D002               	goto	i2l1590
 30820                           
 30821                           ;ISR.c: 68: Timer0_ISR();
 30822  00145A  EC24  F0B5         	call	_Timer0_ISR	;wreg free
 30823  00145E                     i2l1590:
 30824  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 30825  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 30826  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 30827  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 30828  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 30829  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 30830  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 30831  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 30832  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 30833  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 30834  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 30835  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 30836  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 30837  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 30838  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 30839  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 30840  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 30841  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 30842  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 30843  0014A8  0011               	retfie		f
 30844  0014AA                     __end_of_ISR_Function:
 30845                           	opt stack 0
 30846                           tosu	equ	0xFFF
 30847                           tosh	equ	0xFFE
 30848                           tosl	equ	0xFFD
 30849                           pclatu	equ	0xFFB
 30850                           pclath	equ	0xFFA
 30851                           tblptru	equ	0xFF8
 30852                           tblptrh	equ	0xFF7
 30853                           tblptrl	equ	0xFF6
 30854                           tablat	equ	0xFF5
 30855                           prodh	equ	0xFF4
 30856                           prodl	equ	0xFF3
 30857                           intcon	equ	0xFF2
 30858                           indf0	equ	0xFEF
 30859                           postinc0	equ	0xFEE
 30860                           fsr0h	equ	0xFEA
 30861                           fsr0l	equ	0xFE9
 30862                           wreg	equ	0xFE8
 30863                           indf1	equ	0xFE7
 30864                           postdec1	equ	0xFE5
 30865                           fsr1h	equ	0xFE2
 30866                           fsr1l	equ	0xFE1
 30867                           indf2	equ	0xFDF
 30868                           postinc2	equ	0xFDE
 30869                           postdec2	equ	0xFDD
 30870                           plusw2	equ	0xFDB
 30871                           fsr2h	equ	0xFDA
 30872                           fsr2l	equ	0xFD9
 30873                           status	equ	0xFD8
 30874                           
 30875 ;; *************** function _Timer0_ISR *****************
 30876 ;; Defined at:
 30877 ;;		line 94 in file "Library/Timer0.c"
 30878 ;; Parameters:    Size  Location     Type
 30879 ;;		None
 30880 ;; Auto vars:     Size  Location     Type
 30881 ;;		None
 30882 ;; Return value:  Size  Location     Type
 30883 ;;                  1    wreg      void 
 30884 ;; Registers used:
 30885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30886 ;; Tracked objects:
 30887 ;;		On entry : 0/0
 30888 ;;		On exit  : 0/0
 30889 ;;		Unchanged: 0/0
 30890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30895 ;;Total ram usage:        0 bytes
 30896 ;; Hardware stack levels used:    1
 30897 ;; Hardware stack levels required when called:    5
 30898 ;; This function calls:
 30899 ;;		Absolute function
 30900 ;;		i2_Motor_Step
 30901 ;;		i2_Timer0_Stop
 30902 ;; This function is called by:
 30903 ;;		_ISR_Function
 30904 ;; This function uses a non-reentrant model
 30905 ;;
 30906                           
 30907                           	psect	text161
 30908  016A48                     __ptext161:
 30909                           	opt stack 0
 30910  016A48                     _Timer0_ISR:
 30911                           	opt stack 13
 30912                           
 30913                           ;Timer0.c: 96: Timer0_Stop();
 30914                           
 30915                           ;incstack = 0
 30916  016A48  EC7B  F0B7         	call	i2_Timer0_Stop	;wreg free
 30917                           
 30918                           ;Timer0.c: 99: if (gISR != 0)
 30919  016A4C  0103               	movlb	3	; () banked
 30920  016A4E  512E               	movf	_gISR& (0+255),w,b
 30921  016A50  0103               	movlb	3	; () banked
 30922  016A52  112F               	iorwf	(_gISR+1)& (0+255),w,b
 30923  016A54  0103               	movlb	3	; () banked
 30924  016A56  1130               	iorwf	(_gISR+2)& (0+255),w,b
 30925  016A58  B4D8               	btfsc	status,2,c
 30926  016A5A  0012               	return	
 30927                           
 30928                           ; BSR set to: 3
 30929                           ;Timer0.c: 100: gISR();
 30930  016A5C  D801               	call	i2u1519_48
 30931  016A5E  0012               	return	
 30932  016A60                     i2u1519_48:
 30933  016A60  0005               	push	
 30934  016A62  6EFA               	movwf	pclath,c
 30935  016A64  0103               	movlb	3	; () banked
 30936  016A66  512E               	movf	_gISR& (0+255),w,b
 30937  016A68  6EFD               	movwf	tosl,c
 30938  016A6A  512F               	movf	(_gISR+1)& (0+255),w,b
 30939  016A6C  6EFE               	movwf	tosh,c
 30940  016A6E  5130               	movf	(_gISR+2)& (0+255),w,b
 30941  016A70  6EFF               	movwf	tosu,c
 30942  016A72  50FA               	movf	pclath,w,c
 30943  016A74  0012               	return		;indir
 30944  016A76                     __end_of_Timer0_ISR:
 30945                           	opt stack 0
 30946                           tosu	equ	0xFFF
 30947                           tosh	equ	0xFFE
 30948                           tosl	equ	0xFFD
 30949                           pclatu	equ	0xFFB
 30950                           pclath	equ	0xFFA
 30951                           tblptru	equ	0xFF8
 30952                           tblptrh	equ	0xFF7
 30953                           tblptrl	equ	0xFF6
 30954                           tablat	equ	0xFF5
 30955                           prodh	equ	0xFF4
 30956                           prodl	equ	0xFF3
 30957                           intcon	equ	0xFF2
 30958                           indf0	equ	0xFEF
 30959                           postinc0	equ	0xFEE
 30960                           fsr0h	equ	0xFEA
 30961                           fsr0l	equ	0xFE9
 30962                           wreg	equ	0xFE8
 30963                           indf1	equ	0xFE7
 30964                           postdec1	equ	0xFE5
 30965                           fsr1h	equ	0xFE2
 30966                           fsr1l	equ	0xFE1
 30967                           indf2	equ	0xFDF
 30968                           postinc2	equ	0xFDE
 30969                           postdec2	equ	0xFDD
 30970                           plusw2	equ	0xFDB
 30971                           fsr2h	equ	0xFDA
 30972                           fsr2l	equ	0xFD9
 30973                           status	equ	0xFD8
 30974                           
 30975 ;; *************** function i2_Motor_Step *****************
 30976 ;; Defined at:
 30977 ;;		line 75 in file "Library/Motor.c"
 30978 ;; Parameters:    Size  Location     Type
 30979 ;;		None
 30980 ;; Auto vars:     Size  Location     Type
 30981 ;;		None
 30982 ;; Return value:  Size  Location     Type
 30983 ;;                  1    wreg      void 
 30984 ;; Registers used:
 30985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30986 ;; Tracked objects:
 30987 ;;		On entry : 0/0
 30988 ;;		On exit  : 0/0
 30989 ;;		Unchanged: 0/0
 30990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30995 ;;Total ram usage:        2 bytes
 30996 ;; Hardware stack levels used:    1
 30997 ;; Hardware stack levels required when called:    4
 30998 ;; This function calls:
 30999 ;;		i2_MXK_Queue
 31000 ;;		i2_MXK_Release
 31001 ;;		i2_MXK_SwitchTo
 31002 ;;		i2_Port_SetPin
 31003 ;;		i2_Timer0_Restart
 31004 ;;		i2_Timer0_Stop
 31005 ;; This function is called by:
 31006 ;; This function uses a non-reentrant model
 31007 ;;
 31008                           
 31009                           	psect	text162
 31010  013DB6                     __ptext162:
 31011                           	opt stack 0
 31012  013DB6                     i2_Motor_Step:
 31013                           	opt stack 13
 31014                           
 31015                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 31016                           
 31017                           ;incstack = 0
 31018  013DB6  0100               	movlb	0	; () banked
 31019  013DB8  EE20 F004          	lfsr	2,4
 31020  013DBC  517C               	movf	_lMotor& (0+255),w,b
 31021  013DBE  26D9               	addwf	fsr2l,f,c
 31022  013DC0  517D               	movf	(_lMotor+1)& (0+255),w,b
 31023  013DC2  22DA               	addwfc	fsr2h,f,c
 31024  013DC4  50DF               	movf	indf2,w,c
 31025  013DC6  EC77  F0B4         	call	i2_MXK_SwitchTo
 31026  013DCA  0900               	iorlw	0
 31027  013DCC  B4D8               	btfsc	status,2,c
 31028  013DCE  D06A               	goto	i2l1627
 31029                           
 31030                           ;Motor.c: 78: {
 31031                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 31032  013DD0  C07C  FFD9         	movff	_lMotor,fsr2l
 31033  013DD4  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31034  013DD8  50DE               	movf	postinc2,w,c
 31035  013DDA  10DE               	iorwf	postinc2,w,c
 31036  013DDC  B4D8               	btfsc	status,2,c
 31037  013DDE  D05D               	goto	i2l1628
 31038                           
 31039                           ;Motor.c: 80: {
 31040                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 31041  013DE0  C07C  FFD9         	movff	_lMotor,fsr2l
 31042  013DE4  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31043  013DE8  0E01               	movlw	1
 31044  013DEA  BEDB               	btfsc	plusw2,7,c
 31045  013DEC  D022               	goto	i2l1629
 31046  013DEE  0E01               	movlw	1
 31047  013DF0  50DB               	movf	plusw2,w,c
 31048  013DF2  E103               	bnz	i2u784_40
 31049  013DF4  04DE               	decf	postinc2,w,c
 31050  013DF6  A0D8               	btfss	status,0,c
 31051  013DF8  D01C               	goto	i2l1629
 31052  013DFA                     i2u784_40:
 31053                           
 31054                           ;Motor.c: 83: {
 31055                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 31056  013DFA  C07C  FFD9         	movff	_lMotor,fsr2l
 31057  013DFE  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31058  013E02  28DE               	incf	postinc2,w,c
 31059  013E04  E104               	bnz	i2u785_40
 31060  013E06  0E7F               	movlw	127
 31061  013E08  18DE               	xorwf	postinc2,w,c
 31062  013E0A  B4D8               	btfsc	status,2,c
 31063  013E0C  D007               	goto	i2l1630
 31064  013E0E                     i2u785_40:
 31065                           
 31066                           ;Motor.c: 85: lMotor->mDelta --;
 31067  013E0E  C07C  FFD9         	movff	_lMotor,fsr2l
 31068  013E12  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31069  013E16  06DE               	decf	postinc2,f,c
 31070  013E18  0E00               	movlw	0
 31071  013E1A  5ADD               	subwfb	postdec2,f,c
 31072  013E1C                     i2l1630:
 31073                           
 31074                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 31075  013E1C  0E8F               	movlw	low _PortE
 31076  013E1E  6E10               	movwf	i2Port_SetPin@pInput,c
 31077  013E20  0E00               	movlw	high _PortE
 31078  013E22  6E11               	movwf	i2Port_SetPin@pInput+1,c
 31079  013E24  0E00               	movlw	0
 31080  013E26  6E12               	movwf	i2Port_SetPin@pPin,c
 31081  013E28  0E01               	movlw	1
 31082  013E2A  6E13               	movwf	i2Port_SetPin@pValue,c
 31083  013E2C  EC4D  F0A7         	call	i2_Port_SetPin	;wreg free
 31084                           
 31085                           ;Motor.c: 88: }
 31086  013E30  D01B               	goto	i2l1631
 31087  013E32                     i2l1629:
 31088                           
 31089                           ;Motor.c: 89: else
 31090                           ;Motor.c: 90: {
 31091                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 31092  013E32  C07C  FFD9         	movff	_lMotor,fsr2l
 31093  013E36  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31094  013E3A  04DE               	decf	postinc2,w,c
 31095  013E3C  E104               	bnz	i2u786_40
 31096  013E3E  0E80               	movlw	128
 31097  013E40  18DE               	xorwf	postinc2,w,c
 31098  013E42  B4D8               	btfsc	status,2,c
 31099  013E44  D007               	goto	i2l1632
 31100  013E46                     i2u786_40:
 31101                           
 31102                           ;Motor.c: 92: lMotor->mDelta ++;
 31103  013E46  C07C  FFD9         	movff	_lMotor,fsr2l
 31104  013E4A  C07D  FFDA         	movff	_lMotor+1,fsr2h
 31105  013E4E  2ADE               	incf	postinc2,f,c
 31106  013E50  0E00               	movlw	0
 31107  013E52  22DD               	addwfc	postdec2,f,c
 31108  013E54                     i2l1632:
 31109                           
 31110                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 31111  013E54  0E8F               	movlw	low _PortE
 31112  013E56  6E10               	movwf	i2Port_SetPin@pInput,c
 31113  013E58  0E00               	movlw	high _PortE
 31114  013E5A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 31115  013E5C  0E00               	movlw	0
 31116  013E5E  6E12               	movwf	i2Port_SetPin@pPin,c
 31117  013E60  0E00               	movlw	0
 31118  013E62  6E13               	movwf	i2Port_SetPin@pValue,c
 31119  013E64  EC4D  F0A7         	call	i2_Port_SetPin	;wreg free
 31120  013E68                     i2l1631:
 31121                           
 31122                           ;Motor.c: 95: }
 31123                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 31124  013E68  0E8F               	movlw	low _PortE
 31125  013E6A  6E10               	movwf	i2Port_SetPin@pInput,c
 31126  013E6C  0E00               	movlw	high _PortE
 31127  013E6E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 31128  013E70  0E01               	movlw	1
 31129  013E72  6E12               	movwf	i2Port_SetPin@pPin,c
 31130  013E74  0E01               	movlw	1
 31131  013E76  6E13               	movwf	i2Port_SetPin@pValue,c
 31132  013E78  EC4D  F0A7         	call	i2_Port_SetPin	;wreg free
 31133                           
 31134                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 31135  013E7C  0E8F               	movlw	low _PortE
 31136  013E7E  6E10               	movwf	i2Port_SetPin@pInput,c
 31137  013E80  0E00               	movlw	high _PortE
 31138  013E82  6E11               	movwf	i2Port_SetPin@pInput+1,c
 31139  013E84  0E01               	movlw	1
 31140  013E86  6E12               	movwf	i2Port_SetPin@pPin,c
 31141  013E88  0E00               	movlw	0
 31142  013E8A  6E13               	movwf	i2Port_SetPin@pValue,c
 31143  013E8C  EC4D  F0A7         	call	i2_Port_SetPin	;wreg free
 31144                           
 31145                           ;Motor.c: 101: MXK_Release();
 31146  013E90  EC7E  F0B7         	call	i2_MXK_Release	;wreg free
 31147                           
 31148                           ;Motor.c: 102: Timer0_Restart();
 31149  013E94  EC4A  F0B7         	call	i2_Timer0_Restart	;wreg free
 31150                           
 31151                           ;Motor.c: 103: return;
 31152  013E98  0012               	return	
 31153  013E9A                     i2l1628:
 31154                           
 31155                           ;Motor.c: 104: }
 31156                           ;Motor.c: 105: MXK_Release();
 31157  013E9A  EC7E  F0B7         	call	i2_MXK_Release	;wreg free
 31158                           
 31159                           ;Motor.c: 106: Timer0_Stop();
 31160  013E9E  EC7B  F0B7         	call	i2_Timer0_Stop	;wreg free
 31161                           
 31162                           ;Motor.c: 107: return;
 31163  013EA2  0012               	return	
 31164  013EA4                     i2l1627:
 31165                           
 31166                           ;Motor.c: 108: }
 31167                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 31168  013EA4  C063  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 31169  013EA8  C064  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 31170  013EAC  C065  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 31171  013EB0  EC37  F0B7         	call	i2_MXK_Queue	;wreg free
 31172  013EB4  0012               	return		;funcret
 31173  013EB6                     __end_ofi2_Motor_Step:
 31174                           	opt stack 0
 31175                           tosu	equ	0xFFF
 31176                           tosh	equ	0xFFE
 31177                           tosl	equ	0xFFD
 31178                           pclatu	equ	0xFFB
 31179                           pclath	equ	0xFFA
 31180                           tblptru	equ	0xFF8
 31181                           tblptrh	equ	0xFF7
 31182                           tblptrl	equ	0xFF6
 31183                           tablat	equ	0xFF5
 31184                           prodh	equ	0xFF4
 31185                           prodl	equ	0xFF3
 31186                           intcon	equ	0xFF2
 31187                           indf0	equ	0xFEF
 31188                           postinc0	equ	0xFEE
 31189                           fsr0h	equ	0xFEA
 31190                           fsr0l	equ	0xFE9
 31191                           wreg	equ	0xFE8
 31192                           indf1	equ	0xFE7
 31193                           postdec1	equ	0xFE5
 31194                           fsr1h	equ	0xFE2
 31195                           fsr1l	equ	0xFE1
 31196                           indf2	equ	0xFDF
 31197                           postinc2	equ	0xFDE
 31198                           postdec2	equ	0xFDD
 31199                           plusw2	equ	0xFDB
 31200                           fsr2h	equ	0xFDA
 31201                           fsr2l	equ	0xFD9
 31202                           status	equ	0xFD8
 31203                           
 31204 ;; *************** function i2_Timer0_Stop *****************
 31205 ;; Defined at:
 31206 ;;		line 89 in file "Library/Timer0.c"
 31207 ;; Parameters:    Size  Location     Type
 31208 ;;		None
 31209 ;; Auto vars:     Size  Location     Type
 31210 ;;		None
 31211 ;; Return value:  Size  Location     Type
 31212 ;;                  1    wreg      void 
 31213 ;; Registers used:
 31214 ;;		None
 31215 ;; Tracked objects:
 31216 ;;		On entry : 0/0
 31217 ;;		On exit  : 0/0
 31218 ;;		Unchanged: 0/0
 31219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31224 ;;Total ram usage:        0 bytes
 31225 ;; Hardware stack levels used:    1
 31226 ;; This function calls:
 31227 ;;		Nothing
 31228 ;; This function is called by:
 31229 ;;		_Timer0_ISR
 31230 ;;		i2_Motor_Step
 31231 ;; This function uses a non-reentrant model
 31232 ;;
 31233                           
 31234                           	psect	text163
 31235  016EF6                     __ptext163:
 31236                           	opt stack 0
 31237  016EF6                     i2_Timer0_Stop:
 31238                           	opt stack 17
 31239                           
 31240                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 31241                           
 31242                           ;incstack = 0
 31243  016EF6  9AF2               	bcf	intcon,5,c	;volatile
 31244                           
 31245                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 31246  016EF8  94F2               	bcf	intcon,2,c	;volatile
 31247  016EFA  0012               	return		;funcret
 31248  016EFC                     __end_ofi2_Timer0_Stop:
 31249                           	opt stack 0
 31250                           tosu	equ	0xFFF
 31251                           tosh	equ	0xFFE
 31252                           tosl	equ	0xFFD
 31253                           pclatu	equ	0xFFB
 31254                           pclath	equ	0xFFA
 31255                           tblptru	equ	0xFF8
 31256                           tblptrh	equ	0xFF7
 31257                           tblptrl	equ	0xFF6
 31258                           tablat	equ	0xFF5
 31259                           prodh	equ	0xFF4
 31260                           prodl	equ	0xFF3
 31261                           intcon	equ	0xFF2
 31262                           indf0	equ	0xFEF
 31263                           postinc0	equ	0xFEE
 31264                           fsr0h	equ	0xFEA
 31265                           fsr0l	equ	0xFE9
 31266                           wreg	equ	0xFE8
 31267                           indf1	equ	0xFE7
 31268                           postdec1	equ	0xFE5
 31269                           fsr1h	equ	0xFE2
 31270                           fsr1l	equ	0xFE1
 31271                           indf2	equ	0xFDF
 31272                           postinc2	equ	0xFDE
 31273                           postdec2	equ	0xFDD
 31274                           plusw2	equ	0xFDB
 31275                           fsr2h	equ	0xFDA
 31276                           fsr2l	equ	0xFD9
 31277                           status	equ	0xFD8
 31278                           
 31279 ;; *************** function i2_Timer0_Restart *****************
 31280 ;; Defined at:
 31281 ;;		line 83 in file "Library/Timer0.c"
 31282 ;; Parameters:    Size  Location     Type
 31283 ;;		None
 31284 ;; Auto vars:     Size  Location     Type
 31285 ;;		None
 31286 ;; Return value:  Size  Location     Type
 31287 ;;                  1    wreg      void 
 31288 ;; Registers used:
 31289 ;;		None
 31290 ;; Tracked objects:
 31291 ;;		On entry : 0/0
 31292 ;;		On exit  : 0/0
 31293 ;;		Unchanged: 0/0
 31294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31299 ;;Total ram usage:        0 bytes
 31300 ;; Hardware stack levels used:    1
 31301 ;; This function calls:
 31302 ;;		Nothing
 31303 ;; This function is called by:
 31304 ;;		i2_Motor_Step
 31305 ;; This function uses a non-reentrant model
 31306 ;;
 31307                           
 31308                           	psect	text164
 31309  016E94                     __ptext164:
 31310                           	opt stack 0
 31311  016E94                     i2_Timer0_Restart:
 31312                           	opt stack 16
 31313                           
 31314                           ;Timer0.c: 85: TMR0 = COUNTER;
 31315                           
 31316                           ;incstack = 0
 31317  016E94  C029  FFD6         	movff	_COUNTER,4054	;volatile
 31318  016E98  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 31319                           
 31320                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 31321  016E9C  8AF2               	bsf	intcon,5,c	;volatile
 31322  016E9E  0012               	return		;funcret
 31323  016EA0                     __end_ofi2_Timer0_Restart:
 31324                           	opt stack 0
 31325                           tosu	equ	0xFFF
 31326                           tosh	equ	0xFFE
 31327                           tosl	equ	0xFFD
 31328                           pclatu	equ	0xFFB
 31329                           pclath	equ	0xFFA
 31330                           tblptru	equ	0xFF8
 31331                           tblptrh	equ	0xFF7
 31332                           tblptrl	equ	0xFF6
 31333                           tablat	equ	0xFF5
 31334                           prodh	equ	0xFF4
 31335                           prodl	equ	0xFF3
 31336                           intcon	equ	0xFF2
 31337                           indf0	equ	0xFEF
 31338                           postinc0	equ	0xFEE
 31339                           fsr0h	equ	0xFEA
 31340                           fsr0l	equ	0xFE9
 31341                           wreg	equ	0xFE8
 31342                           indf1	equ	0xFE7
 31343                           postdec1	equ	0xFE5
 31344                           fsr1h	equ	0xFE2
 31345                           fsr1l	equ	0xFE1
 31346                           indf2	equ	0xFDF
 31347                           postinc2	equ	0xFDE
 31348                           postdec2	equ	0xFDD
 31349                           plusw2	equ	0xFDB
 31350                           fsr2h	equ	0xFDA
 31351                           fsr2l	equ	0xFD9
 31352                           status	equ	0xFD8
 31353                           
 31354 ;; *************** function i2_Port_SetPin *****************
 31355 ;; Defined at:
 31356 ;;		line 247 in file "Library/Port.c"
 31357 ;; Parameters:    Size  Location     Type
 31358 ;;  pInput          2   15[COMRAM] const PTR struct Port
 31359 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 31360 ;;  pPin            1   17[COMRAM] enum E6750
 31361 ;;  pValue          1   18[COMRAM] unsigned char 
 31362 ;; Auto vars:     Size  Location     Type
 31363 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 31364 ;; Return value:  Size  Location     Type
 31365 ;;                  1    wreg      void 
 31366 ;; Registers used:
 31367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31368 ;; Tracked objects:
 31369 ;;		On entry : 0/0
 31370 ;;		On exit  : 0/0
 31371 ;;		Unchanged: 0/0
 31372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31376 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31377 ;;Total ram usage:        5 bytes
 31378 ;; Hardware stack levels used:    1
 31379 ;; Hardware stack levels required when called:    3
 31380 ;; This function calls:
 31381 ;;		i2_Byte_SetBit
 31382 ;;		i2_Word_GetPair
 31383 ;; This function is called by:
 31384 ;;		i2_Motor_Step
 31385 ;; This function uses a non-reentrant model
 31386 ;;
 31387                           
 31388                           	psect	text165
 31389  014E9A                     __ptext165:
 31390                           	opt stack 0
 31391  014E9A                     i2_Port_SetPin:
 31392                           	opt stack 13
 31393                           
 31394                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 31395                           
 31396                           ;incstack = 0
 31397  014E9A  0E08               	movlw	8
 31398  014E9C  2410               	addwf	i2Port_SetPin@pInput,w,c
 31399  014E9E  6E0D               	movwf	i2Word_GetPair@pInput,c
 31400  014EA0  0E00               	movlw	0
 31401  014EA2  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 31402  014EA4  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 31403  014EA6  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 31404  014EAA  ECF5  F0B4         	call	i2_Word_GetPair	;wreg free
 31405  014EAE  6E14               	movwf	i2Port_SetPin@Type,c
 31406                           
 31407                           ;Port.c: 250: switch (Type)
 31408  014EB0  D03B               	goto	i2l427
 31409  014EB2                     
 31410                           ;Port.c: 256: pValue &= 1;
 31411  014EB2  0E01               	movlw	1
 31412  014EB4  1613               	andwf	i2Port_SetPin@pValue,f,c
 31413                           
 31414                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31415  014EB6  EE20 F002          	lfsr	2,2
 31416  014EBA  5010               	movf	i2Port_SetPin@pInput,w,c
 31417  014EBC  26D9               	addwf	fsr2l,f,c
 31418  014EBE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31419  014EC0  22DA               	addwfc	fsr2h,f,c
 31420  014EC2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31421  014EC6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31422  014ECA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31423  014ECE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31424  014ED2  EC9F  F0B1         	call	i2_Byte_SetBit	;wreg free
 31425                           
 31426                           ;Port.c: 258: break;
 31427  014ED6  0012               	return	
 31428  014ED8                     
 31429                           ;Port.c: 261: pValue &= 1;
 31430  014ED8  0E01               	movlw	1
 31431  014EDA  1613               	andwf	i2Port_SetPin@pValue,f,c
 31432                           
 31433                           ;Port.c: 262: pValue ^= 1;
 31434  014EDC  0E01               	movlw	1
 31435  014EDE  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 31436                           
 31437                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31438  014EE0  EE20 F002          	lfsr	2,2
 31439  014EE4  5010               	movf	i2Port_SetPin@pInput,w,c
 31440  014EE6  26D9               	addwf	fsr2l,f,c
 31441  014EE8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31442  014EEA  22DA               	addwfc	fsr2h,f,c
 31443  014EEC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31444  014EF0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31445  014EF4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31446  014EF8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31447  014EFC  EC9F  F0B1         	call	i2_Byte_SetBit	;wreg free
 31448                           
 31449                           ;Port.c: 264: break;
 31450  014F00  0012               	return	
 31451  014F02                     
 31452                           ;Port.c: 266: pValue &= 1;
 31453  014F02  0E01               	movlw	1
 31454  014F04  1613               	andwf	i2Port_SetPin@pValue,f,c
 31455                           
 31456                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 31457  014F06  EE20 F004          	lfsr	2,4
 31458  014F0A  5010               	movf	i2Port_SetPin@pInput,w,c
 31459  014F0C  26D9               	addwf	fsr2l,f,c
 31460  014F0E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31461  014F10  22DA               	addwfc	fsr2h,f,c
 31462  014F12  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31463  014F16  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31464  014F1A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31465  014F1E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31466  014F22  EC9F  F0B1         	call	i2_Byte_SetBit	;wreg free
 31467                           
 31468                           ;Port.c: 269: }
 31469                           
 31470                           ;Port.c: 268: break;
 31471  014F26  0012               	return	
 31472  014F28                     i2l427:
 31473  014F28  5014               	movf	i2Port_SetPin@Type,w,c
 31474                           
 31475                           ; Switch size 1, requested type "space"
 31476                           ; Number of cases is 4, Range of values is 0 to 3
 31477                           ; switch strategies available:
 31478                           ; Name         Instructions Cycles
 31479                           ; simple_byte           13     7 (average)
 31480                           ;	Chosen strategy is simple_byte
 31481  014F2A  0A00               	xorlw	0	; case 0
 31482  014F2C  B4D8               	btfsc	status,2,c
 31483  014F2E  0012               	return	
 31484  014F30  0A01               	xorlw	1	; case 1
 31485  014F32  B4D8               	btfsc	status,2,c
 31486  014F34  D7BE               	goto	i2l430
 31487  014F36  0A03               	xorlw	3	; case 2
 31488  014F38  B4D8               	btfsc	status,2,c
 31489  014F3A  D7CE               	goto	i2l432
 31490  014F3C  0A01               	xorlw	1	; case 3
 31491  014F3E  A4D8               	btfss	status,2,c
 31492  014F40  0012               	return	
 31493  014F42  D7DF               	goto	i2l433
 31494  014F44                     __end_ofi2_Port_SetPin:
 31495                           	opt stack 0
 31496                           tosu	equ	0xFFF
 31497                           tosh	equ	0xFFE
 31498                           tosl	equ	0xFFD
 31499                           pclatu	equ	0xFFB
 31500                           pclath	equ	0xFFA
 31501                           tblptru	equ	0xFF8
 31502                           tblptrh	equ	0xFF7
 31503                           tblptrl	equ	0xFF6
 31504                           tablat	equ	0xFF5
 31505                           prodh	equ	0xFF4
 31506                           prodl	equ	0xFF3
 31507                           intcon	equ	0xFF2
 31508                           indf0	equ	0xFEF
 31509                           postinc0	equ	0xFEE
 31510                           fsr0h	equ	0xFEA
 31511                           fsr0l	equ	0xFE9
 31512                           wreg	equ	0xFE8
 31513                           indf1	equ	0xFE7
 31514                           postdec1	equ	0xFE5
 31515                           fsr1h	equ	0xFE2
 31516                           fsr1l	equ	0xFE1
 31517                           indf2	equ	0xFDF
 31518                           postinc2	equ	0xFDE
 31519                           postdec2	equ	0xFDD
 31520                           plusw2	equ	0xFDB
 31521                           fsr2h	equ	0xFDA
 31522                           fsr2l	equ	0xFD9
 31523                           status	equ	0xFD8
 31524                           
 31525 ;; *************** function i2_Word_GetPair *****************
 31526 ;; Defined at:
 31527 ;;		line 156 in file "Library/Types.c"
 31528 ;; Parameters:    Size  Location     Type
 31529 ;;  pInput          2   12[COMRAM] PTR struct Word
 31530 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 31531 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 31532 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 31533 ;;		 -> PortC(10), PortF(10), NULL(0), 
 31534 ;;  pPair           1   14[COMRAM] unsigned char 
 31535 ;; Auto vars:     Size  Location     Type
 31536 ;;		None
 31537 ;; Return value:  Size  Location     Type
 31538 ;;                  1    wreg      unsigned char 
 31539 ;; Registers used:
 31540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31541 ;; Tracked objects:
 31542 ;;		On entry : 0/0
 31543 ;;		On exit  : 0/0
 31544 ;;		Unchanged: 0/0
 31545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31546 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31549 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31550 ;;Total ram usage:        3 bytes
 31551 ;; Hardware stack levels used:    1
 31552 ;; Hardware stack levels required when called:    2
 31553 ;; This function calls:
 31554 ;;		i2_Byte_GetPair
 31555 ;; This function is called by:
 31556 ;;		i2_Port_SetPin
 31557 ;; This function uses a non-reentrant model
 31558 ;;
 31559                           
 31560                           	psect	text166
 31561  0169EA                     __ptext166:
 31562                           	opt stack 0
 31563  0169EA                     i2_Word_GetPair:
 31564                           	opt stack 13
 31565                           
 31566                           ;Types.c: 158: if (pPair >= 4)
 31567                           
 31568                           ;incstack = 0
 31569  0169EA  0E03               	movlw	3
 31570  0169EC  640F               	cpfsgt	i2Word_GetPair@pPair,c
 31571  0169EE  D00C               	goto	i2l781
 31572                           
 31573                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 31574  0169F0  0E01               	movlw	1
 31575  0169F2  240D               	addwf	i2Word_GetPair@pInput,w,c
 31576  0169F4  6E0A               	movwf	i2Byte_GetPair@pInput,c
 31577  0169F6  0E00               	movlw	0
 31578  0169F8  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 31579  0169FA  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 31580  0169FC  500F               	movf	i2Word_GetPair@pPair,w,c
 31581  0169FE  0FFC               	addlw	252
 31582  016A00  6E0C               	movwf	i2Byte_GetPair@pPair,c
 31583  016A02  EC71  F0B6         	call	i2_Byte_GetPair	;wreg free
 31584  016A06  0012               	return	
 31585  016A08                     i2l781:
 31586                           
 31587                           ;Types.c: 160: else
 31588                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 31589  016A08  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 31590  016A0C  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 31591  016A10  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 31592  016A14  EC71  F0B6         	call	i2_Byte_GetPair	;wreg free
 31593  016A18  0012               	return	
 31594  016A1A                     __end_ofi2_Word_GetPair:
 31595                           	opt stack 0
 31596                           tosu	equ	0xFFF
 31597                           tosh	equ	0xFFE
 31598                           tosl	equ	0xFFD
 31599                           pclatu	equ	0xFFB
 31600                           pclath	equ	0xFFA
 31601                           tblptru	equ	0xFF8
 31602                           tblptrh	equ	0xFF7
 31603                           tblptrl	equ	0xFF6
 31604                           tablat	equ	0xFF5
 31605                           prodh	equ	0xFF4
 31606                           prodl	equ	0xFF3
 31607                           intcon	equ	0xFF2
 31608                           indf0	equ	0xFEF
 31609                           postinc0	equ	0xFEE
 31610                           fsr0h	equ	0xFEA
 31611                           fsr0l	equ	0xFE9
 31612                           wreg	equ	0xFE8
 31613                           indf1	equ	0xFE7
 31614                           postdec1	equ	0xFE5
 31615                           fsr1h	equ	0xFE2
 31616                           fsr1l	equ	0xFE1
 31617                           indf2	equ	0xFDF
 31618                           postinc2	equ	0xFDE
 31619                           postdec2	equ	0xFDD
 31620                           plusw2	equ	0xFDB
 31621                           fsr2h	equ	0xFDA
 31622                           fsr2l	equ	0xFD9
 31623                           status	equ	0xFD8
 31624                           
 31625 ;; *************** function i2_Byte_GetPair *****************
 31626 ;; Defined at:
 31627 ;;		line 87 in file "Library/Types.c"
 31628 ;; Parameters:    Size  Location     Type
 31629 ;;  pInput          2    9[COMRAM] PTR struct Byte
 31630 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31631 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31632 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31633 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31634 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31635 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31636 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31637 ;;		 -> NULL(0), 
 31638 ;;  pPair           1   11[COMRAM] unsigned char 
 31639 ;; Auto vars:     Size  Location     Type
 31640 ;;		None
 31641 ;; Return value:  Size  Location     Type
 31642 ;;                  1    wreg      unsigned char 
 31643 ;; Registers used:
 31644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31645 ;; Tracked objects:
 31646 ;;		On entry : 0/0
 31647 ;;		On exit  : 0/0
 31648 ;;		Unchanged: 0/0
 31649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31650 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31653 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31654 ;;Total ram usage:        3 bytes
 31655 ;; Hardware stack levels used:    1
 31656 ;; Hardware stack levels required when called:    1
 31657 ;; This function calls:
 31658 ;;		i2_Byte_GetZone
 31659 ;; This function is called by:
 31660 ;;		i2_Word_GetPair
 31661 ;; This function uses a non-reentrant model
 31662 ;;
 31663                           
 31664                           	psect	text167
 31665  016CE2                     __ptext167:
 31666                           	opt stack 0
 31667  016CE2                     i2_Byte_GetPair:
 31668                           	opt stack 13
 31669                           
 31670                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 31671                           
 31672                           ;incstack = 0
 31673  016CE2  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 31674  016CE6  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 31675  016CEA  0E04               	movlw	4
 31676  016CEC  6E03               	movwf	i2Byte_GetZone@pMax,c
 31677  016CEE  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 31678  016CF2  0E02               	movlw	2
 31679  016CF4  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 31680  016CF6  EC13  F0AD         	call	i2_Byte_GetZone	;wreg free
 31681  016CFA  0012               	return	
 31682  016CFC                     __end_ofi2_Byte_GetPair:
 31683                           	opt stack 0
 31684                           tosu	equ	0xFFF
 31685                           tosh	equ	0xFFE
 31686                           tosl	equ	0xFFD
 31687                           pclatu	equ	0xFFB
 31688                           pclath	equ	0xFFA
 31689                           tblptru	equ	0xFF8
 31690                           tblptrh	equ	0xFF7
 31691                           tblptrl	equ	0xFF6
 31692                           tablat	equ	0xFF5
 31693                           prodh	equ	0xFF4
 31694                           prodl	equ	0xFF3
 31695                           intcon	equ	0xFF2
 31696                           indf0	equ	0xFEF
 31697                           postinc0	equ	0xFEE
 31698                           fsr0h	equ	0xFEA
 31699                           fsr0l	equ	0xFE9
 31700                           wreg	equ	0xFE8
 31701                           indf1	equ	0xFE7
 31702                           postdec1	equ	0xFE5
 31703                           fsr1h	equ	0xFE2
 31704                           fsr1l	equ	0xFE1
 31705                           indf2	equ	0xFDF
 31706                           postinc2	equ	0xFDE
 31707                           postdec2	equ	0xFDD
 31708                           plusw2	equ	0xFDB
 31709                           fsr2h	equ	0xFDA
 31710                           fsr2l	equ	0xFD9
 31711                           status	equ	0xFD8
 31712                           
 31713 ;; *************** function i2_Byte_GetZone *****************
 31714 ;; Defined at:
 31715 ;;		line 64 in file "Library/Types.c"
 31716 ;; Parameters:    Size  Location     Type
 31717 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31718 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31719 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31720 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31721 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31722 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31723 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31724 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31725 ;;		 -> NULL(0), 
 31726 ;;  pMax            1    2[COMRAM] unsigned char 
 31727 ;;  pChunk          1    3[COMRAM] unsigned char 
 31728 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 31729 ;; Auto vars:     Size  Location     Type
 31730 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 31731 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 31732 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 31733 ;; Return value:  Size  Location     Type
 31734 ;;                  1    wreg      unsigned char 
 31735 ;; Registers used:
 31736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31737 ;; Tracked objects:
 31738 ;;		On entry : 0/0
 31739 ;;		On exit  : 0/0
 31740 ;;		Unchanged: 0/0
 31741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31742 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31743 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31744 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31745 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31746 ;;Total ram usage:        9 bytes
 31747 ;; Hardware stack levels used:    1
 31748 ;; This function calls:
 31749 ;;		Nothing
 31750 ;; This function is called by:
 31751 ;;		i2_Byte_GetPair
 31752 ;; This function uses a non-reentrant model
 31753 ;;
 31754                           
 31755                           	psect	text168
 31756  015A26                     __ptext168:
 31757                           	opt stack 0
 31758  015A26                     i2_Byte_GetZone:
 31759                           	opt stack 13
 31760                           
 31761                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 31762                           
 31763                           ;incstack = 0
 31764  015A26  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 31765  015A2A  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 31766  015A2E  0E00               	movlw	low (__mediumconst shr (0+16))
 31767  015A30  6EF8               	movwf	tblptru,c
 31768  015A32  0E0F               	movlw	(high __ramtop+-1)
 31769  015A34  64F7               	cpfsgt	tblptrh,c
 31770  015A36  D003               	bra	i2u538_47
 31771  015A38  0008               	tblrd		*
 31772  015A3A  50F5               	movf	tablat,w,c
 31773  015A3C  D005               	bra	i2u538_40
 31774  015A3E                     i2u538_47:
 31775  015A3E  CFF6 FFE9          	movff	tblptrl,fsr0l
 31776  015A42  CFF7 FFEA          	movff	tblptrh,fsr0h
 31777  015A46  50EF               	movf	indf0,w,c
 31778  015A48                     i2u538_40:
 31779  015A48  6E09               	movwf	i2Byte_GetZone@Output,c
 31780                           
 31781                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 31782  015A4A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31783  015A4C  0D01               	mullw	1
 31784  015A4E  0E0F               	movlw	low _MASKS
 31785  015A50  24F3               	addwf	prodl,w,c
 31786  015A52  6EF6               	movwf	tblptrl,c
 31787  015A54  0EFD               	movlw	high _MASKS
 31788  015A56  20F4               	addwfc	prodh,w,c
 31789  015A58  6EF7               	movwf	tblptrh,c
 31790  015A5A                     	if	1	;There are 3 active tblptr bytes
 31791  015A5A  6AF8               	clrf	tblptru,c
 31792  015A5C  0E00               	movlw	low (__mediumconst shr (0+16))
 31793  015A5E  22F8               	addwfc	tblptru,f,c
 31794  015A60                     	endif
 31795  015A60  0008               	tblrd		*
 31796  015A62  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 31797                           
 31798                           ;Types.c: 68: UINT8 Offset = 0;
 31799  015A66  0E00               	movlw	0
 31800  015A68  6E08               	movwf	i2Byte_GetZone@Offset,c
 31801                           
 31802                           ;Types.c: 70: while (pChunk >= pMax)
 31803  015A6A  D003               	goto	i2l732
 31804  015A6C                     
 31805                           ;Types.c: 71: {
 31806                           ;Types.c: 72: pChunk -= pMax;
 31807  015A6C  5003               	movf	i2Byte_GetZone@pMax,w,c
 31808  015A6E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 31809                           
 31810                           ;Types.c: 73: Offset += 1;
 31811  015A70  2A08               	incf	i2Byte_GetZone@Offset,f,c
 31812  015A72                     i2l732:
 31813  015A72  5003               	movf	i2Byte_GetZone@pMax,w,c
 31814  015A74  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 31815  015A76  B0D8               	btfsc	status,0,c
 31816  015A78  D7F9               	goto	i2l733
 31817                           
 31818                           ;Types.c: 74: }
 31819                           ;Types.c: 75: pChunk *= pChunkSize;
 31820  015A7A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31821  015A7C  0204               	mulwf	i2Byte_GetZone@pChunk,c
 31822  015A7E  50F3               	movf	prodl,w,c
 31823  015A80  6E04               	movwf	i2Byte_GetZone@pChunk,c
 31824                           
 31825                           ;Types.c: 76: pChunk += Offset;
 31826  015A82  5008               	movf	i2Byte_GetZone@Offset,w,c
 31827  015A84  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 31828                           
 31829                           ;Types.c: 78: Output >>= pChunk;
 31830  015A86  2804               	incf	i2Byte_GetZone@pChunk,w,c
 31831  015A88  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 31832  015A8A  D002               	goto	i2u540_40
 31833  015A8C                     i2u540_45:
 31834  015A8C  90D8               	bcf	status,0,c
 31835  015A8E  3209               	rrcf	i2Byte_GetZone@Output,f,c
 31836  015A90                     i2u540_40:
 31837  015A90  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 31838  015A92  D7FC               	goto	i2u540_45
 31839                           
 31840                           ;Types.c: 79: Output &= MASK;
 31841  015A94  5007               	movf	i2Byte_GetZone@MASK,w,c
 31842  015A96  1609               	andwf	i2Byte_GetZone@Output,f,c
 31843                           
 31844                           ;Types.c: 80: return Output;
 31845  015A98  5009               	movf	i2Byte_GetZone@Output,w,c
 31846  015A9A  0012               	return	
 31847  015A9C                     __end_ofi2_Byte_GetZone:
 31848                           	opt stack 0
 31849                           tosu	equ	0xFFF
 31850                           tosh	equ	0xFFE
 31851                           tosl	equ	0xFFD
 31852                           pclatu	equ	0xFFB
 31853                           pclath	equ	0xFFA
 31854                           tblptru	equ	0xFF8
 31855                           tblptrh	equ	0xFF7
 31856                           tblptrl	equ	0xFF6
 31857                           tablat	equ	0xFF5
 31858                           prodh	equ	0xFF4
 31859                           prodl	equ	0xFF3
 31860                           intcon	equ	0xFF2
 31861                           indf0	equ	0xFEF
 31862                           postinc0	equ	0xFEE
 31863                           fsr0h	equ	0xFEA
 31864                           fsr0l	equ	0xFE9
 31865                           wreg	equ	0xFE8
 31866                           indf1	equ	0xFE7
 31867                           postdec1	equ	0xFE5
 31868                           fsr1h	equ	0xFE2
 31869                           fsr1l	equ	0xFE1
 31870                           indf2	equ	0xFDF
 31871                           postinc2	equ	0xFDE
 31872                           postdec2	equ	0xFDD
 31873                           plusw2	equ	0xFDB
 31874                           fsr2h	equ	0xFDA
 31875                           fsr2l	equ	0xFD9
 31876                           status	equ	0xFD8
 31877                           
 31878 ;; *************** function i2_Byte_SetBit *****************
 31879 ;; Defined at:
 31880 ;;		line 32 in file "Library/Types.c"
 31881 ;; Parameters:    Size  Location     Type
 31882 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31883 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 31884 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 31885 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 31886 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 31887 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 31888 ;;		 -> NULL(0), 
 31889 ;;  pBit            1    2[COMRAM] unsigned char 
 31890 ;;  pValue          1    3[COMRAM] unsigned char 
 31891 ;; Auto vars:     Size  Location     Type
 31892 ;;		None
 31893 ;; Return value:  Size  Location     Type
 31894 ;;                  1    wreg      void 
 31895 ;; Registers used:
 31896 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 31897 ;; Tracked objects:
 31898 ;;		On entry : 0/0
 31899 ;;		On exit  : 0/0
 31900 ;;		Unchanged: 0/0
 31901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31906 ;;Total ram usage:        7 bytes
 31907 ;; Hardware stack levels used:    1
 31908 ;; This function calls:
 31909 ;;		Nothing
 31910 ;; This function is called by:
 31911 ;;		i2_Port_SetPin
 31912 ;; This function uses a non-reentrant model
 31913 ;;
 31914                           
 31915                           	psect	text169
 31916  01633E                     __ptext169:
 31917                           	opt stack 0
 31918  01633E                     i2_Byte_SetBit:
 31919                           	opt stack 15
 31920                           
 31921                           ;Types.c: 34: pValue &= 1;
 31922                           
 31923                           ;incstack = 0
 31924  01633E  0E01               	movlw	1
 31925  016340  1604               	andwf	i2Byte_SetBit@pValue,f,c
 31926                           
 31927                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 31928  016342  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31929  016346  0E01               	movlw	1
 31930  016348  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 31931  01634A  2A05               	incf	??i2_Byte_SetBit,f,c
 31932  01634C  D002               	goto	i2u673_44
 31933  01634E                     i2u673_45:
 31934  01634E  90D8               	bcf	status,0,c
 31935  016350  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31936  016352                     i2u673_44:
 31937  016352  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31938  016354  D7FC               	goto	i2u673_45
 31939  016356  5006               	movf	??i2_Byte_SetBit+1,w,c
 31940  016358  0AFF               	xorlw	255
 31941  01635A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 31942  01635C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31943  016360  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31944  016364  5007               	movf	??i2_Byte_SetBit+2,w,c
 31945  016366  16DF               	andwf	indf2,f,c
 31946                           
 31947                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 31948  016368  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31949  01636C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 31950  016370  2A05               	incf	??i2_Byte_SetBit,f,c
 31951  016372  D002               	goto	i2u674_44
 31952  016374                     i2u674_45:
 31953  016374  90D8               	bcf	status,0,c
 31954  016376  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31955  016378                     i2u674_44:
 31956  016378  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31957  01637A  D7FC               	goto	i2u674_45
 31958  01637C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31959  016380  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31960  016384  5006               	movf	??i2_Byte_SetBit+1,w,c
 31961  016386  12DF               	iorwf	indf2,f,c
 31962  016388  0012               	return		;funcret
 31963  01638A                     __end_ofi2_Byte_SetBit:
 31964                           	opt stack 0
 31965                           tosu	equ	0xFFF
 31966                           tosh	equ	0xFFE
 31967                           tosl	equ	0xFFD
 31968                           pclatu	equ	0xFFB
 31969                           pclath	equ	0xFFA
 31970                           tblptru	equ	0xFF8
 31971                           tblptrh	equ	0xFF7
 31972                           tblptrl	equ	0xFF6
 31973                           tablat	equ	0xFF5
 31974                           prodh	equ	0xFF4
 31975                           prodl	equ	0xFF3
 31976                           intcon	equ	0xFF2
 31977                           indf0	equ	0xFEF
 31978                           postinc0	equ	0xFEE
 31979                           fsr0h	equ	0xFEA
 31980                           fsr0l	equ	0xFE9
 31981                           wreg	equ	0xFE8
 31982                           indf1	equ	0xFE7
 31983                           postdec1	equ	0xFE5
 31984                           fsr1h	equ	0xFE2
 31985                           fsr1l	equ	0xFE1
 31986                           indf2	equ	0xFDF
 31987                           postinc2	equ	0xFDE
 31988                           postdec2	equ	0xFDD
 31989                           plusw2	equ	0xFDB
 31990                           fsr2h	equ	0xFDA
 31991                           fsr2l	equ	0xFD9
 31992                           status	equ	0xFD8
 31993                           
 31994 ;; *************** function i2_MXK_SwitchTo *****************
 31995 ;; Defined at:
 31996 ;;		line 105 in file "Library/MXK.c"
 31997 ;; Parameters:    Size  Location     Type
 31998 ;;  pModule         1    wreg     enum E6927
 31999 ;; Auto vars:     Size  Location     Type
 32000 ;;  pModule         1    7[COMRAM] enum E6927
 32001 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 32002 ;; Return value:  Size  Location     Type
 32003 ;;                  1    wreg      unsigned char 
 32004 ;; Registers used:
 32005 ;;		wreg, status,2, status,0, cstack
 32006 ;; Tracked objects:
 32007 ;;		On entry : 0/0
 32008 ;;		On exit  : 0/0
 32009 ;;		Unchanged: 0/0
 32010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32015 ;;Total ram usage:        2 bytes
 32016 ;; Hardware stack levels used:    1
 32017 ;; Hardware stack levels required when called:    1
 32018 ;; This function calls:
 32019 ;;		i2_delay_us
 32020 ;; This function is called by:
 32021 ;;		i2_Motor_Step
 32022 ;; This function uses a non-reentrant model
 32023 ;;
 32024                           
 32025                           	psect	text170
 32026  0168EE                     __ptext170:
 32027                           	opt stack 0
 32028  0168EE                     i2_MXK_SwitchTo:
 32029                           	opt stack 15
 32030                           
 32031                           ;incstack = 0
 32032                           ;i2MXK_SwitchTo@pModule stored from wreg
 32033  0168EE  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 32034                           
 32035                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 32036  0168F0  5086               	movf	3974,w,c	;volatile
 32037  0168F2  0B0F               	andlw	15
 32038  0168F4  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 32039                           
 32040                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 32041  0168F6  504B               	movf	_Bus_State,w,c
 32042  0168F8  A4D8               	btfss	status,2,c
 32043  0168FA  D002               	goto	i2l1730
 32044                           
 32045                           ;MXK.c: 110: return 0;
 32046  0168FC  0E00               	movlw	0
 32047  0168FE  0012               	return	
 32048  016900                     i2l1730:
 32049                           
 32050                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 32051  016900  0E00               	movlw	0
 32052  016902  6E4B               	movwf	_Bus_State,c
 32053                           
 32054                           ;MXK.c: 114: if (CUR != pModule)
 32055  016904  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 32056  016906  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 32057  016908  B4D8               	btfsc	status,2,c
 32058  01690A  D00A               	goto	i2l1732
 32059                           
 32060                           ;MXK.c: 115: {
 32061                           ;MXK.c: 116: PORTG &= ~(0xF);
 32062  01690C  0EF0               	movlw	240
 32063  01690E  1686               	andwf	3974,f,c	;volatile
 32064                           
 32065                           ;MXK.c: 117: PORTG |= pModule;
 32066  016910  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 32067  016912  1286               	iorwf	3974,f,c	;volatile
 32068                           
 32069                           ;MXK.c: 120: delay_us(10);
 32070  016914  0E00               	movlw	0
 32071  016916  6E02               	movwf	i2delay_us@us+1,c
 32072  016918  0E0A               	movlw	10
 32073  01691A  6E01               	movwf	i2delay_us@us,c
 32074  01691C  EC68  F0B3         	call	i2_delay_us	;wreg free
 32075  016920                     i2l1732:
 32076                           
 32077                           ;MXK.c: 121: }
 32078                           ;MXK.c: 122: return 1;
 32079  016920  0E01               	movlw	1
 32080  016922  0012               	return	
 32081  016924                     __end_ofi2_MXK_SwitchTo:
 32082                           	opt stack 0
 32083                           tosu	equ	0xFFF
 32084                           tosh	equ	0xFFE
 32085                           tosl	equ	0xFFD
 32086                           pclatu	equ	0xFFB
 32087                           pclath	equ	0xFFA
 32088                           tblptru	equ	0xFF8
 32089                           tblptrh	equ	0xFF7
 32090                           tblptrl	equ	0xFF6
 32091                           tablat	equ	0xFF5
 32092                           prodh	equ	0xFF4
 32093                           prodl	equ	0xFF3
 32094                           intcon	equ	0xFF2
 32095                           indf0	equ	0xFEF
 32096                           postinc0	equ	0xFEE
 32097                           fsr0h	equ	0xFEA
 32098                           fsr0l	equ	0xFE9
 32099                           wreg	equ	0xFE8
 32100                           indf1	equ	0xFE7
 32101                           postdec1	equ	0xFE5
 32102                           fsr1h	equ	0xFE2
 32103                           fsr1l	equ	0xFE1
 32104                           indf2	equ	0xFDF
 32105                           postinc2	equ	0xFDE
 32106                           postdec2	equ	0xFDD
 32107                           plusw2	equ	0xFDB
 32108                           fsr2h	equ	0xFDA
 32109                           fsr2l	equ	0xFD9
 32110                           status	equ	0xFD8
 32111                           
 32112 ;; *************** function i2_delay_us *****************
 32113 ;; Defined at:
 32114 ;;		line 255 in file "Library/Types.c"
 32115 ;; Parameters:    Size  Location     Type
 32116 ;;  us              2    0[COMRAM] unsigned short 
 32117 ;; Auto vars:     Size  Location     Type
 32118 ;;  delay_us        4    2[COMRAM] unsigned long 
 32119 ;; Return value:  Size  Location     Type
 32120 ;;                  1    wreg      void 
 32121 ;; Registers used:
 32122 ;;		wreg, status,2, status,0
 32123 ;; Tracked objects:
 32124 ;;		On entry : 0/0
 32125 ;;		On exit  : 0/0
 32126 ;;		Unchanged: 0/0
 32127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32131 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32132 ;;Total ram usage:        6 bytes
 32133 ;; Hardware stack levels used:    1
 32134 ;; This function calls:
 32135 ;;		Nothing
 32136 ;; This function is called by:
 32137 ;;		i2_MXK_SwitchTo
 32138 ;; This function uses a non-reentrant model
 32139 ;;
 32140                           
 32141                           	psect	text171
 32142  0166D0                     __ptext171:
 32143                           	opt stack 0
 32144  0166D0                     i2_delay_us:
 32145                           	opt stack 15
 32146                           
 32147                           ;Types.c: 256: unsigned long u;
 32148                           ;Types.c: 257: while (us--) {
 32149                           
 32150                           ;incstack = 0
 32151  0166D0  D016               	goto	i2u677_40
 32152  0166D2                     i2l9990:
 32153                           
 32154                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 32155  0166D2  0E00               	movlw	0
 32156  0166D4  6E03               	movwf	i2delay_us@u,c
 32157  0166D6  0E00               	movlw	0
 32158  0166D8  6E04               	movwf	i2delay_us@u+1,c
 32159  0166DA  0E00               	movlw	0
 32160  0166DC  6E05               	movwf	i2delay_us@u+2,c
 32161  0166DE  0E00               	movlw	0
 32162  0166E0  6E06               	movwf	i2delay_us@u+3,c
 32163  0166E2                     i2l9992:
 32164  0166E2  5003               	movf	i2delay_us@u,w,c
 32165  0166E4  1004               	iorwf	i2delay_us@u+1,w,c
 32166  0166E6  1005               	iorwf	i2delay_us@u+2,w,c
 32167  0166E8  1006               	iorwf	i2delay_us@u+3,w,c
 32168  0166EA  A4D8               	btfss	status,2,c
 32169  0166EC  D008               	goto	i2u677_40
 32170  0166EE  F000               	nop		; ;# 
 32171  0166F0  0E01               	movlw	1
 32172  0166F2  2603               	addwf	i2delay_us@u,f,c
 32173  0166F4  0E00               	movlw	0
 32174  0166F6  2204               	addwfc	i2delay_us@u+1,f,c
 32175  0166F8  2205               	addwfc	i2delay_us@u+2,f,c
 32176  0166FA  2206               	addwfc	i2delay_us@u+3,f,c
 32177  0166FC  D7F2               	goto	i2l9992
 32178  0166FE                     i2u677_40:
 32179  0166FE  0601               	decf	i2delay_us@us,f,c
 32180  016700  A0D8               	btfss	status,0,c
 32181  016702  0602               	decf	i2delay_us@us+1,f,c
 32182  016704  2801               	incf	i2delay_us@us,w,c
 32183  016706  E1E5               	bnz	i2l9990
 32184  016708  2802               	incf	i2delay_us@us+1,w,c
 32185  01670A  B4D8               	btfsc	status,2,c
 32186  01670C  0012               	return	
 32187  01670E  D7E1               	goto	i2l832
 32188  016710                     __end_ofi2_delay_us:
 32189                           	opt stack 0
 32190                           tosu	equ	0xFFF
 32191                           tosh	equ	0xFFE
 32192                           tosl	equ	0xFFD
 32193                           pclatu	equ	0xFFB
 32194                           pclath	equ	0xFFA
 32195                           tblptru	equ	0xFF8
 32196                           tblptrh	equ	0xFF7
 32197                           tblptrl	equ	0xFF6
 32198                           tablat	equ	0xFF5
 32199                           prodh	equ	0xFF4
 32200                           prodl	equ	0xFF3
 32201                           intcon	equ	0xFF2
 32202                           indf0	equ	0xFEF
 32203                           postinc0	equ	0xFEE
 32204                           fsr0h	equ	0xFEA
 32205                           fsr0l	equ	0xFE9
 32206                           wreg	equ	0xFE8
 32207                           indf1	equ	0xFE7
 32208                           postdec1	equ	0xFE5
 32209                           fsr1h	equ	0xFE2
 32210                           fsr1l	equ	0xFE1
 32211                           indf2	equ	0xFDF
 32212                           postinc2	equ	0xFDE
 32213                           postdec2	equ	0xFDD
 32214                           plusw2	equ	0xFDB
 32215                           fsr2h	equ	0xFDA
 32216                           fsr2l	equ	0xFD9
 32217                           status	equ	0xFD8
 32218                           
 32219 ;; *************** function i2_MXK_Release *****************
 32220 ;; Defined at:
 32221 ;;		line 130 in file "Library/MXK.c"
 32222 ;; Parameters:    Size  Location     Type
 32223 ;;		None
 32224 ;; Auto vars:     Size  Location     Type
 32225 ;;		None
 32226 ;; Return value:  Size  Location     Type
 32227 ;;                  1    wreg      unsigned char 
 32228 ;; Registers used:
 32229 ;;		wreg, status,2, status,0
 32230 ;; Tracked objects:
 32231 ;;		On entry : 0/0
 32232 ;;		On exit  : 0/0
 32233 ;;		Unchanged: 0/0
 32234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32239 ;;Total ram usage:        0 bytes
 32240 ;; Hardware stack levels used:    1
 32241 ;; This function calls:
 32242 ;;		Nothing
 32243 ;; This function is called by:
 32244 ;;		i2_Motor_Step
 32245 ;; This function uses a non-reentrant model
 32246 ;;
 32247                           
 32248                           	psect	text172
 32249  016EFC                     __ptext172:
 32250                           	opt stack 0
 32251  016EFC                     i2_MXK_Release:
 32252                           	opt stack 16
 32253                           
 32254                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 32255                           
 32256                           ;incstack = 0
 32257  016EFC  0E01               	movlw	1
 32258  016EFE  6E4B               	movwf	_Bus_State,c
 32259                           
 32260                           ;MXK.c: 135: return 1;
 32261                           ;	Return value of i2_MXK_Release is never used
 32262  016F00  0012               	return	
 32263  016F02                     __end_ofi2_MXK_Release:
 32264                           	opt stack 0
 32265                           tosu	equ	0xFFF
 32266                           tosh	equ	0xFFE
 32267                           tosl	equ	0xFFD
 32268                           pclatu	equ	0xFFB
 32269                           pclath	equ	0xFFA
 32270                           tblptru	equ	0xFF8
 32271                           tblptrh	equ	0xFF7
 32272                           tblptrl	equ	0xFF6
 32273                           tablat	equ	0xFF5
 32274                           prodh	equ	0xFF4
 32275                           prodl	equ	0xFF3
 32276                           intcon	equ	0xFF2
 32277                           indf0	equ	0xFEF
 32278                           postinc0	equ	0xFEE
 32279                           fsr0h	equ	0xFEA
 32280                           fsr0l	equ	0xFE9
 32281                           wreg	equ	0xFE8
 32282                           indf1	equ	0xFE7
 32283                           postdec1	equ	0xFE5
 32284                           fsr1h	equ	0xFE2
 32285                           fsr1l	equ	0xFE1
 32286                           indf2	equ	0xFDF
 32287                           postinc2	equ	0xFDE
 32288                           postdec2	equ	0xFDD
 32289                           plusw2	equ	0xFDB
 32290                           fsr2h	equ	0xFDA
 32291                           fsr2l	equ	0xFD9
 32292                           status	equ	0xFD8
 32293                           
 32294 ;; *************** function i2_MXK_Queue *****************
 32295 ;; Defined at:
 32296 ;;		line 144 in file "Library/MXK.c"
 32297 ;; Parameters:    Size  Location     Type
 32298 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 32299 ;;		 -> Absolute function(1), Motor_Step(1), 
 32300 ;; Auto vars:     Size  Location     Type
 32301 ;;		None
 32302 ;; Return value:  Size  Location     Type
 32303 ;;                  1    wreg      void 
 32304 ;; Registers used:
 32305 ;;		wreg, status,2, status,0
 32306 ;; Tracked objects:
 32307 ;;		On entry : 0/0
 32308 ;;		On exit  : 0/0
 32309 ;;		Unchanged: 0/0
 32310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32315 ;;Total ram usage:        3 bytes
 32316 ;; Hardware stack levels used:    1
 32317 ;; This function calls:
 32318 ;;		Nothing
 32319 ;; This function is called by:
 32320 ;;		i2_Motor_Step
 32321 ;; This function uses a non-reentrant model
 32322 ;;
 32323                           
 32324                           	psect	text173
 32325  016E6E                     __ptext173:
 32326                           	opt stack 0
 32327  016E6E                     i2_MXK_Queue:
 32328                           	opt stack 16
 32329                           
 32330                           ;MXK.c: 146: lQueue = pCallback;
 32331                           
 32332                           ;incstack = 0
 32333  016E6E  C001  F060         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 32334  016E72  C002  F061         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 32335  016E76  C003  F062         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 32336  016E7A  0012               	return		;funcret
 32337  016E7C                     __end_ofi2_MXK_Queue:
 32338                           	opt stack 0
 32339                           tosu	equ	0xFFF
 32340                           tosh	equ	0xFFE
 32341                           tosl	equ	0xFFD
 32342                           pclatu	equ	0xFFB
 32343                           pclath	equ	0xFFA
 32344                           tblptru	equ	0xFF8
 32345                           tblptrh	equ	0xFF7
 32346                           tblptrl	equ	0xFF6
 32347                           tablat	equ	0xFF5
 32348                           prodh	equ	0xFF4
 32349                           prodl	equ	0xFF3
 32350                           intcon	equ	0xFF2
 32351                           indf0	equ	0xFEF
 32352                           postinc0	equ	0xFEE
 32353                           fsr0h	equ	0xFEA
 32354                           fsr0l	equ	0xFE9
 32355                           wreg	equ	0xFE8
 32356                           indf1	equ	0xFE7
 32357                           postdec1	equ	0xFE5
 32358                           fsr1h	equ	0xFE2
 32359                           fsr1l	equ	0xFE1
 32360                           indf2	equ	0xFDF
 32361                           postinc2	equ	0xFDE
 32362                           postdec2	equ	0xFDD
 32363                           plusw2	equ	0xFDB
 32364                           fsr2h	equ	0xFDA
 32365                           fsr2l	equ	0xFD9
 32366                           status	equ	0xFD8
 32367                           tosu	equ	0xFFF
 32368                           tosh	equ	0xFFE
 32369                           tosl	equ	0xFFD
 32370                           pclatu	equ	0xFFB
 32371                           pclath	equ	0xFFA
 32372                           tblptru	equ	0xFF8
 32373                           tblptrh	equ	0xFF7
 32374                           tblptrl	equ	0xFF6
 32375                           tablat	equ	0xFF5
 32376                           prodh	equ	0xFF4
 32377                           prodl	equ	0xFF3
 32378                           intcon	equ	0xFF2
 32379                           indf0	equ	0xFEF
 32380                           postinc0	equ	0xFEE
 32381                           fsr0h	equ	0xFEA
 32382                           fsr0l	equ	0xFE9
 32383                           wreg	equ	0xFE8
 32384                           indf1	equ	0xFE7
 32385                           postdec1	equ	0xFE5
 32386                           fsr1h	equ	0xFE2
 32387                           fsr1l	equ	0xFE1
 32388                           indf2	equ	0xFDF
 32389                           postinc2	equ	0xFDE
 32390                           postdec2	equ	0xFDD
 32391                           plusw2	equ	0xFDB
 32392                           fsr2h	equ	0xFDA
 32393                           fsr2l	equ	0xFD9
 32394                           status	equ	0xFD8
 32395                           
 32396                           	psect	text174
 32397  000000                     __ptext174:
 32398                           	opt stack 0
 32399                           tosu	equ	0xFFF
 32400                           tosh	equ	0xFFE
 32401                           tosl	equ	0xFFD
 32402                           pclatu	equ	0xFFB
 32403                           pclath	equ	0xFFA
 32404                           tblptru	equ	0xFF8
 32405                           tblptrh	equ	0xFF7
 32406                           tblptrl	equ	0xFF6
 32407                           tablat	equ	0xFF5
 32408                           prodh	equ	0xFF4
 32409                           prodl	equ	0xFF3
 32410                           intcon	equ	0xFF2
 32411                           indf0	equ	0xFEF
 32412                           postinc0	equ	0xFEE
 32413                           fsr0h	equ	0xFEA
 32414                           fsr0l	equ	0xFE9
 32415                           wreg	equ	0xFE8
 32416                           indf1	equ	0xFE7
 32417                           postdec1	equ	0xFE5
 32418                           fsr1h	equ	0xFE2
 32419                           fsr1l	equ	0xFE1
 32420                           indf2	equ	0xFDF
 32421                           postinc2	equ	0xFDE
 32422                           postdec2	equ	0xFDD
 32423                           plusw2	equ	0xFDB
 32424                           fsr2h	equ	0xFDA
 32425                           fsr2l	equ	0xFD9
 32426                           status	equ	0xFD8
 32427                           
 32428                           	psect	rparam
 32429  0000                     tosu	equ	0xFFF
 32430                           tosh	equ	0xFFE
 32431                           tosl	equ	0xFFD
 32432                           pclatu	equ	0xFFB
 32433                           pclath	equ	0xFFA
 32434                           tblptru	equ	0xFF8
 32435                           tblptrh	equ	0xFF7
 32436                           tblptrl	equ	0xFF6
 32437                           tablat	equ	0xFF5
 32438                           prodh	equ	0xFF4
 32439                           prodl	equ	0xFF3
 32440                           intcon	equ	0xFF2
 32441                           indf0	equ	0xFEF
 32442                           postinc0	equ	0xFEE
 32443                           fsr0h	equ	0xFEA
 32444                           fsr0l	equ	0xFE9
 32445                           wreg	equ	0xFE8
 32446                           indf1	equ	0xFE7
 32447                           postdec1	equ	0xFE5
 32448                           fsr1h	equ	0xFE2
 32449                           fsr1l	equ	0xFE1
 32450                           indf2	equ	0xFDF
 32451                           postinc2	equ	0xFDE
 32452                           postdec2	equ	0xFDD
 32453                           plusw2	equ	0xFDB
 32454                           fsr2h	equ	0xFDA
 32455                           fsr2l	equ	0xFD9
 32456                           status	equ	0xFD8
 32457                           
 32458                           	psect	temp
 32459  000051                     btemp:
 32460                           	opt stack 0
 32461  000051                     	ds	1
 32462  0000                     int$flags	set	btemp
 32463  0000                     wtemp6	set	btemp+1
 32464                           tosu	equ	0xFFF
 32465                           tosh	equ	0xFFE
 32466                           tosl	equ	0xFFD
 32467                           pclatu	equ	0xFFB
 32468                           pclath	equ	0xFFA
 32469                           tblptru	equ	0xFF8
 32470                           tblptrh	equ	0xFF7
 32471                           tblptrl	equ	0xFF6
 32472                           tablat	equ	0xFF5
 32473                           prodh	equ	0xFF4
 32474                           prodl	equ	0xFF3
 32475                           intcon	equ	0xFF2
 32476                           indf0	equ	0xFEF
 32477                           postinc0	equ	0xFEE
 32478                           fsr0h	equ	0xFEA
 32479                           fsr0l	equ	0xFE9
 32480                           wreg	equ	0xFE8
 32481                           indf1	equ	0xFE7
 32482                           postdec1	equ	0xFE5
 32483                           fsr1h	equ	0xFE2
 32484                           fsr1l	equ	0xFE1
 32485                           indf2	equ	0xFDF
 32486                           postinc2	equ	0xFDE
 32487                           postdec2	equ	0xFDD
 32488                           plusw2	equ	0xFDB
 32489                           fsr2h	equ	0xFDA
 32490                           fsr2l	equ	0xFD9
 32491                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        31
    BSS         829
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     65     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      1     256
    BANK4           256     10     180
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_17(CODE[21]), 
		 -> STR_16(CODE[21]), STR_15(CODE[3]), STR_14(CODE[76]), STR_13(CODE[3]), 
		 -> STR_12(CODE[14]), STR_11(CODE[3]), STR_10(CODE[46]), STR_9(CODE[3]), 
		 -> STR_8(CODE[46]), STR_7(CODE[3]), STR_6(CODE[60]), STR_5(CODE[3]), 
		 -> STR_4(CODE[60]), STR_3(CODE[3]), STR_2(CODE[14]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _measureAndDisplayDistance->___fltol
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _correct_distance->_measureAndDisplayDistance
    _measureAndDisplayDistance->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _mode3->_move_and_rotate

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_mode1
    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2412583
                                              8 BANK4      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
          _measureAndDisplayDistance
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  433937
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                   _correct_distance
                           _delay_ms
                    _findClosestWall
                   _irobot_song_play
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
              _update_bump_and_cliff
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     18    18      0  129074
                                              0 BANK4      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                           _delay_ms
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (2) _correct_distance                                     6     6      0   61193
                                              6 BANK1      6     6      0
                        _irobot_move
          _measureAndDisplayDistance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  221675
                   _irobot_song_play
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      1     1      0  126297
                                              0 BANK3      1     1      0
                     _Console_Render
                             ___wmul
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       11     7      4   12761
                                             29 BANK0     11     7      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                0     0      0  237156
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _measureAndDisplayDistance                            4     4      0   56547
                                              2 BANK1      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            ___fldiv
                            ___fltol
 ---------------------------------------------------------------------------------
 (3) _irobot_move_straight                                 2     0      2    4726
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  204734
                                              0 BANK4      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   95316
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    4422
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    4391
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    7403
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1857
                                             57 BANK0      8     4      4
                                              0 BANK1      2     2      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    5967
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    3043
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4   10249
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     848
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3369
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    4615
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0 1001288
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  363224
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      1     1      0
                                              0 BANK1      5     2      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  292644
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262725
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   95349
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    2230
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1678
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   97279
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85621
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85621
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   38253
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    5158
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _measureAndDisplayDistance
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _irobot_song_play
       _eusart_putch
     _move_and_rotate
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       ___wmul
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _correct_distance
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _delay_ms
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      A      B4      14       70.3%
BITBANK3           100      0       0      10        0.0%
BANK3              100      1     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4A4      12        0.0%
DATA                 0      0     5D0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 17 21:34:36 2017

                                 _update_angle 6DF6                                  i2_Timer0_Stop 6EF6  
                             SPI_Init@pChannel 00E9                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3DB6                                              _A 004C  
                        __end_of_irobot_rotate 3CAA                                              l8 453E  
                                 ___fldiv@aexp 00D0                                   ___fldiv@bexp 00CF  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6C8E                                   ___fldiv@sign 00C4  
                                           l11 36D0                                             l12 36BA  
                                           l90 3606                                             l85 3502  
                                           l87 3570                                             l89 35DC  
                                 ___awdiv@sign 00BD                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BA                                  _HMI_DIPSwitch 6D2C  
                           LCD_DrawField@pSize 00D0                             LCD_DrawField@count 00D6  
                   __end_of_irobot_stop_motion 653C                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6E94                           ADC_ClockDivision@reg 00B9  
                                          l120 5494                                            l121 54AA  
                                          l122 54C0                                            l220 6064  
                                          l117 54D6                                            l221 6028  
                                          l118 547E                                            l230 62C0  
                                          l222 6074                                            l223 6046  
                                  ?_LED_Toggle 0001                                            l234 64E4  
                                          l235 64B4                                            l227 62DC  
                                          l403 3010                                            l412 2CEC  
                                          l228 62A4                                            l340 50A4  
                                          l404 2FB0                                            l237 64CC  
                                          l421 2C80                                            l413 2B82  
                                          l341 50B2                                            l405 3040  
                                ??_Console_Tab 00C0                                            l430 4784  
                                          l414 2D08                                            l350 51AC  
                                          l342 50C0                                            l510 21AE  
                                          l406 2FC8                                            l415 2BA8  
                                          l351 513C                                            l343 50CE  
                                          l511 22BE                                            l407 2FE0  
                                          l183 5260                                            l432 47AE  
                                          l600 0D66                                            l344 50DC  
                                          l512 21D0                                            l408 2FF8  
                                          l184 523A                                            l433 47DE  
                                          l417 2C14                                            l601 0EFA  
                                          l353 514A                                            l337 5106  
                                          l345 50EA                                            l610 0F82  
                                          l602 0D98                                            l354 5158  
                                          l346 50F8                                            l338 5096  
                                          l370 5036                                            l427 4808  
                                          l611 0FD0                                            l603 0F0C  
                                          l355 5166                                            l363 5060  
                                          l371 5044                                            l531 1C68  
                                  ?_HMI_GetBar 0001                                            l612 101E  
                                          l604 0E46                                            l356 5174  
                                          l372 5052                                            l364 4FF0  
                                          l532 1C8C                                            l516 2218  
                                          l357 5182                                            l509 22A2  
                                          l614 1100                                            l358 5190  
                                          l366 4FFE                                            l526 1CAC  
                                          l615 10F8                                            l607 106C  
                                          l359 519E                                            l367 500C  
                                          l519 2260                                            l616 1112  
                                          l608 0F34                                            l368 501A  
                                          l528 1CCA                                            l393 6196  
                                          l617 10FC                                            l609 108A  
                                          l369 5028                                            l529 1C48  
                                          l483 200E                                            l732 5418  
                                          l900 1D86                                            l476 20E6  
                                          l733 540C                                            l901 1D8A  
                                          l389 5EEC                                            l477 1F58  
                                          l397 6460                                            l910 1DAE  
                                          l902 1D8E                                            l726 4C0E  
                                          l478 2102                                            l486 207A  
                                          l654 6AD4                                            l911 1DB2  
                                          l903 1D92                                            l727 4C02  
                                          l479 1FA2                                            l655 6ACC  
                                          l912 1DB6                                            l904 1D96  
                                          l824 5E20                                            l832 624E  
                                          l913 1DBA                                            l905 1D9A  
                                          l921 5D96                                            l673 69AC  
                                          l657 6AD0                                            l681 5CEE  
                                          l914 1DBE                                            l906 1D9E  
                                          l922 5D62                                            l930 437C  
                                          l915 1DC2                                            l907 1DA2  
                                          l819 5930                                            l916 1DC6  
                                          l908 1DA6                                            l860 1CE6  
                                          l684 5D04                                            l781 67F6  
                                          l853 1DCE                                            l917 1DCA  
                                          l909 1DAA                                            l861 1CEA  
                                          l597 0D74                                            l870 1D0E  
                                          l862 1CEE                                            l854 1CD2  
                                          l598 0D5C                                            l678 5D2A  
                                          l686 5D14                                            l871 1D12  
                                          l863 1CF2                                            l599 0D84  
                                          l679 5CDE                                            l880 1D36  
                                          l872 1D16                                            l864 1CF6  
                                          l856 1CD6                                            l928 43FC  
                                          l776 656C                                            l881 1D3A  
                                          l873 1D1A                                            l865 1CFA  
                                          l857 1CDA                                            l929 43CC  
                                          l890 1D5E                                            l882 1D3E  
                                          l874 1D1E                                            l866 1CFE  
                                          l858 1CDE                                            l891 1D62  
                                          l883 1D42                                            l875 1D22  
                                          l867 1D02                                            l859 1CE2  
                                          l892 1D66                                            l884 1D46  
                                          l876 1D26                                            l868 1D06  
                                          l893 1D6A                                            l885 1D4A  
                                          l877 1D2A                                            l869 1D0A  
                                          l894 1D6E                                            l886 1D4E  
                                          l878 1D2E                                            l990 55A0  
                                          l895 1D72                                            l887 1D52  
                                          l879 1D32                                            l983 52FE  
                                          l896 1D76                                            l888 1D56  
                                          l976 56BA                                            l992 55B0  
                                          l984 5282                                            l897 1D7A  
                                          l889 1D5A                                            l985 52FA  
                                          l898 1D7E                                            l978 56CA  
                                          l899 1D82                                            l997 60FC  
                                          l999 6120                                            _PR2 000FCB  
                                          _dip 0343                                            _val 007A  
                              __end_of_ADC_Off 6ED6                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D1                                   _Word_GetPair 67CA  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00BF                     __end_of_ADC_ConversionTime 64AE  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00C8                             Console_MakeField@y 00C9  
                                   _TXSTA1bits 000FAD                                _update_distance 6DE4  
                                 Console_Tab@c 00C7                                   Console_Tab@i 00C6  
                          LCD_DrawField@pField 00CA                                   Console_Tab@t 00C5  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D3  
                                 ___flmul@bexp 00D8                                     i2_delay_us 66D0  
                         Port_Set@TypeRequired 00DA                                   ___flmul@sign 00D2  
                                 ___flmul@temp 00DD                                   ___flmul@prod 00D9  
                            Console_FormFeed@x 00BA                              Console_FormFeed@y 00BB  
                          LCD_DrawField@pPoint 00CC                                 ?_LCD_DrawField 00CA  
                        Port_SetPinType@Output 00E2                                Port_SetPin@Type 00CB  
                              Port_SetPin@pPin 00C9                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C1                                __end_of_LED_Set 62EE  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4E9A  
                                 ___fltol@exp1 0101                                   _Word_SetPair 653C  
                                         l1000 613C                                           l1010 4878  
                                         l1004 5F8C                                  ?_Byte_GetZone 00B8  
                                         l1005 5FBA                                           l1200 4B2E  
                                         l1040 2D36                                           l1201 4B82  
                                         l1009 4884                                           l1041 2D3C  
                                         l1202 4B9E                                           l1042 2D42  
                                         l1043 2D48                                           l1204 4BC8  
                                         l1300 574C                                           l1036 2E92  
                                         l1044 2D4E                                           l1205 4BAE  
                                         l1301 5750                                           l1045 2D54  
                                         l1037 2D30                                           l2021 5F1C  
                                         l2101 31D2                                           l1302 575A  
                                         l1062 256A                                           l2110 6602  
                                         l2030 5F14                                           l2022 5EF8  
                                         l2102 3116                                           l1207 4BDA  
                                         l1303 5768                                           l1063 2598  
                                         l1047 2DFA                                           l2031 5F18  
                                         l2103 315E                                           l1056 23FA  
                                         l2112 65EE                                           l2024 5EFC  
                                         l2040 3ED2                                           l2104 311C  
                                         l1313 648E                                           l1153 27D8  
                                         l3001 15CE                                           l1057 25C0  
                                         l2025 5F00                                           l2041 3ED8  
                                         l3010 1734                                           l3002 15FC  
                                         l1082 46FE                                           l1058 2402  
                                         l1146 5852                                           l2114 65F6  
                                         l2026 5F04                                           l2042 3EDE  
                                         l3011 1728                                           l3003 15F2  
                                         l1059 242C                                           l2027 5F08  
                                         l2035 3F6A                                           l2051 3F3E  
                                         l2043 3EE4                                           l3012 177C  
                                         l1084 4706                                           l2028 5F0C  
                                         l2044 3EEA                                           l2036 3EBC  
                                         l3005 1650                                           l1077 46CE  
                                         l2029 5F10                                           l1254 6DD8  
                                         l2118 5E0A                                           l3022 1826  
                                         l1158 674C                                           l2070 567A  
                                         l2062 5634                                           l2046 3EFE  
                                         l2038 3EC6                                           l2119 5DCC  
                                         l3015 17CC                                           l3007 167E  
                                         l3031 08D2                                           l1079 46DE  
                                         l2039 3ECC                                           l1280 57CE  
                                         l2144 61D4                                           l2320 4F70  
                                         l3024 1876                                           l3016 17A2  
                                         l3008 1780                                           l3032 08FC  
                                         l3025 18A4                                           l3017 17B8  
                                         l3009 16FC                                           l3033 08F6  
                                         l2049 3F2A                                           l2401 4134  
                                         l2330 497A                                           l2322 4FA2  
                                         l3026 18DA                                           l3050 0C72  
                                         l3034 090E                                           l2074 5698  
                                         l2066 5654                                           l2058 561A  
                                         l2162 3C34                                           l1283 5830  
                                         l3027 18EA                                           l3043 0C18  
                                         l3035 092C                                           l2139 4D1A  
                                         l2411 120E                                           l2163 3C20  
                                         l2403 4164                                           l1276 57B6  
                                         l3028 18EE                                           l3052 0CC2  
                                         l3044 0BEE                                           l3036 0956  
                                         l3060 2824                                           l2156 3BCC  
                                         l3053 0CE8                                           l3045 0C04  
                                         l3037 0950                                           l3061 2834  
                                         l2501 2ADE                                           l2173 6520  
                                         l2421 1382                                           l2413 12AE  
                                         l1294 5770                                           l1630 3AE4  
                                         l3038 0968                                           l3070 291E  
                                         l3062 285C                                           l2502 2B3C  
                                         l2414 12DE                                           l2166 3C82  
                                         l2158 3BD2                                           l2342 461E  
                                         l1295 5736                                           l1631 3B40  
                                         l3055 0D16                                           l3039 0990  
                                         l3071 290E                                           l2503 2AE4  
                                         l2095 30D2                                           l2335 63B2  
                                         l2167 3C5C                                           l2159 3BF4  
                                         l2343 45D0                                           l2351 00F0  
                                         l2328 4922                                           l1296 579A  
                                         l1632 3B24                                           l3056 0D40  
                                         l3064 2874                                           l2096 308C  
                                         l2416 132A                                           l2352 017C  
                                         l2329 494E                                           l1297 5740  
                                         l3057 0D36                                           l3065 2864  
                                         l2409 11DA                                           l1298 5744  
                                         l1730 6664                                           l2098 3102  
                                         l2338 63CE                                           l2426 1536  
                                         l2418 13EC                                           l2370 046C  
                                         l2362 0302                                           l2354 01C6  
                                         l1299 5748                                           l1627 3B8C  
                                         l3075 2944                                           l3067 28D0  
                                         l2099 30E6                                           l2427 149C  
                                         l2419 134A                                           l2435 4064  
                                         l1724 6798                                           l1732 668C  
                                         l1628 3B82                                           l3076 2996  
                                         l3068 28B2                                           l2436 4016  
                                         l2380 063C                                           l2372 050E  
                                         l2364 0388                                           l2356 0288  
                                         l1629 3B02                                           l2429 14D4  
                                         l2373 059A                                           l2365 03DE  
                                         l2357 01E6                                           l2349 004E  
                                         l2453 32D8                                           l2461 4184  
                                         l1726 67C6                                           l2438 408C  
                                         l2366 0414                                           l2446 3242  
                                         l2462 4230                                           l1735 6CC2  
                                         l2367 0874                                           l2383 0720  
                                         l2375 05E4                                           l2359 021E  
                                         l2455 3352                                           l2447 3266  
                                         l2463 418A                                           l2368 0424  
                                         l2448 325E                                           l2464 4260  
                                         l2385 079C                                           l2377 06A6  
                                         l2465 4190                                           l2378 0604  
                                         l2466 4196                                           l1827 3984  
                                         l2491 2A36                                           l2387 07DA  
                                         l2467 419C                                           l1828 39A4  
                                         l2492 29D2                                           l2484 29B6  
                                         l2388 0830                                           l2468 41A2  
                                         l2493 29EA                                           l2485 29CA  
                                         l2389 0866                                           l2910 59D8  
                                         l2486 29FA                                           l2494 29F4  
                                         l2911 59CC                                           l2495 2A6E  
                                         l2399 4104                                           l2920 60A4  
                                         l1784 381E                                           l2744 3D7E  
                                         l2736 3CD0                                           l2921 6098  
                                         l1873 683C                                           l1785 382C  
                                         l2745 3D6E                                           l2681 4A3A  
                                         l2497 2A88                                           l2914 5A0E  
                                         l2738 3D52                                           l2682 4A48  
                                         l2674 49C4                                           l2915 5A1C  
                                         l1787 3836                                           l2747 3DA4  
                                         l2739 3D3E                                           l2683 4A5C  
                                         l2675 49DA                                           l2924 60CE  
                                         l2925 60DC                                           l2861 4AFE  
                                         l2677 4A04                                           l2862 4B10  
                                         l2678 49F8                                           l2857 4AA4  
                                         l2858 4A94                                           l2997 1570  
                                         l2998 159E                                           l2999 1594  
                               ??_Console_Init 00B8                          Port_SetPinType@pInput 00DE  
                                         STR_1 FFFB                                           STR_2 FFED  
                                         STR_3 FFFB                                           STR_4 FF59  
                                         STR_5 FFFB                                           STR_6 FF59  
                                         STR_7 FFFB                                           STR_8 FF95  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 51DC  
                     __end_of_irobot_song_play 6DD0                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                          __end_of_GetPortTRIS 5090                                           u9220 53E2  
                                         u9310 65B6                                           u9240 5448  
                                         u9400 55F4                                           u9410 55FA  
                                         u9315 65B0                                           u9227 53D8  
                                         u9245 5442                                           u9430 59DE  
                                         u9334 4C4A                                           u9335 4C44  
                                         u9264 5FDA                                           u9344 4C7C  
                                         u9280 58CA                                           u9265 5FD4  
                                         u9345 4C76                                           u9274 600C  
                                         u9530 6286                                           u9275 6006  
                                         u9460 60AA                                           u9720 4A0A  
                                         u9570 43E8                                           _SPI1 0381  
                                         u9580 5F88                                           u9900 65E2  
                                         _SPI2 038C                                           u9485 6E16  
                                         u9814 5550                                           u9486 6E18  
                                         u9590 5FB2                                           u9815 554A  
                                         u9770 640C                                           u9930 4AAA  
                                         u9775 6406                                           _TMR0 000FD6  
                                         u9990 5E5E                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BD                                           _gISR 032E  
                           Event_DIPSwitch@Bar 00D2                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00BB                                  _iRVirtualWall 0030  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 00C7  
                                         _dist 0068                                  ?_Byte_SetByte 00B8  
                                ?_Byte_SetPair 00C3                                __end_of_SPI_DCS 69BA  
                                         _main 4180                     irobot_leds@powerLuminosity 00CA  
                                         _init 4F44                                           _mode 0341  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C3  
                                         _itos 433E                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00B8                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 59AE  
                                ??_Byte_SetBit 00BC                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 00BD  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 00C9  
                            Timer0_Init@DIVIDE 00CF                                ?_SPI_DisableISR 00B8  
                             Motor_Move@pMotor 00BB                            HMI_SetButton@pValue 00BE  
                   ?_measureAndDisplayDistance 0001                                  Console_Init@x 00BA  
                                Console_Init@y 00BB                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00BE  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6B7E  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 624C  
                             __end_of_LCD_Init 3652                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 6084  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F3  
                      GetPortProperties@pInput 00BA                                  ??_Button_Poll 00D6  
                             __end_of_HMI_Init 27DA                                          l14000 5AEE  
                                        l13220 5E20                                          l13302 3984  
                                        l13222 5E32                                          l13128 6E48  
                                        l13228 5E5E                                          l14222 46C4  
                                        l13422 584A                                          l12650 5596  
                                        l14308 381E                                          l14228 46D4  
                                        l14256 671A                                          l12656 55A6  
                                        l12762 624E                                          l12764 6260  
                                        l14516 2FA6                                          l12848 4BC8  
                                        l14480 622A                                          l14706 3C34  
                                        l12796 43E8                                          l14476 621C  
                             __end_of_HMI_Poll 5C6C                                          l13694 18DA  
                                        l14558 2422                                          l14840 56B0  
                                        l14818 3570                                          l14762 2A8E  
                                        l14828 3614                                          l14846 56C0  
                                        l17350 01E6                                          l14868 27AC  
                                        l13996 5AE0                                          l17614 134A  
                                        l17438 0604                                          l17632 13EC  
                                        l17456 06A6                                          l17392 03DE  
                                        l17368 0288                                          l17484 0830  
                                        l17478 079C                                          l17648 149C  
                                        _I2C1T 0040                                          _I2C2T 03D3  
                                ___fltol@sign1 0100                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 1912  
                              __end_of___awdiv 4A66                          irobot_rotate@isScript 00DB  
                                        ?_itos 00C4                                          STR_10 FF95  
                                        STR_11 FFFB                                          STR_20 FFC3  
                                        STR_12 FFED                                          STR_13 FFFB  
                                        STR_14 FF0D                                          STR_15 FFFB  
                                        STR_16 FFD8                                          STR_17 FFC3  
                                        STR_18 FFC3                                          STR_19 FFC3  
                              __end_of___flmul 0D5A                                __end_of___fltol 3DB6  
                              _Event_DIPSwitch 6A1A                                __end_of___lldiv 4B22  
                                        u10200 3AD6                                          u10210 3B16  
                                        u11005 1BD2                                          u10070 39F0  
                                        u10055 393C                                          u11015 1C14  
                                        u10160 58A0                                          u10090 6946  
                                        u11210 3CF0                                          u10155 5862  
                                        u11060 4748                                          u10190 3AC2  
                                        u11070 4754                                          u10095 6940  
                                        u11215 3CE4                                          u11160 388A  
                                        u10450 1820                                          u11250 3D88  
                      __size_of_HMI_LeftSwitch 0018                                ___awdiv@divisor 00BA  
                                        u11350 6246                                          u11328 45AA  
                                        u10480 188A                                          u10640 0C6C  
                                        u11440 25A8                                          u10490 18B8  
                                        u11610 3CA2                                          u11524 6972  
                                        u11380 3046                                          u10580 097C  
                                        u11525 696C                                          u10670 0CD6  
                                        u10590 0B90                                          u10808 3664  
                                        u11800 5722                                          u10680 0CFC  
                                        u10760 292C                                          u11560 3BC0  
                                        u10809 3678                                          u11490 6488  
                                        u11730 3500                                          u10595 0B84  
                                        u11900 63C8                                          u15100 077E  
                                        u11670 2ACA                                          u11590 3C54  
                                        u15110 0794                                          u10880 5B0A  
                                        u10945 1940                                          u10858 37A0  
                                        u12538 48FE                                          u11770 3614  
                                        u11690 2B48                                          u15130 0816  
                                        u12539 4912                                          u10955 1958  
                                        u15060 06BA                                          u10965 1970  
                                        u12558 492A                                          u12559 493E  
                                        u10975 1992                                          u15400 154A  
                                        u10985 1B12                                          u12578 4956  
                                        u11890 63A6                                          u15090 0734  
                                        u12579 496A                                          u10995 1B90  
                                        u15091 0732                                          u15340 1400  
                                        u12598 4982                                          u12599 4996  
                                        u14808 6762                                          u14920 029C  
                                        u14809 6778                                          u15490 3286  
                                        u14950 0316                                          u14951 0314  
                                        u14970 03C4                                          _INDEX 008B  
                              __end_of___lwdiv 5A26                                          _MASKS FD0F  
                              __end_of___lwmod 60E6                                          i2l430 4EB2  
                                        i2l432 4ED8                                          i2l433 4F02  
                                        i2l427 4F28                                          i2l732 5A72  
                                        i2l733 5A6C                                          i2l832 66D2  
                                        i2l781 6A08                                ___awdiv@counter 00BC  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CE                                __end_of_getMode 49A8  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03BF  
                                        _PortB 03B5                                          _PortC 00A3  
                                        _PortD 0099                                          _PortE 008F  
                                        _PortF 03C9                                          _PortG 03AB  
                      __end_of_Port_SetPinType 2D2A                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C4                          ??_irobot_led_power_on 00CC  
                                        _angle 033F                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CD                                __end_of_dpowers FD0F  
                               ??_Byte_GetZone 00BD                      irobot_move@moveTurnRadius 00CA  
                                        _mode1 1178                                          _mode2 3FA6  
                                        _mode3 660C                                          _mode4 31E0  
                               Button_Poll@Pin 00DB                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 48E8                               __end_of_MXK_Init 34E0  
                     __size_of_sort_iRBumpDrop 008C                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 6E28  
                             __end_of_SPI_Init 1178                               __end_of_SPI_Send 5D48  
                        __end_ofi2_MXK_Release 6F02                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 5DB4  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00BB  
                            __end_of_ADC_Start 5836                                 ??_Byte_SetPair 00C7  
                               ??_Byte_SetQuad 00C7                                          plusw2 000FDB  
                               ??_Byte_SetZone 00BE                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 5C6C                                _findClosestWall 0000  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 00B9                                 _LCD_Word_Write 6BDA  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 04AC  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00C8  
                                 ?_irobot_init 0001                                __initialization 4D42  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 00C8  
                          __end_of_Byte_GetBit 6958                         irobot_leds@powerColour 00C9  
                                 __end_of_main 4266                                   __end_of_init 4FEA  
             irobot_query_and_update@packetIDs 00CD                                   __end_of_itos 4416  
                         HMI_SetButton@reindex 00BA                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 6022                               __end_of_InitList FCE5  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6E1A  
                                    ??_ADC_Off 00B8                        __end_of_update_distance 6DF6  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 00C0  
                                       ??_main 04B2                                         ??_init 00F9  
                                       ??_itos 00C8                        _Console_MakeField$10974 00C6  
                                __activetblptr 000003                              Port_SetPin@pInput 00C7  
                            __end_of_LCD_Reset 633E                              Port_SetPin@pValue 00CA  
                                    ??_LED_Set 00CD                              _MXK_InitDIPSwitch 6C34  
                            GetPortPORT@pInput 00BA                         Port_CheckPairType@Pin1 00E2  
                       Port_CheckPairType@Pin2 00E3                              __end_of_LCD_Write 6B3A  
                                  _GetPortPORT 5136                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 4FEA                                ??_LCD_DrawField 00D4  
                   __end_of_PortProperty_Valid 5934                               __end_of_Port_Set 1CCC  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 45C0                            __end_of_Button_Poll 37B8  
                            Word_GetPair@pPair 00C6                        LCD_FillRectangle@pPoint 00C3  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 54F4  
                                    ??_SPI_DCS 00BA                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                             _angleToClosestWall 006A  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 6EEA                                  _HMI_SetNumber 6AA0  
                       Port_SetQuadType@Output 00F2                                         _ANCON0 000FC1  
                             ___awdiv@dividend 00B8                                         ?_putch 0001  
                             ??_Console_Render 00DB                                  ToSegment@pCHR 00B8  
                             _Console_FormFeed 5584                         Port_SetQuadType@pInput 00EE  
                                       i2l1630 3E1C                                         i2l1631 3E68  
                                       i2l1632 3E54                                         i2l1730 6900  
                                       i2l1627 3EA4                                         i2l1732 6920  
                                       i2l1628 3E9A                                         i2l1629 3E32  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9990 66D2  
                                       i2l9992 66E2                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 6BF8  
                               _Timer0_Restart 6E88                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F3                                         _TXREG1 000FAE  
                             __end_of___xxtofl 29A8                                 i2_MXK_SwitchTo 68EE  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 00BA  
                                   _Reset_High 6C16                             Console_Render@temp 00DD  
                               ??_HMI_UpSwitch 00BE                              ?_correct_distance 0001  
                               OutSeg@pSegment 00BB                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00CF                         ADC_SetChannel@pChannel 00B9  
                             __end_of_delay_ms 5E88                                   LED_Init@pLED 00E5  
                             __end_of_delay_us 629E                                  ??_Timer0_Init 00C9  
                                ??_Timer2_Init 00C9                                  ??_Timer0_Stop 00B8  
                                   _Timer0_ISR 6A48                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D2                                 __CFG_XINST$OFF 000000  
                           ??_correct_distance 00F9                                         _TimerX 00F9  
                                       _OutSeg 5836                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 4416                     __end_of_load_iRScriptStack 5E1E  
                                   _Motor_Move 687E                                         _iRWall 0035  
                                ??_Motor_Speed 00D7                                     _Motor_Step 3A78  
                          rx_assign@byteNumber 00BA                        __end_of_Event_DIPSwitch 6A48  
                                       ___wmul 68B8                                ??_HMI_DIPSwitch 00BE  
                load_iRScriptStack@bytesToLoad 00C6                                      ??___fldiv 00C0  
                                    ??___awdiv 00BC                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 00CE  
                                       _lMotor 007C                                      ??___fltol 00F5  
                                    ??___lldiv 00C0                                         _lQueue 0060  
                                   _TestButton 03A1                                      ??___lwdiv 00BC  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C3  
                     __end_of_Port_SetQuadType 21A6                                         _corner 03FD  
                     i2Byte_GetZone@pChunkSize 0005                                         _dummy1 0066  
                             __end_of_safeToGo 63D4                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 5728                              GetPortTRIS@pInput 00BA  
                           __size_of_Reset_Low 001E                                         clear_0 4DAA  
                                       clear_1 4DBC                                         clear_2 4DC8  
                                       clear_3 4DD4                                         clear_4 4DE0  
                             ___awdiv@quotient 00BE                     irobot_stop_motion@isScript 00D1  
                                ?_eusart_getch 0001                                     Port_Init@i 00F8  
                                   _iRDistance 0076                              __end_of_MXK_Queue 6E6E  
                   __end_ofHMI_SetButton@F7213 FD1C                                      ??_getMode 00DC  
                                   _iRBumpLeft 0085                                         _printf 29A8  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 6C52  
                                _ADC_Calibrate 6DD0                                     _iRDropLeft 0083  
                               HMI_SetButton@v 00BF                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00B9                                    _Console_Tab 4826  
                          LCD_Word_Write@value 00BD                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00BB  
                     Port_CheckPortType@Output 00F1                                      ?_ADC_Init 00BC  
                           _twos_complement_of 65C8                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC32                    __end_ofTimer2_Init@PRESCALE FD1F  
                     Port_CheckPortType@pDrive 00F0                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00EE                                  ??_Port_SetPin 00CB  
                                    ??_reverse 00BC                                     _StepRotate 0070  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00DE  
                                       putch@c 00CC                              Motor_Speed@pMotor 00D3  
                               ?_HMI_SetNumber 00CE                                 i2_Word_GetPair 69EA  
                      __end_of_Configure_GPIOs 5CDC                            irobot_leds@isScript 00CB  
                      __end_of_findClosestWall 08B4                               ??_MXK_TestButton 00BE  
                       __end_of_Timer0_Restart 6E94                                  Set_Rotation@m 00BD  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 00B8  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 6924                                   ___xxtofl@arg 00C2  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 00C1  
                                 ___xxtofl@val 00B8                          _update_bump_and_cliff 6844  
                              ?_LCD_Word_Write 00BD                                     __accesstop 0060  
                      __end_of__initialization 4DE6                                      ?_LCD_Fill 00C1  
        irobot_query_and_update@packetVariable 00D1                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00EA                                    _Byte_GetBit 6924  
                                   _Stepstomin 006E                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 6EA0                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00C0                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 00B8                                     ___fltol@f1 00F1  
                                  _Byte_SetBit 5FBE                                  __end_of_MASKS FD18  
                               _PortA_Property FF0B                                    ?_Event_NULL 0001  
                          correct_distance@_d1 0106                            correct_distance@_d2 0108  
                          correct_distance@_d3 010A                                      LCD_Fill@i 00C3  
                                    LCD_Fill@j 00C4                            load_iRScriptStack@i 00C7  
                                    LCD_Init@i 00EF                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 6ED6                                   __pidataBANK3 6E1A  
            irobot_move_straight@straightSpeed 00D1                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6C8E                                Console_Render@x 00E2  
                              Console_Render@y 00E3                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 545C                                  __end_of_mode1 1552  
                                __end_of_mode2 4094                                  __end_of_mode3 664E  
                                __end_of_mode4 3360                           ??_twos_complement_of 00BA  
                            irobot_leds@LEDBit 00C8                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 3918                                  __end_of_putch 6E36  
                               ??_eusart_getch 00B8                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 3A78                            __end_of_Timer0_Stop 6EE4  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E5  
                             ?_update_distance 0001                                      ?_SPI_Send 00B8  
                               ??_eusart_putch 00B8                                    _Button_Init 44EC  
                            Port_SetType@pType 00F4                                    _Button_Poll 3652  
                         __end_of_Byte_SetByte 6E60                           __end_of_Byte_SetPair 6B5C  
                               _HMI_LeftSwitch 6D8C                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 6B7E                                   ??_LED_Toggle 00D0  
                                 ??_HMI_GetBar 00B8                     eusart_putch@eusartSendChar 00B8  
                         __end_of_Byte_SetZone 4C92                            __end_of_Motor_Speed 6AA0  
                               _HMI_DownSwitch 6D44                                  SPI_Send@pData 00BA  
                        __end_of_MXK_DIPSwitch 6D2C                                   ??_HMI_SetBar 00B8  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C0  
                               _PortE_Property FF03                                     ??_ADC_Init 00BF  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 6A1A  
                      irobot_rotate@angleTotal 00DE                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00EB                        Port_CheckQuadType@Pair2 00EC  
                     MXK_BlockSwitchTo@pModule 00BF                                        ??_mode1 04AA  
                                      ??_mode2 00F9                                        ??_mode3 00F9  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 60E6                                ?_Timer0_Restart 0001  
                                      ??_putch 00CC                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 6690                              __end_of_ToSegment 1F50  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 65C8                             _irobot_stop_motion 64F6  
                      Port_CheckQuadType@pQuad 00E9                                reverse@iterator 00BD  
                             ??_SPI_DisableISR 00BA                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 6C16                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C3  
                                   ??_LCD_Init 00ED                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 4826                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CC                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00B8                                     ??_LED_Init 00E5  
                     ADC_ClockDivision@pDivide 00B8                             Byte_SetByte@pValue 00BA  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 6466                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F3                             ??_irobot_song_play 00B9  
                                   ??_HMI_Poll 00DC                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E5                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00B8                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 305A                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E0                             __end_of_LED_Toggle 64F6  
                           __end_of_HMI_GetBar 6EF6                       LCD_FillRectangle@pColour 00C1  
                                   _angleTotal 0345                            ??_Console_Backspace 00BA  
                            Set_Addr_Window@xe 00BE                              Set_Addr_Window@ye 00BF  
                            Set_Addr_Window@xs 00C0                              Set_Addr_Window@ys 00BD  
                  ??_measureAndDisplayDistance 00F9                                        ?_OutSeg 00BB  
                                  ?_Motor_Init 00E5                             Byte_SetPair@pInput 00C3  
                                  ?_Motor_Move 00BB                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C6                             __end_of_HMI_SetBar 6EBE  
                       __end_of_PortC_Property FF09                             Word_GetPair@pInput 00C4  
                           __end_of_HMI_Render 674E                                 ??_Set_Rotation 00BD  
                                    ?_Port_Set 00C7                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 00B8                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BD                                   ??_ISR_Enable 00B8  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 6DA4  
                       __end_of_PortD_Property FF07                                        _ADC_AN0 00B3  
                                      _ADC_AN1 03E4                                        _ADC_AN2 03DF  
                                      _ADC_AN3 03DA                                     ??_MXK_Init 00F9  
                            Port_GetPin@pInput 00B8                              _Console_MakeField 4692  
                                      _ADC_Off 6ECE                              ??_Console_NewLine 00B8  
                     ADC_ClockDivision@unfound 00BA                         __end_of_HMI_DownSwitch 6D5C  
                                   ??_SPI_Init 00EB                         Event_TestButton@pState 00D1  
                                   ??_SPI_Send 00BB                                        ?_printf 00CD  
                            ??_HMI_InitButtons 00B8                     __size_of_MXK_InitDIPSwitch 001E  
                     __size_of_move_and_rotate 00D2                         __end_of_PortE_Property FF05  
                          Console_Render@F6956 03F1                             ?_Console_MakeField 00BD  
                                      _COUNTER 0029                                ??_HMI_SetButton 00B8  
                         __end_of_HMI_UpSwitch 6D74                           ??_irobot_stop_motion 00D1  
                                      _LED_Set 629E                        _Console_IncrementCursor 5F58  
                                    ?___xxtofl 00B8                         __end_of_PortF_Property FF03  
                                  _gBackcolour 0080                                ??_HMI_SetNumber 00D0  
                                    _I2C1_Done 033A                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 0337                                      _I2C1_More 0334  
                                    _I2C2_More 0331                                      ?_delay_ms 00B8  
                    __end_of_Console_Backspace 6142                                      ?_delay_us 00B8  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 6C70  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 00B8                         __end_of_PortG_Property FF01  
                          ??_Console_MakeField 00BF                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 006C                                        _SPI_DCS 698A  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 00B8  
                             ?_Configure_GPIOs 0001                               ?_findClosestWall 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 010C                               ADC_Init@pChannel 00BE  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00E3  
                           __end_of_ISR_Enable 6EB4                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 00B8  
                            Event_TestButton@j 0087                                      ?_safeToGo 0001  
                                   ??_Mode_Set 00B8                                 ??_Timer2_Clear 00B8  
                                      _Font5x7 FD1F                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 00B9                                        _MinDist 00FB  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 00BB  
                         SPI_DisableISR@pInput 00B8                                  ?_Port_GetQuad 00B8  
                              Byte_SetBit@pBit 00BA                           Port_TogglePin@pInput 00CC  
                        __end_ofi2_Byte_SetBit 638A                                      _ADC_Start 57B2  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00BA  
                                  _Timer0_Init 37B8                                    _Timer2_Init 3918  
                                      __Lparam 0000                                    _Timer0_Stop 6EDE  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FD05                                        _iRAngle 0074  
                                LCD_Write@mode 00BB                                __size_of_OutSeg 0082  
                                   ??_Port_Set 00CA                                        _iRValue 033D  
                    __end_of_Console_MakeField 4762                              _Console_PrintChar 2D2A  
                                  _Motor_Speed 6A76                                        _Stepper 00AD  
                                ?_Port_SetType 00F2                                        _gCursor 0047  
                                      ___fldiv 1552                                        ___awdiv 49A8  
                        ??_Console_ClearCursor 00B8                                        ___flmul 08B4  
                                      ___fltol 3CAA                                        _lBuffer 04B4  
                                      ___lldiv 4A66                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00B8                                        ___lwdiv 59AE  
                                      ___lwmod 6084                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 5612                             ?_Console_PrintChar 0001  
                                      __pcinit 4D42                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 48E8  
                                      __ptext0 4180                                        __ptext1 31E0  
                                      __ptext2 0000                                        __ptext3 4094  
                                      __ptext4 660C                                        __ptext5 45C0  
                                      __ptext6 3B9E                                        __ptext7 3FA6  
                                      __ptext8 5322                                        __ptext9 6CFC  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6CAA                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CC                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D1                                     ??___xxtofl 00BC  
                                 ?_GetPortPORT 00B8                                   ?_GetPortTRIS 00B8  
                          ??_Console_PrintChar 00C8                                    _Port_GetPin 6582  
                    _measureAndDisplayDistance 5322                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03ED                            LCD_DrawRectangle@p4 03E9  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00BA  
                                   ??_delay_us 00BA                                        _reverse 5D48  
                                    _DIPSwitch 0397                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 4762                                    _iRBumpRight 0086  
                               LCD_DrawField@i 00DA                                      _LCD_Reset 62EE  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 6B18  
                                  _iRDropRight 0084                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00B8                           end_of_initialization 4DE6  
                          ADC_SetupIO@pChannel 00BA                              ??_get_packet_size 00B8  
irobot_query_and_update@numberOfPacketRequests 00D0                                     delay_us@us 00B8  
                            ??_HMI_SetSegments 00BB                        Console_PrintChar@pInput 00CB  
                                 _Console_Init 569E                           __end_of_eusart_getch 6EC6  
                      _irobot_query_and_update 305A                                     ??_safeToGo 00DC  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 5EF2  
                         __end_of_eusart_putch 6E52                                        itos@Out 00CC  
                               ??_Port_GetQuad 00BB                             _PortProperty_Valid 58B8  
                           Byte_SetQuad@pInput 00C3                             SPI_MinSpeed@pInput 00C7  
                                    i2u1519_48 6A60                             Byte_SetQuad@pValue 00C6  
                          __end_of_ADC_SetupIO 698A                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 00BC  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 00BA  
                            ??_HMI_RightSwitch 00BE                                ___lldiv@counter 00C4  
                    __end_of_Console_PrintChar 2EC8                            __end_of_ADC_Voltage 433E  
                               ??_Port_SetType 00F5                     __end_of_Port_CheckQuadType 619C  
                                      printf@c 00E0                                        printf@f 00CD  
                               Port_Init@pPort 0102                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00C1  
                            __end_of_rx_assign 3FA6                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00C7  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 6466  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 6710  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 3B9E  
                        Timer0_Init@pFrequency 00C5                              ?_Port_SetQuadType 00EE  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 00BC  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                    __size_of_correct_distance 00EC                             ??_Port_SetQuadType 00F2  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BE  
                        Console_Render@lCursor 00DE                             _load_iRScriptStack 5DB4  
                                    _MXK_Queue 6E60                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C0                               Byte_GetZone@pMax 00BA  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C4                                _Set_Addr_Window 4DF0  
                               SPI_Init@pClock 00E5                               ??_LCD_Word_Write 00BF  
                              _sort_iRBumpDrop 5612                              ??_move_and_rotate 03FF  
                                  ___fldiv@grs 00CB                                    ___fldiv@rem 00C5  
                        __end_of_LCD_DrawField 5280                                 Port_Set@pInput 00C7  
                               SPI_Init@pInput 00EB                           ??_PortProperty_Valid 00CB  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00C9  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 54F4  
                                   ?_LCD_Write 00BB                                   _Byte_GetPair 6C70  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00B8  
                                 _Byte_GetZone 53C0                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00D8                              LCD_DrawField@ymax 00D9  
                               __end_of_ADC_On 6EF0                                 _Port_TogglePin 69BA  
                             _Event_TestButton 6808                                    ___flmul@grs 00D4  
                         Port_SetPinType@Props 00E3                                   ?_Byte_GetBit 00B8  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6E52  
                                 _Byte_SetPair 6B3A                                ADC_SetupIO@MASK 00BB  
                                 _Byte_SetQuad 6B5C                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4BDC                           Port_SetPinType@pType 00E1  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B8  
                                ?_SPI_MaxSpeed 00C7                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00B8                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C7  
                        __end_ofi2_Timer0_Stop 6EFC                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D5  
                               __end_of_OutSeg 58B8                           ??_load_iRScriptStack 00C2  
                 __end_of_irobot_move_straight 6D14                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 68EE                          __end_of_HMI_DIPSwitch 6D44  
                                __pidataCOMRAM 6EA0                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D3                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 6E88                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6ECE                                 __end_of_printf 2B6A  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00B8  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C4  
                             ??_Timer0_Restart 00B8                           __end_of_Timer0_Start 6B18  
                           Port_SetType@Output 00F7                            start_initialization 4D42  
                                   ?_MXK_Queue 00B8                       PortProperty_Valid@Errors 00CD  
                             ??i2_MXK_SwitchTo 0007                             _correctOrientation 0082  
                            _LCD_FillRectangle 5A9C                             Port_SetType@pInput 00F2  
                               _ADC_SetChannel 6CC6                                     HMI_Init@in 00F3  
                          HMI_SetNumber@pInput 00CE                          __end_ofi2_Port_SetPin 4F44  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 00B9  
                       __end_of_Port_TogglePin 69EA                                  ?_Word_SetPair 00C7  
                            Byte_SetBit@pInput 00B8                                       ??_ADC_On 00B8  
                               ??_MXK_SwitchTo 00BE                              Byte_SetBit@pValue 00BB  
                           ?_LCD_FillRectangle 00C1                      ??_irobot_query_and_update 00C8  
                          _Console_ResetCursor 6B9E                    PortProperty_Valid@pPinDrive 00C9  
                                  _ADC_SetupIO 6958                           MXK_BlockSwitchTo@CUR 00BE  
                     PortProperty_Valid@pInput 00C7                                  i2_MXK_Release 6EFC  
                                  _ADC_Voltage 4266                         LCD_FillRectangle@pSize 00C7  
                               SPI_Send@pInput 00B8                                   ??_Reset_High 00CC  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00C9  
                        Port_SetQuadType@pQuad 00F0                                      _ToSegment 1CCC  
                          ??_LCD_FillRectangle 00CB                          Port_SetQuadType@pType 00F1  
                              _Console_NewLine 5280                                 ??_SPI_MinSpeed 00C9  
                                  ??_ADC_Start 00BC                                   _HMI_UpSwitch 6D5C  
                                    _Reset_Low 6BF8                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 6EE4                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D5  
                               ADC_Init@pInput 00BC                                      _gCharSize 03F9  
                             Timer2_Init@INDEX 0089                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 00E9  
                                     ??_OutSeg 00BC                                      OutSeg@out 00BF  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 00BF  
                                 ??_Motor_Step 00CC                                      _iRAngleSS 031E  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 00C1                                       ??___wmul 00BC  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2EC8  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03F1  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00BB  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00B8                             Byte_SetZone@pValue 00BD  
                                Mode_Set@pMode 00B8                                       ??_printf 00D9  
                      __end_of_Set_Addr_Window 4E9A                       Port_CheckQuadType@Output 00ED  
                      __end_of_sort_iRBumpDrop 569E                                      _gLineSize 03F5  
                     Port_CheckQuadType@pDrive 00EA                                 ??_Word_GetPair 00C7  
                     Port_CheckQuadType@pInput 00E7                           __end_of_Port_GetQuad 641E  
                                    ___fldiv@a 00BC                                      ___fldiv@b 00B8  
                    __end_of_LCD_FillRectangle 5B10                                    __pbssBIGRAM 04B4  
                       __end_of_ADC_SetChannel 6CE2                                       ?_LED_Set 00CC  
                                    ___flmul@a 00CA                                      ___flmul@b 00C6  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 00BA  
                           __end_of_Reset_High 6C34                                  __pcstackBANK0 00B8  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03FF                                  __pcstackBANK4 04AA  
                      ??_update_bump_and_cliff 00D5                                     itos@Length 00CA  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CB  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6A76                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D1                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 23D0                                       ?_SPI_DCS 00B8  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CC  
                                ??_eusart_init 00B8                                    ??_LCD_Write 00BC  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 44EC                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 68B8                             __end_of_Motor_Step 3B9E  
                        Timer2_Init@pFrequency 00C5                                 ?i2_MXK_Release 0001  
           __size_of_measureAndDisplayDistance 009E                       Port_CheckPairType@Output 00E4  
            twos_complement_of@complementValue 00B8                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00E1                       Port_CheckPairType@pInput 00DE  
                               reverse@tempVar 00BC                             _MXK_InitTestButton 6C52  
                                   ?_Reset_Low 0001                              __size_of_safeToGo 004A  
                                 ?_Timer0_Init 00C5                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C5                               ??_HMI_LeftSwitch 00BE  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00B8  
                                ??_irobot_leds 00CB                                  ??_irobot_init 00B9  
                              ??_irobot_rotate 00D9                                  ??_irobot_move 00CC  
                                _lStepFunction 0063                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C5                               ??_HMI_DownSwitch 00BE  
                                    __pintcode 1408                                  __pmediumconst FC32  
                                 ?_Motor_Speed 00D3                          ??_Console_ResetCursor 00B8  
                                     ?___fldiv 00B8                                       ?___awdiv 00B8  
                                    __ptext100 3918                                      __ptext101 4A66  
                                    __ptext110 1F50                                      __ptext102 6EC6  
                                    __ptext111 653C                                      __ptext103 6ACA  
                                    __ptext120 5934                                      __ptext112 6B3A  
                                    __ptext104 698A                                      __ptext121 6958  
                                    __ptext113 6142                                      __ptext105 44EC  
                                    __ptext130 3652                                      __ptext122 6CC6  
                                    __ptext114 5E88                                      __ptext106 6C34  
                                    __ptext131 6D14                                      __ptext123 6466  
                                    __ptext115 58B8                                      __ptext107 6EE4  
                                    __ptext140 1404                                      __ptext132 6D2C  
                                    __ptext124 5728                                      __ptext116 6B5C  
                                    __ptext108 6C52                                      __ptext141 6808  
                                    __ptext133 6D44                                      __ptext125 6DD0  
                                    __ptext117 4BDC                                      __ptext109 2B6A  
                                    __ptext150 64AE                                      __ptext142 6AA0  
                                    __ptext134 6D5C                                      __ptext126 6EEA  
                                    __ptext118 569E                                      __ptext151 69BA  
                                    __ptext143 433E                                      __ptext135 6D74  
                                    __ptext127 6ECE                                      __ptext119 57B2  
                                    __ptext152 4762                                      __ptext144 5D48  
                                    __ptext136 6D8C                                      __ptext128 48E8  
                                    __ptext161 6A48                                      __ptext153 67CA  
                                    __ptext145 6084                                      __ptext137 6DA4  
                                    __ptext129 5BF8                                      __ptext170 68EE  
                                    __ptext162 3DB6                                      __ptext154 6C70  
                                    __ptext146 59AE                                      __ptext138 63D4  
                                    __ptext171 66D0                                      __ptext163 6EF6  
                                    __ptext155 53C0                                      __ptext147 4B22  
                                    __ptext139 6A1A                __end_of_irobot_query_and_update 31E0  
                                    __ptext172 6EFC                                      __ptext164 6E94  
                                    __ptext156 5FBE                                      __ptext148 1CCC  
                                    __ptext173 6E6E                                      __ptext165 4E9A  
                                    __ptext157 6582                                      __ptext149 54F4  
                                    __ptext174 0000                                      __ptext166 69EA  
                                    __ptext158 6EB4                                      _pShiftVal 0078  
                                    __ptext167 6CE2                                      __ptext159 6EF0  
                                    __ptext168 5A26                                      __ptext169 633E  
                                     ?___flmul 00C6                                       ?___fltol 00F1  
                                     ?___lldiv 00B8                                     ?_Port_Init 0100  
                         Timer0_Init@pCPUClock 00CB                                       ?___lwdiv 00B8  
                                     ?___lwmod 00BF                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 5090  
                                     ?_getMode 0001                                   _eusart_getch 6EBE  
                             _correct_distance 4094                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 5EF2                                   _eusart_putch 6E44  
                           ??_Console_FormFeed 00B8                                _HMI_SetSegments 4B22  
                           ?_GetPortProperties 00B8                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BB                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00B8                                       _ADC_Init 5934  
                 irobot_rotate@rotateDirection 00DC                          __end_of_HMI_SetButton 5584  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00B8  
                         irobot_move@moveSpeed 00C8                                   ?_Port_SetPin 00C7  
                        __end_of_HMI_SetNumber 6ACA                               ___lwdiv@quotient 00BD  
                              _HMI_RightSwitch 6D74                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03DA                                 __size_of_mode2 00EE  
                               __size_of_mode3 0042                                 __size_of_mode4 0180  
                          ??_GetPortProperties 00BA                        __end_of_Console_NewLine 5322  
                         ??_MXK_InitTestButton 00E5                             Byte_GetPair@pInput 00C1  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6EEA  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 6CFC  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 6CE2  
                                     _LCD_Fill 61F4                                       _LCD_Init 34E0  
                               ___wmul@product 00BC                                       _HMIBoard 0347  
                               i2_Byte_GetZone 5A26                                       _LED_Init 6022  
                                    delay_ms@u 00BA                             Button_Poll@pButton 00D3  
                                    delay_us@u 00BA                                       _HMI_Init 25E0  
                                     _HMI_Poll 5BF8                             MXK_Queue@pCallback 00B8  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6BDA  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 66D0  
            __end_of_measureAndDisplayDistance 53C0                       __size_of_Configure_GPIOs 0070  
                     __size_of_findClosestWall 08B4                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C5                                       _PIR1bits 000F9E  
                                     i2u540_40 5A90                                       i2u540_45 5A8C  
                                     _PIR3bits 000FA4                                       i2u538_40 5A48  
                                     i2u538_47 5A3E                                       i2u673_44 6352  
                                     i2u673_45 634E                                       i2u674_44 6378  
                                     i2u674_45 6374                                       i2u677_40 66FE  
                                     i2u784_40 3DFA                                       i2u785_40 3E0E  
                         __size_of_Byte_SetBit 0064                                       i2u786_40 3E46  
                                     _RCONbits 000FD0                                    _mode1$15621 04AE  
                         i2Word_GetPair@pInput 000D                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00B9                               HMI_SetBar@pValue 00B8  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E2  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 5136                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 545C                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 6690                             _Port_CheckPairType 5E88  
                                     _MXK_Init 3360                          __size_of_Timer0_Start 0026  
                              _move_and_rotate 45C0                                MXK_SwitchTo@CUR 00BE  
                        __end_of_ADC_Calibrate 6DE4                            __end_of_irobot_leds 61F4  
                                     _SPI_Init 0D5A                            __end_of_irobot_init 6E44  
                     __end_of_Event_TestButton 6844                                       _SPI_Send 5CDC  
                          __end_of_irobot_move 4D42                                      _rx_assign 3EB6  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 00BD  
                            ___wmul@multiplier 00B8                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 00BC                                     printf@flag 00DB  
                         Timer2_Init@pCPUClock 00CE                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 5B84  
                                   printf@prec 00DA                          Motor_Speed@pFrequency 00D5  
                            Byte_GetBit@pInput 00B8                            Port_SetPinType@pPin 00E0  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 6D14  
                           _Port_CheckQuadType 6142                            ?_Port_CheckPairType 00DE  
                         __end_of_SPI_MinSpeed 5BF8                                  ??_MXK_Dequeue 00CE  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 641E                           __end_of_update_angle 6E08  
                        Button_Poll@pIncrement 00D5                        PortProperty_Valid@F6830 FCF5  
                         __end_ofi2_Motor_Step 3EB6                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4D56  
                                    copy_data1 4D76                                      copy_data2 4D96  
                                ??_MXK_Release 00B8                         __end_ofi2_Byte_GetPair 6CFC  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E7                          ?_irobot_move_straight 00D1  
                       __end_ofi2_Byte_GetZone 5A9C                            __end_ofi2_MXK_Queue 6E7C  
              _measureAndDisplayDistance$15620 0102                            ?_Port_CheckPortType 00EE  
                              itos@destination 00C6                                       _InitList FC33  
                   __end_of_irobot_init_song_0 6B9E                           _Motor_Step$intlevel0 3A7E  
                                     _Mode_Set 6E08                             Port_GetQuad@Output 00BD  
                            ??_update_distance 00D5                                    ??_ToSegment 00B8  
                                 _ISR_Function 1408                                   _Timer0_Clear 6E7C  
                           Port_GetQuad@pInput 00B8                                   _Timer2_Clear 6EC6  
                         __end_of_Word_GetPair 6808                                       _lCBuffer 0300  
                         ??_Port_CheckPairType 00E2                                    ??_Reset_Low 00CC  
                                     __Hrparam 0000                                   _Timer0_Start 6AF2  
                                 OutSeg@pInput 00BE                                 _Console_Render 23D0  
                                     __Lrparam 0000                                Timer2_Init@RDIV 00CA  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                               LCD_Write@value 00BC                                       _Port_Set 1912  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 6582                        __end_of_get_packet_size 5F58  
                                  ??_Port_Init 0103                        __end_of_HMI_SetSegments 4BDC  
                         ??_Port_CheckQuadType 00EB                               __size_of___fldiv 03C0  
                             _irobot_song_play 6DBC                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 678C                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00F1                               __size_of___lwmod 0062  
                                     _lBufferX 008D                                       _lBufferY 008C  
                          Timer2_Init@PRESCALE FD1C                          _findClosestWall$15619 04AC  
                                   ?_rx_assign 00B9                                LCD_Fill@pColour 00C1  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 007E                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 6D8C                         Byte_GetZone@pChunkSize 00BC  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BC  
                        __size_of_Port_SetType 022A                                  reverse@length 00BA  
                                    itos@input 00C4                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 27DA                            irobot_move@isScript 00D0  
                           Motor_Init@pAddress 00E7                                       _delay_ms 5E1E  
                                     _delay_us 624C                                       _clearall 008E  
                              ___lwdiv@divisor 00BA                                ___lwdiv@counter 00BC  
                              Port_GetPin@pPin 00BA                                       __ptext10 1178  
                                     __ptext11 638A                                       __ptext20 64F6  
                                     __ptext12 6DE4                                       __ptext21 4C92  
                                     __ptext13 6844                                       __ptext30 5280  
                                     __ptext22 65C8                                       __ptext14 6DF6  
                                     __ptext31 5584                                       __ptext23 6DBC  
                                     __ptext15 305A                                       __ptext40 5836  
                                     __ptext32 6B9E                                       __ptext24 29A8  
                                     __ptext16 3EB6                                       __ptext41 23D0  
                                     __ptext33 60E6                                       __ptext25 6E28  
                                     __ptext17 5612                                       __ptext50 1552  
                                     __ptext42 5A9C                                       __ptext34 6690  
                                     __ptext26 2D2A                                       __ptext18 5EF2  
                                     __ptext51 4F44                                       __ptext43 51DC  
                                     __ptext35 3CAA                                       __ptext27 4826  
                                     __ptext19 6EBE                                       __ptext60 37B8  
                                     __ptext52 6C8E                                       __ptext44 68B8  
                                     __ptext36 6A76                                       __ptext28 49A8  
                                     __ptext61 6E7C                                       __ptext53 619C  
                                     __ptext45 4692                                       __ptext37 687E  
                                     __ptext29 5F58                                       __ptext70 5136  
                                     __ptext62 3360                                       __ptext54 5DB4  
                                     __ptext46 6924                                       __ptext38 6AF2  
                                     __ptext71 6022                                       __ptext63 2EC8  
                                     __ptext55 6B7E                                       __ptext47 4266  
                                     __ptext39 6710                            ??_MXK_BlockSwitchTo 00BE  
                                     __ptext80 678C                                       __ptext72 629E  
                                     __ptext64 21A6                                       __ptext56 6E36  
                                     __ptext48 27DA                                       __ptext81 624C  
                                     __ptext73 674E                                       __ptext65 641E  
                                     __ptext57 6E44                                       __ptext49 08B4  
                                     __ptext90 5C6C                                       __ptext82 34E0  
                                     __ptext74 3A78                                       __ptext66 1912  
                                     __ptext58 6BBC                                       __ptext91 5B10  
                                     __ptext83 545C                                       __ptext75 6EDE  
                                     __ptext67 6E52                                       __ptext59 4416  
                                     __ptext92 62EE                                       __ptext84 61F4  
                                     __ptext76 6E88                                       __ptext68 4FEA  
                                     __ptext93 5E1E                                       __ptext85 4DF0  
                                     __ptext77 664E                                       __ptext69 5090  
                                     __ptext94 6BF8                                       __ptext86 6BDA  
                                     __ptext78 6CAA                                       __ptext95 6C16  
                                     __ptext87 6B18                                       __ptext79 6E60  
                                     __ptext96 6EAA                                       __ptext88 5CDC  
                                     __ptext97 25E0                                       __ptext89 6E08  
                                     __ptext98 5B84                                       __ptext99 0D5A  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 5728  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 6BBC  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D1                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00DF  
                          __end_of_MXK_Dequeue 678C                              HMI_SetSegments@in 00BC  
                        Button_Init@pThreshold 0102                                       _safeToGo 638A  
                                __size_of_main 00E6                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 00C3  
                       __end_of_Console_Render 25E0                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 63D4  
                          __end_of_MXK_Release 6CC6                                 _MXK_TestButton 6DA4  
                                i2_Byte_SetBit 633E                        __end_of_move_and_rotate 4692  
                          ??_ADC_ClockDivision 00B8                                   _iRDistanceSS 0322  
                                  _irobot_leds 619C                                    _irobot_init 6E36  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 4C92  
                               ADC_Voltage@max 00E5                                 ADC_Voltage@ref 00E9  
                    __end_of_MXK_BlockSwitchTo 67CA                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 21A6                                   Port_Set@Type 00DE  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00ED                              ??_findClosestWall 04AA  
                                    printf@val 00DE                                   _SSP1STATbits 000FC7  
                         __size_of_Motor_Speed 002A                                 Timer0_Init@DIV 032A  
                               Timer0_Init@PRE 008A                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 64AE                                     _HMI_GetBar 6EF0  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00DD  
                             ??_Port_TogglePin 00CF                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00CA  
                                   _HMI_SetBar 6EB4                                     _HMI_Render 6710  
                             Byte_SetZone@MASK 00C2                                    i2_MXK_Queue 6E6E  
                    __end_of_ADC_ClockDivision 57B2                                 Timer2_Init@DIV 0326  
                               Timer2_Init@PRE 0088                               Byte_SetZone@pMax 00BA  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D3                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00C8  
                __end_of_update_bump_and_cliff 687E                             LCD_FillRectangle@i 00CD  
                           LCD_FillRectangle@j 00CE                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00B8  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00BF  
                             ___lldiv@dividend 00B8                       __end_of_correct_distance 4180  
                       __end_of_MXK_TestButton 6DBC                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D4  
                     irobot_query_and_update@j 00D2                                 _SPI_DisableISR 6ACA  
                   __end_of_twos_complement_of 660C                       irobot_rotate@rotateAngle 00D5  
                              Port_Init@pInput 0100                                       printf@ap 00DC  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D7                                     _ISR_Enable 6EAA  
                             ?_HMI_SetSegments 00B9                        Console_MakeField@Column 00C4  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00B8  
                                SPI_DCS@pInput 00B8                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00BE                                    ??_rx_assign 00BB  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00DF                        Console_MakeField@pInput 00C3  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C0  
                                ??_GetPortPORT 00BA                                ___lwmod@divisor 00C1  
                                ??_GetPortTRIS 00BA                          Timer0_Start@pFunction 00B8  
                           Word_SetPair@pInput 00C7                                ___lwmod@counter 00C3  
                           Word_SetPair@pValue 00CA                       ?_irobot_query_and_update 00BE  
                             Motor_Init@pMotor 00E5                                    _MXK_Dequeue 674E  
                            ADC_Voltage@output 00ED                                  _distanceTotal 0072  
                               LED_Toggle@pLED 00D0                                  _LCD_DrawField 51DC  
                             _Port_SetQuadType 1F50                                    _MXK_Release 6CAA  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 664E  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D3  
                           Byte_GetZone@Offset 00BF                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00C9                                _Port_SetPinType 2B6A  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C0  
                           Byte_GetZone@pChunk 00BB                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6BBC                             Byte_GetZone@pInput 00B8  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 5FBE  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 6AF2  
                                 _SPI_MaxSpeed 5B10              irobot_query_and_update@streamSize 00CF  
                                 _SPI_MinSpeed 5B84                             Port_Set@TypeActual 00DC  
                             ?_move_and_rotate 0001  
