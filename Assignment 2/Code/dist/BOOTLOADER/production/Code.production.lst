

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 07 19:52:54 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1,inline
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1,inline
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1,inline
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1,inline
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   163                           	psect	text139,global,reloc=2,class=CODE,delta=1
   164                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   165                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   166  0000                     
   167                           ; Version 1.43
   168                           ; Generated 25/07/2017 GMT
   169                           ; 
   170                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   171                           ; All rights reserved.
   172                           ; 
   173                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   174                           ; 
   175                           ; Redistribution and use in source and binary forms, with or without modification, are
   176                           ; permitted provided that the following conditions are met:
   177                           ; 
   178                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   179                           ;        conditions and the following disclaimer.
   180                           ; 
   181                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   182                           ;        of conditions and the following disclaimer in the documentation and/or other
   183                           ;        materials provided with the distribution.
   184                           ; 
   185                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   186                           ;        software without specific prior written permission.
   187                           ; 
   188                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   189                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   190                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   191                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   192                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   193                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   194                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   195                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   196                           ; 
   197                           ; 
   198                           ; Code-generator required, PIC18F67J50 Definitions
   199                           ; 
   200                           ; SFR Addresses
   201  0000                     
   202                           	psect	idataCOMRAM
   203  0149AA                     __pidataCOMRAM:
   204                           	opt stack 0
   205                           
   206                           ;initializer for _gCursor
   207  0149AA  0006               	dw	6
   208  0149AC  0006               	dw	6
   209                           
   210                           ;initializer for _Bus_State
   211  0149AE  01                 	db	1
   212                           
   213                           ;initializer for _A
   214  0149AF  41                 	db	65
   215                           
   216                           ;initializer for _a
   217  0149B0  61                 	db	97
   218                           
   219                           ;initializer for _zero
   220  0149B1  30                 	db	48
   221                           
   222                           ;initializer for _l
   223  0149B2  80                 	db	128
   224                           
   225                           ;initializer for _w
   226  0149B3  80                 	db	128
   227                           
   228                           	psect	idataBANK0
   229  0149D6                     __pidataBANK0:
   230                           	opt stack 0
   231                           
   232                           ;initializer for _gCharSize
   233  0149D6  0005               	dw	5
   234  0149D8  0007               	dw	7
   235                           
   236                           ;initializer for _gForecolour
   237  0149DA  FFFF               	dw	65535
   238                           
   239                           ;initializer for _change
   240  0149DC  01                 	db	1
   241                           
   242                           	psect	idataBANK3
   243  0149BE                     __pidataBANK3:
   244                           	opt stack 0
   245                           
   246                           ;initializer for Console_Render@F6956
   247  0149BE  0006               	dw	6
   248  0149C0  0006               	dw	6
   249                           
   250                           ;initializer for _gLineSize
   251  0149C2  0080               	dw	128
   252  0149C4  0007               	dw	7
   253                           
   254                           	psect	mediumconst
   255  00FCCC                     __pmediumconst:
   256                           	opt stack 0
   257  00FCCC  00                 	db	0
   258  00FCCD                     _InitList:
   259                           	opt stack 0
   260  00FCCD  1100               	dw	4352
   261  00FCCF  0080               	dw	128
   262  00FCD1  012C               	dw	300
   263  00FCD3  B100               	dw	45312
   264  00FCD5  0002               	dw	2
   265  00FCD7  0035               	dw	53
   266  00FCD9  0036               	dw	54
   267  00FCDB  B200               	dw	45568
   268  00FCDD  0002               	dw	2
   269  00FCDF  0035               	dw	53
   270  00FCE1  0036               	dw	54
   271  00FCE3  B300               	dw	45824
   272  00FCE5  0002               	dw	2
   273  00FCE7  0035               	dw	53
   274  00FCE9  0036               	dw	54
   275  00FCEB  0002               	dw	2
   276  00FCED  0035               	dw	53
   277  00FCEF  0036               	dw	54
   278  00FCF1  B400               	dw	46080
   279  00FCF3  0000               	dw	0
   280  00FCF5  C000               	dw	49152
   281  00FCF7  00A2               	dw	162
   282  00FCF9  0002               	dw	2
   283  00FCFB  0084               	dw	132
   284  00FCFD  C100               	dw	49408
   285  00FCFF  00C5               	dw	197
   286  00FD01  C200               	dw	49664
   287  00FD03  000D               	dw	13
   288  00FD05  0000               	dw	0
   289  00FD07  C300               	dw	49920
   290  00FD09  008D               	dw	141
   291  00FD0B  002A               	dw	42
   292  00FD0D  C400               	dw	50176
   293  00FD0F  008D               	dw	141
   294  00FD11  00EE               	dw	238
   295  00FD13  C500               	dw	50432
   296  00FD15  000A               	dw	10
   297  00FD17  3600               	dw	13824
   298  00FD19  00C8               	dw	200
   299  00FD1B  E000               	dw	57344
   300  00FD1D  0012               	dw	18
   301  00FD1F  001C               	dw	28
   302  00FD21  0010               	dw	16
   303  00FD23  0018               	dw	24
   304  00FD25  0033               	dw	51
   305  00FD27  002C               	dw	44
   306  00FD29  0025               	dw	37
   307  00FD2B  0028               	dw	40
   308  00FD2D  0028               	dw	40
   309  00FD2F  0027               	dw	39
   310  00FD31  002F               	dw	47
   311  00FD33  003C               	dw	60
   312  00FD35  0000               	dw	0
   313  00FD37  0003               	dw	3
   314  00FD39  0003               	dw	3
   315  00FD3B  0010               	dw	16
   316  00FD3D  0080               	dw	128
   317  00FD3F  0078               	dw	120
   318  00FD41  E100               	dw	57600
   319  00FD43  0012               	dw	18
   320  00FD45  001C               	dw	28
   321  00FD47  0010               	dw	16
   322  00FD49  0018               	dw	24
   323  00FD4B  002D               	dw	45
   324  00FD4D  0028               	dw	40
   325  00FD4F  0023               	dw	35
   326  00FD51  0028               	dw	40
   327  00FD53  0028               	dw	40
   328  00FD55  0026               	dw	38
   329  00FD57  002F               	dw	47
   330  00FD59  003B               	dw	59
   331  00FD5B  0000               	dw	0
   332  00FD5D  0003               	dw	3
   333  00FD5F  0003               	dw	3
   334  00FD61  0010               	dw	16
   335  00FD63  3A00               	dw	14848
   336  00FD65  0005               	dw	5
   337  00FD67  2A00               	dw	10752
   338  00FD69  0000               	dw	0
   339  00FD6B  0002               	dw	2
   340  00FD6D  0000               	dw	0
   341  00FD6F  0081               	dw	129
   342  00FD71  2B00               	dw	11008
   343  00FD73  0000               	dw	0
   344  00FD75  0003               	dw	3
   345  00FD77  0000               	dw	0
   346  00FD79  00A2               	dw	162
   347  00FD7B  2900               	dw	10496
   348  00FD7D  2C00               	dw	11264
   349  00FD7F                     __end_of_InitList:
   350                           	opt stack 0
   351  00FD7F                     Timer0_Init@PRESCALE:
   352                           	opt stack 0
   353  00FD7F  0002               	dw	2
   354  00FD81  0004               	dw	4
   355  00FD83  0008               	dw	8
   356  00FD85  0010               	dw	16
   357  00FD87  0020               	dw	32
   358  00FD89  0040               	dw	64
   359  00FD8B  0080               	dw	128
   360  00FD8D  0100               	dw	256
   361  00FD8F                     __end_ofTimer0_Init@PRESCALE:
   362                           	opt stack 0
   363  00FD8F                     PortProperty_Valid@F6830:
   364                           	opt stack 0
   365  00FD8F  00                 	db	0
   366  00FD90  01                 	db	1
   367  00FD91  02                 	db	2
   368  00FD92  00                 	db	0
   369  00FD93  01                 	db	1
   370  00FD94  00                 	db	0
   371  00FD95  01                 	db	1
   372  00FD96  00                 	db	0
   373  00FD97  02                 	db	2
   374  00FD98  02                 	db	2
   375  00FD99  00                 	db	0
   376  00FD9A  00                 	db	0
   377  00FD9B  03                 	db	3
   378  00FD9C  03                 	db	3
   379  00FD9D  03                 	db	3
   380  00FD9E  00                 	db	0
   381  00FD9F                     __end_ofPortProperty_Valid@F6830:
   382                           	opt stack 0
   383  00FD9F                     _dpowers:
   384                           	opt stack 0
   385  00FD9F  0001               	dw	1
   386  00FDA1  000A               	dw	10
   387  00FDA3  0064               	dw	100
   388  00FDA5  03E8               	dw	1000
   389  00FDA7  2710               	dw	10000
   390  00FDA9                     __end_of_dpowers:
   391                           	opt stack 0
   392  00FDA9                     _MASKS:
   393                           	opt stack 0
   394  00FDA9  00                 	db	0
   395  00FDAA  01                 	db	1
   396  00FDAB  03                 	db	3
   397  00FDAC  07                 	db	7
   398  00FDAD  0F                 	db	15
   399  00FDAE  1F                 	db	31
   400  00FDAF  3F                 	db	63
   401  00FDB0  7F                 	db	127
   402  00FDB1  FF                 	db	255
   403  00FDB2                     __end_of_MASKS:
   404                           	opt stack 0
   405  00FDB2                     HMI_SetButton@F7213:
   406                           	opt stack 0
   407  00FDB2  00                 	db	0
   408  00FDB3  02                 	db	2
   409  00FDB4  01                 	db	1
   410  00FDB5  03                 	db	3
   411  00FDB6                     __end_ofHMI_SetButton@F7213:
   412                           	opt stack 0
   413  00FDB6                     Timer2_Init@PRESCALE:
   414                           	opt stack 0
   415  00FDB6  01                 	db	1
   416  00FDB7  04                 	db	4
   417  00FDB8  10                 	db	16
   418  00FDB9                     __end_ofTimer2_Init@PRESCALE:
   419                           	opt stack 0
   420  00FDB9                     _Font5x7:
   421                           	opt stack 0
   422  00FDB9  00                 	db	0
   423  00FDBA  00                 	db	0
   424  00FDBB  00                 	db	0
   425  00FDBC  00                 	db	0
   426  00FDBD  00                 	db	0
   427  00FDBE  00                 	db	0
   428  00FDBF  00                 	db	0
   429  00FDC0  5F                 	db	95
   430  00FDC1  00                 	db	0
   431  00FDC2  00                 	db	0
   432  00FDC3  00                 	db	0
   433  00FDC4  07                 	db	7
   434  00FDC5  00                 	db	0
   435  00FDC6  07                 	db	7
   436  00FDC7  00                 	db	0
   437  00FDC8  14                 	db	20
   438  00FDC9  7F                 	db	127
   439  00FDCA  14                 	db	20
   440  00FDCB  7F                 	db	127
   441  00FDCC  14                 	db	20
   442  00FDCD  24                 	db	36
   443  00FDCE  2A                 	db	42
   444  00FDCF  7F                 	db	127
   445  00FDD0  2A                 	db	42
   446  00FDD1  12                 	db	18
   447  00FDD2  23                 	db	35
   448  00FDD3  13                 	db	19
   449  00FDD4  08                 	db	8
   450  00FDD5  64                 	db	100
   451  00FDD6  62                 	db	98
   452  00FDD7  36                 	db	54
   453  00FDD8  49                 	db	73
   454  00FDD9  55                 	db	85
   455  00FDDA  22                 	db	34
   456  00FDDB  50                 	db	80
   457  00FDDC  00                 	db	0
   458  00FDDD  05                 	db	5
   459  00FDDE  03                 	db	3
   460  00FDDF  00                 	db	0
   461  00FDE0  00                 	db	0
   462  00FDE1  00                 	db	0
   463  00FDE2  1C                 	db	28
   464  00FDE3  22                 	db	34
   465  00FDE4  41                 	db	65
   466  00FDE5  00                 	db	0
   467  00FDE6  00                 	db	0
   468  00FDE7  41                 	db	65
   469  00FDE8  22                 	db	34
   470  00FDE9  1C                 	db	28
   471  00FDEA  00                 	db	0
   472  00FDEB  08                 	db	8
   473  00FDEC  2A                 	db	42
   474  00FDED  1C                 	db	28
   475  00FDEE  2A                 	db	42
   476  00FDEF  08                 	db	8
   477  00FDF0  08                 	db	8
   478  00FDF1  08                 	db	8
   479  00FDF2  3E                 	db	62
   480  00FDF3  08                 	db	8
   481  00FDF4  08                 	db	8
   482  00FDF5  00                 	db	0
   483  00FDF6  50                 	db	80
   484  00FDF7  30                 	db	48
   485  00FDF8  00                 	db	0
   486  00FDF9  00                 	db	0
   487  00FDFA  08                 	db	8
   488  00FDFB  08                 	db	8
   489  00FDFC  08                 	db	8
   490  00FDFD  08                 	db	8
   491  00FDFE  08                 	db	8
   492  00FDFF  00                 	db	0
   493  00FE00  60                 	db	96
   494  00FE01  60                 	db	96
   495  00FE02  00                 	db	0
   496  00FE03  00                 	db	0
   497  00FE04  20                 	db	32
   498  00FE05  10                 	db	16
   499  00FE06  08                 	db	8
   500  00FE07  04                 	db	4
   501  00FE08  02                 	db	2
   502  00FE09  3E                 	db	62
   503  00FE0A  51                 	db	81
   504  00FE0B  49                 	db	73
   505  00FE0C  45                 	db	69
   506  00FE0D  3E                 	db	62
   507  00FE0E  00                 	db	0
   508  00FE0F  42                 	db	66
   509  00FE10  7F                 	db	127
   510  00FE11  40                 	db	64
   511  00FE12  00                 	db	0
   512  00FE13  42                 	db	66
   513  00FE14  61                 	db	97
   514  00FE15  51                 	db	81
   515  00FE16  49                 	db	73
   516  00FE17  46                 	db	70
   517  00FE18  21                 	db	33
   518  00FE19  41                 	db	65
   519  00FE1A  45                 	db	69
   520  00FE1B  4B                 	db	75
   521  00FE1C  31                 	db	49
   522  00FE1D  18                 	db	24
   523  00FE1E  14                 	db	20
   524  00FE1F  12                 	db	18
   525  00FE20  7F                 	db	127
   526  00FE21  10                 	db	16
   527  00FE22  27                 	db	39
   528  00FE23  45                 	db	69
   529  00FE24  45                 	db	69
   530  00FE25  45                 	db	69
   531  00FE26  39                 	db	57
   532  00FE27  3C                 	db	60
   533  00FE28  4A                 	db	74
   534  00FE29  49                 	db	73
   535  00FE2A  49                 	db	73
   536  00FE2B  30                 	db	48
   537  00FE2C  01                 	db	1
   538  00FE2D  71                 	db	113
   539  00FE2E  09                 	db	9
   540  00FE2F  05                 	db	5
   541  00FE30  03                 	db	3
   542  00FE31  36                 	db	54
   543  00FE32  49                 	db	73
   544  00FE33  49                 	db	73
   545  00FE34  49                 	db	73
   546  00FE35  36                 	db	54
   547  00FE36  06                 	db	6
   548  00FE37  49                 	db	73
   549  00FE38  49                 	db	73
   550  00FE39  29                 	db	41
   551  00FE3A  1E                 	db	30
   552  00FE3B  00                 	db	0
   553  00FE3C  36                 	db	54
   554  00FE3D  36                 	db	54
   555  00FE3E  00                 	db	0
   556  00FE3F  00                 	db	0
   557  00FE40  00                 	db	0
   558  00FE41  56                 	db	86
   559  00FE42  36                 	db	54
   560  00FE43  00                 	db	0
   561  00FE44  00                 	db	0
   562  00FE45  00                 	db	0
   563  00FE46  08                 	db	8
   564  00FE47  14                 	db	20
   565  00FE48  22                 	db	34
   566  00FE49  41                 	db	65
   567  00FE4A  14                 	db	20
   568  00FE4B  14                 	db	20
   569  00FE4C  14                 	db	20
   570  00FE4D  14                 	db	20
   571  00FE4E  14                 	db	20
   572  00FE4F  41                 	db	65
   573  00FE50  22                 	db	34
   574  00FE51  14                 	db	20
   575  00FE52  08                 	db	8
   576  00FE53  00                 	db	0
   577  00FE54  02                 	db	2
   578  00FE55  01                 	db	1
   579  00FE56  51                 	db	81
   580  00FE57  09                 	db	9
   581  00FE58  06                 	db	6
   582  00FE59  32                 	db	50
   583  00FE5A  49                 	db	73
   584  00FE5B  79                 	db	121
   585  00FE5C  41                 	db	65
   586  00FE5D  3E                 	db	62
   587  00FE5E  7E                 	db	126
   588  00FE5F  11                 	db	17
   589  00FE60  11                 	db	17
   590  00FE61  11                 	db	17
   591  00FE62  7E                 	db	126
   592  00FE63  7F                 	db	127
   593  00FE64  49                 	db	73
   594  00FE65  49                 	db	73
   595  00FE66  49                 	db	73
   596  00FE67  36                 	db	54
   597  00FE68  3E                 	db	62
   598  00FE69  41                 	db	65
   599  00FE6A  41                 	db	65
   600  00FE6B  41                 	db	65
   601  00FE6C  22                 	db	34
   602  00FE6D  7F                 	db	127
   603  00FE6E  41                 	db	65
   604  00FE6F  41                 	db	65
   605  00FE70  22                 	db	34
   606  00FE71  1C                 	db	28
   607  00FE72  7F                 	db	127
   608  00FE73  49                 	db	73
   609  00FE74  49                 	db	73
   610  00FE75  49                 	db	73
   611  00FE76  41                 	db	65
   612  00FE77  7F                 	db	127
   613  00FE78  09                 	db	9
   614  00FE79  09                 	db	9
   615  00FE7A  01                 	db	1
   616  00FE7B  01                 	db	1
   617  00FE7C  3E                 	db	62
   618  00FE7D  41                 	db	65
   619  00FE7E  41                 	db	65
   620  00FE7F  51                 	db	81
   621  00FE80  32                 	db	50
   622  00FE81  7F                 	db	127
   623  00FE82  08                 	db	8
   624  00FE83  08                 	db	8
   625  00FE84  08                 	db	8
   626  00FE85  7F                 	db	127
   627  00FE86  00                 	db	0
   628  00FE87  41                 	db	65
   629  00FE88  7F                 	db	127
   630  00FE89  41                 	db	65
   631  00FE8A  00                 	db	0
   632  00FE8B  20                 	db	32
   633  00FE8C  40                 	db	64
   634  00FE8D  41                 	db	65
   635  00FE8E  3F                 	db	63
   636  00FE8F  01                 	db	1
   637  00FE90  7F                 	db	127
   638  00FE91  08                 	db	8
   639  00FE92  14                 	db	20
   640  00FE93  22                 	db	34
   641  00FE94  41                 	db	65
   642  00FE95  7F                 	db	127
   643  00FE96  40                 	db	64
   644  00FE97  40                 	db	64
   645  00FE98  40                 	db	64
   646  00FE99  40                 	db	64
   647  00FE9A  7F                 	db	127
   648  00FE9B  02                 	db	2
   649  00FE9C  04                 	db	4
   650  00FE9D  02                 	db	2
   651  00FE9E  7F                 	db	127
   652  00FE9F  7F                 	db	127
   653  00FEA0  04                 	db	4
   654  00FEA1  08                 	db	8
   655  00FEA2  10                 	db	16
   656  00FEA3  7F                 	db	127
   657  00FEA4  3E                 	db	62
   658  00FEA5  41                 	db	65
   659  00FEA6  41                 	db	65
   660  00FEA7  41                 	db	65
   661  00FEA8  3E                 	db	62
   662  00FEA9  7F                 	db	127
   663  00FEAA  09                 	db	9
   664  00FEAB  09                 	db	9
   665  00FEAC  09                 	db	9
   666  00FEAD  06                 	db	6
   667  00FEAE  3E                 	db	62
   668  00FEAF  41                 	db	65
   669  00FEB0  51                 	db	81
   670  00FEB1  21                 	db	33
   671  00FEB2  5E                 	db	94
   672  00FEB3  7F                 	db	127
   673  00FEB4  09                 	db	9
   674  00FEB5  19                 	db	25
   675  00FEB6  29                 	db	41
   676  00FEB7  46                 	db	70
   677  00FEB8  46                 	db	70
   678  00FEB9  49                 	db	73
   679  00FEBA  49                 	db	73
   680  00FEBB  49                 	db	73
   681  00FEBC  31                 	db	49
   682  00FEBD  01                 	db	1
   683  00FEBE  01                 	db	1
   684  00FEBF  7F                 	db	127
   685  00FEC0  01                 	db	1
   686  00FEC1  01                 	db	1
   687  00FEC2  3F                 	db	63
   688  00FEC3  40                 	db	64
   689  00FEC4  40                 	db	64
   690  00FEC5  40                 	db	64
   691  00FEC6  3F                 	db	63
   692  00FEC7  1F                 	db	31
   693  00FEC8  20                 	db	32
   694  00FEC9  40                 	db	64
   695  00FECA  20                 	db	32
   696  00FECB  1F                 	db	31
   697  00FECC  7F                 	db	127
   698  00FECD  20                 	db	32
   699  00FECE  18                 	db	24
   700  00FECF  20                 	db	32
   701  00FED0  7F                 	db	127
   702  00FED1  63                 	db	99
   703  00FED2  14                 	db	20
   704  00FED3  08                 	db	8
   705  00FED4  14                 	db	20
   706  00FED5  63                 	db	99
   707  00FED6  03                 	db	3
   708  00FED7  04                 	db	4
   709  00FED8  78                 	db	120
   710  00FED9  04                 	db	4
   711  00FEDA  03                 	db	3
   712  00FEDB  61                 	db	97
   713  00FEDC  51                 	db	81
   714  00FEDD  49                 	db	73
   715  00FEDE  45                 	db	69
   716  00FEDF  43                 	db	67
   717  00FEE0  00                 	db	0
   718  00FEE1  00                 	db	0
   719  00FEE2  7F                 	db	127
   720  00FEE3  41                 	db	65
   721  00FEE4  41                 	db	65
   722  00FEE5  02                 	db	2
   723  00FEE6  04                 	db	4
   724  00FEE7  08                 	db	8
   725  00FEE8  10                 	db	16
   726  00FEE9  20                 	db	32
   727  00FEEA  41                 	db	65
   728  00FEEB  41                 	db	65
   729  00FEEC  7F                 	db	127
   730  00FEED  00                 	db	0
   731  00FEEE  00                 	db	0
   732  00FEEF  04                 	db	4
   733  00FEF0  02                 	db	2
   734  00FEF1  01                 	db	1
   735  00FEF2  02                 	db	2
   736  00FEF3  04                 	db	4
   737  00FEF4  40                 	db	64
   738  00FEF5  40                 	db	64
   739  00FEF6  40                 	db	64
   740  00FEF7  40                 	db	64
   741  00FEF8  40                 	db	64
   742  00FEF9  00                 	db	0
   743  00FEFA  01                 	db	1
   744  00FEFB  02                 	db	2
   745  00FEFC  04                 	db	4
   746  00FEFD  00                 	db	0
   747  00FEFE  20                 	db	32
   748  00FEFF  54                 	db	84
   749  00FF00  54                 	db	84
   750  00FF01  54                 	db	84
   751  00FF02  78                 	db	120
   752  00FF03  7F                 	db	127
   753  00FF04  48                 	db	72
   754  00FF05  44                 	db	68
   755  00FF06  44                 	db	68
   756  00FF07  38                 	db	56
   757  00FF08  38                 	db	56
   758  00FF09  44                 	db	68
   759  00FF0A  44                 	db	68
   760  00FF0B  44                 	db	68
   761  00FF0C  20                 	db	32
   762  00FF0D  38                 	db	56
   763  00FF0E  44                 	db	68
   764  00FF0F  44                 	db	68
   765  00FF10  48                 	db	72
   766  00FF11  7F                 	db	127
   767  00FF12  38                 	db	56
   768  00FF13  54                 	db	84
   769  00FF14  54                 	db	84
   770  00FF15  54                 	db	84
   771  00FF16  18                 	db	24
   772  00FF17  08                 	db	8
   773  00FF18  7E                 	db	126
   774  00FF19  09                 	db	9
   775  00FF1A  01                 	db	1
   776  00FF1B  02                 	db	2
   777  00FF1C  08                 	db	8
   778  00FF1D  14                 	db	20
   779  00FF1E  54                 	db	84
   780  00FF1F  54                 	db	84
   781  00FF20  3C                 	db	60
   782  00FF21  7F                 	db	127
   783  00FF22  08                 	db	8
   784  00FF23  04                 	db	4
   785  00FF24  04                 	db	4
   786  00FF25  78                 	db	120
   787  00FF26  00                 	db	0
   788  00FF27  44                 	db	68
   789  00FF28  7D                 	db	125
   790  00FF29  40                 	db	64
   791  00FF2A  00                 	db	0
   792  00FF2B  20                 	db	32
   793  00FF2C  40                 	db	64
   794  00FF2D  44                 	db	68
   795  00FF2E  3D                 	db	61
   796  00FF2F  00                 	db	0
   797  00FF30  00                 	db	0
   798  00FF31  7F                 	db	127
   799  00FF32  10                 	db	16
   800  00FF33  28                 	db	40
   801  00FF34  44                 	db	68
   802  00FF35  00                 	db	0
   803  00FF36  41                 	db	65
   804  00FF37  7F                 	db	127
   805  00FF38  40                 	db	64
   806  00FF39  00                 	db	0
   807  00FF3A  7C                 	db	124
   808  00FF3B  04                 	db	4
   809  00FF3C  18                 	db	24
   810  00FF3D  04                 	db	4
   811  00FF3E  78                 	db	120
   812  00FF3F  7C                 	db	124
   813  00FF40  08                 	db	8
   814  00FF41  04                 	db	4
   815  00FF42  04                 	db	4
   816  00FF43  78                 	db	120
   817  00FF44  38                 	db	56
   818  00FF45  44                 	db	68
   819  00FF46  44                 	db	68
   820  00FF47  44                 	db	68
   821  00FF48  38                 	db	56
   822  00FF49  7C                 	db	124
   823  00FF4A  14                 	db	20
   824  00FF4B  14                 	db	20
   825  00FF4C  14                 	db	20
   826  00FF4D  08                 	db	8
   827  00FF4E  08                 	db	8
   828  00FF4F  14                 	db	20
   829  00FF50  14                 	db	20
   830  00FF51  18                 	db	24
   831  00FF52  7C                 	db	124
   832  00FF53  7C                 	db	124
   833  00FF54  08                 	db	8
   834  00FF55  04                 	db	4
   835  00FF56  04                 	db	4
   836  00FF57  08                 	db	8
   837  00FF58  48                 	db	72
   838  00FF59  54                 	db	84
   839  00FF5A  54                 	db	84
   840  00FF5B  54                 	db	84
   841  00FF5C  20                 	db	32
   842  00FF5D  04                 	db	4
   843  00FF5E  3F                 	db	63
   844  00FF5F  44                 	db	68
   845  00FF60  40                 	db	64
   846  00FF61  20                 	db	32
   847  00FF62  3C                 	db	60
   848  00FF63  40                 	db	64
   849  00FF64  40                 	db	64
   850  00FF65  20                 	db	32
   851  00FF66  7C                 	db	124
   852  00FF67  1C                 	db	28
   853  00FF68  20                 	db	32
   854  00FF69  40                 	db	64
   855  00FF6A  20                 	db	32
   856  00FF6B  1C                 	db	28
   857  00FF6C  3C                 	db	60
   858  00FF6D  40                 	db	64
   859  00FF6E  30                 	db	48
   860  00FF6F  40                 	db	64
   861  00FF70  3C                 	db	60
   862  00FF71  44                 	db	68
   863  00FF72  28                 	db	40
   864  00FF73  10                 	db	16
   865  00FF74  28                 	db	40
   866  00FF75  44                 	db	68
   867  00FF76  0C                 	db	12
   868  00FF77  50                 	db	80
   869  00FF78  50                 	db	80
   870  00FF79  50                 	db	80
   871  00FF7A  3C                 	db	60
   872  00FF7B  44                 	db	68
   873  00FF7C  64                 	db	100
   874  00FF7D  54                 	db	84
   875  00FF7E  4C                 	db	76
   876  00FF7F  44                 	db	68
   877  00FF80  00                 	db	0
   878  00FF81  08                 	db	8
   879  00FF82  36                 	db	54
   880  00FF83  41                 	db	65
   881  00FF84  00                 	db	0
   882  00FF85  00                 	db	0
   883  00FF86  00                 	db	0
   884  00FF87  7F                 	db	127
   885  00FF88  00                 	db	0
   886  00FF89  00                 	db	0
   887  00FF8A  00                 	db	0
   888  00FF8B  41                 	db	65
   889  00FF8C  36                 	db	54
   890  00FF8D  08                 	db	8
   891  00FF8E  00                 	db	0
   892  00FF8F  08                 	db	8
   893  00FF90  08                 	db	8
   894  00FF91  2A                 	db	42
   895  00FF92  1C                 	db	28
   896  00FF93  08                 	db	8
   897  00FF94  08                 	db	8
   898  00FF95  1C                 	db	28
   899  00FF96  2A                 	db	42
   900  00FF97  08                 	db	8
   901  00FF98  08                 	db	8
   902  00FF99                     __end_of_Font5x7:
   903                           	opt stack 0
   904  00FF99                     _PortG_Property:
   905                           	opt stack 0
   906  00FF99  FC00               	dw	64512
   907  00FF9B                     __end_of_PortG_Property:
   908                           	opt stack 0
   909  00FF9B                     _PortF_Property:
   910                           	opt stack 0
   911  00FF9B  0FFF               	dw	4095
   912  00FF9D                     __end_of_PortF_Property:
   913                           	opt stack 0
   914  00FF9D                     _PortE_Property:
   915                           	opt stack 0
   916  00FF9D  0000               	dw	0
   917  00FF9F                     __end_of_PortE_Property:
   918                           	opt stack 0
   919  00FF9F                     _PortD_Property:
   920                           	opt stack 0
   921  00FF9F  FFFF               	dw	65535
   922  00FFA1                     __end_of_PortD_Property:
   923                           	opt stack 0
   924  00FFA1                     _PortC_Property:
   925                           	opt stack 0
   926  00FFA1  FFF0               	dw	65520
   927  00FFA3                     __end_of_PortC_Property:
   928                           	opt stack 0
   929  00FFA3                     _PortB_Property:
   930                           	opt stack 0
   931  00FFA3  FF00               	dw	65280
   932  00FFA5                     __end_of_PortB_Property:
   933                           	opt stack 0
   934  00FFA5                     _PortA_Property:
   935                           	opt stack 0
   936  00FFA5  00FF               	dw	255
   937  00FFA7                     __end_of_PortA_Property:
   938                           	opt stack 0
   939  0000                     _TMR0	set	4054
   940  0000                     _RCREG1	set	4015
   941  0000                     _TXREG1	set	4014
   942  0000                     _SPBRG1	set	4016
   943  0000                     _TXSTA1bits	set	4013
   944  0000                     _BAUDCON1bits	set	3966
   945  0000                     _RCSTA1	set	4012
   946  0000                     _TXSTA1	set	4013
   947  0000                     _TRISCbits	set	3988
   948  0000                     _PR2	set	4043
   949  0000                     _T2CONbits	set	4042
   950  0000                     _T0CONbits	set	4053
   951  0000                     _RCONbits	set	4048
   952  0000                     _OSCTUNEbits	set	3995
   953  0000                     _PIR3	set	4004
   954  0000                     _PIR2	set	4001
   955  0000                     _PIR1	set	3998
   956  0000                     _INTCONbits	set	4082
   957  0000                     _SSP2CON2bits	set	3947
   958  0000                     _SSP1CON2bits	set	4037
   959  0000                     _SSP1ADD	set	4040
   960  0000                     _ANCON0	set	4033
   961  0000                     _ADRESL	set	4035
   962  0000                     _ADRESH	set	4036
   963  0000                     _ADCON1bits	set	4033
   964  0000                     _ADCON0bits	set	4034
   965  0000                     _SSP2CON1bits	set	3948
   966  0000                     _SSP1CON1bits	set	4038
   967  0000                     _SSP2STATbits	set	3949
   968  0000                     _SSP1STATbits	set	4039
   969  0000                     _PIE3bits	set	4003
   970  0000                     _PIE1bits	set	3997
   971  0000                     _PIR3bits	set	4004
   972  0000                     _PIR1bits	set	3998
   973  0000                     _IPR3bits	set	4005
   974  0000                     _IPR1bits	set	3999
   975  0000                     _PORTFbits	set	3973
   976  0000                     _SSP2CON2	set	3947
   977  0000                     _SSP1CON2	set	4037
   978  0000                     _SSP2BUF	set	3951
   979  0000                     _SSP2CON1	set	3948
   980  0000                     _SSP2STAT	set	3949
   981  0000                     _SSP1BUF	set	4041
   982  0000                     _SSP1CON1	set	4038
   983  0000                     _SSP1STAT	set	4039
   984  0000                     _LATG	set	3983
   985  0000                     _LATF	set	3982
   986  0000                     _LATE	set	3981
   987  0000                     _LATD	set	3980
   988  0000                     _LATC	set	3979
   989  0000                     _LATB	set	3978
   990  0000                     _LATA	set	3977
   991  0000                     _TRISG	set	3992
   992  0000                     _TRISF	set	3991
   993  0000                     _TRISE	set	3990
   994  0000                     _TRISD	set	3989
   995  0000                     _TRISC	set	3988
   996  0000                     _TRISB	set	3987
   997  0000                     _TRISA	set	3986
   998  0000                     _PORTG	set	3974
   999  0000                     _PORTF	set	3973
  1000  0000                     _PORTE	set	3972
  1001  0000                     _PORTD	set	3971
  1002  0000                     _PORTC	set	3970
  1003  0000                     _PORTB	set	3969
  1004  0000                     _PORTA	set	3968
  1005  00FFA7                     STR_2:
  1006  00FFA7  54                 	db	84	;'T'
  1007  00FFA8  6F                 	db	111	;'o'
  1008  00FFA9  74                 	db	116	;'t'
  1009  00FFAA  61                 	db	97	;'a'
  1010  00FFAB  6C                 	db	108	;'l'
  1011  00FFAC  20                 	db	32
  1012  00FFAD  44                 	db	68	;'D'
  1013  00FFAE  69                 	db	105	;'i'
  1014  00FFAF  73                 	db	115	;'s'
  1015  00FFB0  74                 	db	116	;'t'
  1016  00FFB1  61                 	db	97	;'a'
  1017  00FFB2  6E                 	db	110	;'n'
  1018  00FFB3  63                 	db	99	;'c'
  1019  00FFB4  65                 	db	101	;'e'
  1020  00FFB5  3A                 	db	58	;':'
  1021  00FFB6  25                 	db	37
  1022  00FFB7  75                 	db	117	;'u'
  1023  00FFB8  0A                 	db	10
  1024  00FFB9  4C                 	db	76	;'L'
  1025  00FFBA  65                 	db	101	;'e'
  1026  00FFBB  66                 	db	102	;'f'
  1027  00FFBC  74                 	db	116	;'t'
  1028  00FFBD  20                 	db	32
  1029  00FFBE  42                 	db	66	;'B'
  1030  00FFBF  75                 	db	117	;'u'
  1031  00FFC0  6D                 	db	109	;'m'
  1032  00FFC1  70                 	db	112	;'p'
  1033  00FFC2  3A                 	db	58	;':'
  1034  00FFC3  25                 	db	37
  1035  00FFC4  75                 	db	117	;'u'
  1036  00FFC5  0A                 	db	10
  1037  00FFC6  52                 	db	82	;'R'
  1038  00FFC7  69                 	db	105	;'i'
  1039  00FFC8  67                 	db	103	;'g'
  1040  00FFC9  68                 	db	104	;'h'
  1041  00FFCA  74                 	db	116	;'t'
  1042  00FFCB  20                 	db	32
  1043  00FFCC  42                 	db	66	;'B'
  1044  00FFCD  75                 	db	117	;'u'
  1045  00FFCE  6D                 	db	109	;'m'
  1046  00FFCF  70                 	db	112	;'p'
  1047  00FFD0  3A                 	db	58	;':'
  1048  00FFD1  25                 	db	37
  1049  00FFD2  75                 	db	117	;'u'
  1050  00FFD3  0A                 	db	10
  1051  00FFD4  00                 	db	0
  1052  00FFD5                     STR_5:
  1053  00FFD5  54                 	db	84	;'T'
  1054  00FFD6  6F                 	db	111	;'o'
  1055  00FFD7  74                 	db	116	;'t'
  1056  00FFD8  61                 	db	97	;'a'
  1057  00FFD9  6C                 	db	108	;'l'
  1058  00FFDA  20                 	db	32
  1059  00FFDB  44                 	db	68	;'D'
  1060  00FFDC  69                 	db	105	;'i'
  1061  00FFDD  73                 	db	115	;'s'
  1062  00FFDE  74                 	db	116	;'t'
  1063  00FFDF  61                 	db	97	;'a'
  1064  00FFE0  6E                 	db	110	;'n'
  1065  00FFE1  63                 	db	99	;'c'
  1066  00FFE2  65                 	db	101	;'e'
  1067  00FFE3  3A                 	db	58	;':'
  1068  00FFE4  20                 	db	32
  1069  00FFE5  25                 	db	37
  1070  00FFE6  64                 	db	100	;'d'
  1071  00FFE7  0A                 	db	10
  1072  00FFE8  0A                 	db	10
  1073  00FFE9  0A                 	db	10
  1074  00FFEA  0A                 	db	10
  1075  00FFEB  0A                 	db	10
  1076  00FFEC  0A                 	db	10
  1077  00FFED  0A                 	db	10
  1078  00FFEE  00                 	db	0
  1079  00FFEF                     STR_3:
  1080  00FFEF  52                 	db	82	;'R'
  1081  00FFF0  75                 	db	117	;'u'
  1082  00FFF1  6E                 	db	110	;'n'
  1083  00FFF2  6E                 	db	110	;'n'
  1084  00FFF3  69                 	db	105	;'i'
  1085  00FFF4  6E                 	db	110	;'n'
  1086  00FFF5  67                 	db	103	;'g'
  1087  00FFF6  3A                 	db	58	;':'
  1088  00FFF7  20                 	db	32
  1089  00FFF8  25                 	db	37
  1090  00FFF9  64                 	db	100	;'d'
  1091  00FFFA  0A                 	db	10
  1092  00FFFB  00                 	db	0
  1093  00FFFC                     STR_1:
  1094  00FFFC  25                 	db	37
  1095  00FFFD  63                 	db	99	;'c'
  1096  00FFFE  00                 	db	0
  1097  0000                     
  1098                           ; #config settings
  1099  00FFFF  00                 	db	0	; dummy byte at the end
  1100  0000                     
  1101                           	psect	cinit
  1102  012DA8                     __pcinit:
  1103                           	opt stack 0
  1104  012DA8                     start_initialization:
  1105                           	opt stack 0
  1106  012DA8                     __initialization:
  1107                           	opt stack 0
  1108                           
  1109                           ; Initialize objects allocated to BANK3 (8 bytes)
  1110                           ; load TBLPTR registers with __pidataBANK3
  1111  012DA8  0EBE               	movlw	low __pidataBANK3
  1112  012DAA  6EF6               	movwf	tblptrl,c
  1113  012DAC  0E49               	movlw	high __pidataBANK3
  1114  012DAE  6EF7               	movwf	tblptrh,c
  1115  012DB0  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1116  012DB2  6EF8               	movwf	tblptru,c
  1117  012DB4  EE03  F0D5         	lfsr	0,__pdataBANK3
  1118  012DB8  EE10 F008          	lfsr	1,8
  1119  012DBC                     copy_data0:
  1120  012DBC  0009               	tblrd		*+
  1121  012DBE  CFF5 FFEE          	movff	tablat,postinc0
  1122  012DC2  50E5               	movf	postdec1,w,c
  1123  012DC4  50E1               	movf	fsr1l,w,c
  1124  012DC6  E1FA               	bnz	copy_data0
  1125                           
  1126                           ; Initialize objects allocated to BANK0 (7 bytes)
  1127                           ; load TBLPTR registers with __pidataBANK0
  1128  012DC8  0ED6               	movlw	low __pidataBANK0
  1129  012DCA  6EF6               	movwf	tblptrl,c
  1130  012DCC  0E49               	movlw	high __pidataBANK0
  1131  012DCE  6EF7               	movwf	tblptrh,c
  1132  012DD0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1133  012DD2  6EF8               	movwf	tblptru,c
  1134  012DD4  EE00  F0F9         	lfsr	0,__pdataBANK0
  1135  012DD8  EE10 F007          	lfsr	1,7
  1136  012DDC                     copy_data1:
  1137  012DDC  0009               	tblrd		*+
  1138  012DDE  CFF5 FFEE          	movff	tablat,postinc0
  1139  012DE2  50E5               	movf	postdec1,w,c
  1140  012DE4  50E1               	movf	fsr1l,w,c
  1141  012DE6  E1FA               	bnz	copy_data1
  1142                           
  1143                           ; Initialize objects allocated to COMRAM (10 bytes)
  1144                           ; load TBLPTR registers with __pidataCOMRAM
  1145  012DE8  0EAA               	movlw	low __pidataCOMRAM
  1146  012DEA  6EF6               	movwf	tblptrl,c
  1147  012DEC  0E49               	movlw	high __pidataCOMRAM
  1148  012DEE  6EF7               	movwf	tblptrh,c
  1149  012DF0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1150  012DF2  6EF8               	movwf	tblptru,c
  1151  012DF4  EE00  F047         	lfsr	0,__pdataCOMRAM
  1152  012DF8  EE10 F00A          	lfsr	1,10
  1153  012DFC                     copy_data2:
  1154  012DFC  0009               	tblrd		*+
  1155  012DFE  CFF5 FFEE          	movff	tablat,postinc0
  1156  012E02  50E5               	movf	postdec1,w,c
  1157  012E04  50E1               	movf	fsr1l,w,c
  1158  012E06  E1FA               	bnz	copy_data2
  1159                           
  1160                           ; Clear objects allocated to BIGRAM (300 bytes)
  1161  012E08  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1162  012E0C  EE11 F02C          	lfsr	1,300
  1163  012E10                     clear_0:
  1164  012E10  6AEE               	clrf	postinc0,c
  1165  012E12  50E5               	movf	postdec1,w,c
  1166  012E14  50E1               	movf	fsr1l,w,c
  1167  012E16  E1FC               	bnz	clear_0
  1168  012E18  50E2               	movf	fsr1h,w,c
  1169  012E1A  E1FA               	bnz	clear_0
  1170                           
  1171                           ; Clear objects allocated to BANK4 (170 bytes)
  1172  012E1C  EE04  F000         	lfsr	0,__pbssBANK4
  1173  012E20  0EAA               	movlw	170
  1174  012E22                     clear_1:
  1175  012E22  6AEE               	clrf	postinc0,c
  1176  012E24  06E8               	decf	wreg,f,c
  1177  012E26  E1FD               	bnz	clear_1
  1178                           
  1179                           ; Clear objects allocated to BANK3 (213 bytes)
  1180  012E28  EE03  F000         	lfsr	0,__pbssBANK3
  1181  012E2C  0ED5               	movlw	213
  1182  012E2E                     clear_2:
  1183  012E2E  6AEE               	clrf	postinc0,c
  1184  012E30  06E8               	decf	wreg,f,c
  1185  012E32  E1FD               	bnz	clear_2
  1186                           
  1187                           ; Clear objects allocated to BANK0 (85 bytes)
  1188  012E34  EE00  F060         	lfsr	0,__pbssBANK0
  1189  012E38  0E55               	movlw	85
  1190  012E3A                     clear_3:
  1191  012E3A  6AEE               	clrf	postinc0,c
  1192  012E3C  06E8               	decf	wreg,f,c
  1193  012E3E  E1FD               	bnz	clear_3
  1194                           
  1195                           ; Clear objects allocated to COMRAM (30 bytes)
  1196  012E40  EE00  F029         	lfsr	0,__pbssCOMRAM
  1197  012E44  0E1E               	movlw	30
  1198  012E46                     clear_4:
  1199  012E46  6AEE               	clrf	postinc0,c
  1200  012E48  06E8               	decf	wreg,f,c
  1201  012E4A  E1FD               	bnz	clear_4
  1202  012E4C                     end_of_initialization:
  1203                           	opt stack 0
  1204  012E4C                     __end_of__initialization:
  1205                           	opt stack 0
  1206  012E4C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1207  012E4E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1208  012E50  0100               	movlb	0
  1209  012E52  EF6E  F087         	goto	_main	;jump to C main() function
  1210                           tblptru	equ	0xFF8
  1211                           tblptrh	equ	0xFF7
  1212                           tblptrl	equ	0xFF6
  1213                           tablat	equ	0xFF5
  1214                           postinc0	equ	0xFEE
  1215                           wreg	equ	0xFE8
  1216                           postdec1	equ	0xFE5
  1217                           fsr1h	equ	0xFE2
  1218                           fsr1l	equ	0xFE1
  1219                           
  1220                           	psect	bssCOMRAM
  1221  000029                     __pbssCOMRAM:
  1222                           	opt stack 0
  1223  000029                     _COUNTER:
  1224                           	opt stack 0
  1225  000029                     	ds	2
  1226  00002B                     HMI_GRender@a:
  1227                           	opt stack 0
  1228  00002B                     	ds	2
  1229  00002D                     _iRDropRight:
  1230                           	opt stack 0
  1231  00002D                     	ds	1
  1232  00002E                     _iRVirtualWall:
  1233                           	opt stack 0
  1234  00002E                     	ds	1
  1235  00002F                     _iRCliffR:
  1236                           	opt stack 0
  1237  00002F                     	ds	1
  1238  000030                     _iRCliffFR:
  1239                           	opt stack 0
  1240  000030                     	ds	1
  1241  000031                     _iRCliffFL:
  1242                           	opt stack 0
  1243  000031                     	ds	1
  1244  000032                     _iRCliffL:
  1245                           	opt stack 0
  1246  000032                     	ds	1
  1247  000033                     _iRWall:
  1248                           	opt stack 0
  1249  000033                     	ds	1
  1250  000034                     _iRBumpDrop:
  1251                           	opt stack 0
  1252  000034                     	ds	1
  1253  000035                     _iRScriptIndex:
  1254                           	opt stack 0
  1255  000035                     	ds	1
  1256  000036                     _u:
  1257                           	opt stack 0
  1258  000036                     	ds	1
  1259  000037                     _j:
  1260                           	opt stack 0
  1261  000037                     	ds	1
  1262  000038                     _i:
  1263                           	opt stack 0
  1264  000038                     	ds	1
  1265  000039                     Timer0_Init@PRE:
  1266                           	opt stack 0
  1267  000039                     	ds	1
  1268  00003A                     _INDEX:
  1269                           	opt stack 0
  1270  00003A                     	ds	1
  1271  00003B                     rand@screw:
  1272                           	opt stack 0
  1273  00003B                     	ds	1
  1274  00003C                     _ADC_Initialised:
  1275                           	opt stack 0
  1276  00003C                     	ds	1
  1277  00003D                     OutSeg@a:
  1278                           	opt stack 0
  1279  00003D                     	ds	1
  1280  00003E                     OutSeg@segset:
  1281                           	opt stack 0
  1282  00003E                     	ds	1
  1283  00003F                     OutSeg@cur:
  1284                           	opt stack 0
  1285  00003F                     	ds	1
  1286  000040                     _I2C1T:
  1287                           	opt stack 0
  1288  000040                     	ds	7
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1h	equ	0xFE2
  1297                           fsr1l	equ	0xFE1
  1298                           
  1299                           	psect	dataCOMRAM
  1300  000047                     __pdataCOMRAM:
  1301                           	opt stack 0
  1302  000047                     _gCursor:
  1303                           	opt stack 0
  1304  000047                     	ds	4
  1305  00004B                     _Bus_State:
  1306                           	opt stack 0
  1307  00004B                     	ds	1
  1308  00004C                     	ds	1
  1309  00004D                     	ds	1
  1310  00004E                     	ds	1
  1311  00004F                     _l:
  1312                           	opt stack 0
  1313  00004F                     	ds	1
  1314  000050                     _w:
  1315                           	opt stack 0
  1316  000050                     	ds	1
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1h	equ	0xFE2
  1325                           fsr1l	equ	0xFE1
  1326                           
  1327                           	psect	bssBANK0
  1328  000060                     __pbssBANK0:
  1329                           	opt stack 0
  1330  000060                     _iRAngleSS:
  1331                           	opt stack 0
  1332  000060                     	ds	4
  1333  000064                     _iRDistanceSS:
  1334                           	opt stack 0
  1335  000064                     	ds	4
  1336  000068                     Timer0_Init@DIV:
  1337                           	opt stack 0
  1338  000068                     	ds	4
  1339  00006C                     _gISR:
  1340                           	opt stack 0
  1341  00006C                     	ds	3
  1342  00006F                     _lQueue:
  1343                           	opt stack 0
  1344  00006F                     	ds	3
  1345  000072                     _lStepFunction:
  1346                           	opt stack 0
  1347  000072                     	ds	3
  1348  000075                     _iRAngle:
  1349                           	opt stack 0
  1350  000075                     	ds	2
  1351  000077                     _iRDistance:
  1352                           	opt stack 0
  1353  000077                     	ds	2
  1354  000079                     _pShiftVal:
  1355                           	opt stack 0
  1356  000079                     	ds	2
  1357  00007B                     _val:
  1358                           	opt stack 0
  1359  00007B                     	ds	2
  1360  00007D                     _lMotor:
  1361                           	opt stack 0
  1362  00007D                     	ds	2
  1363  00007F                     _lCurrent:
  1364                           	opt stack 0
  1365  00007F                     	ds	2
  1366  000081                     _gBackcolour:
  1367                           	opt stack 0
  1368  000081                     	ds	2
  1369  000083                     SPI_Send9@dat:
  1370                           	opt stack 0
  1371  000083                     	ds	2
  1372  000085                     _iRDropCaster:
  1373                           	opt stack 0
  1374  000085                     	ds	1
  1375  000086                     _iRDropLeft:
  1376                           	opt stack 0
  1377  000086                     	ds	1
  1378  000087                     _iRBumpLeft:
  1379                           	opt stack 0
  1380  000087                     	ds	1
  1381  000088                     _iRBumpRight:
  1382                           	opt stack 0
  1383  000088                     	ds	1
  1384  000089                     Event_TestButton@j:
  1385                           	opt stack 0
  1386  000089                     	ds	1
  1387  00008A                     Timer2_Init@PRE:
  1388                           	opt stack 0
  1389  00008A                     	ds	1
  1390  00008B                     Timer2_Init@INDEX:
  1391                           	opt stack 0
  1392  00008B                     	ds	1
  1393  00008C                     _lBufferY:
  1394                           	opt stack 0
  1395  00008C                     	ds	1
  1396  00008D                     _lBufferX:
  1397                           	opt stack 0
  1398  00008D                     	ds	1
  1399  00008E                     _clearall:
  1400                           	opt stack 0
  1401  00008E                     	ds	1
  1402  00008F                     _PortE:
  1403                           	opt stack 0
  1404  00008F                     	ds	10
  1405  000099                     _PortD:
  1406                           	opt stack 0
  1407  000099                     	ds	10
  1408  0000A3                     _PortC:
  1409                           	opt stack 0
  1410  0000A3                     	ds	10
  1411  0000AD                     LCD_DrawRectangle@p4:
  1412                           	opt stack 0
  1413  0000AD                     	ds	4
  1414  0000B1                     LCD_DrawRectangle@p2:
  1415                           	opt stack 0
  1416  0000B1                     	ds	4
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           
  1427                           	psect	dataBANK0
  1428  0000F9                     __pdataBANK0:
  1429                           	opt stack 0
  1430  0000F9                     _gCharSize:
  1431                           	opt stack 0
  1432  0000F9                     	ds	4
  1433  0000FD                     _gForecolour:
  1434                           	opt stack 0
  1435  0000FD                     	ds	2
  1436  0000FF                     _change:
  1437                           	opt stack 0
  1438  0000FF                     	ds	1
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1h	equ	0xFE2
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           	psect	bssBANK3
  1450  000300                     __pbssBANK3:
  1451                           	opt stack 0
  1452  000300                     _lCBuffer:
  1453                           	opt stack 0
  1454  000300                     	ds	30
  1455  00031E                     Timer2_Init@DIV:
  1456                           	opt stack 0
  1457  00031E                     	ds	4
  1458  000322                     _I2C2_More:
  1459                           	opt stack 0
  1460  000322                     	ds	3
  1461  000325                     _I2C1_More:
  1462                           	opt stack 0
  1463  000325                     	ds	3
  1464  000328                     _I2C2_Done:
  1465                           	opt stack 0
  1466  000328                     	ds	3
  1467  00032B                     _I2C1_Done:
  1468                           	opt stack 0
  1469  00032B                     	ds	3
  1470  00032E                     _HMIBoard:
  1471                           	opt stack 0
  1472  00032E                     	ds	58
  1473  000368                     _SPI1:
  1474                           	opt stack 0
  1475  000368                     	ds	11
  1476  000373                     _SPI2:
  1477                           	opt stack 0
  1478  000373                     	ds	11
  1479  00037E                     _DIPSwitch:
  1480                           	opt stack 0
  1481  00037E                     	ds	10
  1482  000388                     _TestButton:
  1483                           	opt stack 0
  1484  000388                     	ds	10
  1485  000392                     _PortG:
  1486                           	opt stack 0
  1487  000392                     	ds	10
  1488  00039C                     _PortB:
  1489                           	opt stack 0
  1490  00039C                     	ds	10
  1491  0003A6                     _PortA:
  1492                           	opt stack 0
  1493  0003A6                     	ds	10
  1494  0003B0                     _PortF:
  1495                           	opt stack 0
  1496  0003B0                     	ds	10
  1497  0003BA                     _I2C2T:
  1498                           	opt stack 0
  1499  0003BA                     	ds	7
  1500  0003C1                     _ADC_AN3:
  1501                           	opt stack 0
  1502  0003C1                     	ds	5
  1503  0003C6                     _ADC_AN2:
  1504                           	opt stack 0
  1505  0003C6                     	ds	5
  1506  0003CB                     _ADC_AN1:
  1507                           	opt stack 0
  1508  0003CB                     	ds	5
  1509  0003D0                     _ADC_AN0:
  1510                           	opt stack 0
  1511  0003D0                     	ds	5
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1h	equ	0xFE2
  1520                           fsr1l	equ	0xFE1
  1521                           
  1522                           	psect	dataBANK3
  1523  0003D5                     __pdataBANK3:
  1524                           	opt stack 0
  1525  0003D5                     Console_Render@F6956:
  1526                           	opt stack 0
  1527  0003D5                     	ds	4
  1528  0003D9                     _gLineSize:
  1529                           	opt stack 0
  1530  0003D9                     	ds	4
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1h	equ	0xFE2
  1539                           fsr1l	equ	0xFE1
  1540                           
  1541                           	psect	bssBANK4
  1542  000400                     __pbssBANK4:
  1543                           	opt stack 0
  1544  000400                     _iRScriptStack:
  1545                           	opt stack 0
  1546  000400                     	ds	100
  1547  000464                     Console_MakeField@Fill:
  1548                           	opt stack 0
  1549  000464                     	ds	70
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1h	equ	0xFE2
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           	psect	bssBIGRAM
  1561  0004AA                     __pbssBIGRAM:
  1562                           	opt stack 0
  1563  0004AA                     _lBuffer:
  1564                           	opt stack 0
  1565  0004AA                     	ds	300
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1h	equ	0xFE2
  1574                           fsr1l	equ	0xFE1
  1575                           
  1576                           	psect	cstackBANK3
  1577  0003DD                     __pcstackBANK3:
  1578                           	opt stack 0
  1579  0003DD                     ??_main:
  1580                           
  1581                           ; 1 bytes @ 0x0
  1582  0003DD                     	ds	1
  1583  0003DE                     main@distanceTotal:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x1
  1587  0003DE                     	ds	2
  1588  0003E0                     main@time:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x3
  1592  0003E0                     	ds	2
  1593  0003E2                     main@dist:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x5
  1597  0003E2                     	ds	2
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           
  1608                           	psect	cstackBANK2
  1609  000200                     __pcstackBANK2:
  1610                           	opt stack 0
  1611  000200                     irobot_query_and_update@TXArray:
  1612                           	opt stack 0
  1613                           
  1614                           ; 256 bytes @ 0x0
  1615  000200                     	ds	256
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           postdec1	equ	0xFE5
  1623                           fsr1h	equ	0xFE2
  1624                           fsr1l	equ	0xFE1
  1625                           
  1626                           	psect	cstackBANK1
  1627  000100                     __pcstackBANK1:
  1628                           	opt stack 0
  1629  000100                     ??_Port_Init:
  1630  000100                     Button_Init@pInput:
  1631                           	opt stack 0
  1632  000100                     irobot_query_and_update@RXArray:
  1633                           	opt stack 0
  1634                           
  1635                           ; 256 bytes @ 0x0
  1636  000100                     	ds	2
  1637  000102                     Button_Init@pThreshold:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x2
  1641  000102                     	ds	2
  1642  000104                     Button_Init@pInitIO:
  1643                           	opt stack 0
  1644                           
  1645                           ; 3 bytes @ 0x4
  1646  000104                     	ds	3
  1647  000107                     Button_Init@pGetState:
  1648                           	opt stack 0
  1649                           
  1650                           ; 3 bytes @ 0x7
  1651  000107                     	ds	3
  1652  00010A                     Button_Init@pFunction:
  1653                           	opt stack 0
  1654                           
  1655                           ; 3 bytes @ 0xA
  1656  00010A                     	ds	246
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1h	equ	0xFE2
  1665                           fsr1l	equ	0xFE1
  1666                           
  1667                           	psect	cstackBANK0
  1668  0000B5                     __pcstackBANK0:
  1669                           	opt stack 0
  1670  0000B5                     ??_Console_ClearCursor:
  1671  0000B5                     ??_sort_iRBumpDrop:
  1672  0000B5                     ?_load_iRScriptStack:
  1673                           	opt stack 0
  1674  0000B5                     ??_Console_Init:
  1675  0000B5                     ??_Console_NewLine:
  1676  0000B5                     ??_Console_FormFeed:
  1677  0000B5                     ??_HMI_SetButton:
  1678  0000B5                     ?_GetPortProperties:
  1679                           	opt stack 0
  1680  0000B5                     ?_GetPortPORT:
  1681                           	opt stack 0
  1682  0000B5                     ?_GetPortTRIS:
  1683                           	opt stack 0
  1684  0000B5                     ?_twos_complement_of:
  1685                           	opt stack 0
  1686  0000B5                     ?___wmul:
  1687                           	opt stack 0
  1688  0000B5                     ?___awdiv:
  1689                           	opt stack 0
  1690  0000B5                     ?___lwdiv:
  1691                           	opt stack 0
  1692  0000B5                     ?___lldiv:
  1693                           	opt stack 0
  1694  0000B5                     Mode_Set@pMode:
  1695                           	opt stack 0
  1696  0000B5                     ToSegment@pCHR:
  1697                           	opt stack 0
  1698  0000B5                     HMI_SetBar@pValue:
  1699                           	opt stack 0
  1700  0000B5                     get_packet_size@packetID:
  1701                           	opt stack 0
  1702  0000B5                     eusart_putch@eusartSendChar:
  1703                           	opt stack 0
  1704  0000B5                     Port_GetPin@pInput:
  1705                           	opt stack 0
  1706  0000B5                     Port_GetQuad@pInput:
  1707                           	opt stack 0
  1708  0000B5                     SPI_DisableISR@pInput:
  1709                           	opt stack 0
  1710  0000B5                     SPI_DCS@pInput:
  1711                           	opt stack 0
  1712  0000B5                     SPI_Send@pInput:
  1713                           	opt stack 0
  1714  0000B5                     Byte_SetBit@pInput:
  1715                           	opt stack 0
  1716  0000B5                     Byte_GetBit@pInput:
  1717                           	opt stack 0
  1718  0000B5                     Byte_SetZone@pInput:
  1719                           	opt stack 0
  1720  0000B5                     Byte_GetZone@pInput:
  1721                           	opt stack 0
  1722  0000B5                     Byte_SetByte@pInput:
  1723                           	opt stack 0
  1724  0000B5                     delay_ms@ms:
  1725                           	opt stack 0
  1726  0000B5                     delay_us@us:
  1727                           	opt stack 0
  1728  0000B5                     reverse@input:
  1729                           	opt stack 0
  1730  0000B5                     twos_complement_of@complementValue:
  1731                           	opt stack 0
  1732  0000B5                     ___wmul@multiplier:
  1733                           	opt stack 0
  1734  0000B5                     ___awdiv@dividend:
  1735                           	opt stack 0
  1736  0000B5                     ___lwdiv@dividend:
  1737                           	opt stack 0
  1738  0000B5                     MXK_Queue@pCallback:
  1739                           	opt stack 0
  1740  0000B5                     ___lldiv@dividend:
  1741                           	opt stack 0
  1742                           
  1743                           ; 4 bytes @ 0x0
  1744  0000B5                     	ds	1
  1745  0000B6                     rx_assign@packetIDValue:
  1746                           	opt stack 0
  1747  0000B6                     irobot_song_play@songNumber:
  1748                           	opt stack 0
  1749  0000B6                     HMI_SetSegments@pString:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x1
  1753  0000B6                     	ds	1
  1754  0000B7                     GetPortProperties@pInput:
  1755                           	opt stack 0
  1756  0000B7                     GetPortPORT@pInput:
  1757                           	opt stack 0
  1758  0000B7                     GetPortTRIS@pInput:
  1759                           	opt stack 0
  1760  0000B7                     Port_GetPin@pPin:
  1761                           	opt stack 0
  1762  0000B7                     Port_GetQuad@pQuad:
  1763                           	opt stack 0
  1764  0000B7                     SPI_Send@pData:
  1765                           	opt stack 0
  1766  0000B7                     Byte_SetBit@pBit:
  1767                           	opt stack 0
  1768  0000B7                     Byte_GetBit@pBit:
  1769                           	opt stack 0
  1770  0000B7                     Byte_SetZone@pMax:
  1771                           	opt stack 0
  1772  0000B7                     Byte_GetZone@pMax:
  1773                           	opt stack 0
  1774  0000B7                     Byte_SetByte@pValue:
  1775                           	opt stack 0
  1776  0000B7                     Console_Init@x:
  1777                           	opt stack 0
  1778  0000B7                     Console_FormFeed@x:
  1779                           	opt stack 0
  1780  0000B7                     rx_assign@byteNumber:
  1781                           	opt stack 0
  1782  0000B7                     reverse@length:
  1783                           	opt stack 0
  1784  0000B7                     ___wmul@multiplicand:
  1785                           	opt stack 0
  1786  0000B7                     ___awdiv@divisor:
  1787                           	opt stack 0
  1788  0000B7                     ___lwdiv@divisor:
  1789                           	opt stack 0
  1790  0000B7                     delay_ms@u:
  1791                           	opt stack 0
  1792  0000B7                     delay_us@u:
  1793                           	opt stack 0
  1794  0000B7                     HMI_SetButton@reindex:
  1795                           	opt stack 0
  1796                           
  1797                           ; 4 bytes @ 0x2
  1798  0000B7                     	ds	1
  1799  0000B8                     ??_Port_GetPin:
  1800  0000B8                     ??_Port_GetQuad:
  1801  0000B8                     ??_Byte_GetBit:
  1802  0000B8                     ??_rx_assign:
  1803  0000B8                     LCD_Write@mode:
  1804                           	opt stack 0
  1805  0000B8                     Byte_SetBit@pValue:
  1806                           	opt stack 0
  1807  0000B8                     Byte_SetZone@pChunk:
  1808                           	opt stack 0
  1809  0000B8                     Byte_GetZone@pChunk:
  1810                           	opt stack 0
  1811  0000B8                     Console_Init@y:
  1812                           	opt stack 0
  1813  0000B8                     Console_FormFeed@y:
  1814                           	opt stack 0
  1815                           
  1816                           ; 1 bytes @ 0x3
  1817  0000B8                     	ds	1
  1818  0000B9                     ??_Byte_SetBit:
  1819  0000B9                     ??_Console_IncrementCursor:
  1820  0000B9                     LCD_Write@value:
  1821                           	opt stack 0
  1822  0000B9                     Byte_GetBit@Output:
  1823                           	opt stack 0
  1824  0000B9                     Byte_SetZone@pChunkSize:
  1825                           	opt stack 0
  1826  0000B9                     Byte_GetZone@pChunkSize:
  1827                           	opt stack 0
  1828  0000B9                     reverse@tempVar:
  1829                           	opt stack 0
  1830  0000B9                     ___awdiv@counter:
  1831                           	opt stack 0
  1832  0000B9                     ___lwdiv@counter:
  1833                           	opt stack 0
  1834  0000B9                     HMI_SetSegments@in:
  1835                           	opt stack 0
  1836  0000B9                     ___wmul@product:
  1837                           	opt stack 0
  1838  0000B9                     ___lldiv@divisor:
  1839                           	opt stack 0
  1840                           
  1841                           ; 4 bytes @ 0x4
  1842  0000B9                     	ds	1
  1843  0000BA                     ??_Byte_GetZone:
  1844  0000BA                     ?_Console_MakeField:
  1845                           	opt stack 0
  1846  0000BA                     Set_Addr_Window@ys:
  1847                           	opt stack 0
  1848  0000BA                     Set_Rotation@m:
  1849                           	opt stack 0
  1850  0000BA                     Port_GetPin@Output:
  1851                           	opt stack 0
  1852  0000BA                     Port_GetQuad@Output:
  1853                           	opt stack 0
  1854  0000BA                     Byte_SetZone@pValue:
  1855                           	opt stack 0
  1856  0000BA                     rx_assign@packetID:
  1857                           	opt stack 0
  1858  0000BA                     ___awdiv@sign:
  1859                           	opt stack 0
  1860  0000BA                     LCD_Word_Write@value:
  1861                           	opt stack 0
  1862  0000BA                     reverse@iterator:
  1863                           	opt stack 0
  1864  0000BA                     ___lwdiv@quotient:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x5
  1868  0000BA                     	ds	1
  1869  0000BB                     ?_irobot_query_and_update:
  1870                           	opt stack 0
  1871  0000BB                     ??_Byte_SetZone:
  1872  0000BB                     Set_Addr_Window@xe:
  1873                           	opt stack 0
  1874  0000BB                     Set_Rotation@rotation:
  1875                           	opt stack 0
  1876  0000BB                     Byte_GetZone@MASK:
  1877                           	opt stack 0
  1878  0000BB                     HMI_SetButton@pValue:
  1879                           	opt stack 0
  1880  0000BB                     MXK_BlockSwitchTo@CUR:
  1881                           	opt stack 0
  1882  0000BB                     MXK_SwitchTo@CUR:
  1883                           	opt stack 0
  1884  0000BB                     ___awdiv@quotient:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x6
  1888  0000BB                     	ds	1
  1889  0000BC                     ??_Console_MakeField:
  1890  0000BC                     ?___lwmod:
  1891                           	opt stack 0
  1892  0000BC                     Set_Addr_Window@ye:
  1893                           	opt stack 0
  1894  0000BC                     Byte_GetZone@Offset:
  1895                           	opt stack 0
  1896  0000BC                     HMI_SetButton@v:
  1897                           	opt stack 0
  1898  0000BC                     MXK_BlockSwitchTo@pModule:
  1899                           	opt stack 0
  1900  0000BC                     MXK_SwitchTo@pModule:
  1901                           	opt stack 0
  1902  0000BC                     ___lwmod@dividend:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x7
  1906  0000BC                     	ds	1
  1907  0000BD                     ??_Console_Tab:
  1908  0000BD                     Set_Addr_Window@xs:
  1909                           	opt stack 0
  1910  0000BD                     Byte_GetZone@Output:
  1911                           	opt stack 0
  1912  0000BD                     ___lldiv@quotient:
  1913                           	opt stack 0
  1914                           
  1915                           ; 4 bytes @ 0x8
  1916  0000BD                     	ds	1
  1917  0000BE                     Byte_SetZone@Offset:
  1918                           	opt stack 0
  1919  0000BE                     LCD_Fill@pColour:
  1920                           	opt stack 0
  1921  0000BE                     LCD_FillRectangle@pColour:
  1922                           	opt stack 0
  1923  0000BE                     Byte_GetPair@pInput:
  1924                           	opt stack 0
  1925  0000BE                     Console_MakeField@Index:
  1926                           	opt stack 0
  1927  0000BE                     ___lwmod@divisor:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x9
  1931  0000BE                     	ds	1
  1932  0000BF                     ??_load_iRScriptStack:
  1933  0000BF                     Byte_SetZone@MASK:
  1934                           	opt stack 0
  1935                           
  1936                           ; 1 bytes @ 0xA
  1937  0000BF                     	ds	1
  1938  0000C0                     LCD_Fill@i:
  1939                           	opt stack 0
  1940  0000C0                     Byte_GetPair@pPair:
  1941                           	opt stack 0
  1942  0000C0                     Console_MakeField@pInput:
  1943                           	opt stack 0
  1944  0000C0                     ___lwmod@counter:
  1945                           	opt stack 0
  1946  0000C0                     Byte_SetPair@pInput:
  1947                           	opt stack 0
  1948  0000C0                     Byte_SetQuad@pInput:
  1949                           	opt stack 0
  1950  0000C0                     LCD_FillRectangle@pPoint:
  1951                           	opt stack 0
  1952                           
  1953                           ; 4 bytes @ 0xB
  1954  0000C0                     	ds	1
  1955  0000C1                     LCD_Fill@j:
  1956                           	opt stack 0
  1957  0000C1                     ___lldiv@counter:
  1958                           	opt stack 0
  1959  0000C1                     Word_GetPair@pInput:
  1960                           	opt stack 0
  1961  0000C1                     itos@input:
  1962                           	opt stack 0
  1963  0000C1                     Console_MakeField@Column:
  1964                           	opt stack 0
  1965  0000C1                     load_iRScriptStack@loadByte:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0xC
  1969  0000C1                     	ds	1
  1970  0000C2                     Byte_SetPair@pPair:
  1971                           	opt stack 0
  1972  0000C2                     Byte_SetQuad@pQuad:
  1973                           	opt stack 0
  1974  0000C2                     Console_Tab@t:
  1975                           	opt stack 0
  1976  0000C2                     Timer2_Init@pFrequency:
  1977                           	opt stack 0
  1978                           
  1979                           ; 4 bytes @ 0xD
  1980  0000C2                     	ds	1
  1981  0000C3                     Byte_SetPair@pValue:
  1982                           	opt stack 0
  1983  0000C3                     Byte_SetQuad@pValue:
  1984                           	opt stack 0
  1985  0000C3                     Word_GetPair@pPair:
  1986                           	opt stack 0
  1987  0000C3                     Console_Tab@i:
  1988                           	opt stack 0
  1989  0000C3                     load_iRScriptStack@bytesToLoad:
  1990                           	opt stack 0
  1991  0000C3                     itos@destination:
  1992                           	opt stack 0
  1993  0000C3                     _Console_MakeField$10974:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0xE
  1997  0000C3                     	ds	1
  1998  0000C4                     Console_Tab@c:
  1999                           	opt stack 0
  2000  0000C4                     load_iRScriptStack@i:
  2001                           	opt stack 0
  2002  0000C4                     Port_SetPin@pInput:
  2003                           	opt stack 0
  2004  0000C4                     Port_Set@pInput:
  2005                           	opt stack 0
  2006  0000C4                     SPI_MinSpeed@pInput:
  2007                           	opt stack 0
  2008  0000C4                     SPI_MaxSpeed@pInput:
  2009                           	opt stack 0
  2010  0000C4                     Word_SetPair@pInput:
  2011                           	opt stack 0
  2012  0000C4                     PortProperty_Valid@pInput:
  2013                           	opt stack 0
  2014  0000C4                     LCD_FillRectangle@pSize:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0xF
  2018  0000C4                     	ds	1
  2019  0000C5                     ??_irobot_query_and_update:
  2020  0000C5                     ??_Console_PrintChar:
  2021  0000C5                     Console_MakeField@x:
  2022                           	opt stack 0
  2023  0000C5                     irobot_leds@LEDBit:
  2024                           	opt stack 0
  2025  0000C5                     itos@Data:
  2026                           	opt stack 0
  2027  0000C5                     irobot_move@moveSpeed:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x10
  2031  0000C5                     	ds	1
  2032  0000C6                     ??_Timer2_Init:
  2033  0000C6                     Port_SetPin@pPin:
  2034                           	opt stack 0
  2035  0000C6                     Port_Set@pValue:
  2036                           	opt stack 0
  2037  0000C6                     Word_SetPair@pPair:
  2038                           	opt stack 0
  2039  0000C6                     PortProperty_Valid@pPinDrive:
  2040                           	opt stack 0
  2041  0000C6                     Console_MakeField@y:
  2042                           	opt stack 0
  2043  0000C6                     irobot_leds@powerColour:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x11
  2047  0000C6                     	ds	1
  2048  0000C7                     ??_Port_Set:
  2049  0000C7                     Port_SetPin@pValue:
  2050                           	opt stack 0
  2051  0000C7                     Word_SetPair@pValue:
  2052                           	opt stack 0
  2053  0000C7                     PortProperty_Valid@pPin:
  2054                           	opt stack 0
  2055  0000C7                     irobot_leds@powerLuminosity:
  2056                           	opt stack 0
  2057  0000C7                     LCD_DrawField@pField:
  2058                           	opt stack 0
  2059  0000C7                     itos@Length:
  2060                           	opt stack 0
  2061  0000C7                     irobot_move@moveTurnRadius:
  2062                           	opt stack 0
  2063  0000C7                     Timer2_Init@RDIV:
  2064                           	opt stack 0
  2065                           
  2066                           ; 4 bytes @ 0x12
  2067  0000C7                     	ds	1
  2068  0000C8                     ??_PortProperty_Valid:
  2069  0000C8                     ??_LCD_FillRectangle:
  2070  0000C8                     Port_SetPin@Type:
  2071                           	opt stack 0
  2072  0000C8                     Console_PrintChar@pInput:
  2073                           	opt stack 0
  2074  0000C8                     irobot_leds@isScript:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x13
  2078  0000C8                     	ds	1
  2079  0000C9                     ??_irobot_move:
  2080  0000C9                     LED_Set@pValue:
  2081                           	opt stack 0
  2082  0000C9                     putch@c:
  2083                           	opt stack 0
  2084  0000C9                     irobot_led_power_on@powerOnColour:
  2085                           	opt stack 0
  2086  0000C9                     Port_TogglePin@pInput:
  2087                           	opt stack 0
  2088  0000C9                     itos@Out:
  2089                           	opt stack 0
  2090  0000C9                     LCD_DrawField@pPoint:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0x14
  2094  0000C9                     	ds	1
  2095  0000CA                     ?_printf:
  2096                           	opt stack 0
  2097  0000CA                     LCD_FillRectangle@i:
  2098                           	opt stack 0
  2099  0000CA                     LED_Set@pLED:
  2100                           	opt stack 0
  2101  0000CA                     irobot_query_and_update@packetIDs:
  2102                           	opt stack 0
  2103  0000CA                     printf@f:
  2104                           	opt stack 0
  2105  0000CA                     PortProperty_Valid@Errors:
  2106                           	opt stack 0
  2107                           
  2108                           ; 16 bytes @ 0x15
  2109  0000CA                     	ds	1
  2110  0000CB                     LCD_FillRectangle@j:
  2111                           	opt stack 0
  2112  0000CB                     Port_TogglePin@pPin:
  2113                           	opt stack 0
  2114  0000CB                     HMI_SetNumber@pInput:
  2115                           	opt stack 0
  2116  0000CB                     Timer2_Init@pCPUClock:
  2117                           	opt stack 0
  2118                           
  2119                           ; 4 bytes @ 0x16
  2120  0000CB                     	ds	1
  2121  0000CC                     Port_TogglePin@Value:
  2122                           	opt stack 0
  2123  0000CC                     irobot_query_and_update@streamSize:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x17
  2127  0000CC                     	ds	1
  2128  0000CD                     LED_Toggle@pLED:
  2129                           	opt stack 0
  2130  0000CD                     irobot_query_and_update@numberOfPacketRequests:
  2131                           	opt stack 0
  2132  0000CD                     irobot_move@isScript:
  2133                           	opt stack 0
  2134  0000CD                     LCD_DrawField@pSize:
  2135                           	opt stack 0
  2136                           
  2137                           ; 4 bytes @ 0x18
  2138  0000CD                     	ds	1
  2139  0000CE                     Event_DIPSwitch@pState:
  2140                           	opt stack 0
  2141  0000CE                     Event_TestButton@pState:
  2142                           	opt stack 0
  2143  0000CE                     irobot_query_and_update@packetVariable:
  2144                           	opt stack 0
  2145  0000CE                     irobot_stop_motion@isScript:
  2146                           	opt stack 0
  2147  0000CE                     irobot_move_straight@straightSpeed:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x19
  2151  0000CE                     	ds	1
  2152  0000CF                     Event_DIPSwitch@Bar:
  2153                           	opt stack 0
  2154  0000CF                     irobot_query_and_update@j:
  2155                           	opt stack 0
  2156  0000CF                     Timer2_Init@DIVIDE:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0x1A
  2160  0000CF                     	ds	1
  2161  0000D0                     irobot_query_and_update@startIndex:
  2162                           	opt stack 0
  2163  0000D0                     Button_Poll@pButton:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x1B
  2167  0000D0                     	ds	1
  2168  0000D1                     ??_LCD_DrawField:
  2169  0000D1                     irobot_query_and_update@i:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x1C
  2173  0000D1                     	ds	1
  2174  0000D2                     ??_printf:
  2175  0000D2                     Button_Poll@pIncrement:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x1D
  2179  0000D2                     	ds	1
  2180  0000D3                     ??_Button_Poll:
  2181  0000D3                     printf@prec:
  2182                           	opt stack 0
  2183  0000D3                     LCD_DrawField@count:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x1E
  2187  0000D3                     	ds	1
  2188  0000D4                     printf@flag:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x1F
  2192  0000D4                     	ds	1
  2193  0000D5                     LCD_DrawField@xmax:
  2194                           	opt stack 0
  2195  0000D5                     printf@ap:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x20
  2199  0000D5                     	ds	1
  2200  0000D6                     LCD_DrawField@ymax:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x21
  2204  0000D6                     	ds	1
  2205  0000D7                     LCD_DrawField@i:
  2206                           	opt stack 0
  2207  0000D7                     Port_Set@TypeRequired:
  2208                           	opt stack 0
  2209  0000D7                     printf@val:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x22
  2213  0000D7                     	ds	1
  2214  0000D8                     ??_Console_Render:
  2215  0000D8                     Button_Poll@Pin:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x23
  2219  0000D8                     	ds	1
  2220  0000D9                     printf@c:
  2221                           	opt stack 0
  2222  0000D9                     Port_Set@TypeActual:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x24
  2226  0000D9                     	ds	1
  2227  0000DA                     PortProperty_Valid@Pair:
  2228                           	opt stack 0
  2229  0000DA                     Console_Render@temp:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x25
  2233  0000DA                     	ds	1
  2234  0000DB                     Port_Set@Type:
  2235                           	opt stack 0
  2236  0000DB                     Port_CheckPairType@pInput:
  2237                           	opt stack 0
  2238  0000DB                     Port_SetPinType@pInput:
  2239                           	opt stack 0
  2240  0000DB                     Console_Render@lCursor:
  2241                           	opt stack 0
  2242                           
  2243                           ; 4 bytes @ 0x26
  2244  0000DB                     	ds	2
  2245  0000DD                     Port_CheckPairType@pPair:
  2246                           	opt stack 0
  2247  0000DD                     Port_SetPinType@pPin:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x28
  2251  0000DD                     	ds	1
  2252  0000DE                     Port_CheckPairType@pDrive:
  2253                           	opt stack 0
  2254  0000DE                     Port_SetPinType@pType:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x29
  2258  0000DE                     	ds	1
  2259  0000DF                     Port_CheckPairType@Pin1:
  2260                           	opt stack 0
  2261  0000DF                     Port_SetPinType@Output:
  2262                           	opt stack 0
  2263  0000DF                     Console_Render@x:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x2A
  2267  0000DF                     	ds	1
  2268  0000E0                     Port_CheckPairType@Pin2:
  2269                           	opt stack 0
  2270  0000E0                     Console_Render@y:
  2271                           	opt stack 0
  2272  0000E0                     Port_SetPinType@Props:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x2B
  2276  0000E0                     	ds	1
  2277  0000E1                     Port_CheckPairType@Output:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x2C
  2281  0000E1                     	ds	1
  2282  0000E2                     LED_Init@pLED:
  2283                           	opt stack 0
  2284  0000E2                     Port_CheckPairType@Props:
  2285                           	opt stack 0
  2286  0000E2                     SPI_Init@pClock:
  2287                           	opt stack 0
  2288                           
  2289                           ; 4 bytes @ 0x2D
  2290  0000E2                     	ds	2
  2291  0000E4                     Port_CheckQuadType@pInput:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x2F
  2295  0000E4                     	ds	2
  2296  0000E6                     Port_CheckQuadType@pQuad:
  2297                           	opt stack 0
  2298  0000E6                     SPI_Init@pChannel:
  2299                           	opt stack 0
  2300                           
  2301                           ; 1 bytes @ 0x31
  2302  0000E6                     	ds	1
  2303  0000E7                     Port_CheckQuadType@pDrive:
  2304                           	opt stack 0
  2305  0000E7                     SPI_Init@pMode:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x32
  2309  0000E7                     	ds	1
  2310  0000E8                     Port_CheckQuadType@Pair1:
  2311                           	opt stack 0
  2312  0000E8                     SPI_Init@pInput:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x33
  2316  0000E8                     	ds	1
  2317  0000E9                     Port_CheckQuadType@Pair2:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x34
  2321  0000E9                     	ds	1
  2322  0000EA                     ??_LCD_Init:
  2323  0000EA                     Port_CheckQuadType@Output:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x35
  2327  0000EA                     	ds	1
  2328  0000EB                     Port_CheckPortType@pInput:
  2329                           	opt stack 0
  2330  0000EB                     Port_SetQuadType@pInput:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x36
  2334  0000EB                     	ds	1
  2335  0000EC                     LCD_Init@i:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x37
  2339  0000EC                     	ds	1
  2340  0000ED                     Port_CheckPortType@pDrive:
  2341                           	opt stack 0
  2342  0000ED                     Port_SetQuadType@pQuad:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x38
  2346  0000ED                     	ds	1
  2347  0000EE                     Port_CheckPortType@Output:
  2348                           	opt stack 0
  2349  0000EE                     Port_SetQuadType@pType:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x39
  2353  0000EE                     	ds	1
  2354  0000EF                     Port_SetQuadType@Output:
  2355                           	opt stack 0
  2356  0000EF                     Port_SetType@pInput:
  2357                           	opt stack 0
  2358                           
  2359                           ; 2 bytes @ 0x3A
  2360  0000EF                     	ds	1
  2361  0000F0                     HMI_Init@in:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x3B
  2365  0000F0                     	ds	1
  2366  0000F1                     Port_SetType@pType:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0x3C
  2370  0000F1                     	ds	1
  2371  0000F2                     ??_Port_SetType:
  2372                           
  2373                           ; 1 bytes @ 0x3D
  2374  0000F2                     	ds	2
  2375  0000F4                     Port_SetType@Output:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x3F
  2379  0000F4                     	ds	1
  2380  0000F5                     Port_Init@pInput:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x40
  2384  0000F5                     	ds	2
  2385  0000F7                     Port_Init@pPort:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x42
  2389  0000F7                     	ds	1
  2390  0000F8                     Port_Init@i:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x43
  2394  0000F8                     	ds	1
  2395  0000F9                     tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           postdec1	equ	0xFE5
  2402                           fsr1h	equ	0xFE2
  2403                           fsr1l	equ	0xFE1
  2404                           
  2405                           ; 1 bytes @ 0x44
  2406                           
  2407                           	psect	cstackCOMRAM
  2408  000001                     __pcstackCOMRAM:
  2409                           	opt stack 0
  2410  000001                     i2Byte_SetBit@pInput:
  2411                           	opt stack 0
  2412  000001                     i2Byte_GetZone@pInput:
  2413                           	opt stack 0
  2414  000001                     i2delay_us@us:
  2415                           	opt stack 0
  2416  000001                     i2MXK_Queue@pCallback:
  2417                           	opt stack 0
  2418                           
  2419                           ; 3 bytes @ 0x0
  2420  000001                     	ds	2
  2421  000003                     i2Byte_SetBit@pBit:
  2422                           	opt stack 0
  2423  000003                     i2Byte_GetZone@pMax:
  2424                           	opt stack 0
  2425  000003                     i2delay_us@u:
  2426                           	opt stack 0
  2427                           
  2428                           ; 4 bytes @ 0x2
  2429  000003                     	ds	1
  2430  000004                     i2Byte_SetBit@pValue:
  2431                           	opt stack 0
  2432  000004                     i2Byte_GetZone@pChunk:
  2433                           	opt stack 0
  2434                           
  2435                           ; 1 bytes @ 0x3
  2436  000004                     	ds	1
  2437  000005                     ??i2_Byte_SetBit:
  2438  000005                     i2Byte_GetZone@pChunkSize:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x4
  2442  000005                     	ds	1
  2443  000006                     ??i2_Byte_GetZone:
  2444                           
  2445                           ; 1 bytes @ 0x5
  2446  000006                     	ds	1
  2447  000007                     i2Byte_GetZone@MASK:
  2448                           	opt stack 0
  2449  000007                     i2MXK_SwitchTo@CUR:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0x6
  2453  000007                     	ds	1
  2454  000008                     i2Byte_GetZone@Offset:
  2455                           	opt stack 0
  2456  000008                     i2MXK_SwitchTo@pModule:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x7
  2460  000008                     	ds	1
  2461  000009                     i2Byte_GetZone@Output:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x8
  2465  000009                     	ds	1
  2466  00000A                     i2Byte_GetPair@pInput:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x9
  2470  00000A                     	ds	2
  2471  00000C                     i2Byte_GetPair@pPair:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0xB
  2475  00000C                     	ds	1
  2476  00000D                     i2Word_GetPair@pInput:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0xC
  2480  00000D                     	ds	2
  2481  00000F                     i2Word_GetPair@pPair:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0xE
  2485  00000F                     	ds	1
  2486  000010                     i2Port_SetPin@pInput:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0xF
  2490  000010                     	ds	2
  2491  000012                     i2Port_SetPin@pPin:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0x11
  2495  000012                     	ds	1
  2496  000013                     i2Port_SetPin@pValue:
  2497                           	opt stack 0
  2498                           
  2499                           ; 1 bytes @ 0x12
  2500  000013                     	ds	1
  2501  000014                     i2Port_SetPin@Type:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x13
  2505  000014                     	ds	1
  2506  000015                     
  2507                           ; 1 bytes @ 0x14
  2508  000015                     	ds	2
  2509  000017                     ??_ISR_Function:
  2510                           
  2511                           ; 1 bytes @ 0x16
  2512  000017                     	ds	18
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           postinc0	equ	0xFEE
  2518                           wreg	equ	0xFE8
  2519                           postdec1	equ	0xFE5
  2520                           fsr1h	equ	0xFE2
  2521                           fsr1l	equ	0xFE1
  2522                           
  2523 ;;
  2524 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2525 ;;
  2526 ;; *************** function _main *****************
  2527 ;; Defined at:
  2528 ;;		line 452 in file "main.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  dist            2    5[BANK3 ] int 
  2533 ;;  time            2    3[BANK3 ] int 
  2534 ;;  distanceTota    2    1[BANK3 ] short 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;Total ram usage:        7 bytes
  2549 ;; Hardware stack levels required when called:   17
  2550 ;; This function calls:
  2551 ;;		_Console_Init
  2552 ;;		_Console_Render
  2553 ;;		_HMI_DIPSwitch
  2554 ;;		_HMI_DownSwitch
  2555 ;;		_HMI_Init
  2556 ;;		_HMI_LeftSwitch
  2557 ;;		_HMI_Poll
  2558 ;;		_HMI_RightSwitch
  2559 ;;		_HMI_UpSwitch
  2560 ;;		_LCD_Init
  2561 ;;		_MXK_BlockSwitchTo
  2562 ;;		_MXK_DIPSwitch
  2563 ;;		_MXK_Dequeue
  2564 ;;		_MXK_Init
  2565 ;;		_MXK_Release
  2566 ;;		_MXK_SwitchTo
  2567 ;;		_MXK_TestButton
  2568 ;;		___awdiv
  2569 ;;		_delay_ms
  2570 ;;		_eusart_init
  2571 ;;		_irobot_init
  2572 ;;		_irobot_init_song_0
  2573 ;;		_irobot_led_power_off
  2574 ;;		_irobot_led_power_on
  2575 ;;		_irobot_move_straight
  2576 ;;		_irobot_song_play
  2577 ;;		_irobot_stop_motion
  2578 ;;		_printf
  2579 ;;		_update_bump_and_cliff
  2580 ;;		_update_distance
  2581 ;; This function is called by:
  2582 ;;		Startup code after reset
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text0
  2587  010EDC                     __ptext0:
  2588                           	opt stack 0
  2589  010EDC                     _main:
  2590                           	opt stack 14
  2591                           
  2592                           ;main.c: 455: MXK_Init();
  2593                           
  2594                           ;incstack = 0
  2595  010EDC  EC9F  F08E         	call	_MXK_Init	;wreg free
  2596                           
  2597                           ;main.c: 458: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2598  010EE0  0E01               	movlw	1
  2599  010EE2  ECCA  F0A1         	call	_MXK_BlockSwitchTo
  2600  010EE6  0900               	iorlw	0
  2601  010EE8  B4D8               	btfsc	status,2,c
  2602  010EEA  D00C               	goto	l2222
  2603                           
  2604                           ;main.c: 459: Console_Init();
  2605  010EEC  ECE1  F09A         	call	_Console_Init	;wreg free
  2606                           
  2607                           ;main.c: 460: HMI_Init();
  2608  010EF0  EC86  F089         	call	_HMI_Init	;wreg free
  2609                           
  2610                           ;main.c: 461: LCD_Init();
  2611  010EF4  EC5F  F08F         	call	_LCD_Init	;wreg free
  2612                           
  2613                           ;main.c: 462: if (MXK_Release())
  2614  010EF8  ECFB  F0A3         	call	_MXK_Release	;wreg free
  2615  010EFC  0900               	iorlw	0
  2616  010EFE  A4D8               	btfss	status,2,c
  2617                           
  2618                           ;main.c: 463: MXK_Dequeue();
  2619  010F00  ECAB  F0A1         	call	_MXK_Dequeue	;wreg free
  2620  010F04                     l2222:
  2621                           
  2622                           ;main.c: 464: }
  2623                           ;main.c: 465: eusart_init();
  2624  010F04  EC84  F0A3         	call	_eusart_init	;wreg free
  2625                           
  2626                           ;main.c: 466: irobot_init();
  2627  010F08  ECA6  F0A4         	call	_irobot_init	;wreg free
  2628                           
  2629                           ;main.c: 467: irobot_led_power_on(0xA);
  2630  010F0C  0E0A               	movlw	10
  2631  010F0E  ECED  F0A3         	call	_irobot_led_power_on
  2632                           
  2633                           ;main.c: 468: delay_ms(1000);
  2634  010F12  0E03               	movlw	3
  2635  010F14  0100               	movlb	0	; () banked
  2636  010F16  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  2637  010F18  0EE8               	movlw	232
  2638  010F1A  6FB5               	movwf	delay_ms@ms& (0+255),b
  2639  010F1C  EC9C  F09D         	call	_delay_ms	;wreg free
  2640                           
  2641                           ;main.c: 469: irobot_led_power_off();
  2642  010F20  EC09  F0A4         	call	_irobot_led_power_off	;wreg free
  2643                           
  2644                           ;main.c: 470: irobot_init_song_0();
  2645  010F24  EC65  F0A3         	call	_irobot_init_song_0	;wreg free
  2646                           
  2647                           ;main.c: 471: delay_ms(20);
  2648  010F28  0E00               	movlw	0
  2649  010F2A  0100               	movlb	0	; () banked
  2650  010F2C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  2651  010F2E  0E14               	movlw	20
  2652  010F30  6FB5               	movwf	delay_ms@ms& (0+255),b
  2653  010F32  EC9C  F09D         	call	_delay_ms	;wreg free
  2654                           
  2655                           ;main.c: 473: irobot_move_straight(250);
  2656  010F36  0E00               	movlw	0
  2657  010F38  0100               	movlb	0	; () banked
  2658  010F3A  6FCF               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  2659  010F3C  0EFA               	movlw	250
  2660  010F3E  6FCE               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  2661  010F40  EC23  F0A4         	call	_irobot_move_straight	;wreg free
  2662                           
  2663                           ;main.c: 474: INT16 distanceTotal = 0;
  2664  010F44  0E00               	movlw	0
  2665  010F46  0103               	movlb	3	; () banked
  2666  010F48  6FDF               	movwf	(main@distanceTotal+1)& (0+255),b
  2667  010F4A  0E00               	movlw	0
  2668  010F4C  6FDE               	movwf	main@distanceTotal& (0+255),b
  2669                           
  2670                           ; BSR set to: 3
  2671                           ;main.c: 475: int time = 0;
  2672  010F4E  0E00               	movlw	0
  2673  010F50  0103               	movlb	3	; () banked
  2674  010F52  6FE1               	movwf	(main@time+1)& (0+255),b
  2675  010F54  0E00               	movlw	0
  2676  010F56  6FE0               	movwf	main@time& (0+255),b
  2677  010F58                     
  2678                           ;main.c: 478: time ++;
  2679                           
  2680                           ; BSR set to: 3
  2681  010F58  0103               	movlb	3	; () banked
  2682  010F5A  4BE0               	infsnz	main@time& (0+255),f,b
  2683  010F5C  2BE1               	incf	(main@time+1)& (0+255),f,b
  2684                           
  2685                           ; BSR set to: 3
  2686                           ;main.c: 479: if((time/10)%2 == 0){
  2687  010F5E  C3E0  F0B5         	movff	main@time,___awdiv@dividend
  2688  010F62  C3E1  F0B6         	movff	main@time+1,___awdiv@dividend+1
  2689  010F66  0E00               	movlw	0
  2690  010F68  0100               	movlb	0	; () banked
  2691  010F6A  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  2692  010F6C  0E0A               	movlw	10
  2693  010F6E  6FB7               	movwf	___awdiv@divisor& (0+255),b
  2694  010F70  EC07  F095         	call	___awdiv	;wreg free
  2695  010F74  0100               	movlb	0	; () banked
  2696  010F76  B1B5               	btfsc	?___awdiv& (0+255),0,b
  2697  010F78  D004               	goto	l2224
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 480: irobot_led_power_on(0x0);
  2701  010F7A  0E00               	movlw	0
  2702  010F7C  ECED  F0A3         	call	_irobot_led_power_on
  2703                           
  2704                           ;main.c: 481: }else{
  2705  010F80  D002               	goto	l2225
  2706  010F82                     l2224:
  2707                           
  2708                           ;main.c: 482: irobot_led_power_off();
  2709  010F82  EC09  F0A4         	call	_irobot_led_power_off	;wreg free
  2710  010F86                     l2225:
  2711                           
  2712                           ;main.c: 483: }
  2713                           ;main.c: 486: update_bump_and_cliff();
  2714  010F86  EC26  F0A2         	call	_update_bump_and_cliff	;wreg free
  2715                           
  2716                           ;main.c: 487: update_distance();
  2717  010F8A  EC8D  F0A4         	call	_update_distance	;wreg free
  2718                           
  2719                           ;main.c: 488: distanceTotal += iRDistance;
  2720  010F8E  0100               	movlb	0	; () banked
  2721  010F90  5177               	movf	_iRDistance& (0+255),w,b
  2722  010F92  0103               	movlb	3	; () banked
  2723  010F94  27DE               	addwf	main@distanceTotal& (0+255),f,b
  2724  010F96  0100               	movlb	0	; () banked
  2725  010F98  5178               	movf	(_iRDistance+1)& (0+255),w,b
  2726  010F9A  0103               	movlb	3	; () banked
  2727  010F9C  23DF               	addwfc	(main@distanceTotal+1)& (0+255),f,b
  2728                           
  2729                           ; BSR set to: 3
  2730                           ;main.c: 490: if (iRBumpLeft || iRBumpRight){
  2731  010F9E  0100               	movlb	0	; () banked
  2732  010FA0  5187               	movf	_iRBumpLeft& (0+255),w,b
  2733  010FA2  A4D8               	btfss	status,2,c
  2734  010FA4  D004               	goto	u9420
  2735                           
  2736                           ; BSR set to: 0
  2737  010FA6  0100               	movlb	0	; () banked
  2738  010FA8  5188               	movf	_iRBumpRight& (0+255),w,b
  2739  010FAA  B4D8               	btfsc	status,2,c
  2740  010FAC  D006               	goto	l2226
  2741  010FAE                     u9420:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;main.c: 491: irobot_song_play(0);
  2745                           
  2746                           ; BSR set to: 0
  2747  010FAE  0E00               	movlw	0
  2748  010FB0  EC83  F0A4         	call	_irobot_song_play
  2749                           
  2750                           ;main.c: 492: irobot_stop_motion(0);
  2751  010FB4  0E00               	movlw	0
  2752  010FB6  ECBF  F0A0         	call	_irobot_stop_motion
  2753  010FBA                     l2226:
  2754                           
  2755                           ;main.c: 493: }
  2756                           ;main.c: 494: HMI_Poll();
  2757  010FBA  EC15  F09C         	call	_HMI_Poll	;wreg free
  2758                           
  2759                           ;main.c: 496: if (MXK_SwitchTo(eMXK_HMI)) {
  2760  010FBE  0E01               	movlw	1
  2761  010FC0  EC4A  F0A1         	call	_MXK_SwitchTo
  2762  010FC4  0900               	iorlw	0
  2763  010FC6  B4D8               	btfsc	status,2,c
  2764  010FC8  D7C7               	goto	l2223
  2765                           
  2766                           ;main.c: 497: printf("%c", (char)35);
  2767  010FCA  0EFC               	movlw	low STR_1
  2768  010FCC  0100               	movlb	0	; () banked
  2769  010FCE  6FCA               	movwf	printf@f& (0+255),b
  2770  010FD0  0EFF               	movlw	high STR_1
  2771  010FD2  0100               	movlb	0	; () banked
  2772  010FD4  6FCB               	movwf	(printf@f+1)& (0+255),b
  2773  010FD6  0E00               	movlw	0
  2774  010FD8  0100               	movlb	0	; () banked
  2775  010FDA  6FCD               	movwf	(?_printf+3)& (0+255),b
  2776  010FDC  0E23               	movlw	35
  2777  010FDE  6FCC               	movwf	(?_printf+2)& (0+255),b
  2778  010FE0  EC83  F08A         	call	_printf	;wreg free
  2779                           
  2780                           ;main.c: 498: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  2781  010FE4  0EA7               	movlw	low STR_2
  2782  010FE6  0100               	movlb	0	; () banked
  2783  010FE8  6FCA               	movwf	printf@f& (0+255),b
  2784  010FEA  0EFF               	movlw	high STR_2
  2785  010FEC  0100               	movlb	0	; () banked
  2786  010FEE  6FCB               	movwf	(printf@f+1)& (0+255),b
  2787  010FF0  C3DE  F0CC         	movff	main@distanceTotal,?_printf+2
  2788  010FF4  C3DF  F0CD         	movff	main@distanceTotal+1,?_printf+3
  2789  010FF8  C087  F0CE         	movff	_iRBumpLeft,?_printf+4
  2790  010FFC  0100               	movlb	0	; () banked
  2791  010FFE  6BCF               	clrf	(?_printf+5)& (0+255),b
  2792  011000  C088  F0D0         	movff	_iRBumpRight,?_printf+6
  2793  011004  0100               	movlb	0	; () banked
  2794  011006  6BD1               	clrf	(?_printf+7)& (0+255),b
  2795  011008  EC83  F08A         	call	_printf	;wreg free
  2796                           
  2797                           ;main.c: 499: printf("Running: %d\n", HMIBoard.mUp.mGetState());
  2798  01100C  0EEF               	movlw	low STR_3
  2799  01100E  0100               	movlb	0	; () banked
  2800  011010  6FCA               	movwf	printf@f& (0+255),b
  2801  011012  0EFF               	movlw	high STR_3
  2802  011014  0100               	movlb	0	; () banked
  2803  011016  6FCB               	movwf	(printf@f+1)& (0+255),b
  2804  011018  EE23  F051         	lfsr	2,_HMIBoard+35
  2805  01101C  D801               	call	u9448
  2806  01101E  D00A               	goto	u9449
  2807  011020                     u9448:
  2808  011020  0005               	push	
  2809  011022  6EFA               	movwf	pclath,c
  2810  011024  50DE               	movf	postinc2,w,c
  2811  011026  6EFD               	movwf	tosl,c
  2812  011028  50DE               	movf	postinc2,w,c
  2813  01102A  6EFE               	movwf	tosh,c
  2814  01102C  50DE               	movf	postinc2,w,c
  2815  01102E  6EFF               	movwf	tosu,c
  2816  011030  50FA               	movf	pclath,w,c
  2817  011032  0012               	return		;indir
  2818  011034                     u9449:
  2819  011034  0103               	movlb	3	; () banked
  2820  011036  6FDD               	movwf	??_main& (0+255),b
  2821  011038  0103               	movlb	3	; () banked
  2822  01103A  51DD               	movf	??_main& (0+255),w,b
  2823  01103C  0100               	movlb	0	; () banked
  2824  01103E  6FCC               	movwf	(?_printf+2)& (0+255),b
  2825  011040  6BCD               	clrf	(?_printf+3)& (0+255),b
  2826  011042  EC83  F08A         	call	_printf	;wreg free
  2827                           
  2828                           ;main.c: 500: if(HMIBoard.mUp.mGetState()){
  2829  011046  EE23  F051         	lfsr	2,_HMIBoard+35
  2830  01104A  D801               	call	u9458
  2831  01104C  D00A               	goto	u9459
  2832  01104E                     u9458:
  2833  01104E  0005               	push	
  2834  011050  6EFA               	movwf	pclath,c
  2835  011052  50DE               	movf	postinc2,w,c
  2836  011054  6EFD               	movwf	tosl,c
  2837  011056  50DE               	movf	postinc2,w,c
  2838  011058  6EFE               	movwf	tosh,c
  2839  01105A  50DE               	movf	postinc2,w,c
  2840  01105C  6EFF               	movwf	tosu,c
  2841  01105E  50FA               	movf	pclath,w,c
  2842  011060  0012               	return		;indir
  2843  011062                     u9459:
  2844  011062  0900               	iorlw	0
  2845  011064  B4D8               	btfsc	status,2,c
  2846  011066  D040               	goto	l2230
  2847                           
  2848                           ;main.c: 501: int dist = 0;
  2849  011068  0E00               	movlw	0
  2850  01106A  0103               	movlb	3	; () banked
  2851  01106C  6FE3               	movwf	(main@dist+1)& (0+255),b
  2852  01106E  0E00               	movlw	0
  2853  011070  6FE2               	movwf	main@dist& (0+255),b
  2854                           
  2855                           ;main.c: 502: while (dist<=5000){
  2856  011072  D02C               	goto	l2231
  2857  011074                     
  2858                           ; BSR set to: 3
  2859                           ;main.c: 503: irobot_move_straight(500);
  2860                           
  2861                           ; BSR set to: 3
  2862  011074  0E01               	movlw	1
  2863  011076  0100               	movlb	0	; () banked
  2864  011078  6FCF               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  2865  01107A  0EF4               	movlw	244
  2866  01107C  6FCE               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  2867  01107E  EC23  F0A4         	call	_irobot_move_straight	;wreg free
  2868                           
  2869                           ;main.c: 504: update_distance();
  2870  011082  EC8D  F0A4         	call	_update_distance	;wreg free
  2871                           
  2872                           ;main.c: 505: dist += iRDistance;
  2873  011086  0100               	movlb	0	; () banked
  2874  011088  5177               	movf	_iRDistance& (0+255),w,b
  2875  01108A  0103               	movlb	3	; () banked
  2876  01108C  27E2               	addwf	main@dist& (0+255),f,b
  2877  01108E  0100               	movlb	0	; () banked
  2878  011090  5178               	movf	(_iRDistance+1)& (0+255),w,b
  2879  011092  0103               	movlb	3	; () banked
  2880  011094  23E3               	addwfc	(main@dist+1)& (0+255),f,b
  2881                           
  2882                           ; BSR set to: 3
  2883                           ;main.c: 506: printf("%c",(char)35);
  2884  011096  0EFC               	movlw	low STR_1
  2885  011098  0100               	movlb	0	; () banked
  2886  01109A  6FCA               	movwf	printf@f& (0+255),b
  2887  01109C  0EFF               	movlw	high STR_1
  2888  01109E  0100               	movlb	0	; () banked
  2889  0110A0  6FCB               	movwf	(printf@f+1)& (0+255),b
  2890  0110A2  0E00               	movlw	0
  2891  0110A4  0100               	movlb	0	; () banked
  2892  0110A6  6FCD               	movwf	(?_printf+3)& (0+255),b
  2893  0110A8  0E23               	movlw	35
  2894  0110AA  6FCC               	movwf	(?_printf+2)& (0+255),b
  2895  0110AC  EC83  F08A         	call	_printf	;wreg free
  2896                           
  2897                           ;main.c: 507: printf("Total Distance: %d\n\n\n\n\n\n\n",dist);
  2898  0110B0  0ED5               	movlw	low STR_5
  2899  0110B2  0100               	movlb	0	; () banked
  2900  0110B4  6FCA               	movwf	printf@f& (0+255),b
  2901  0110B6  0EFF               	movlw	high STR_5
  2902  0110B8  0100               	movlb	0	; () banked
  2903  0110BA  6FCB               	movwf	(printf@f+1)& (0+255),b
  2904  0110BC  C3E2  F0CC         	movff	main@dist,?_printf+2
  2905  0110C0  C3E3  F0CD         	movff	main@dist+1,?_printf+3
  2906  0110C4  EC83  F08A         	call	_printf	;wreg free
  2907                           
  2908                           ;main.c: 508: Console_Render();
  2909  0110C8  EC7E  F088         	call	_Console_Render	;wreg free
  2910  0110CC                     l2231:
  2911  0110CC  0103               	movlb	3	; () banked
  2912  0110CE  BFE3               	btfsc	(main@dist+1)& (0+255),7,b
  2913  0110D0  D7D1               	goto	l2232
  2914  0110D2  0E89               	movlw	137
  2915  0110D4  0103               	movlb	3	; () banked
  2916  0110D6  5DE2               	subwf	main@dist& (0+255),w,b
  2917  0110D8  0E13               	movlw	19
  2918  0110DA  0103               	movlb	3	; () banked
  2919  0110DC  59E3               	subwfb	(main@dist+1)& (0+255),w,b
  2920  0110DE  A0D8               	btfss	status,0,c
  2921  0110E0  D7C9               	goto	l2232
  2922                           
  2923                           ; BSR set to: 3
  2924                           ;main.c: 509: }
  2925                           ;main.c: 510: irobot_stop_motion(0);
  2926                           
  2927                           ; BSR set to: 3
  2928  0110E2  0E00               	movlw	0
  2929  0110E4  ECBF  F0A0         	call	_irobot_stop_motion
  2930  0110E8                     l2230:
  2931                           
  2932                           ;main.c: 511: }
  2933                           ;main.c: 512: Console_Render();
  2934  0110E8  EC7E  F088         	call	_Console_Render	;wreg free
  2935                           
  2936                           ;main.c: 514: if (MXK_Release())
  2937  0110EC  ECFB  F0A3         	call	_MXK_Release	;wreg free
  2938  0110F0  0900               	iorlw	0
  2939  0110F2  B4D8               	btfsc	status,2,c
  2940  0110F4  D731               	goto	l2223
  2941                           
  2942                           ;main.c: 515: MXK_Dequeue();
  2943  0110F6  ECAB  F0A1         	call	_MXK_Dequeue	;wreg free
  2944                           
  2945                           ;main.c: 516: }
  2946                           ;main.c: 517: }
  2947  0110FA  D72E               	goto	l2223
  2948  0110FC                     __end_of_main:
  2949                           	opt stack 0
  2950                           tosu	equ	0xFFF
  2951                           tosh	equ	0xFFE
  2952                           tosl	equ	0xFFD
  2953                           pclath	equ	0xFFA
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           postinc0	equ	0xFEE
  2959                           wreg	equ	0xFE8
  2960                           postdec1	equ	0xFE5
  2961                           fsr1h	equ	0xFE2
  2962                           fsr1l	equ	0xFE1
  2963                           postinc2	equ	0xFDE
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function _update_distance *****************
  2967 ;; Defined at:
  2968 ;;		line 423 in file "main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;Total ram usage:        0 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:   10
  2989 ;; This function calls:
  2990 ;;		_irobot_query_and_update
  2991 ;; This function is called by:
  2992 ;;		_main
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text1
  2997  01491A                     __ptext1:
  2998                           	opt stack 0
  2999  01491A                     _update_distance:
  3000                           	opt stack 20
  3001                           
  3002                           ;main.c: 424: irobot_query_and_update(1, iR_PKT_DISTANCE);
  3003                           
  3004                           ;incstack = 0
  3005  01491A  0E00               	movlw	0
  3006  01491C  0100               	movlb	0	; () banked
  3007  01491E  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3008  014920  0E13               	movlw	19
  3009  014922  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  3010  014924  0E01               	movlw	1
  3011  014926  ECDC  F08D         	call	_irobot_query_and_update
  3012  01492A  0012               	return		;funcret
  3013  01492C                     __end_of_update_distance:
  3014                           	opt stack 0
  3015                           tosu	equ	0xFFF
  3016                           tosh	equ	0xFFE
  3017                           tosl	equ	0xFFD
  3018                           pclath	equ	0xFFA
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           postinc0	equ	0xFEE
  3024                           wreg	equ	0xFE8
  3025                           postdec1	equ	0xFE5
  3026                           fsr1h	equ	0xFE2
  3027                           fsr1l	equ	0xFE1
  3028                           postinc2	equ	0xFDE
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function _update_bump_and_cliff *****************
  3032 ;; Defined at:
  3033 ;;		line 416 in file "main.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;Total ram usage:        0 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:   10
  3054 ;; This function calls:
  3055 ;;		_irobot_query_and_update
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text2
  3062  01444C                     __ptext2:
  3063                           	opt stack 0
  3064  01444C                     _update_bump_and_cliff:
  3065                           	opt stack 20
  3066                           
  3067                           ;main.c: 417: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  3068                           ;main.c: 418: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  3069                           ;main.c: 419: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  3070                           
  3071                           ;incstack = 0
  3072  01444C  0E00               	movlw	0
  3073  01444E  0100               	movlb	0	; () banked
  3074  014450  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3075  014452  0E07               	movlw	7
  3076  014454  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  3077  014456  0E00               	movlw	0
  3078  014458  0100               	movlb	0	; () banked
  3079  01445A  6FBE               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  3080  01445C  0E09               	movlw	9
  3081  01445E  6FBD               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  3082  014460  0E00               	movlw	0
  3083  014462  0100               	movlb	0	; () banked
  3084  014464  6FC0               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  3085  014466  0E0A               	movlw	10
  3086  014468  6FBF               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  3087  01446A  0E00               	movlw	0
  3088  01446C  0100               	movlb	0	; () banked
  3089  01446E  6FC2               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  3090  014470  0E0B               	movlw	11
  3091  014472  6FC1               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  3092  014474  0E00               	movlw	0
  3093  014476  0100               	movlb	0	; () banked
  3094  014478  6FC4               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  3095  01447A  0E0C               	movlw	12
  3096  01447C  6FC3               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  3097  01447E  0E05               	movlw	5
  3098  014480  ECDC  F08D         	call	_irobot_query_and_update
  3099  014484  0012               	return		;funcret
  3100  014486                     __end_of_update_bump_and_cliff:
  3101                           	opt stack 0
  3102                           tosu	equ	0xFFF
  3103                           tosh	equ	0xFFE
  3104                           tosl	equ	0xFFD
  3105                           pclath	equ	0xFFA
  3106                           tblptru	equ	0xFF8
  3107                           tblptrh	equ	0xFF7
  3108                           tblptrl	equ	0xFF6
  3109                           tablat	equ	0xFF5
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           fsr1h	equ	0xFE2
  3114                           fsr1l	equ	0xFE1
  3115                           postinc2	equ	0xFDE
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _irobot_query_and_update *****************
  3119 ;; Defined at:
  3120 ;;		line 238 in file "main.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  numberOfPack    1    wreg     unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  3125 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  3126 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  3127 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  3128 ;;		 -> ?_irobot_query_and_update(1), 
  3129 ;;  i               1   28[BANK0 ] unsigned char 
  3130 ;;  startIndex      1   27[BANK0 ] unsigned char 
  3131 ;;  j               1   26[BANK0 ] unsigned char 
  3132 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  3133 ;;  streamSize      1   23[BANK0 ] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3143 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;Total ram usage:      535 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    9
  3150 ;; This function calls:
  3151 ;;		_eusart_getch
  3152 ;;		_eusart_putch
  3153 ;;		_get_packet_size
  3154 ;;		_rx_assign
  3155 ;; This function is called by:
  3156 ;;		_update_bump_and_cliff
  3157 ;;		_update_distance
  3158 ;;		_update_angle
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text3
  3163  011BB8                     __ptext3:
  3164                           	opt stack 0
  3165  011BB8                     _irobot_query_and_update:
  3166                           	opt stack 20
  3167                           
  3168                           ;incstack = 0
  3169                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  3170  011BB8  0100               	movlb	0	; () banked
  3171  011BBA  6FCD               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  3172                           
  3173                           ;main.c: 239: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArray[256], 
      +                          TXArray[256];
  3174  011BBC  0E00               	movlw	0
  3175  011BBE  0100               	movlb	0	; () banked
  3176  011BC0  6FCC               	movwf	irobot_query_and_update@streamSize& (0+255),b
  3177  011BC2  0E00               	movlw	0
  3178  011BC4  0100               	movlb	0	; () banked
  3179  011BC6  6FD0               	movwf	irobot_query_and_update@startIndex& (0+255),b
  3180                           
  3181                           ;main.c: 241: va_list packetIDs;
  3182                           ;main.c: 242: *packetIDs = __va_start();
  3183  011BC8  0EBB               	movlw	low ?_irobot_query_and_update
  3184  011BCA  0100               	movlb	0	; () banked
  3185  011BCC  6FCA               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  3186  011BCE  0E00               	movlw	high ?_irobot_query_and_update
  3187  011BD0  0100               	movlb	0	; () banked
  3188  011BD2  6FCB               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 243: eusart_putch(iR_QUERY_LIST);
  3192  011BD4  0E95               	movlw	149
  3193  011BD6  ECAD  F0A4         	call	_eusart_putch
  3194                           
  3195                           ;main.c: 244: eusart_putch(numberOfPacketRequests);
  3196  011BDA  0100               	movlb	0	; () banked
  3197  011BDC  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3198  011BDE  ECAD  F0A4         	call	_eusart_putch
  3199                           
  3200                           ;main.c: 245: for (i = 0; i < numberOfPacketRequests; i++){
  3201  011BE2  0E00               	movlw	0
  3202  011BE4  0100               	movlb	0	; () banked
  3203  011BE6  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3204  011BE8  D023               	goto	l2117
  3205  011BEA                     
  3206                           ; BSR set to: 0
  3207                           ;main.c: 246: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  3208                           
  3209                           ; BSR set to: 0
  3210  011BEA  C0CA  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  3211  011BEE  C0CB  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  3212  011BF2  50DF               	movf	indf2,w,c
  3213  011BF4  0100               	movlb	0	; () banked
  3214  011BF6  6FCE               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  3215                           
  3216                           ; BSR set to: 0
  3217  011BF8  0E02               	movlw	2
  3218  011BFA  0100               	movlb	0	; () banked
  3219  011BFC  27CA               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  3220  011BFE  0E00               	movlw	0
  3221  011C00  23CB               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 247: streamSize += get_packet_size(packetVariable);
  3225  011C02  0100               	movlb	0	; () banked
  3226  011C04  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3227  011C06  EC06  F09E         	call	_get_packet_size
  3228  011C0A  0100               	movlb	0	; () banked
  3229  011C0C  27CC               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 248: TXArray[i] = packetVariable;
  3233  011C0E  0100               	movlb	0	; () banked
  3234  011C10  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3235  011C12  0D01               	mullw	1
  3236  011C14  0E00               	movlw	low irobot_query_and_update@TXArray
  3237  011C16  24F3               	addwf	prodl,w,c
  3238  011C18  6ED9               	movwf	fsr2l,c
  3239  011C1A  0E02               	movlw	high irobot_query_and_update@TXArray
  3240  011C1C  20F4               	addwfc	prodh,w,c
  3241  011C1E  6EDA               	movwf	fsr2h,c
  3242  011C20  C0CE  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 249: eusart_putch(packetVariable);
  3246  011C24  0100               	movlb	0	; () banked
  3247  011C26  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3248  011C28  ECAD  F0A4         	call	_eusart_putch
  3249  011C2C  0100               	movlb	0	; () banked
  3250  011C2E  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3251  011C30                     l2117:
  3252                           
  3253                           ; BSR set to: 0
  3254                           
  3255                           ; BSR set to: 0
  3256  011C30  0100               	movlb	0	; () banked
  3257  011C32  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3258  011C34  0100               	movlb	0	; () banked
  3259  011C36  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3260  011C38  A0D8               	btfss	status,0,c
  3261  011C3A  D7D7               	goto	l2118
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 250: }
  3265                           ;main.c: 251: ;
  3266                           ;main.c: 253: for (i = 0; i < streamSize; i++){RXArray[i] = eusart_getch();}
  3267                           
  3268                           ; BSR set to: 0
  3269  011C3C  0E00               	movlw	0
  3270  011C3E  0100               	movlb	0	; () banked
  3271  011C40  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3272  011C42  D00E               	goto	l2120
  3273  011C44                     
  3274                           ; BSR set to: 0
  3275                           
  3276                           ; BSR set to: 0
  3277  011C44  0100               	movlb	0	; () banked
  3278  011C46  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3279  011C48  0D01               	mullw	1
  3280  011C4A  0E00               	movlw	low irobot_query_and_update@RXArray
  3281  011C4C  24F3               	addwf	prodl,w,c
  3282  011C4E  6ED9               	movwf	fsr2l,c
  3283  011C50  0E01               	movlw	high irobot_query_and_update@RXArray
  3284  011C52  20F4               	addwfc	prodh,w,c
  3285  011C54  6EDA               	movwf	fsr2h,c
  3286  011C56  ECE3  F0A4         	call	_eusart_getch	;wreg free
  3287  011C5A  6EDF               	movwf	indf2,c
  3288  011C5C  0100               	movlb	0	; () banked
  3289  011C5E  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3290  011C60                     l2120:
  3291                           
  3292                           ; BSR set to: 0
  3293                           
  3294                           ; BSR set to: 0
  3295  011C60  0100               	movlb	0	; () banked
  3296  011C62  51CC               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  3297  011C64  0100               	movlb	0	; () banked
  3298  011C66  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3299  011C68  A0D8               	btfss	status,0,c
  3300  011C6A  D7EC               	goto	l2121
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 255: for (i = 0; i < numberOfPacketRequests; i++){
  3304                           
  3305                           ; BSR set to: 0
  3306  011C6C  0E00               	movlw	0
  3307  011C6E  0100               	movlb	0	; () banked
  3308  011C70  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3309  011C72  D05E               	goto	l2123
  3310  011C74                     l2124:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 256: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex; j++){
  3314  011C74  C0D0  F0CF         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  3315  011C78  D021               	goto	l2125
  3316  011C7A                     
  3317                           ; BSR set to: 0
  3318                           ;main.c: 257: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  3319                           
  3320                           ; BSR set to: 0
  3321  011C7A  0100               	movlb	0	; () banked
  3322  011C7C  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3323  011C7E  0D01               	mullw	1
  3324  011C80  0E00               	movlw	low irobot_query_and_update@RXArray
  3325  011C82  24F3               	addwf	prodl,w,c
  3326  011C84  6ED9               	movwf	fsr2l,c
  3327  011C86  0E01               	movlw	high irobot_query_and_update@RXArray
  3328  011C88  20F4               	addwfc	prodh,w,c
  3329  011C8A  6EDA               	movwf	fsr2h,c
  3330  011C8C  50DF               	movf	indf2,w,c
  3331  011C8E  0100               	movlb	0	; () banked
  3332  011C90  6FB6               	movwf	rx_assign@packetIDValue& (0+255),b
  3333  011C92  0100               	movlb	0	; () banked
  3334  011C94  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3335  011C96  0800               	sublw	0
  3336  011C98  0100               	movlb	0	; () banked
  3337  011C9A  25CF               	addwf	irobot_query_and_update@j& (0+255),w,b
  3338  011C9C  0100               	movlb	0	; () banked
  3339  011C9E  6FB7               	movwf	rx_assign@byteNumber& (0+255),b
  3340  011CA0  0100               	movlb	0	; () banked
  3341  011CA2  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3342  011CA4  0D01               	mullw	1
  3343  011CA6  0E00               	movlw	low irobot_query_and_update@TXArray
  3344  011CA8  24F3               	addwf	prodl,w,c
  3345  011CAA  6ED9               	movwf	fsr2l,c
  3346  011CAC  0E02               	movlw	high irobot_query_and_update@TXArray
  3347  011CAE  20F4               	addwfc	prodh,w,c
  3348  011CB0  6EDA               	movwf	fsr2h,c
  3349  011CB2  50DF               	movf	indf2,w,c
  3350  011CB4  EC8E  F092         	call	_rx_assign
  3351  011CB8  0100               	movlb	0	; () banked
  3352  011CBA  2BCF               	incf	irobot_query_and_update@j& (0+255),f,b
  3353  011CBC                     l2125:
  3354                           
  3355                           ; BSR set to: 0
  3356                           
  3357                           ; BSR set to: 0
  3358  011CBC  0100               	movlb	0	; () banked
  3359  011CBE  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3360  011CC0  0D01               	mullw	1
  3361  011CC2  0E00               	movlw	low irobot_query_and_update@TXArray
  3362  011CC4  24F3               	addwf	prodl,w,c
  3363  011CC6  6ED9               	movwf	fsr2l,c
  3364  011CC8  0E02               	movlw	high irobot_query_and_update@TXArray
  3365  011CCA  20F4               	addwfc	prodh,w,c
  3366  011CCC  6EDA               	movwf	fsr2h,c
  3367  011CCE  50DF               	movf	indf2,w,c
  3368  011CD0  EC06  F09E         	call	_get_packet_size
  3369  011CD4  0100               	movlb	0	; () banked
  3370  011CD6  6FC5               	movwf	??_irobot_query_and_update& (0+255),b
  3371  011CD8  6BC6               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  3372  011CDA  0100               	movlb	0	; () banked
  3373  011CDC  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3374  011CDE  0100               	movlb	0	; () banked
  3375  011CE0  27C5               	addwf	??_irobot_query_and_update& (0+255),f,b
  3376  011CE2  0E00               	movlw	0
  3377  011CE4  23C6               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  3378  011CE6  0100               	movlb	0	; () banked
  3379  011CE8  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3380  011CEA  0100               	movlb	0	; () banked
  3381  011CEC  6FC7               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  3382  011CEE  6BC8               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  3383  011CF0  0100               	movlb	0	; () banked
  3384  011CF2  51C5               	movf	??_irobot_query_and_update& (0+255),w,b
  3385  011CF4  0100               	movlb	0	; () banked
  3386  011CF6  5DC7               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  3387  011CF8  0100               	movlb	0	; () banked
  3388  011CFA  51C8               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  3389  011CFC  0A80               	xorlw	128
  3390  011CFE  0100               	movlb	0	; () banked
  3391  011D00  6FC9               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  3392  011D02  0100               	movlb	0	; () banked
  3393  011D04  51C6               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  3394  011D06  0A80               	xorlw	128
  3395  011D08  0100               	movlb	0	; () banked
  3396  011D0A  59C9               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  3397  011D0C  A0D8               	btfss	status,0,c
  3398  011D0E  D7B5               	goto	l2126
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 258: }
  3402                           ;main.c: 259: startIndex += get_packet_size(TXArray[i]);
  3403                           
  3404                           ; BSR set to: 0
  3405  011D10  0100               	movlb	0	; () banked
  3406  011D12  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3407  011D14  0D01               	mullw	1
  3408  011D16  0E00               	movlw	low irobot_query_and_update@TXArray
  3409  011D18  24F3               	addwf	prodl,w,c
  3410  011D1A  6ED9               	movwf	fsr2l,c
  3411  011D1C  0E02               	movlw	high irobot_query_and_update@TXArray
  3412  011D1E  20F4               	addwfc	prodh,w,c
  3413  011D20  6EDA               	movwf	fsr2h,c
  3414  011D22  50DF               	movf	indf2,w,c
  3415  011D24  EC06  F09E         	call	_get_packet_size
  3416  011D28  0100               	movlb	0	; () banked
  3417  011D2A  27D0               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  3418                           
  3419                           ; BSR set to: 0
  3420  011D2C  0100               	movlb	0	; () banked
  3421  011D2E  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3422  011D30                     l2123:
  3423                           
  3424                           ; BSR set to: 0
  3425                           
  3426                           ; BSR set to: 0
  3427  011D30  0100               	movlb	0	; () banked
  3428  011D32  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3429  011D34  0100               	movlb	0	; () banked
  3430  011D36  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3431  011D38  B0D8               	btfsc	status,0,c
  3432  011D3A  0012               	return	
  3433  011D3C  D79B               	goto	l2124
  3434  011D3E                     __end_of_irobot_query_and_update:
  3435                           	opt stack 0
  3436                           tosu	equ	0xFFF
  3437                           tosh	equ	0xFFE
  3438                           tosl	equ	0xFFD
  3439                           pclath	equ	0xFFA
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           postdec1	equ	0xFE5
  3449                           fsr1h	equ	0xFE2
  3450                           fsr1l	equ	0xFE1
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           fsr2h	equ	0xFDA
  3454                           fsr2l	equ	0xFD9
  3455                           status	equ	0xFD8
  3456                           
  3457 ;; *************** function _rx_assign *****************
  3458 ;; Defined at:
  3459 ;;		line 182 in file "main.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  packetID        1    wreg     unsigned char 
  3462 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  3463 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  packetID        1    5[BANK0 ] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;Total ram usage:        5 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    8
  3482 ;; This function calls:
  3483 ;;		_sort_iRBumpDrop
  3484 ;; This function is called by:
  3485 ;;		_irobot_query_and_update
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text4
  3490  01251C                     __ptext4:
  3491                           	opt stack 0
  3492  01251C                     _rx_assign:
  3493                           	opt stack 20
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;incstack = 0
  3497                           ;rx_assign@packetID stored from wreg
  3498  01251C  0100               	movlb	0	; () banked
  3499  01251E  6FBA               	movwf	rx_assign@packetID& (0+255),b
  3500                           
  3501                           ;main.c: 183: switch (packetID){
  3502  012520  D057               	goto	l2057
  3503  012522                     l2058:
  3504                           
  3505                           ; BSR set to: 0
  3506  012522  C0B6  F034         	movff	rx_assign@packetIDValue,_iRBumpDrop
  3507                           
  3508                           ; BSR set to: 0
  3509  012526  EC53  F09A         	call	_sort_iRBumpDrop	;wreg free
  3510  01252A  0012               	return	
  3511  01252C                     l2060:
  3512                           
  3513                           ; BSR set to: 0
  3514  01252C  C0B6  F033         	movff	rx_assign@packetIDValue,_iRWall
  3515  012530  0012               	return	
  3516  012532                     l2061:
  3517                           
  3518                           ; BSR set to: 0
  3519  012532  C0B6  F032         	movff	rx_assign@packetIDValue,_iRCliffL
  3520  012536  0012               	return	
  3521  012538                     l2062:
  3522                           
  3523                           ; BSR set to: 0
  3524  012538  C0B6  F031         	movff	rx_assign@packetIDValue,_iRCliffFL
  3525  01253C  0012               	return	
  3526  01253E                     l2063:
  3527                           
  3528                           ; BSR set to: 0
  3529  01253E  C0B6  F030         	movff	rx_assign@packetIDValue,_iRCliffFR
  3530  012542  0012               	return	
  3531  012544                     l2064:
  3532                           
  3533                           ; BSR set to: 0
  3534  012544  C0B6  F02F         	movff	rx_assign@packetIDValue,_iRCliffR
  3535  012548  0012               	return	
  3536  01254A                     l2065:
  3537                           
  3538                           ; BSR set to: 0
  3539  01254A  C0B6  F02E         	movff	rx_assign@packetIDValue,_iRVirtualWall
  3540  01254E  0012               	return	
  3541  012550                     
  3542                           ; BSR set to: 0
  3543                           ;main.c: 192: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistanceSS.LB =
      +                           packetIDValue,
  3544                           ;main.c: 193: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  3545                           
  3546                           ; BSR set to: 0
  3547  012550  0100               	movlb	0	; () banked
  3548  012552  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3549  012554  0100               	movlb	0	; () banked
  3550  012556  A4D8               	btfss	status,2,c
  3551  012558  D005               	goto	l2068
  3552                           
  3553                           ; BSR set to: 0
  3554  01255A  C0B6  F064         	movff	rx_assign@packetIDValue,_iRDistanceSS
  3555  01255E  0100               	movlb	0	; () banked
  3556  012560  6B65               	clrf	(_iRDistanceSS+1)& (0+255),b
  3557  012562  0012               	return	
  3558  012564                     l2068:
  3559                           
  3560                           ; BSR set to: 0
  3561  012564  C0B6  F066         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  3562  012568  0100               	movlb	0	; () banked
  3563  01256A  6B67               	clrf	(_iRDistanceSS+3)& (0+255),b
  3564                           
  3565                           ; BSR set to: 0
  3566  01256C  0100               	movlb	0	; () banked
  3567  01256E  5164               	movf	_iRDistanceSS& (0+255),w,b
  3568  012570  0100               	movlb	0	; () banked
  3569  012572  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3570  012574  6BB8               	clrf	??_rx_assign& (0+255),b
  3571  012576  0100               	movlb	0	; () banked
  3572  012578  5166               	movf	(_iRDistanceSS+2)& (0+255),w,b
  3573  01257A  0100               	movlb	0	; () banked
  3574  01257C  25B8               	addwf	??_rx_assign& (0+255),w,b
  3575  01257E  0100               	movlb	0	; () banked
  3576  012580  6F77               	movwf	_iRDistance& (0+255),b
  3577  012582  0100               	movlb	0	; () banked
  3578  012584  5167               	movf	(_iRDistanceSS+3)& (0+255),w,b
  3579  012586  0100               	movlb	0	; () banked
  3580  012588  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3581  01258A  0100               	movlb	0	; () banked
  3582  01258C  6F78               	movwf	(_iRDistance+1)& (0+255),b
  3583                           
  3584                           ; BSR set to: 0
  3585  01258E  0012               	return	
  3586  012590                     
  3587                           ; BSR set to: 0
  3588                           ;main.c: 195: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB = packe
      +                          tIDValue,
  3589                           ;main.c: 196: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  3590                           
  3591                           ; BSR set to: 0
  3592  012590  0100               	movlb	0	; () banked
  3593  012592  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3594  012594  0100               	movlb	0	; () banked
  3595  012596  A4D8               	btfss	status,2,c
  3596  012598  D005               	goto	l2073
  3597                           
  3598                           ; BSR set to: 0
  3599  01259A  C0B6  F060         	movff	rx_assign@packetIDValue,_iRAngleSS
  3600  01259E  0100               	movlb	0	; () banked
  3601  0125A0  6B61               	clrf	(_iRAngleSS+1)& (0+255),b
  3602  0125A2  0012               	return	
  3603  0125A4                     l2073:
  3604                           
  3605                           ; BSR set to: 0
  3606  0125A4  C0B6  F062         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  3607  0125A8  0100               	movlb	0	; () banked
  3608  0125AA  6B63               	clrf	(_iRAngleSS+3)& (0+255),b
  3609                           
  3610                           ; BSR set to: 0
  3611  0125AC  0100               	movlb	0	; () banked
  3612  0125AE  5160               	movf	_iRAngleSS& (0+255),w,b
  3613  0125B0  0100               	movlb	0	; () banked
  3614  0125B2  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3615  0125B4  6BB8               	clrf	??_rx_assign& (0+255),b
  3616  0125B6  0100               	movlb	0	; () banked
  3617  0125B8  5162               	movf	(_iRAngleSS+2)& (0+255),w,b
  3618  0125BA  0100               	movlb	0	; () banked
  3619  0125BC  25B8               	addwf	??_rx_assign& (0+255),w,b
  3620  0125BE  0100               	movlb	0	; () banked
  3621  0125C0  6F75               	movwf	_iRAngle& (0+255),b
  3622  0125C2  0100               	movlb	0	; () banked
  3623  0125C4  5163               	movf	(_iRAngleSS+3)& (0+255),w,b
  3624  0125C6  0100               	movlb	0	; () banked
  3625  0125C8  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3626  0125CA  0100               	movlb	0	; () banked
  3627  0125CC  6F76               	movwf	(_iRAngle+1)& (0+255),b
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;main.c: 197: }
  3631                           
  3632                           ; BSR set to: 0
  3633  0125CE  0012               	return	
  3634  0125D0                     l2057:
  3635                           
  3636                           ; BSR set to: 0
  3637  0125D0  0100               	movlb	0	; () banked
  3638  0125D2  51BA               	movf	rx_assign@packetID& (0+255),w,b
  3639                           
  3640                           ; Switch size 1, requested type "space"
  3641                           ; Number of cases is 9, Range of values is 7 to 20
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; simple_byte           28    15 (average)
  3645                           ;	Chosen strategy is simple_byte
  3646  0125D4  0A07               	xorlw	7	; case 7
  3647  0125D6  B4D8               	btfsc	status,2,c
  3648  0125D8  D7A4               	goto	l2058
  3649  0125DA  0A0F               	xorlw	15	; case 8
  3650  0125DC  B4D8               	btfsc	status,2,c
  3651  0125DE  D7A6               	goto	l2060
  3652  0125E0  0A01               	xorlw	1	; case 9
  3653  0125E2  B4D8               	btfsc	status,2,c
  3654  0125E4  D7A6               	goto	l2061
  3655  0125E6  0A03               	xorlw	3	; case 10
  3656  0125E8  B4D8               	btfsc	status,2,c
  3657  0125EA  D7A6               	goto	l2062
  3658  0125EC  0A01               	xorlw	1	; case 11
  3659  0125EE  B4D8               	btfsc	status,2,c
  3660  0125F0  D7A6               	goto	l2063
  3661  0125F2  0A07               	xorlw	7	; case 12
  3662  0125F4  B4D8               	btfsc	status,2,c
  3663  0125F6  D7A6               	goto	l2064
  3664  0125F8  0A01               	xorlw	1	; case 13
  3665  0125FA  B4D8               	btfsc	status,2,c
  3666  0125FC  D7A6               	goto	l2065
  3667  0125FE  0A1E               	xorlw	30	; case 19
  3668  012600  B4D8               	btfsc	status,2,c
  3669  012602  D7A6               	goto	l2066
  3670  012604  0A07               	xorlw	7	; case 20
  3671  012606  A4D8               	btfss	status,2,c
  3672  012608  0012               	return	
  3673  01260A  D7C2               	goto	l2071
  3674  01260C                     __end_of_rx_assign:
  3675                           	opt stack 0
  3676                           tosu	equ	0xFFF
  3677                           tosh	equ	0xFFE
  3678                           tosl	equ	0xFFD
  3679                           pclath	equ	0xFFA
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _sort_iRBumpDrop *****************
  3698 ;; Defined at:
  3699 ;;		line 200 in file "main.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        1 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    7
  3720 ;; This function calls:
  3721 ;;		Nothing
  3722 ;; This function is called by:
  3723 ;;		_rx_assign
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text5
  3728  0134A6                     __ptext5:
  3729                           	opt stack 0
  3730  0134A6                     _sort_iRBumpDrop:
  3731                           	opt stack 20
  3732                           
  3733                           ;main.c: 201: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  3734                           
  3735                           ;incstack = 0
  3736  0134A6  A034               	btfss	_iRBumpDrop,0,c
  3737  0134A8  D002               	goto	l2080
  3738  0134AA  0E01               	movlw	1
  3739  0134AC  D001               	goto	L1
  3740  0134AE                     l2080:
  3741                           
  3742                           ; BSR set to: 0
  3743  0134AE  0E00               	movlw	0
  3744  0134B0                     L1:
  3745  0134B0  0100               	movlb	0	; () banked
  3746  0134B2  6F88               	movwf	_iRBumpRight& (0+255),b
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;main.c: 202: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0);
  3750                           
  3751                           ; BSR set to: 0
  3752  0134B4  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3753  0134B8  0100               	movlb	0	; () banked
  3754  0134BA  90D8               	bcf	status,0,c
  3755  0134BC  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3756  0134BE  0100               	movlb	0	; () banked
  3757  0134C0  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3758  0134C2  D002               	goto	l2084
  3759                           
  3760                           ; BSR set to: 0
  3761  0134C4  0E01               	movlw	1
  3762  0134C6  D001               	goto	L2
  3763  0134C8                     l2084:
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ; BSR set to: 0
  3768  0134C8  0E00               	movlw	0
  3769  0134CA                     L2:
  3770  0134CA  0100               	movlb	0	; () banked
  3771  0134CC  6F87               	movwf	_iRBumpLeft& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 203: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 0);
  3775                           
  3776                           ; BSR set to: 0
  3777  0134CE  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3778  0134D2  0100               	movlb	0	; () banked
  3779  0134D4  90D8               	bcf	status,0,c
  3780  0134D6  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3781  0134D8  0100               	movlb	0	; () banked
  3782  0134DA  90D8               	bcf	status,0,c
  3783  0134DC  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3784  0134DE  0100               	movlb	0	; () banked
  3785  0134E0  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3786  0134E2  D002               	goto	l2088
  3787                           
  3788                           ; BSR set to: 0
  3789  0134E4  0E01               	movlw	1
  3790  0134E6  D001               	goto	L3
  3791  0134E8                     l2088:
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796  0134E8  0E00               	movlw	0
  3797  0134EA                     L3:
  3798  0134EA  6E2D               	movwf	_iRDropRight,c
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 204: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0);
  3802                           
  3803                           ; BSR set to: 0
  3804  0134EC  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3805  0134F0  0100               	movlb	0	; () banked
  3806  0134F2  90D8               	bcf	status,0,c
  3807  0134F4  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3808  0134F6  0100               	movlb	0	; () banked
  3809  0134F8  90D8               	bcf	status,0,c
  3810  0134FA  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3811  0134FC  0100               	movlb	0	; () banked
  3812  0134FE  90D8               	bcf	status,0,c
  3813  013500  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3814  013502  0100               	movlb	0	; () banked
  3815  013504  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3816  013506  D002               	goto	l2092
  3817                           
  3818                           ; BSR set to: 0
  3819  013508  0E01               	movlw	1
  3820  01350A  D001               	goto	L4
  3821  01350C                     l2092:
  3822                           
  3823                           ; BSR set to: 0
  3824                           
  3825                           ; BSR set to: 0
  3826  01350C  0E00               	movlw	0
  3827  01350E                     L4:
  3828  01350E  0100               	movlb	0	; () banked
  3829  013510  6F86               	movwf	_iRDropLeft& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 205: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster = 0);
  3833                           
  3834                           ; BSR set to: 0
  3835  013512  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3836  013516  0100               	movlb	0	; () banked
  3837  013518  3BB5               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  3838  01351A  0E0F               	movlw	15
  3839  01351C  17B5               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  3840  01351E  0100               	movlb	0	; () banked
  3841  013520  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3842  013522  D004               	goto	l2096
  3843                           
  3844                           ; BSR set to: 0
  3845  013524  0E01               	movlw	1
  3846  013526  0100               	movlb	0	; () banked
  3847  013528  6F85               	movwf	_iRDropCaster& (0+255),b
  3848  01352A  0012               	return	
  3849  01352C                     l2096:
  3850                           
  3851                           ; BSR set to: 0
  3852                           
  3853                           ; BSR set to: 0
  3854  01352C  0E00               	movlw	0
  3855  01352E  0100               	movlb	0	; () banked
  3856  013530  6F85               	movwf	_iRDropCaster& (0+255),b
  3857  013532  0012               	return	
  3858  013534                     __end_of_sort_iRBumpDrop:
  3859                           	opt stack 0
  3860                           tosu	equ	0xFFF
  3861                           tosh	equ	0xFFE
  3862                           tosl	equ	0xFFD
  3863                           pclath	equ	0xFFA
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _get_packet_size *****************
  3882 ;; Defined at:
  3883 ;;		line 168 in file "main.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  packetID        1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  packetID        1    0[BANK0 ] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      unsigned char 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;Total ram usage:        1 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    7
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_irobot_query_and_update
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text6
  3912  013C0C                     __ptext6:
  3913                           	opt stack 0
  3914  013C0C                     _get_packet_size:
  3915                           	opt stack 21
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;incstack = 0
  3919                           ;get_packet_size@packetID stored from wreg
  3920  013C0C  0100               	movlb	0	; () banked
  3921  013C0E  6FB5               	movwf	get_packet_size@packetID& (0+255),b
  3922                           
  3923                           ;main.c: 169: switch (packetID){
  3924  013C10  D012               	goto	l2043
  3925  013C12  0E01               	movlw	1
  3926  013C14  0012               	return	
  3927  013C16  0E01               	movlw	1
  3928  013C18  0012               	return	
  3929  013C1A  0E01               	movlw	1
  3930  013C1C  0012               	return	
  3931  013C1E  0E01               	movlw	1
  3932  013C20  0012               	return	
  3933  013C22  0E01               	movlw	1
  3934  013C24  0012               	return	
  3935  013C26  0E01               	movlw	1
  3936  013C28  0012               	return	
  3937  013C2A  0E01               	movlw	1
  3938  013C2C  0012               	return	
  3939  013C2E  0E02               	movlw	2
  3940  013C30  0012               	return	
  3941  013C32  0E02               	movlw	2
  3942                           
  3943                           ;main.c: 179: }
  3944  013C34  0012               	return	
  3945  013C36                     l2043:
  3946  013C36  0100               	movlb	0	; () banked
  3947  013C38  51B5               	movf	get_packet_size@packetID& (0+255),w,b
  3948                           
  3949                           ; Switch size 1, requested type "space"
  3950                           ; Number of cases is 9, Range of values is 7 to 20
  3951                           ; switch strategies available:
  3952                           ; Name         Instructions Cycles
  3953                           ; simple_byte           28    15 (average)
  3954                           ;	Chosen strategy is simple_byte
  3955  013C3A  0A07               	xorlw	7	; case 7
  3956  013C3C  B4D8               	btfsc	status,2,c
  3957  013C3E  D7E9               	goto	l2044
  3958  013C40  0A0F               	xorlw	15	; case 8
  3959  013C42  B4D8               	btfsc	status,2,c
  3960  013C44  D7E8               	goto	l2046
  3961  013C46  0A01               	xorlw	1	; case 9
  3962  013C48  B4D8               	btfsc	status,2,c
  3963  013C4A  D7E7               	goto	l2047
  3964  013C4C  0A03               	xorlw	3	; case 10
  3965  013C4E  B4D8               	btfsc	status,2,c
  3966  013C50  D7E6               	goto	l2048
  3967  013C52  0A01               	xorlw	1	; case 11
  3968  013C54  B4D8               	btfsc	status,2,c
  3969  013C56  D7E5               	goto	l2049
  3970  013C58  0A07               	xorlw	7	; case 12
  3971  013C5A  B4D8               	btfsc	status,2,c
  3972  013C5C  D7E4               	goto	l2050
  3973  013C5E  0A01               	xorlw	1	; case 13
  3974  013C60  B4D8               	btfsc	status,2,c
  3975  013C62  D7E3               	goto	l2051
  3976  013C64  0A1E               	xorlw	30	; case 19
  3977  013C66  B4D8               	btfsc	status,2,c
  3978  013C68  D7E2               	goto	l2052
  3979  013C6A  0A07               	xorlw	7	; case 20
  3980  013C6C  A4D8               	btfss	status,2,c
  3981  013C6E  0012               	return	
  3982  013C70  D7E0               	goto	l2053
  3983  013C72                     __end_of_get_packet_size:
  3984                           	opt stack 0
  3985                           tosu	equ	0xFFF
  3986                           tosh	equ	0xFFE
  3987                           tosl	equ	0xFFD
  3988                           pclath	equ	0xFFA
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1h	equ	0xFE2
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function _eusart_getch *****************
  4007 ;; Defined at:
  4008 ;;		line 233 in file "main.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      unsigned char 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;Total ram usage:        0 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    7
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_irobot_query_and_update
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text7
  4037  0149C6                     __ptext7:
  4038                           	opt stack 0
  4039  0149C6                     _eusart_getch:
  4040                           	opt stack 21
  4041                           
  4042                           ;main.c: 234: while (!PIR1bits.RC1IF) {};
  4043                           
  4044                           ;incstack = 0
  4045  0149C6  AA9E               	btfss	3998,5,c	;volatile
  4046  0149C8  D7FE               	goto	_eusart_getch
  4047                           
  4048                           ;main.c: 235: return RCREG1;
  4049  0149CA  50AF               	movf	4015,w,c	;volatile
  4050  0149CC  0012               	return	
  4051  0149CE                     __end_of_eusart_getch:
  4052                           	opt stack 0
  4053                           tosu	equ	0xFFF
  4054                           tosh	equ	0xFFE
  4055                           tosl	equ	0xFFD
  4056                           pclath	equ	0xFFA
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _printf *****************
  4075 ;; Defined at:
  4076 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4079 ;;		 -> STR_5(26), STR_4(3), STR_3(13), STR_2(46), 
  4080 ;;		 -> STR_1(3), 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  tmpval          4    0        struct .
  4083 ;;  cp              3    0        PTR const unsigned char 
  4084 ;;  val             2   34[BANK0 ] unsigned int 
  4085 ;;  ap              2   32[BANK0 ] PTR void [1]
  4086 ;;		 -> ?_printf(2), 
  4087 ;;  len             2    0        unsigned int 
  4088 ;;  c               1   36[BANK0 ] char 
  4089 ;;  flag            1   31[BANK0 ] unsigned char 
  4090 ;;  prec            1   30[BANK0 ] char 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  2   21[BANK0 ] int 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:       16 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:   12
  4107 ;; This function calls:
  4108 ;;		___lwdiv
  4109 ;;		___lwmod
  4110 ;;		_putch
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text8
  4117  011506                     __ptext8:
  4118                           	opt stack 0
  4119  011506                     _printf:
  4120                           	opt stack 18
  4121                           
  4122                           ;doprnt.c: 466: va_list ap;
  4123                           ;doprnt.c: 499: signed char c;
  4124                           ;doprnt.c: 506: signed char prec;
  4125                           ;doprnt.c: 508: unsigned char flag;
  4126                           ;doprnt.c: 523: union {
  4127                           ;doprnt.c: 524: unsigned long vd;
  4128                           ;doprnt.c: 525: double integ;
  4129                           ;doprnt.c: 526: } tmpval;
  4130                           ;doprnt.c: 528: unsigned int val;
  4131                           ;doprnt.c: 529: unsigned len;
  4132                           ;doprnt.c: 530: const char * cp;
  4133                           ;doprnt.c: 533: *ap = __va_start();
  4134                           
  4135                           ;incstack = 0
  4136  011506  0ECC               	movlw	low (?_printf+2)
  4137  011508  0100               	movlb	0	; () banked
  4138  01150A  6FD5               	movwf	printf@ap& (0+255),b
  4139  01150C  0E00               	movlw	high (?_printf+2)
  4140  01150E  0100               	movlb	0	; () banked
  4141  011510  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4142                           
  4143                           ;doprnt.c: 536: while(c = *f++) {
  4144  011512  D0C9               	goto	u8510
  4145  011514                     
  4146                           ; BSR set to: 0
  4147                           ;doprnt.c: 538: if(c != '%')
  4148                           
  4149                           ; BSR set to: 0
  4150  011514  0E25               	movlw	37
  4151  011516  0100               	movlb	0	; () banked
  4152  011518  19D9               	xorwf	printf@c& (0+255),w,b
  4153  01151A  B4D8               	btfsc	status,2,c
  4154  01151C  D005               	goto	l2249
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;doprnt.c: 540: {
  4158                           ;doprnt.c: 541: (putch(c) );
  4159  01151E  0100               	movlb	0	; () banked
  4160  011520  51D9               	movf	printf@c& (0+255),w,b
  4161  011522  EC9F  F0A4         	call	_putch
  4162                           
  4163                           ;doprnt.c: 542: continue;
  4164  011526  D0BF               	goto	u8510
  4165  011528                     l2249:
  4166                           
  4167                           ;doprnt.c: 543: }
  4168                           ;doprnt.c: 548: flag = 0;
  4169  011528  0E00               	movlw	0
  4170  01152A  0100               	movlb	0	; () banked
  4171  01152C  6FD4               	movwf	printf@flag& (0+255),b
  4172                           
  4173                           ;doprnt.c: 635: switch(c = *f++) {
  4174  01152E  D014               	goto	l2250
  4175  011530                     
  4176                           ; BSR set to: 0
  4177                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4178                           
  4179                           ; BSR set to: 0
  4180  011530  C0D5  FFD9         	movff	printf@ap,fsr2l
  4181  011534  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4182  011538  50DF               	movf	indf2,w,c
  4183  01153A  0100               	movlb	0	; () banked
  4184  01153C  6FD9               	movwf	printf@c& (0+255),b
  4185                           
  4186                           ; BSR set to: 0
  4187  01153E  0E02               	movlw	2
  4188  011540  0100               	movlb	0	; () banked
  4189  011542  27D5               	addwf	printf@ap& (0+255),f,b
  4190  011544  0E00               	movlw	0
  4191  011546  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4192  011548                     
  4193                           ; BSR set to: 0
  4194                           ;doprnt.c: 809: (putch(c) );
  4195                           
  4196                           ; BSR set to: 0
  4197  011548  0100               	movlb	0	; () banked
  4198  01154A  51D9               	movf	printf@c& (0+255),w,b
  4199  01154C  EC9F  F0A4         	call	_putch
  4200                           
  4201                           ;doprnt.c: 810: continue;
  4202  011550  D0AA               	goto	u8510
  4203  011552                     
  4204                           ;doprnt.c: 818: flag |= 0x40;
  4205  011552  0100               	movlb	0	; () banked
  4206  011554  8DD4               	bsf	printf@flag& (0+255),6,b
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;doprnt.c: 822: }
  4210                           
  4211                           ;doprnt.c: 819: break;
  4212  011556  D01E               	goto	l2255
  4213  011558                     l2250:
  4214                           
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218  011558  C0CA  FFF6         	movff	printf@f,tblptrl
  4219  01155C  C0CB  FFF7         	movff	printf@f+1,tblptrh
  4220  011560  0100               	movlb	0	; () banked
  4221  011562  4BCA               	infsnz	printf@f& (0+255),f,b
  4222  011564  2BCB               	incf	(printf@f+1)& (0+255),f,b
  4223  011566                     	if	0	;tblptru may be non-zero
  4224  011566                     	endif
  4225  011566                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4226  011566  0E00               	movlw	low (__mediumconst shr (0+16))
  4227  011568  6EF8               	movwf	tblptru,c
  4228  01156A                     	endif
  4229  01156A  0008               	tblrd		*
  4230  01156C  CFF5 F0D9          	movff	tablat,printf@c
  4231  011570  0100               	movlb	0	; () banked
  4232  011572  51D9               	movf	printf@c& (0+255),w,b
  4233                           
  4234                           ; Switch size 1, requested type "space"
  4235                           ; Number of cases is 5, Range of values is 0 to 117
  4236                           ; switch strategies available:
  4237                           ; Name         Instructions Cycles
  4238                           ; simple_byte           16     9 (average)
  4239                           ;	Chosen strategy is simple_byte
  4240  011574  0A00               	xorlw	0	; case 0
  4241  011576  B4D8               	btfsc	status,2,c
  4242  011578  0012               	return	
  4243  01157A  0A63               	xorlw	99	; case 99
  4244  01157C  B4D8               	btfsc	status,2,c
  4245  01157E  D7D8               	goto	l2256
  4246  011580  0A07               	xorlw	7	; case 100
  4247  011582  B4D8               	btfsc	status,2,c
  4248  011584  D007               	goto	l2255
  4249  011586  0A0D               	xorlw	13	; case 105
  4250  011588  B4D8               	btfsc	status,2,c
  4251  01158A  D004               	goto	l2255
  4252  01158C  0A1C               	xorlw	28	; case 117
  4253  01158E  B4D8               	btfsc	status,2,c
  4254  011590  D7E0               	goto	l2258
  4255  011592  D7DA               	goto	l2257
  4256  011594                     l2255:
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4260  011594  0100               	movlb	0	; () banked
  4261  011596  BDD4               	btfsc	printf@flag& (0+255),6,b
  4262  011598  D019               	goto	l2259
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;doprnt.c: 1253: {
  4266                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4267  01159A  C0D5  FFD9         	movff	printf@ap,fsr2l
  4268  01159E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4269  0115A2  CFDE F0D7          	movff	postinc2,printf@val
  4270  0115A6  CFDD F0D8          	movff	postdec2,printf@val+1
  4271                           
  4272                           ; BSR set to: 0
  4273  0115AA  0E02               	movlw	2
  4274  0115AC  0100               	movlb	0	; () banked
  4275  0115AE  27D5               	addwf	printf@ap& (0+255),f,b
  4276  0115B0  0E00               	movlw	0
  4277  0115B2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 1261: if((int)val < 0) {
  4281  0115B4  0100               	movlb	0	; () banked
  4282  0115B6  AFD8               	btfss	(printf@val+1)& (0+255),7,b
  4283  0115B8  D016               	goto	l2261
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;doprnt.c: 1262: flag |= 0x03;
  4287  0115BA  0E03               	movlw	3
  4288  0115BC  0100               	movlb	0	; () banked
  4289  0115BE  13D4               	iorwf	printf@flag& (0+255),f,b
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 1263: val = -val;
  4293  0115C0  0100               	movlb	0	; () banked
  4294  0115C2  6DD7               	negf	printf@val& (0+255),b
  4295  0115C4  1FD8               	comf	(printf@val+1)& (0+255),f,b
  4296  0115C6  B0D8               	btfsc	status,0,c
  4297  0115C8  2BD8               	incf	(printf@val+1)& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;doprnt.c: 1264: }
  4301                           ;doprnt.c: 1266: }
  4302  0115CA  D00D               	goto	l2261
  4303  0115CC                     l2259:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;doprnt.c: 1268: else
  4307                           ;doprnt.c: 1273: {
  4308                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4309                           
  4310                           ; BSR set to: 0
  4311  0115CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  4312  0115D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4313  0115D4  CFDE F0D7          	movff	postinc2,printf@val
  4314  0115D8  CFDD F0D8          	movff	postdec2,printf@val+1
  4315                           
  4316                           ; BSR set to: 0
  4317  0115DC  0E02               	movlw	2
  4318  0115DE  0100               	movlb	0	; () banked
  4319  0115E0  27D5               	addwf	printf@ap& (0+255),f,b
  4320  0115E2  0E00               	movlw	0
  4321  0115E4  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4322  0115E6                     l2261:
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;doprnt.c: 1287: }
  4326                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4327                           
  4328                           ; BSR set to: 0
  4329  0115E6  0E01               	movlw	1
  4330  0115E8  0100               	movlb	0	; () banked
  4331  0115EA  6FD9               	movwf	printf@c& (0+255),b
  4332  0115EC                     l12518:
  4333                           
  4334                           ; BSR set to: 0
  4335  0115EC  0E05               	movlw	5
  4336  0115EE  0100               	movlb	0	; () banked
  4337  0115F0  19D9               	xorwf	printf@c& (0+255),w,b
  4338  0115F2  B4D8               	btfsc	status,2,c
  4339  0115F4  D019               	goto	u8490
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1306: if(val < dpowers[c])
  4343                           
  4344                           ; BSR set to: 0
  4345                           
  4346                           ; BSR set to: 0
  4347  0115F6  0100               	movlb	0	; () banked
  4348  0115F8  51D9               	movf	printf@c& (0+255),w,b
  4349  0115FA  0D02               	mullw	2
  4350  0115FC  0E9F               	movlw	low _dpowers
  4351  0115FE  24F3               	addwf	prodl,w,c
  4352  011600  6EF6               	movwf	tblptrl,c
  4353  011602  0EFD               	movlw	high _dpowers
  4354  011604  20F4               	addwfc	prodh,w,c
  4355  011606  6EF7               	movwf	tblptrh,c
  4356  011608                     	if	1	;There are 3 active tblptr bytes
  4357  011608  6AF8               	clrf	tblptru,c
  4358  01160A  0E00               	movlw	low (__mediumconst shr (0+16))
  4359  01160C  22F8               	addwfc	tblptru,f,c
  4360  01160E                     	endif
  4361  01160E  0009               	tblrd		*+
  4362  011610  50F5               	movf	tablat,w,c
  4363  011612  0100               	movlb	0	; () banked
  4364  011614  5DD7               	subwf	printf@val& (0+255),w,b
  4365  011616  0009               	tblrd		*+
  4366  011618  50F5               	movf	tablat,w,c
  4367  01161A  0100               	movlb	0	; () banked
  4368  01161C  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  4369  01161E  A0D8               	btfss	status,0,c
  4370  011620  D003               	goto	u8490
  4371                           
  4372                           ; BSR set to: 0
  4373                           
  4374                           ; BSR set to: 0
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;doprnt.c: 1307: break;
  4378  011622  0100               	movlb	0	; () banked
  4379  011624  2BD9               	incf	printf@c& (0+255),f,b
  4380  011626  D7E2               	goto	l12518
  4381  011628                     u8490:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 1422: {
  4385                           ;doprnt.c: 1438: if(flag & 0x03)
  4386                           
  4387                           ; BSR set to: 0
  4388  011628  C0D4  F0D2         	movff	printf@flag,??_printf
  4389  01162C  0E03               	movlw	3
  4390  01162E  0100               	movlb	0	; () banked
  4391  011630  17D2               	andwf	??_printf& (0+255),f,b
  4392  011632  B4D8               	btfsc	status,2,c
  4393  011634  D003               	goto	l2265
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;doprnt.c: 1439: (putch('-') );
  4397  011636  0E2D               	movlw	45
  4398  011638  EC9F  F0A4         	call	_putch
  4399  01163C                     l2265:
  4400                           
  4401                           ;doprnt.c: 1469: }
  4402                           ;doprnt.c: 1472: prec = c;
  4403  01163C  C0D9  F0D3         	movff	printf@c,printf@prec
  4404                           
  4405                           ;doprnt.c: 1474: while(prec--) {
  4406  011640  D02C               	goto	l2266
  4407  011642                     
  4408                           ;doprnt.c: 1478: {
  4409                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4410  011642  0100               	movlb	0	; () banked
  4411  011644  51D3               	movf	printf@prec& (0+255),w,b
  4412  011646  0D02               	mullw	2
  4413  011648  0E9F               	movlw	low _dpowers
  4414  01164A  24F3               	addwf	prodl,w,c
  4415  01164C  6EF6               	movwf	tblptrl,c
  4416  01164E  0EFD               	movlw	high _dpowers
  4417  011650  20F4               	addwfc	prodh,w,c
  4418  011652  6EF7               	movwf	tblptrh,c
  4419  011654                     	if	1	;There are 3 active tblptr bytes
  4420  011654  6AF8               	clrf	tblptru,c
  4421  011656  0E00               	movlw	low (__mediumconst shr (0+16))
  4422  011658  22F8               	addwfc	tblptru,f,c
  4423  01165A                     	endif
  4424  01165A  0009               	tblrd		*+
  4425  01165C  CFF5 F0B7          	movff	tablat,___lwdiv@divisor
  4426  011660  000A               	tblrd		*-
  4427  011662  CFF5 F0B8          	movff	tablat,___lwdiv@divisor+1
  4428  011666  C0D7  F0B5         	movff	printf@val,___lwdiv@dividend
  4429  01166A  C0D8  F0B6         	movff	printf@val+1,___lwdiv@dividend+1
  4430  01166E  EC64  F09B         	call	___lwdiv	;wreg free
  4431  011672  C0B5  F0BC         	movff	?___lwdiv,___lwmod@dividend
  4432  011676  C0B6  F0BD         	movff	?___lwdiv+1,___lwmod@dividend+1
  4433  01167A  0E00               	movlw	0
  4434  01167C  0100               	movlb	0	; () banked
  4435  01167E  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
  4436  011680  0E0A               	movlw	10
  4437  011682  6FBE               	movwf	___lwmod@divisor& (0+255),b
  4438  011684  ECCF  F09E         	call	___lwmod	;wreg free
  4439  011688  0100               	movlb	0	; () banked
  4440  01168A  51BC               	movf	?___lwmod& (0+255),w,b
  4441  01168C  0F30               	addlw	48
  4442  01168E  0100               	movlb	0	; () banked
  4443  011690  6FD9               	movwf	printf@c& (0+255),b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 1523: }
  4447                           ;doprnt.c: 1524: (putch(c) );
  4448  011692  0100               	movlb	0	; () banked
  4449  011694  51D9               	movf	printf@c& (0+255),w,b
  4450  011696  EC9F  F0A4         	call	_putch
  4451  01169A                     l2266:
  4452  01169A  0100               	movlb	0	; () banked
  4453  01169C  07D3               	decf	printf@prec& (0+255),f,b
  4454  01169E  0100               	movlb	0	; () banked
  4455  0116A0  29D3               	incf	printf@prec& (0+255),w,b
  4456  0116A2  A4D8               	btfss	status,2,c
  4457  0116A4  D7CE               	goto	l2267
  4458  0116A6                     u8510:
  4459                           
  4460                           ; BSR set to: 0
  4461                           
  4462                           ; BSR set to: 0
  4463  0116A6  C0CA  FFF6         	movff	printf@f,tblptrl
  4464  0116AA  C0CB  FFF7         	movff	printf@f+1,tblptrh
  4465  0116AE  0100               	movlb	0	; () banked
  4466  0116B0  4BCA               	infsnz	printf@f& (0+255),f,b
  4467  0116B2  2BCB               	incf	(printf@f+1)& (0+255),f,b
  4468  0116B4                     	if	0	;tblptru may be non-zero
  4469  0116B4                     	endif
  4470  0116B4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4471  0116B4  0E00               	movlw	low (__mediumconst shr (0+16))
  4472  0116B6  6EF8               	movwf	tblptru,c
  4473  0116B8                     	endif
  4474  0116B8  0008               	tblrd		*
  4475  0116BA  CFF5 F0D9          	movff	tablat,printf@c
  4476  0116BE  0100               	movlb	0	; () banked
  4477  0116C0  51D9               	movf	printf@c& (0+255),w,b
  4478  0116C2  B4D8               	btfsc	status,2,c
  4479  0116C4  0012               	return	
  4480  0116C6  D726               	goto	l2248
  4481  0116C8                     __end_of_printf:
  4482                           	opt stack 0
  4483                           tosu	equ	0xFFF
  4484                           tosh	equ	0xFFE
  4485                           tosl	equ	0xFFD
  4486                           pclath	equ	0xFFA
  4487                           tblptru	equ	0xFF8
  4488                           tblptrh	equ	0xFF7
  4489                           tblptrl	equ	0xFF6
  4490                           tablat	equ	0xFF5
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postdec1	equ	0xFE5
  4496                           fsr1h	equ	0xFE2
  4497                           fsr1l	equ	0xFE1
  4498                           indf2	equ	0xFDF
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _putch *****************
  4506 ;; Defined at:
  4507 ;;		line 454 in file "Library/Console.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  c               1    wreg     unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  c               1   20[BANK0 ] unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:   11
  4528 ;; This function calls:
  4529 ;;		_Console_PrintChar
  4530 ;; This function is called by:
  4531 ;;		_printf
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text9
  4536  01493E                     __ptext9:
  4537                           	opt stack 0
  4538  01493E                     _putch:
  4539                           	opt stack 18
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;incstack = 0
  4543                           ;putch@c stored from wreg
  4544  01493E  0100               	movlb	0	; () banked
  4545  014940  6FC9               	movwf	putch@c& (0+255),b
  4546                           
  4547                           ;Console.c: 456: Console_PrintChar(c);
  4548  014942  0100               	movlb	0	; () banked
  4549  014944  51C9               	movf	putch@c& (0+255),w,b
  4550  014946  EC44  F08C         	call	_Console_PrintChar
  4551  01494A  0012               	return		;funcret
  4552  01494C                     __end_of_putch:
  4553                           	opt stack 0
  4554                           tosu	equ	0xFFF
  4555                           tosh	equ	0xFFE
  4556                           tosl	equ	0xFFD
  4557                           pclath	equ	0xFFA
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           postdec1	equ	0xFE5
  4567                           fsr1h	equ	0xFE2
  4568                           fsr1l	equ	0xFE1
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _Console_PrintChar *****************
  4577 ;; Defined at:
  4578 ;;		line 322 in file "Library/Console.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  pInput          1    wreg     unsigned char 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  pInput          1   19[BANK0 ] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;Total ram usage:        4 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:   10
  4599 ;; This function calls:
  4600 ;;		_Console_Backspace
  4601 ;;		_Console_FormFeed
  4602 ;;		_Console_IncrementCursor
  4603 ;;		_Console_NewLine
  4604 ;;		_Console_ResetCursor
  4605 ;;		_Console_Tab
  4606 ;; This function is called by:
  4607 ;;		_putch
  4608 ;;		_Console_PrintString
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text10
  4613  011888                     __ptext10:
  4614                           	opt stack 0
  4615  011888                     _Console_PrintChar:
  4616                           	opt stack 18
  4617                           
  4618                           ;incstack = 0
  4619                           ;Console_PrintChar@pInput stored from wreg
  4620  011888  0100               	movlb	0	; () banked
  4621  01188A  6FC8               	movwf	Console_PrintChar@pInput& (0+255),b
  4622                           
  4623                           ;Console.c: 324: switch(pInput)
  4624  01188C  D0B1               	goto	l1036
  4625  01188E                     
  4626                           ;Console.c: 327: case '\n':
  4627                           ;Console.c: 328: Console_NewLine();
  4628  01188E  EC20  F099         	call	_Console_NewLine	;wreg free
  4629                           
  4630                           ;Console.c: 329: return;
  4631  011892  0012               	return	
  4632  011894                     
  4633                           ;Console.c: 331: Console_Backspace();
  4634  011894  EC00  F09F         	call	_Console_Backspace	;wreg free
  4635                           
  4636                           ;Console.c: 332: return;
  4637  011898  0012               	return	
  4638  01189A                     
  4639                           ;Console.c: 334: Console_FormFeed();
  4640  01189A  EC9A  F09A         	call	_Console_FormFeed	;wreg free
  4641                           
  4642                           ;Console.c: 335: return;
  4643  01189E  0012               	return	
  4644  0118A0                     
  4645                           ;Console.c: 337: Console_Tab();
  4646  0118A0  ECA6  F094         	call	_Console_Tab	;wreg free
  4647                           
  4648                           ;Console.c: 338: return;
  4649  0118A4  0012               	return	
  4650  0118A6                     
  4651                           ;Console.c: 340: Console_IncrementCursor();
  4652  0118A6  EC39  F09E         	call	_Console_IncrementCursor	;wreg free
  4653                           
  4654                           ;Console.c: 341: return;
  4655  0118AA  0012               	return	
  4656  0118AC                     
  4657                           ;Console.c: 343: Console_ResetCursor();
  4658  0118AC  EC75  F0A3         	call	_Console_ResetCursor	;wreg free
  4659                           
  4660                           ;Console.c: 344: return;
  4661  0118B0  0012               	return	
  4662  0118B2                     
  4663                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4664                           
  4665                           ;Console.c: 349: default:
  4666  0118B2  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4667  0118B6  0E7F               	movlw	127
  4668  0118B8  0100               	movlb	0	; () banked
  4669  0118BA  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4670  0118BC  0100               	movlb	0	; () banked
  4671  0118BE  518C               	movf	_lBufferY& (0+255),w,b
  4672  0118C0  0D14               	mullw	20
  4673  0118C2  0EAA               	movlw	low _lBuffer
  4674  0118C4  0100               	movlb	0	; () banked
  4675  0118C6  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4676  0118C8  0E04               	movlw	high _lBuffer
  4677  0118CA  0100               	movlb	0	; () banked
  4678  0118CC  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4679  0118CE  50F3               	movf	prodl,w,c
  4680  0118D0  0100               	movlb	0	; () banked
  4681  0118D2  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4682  0118D4  50F4               	movf	prodh,w,c
  4683  0118D6  0100               	movlb	0	; () banked
  4684  0118D8  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4685  0118DA  0100               	movlb	0	; () banked
  4686  0118DC  518D               	movf	_lBufferX& (0+255),w,b
  4687  0118DE  0D01               	mullw	1
  4688  0118E0  50F3               	movf	prodl,w,c
  4689  0118E2  0100               	movlb	0	; () banked
  4690  0118E4  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4691  0118E6  6ED9               	movwf	fsr2l,c
  4692  0118E8  50F4               	movf	prodh,w,c
  4693  0118EA  0100               	movlb	0	; () banked
  4694  0118EC  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4695  0118EE  6EDA               	movwf	fsr2h,c
  4696  0118F0  50DF               	movf	indf2,w,c
  4697  0118F2  0B7F               	andlw	127
  4698  0118F4  0100               	movlb	0	; () banked
  4699  0118F6  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4700  0118F8  B4D8               	btfsc	status,2,c
  4701  0118FA  D02E               	goto	l1047
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;Console.c: 351: {
  4705                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4706  0118FC  0E01               	movlw	1
  4707  0118FE  0100               	movlb	0	; () banked
  4708  011900  6FFF               	movwf	_change& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711  011902  0100               	movlb	0	; () banked
  4712  011904  518C               	movf	_lBufferY& (0+255),w,b
  4713  011906  0D14               	mullw	20
  4714  011908  0EAA               	movlw	low _lBuffer
  4715  01190A  0100               	movlb	0	; () banked
  4716  01190C  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4717  01190E  0E04               	movlw	high _lBuffer
  4718  011910  0100               	movlb	0	; () banked
  4719  011912  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4720  011914  50F3               	movf	prodl,w,c
  4721  011916  0100               	movlb	0	; () banked
  4722  011918  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4723  01191A  50F4               	movf	prodh,w,c
  4724  01191C  0100               	movlb	0	; () banked
  4725  01191E  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4726  011920  0100               	movlb	0	; () banked
  4727  011922  518D               	movf	_lBufferX& (0+255),w,b
  4728  011924  0D01               	mullw	1
  4729  011926  50F3               	movf	prodl,w,c
  4730  011928  0100               	movlb	0	; () banked
  4731  01192A  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4732  01192C  6ED9               	movwf	fsr2l,c
  4733  01192E  50F4               	movf	prodh,w,c
  4734  011930  0100               	movlb	0	; () banked
  4735  011932  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4736  011934  6EDA               	movwf	fsr2h,c
  4737  011936  0100               	movlb	0	; () banked
  4738  011938  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4739  01193A  0980               	iorlw	128
  4740  01193C  6EDF               	movwf	indf2,c
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4744  01193E  0100               	movlb	0	; () banked
  4745  011940  518C               	movf	_lBufferY& (0+255),w,b
  4746  011942  0D02               	mullw	2
  4747  011944  0E00               	movlw	low _lCBuffer
  4748  011946  24F3               	addwf	prodl,w,c
  4749  011948  6ED9               	movwf	fsr2l,c
  4750  01194A  0E03               	movlw	high _lCBuffer
  4751  01194C  20F4               	addwfc	prodh,w,c
  4752  01194E  6EDA               	movwf	fsr2h,c
  4753  011950  C0FD  FFDE         	movff	_gForecolour,postinc2
  4754  011954  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4755  011958                     l1047:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;Console.c: 354: }
  4759                           ;Console.c: 368: if(Console_IncrementCursor())
  4760                           
  4761                           ; BSR set to: 0
  4762  011958  EC39  F09E         	call	_Console_IncrementCursor	;wreg free
  4763  01195C  0900               	iorlw	0
  4764  01195E  B4D8               	btfsc	status,2,c
  4765  011960  0012               	return	
  4766                           
  4767                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4768  011962  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4769  011966  0E7F               	movlw	127
  4770  011968  0100               	movlb	0	; () banked
  4771  01196A  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4772  01196C  0100               	movlb	0	; () banked
  4773  01196E  518C               	movf	_lBufferY& (0+255),w,b
  4774  011970  0D14               	mullw	20
  4775  011972  0EAA               	movlw	low _lBuffer
  4776  011974  0100               	movlb	0	; () banked
  4777  011976  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4778  011978  0E04               	movlw	high _lBuffer
  4779  01197A  0100               	movlb	0	; () banked
  4780  01197C  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4781  01197E  50F3               	movf	prodl,w,c
  4782  011980  0100               	movlb	0	; () banked
  4783  011982  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4784  011984  50F4               	movf	prodh,w,c
  4785  011986  0100               	movlb	0	; () banked
  4786  011988  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4787  01198A  0100               	movlb	0	; () banked
  4788  01198C  518D               	movf	_lBufferX& (0+255),w,b
  4789  01198E  0D01               	mullw	1
  4790  011990  50F3               	movf	prodl,w,c
  4791  011992  0100               	movlb	0	; () banked
  4792  011994  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4793  011996  6ED9               	movwf	fsr2l,c
  4794  011998  50F4               	movf	prodh,w,c
  4795  01199A  0100               	movlb	0	; () banked
  4796  01199C  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4797  01199E  6EDA               	movwf	fsr2h,c
  4798  0119A0  50DF               	movf	indf2,w,c
  4799  0119A2  0B7F               	andlw	127
  4800  0119A4  0100               	movlb	0	; () banked
  4801  0119A6  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4802  0119A8  B4D8               	btfsc	status,2,c
  4803  0119AA  0012               	return	
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4807  0119AC  0E01               	movlw	1
  4808  0119AE  0100               	movlb	0	; () banked
  4809  0119B0  6FFF               	movwf	_change& (0+255),b
  4810                           
  4811                           ; BSR set to: 0
  4812  0119B2  0100               	movlb	0	; () banked
  4813  0119B4  518C               	movf	_lBufferY& (0+255),w,b
  4814  0119B6  0D14               	mullw	20
  4815  0119B8  0EAA               	movlw	low _lBuffer
  4816  0119BA  0100               	movlb	0	; () banked
  4817  0119BC  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4818  0119BE  0E04               	movlw	high _lBuffer
  4819  0119C0  0100               	movlb	0	; () banked
  4820  0119C2  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4821  0119C4  50F3               	movf	prodl,w,c
  4822  0119C6  0100               	movlb	0	; () banked
  4823  0119C8  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4824  0119CA  50F4               	movf	prodh,w,c
  4825  0119CC  0100               	movlb	0	; () banked
  4826  0119CE  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4827  0119D0  0100               	movlb	0	; () banked
  4828  0119D2  518D               	movf	_lBufferX& (0+255),w,b
  4829  0119D4  0D01               	mullw	1
  4830  0119D6  50F3               	movf	prodl,w,c
  4831  0119D8  0100               	movlb	0	; () banked
  4832  0119DA  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4833  0119DC  6ED9               	movwf	fsr2l,c
  4834  0119DE  50F4               	movf	prodh,w,c
  4835  0119E0  0100               	movlb	0	; () banked
  4836  0119E2  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4837  0119E4  6EDA               	movwf	fsr2h,c
  4838  0119E6  0100               	movlb	0	; () banked
  4839  0119E8  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4840  0119EA  0980               	iorlw	128
  4841  0119EC  6EDF               	movwf	indf2,c
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;Console.c: 372: };
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;Console.c: 371: return;
  4848                           
  4849                           ; BSR set to: 0
  4850                           
  4851                           ; BSR set to: 0
  4852  0119EE  0012               	return	
  4853  0119F0                     l1036:
  4854                           
  4855                           ; BSR set to: 0
  4856  0119F0  0100               	movlb	0	; () banked
  4857  0119F2  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4858                           
  4859                           ; Switch size 1, requested type "space"
  4860                           ; Number of cases is 8, Range of values is 7 to 35
  4861                           ; switch strategies available:
  4862                           ; Name         Instructions Cycles
  4863                           ; simple_byte           25    13 (average)
  4864                           ;	Chosen strategy is simple_byte
  4865  0119F4  0A07               	xorlw	7	; case 7
  4866  0119F6  B4D8               	btfsc	status,2,c
  4867  0119F8  D756               	goto	l1043
  4868  0119FA  0A0F               	xorlw	15	; case 8
  4869  0119FC  B4D8               	btfsc	status,2,c
  4870  0119FE  D74A               	goto	l1040
  4871  011A00  0A01               	xorlw	1	; case 9
  4872  011A02  B4D8               	btfsc	status,2,c
  4873  011A04  D74D               	goto	l1042
  4874  011A06  0A03               	xorlw	3	; case 10
  4875  011A08  B4D8               	btfsc	status,2,c
  4876  011A0A  D741               	goto	l1037
  4877  011A0C  0A06               	xorlw	6	; case 12
  4878  011A0E  B4D8               	btfsc	status,2,c
  4879  011A10  D744               	goto	l1041
  4880  011A12  0A01               	xorlw	1	; case 13
  4881  011A14  B4D8               	btfsc	status,2,c
  4882  011A16  D73B               	goto	l1037
  4883  011A18  0A2D               	xorlw	45	; case 32
  4884  011A1A  B4D8               	btfsc	status,2,c
  4885  011A1C  D74A               	goto	l1045
  4886  011A1E  0A03               	xorlw	3	; case 35
  4887  011A20  B4D8               	btfsc	status,2,c
  4888  011A22  D744               	goto	l1044
  4889  011A24  D746               	goto	l1045
  4890  011A26                     __end_of_Console_PrintChar:
  4891                           	opt stack 0
  4892                           tosu	equ	0xFFF
  4893                           tosh	equ	0xFFE
  4894                           tosl	equ	0xFFD
  4895                           pclath	equ	0xFFA
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           fsr1h	equ	0xFE2
  4906                           fsr1l	equ	0xFE1
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function _Console_Tab *****************
  4915 ;; Defined at:
  4916 ;;		line 260 in file "Library/Console.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  c               1   15[BANK0 ] unsigned char 
  4921 ;;  i               1   14[BANK0 ] unsigned char 
  4922 ;;  t               1   13[BANK0 ] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;Total ram usage:        8 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    9
  4939 ;; This function calls:
  4940 ;;		_Console_ClearCursor
  4941 ;;		_Console_IncrementCursor
  4942 ;;		___awdiv
  4943 ;; This function is called by:
  4944 ;;		_Console_PrintChar
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text11
  4949  01294C                     __ptext11:
  4950                           	opt stack 0
  4951  01294C                     _Console_Tab:
  4952                           	opt stack 18
  4953                           
  4954                           ;Console.c: 262: UINT8 i = 0;
  4955                           
  4956                           ;incstack = 0
  4957  01294C  0E00               	movlw	0
  4958  01294E  0100               	movlb	0	; () banked
  4959  012950  6FC3               	movwf	Console_Tab@i& (0+255),b
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4963  012952  0EFA               	movlw	250
  4964  012954  2447               	addwf	_gCursor,w,c
  4965  012956  0100               	movlb	0	; () banked
  4966  012958  6FB5               	movwf	___awdiv@dividend& (0+255),b
  4967  01295A  0EFF               	movlw	255
  4968  01295C  2048               	addwfc	_gCursor+1,w,c
  4969  01295E  0100               	movlb	0	; () banked
  4970  012960  6FB6               	movwf	(___awdiv@dividend+1)& (0+255),b
  4971  012962  0E00               	movlw	0
  4972  012964  0100               	movlb	0	; () banked
  4973  012966  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4974  012968  0E06               	movlw	6
  4975  01296A  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4976  01296C  EC07  F095         	call	___awdiv	;wreg free
  4977  012970  0100               	movlb	0	; () banked
  4978  012972  51B5               	movf	?___awdiv& (0+255),w,b
  4979  012974  0100               	movlb	0	; () banked
  4980  012976  6FC4               	movwf	Console_Tab@c& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;Console.c: 264: UINT8 t = c/4;
  4984  012978  C0C4  F0B5         	movff	Console_Tab@c,___awdiv@dividend
  4985  01297C  0100               	movlb	0	; () banked
  4986  01297E  6BB6               	clrf	(___awdiv@dividend+1)& (0+255),b
  4987  012980  0E00               	movlw	0
  4988  012982  0100               	movlb	0	; () banked
  4989  012984  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4990  012986  0E04               	movlw	4
  4991  012988  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4992  01298A  EC07  F095         	call	___awdiv	;wreg free
  4993  01298E  0100               	movlb	0	; () banked
  4994  012990  51B5               	movf	?___awdiv& (0+255),w,b
  4995  012992  0100               	movlb	0	; () banked
  4996  012994  6FC2               	movwf	Console_Tab@t& (0+255),b
  4997                           
  4998                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4999  012996  0E00               	movlw	0
  5000  012998  0100               	movlb	0	; () banked
  5001  01299A  6FC3               	movwf	Console_Tab@i& (0+255),b
  5002  01299C  D006               	goto	l1009
  5003  01299E                     
  5004                           ; BSR set to: 0
  5005                           ;Console.c: 266: {
  5006                           ;Console.c: 267: Console_ClearCursor();
  5007                           
  5008                           ; BSR set to: 0
  5009  01299E  EC6B  F0A1         	call	_Console_ClearCursor	;wreg free
  5010                           
  5011                           ;Console.c: 268: Console_IncrementCursor();
  5012  0129A2  EC39  F09E         	call	_Console_IncrementCursor	;wreg free
  5013  0129A6  0100               	movlb	0	; () banked
  5014  0129A8  2BC3               	incf	Console_Tab@i& (0+255),f,b
  5015  0129AA                     l1009:
  5016                           
  5017                           ; BSR set to: 0
  5018                           
  5019                           ; BSR set to: 0
  5020  0129AA  0100               	movlb	0	; () banked
  5021  0129AC  51C2               	movf	Console_Tab@t& (0+255),w,b
  5022  0129AE  0D04               	mullw	4
  5023  0129B0  1EF3               	comf	prodl,f,c
  5024  0129B2  1EF4               	comf	prodh,f,c
  5025  0129B4  4AF3               	infsnz	prodl,f,c
  5026  0129B6  2AF4               	incf	prodh,f,c
  5027  0129B8  0100               	movlb	0	; () banked
  5028  0129BA  51C4               	movf	Console_Tab@c& (0+255),w,b
  5029  0129BC  0100               	movlb	0	; () banked
  5030  0129BE  6FBD               	movwf	??_Console_Tab& (0+255),b
  5031  0129C0  6BBE               	clrf	(??_Console_Tab+1)& (0+255),b
  5032  0129C2  50F3               	movf	prodl,w,c
  5033  0129C4  0100               	movlb	0	; () banked
  5034  0129C6  27BD               	addwf	??_Console_Tab& (0+255),f,b
  5035  0129C8  50F4               	movf	prodh,w,c
  5036  0129CA  0100               	movlb	0	; () banked
  5037  0129CC  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5038  0129CE  0100               	movlb	0	; () banked
  5039  0129D0  1FBD               	comf	??_Console_Tab& (0+255),f,b
  5040  0129D2  1FBE               	comf	(??_Console_Tab+1)& (0+255),f,b
  5041  0129D4  4BBD               	infsnz	??_Console_Tab& (0+255),f,b
  5042  0129D6  2BBE               	incf	(??_Console_Tab+1)& (0+255),f,b
  5043  0129D8  0E04               	movlw	4
  5044  0129DA  0100               	movlb	0	; () banked
  5045  0129DC  27BD               	addwf	??_Console_Tab& (0+255),f,b
  5046  0129DE  0E00               	movlw	0
  5047  0129E0  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5048  0129E2  0100               	movlb	0	; () banked
  5049  0129E4  51C3               	movf	Console_Tab@i& (0+255),w,b
  5050  0129E6  0100               	movlb	0	; () banked
  5051  0129E8  6FBF               	movwf	(??_Console_Tab+2)& (0+255),b
  5052  0129EA  6BC0               	clrf	(??_Console_Tab+3)& (0+255),b
  5053  0129EC  0100               	movlb	0	; () banked
  5054  0129EE  51BD               	movf	??_Console_Tab& (0+255),w,b
  5055  0129F0  0100               	movlb	0	; () banked
  5056  0129F2  5DBF               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5057  0129F4  0100               	movlb	0	; () banked
  5058  0129F6  51C0               	movf	(??_Console_Tab+3)& (0+255),w,b
  5059  0129F8  0A80               	xorlw	128
  5060  0129FA  0100               	movlb	0	; () banked
  5061  0129FC  6FC1               	movwf	(??_Console_Tab+4)& (0+255),b
  5062  0129FE  0100               	movlb	0	; () banked
  5063  012A00  51BE               	movf	(??_Console_Tab+1)& (0+255),w,b
  5064  012A02  0A80               	xorlw	128
  5065  012A04  0100               	movlb	0	; () banked
  5066  012A06  59C1               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5067  012A08  B0D8               	btfsc	status,0,c
  5068  012A0A  0012               	return	
  5069  012A0C  D7C8               	goto	l1010
  5070  012A0E                     __end_of_Console_Tab:
  5071                           	opt stack 0
  5072                           tosu	equ	0xFFF
  5073                           tosh	equ	0xFFE
  5074                           tosl	equ	0xFFD
  5075                           pclath	equ	0xFFA
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           prodh	equ	0xFF4
  5081                           prodl	equ	0xFF3
  5082                           postinc0	equ	0xFEE
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1h	equ	0xFE2
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function ___awdiv *****************
  5095 ;; Defined at:
  5096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  dividend        2    0[BANK0 ] int 
  5099 ;;  divisor         2    2[BANK0 ] int 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  quotient        2    6[BANK0 ] int 
  5102 ;;  sign            1    5[BANK0 ] unsigned char 
  5103 ;;  counter         1    4[BANK0 ] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  2    0[BANK0 ] int 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;Total ram usage:        8 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    7
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_Console_Tab
  5124 ;;		_main
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text12
  5129  012A0E                     __ptext12:
  5130                           	opt stack 0
  5131  012A0E                     ___awdiv:
  5132                           	opt stack 19
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;incstack = 0
  5136  012A0E  0E00               	movlw	0
  5137  012A10  0100               	movlb	0	; () banked
  5138  012A12  6FBA               	movwf	___awdiv@sign& (0+255),b
  5139                           
  5140                           ; BSR set to: 0
  5141  012A14  0100               	movlb	0	; () banked
  5142  012A16  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5143  012A18  D008               	goto	l2438
  5144                           
  5145                           ; BSR set to: 0
  5146  012A1A  0100               	movlb	0	; () banked
  5147  012A1C  6DB7               	negf	___awdiv@divisor& (0+255),b
  5148  012A1E  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5149  012A20  B0D8               	btfsc	status,0,c
  5150  012A22  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5151                           
  5152                           ; BSR set to: 0
  5153  012A24  0E01               	movlw	1
  5154  012A26  0100               	movlb	0	; () banked
  5155  012A28  6FBA               	movwf	___awdiv@sign& (0+255),b
  5156  012A2A                     l2438:
  5157                           
  5158                           ; BSR set to: 0
  5159                           
  5160                           ; BSR set to: 0
  5161  012A2A  0100               	movlb	0	; () banked
  5162  012A2C  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5163  012A2E  D008               	goto	l2439
  5164                           
  5165                           ; BSR set to: 0
  5166  012A30  0100               	movlb	0	; () banked
  5167  012A32  6DB5               	negf	___awdiv@dividend& (0+255),b
  5168  012A34  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5169  012A36  B0D8               	btfsc	status,0,c
  5170  012A38  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5171                           
  5172                           ; BSR set to: 0
  5173  012A3A  0E01               	movlw	1
  5174  012A3C  0100               	movlb	0	; () banked
  5175  012A3E  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  5176  012A40                     l2439:
  5177                           
  5178                           ; BSR set to: 0
  5179                           
  5180                           ; BSR set to: 0
  5181  012A40  0E00               	movlw	0
  5182  012A42  0100               	movlb	0	; () banked
  5183  012A44  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  5184  012A46  0E00               	movlw	0
  5185  012A48  6FBB               	movwf	___awdiv@quotient& (0+255),b
  5186                           
  5187                           ; BSR set to: 0
  5188  012A4A  0100               	movlb	0	; () banked
  5189  012A4C  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5190  012A4E  0100               	movlb	0	; () banked
  5191  012A50  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5192  012A52  B4D8               	btfsc	status,2,c
  5193  012A54  D02C               	goto	l2446
  5194                           
  5195                           ; BSR set to: 0
  5196  012A56  0E01               	movlw	1
  5197  012A58  0100               	movlb	0	; () banked
  5198  012A5A  6FB9               	movwf	___awdiv@counter& (0+255),b
  5199  012A5C  D006               	goto	l2441
  5200  012A5E                     
  5201                           ; BSR set to: 0
  5202                           
  5203                           ; BSR set to: 0
  5204  012A5E  0100               	movlb	0	; () banked
  5205  012A60  90D8               	bcf	status,0,c
  5206  012A62  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  5207  012A64  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5208  012A66  0100               	movlb	0	; () banked
  5209  012A68  2BB9               	incf	___awdiv@counter& (0+255),f,b
  5210  012A6A                     l2441:
  5211                           
  5212                           ; BSR set to: 0
  5213                           
  5214                           ; BSR set to: 0
  5215  012A6A  0100               	movlb	0	; () banked
  5216  012A6C  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5217  012A6E  D7F7               	goto	l2442
  5218  012A70                     u6940:
  5219                           
  5220                           ; BSR set to: 0
  5221                           
  5222                           ; BSR set to: 0
  5223                           
  5224                           ; BSR set to: 0
  5225  012A70  0100               	movlb	0	; () banked
  5226  012A72  90D8               	bcf	status,0,c
  5227  012A74  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  5228  012A76  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5229                           
  5230                           ; BSR set to: 0
  5231  012A78  0100               	movlb	0	; () banked
  5232  012A7A  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5233  012A7C  0100               	movlb	0	; () banked
  5234  012A7E  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  5235  012A80  0100               	movlb	0	; () banked
  5236  012A82  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5237  012A84  0100               	movlb	0	; () banked
  5238  012A86  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5239  012A88  A0D8               	btfss	status,0,c
  5240  012A8A  D00A               	goto	l2445
  5241                           
  5242                           ; BSR set to: 0
  5243  012A8C  0100               	movlb	0	; () banked
  5244  012A8E  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5245  012A90  0100               	movlb	0	; () banked
  5246  012A92  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  5247  012A94  0100               	movlb	0	; () banked
  5248  012A96  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5249  012A98  0100               	movlb	0	; () banked
  5250  012A9A  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253  012A9C  0100               	movlb	0	; () banked
  5254  012A9E  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  5255  012AA0                     l2445:
  5256                           
  5257                           ; BSR set to: 0
  5258                           
  5259                           ; BSR set to: 0
  5260  012AA0  0100               	movlb	0	; () banked
  5261  012AA2  90D8               	bcf	status,0,c
  5262  012AA4  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5263  012AA6  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  5264                           
  5265                           ; BSR set to: 0
  5266  012AA8  0100               	movlb	0	; () banked
  5267  012AAA  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  5268  012AAC  D7E1               	goto	u6940
  5269  012AAE                     l2446:
  5270                           
  5271                           ; BSR set to: 0
  5272                           
  5273                           ; BSR set to: 0
  5274                           
  5275                           ; BSR set to: 0
  5276  012AAE  0100               	movlb	0	; () banked
  5277  012AB0  51BA               	movf	___awdiv@sign& (0+255),w,b
  5278  012AB2  0100               	movlb	0	; () banked
  5279  012AB4  B4D8               	btfsc	status,2,c
  5280  012AB6  D005               	goto	l2447
  5281                           
  5282                           ; BSR set to: 0
  5283  012AB8  0100               	movlb	0	; () banked
  5284  012ABA  6DBB               	negf	___awdiv@quotient& (0+255),b
  5285  012ABC  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5286  012ABE  B0D8               	btfsc	status,0,c
  5287  012AC0  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5288  012AC2                     l2447:
  5289                           
  5290                           ; BSR set to: 0
  5291                           
  5292                           ; BSR set to: 0
  5293  012AC2  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  5294  012AC6  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  5295  012ACA  0012               	return	
  5296  012ACC                     __end_of___awdiv:
  5297                           	opt stack 0
  5298                           tosu	equ	0xFFF
  5299                           tosh	equ	0xFFE
  5300                           tosl	equ	0xFFD
  5301                           pclath	equ	0xFFA
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1h	equ	0xFE2
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           postdec2	equ	0xFDD
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _Console_IncrementCursor *****************
  5321 ;; Defined at:
  5322 ;;		line 243 in file "Library/Console.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      unsigned char 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        2 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    8
  5343 ;; This function calls:
  5344 ;;		_Console_FormFeed
  5345 ;;		_Console_NewLine
  5346 ;; This function is called by:
  5347 ;;		_Console_Tab
  5348 ;;		_Console_PrintChar
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text13
  5353  013C72                     __ptext13:
  5354                           	opt stack 0
  5355  013C72                     _Console_IncrementCursor:
  5356                           	opt stack 18
  5357                           
  5358                           ;Console.c: 246: lBufferX += 1;
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;incstack = 0
  5362  013C72  0100               	movlb	0	; () banked
  5363  013C74  2B8D               	incf	_lBufferX& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;Console.c: 248: gCursor.x += 6;
  5367  013C76  0E06               	movlw	6
  5368  013C78  2647               	addwf	_gCursor,f,c
  5369  013C7A  0E00               	movlw	0
  5370  013C7C  2248               	addwfc	_gCursor+1,f,c
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5374  013C7E  0E06               	movlw	6
  5375  013C80  2447               	addwf	_gCursor,w,c
  5376  013C82  0100               	movlb	0	; () banked
  5377  013C84  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5378  013C86  0E00               	movlw	0
  5379  013C88  2048               	addwfc	_gCursor+1,w,c
  5380  013C8A  0100               	movlb	0	; () banked
  5381  013C8C  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5382  013C8E  0100               	movlb	0	; () banked
  5383  013C90  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5384  013C92  D009               	goto	l1004
  5385  013C94  0100               	movlb	0	; () banked
  5386  013C96  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5387  013C98  E104               	bnz	u6850
  5388  013C9A  0E80               	movlw	128
  5389  013C9C  0100               	movlb	0	; () banked
  5390  013C9E  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5391  013CA0  B0D8               	btfsc	status,0,c
  5392  013CA2                     u6850:
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;Console.c: 250: Console_NewLine();
  5396  013CA2  EC20  F099         	call	_Console_NewLine	;wreg free
  5397  013CA6                     l1004:
  5398                           
  5399                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5400  013CA6  0E08               	movlw	8
  5401  013CA8  2449               	addwf	_gCursor+2,w,c
  5402  013CAA  0100               	movlb	0	; () banked
  5403  013CAC  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5404  013CAE  0E00               	movlw	0
  5405  013CB0  204A               	addwfc	_gCursor+3,w,c
  5406  013CB2  0100               	movlb	0	; () banked
  5407  013CB4  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5408  013CB6  0100               	movlb	0	; () banked
  5409  013CB8  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5410  013CBA  D00C               	goto	l1005
  5411  013CBC  0100               	movlb	0	; () banked
  5412  013CBE  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5413  013CC0  E105               	bnz	u6860
  5414  013CC2  0E80               	movlw	128
  5415  013CC4  0100               	movlb	0	; () banked
  5416  013CC6  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5417  013CC8  A0D8               	btfss	status,0,c
  5418  013CCA  D004               	goto	l1005
  5419  013CCC                     u6860:
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;Console.c: 252: {
  5423                           ;Console.c: 253: Console_FormFeed();
  5424  013CCC  EC9A  F09A         	call	_Console_FormFeed	;wreg free
  5425                           
  5426                           ;Console.c: 254: return 1;
  5427  013CD0  0E01               	movlw	1
  5428  013CD2  0012               	return	
  5429  013CD4                     l1005:
  5430                           
  5431                           ;Console.c: 255: }
  5432                           ;Console.c: 257: return 0;
  5433  013CD4  0E00               	movlw	0
  5434  013CD6  0012               	return	
  5435  013CD8                     __end_of_Console_IncrementCursor:
  5436                           	opt stack 0
  5437                           tosu	equ	0xFFF
  5438                           tosh	equ	0xFFE
  5439                           tosl	equ	0xFFD
  5440                           pclath	equ	0xFFA
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           postdec1	equ	0xFE5
  5450                           fsr1h	equ	0xFE2
  5451                           fsr1l	equ	0xFE1
  5452                           indf2	equ	0xFDF
  5453                           postinc2	equ	0xFDE
  5454                           postdec2	equ	0xFDD
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _Console_NewLine *****************
  5460 ;; Defined at:
  5461 ;;		line 175 in file "Library/Console.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;Total ram usage:        2 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    7
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_Console_IncrementCursor
  5486 ;;		_Console_PrintChar
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text14
  5491  013240                     __ptext14:
  5492                           	opt stack 0
  5493  013240                     _Console_NewLine:
  5494                           	opt stack 18
  5495                           
  5496                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5497                           
  5498                           ;incstack = 0
  5499  013240  D03E               	goto	l983
  5500  013242                     
  5501                           ;Console.c: 179: {
  5502                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5503  013242  0100               	movlb	0	; () banked
  5504  013244  518C               	movf	_lBufferY& (0+255),w,b
  5505  013246  0D14               	mullw	20
  5506  013248  0EAA               	movlw	low _lBuffer
  5507  01324A  0100               	movlb	0	; () banked
  5508  01324C  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5509  01324E  0E04               	movlw	high _lBuffer
  5510  013250  0100               	movlb	0	; () banked
  5511  013252  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5512  013254  50F3               	movf	prodl,w,c
  5513  013256  0100               	movlb	0	; () banked
  5514  013258  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5515  01325A  50F4               	movf	prodh,w,c
  5516  01325C  0100               	movlb	0	; () banked
  5517  01325E  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5518  013260  0100               	movlb	0	; () banked
  5519  013262  518D               	movf	_lBufferX& (0+255),w,b
  5520  013264  0D01               	mullw	1
  5521  013266  50F3               	movf	prodl,w,c
  5522  013268  0100               	movlb	0	; () banked
  5523  01326A  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5524  01326C  6ED9               	movwf	fsr2l,c
  5525  01326E  50F4               	movf	prodh,w,c
  5526  013270  0100               	movlb	0	; () banked
  5527  013272  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5528  013274  6EDA               	movwf	fsr2h,c
  5529  013276  50DF               	movf	indf2,w,c
  5530  013278  B4D8               	btfsc	status,2,c
  5531  01327A  D01F               	goto	l985
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5535  01327C  0E01               	movlw	1
  5536  01327E  0100               	movlb	0	; () banked
  5537  013280  6FFF               	movwf	_change& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540  013282  0100               	movlb	0	; () banked
  5541  013284  518C               	movf	_lBufferY& (0+255),w,b
  5542  013286  0D14               	mullw	20
  5543  013288  0EAA               	movlw	low _lBuffer
  5544  01328A  0100               	movlb	0	; () banked
  5545  01328C  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5546  01328E  0E04               	movlw	high _lBuffer
  5547  013290  0100               	movlb	0	; () banked
  5548  013292  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5549  013294  50F3               	movf	prodl,w,c
  5550  013296  0100               	movlb	0	; () banked
  5551  013298  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5552  01329A  50F4               	movf	prodh,w,c
  5553  01329C  0100               	movlb	0	; () banked
  5554  01329E  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5555  0132A0  0100               	movlb	0	; () banked
  5556  0132A2  518D               	movf	_lBufferX& (0+255),w,b
  5557  0132A4  0D01               	mullw	1
  5558  0132A6  50F3               	movf	prodl,w,c
  5559  0132A8  0100               	movlb	0	; () banked
  5560  0132AA  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5561  0132AC  6ED9               	movwf	fsr2l,c
  5562  0132AE  50F4               	movf	prodh,w,c
  5563  0132B0  0100               	movlb	0	; () banked
  5564  0132B2  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5565  0132B4  6EDA               	movwf	fsr2h,c
  5566  0132B6  0E80               	movlw	128
  5567  0132B8  6EDF               	movwf	indf2,c
  5568  0132BA                     l985:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;Console.c: 182: lBufferX ++;
  5572                           
  5573                           ; BSR set to: 0
  5574  0132BA  0100               	movlb	0	; () banked
  5575  0132BC  2B8D               	incf	_lBufferX& (0+255),f,b
  5576  0132BE                     l983:
  5577                           
  5578                           ; BSR set to: 0
  5579  0132BE  0E13               	movlw	19
  5580  0132C0  0100               	movlb	0	; () banked
  5581  0132C2  658D               	cpfsgt	_lBufferX& (0+255),b
  5582  0132C4  D7BE               	goto	l984
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;Console.c: 183: }
  5586                           ;Console.c: 185: lBufferX = 0;
  5587                           
  5588                           ; BSR set to: 0
  5589  0132C6  0E00               	movlw	0
  5590  0132C8  0100               	movlb	0	; () banked
  5591  0132CA  6F8D               	movwf	_lBufferX& (0+255),b
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;Console.c: 186: lBufferY ++;
  5595  0132CC  0100               	movlb	0	; () banked
  5596  0132CE  2B8C               	incf	_lBufferY& (0+255),f,b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;Console.c: 188: gCursor.y += 8;
  5600  0132D0  0E08               	movlw	8
  5601  0132D2  2649               	addwf	_gCursor+2,f,c
  5602  0132D4  0E00               	movlw	0
  5603  0132D6  224A               	addwfc	_gCursor+3,f,c
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;Console.c: 189: gCursor.x = 6;
  5607  0132D8  0E00               	movlw	0
  5608  0132DA  6E48               	movwf	_gCursor+1,c
  5609  0132DC  0E06               	movlw	6
  5610  0132DE  6E47               	movwf	_gCursor,c
  5611                           
  5612                           ; BSR set to: 0
  5613  0132E0  0012               	return		;funcret
  5614  0132E2                     __end_of_Console_NewLine:
  5615                           	opt stack 0
  5616                           tosu	equ	0xFFF
  5617                           tosh	equ	0xFFE
  5618                           tosl	equ	0xFFD
  5619                           pclath	equ	0xFFA
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           postdec1	equ	0xFE5
  5629                           fsr1h	equ	0xFE2
  5630                           fsr1l	equ	0xFE1
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _Console_FormFeed *****************
  5639 ;; Defined at:
  5640 ;;		line 192 in file "Library/Console.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  y               1    3[BANK0 ] unsigned char 
  5645 ;;  x               1    2[BANK0 ] unsigned char 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;Total ram usage:        4 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    7
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_Console_IncrementCursor
  5666 ;;		_Console_PrintChar
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text15
  5671  013534                     __ptext15:
  5672                           	opt stack 0
  5673  013534                     _Console_FormFeed:
  5674                           	opt stack 18
  5675                           
  5676                           ;Console.c: 195: lBufferX = 0;
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;incstack = 0
  5680  013534  0E00               	movlw	0
  5681  013536  0100               	movlb	0	; () banked
  5682  013538  6F8D               	movwf	_lBufferX& (0+255),b
  5683                           
  5684                           ;Console.c: 196: lBufferY = 0;
  5685  01353A  0E00               	movlw	0
  5686  01353C  0100               	movlb	0	; () banked
  5687  01353E  6F8C               	movwf	_lBufferY& (0+255),b
  5688                           
  5689                           ;Console.c: 197: UINT8 x, y;
  5690                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5691  013540  0E00               	movlw	0
  5692  013542  0100               	movlb	0	; () banked
  5693  013544  6FB8               	movwf	Console_FormFeed@y& (0+255),b
  5694  013546                     l10646:
  5695                           
  5696                           ; BSR set to: 0
  5697  013546  0E0E               	movlw	14
  5698  013548  0100               	movlb	0	; () banked
  5699  01354A  65B8               	cpfsgt	Console_FormFeed@y& (0+255),b
  5700  01354C  D001               	goto	l990
  5701  01354E  D02D               	goto	u6700
  5702  013550                     l990:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5706                           
  5707                           ; BSR set to: 0
  5708  013550  0E00               	movlw	0
  5709  013552  0100               	movlb	0	; () banked
  5710  013554  6FB7               	movwf	Console_FormFeed@x& (0+255),b
  5711  013556                     l10652:
  5712                           
  5713                           ; BSR set to: 0
  5714  013556  0E13               	movlw	19
  5715  013558  0100               	movlb	0	; () banked
  5716  01355A  65B7               	cpfsgt	Console_FormFeed@x& (0+255),b
  5717  01355C  D001               	goto	l992
  5718  01355E  D022               	goto	u6690
  5719  013560                     l992:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5723                           
  5724                           ; BSR set to: 0
  5725  013560  0E01               	movlw	1
  5726  013562  0100               	movlb	0	; () banked
  5727  013564  6FFF               	movwf	_change& (0+255),b
  5728                           
  5729                           ; BSR set to: 0
  5730  013566  0100               	movlb	0	; () banked
  5731  013568  51B8               	movf	Console_FormFeed@y& (0+255),w,b
  5732  01356A  0D14               	mullw	20
  5733  01356C  0EAA               	movlw	low _lBuffer
  5734  01356E  0100               	movlb	0	; () banked
  5735  013570  6FB5               	movwf	??_Console_FormFeed& (0+255),b
  5736  013572  0E04               	movlw	high _lBuffer
  5737  013574  0100               	movlb	0	; () banked
  5738  013576  6FB6               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5739  013578  50F3               	movf	prodl,w,c
  5740  01357A  0100               	movlb	0	; () banked
  5741  01357C  27B5               	addwf	??_Console_FormFeed& (0+255),f,b
  5742  01357E  50F4               	movf	prodh,w,c
  5743  013580  0100               	movlb	0	; () banked
  5744  013582  23B6               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5745  013584  0100               	movlb	0	; () banked
  5746  013586  51B7               	movf	Console_FormFeed@x& (0+255),w,b
  5747  013588  0D01               	mullw	1
  5748  01358A  50F3               	movf	prodl,w,c
  5749  01358C  0100               	movlb	0	; () banked
  5750  01358E  25B5               	addwf	??_Console_FormFeed& (0+255),w,b
  5751  013590  6ED9               	movwf	fsr2l,c
  5752  013592  50F4               	movf	prodh,w,c
  5753  013594  0100               	movlb	0	; () banked
  5754  013596  21B6               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5755  013598  6EDA               	movwf	fsr2h,c
  5756  01359A  0E80               	movlw	128
  5757  01359C  6EDF               	movwf	indf2,c
  5758                           
  5759                           ; BSR set to: 0
  5760  01359E  0100               	movlb	0	; () banked
  5761  0135A0  2BB7               	incf	Console_FormFeed@x& (0+255),f,b
  5762  0135A2  D7D9               	goto	l10652
  5763  0135A4                     u6690:
  5764                           
  5765                           ; BSR set to: 0
  5766                           
  5767                           ; BSR set to: 0
  5768  0135A4  0100               	movlb	0	; () banked
  5769  0135A6  2BB8               	incf	Console_FormFeed@y& (0+255),f,b
  5770  0135A8  D7CE               	goto	l10646
  5771  0135AA                     u6700:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;Console.c: 204: clearall = 1;
  5775                           
  5776                           ; BSR set to: 0
  5777  0135AA  0E01               	movlw	1
  5778  0135AC  0100               	movlb	0	; () banked
  5779  0135AE  6F8E               	movwf	_clearall& (0+255),b
  5780                           
  5781                           ;Console.c: 205: gCursor.x = 6;
  5782  0135B0  0E00               	movlw	0
  5783  0135B2  6E48               	movwf	_gCursor+1,c
  5784  0135B4  0E06               	movlw	6
  5785  0135B6  6E47               	movwf	_gCursor,c
  5786                           
  5787                           ;Console.c: 206: gCursor.y = 6;
  5788  0135B8  0E00               	movlw	0
  5789  0135BA  6E4A               	movwf	_gCursor+3,c
  5790  0135BC  0E06               	movlw	6
  5791  0135BE  6E49               	movwf	_gCursor+2,c
  5792                           
  5793                           ; BSR set to: 0
  5794  0135C0  0012               	return		;funcret
  5795  0135C2                     __end_of_Console_FormFeed:
  5796                           	opt stack 0
  5797                           tosu	equ	0xFFF
  5798                           tosh	equ	0xFFE
  5799                           tosl	equ	0xFFD
  5800                           pclath	equ	0xFFA
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           postinc0	equ	0xFEE
  5808                           wreg	equ	0xFE8
  5809                           postdec1	equ	0xFE5
  5810                           fsr1h	equ	0xFE2
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _Console_ResetCursor *****************
  5820 ;; Defined at:
  5821 ;;		line 297 in file "Library/Console.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    7
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_Console_PrintChar
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text16
  5850  0146EA                     __ptext16:
  5851                           	opt stack 0
  5852  0146EA                     _Console_ResetCursor:
  5853                           	opt stack 20
  5854                           
  5855                           ;Console.c: 299: gCursor.x = 6;
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;incstack = 0
  5859  0146EA  0E00               	movlw	0
  5860  0146EC  6E48               	movwf	_gCursor+1,c
  5861  0146EE  0E06               	movlw	6
  5862  0146F0  6E47               	movwf	_gCursor,c
  5863                           
  5864                           ;Console.c: 300: gCursor.y = 6;
  5865  0146F2  0E00               	movlw	0
  5866  0146F4  6E4A               	movwf	_gCursor+3,c
  5867  0146F6  0E06               	movlw	6
  5868  0146F8  6E49               	movwf	_gCursor+2,c
  5869                           
  5870                           ;Console.c: 303: lBufferX = 0;
  5871  0146FA  0E00               	movlw	0
  5872  0146FC  0100               	movlb	0	; () banked
  5873  0146FE  6F8D               	movwf	_lBufferX& (0+255),b
  5874                           
  5875                           ;Console.c: 304: lBufferY = 0;
  5876  014700  0E00               	movlw	0
  5877  014702  0100               	movlb	0	; () banked
  5878  014704  6F8C               	movwf	_lBufferY& (0+255),b
  5879                           
  5880                           ; BSR set to: 0
  5881  014706  0012               	return		;funcret
  5882  014708                     __end_of_Console_ResetCursor:
  5883                           	opt stack 0
  5884                           tosu	equ	0xFFF
  5885                           tosh	equ	0xFFE
  5886                           tosl	equ	0xFFD
  5887                           pclath	equ	0xFFA
  5888                           tblptru	equ	0xFF8
  5889                           tblptrh	equ	0xFF7
  5890                           tblptrl	equ	0xFF6
  5891                           tablat	equ	0xFF5
  5892                           prodh	equ	0xFF4
  5893                           prodl	equ	0xFF3
  5894                           postinc0	equ	0xFEE
  5895                           wreg	equ	0xFE8
  5896                           postdec1	equ	0xFE5
  5897                           fsr1h	equ	0xFE2
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _Console_Backspace *****************
  5907 ;; Defined at:
  5908 ;;		line 209 in file "Library/Console.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;Total ram usage:        0 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    8
  5929 ;; This function calls:
  5930 ;;		_Console_ClearCursor
  5931 ;; This function is called by:
  5932 ;;		_Console_PrintChar
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text17
  5937  013E00                     __ptext17:
  5938                           	opt stack 0
  5939  013E00                     _Console_Backspace:
  5940                           	opt stack 19
  5941                           
  5942                           ;Console.c: 211: if (lBufferX > 0)
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;incstack = 0
  5946  013E00  0100               	movlb	0	; () banked
  5947  013E02  518D               	movf	_lBufferX& (0+255),w,b
  5948  013E04  B4D8               	btfsc	status,2,c
  5949  013E06  D007               	goto	l997
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;Console.c: 212: {
  5953                           ;Console.c: 213: gCursor.x -= 6;
  5954  013E08  0EFA               	movlw	250
  5955  013E0A  2647               	addwf	_gCursor,f,c
  5956  013E0C  0EFF               	movlw	255
  5957  013E0E  2248               	addwfc	_gCursor+1,f,c
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;Console.c: 216: lBufferX --;
  5961  013E10  0100               	movlb	0	; () banked
  5962  013E12  078D               	decf	_lBufferX& (0+255),f,b
  5963                           
  5964                           ;Console.c: 218: }
  5965  013E14  D020               	goto	l1000
  5966  013E16                     l997:
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;Console.c: 219: else if (lBufferY > 0)
  5970                           
  5971                           ; BSR set to: 0
  5972  013E16  0100               	movlb	0	; () banked
  5973  013E18  518C               	movf	_lBufferY& (0+255),w,b
  5974  013E1A  B4D8               	btfsc	status,2,c
  5975  013E1C  D00E               	goto	l999
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;Console.c: 220: {
  5979                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5980  013E1E  0E00               	movlw	0
  5981  013E20  6E48               	movwf	_gCursor+1,c
  5982  013E22  0E72               	movlw	114
  5983  013E24  6E47               	movwf	_gCursor,c
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;Console.c: 222: gCursor.y -= 8;
  5987  013E26  0EF8               	movlw	248
  5988  013E28  2649               	addwf	_gCursor+2,f,c
  5989  013E2A  0EFF               	movlw	255
  5990  013E2C  224A               	addwfc	_gCursor+3,f,c
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5994  013E2E  0E13               	movlw	19
  5995  013E30  0100               	movlb	0	; () banked
  5996  013E32  6F8D               	movwf	_lBufferX& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;Console.c: 226: lBufferY --;
  6000  013E34  0100               	movlb	0	; () banked
  6001  013E36  078C               	decf	_lBufferY& (0+255),f,b
  6002                           
  6003                           ;Console.c: 228: }
  6004  013E38  D00E               	goto	l1000
  6005  013E3A                     l999:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;Console.c: 229: else
  6009                           ;Console.c: 230: {
  6010                           ;Console.c: 231: gCursor.x = 6;
  6011                           
  6012                           ; BSR set to: 0
  6013  013E3A  0E00               	movlw	0
  6014  013E3C  6E48               	movwf	_gCursor+1,c
  6015  013E3E  0E06               	movlw	6
  6016  013E40  6E47               	movwf	_gCursor,c
  6017                           
  6018                           ;Console.c: 232: gCursor.y = 6;
  6019  013E42  0E00               	movlw	0
  6020  013E44  6E4A               	movwf	_gCursor+3,c
  6021  013E46  0E06               	movlw	6
  6022  013E48  6E49               	movwf	_gCursor+2,c
  6023                           
  6024                           ;Console.c: 235: lBufferX = 0;
  6025  013E4A  0E00               	movlw	0
  6026  013E4C  0100               	movlb	0	; () banked
  6027  013E4E  6F8D               	movwf	_lBufferX& (0+255),b
  6028                           
  6029                           ;Console.c: 236: lBufferY = 0;
  6030  013E50  0E00               	movlw	0
  6031  013E52  0100               	movlb	0	; () banked
  6032  013E54  6F8C               	movwf	_lBufferY& (0+255),b
  6033  013E56                     l1000:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;Console.c: 238: }
  6037                           ;Console.c: 240: Console_ClearCursor();
  6038                           
  6039                           ; BSR set to: 0
  6040                           
  6041                           ; BSR set to: 0
  6042  013E56  EC6B  F0A1         	call	_Console_ClearCursor	;wreg free
  6043  013E5A  0012               	return		;funcret
  6044  013E5C                     __end_of_Console_Backspace:
  6045                           	opt stack 0
  6046                           tosu	equ	0xFFF
  6047                           tosh	equ	0xFFE
  6048                           tosl	equ	0xFFD
  6049                           pclath	equ	0xFFA
  6050                           tblptru	equ	0xFF8
  6051                           tblptrh	equ	0xFF7
  6052                           tblptrl	equ	0xFF6
  6053                           tablat	equ	0xFF5
  6054                           prodh	equ	0xFF4
  6055                           prodl	equ	0xFF3
  6056                           postinc0	equ	0xFEE
  6057                           wreg	equ	0xFE8
  6058                           postdec1	equ	0xFE5
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           fsr2h	equ	0xFDA
  6065                           fsr2l	equ	0xFD9
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function _Console_ClearCursor *****************
  6069 ;; Defined at:
  6070 ;;		line 308 in file "Library/Console.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;		None
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      void 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;Total ram usage:        2 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    7
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_Console_Backspace
  6095 ;;		_Console_Tab
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text18
  6100  0142D6                     __ptext18:
  6101                           	opt stack 0
  6102  0142D6                     _Console_ClearCursor:
  6103                           	opt stack 19
  6104                           
  6105                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6106                           
  6107                           ;incstack = 0
  6108  0142D6  0E01               	movlw	1
  6109  0142D8  0100               	movlb	0	; () banked
  6110  0142DA  6FFF               	movwf	_change& (0+255),b
  6111                           
  6112                           ; BSR set to: 0
  6113  0142DC  0100               	movlb	0	; () banked
  6114  0142DE  518C               	movf	_lBufferY& (0+255),w,b
  6115  0142E0  0D14               	mullw	20
  6116  0142E2  0EAA               	movlw	low _lBuffer
  6117  0142E4  0100               	movlb	0	; () banked
  6118  0142E6  6FB5               	movwf	??_Console_ClearCursor& (0+255),b
  6119  0142E8  0E04               	movlw	high _lBuffer
  6120  0142EA  0100               	movlb	0	; () banked
  6121  0142EC  6FB6               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6122  0142EE  50F3               	movf	prodl,w,c
  6123  0142F0  0100               	movlb	0	; () banked
  6124  0142F2  27B5               	addwf	??_Console_ClearCursor& (0+255),f,b
  6125  0142F4  50F4               	movf	prodh,w,c
  6126  0142F6  0100               	movlb	0	; () banked
  6127  0142F8  23B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6128  0142FA  0100               	movlb	0	; () banked
  6129  0142FC  518D               	movf	_lBufferX& (0+255),w,b
  6130  0142FE  0D01               	mullw	1
  6131  014300  50F3               	movf	prodl,w,c
  6132  014302  0100               	movlb	0	; () banked
  6133  014304  25B5               	addwf	??_Console_ClearCursor& (0+255),w,b
  6134  014306  6ED9               	movwf	fsr2l,c
  6135  014308  50F4               	movf	prodh,w,c
  6136  01430A  0100               	movlb	0	; () banked
  6137  01430C  21B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6138  01430E  6EDA               	movwf	fsr2h,c
  6139  014310  0E80               	movlw	128
  6140  014312  6EDF               	movwf	indf2,c
  6141                           
  6142                           ; BSR set to: 0
  6143  014314  0012               	return		;funcret
  6144  014316                     __end_of_Console_ClearCursor:
  6145                           	opt stack 0
  6146                           tosu	equ	0xFFF
  6147                           tosh	equ	0xFFE
  6148                           tosl	equ	0xFFD
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _irobot_stop_motion *****************
  6169 ;; Defined at:
  6170 ;;		line 396 in file "main.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  isScript        1    wreg     unsigned char 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  isScript        1   25[BANK0 ] unsigned char 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;Total ram usage:        1 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    9
  6191 ;; This function calls:
  6192 ;;		_irobot_move
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;;		_irobot_move_to_simple
  6196 ;;		_irobot_rotate_to
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text19
  6201  01417E                     __ptext19:
  6202                           	opt stack 0
  6203  01417E                     _irobot_stop_motion:
  6204                           	opt stack 21
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;incstack = 0
  6208                           ;irobot_stop_motion@isScript stored from wreg
  6209  01417E  0100               	movlb	0	; () banked
  6210  014180  6FCE               	movwf	irobot_stop_motion@isScript& (0+255),b
  6211                           
  6212                           ;main.c: 397: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6213  014182  0100               	movlb	0	; () banked
  6214  014184  51CE               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6215  014186  0100               	movlb	0	; () banked
  6216  014188  B4D8               	btfsc	status,2,c
  6217  01418A  D00E               	goto	l2189
  6218                           
  6219                           ; BSR set to: 0
  6220  01418C  0E00               	movlw	0
  6221  01418E  0100               	movlb	0	; () banked
  6222  014190  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6223  014192  0E00               	movlw	0
  6224  014194  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6225  014196  0E00               	movlw	0
  6226  014198  0100               	movlb	0	; () banked
  6227  01419A  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6228  01419C  0E00               	movlw	0
  6229  01419E  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6230  0141A0  0E01               	movlw	1
  6231  0141A2  EC7C  F096         	call	_irobot_move
  6232  0141A6  0012               	return	
  6233  0141A8                     l2189:
  6234  0141A8  0E00               	movlw	0
  6235  0141AA  0100               	movlb	0	; () banked
  6236  0141AC  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6237  0141AE  0E00               	movlw	0
  6238  0141B0  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6239  0141B2  0E00               	movlw	0
  6240  0141B4  0100               	movlb	0	; () banked
  6241  0141B6  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6242  0141B8  0E00               	movlw	0
  6243  0141BA  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6244  0141BC  0E00               	movlw	0
  6245  0141BE  EC7C  F096         	call	_irobot_move
  6246  0141C2  0012               	return	
  6247  0141C4                     __end_of_irobot_stop_motion:
  6248                           	opt stack 0
  6249                           tosu	equ	0xFFF
  6250                           tosh	equ	0xFFE
  6251                           tosl	equ	0xFFD
  6252                           pclath	equ	0xFFA
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           postinc0	equ	0xFEE
  6260                           wreg	equ	0xFE8
  6261                           postdec1	equ	0xFE5
  6262                           fsr1h	equ	0xFE2
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _irobot_song_play *****************
  6272 ;; Defined at:
  6273 ;;		line 382 in file "main.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  songNumber      1    wreg     unsigned char 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		wreg, status,2, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;Total ram usage:        1 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    8
  6294 ;; This function calls:
  6295 ;;		_eusart_putch
  6296 ;; This function is called by:
  6297 ;;		_main
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text20
  6302  014906                     __ptext20:
  6303                           	opt stack 0
  6304  014906                     _irobot_song_play:
  6305                           	opt stack 22
  6306                           
  6307                           ;incstack = 0
  6308                           ;irobot_song_play@songNumber stored from wreg
  6309  014906  0100               	movlb	0	; () banked
  6310  014908  6FB6               	movwf	irobot_song_play@songNumber& (0+255),b
  6311                           
  6312                           ;main.c: 383: eusart_putch(iR_SONG_PLAY);
  6313  01490A  0E8D               	movlw	141
  6314  01490C  ECAD  F0A4         	call	_eusart_putch
  6315                           
  6316                           ;main.c: 384: eusart_putch(songNumber);
  6317  014910  0100               	movlb	0	; () banked
  6318  014912  51B6               	movf	irobot_song_play@songNumber& (0+255),w,b
  6319  014914  ECAD  F0A4         	call	_eusart_putch
  6320  014918  0012               	return		;funcret
  6321  01491A                     __end_of_irobot_song_play:
  6322                           	opt stack 0
  6323                           tosu	equ	0xFFF
  6324                           tosh	equ	0xFFE
  6325                           tosl	equ	0xFFD
  6326                           pclath	equ	0xFFA
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           postinc0	equ	0xFEE
  6334                           wreg	equ	0xFE8
  6335                           postdec1	equ	0xFE5
  6336                           fsr1h	equ	0xFE2
  6337                           fsr1l	equ	0xFE1
  6338                           indf2	equ	0xFDF
  6339                           postinc2	equ	0xFDE
  6340                           postdec2	equ	0xFDD
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _irobot_move_straight *****************
  6346 ;; Defined at:
  6347 ;;		line 411 in file "main.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  straightSpee    2   25[BANK0 ] short 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      void 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;Total ram usage:        2 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    9
  6368 ;; This function calls:
  6369 ;;		_irobot_move
  6370 ;; This function is called by:
  6371 ;;		_main
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text21
  6376  014846                     __ptext21:
  6377                           	opt stack 0
  6378  014846                     _irobot_move_straight:
  6379                           	opt stack 21
  6380                           
  6381                           ;main.c: 412: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  6382                           
  6383                           ;incstack = 0
  6384  014846  C0CE  F0C5         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  6385  01484A  C0CF  F0C6         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  6386  01484E  0E7F               	movlw	127
  6387  014850  0100               	movlb	0	; () banked
  6388  014852  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6389  014854  69C7               	setf	irobot_move@moveTurnRadius& (0+255),b
  6390  014856  0E00               	movlw	0
  6391  014858  EC7C  F096         	call	_irobot_move
  6392  01485C  0012               	return		;funcret
  6393  01485E                     __end_of_irobot_move_straight:
  6394                           	opt stack 0
  6395                           tosu	equ	0xFFF
  6396                           tosh	equ	0xFFE
  6397                           tosl	equ	0xFFD
  6398                           pclath	equ	0xFFA
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           postdec1	equ	0xFE5
  6408                           fsr1h	equ	0xFE2
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _irobot_move *****************
  6418 ;; Defined at:
  6419 ;;		line 328 in file "main.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  isScript        1    wreg     unsigned char 
  6422 ;;  moveSpeed       2   16[BANK0 ] short 
  6423 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  isScript        1   24[BANK0 ] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;Total ram usage:        9 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    8
  6442 ;; This function calls:
  6443 ;;		_eusart_putch
  6444 ;;		_load_iRScriptStack
  6445 ;;		_twos_complement_of
  6446 ;; This function is called by:
  6447 ;;		_irobot_stop_motion
  6448 ;;		_irobot_move_straight
  6449 ;;		_irobot_rotate
  6450 ;;		_irobot_move_to_simple
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text22
  6455  012CF8                     __ptext22:
  6456                           	opt stack 0
  6457  012CF8                     _irobot_move:
  6458                           	opt stack 21
  6459                           
  6460                           ;incstack = 0
  6461                           ;irobot_move@isScript stored from wreg
  6462  012CF8  0100               	movlb	0	; () banked
  6463  012CFA  6FCD               	movwf	irobot_move@isScript& (0+255),b
  6464                           
  6465                           ;main.c: 329: moveSpeed = twos_complement_of(moveSpeed);
  6466  012CFC  C0C5  F0B5         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6467  012D00  C0C6  F0B6         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6468  012D04  EC28  F0A1         	call	_twos_complement_of	;wreg free
  6469  012D08  C0B5  F0C5         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6470  012D0C  C0B6  F0C6         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6471                           
  6472                           ;main.c: 330: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6473  012D10  C0C7  F0B5         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6474  012D14  C0C8  F0B6         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6475  012D18  EC28  F0A1         	call	_twos_complement_of	;wreg free
  6476  012D1C  C0B5  F0C7         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6477  012D20  C0B6  F0C8         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6478                           
  6479                           ;main.c: 332: if (isScript){
  6480  012D24  0100               	movlb	0	; () banked
  6481  012D26  51CD               	movf	irobot_move@isScript& (0+255),w,b
  6482  012D28  0100               	movlb	0	; () banked
  6483  012D2A  B4D8               	btfsc	status,2,c
  6484  012D2C  D029               	goto	l2161
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;main.c: 333: load_iRScriptStack(5, iR_DRIVE,
  6488                           ;main.c: 334: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6489                           ;main.c: 335: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6490  012D2E  0E00               	movlw	0
  6491  012D30  0100               	movlb	0	; () banked
  6492  012D32  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6493  012D34  0E89               	movlw	137
  6494  012D36  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6495  012D38  C0C6  F0C9         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6496  012D3C  0100               	movlb	0	; () banked
  6497  012D3E  6BCA               	clrf	(??_irobot_move+1)& (0+255),b
  6498  012D40  BFC9               	btfsc	??_irobot_move& (0+255),7,b
  6499  012D42  69CA               	setf	(??_irobot_move+1)& (0+255),b
  6500  012D44  0100               	movlb	0	; () banked
  6501  012D46  51C9               	movf	??_irobot_move& (0+255),w,b
  6502  012D48  0100               	movlb	0	; () banked
  6503  012D4A  6FB7               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6504  012D4C  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6505  012D4E  0100               	movlb	0	; () banked
  6506  012D50  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6507  012D52  0100               	movlb	0	; () banked
  6508  012D54  6FB9               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6509  012D56  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6510  012D58  C0C8  F0CB         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6511  012D5C  0100               	movlb	0	; () banked
  6512  012D5E  6BCC               	clrf	(??_irobot_move+3)& (0+255),b
  6513  012D60  BFCB               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6514  012D62  69CC               	setf	(??_irobot_move+3)& (0+255),b
  6515  012D64  0100               	movlb	0	; () banked
  6516  012D66  51CB               	movf	(??_irobot_move+2)& (0+255),w,b
  6517  012D68  0100               	movlb	0	; () banked
  6518  012D6A  6FBB               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6519  012D6C  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6520  012D6E  0100               	movlb	0	; () banked
  6521  012D70  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6522  012D72  0100               	movlb	0	; () banked
  6523  012D74  6FBD               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6524  012D76  6BBE               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6525  012D78  0E05               	movlw	5
  6526  012D7A  EC67  F09D         	call	_load_iRScriptStack
  6527                           
  6528                           ;main.c: 336: }
  6529  012D7E  0012               	return	
  6530  012D80                     l2161:
  6531                           
  6532                           ;main.c: 337: else{
  6533                           ;main.c: 338: eusart_putch(iR_DRIVE);
  6534  012D80  0E89               	movlw	137
  6535  012D82  ECAD  F0A4         	call	_eusart_putch
  6536                           
  6537                           ;main.c: 339: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6538  012D86  0100               	movlb	0	; () banked
  6539  012D88  51C6               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6540  012D8A  ECAD  F0A4         	call	_eusart_putch
  6541                           
  6542                           ;main.c: 340: eusart_putch(((moveSpeed) & 0xFF));
  6543  012D8E  0100               	movlb	0	; () banked
  6544  012D90  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6545  012D92  ECAD  F0A4         	call	_eusart_putch
  6546                           
  6547                           ;main.c: 341: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6548  012D96  0100               	movlb	0	; () banked
  6549  012D98  51C8               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6550  012D9A  ECAD  F0A4         	call	_eusart_putch
  6551                           
  6552                           ;main.c: 342: eusart_putch(((moveTurnRadius) & 0xFF));
  6553  012D9E  0100               	movlb	0	; () banked
  6554  012DA0  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6555  012DA2  ECAD  F0A4         	call	_eusart_putch
  6556  012DA6  0012               	return	
  6557  012DA8                     __end_of_irobot_move:
  6558                           	opt stack 0
  6559                           tosu	equ	0xFFF
  6560                           tosh	equ	0xFFE
  6561                           tosl	equ	0xFFD
  6562                           pclath	equ	0xFFA
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           prodh	equ	0xFF4
  6568                           prodl	equ	0xFF3
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           postdec1	equ	0xFE5
  6572                           fsr1h	equ	0xFE2
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _twos_complement_of *****************
  6582 ;; Defined at:
  6583 ;;		line 275 in file "main.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  complementVa    2    0[BANK0 ] short 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  2    0[BANK0 ] unsigned short 
  6590 ;; Registers used:
  6591 ;;		wreg, status,2, status,0
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6597 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;Total ram usage:        2 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    7
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_irobot_move
  6608 ;;		_irobot_angle_wait
  6609 ;;		_irobot_distance_wait
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text23
  6614  014250                     __ptext23:
  6615                           	opt stack 0
  6616  014250                     _twos_complement_of:
  6617                           	opt stack 21
  6618                           
  6619                           ;main.c: 276: if (complementValue < 0){
  6620                           
  6621                           ;incstack = 0
  6622  014250  0100               	movlb	0	; () banked
  6623  014252  AFB6               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6624  014254  D01A               	goto	l2132
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;main.c: 277: complementValue = ((complementValue) > 0 ? (complementValue) : -(complemen
      +                          tValue));
  6628  014256  0100               	movlb	0	; () banked
  6629  014258  BFB6               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6630  01425A  D007               	goto	u7520
  6631  01425C  0100               	movlb	0	; () banked
  6632  01425E  51B6               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6633  014260  E10A               	bnz	l2134
  6634  014262  0100               	movlb	0	; () banked
  6635  014264  05B5               	decf	twos_complement_of@complementValue& (0+255),w,b
  6636  014266  B0D8               	btfsc	status,0,c
  6637  014268  D006               	goto	l2134
  6638  01426A                     u7520:
  6639                           
  6640                           ; BSR set to: 0
  6641  01426A  0100               	movlb	0	; () banked
  6642  01426C  6DB5               	negf	twos_complement_of@complementValue& (0+255),b
  6643  01426E  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6644  014270  B0D8               	btfsc	status,0,c
  6645  014272  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6646  014274  D004               	goto	l2136
  6647  014276                     l2134:
  6648                           
  6649                           ; BSR set to: 0
  6650  014276  C0B5  F0B5         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6651  01427A  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6652  01427E                     l2136:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;main.c: 278: complementValue = ~complementValue;
  6656                           
  6657                           ; BSR set to: 0
  6658  01427E  0100               	movlb	0	; () banked
  6659  014280  1FB5               	comf	twos_complement_of@complementValue& (0+255),f,b
  6660  014282  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6661                           
  6662                           ;main.c: 279: complementValue += 1;
  6663  014284  0100               	movlb	0	; () banked
  6664  014286  4BB5               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6665  014288  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6666  01428A                     l2132:
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;main.c: 280: }
  6670                           ;main.c: 281: return complementValue;
  6671                           
  6672                           ; BSR set to: 0
  6673  01428A  C0B5  F0B5         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6674  01428E  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6675  014292  0012               	return	
  6676  014294                     __end_of_twos_complement_of:
  6677                           	opt stack 0
  6678                           tosu	equ	0xFFF
  6679                           tosh	equ	0xFFE
  6680                           tosl	equ	0xFFD
  6681                           pclath	equ	0xFFA
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           postinc0	equ	0xFEE
  6689                           wreg	equ	0xFE8
  6690                           postdec1	equ	0xFE5
  6691                           fsr1h	equ	0xFE2
  6692                           fsr1l	equ	0xFE1
  6693                           indf2	equ	0xFDF
  6694                           postinc2	equ	0xFDE
  6695                           postdec2	equ	0xFDD
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8
  6699                           
  6700 ;; *************** function _irobot_led_power_on *****************
  6701 ;; Defined at:
  6702 ;;		line 401 in file "main.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;  powerOnColou    1    wreg     unsigned char 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  1    wreg      void 
  6709 ;; Registers used:
  6710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;Total ram usage:        1 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    9
  6723 ;; This function calls:
  6724 ;;		_irobot_leds
  6725 ;; This function is called by:
  6726 ;;		_main
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text24
  6731  0147DA                     __ptext24:
  6732                           	opt stack 0
  6733  0147DA                     _irobot_led_power_on:
  6734                           	opt stack 21
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;incstack = 0
  6738                           ;irobot_led_power_on@powerOnColour stored from wreg
  6739  0147DA  0100               	movlb	0	; () banked
  6740  0147DC  6FC9               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
  6741                           
  6742                           ;main.c: 402: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
  6743  0147DE  0E00               	movlw	0
  6744  0147E0  0100               	movlb	0	; () banked
  6745  0147E2  6FC5               	movwf	irobot_leds@LEDBit& (0+255),b
  6746  0147E4  C0C9  F0C6         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
  6747  0147E8  0EFF               	movlw	255
  6748  0147EA  0100               	movlb	0	; () banked
  6749  0147EC  6FC7               	movwf	irobot_leds@powerLuminosity& (0+255),b
  6750  0147EE  0E00               	movlw	0
  6751  0147F0  EC5B  F09F         	call	_irobot_leds
  6752  0147F4  0012               	return		;funcret
  6753  0147F6                     __end_of_irobot_led_power_on:
  6754                           	opt stack 0
  6755                           tosu	equ	0xFFF
  6756                           tosh	equ	0xFFE
  6757                           tosl	equ	0xFFD
  6758                           pclath	equ	0xFFA
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           postdec1	equ	0xFE5
  6768                           fsr1h	equ	0xFE2
  6769                           fsr1l	equ	0xFE1
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           postdec2	equ	0xFDD
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _irobot_led_power_off *****************
  6778 ;; Defined at:
  6779 ;;		line 406 in file "main.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;		None
  6784 ;; Return value:  Size  Location     Type
  6785 ;;                  1    wreg      void 
  6786 ;; Registers used:
  6787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;Total ram usage:        0 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; Hardware stack levels required when called:    9
  6800 ;; This function calls:
  6801 ;;		_irobot_leds
  6802 ;; This function is called by:
  6803 ;;		_main
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text25
  6808  014812                     __ptext25:
  6809                           	opt stack 0
  6810  014812                     _irobot_led_power_off:
  6811                           	opt stack 21
  6812                           
  6813                           ;main.c: 407: irobot_leds(0, 0, 0, 0);
  6814                           
  6815                           ;incstack = 0
  6816  014812  0E00               	movlw	0
  6817  014814  0100               	movlb	0	; () banked
  6818  014816  6FC5               	movwf	irobot_leds@LEDBit& (0+255),b
  6819  014818  0E00               	movlw	0
  6820  01481A  0100               	movlb	0	; () banked
  6821  01481C  6FC6               	movwf	irobot_leds@powerColour& (0+255),b
  6822  01481E  0E00               	movlw	0
  6823  014820  0100               	movlb	0	; () banked
  6824  014822  6FC7               	movwf	irobot_leds@powerLuminosity& (0+255),b
  6825  014824  0E00               	movlw	0
  6826  014826  EC5B  F09F         	call	_irobot_leds
  6827  01482A  0012               	return		;funcret
  6828  01482C                     __end_of_irobot_led_power_off:
  6829                           	opt stack 0
  6830                           tosu	equ	0xFFF
  6831                           tosh	equ	0xFFE
  6832                           tosl	equ	0xFFD
  6833                           pclath	equ	0xFFA
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _irobot_leds *****************
  6853 ;; Defined at:
  6854 ;;		line 347 in file "main.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  isScript        1    wreg     unsigned char 
  6857 ;;  LEDBit          1   16[BANK0 ] unsigned char 
  6858 ;;  powerColour     1   17[BANK0 ] unsigned char 
  6859 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  isScript        1   19[BANK0 ] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:        4 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    8
  6878 ;; This function calls:
  6879 ;;		_eusart_putch
  6880 ;;		_load_iRScriptStack
  6881 ;; This function is called by:
  6882 ;;		_irobot_led_power_on
  6883 ;;		_irobot_led_power_off
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text26
  6888  013EB6                     __ptext26:
  6889                           	opt stack 0
  6890  013EB6                     _irobot_leds:
  6891                           	opt stack 21
  6892                           
  6893                           ;incstack = 0
  6894                           ;irobot_leds@isScript stored from wreg
  6895  013EB6  0100               	movlb	0	; () banked
  6896  013EB8  6FC8               	movwf	irobot_leds@isScript& (0+255),b
  6897                           
  6898                           ;main.c: 348: if (isScript){
  6899  013EBA  0100               	movlb	0	; () banked
  6900  013EBC  51C8               	movf	irobot_leds@isScript& (0+255),w,b
  6901  013EBE  0100               	movlb	0	; () banked
  6902  013EC0  B4D8               	btfsc	status,2,c
  6903  013EC2  D015               	goto	l2166
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;main.c: 349: load_iRScriptStack(4, iR_LEDS,
  6907                           ;main.c: 350: LEDBit, powerColour, powerLuminosity);
  6908  013EC4  0E00               	movlw	0
  6909  013EC6  0100               	movlb	0	; () banked
  6910  013EC8  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6911  013ECA  0E8B               	movlw	139
  6912  013ECC  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6913  013ECE  C0C5  F0B7         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
  6914  013ED2  0100               	movlb	0	; () banked
  6915  013ED4  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6916  013ED6  C0C6  F0B9         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
  6917  013EDA  0100               	movlb	0	; () banked
  6918  013EDC  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6919  013EDE  C0C7  F0BB         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
  6920  013EE2  0100               	movlb	0	; () banked
  6921  013EE4  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6922  013EE6  0E04               	movlw	4
  6923  013EE8  EC67  F09D         	call	_load_iRScriptStack
  6924                           
  6925                           ;main.c: 351: }
  6926  013EEC  0012               	return	
  6927  013EEE                     l2166:
  6928                           
  6929                           ;main.c: 352: else{
  6930                           ;main.c: 353: eusart_putch(iR_LEDS);
  6931  013EEE  0E8B               	movlw	139
  6932  013EF0  ECAD  F0A4         	call	_eusart_putch
  6933                           
  6934                           ;main.c: 354: eusart_putch(LEDBit);
  6935  013EF4  0100               	movlb	0	; () banked
  6936  013EF6  51C5               	movf	irobot_leds@LEDBit& (0+255),w,b
  6937  013EF8  ECAD  F0A4         	call	_eusart_putch
  6938                           
  6939                           ;main.c: 355: eusart_putch(powerColour);
  6940  013EFC  0100               	movlb	0	; () banked
  6941  013EFE  51C6               	movf	irobot_leds@powerColour& (0+255),w,b
  6942  013F00  ECAD  F0A4         	call	_eusart_putch
  6943                           
  6944                           ;main.c: 356: eusart_putch(powerLuminosity);
  6945  013F04  0100               	movlb	0	; () banked
  6946  013F06  51C7               	movf	irobot_leds@powerLuminosity& (0+255),w,b
  6947  013F08  ECAD  F0A4         	call	_eusart_putch
  6948  013F0C  0012               	return	
  6949  013F0E                     __end_of_irobot_leds:
  6950                           	opt stack 0
  6951                           tosu	equ	0xFFF
  6952                           tosh	equ	0xFFE
  6953                           tosl	equ	0xFFD
  6954                           pclath	equ	0xFFA
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           postdec1	equ	0xFE5
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _load_iRScriptStack *****************
  6974 ;; Defined at:
  6975 ;;		line 284 in file "main.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  bytesToLoad     1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
  6980 ;;  i               1   15[BANK0 ] unsigned char 
  6981 ;;  loadByte        2   12[BANK0 ] PTR void [1]
  6982 ;;		 -> ?_load_iRScriptStack(1), 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6992 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;Total ram usage:       16 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    7
  6999 ;; This function calls:
  7000 ;;		Nothing
  7001 ;; This function is called by:
  7002 ;;		_irobot_move
  7003 ;;		_irobot_leds
  7004 ;;		_irobot_angle_wait
  7005 ;;		_irobot_distance_wait
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text27
  7010  013ACE                     __ptext27:
  7011                           	opt stack 0
  7012  013ACE                     _load_iRScriptStack:
  7013                           	opt stack 21
  7014                           
  7015                           ;incstack = 0
  7016                           ;load_iRScriptStack@bytesToLoad stored from wreg
  7017  013ACE  0100               	movlb	0	; () banked
  7018  013AD0  6FC3               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
  7019                           
  7020                           ;main.c: 285: va_list loadByte;
  7021                           ;main.c: 286: *loadByte = __va_start();
  7022  013AD2  0EB5               	movlw	low ?_load_iRScriptStack
  7023  013AD4  0100               	movlb	0	; () banked
  7024  013AD6  6FC1               	movwf	load_iRScriptStack@loadByte& (0+255),b
  7025  013AD8  0E00               	movlw	high ?_load_iRScriptStack
  7026  013ADA  0100               	movlb	0	; () banked
  7027  013ADC  6FC2               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
  7028                           
  7029                           ;main.c: 287: for (UINT8 i = 0; i < bytesToLoad; i++){
  7030  013ADE  0E00               	movlw	0
  7031  013AE0  0100               	movlb	0	; () banked
  7032  013AE2  6FC4               	movwf	load_iRScriptStack@i& (0+255),b
  7033  013AE4  D01F               	goto	l2140
  7034  013AE6                     
  7035                           ; BSR set to: 0
  7036                           ;main.c: 288: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loadByte), 
      +                          (int)0));
  7037                           
  7038                           ; BSR set to: 0
  7039  013AE6  C0C1  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
  7040  013AEA  C0C2  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
  7041  013AEE  0100               	movlb	0	; () banked
  7042  013AF0  51C4               	movf	load_iRScriptStack@i& (0+255),w,b
  7043  013AF2  C035  F0BF         	movff	_iRScriptIndex,??_load_iRScriptStack
  7044  013AF6  0100               	movlb	0	; () banked
  7045  013AF8  6BC0               	clrf	(??_load_iRScriptStack+1)& (0+255),b
  7046  013AFA  0100               	movlb	0	; () banked
  7047  013AFC  27BF               	addwf	??_load_iRScriptStack& (0+255),f,b
  7048  013AFE  0E00               	movlw	0
  7049  013B00  23C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
  7050  013B02  0E00               	movlw	low _iRScriptStack
  7051  013B04  0100               	movlb	0	; () banked
  7052  013B06  25BF               	addwf	??_load_iRScriptStack& (0+255),w,b
  7053  013B08  6EE1               	movwf	fsr1l,c
  7054  013B0A  0E04               	movlw	high _iRScriptStack
  7055  013B0C  0100               	movlb	0	; () banked
  7056  013B0E  21C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
  7057  013B10  6EE2               	movwf	fsr1h,c
  7058  013B12  CFDF FFE7          	movff	indf2,indf1
  7059                           
  7060                           ; BSR set to: 0
  7061  013B16  0E02               	movlw	2
  7062  013B18  0100               	movlb	0	; () banked
  7063  013B1A  27C1               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
  7064  013B1C  0E00               	movlw	0
  7065  013B1E  23C2               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
  7066                           
  7067                           ; BSR set to: 0
  7068  013B20  0100               	movlb	0	; () banked
  7069  013B22  2BC4               	incf	load_iRScriptStack@i& (0+255),f,b
  7070  013B24                     l2140:
  7071                           
  7072                           ; BSR set to: 0
  7073                           
  7074                           ; BSR set to: 0
  7075  013B24  0100               	movlb	0	; () banked
  7076  013B26  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  7077  013B28  0100               	movlb	0	; () banked
  7078  013B2A  5DC4               	subwf	load_iRScriptStack@i& (0+255),w,b
  7079  013B2C  A0D8               	btfss	status,0,c
  7080  013B2E  D7DB               	goto	l2141
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;main.c: 289: }
  7084                           ;main.c: 290: ;
  7085                           ;main.c: 291: iRScriptIndex += bytesToLoad;
  7086                           
  7087                           ; BSR set to: 0
  7088  013B30  0100               	movlb	0	; () banked
  7089  013B32  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  7090  013B34  2635               	addwf	_iRScriptIndex,f,c
  7091                           
  7092                           ; BSR set to: 0
  7093  013B36  0012               	return		;funcret
  7094  013B38                     __end_of_load_iRScriptStack:
  7095                           	opt stack 0
  7096                           tosu	equ	0xFFF
  7097                           tosh	equ	0xFFE
  7098                           tosl	equ	0xFFD
  7099                           pclath	equ	0xFFA
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           postdec1	equ	0xFE5
  7110                           fsr1h	equ	0xFE2
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _irobot_init_song_0 *****************
  7120 ;; Defined at:
  7121 ;;		line 360 in file "main.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:        0 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    8
  7142 ;; This function calls:
  7143 ;;		_eusart_putch
  7144 ;; This function is called by:
  7145 ;;		_main
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text28
  7150  0146CA                     __ptext28:
  7151                           	opt stack 0
  7152  0146CA                     _irobot_init_song_0:
  7153                           	opt stack 22
  7154                           
  7155                           ;main.c: 361: eusart_putch(iR_SONG_INIT);
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;incstack = 0
  7159  0146CA  0E8C               	movlw	140
  7160  0146CC  ECAD  F0A4         	call	_eusart_putch
  7161                           
  7162                           ;main.c: 362: eusart_putch(0);
  7163  0146D0  0E00               	movlw	0
  7164  0146D2  ECAD  F0A4         	call	_eusart_putch
  7165                           
  7166                           ;main.c: 363: eusart_putch(1);
  7167  0146D6  0E01               	movlw	1
  7168  0146D8  ECAD  F0A4         	call	_eusart_putch
  7169                           
  7170                           ;main.c: 364: eusart_putch(60);
  7171  0146DC  0E3C               	movlw	60
  7172  0146DE  ECAD  F0A4         	call	_eusart_putch
  7173                           
  7174                           ;main.c: 365: eusart_putch(4);
  7175  0146E2  0E04               	movlw	4
  7176  0146E4  ECAD  F0A4         	call	_eusart_putch
  7177  0146E8  0012               	return		;funcret
  7178  0146EA                     __end_of_irobot_init_song_0:
  7179                           	opt stack 0
  7180                           tosu	equ	0xFFF
  7181                           tosh	equ	0xFFE
  7182                           tosl	equ	0xFFD
  7183                           pclath	equ	0xFFA
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           indf1	equ	0xFE7
  7193                           postdec1	equ	0xFE5
  7194                           fsr1h	equ	0xFE2
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function _irobot_init *****************
  7204 ;; Defined at:
  7205 ;;		line 306 in file "main.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;		None
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;		None
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;Total ram usage:        0 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    8
  7226 ;; This function calls:
  7227 ;;		_eusart_putch
  7228 ;; This function is called by:
  7229 ;;		_main
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text29
  7234  01494C                     __ptext29:
  7235                           	opt stack 0
  7236  01494C                     _irobot_init:
  7237                           	opt stack 22
  7238                           
  7239                           ;main.c: 307: eusart_putch(iR_START);
  7240                           
  7241                           ;incstack = 0
  7242  01494C  0E80               	movlw	128
  7243  01494E  ECAD  F0A4         	call	_eusart_putch
  7244                           
  7245                           ;main.c: 308: eusart_putch(iR_FULL_MODE);
  7246  014952  0E84               	movlw	132
  7247  014954  ECAD  F0A4         	call	_eusart_putch
  7248  014958  0012               	return		;funcret
  7249  01495A                     __end_of_irobot_init:
  7250                           	opt stack 0
  7251                           tosu	equ	0xFFF
  7252                           tosh	equ	0xFFE
  7253                           tosl	equ	0xFFD
  7254                           pclath	equ	0xFFA
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           postinc0	equ	0xFEE
  7262                           wreg	equ	0xFE8
  7263                           indf1	equ	0xFE7
  7264                           postdec1	equ	0xFE5
  7265                           fsr1h	equ	0xFE2
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _eusart_putch *****************
  7275 ;; Defined at:
  7276 ;;		line 228 in file "main.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  eusartSendCh    1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        1 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    7
  7297 ;; This function calls:
  7298 ;;		Nothing
  7299 ;; This function is called by:
  7300 ;;		_irobot_query_and_update
  7301 ;;		_irobot_init
  7302 ;;		_irobot_move
  7303 ;;		_irobot_leds
  7304 ;;		_irobot_init_song_0
  7305 ;;		_irobot_song_play
  7306 ;;		_irobot_script_play
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text30
  7311  01495A                     __ptext30:
  7312                           	opt stack 0
  7313  01495A                     _eusart_putch:
  7314                           	opt stack 21
  7315                           
  7316                           ;incstack = 0
  7317                           ;eusart_putch@eusartSendChar stored from wreg
  7318  01495A  0100               	movlb	0	; () banked
  7319  01495C  6FB5               	movwf	eusart_putch@eusartSendChar& (0+255),b
  7320  01495E                     
  7321                           ;main.c: 229: while (!TXSTA1bits.TRMT) {};
  7322  01495E  A2AD               	btfss	4013,1,c	;volatile
  7323  014960  D7FE               	goto	l11662
  7324                           
  7325                           ;main.c: 230: TXREG1 = eusartSendChar;
  7326  014962  C0B5  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
  7327  014966  0012               	return		;funcret
  7328  014968                     __end_of_eusart_putch:
  7329                           	opt stack 0
  7330                           tosu	equ	0xFFF
  7331                           tosh	equ	0xFFE
  7332                           tosl	equ	0xFFD
  7333                           pclath	equ	0xFFA
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           indf1	equ	0xFE7
  7343                           postdec1	equ	0xFE5
  7344                           fsr1h	equ	0xFE2
  7345                           fsr1l	equ	0xFE1
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _eusart_init *****************
  7354 ;; Defined at:
  7355 ;;		line 211 in file "main.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    7
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_main
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text31
  7384  014708                     __ptext31:
  7385                           	opt stack 0
  7386  014708                     _eusart_init:
  7387                           	opt stack 23
  7388                           
  7389                           ;main.c: 212: TRISCbits.TRISC6 = 0;
  7390                           
  7391                           ;incstack = 0
  7392  014708  9C94               	bcf	3988,6,c	;volatile
  7393                           
  7394                           ;main.c: 213: TRISCbits.TRISC7 = 1;
  7395  01470A  8E94               	bsf	3988,7,c	;volatile
  7396                           
  7397                           ;main.c: 215: TXSTA1 = 0b00100100;
  7398  01470C  0E24               	movlw	36
  7399  01470E  6EAD               	movwf	4013,c	;volatile
  7400                           
  7401                           ;main.c: 216: RCSTA1 = 0b10011000;
  7402  014710  0E98               	movlw	152
  7403  014712  6EAC               	movwf	4012,c	;volatile
  7404                           
  7405                           ;main.c: 218: BAUDCON1bits.DTRXP = 0;
  7406  014714  9A7E               	bcf	3966,5,c	;volatile
  7407                           
  7408                           ;main.c: 219: BAUDCON1bits.SCKP = 0;
  7409  014716  987E               	bcf	3966,4,c	;volatile
  7410                           
  7411                           ;main.c: 220: BAUDCON1bits.WUE = 0;
  7412  014718  927E               	bcf	3966,1,c	;volatile
  7413                           
  7414                           ;main.c: 221: BAUDCON1bits.ABDEN = 0;
  7415  01471A  907E               	bcf	3966,0,c	;volatile
  7416                           
  7417                           ;main.c: 223: TXSTA1bits.BRGH = 1;
  7418  01471C  84AD               	bsf	4013,2,c	;volatile
  7419                           
  7420                           ;main.c: 224: BAUDCON1bits.BRG16 = 0;
  7421  01471E  967E               	bcf	3966,3,c	;volatile
  7422                           
  7423                           ;main.c: 225: SPBRG1 = 51;
  7424  014720  0E33               	movlw	51
  7425  014722  6EB0               	movwf	4016,c	;volatile
  7426  014724  0012               	return		;funcret
  7427  014726                     __end_of_eusart_init:
  7428                           	opt stack 0
  7429                           tosu	equ	0xFFF
  7430                           tosh	equ	0xFFE
  7431                           tosl	equ	0xFFD
  7432                           pclath	equ	0xFFA
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postdec1	equ	0xFE5
  7443                           fsr1h	equ	0xFE2
  7444                           fsr1l	equ	0xFE1
  7445                           indf2	equ	0xFDF
  7446                           postinc2	equ	0xFDE
  7447                           postdec2	equ	0xFDD
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function _MXK_Init *****************
  7453 ;; Defined at:
  7454 ;;		line 33 in file "Library/MXK.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;		None
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;		None
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;Total ram usage:        0 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:   16
  7475 ;; This function calls:
  7476 ;;		_LED_Init
  7477 ;;		_Port_Init
  7478 ;;		_Port_SetPin
  7479 ;;		_Port_SetPinType
  7480 ;;		_Port_SetQuadType
  7481 ;;		_Port_SetType
  7482 ;;		_delay_ms
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text32
  7489  011D3E                     __ptext32:
  7490                           	opt stack 0
  7491  011D3E                     _MXK_Init:
  7492                           	opt stack 14
  7493                           
  7494                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7495                           
  7496                           ;incstack = 0
  7497  011D3E  0E01               	movlw	1
  7498  011D40  6E4B               	movwf	_Bus_State,c
  7499                           
  7500                           ;MXK.c: 36: lQueue = (Function)0;
  7501  011D42  0E00               	movlw	0
  7502  011D44  0100               	movlb	0	; () banked
  7503  011D46  6F6F               	movwf	_lQueue& (0+255),b	;volatile
  7504  011D48  0E00               	movlw	0
  7505  011D4A  0100               	movlb	0	; () banked
  7506  011D4C  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7507  011D4E  0E00               	movlw	0
  7508  011D50  0100               	movlb	0	; () banked
  7509  011D52  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7513  011D54  0EA6               	movlw	low _PortA
  7514  011D56  0100               	movlb	0	; () banked
  7515  011D58  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7516  011D5A  0E03               	movlw	high _PortA
  7517  011D5C  0100               	movlb	0	; () banked
  7518  011D5E  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7519  011D60  0E00               	movlw	0
  7520  011D62  0100               	movlb	0	; () banked
  7521  011D64  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7522  011D66  EC13  F08D         	call	_Port_Init	;wreg free
  7523                           
  7524                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7525  011D6A  0E9C               	movlw	low _PortB
  7526  011D6C  0100               	movlb	0	; () banked
  7527  011D6E  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7528  011D70  0E03               	movlw	high _PortB
  7529  011D72  0100               	movlb	0	; () banked
  7530  011D74  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7531  011D76  0E01               	movlw	1
  7532  011D78  0100               	movlb	0	; () banked
  7533  011D7A  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7534  011D7C  EC13  F08D         	call	_Port_Init	;wreg free
  7535                           
  7536                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7537  011D80  0EA3               	movlw	low _PortC
  7538  011D82  0100               	movlb	0	; () banked
  7539  011D84  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7540  011D86  0E00               	movlw	high _PortC
  7541  011D88  0100               	movlb	0	; () banked
  7542  011D8A  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7543  011D8C  0E02               	movlw	2
  7544  011D8E  0100               	movlb	0	; () banked
  7545  011D90  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7546  011D92  EC13  F08D         	call	_Port_Init	;wreg free
  7547                           
  7548                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7549  011D96  0E99               	movlw	low _PortD
  7550  011D98  0100               	movlb	0	; () banked
  7551  011D9A  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7552  011D9C  0E00               	movlw	high _PortD
  7553  011D9E  0100               	movlb	0	; () banked
  7554  011DA0  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7555  011DA2  0E03               	movlw	3
  7556  011DA4  0100               	movlb	0	; () banked
  7557  011DA6  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7558  011DA8  EC13  F08D         	call	_Port_Init	;wreg free
  7559                           
  7560                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7561  011DAC  0E8F               	movlw	low _PortE
  7562  011DAE  0100               	movlb	0	; () banked
  7563  011DB0  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7564  011DB2  0E00               	movlw	high _PortE
  7565  011DB4  0100               	movlb	0	; () banked
  7566  011DB6  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7567  011DB8  0E04               	movlw	4
  7568  011DBA  0100               	movlb	0	; () banked
  7569  011DBC  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7570  011DBE  EC13  F08D         	call	_Port_Init	;wreg free
  7571                           
  7572                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7573  011DC2  0EB0               	movlw	low _PortF
  7574  011DC4  0100               	movlb	0	; () banked
  7575  011DC6  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7576  011DC8  0E03               	movlw	high _PortF
  7577  011DCA  0100               	movlb	0	; () banked
  7578  011DCC  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7579  011DCE  0E05               	movlw	5
  7580  011DD0  0100               	movlb	0	; () banked
  7581  011DD2  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7582  011DD4  EC13  F08D         	call	_Port_Init	;wreg free
  7583                           
  7584                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7585  011DD8  0E92               	movlw	low _PortG
  7586  011DDA  0100               	movlb	0	; () banked
  7587  011DDC  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7588  011DDE  0E03               	movlw	high _PortG
  7589  011DE0  0100               	movlb	0	; () banked
  7590  011DE2  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7591  011DE4  0E06               	movlw	6
  7592  011DE6  0100               	movlb	0	; () banked
  7593  011DE8  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7594  011DEA  EC13  F08D         	call	_Port_Init	;wreg free
  7595                           
  7596                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7597  011DEE  0EB0               	movlw	low _PortF
  7598  011DF0  0100               	movlb	0	; () banked
  7599  011DF2  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7600  011DF4  0E03               	movlw	high _PortF
  7601  011DF6  0100               	movlb	0	; () banked
  7602  011DF8  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7603  011DFA  0E05               	movlw	5
  7604  011DFC  0100               	movlb	0	; () banked
  7605  011DFE  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7606  011E00  0E00               	movlw	0
  7607  011E02  0100               	movlb	0	; () banked
  7608  011E04  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7609  011E06  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7610                           
  7611                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7612  011E0A  0E9C               	movlw	low _PortB
  7613  011E0C  0100               	movlb	0	; () banked
  7614  011E0E  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
  7615  011E10  0E03               	movlw	high _PortB
  7616  011E12  0100               	movlb	0	; () banked
  7617  011E14  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7618  011E16  0E00               	movlw	0
  7619  011E18  0100               	movlb	0	; () banked
  7620  011E1A  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7621  011E1C  0E00               	movlw	0
  7622  011E1E  0100               	movlb	0	; () banked
  7623  011E20  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
  7624  011E22  EC2E  F085         	call	_Port_SetQuadType	;wreg free
  7625                           
  7626                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7627  011E26  0EB0               	movlw	low _PortF
  7628  011E28  0100               	movlb	0	; () banked
  7629  011E2A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7630  011E2C  0E03               	movlw	high _PortF
  7631  011E2E  0100               	movlb	0	; () banked
  7632  011E30  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7633  011E32  0E06               	movlw	6
  7634  011E34  0100               	movlb	0	; () banked
  7635  011E36  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7636  011E38  0E03               	movlw	3
  7637  011E3A  0100               	movlb	0	; () banked
  7638  011E3C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7639  011E3E  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7640                           
  7641                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7642  011E42  0E92               	movlw	low _PortG
  7643  011E44  0100               	movlb	0	; () banked
  7644  011E46  6FEF               	movwf	Port_SetType@pInput& (0+255),b
  7645  011E48  0E03               	movlw	high _PortG
  7646  011E4A  0100               	movlb	0	; () banked
  7647  011E4C  6FF0               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7648  011E4E  0E03               	movlw	3
  7649  011E50  0100               	movlb	0	; () banked
  7650  011E52  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7651  011E54  EC59  F086         	call	_Port_SetType	;wreg free
  7652                           
  7653                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7654  011E58  0E92               	movlw	low _PortG
  7655  011E5A  0100               	movlb	0	; () banked
  7656  011E5C  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7657  011E5E  0E03               	movlw	high _PortG
  7658  011E60  0100               	movlb	0	; () banked
  7659  011E62  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7660  011E64  0E04               	movlw	4
  7661  011E66  0100               	movlb	0	; () banked
  7662  011E68  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7663  011E6A  0E00               	movlw	0
  7664  011E6C  0100               	movlb	0	; () banked
  7665  011E6E  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7666  011E70  EC44  F094         	call	_Port_SetPin	;wreg free
  7667                           
  7668                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7669  011E74  0EB0               	movlw	low _PortF
  7670  011E76  0100               	movlb	0	; () banked
  7671  011E78  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7672  011E7A  0E03               	movlw	high _PortF
  7673  011E7C  0100               	movlb	0	; () banked
  7674  011E7E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7675  011E80  0E06               	movlw	6
  7676  011E82  0100               	movlb	0	; () banked
  7677  011E84  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7678  011E86  0E01               	movlw	1
  7679  011E88  0100               	movlb	0	; () banked
  7680  011E8A  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7681  011E8C  EC44  F094         	call	_Port_SetPin	;wreg free
  7682                           
  7683                           ;MXK.c: 55: LED_Init(eLED1);
  7684  011E90  0E00               	movlw	0
  7685  011E92  EC9E  F09E         	call	_LED_Init
  7686                           
  7687                           ;MXK.c: 56: LED_Init(eLED2);
  7688  011E96  0E01               	movlw	1
  7689  011E98  EC9E  F09E         	call	_LED_Init
  7690                           
  7691                           ;MXK.c: 58: PIR1 = 0;
  7692  011E9C  0E00               	movlw	0
  7693  011E9E  6E9E               	movwf	3998,c	;volatile
  7694                           
  7695                           ;MXK.c: 59: PIR2 = 0;
  7696  011EA0  0E00               	movlw	0
  7697  011EA2  6EA1               	movwf	4001,c	;volatile
  7698                           
  7699                           ;MXK.c: 60: PIR3 = 0;
  7700  011EA4  0E00               	movlw	0
  7701  011EA6  6EA4               	movwf	4004,c	;volatile
  7702                           
  7703                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7704  011EA8  8E9B               	bsf	3995,7,c	;volatile
  7705                           
  7706                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7707  011EAA  8C9B               	bsf	3995,6,c	;volatile
  7708                           
  7709                           ;MXK.c: 66: delay_ms(100);
  7710  011EAC  0E00               	movlw	0
  7711  011EAE  0100               	movlb	0	; () banked
  7712  011EB0  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  7713  011EB2  0E64               	movlw	100
  7714  011EB4  6FB5               	movwf	delay_ms@ms& (0+255),b
  7715  011EB6  EC9C  F09D         	call	_delay_ms	;wreg free
  7716                           
  7717                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7718  011EBA  8ED0               	bsf	4048,7,c	;volatile
  7719  011EBC  0012               	return		;funcret
  7720  011EBE                     __end_of_MXK_Init:
  7721                           	opt stack 0
  7722                           tosu	equ	0xFFF
  7723                           tosh	equ	0xFFE
  7724                           tosl	equ	0xFFD
  7725                           pclath	equ	0xFFA
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           prodh	equ	0xFF4
  7731                           prodl	equ	0xFF3
  7732                           postinc0	equ	0xFEE
  7733                           wreg	equ	0xFE8
  7734                           indf1	equ	0xFE7
  7735                           postdec1	equ	0xFE5
  7736                           fsr1h	equ	0xFE2
  7737                           fsr1l	equ	0xFE1
  7738                           indf2	equ	0xFDF
  7739                           postinc2	equ	0xFDE
  7740                           postdec2	equ	0xFDD
  7741                           fsr2h	equ	0xFDA
  7742                           fsr2l	equ	0xFD9
  7743                           status	equ	0xFD8
  7744                           
  7745 ;; *************** function _Port_Init *****************
  7746 ;; Defined at:
  7747 ;;		line 150 in file "Library/Port.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7750 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7751 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7752 ;;  pPort           1   66[BANK0 ] enum E6786
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  i               1   67[BANK0 ] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7764 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;Total ram usage:        6 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:   15
  7771 ;; This function calls:
  7772 ;;		_GetPortPORT
  7773 ;;		_GetPortProperties
  7774 ;;		_GetPortTRIS
  7775 ;;		_Port_Set
  7776 ;;		_Port_SetPinType
  7777 ;;		_Port_SetType
  7778 ;;		_Word_GetPair
  7779 ;; This function is called by:
  7780 ;;		_MXK_Init
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text33
  7785  011A26                     __ptext33:
  7786                           	opt stack 0
  7787  011A26                     _Port_Init:
  7788                           	opt stack 14
  7789                           
  7790                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7791                           
  7792                           ;incstack = 0
  7793  011A26  0100               	movlb	0	; () banked
  7794  011A28  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7795  011A2A  EC28  F098         	call	_GetPortProperties
  7796  011A2E  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7797  011A32  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7798  011A36  0100               	movlb	0	; () banked
  7799  011A38  C0B5  FFDE         	movff	?_GetPortProperties,postinc2
  7800  011A3C  0100               	movlb	0	; () banked
  7801  011A3E  C0B6  FFDD         	movff	?_GetPortProperties+1,postdec2
  7802                           
  7803                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  7804  011A42  0100               	movlb	0	; () banked
  7805  011A44  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7806  011A46  EC7B  F098         	call	_GetPortPORT
  7807  011A4A  0100               	movlb	0	; () banked
  7808  011A4C  EE20 F006          	lfsr	2,6
  7809  011A50  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7810  011A52  26D9               	addwf	fsr2l,f,c
  7811  011A54  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7812  011A56  22DA               	addwfc	fsr2h,f,c
  7813  011A58  0100               	movlb	0	; () banked
  7814  011A5A  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7815  011A5E  0100               	movlb	0	; () banked
  7816  011A60  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7817                           
  7818                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  7819  011A64  0100               	movlb	0	; () banked
  7820  011A66  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7821  011A68  EC7B  F098         	call	_GetPortPORT
  7822  011A6C  0100               	movlb	0	; () banked
  7823  011A6E  EE20 F004          	lfsr	2,4
  7824  011A72  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7825  011A74  26D9               	addwf	fsr2l,f,c
  7826  011A76  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7827  011A78  22DA               	addwfc	fsr2h,f,c
  7828  011A7A  0100               	movlb	0	; () banked
  7829  011A7C  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7830  011A80  0100               	movlb	0	; () banked
  7831  011A82  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7832                           
  7833                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  7834  011A86  0100               	movlb	0	; () banked
  7835  011A88  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7836  011A8A  ECD5  F097         	call	_GetPortTRIS
  7837  011A8E  0100               	movlb	0	; () banked
  7838  011A90  EE20 F002          	lfsr	2,2
  7839  011A94  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7840  011A96  26D9               	addwf	fsr2l,f,c
  7841  011A98  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7842  011A9A  22DA               	addwfc	fsr2h,f,c
  7843  011A9C  0100               	movlb	0	; () banked
  7844  011A9E  C0B5  FFDE         	movff	?_GetPortTRIS,postinc2
  7845  011AA2  0100               	movlb	0	; () banked
  7846  011AA4  C0B6  FFDD         	movff	?_GetPortTRIS+1,postdec2
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  7850  011AA8  0100               	movlb	0	; () banked
  7851  011AAA  EE20 F004          	lfsr	2,4
  7852  011AAE  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7853  011AB0  26D9               	addwf	fsr2l,f,c
  7854  011AB2  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7855  011AB4  22DA               	addwfc	fsr2h,f,c
  7856  011AB6  CFDE F100          	movff	postinc2,??_Port_Init
  7857  011ABA  CFDD F101          	movff	postdec2,??_Port_Init+1
  7858  011ABE  C100  FFD9         	movff	??_Port_Init,fsr2l
  7859  011AC2  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7860  011AC6  0E00               	movlw	0
  7861  011AC8  6EDF               	movwf	indf2,c
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  7865  011ACA  0100               	movlb	0	; () banked
  7866  011ACC  EE20 F002          	lfsr	2,2
  7867  011AD0  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7868  011AD2  26D9               	addwf	fsr2l,f,c
  7869  011AD4  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7870  011AD6  22DA               	addwfc	fsr2h,f,c
  7871  011AD8  CFDE F100          	movff	postinc2,??_Port_Init
  7872  011ADC  CFDD F101          	movff	postdec2,??_Port_Init+1
  7873  011AE0  C100  FFD9         	movff	??_Port_Init,fsr2l
  7874  011AE4  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7875  011AE8  0EFF               	movlw	255
  7876  011AEA  6EDF               	movwf	indf2,c
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  7880  011AEC  C0F5  F0EF         	movff	Port_Init@pInput,Port_SetType@pInput
  7881  011AF0  C0F6  F0F0         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  7882  011AF4  0E00               	movlw	0
  7883  011AF6  0100               	movlb	0	; () banked
  7884  011AF8  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7885  011AFA  EC59  F086         	call	_Port_SetType	;wreg free
  7886                           
  7887                           ;Port.c: 166: UINT8 i;
  7888                           ;Port.c: 167: for (i=0; i<8; i++)
  7889  011AFE  0E00               	movlw	0
  7890  011B00  0100               	movlb	0	; () banked
  7891  011B02  6FF8               	movwf	Port_Init@i& (0+255),b
  7892  011B04                     l11886:
  7893                           
  7894                           ; BSR set to: 0
  7895  011B04  0E07               	movlw	7
  7896  011B06  0100               	movlb	0	; () banked
  7897  011B08  65F8               	cpfsgt	Port_Init@i& (0+255),b
  7898  011B0A  D031               	goto	l403
  7899  011B0C  D04B               	goto	u7760
  7900  011B0E                     
  7901                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  7902                           
  7903                           ; BSR set to: 0
  7904  011B0E  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7905  011B12  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7906  011B16  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7907  011B1A  0E03               	movlw	3
  7908  011B1C  0100               	movlb	0	; () banked
  7909  011B1E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7910  011B20  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7911                           
  7912                           ;Port.c: 173: break;
  7913  011B24  D03C               	goto	l405
  7914  011B26                     
  7915                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  7916  011B26  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7917  011B2A  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7918  011B2E  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7919  011B32  0E02               	movlw	2
  7920  011B34  0100               	movlb	0	; () banked
  7921  011B36  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7922  011B38  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7923                           
  7924                           ;Port.c: 176: break;
  7925  011B3C  D030               	goto	l405
  7926  011B3E                     
  7927                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  7928  011B3E  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7929  011B42  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7930  011B46  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7931  011B4A  0E01               	movlw	1
  7932  011B4C  0100               	movlb	0	; () banked
  7933  011B4E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7934  011B50  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7935                           
  7936                           ;Port.c: 179: break;
  7937  011B54  D024               	goto	l405
  7938  011B56                     
  7939                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  7940  011B56  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7941  011B5A  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7942  011B5E  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7943  011B62  0E00               	movlw	0
  7944  011B64  0100               	movlb	0	; () banked
  7945  011B66  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7946  011B68  EC64  F08B         	call	_Port_SetPinType	;wreg free
  7947                           
  7948                           ;Port.c: 183: }
  7949                           
  7950                           ;Port.c: 182: break;
  7951  011B6C  D018               	goto	l405
  7952  011B6E                     l403:
  7953  011B6E  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7954  011B72  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7955  011B76  CFDE F0C1          	movff	postinc2,Word_GetPair@pInput
  7956  011B7A  CFDD F0C2          	movff	postdec2,Word_GetPair@pInput+1
  7957  011B7E  C0F8  F0C3         	movff	Port_Init@i,Word_GetPair@pPair
  7958  011B82  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  7959                           
  7960                           ; Switch size 1, requested type "space"
  7961                           ; Number of cases is 4, Range of values is 0 to 3
  7962                           ; switch strategies available:
  7963                           ; Name         Instructions Cycles
  7964                           ; simple_byte           13     7 (average)
  7965                           ;	Chosen strategy is simple_byte
  7966  011B86  0A00               	xorlw	0	; case 0
  7967  011B88  B4D8               	btfsc	status,2,c
  7968  011B8A  D7C1               	goto	l404
  7969  011B8C  0A01               	xorlw	1	; case 1
  7970  011B8E  B4D8               	btfsc	status,2,c
  7971  011B90  D7D6               	goto	l407
  7972  011B92  0A03               	xorlw	3	; case 2
  7973  011B94  B4D8               	btfsc	status,2,c
  7974  011B96  D7C7               	goto	l406
  7975  011B98  0A01               	xorlw	1	; case 3
  7976  011B9A  B4D8               	btfsc	status,2,c
  7977  011B9C  D7DC               	goto	l408
  7978  011B9E                     l405:
  7979  011B9E  0100               	movlb	0	; () banked
  7980  011BA0  2BF8               	incf	Port_Init@i& (0+255),f,b
  7981  011BA2  D7B0               	goto	l11886
  7982  011BA4                     u7760:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;Port.c: 184: }
  7986                           ;Port.c: 185: Port_Set(pInput, 0x00);
  7987                           
  7988                           ; BSR set to: 0
  7989  011BA4  C0F5  F0C4         	movff	Port_Init@pInput,Port_Set@pInput
  7990  011BA8  C0F6  F0C5         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  7991  011BAC  0E00               	movlw	0
  7992  011BAE  0100               	movlb	0	; () banked
  7993  011BB0  6FC6               	movwf	Port_Set@pValue& (0+255),b
  7994  011BB2  EC0F  F082         	call	_Port_Set	;wreg free
  7995  011BB6  0012               	return		;funcret
  7996  011BB8                     __end_of_Port_Init:
  7997                           	opt stack 0
  7998                           tosu	equ	0xFFF
  7999                           tosh	equ	0xFFE
  8000                           tosl	equ	0xFFD
  8001                           pclath	equ	0xFFA
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           postinc0	equ	0xFEE
  8009                           wreg	equ	0xFE8
  8010                           indf1	equ	0xFE7
  8011                           postdec1	equ	0xFE5
  8012                           fsr1h	equ	0xFE2
  8013                           fsr1l	equ	0xFE1
  8014                           indf2	equ	0xFDF
  8015                           postinc2	equ	0xFDE
  8016                           postdec2	equ	0xFDD
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _Port_SetType *****************
  8022 ;; Defined at:
  8023 ;;		line 513 in file "Library/Port.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  8026 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8027 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8028 ;;  pType           1   60[BANK0 ] enum E6795
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  Output          1   63[BANK0 ] enum E6475
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      enum E6475
  8033 ;; Registers used:
  8034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8040 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:        6 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:   14
  8047 ;; This function calls:
  8048 ;;		_Port_CheckPortType
  8049 ;;		_Word_SetPair
  8050 ;; This function is called by:
  8051 ;;		_Port_Init
  8052 ;;		_MXK_Init
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text34
  8057  010CB2                     __ptext34:
  8058                           	opt stack 0
  8059  010CB2                     _Port_SetType:
  8060                           	opt stack 15
  8061                           
  8062                           ;Port.c: 515: ePinError Output = ePinErrorState;
  8063                           
  8064                           ;incstack = 0
  8065  010CB2  0E05               	movlw	5
  8066  010CB4  0100               	movlb	0	; () banked
  8067  010CB6  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8068                           
  8069                           ;Port.c: 517: switch (pType)
  8070  010CB8  D07A               	goto	l509
  8071  010CBA                     
  8072                           ; BSR set to: 0
  8073                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  8074                           
  8075                           ; BSR set to: 0
  8076  010CBA  0100               	movlb	0	; () banked
  8077  010CBC  EE20 F002          	lfsr	2,2
  8078  010CC0  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8079  010CC2  26D9               	addwf	fsr2l,f,c
  8080  010CC4  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8081  010CC6  22DA               	addwfc	fsr2h,f,c
  8082  010CC8  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8083  010CCC  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8084  010CD0  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8085  010CD4  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8086  010CD8  0EFF               	movlw	255
  8087  010CDA  D067               	goto	L7
  8088  010CDC                     
  8089                           ; BSR set to: 0
  8090                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  8091                           
  8092                           ; BSR set to: 0
  8093  010CDC  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8094  010CE0  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8095  010CE4  0E01               	movlw	1
  8096  010CE6  0100               	movlb	0	; () banked
  8097  010CE8  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8098  010CEA  EC77  F0A0         	call	_Port_CheckPortType	;wreg free
  8099  010CEE  0100               	movlb	0	; () banked
  8100  010CF0  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8101  010CF2  0100               	movlb	0	; () banked
  8102  010CF4  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8103  010CF6  A4D8               	btfss	status,2,c
  8104  010CF8  0012               	return	
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;Port.c: 527: {
  8108                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  8109  010CFA  0100               	movlb	0	; () banked
  8110  010CFC  EE20 F002          	lfsr	2,2
  8111  010D00  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8112  010D02  26D9               	addwf	fsr2l,f,c
  8113  010D04  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8114  010D06  22DA               	addwfc	fsr2h,f,c
  8115  010D08  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8116  010D0C  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8117  010D10  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8118  010D14  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8119  010D18  0E00               	movlw	0
  8120  010D1A  6EDF               	movwf	indf2,c
  8121                           
  8122                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  8123  010D1C  0100               	movlb	0	; () banked
  8124  010D1E  EE20 F004          	lfsr	2,4
  8125  010D22  D036               	goto	L12
  8126  010D24                     
  8127                           ; BSR set to: 0
  8128                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  8129                           
  8130                           ; BSR set to: 0
  8131  010D24  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8132  010D28  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8133  010D2C  0E02               	movlw	2
  8134  010D2E  0100               	movlb	0	; () banked
  8135  010D30  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8136  010D32  EC77  F0A0         	call	_Port_CheckPortType	;wreg free
  8137  010D36  0100               	movlb	0	; () banked
  8138  010D38  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8139  010D3A  0100               	movlb	0	; () banked
  8140  010D3C  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8141  010D3E  A4D8               	btfss	status,2,c
  8142  010D40  0012               	return	
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;Port.c: 538: {
  8146                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8147  010D42  0100               	movlb	0	; () banked
  8148  010D44  EE20 F002          	lfsr	2,2
  8149  010D48  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8150  010D4A  26D9               	addwf	fsr2l,f,c
  8151  010D4C  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8152  010D4E  22DA               	addwfc	fsr2h,f,c
  8153  010D50  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8154  010D54  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8155  010D58  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8156  010D5C  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8157  010D60  0EFF               	movlw	255
  8158  010D62  6EDF               	movwf	indf2,c
  8159                           
  8160                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8161  010D64  0100               	movlb	0	; () banked
  8162  010D66  EE20 F004          	lfsr	2,4
  8163  010D6A  D7AA               	goto	L8
  8164  010D6C                     
  8165                           ; BSR set to: 0
  8166                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8167                           
  8168                           ; BSR set to: 0
  8169  010D6C  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8170  010D70  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8171  010D74  0E00               	movlw	0
  8172  010D76  0100               	movlb	0	; () banked
  8173  010D78  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8174  010D7A  EC77  F0A0         	call	_Port_CheckPortType	;wreg free
  8175  010D7E  0100               	movlb	0	; () banked
  8176  010D80  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8177  010D82  0100               	movlb	0	; () banked
  8178  010D84  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8179  010D86  A4D8               	btfss	status,2,c
  8180  010D88  0012               	return	
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;Port.c: 549: {
  8184                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8185  010D8A  0100               	movlb	0	; () banked
  8186  010D8C  EE20 F002          	lfsr	2,2
  8187  010D90                     L12:
  8188  010D90  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8189  010D92  26D9               	addwf	fsr2l,f,c
  8190  010D94  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8191  010D96  22DA               	addwfc	fsr2h,f,c
  8192  010D98  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8193  010D9C  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8194  010DA0  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8195  010DA4  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8196  010DA8  0E00               	movlw	0
  8197  010DAA                     L7:
  8198  010DAA  6EDF               	movwf	indf2,c
  8199                           
  8200                           ;Port.c: 552: }
  8201  010DAC  D00E               	goto	l511
  8202  010DAE                     l509:
  8203                           
  8204                           ; BSR set to: 0
  8205                           
  8206                           ; BSR set to: 0
  8207  010DAE  0100               	movlb	0	; () banked
  8208  010DB0  51F1               	movf	Port_SetType@pType& (0+255),w,b
  8209                           
  8210                           ; Switch size 1, requested type "space"
  8211                           ; Number of cases is 4, Range of values is 0 to 3
  8212                           ; switch strategies available:
  8213                           ; Name         Instructions Cycles
  8214                           ; simple_byte           13     7 (average)
  8215                           ;	Chosen strategy is simple_byte
  8216  010DB2  0A00               	xorlw	0	; case 0
  8217  010DB4  B4D8               	btfsc	status,2,c
  8218  010DB6  D781               	goto	l510
  8219  010DB8  0A01               	xorlw	1	; case 1
  8220  010DBA  B4D8               	btfsc	status,2,c
  8221  010DBC  D78F               	goto	l512
  8222  010DBE  0A03               	xorlw	3	; case 2
  8223  010DC0  B4D8               	btfsc	status,2,c
  8224  010DC2  D7B0               	goto	l516
  8225  010DC4  0A01               	xorlw	1	; case 3
  8226  010DC6  B4D8               	btfsc	status,2,c
  8227  010DC8  D7D1               	goto	l519
  8228  010DCA                     l511:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8232                           
  8233                           ; BSR set to: 0
  8234  010DCA  0E08               	movlw	8
  8235  010DCC  0100               	movlb	0	; () banked
  8236  010DCE  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8237  010DD0  0100               	movlb	0	; () banked
  8238  010DD2  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8239  010DD4  0E00               	movlw	0
  8240  010DD6  0100               	movlb	0	; () banked
  8241  010DD8  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8242  010DDA  0100               	movlb	0	; () banked
  8243  010DDC  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8244  010DDE  0E00               	movlw	0
  8245  010DE0  0100               	movlb	0	; () banked
  8246  010DE2  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8247  010DE4  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8248  010DE8  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8249                           
  8250                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8251  010DEC  0E08               	movlw	8
  8252  010DEE  0100               	movlb	0	; () banked
  8253  010DF0  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8254  010DF2  0100               	movlb	0	; () banked
  8255  010DF4  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8256  010DF6  0E00               	movlw	0
  8257  010DF8  0100               	movlb	0	; () banked
  8258  010DFA  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8259  010DFC  0100               	movlb	0	; () banked
  8260  010DFE  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8261  010E00  0E01               	movlw	1
  8262  010E02  0100               	movlb	0	; () banked
  8263  010E04  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8264  010E06  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8265  010E0A  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8266                           
  8267                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8268  010E0E  0E08               	movlw	8
  8269  010E10  0100               	movlb	0	; () banked
  8270  010E12  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8271  010E14  0100               	movlb	0	; () banked
  8272  010E16  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8273  010E18  0E00               	movlw	0
  8274  010E1A  0100               	movlb	0	; () banked
  8275  010E1C  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8276  010E1E  0100               	movlb	0	; () banked
  8277  010E20  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8278  010E22  0E02               	movlw	2
  8279  010E24  0100               	movlb	0	; () banked
  8280  010E26  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8281  010E28  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8282  010E2C  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8283                           
  8284                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8285  010E30  0E08               	movlw	8
  8286  010E32  0100               	movlb	0	; () banked
  8287  010E34  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8288  010E36  0100               	movlb	0	; () banked
  8289  010E38  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8290  010E3A  0E00               	movlw	0
  8291  010E3C  0100               	movlb	0	; () banked
  8292  010E3E  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8293  010E40  0100               	movlb	0	; () banked
  8294  010E42  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8295  010E44  0E03               	movlw	3
  8296  010E46  0100               	movlb	0	; () banked
  8297  010E48  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8298  010E4A  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8299  010E4E  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8300                           
  8301                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8302  010E52  0E08               	movlw	8
  8303  010E54  0100               	movlb	0	; () banked
  8304  010E56  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8305  010E58  0100               	movlb	0	; () banked
  8306  010E5A  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8307  010E5C  0E00               	movlw	0
  8308  010E5E  0100               	movlb	0	; () banked
  8309  010E60  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8310  010E62  0100               	movlb	0	; () banked
  8311  010E64  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8312  010E66  0E04               	movlw	4
  8313  010E68  0100               	movlb	0	; () banked
  8314  010E6A  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8315  010E6C  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8316  010E70  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8317                           
  8318                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8319  010E74  0E08               	movlw	8
  8320  010E76  0100               	movlb	0	; () banked
  8321  010E78  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8322  010E7A  0100               	movlb	0	; () banked
  8323  010E7C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8324  010E7E  0E00               	movlw	0
  8325  010E80  0100               	movlb	0	; () banked
  8326  010E82  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8327  010E84  0100               	movlb	0	; () banked
  8328  010E86  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8329  010E88  0E05               	movlw	5
  8330  010E8A  0100               	movlb	0	; () banked
  8331  010E8C  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8332  010E8E  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8333  010E92  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8334                           
  8335                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8336  010E96  0E08               	movlw	8
  8337  010E98  0100               	movlb	0	; () banked
  8338  010E9A  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8339  010E9C  0100               	movlb	0	; () banked
  8340  010E9E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8341  010EA0  0E00               	movlw	0
  8342  010EA2  0100               	movlb	0	; () banked
  8343  010EA4  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8344  010EA6  0100               	movlb	0	; () banked
  8345  010EA8  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8346  010EAA  0E06               	movlw	6
  8347  010EAC  0100               	movlb	0	; () banked
  8348  010EAE  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8349  010EB0  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8350  010EB4  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8351                           
  8352                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8353  010EB8  0E08               	movlw	8
  8354  010EBA  0100               	movlb	0	; () banked
  8355  010EBC  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8356  010EBE  0100               	movlb	0	; () banked
  8357  010EC0  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8358  010EC2  0E00               	movlw	0
  8359  010EC4  0100               	movlb	0	; () banked
  8360  010EC6  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8361  010EC8  0100               	movlb	0	; () banked
  8362  010ECA  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8363  010ECC  0E07               	movlw	7
  8364  010ECE  0100               	movlb	0	; () banked
  8365  010ED0  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8366  010ED2  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8367  010ED6  EC05  F0A1         	call	_Word_SetPair	;wreg free
  8368  010EDA  0012               	return	
  8369  010EDC                     __end_of_Port_SetType:
  8370                           	opt stack 0
  8371                           tosu	equ	0xFFF
  8372                           tosh	equ	0xFFE
  8373                           tosl	equ	0xFFD
  8374                           pclath	equ	0xFFA
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           postinc0	equ	0xFEE
  8382                           wreg	equ	0xFE8
  8383                           indf1	equ	0xFE7
  8384                           postdec1	equ	0xFE5
  8385                           fsr1h	equ	0xFE2
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _Port_CheckPortType *****************
  8395 ;; Defined at:
  8396 ;;		line 138 in file "Library/Port.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8399 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8400 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8401 ;;  pDrive          1   56[BANK0 ] enum E6469
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  Output          1   57[BANK0 ] enum E6475
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      enum E6475
  8406 ;; Registers used:
  8407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        4 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:   13
  8420 ;; This function calls:
  8421 ;;		_Port_CheckQuadType
  8422 ;; This function is called by:
  8423 ;;		_Port_SetType
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text35
  8428  0140EE                     __ptext35:
  8429                           	opt stack 0
  8430  0140EE                     _Port_CheckPortType:
  8431                           	opt stack 15
  8432                           
  8433                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8434                           
  8435                           ;incstack = 0
  8436  0140EE  0E05               	movlw	5
  8437  0140F0  0100               	movlb	0	; () banked
  8438  0140F2  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8442  0140F4  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8443  0140F8  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8444  0140FC  0E00               	movlw	0
  8445  0140FE  0100               	movlb	0	; () banked
  8446  014100  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8447  014102  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8448  014106  EC2E  F09F         	call	_Port_CheckQuadType	;wreg free
  8449  01410A  0100               	movlb	0	; () banked
  8450  01410C  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8451  01410E  0100               	movlb	0	; () banked
  8452  014110  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8453  014112  A4D8               	btfss	status,2,c
  8454  014114  D00D               	goto	l397
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8458  014116  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8459  01411A  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8460  01411E  0E01               	movlw	1
  8461  014120  0100               	movlb	0	; () banked
  8462  014122  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8463  014124  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8464  014128  EC2E  F09F         	call	_Port_CheckQuadType	;wreg free
  8465  01412C  0100               	movlb	0	; () banked
  8466  01412E  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8467  014130                     l397:
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;Port.c: 146: return Output;
  8471                           
  8472                           ; BSR set to: 0
  8473  014130  0100               	movlb	0	; () banked
  8474  014132  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8475  014134  0012               	return	
  8476  014136                     __end_of_Port_CheckPortType:
  8477                           	opt stack 0
  8478                           tosu	equ	0xFFF
  8479                           tosh	equ	0xFFE
  8480                           tosl	equ	0xFFD
  8481                           pclath	equ	0xFFA
  8482                           tblptru	equ	0xFF8
  8483                           tblptrh	equ	0xFF7
  8484                           tblptrl	equ	0xFF6
  8485                           tablat	equ	0xFF5
  8486                           prodh	equ	0xFF4
  8487                           prodl	equ	0xFF3
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           indf1	equ	0xFE7
  8491                           postdec1	equ	0xFE5
  8492                           fsr1h	equ	0xFE2
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _Port_Set *****************
  8502 ;; Defined at:
  8503 ;;		line 570 in file "Library/Port.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8506 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8507 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8508 ;;  pValue          1   17[BANK0 ] unsigned char 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8511 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8512 ;;  Type            1   38[BANK0 ] enum E6795
  8513 ;; Return value:  Size  Location     Type
  8514 ;;                  1    wreg      void 
  8515 ;; Registers used:
  8516 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8522 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;Total ram usage:       24 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:   10
  8529 ;; This function calls:
  8530 ;;		_Byte_SetByte
  8531 ;;		_Word_GetPair
  8532 ;; This function is called by:
  8533 ;;		_Port_Init
  8534 ;;		_Port_Toggle
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           	psect	text36
  8539  01041E                     __ptext36:
  8540                           	opt stack 0
  8541  01041E                     _Port_Set:
  8542                           	opt stack 18
  8543                           
  8544                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;incstack = 0
  8548  01041E  0E08               	movlw	8
  8549  010420  0100               	movlb	0	; () banked
  8550  010422  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8551  010424  0100               	movlb	0	; () banked
  8552  010426  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8553  010428  0E00               	movlw	0
  8554  01042A  0100               	movlb	0	; () banked
  8555  01042C  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8556  01042E  0100               	movlb	0	; () banked
  8557  010430  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8558  010432  0E00               	movlw	0
  8559  010434  0100               	movlb	0	; () banked
  8560  010436  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8561  010438  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8562  01043C  0100               	movlb	0	; () banked
  8563  01043E  6FDB               	movwf	Port_Set@Type& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8567  010440  0100               	movlb	0	; () banked
  8568  010442  51DB               	movf	Port_Set@Type& (0+255),w,b
  8569  010444  0100               	movlb	0	; () banked
  8570  010446  6FC7               	movwf	??_Port_Set& (0+255),b
  8571  010448  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8572  01044A  0E0E               	movlw	14
  8573  01044C                     u7305:
  8574  01044C  90D8               	bcf	status,0,c
  8575  01044E  0100               	movlb	0	; () banked
  8576  010450  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8577  010452  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8578  010454  2EE8               	decfsz	wreg,f,c
  8579  010456  D7FA               	goto	u7305
  8580  010458  0100               	movlb	0	; () banked
  8581  01045A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8582  01045C  0100               	movlb	0	; () banked
  8583  01045E  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8584  010460  6BCA               	clrf	(??_Port_Set+3)& (0+255),b
  8585  010462  0E0C               	movlw	12
  8586  010464                     u7315:
  8587  010464  90D8               	bcf	status,0,c
  8588  010466  0100               	movlb	0	; () banked
  8589  010468  37C9               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8590  01046A  37CA               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8591  01046C  2EE8               	decfsz	wreg,f,c
  8592  01046E  D7FA               	goto	u7315
  8593  010470  0100               	movlb	0	; () banked
  8594  010472  51DB               	movf	Port_Set@Type& (0+255),w,b
  8595  010474  0100               	movlb	0	; () banked
  8596  010476  6FCB               	movwf	(??_Port_Set+4)& (0+255),b
  8597  010478  6BCC               	clrf	(??_Port_Set+5)& (0+255),b
  8598  01047A  0E0A               	movlw	10
  8599  01047C                     u7325:
  8600  01047C  90D8               	bcf	status,0,c
  8601  01047E  0100               	movlb	0	; () banked
  8602  010480  37CB               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8603  010482  37CC               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8604  010484  2EE8               	decfsz	wreg,f,c
  8605  010486  D7FA               	goto	u7325
  8606  010488  0100               	movlb	0	; () banked
  8607  01048A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8608  01048C  0100               	movlb	0	; () banked
  8609  01048E  6FCE               	movwf	(??_Port_Set+7)& (0+255),b
  8610  010490  6BCD               	clrf	(??_Port_Set+6)& (0+255),b
  8611  010492  0100               	movlb	0	; () banked
  8612  010494  51DB               	movf	Port_Set@Type& (0+255),w,b
  8613  010496  0100               	movlb	0	; () banked
  8614  010498  6FCF               	movwf	(??_Port_Set+8)& (0+255),b
  8615  01049A  6BD0               	clrf	(??_Port_Set+9)& (0+255),b
  8616  01049C  0E06               	movlw	6
  8617  01049E                     u7335:
  8618  01049E  90D8               	bcf	status,0,c
  8619  0104A0  0100               	movlb	0	; () banked
  8620  0104A2  37CF               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8621  0104A4  37D0               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8622  0104A6  2EE8               	decfsz	wreg,f,c
  8623  0104A8  D7FA               	goto	u7335
  8624  0104AA  0100               	movlb	0	; () banked
  8625  0104AC  51DB               	movf	Port_Set@Type& (0+255),w,b
  8626  0104AE  0100               	movlb	0	; () banked
  8627  0104B0  6FD1               	movwf	(??_Port_Set+10)& (0+255),b
  8628  0104B2  6BD2               	clrf	(??_Port_Set+11)& (0+255),b
  8629  0104B4  0100               	movlb	0	; () banked
  8630  0104B6  3BD1               	swapf	(??_Port_Set+10)& (0+255),f,b
  8631  0104B8  3BD2               	swapf	(??_Port_Set+11)& (0+255),f,b
  8632  0104BA  0EF0               	movlw	240
  8633  0104BC  17D2               	andwf	(??_Port_Set+11)& (0+255),f,b
  8634  0104BE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8635  0104C0  0B0F               	andlw	15
  8636  0104C2  13D2               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8637  0104C4  0EF0               	movlw	240
  8638  0104C6  17D1               	andwf	(??_Port_Set+10)& (0+255),f,b
  8639  0104C8  0100               	movlb	0	; () banked
  8640  0104CA  51DB               	movf	Port_Set@Type& (0+255),w,b
  8641  0104CC  0100               	movlb	0	; () banked
  8642  0104CE  6FD3               	movwf	(??_Port_Set+12)& (0+255),b
  8643  0104D0  6BD4               	clrf	(??_Port_Set+13)& (0+255),b
  8644  0104D2  0100               	movlb	0	; () banked
  8645  0104D4  90D8               	bcf	status,0,c
  8646  0104D6  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8647  0104D8  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8648  0104DA  0100               	movlb	0	; () banked
  8649  0104DC  90D8               	bcf	status,0,c
  8650  0104DE  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8651  0104E0  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8652  0104E2  0100               	movlb	0	; () banked
  8653  0104E4  51DB               	movf	Port_Set@Type& (0+255),w,b
  8654  0104E6  0100               	movlb	0	; () banked
  8655  0104E8  6FD5               	movwf	(??_Port_Set+14)& (0+255),b
  8656  0104EA  6BD6               	clrf	(??_Port_Set+15)& (0+255),b
  8657  0104EC  0100               	movlb	0	; () banked
  8658  0104EE  51D3               	movf	(??_Port_Set+12)& (0+255),w,b
  8659  0104F0  0100               	movlb	0	; () banked
  8660  0104F2  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8661  0104F4  0100               	movlb	0	; () banked
  8662  0104F6  51D4               	movf	(??_Port_Set+13)& (0+255),w,b
  8663  0104F8  0100               	movlb	0	; () banked
  8664  0104FA  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8665  0104FC  0100               	movlb	0	; () banked
  8666  0104FE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8667  010500  0100               	movlb	0	; () banked
  8668  010502  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8669  010504  0100               	movlb	0	; () banked
  8670  010506  51D2               	movf	(??_Port_Set+11)& (0+255),w,b
  8671  010508  0100               	movlb	0	; () banked
  8672  01050A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8673  01050C  0100               	movlb	0	; () banked
  8674  01050E  51CF               	movf	(??_Port_Set+8)& (0+255),w,b
  8675  010510  0100               	movlb	0	; () banked
  8676  010512  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8677  010514  0100               	movlb	0	; () banked
  8678  010516  51D0               	movf	(??_Port_Set+9)& (0+255),w,b
  8679  010518  0100               	movlb	0	; () banked
  8680  01051A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8681  01051C  0100               	movlb	0	; () banked
  8682  01051E  51CD               	movf	(??_Port_Set+6)& (0+255),w,b
  8683  010520  0100               	movlb	0	; () banked
  8684  010522  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8685  010524  0100               	movlb	0	; () banked
  8686  010526  51CE               	movf	(??_Port_Set+7)& (0+255),w,b
  8687  010528  0100               	movlb	0	; () banked
  8688  01052A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8689  01052C  0100               	movlb	0	; () banked
  8690  01052E  51CB               	movf	(??_Port_Set+4)& (0+255),w,b
  8691  010530  0100               	movlb	0	; () banked
  8692  010532  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8693  010534  0100               	movlb	0	; () banked
  8694  010536  51CC               	movf	(??_Port_Set+5)& (0+255),w,b
  8695  010538  0100               	movlb	0	; () banked
  8696  01053A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8697  01053C  0100               	movlb	0	; () banked
  8698  01053E  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8699  010540  0100               	movlb	0	; () banked
  8700  010542  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8701  010544  0100               	movlb	0	; () banked
  8702  010546  51CA               	movf	(??_Port_Set+3)& (0+255),w,b
  8703  010548  0100               	movlb	0	; () banked
  8704  01054A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8705  01054C  0100               	movlb	0	; () banked
  8706  01054E  51C7               	movf	??_Port_Set& (0+255),w,b
  8707  010550  0100               	movlb	0	; () banked
  8708  010552  11D5               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8709  010554  0100               	movlb	0	; () banked
  8710  010556  6FD7               	movwf	Port_Set@TypeRequired& (0+255),b
  8711  010558  0100               	movlb	0	; () banked
  8712  01055A  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8713  01055C  0100               	movlb	0	; () banked
  8714  01055E  11D6               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8715  010560  0100               	movlb	0	; () banked
  8716  010562  6FD8               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;Port.c: 574: UINT16 TypeActual = Type;
  8720  010564  C0DB  F0D9         	movff	Port_Set@Type,Port_Set@TypeActual
  8721  010568  0100               	movlb	0	; () banked
  8722  01056A  6BDA               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8726  01056C  0E08               	movlw	8
  8727  01056E  0100               	movlb	0	; () banked
  8728  010570  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8729  010572  0100               	movlb	0	; () banked
  8730  010574  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8731  010576  0E00               	movlw	0
  8732  010578  0100               	movlb	0	; () banked
  8733  01057A  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8734  01057C  0100               	movlb	0	; () banked
  8735  01057E  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8736  010580  0E01               	movlw	1
  8737  010582  0100               	movlb	0	; () banked
  8738  010584  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8739  010586  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8740  01058A  0100               	movlb	0	; () banked
  8741  01058C  6FC7               	movwf	??_Port_Set& (0+255),b
  8742  01058E  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8743  010590  0100               	movlb	0	; () banked
  8744  010592  90D8               	bcf	status,0,c
  8745  010594  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8746  010596  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8747  010598  0100               	movlb	0	; () banked
  8748  01059A  90D8               	bcf	status,0,c
  8749  01059C  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8750  01059E  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8751  0105A0  0100               	movlb	0	; () banked
  8752  0105A2  51C7               	movf	??_Port_Set& (0+255),w,b
  8753  0105A4  0100               	movlb	0	; () banked
  8754  0105A6  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8755  0105A8  0100               	movlb	0	; () banked
  8756  0105AA  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8757  0105AC  0100               	movlb	0	; () banked
  8758  0105AE  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8762  0105B0  0E08               	movlw	8
  8763  0105B2  0100               	movlb	0	; () banked
  8764  0105B4  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8765  0105B6  0100               	movlb	0	; () banked
  8766  0105B8  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8767  0105BA  0E00               	movlw	0
  8768  0105BC  0100               	movlb	0	; () banked
  8769  0105BE  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8770  0105C0  0100               	movlb	0	; () banked
  8771  0105C2  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8772  0105C4  0E02               	movlw	2
  8773  0105C6  0100               	movlb	0	; () banked
  8774  0105C8  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8775  0105CA  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8776  0105CE  0100               	movlb	0	; () banked
  8777  0105D0  6FC7               	movwf	??_Port_Set& (0+255),b
  8778  0105D2  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8779  0105D4  0100               	movlb	0	; () banked
  8780  0105D6  3BC7               	swapf	??_Port_Set& (0+255),f,b
  8781  0105D8  3BC8               	swapf	(??_Port_Set+1)& (0+255),f,b
  8782  0105DA  0EF0               	movlw	240
  8783  0105DC  17C8               	andwf	(??_Port_Set+1)& (0+255),f,b
  8784  0105DE  51C7               	movf	??_Port_Set& (0+255),w,b
  8785  0105E0  0B0F               	andlw	15
  8786  0105E2  13C8               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8787  0105E4  0EF0               	movlw	240
  8788  0105E6  17C7               	andwf	??_Port_Set& (0+255),f,b
  8789  0105E8  0100               	movlb	0	; () banked
  8790  0105EA  51C7               	movf	??_Port_Set& (0+255),w,b
  8791  0105EC  0100               	movlb	0	; () banked
  8792  0105EE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8793  0105F0  0100               	movlb	0	; () banked
  8794  0105F2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8795  0105F4  0100               	movlb	0	; () banked
  8796  0105F6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8800  0105F8  0E08               	movlw	8
  8801  0105FA  0100               	movlb	0	; () banked
  8802  0105FC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8803  0105FE  0100               	movlb	0	; () banked
  8804  010600  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8805  010602  0E00               	movlw	0
  8806  010604  0100               	movlb	0	; () banked
  8807  010606  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8808  010608  0100               	movlb	0	; () banked
  8809  01060A  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8810  01060C  0E03               	movlw	3
  8811  01060E  0100               	movlb	0	; () banked
  8812  010610  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8813  010612  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8814  010616  0100               	movlb	0	; () banked
  8815  010618  6FC7               	movwf	??_Port_Set& (0+255),b
  8816  01061A  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8817  01061C  0E06               	movlw	6
  8818  01061E                     u7345:
  8819  01061E  90D8               	bcf	status,0,c
  8820  010620  0100               	movlb	0	; () banked
  8821  010622  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8822  010624  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8823  010626  2EE8               	decfsz	wreg,f,c
  8824  010628  D7FA               	goto	u7345
  8825  01062A  0100               	movlb	0	; () banked
  8826  01062C  51C7               	movf	??_Port_Set& (0+255),w,b
  8827  01062E  0100               	movlb	0	; () banked
  8828  010630  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8829  010632  0100               	movlb	0	; () banked
  8830  010634  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8831  010636  0100               	movlb	0	; () banked
  8832  010638  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8836  01063A  0E08               	movlw	8
  8837  01063C  0100               	movlb	0	; () banked
  8838  01063E  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8839  010640  0100               	movlb	0	; () banked
  8840  010642  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8841  010644  0E00               	movlw	0
  8842  010646  0100               	movlb	0	; () banked
  8843  010648  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8844  01064A  0100               	movlb	0	; () banked
  8845  01064C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8846  01064E  0E04               	movlw	4
  8847  010650  0100               	movlb	0	; () banked
  8848  010652  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8849  010654  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8850  010658  0100               	movlb	0	; () banked
  8851  01065A  6FC7               	movwf	??_Port_Set& (0+255),b
  8852  01065C  0100               	movlb	0	; () banked
  8853  01065E  51C7               	movf	??_Port_Set& (0+255),w,b
  8854  010660  0100               	movlb	0	; () banked
  8855  010662  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8856  010664  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8857  010666  0100               	movlb	0	; () banked
  8858  010668  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8859  01066A  0100               	movlb	0	; () banked
  8860  01066C  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8861  01066E  0100               	movlb	0	; () banked
  8862  010670  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8863  010672  0100               	movlb	0	; () banked
  8864  010674  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8868  010676  0E08               	movlw	8
  8869  010678  0100               	movlb	0	; () banked
  8870  01067A  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8871  01067C  0100               	movlb	0	; () banked
  8872  01067E  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8873  010680  0E00               	movlw	0
  8874  010682  0100               	movlb	0	; () banked
  8875  010684  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8876  010686  0100               	movlb	0	; () banked
  8877  010688  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8878  01068A  0E05               	movlw	5
  8879  01068C  0100               	movlb	0	; () banked
  8880  01068E  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8881  010690  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8882  010694  0100               	movlb	0	; () banked
  8883  010696  6FC7               	movwf	??_Port_Set& (0+255),b
  8884  010698  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8885  01069A  0E0A               	movlw	10
  8886  01069C                     u7355:
  8887  01069C  90D8               	bcf	status,0,c
  8888  01069E  0100               	movlb	0	; () banked
  8889  0106A0  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8890  0106A2  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8891  0106A4  2EE8               	decfsz	wreg,f,c
  8892  0106A6  D7FA               	goto	u7355
  8893  0106A8  0100               	movlb	0	; () banked
  8894  0106AA  51C7               	movf	??_Port_Set& (0+255),w,b
  8895  0106AC  0100               	movlb	0	; () banked
  8896  0106AE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8897  0106B0  0100               	movlb	0	; () banked
  8898  0106B2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8899  0106B4  0100               	movlb	0	; () banked
  8900  0106B6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8904  0106B8  0E08               	movlw	8
  8905  0106BA  0100               	movlb	0	; () banked
  8906  0106BC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8907  0106BE  0100               	movlb	0	; () banked
  8908  0106C0  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8909  0106C2  0E00               	movlw	0
  8910  0106C4  0100               	movlb	0	; () banked
  8911  0106C6  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8912  0106C8  0100               	movlb	0	; () banked
  8913  0106CA  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8914  0106CC  0E06               	movlw	6
  8915  0106CE  0100               	movlb	0	; () banked
  8916  0106D0  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8917  0106D2  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8918  0106D6  0100               	movlb	0	; () banked
  8919  0106D8  6FC7               	movwf	??_Port_Set& (0+255),b
  8920  0106DA  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8921  0106DC  0E0C               	movlw	12
  8922  0106DE                     u7365:
  8923  0106DE  90D8               	bcf	status,0,c
  8924  0106E0  0100               	movlb	0	; () banked
  8925  0106E2  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8926  0106E4  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8927  0106E6  2EE8               	decfsz	wreg,f,c
  8928  0106E8  D7FA               	goto	u7365
  8929  0106EA  0100               	movlb	0	; () banked
  8930  0106EC  51C7               	movf	??_Port_Set& (0+255),w,b
  8931  0106EE  0100               	movlb	0	; () banked
  8932  0106F0  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8933  0106F2  0100               	movlb	0	; () banked
  8934  0106F4  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8935  0106F6  0100               	movlb	0	; () banked
  8936  0106F8  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8940  0106FA  0E08               	movlw	8
  8941  0106FC  0100               	movlb	0	; () banked
  8942  0106FE  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8943  010700  0100               	movlb	0	; () banked
  8944  010702  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8945  010704  0E00               	movlw	0
  8946  010706  0100               	movlb	0	; () banked
  8947  010708  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8948  01070A  0100               	movlb	0	; () banked
  8949  01070C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8950  01070E  0E07               	movlw	7
  8951  010710  0100               	movlb	0	; () banked
  8952  010712  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8953  010714  ECE9  F0A1         	call	_Word_GetPair	;wreg free
  8954  010718  0100               	movlb	0	; () banked
  8955  01071A  6FC7               	movwf	??_Port_Set& (0+255),b
  8956  01071C  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8957  01071E  0E0E               	movlw	14
  8958  010720                     u7375:
  8959  010720  90D8               	bcf	status,0,c
  8960  010722  0100               	movlb	0	; () banked
  8961  010724  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8962  010726  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8963  010728  2EE8               	decfsz	wreg,f,c
  8964  01072A  D7FA               	goto	u7375
  8965  01072C  0100               	movlb	0	; () banked
  8966  01072E  51C7               	movf	??_Port_Set& (0+255),w,b
  8967  010730  0100               	movlb	0	; () banked
  8968  010732  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8969  010734  0100               	movlb	0	; () banked
  8970  010736  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8971  010738  0100               	movlb	0	; () banked
  8972  01073A  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8973                           
  8974                           ;Port.c: 584: if (TypeRequired == TypeActual)
  8975  01073C  0100               	movlb	0	; () banked
  8976  01073E  51D9               	movf	Port_Set@TypeActual& (0+255),w,b
  8977  010740  0100               	movlb	0	; () banked
  8978  010742  19D7               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  8979  010744  E148               	bnz	l528
  8980  010746  0100               	movlb	0	; () banked
  8981  010748  51DA               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  8982  01074A  0100               	movlb	0	; () banked
  8983  01074C  19D8               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  8984  01074E  A4D8               	btfss	status,2,c
  8985  010750  0012               	return	
  8986  010752  D032               	goto	l526
  8987  010754                     
  8988                           ; BSR set to: 0
  8989                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  8990                           
  8991                           ; BSR set to: 0
  8992  010754  0100               	movlb	0	; () banked
  8993  010756  EE20 F002          	lfsr	2,2
  8994  01075A  51C4               	movf	Port_Set@pInput& (0+255),w,b
  8995  01075C  26D9               	addwf	fsr2l,f,c
  8996  01075E  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8997  010760  22DA               	addwfc	fsr2h,f,c
  8998  010762  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  8999  010766  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9000  01076A  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9001  01076E  ECB4  F0A4         	call	_Byte_SetByte	;wreg free
  9002                           
  9003                           ;Port.c: 594: break;
  9004  010772  0012               	return	
  9005  010774                     
  9006                           ;Port.c: 597: pValue = ~pValue;
  9007  010774  0100               	movlb	0	; () banked
  9008  010776  1FC6               	comf	Port_Set@pValue& (0+255),f,b
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  9012  010778  0100               	movlb	0	; () banked
  9013  01077A  EE20 F002          	lfsr	2,2
  9014  01077E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  9015  010780  26D9               	addwf	fsr2l,f,c
  9016  010782  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9017  010784  22DA               	addwfc	fsr2h,f,c
  9018  010786  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  9019  01078A  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9020  01078E  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9021  010792  ECB4  F0A4         	call	_Byte_SetByte	;wreg free
  9022                           
  9023                           ;Port.c: 599: break;
  9024  010796  0012               	return	
  9025  010798                     
  9026                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  9027  010798  0100               	movlb	0	; () banked
  9028  01079A  EE20 F004          	lfsr	2,4
  9029  01079E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  9030  0107A0  26D9               	addwf	fsr2l,f,c
  9031  0107A2  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9032  0107A4  22DA               	addwfc	fsr2h,f,c
  9033  0107A6  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  9034  0107AA  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9035  0107AE  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9036  0107B2  ECB4  F0A4         	call	_Byte_SetByte	;wreg free
  9037                           
  9038                           ;Port.c: 606: }
  9039                           
  9040                           ;Port.c: 605: break;
  9041                           
  9042                           ;Port.c: 604: default:
  9043                           
  9044                           ;Port.c: 603: break;
  9045  0107B6  0012               	return	
  9046  0107B8                     l526:
  9047  0107B8  0100               	movlb	0	; () banked
  9048  0107BA  51DB               	movf	Port_Set@Type& (0+255),w,b
  9049                           
  9050                           ; Switch size 1, requested type "space"
  9051                           ; Number of cases is 4, Range of values is 0 to 3
  9052                           ; switch strategies available:
  9053                           ; Name         Instructions Cycles
  9054                           ; simple_byte           13     7 (average)
  9055                           ;	Chosen strategy is simple_byte
  9056  0107BC  0A00               	xorlw	0	; case 0
  9057  0107BE  B4D8               	btfsc	status,2,c
  9058  0107C0  0012               	return	
  9059  0107C2  0A01               	xorlw	1	; case 1
  9060  0107C4  B4D8               	btfsc	status,2,c
  9061  0107C6  D7C6               	goto	l529
  9062  0107C8  0A03               	xorlw	3	; case 2
  9063  0107CA  B4D8               	btfsc	status,2,c
  9064  0107CC  D7D3               	goto	l531
  9065  0107CE  0A01               	xorlw	1	; case 3
  9066  0107D0  A4D8               	btfss	status,2,c
  9067                           
  9068                           ; BSR set to: 0
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;Port.c: 607: }
  9072  0107D2  0012               	return	
  9073  0107D4  D7E1               	goto	l532
  9074  0107D6                     l528:
  9075  0107D6  0012               	return		;funcret
  9076  0107D8                     __end_of_Port_Set:
  9077                           	opt stack 0
  9078                           tosu	equ	0xFFF
  9079                           tosh	equ	0xFFE
  9080                           tosl	equ	0xFFD
  9081                           pclath	equ	0xFFA
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           postinc0	equ	0xFEE
  9089                           wreg	equ	0xFE8
  9090                           indf1	equ	0xFE7
  9091                           postdec1	equ	0xFE5
  9092                           fsr1h	equ	0xFE2
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _Byte_SetByte *****************
  9102 ;; Defined at:
  9103 ;;		line 110 in file "Library/Types.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9106 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  9107 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9108 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9109 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9110 ;;		 -> NULL(0), 
  9111 ;;  pValue          1    2[BANK0 ] unsigned char 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		fsr2l, fsr2h
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9123 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;Total ram usage:        3 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    7
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		_Port_Set
  9134 ;;		_I2C_Init
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text37
  9139  014968                     __ptext37:
  9140                           	opt stack 0
  9141  014968                     _Byte_SetByte:
  9142                           	opt stack 20
  9143                           
  9144                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  9145                           
  9146                           ;incstack = 0
  9147  014968  C0B5  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  9148  01496C  C0B6  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  9149  014970  C0B7  FFDF         	movff	Byte_SetByte@pValue,indf2
  9150  014974  0012               	return		;funcret
  9151  014976                     __end_of_Byte_SetByte:
  9152                           	opt stack 0
  9153                           tosu	equ	0xFFF
  9154                           tosh	equ	0xFFE
  9155                           tosl	equ	0xFFD
  9156                           pclath	equ	0xFFA
  9157                           tblptru	equ	0xFF8
  9158                           tblptrh	equ	0xFF7
  9159                           tblptrl	equ	0xFF6
  9160                           tablat	equ	0xFF5
  9161                           prodh	equ	0xFF4
  9162                           prodl	equ	0xFF3
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           indf1	equ	0xFE7
  9166                           postdec1	equ	0xFE5
  9167                           fsr1h	equ	0xFE2
  9168                           fsr1l	equ	0xFE1
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176 ;; *************** function _GetPortTRIS *****************
  9177 ;; Defined at:
  9178 ;;		line 67 in file "Library/Port.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  pInput          1    wreg     enum E6786
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  pInput          1    2[BANK0 ] enum E6786
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  2    0[BANK0 ] PTR struct Byte
  9185 ;; Registers used:
  9186 ;;		wreg, status,2, status,0
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9192 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;Total ram usage:        3 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    7
  9199 ;; This function calls:
  9200 ;;		Nothing
  9201 ;; This function is called by:
  9202 ;;		_Port_Init
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           	psect	text38
  9207  012FAA                     __ptext38:
  9208                           	opt stack 0
  9209  012FAA                     _GetPortTRIS:
  9210                           	opt stack 21
  9211                           
  9212                           ;incstack = 0
  9213                           ;GetPortTRIS@pInput stored from wreg
  9214  012FAA  0100               	movlb	0	; () banked
  9215  012FAC  6FB7               	movwf	GetPortTRIS@pInput& (0+255),b
  9216                           
  9217                           ;Port.c: 69: switch (pInput)
  9218  012FAE  D038               	goto	l363
  9219  012FB0                     
  9220                           ;Port.c: 72: return (BytePtr)&TRISA;
  9221  012FB0  0E92               	movlw	146
  9222  012FB2  0100               	movlb	0	; () banked
  9223  012FB4  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9224  012FB6  0E0F               	movlw	15
  9225  012FB8  0100               	movlb	0	; () banked
  9226  012FBA  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9227                           
  9228                           ; BSR set to: 0
  9229  012FBC  0012               	return	
  9230  012FBE                     
  9231                           ; BSR set to: 0
  9232                           ;Port.c: 74: return (BytePtr)&TRISB;
  9233                           
  9234                           ; BSR set to: 0
  9235  012FBE  0E93               	movlw	147
  9236  012FC0  0100               	movlb	0	; () banked
  9237  012FC2  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9238  012FC4  0E0F               	movlw	15
  9239  012FC6  0100               	movlb	0	; () banked
  9240  012FC8  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9241                           
  9242                           ; BSR set to: 0
  9243  012FCA  0012               	return	
  9244  012FCC                     
  9245                           ; BSR set to: 0
  9246                           ;Port.c: 76: return (BytePtr)&TRISC;
  9247                           
  9248                           ; BSR set to: 0
  9249  012FCC  0E94               	movlw	148
  9250  012FCE  0100               	movlb	0	; () banked
  9251  012FD0  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9252  012FD2  0E0F               	movlw	15
  9253  012FD4  0100               	movlb	0	; () banked
  9254  012FD6  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9255                           
  9256                           ; BSR set to: 0
  9257  012FD8  0012               	return	
  9258  012FDA                     
  9259                           ; BSR set to: 0
  9260                           ;Port.c: 78: return (BytePtr)&TRISD;
  9261                           
  9262                           ; BSR set to: 0
  9263  012FDA  0E95               	movlw	149
  9264  012FDC  0100               	movlb	0	; () banked
  9265  012FDE  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9266  012FE0  0E0F               	movlw	15
  9267  012FE2  0100               	movlb	0	; () banked
  9268  012FE4  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271  012FE6  0012               	return	
  9272  012FE8                     
  9273                           ; BSR set to: 0
  9274                           ;Port.c: 80: return (BytePtr)&TRISE;
  9275                           
  9276                           ; BSR set to: 0
  9277  012FE8  0E96               	movlw	150
  9278  012FEA  0100               	movlb	0	; () banked
  9279  012FEC  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9280  012FEE  0E0F               	movlw	15
  9281  012FF0  0100               	movlb	0	; () banked
  9282  012FF2  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9283                           
  9284                           ; BSR set to: 0
  9285  012FF4  0012               	return	
  9286  012FF6                     
  9287                           ; BSR set to: 0
  9288                           ;Port.c: 82: return (BytePtr)&TRISF;
  9289                           
  9290                           ; BSR set to: 0
  9291  012FF6  0E97               	movlw	151
  9292  012FF8  0100               	movlb	0	; () banked
  9293  012FFA  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9294  012FFC  0E0F               	movlw	15
  9295  012FFE  0100               	movlb	0	; () banked
  9296  013000  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9297                           
  9298                           ; BSR set to: 0
  9299  013002  0012               	return	
  9300  013004                     
  9301                           ; BSR set to: 0
  9302                           ;Port.c: 84: return (BytePtr)&TRISG;
  9303                           
  9304                           ; BSR set to: 0
  9305  013004  0E98               	movlw	152
  9306  013006  0100               	movlb	0	; () banked
  9307  013008  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9308  01300A  0E0F               	movlw	15
  9309  01300C  0100               	movlb	0	; () banked
  9310  01300E  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9311                           
  9312                           ; BSR set to: 0
  9313  013010  0012               	return	
  9314  013012                     
  9315                           ; BSR set to: 0
  9316                           ;Port.c: 86: return (void*)0;
  9317                           
  9318                           ; BSR set to: 0
  9319  013012  0E00               	movlw	0
  9320  013014  0100               	movlb	0	; () banked
  9321  013016  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9322  013018  0E00               	movlw	0
  9323  01301A  0100               	movlb	0	; () banked
  9324  01301C  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;Port.c: 87: }
  9328                           
  9329                           ; BSR set to: 0
  9330  01301E  0012               	return	
  9331  013020                     l363:
  9332                           
  9333                           ; BSR set to: 0
  9334  013020  0100               	movlb	0	; () banked
  9335  013022  51B7               	movf	GetPortTRIS@pInput& (0+255),w,b
  9336                           
  9337                           ; Switch size 1, requested type "space"
  9338                           ; Number of cases is 7, Range of values is 0 to 6
  9339                           ; switch strategies available:
  9340                           ; Name         Instructions Cycles
  9341                           ; simple_byte           22    12 (average)
  9342                           ;	Chosen strategy is simple_byte
  9343  013024  0A00               	xorlw	0	; case 0
  9344  013026  B4D8               	btfsc	status,2,c
  9345  013028  D7C3               	goto	l364
  9346  01302A  0A01               	xorlw	1	; case 1
  9347  01302C  B4D8               	btfsc	status,2,c
  9348  01302E  D7C7               	goto	l366
  9349  013030  0A03               	xorlw	3	; case 2
  9350  013032  B4D8               	btfsc	status,2,c
  9351  013034  D7CB               	goto	l367
  9352  013036  0A01               	xorlw	1	; case 3
  9353  013038  B4D8               	btfsc	status,2,c
  9354  01303A  D7CF               	goto	l368
  9355  01303C  0A07               	xorlw	7	; case 4
  9356  01303E  B4D8               	btfsc	status,2,c
  9357  013040  D7D3               	goto	l369
  9358  013042  0A01               	xorlw	1	; case 5
  9359  013044  B4D8               	btfsc	status,2,c
  9360  013046  D7D7               	goto	l370
  9361  013048  0A03               	xorlw	3	; case 6
  9362  01304A  B4D8               	btfsc	status,2,c
  9363  01304C  D7DB               	goto	l371
  9364  01304E  D7E1               	goto	l372
  9365  013050                     __end_of_GetPortTRIS:
  9366                           	opt stack 0
  9367                           tosu	equ	0xFFF
  9368                           tosh	equ	0xFFE
  9369                           tosl	equ	0xFFD
  9370                           pclath	equ	0xFFA
  9371                           tblptru	equ	0xFF8
  9372                           tblptrh	equ	0xFF7
  9373                           tblptrl	equ	0xFF6
  9374                           tablat	equ	0xFF5
  9375                           prodh	equ	0xFF4
  9376                           prodl	equ	0xFF3
  9377                           postinc0	equ	0xFEE
  9378                           wreg	equ	0xFE8
  9379                           indf1	equ	0xFE7
  9380                           postdec1	equ	0xFE5
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function _GetPortProperties *****************
  9391 ;; Defined at:
  9392 ;;		line 21 in file "Library/Port.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  pInput          1    wreg     enum E6786
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  pInput          1    2[BANK0 ] enum E6786
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;Total ram usage:        3 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    7
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		_Port_Init
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           	psect	text39
  9421  013050                     __ptext39:
  9422                           	opt stack 0
  9423  013050                     _GetPortProperties:
  9424                           	opt stack 21
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;incstack = 0
  9428                           ;GetPortProperties@pInput stored from wreg
  9429  013050  0100               	movlb	0	; () banked
  9430  013052  6FB7               	movwf	GetPortProperties@pInput& (0+255),b
  9431                           
  9432                           ;Port.c: 23: switch (pInput)
  9433  013054  D038               	goto	l337
  9434  013056                     
  9435                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9436  013056  0EA5               	movlw	low _PortA_Property
  9437  013058  0100               	movlb	0	; () banked
  9438  01305A  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9439  01305C  0EFF               	movlw	high _PortA_Property
  9440  01305E  0100               	movlb	0	; () banked
  9441  013060  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9442                           
  9443                           ; BSR set to: 0
  9444  013062  0012               	return	
  9445  013064                     
  9446                           ; BSR set to: 0
  9447                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9448                           
  9449                           ; BSR set to: 0
  9450  013064  0EA3               	movlw	low _PortB_Property
  9451  013066  0100               	movlb	0	; () banked
  9452  013068  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9453  01306A  0EFF               	movlw	high _PortB_Property
  9454  01306C  0100               	movlb	0	; () banked
  9455  01306E  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9456                           
  9457                           ; BSR set to: 0
  9458  013070  0012               	return	
  9459  013072                     
  9460                           ; BSR set to: 0
  9461                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9462                           
  9463                           ; BSR set to: 0
  9464  013072  0EA1               	movlw	low _PortC_Property
  9465  013074  0100               	movlb	0	; () banked
  9466  013076  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9467  013078  0EFF               	movlw	high _PortC_Property
  9468  01307A  0100               	movlb	0	; () banked
  9469  01307C  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9470                           
  9471                           ; BSR set to: 0
  9472  01307E  0012               	return	
  9473  013080                     
  9474                           ; BSR set to: 0
  9475                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9476                           
  9477                           ; BSR set to: 0
  9478  013080  0E9F               	movlw	low _PortD_Property
  9479  013082  0100               	movlb	0	; () banked
  9480  013084  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9481  013086  0EFF               	movlw	high _PortD_Property
  9482  013088  0100               	movlb	0	; () banked
  9483  01308A  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486  01308C  0012               	return	
  9487  01308E                     
  9488                           ; BSR set to: 0
  9489                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9490                           
  9491                           ; BSR set to: 0
  9492  01308E  0E9D               	movlw	low _PortE_Property
  9493  013090  0100               	movlb	0	; () banked
  9494  013092  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9495  013094  0EFF               	movlw	high _PortE_Property
  9496  013096  0100               	movlb	0	; () banked
  9497  013098  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9498                           
  9499                           ; BSR set to: 0
  9500  01309A  0012               	return	
  9501  01309C                     
  9502                           ; BSR set to: 0
  9503                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9504                           
  9505                           ; BSR set to: 0
  9506  01309C  0E9B               	movlw	low _PortF_Property
  9507  01309E  0100               	movlb	0	; () banked
  9508  0130A0  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9509  0130A2  0EFF               	movlw	high _PortF_Property
  9510  0130A4  0100               	movlb	0	; () banked
  9511  0130A6  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9512                           
  9513                           ; BSR set to: 0
  9514  0130A8  0012               	return	
  9515  0130AA                     
  9516                           ; BSR set to: 0
  9517                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9518                           
  9519                           ; BSR set to: 0
  9520  0130AA  0E99               	movlw	low _PortG_Property
  9521  0130AC  0100               	movlb	0	; () banked
  9522  0130AE  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9523  0130B0  0EFF               	movlw	high _PortG_Property
  9524  0130B2  0100               	movlb	0	; () banked
  9525  0130B4  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9526                           
  9527                           ; BSR set to: 0
  9528  0130B6  0012               	return	
  9529  0130B8                     
  9530                           ; BSR set to: 0
  9531                           ;Port.c: 40: return (void*)0;
  9532                           
  9533                           ; BSR set to: 0
  9534  0130B8  0E00               	movlw	0
  9535  0130BA  0100               	movlb	0	; () banked
  9536  0130BC  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9537  0130BE  0E00               	movlw	0
  9538  0130C0  0100               	movlb	0	; () banked
  9539  0130C2  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9540                           
  9541                           ; BSR set to: 0
  9542                           ;Port.c: 41: }
  9543                           
  9544                           ; BSR set to: 0
  9545  0130C4  0012               	return	
  9546  0130C6                     l337:
  9547                           
  9548                           ; BSR set to: 0
  9549  0130C6  0100               	movlb	0	; () banked
  9550  0130C8  51B7               	movf	GetPortProperties@pInput& (0+255),w,b
  9551                           
  9552                           ; Switch size 1, requested type "space"
  9553                           ; Number of cases is 7, Range of values is 0 to 6
  9554                           ; switch strategies available:
  9555                           ; Name         Instructions Cycles
  9556                           ; simple_byte           22    12 (average)
  9557                           ;	Chosen strategy is simple_byte
  9558  0130CA  0A00               	xorlw	0	; case 0
  9559  0130CC  B4D8               	btfsc	status,2,c
  9560  0130CE  D7C3               	goto	l338
  9561  0130D0  0A01               	xorlw	1	; case 1
  9562  0130D2  B4D8               	btfsc	status,2,c
  9563  0130D4  D7C7               	goto	l340
  9564  0130D6  0A03               	xorlw	3	; case 2
  9565  0130D8  B4D8               	btfsc	status,2,c
  9566  0130DA  D7CB               	goto	l341
  9567  0130DC  0A01               	xorlw	1	; case 3
  9568  0130DE  B4D8               	btfsc	status,2,c
  9569  0130E0  D7CF               	goto	l342
  9570  0130E2  0A07               	xorlw	7	; case 4
  9571  0130E4  B4D8               	btfsc	status,2,c
  9572  0130E6  D7D3               	goto	l343
  9573  0130E8  0A01               	xorlw	1	; case 5
  9574  0130EA  B4D8               	btfsc	status,2,c
  9575  0130EC  D7D7               	goto	l344
  9576  0130EE  0A03               	xorlw	3	; case 6
  9577  0130F0  B4D8               	btfsc	status,2,c
  9578  0130F2  D7DB               	goto	l345
  9579  0130F4  D7E1               	goto	l346
  9580  0130F6                     __end_of_GetPortProperties:
  9581                           	opt stack 0
  9582                           tosu	equ	0xFFF
  9583                           tosh	equ	0xFFE
  9584                           tosl	equ	0xFFD
  9585                           pclath	equ	0xFFA
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           postinc0	equ	0xFEE
  9593                           wreg	equ	0xFE8
  9594                           indf1	equ	0xFE7
  9595                           postdec1	equ	0xFE5
  9596                           fsr1h	equ	0xFE2
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           fsr2h	equ	0xFDA
  9602                           fsr2l	equ	0xFD9
  9603                           status	equ	0xFD8
  9604                           
  9605 ;; *************** function _GetPortPORT *****************
  9606 ;; Defined at:
  9607 ;;		line 44 in file "Library/Port.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  pInput          1    wreg     enum E6786
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;  pInput          1    2[BANK0 ] enum E6786
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  2    0[BANK0 ] PTR struct Byte
  9614 ;; Registers used:
  9615 ;;		wreg, status,2, status,0
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;Total ram usage:        3 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; Hardware stack levels required when called:    7
  9628 ;; This function calls:
  9629 ;;		Nothing
  9630 ;; This function is called by:
  9631 ;;		_Port_Init
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           	psect	text40
  9636  0130F6                     __ptext40:
  9637                           	opt stack 0
  9638  0130F6                     _GetPortPORT:
  9639                           	opt stack 21
  9640                           
  9641                           ; BSR set to: 0
  9642                           ;incstack = 0
  9643                           ;GetPortPORT@pInput stored from wreg
  9644  0130F6  0100               	movlb	0	; () banked
  9645  0130F8  6FB7               	movwf	GetPortPORT@pInput& (0+255),b
  9646                           
  9647                           ;Port.c: 46: switch (pInput)
  9648  0130FA  D038               	goto	l350
  9649  0130FC                     
  9650                           ;Port.c: 49: return (BytePtr)&PORTA;
  9651  0130FC  0E80               	movlw	128
  9652  0130FE  0100               	movlb	0	; () banked
  9653  013100  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9654  013102  0E0F               	movlw	15
  9655  013104  0100               	movlb	0	; () banked
  9656  013106  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9657                           
  9658                           ; BSR set to: 0
  9659  013108  0012               	return	
  9660  01310A                     
  9661                           ; BSR set to: 0
  9662                           ;Port.c: 51: return (BytePtr)&PORTB;
  9663                           
  9664                           ; BSR set to: 0
  9665  01310A  0E81               	movlw	129
  9666  01310C  0100               	movlb	0	; () banked
  9667  01310E  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9668  013110  0E0F               	movlw	15
  9669  013112  0100               	movlb	0	; () banked
  9670  013114  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9671                           
  9672                           ; BSR set to: 0
  9673  013116  0012               	return	
  9674  013118                     
  9675                           ; BSR set to: 0
  9676                           ;Port.c: 53: return (BytePtr)&PORTC;
  9677                           
  9678                           ; BSR set to: 0
  9679  013118  0E82               	movlw	130
  9680  01311A  0100               	movlb	0	; () banked
  9681  01311C  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9682  01311E  0E0F               	movlw	15
  9683  013120  0100               	movlb	0	; () banked
  9684  013122  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9685                           
  9686                           ; BSR set to: 0
  9687  013124  0012               	return	
  9688  013126                     
  9689                           ; BSR set to: 0
  9690                           ;Port.c: 55: return (BytePtr)&PORTD;
  9691                           
  9692                           ; BSR set to: 0
  9693  013126  0E83               	movlw	131
  9694  013128  0100               	movlb	0	; () banked
  9695  01312A  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9696  01312C  0E0F               	movlw	15
  9697  01312E  0100               	movlb	0	; () banked
  9698  013130  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9699                           
  9700                           ; BSR set to: 0
  9701  013132  0012               	return	
  9702  013134                     
  9703                           ; BSR set to: 0
  9704                           ;Port.c: 57: return (BytePtr)&PORTE;
  9705                           
  9706                           ; BSR set to: 0
  9707  013134  0E84               	movlw	132
  9708  013136  0100               	movlb	0	; () banked
  9709  013138  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9710  01313A  0E0F               	movlw	15
  9711  01313C  0100               	movlb	0	; () banked
  9712  01313E  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9713                           
  9714                           ; BSR set to: 0
  9715  013140  0012               	return	
  9716  013142                     
  9717                           ; BSR set to: 0
  9718                           ;Port.c: 59: return (BytePtr)&PORTF;
  9719                           
  9720                           ; BSR set to: 0
  9721  013142  0E85               	movlw	133
  9722  013144  0100               	movlb	0	; () banked
  9723  013146  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9724  013148  0E0F               	movlw	15
  9725  01314A  0100               	movlb	0	; () banked
  9726  01314C  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9727                           
  9728                           ; BSR set to: 0
  9729  01314E  0012               	return	
  9730  013150                     
  9731                           ; BSR set to: 0
  9732                           ;Port.c: 61: return (BytePtr)&PORTG;
  9733                           
  9734                           ; BSR set to: 0
  9735  013150  0E86               	movlw	134
  9736  013152  0100               	movlb	0	; () banked
  9737  013154  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9738  013156  0E0F               	movlw	15
  9739  013158  0100               	movlb	0	; () banked
  9740  01315A  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9741                           
  9742                           ; BSR set to: 0
  9743  01315C  0012               	return	
  9744  01315E                     
  9745                           ; BSR set to: 0
  9746                           ;Port.c: 63: return (void*)0;
  9747                           
  9748                           ; BSR set to: 0
  9749  01315E  0E00               	movlw	0
  9750  013160  0100               	movlb	0	; () banked
  9751  013162  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9752  013164  0E00               	movlw	0
  9753  013166  0100               	movlb	0	; () banked
  9754  013168  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9755                           
  9756                           ; BSR set to: 0
  9757                           ;Port.c: 64: }
  9758                           
  9759                           ; BSR set to: 0
  9760  01316A  0012               	return	
  9761  01316C                     l350:
  9762                           
  9763                           ; BSR set to: 0
  9764  01316C  0100               	movlb	0	; () banked
  9765  01316E  51B7               	movf	GetPortPORT@pInput& (0+255),w,b
  9766                           
  9767                           ; Switch size 1, requested type "space"
  9768                           ; Number of cases is 7, Range of values is 0 to 6
  9769                           ; switch strategies available:
  9770                           ; Name         Instructions Cycles
  9771                           ; simple_byte           22    12 (average)
  9772                           ;	Chosen strategy is simple_byte
  9773  013170  0A00               	xorlw	0	; case 0
  9774  013172  B4D8               	btfsc	status,2,c
  9775  013174  D7C3               	goto	l351
  9776  013176  0A01               	xorlw	1	; case 1
  9777  013178  B4D8               	btfsc	status,2,c
  9778  01317A  D7C7               	goto	l353
  9779  01317C  0A03               	xorlw	3	; case 2
  9780  01317E  B4D8               	btfsc	status,2,c
  9781  013180  D7CB               	goto	l354
  9782  013182  0A01               	xorlw	1	; case 3
  9783  013184  B4D8               	btfsc	status,2,c
  9784  013186  D7CF               	goto	l355
  9785  013188  0A07               	xorlw	7	; case 4
  9786  01318A  B4D8               	btfsc	status,2,c
  9787  01318C  D7D3               	goto	l356
  9788  01318E  0A01               	xorlw	1	; case 5
  9789  013190  B4D8               	btfsc	status,2,c
  9790  013192  D7D7               	goto	l357
  9791  013194  0A03               	xorlw	3	; case 6
  9792  013196  B4D8               	btfsc	status,2,c
  9793  013198  D7DB               	goto	l358
  9794  01319A  D7E1               	goto	l359
  9795  01319C                     __end_of_GetPortPORT:
  9796                           	opt stack 0
  9797                           tosu	equ	0xFFF
  9798                           tosh	equ	0xFFE
  9799                           tosl	equ	0xFFD
  9800                           pclath	equ	0xFFA
  9801                           tblptru	equ	0xFF8
  9802                           tblptrh	equ	0xFF7
  9803                           tblptrl	equ	0xFF6
  9804                           tablat	equ	0xFF5
  9805                           prodh	equ	0xFF4
  9806                           prodl	equ	0xFF3
  9807                           postinc0	equ	0xFEE
  9808                           wreg	equ	0xFE8
  9809                           indf1	equ	0xFE7
  9810                           postdec1	equ	0xFE5
  9811                           fsr1h	equ	0xFE2
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           fsr2h	equ	0xFDA
  9817                           fsr2l	equ	0xFD9
  9818                           status	equ	0xFD8
  9819                           
  9820 ;; *************** function _LED_Init *****************
  9821 ;; Defined at:
  9822 ;;		line 15 in file "Library/LED.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;  pLED            1    wreg     enum E6739
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;  pLED            1   45[BANK0 ] enum E6739
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  1    wreg      void 
  9829 ;; Registers used:
  9830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;Total ram usage:        1 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:   12
  9843 ;; This function calls:
  9844 ;;		_LED_Set
  9845 ;;		_Port_SetPinType
  9846 ;; This function is called by:
  9847 ;;		_MXK_Init
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           	psect	text41
  9852  013D3C                     __ptext41:
  9853                           	opt stack 0
  9854  013D3C                     _LED_Init:
  9855                           	opt stack 17
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;incstack = 0
  9859                           ;LED_Init@pLED stored from wreg
  9860  013D3C  0100               	movlb	0	; () banked
  9861  013D3E  6FE2               	movwf	LED_Init@pLED& (0+255),b
  9862                           
  9863                           ;LED.c: 17: switch (pLED)
  9864  013D40  D01E               	goto	l220
  9865  013D42                     
  9866                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9867  013D42  0EA3               	movlw	low _PortC
  9868  013D44  0100               	movlb	0	; () banked
  9869  013D46  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9870  013D48  0E00               	movlw	high _PortC
  9871  013D4A  0100               	movlb	0	; () banked
  9872  013D4C  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9873  013D4E  0E00               	movlw	0
  9874  013D50  0100               	movlb	0	; () banked
  9875  013D52  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9876  013D54  0E03               	movlw	3
  9877  013D56  0100               	movlb	0	; () banked
  9878  013D58  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9879  013D5A  EC64  F08B         	call	_Port_SetPinType	;wreg free
  9880                           
  9881                           ;LED.c: 21: break;
  9882  013D5E  D017               	goto	l222
  9883  013D60                     
  9884                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9885  013D60  0EA3               	movlw	low _PortC
  9886  013D62  0100               	movlb	0	; () banked
  9887  013D64  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9888  013D66  0E00               	movlw	high _PortC
  9889  013D68  0100               	movlb	0	; () banked
  9890  013D6A  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9891  013D6C  0E01               	movlw	1
  9892  013D6E  0100               	movlb	0	; () banked
  9893  013D70  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9894  013D72  0E03               	movlw	3
  9895  013D74  0100               	movlb	0	; () banked
  9896  013D76  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9897  013D78  EC64  F08B         	call	_Port_SetPinType	;wreg free
  9898                           
  9899                           ;LED.c: 25: }
  9900                           
  9901                           ;LED.c: 24: break;
  9902  013D7C  D008               	goto	l222
  9903  013D7E                     l220:
  9904  013D7E  0100               	movlb	0	; () banked
  9905  013D80  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9906                           
  9907                           ; Switch size 1, requested type "space"
  9908                           ; Number of cases is 2, Range of values is 0 to 1
  9909                           ; switch strategies available:
  9910                           ; Name         Instructions Cycles
  9911                           ; simple_byte            7     4 (average)
  9912                           ;	Chosen strategy is simple_byte
  9913  013D82  0A00               	xorlw	0	; case 0
  9914  013D84  B4D8               	btfsc	status,2,c
  9915  013D86  D7DD               	goto	l221
  9916  013D88  0A01               	xorlw	1	; case 1
  9917  013D8A  B4D8               	btfsc	status,2,c
  9918  013D8C  D7E9               	goto	l223
  9919  013D8E                     l222:
  9920                           
  9921                           ;LED.c: 26: LED_Set(pLED, 0);
  9922                           
  9923                           ; BSR set to: 0
  9924  013D8E  0E00               	movlw	0
  9925  013D90  0100               	movlb	0	; () banked
  9926  013D92  6FC9               	movwf	LED_Set@pValue& (0+255),b
  9927  013D94  0100               	movlb	0	; () banked
  9928  013D96  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9929  013D98  ECDC  F09F         	call	_LED_Set
  9930  013D9C  0012               	return		;funcret
  9931  013D9E                     __end_of_LED_Init:
  9932                           	opt stack 0
  9933                           tosu	equ	0xFFF
  9934                           tosh	equ	0xFFE
  9935                           tosl	equ	0xFFD
  9936                           pclath	equ	0xFFA
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodh	equ	0xFF4
  9942                           prodl	equ	0xFF3
  9943                           postinc0	equ	0xFEE
  9944                           wreg	equ	0xFE8
  9945                           indf1	equ	0xFE7
  9946                           postdec1	equ	0xFE5
  9947                           fsr1h	equ	0xFE2
  9948                           fsr1l	equ	0xFE1
  9949                           indf2	equ	0xFDF
  9950                           postinc2	equ	0xFDE
  9951                           postdec2	equ	0xFDD
  9952                           fsr2h	equ	0xFDA
  9953                           fsr2l	equ	0xFD9
  9954                           status	equ	0xFD8
  9955                           
  9956 ;; *************** function _LED_Set *****************
  9957 ;; Defined at:
  9958 ;;		line 33 in file "Library/LED.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  pLED            1    wreg     enum E6739
  9961 ;;  pValue          1   20[BANK0 ] unsigned char 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  pLED            1   21[BANK0 ] enum E6739
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9973 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;Total ram usage:        2 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:   11
  9980 ;; This function calls:
  9981 ;;		_Port_SetPin
  9982 ;; This function is called by:
  9983 ;;		_LED_Init
  9984 ;;		_SYSTEM_Initialize
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           	psect	text42
  9989  013FB8                     __ptext42:
  9990                           	opt stack 0
  9991  013FB8                     _LED_Set:
  9992                           	opt stack 17
  9993                           
  9994                           ;incstack = 0
  9995                           ;LED_Set@pLED stored from wreg
  9996  013FB8  0100               	movlb	0	; () banked
  9997  013FBA  6FCA               	movwf	LED_Set@pLED& (0+255),b
  9998                           
  9999                           ;LED.c: 35: switch (pLED)
 10000  013FBC  D01C               	goto	l227
 10001  013FBE                     
 10002                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 10003  013FBE  0EA3               	movlw	low _PortC
 10004  013FC0  0100               	movlb	0	; () banked
 10005  013FC2  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10006  013FC4  0E00               	movlw	high _PortC
 10007  013FC6  0100               	movlb	0	; () banked
 10008  013FC8  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10009  013FCA  0E00               	movlw	0
 10010  013FCC  0100               	movlb	0	; () banked
 10011  013FCE  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10012  013FD0  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 10013  013FD4  EC44  F094         	call	_Port_SetPin	;wreg free
 10014                           
 10015                           ;LED.c: 39: break;
 10016  013FD8  0012               	return	
 10017  013FDA                     
 10018                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 10019  013FDA  0EA3               	movlw	low _PortC
 10020  013FDC  0100               	movlb	0	; () banked
 10021  013FDE  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10022  013FE0  0E00               	movlw	high _PortC
 10023  013FE2  0100               	movlb	0	; () banked
 10024  013FE4  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10025  013FE6  0E01               	movlw	1
 10026  013FE8  0100               	movlb	0	; () banked
 10027  013FEA  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10028  013FEC  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 10029  013FF0  EC44  F094         	call	_Port_SetPin	;wreg free
 10030                           
 10031                           ;LED.c: 43: }
 10032                           
 10033                           ;LED.c: 42: break;
 10034  013FF4  0012               	return	
 10035  013FF6                     l227:
 10036  013FF6  0100               	movlb	0	; () banked
 10037  013FF8  51CA               	movf	LED_Set@pLED& (0+255),w,b
 10038                           
 10039                           ; Switch size 1, requested type "space"
 10040                           ; Number of cases is 2, Range of values is 0 to 1
 10041                           ; switch strategies available:
 10042                           ; Name         Instructions Cycles
 10043                           ; simple_byte            7     4 (average)
 10044                           ;	Chosen strategy is simple_byte
 10045  013FFA  0A00               	xorlw	0	; case 0
 10046  013FFC  B4D8               	btfsc	status,2,c
 10047  013FFE  D7DF               	goto	l228
 10048  014000  0A01               	xorlw	1	; case 1
 10049  014002  A4D8               	btfss	status,2,c
 10050  014004  0012               	return	
 10051  014006  D7E9               	goto	l230
 10052  014008                     __end_of_LED_Set:
 10053                           	opt stack 0
 10054                           tosu	equ	0xFFF
 10055                           tosh	equ	0xFFE
 10056                           tosl	equ	0xFFD
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           postinc0	equ	0xFEE
 10065                           wreg	equ	0xFE8
 10066                           indf1	equ	0xFE7
 10067                           postdec1	equ	0xFE5
 10068                           fsr1h	equ	0xFE2
 10069                           fsr1l	equ	0xFE1
 10070                           indf2	equ	0xFDF
 10071                           postinc2	equ	0xFDE
 10072                           postdec2	equ	0xFDD
 10073                           fsr2h	equ	0xFDA
 10074                           fsr2l	equ	0xFD9
 10075                           status	equ	0xFD8
 10076                           
 10077 ;; *************** function _MXK_Dequeue *****************
 10078 ;; Defined at:
 10079 ;;		line 153 in file "Library/MXK.c"
 10080 ;; Parameters:    Size  Location     Type
 10081 ;;		None
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;		None
 10084 ;; Return value:  Size  Location     Type
 10085 ;;                  1    wreg      void 
 10086 ;; Registers used:
 10087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10088 ;; Tracked objects:
 10089 ;;		On entry : 0/0
 10090 ;;		On exit  : 0/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;Total ram usage:        0 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:   12
 10100 ;; This function calls:
 10101 ;;		Absolute function
 10102 ;;		_Motor_Step
 10103 ;; This function is called by:
 10104 ;;		_main
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text43
 10109  014356                     __ptext43:
 10110                           	opt stack 0
 10111  014356                     _MXK_Dequeue:
 10112                           	opt stack 18
 10113                           
 10114                           ;MXK.c: 155: if (lQueue)
 10115                           
 10116                           ;incstack = 0
 10117  014356  0100               	movlb	0	; () banked
 10118  014358  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10119  01435A  0100               	movlb	0	; () banked
 10120  01435C  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10121  01435E  0100               	movlb	0	; () banked
 10122  014360  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10123  014362  B4D8               	btfsc	status,2,c
 10124  014364  D00D               	goto	u9359
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;MXK.c: 156: lQueue();
 10128  014366  D801               	call	u9358
 10129  014368  D00B               	goto	u9359
 10130  01436A                     u9358:
 10131  01436A  0005               	push	
 10132  01436C  6EFA               	movwf	pclath,c
 10133  01436E  0100               	movlb	0	; () banked
 10134  014370  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10135  014372  6EFD               	movwf	tosl,c
 10136  014374  5170               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 10137  014376  6EFE               	movwf	tosh,c
 10138  014378  5171               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 10139  01437A  6EFF               	movwf	tosu,c
 10140  01437C  50FA               	movf	pclath,w,c
 10141  01437E  0012               	return		;indir
 10142  014380                     u9359:
 10143                           
 10144                           ;MXK.c: 157: lQueue = 0;
 10145  014380  0E00               	movlw	0
 10146  014382  0100               	movlb	0	; () banked
 10147  014384  6F6F               	movwf	_lQueue& (0+255),b	;volatile
 10148  014386  0E00               	movlw	0
 10149  014388  0100               	movlb	0	; () banked
 10150  01438A  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10151  01438C  0E00               	movlw	0
 10152  01438E  0100               	movlb	0	; () banked
 10153  014390  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10154                           
 10155                           ; BSR set to: 0
 10156  014392  0012               	return		;funcret
 10157  014394                     __end_of_MXK_Dequeue:
 10158                           	opt stack 0
 10159                           tosu	equ	0xFFF
 10160                           tosh	equ	0xFFE
 10161                           tosl	equ	0xFFD
 10162                           pclath	equ	0xFFA
 10163                           tblptru	equ	0xFF8
 10164                           tblptrh	equ	0xFF7
 10165                           tblptrl	equ	0xFF6
 10166                           tablat	equ	0xFF5
 10167                           prodh	equ	0xFF4
 10168                           prodl	equ	0xFF3
 10169                           postinc0	equ	0xFEE
 10170                           wreg	equ	0xFE8
 10171                           indf1	equ	0xFE7
 10172                           postdec1	equ	0xFE5
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           fsr2h	equ	0xFDA
 10179                           fsr2l	equ	0xFD9
 10180                           status	equ	0xFD8
 10181                           
 10182 ;; *************** function _Motor_Step *****************
 10183 ;; Defined at:
 10184 ;;		line 75 in file "Library/Motor.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10202 ;;Total ram usage:        2 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:   11
 10205 ;; This function calls:
 10206 ;;		_MXK_Queue
 10207 ;;		_MXK_Release
 10208 ;;		_MXK_SwitchTo
 10209 ;;		_Port_SetPin
 10210 ;;		_Timer0_Restart
 10211 ;;		_Timer0_Stop
 10212 ;; This function is called by:
 10213 ;;		_Motor_Init
 10214 ;;		_Timer0_ISR
 10215 ;;		_MXK_Dequeue
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           	psect	text44
 10220  0122F6                     __ptext44:
 10221                           	opt stack 0
 10222  0122F6                     _Motor_Step:
 10223                           	opt stack 0
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;Skip over the trampoline to the duplicate function for level 2
 10227  0122F6  B251               	btfsc	btemp,1,c
 10228  0122F8  EF0E  F092         	goto	i2_Motor_Step
 10229  0122FC                     _Motor_Step$intlevel0:
 10230                           	opt stack 18
 10231                           
 10232                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10233                           
 10234                           ;incstack = 0
 10235  0122FC  0100               	movlb	0	; () banked
 10236  0122FE  EE20 F004          	lfsr	2,4
 10237  012302  517D               	movf	_lMotor& (0+255),w,b
 10238  012304  26D9               	addwf	fsr2l,f,c
 10239  012306  517E               	movf	(_lMotor+1)& (0+255),w,b
 10240  012308  22DA               	addwfc	fsr2h,f,c
 10241  01230A  50DF               	movf	indf2,w,c
 10242  01230C  EC4A  F0A1         	call	_MXK_SwitchTo
 10243  012310  0900               	iorlw	0
 10244  012312  B4D8               	btfsc	status,2,c
 10245  012314  D07A               	goto	l1627
 10246                           
 10247                           ;Motor.c: 78: {
 10248                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10249  012316  C07D  FFD9         	movff	_lMotor,fsr2l
 10250  01231A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10251  01231E  50DE               	movf	postinc2,w,c
 10252  012320  10DE               	iorwf	postinc2,w,c
 10253  012322  B4D8               	btfsc	status,2,c
 10254  012324  D06D               	goto	l1628
 10255                           
 10256                           ;Motor.c: 80: {
 10257                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10258  012326  C07D  FFD9         	movff	_lMotor,fsr2l
 10259  01232A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10260  01232E  0E01               	movlw	1
 10261  012330  BEDB               	btfsc	plusw2,7,c
 10262  012332  D026               	goto	l1629
 10263  012334  0E01               	movlw	1
 10264  012336  50DB               	movf	plusw2,w,c
 10265  012338  E103               	bnz	u7840
 10266  01233A  04DE               	decf	postinc2,w,c
 10267  01233C  A0D8               	btfss	status,0,c
 10268  01233E  D020               	goto	l1629
 10269  012340                     u7840:
 10270                           
 10271                           ;Motor.c: 83: {
 10272                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10273  012340  C07D  FFD9         	movff	_lMotor,fsr2l
 10274  012344  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10275  012348  28DE               	incf	postinc2,w,c
 10276  01234A  E104               	bnz	u7850
 10277  01234C  0E7F               	movlw	127
 10278  01234E  18DE               	xorwf	postinc2,w,c
 10279  012350  B4D8               	btfsc	status,2,c
 10280  012352  D007               	goto	l1630
 10281  012354                     u7850:
 10282                           
 10283                           ;Motor.c: 85: lMotor->mDelta --;
 10284  012354  C07D  FFD9         	movff	_lMotor,fsr2l
 10285  012358  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10286  01235C  06DE               	decf	postinc2,f,c
 10287  01235E  0E00               	movlw	0
 10288  012360  5ADD               	subwfb	postdec2,f,c
 10289  012362                     l1630:
 10290                           
 10291                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10292  012362  0E8F               	movlw	low _PortE
 10293  012364  0100               	movlb	0	; () banked
 10294  012366  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10295  012368  0E00               	movlw	high _PortE
 10296  01236A  0100               	movlb	0	; () banked
 10297  01236C  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10298  01236E  0E00               	movlw	0
 10299  012370  0100               	movlb	0	; () banked
 10300  012372  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10301  012374  0E01               	movlw	1
 10302  012376  0100               	movlb	0	; () banked
 10303  012378  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10304  01237A  EC44  F094         	call	_Port_SetPin	;wreg free
 10305                           
 10306                           ;Motor.c: 88: }
 10307  01237E  D01F               	goto	l1631
 10308  012380                     l1629:
 10309                           
 10310                           ;Motor.c: 89: else
 10311                           ;Motor.c: 90: {
 10312                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10313  012380  C07D  FFD9         	movff	_lMotor,fsr2l
 10314  012384  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10315  012388  04DE               	decf	postinc2,w,c
 10316  01238A  E104               	bnz	u7860
 10317  01238C  0E80               	movlw	128
 10318  01238E  18DE               	xorwf	postinc2,w,c
 10319  012390  B4D8               	btfsc	status,2,c
 10320  012392  D007               	goto	l1632
 10321  012394                     u7860:
 10322                           
 10323                           ;Motor.c: 92: lMotor->mDelta ++;
 10324  012394  C07D  FFD9         	movff	_lMotor,fsr2l
 10325  012398  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10326  01239C  2ADE               	incf	postinc2,f,c
 10327  01239E  0E00               	movlw	0
 10328  0123A0  22DD               	addwfc	postdec2,f,c
 10329  0123A2                     l1632:
 10330                           
 10331                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10332  0123A2  0E8F               	movlw	low _PortE
 10333  0123A4  0100               	movlb	0	; () banked
 10334  0123A6  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10335  0123A8  0E00               	movlw	high _PortE
 10336  0123AA  0100               	movlb	0	; () banked
 10337  0123AC  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10338  0123AE  0E00               	movlw	0
 10339  0123B0  0100               	movlb	0	; () banked
 10340  0123B2  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10341  0123B4  0E00               	movlw	0
 10342  0123B6  0100               	movlb	0	; () banked
 10343  0123B8  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10344  0123BA  EC44  F094         	call	_Port_SetPin	;wreg free
 10345  0123BE                     l1631:
 10346                           
 10347                           ;Motor.c: 95: }
 10348                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10349  0123BE  0E8F               	movlw	low _PortE
 10350  0123C0  0100               	movlb	0	; () banked
 10351  0123C2  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10352  0123C4  0E00               	movlw	high _PortE
 10353  0123C6  0100               	movlb	0	; () banked
 10354  0123C8  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10355  0123CA  0E01               	movlw	1
 10356  0123CC  0100               	movlb	0	; () banked
 10357  0123CE  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10358  0123D0  0E01               	movlw	1
 10359  0123D2  0100               	movlb	0	; () banked
 10360  0123D4  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10361  0123D6  EC44  F094         	call	_Port_SetPin	;wreg free
 10362                           
 10363                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10364  0123DA  0E8F               	movlw	low _PortE
 10365  0123DC  0100               	movlb	0	; () banked
 10366  0123DE  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10367  0123E0  0E00               	movlw	high _PortE
 10368  0123E2  0100               	movlb	0	; () banked
 10369  0123E4  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10370  0123E6  0E01               	movlw	1
 10371  0123E8  0100               	movlb	0	; () banked
 10372  0123EA  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10373  0123EC  0E00               	movlw	0
 10374  0123EE  0100               	movlb	0	; () banked
 10375  0123F0  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10376  0123F2  EC44  F094         	call	_Port_SetPin	;wreg free
 10377                           
 10378                           ;Motor.c: 101: MXK_Release();
 10379  0123F6  ECFB  F0A3         	call	_MXK_Release	;wreg free
 10380                           
 10381                           ;Motor.c: 102: Timer0_Restart();
 10382  0123FA  ECC9  F0A4         	call	_Timer0_Restart	;wreg free
 10383                           
 10384                           ;Motor.c: 103: return;
 10385  0123FE  0012               	return	
 10386  012400                     l1628:
 10387                           
 10388                           ;Motor.c: 104: }
 10389                           ;Motor.c: 105: MXK_Release();
 10390  012400  ECFB  F0A3         	call	_MXK_Release	;wreg free
 10391                           
 10392                           ;Motor.c: 106: Timer0_Stop();
 10393  012404  ECEF  F0A4         	call	_Timer0_Stop	;wreg free
 10394                           
 10395                           ;Motor.c: 107: return;
 10396  012408  0012               	return	
 10397  01240A                     l1627:
 10398                           
 10399                           ;Motor.c: 108: }
 10400                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10401  01240A  C072  F0B5         	movff	_lStepFunction,MXK_Queue@pCallback
 10402  01240E  C073  F0B6         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10403  012412  C074  F0B7         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10404  012416  ECBB  F0A4         	call	_MXK_Queue	;wreg free
 10405  01241A  0012               	return		;funcret
 10406  01241C                     __end_of_Motor_Step:
 10407                           	opt stack 0
 10408                           tosu	equ	0xFFF
 10409                           tosh	equ	0xFFE
 10410                           tosl	equ	0xFFD
 10411                           pclath	equ	0xFFA
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           indf1	equ	0xFE7
 10421                           postdec1	equ	0xFE5
 10422                           fsr1h	equ	0xFE2
 10423                           fsr1l	equ	0xFE1
 10424                           indf2	equ	0xFDF
 10425                           postinc2	equ	0xFDE
 10426                           postdec2	equ	0xFDD
 10427                           plusw2	equ	0xFDB
 10428                           fsr2h	equ	0xFDA
 10429                           fsr2l	equ	0xFD9
 10430                           status	equ	0xFD8
 10431                           
 10432 ;; *************** function _Timer0_Stop *****************
 10433 ;; Defined at:
 10434 ;;		line 89 in file "Library/Timer0.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      void 
 10441 ;; Registers used:
 10442 ;;		None
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;Total ram usage:        0 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    7
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_Motor_Step
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text45
 10463  0149DE                     __ptext45:
 10464                           	opt stack 0
 10465  0149DE                     _Timer0_Stop:
 10466                           	opt stack 21
 10467                           
 10468                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10469                           
 10470                           ;incstack = 0
 10471  0149DE  9AF2               	bcf	intcon,5,c	;volatile
 10472                           
 10473                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10474  0149E0  94F2               	bcf	intcon,2,c	;volatile
 10475  0149E2  0012               	return		;funcret
 10476  0149E4                     __end_of_Timer0_Stop:
 10477                           	opt stack 0
 10478                           tosu	equ	0xFFF
 10479                           tosh	equ	0xFFE
 10480                           tosl	equ	0xFFD
 10481                           pclath	equ	0xFFA
 10482                           tblptru	equ	0xFF8
 10483                           tblptrh	equ	0xFF7
 10484                           tblptrl	equ	0xFF6
 10485                           tablat	equ	0xFF5
 10486                           prodh	equ	0xFF4
 10487                           prodl	equ	0xFF3
 10488                           intcon	equ	0xFF2
 10489                           postinc0	equ	0xFEE
 10490                           wreg	equ	0xFE8
 10491                           indf1	equ	0xFE7
 10492                           postdec1	equ	0xFE5
 10493                           fsr1h	equ	0xFE2
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           plusw2	equ	0xFDB
 10499                           fsr2h	equ	0xFDA
 10500                           fsr2l	equ	0xFD9
 10501                           status	equ	0xFD8
 10502                           
 10503 ;; *************** function _Timer0_Restart *****************
 10504 ;; Defined at:
 10505 ;;		line 83 in file "Library/Timer0.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  1    wreg      void 
 10512 ;; Registers used:
 10513 ;;		None
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    7
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_Motor_Step
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text46
 10534  014992                     __ptext46:
 10535                           	opt stack 0
 10536  014992                     _Timer0_Restart:
 10537                           	opt stack 21
 10538                           
 10539                           ;Timer0.c: 85: TMR0 = COUNTER;
 10540                           
 10541                           ;incstack = 0
 10542  014992  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10543  014996  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10544                           
 10545                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10546  01499A  8AF2               	bsf	intcon,5,c	;volatile
 10547  01499C  0012               	return		;funcret
 10548  01499E                     __end_of_Timer0_Restart:
 10549                           	opt stack 0
 10550                           tosu	equ	0xFFF
 10551                           tosh	equ	0xFFE
 10552                           tosl	equ	0xFFD
 10553                           pclath	equ	0xFFA
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           postinc0	equ	0xFEE
 10562                           wreg	equ	0xFE8
 10563                           indf1	equ	0xFE7
 10564                           postdec1	equ	0xFE5
 10565                           fsr1h	equ	0xFE2
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           plusw2	equ	0xFDB
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function _MXK_SwitchTo *****************
 10576 ;; Defined at:
 10577 ;;		line 105 in file "Library/MXK.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  pModule         1    wreg     enum E6927
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  pModule         1    7[BANK0 ] enum E6927
 10582 ;;  CUR             1    6[BANK0 ] unsigned char 
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  1    wreg      unsigned char 
 10585 ;; Registers used:
 10586 ;;		wreg, status,2, status,0, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;Total ram usage:        2 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    8
 10599 ;; This function calls:
 10600 ;;		_delay_us
 10601 ;; This function is called by:
 10602 ;;		_Motor_Step
 10603 ;;		_main
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text47
 10608  014294                     __ptext47:
 10609                           	opt stack 0
 10610  014294                     _MXK_SwitchTo:
 10611                           	opt stack 22
 10612                           
 10613                           ;incstack = 0
 10614                           ;MXK_SwitchTo@pModule stored from wreg
 10615  014294  0100               	movlb	0	; () banked
 10616  014296  6FBC               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10617                           
 10618                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10619  014298  5086               	movf	3974,w,c	;volatile
 10620  01429A  0B0F               	andlw	15
 10621  01429C  0100               	movlb	0	; () banked
 10622  01429E  6FBB               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10626  0142A0  504B               	movf	_Bus_State,w,c
 10627  0142A2  A4D8               	btfss	status,2,c
 10628  0142A4  D002               	goto	l1730
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;MXK.c: 110: return 0;
 10632  0142A6  0E00               	movlw	0
 10633                           
 10634                           ; BSR set to: 0
 10635  0142A8  0012               	return	
 10636  0142AA                     l1730:
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10640                           
 10641                           ; BSR set to: 0
 10642  0142AA  0E00               	movlw	0
 10643  0142AC  6E4B               	movwf	_Bus_State,c
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;MXK.c: 114: if (CUR != pModule)
 10647  0142AE  0100               	movlb	0	; () banked
 10648  0142B0  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10649  0142B2  0100               	movlb	0	; () banked
 10650  0142B4  19BB               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10651  0142B6  B4D8               	btfsc	status,2,c
 10652  0142B8  D00C               	goto	l1732
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;MXK.c: 115: {
 10656                           ;MXK.c: 116: PORTG &= ~(0xF);
 10657  0142BA  0EF0               	movlw	240
 10658  0142BC  1686               	andwf	3974,f,c	;volatile
 10659                           
 10660                           ;MXK.c: 117: PORTG |= pModule;
 10661  0142BE  0100               	movlb	0	; () banked
 10662  0142C0  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10663  0142C2  1286               	iorwf	3974,f,c	;volatile
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;MXK.c: 120: delay_us(10);
 10667  0142C4  0E00               	movlw	0
 10668  0142C6  0100               	movlb	0	; () banked
 10669  0142C8  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10670  0142CA  0E0A               	movlw	10
 10671  0142CC  6FB5               	movwf	delay_us@us& (0+255),b
 10672  0142CE  ECB3  F09F         	call	_delay_us	;wreg free
 10673  0142D2                     l1732:
 10674                           
 10675                           ;MXK.c: 121: }
 10676                           ;MXK.c: 122: return 1;
 10677  0142D2  0E01               	movlw	1
 10678  0142D4  0012               	return	
 10679  0142D6                     __end_of_MXK_SwitchTo:
 10680                           	opt stack 0
 10681                           tosu	equ	0xFFF
 10682                           tosh	equ	0xFFE
 10683                           tosl	equ	0xFFD
 10684                           pclath	equ	0xFFA
 10685                           tblptru	equ	0xFF8
 10686                           tblptrh	equ	0xFF7
 10687                           tblptrl	equ	0xFF6
 10688                           tablat	equ	0xFF5
 10689                           prodh	equ	0xFF4
 10690                           prodl	equ	0xFF3
 10691                           intcon	equ	0xFF2
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           indf1	equ	0xFE7
 10695                           postdec1	equ	0xFE5
 10696                           fsr1h	equ	0xFE2
 10697                           fsr1l	equ	0xFE1
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           plusw2	equ	0xFDB
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function _MXK_Release *****************
 10707 ;; Defined at:
 10708 ;;		line 130 in file "Library/MXK.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      unsigned char 
 10715 ;; Registers used:
 10716 ;;		wreg, status,2, status,0
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;Total ram usage:        0 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    7
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_Motor_Step
 10733 ;;		_main
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text48
 10738  0147F6                     __ptext48:
 10739                           	opt stack 0
 10740  0147F6                     _MXK_Release:
 10741                           	opt stack 23
 10742                           
 10743                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10744                           
 10745                           ;incstack = 0
 10746  0147F6  0E01               	movlw	1
 10747  0147F8  6E4B               	movwf	_Bus_State,c
 10748                           
 10749                           ;MXK.c: 134: if (lQueue != 0)
 10750  0147FA  0100               	movlb	0	; () banked
 10751  0147FC  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10752  0147FE  0100               	movlb	0	; () banked
 10753  014800  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10754  014802  0100               	movlb	0	; () banked
 10755  014804  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10756  014806  B4D8               	btfsc	status,2,c
 10757  014808  D002               	goto	l1735
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;MXK.c: 135: return 1;
 10761  01480A  0E01               	movlw	1
 10762                           
 10763                           ; BSR set to: 0
 10764  01480C  0012               	return	
 10765  01480E                     l1735:
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;MXK.c: 137: return 0;
 10769                           
 10770                           ; BSR set to: 0
 10771  01480E  0E00               	movlw	0
 10772  014810  0012               	return	
 10773  014812                     __end_of_MXK_Release:
 10774                           	opt stack 0
 10775                           tosu	equ	0xFFF
 10776                           tosh	equ	0xFFE
 10777                           tosl	equ	0xFFD
 10778                           pclath	equ	0xFFA
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           postinc0	equ	0xFEE
 10787                           wreg	equ	0xFE8
 10788                           indf1	equ	0xFE7
 10789                           postdec1	equ	0xFE5
 10790                           fsr1h	equ	0xFE2
 10791                           fsr1l	equ	0xFE1
 10792                           indf2	equ	0xFDF
 10793                           postinc2	equ	0xFDE
 10794                           postdec2	equ	0xFDD
 10795                           plusw2	equ	0xFDB
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function _MXK_Queue *****************
 10801 ;; Defined at:
 10802 ;;		line 144 in file "Library/MXK.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10805 ;;		 -> Absolute function(1), Motor_Step(1), 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      void 
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, status,0
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10817 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;Total ram usage:        3 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    7
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_Motor_Step
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text49
 10832  014976                     __ptext49:
 10833                           	opt stack 0
 10834  014976                     _MXK_Queue:
 10835                           	opt stack 21
 10836                           
 10837                           ;MXK.c: 146: lQueue = pCallback;
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;incstack = 0
 10841  014976  C0B5  F06F         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10842  01497A  C0B6  F070         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10843  01497E  C0B7  F071         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10844  014982  0012               	return		;funcret
 10845  014984                     __end_of_MXK_Queue:
 10846                           	opt stack 0
 10847                           tosu	equ	0xFFF
 10848                           tosh	equ	0xFFE
 10849                           tosl	equ	0xFFD
 10850                           pclath	equ	0xFFA
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           postinc0	equ	0xFEE
 10859                           wreg	equ	0xFE8
 10860                           indf1	equ	0xFE7
 10861                           postdec1	equ	0xFE5
 10862                           fsr1h	equ	0xFE2
 10863                           fsr1l	equ	0xFE1
 10864                           indf2	equ	0xFDF
 10865                           postinc2	equ	0xFDE
 10866                           postdec2	equ	0xFDD
 10867                           plusw2	equ	0xFDB
 10868                           fsr2h	equ	0xFDA
 10869                           fsr2l	equ	0xFD9
 10870                           status	equ	0xFD8
 10871                           
 10872 ;; *************** function _MXK_BlockSwitchTo *****************
 10873 ;; Defined at:
 10874 ;;		line 82 in file "Library/MXK.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  pModule         1    wreg     enum E6927
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  pModule         1    7[BANK0 ] enum E6927
 10879 ;;  CUR             1    6[BANK0 ] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      unsigned char 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10893 ;;Total ram usage:        2 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    8
 10896 ;; This function calls:
 10897 ;;		_delay_us
 10898 ;; This function is called by:
 10899 ;;		_main
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text50
 10904  014394                     __ptext50:
 10905                           	opt stack 0
 10906  014394                     _MXK_BlockSwitchTo:
 10907                           	opt stack 22
 10908                           
 10909                           ;incstack = 0
 10910                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10911  014394  0100               	movlb	0	; () banked
 10912  014396  6FBC               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10913                           
 10914                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10915  014398  5086               	movf	3974,w,c	;volatile
 10916  01439A  0B0F               	andlw	15
 10917  01439C  0100               	movlb	0	; () banked
 10918  01439E  6FBB               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10919  0143A0                     
 10920                           ; BSR set to: 0
 10921                           
 10922                           ; BSR set to: 0
 10923  0143A0  504B               	movf	_Bus_State,w,c
 10924  0143A2  B4D8               	btfsc	status,2,c
 10925  0143A4  D7FD               	goto	l1724
 10926                           
 10927                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10928  0143A6  0E00               	movlw	0
 10929  0143A8  6E4B               	movwf	_Bus_State,c
 10930                           
 10931                           ;MXK.c: 90: if (CUR != pModule)
 10932  0143AA  0100               	movlb	0	; () banked
 10933  0143AC  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10934  0143AE  0100               	movlb	0	; () banked
 10935  0143B0  19BB               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10936  0143B2  B4D8               	btfsc	status,2,c
 10937  0143B4  D00C               	goto	l1726
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;MXK.c: 91: {
 10941                           ;MXK.c: 92: PORTG &= ~(0xF);
 10942  0143B6  0EF0               	movlw	240
 10943  0143B8  1686               	andwf	3974,f,c	;volatile
 10944                           
 10945                           ;MXK.c: 93: PORTG |= pModule;
 10946  0143BA  0100               	movlb	0	; () banked
 10947  0143BC  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10948  0143BE  1286               	iorwf	3974,f,c	;volatile
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;MXK.c: 96: delay_us(10);
 10952  0143C0  0E00               	movlw	0
 10953  0143C2  0100               	movlb	0	; () banked
 10954  0143C4  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10955  0143C6  0E0A               	movlw	10
 10956  0143C8  6FB5               	movwf	delay_us@us& (0+255),b
 10957  0143CA  ECB3  F09F         	call	_delay_us	;wreg free
 10958  0143CE                     l1726:
 10959                           
 10960                           ;MXK.c: 97: }
 10961                           ;MXK.c: 98: return 1;
 10962  0143CE  0E01               	movlw	1
 10963  0143D0  0012               	return	
 10964  0143D2                     __end_of_MXK_BlockSwitchTo:
 10965                           	opt stack 0
 10966                           tosu	equ	0xFFF
 10967                           tosh	equ	0xFFE
 10968                           tosl	equ	0xFFD
 10969                           pclath	equ	0xFFA
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           postinc0	equ	0xFEE
 10978                           wreg	equ	0xFE8
 10979                           indf1	equ	0xFE7
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function _delay_us *****************
 10992 ;; Defined at:
 10993 ;;		line 255 in file "Library/Types.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  us              2    0[BANK0 ] unsigned short 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  u               4    2[BANK0 ] unsigned long 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;                  1    wreg      void 
 11000 ;; Registers used:
 11001 ;;		wreg, status,2, status,0
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;Total ram usage:        6 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    7
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		_MXK_BlockSwitchTo
 11018 ;;		_MXK_SwitchTo
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           	psect	text51
 11023  013F66                     __ptext51:
 11024                           	opt stack 0
 11025  013F66                     _delay_us:
 11026                           	opt stack 22
 11027                           
 11028                           ;Types.c: 256: unsigned long u;
 11029                           ;Types.c: 257: while (us--) {
 11030                           
 11031                           ;incstack = 0
 11032  013F66  D01C               	goto	u7160
 11033  013F68                     l11060:
 11034                           
 11035                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 11036  013F68  0E00               	movlw	0
 11037  013F6A  0100               	movlb	0	; () banked
 11038  013F6C  6FB7               	movwf	delay_us@u& (0+255),b
 11039  013F6E  0E00               	movlw	0
 11040  013F70  6FB8               	movwf	(delay_us@u+1)& (0+255),b
 11041  013F72  0E00               	movlw	0
 11042  013F74  6FB9               	movwf	(delay_us@u+2)& (0+255),b
 11043  013F76  0E00               	movlw	0
 11044  013F78  6FBA               	movwf	(delay_us@u+3)& (0+255),b
 11045  013F7A                     l11062:
 11046                           
 11047                           ; BSR set to: 0
 11048  013F7A  0100               	movlb	0	; () banked
 11049  013F7C  51B7               	movf	delay_us@u& (0+255),w,b
 11050  013F7E  0100               	movlb	0	; () banked
 11051  013F80  11B8               	iorwf	(delay_us@u+1)& (0+255),w,b
 11052  013F82  0100               	movlb	0	; () banked
 11053  013F84  11B9               	iorwf	(delay_us@u+2)& (0+255),w,b
 11054  013F86  0100               	movlb	0	; () banked
 11055  013F88  11BA               	iorwf	(delay_us@u+3)& (0+255),w,b
 11056  013F8A  A4D8               	btfss	status,2,c
 11057  013F8C  D009               	goto	u7160
 11058                           
 11059                           ; BSR set to: 0
 11060                           
 11061                           ; BSR set to: 0
 11062  013F8E  F000               	nop		; ;# 
 11063  013F90  0E01               	movlw	1
 11064  013F92  0100               	movlb	0	; () banked
 11065  013F94  27B7               	addwf	delay_us@u& (0+255),f,b
 11066  013F96  0E00               	movlw	0
 11067  013F98  23B8               	addwfc	(delay_us@u+1)& (0+255),f,b
 11068  013F9A  23B9               	addwfc	(delay_us@u+2)& (0+255),f,b
 11069  013F9C  23BA               	addwfc	(delay_us@u+3)& (0+255),f,b
 11070  013F9E  D7ED               	goto	l11062
 11071  013FA0                     u7160:
 11072                           
 11073                           ; BSR set to: 0
 11074                           
 11075                           ; BSR set to: 0
 11076  013FA0  0100               	movlb	0	; () banked
 11077  013FA2  07B5               	decf	delay_us@us& (0+255),f,b
 11078  013FA4  A0D8               	btfss	status,0,c
 11079  013FA6  07B6               	decf	(delay_us@us+1)& (0+255),f,b
 11080  013FA8  0100               	movlb	0	; () banked
 11081  013FAA  29B5               	incf	delay_us@us& (0+255),w,b
 11082  013FAC  E1DD               	bnz	l11060
 11083  013FAE  0100               	movlb	0	; () banked
 11084  013FB0  29B6               	incf	(delay_us@us+1)& (0+255),w,b
 11085  013FB2  B4D8               	btfsc	status,2,c
 11086  013FB4  0012               	return	
 11087  013FB6  D7D8               	goto	l832
 11088  013FB8                     __end_of_delay_us:
 11089                           	opt stack 0
 11090                           tosu	equ	0xFFF
 11091                           tosh	equ	0xFFE
 11092                           tosl	equ	0xFFD
 11093                           pclath	equ	0xFFA
 11094                           tblptru	equ	0xFF8
 11095                           tblptrh	equ	0xFF7
 11096                           tblptrl	equ	0xFF6
 11097                           tablat	equ	0xFF5
 11098                           prodh	equ	0xFF4
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           postinc0	equ	0xFEE
 11102                           wreg	equ	0xFE8
 11103                           indf1	equ	0xFE7
 11104                           postdec1	equ	0xFE5
 11105                           fsr1h	equ	0xFE2
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           postdec2	equ	0xFDD
 11110                           plusw2	equ	0xFDB
 11111                           fsr2h	equ	0xFDA
 11112                           fsr2l	equ	0xFD9
 11113                           status	equ	0xFD8
 11114                           
 11115 ;; *************** function _LCD_Init *****************
 11116 ;; Defined at:
 11117 ;;		line 172 in file "Library/LCD.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;		None
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;  i               2   55[BANK0 ] unsigned short 
 11122 ;; Return value:  Size  Location     Type
 11123 ;;                  1    wreg      void 
 11124 ;; Registers used:
 11125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11126 ;; Tracked objects:
 11127 ;;		On entry : 0/0
 11128 ;;		On exit  : 0/0
 11129 ;;		Unchanged: 0/0
 11130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;Total ram usage:        4 bytes
 11136 ;; Hardware stack levels used:    1
 11137 ;; Hardware stack levels required when called:   15
 11138 ;; This function calls:
 11139 ;;		_Configure_GPIOs
 11140 ;;		_LCD_Fill
 11141 ;;		_LCD_Write
 11142 ;;		_Set_Rotation
 11143 ;;		_delay_ms
 11144 ;; This function is called by:
 11145 ;;		_main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text52
 11150  011EBE                     __ptext52:
 11151                           	opt stack 0
 11152  011EBE                     _LCD_Init:
 11153                           	opt stack 15
 11154                           
 11155                           ;LCD.c: 174: UINT16 i;
 11156                           ;LCD.c: 175: Configure_GPIOs();
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;incstack = 0
 11160  011EBE  ECC3  F09C         	call	_Configure_GPIOs	;wreg free
 11161                           
 11162                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 11163  011EC2  0E00               	movlw	0
 11164  011EC4  0100               	movlb	0	; () banked
 11165  011EC6  6FED               	movwf	(LCD_Init@i+1)& (0+255),b
 11166  011EC8  0E00               	movlw	0
 11167  011ECA  6FEC               	movwf	LCD_Init@i& (0+255),b
 11168                           
 11169                           ; BSR set to: 0
 11170  011ECC  0100               	movlb	0	; () banked
 11171  011ECE  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11172  011ED0  E106               	bnz	u7930
 11173  011ED2  0E59               	movlw	89
 11174  011ED4  0100               	movlb	0	; () banked
 11175  011ED6  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 11176  011ED8  B0D8               	btfsc	status,0,c
 11177  011EDA  D08B               	goto	u7970
 11178  011EDC  D001               	goto	l85
 11179  011EDE                     u7930:
 11180                           
 11181                           ; BSR set to: 0
 11182  011EDE  D089               	goto	u7970
 11183  011EE0                     l85:
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;LCD.c: 178: {
 11187                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11188                           
 11189                           ; BSR set to: 0
 11190  011EE0  90D8               	bcf	status,0,c
 11191  011EE2  0100               	movlb	0	; () banked
 11192  011EE4  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11193  011EE6  6EF6               	movwf	tblptrl,c
 11194  011EE8  0100               	movlb	0	; () banked
 11195  011EEA  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11196  011EEC  6EF7               	movwf	tblptrh,c
 11197  011EEE  0ECD               	movlw	low _InitList
 11198  011EF0  26F6               	addwf	tblptrl,f,c
 11199  011EF2  0EFC               	movlw	high _InitList
 11200  011EF4  22F7               	addwfc	tblptrh,f,c
 11201  011EF6                     	if	1	;There are 3 active tblptr bytes
 11202  011EF6  6AF8               	clrf	tblptru,c
 11203  011EF8  0E00               	movlw	low (__mediumconst shr (0+16))
 11204  011EFA  22F8               	addwfc	tblptru,f,c
 11205  011EFC                     	endif
 11206  011EFC  0009               	tblrd		*+
 11207  011EFE  0E80               	movlw	128
 11208  011F00  18F5               	xorwf	tablat,w,c
 11209  011F02  0009               	tblrd		*+
 11210  011F04  10F5               	iorwf	tablat,w,c
 11211  011F06  A4D8               	btfss	status,2,c
 11212  011F08  D022               	goto	l87
 11213                           
 11214                           ; BSR set to: 0
 11215  011F0A  0100               	movlb	0	; () banked
 11216  011F0C  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11217  011F0E  E11F               	bnz	l12072
 11218  011F10  0E58               	movlw	88
 11219  011F12  0100               	movlb	0	; () banked
 11220  011F14  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 11221  011F16  B0D8               	btfsc	status,0,c
 11222  011F18  D01A               	goto	l87
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11226  011F1A  0100               	movlb	0	; () banked
 11227  011F1C  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11228  011F1E  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11229  011F20  90D8               	bcf	status,0,c
 11230  011F22  0100               	movlb	0	; () banked
 11231  011F24  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11232  011F26  6EF6               	movwf	tblptrl,c
 11233  011F28  0100               	movlb	0	; () banked
 11234  011F2A  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11235  011F2C  6EF7               	movwf	tblptrh,c
 11236  011F2E  0ECD               	movlw	low _InitList
 11237  011F30  26F6               	addwf	tblptrl,f,c
 11238  011F32  0EFC               	movlw	high _InitList
 11239  011F34  22F7               	addwfc	tblptrh,f,c
 11240  011F36                     	if	1	;There are 3 active tblptr bytes
 11241  011F36  6AF8               	clrf	tblptru,c
 11242  011F38  0E00               	movlw	low (__mediumconst shr (0+16))
 11243  011F3A  22F8               	addwfc	tblptru,f,c
 11244  011F3C                     	endif
 11245  011F3C  0009               	tblrd		*+
 11246  011F3E  CFF5 F0B5          	movff	tablat,delay_ms@ms
 11247  011F42  000A               	tblrd		*-
 11248  011F44  CFF5 F0B6          	movff	tablat,delay_ms@ms+1
 11249  011F48  EC9C  F09D         	call	_delay_ms	;wreg free
 11250  011F4C  D04B               	goto	l90
 11251  011F4E                     l87:
 11252  011F4E                     l12072:
 11253                           
 11254                           ;LCD.c: 181: else
 11255                           ;LCD.c: 182: {
 11256                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11257  011F4E  90D8               	bcf	status,0,c
 11258  011F50  0100               	movlb	0	; () banked
 11259  011F52  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11260  011F54  6EF6               	movwf	tblptrl,c
 11261  011F56  0100               	movlb	0	; () banked
 11262  011F58  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11263  011F5A  6EF7               	movwf	tblptrh,c
 11264  011F5C  0ECD               	movlw	low _InitList
 11265  011F5E  26F6               	addwf	tblptrl,f,c
 11266  011F60  0EFC               	movlw	high _InitList
 11267  011F62  22F7               	addwfc	tblptrh,f,c
 11268  011F64                     	if	1	;There are 3 active tblptr bytes
 11269  011F64  6AF8               	clrf	tblptru,c
 11270  011F66  0E00               	movlw	low (__mediumconst shr (0+16))
 11271  011F68  22F8               	addwfc	tblptru,f,c
 11272  011F6A                     	endif
 11273  011F6A  0009               	tblrd		*+
 11274  011F6C  0E00               	movlw	0
 11275  011F6E  5EF5               	subwf	tablat,f,c
 11276  011F70  0009               	tblrd		*+
 11277  011F72  0E01               	movlw	1
 11278  011F74  5AF5               	subwfb	tablat,f,c
 11279  011F76  A0D8               	btfss	status,0,c
 11280  011F78  D020               	goto	l89
 11281                           
 11282                           ; BSR set to: 0
 11283  011F7A  0E00               	movlw	0
 11284  011F7C  0100               	movlb	0	; () banked
 11285  011F7E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11286  011F80  90D8               	bcf	status,0,c
 11287  011F82  0100               	movlb	0	; () banked
 11288  011F84  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11289  011F86  6EF6               	movwf	tblptrl,c
 11290  011F88  0100               	movlb	0	; () banked
 11291  011F8A  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11292  011F8C  6EF7               	movwf	tblptrh,c
 11293  011F8E  0ECD               	movlw	low _InitList
 11294  011F90  26F6               	addwf	tblptrl,f,c
 11295  011F92  0EFC               	movlw	high _InitList
 11296  011F94  22F7               	addwfc	tblptrh,f,c
 11297  011F96                     	if	1	;There are 3 active tblptr bytes
 11298  011F96  6AF8               	clrf	tblptru,c
 11299  011F98  0E00               	movlw	low (__mediumconst shr (0+16))
 11300  011F9A  22F8               	addwfc	tblptru,f,c
 11301  011F9C                     	endif
 11302  011F9C  0009               	tblrd		*+
 11303  011F9E  CFF5 F0EA          	movff	tablat,??_LCD_Init
 11304  011FA2  0009               	tblrd		*+
 11305  011FA4  CFF5 F0EB          	movff	tablat,??_LCD_Init+1
 11306  011FA8  C0EB  F0EA         	movff	??_LCD_Init+1,??_LCD_Init
 11307  011FAC  0100               	movlb	0	; () banked
 11308  011FAE  6BEB               	clrf	(??_LCD_Init+1)& (0+255),b
 11309  011FB0  0100               	movlb	0	; () banked
 11310  011FB2  51EA               	movf	??_LCD_Init& (0+255),w,b
 11311  011FB4  EC54  F0A3         	call	_LCD_Write
 11312  011FB8  D015               	goto	l90
 11313  011FBA                     l89:
 11314                           
 11315                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11316  011FBA  0E01               	movlw	1
 11317  011FBC  0100               	movlb	0	; () banked
 11318  011FBE  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11319  011FC0  90D8               	bcf	status,0,c
 11320  011FC2  0100               	movlb	0	; () banked
 11321  011FC4  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11322  011FC6  6EF6               	movwf	tblptrl,c
 11323  011FC8  0100               	movlb	0	; () banked
 11324  011FCA  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11325  011FCC  6EF7               	movwf	tblptrh,c
 11326  011FCE  0ECD               	movlw	low _InitList
 11327  011FD0  26F6               	addwf	tblptrl,f,c
 11328  011FD2  0EFC               	movlw	high _InitList
 11329  011FD4  22F7               	addwfc	tblptrh,f,c
 11330  011FD6                     	if	1	;There are 3 active tblptr bytes
 11331  011FD6  6AF8               	clrf	tblptru,c
 11332  011FD8  0E00               	movlw	low (__mediumconst shr (0+16))
 11333  011FDA  22F8               	addwfc	tblptru,f,c
 11334  011FDC                     	endif
 11335  011FDC  0008               	tblrd		*
 11336  011FDE  50F5               	movf	tablat,w,c
 11337  011FE0  EC54  F0A3         	call	_LCD_Write
 11338  011FE4                     l90:
 11339  011FE4  0100               	movlb	0	; () banked
 11340  011FE6  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11341  011FE8  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11342                           
 11343                           ; BSR set to: 0
 11344  011FEA  0100               	movlb	0	; () banked
 11345  011FEC  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11346  011FEE  E101               	bnz	l12082
 11347  011FF0  D770               	goto	L9
 11348  011FF2                     u7970:
 11349  011FF2                     l12082:
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;LCD.c: 185: }
 11353                           ;LCD.c: 186: }
 11354                           ;LCD.c: 187: delay_ms(100);
 11355  011FF2  0E00               	movlw	0
 11356  011FF4  0100               	movlb	0	; () banked
 11357  011FF6  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11358  011FF8  0E64               	movlw	100
 11359  011FFA  6FB5               	movwf	delay_ms@ms& (0+255),b
 11360  011FFC  EC9C  F09D         	call	_delay_ms	;wreg free
 11361                           
 11362                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11363  012000  0E00               	movlw	0
 11364  012002  0100               	movlb	0	; () banked
 11365  012004  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11366  012006  0E29               	movlw	41
 11367  012008  EC54  F0A3         	call	_LCD_Write
 11368                           
 11369                           ;LCD.c: 189: Set_Rotation(1);
 11370  01200C  0E01               	movlw	1
 11371  01200E  ECBF  F099         	call	_Set_Rotation
 11372                           
 11373                           ;LCD.c: 191: delay_ms(100);
 11374  012012  0E00               	movlw	0
 11375  012014  0100               	movlb	0	; () banked
 11376  012016  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11377  012018  0E64               	movlw	100
 11378  01201A  6FB5               	movwf	delay_ms@ms& (0+255),b
 11379  01201C  EC9C  F09D         	call	_delay_ms	;wreg free
 11380                           
 11381                           ;LCD.c: 192: LCD_Fill(0x0000);
 11382  012020  0E00               	movlw	0
 11383  012022  0100               	movlb	0	; () banked
 11384  012024  6FBF               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11385  012026  0E00               	movlw	0
 11386  012028  6FBE               	movwf	LCD_Fill@pColour& (0+255),b
 11387  01202A  EC87  F09F         	call	_LCD_Fill	;wreg free
 11388  01202E  0012               	return		;funcret
 11389  012030                     __end_of_LCD_Init:
 11390                           	opt stack 0
 11391                           tosu	equ	0xFFF
 11392                           tosh	equ	0xFFE
 11393                           tosl	equ	0xFFD
 11394                           pclath	equ	0xFFA
 11395                           tblptru	equ	0xFF8
 11396                           tblptrh	equ	0xFF7
 11397                           tblptrl	equ	0xFF6
 11398                           tablat	equ	0xFF5
 11399                           prodh	equ	0xFF4
 11400                           prodl	equ	0xFF3
 11401                           intcon	equ	0xFF2
 11402                           postinc0	equ	0xFEE
 11403                           wreg	equ	0xFE8
 11404                           indf1	equ	0xFE7
 11405                           postdec1	equ	0xFE5
 11406                           fsr1h	equ	0xFE2
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           plusw2	equ	0xFDB
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function _Set_Rotation *****************
 11417 ;; Defined at:
 11418 ;;		line 248 in file "Library/LCD.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;  m               1    wreg     unsigned char 
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;  m               1    5[BANK0 ] unsigned char 
 11423 ;;  rotation        1    6[BANK0 ] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      void 
 11426 ;; Registers used:
 11427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;Total ram usage:        2 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    9
 11440 ;; This function calls:
 11441 ;;		_LCD_Write
 11442 ;; This function is called by:
 11443 ;;		_LCD_Init
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           	psect	text53
 11448  01337E                     __ptext53:
 11449                           	opt stack 0
 11450  01337E                     _Set_Rotation:
 11451                           	opt stack 20
 11452                           
 11453                           ;incstack = 0
 11454                           ;Set_Rotation@m stored from wreg
 11455  01337E  0100               	movlb	0	; () banked
 11456  013380  6FBA               	movwf	Set_Rotation@m& (0+255),b
 11457                           
 11458                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11459  013382  0E00               	movlw	0
 11460  013384  0100               	movlb	0	; () banked
 11461  013386  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11465  013388  0E00               	movlw	0
 11466  01338A  0100               	movlb	0	; () banked
 11467  01338C  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11468  01338E  0E36               	movlw	54
 11469  013390  EC54  F0A3         	call	_LCD_Write
 11470                           
 11471                           ;LCD.c: 253: rotation = (m % 4);
 11472  013394  0100               	movlb	0	; () banked
 11473  013396  51BA               	movf	Set_Rotation@m& (0+255),w,b
 11474  013398  0B03               	andlw	3
 11475  01339A  0100               	movlb	0	; () banked
 11476  01339C  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11477                           
 11478                           ;LCD.c: 255: switch(rotation)
 11479  01339E  D02C               	goto	l117
 11480  0133A0                     
 11481                           ; BSR set to: 0
 11482                           ;LCD.c: 258: {
 11483                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11484                           
 11485                           ; BSR set to: 0
 11486  0133A0  0E01               	movlw	1
 11487  0133A2  0100               	movlb	0	; () banked
 11488  0133A4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11489  0133A6  0EC8               	movlw	200
 11490  0133A8  EC54  F0A3         	call	_LCD_Write
 11491                           
 11492                           ;LCD.c: 260: w = 128;
 11493  0133AC  0E80               	movlw	128
 11494  0133AE  6E50               	movwf	_w,c
 11495                           
 11496                           ;LCD.c: 261: l = 128;
 11497  0133B0  0E80               	movlw	128
 11498  0133B2  6E4F               	movwf	_l,c
 11499                           
 11500                           ;LCD.c: 262: break;
 11501  0133B4  0012               	return	
 11502  0133B6                     
 11503                           ;LCD.c: 265: {
 11504                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11505  0133B6  0E01               	movlw	1
 11506  0133B8  0100               	movlb	0	; () banked
 11507  0133BA  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11508  0133BC  0EA8               	movlw	168
 11509  0133BE  EC54  F0A3         	call	_LCD_Write
 11510                           
 11511                           ;LCD.c: 267: w = 128;
 11512  0133C2  0E80               	movlw	128
 11513  0133C4  6E50               	movwf	_w,c
 11514                           
 11515                           ;LCD.c: 268: l = 128;
 11516  0133C6  0E80               	movlw	128
 11517  0133C8  6E4F               	movwf	_l,c
 11518                           
 11519                           ;LCD.c: 269: break;
 11520  0133CA  0012               	return	
 11521  0133CC                     
 11522                           ;LCD.c: 272: {
 11523                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11524  0133CC  0E01               	movlw	1
 11525  0133CE  0100               	movlb	0	; () banked
 11526  0133D0  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11527  0133D2  0E08               	movlw	8
 11528  0133D4  EC54  F0A3         	call	_LCD_Write
 11529                           
 11530                           ;LCD.c: 274: w = 128;
 11531  0133D8  0E80               	movlw	128
 11532  0133DA  6E50               	movwf	_w,c
 11533                           
 11534                           ;LCD.c: 275: l = 128;
 11535  0133DC  0E80               	movlw	128
 11536  0133DE  6E4F               	movwf	_l,c
 11537                           
 11538                           ;LCD.c: 276: break;
 11539  0133E0  0012               	return	
 11540  0133E2                     
 11541                           ;LCD.c: 279: {
 11542                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11543  0133E2  0E01               	movlw	1
 11544  0133E4  0100               	movlb	0	; () banked
 11545  0133E6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11546  0133E8  0E68               	movlw	104
 11547  0133EA  EC54  F0A3         	call	_LCD_Write
 11548                           
 11549                           ;LCD.c: 281: w = 128;
 11550  0133EE  0E80               	movlw	128
 11551  0133F0  6E50               	movwf	_w,c
 11552                           
 11553                           ;LCD.c: 282: l = 128;
 11554  0133F2  0E80               	movlw	128
 11555  0133F4  6E4F               	movwf	_l,c
 11556                           
 11557                           ;LCD.c: 284: }
 11558                           ;LCD.c: 285: }
 11559                           
 11560                           ;LCD.c: 283: break;
 11561  0133F6  0012               	return	
 11562  0133F8                     l117:
 11563  0133F8  0100               	movlb	0	; () banked
 11564  0133FA  51BB               	movf	Set_Rotation@rotation& (0+255),w,b
 11565                           
 11566                           ; Switch size 1, requested type "space"
 11567                           ; Number of cases is 4, Range of values is 0 to 3
 11568                           ; switch strategies available:
 11569                           ; Name         Instructions Cycles
 11570                           ; simple_byte           13     7 (average)
 11571                           ;	Chosen strategy is simple_byte
 11572  0133FC  0A00               	xorlw	0	; case 0
 11573  0133FE  B4D8               	btfsc	status,2,c
 11574  013400  D7CF               	goto	l118
 11575  013402  0A01               	xorlw	1	; case 1
 11576  013404  B4D8               	btfsc	status,2,c
 11577  013406  D7D7               	goto	l120
 11578  013408  0A03               	xorlw	3	; case 2
 11579  01340A  B4D8               	btfsc	status,2,c
 11580  01340C  D7DF               	goto	l121
 11581  01340E  0A01               	xorlw	1	; case 3
 11582  013410  A4D8               	btfss	status,2,c
 11583  013412  0012               	return	
 11584  013414  D7E6               	goto	l122
 11585  013416                     __end_of_Set_Rotation:
 11586                           	opt stack 0
 11587                           tosu	equ	0xFFF
 11588                           tosh	equ	0xFFE
 11589                           tosl	equ	0xFFD
 11590                           pclath	equ	0xFFA
 11591                           tblptru	equ	0xFF8
 11592                           tblptrh	equ	0xFF7
 11593                           tblptrl	equ	0xFF6
 11594                           tablat	equ	0xFF5
 11595                           prodh	equ	0xFF4
 11596                           prodl	equ	0xFF3
 11597                           intcon	equ	0xFF2
 11598                           postinc0	equ	0xFEE
 11599                           wreg	equ	0xFE8
 11600                           indf1	equ	0xFE7
 11601                           postdec1	equ	0xFE5
 11602                           fsr1h	equ	0xFE2
 11603                           fsr1l	equ	0xFE1
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           plusw2	equ	0xFDB
 11608                           fsr2h	equ	0xFDA
 11609                           fsr2l	equ	0xFD9
 11610                           status	equ	0xFD8
 11611                           
 11612 ;; *************** function _LCD_Fill *****************
 11613 ;; Defined at:
 11614 ;;		line 287 in file "Library/LCD.c"
 11615 ;; Parameters:    Size  Location     Type
 11616 ;;  pColour         2    9[BANK0 ] unsigned short 
 11617 ;; Auto vars:     Size  Location     Type
 11618 ;;  j               1   12[BANK0 ] unsigned char 
 11619 ;;  i               1   11[BANK0 ] unsigned char 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  1    wreg      void 
 11622 ;; Registers used:
 11623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;Total ram usage:        4 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:   10
 11636 ;; This function calls:
 11637 ;;		_LCD_Word_Write
 11638 ;;		_Set_Addr_Window
 11639 ;; This function is called by:
 11640 ;;		_LCD_Init
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           	psect	text54
 11645  013F0E                     __ptext54:
 11646                           	opt stack 0
 11647  013F0E                     _LCD_Fill:
 11648                           	opt stack 19
 11649                           
 11650                           ;LCD.c: 296: UINT8 i = 0x00;
 11651                           
 11652                           ;incstack = 0
 11653  013F0E  0E00               	movlw	0
 11654  013F10  0100               	movlb	0	; () banked
 11655  013F12  6FC0               	movwf	LCD_Fill@i& (0+255),b
 11656                           
 11657                           ;LCD.c: 297: UINT8 j = 0x00;
 11658  013F14  0E00               	movlw	0
 11659  013F16  0100               	movlb	0	; () banked
 11660  013F18  6FC1               	movwf	LCD_Fill@j& (0+255),b
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11664  013F1A  0E00               	movlw	0
 11665  013F1C  0100               	movlb	0	; () banked
 11666  013F1E  6FBA               	movwf	Set_Addr_Window@ys& (0+255),b
 11667  013F20  0450               	decf	_w,w,c
 11668  013F22  0100               	movlb	0	; () banked
 11669  013F24  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 11670  013F26  044F               	decf	_l,w,c
 11671  013F28  0100               	movlb	0	; () banked
 11672  013F2A  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 11673  013F2C  0E00               	movlw	0
 11674  013F2E  EC2B  F097         	call	_Set_Addr_Window
 11675                           
 11676                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11677  013F32  C04F  F0C1         	movff	_l,LCD_Fill@j
 11678  013F36                     l11802:
 11679  013F36  0100               	movlb	0	; () banked
 11680  013F38  51C1               	movf	LCD_Fill@j& (0+255),w,b
 11681  013F3A  0100               	movlb	0	; () banked
 11682  013F3C  B4D8               	btfsc	status,2,c
 11683  013F3E  0012               	return	
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11687                           
 11688                           ; BSR set to: 0
 11689  013F40  C050  F0C0         	movff	_w,LCD_Fill@i
 11690  013F44                     l11806:
 11691                           
 11692                           ; BSR set to: 0
 11693  013F44  0100               	movlb	0	; () banked
 11694  013F46  51C0               	movf	LCD_Fill@i& (0+255),w,b
 11695  013F48  0100               	movlb	0	; () banked
 11696  013F4A  B4D8               	btfsc	status,2,c
 11697  013F4C  D009               	goto	u7680
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11701                           
 11702                           ; BSR set to: 0
 11703                           
 11704                           ; BSR set to: 0
 11705  013F4E  C0BE  F0BA         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11706  013F52  C0BF  F0BB         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11707  013F56  ECDE  F0A3         	call	_LCD_Word_Write	;wreg free
 11708  013F5A  0100               	movlb	0	; () banked
 11709  013F5C  07C0               	decf	LCD_Fill@i& (0+255),f,b
 11710  013F5E  D7F2               	goto	l11806
 11711  013F60                     u7680:
 11712                           
 11713                           ; BSR set to: 0
 11714                           
 11715                           ; BSR set to: 0
 11716  013F60  0100               	movlb	0	; () banked
 11717  013F62  07C1               	decf	LCD_Fill@j& (0+255),f,b
 11718  013F64  D7E8               	goto	l11802
 11719  013F66                     __end_of_LCD_Fill:
 11720                           	opt stack 0
 11721                           tosu	equ	0xFFF
 11722                           tosh	equ	0xFFE
 11723                           tosl	equ	0xFFD
 11724                           pclath	equ	0xFFA
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           postinc0	equ	0xFEE
 11733                           wreg	equ	0xFE8
 11734                           indf1	equ	0xFE7
 11735                           postdec1	equ	0xFE5
 11736                           fsr1h	equ	0xFE2
 11737                           fsr1l	equ	0xFE1
 11738                           indf2	equ	0xFDF
 11739                           postinc2	equ	0xFDE
 11740                           postdec2	equ	0xFDD
 11741                           plusw2	equ	0xFDB
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _Configure_GPIOs *****************
 11747 ;; Defined at:
 11748 ;;		line 46 in file "Library/LCD.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      void 
 11755 ;; Registers used:
 11756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;Total ram usage:        0 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:   14
 11769 ;; This function calls:
 11770 ;;		_LCD_Reset
 11771 ;;		_Port_SetPinType
 11772 ;;		_SPI_Init
 11773 ;;		_SPI_MaxSpeed
 11774 ;; This function is called by:
 11775 ;;		_LCD_Init
 11776 ;; This function uses a non-reentrant model
 11777 ;;
 11778                           
 11779                           	psect	text55
 11780  013986                     __ptext55:
 11781                           	opt stack 0
 11782  013986                     _Configure_GPIOs:
 11783                           	opt stack 15
 11784                           
 11785                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;incstack = 0
 11789  013986  0EB0               	movlw	low _PortF
 11790  013988  0100               	movlb	0	; () banked
 11791  01398A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11792  01398C  0E03               	movlw	high _PortF
 11793  01398E  0100               	movlb	0	; () banked
 11794  013990  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11795  013992  0E07               	movlw	7
 11796  013994  0100               	movlb	0	; () banked
 11797  013996  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11798  013998  0E03               	movlw	3
 11799  01399A  0100               	movlb	0	; () banked
 11800  01399C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11801  01399E  EC64  F08B         	call	_Port_SetPinType	;wreg free
 11802                           
 11803                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 11804  0139A2  0EB0               	movlw	low _PortF
 11805  0139A4  0100               	movlb	0	; () banked
 11806  0139A6  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11807  0139A8  0E03               	movlw	high _PortF
 11808  0139AA  0100               	movlb	0	; () banked
 11809  0139AC  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11810  0139AE  0E06               	movlw	6
 11811  0139B0  0100               	movlb	0	; () banked
 11812  0139B2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11813  0139B4  0E03               	movlw	3
 11814  0139B6  0100               	movlb	0	; () banked
 11815  0139B8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11816  0139BA  EC64  F08B         	call	_Port_SetPinType	;wreg free
 11817                           
 11818                           ;LCD.c: 55: LCD_Reset();
 11819  0139BE  EC04  F0A0         	call	_LCD_Reset	;wreg free
 11820                           
 11821                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 11822  0139C2  0EC0               	movlw	192
 11823  0139C4  0100               	movlb	0	; () banked
 11824  0139C6  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 11825  0139C8  0EC6               	movlw	198
 11826  0139CA  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11827  0139CC  0E2D               	movlw	45
 11828  0139CE  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11829  0139D0  0E00               	movlw	0
 11830  0139D2  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11831  0139D4  0E01               	movlw	1
 11832  0139D6  0100               	movlb	0	; () banked
 11833  0139D8  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 11834  0139DA  0E01               	movlw	1
 11835  0139DC  0100               	movlb	0	; () banked
 11836  0139DE  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 11837  0139E0  EC00  F080         	call	_SPI_Init	;wreg free
 11838                           
 11839                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 11840  0139E4  0E73               	movlw	low _SPI2
 11841  0139E6  0100               	movlb	0	; () banked
 11842  0139E8  6FC4               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 11843  0139EA  0E03               	movlw	high _SPI2
 11844  0139EC  0100               	movlb	0	; () banked
 11845  0139EE  6FC5               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 11846  0139F0  ECDB  F09B         	call	_SPI_MaxSpeed	;wreg free
 11847  0139F4  0012               	return		;funcret
 11848  0139F6                     __end_of_Configure_GPIOs:
 11849                           	opt stack 0
 11850                           tosu	equ	0xFFF
 11851                           tosh	equ	0xFFE
 11852                           tosl	equ	0xFFD
 11853                           pclath	equ	0xFFA
 11854                           tblptru	equ	0xFF8
 11855                           tblptrh	equ	0xFF7
 11856                           tblptrl	equ	0xFF6
 11857                           tablat	equ	0xFF5
 11858                           prodh	equ	0xFF4
 11859                           prodl	equ	0xFF3
 11860                           intcon	equ	0xFF2
 11861                           postinc0	equ	0xFEE
 11862                           wreg	equ	0xFE8
 11863                           indf1	equ	0xFE7
 11864                           postdec1	equ	0xFE5
 11865                           fsr1h	equ	0xFE2
 11866                           fsr1l	equ	0xFE1
 11867                           indf2	equ	0xFDF
 11868                           postinc2	equ	0xFDE
 11869                           postdec2	equ	0xFDD
 11870                           plusw2	equ	0xFDB
 11871                           fsr2h	equ	0xFDA
 11872                           fsr2l	equ	0xFD9
 11873                           status	equ	0xFD8
 11874                           
 11875 ;; *************** function _SPI_MaxSpeed *****************
 11876 ;; Defined at:
 11877 ;;		line 201 in file "Library/SPI.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11880 ;;		 -> SPI2(11), 
 11881 ;; Auto vars:     Size  Location     Type
 11882 ;;		None
 11883 ;; Return value:  Size  Location     Type
 11884 ;;                  1    wreg      void 
 11885 ;; Registers used:
 11886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;Total ram usage:        2 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    9
 11899 ;; This function calls:
 11900 ;;		_Byte_SetBit
 11901 ;;		_Byte_SetQuad
 11902 ;; This function is called by:
 11903 ;;		_Configure_GPIOs
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           	psect	text56
 11908  0137B6                     __ptext56:
 11909                           	opt stack 0
 11910  0137B6                     _SPI_MaxSpeed:
 11911                           	opt stack 19
 11912                           
 11913                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11914                           
 11915                           ;incstack = 0
 11916  0137B6  0100               	movlb	0	; () banked
 11917  0137B8  EE20 F006          	lfsr	2,6
 11918  0137BC  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11919  0137BE  26D9               	addwf	fsr2l,f,c
 11920  0137C0  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11921  0137C2  22DA               	addwfc	fsr2h,f,c
 11922  0137C4  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11923  0137C8  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 11924  0137CC  0E05               	movlw	5
 11925  0137CE  0100               	movlb	0	; () banked
 11926  0137D0  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 11927  0137D2  0E00               	movlw	0
 11928  0137D4  0100               	movlb	0	; () banked
 11929  0137D6  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 11930  0137D8  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 11931                           
 11932                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 11933  0137DC  0100               	movlb	0	; () banked
 11934  0137DE  EE20 F006          	lfsr	2,6
 11935  0137E2  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11936  0137E4  26D9               	addwf	fsr2l,f,c
 11937  0137E6  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11938  0137E8  22DA               	addwfc	fsr2h,f,c
 11939  0137EA  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 11940  0137EE  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 11941  0137F2  0E00               	movlw	0
 11942  0137F4  0100               	movlb	0	; () banked
 11943  0137F6  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11944  0137F8  0E00               	movlw	0
 11945  0137FA  0100               	movlb	0	; () banked
 11946  0137FC  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 11947  0137FE  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 11948                           
 11949                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11950  013802  0100               	movlb	0	; () banked
 11951  013804  EE20 F006          	lfsr	2,6
 11952  013808  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11953  01380A  26D9               	addwf	fsr2l,f,c
 11954  01380C  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11955  01380E  22DA               	addwfc	fsr2h,f,c
 11956  013810  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11957  013814  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 11958  013818  0E05               	movlw	5
 11959  01381A  0100               	movlb	0	; () banked
 11960  01381C  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 11961  01381E  0E01               	movlw	1
 11962  013820  0100               	movlb	0	; () banked
 11963  013822  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 11964  013824  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 11965  013828  0012               	return		;funcret
 11966  01382A                     __end_of_SPI_MaxSpeed:
 11967                           	opt stack 0
 11968                           tosu	equ	0xFFF
 11969                           tosh	equ	0xFFE
 11970                           tosl	equ	0xFFD
 11971                           pclath	equ	0xFFA
 11972                           tblptru	equ	0xFF8
 11973                           tblptrh	equ	0xFF7
 11974                           tblptrl	equ	0xFF6
 11975                           tablat	equ	0xFF5
 11976                           prodh	equ	0xFF4
 11977                           prodl	equ	0xFF3
 11978                           intcon	equ	0xFF2
 11979                           postinc0	equ	0xFEE
 11980                           wreg	equ	0xFE8
 11981                           indf1	equ	0xFE7
 11982                           postdec1	equ	0xFE5
 11983                           fsr1h	equ	0xFE2
 11984                           fsr1l	equ	0xFE1
 11985                           indf2	equ	0xFDF
 11986                           postinc2	equ	0xFDE
 11987                           postdec2	equ	0xFDD
 11988                           plusw2	equ	0xFDB
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function _LCD_Reset *****************
 11994 ;; Defined at:
 11995 ;;		line 95 in file "Library/LCD.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;                  1    wreg      void 
 12002 ;; Registers used:
 12003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:   13
 12016 ;; This function calls:
 12017 ;;		_LED_Toggle
 12018 ;;		_Reset_High
 12019 ;;		_Reset_Low
 12020 ;;		_delay_ms
 12021 ;; This function is called by:
 12022 ;;		_Configure_GPIOs
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           	psect	text57
 12027  014008                     __ptext57:
 12028                           	opt stack 0
 12029  014008                     _LCD_Reset:
 12030                           	opt stack 15
 12031                           
 12032                           ;LCD.c: 97: Reset_High();
 12033                           
 12034                           ;incstack = 0
 12035  014008  ECA2  F0A3         	call	_Reset_High	;wreg free
 12036                           
 12037                           ;LCD.c: 98: LED_Toggle(eLED2);
 12038  01400C  0E01               	movlw	1
 12039  01400E  EC9B  F0A0         	call	_LED_Toggle
 12040                           
 12041                           ;LCD.c: 99: delay_ms(0x80);
 12042  014012  0E00               	movlw	0
 12043  014014  0100               	movlb	0	; () banked
 12044  014016  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12045  014018  0E80               	movlw	128
 12046  01401A  6FB5               	movwf	delay_ms@ms& (0+255),b
 12047  01401C  EC9C  F09D         	call	_delay_ms	;wreg free
 12048                           
 12049                           ;LCD.c: 100: LED_Toggle(eLED2);
 12050  014020  0E01               	movlw	1
 12051  014022  EC9B  F0A0         	call	_LED_Toggle
 12052                           
 12053                           ;LCD.c: 101: Reset_Low();
 12054  014026  EC93  F0A3         	call	_Reset_Low	;wreg free
 12055                           
 12056                           ;LCD.c: 102: delay_ms(0x80);
 12057  01402A  0E00               	movlw	0
 12058  01402C  0100               	movlb	0	; () banked
 12059  01402E  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12060  014030  0E80               	movlw	128
 12061  014032  6FB5               	movwf	delay_ms@ms& (0+255),b
 12062  014034  EC9C  F09D         	call	_delay_ms	;wreg free
 12063                           
 12064                           ;LCD.c: 103: LED_Toggle(eLED2);
 12065  014038  0E01               	movlw	1
 12066  01403A  EC9B  F0A0         	call	_LED_Toggle
 12067                           
 12068                           ;LCD.c: 104: Reset_High();
 12069  01403E  ECA2  F0A3         	call	_Reset_High	;wreg free
 12070                           
 12071                           ;LCD.c: 105: delay_ms(0x80);
 12072  014042  0E00               	movlw	0
 12073  014044  0100               	movlb	0	; () banked
 12074  014046  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12075  014048  0E80               	movlw	128
 12076  01404A  6FB5               	movwf	delay_ms@ms& (0+255),b
 12077  01404C  EC9C  F09D         	call	_delay_ms	;wreg free
 12078                           
 12079                           ;LCD.c: 106: LED_Toggle(eLED2);
 12080  014050  0E01               	movlw	1
 12081  014052  EC9B  F0A0         	call	_LED_Toggle
 12082  014056  0012               	return		;funcret
 12083  014058                     __end_of_LCD_Reset:
 12084                           	opt stack 0
 12085                           tosu	equ	0xFFF
 12086                           tosh	equ	0xFFE
 12087                           tosl	equ	0xFFD
 12088                           pclath	equ	0xFFA
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           postinc0	equ	0xFEE
 12097                           wreg	equ	0xFE8
 12098                           indf1	equ	0xFE7
 12099                           postdec1	equ	0xFE5
 12100                           fsr1h	equ	0xFE2
 12101                           fsr1l	equ	0xFE1
 12102                           indf2	equ	0xFDF
 12103                           postinc2	equ	0xFDE
 12104                           postdec2	equ	0xFDD
 12105                           plusw2	equ	0xFDB
 12106                           fsr2h	equ	0xFDA
 12107                           fsr2l	equ	0xFD9
 12108                           status	equ	0xFD8
 12109                           
 12110 ;; *************** function _delay_ms *****************
 12111 ;; Defined at:
 12112 ;;		line 240 in file "Library/Types.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;  ms              2    0[BANK0 ] unsigned short 
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;  u               4    2[BANK0 ] volatile unsigned long 
 12117 ;; Return value:  Size  Location     Type
 12118 ;;                  1    wreg      void 
 12119 ;; Registers used:
 12120 ;;		wreg, status,2, status,0
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;Total ram usage:        6 bytes
 12131 ;; Hardware stack levels used:    1
 12132 ;; Hardware stack levels required when called:    7
 12133 ;; This function calls:
 12134 ;;		Nothing
 12135 ;; This function is called by:
 12136 ;;		_LCD_Reset
 12137 ;;		_LCD_Init
 12138 ;;		_MXK_Init
 12139 ;;		_main
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           	psect	text58
 12144  013B38                     __ptext58:
 12145                           	opt stack 0
 12146  013B38                     _delay_ms:
 12147                           	opt stack 23
 12148                           
 12149                           ;Types.c: 242: volatile unsigned long u;
 12150                           ;Types.c: 243: while (ms--)
 12151                           
 12152                           ;incstack = 0
 12153  013B38  D01F               	goto	u7040
 12154  013B3A                     l10956:
 12155                           
 12156                           ;Types.c: 244: {
 12157                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 12158  013B3A  0E00               	movlw	0
 12159  013B3C  0100               	movlb	0	; () banked
 12160  013B3E  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 12161  013B40  0E00               	movlw	0
 12162  013B42  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12163  013B44  0E00               	movlw	0
 12164  013B46  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12165  013B48  0E00               	movlw	0
 12166  013B4A  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12167  013B4C                     l10958:
 12168                           
 12169                           ; BSR set to: 0
 12170  013B4C  0100               	movlb	0	; () banked
 12171  013B4E  51BA               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 12172  013B50  0100               	movlb	0	; () banked
 12173  013B52  11B9               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 12174  013B54  E111               	bnz	l10964
 12175  013B56  0EB0               	movlw	176
 12176  013B58  0100               	movlb	0	; () banked
 12177  013B5A  5DB7               	subwf	delay_ms@u& (0+255),w,b	;volatile
 12178  013B5C  0E04               	movlw	4
 12179  013B5E  0100               	movlb	0	; () banked
 12180  013B60  59B8               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 12181  013B62  B0D8               	btfsc	status,0,c
 12182  013B64  D009               	goto	u7040
 12183                           
 12184                           ; BSR set to: 0
 12185                           
 12186                           ; BSR set to: 0
 12187  013B66  F000               	nop		; ;# 
 12188  013B68  0E01               	movlw	1
 12189  013B6A  0100               	movlb	0	; () banked
 12190  013B6C  27B7               	addwf	delay_ms@u& (0+255),f,b	;volatile
 12191  013B6E  0E00               	movlw	0
 12192  013B70  23B8               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 12193  013B72  23B9               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 12194  013B74  23BA               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 12195  013B76  D7EA               	goto	l10958
 12196  013B78                     u7040:
 12197  013B78                     l10964:
 12198  013B78  0100               	movlb	0	; () banked
 12199  013B7A  07B5               	decf	delay_ms@ms& (0+255),f,b
 12200  013B7C  A0D8               	btfss	status,0,c
 12201  013B7E  07B6               	decf	(delay_ms@ms+1)& (0+255),f,b
 12202  013B80  0100               	movlb	0	; () banked
 12203  013B82  29B5               	incf	delay_ms@ms& (0+255),w,b
 12204  013B84  E1DA               	bnz	l10956
 12205  013B86  0100               	movlb	0	; () banked
 12206  013B88  29B6               	incf	(delay_ms@ms+1)& (0+255),w,b
 12207  013B8A  A4D8               	btfss	status,2,c
 12208  013B8C  D7D6               	goto	l824
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;Types.c: 251: }
 12212                           ;Types.c: 252: }
 12213                           ;Types.c: 253: u = 0x8008;
 12214                           
 12215                           ; BSR set to: 0
 12216  013B8E  0E08               	movlw	8
 12217  013B90  0100               	movlb	0	; () banked
 12218  013B92  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 12219  013B94  0E80               	movlw	128
 12220  013B96  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12221  013B98  0E00               	movlw	0
 12222  013B9A  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12223  013B9C  0E00               	movlw	0
 12224  013B9E  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12225                           
 12226                           ; BSR set to: 0
 12227  013BA0  0012               	return		;funcret
 12228  013BA2                     __end_of_delay_ms:
 12229                           	opt stack 0
 12230                           tosu	equ	0xFFF
 12231                           tosh	equ	0xFFE
 12232                           tosl	equ	0xFFD
 12233                           pclath	equ	0xFFA
 12234                           tblptru	equ	0xFF8
 12235                           tblptrh	equ	0xFF7
 12236                           tblptrl	equ	0xFF6
 12237                           tablat	equ	0xFF5
 12238                           prodh	equ	0xFF4
 12239                           prodl	equ	0xFF3
 12240                           intcon	equ	0xFF2
 12241                           postinc0	equ	0xFEE
 12242                           wreg	equ	0xFE8
 12243                           indf1	equ	0xFE7
 12244                           postdec1	equ	0xFE5
 12245                           fsr1h	equ	0xFE2
 12246                           fsr1l	equ	0xFE1
 12247                           indf2	equ	0xFDF
 12248                           postinc2	equ	0xFDE
 12249                           postdec2	equ	0xFDD
 12250                           plusw2	equ	0xFDB
 12251                           fsr2h	equ	0xFDA
 12252                           fsr2l	equ	0xFD9
 12253                           status	equ	0xFD8
 12254                           
 12255 ;; *************** function _Reset_Low *****************
 12256 ;; Defined at:
 12257 ;;		line 32 in file "Library/LCD.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;		None
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;		None
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  1    wreg      void 
 12264 ;; Registers used:
 12265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;Total ram usage:        0 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:   11
 12278 ;; This function calls:
 12279 ;;		_Port_SetPin
 12280 ;; This function is called by:
 12281 ;;		_LCD_Reset
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           	psect	text59
 12286  014726                     __ptext59:
 12287                           	opt stack 0
 12288  014726                     _Reset_Low:
 12289                           	opt stack 16
 12290                           
 12291                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;incstack = 0
 12295  014726  0EB0               	movlw	low _PortF
 12296  014728  0100               	movlb	0	; () banked
 12297  01472A  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12298  01472C  0E03               	movlw	high _PortF
 12299  01472E  0100               	movlb	0	; () banked
 12300  014730  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12301  014732  0E06               	movlw	6
 12302  014734  0100               	movlb	0	; () banked
 12303  014736  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12304  014738  0E01               	movlw	1
 12305  01473A  0100               	movlb	0	; () banked
 12306  01473C  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12307  01473E  EC44  F094         	call	_Port_SetPin	;wreg free
 12308  014742  0012               	return		;funcret
 12309  014744                     __end_of_Reset_Low:
 12310                           	opt stack 0
 12311                           tosu	equ	0xFFF
 12312                           tosh	equ	0xFFE
 12313                           tosl	equ	0xFFD
 12314                           pclath	equ	0xFFA
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           postinc0	equ	0xFEE
 12323                           wreg	equ	0xFE8
 12324                           indf1	equ	0xFE7
 12325                           postdec1	equ	0xFE5
 12326                           fsr1h	equ	0xFE2
 12327                           fsr1l	equ	0xFE1
 12328                           indf2	equ	0xFDF
 12329                           postinc2	equ	0xFDE
 12330                           postdec2	equ	0xFDD
 12331                           plusw2	equ	0xFDB
 12332                           fsr2h	equ	0xFDA
 12333                           fsr2l	equ	0xFD9
 12334                           status	equ	0xFD8
 12335                           
 12336 ;; *************** function _Reset_High *****************
 12337 ;; Defined at:
 12338 ;;		line 36 in file "Library/LCD.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      void 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;Total ram usage:        0 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:   11
 12359 ;; This function calls:
 12360 ;;		_Port_SetPin
 12361 ;; This function is called by:
 12362 ;;		_LCD_Reset
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text60
 12367  014744                     __ptext60:
 12368                           	opt stack 0
 12369  014744                     _Reset_High:
 12370                           	opt stack 16
 12371                           
 12372                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12373                           
 12374                           ;incstack = 0
 12375  014744  0EB0               	movlw	low _PortF
 12376  014746  0100               	movlb	0	; () banked
 12377  014748  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12378  01474A  0E03               	movlw	high _PortF
 12379  01474C  0100               	movlb	0	; () banked
 12380  01474E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12381  014750  0E06               	movlw	6
 12382  014752  0100               	movlb	0	; () banked
 12383  014754  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12384  014756  0E00               	movlw	0
 12385  014758  0100               	movlb	0	; () banked
 12386  01475A  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12387  01475C  EC44  F094         	call	_Port_SetPin	;wreg free
 12388  014760  0012               	return		;funcret
 12389  014762                     __end_of_Reset_High:
 12390                           	opt stack 0
 12391                           tosu	equ	0xFFF
 12392                           tosh	equ	0xFFE
 12393                           tosl	equ	0xFFD
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           postinc0	equ	0xFEE
 12403                           wreg	equ	0xFE8
 12404                           indf1	equ	0xFE7
 12405                           postdec1	equ	0xFE5
 12406                           fsr1h	equ	0xFE2
 12407                           fsr1l	equ	0xFE1
 12408                           indf2	equ	0xFDF
 12409                           postinc2	equ	0xFDE
 12410                           postdec2	equ	0xFDD
 12411                           plusw2	equ	0xFDB
 12412                           fsr2h	equ	0xFDA
 12413                           fsr2l	equ	0xFD9
 12414                           status	equ	0xFD8
 12415                           
 12416 ;; *************** function _HMI_Poll *****************
 12417 ;; Defined at:
 12418 ;;		line 252 in file "HMI.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;		None
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;		None
 12423 ;; Return value:  Size  Location     Type
 12424 ;;                  1    wreg      void 
 12425 ;; Registers used:
 12426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12427 ;; Tracked objects:
 12428 ;;		On entry : 0/0
 12429 ;;		On exit  : 0/0
 12430 ;;		Unchanged: 0/0
 12431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;Total ram usage:        0 bytes
 12437 ;; Hardware stack levels used:    1
 12438 ;; Hardware stack levels required when called:   15
 12439 ;; This function calls:
 12440 ;;		_Button_Poll
 12441 ;; This function is called by:
 12442 ;;		_main
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           	psect	text61
 12447  01382A                     __ptext61:
 12448                           	opt stack 0
 12449  01382A                     _HMI_Poll:
 12450                           	opt stack 15
 12451                           
 12452                           ;HMI.c: 254: TRISE = 0xFC;
 12453                           
 12454                           ;incstack = 0
 12455  01382A  0EFC               	movlw	252
 12456  01382C  6E96               	movwf	3990,c	;volatile
 12457                           
 12458                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 12459  01382E  0E5E               	movlw	low (_HMIBoard+48)
 12460  013830  0100               	movlb	0	; () banked
 12461  013832  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12462  013834  0E03               	movlw	high (_HMIBoard+48)
 12463  013836  0100               	movlb	0	; () banked
 12464  013838  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12465  01383A  0E01               	movlw	1
 12466  01383C  0100               	movlb	0	; () banked
 12467  01383E  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12468  013840  EC18  F090         	call	_Button_Poll	;wreg free
 12469                           
 12470                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 12471  013844  0E40               	movlw	low (_HMIBoard+18)
 12472  013846  0100               	movlb	0	; () banked
 12473  013848  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12474  01384A  0E03               	movlw	high (_HMIBoard+18)
 12475  01384C  0100               	movlb	0	; () banked
 12476  01384E  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12477  013850  0E01               	movlw	1
 12478  013852  0100               	movlb	0	; () banked
 12479  013854  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12480  013856  EC18  F090         	call	_Button_Poll	;wreg free
 12481                           
 12482                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 12483  01385A  0E36               	movlw	low (_HMIBoard+8)
 12484  01385C  0100               	movlb	0	; () banked
 12485  01385E  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12486  013860  0E03               	movlw	high (_HMIBoard+8)
 12487  013862  0100               	movlb	0	; () banked
 12488  013864  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12489  013866  0E01               	movlw	1
 12490  013868  0100               	movlb	0	; () banked
 12491  01386A  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12492  01386C  EC18  F090         	call	_Button_Poll	;wreg free
 12493                           
 12494                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 12495  013870  0E4A               	movlw	low (_HMIBoard+28)
 12496  013872  0100               	movlb	0	; () banked
 12497  013874  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12498  013876  0E03               	movlw	high (_HMIBoard+28)
 12499  013878  0100               	movlb	0	; () banked
 12500  01387A  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12501  01387C  0E01               	movlw	1
 12502  01387E  0100               	movlb	0	; () banked
 12503  013880  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12504  013882  EC18  F090         	call	_Button_Poll	;wreg free
 12505                           
 12506                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 12507  013886  0E54               	movlw	low (_HMIBoard+38)
 12508  013888  0100               	movlb	0	; () banked
 12509  01388A  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12510  01388C  0E03               	movlw	high (_HMIBoard+38)
 12511  01388E  0100               	movlb	0	; () banked
 12512  013890  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12513  013892  0E01               	movlw	1
 12514  013894  0100               	movlb	0	; () banked
 12515  013896  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12516  013898  EC18  F090         	call	_Button_Poll	;wreg free
 12517  01389C  0012               	return		;funcret
 12518  01389E                     __end_of_HMI_Poll:
 12519                           	opt stack 0
 12520                           tosu	equ	0xFFF
 12521                           tosh	equ	0xFFE
 12522                           tosl	equ	0xFFD
 12523                           pclath	equ	0xFFA
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           postinc0	equ	0xFEE
 12532                           wreg	equ	0xFE8
 12533                           indf1	equ	0xFE7
 12534                           postdec1	equ	0xFE5
 12535                           fsr1h	equ	0xFE2
 12536                           fsr1l	equ	0xFE1
 12537                           indf2	equ	0xFDF
 12538                           postinc2	equ	0xFDE
 12539                           postdec2	equ	0xFDD
 12540                           plusw2	equ	0xFDB
 12541                           fsr2h	equ	0xFDA
 12542                           fsr2l	equ	0xFD9
 12543                           status	equ	0xFD8
 12544                           
 12545 ;; *************** function _Button_Poll *****************
 12546 ;; Defined at:
 12547 ;;		line 57 in file "Library/Button.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 12550 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 12551 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;  Pin             1   35[BANK0 ] unsigned char 
 12554 ;; Return value:  Size  Location     Type
 12555 ;;                  1    wreg      unsigned char 
 12556 ;; Registers used:
 12557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12558 ;; Tracked objects:
 12559 ;;		On entry : 0/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12563 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;Total ram usage:        9 bytes
 12568 ;; Hardware stack levels used:    1
 12569 ;; Hardware stack levels required when called:   14
 12570 ;; This function calls:
 12571 ;;		_Event_DIPSwitch
 12572 ;;		_Event_NULL
 12573 ;;		_Event_TestButton
 12574 ;;		_HMI_DIPSwitch
 12575 ;;		_HMI_DownSwitch
 12576 ;;		_HMI_LeftSwitch
 12577 ;;		_HMI_RightSwitch
 12578 ;;		_HMI_UpSwitch
 12579 ;;		_MXK_DIPSwitch
 12580 ;;		_MXK_TestButton
 12581 ;; This function is called by:
 12582 ;;		_HMI_Poll
 12583 ;;		_MXK_Poll
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           	psect	text62
 12588  012030                     __ptext62:
 12589                           	opt stack 0
 12590  012030                     _Button_Poll:
 12591                           	opt stack 15
 12592                           
 12593                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 12594                           
 12595                           ;incstack = 0
 12596  012030  0100               	movlb	0	; () banked
 12597  012032  EE20 F007          	lfsr	2,7
 12598  012036  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12599  012038  26D9               	addwf	fsr2l,f,c
 12600  01203A  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12601  01203C  22DA               	addwfc	fsr2h,f,c
 12602  01203E  D801               	call	u7608
 12603  012040  D00A               	goto	u7609
 12604  012042                     u7608:
 12605  012042  0005               	push	
 12606  012044  6EFA               	movwf	pclath,c
 12607  012046  50DE               	movf	postinc2,w,c
 12608  012048  6EFD               	movwf	tosl,c
 12609  01204A  50DE               	movf	postinc2,w,c
 12610  01204C  6EFE               	movwf	tosh,c
 12611  01204E  50DE               	movf	postinc2,w,c
 12612  012050  6EFF               	movwf	tosu,c
 12613  012052  50FA               	movf	pclath,w,c
 12614  012054  0012               	return		;indir
 12615  012056                     u7609:
 12616  012056  0100               	movlb	0	; () banked
 12617  012058  6FD8               	movwf	Button_Poll@Pin& (0+255),b
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;Button.c: 61: if (pButton->mState == Pin)
 12621  01205A  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 12622  01205E  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12623  012062  0100               	movlb	0	; () banked
 12624  012064  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 12625  012066  18DE               	xorwf	postinc2,w,c
 12626  012068  A4D8               	btfss	status,2,c
 12627  01206A  D021               	goto	l11
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;Button.c: 62: {
 12631                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 12632  01206C  0100               	movlb	0	; () banked
 12633  01206E  EE20 F001          	lfsr	2,1
 12634  012072  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12635  012074  26D9               	addwf	fsr2l,f,c
 12636  012076  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12637  012078  22DA               	addwfc	fsr2h,f,c
 12638  01207A  0100               	movlb	0	; () banked
 12639  01207C  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12640  01207E  5CDE               	subwf	postinc2,w,c
 12641  012080  B0D8               	btfsc	status,0,c
 12642  012082  D00A               	goto	l12
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;Button.c: 66: pButton->mCount = 0;
 12646  012084  0100               	movlb	0	; () banked
 12647  012086  EE20 F001          	lfsr	2,1
 12648  01208A  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12649  01208C  26D9               	addwf	fsr2l,f,c
 12650  01208E  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12651  012090  22DA               	addwfc	fsr2h,f,c
 12652  012092  0E00               	movlw	0
 12653  012094  6EDF               	movwf	indf2,c
 12654  012096  0012               	return	
 12655  012098                     l12:
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;Button.c: 67: else
 12659                           ;Button.c: 68: pButton->mCount -= pIncrement;
 12660                           
 12661                           ; BSR set to: 0
 12662  012098  0100               	movlb	0	; () banked
 12663  01209A  EE20 F001          	lfsr	2,1
 12664  01209E  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12665  0120A0  26D9               	addwf	fsr2l,f,c
 12666  0120A2  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12667  0120A4  22DA               	addwfc	fsr2h,f,c
 12668  0120A6  0100               	movlb	0	; () banked
 12669  0120A8  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12670  0120AA  5EDF               	subwf	indf2,f,c
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;Button.c: 69: }
 12674  0120AC  0012               	return	
 12675  0120AE                     l11:
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 12679                           
 12680                           ; BSR set to: 0
 12681  0120AE  0100               	movlb	0	; () banked
 12682  0120B0  EE20 F001          	lfsr	2,1
 12683  0120B4  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12684  0120B6  26D9               	addwf	fsr2l,f,c
 12685  0120B8  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12686  0120BA  22DA               	addwfc	fsr2h,f,c
 12687  0120BC  50DF               	movf	indf2,w,c
 12688  0120BE  0100               	movlb	0	; () banked
 12689  0120C0  6FD3               	movwf	??_Button_Poll& (0+255),b
 12690  0120C2  6BD4               	clrf	(??_Button_Poll+1)& (0+255),b
 12691  0120C4  0100               	movlb	0	; () banked
 12692  0120C6  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12693  0120C8  0100               	movlb	0	; () banked
 12694  0120CA  27D3               	addwf	??_Button_Poll& (0+255),f,b
 12695  0120CC  0E00               	movlw	0
 12696  0120CE  23D4               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 12697  0120D0  0100               	movlb	0	; () banked
 12698  0120D2  EE20 F001          	lfsr	2,1
 12699  0120D6  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12700  0120D8  26D9               	addwf	fsr2l,f,c
 12701  0120DA  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12702  0120DC  22DA               	addwfc	fsr2h,f,c
 12703  0120DE  50DF               	movf	indf2,w,c
 12704  0120E0  0100               	movlb	0	; () banked
 12705  0120E2  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 12706  0120E4  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 12707  0120E6  0100               	movlb	0	; () banked
 12708  0120E8  51D3               	movf	??_Button_Poll& (0+255),w,b
 12709  0120EA  0100               	movlb	0	; () banked
 12710  0120EC  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12711  0120EE  0100               	movlb	0	; () banked
 12712  0120F0  51D6               	movf	(??_Button_Poll+3)& (0+255),w,b
 12713  0120F2  0A80               	xorlw	128
 12714  0120F4  0100               	movlb	0	; () banked
 12715  0120F6  6FD7               	movwf	(??_Button_Poll+4)& (0+255),b
 12716  0120F8  0100               	movlb	0	; () banked
 12717  0120FA  51D4               	movf	(??_Button_Poll+1)& (0+255),w,b
 12718  0120FC  0A80               	xorlw	128
 12719  0120FE  0100               	movlb	0	; () banked
 12720  012100  59D7               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 12721  012102  B0D8               	btfsc	status,0,c
 12722  012104  0012               	return	
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;Button.c: 73: {
 12726                           ;Button.c: 75: pButton->mCount += pIncrement;
 12727  012106  0100               	movlb	0	; () banked
 12728  012108  EE20 F001          	lfsr	2,1
 12729  01210C  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12730  01210E  26D9               	addwf	fsr2l,f,c
 12731  012110  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12732  012112  22DA               	addwfc	fsr2h,f,c
 12733  012114  0100               	movlb	0	; () banked
 12734  012116  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12735  012118  26DF               	addwf	indf2,f,c
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 12739  01211A  0100               	movlb	0	; () banked
 12740  01211C  EE20 F002          	lfsr	2,2
 12741  012120  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12742  012122  26D9               	addwf	fsr2l,f,c
 12743  012124  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12744  012126  22DA               	addwfc	fsr2h,f,c
 12745  012128  0100               	movlb	0	; () banked
 12746  01212A  EE10 F001          	lfsr	1,1
 12747  01212E  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12748  012130  26E1               	addwf	fsr1l,f,c
 12749  012132  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12750  012134  22E2               	addwfc	fsr1h,f,c
 12751  012136  50E7               	movf	indf1,w,c
 12752  012138  0100               	movlb	0	; () banked
 12753  01213A  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 12754  01213C  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 12755  01213E  50DE               	movf	postinc2,w,c
 12756  012140  0100               	movlb	0	; () banked
 12757  012142  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12758  012144  50DE               	movf	postinc2,w,c
 12759  012146  0100               	movlb	0	; () banked
 12760  012148  59D6               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 12761  01214A  A0D8               	btfss	status,0,c
 12762  01214C  0012               	return	
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;Button.c: 77: {
 12766                           ;Button.c: 79: pButton->mState = Pin;
 12767  01214E  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 12768  012152  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12769  012156  C0D8  FFDF         	movff	Button_Poll@Pin,indf2
 12770                           
 12771                           ; BSR set to: 0
 12772                           ;Button.c: 80: pButton->mCount = 0;
 12773  01215A  0100               	movlb	0	; () banked
 12774  01215C  EE20 F001          	lfsr	2,1
 12775  012160  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12776  012162  26D9               	addwf	fsr2l,f,c
 12777  012164  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12778  012166  22DA               	addwfc	fsr2h,f,c
 12779  012168  0E00               	movlw	0
 12780  01216A  6EDF               	movwf	indf2,c
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;Button.c: 83: pButton->mFunction(Pin);
 12784  01216C  0100               	movlb	0	; () banked
 12785  01216E  EE20 F004          	lfsr	2,4
 12786  012172  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12787  012174  26D9               	addwf	fsr2l,f,c
 12788  012176  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12789  012178  22DA               	addwfc	fsr2h,f,c
 12790  01217A  D801               	call	u7658
 12791  01217C  0012               	return	
 12792  01217E                     u7658:
 12793  01217E  0005               	push	
 12794  012180  6EFA               	movwf	pclath,c
 12795  012182  50DE               	movf	postinc2,w,c
 12796  012184  6EFD               	movwf	tosl,c
 12797  012186  50DE               	movf	postinc2,w,c
 12798  012188  6EFE               	movwf	tosh,c
 12799  01218A  50DE               	movf	postinc2,w,c
 12800  01218C  6EFF               	movwf	tosu,c
 12801  01218E  50FA               	movf	pclath,w,c
 12802  012190  0100               	movlb	0	; () banked
 12803  012192  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 12804  012194  0012               	return		;indir
 12805  012196                     __end_of_Button_Poll:
 12806                           	opt stack 0
 12807                           tosu	equ	0xFFF
 12808                           tosh	equ	0xFFE
 12809                           tosl	equ	0xFFD
 12810                           pclath	equ	0xFFA
 12811                           tblptru	equ	0xFF8
 12812                           tblptrh	equ	0xFF7
 12813                           tblptrl	equ	0xFF6
 12814                           tablat	equ	0xFF5
 12815                           prodh	equ	0xFF4
 12816                           prodl	equ	0xFF3
 12817                           intcon	equ	0xFF2
 12818                           postinc0	equ	0xFEE
 12819                           wreg	equ	0xFE8
 12820                           indf1	equ	0xFE7
 12821                           postdec1	equ	0xFE5
 12822                           fsr1h	equ	0xFE2
 12823                           fsr1l	equ	0xFE1
 12824                           indf2	equ	0xFDF
 12825                           postinc2	equ	0xFDE
 12826                           postdec2	equ	0xFDD
 12827                           plusw2	equ	0xFDB
 12828                           fsr2h	equ	0xFDA
 12829                           fsr2l	equ	0xFD9
 12830                           status	equ	0xFD8
 12831                           
 12832 ;; *************** function _MXK_DIPSwitch *****************
 12833 ;; Defined at:
 12834 ;;		line 24 in file "Library/MXK.c"
 12835 ;; Parameters:    Size  Location     Type
 12836 ;;		None
 12837 ;; Auto vars:     Size  Location     Type
 12838 ;;		None
 12839 ;; Return value:  Size  Location     Type
 12840 ;;                  1    wreg      unsigned char 
 12841 ;; Registers used:
 12842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12843 ;; Tracked objects:
 12844 ;;		On entry : 0/0
 12845 ;;		On exit  : 0/0
 12846 ;;		Unchanged: 0/0
 12847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;Total ram usage:        0 bytes
 12853 ;; Hardware stack levels used:    1
 12854 ;; Hardware stack levels required when called:    8
 12855 ;; This function calls:
 12856 ;;		_Port_GetQuad
 12857 ;; This function is called by:
 12858 ;;		_FunctInitButton
 12859 ;;		_Button_Poll
 12860 ;;		_main
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text63
 12865  01485E                     __ptext63:
 12866                           	opt stack 0
 12867  01485E                     _MXK_DIPSwitch:
 12868                           	opt stack 22
 12869                           
 12870                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 12871                           
 12872                           ;incstack = 0
 12873  01485E  0E99               	movlw	low _PortD
 12874  014860  0100               	movlb	0	; () banked
 12875  014862  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 12876  014864  0E00               	movlw	high _PortD
 12877  014866  0100               	movlb	0	; () banked
 12878  014868  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12879  01486A  0E00               	movlw	0
 12880  01486C  0100               	movlb	0	; () banked
 12881  01486E  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 12882  014870  EC52  F0A0         	call	_Port_GetQuad
 12883  014874  0012               	return	
 12884  014876                     __end_of_MXK_DIPSwitch:
 12885                           	opt stack 0
 12886                           tosu	equ	0xFFF
 12887                           tosh	equ	0xFFE
 12888                           tosl	equ	0xFFD
 12889                           pclath	equ	0xFFA
 12890                           tblptru	equ	0xFF8
 12891                           tblptrh	equ	0xFF7
 12892                           tblptrl	equ	0xFF6
 12893                           tablat	equ	0xFF5
 12894                           prodh	equ	0xFF4
 12895                           prodl	equ	0xFF3
 12896                           intcon	equ	0xFF2
 12897                           postinc0	equ	0xFEE
 12898                           wreg	equ	0xFE8
 12899                           indf1	equ	0xFE7
 12900                           postdec1	equ	0xFE5
 12901                           fsr1h	equ	0xFE2
 12902                           fsr1l	equ	0xFE1
 12903                           indf2	equ	0xFDF
 12904                           postinc2	equ	0xFDE
 12905                           postdec2	equ	0xFDD
 12906                           plusw2	equ	0xFDB
 12907                           fsr2h	equ	0xFDA
 12908                           fsr2l	equ	0xFD9
 12909                           status	equ	0xFD8
 12910                           
 12911 ;; *************** function _HMI_DIPSwitch *****************
 12912 ;; Defined at:
 12913 ;;		line 47 in file "HMI.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;		None
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;		None
 12918 ;; Return value:  Size  Location     Type
 12919 ;;                  1    wreg      unsigned char 
 12920 ;; Registers used:
 12921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;Total ram usage:        0 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    8
 12934 ;; This function calls:
 12935 ;;		_Port_GetQuad
 12936 ;; This function is called by:
 12937 ;;		_HMI_Init
 12938 ;;		_Button_Poll
 12939 ;;		_main
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text64
 12944  014876                     __ptext64:
 12945                           	opt stack 0
 12946  014876                     _HMI_DIPSwitch:
 12947                           	opt stack 20
 12948                           
 12949                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 12950                           
 12951                           ;incstack = 0
 12952  014876  0E8F               	movlw	low _PortE
 12953  014878  0100               	movlb	0	; () banked
 12954  01487A  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 12955  01487C  0E00               	movlw	high _PortE
 12956  01487E  0100               	movlb	0	; () banked
 12957  014880  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12958  014882  0E00               	movlw	0
 12959  014884  0100               	movlb	0	; () banked
 12960  014886  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 12961  014888  EC52  F0A0         	call	_Port_GetQuad	;wreg free
 12962  01488C  0012               	return	
 12963  01488E                     __end_of_HMI_DIPSwitch:
 12964                           	opt stack 0
 12965                           tosu	equ	0xFFF
 12966                           tosh	equ	0xFFE
 12967                           tosl	equ	0xFFD
 12968                           pclath	equ	0xFFA
 12969                           tblptru	equ	0xFF8
 12970                           tblptrh	equ	0xFF7
 12971                           tblptrl	equ	0xFF6
 12972                           tablat	equ	0xFF5
 12973                           prodh	equ	0xFF4
 12974                           prodl	equ	0xFF3
 12975                           intcon	equ	0xFF2
 12976                           postinc0	equ	0xFEE
 12977                           wreg	equ	0xFE8
 12978                           indf1	equ	0xFE7
 12979                           postdec1	equ	0xFE5
 12980                           fsr1h	equ	0xFE2
 12981                           fsr1l	equ	0xFE1
 12982                           indf2	equ	0xFDF
 12983                           postinc2	equ	0xFDE
 12984                           postdec2	equ	0xFDD
 12985                           plusw2	equ	0xFDB
 12986                           fsr2h	equ	0xFDA
 12987                           fsr2l	equ	0xFD9
 12988                           status	equ	0xFD8
 12989                           
 12990 ;; *************** function _HMI_DownSwitch *****************
 12991 ;; Defined at:
 12992 ;;		line 42 in file "HMI.c"
 12993 ;; Parameters:    Size  Location     Type
 12994 ;;		None
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;		None
 12997 ;; Return value:  Size  Location     Type
 12998 ;;                  1    wreg      unsigned char 
 12999 ;; Registers used:
 13000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13001 ;; Tracked objects:
 13002 ;;		On entry : 0/0
 13003 ;;		On exit  : 0/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13010 ;;Total ram usage:        0 bytes
 13011 ;; Hardware stack levels used:    1
 13012 ;; Hardware stack levels required when called:    8
 13013 ;; This function calls:
 13014 ;;		_Port_GetPin
 13015 ;; This function is called by:
 13016 ;;		_HMI_Init
 13017 ;;		_Button_Poll
 13018 ;;		_main
 13019 ;; This function uses a non-reentrant model
 13020 ;;
 13021                           
 13022                           	psect	text65
 13023  01488E                     __ptext65:
 13024                           	opt stack 0
 13025  01488E                     _HMI_DownSwitch:
 13026                           	opt stack 20
 13027                           
 13028                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 13029                           
 13030                           ;incstack = 0
 13031  01488E  0E8F               	movlw	low _PortE
 13032  014890  0100               	movlb	0	; () banked
 13033  014892  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13034  014894  0E00               	movlw	high _PortE
 13035  014896  0100               	movlb	0	; () banked
 13036  014898  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13037  01489A  0E06               	movlw	6
 13038  01489C  0100               	movlb	0	; () banked
 13039  01489E  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13040  0148A0  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 13041  0148A4  0012               	return	
 13042  0148A6                     __end_of_HMI_DownSwitch:
 13043                           	opt stack 0
 13044                           tosu	equ	0xFFF
 13045                           tosh	equ	0xFFE
 13046                           tosl	equ	0xFFD
 13047                           pclath	equ	0xFFA
 13048                           tblptru	equ	0xFF8
 13049                           tblptrh	equ	0xFF7
 13050                           tblptrl	equ	0xFF6
 13051                           tablat	equ	0xFF5
 13052                           prodh	equ	0xFF4
 13053                           prodl	equ	0xFF3
 13054                           intcon	equ	0xFF2
 13055                           postinc0	equ	0xFEE
 13056                           wreg	equ	0xFE8
 13057                           indf1	equ	0xFE7
 13058                           postdec1	equ	0xFE5
 13059                           fsr1h	equ	0xFE2
 13060                           fsr1l	equ	0xFE1
 13061                           indf2	equ	0xFDF
 13062                           postinc2	equ	0xFDE
 13063                           postdec2	equ	0xFDD
 13064                           plusw2	equ	0xFDB
 13065                           fsr2h	equ	0xFDA
 13066                           fsr2l	equ	0xFD9
 13067                           status	equ	0xFD8
 13068                           
 13069 ;; *************** function _HMI_UpSwitch *****************
 13070 ;; Defined at:
 13071 ;;		line 37 in file "HMI.c"
 13072 ;; Parameters:    Size  Location     Type
 13073 ;;		None
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;		None
 13076 ;; Return value:  Size  Location     Type
 13077 ;;                  1    wreg      unsigned char 
 13078 ;; Registers used:
 13079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13080 ;; Tracked objects:
 13081 ;;		On entry : 0/0
 13082 ;;		On exit  : 0/0
 13083 ;;		Unchanged: 0/0
 13084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;Total ram usage:        0 bytes
 13090 ;; Hardware stack levels used:    1
 13091 ;; Hardware stack levels required when called:    8
 13092 ;; This function calls:
 13093 ;;		_Port_GetPin
 13094 ;; This function is called by:
 13095 ;;		_HMI_Init
 13096 ;;		_Button_Poll
 13097 ;;		_main
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           	psect	text66
 13102  0148A6                     __ptext66:
 13103                           	opt stack 0
 13104  0148A6                     _HMI_UpSwitch:
 13105                           	opt stack 22
 13106                           
 13107                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 13108                           
 13109                           ;incstack = 0
 13110  0148A6  0E8F               	movlw	low _PortE
 13111  0148A8  0100               	movlb	0	; () banked
 13112  0148AA  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13113  0148AC  0E00               	movlw	high _PortE
 13114  0148AE  0100               	movlb	0	; () banked
 13115  0148B0  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13116  0148B2  0E07               	movlw	7
 13117  0148B4  0100               	movlb	0	; () banked
 13118  0148B6  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13119  0148B8  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 13120  0148BC  0012               	return	
 13121  0148BE                     __end_of_HMI_UpSwitch:
 13122                           	opt stack 0
 13123                           tosu	equ	0xFFF
 13124                           tosh	equ	0xFFE
 13125                           tosl	equ	0xFFD
 13126                           pclath	equ	0xFFA
 13127                           tblptru	equ	0xFF8
 13128                           tblptrh	equ	0xFF7
 13129                           tblptrl	equ	0xFF6
 13130                           tablat	equ	0xFF5
 13131                           prodh	equ	0xFF4
 13132                           prodl	equ	0xFF3
 13133                           intcon	equ	0xFF2
 13134                           postinc0	equ	0xFEE
 13135                           wreg	equ	0xFE8
 13136                           indf1	equ	0xFE7
 13137                           postdec1	equ	0xFE5
 13138                           fsr1h	equ	0xFE2
 13139                           fsr1l	equ	0xFE1
 13140                           indf2	equ	0xFDF
 13141                           postinc2	equ	0xFDE
 13142                           postdec2	equ	0xFDD
 13143                           plusw2	equ	0xFDB
 13144                           fsr2h	equ	0xFDA
 13145                           fsr2l	equ	0xFD9
 13146                           status	equ	0xFD8
 13147                           
 13148 ;; *************** function _HMI_RightSwitch *****************
 13149 ;; Defined at:
 13150 ;;		line 32 in file "HMI.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;		None
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;		None
 13155 ;; Return value:  Size  Location     Type
 13156 ;;                  1    wreg      unsigned char 
 13157 ;; Registers used:
 13158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13159 ;; Tracked objects:
 13160 ;;		On entry : 0/0
 13161 ;;		On exit  : 0/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;Total ram usage:        0 bytes
 13169 ;; Hardware stack levels used:    1
 13170 ;; Hardware stack levels required when called:    8
 13171 ;; This function calls:
 13172 ;;		_Port_GetPin
 13173 ;; This function is called by:
 13174 ;;		_HMI_Init
 13175 ;;		_Button_Poll
 13176 ;;		_main
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179                           
 13180                           	psect	text67
 13181  0148BE                     __ptext67:
 13182                           	opt stack 0
 13183  0148BE                     _HMI_RightSwitch:
 13184                           	opt stack 22
 13185                           
 13186                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 13187                           
 13188                           ;incstack = 0
 13189  0148BE  0E8F               	movlw	low _PortE
 13190  0148C0  0100               	movlb	0	; () banked
 13191  0148C2  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13192  0148C4  0E00               	movlw	high _PortE
 13193  0148C6  0100               	movlb	0	; () banked
 13194  0148C8  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13195  0148CA  0E04               	movlw	4
 13196  0148CC  0100               	movlb	0	; () banked
 13197  0148CE  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13198  0148D0  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 13199  0148D4  0012               	return	
 13200  0148D6                     __end_of_HMI_RightSwitch:
 13201                           	opt stack 0
 13202                           tosu	equ	0xFFF
 13203                           tosh	equ	0xFFE
 13204                           tosl	equ	0xFFD
 13205                           pclath	equ	0xFFA
 13206                           tblptru	equ	0xFF8
 13207                           tblptrh	equ	0xFF7
 13208                           tblptrl	equ	0xFF6
 13209                           tablat	equ	0xFF5
 13210                           prodh	equ	0xFF4
 13211                           prodl	equ	0xFF3
 13212                           intcon	equ	0xFF2
 13213                           postinc0	equ	0xFEE
 13214                           wreg	equ	0xFE8
 13215                           indf1	equ	0xFE7
 13216                           postdec1	equ	0xFE5
 13217                           fsr1h	equ	0xFE2
 13218                           fsr1l	equ	0xFE1
 13219                           indf2	equ	0xFDF
 13220                           postinc2	equ	0xFDE
 13221                           postdec2	equ	0xFDD
 13222                           plusw2	equ	0xFDB
 13223                           fsr2h	equ	0xFDA
 13224                           fsr2l	equ	0xFD9
 13225                           status	equ	0xFD8
 13226                           
 13227 ;; *************** function _HMI_LeftSwitch *****************
 13228 ;; Defined at:
 13229 ;;		line 27 in file "HMI.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;		None
 13232 ;; Auto vars:     Size  Location     Type
 13233 ;;		None
 13234 ;; Return value:  Size  Location     Type
 13235 ;;                  1    wreg      unsigned char 
 13236 ;; Registers used:
 13237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13238 ;; Tracked objects:
 13239 ;;		On entry : 0/0
 13240 ;;		On exit  : 0/0
 13241 ;;		Unchanged: 0/0
 13242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;Total ram usage:        0 bytes
 13248 ;; Hardware stack levels used:    1
 13249 ;; Hardware stack levels required when called:    8
 13250 ;; This function calls:
 13251 ;;		_Port_GetPin
 13252 ;; This function is called by:
 13253 ;;		_HMI_Init
 13254 ;;		_Button_Poll
 13255 ;;		_main
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           	psect	text68
 13260  0148D6                     __ptext68:
 13261                           	opt stack 0
 13262  0148D6                     _HMI_LeftSwitch:
 13263                           	opt stack 20
 13264                           
 13265                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 13266                           
 13267                           ;incstack = 0
 13268  0148D6  0E8F               	movlw	low _PortE
 13269  0148D8  0100               	movlb	0	; () banked
 13270  0148DA  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13271  0148DC  0E00               	movlw	high _PortE
 13272  0148DE  0100               	movlb	0	; () banked
 13273  0148E0  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13274  0148E2  0E05               	movlw	5
 13275  0148E4  0100               	movlb	0	; () banked
 13276  0148E6  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13277  0148E8  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 13278  0148EC  0012               	return	
 13279  0148EE                     __end_of_HMI_LeftSwitch:
 13280                           	opt stack 0
 13281                           tosu	equ	0xFFF
 13282                           tosh	equ	0xFFE
 13283                           tosl	equ	0xFFD
 13284                           pclath	equ	0xFFA
 13285                           tblptru	equ	0xFF8
 13286                           tblptrh	equ	0xFF7
 13287                           tblptrl	equ	0xFF6
 13288                           tablat	equ	0xFF5
 13289                           prodh	equ	0xFF4
 13290                           prodl	equ	0xFF3
 13291                           intcon	equ	0xFF2
 13292                           postinc0	equ	0xFEE
 13293                           wreg	equ	0xFE8
 13294                           indf1	equ	0xFE7
 13295                           postdec1	equ	0xFE5
 13296                           fsr1h	equ	0xFE2
 13297                           fsr1l	equ	0xFE1
 13298                           indf2	equ	0xFDF
 13299                           postinc2	equ	0xFDE
 13300                           postdec2	equ	0xFDD
 13301                           plusw2	equ	0xFDB
 13302                           fsr2h	equ	0xFDA
 13303                           fsr2l	equ	0xFD9
 13304                           status	equ	0xFD8
 13305                           
 13306 ;; *************** function _MXK_TestButton *****************
 13307 ;; Defined at:
 13308 ;;		line 14 in file "Library/MXK.c"
 13309 ;; Parameters:    Size  Location     Type
 13310 ;;		None
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;		None
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  1    wreg      unsigned char 
 13315 ;; Registers used:
 13316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13326 ;;Total ram usage:        0 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    8
 13329 ;; This function calls:
 13330 ;;		_Port_GetPin
 13331 ;; This function is called by:
 13332 ;;		_FunctInitButton
 13333 ;;		_Button_Poll
 13334 ;;		_main
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           	psect	text69
 13339  0148EE                     __ptext69:
 13340                           	opt stack 0
 13341  0148EE                     _MXK_TestButton:
 13342                           	opt stack 22
 13343                           
 13344                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 13345                           
 13346                           ;incstack = 0
 13347  0148EE  0E9C               	movlw	low _PortB
 13348  0148F0  0100               	movlb	0	; () banked
 13349  0148F2  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13350  0148F4  0E03               	movlw	high _PortB
 13351  0148F6  0100               	movlb	0	; () banked
 13352  0148F8  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13353  0148FA  0E04               	movlw	4
 13354  0148FC  0100               	movlb	0	; () banked
 13355  0148FE  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13356  014900  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 13357  014904  0012               	return	
 13358  014906                     __end_of_MXK_TestButton:
 13359                           	opt stack 0
 13360                           tosu	equ	0xFFF
 13361                           tosh	equ	0xFFE
 13362                           tosl	equ	0xFFD
 13363                           pclath	equ	0xFFA
 13364                           tblptru	equ	0xFF8
 13365                           tblptrh	equ	0xFF7
 13366                           tblptrl	equ	0xFF6
 13367                           tablat	equ	0xFF5
 13368                           prodh	equ	0xFF4
 13369                           prodl	equ	0xFF3
 13370                           intcon	equ	0xFF2
 13371                           postinc0	equ	0xFEE
 13372                           wreg	equ	0xFE8
 13373                           indf1	equ	0xFE7
 13374                           postdec1	equ	0xFE5
 13375                           fsr1h	equ	0xFE2
 13376                           fsr1l	equ	0xFE1
 13377                           indf2	equ	0xFDF
 13378                           postinc2	equ	0xFDE
 13379                           postdec2	equ	0xFDD
 13380                           plusw2	equ	0xFDB
 13381                           fsr2h	equ	0xFDA
 13382                           fsr2l	equ	0xFD9
 13383                           status	equ	0xFD8
 13384                           
 13385 ;; *************** function _Port_GetQuad *****************
 13386 ;; Defined at:
 13387 ;;		line 498 in file "Library/Port.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13390 ;;		 -> PortE(10), PortD(10), 
 13391 ;;  pQuad           1    2[BANK0 ] enum E6776
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;  Output          1    5[BANK0 ] unsigned char 
 13394 ;; Return value:  Size  Location     Type
 13395 ;;                  1    wreg      unsigned char 
 13396 ;; Registers used:
 13397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13403 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13407 ;;Total ram usage:        6 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; Hardware stack levels required when called:    7
 13410 ;; This function calls:
 13411 ;;		Nothing
 13412 ;; This function is called by:
 13413 ;;		_HMI_DIPSwitch
 13414 ;;		_MXK_DIPSwitch
 13415 ;;		_Port_ToggleQuad
 13416 ;; This function uses a non-reentrant model
 13417 ;;
 13418                           
 13419                           	psect	text70
 13420  0140A4                     __ptext70:
 13421                           	opt stack 0
 13422  0140A4                     _Port_GetQuad:
 13423                           	opt stack 22
 13424                           
 13425                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 13426                           
 13427                           ;incstack = 0
 13428  0140A4  0100               	movlb	0	; () banked
 13429  0140A6  EE20 F006          	lfsr	2,6
 13430  0140AA  51B5               	movf	Port_GetQuad@pInput& (0+255),w,b
 13431  0140AC  26D9               	addwf	fsr2l,f,c
 13432  0140AE  51B6               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 13433  0140B0  22DA               	addwfc	fsr2h,f,c
 13434  0140B2  CFDE F0B8          	movff	postinc2,??_Port_GetQuad
 13435  0140B6  CFDD F0B9          	movff	postdec2,??_Port_GetQuad+1
 13436  0140BA  C0B8  FFD9         	movff	??_Port_GetQuad,fsr2l
 13437  0140BE  C0B9  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 13438  0140C2  50DF               	movf	indf2,w,c
 13439  0140C4  0100               	movlb	0	; () banked
 13440  0140C6  6FBA               	movwf	Port_GetQuad@Output& (0+255),b
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 13444  0140C8  0100               	movlb	0	; () banked
 13445  0140CA  51B7               	movf	Port_GetQuad@pQuad& (0+255),w,b
 13446  0140CC  0D04               	mullw	4
 13447  0140CE  28F3               	incf	prodl,w,c
 13448  0140D0  0100               	movlb	0	; () banked
 13449  0140D2  6FB8               	movwf	??_Port_GetQuad& (0+255),b
 13450  0140D4  D003               	goto	u7100
 13451  0140D6                     u7105:
 13452  0140D6  0100               	movlb	0	; () banked
 13453  0140D8  90D8               	bcf	status,0,c
 13454  0140DA  33BA               	rrcf	Port_GetQuad@Output& (0+255),f,b
 13455  0140DC                     u7100:
 13456  0140DC  0100               	movlb	0	; () banked
 13457  0140DE  2FB8               	decfsz	??_Port_GetQuad& (0+255),f,b
 13458  0140E0  D7FA               	goto	u7105
 13459                           
 13460                           ;Port.c: 502: Output &= 0xF;
 13461  0140E2  0E0F               	movlw	15
 13462  0140E4  0100               	movlb	0	; () banked
 13463  0140E6  17BA               	andwf	Port_GetQuad@Output& (0+255),f,b
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;Port.c: 503: return Output;
 13467  0140E8  0100               	movlb	0	; () banked
 13468  0140EA  51BA               	movf	Port_GetQuad@Output& (0+255),w,b
 13469  0140EC  0012               	return	
 13470  0140EE                     __end_of_Port_GetQuad:
 13471                           	opt stack 0
 13472                           tosu	equ	0xFFF
 13473                           tosh	equ	0xFFE
 13474                           tosl	equ	0xFFD
 13475                           pclath	equ	0xFFA
 13476                           tblptru	equ	0xFF8
 13477                           tblptrh	equ	0xFF7
 13478                           tblptrl	equ	0xFF6
 13479                           tablat	equ	0xFF5
 13480                           prodh	equ	0xFF4
 13481                           prodl	equ	0xFF3
 13482                           intcon	equ	0xFF2
 13483                           postinc0	equ	0xFEE
 13484                           wreg	equ	0xFE8
 13485                           indf1	equ	0xFE7
 13486                           postdec1	equ	0xFE5
 13487                           fsr1h	equ	0xFE2
 13488                           fsr1l	equ	0xFE1
 13489                           indf2	equ	0xFDF
 13490                           postinc2	equ	0xFDE
 13491                           postdec2	equ	0xFDD
 13492                           plusw2	equ	0xFDB
 13493                           fsr2h	equ	0xFDA
 13494                           fsr2l	equ	0xFD9
 13495                           status	equ	0xFD8
 13496                           
 13497 ;; *************** function _Event_DIPSwitch *****************
 13498 ;; Defined at:
 13499 ;;		line 22 in file "Events.c"
 13500 ;; Parameters:    Size  Location     Type
 13501 ;;  pState          1    wreg     unsigned char 
 13502 ;; Auto vars:     Size  Location     Type
 13503 ;;  pState          1   25[BANK0 ] unsigned char 
 13504 ;;  Bar             1   26[BANK0 ] unsigned char 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;                  1    wreg      void 
 13507 ;; Registers used:
 13508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;Total ram usage:        2 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:   13
 13521 ;; This function calls:
 13522 ;;		_HMI_GetBar
 13523 ;;		_HMI_SetBar
 13524 ;;		_LED_Toggle
 13525 ;; This function is called by:
 13526 ;;		_FunctInitButton
 13527 ;;		_Button_Poll
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           	psect	text71
 13532  0145B6                     __ptext71:
 13533                           	opt stack 0
 13534  0145B6                     _Event_DIPSwitch:
 13535                           	opt stack 15
 13536                           
 13537                           ; BSR set to: 0
 13538                           ;incstack = 0
 13539                           ;Event_DIPSwitch@pState stored from wreg
 13540  0145B6  0100               	movlb	0	; () banked
 13541  0145B8  6FCE               	movwf	Event_DIPSwitch@pState& (0+255),b
 13542                           
 13543                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 13544  0145BA  ECF2  F0A4         	call	_HMI_GetBar	;wreg free
 13545  0145BE  0100               	movlb	0	; () banked
 13546  0145C0  6FCF               	movwf	Event_DIPSwitch@Bar& (0+255),b
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;Events.c: 25: Bar &= 0x0F;
 13550  0145C2  0E0F               	movlw	15
 13551  0145C4  0100               	movlb	0	; () banked
 13552  0145C6  17CF               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;Events.c: 26: pState <<= 4;
 13556  0145C8  0100               	movlb	0	; () banked
 13557  0145CA  3BCE               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 13558  0145CC  0EF0               	movlw	240
 13559  0145CE  17CE               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 13563  0145D0  0100               	movlb	0	; () banked
 13564  0145D2  51CE               	movf	Event_DIPSwitch@pState& (0+255),w,b
 13565  0145D4  0100               	movlb	0	; () banked
 13566  0145D6  11CF               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 13567  0145D8  ECDA  F0A4         	call	_HMI_SetBar
 13568                           
 13569                           ;Events.c: 32: LED_Toggle(eLED1);
 13570  0145DC  0E00               	movlw	0
 13571  0145DE  EC9B  F0A0         	call	_LED_Toggle
 13572  0145E2  0012               	return		;funcret
 13573  0145E4                     __end_of_Event_DIPSwitch:
 13574                           	opt stack 0
 13575                           tosu	equ	0xFFF
 13576                           tosh	equ	0xFFE
 13577                           tosl	equ	0xFFD
 13578                           pclath	equ	0xFFA
 13579                           tblptru	equ	0xFF8
 13580                           tblptrh	equ	0xFF7
 13581                           tblptrl	equ	0xFF6
 13582                           tablat	equ	0xFF5
 13583                           prodh	equ	0xFF4
 13584                           prodl	equ	0xFF3
 13585                           intcon	equ	0xFF2
 13586                           postinc0	equ	0xFEE
 13587                           wreg	equ	0xFE8
 13588                           indf1	equ	0xFE7
 13589                           postdec1	equ	0xFE5
 13590                           fsr1h	equ	0xFE2
 13591                           fsr1l	equ	0xFE1
 13592                           indf2	equ	0xFDF
 13593                           postinc2	equ	0xFDE
 13594                           postdec2	equ	0xFDD
 13595                           plusw2	equ	0xFDB
 13596                           fsr2h	equ	0xFDA
 13597                           fsr2l	equ	0xFD9
 13598                           status	equ	0xFD8
 13599                           
 13600 ;; *************** function _Event_NULL *****************
 13601 ;; Defined at:
 13602 ;;		line 9 in file "Events.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  pState          1    wreg     unsigned char 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;  pState          1    0[COMRAM] unsigned char 
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13620 ;;Total ram usage:        0 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    7
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_HMI_Init
 13627 ;;		_Button_Poll
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           	psect	text72
 13632  001404                     __ptext72:
 13633                           	opt stack 0
 13634  001404                     _Event_NULL:
 13635                           	opt stack 21
 13636                           
 13637                           ;incstack = 0
 13638  001404  0012               	return		;funcret
 13639  001406                     __end_of_Event_NULL:
 13640                           	opt stack 0
 13641                           tosu	equ	0xFFF
 13642                           tosh	equ	0xFFE
 13643                           tosl	equ	0xFFD
 13644                           pclath	equ	0xFFA
 13645                           tblptru	equ	0xFF8
 13646                           tblptrh	equ	0xFF7
 13647                           tblptrl	equ	0xFF6
 13648                           tablat	equ	0xFF5
 13649                           prodh	equ	0xFF4
 13650                           prodl	equ	0xFF3
 13651                           intcon	equ	0xFF2
 13652                           postinc0	equ	0xFEE
 13653                           wreg	equ	0xFE8
 13654                           indf1	equ	0xFE7
 13655                           postdec1	equ	0xFE5
 13656                           fsr1h	equ	0xFE2
 13657                           fsr1l	equ	0xFE1
 13658                           indf2	equ	0xFDF
 13659                           postinc2	equ	0xFDE
 13660                           postdec2	equ	0xFDD
 13661                           plusw2	equ	0xFDB
 13662                           fsr2h	equ	0xFDA
 13663                           fsr2l	equ	0xFD9
 13664                           status	equ	0xFD8
 13665                           
 13666 ;; *************** function _Event_TestButton *****************
 13667 ;; Defined at:
 13668 ;;		line 52 in file "Events.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  pState          1    wreg     unsigned char 
 13671 ;; Auto vars:     Size  Location     Type
 13672 ;;  pState          1   25[BANK0 ] unsigned char 
 13673 ;; Return value:  Size  Location     Type
 13674 ;;                  1    wreg      void 
 13675 ;; Registers used:
 13676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13677 ;; Tracked objects:
 13678 ;;		On entry : 0/0
 13679 ;;		On exit  : 0/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13686 ;;Total ram usage:        1 bytes
 13687 ;; Hardware stack levels used:    1
 13688 ;; Hardware stack levels required when called:   13
 13689 ;; This function calls:
 13690 ;;		_HMI_SetButton
 13691 ;;		_HMI_SetNumber
 13692 ;;		_LED_Toggle
 13693 ;; This function is called by:
 13694 ;;		_FunctInitButton
 13695 ;;		_Button_Poll
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           	psect	text73
 13700  014410                     __ptext73:
 13701                           	opt stack 0
 13702  014410                     _Event_TestButton:
 13703                           	opt stack 15
 13704                           
 13705                           ;incstack = 0
 13706                           ;Event_TestButton@pState stored from wreg
 13707  014410  0100               	movlb	0	; () banked
 13708  014412  6FCE               	movwf	Event_TestButton@pState& (0+255),b
 13709                           
 13710                           ;Events.c: 56: static UINT8 j = 0;
 13711                           ;Events.c: 60: if (pState == 0)
 13712  014414  0100               	movlb	0	; () banked
 13713  014416  51CE               	movf	Event_TestButton@pState& (0+255),w,b
 13714  014418  0100               	movlb	0	; () banked
 13715  01441A  A4D8               	btfss	status,2,c
 13716  01441C  D013               	goto	l1873
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;Events.c: 61: {
 13720                           ;Events.c: 62: j++;
 13721  01441E  0100               	movlb	0	; () banked
 13722  014420  2B89               	incf	Event_TestButton@j& (0+255),f,b
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;Events.c: 63: val += j;
 13726  014422  0100               	movlb	0	; () banked
 13727  014424  5189               	movf	Event_TestButton@j& (0+255),w,b
 13728  014426  0100               	movlb	0	; () banked
 13729  014428  277B               	addwf	_val& (0+255),f,b
 13730  01442A  0E00               	movlw	0
 13731  01442C  237C               	addwfc	(_val+1)& (0+255),f,b
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;Events.c: 64: HMI_SetNumber( val );
 13735  01442E  C07B  F0CB         	movff	_val,HMI_SetNumber@pInput
 13736  014432  C07C  F0CC         	movff	_val+1,HMI_SetNumber@pInput+1
 13737  014436  EC09  F0A3         	call	_HMI_SetNumber	;wreg free
 13738                           
 13739                           ;Events.c: 67: HMI_SetButton( j & 3 );
 13740  01443A  0100               	movlb	0	; () banked
 13741  01443C  5189               	movf	Event_TestButton@j& (0+255),w,b
 13742  01443E  0B03               	andlw	3
 13743  014440  EC0B  F09A         	call	_HMI_SetButton
 13744  014444                     l1873:
 13745                           
 13746                           ;Events.c: 68: }
 13747                           ;Events.c: 72: LED_Toggle(eLED1);
 13748  014444  0E00               	movlw	0
 13749  014446  EC9B  F0A0         	call	_LED_Toggle
 13750  01444A  0012               	return		;funcret
 13751  01444C                     __end_of_Event_TestButton:
 13752                           	opt stack 0
 13753                           tosu	equ	0xFFF
 13754                           tosh	equ	0xFFE
 13755                           tosl	equ	0xFFD
 13756                           pclath	equ	0xFFA
 13757                           tblptru	equ	0xFF8
 13758                           tblptrh	equ	0xFF7
 13759                           tblptrl	equ	0xFF6
 13760                           tablat	equ	0xFF5
 13761                           prodh	equ	0xFF4
 13762                           prodl	equ	0xFF3
 13763                           intcon	equ	0xFF2
 13764                           postinc0	equ	0xFEE
 13765                           wreg	equ	0xFE8
 13766                           indf1	equ	0xFE7
 13767                           postdec1	equ	0xFE5
 13768                           fsr1h	equ	0xFE2
 13769                           fsr1l	equ	0xFE1
 13770                           indf2	equ	0xFDF
 13771                           postinc2	equ	0xFDE
 13772                           postdec2	equ	0xFDD
 13773                           plusw2	equ	0xFDB
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _HMI_SetNumber *****************
 13779 ;; Defined at:
 13780 ;;		line 221 in file "HMI.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  pInput          2   22[BANK0 ] int 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;		None
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      void 
 13787 ;; Registers used:
 13788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;Total ram usage:        2 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    9
 13801 ;; This function calls:
 13802 ;;		_HMI_SetSegments
 13803 ;;		_itos
 13804 ;; This function is called by:
 13805 ;;		_Event_TestButton
 13806 ;;		_Event_HMI_UpButton
 13807 ;;		_Event_HMI_DownButton
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           	psect	text74
 13812  014612                     __ptext74:
 13813                           	opt stack 0
 13814  014612                     _HMI_SetNumber:
 13815                           	opt stack 18
 13816                           
 13817                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 13818                           
 13819                           ;incstack = 0
 13820  014612  C0CB  F0C1         	movff	HMI_SetNumber@pInput,itos@input
 13821  014616  C0CC  F0C2         	movff	HMI_SetNumber@pInput+1,itos@input+1
 13822  01461A  0E2E               	movlw	low _HMIBoard
 13823  01461C  0100               	movlb	0	; () banked
 13824  01461E  6FC3               	movwf	itos@destination& (0+255),b
 13825  014620  0E03               	movlw	high _HMIBoard
 13826  014622  0100               	movlb	0	; () banked
 13827  014624  6FC4               	movwf	(itos@destination+1)& (0+255),b
 13828  014626  EC06  F093         	call	_itos	;wreg free
 13829                           
 13830                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 13831  01462A  0E2E               	movlw	low _HMIBoard
 13832  01462C  0100               	movlb	0	; () banked
 13833  01462E  6FB6               	movwf	HMI_SetSegments@pString& (0+255),b
 13834  014630  0E03               	movlw	high _HMIBoard
 13835  014632  0100               	movlb	0	; () banked
 13836  014634  6FB7               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 13837  014636  ECC4  F095         	call	_HMI_SetSegments	;wreg free
 13838  01463A  0012               	return		;funcret
 13839  01463C                     __end_of_HMI_SetNumber:
 13840                           	opt stack 0
 13841                           tosu	equ	0xFFF
 13842                           tosh	equ	0xFFE
 13843                           tosl	equ	0xFFD
 13844                           pclath	equ	0xFFA
 13845                           tblptru	equ	0xFF8
 13846                           tblptrh	equ	0xFF7
 13847                           tblptrl	equ	0xFF6
 13848                           tablat	equ	0xFF5
 13849                           prodh	equ	0xFF4
 13850                           prodl	equ	0xFF3
 13851                           intcon	equ	0xFF2
 13852                           postinc0	equ	0xFEE
 13853                           wreg	equ	0xFE8
 13854                           indf1	equ	0xFE7
 13855                           postdec1	equ	0xFE5
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           plusw2	equ	0xFDB
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _itos *****************
 13867 ;; Defined at:
 13868 ;;		line 369 in file "Library/Types.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  input           2   12[BANK0 ] unsigned short 
 13871 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 13872 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  Out             2   20[BANK0 ] unsigned short 
 13875 ;;  Length          2   18[BANK0 ] unsigned short 
 13876 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 13877 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13878 ;; Return value:  Size  Location     Type
 13879 ;;                  1    wreg      void 
 13880 ;; Registers used:
 13881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13887 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13888 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13890 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;Total ram usage:       10 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; Hardware stack levels required when called:    8
 13894 ;; This function calls:
 13895 ;;		___lwdiv
 13896 ;;		___lwmod
 13897 ;;		_reverse
 13898 ;; This function is called by:
 13899 ;;		_HMI_SetNumber
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           	psect	text75
 13904  01260C                     __ptext75:
 13905                           	opt stack 0
 13906  01260C                     _itos:
 13907                           	opt stack 18
 13908                           
 13909                           ;Types.c: 371: UINT16 Out = input;
 13910                           
 13911                           ;incstack = 0
 13912  01260C  C0C1  F0C9         	movff	itos@input,itos@Out
 13913  012610  C0C2  F0CA         	movff	itos@input+1,itos@Out+1
 13914                           
 13915                           ;Types.c: 372: UINT16 Length = 0;
 13916  012614  0E00               	movlw	0
 13917  012616  0100               	movlb	0	; () banked
 13918  012618  6FC8               	movwf	(itos@Length+1)& (0+255),b
 13919  01261A  0E00               	movlw	0
 13920  01261C  6FC7               	movwf	itos@Length& (0+255),b
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;Types.c: 373: char *Data = destination;
 13924  01261E  C0C3  F0C5         	movff	itos@destination,itos@Data
 13925  012622  C0C4  F0C6         	movff	itos@destination+1,itos@Data+1
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;Types.c: 374: if(Out == 0)
 13929  012626  0100               	movlb	0	; () banked
 13930  012628  51C9               	movf	itos@Out& (0+255),w,b
 13931  01262A  0100               	movlb	0	; () banked
 13932  01262C  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 13933  01262E  A4D8               	btfss	status,2,c
 13934  012630  D034               	goto	l929
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;Types.c: 375: {
 13938                           ;Types.c: 376: Data[0] = (UINT16)'0';
 13939  012632  C0C5  FFD9         	movff	itos@Data,fsr2l
 13940  012636  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 13941  01263A  0E30               	movlw	48
 13942  01263C  6EDF               	movwf	indf2,c
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;Types.c: 377: Length = 1;
 13946  01263E  0E00               	movlw	0
 13947  012640  0100               	movlb	0	; () banked
 13948  012642  6FC8               	movwf	(itos@Length+1)& (0+255),b
 13949  012644  0E01               	movlw	1
 13950  012646  6FC7               	movwf	itos@Length& (0+255),b
 13951                           
 13952                           ;Types.c: 378: }
 13953  012648  D040               	goto	l928
 13954  01264A                     
 13955                           ; BSR set to: 0
 13956                           ;Types.c: 382: {
 13957                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 13958                           
 13959                           ; BSR set to: 0
 13960  01264A  C0C9  F0BC         	movff	itos@Out,___lwmod@dividend
 13961  01264E  C0CA  F0BD         	movff	itos@Out+1,___lwmod@dividend+1
 13962  012652  0E00               	movlw	0
 13963  012654  0100               	movlb	0	; () banked
 13964  012656  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
 13965  012658  0E0A               	movlw	10
 13966  01265A  6FBE               	movwf	___lwmod@divisor& (0+255),b
 13967  01265C  ECCF  F09E         	call	___lwmod	;wreg free
 13968  012660  0100               	movlb	0	; () banked
 13969  012662  51BC               	movf	?___lwmod& (0+255),w,b
 13970  012664  0F30               	addlw	48
 13971  012666  C0C5  FFD9         	movff	itos@Data,fsr2l
 13972  01266A  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 13973  01266E  6EDF               	movwf	indf2,c
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;Types.c: 384: Out /= 10;
 13977  012670  C0C9  F0B5         	movff	itos@Out,___lwdiv@dividend
 13978  012674  C0CA  F0B6         	movff	itos@Out+1,___lwdiv@dividend+1
 13979  012678  0E00               	movlw	0
 13980  01267A  0100               	movlb	0	; () banked
 13981  01267C  6FB8               	movwf	(___lwdiv@divisor+1)& (0+255),b
 13982  01267E  0E0A               	movlw	10
 13983  012680  6FB7               	movwf	___lwdiv@divisor& (0+255),b
 13984  012682  EC64  F09B         	call	___lwdiv	;wreg free
 13985  012686  C0B5  F0C9         	movff	?___lwdiv,itos@Out
 13986  01268A  C0B6  F0CA         	movff	?___lwdiv+1,itos@Out+1
 13987                           
 13988                           ;Types.c: 385: Length ++;
 13989  01268E  0100               	movlb	0	; () banked
 13990  012690  4BC7               	infsnz	itos@Length& (0+255),f,b
 13991  012692  2BC8               	incf	(itos@Length+1)& (0+255),f,b
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;Types.c: 386: Data++;
 13995  012694  0100               	movlb	0	; () banked
 13996  012696  4BC5               	infsnz	itos@Data& (0+255),f,b
 13997  012698  2BC6               	incf	(itos@Data+1)& (0+255),f,b
 13998  01269A                     l929:
 13999                           
 14000                           ; BSR set to: 0
 14001                           
 14002                           ; BSR set to: 0
 14003  01269A  0100               	movlb	0	; () banked
 14004  01269C  51C9               	movf	itos@Out& (0+255),w,b
 14005  01269E  0100               	movlb	0	; () banked
 14006  0126A0  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 14007  0126A2  B4D8               	btfsc	status,2,c
 14008  0126A4  D008               	goto	u6840
 14009                           
 14010                           ; BSR set to: 0
 14011  0126A6  0100               	movlb	0	; () banked
 14012  0126A8  51C8               	movf	(itos@Length+1)& (0+255),w,b
 14013  0126AA  E105               	bnz	l10784
 14014  0126AC  0E06               	movlw	6
 14015  0126AE  0100               	movlb	0	; () banked
 14016  0126B0  5DC7               	subwf	itos@Length& (0+255),w,b
 14017  0126B2  A0D8               	btfss	status,0,c
 14018  0126B4  D7CA               	goto	l930
 14019  0126B6                     u6840:
 14020  0126B6                     l10784:
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;Types.c: 387: }
 14024                           ;Types.c: 388: reverse(destination, Length);
 14025  0126B6  C0C3  F0B5         	movff	itos@destination,reverse@input
 14026  0126BA  C0C4  F0B6         	movff	itos@destination+1,reverse@input+1
 14027  0126BE  C0C7  F0B7         	movff	itos@Length,reverse@length
 14028  0126C2  C0C8  F0B8         	movff	itos@Length+1,reverse@length+1
 14029  0126C6  ECFB  F09C         	call	_reverse	;wreg free
 14030  0126CA                     l928:
 14031                           
 14032                           ;Types.c: 389: }
 14033                           ;Types.c: 390: destination[Length] = '\0';
 14034  0126CA  0100               	movlb	0	; () banked
 14035  0126CC  51C7               	movf	itos@Length& (0+255),w,b
 14036  0126CE  0100               	movlb	0	; () banked
 14037  0126D0  25C3               	addwf	itos@destination& (0+255),w,b
 14038  0126D2  6ED9               	movwf	fsr2l,c
 14039  0126D4  0100               	movlb	0	; () banked
 14040  0126D6  51C8               	movf	(itos@Length+1)& (0+255),w,b
 14041  0126D8  0100               	movlb	0	; () banked
 14042  0126DA  21C4               	addwfc	(itos@destination+1)& (0+255),w,b
 14043  0126DC  6EDA               	movwf	fsr2h,c
 14044  0126DE  0E00               	movlw	0
 14045  0126E0  6EDF               	movwf	indf2,c
 14046                           
 14047                           ; BSR set to: 0
 14048  0126E2  0012               	return		;funcret
 14049  0126E4                     __end_of_itos:
 14050                           	opt stack 0
 14051                           tosu	equ	0xFFF
 14052                           tosh	equ	0xFFE
 14053                           tosl	equ	0xFFD
 14054                           pclath	equ	0xFFA
 14055                           tblptru	equ	0xFF8
 14056                           tblptrh	equ	0xFF7
 14057                           tblptrl	equ	0xFF6
 14058                           tablat	equ	0xFF5
 14059                           prodh	equ	0xFF4
 14060                           prodl	equ	0xFF3
 14061                           intcon	equ	0xFF2
 14062                           postinc0	equ	0xFEE
 14063                           wreg	equ	0xFE8
 14064                           indf1	equ	0xFE7
 14065                           postdec1	equ	0xFE5
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           plusw2	equ	0xFDB
 14072                           fsr2h	equ	0xFDA
 14073                           fsr2l	equ	0xFD9
 14074                           status	equ	0xFD8
 14075                           
 14076 ;; *************** function _reverse *****************
 14077 ;; Defined at:
 14078 ;;		line 357 in file "Library/Types.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;  input           2    0[BANK0 ] PTR unsigned char 
 14081 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14082 ;;  length          2    2[BANK0 ] unsigned short 
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 14085 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14086 ;;  tempVar         1    4[BANK0 ] unsigned char 
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  1    wreg      void 
 14089 ;; Registers used:
 14090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14097 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14099 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14100 ;;Total ram usage:        7 bytes
 14101 ;; Hardware stack levels used:    1
 14102 ;; Hardware stack levels required when called:    7
 14103 ;; This function calls:
 14104 ;;		Nothing
 14105 ;; This function is called by:
 14106 ;;		_itos
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           	psect	text76
 14111  0139F6                     __ptext76:
 14112                           	opt stack 0
 14113  0139F6                     _reverse:
 14114                           	opt stack 18
 14115                           
 14116                           ;Types.c: 359: char tempVar,
 14117                           ;Types.c: 360: *iterator = input + length;
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;incstack = 0
 14121  0139F6  0100               	movlb	0	; () banked
 14122  0139F8  51B7               	movf	reverse@length& (0+255),w,b
 14123  0139FA  0100               	movlb	0	; () banked
 14124  0139FC  25B5               	addwf	reverse@input& (0+255),w,b
 14125  0139FE  0100               	movlb	0	; () banked
 14126  013A00  6FBA               	movwf	reverse@iterator& (0+255),b
 14127  013A02  0100               	movlb	0	; () banked
 14128  013A04  51B8               	movf	(reverse@length+1)& (0+255),w,b
 14129  013A06  0100               	movlb	0	; () banked
 14130  013A08  21B6               	addwfc	(reverse@input+1)& (0+255),w,b
 14131  013A0A  0100               	movlb	0	; () banked
 14132  013A0C  6FBB               	movwf	(reverse@iterator+1)& (0+255),b
 14133                           
 14134                           ;Types.c: 362: while ( --iterator > input )
 14135  013A0E  D01A               	goto	l921
 14136  013A10                     
 14137                           ; BSR set to: 0
 14138                           ;Types.c: 363: {
 14139                           ;Types.c: 364: tempVar = *input;
 14140                           
 14141                           ; BSR set to: 0
 14142  013A10  C0B5  FFD9         	movff	reverse@input,fsr2l
 14143  013A14  C0B6  FFDA         	movff	reverse@input+1,fsr2h
 14144  013A18  50DF               	movf	indf2,w,c
 14145  013A1A  0100               	movlb	0	; () banked
 14146  013A1C  6FB9               	movwf	reverse@tempVar& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;Types.c: 365: *input++=*iterator;
 14150  013A1E  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 14151  013A22  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 14152  013A26  C0B5  FFE1         	movff	reverse@input,fsr1l
 14153  013A2A  C0B6  FFE2         	movff	reverse@input+1,fsr1h
 14154  013A2E  CFDF FFE7          	movff	indf2,indf1
 14155                           
 14156                           ; BSR set to: 0
 14157  013A32  0100               	movlb	0	; () banked
 14158  013A34  4BB5               	infsnz	reverse@input& (0+255),f,b
 14159  013A36  2BB6               	incf	(reverse@input+1)& (0+255),f,b
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;Types.c: 366: *iterator=tempVar;
 14163  013A38  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 14164  013A3C  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 14165  013A40  C0B9  FFDF         	movff	reverse@tempVar,indf2
 14166  013A44                     l921:
 14167                           
 14168                           ; BSR set to: 0
 14169                           
 14170                           ; BSR set to: 0
 14171  013A44  0100               	movlb	0	; () banked
 14172  013A46  07BA               	decf	reverse@iterator& (0+255),f,b
 14173  013A48  A0D8               	btfss	status,0,c
 14174  013A4A  07BB               	decf	(reverse@iterator+1)& (0+255),f,b
 14175  013A4C  0100               	movlb	0	; () banked
 14176  013A4E  51BA               	movf	reverse@iterator& (0+255),w,b
 14177  013A50  0100               	movlb	0	; () banked
 14178  013A52  5DB5               	subwf	reverse@input& (0+255),w,b
 14179  013A54  0100               	movlb	0	; () banked
 14180  013A56  51BB               	movf	(reverse@iterator+1)& (0+255),w,b
 14181  013A58  0100               	movlb	0	; () banked
 14182  013A5A  59B6               	subwfb	(reverse@input+1)& (0+255),w,b
 14183  013A5C  B0D8               	btfsc	status,0,c
 14184  013A5E  0012               	return	
 14185  013A60  D7D7               	goto	l922
 14186  013A62                     __end_of_reverse:
 14187                           	opt stack 0
 14188                           tosu	equ	0xFFF
 14189                           tosh	equ	0xFFE
 14190                           tosl	equ	0xFFD
 14191                           pclath	equ	0xFFA
 14192                           tblptru	equ	0xFF8
 14193                           tblptrh	equ	0xFF7
 14194                           tblptrl	equ	0xFF6
 14195                           tablat	equ	0xFF5
 14196                           prodh	equ	0xFF4
 14197                           prodl	equ	0xFF3
 14198                           intcon	equ	0xFF2
 14199                           postinc0	equ	0xFEE
 14200                           wreg	equ	0xFE8
 14201                           indf1	equ	0xFE7
 14202                           postdec1	equ	0xFE5
 14203                           fsr1h	equ	0xFE2
 14204                           fsr1l	equ	0xFE1
 14205                           indf2	equ	0xFDF
 14206                           postinc2	equ	0xFDE
 14207                           postdec2	equ	0xFDD
 14208                           plusw2	equ	0xFDB
 14209                           fsr2h	equ	0xFDA
 14210                           fsr2l	equ	0xFD9
 14211                           status	equ	0xFD8
 14212                           
 14213 ;; *************** function ___lwmod *****************
 14214 ;; Defined at:
 14215 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 14216 ;; Parameters:    Size  Location     Type
 14217 ;;  dividend        2    7[BANK0 ] unsigned int 
 14218 ;;  divisor         2    9[BANK0 ] unsigned int 
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;  counter         1   11[BANK0 ] unsigned char 
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  2    7[BANK0 ] unsigned int 
 14223 ;; Registers used:
 14224 ;;		wreg, status,2, status,0
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14230 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14233 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;Total ram usage:        5 bytes
 14235 ;; Hardware stack levels used:    1
 14236 ;; Hardware stack levels required when called:    7
 14237 ;; This function calls:
 14238 ;;		Nothing
 14239 ;; This function is called by:
 14240 ;;		_itos
 14241 ;;		_printf
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245                           	psect	text77
 14246  013D9E                     __ptext77:
 14247                           	opt stack 0
 14248  013D9E                     ___lwmod:
 14249                           	opt stack 22
 14250                           
 14251                           ; BSR set to: 0
 14252                           ;incstack = 0
 14253  013D9E  0100               	movlb	0	; () banked
 14254  013DA0  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14255  013DA2  0100               	movlb	0	; () banked
 14256  013DA4  11BF               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14257  013DA6  B4D8               	btfsc	status,2,c
 14258  013DA8  D026               	goto	l2689
 14259                           
 14260                           ; BSR set to: 0
 14261  013DAA  0E01               	movlw	1
 14262  013DAC  0100               	movlb	0	; () banked
 14263  013DAE  6FC0               	movwf	___lwmod@counter& (0+255),b
 14264  013DB0  D006               	goto	l2684
 14265  013DB2                     
 14266                           ; BSR set to: 0
 14267                           
 14268                           ; BSR set to: 0
 14269  013DB2  0100               	movlb	0	; () banked
 14270  013DB4  90D8               	bcf	status,0,c
 14271  013DB6  37BE               	rlcf	___lwmod@divisor& (0+255),f,b
 14272  013DB8  37BF               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14273  013DBA  0100               	movlb	0	; () banked
 14274  013DBC  2BC0               	incf	___lwmod@counter& (0+255),f,b
 14275  013DBE                     l2684:
 14276                           
 14277                           ; BSR set to: 0
 14278                           
 14279                           ; BSR set to: 0
 14280  013DBE  0100               	movlb	0	; () banked
 14281  013DC0  AFBF               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14282  013DC2  D7F7               	goto	l2685
 14283  013DC4                     u6750:
 14284                           
 14285                           ; BSR set to: 0
 14286                           
 14287                           ; BSR set to: 0
 14288                           
 14289                           ; BSR set to: 0
 14290  013DC4  0100               	movlb	0	; () banked
 14291  013DC6  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14292  013DC8  0100               	movlb	0	; () banked
 14293  013DCA  5DBC               	subwf	___lwmod@dividend& (0+255),w,b
 14294  013DCC  0100               	movlb	0	; () banked
 14295  013DCE  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14296  013DD0  0100               	movlb	0	; () banked
 14297  013DD2  59BD               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14298  013DD4  A0D8               	btfss	status,0,c
 14299  013DD6  D008               	goto	l2688
 14300                           
 14301                           ; BSR set to: 0
 14302  013DD8  0100               	movlb	0	; () banked
 14303  013DDA  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14304  013DDC  0100               	movlb	0	; () banked
 14305  013DDE  5FBC               	subwf	___lwmod@dividend& (0+255),f,b
 14306  013DE0  0100               	movlb	0	; () banked
 14307  013DE2  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14308  013DE4  0100               	movlb	0	; () banked
 14309  013DE6  5BBD               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14310  013DE8                     l2688:
 14311                           
 14312                           ; BSR set to: 0
 14313                           
 14314                           ; BSR set to: 0
 14315  013DE8  0100               	movlb	0	; () banked
 14316  013DEA  90D8               	bcf	status,0,c
 14317  013DEC  33BF               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14318  013DEE  33BE               	rrcf	___lwmod@divisor& (0+255),f,b
 14319                           
 14320                           ; BSR set to: 0
 14321  013DF0  0100               	movlb	0	; () banked
 14322  013DF2  2FC0               	decfsz	___lwmod@counter& (0+255),f,b
 14323  013DF4  D7E7               	goto	u6750
 14324  013DF6                     l2689:
 14325                           
 14326                           ; BSR set to: 0
 14327                           
 14328                           ; BSR set to: 0
 14329  013DF6  C0BC  F0BC         	movff	___lwmod@dividend,?___lwmod
 14330  013DFA  C0BD  F0BD         	movff	___lwmod@dividend+1,?___lwmod+1
 14331                           
 14332                           ; BSR set to: 0
 14333  013DFE  0012               	return		;funcret
 14334  013E00                     __end_of___lwmod:
 14335                           	opt stack 0
 14336                           tosu	equ	0xFFF
 14337                           tosh	equ	0xFFE
 14338                           tosl	equ	0xFFD
 14339                           pclath	equ	0xFFA
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodh	equ	0xFF4
 14345                           prodl	equ	0xFF3
 14346                           intcon	equ	0xFF2
 14347                           postinc0	equ	0xFEE
 14348                           wreg	equ	0xFE8
 14349                           indf1	equ	0xFE7
 14350                           postdec1	equ	0xFE5
 14351                           fsr1h	equ	0xFE2
 14352                           fsr1l	equ	0xFE1
 14353                           indf2	equ	0xFDF
 14354                           postinc2	equ	0xFDE
 14355                           postdec2	equ	0xFDD
 14356                           plusw2	equ	0xFDB
 14357                           fsr2h	equ	0xFDA
 14358                           fsr2l	equ	0xFD9
 14359                           status	equ	0xFD8
 14360                           
 14361 ;; *************** function ___lwdiv *****************
 14362 ;; Defined at:
 14363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;  dividend        2    0[BANK0 ] unsigned int 
 14366 ;;  divisor         2    2[BANK0 ] unsigned int 
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;  quotient        2    5[BANK0 ] unsigned int 
 14369 ;;  counter         1    4[BANK0 ] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  2    0[BANK0 ] unsigned int 
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, status,0
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14382 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;Total ram usage:        7 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    7
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_itos
 14390 ;;		_printf
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           	psect	text78
 14395  0136C8                     __ptext78:
 14396                           	opt stack 0
 14397  0136C8                     ___lwdiv:
 14398                           	opt stack 22
 14399                           
 14400                           ; BSR set to: 0
 14401                           ;incstack = 0
 14402  0136C8  0E00               	movlw	0
 14403  0136CA  0100               	movlb	0	; () banked
 14404  0136CC  6FBB               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14405  0136CE  0E00               	movlw	0
 14406  0136D0  6FBA               	movwf	___lwdiv@quotient& (0+255),b
 14407                           
 14408                           ; BSR set to: 0
 14409  0136D2  0100               	movlb	0	; () banked
 14410  0136D4  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14411  0136D6  0100               	movlb	0	; () banked
 14412  0136D8  11B8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14413  0136DA  B4D8               	btfsc	status,2,c
 14414  0136DC  D02C               	goto	l2679
 14415                           
 14416                           ; BSR set to: 0
 14417  0136DE  0E01               	movlw	1
 14418  0136E0  0100               	movlb	0	; () banked
 14419  0136E2  6FB9               	movwf	___lwdiv@counter& (0+255),b
 14420  0136E4  D006               	goto	l2674
 14421  0136E6                     
 14422                           ; BSR set to: 0
 14423                           
 14424                           ; BSR set to: 0
 14425  0136E6  0100               	movlb	0	; () banked
 14426  0136E8  90D8               	bcf	status,0,c
 14427  0136EA  37B7               	rlcf	___lwdiv@divisor& (0+255),f,b
 14428  0136EC  37B8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14429  0136EE  0100               	movlb	0	; () banked
 14430  0136F0  2BB9               	incf	___lwdiv@counter& (0+255),f,b
 14431  0136F2                     l2674:
 14432                           
 14433                           ; BSR set to: 0
 14434                           
 14435                           ; BSR set to: 0
 14436  0136F2  0100               	movlb	0	; () banked
 14437  0136F4  AFB8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14438  0136F6  D7F7               	goto	l2675
 14439  0136F8                     u6720:
 14440                           
 14441                           ; BSR set to: 0
 14442                           
 14443                           ; BSR set to: 0
 14444                           
 14445                           ; BSR set to: 0
 14446  0136F8  0100               	movlb	0	; () banked
 14447  0136FA  90D8               	bcf	status,0,c
 14448  0136FC  37BA               	rlcf	___lwdiv@quotient& (0+255),f,b
 14449  0136FE  37BB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14450                           
 14451                           ; BSR set to: 0
 14452  013700  0100               	movlb	0	; () banked
 14453  013702  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14454  013704  0100               	movlb	0	; () banked
 14455  013706  5DB5               	subwf	___lwdiv@dividend& (0+255),w,b
 14456  013708  0100               	movlb	0	; () banked
 14457  01370A  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14458  01370C  0100               	movlb	0	; () banked
 14459  01370E  59B6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14460  013710  A0D8               	btfss	status,0,c
 14461  013712  D00A               	goto	l2678
 14462                           
 14463                           ; BSR set to: 0
 14464  013714  0100               	movlb	0	; () banked
 14465  013716  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14466  013718  0100               	movlb	0	; () banked
 14467  01371A  5FB5               	subwf	___lwdiv@dividend& (0+255),f,b
 14468  01371C  0100               	movlb	0	; () banked
 14469  01371E  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14470  013720  0100               	movlb	0	; () banked
 14471  013722  5BB6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14472                           
 14473                           ; BSR set to: 0
 14474  013724  0100               	movlb	0	; () banked
 14475  013726  81BA               	bsf	___lwdiv@quotient& (0+255),0,b
 14476  013728                     l2678:
 14477                           
 14478                           ; BSR set to: 0
 14479                           
 14480                           ; BSR set to: 0
 14481  013728  0100               	movlb	0	; () banked
 14482  01372A  90D8               	bcf	status,0,c
 14483  01372C  33B8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14484  01372E  33B7               	rrcf	___lwdiv@divisor& (0+255),f,b
 14485                           
 14486                           ; BSR set to: 0
 14487  013730  0100               	movlb	0	; () banked
 14488  013732  2FB9               	decfsz	___lwdiv@counter& (0+255),f,b
 14489  013734  D7E1               	goto	u6720
 14490  013736                     l2679:
 14491                           
 14492                           ; BSR set to: 0
 14493                           
 14494                           ; BSR set to: 0
 14495  013736  C0BA  F0B5         	movff	___lwdiv@quotient,?___lwdiv
 14496  01373A  C0BB  F0B6         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14497                           
 14498                           ; BSR set to: 0
 14499  01373E  0012               	return		;funcret
 14500  013740                     __end_of___lwdiv:
 14501                           	opt stack 0
 14502                           tosu	equ	0xFFF
 14503                           tosh	equ	0xFFE
 14504                           tosl	equ	0xFFD
 14505                           pclath	equ	0xFFA
 14506                           tblptru	equ	0xFF8
 14507                           tblptrh	equ	0xFF7
 14508                           tblptrl	equ	0xFF6
 14509                           tablat	equ	0xFF5
 14510                           prodh	equ	0xFF4
 14511                           prodl	equ	0xFF3
 14512                           intcon	equ	0xFF2
 14513                           postinc0	equ	0xFEE
 14514                           wreg	equ	0xFE8
 14515                           indf1	equ	0xFE7
 14516                           postdec1	equ	0xFE5
 14517                           fsr1h	equ	0xFE2
 14518                           fsr1l	equ	0xFE1
 14519                           indf2	equ	0xFDF
 14520                           postinc2	equ	0xFDE
 14521                           postdec2	equ	0xFDD
 14522                           plusw2	equ	0xFDB
 14523                           fsr2h	equ	0xFDA
 14524                           fsr2l	equ	0xFD9
 14525                           status	equ	0xFD8
 14526                           
 14527 ;; *************** function _HMI_SetSegments *****************
 14528 ;; Defined at:
 14529 ;;		line 226 in file "HMI.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 14532 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14533 ;; Auto vars:     Size  Location     Type
 14534 ;;  in              2    4[BANK0 ] unsigned short 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;                  1    wreg      void 
 14537 ;; Registers used:
 14538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14539 ;; Tracked objects:
 14540 ;;		On entry : 0/0
 14541 ;;		On exit  : 0/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14544 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;Total ram usage:        5 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; Hardware stack levels required when called:    8
 14551 ;; This function calls:
 14552 ;;		_ToSegment
 14553 ;; This function is called by:
 14554 ;;		_HMI_SetNumber
 14555 ;; This function uses a non-reentrant model
 14556 ;;
 14557                           
 14558                           	psect	text79
 14559  012B88                     __ptext79:
 14560                           	opt stack 0
 14561  012B88                     _HMI_SetSegments:
 14562                           	opt stack 18
 14563                           
 14564                           ;HMI.c: 228: UINT16 in=0;
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;incstack = 0
 14568  012B88  0E00               	movlw	0
 14569  012B8A  0100               	movlb	0	; () banked
 14570  012B8C  6FBA               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 14571  012B8E  0E00               	movlw	0
 14572  012B90  6FB9               	movwf	HMI_SetSegments@in& (0+255),b
 14573                           
 14574                           ;HMI.c: 229: while(*pString)
 14575  012B92  D038               	goto	l1202
 14576  012B94                     
 14577                           ; BSR set to: 0
 14578                           ;HMI.c: 230: {
 14579                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 14580                           
 14581                           ; BSR set to: 0
 14582  012B94  0E2E               	movlw	low _HMIBoard
 14583  012B96  0100               	movlb	0	; () banked
 14584  012B98  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14585  012B9A  6ED9               	movwf	fsr2l,c
 14586  012B9C  0E03               	movlw	high _HMIBoard
 14587  012B9E  0100               	movlb	0	; () banked
 14588  012BA0  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14589  012BA2  6EDA               	movwf	fsr2h,c
 14590  012BA4  C0B6  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 14591  012BA8  C0B7  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 14592  012BAC  50E7               	movf	indf1,w,c
 14593  012BAE  ECEC  F083         	call	_ToSegment
 14594  012BB2  6EDF               	movwf	indf2,c
 14595                           
 14596                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 14597  012BB4  0E2E               	movlw	low _HMIBoard
 14598  012BB6  0100               	movlb	0	; () banked
 14599  012BB8  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14600  012BBA  6ED9               	movwf	fsr2l,c
 14601  012BBC  0E03               	movlw	high _HMIBoard
 14602  012BBE  0100               	movlb	0	; () banked
 14603  012BC0  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14604  012BC2  6EDA               	movwf	fsr2h,c
 14605  012BC4  0E80               	movlw	128
 14606  012BC6  18DE               	xorwf	postinc2,w,c
 14607  012BC8  A4D8               	btfss	status,2,c
 14608  012BCA  D00E               	goto	l1201
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;HMI.c: 234: {
 14612                           ;HMI.c: 235: in--;
 14613  012BCC  0100               	movlb	0	; () banked
 14614  012BCE  07B9               	decf	HMI_SetSegments@in& (0+255),f,b
 14615  012BD0  A0D8               	btfss	status,0,c
 14616  012BD2  07BA               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 14620  012BD4  0E2E               	movlw	low _HMIBoard
 14621  012BD6  0100               	movlb	0	; () banked
 14622  012BD8  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14623  012BDA  6ED9               	movwf	fsr2l,c
 14624  012BDC  0E03               	movlw	high _HMIBoard
 14625  012BDE  0100               	movlb	0	; () banked
 14626  012BE0  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14627  012BE2  6EDA               	movwf	fsr2h,c
 14628  012BE4  0E00               	movlw	0
 14629  012BE6  8EDB               	bsf	plusw2,7,c
 14630  012BE8                     l1201:
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;HMI.c: 237: }
 14634                           ;HMI.c: 239: pString++;
 14635                           
 14636                           ; BSR set to: 0
 14637  012BE8  0100               	movlb	0	; () banked
 14638  012BEA  4BB6               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 14639  012BEC  2BB7               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 14640                           
 14641                           ; BSR set to: 0
 14642                           ;HMI.c: 240: in++;
 14643  012BEE  0100               	movlb	0	; () banked
 14644  012BF0  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14645  012BF2  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;HMI.c: 241: if (in>=6)
 14649  012BF4  0100               	movlb	0	; () banked
 14650  012BF6  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14651  012BF8  E11A               	bnz	l10836
 14652  012BFA  0E06               	movlw	6
 14653  012BFC  0100               	movlb	0	; () banked
 14654  012BFE  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 14655  012C00  B0D8               	btfsc	status,0,c
 14656  012C02  D015               	goto	l1204
 14657  012C04                     l1202:
 14658                           
 14659                           ; BSR set to: 0
 14660                           
 14661                           ; BSR set to: 0
 14662                           
 14663                           ; BSR set to: 0
 14664  012C04  C0B6  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 14665  012C08  C0B7  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 14666  012C0C  50DF               	movf	indf2,w,c
 14667  012C0E  B4D8               	btfsc	status,2,c
 14668  012C10  D00E               	goto	l1204
 14669  012C12  D7C0               	goto	l1200
 14670  012C14                     
 14671                           ; BSR set to: 0
 14672                           ;HMI.c: 245: {
 14673                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 14674                           
 14675                           ; BSR set to: 0
 14676  012C14  0E2E               	movlw	low _HMIBoard
 14677  012C16  0100               	movlb	0	; () banked
 14678  012C18  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14679  012C1A  6ED9               	movwf	fsr2l,c
 14680  012C1C  0E03               	movlw	high _HMIBoard
 14681  012C1E  0100               	movlb	0	; () banked
 14682  012C20  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14683  012C22  6EDA               	movwf	fsr2h,c
 14684  012C24  0E00               	movlw	0
 14685  012C26  6EDF               	movwf	indf2,c
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;HMI.c: 247: in++;
 14689  012C28  0100               	movlb	0	; () banked
 14690  012C2A  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14691  012C2C  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14692  012C2E                     l1204:
 14693  012C2E                     l10836:
 14694                           
 14695                           ; BSR set to: 0
 14696  012C2E  0100               	movlb	0	; () banked
 14697  012C30  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14698  012C32  E106               	bnz	l1207
 14699  012C34  0E06               	movlw	6
 14700  012C36  0100               	movlb	0	; () banked
 14701  012C38  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 14702  012C3A  B0D8               	btfsc	status,0,c
 14703  012C3C  0012               	return	
 14704  012C3E  D7EA               	goto	l1205
 14705  012C40                     l1207:
 14706                           
 14707                           ; BSR set to: 0
 14708  012C40  0012               	return		;funcret
 14709  012C42                     __end_of_HMI_SetSegments:
 14710                           	opt stack 0
 14711                           tosu	equ	0xFFF
 14712                           tosh	equ	0xFFE
 14713                           tosl	equ	0xFFD
 14714                           pclath	equ	0xFFA
 14715                           tblptru	equ	0xFF8
 14716                           tblptrh	equ	0xFF7
 14717                           tblptrl	equ	0xFF6
 14718                           tablat	equ	0xFF5
 14719                           prodh	equ	0xFF4
 14720                           prodl	equ	0xFF3
 14721                           intcon	equ	0xFF2
 14722                           postinc0	equ	0xFEE
 14723                           wreg	equ	0xFE8
 14724                           indf1	equ	0xFE7
 14725                           postdec1	equ	0xFE5
 14726                           fsr1h	equ	0xFE2
 14727                           fsr1l	equ	0xFE1
 14728                           indf2	equ	0xFDF
 14729                           postinc2	equ	0xFDE
 14730                           postdec2	equ	0xFDD
 14731                           plusw2	equ	0xFDB
 14732                           fsr2h	equ	0xFDA
 14733                           fsr2l	equ	0xFD9
 14734                           status	equ	0xFD8
 14735                           
 14736 ;; *************** function _ToSegment *****************
 14737 ;; Defined at:
 14738 ;;		line 284 in file "Library/Types.c"
 14739 ;; Parameters:    Size  Location     Type
 14740 ;;  pCHR            1    wreg     unsigned char 
 14741 ;; Auto vars:     Size  Location     Type
 14742 ;;  pCHR            1    0[BANK0 ] unsigned char 
 14743 ;; Return value:  Size  Location     Type
 14744 ;;                  1    wreg      unsigned char 
 14745 ;; Registers used:
 14746 ;;		wreg, status,2, status,0
 14747 ;; Tracked objects:
 14748 ;;		On entry : 0/0
 14749 ;;		On exit  : 0/0
 14750 ;;		Unchanged: 0/0
 14751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;Total ram usage:        1 bytes
 14757 ;; Hardware stack levels used:    1
 14758 ;; Hardware stack levels required when called:    7
 14759 ;; This function calls:
 14760 ;;		Nothing
 14761 ;; This function is called by:
 14762 ;;		_HMI_SetSegments
 14763 ;; This function uses a non-reentrant model
 14764 ;;
 14765                           
 14766                           	psect	text80
 14767  0107D8                     __ptext80:
 14768                           	opt stack 0
 14769  0107D8                     _ToSegment:
 14770                           	opt stack 18
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;incstack = 0
 14774                           ;ToSegment@pCHR stored from wreg
 14775  0107D8  0100               	movlb	0	; () banked
 14776  0107DA  6FB5               	movwf	ToSegment@pCHR& (0+255),b
 14777                           
 14778                           ;Types.c: 286: switch(pCHR)
 14779  0107DC  D07E               	goto	l853
 14780  0107DE  0E3F               	movlw	63
 14781  0107E0  0012               	return	
 14782  0107E2  0E06               	movlw	6
 14783  0107E4  0012               	return	
 14784  0107E6  0E5B               	movlw	91
 14785  0107E8  0012               	return	
 14786  0107EA  0E4F               	movlw	79
 14787  0107EC  0012               	return	
 14788  0107EE  0E66               	movlw	102
 14789  0107F0  0012               	return	
 14790  0107F2  0E6D               	movlw	109
 14791  0107F4  0012               	return	
 14792  0107F6  0E7D               	movlw	125
 14793  0107F8  0012               	return	
 14794  0107FA  0E07               	movlw	7
 14795  0107FC  0012               	return	
 14796  0107FE  0E7F               	movlw	127
 14797  010800  0012               	return	
 14798  010802  0E6F               	movlw	111
 14799  010804  0012               	return	
 14800  010806  0E5F               	movlw	95
 14801  010808  0012               	return	
 14802  01080A  0E7C               	movlw	124
 14803  01080C  0012               	return	
 14804  01080E  0E58               	movlw	88
 14805  010810  0012               	return	
 14806  010812  0E5E               	movlw	94
 14807  010814  0012               	return	
 14808  010816  0E7B               	movlw	123
 14809  010818  0012               	return	
 14810  01081A  0E71               	movlw	113
 14811  01081C  0012               	return	
 14812  01081E  0E6F               	movlw	111
 14813  010820  0012               	return	
 14814  010822  0E74               	movlw	116
 14815  010824  0012               	return	
 14816  010826  0E04               	movlw	4
 14817  010828  0012               	return	
 14818  01082A  0E0E               	movlw	14
 14819  01082C  0012               	return	
 14820  01082E  0E7A               	movlw	122
 14821  010830  0012               	return	
 14822  010832  0E06               	movlw	6
 14823  010834  0012               	return	
 14824  010836  0E14               	movlw	20
 14825  010838  0012               	return	
 14826  01083A  0E54               	movlw	84
 14827  01083C  0012               	return	
 14828  01083E  0E5C               	movlw	92
 14829  010840  0012               	return	
 14830  010842  0E73               	movlw	115
 14831  010844  0012               	return	
 14832  010846  0E67               	movlw	103
 14833  010848  0012               	return	
 14834  01084A  0E50               	movlw	80
 14835  01084C  0012               	return	
 14836  01084E  0E6D               	movlw	109
 14837  010850  0012               	return	
 14838  010852  0E78               	movlw	120
 14839  010854  0012               	return	
 14840  010856  0E1C               	movlw	28
 14841  010858  0012               	return	
 14842  01085A  0E62               	movlw	98
 14843  01085C  0012               	return	
 14844  01085E  0E2A               	movlw	42
 14845  010860  0012               	return	
 14846  010862  0E64               	movlw	100
 14847  010864  0012               	return	
 14848  010866  0E6E               	movlw	110
 14849  010868  0012               	return	
 14850  01086A  0E5B               	movlw	91
 14851  01086C  0012               	return	
 14852  01086E  0E77               	movlw	119
 14853  010870  0012               	return	
 14854  010872  0E7F               	movlw	127
 14855  010874  0012               	return	
 14856  010876  0E39               	movlw	57
 14857  010878  0012               	return	
 14858  01087A  0E3F               	movlw	63
 14859  01087C  0012               	return	
 14860  01087E  0E79               	movlw	121
 14861  010880  0012               	return	
 14862  010882  0E71               	movlw	113
 14863  010884  0012               	return	
 14864  010886  0E3D               	movlw	61
 14865  010888  0012               	return	
 14866  01088A  0E76               	movlw	118
 14867  01088C  0012               	return	
 14868  01088E  0E06               	movlw	6
 14869  010890  0012               	return	
 14870  010892  0E1E               	movlw	30
 14871  010894  0012               	return	
 14872  010896  0E57               	movlw	87
 14873  010898  0012               	return	
 14874  01089A  0E38               	movlw	56
 14875  01089C  0012               	return	
 14876  01089E  0E76               	movlw	118
 14877  0108A0  0012               	return	
 14878  0108A2  0E76               	movlw	118
 14879  0108A4  0012               	return	
 14880  0108A6  0E3F               	movlw	63
 14881  0108A8  0012               	return	
 14882  0108AA  0E73               	movlw	115
 14883  0108AC  0012               	return	
 14884  0108AE  0E3F               	movlw	63
 14885  0108B0  0012               	return	
 14886  0108B2  0E77               	movlw	119
 14887  0108B4  0012               	return	
 14888  0108B6  0E6D               	movlw	109
 14889  0108B8  0012               	return	
 14890  0108BA  0E31               	movlw	49
 14891  0108BC  0012               	return	
 14892  0108BE  0E3E               	movlw	62
 14893  0108C0  0012               	return	
 14894  0108C2  0E3E               	movlw	62
 14895  0108C4  0012               	return	
 14896  0108C6  0E7E               	movlw	126
 14897  0108C8  0012               	return	
 14898  0108CA  0E76               	movlw	118
 14899  0108CC  0012               	return	
 14900  0108CE  0E66               	movlw	102
 14901  0108D0  0012               	return	
 14902  0108D2  0E5B               	movlw	91
 14903  0108D4  0012               	return	
 14904  0108D6  0E80               	movlw	128
 14905  0108D8  0012               	return	
 14906  0108DA                     l853:
 14907  0108DA  0100               	movlb	0	; () banked
 14908  0108DC  51B5               	movf	ToSegment@pCHR& (0+255),w,b
 14909                           
 14910                           ; Switch size 1, requested type "space"
 14911                           ; Number of cases is 63, Range of values is 46 to 122
 14912                           ; switch strategies available:
 14913                           ; Name         Instructions Cycles
 14914                           ; simple_byte          190    96 (average)
 14915                           ;	Chosen strategy is simple_byte
 14916  0108DE  0A2E               	xorlw	46	; case 46
 14917  0108E0  B4D8               	btfsc	status,2,c
 14918  0108E2  D7F9               	goto	l917
 14919  0108E4  0A1E               	xorlw	30	; case 48
 14920  0108E6  B4D8               	btfsc	status,2,c
 14921  0108E8  D77A               	goto	l854
 14922  0108EA  0A01               	xorlw	1	; case 49
 14923  0108EC  B4D8               	btfsc	status,2,c
 14924  0108EE  D779               	goto	l856
 14925  0108F0  0A03               	xorlw	3	; case 50
 14926  0108F2  B4D8               	btfsc	status,2,c
 14927  0108F4  D778               	goto	l857
 14928  0108F6  0A01               	xorlw	1	; case 51
 14929  0108F8  B4D8               	btfsc	status,2,c
 14930  0108FA  D777               	goto	l858
 14931  0108FC  0A07               	xorlw	7	; case 52
 14932  0108FE  B4D8               	btfsc	status,2,c
 14933  010900  D776               	goto	l859
 14934  010902  0A01               	xorlw	1	; case 53
 14935  010904  B4D8               	btfsc	status,2,c
 14936  010906  D775               	goto	l860
 14937  010908  0A03               	xorlw	3	; case 54
 14938  01090A  B4D8               	btfsc	status,2,c
 14939  01090C  D774               	goto	l861
 14940  01090E  0A01               	xorlw	1	; case 55
 14941  010910  B4D8               	btfsc	status,2,c
 14942  010912  D773               	goto	l862
 14943  010914  0A0F               	xorlw	15	; case 56
 14944  010916  B4D8               	btfsc	status,2,c
 14945  010918  D772               	goto	l863
 14946  01091A  0A01               	xorlw	1	; case 57
 14947  01091C  B4D8               	btfsc	status,2,c
 14948  01091E  D771               	goto	l864
 14949  010920  0A78               	xorlw	120	; case 65
 14950  010922  B4D8               	btfsc	status,2,c
 14951  010924  D7A4               	goto	l891
 14952  010926  0A03               	xorlw	3	; case 66
 14953  010928  B4D8               	btfsc	status,2,c
 14954  01092A  D7A3               	goto	l892
 14955  01092C  0A01               	xorlw	1	; case 67
 14956  01092E  B4D8               	btfsc	status,2,c
 14957  010930  D7A2               	goto	l893
 14958  010932  0A07               	xorlw	7	; case 68
 14959  010934  B4D8               	btfsc	status,2,c
 14960  010936  D7A1               	goto	l894
 14961  010938  0A01               	xorlw	1	; case 69
 14962  01093A  B4D8               	btfsc	status,2,c
 14963  01093C  D7A0               	goto	l895
 14964  01093E  0A03               	xorlw	3	; case 70
 14965  010940  B4D8               	btfsc	status,2,c
 14966  010942  D79F               	goto	l896
 14967  010944  0A01               	xorlw	1	; case 71
 14968  010946  B4D8               	btfsc	status,2,c
 14969  010948  D79E               	goto	l897
 14970  01094A  0A0F               	xorlw	15	; case 72
 14971  01094C  B4D8               	btfsc	status,2,c
 14972  01094E  D79D               	goto	l898
 14973  010950  0A01               	xorlw	1	; case 73
 14974  010952  B4D8               	btfsc	status,2,c
 14975  010954  D79C               	goto	l899
 14976  010956  0A03               	xorlw	3	; case 74
 14977  010958  B4D8               	btfsc	status,2,c
 14978  01095A  D79B               	goto	l900
 14979  01095C  0A01               	xorlw	1	; case 75
 14980  01095E  B4D8               	btfsc	status,2,c
 14981  010960  D79A               	goto	l901
 14982  010962  0A07               	xorlw	7	; case 76
 14983  010964  B4D8               	btfsc	status,2,c
 14984  010966  D799               	goto	l902
 14985  010968  0A01               	xorlw	1	; case 77
 14986  01096A  B4D8               	btfsc	status,2,c
 14987  01096C  D798               	goto	l903
 14988  01096E  0A03               	xorlw	3	; case 78
 14989  010970  B4D8               	btfsc	status,2,c
 14990  010972  D797               	goto	l904
 14991  010974  0A01               	xorlw	1	; case 79
 14992  010976  B4D8               	btfsc	status,2,c
 14993  010978  D796               	goto	l905
 14994  01097A  0A1F               	xorlw	31	; case 80
 14995  01097C  B4D8               	btfsc	status,2,c
 14996  01097E  D795               	goto	l906
 14997  010980  0A01               	xorlw	1	; case 81
 14998  010982  B4D8               	btfsc	status,2,c
 14999  010984  D794               	goto	l907
 15000  010986  0A03               	xorlw	3	; case 82
 15001  010988  B4D8               	btfsc	status,2,c
 15002  01098A  D793               	goto	l908
 15003  01098C  0A01               	xorlw	1	; case 83
 15004  01098E  B4D8               	btfsc	status,2,c
 15005  010990  D792               	goto	l909
 15006  010992  0A07               	xorlw	7	; case 84
 15007  010994  B4D8               	btfsc	status,2,c
 15008  010996  D791               	goto	l910
 15009  010998  0A01               	xorlw	1	; case 85
 15010  01099A  B4D8               	btfsc	status,2,c
 15011  01099C  D790               	goto	l911
 15012  01099E  0A03               	xorlw	3	; case 86
 15013  0109A0  B4D8               	btfsc	status,2,c
 15014  0109A2  D78F               	goto	l912
 15015  0109A4  0A01               	xorlw	1	; case 87
 15016  0109A6  B4D8               	btfsc	status,2,c
 15017  0109A8  D78E               	goto	l913
 15018  0109AA  0A0F               	xorlw	15	; case 88
 15019  0109AC  B4D8               	btfsc	status,2,c
 15020  0109AE  D78D               	goto	l914
 15021  0109B0  0A01               	xorlw	1	; case 89
 15022  0109B2  B4D8               	btfsc	status,2,c
 15023  0109B4  D78C               	goto	l915
 15024  0109B6  0A03               	xorlw	3	; case 90
 15025  0109B8  B4D8               	btfsc	status,2,c
 15026  0109BA  D78B               	goto	l916
 15027  0109BC  0A3B               	xorlw	59	; case 97
 15028  0109BE  B4D8               	btfsc	status,2,c
 15029  0109C0  D722               	goto	l865
 15030  0109C2  0A03               	xorlw	3	; case 98
 15031  0109C4  B4D8               	btfsc	status,2,c
 15032  0109C6  D721               	goto	l866
 15033  0109C8  0A01               	xorlw	1	; case 99
 15034  0109CA  B4D8               	btfsc	status,2,c
 15035  0109CC  D720               	goto	l867
 15036  0109CE  0A07               	xorlw	7	; case 100
 15037  0109D0  B4D8               	btfsc	status,2,c
 15038  0109D2  D71F               	goto	l868
 15039  0109D4  0A01               	xorlw	1	; case 101
 15040  0109D6  B4D8               	btfsc	status,2,c
 15041  0109D8  D71E               	goto	l869
 15042  0109DA  0A03               	xorlw	3	; case 102
 15043  0109DC  B4D8               	btfsc	status,2,c
 15044  0109DE  D71D               	goto	l870
 15045  0109E0  0A01               	xorlw	1	; case 103
 15046  0109E2  B4D8               	btfsc	status,2,c
 15047  0109E4  D71C               	goto	l871
 15048  0109E6  0A0F               	xorlw	15	; case 104
 15049  0109E8  B4D8               	btfsc	status,2,c
 15050  0109EA  D71B               	goto	l872
 15051  0109EC  0A01               	xorlw	1	; case 105
 15052  0109EE  B4D8               	btfsc	status,2,c
 15053  0109F0  D71A               	goto	l873
 15054  0109F2  0A03               	xorlw	3	; case 106
 15055  0109F4  B4D8               	btfsc	status,2,c
 15056  0109F6  D719               	goto	l874
 15057  0109F8  0A01               	xorlw	1	; case 107
 15058  0109FA  B4D8               	btfsc	status,2,c
 15059  0109FC  D718               	goto	l875
 15060  0109FE  0A07               	xorlw	7	; case 108
 15061  010A00  B4D8               	btfsc	status,2,c
 15062  010A02  D717               	goto	l876
 15063  010A04  0A01               	xorlw	1	; case 109
 15064  010A06  B4D8               	btfsc	status,2,c
 15065  010A08  D716               	goto	l877
 15066  010A0A  0A03               	xorlw	3	; case 110
 15067  010A0C  B4D8               	btfsc	status,2,c
 15068  010A0E  D715               	goto	l878
 15069  010A10  0A01               	xorlw	1	; case 111
 15070  010A12  B4D8               	btfsc	status,2,c
 15071  010A14  D714               	goto	l879
 15072  010A16  0A1F               	xorlw	31	; case 112
 15073  010A18  B4D8               	btfsc	status,2,c
 15074  010A1A  D713               	goto	l880
 15075  010A1C  0A01               	xorlw	1	; case 113
 15076  010A1E  B4D8               	btfsc	status,2,c
 15077  010A20  D712               	goto	l881
 15078  010A22  0A03               	xorlw	3	; case 114
 15079  010A24  B4D8               	btfsc	status,2,c
 15080  010A26  D711               	goto	l882
 15081  010A28  0A01               	xorlw	1	; case 115
 15082  010A2A  B4D8               	btfsc	status,2,c
 15083  010A2C  D710               	goto	l883
 15084  010A2E  0A07               	xorlw	7	; case 116
 15085  010A30  B4D8               	btfsc	status,2,c
 15086  010A32  D70F               	goto	l884
 15087  010A34  0A01               	xorlw	1	; case 117
 15088  010A36  B4D8               	btfsc	status,2,c
 15089  010A38  D70E               	goto	l885
 15090  010A3A  0A03               	xorlw	3	; case 118
 15091  010A3C  B4D8               	btfsc	status,2,c
 15092  010A3E  D70D               	goto	l886
 15093  010A40  0A01               	xorlw	1	; case 119
 15094  010A42  B4D8               	btfsc	status,2,c
 15095  010A44  D70C               	goto	l887
 15096  010A46  0A0F               	xorlw	15	; case 120
 15097  010A48  B4D8               	btfsc	status,2,c
 15098  010A4A  D70B               	goto	l888
 15099  010A4C  0A01               	xorlw	1	; case 121
 15100  010A4E  B4D8               	btfsc	status,2,c
 15101  010A50  D70A               	goto	l889
 15102  010A52  0A03               	xorlw	3	; case 122
 15103  010A54  B4D8               	btfsc	status,2,c
 15104  010A56  D709               	goto	l890
 15105                           
 15106                           ;Types.c: 354: return 0;
 15107                           
 15108                           ; BSR set to: 0
 15109  010A58  0E00               	movlw	0
 15110  010A5A  0012               	return	
 15111  010A5C                     __end_of_ToSegment:
 15112                           	opt stack 0
 15113                           tosu	equ	0xFFF
 15114                           tosh	equ	0xFFE
 15115                           tosl	equ	0xFFD
 15116                           pclath	equ	0xFFA
 15117                           tblptru	equ	0xFF8
 15118                           tblptrh	equ	0xFF7
 15119                           tblptrl	equ	0xFF6
 15120                           tablat	equ	0xFF5
 15121                           prodh	equ	0xFF4
 15122                           prodl	equ	0xFF3
 15123                           intcon	equ	0xFF2
 15124                           postinc0	equ	0xFEE
 15125                           wreg	equ	0xFE8
 15126                           indf1	equ	0xFE7
 15127                           postdec1	equ	0xFE5
 15128                           fsr1h	equ	0xFE2
 15129                           fsr1l	equ	0xFE1
 15130                           indf2	equ	0xFDF
 15131                           postinc2	equ	0xFDE
 15132                           postdec2	equ	0xFDD
 15133                           plusw2	equ	0xFDB
 15134                           fsr2h	equ	0xFDA
 15135                           fsr2l	equ	0xFD9
 15136                           status	equ	0xFD8
 15137                           
 15138 ;; *************** function _HMI_SetButton *****************
 15139 ;; Defined at:
 15140 ;;		line 186 in file "HMI.c"
 15141 ;; Parameters:    Size  Location     Type
 15142 ;;  pValue          1    wreg     unsigned char 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;  pValue          1    6[BANK0 ] unsigned char 
 15145 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 15146 ;;  v               1    7[BANK0 ] unsigned char 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      void 
 15149 ;; Registers used:
 15150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;Total ram usage:        8 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    7
 15163 ;; This function calls:
 15164 ;;		Nothing
 15165 ;; This function is called by:
 15166 ;;		_Event_TestButton
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           	psect	text81
 15171  013416                     __ptext81:
 15172                           	opt stack 0
 15173  013416                     _HMI_SetButton:
 15174                           	opt stack 20
 15175                           
 15176                           ;incstack = 0
 15177                           ;HMI_SetButton@pValue stored from wreg
 15178  013416  0100               	movlb	0	; () banked
 15179  013418  6FBB               	movwf	HMI_SetButton@pValue& (0+255),b
 15180                           
 15181                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 15182  01341A  0EB2               	movlw	low HMI_SetButton@F7213
 15183  01341C  6EF6               	movwf	tblptrl,c
 15184  01341E                     	if	1	;There is more than 1 active tblptr byte
 15185  01341E  0EFD               	movlw	high HMI_SetButton@F7213
 15186  013420  6EF7               	movwf	tblptrh,c
 15187  013422                     	endif
 15188  013422                     	if	1	;There are 3 active tblptr bytes
 15189  013422  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 15190  013424  6EF8               	movwf	tblptru,c
 15191  013426                     	endif
 15192  013426  0009               	tblrd		*+
 15193  013428  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex
 15194  01342C  0009               	tblrd		*+
 15195  01342E  CFF5 F0B8          	movff	tablat,HMI_SetButton@reindex+1
 15196  013432  0009               	tblrd		*+
 15197  013434  CFF5 F0B9          	movff	tablat,HMI_SetButton@reindex+2
 15198  013438  000A               	tblrd		*-
 15199  01343A  CFF5 F0BA          	movff	tablat,HMI_SetButton@reindex+3
 15200                           
 15201                           ;HMI.c: 189: UINT8 v = 0b00010001;
 15202  01343E  0E11               	movlw	17
 15203  013440  0100               	movlb	0	; () banked
 15204  013442  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;HMI.c: 190: pValue &= 3;
 15208  013444  0E03               	movlw	3
 15209  013446  0100               	movlb	0	; () banked
 15210  013448  17BB               	andwf	HMI_SetButton@pValue& (0+255),f,b
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;HMI.c: 191: v = v << reindex[pValue];
 15214  01344A  0100               	movlb	0	; () banked
 15215  01344C  51BB               	movf	HMI_SetButton@pValue& (0+255),w,b
 15216  01344E  0D01               	mullw	1
 15217  013450  0EB7               	movlw	low HMI_SetButton@reindex
 15218  013452  24F3               	addwf	prodl,w,c
 15219  013454  6ED9               	movwf	fsr2l,c
 15220  013456  0E00               	movlw	high HMI_SetButton@reindex
 15221  013458  20F4               	addwfc	prodh,w,c
 15222  01345A  6EDA               	movwf	fsr2h,c
 15223  01345C  50DF               	movf	indf2,w,c
 15224  01345E  0100               	movlb	0	; () banked
 15225  013460  6FB5               	movwf	??_HMI_SetButton& (0+255),b
 15226  013462  C0BC  F0B6         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 15227  013466  0100               	movlb	0	; () banked
 15228  013468  2BB5               	incf	??_HMI_SetButton& (0+255),f,b
 15229  01346A  D003               	goto	u7214
 15230  01346C                     u7215:
 15231  01346C  0100               	movlb	0	; () banked
 15232  01346E  90D8               	bcf	status,0,c
 15233  013470  37B6               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 15234  013472                     u7214:
 15235  013472  0100               	movlb	0	; () banked
 15236  013474  2FB5               	decfsz	??_HMI_SetButton& (0+255),f,b
 15237  013476  D7FA               	goto	u7215
 15238  013478  0100               	movlb	0	; () banked
 15239  01347A  51B6               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 15240  01347C  0100               	movlb	0	; () banked
 15241  01347E  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15242                           
 15243                           ; BSR set to: 0
 15244                           ;HMI.c: 192: v = v >> 4;
 15245  013480  0100               	movlb	0	; () banked
 15246  013482  39BC               	swapf	HMI_SetButton@v& (0+255),w,b
 15247  013484  0B0F               	andlw	15
 15248  013486  0100               	movlb	0	; () banked
 15249  013488  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;HMI.c: 193: v = v & 0x0F;
 15253  01348A  0100               	movlb	0	; () banked
 15254  01348C  51BC               	movf	HMI_SetButton@v& (0+255),w,b
 15255  01348E  0B0F               	andlw	15
 15256  013490  0100               	movlb	0	; () banked
 15257  013492  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;HMI.c: 194: HMIBoard.pButton = v;
 15261  013494  0103               	movlb	3	; () banked
 15262  013496  5134               	movf	(_HMIBoard+6)& (0+255),w,b
 15263  013498  0100               	movlb	0	; () banked
 15264  01349A  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 15265  01349C  0BF0               	andlw	-16
 15266  01349E  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 15267  0134A0  0103               	movlb	3	; () banked
 15268  0134A2  6F34               	movwf	(_HMIBoard+6)& (0+255),b
 15269                           
 15270                           ; BSR set to: 3
 15271  0134A4  0012               	return		;funcret
 15272  0134A6                     __end_of_HMI_SetButton:
 15273                           	opt stack 0
 15274                           tosu	equ	0xFFF
 15275                           tosh	equ	0xFFE
 15276                           tosl	equ	0xFFD
 15277                           pclath	equ	0xFFA
 15278                           tblptru	equ	0xFF8
 15279                           tblptrh	equ	0xFF7
 15280                           tblptrl	equ	0xFF6
 15281                           tablat	equ	0xFF5
 15282                           prodh	equ	0xFF4
 15283                           prodl	equ	0xFF3
 15284                           intcon	equ	0xFF2
 15285                           postinc0	equ	0xFEE
 15286                           wreg	equ	0xFE8
 15287                           indf1	equ	0xFE7
 15288                           postdec1	equ	0xFE5
 15289                           fsr1h	equ	0xFE2
 15290                           fsr1l	equ	0xFE1
 15291                           indf2	equ	0xFDF
 15292                           postinc2	equ	0xFDE
 15293                           postdec2	equ	0xFDD
 15294                           plusw2	equ	0xFDB
 15295                           fsr2h	equ	0xFDA
 15296                           fsr2l	equ	0xFD9
 15297                           status	equ	0xFD8
 15298                           
 15299 ;; *************** function _LED_Toggle *****************
 15300 ;; Defined at:
 15301 ;;		line 50 in file "Library/LED.c"
 15302 ;; Parameters:    Size  Location     Type
 15303 ;;  pLED            1    wreg     enum E6739
 15304 ;; Auto vars:     Size  Location     Type
 15305 ;;  pLED            1   24[BANK0 ] enum E6739
 15306 ;; Return value:  Size  Location     Type
 15307 ;;                  1    wreg      void 
 15308 ;; Registers used:
 15309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15310 ;; Tracked objects:
 15311 ;;		On entry : 0/0
 15312 ;;		On exit  : 0/0
 15313 ;;		Unchanged: 0/0
 15314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15319 ;;Total ram usage:        1 bytes
 15320 ;; Hardware stack levels used:    1
 15321 ;; Hardware stack levels required when called:   12
 15322 ;; This function calls:
 15323 ;;		_Port_TogglePin
 15324 ;; This function is called by:
 15325 ;;		_LCD_Reset
 15326 ;;		_Event_DIPSwitch
 15327 ;;		_Event_TestButton
 15328 ;;		_Event_ADCSequenceComplete
 15329 ;;		_Event_HMI_DIPSwitch
 15330 ;;		_Event_HMI_LeftButton
 15331 ;;		_Event_HMI_RightButton
 15332 ;;		_Event_HMI_UpButton
 15333 ;;		_Event_HMI_DownButton
 15334 ;; This function uses a non-reentrant model
 15335 ;;
 15336                           
 15337                           	psect	text82
 15338  014136                     __ptext82:
 15339                           	opt stack 0
 15340  014136                     _LED_Toggle:
 15341                           	opt stack 15
 15342                           
 15343                           ; BSR set to: 3
 15344                           ;incstack = 0
 15345                           ;LED_Toggle@pLED stored from wreg
 15346  014136  0100               	movlb	0	; () banked
 15347  014138  6FCD               	movwf	LED_Toggle@pLED& (0+255),b
 15348                           
 15349                           ;LED.c: 52: switch (pLED)
 15350  01413A  D018               	goto	l234
 15351  01413C                     
 15352                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 15353  01413C  0EA3               	movlw	low _PortC
 15354  01413E  0100               	movlb	0	; () banked
 15355  014140  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 15356  014142  0E00               	movlw	high _PortC
 15357  014144  0100               	movlb	0	; () banked
 15358  014146  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15359  014148  0E00               	movlw	0
 15360  01414A  0100               	movlb	0	; () banked
 15361  01414C  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 15362  01414E  EC93  F0A2         	call	_Port_TogglePin	;wreg free
 15363                           
 15364                           ;LED.c: 56: break;
 15365  014152  0012               	return	
 15366  014154                     
 15367                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 15368  014154  0EA3               	movlw	low _PortC
 15369  014156  0100               	movlb	0	; () banked
 15370  014158  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 15371  01415A  0E00               	movlw	high _PortC
 15372  01415C  0100               	movlb	0	; () banked
 15373  01415E  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15374  014160  0E01               	movlw	1
 15375  014162  0100               	movlb	0	; () banked
 15376  014164  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 15377  014166  EC93  F0A2         	call	_Port_TogglePin	;wreg free
 15378                           
 15379                           ;LED.c: 60: }
 15380                           
 15381                           ;LED.c: 59: break;
 15382  01416A  0012               	return	
 15383  01416C                     l234:
 15384  01416C  0100               	movlb	0	; () banked
 15385  01416E  51CD               	movf	LED_Toggle@pLED& (0+255),w,b
 15386                           
 15387                           ; Switch size 1, requested type "space"
 15388                           ; Number of cases is 2, Range of values is 0 to 1
 15389                           ; switch strategies available:
 15390                           ; Name         Instructions Cycles
 15391                           ; simple_byte            7     4 (average)
 15392                           ;	Chosen strategy is simple_byte
 15393  014170  0A00               	xorlw	0	; case 0
 15394  014172  B4D8               	btfsc	status,2,c
 15395  014174  D7E3               	goto	l235
 15396  014176  0A01               	xorlw	1	; case 1
 15397  014178  A4D8               	btfss	status,2,c
 15398  01417A  0012               	return	
 15399  01417C  D7EB               	goto	l237
 15400  01417E                     __end_of_LED_Toggle:
 15401                           	opt stack 0
 15402                           tosu	equ	0xFFF
 15403                           tosh	equ	0xFFE
 15404                           tosl	equ	0xFFD
 15405                           pclath	equ	0xFFA
 15406                           tblptru	equ	0xFF8
 15407                           tblptrh	equ	0xFF7
 15408                           tblptrl	equ	0xFF6
 15409                           tablat	equ	0xFF5
 15410                           prodh	equ	0xFF4
 15411                           prodl	equ	0xFF3
 15412                           intcon	equ	0xFF2
 15413                           postinc0	equ	0xFEE
 15414                           wreg	equ	0xFE8
 15415                           indf1	equ	0xFE7
 15416                           postdec1	equ	0xFE5
 15417                           fsr1h	equ	0xFE2
 15418                           fsr1l	equ	0xFE1
 15419                           indf2	equ	0xFDF
 15420                           postinc2	equ	0xFDE
 15421                           postdec2	equ	0xFDD
 15422                           plusw2	equ	0xFDB
 15423                           fsr2h	equ	0xFDA
 15424                           fsr2l	equ	0xFD9
 15425                           status	equ	0xFD8
 15426                           
 15427 ;; *************** function _Port_TogglePin *****************
 15428 ;; Defined at:
 15429 ;;		line 278 in file "Library/Port.c"
 15430 ;; Parameters:    Size  Location     Type
 15431 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 15432 ;;		 -> PortC(10), 
 15433 ;;  pPin            1   22[BANK0 ] enum E6750
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  Value           1   23[BANK0 ] unsigned char 
 15436 ;; Return value:  Size  Location     Type
 15437 ;;                  1    wreg      void 
 15438 ;; Registers used:
 15439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15440 ;; Tracked objects:
 15441 ;;		On entry : 0/0
 15442 ;;		On exit  : 0/0
 15443 ;;		Unchanged: 0/0
 15444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15445 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15448 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;Total ram usage:        4 bytes
 15450 ;; Hardware stack levels used:    1
 15451 ;; Hardware stack levels required when called:   11
 15452 ;; This function calls:
 15453 ;;		_Port_GetPin
 15454 ;;		_Port_SetPin
 15455 ;; This function is called by:
 15456 ;;		_LED_Toggle
 15457 ;; This function uses a non-reentrant model
 15458 ;;
 15459                           
 15460                           	psect	text83
 15461  014526                     __ptext83:
 15462                           	opt stack 0
 15463  014526                     _Port_TogglePin:
 15464                           	opt stack 15
 15465                           
 15466                           ;Port.c: 280: UINT8 Value;
 15467                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 15468                           
 15469                           ;incstack = 0
 15470  014526  C0C9  F0B5         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 15471  01452A  C0CA  F0B6         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 15472  01452E  C0CB  F0B7         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 15473  014532  ECE2  F0A0         	call	_Port_GetPin	;wreg free
 15474  014536  0100               	movlb	0	; () banked
 15475  014538  6FCC               	movwf	Port_TogglePin@Value& (0+255),b
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;Port.c: 282: Value ^= 0x01;
 15479  01453A  0E01               	movlw	1
 15480  01453C  0100               	movlb	0	; () banked
 15481  01453E  1BCC               	xorwf	Port_TogglePin@Value& (0+255),f,b
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 15485  014540  C0C9  F0C4         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 15486  014544  C0CA  F0C5         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 15487  014548  C0CB  F0C6         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 15488  01454C  C0CC  F0C7         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 15489  014550  EC44  F094         	call	_Port_SetPin	;wreg free
 15490  014554  0012               	return		;funcret
 15491  014556                     __end_of_Port_TogglePin:
 15492                           	opt stack 0
 15493                           tosu	equ	0xFFF
 15494                           tosh	equ	0xFFE
 15495                           tosl	equ	0xFFD
 15496                           pclath	equ	0xFFA
 15497                           tblptru	equ	0xFF8
 15498                           tblptrh	equ	0xFF7
 15499                           tblptrl	equ	0xFF6
 15500                           tablat	equ	0xFF5
 15501                           prodh	equ	0xFF4
 15502                           prodl	equ	0xFF3
 15503                           intcon	equ	0xFF2
 15504                           postinc0	equ	0xFEE
 15505                           wreg	equ	0xFE8
 15506                           indf1	equ	0xFE7
 15507                           postdec1	equ	0xFE5
 15508                           fsr1h	equ	0xFE2
 15509                           fsr1l	equ	0xFE1
 15510                           indf2	equ	0xFDF
 15511                           postinc2	equ	0xFDE
 15512                           postdec2	equ	0xFDD
 15513                           plusw2	equ	0xFDB
 15514                           fsr2h	equ	0xFDA
 15515                           fsr2l	equ	0xFD9
 15516                           status	equ	0xFD8
 15517                           
 15518 ;; *************** function _Port_SetPin *****************
 15519 ;; Defined at:
 15520 ;;		line 247 in file "Library/Port.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15523 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 15524 ;;  pPin            1   17[BANK0 ] enum E6750
 15525 ;;  pValue          1   18[BANK0 ] unsigned char 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  Type            1   19[BANK0 ] enum E6795
 15528 ;; Return value:  Size  Location     Type
 15529 ;;                  1    wreg      void 
 15530 ;; Registers used:
 15531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15532 ;; Tracked objects:
 15533 ;;		On entry : 0/0
 15534 ;;		On exit  : 0/0
 15535 ;;		Unchanged: 0/0
 15536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15540 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15541 ;;Total ram usage:        5 bytes
 15542 ;; Hardware stack levels used:    1
 15543 ;; Hardware stack levels required when called:   10
 15544 ;; This function calls:
 15545 ;;		_Byte_SetBit
 15546 ;;		_Word_GetPair
 15547 ;; This function is called by:
 15548 ;;		_Reset_Low
 15549 ;;		_Reset_High
 15550 ;;		_LED_Set
 15551 ;;		_Port_TogglePin
 15552 ;;		_Motor_Step
 15553 ;;		_MXK_Init
 15554 ;;		_Motor_Init
 15555 ;; This function uses a non-reentrant model
 15556 ;;
 15557                           
 15558                           	psect	text84
 15559  012888                     __ptext84:
 15560                           	opt stack 0
 15561  012888                     _Port_SetPin:
 15562                           	opt stack 19
 15563                           
 15564                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 15565                           
 15566                           ;incstack = 0
 15567  012888  0E08               	movlw	8
 15568  01288A  0100               	movlb	0	; () banked
 15569  01288C  25C4               	addwf	Port_SetPin@pInput& (0+255),w,b
 15570  01288E  0100               	movlb	0	; () banked
 15571  012890  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 15572  012892  0E00               	movlw	0
 15573  012894  0100               	movlb	0	; () banked
 15574  012896  21C5               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 15575  012898  0100               	movlb	0	; () banked
 15576  01289A  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15577  01289C  C0C6  F0C3         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 15578  0128A0  ECE9  F0A1         	call	_Word_GetPair	;wreg free
 15579  0128A4  0100               	movlb	0	; () banked
 15580  0128A6  6FC8               	movwf	Port_SetPin@Type& (0+255),b
 15581                           
 15582                           ;Port.c: 250: switch (Type)
 15583  0128A8  D042               	goto	l427
 15584  0128AA                     
 15585                           ; BSR set to: 0
 15586                           ;Port.c: 256: pValue &= 1;
 15587                           
 15588                           ; BSR set to: 0
 15589  0128AA  0E01               	movlw	1
 15590  0128AC  0100               	movlb	0	; () banked
 15591  0128AE  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15595  0128B0  0100               	movlb	0	; () banked
 15596  0128B2  EE20 F002          	lfsr	2,2
 15597  0128B6  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15598  0128B8  26D9               	addwf	fsr2l,f,c
 15599  0128BA  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15600  0128BC  22DA               	addwfc	fsr2h,f,c
 15601  0128BE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15602  0128C2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15603  0128C6  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15604  0128CA  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15605  0128CE  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 15606                           
 15607                           ;Port.c: 258: break;
 15608  0128D2  0012               	return	
 15609  0128D4                     
 15610                           ;Port.c: 261: pValue &= 1;
 15611  0128D4  0E01               	movlw	1
 15612  0128D6  0100               	movlb	0	; () banked
 15613  0128D8  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15614                           
 15615                           ;Port.c: 262: pValue ^= 1;
 15616  0128DA  0E01               	movlw	1
 15617  0128DC  0100               	movlb	0	; () banked
 15618  0128DE  1BC7               	xorwf	Port_SetPin@pValue& (0+255),f,b
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15622  0128E0  0100               	movlb	0	; () banked
 15623  0128E2  EE20 F002          	lfsr	2,2
 15624  0128E6  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15625  0128E8  26D9               	addwf	fsr2l,f,c
 15626  0128EA  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15627  0128EC  22DA               	addwfc	fsr2h,f,c
 15628  0128EE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15629  0128F2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15630  0128F6  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15631  0128FA  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15632  0128FE  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 15633                           
 15634                           ;Port.c: 264: break;
 15635  012902  0012               	return	
 15636  012904                     
 15637                           ;Port.c: 266: pValue &= 1;
 15638  012904  0E01               	movlw	1
 15639  012906  0100               	movlb	0	; () banked
 15640  012908  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 15644  01290A  0100               	movlb	0	; () banked
 15645  01290C  EE20 F004          	lfsr	2,4
 15646  012910  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15647  012912  26D9               	addwf	fsr2l,f,c
 15648  012914  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15649  012916  22DA               	addwfc	fsr2h,f,c
 15650  012918  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15651  01291C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15652  012920  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15653  012924  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15654  012928  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 15655                           
 15656                           ;Port.c: 269: }
 15657                           
 15658                           ;Port.c: 268: break;
 15659  01292C  0012               	return	
 15660  01292E                     l427:
 15661  01292E  0100               	movlb	0	; () banked
 15662  012930  51C8               	movf	Port_SetPin@Type& (0+255),w,b
 15663                           
 15664                           ; Switch size 1, requested type "space"
 15665                           ; Number of cases is 4, Range of values is 0 to 3
 15666                           ; switch strategies available:
 15667                           ; Name         Instructions Cycles
 15668                           ; simple_byte           13     7 (average)
 15669                           ;	Chosen strategy is simple_byte
 15670  012932  0A00               	xorlw	0	; case 0
 15671  012934  B4D8               	btfsc	status,2,c
 15672  012936  0012               	return	
 15673  012938  0A01               	xorlw	1	; case 1
 15674  01293A  B4D8               	btfsc	status,2,c
 15675  01293C  D7B6               	goto	l430
 15676  01293E  0A03               	xorlw	3	; case 2
 15677  012940  B4D8               	btfsc	status,2,c
 15678  012942  D7C8               	goto	l432
 15679  012944  0A01               	xorlw	1	; case 3
 15680  012946  A4D8               	btfss	status,2,c
 15681  012948  0012               	return	
 15682  01294A  D7DC               	goto	l433
 15683  01294C                     __end_of_Port_SetPin:
 15684                           	opt stack 0
 15685                           tosu	equ	0xFFF
 15686                           tosh	equ	0xFFE
 15687                           tosl	equ	0xFFD
 15688                           pclath	equ	0xFFA
 15689                           tblptru	equ	0xFF8
 15690                           tblptrh	equ	0xFF7
 15691                           tblptrl	equ	0xFF6
 15692                           tablat	equ	0xFF5
 15693                           prodh	equ	0xFF4
 15694                           prodl	equ	0xFF3
 15695                           intcon	equ	0xFF2
 15696                           postinc0	equ	0xFEE
 15697                           wreg	equ	0xFE8
 15698                           indf1	equ	0xFE7
 15699                           postdec1	equ	0xFE5
 15700                           fsr1h	equ	0xFE2
 15701                           fsr1l	equ	0xFE1
 15702                           indf2	equ	0xFDF
 15703                           postinc2	equ	0xFDE
 15704                           postdec2	equ	0xFDD
 15705                           plusw2	equ	0xFDB
 15706                           fsr2h	equ	0xFDA
 15707                           fsr2l	equ	0xFD9
 15708                           status	equ	0xFD8
 15709                           
 15710 ;; *************** function _Port_GetPin *****************
 15711 ;; Defined at:
 15712 ;;		line 271 in file "Library/Port.c"
 15713 ;; Parameters:    Size  Location     Type
 15714 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 15715 ;;		 -> PortB(10), PortE(10), PortC(10), 
 15716 ;;  pPin            1    2[BANK0 ] enum E6750
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  Output          1    5[BANK0 ] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;                  1    wreg      unsigned char 
 15721 ;; Registers used:
 15722 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15728 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15731 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15732 ;;Total ram usage:        6 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    7
 15735 ;; This function calls:
 15736 ;;		Nothing
 15737 ;; This function is called by:
 15738 ;;		_Port_TogglePin
 15739 ;;		_HMI_LeftSwitch
 15740 ;;		_HMI_RightSwitch
 15741 ;;		_HMI_UpSwitch
 15742 ;;		_HMI_DownSwitch
 15743 ;;		_MXK_TestButton
 15744 ;; This function uses a non-reentrant model
 15745 ;;
 15746                           
 15747                           	psect	text85
 15748  0141C4                     __ptext85:
 15749                           	opt stack 0
 15750  0141C4                     _Port_GetPin:
 15751                           	opt stack 22
 15752                           
 15753                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 15754                           
 15755                           ;incstack = 0
 15756  0141C4  0100               	movlb	0	; () banked
 15757  0141C6  EE20 F006          	lfsr	2,6
 15758  0141CA  51B5               	movf	Port_GetPin@pInput& (0+255),w,b
 15759  0141CC  26D9               	addwf	fsr2l,f,c
 15760  0141CE  51B6               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 15761  0141D0  22DA               	addwfc	fsr2h,f,c
 15762  0141D2  CFDE F0B8          	movff	postinc2,??_Port_GetPin
 15763  0141D6  CFDD F0B9          	movff	postdec2,??_Port_GetPin+1
 15764  0141DA  C0B8  FFD9         	movff	??_Port_GetPin,fsr2l
 15765  0141DE  C0B9  FFDA         	movff	??_Port_GetPin+1,fsr2h
 15766  0141E2  50DF               	movf	indf2,w,c
 15767  0141E4  0100               	movlb	0	; () banked
 15768  0141E6  6FBA               	movwf	Port_GetPin@Output& (0+255),b
 15769                           
 15770                           ; BSR set to: 0
 15771                           ;Port.c: 274: Output >>= (UINT8)pPin;
 15772  0141E8  0100               	movlb	0	; () banked
 15773  0141EA  29B7               	incf	Port_GetPin@pPin& (0+255),w,b
 15774  0141EC  0100               	movlb	0	; () banked
 15775  0141EE  6FB8               	movwf	??_Port_GetPin& (0+255),b
 15776  0141F0  D003               	goto	u6630
 15777  0141F2                     u6635:
 15778  0141F2  0100               	movlb	0	; () banked
 15779  0141F4  90D8               	bcf	status,0,c
 15780  0141F6  33BA               	rrcf	Port_GetPin@Output& (0+255),f,b
 15781  0141F8                     u6630:
 15782  0141F8  0100               	movlb	0	; () banked
 15783  0141FA  2FB8               	decfsz	??_Port_GetPin& (0+255),f,b
 15784  0141FC  D7FA               	goto	u6635
 15785                           
 15786                           ;Port.c: 275: Output &= 1;
 15787  0141FE  0E01               	movlw	1
 15788  014200  0100               	movlb	0	; () banked
 15789  014202  17BA               	andwf	Port_GetPin@Output& (0+255),f,b
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;Port.c: 276: return Output;
 15793  014204  0100               	movlb	0	; () banked
 15794  014206  51BA               	movf	Port_GetPin@Output& (0+255),w,b
 15795  014208  0012               	return	
 15796  01420A                     __end_of_Port_GetPin:
 15797                           	opt stack 0
 15798                           tosu	equ	0xFFF
 15799                           tosh	equ	0xFFE
 15800                           tosl	equ	0xFFD
 15801                           pclath	equ	0xFFA
 15802                           tblptru	equ	0xFF8
 15803                           tblptrh	equ	0xFF7
 15804                           tblptrl	equ	0xFF6
 15805                           tablat	equ	0xFF5
 15806                           prodh	equ	0xFF4
 15807                           prodl	equ	0xFF3
 15808                           intcon	equ	0xFF2
 15809                           postinc0	equ	0xFEE
 15810                           wreg	equ	0xFE8
 15811                           indf1	equ	0xFE7
 15812                           postdec1	equ	0xFE5
 15813                           fsr1h	equ	0xFE2
 15814                           fsr1l	equ	0xFE1
 15815                           indf2	equ	0xFDF
 15816                           postinc2	equ	0xFDE
 15817                           postdec2	equ	0xFDD
 15818                           plusw2	equ	0xFDB
 15819                           fsr2h	equ	0xFDA
 15820                           fsr2l	equ	0xFD9
 15821                           status	equ	0xFD8
 15822                           
 15823 ;; *************** function _HMI_SetBar *****************
 15824 ;; Defined at:
 15825 ;;		line 205 in file "HMI.c"
 15826 ;; Parameters:    Size  Location     Type
 15827 ;;  pValue          1    wreg     unsigned char 
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;  pValue          1    0[BANK0 ] unsigned char 
 15830 ;; Return value:  Size  Location     Type
 15831 ;;                  1    wreg      void 
 15832 ;; Registers used:
 15833 ;;		wreg
 15834 ;; Tracked objects:
 15835 ;;		On entry : 0/0
 15836 ;;		On exit  : 0/0
 15837 ;;		Unchanged: 0/0
 15838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15843 ;;Total ram usage:        1 bytes
 15844 ;; Hardware stack levels used:    1
 15845 ;; Hardware stack levels required when called:    7
 15846 ;; This function calls:
 15847 ;;		Nothing
 15848 ;; This function is called by:
 15849 ;;		_Event_DIPSwitch
 15850 ;;		_Event_HMI_DIPSwitch
 15851 ;;		_Event_HMI_LeftButton
 15852 ;;		_Event_HMI_RightButton
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           	psect	text86
 15857  0149B4                     __ptext86:
 15858                           	opt stack 0
 15859  0149B4                     _HMI_SetBar:
 15860                           	opt stack 20
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;incstack = 0
 15864                           ;HMI_SetBar@pValue stored from wreg
 15865  0149B4  0100               	movlb	0	; () banked
 15866  0149B6  6FB5               	movwf	HMI_SetBar@pValue& (0+255),b
 15867                           
 15868                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15869  0149B8  C0B5  F335         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15870  0149BC  0012               	return		;funcret
 15871  0149BE                     __end_of_HMI_SetBar:
 15872                           	opt stack 0
 15873                           tosu	equ	0xFFF
 15874                           tosh	equ	0xFFE
 15875                           tosl	equ	0xFFD
 15876                           pclath	equ	0xFFA
 15877                           tblptru	equ	0xFF8
 15878                           tblptrh	equ	0xFF7
 15879                           tblptrl	equ	0xFF6
 15880                           tablat	equ	0xFF5
 15881                           prodh	equ	0xFF4
 15882                           prodl	equ	0xFF3
 15883                           intcon	equ	0xFF2
 15884                           postinc0	equ	0xFEE
 15885                           wreg	equ	0xFE8
 15886                           indf1	equ	0xFE7
 15887                           postdec1	equ	0xFE5
 15888                           fsr1h	equ	0xFE2
 15889                           fsr1l	equ	0xFE1
 15890                           indf2	equ	0xFDF
 15891                           postinc2	equ	0xFDE
 15892                           postdec2	equ	0xFDD
 15893                           plusw2	equ	0xFDB
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function _HMI_GetBar *****************
 15899 ;; Defined at:
 15900 ;;		line 209 in file "HMI.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;		None
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;		None
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      unsigned char 
 15907 ;; Registers used:
 15908 ;;		wreg, status,2
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;Total ram usage:        0 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:    7
 15921 ;; This function calls:
 15922 ;;		Nothing
 15923 ;; This function is called by:
 15924 ;;		_Event_DIPSwitch
 15925 ;;		_Event_HMI_DIPSwitch
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           	psect	text87
 15930  0149E4                     __ptext87:
 15931                           	opt stack 0
 15932  0149E4                     _HMI_GetBar:
 15933                           	opt stack 20
 15934                           
 15935                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15936                           
 15937                           ;incstack = 0
 15938  0149E4  0103               	movlb	3	; () banked
 15939  0149E6  5135               	movf	(_HMIBoard+7)& (0+255),w,b
 15940  0149E8  0012               	return	
 15941  0149EA                     __end_of_HMI_GetBar:
 15942                           	opt stack 0
 15943                           tosu	equ	0xFFF
 15944                           tosh	equ	0xFFE
 15945                           tosl	equ	0xFFD
 15946                           pclath	equ	0xFFA
 15947                           tblptru	equ	0xFF8
 15948                           tblptrh	equ	0xFF7
 15949                           tblptrl	equ	0xFF6
 15950                           tablat	equ	0xFF5
 15951                           prodh	equ	0xFF4
 15952                           prodl	equ	0xFF3
 15953                           intcon	equ	0xFF2
 15954                           postinc0	equ	0xFEE
 15955                           wreg	equ	0xFE8
 15956                           indf1	equ	0xFE7
 15957                           postdec1	equ	0xFE5
 15958                           fsr1h	equ	0xFE2
 15959                           fsr1l	equ	0xFE1
 15960                           indf2	equ	0xFDF
 15961                           postinc2	equ	0xFDE
 15962                           postdec2	equ	0xFDD
 15963                           plusw2	equ	0xFDB
 15964                           fsr2h	equ	0xFDA
 15965                           fsr2l	equ	0xFD9
 15966                           status	equ	0xFD8
 15967                           
 15968 ;; *************** function _HMI_Init *****************
 15969 ;; Defined at:
 15970 ;;		line 104 in file "HMI.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;		None
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;  in              2   59[BANK0 ] unsigned short 
 15975 ;; Return value:  Size  Location     Type
 15976 ;;                  1    wreg      void 
 15977 ;; Registers used:
 15978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15979 ;; Tracked objects:
 15980 ;;		On entry : 0/0
 15981 ;;		On exit  : 0/0
 15982 ;;		Unchanged: 0/0
 15983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15988 ;;Total ram usage:        2 bytes
 15989 ;; Hardware stack levels used:    1
 15990 ;; Hardware stack levels required when called:   16
 15991 ;; This function calls:
 15992 ;;		_Button_Init
 15993 ;;		_SPI_Init
 15994 ;;		_SPI_MinSpeed
 15995 ;; This function is called by:
 15996 ;;		_main
 15997 ;; This function uses a non-reentrant model
 15998 ;;
 15999                           
 16000                           	psect	text88
 16001  01130C                     __ptext88:
 16002                           	opt stack 0
 16003  01130C                     _HMI_Init:
 16004                           	opt stack 14
 16005                           
 16006                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 16007                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 16008                           
 16009                           ; BSR set to: 3
 16010                           ;incstack = 0
 16011  01130C  0E5E               	movlw	low (_HMIBoard+48)
 16012  01130E  0101               	movlb	1	; () banked
 16013  011310  6F00               	movwf	Button_Init@pInput& (0+255),b
 16014  011312  0E03               	movlw	high (_HMIBoard+48)
 16015  011314  0101               	movlb	1	; () banked
 16016  011316  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16017  011318  0E00               	movlw	0
 16018  01131A  0101               	movlb	1	; () banked
 16019  01131C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16020  01131E  0E02               	movlw	2
 16021  011320  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16022  011322  0EEA               	movlw	low _HMI_InitButtons
 16023  011324  0101               	movlb	1	; () banked
 16024  011326  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16025  011328  0E49               	movlw	high _HMI_InitButtons
 16026  01132A  0101               	movlb	1	; () banked
 16027  01132C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16028  01132E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16029  011330  0101               	movlb	1	; () banked
 16030  011332  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16031  011334  0E76               	movlw	low _HMI_DIPSwitch
 16032  011336  0101               	movlb	1	; () banked
 16033  011338  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16034  01133A  0E48               	movlw	high _HMI_DIPSwitch
 16035  01133C  0101               	movlb	1	; () banked
 16036  01133E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16037  011340  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 16038  011342  0101               	movlb	1	; () banked
 16039  011344  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16040  011346  0E04               	movlw	low _Event_NULL
 16041  011348  0101               	movlb	1	; () banked
 16042  01134A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16043  01134C  0E14               	movlw	high _Event_NULL
 16044  01134E  0101               	movlb	1	; () banked
 16045  011350  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16046  011352  0E00               	movlw	low (_Event_NULL shr (0+16))
 16047  011354  0101               	movlb	1	; () banked
 16048  011356  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16049  011358  EC72  F093         	call	_Button_Init	;wreg free
 16050                           
 16051                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 16052                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 16053  01135C  0E40               	movlw	low (_HMIBoard+18)
 16054  01135E  0101               	movlb	1	; () banked
 16055  011360  6F00               	movwf	Button_Init@pInput& (0+255),b
 16056  011362  0E03               	movlw	high (_HMIBoard+18)
 16057  011364  0101               	movlb	1	; () banked
 16058  011366  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16059  011368  0E00               	movlw	0
 16060  01136A  0101               	movlb	1	; () banked
 16061  01136C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16062  01136E  0E02               	movlw	2
 16063  011370  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16064  011372  0EEA               	movlw	low _HMI_InitButtons
 16065  011374  0101               	movlb	1	; () banked
 16066  011376  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16067  011378  0E49               	movlw	high _HMI_InitButtons
 16068  01137A  0101               	movlb	1	; () banked
 16069  01137C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16070  01137E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16071  011380  0101               	movlb	1	; () banked
 16072  011382  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16073  011384  0ED6               	movlw	low _HMI_LeftSwitch
 16074  011386  0101               	movlb	1	; () banked
 16075  011388  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16076  01138A  0E48               	movlw	high _HMI_LeftSwitch
 16077  01138C  0101               	movlb	1	; () banked
 16078  01138E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16079  011390  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 16080  011392  0101               	movlb	1	; () banked
 16081  011394  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16082  011396  0E04               	movlw	low _Event_NULL
 16083  011398  0101               	movlb	1	; () banked
 16084  01139A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16085  01139C  0E14               	movlw	high _Event_NULL
 16086  01139E  0101               	movlb	1	; () banked
 16087  0113A0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16088  0113A2  0E00               	movlw	low (_Event_NULL shr (0+16))
 16089  0113A4  0101               	movlb	1	; () banked
 16090  0113A6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16091  0113A8  EC72  F093         	call	_Button_Init	;wreg free
 16092                           
 16093                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 16094                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 16095  0113AC  0E36               	movlw	low (_HMIBoard+8)
 16096  0113AE  0101               	movlb	1	; () banked
 16097  0113B0  6F00               	movwf	Button_Init@pInput& (0+255),b
 16098  0113B2  0E03               	movlw	high (_HMIBoard+8)
 16099  0113B4  0101               	movlb	1	; () banked
 16100  0113B6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16101  0113B8  0E00               	movlw	0
 16102  0113BA  0101               	movlb	1	; () banked
 16103  0113BC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16104  0113BE  0E02               	movlw	2
 16105  0113C0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16106  0113C2  0EEA               	movlw	low _HMI_InitButtons
 16107  0113C4  0101               	movlb	1	; () banked
 16108  0113C6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16109  0113C8  0E49               	movlw	high _HMI_InitButtons
 16110  0113CA  0101               	movlb	1	; () banked
 16111  0113CC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16112  0113CE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16113  0113D0  0101               	movlb	1	; () banked
 16114  0113D2  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16115  0113D4  0EBE               	movlw	low _HMI_RightSwitch
 16116  0113D6  0101               	movlb	1	; () banked
 16117  0113D8  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16118  0113DA  0E48               	movlw	high _HMI_RightSwitch
 16119  0113DC  0101               	movlb	1	; () banked
 16120  0113DE  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16121  0113E0  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 16122  0113E2  0101               	movlb	1	; () banked
 16123  0113E4  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16124  0113E6  0E04               	movlw	low _Event_NULL
 16125  0113E8  0101               	movlb	1	; () banked
 16126  0113EA  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16127  0113EC  0E14               	movlw	high _Event_NULL
 16128  0113EE  0101               	movlb	1	; () banked
 16129  0113F0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16130  0113F2  0E00               	movlw	low (_Event_NULL shr (0+16))
 16131  0113F4  0101               	movlb	1	; () banked
 16132  0113F6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16133  0113F8  EC72  F093         	call	_Button_Init	;wreg free
 16134                           
 16135                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 16136                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 16137  0113FC  0E4A               	movlw	low (_HMIBoard+28)
 16138  0113FE  0101               	movlb	1	; () banked
 16139  011400  6F00               	movwf	Button_Init@pInput& (0+255),b
 16140  011402  0E03               	movlw	high (_HMIBoard+28)
 16141  011404  0101               	movlb	1	; () banked
 16142  011406  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16143  011408  0E00               	movlw	0
 16144  01140A  0101               	movlb	1	; () banked
 16145  01140C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16146  01140E  0E02               	movlw	2
 16147  011410  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16148  011412  0EEA               	movlw	low _HMI_InitButtons
 16149  011414  0101               	movlb	1	; () banked
 16150  011416  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16151  011418  0E49               	movlw	high _HMI_InitButtons
 16152  01141A  0101               	movlb	1	; () banked
 16153  01141C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16154  01141E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16155  011420  0101               	movlb	1	; () banked
 16156  011422  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16157  011424  0EA6               	movlw	low _HMI_UpSwitch
 16158  011426  0101               	movlb	1	; () banked
 16159  011428  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16160  01142A  0E48               	movlw	high _HMI_UpSwitch
 16161  01142C  0101               	movlb	1	; () banked
 16162  01142E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16163  011430  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 16164  011432  0101               	movlb	1	; () banked
 16165  011434  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16166  011436  0E04               	movlw	low _Event_NULL
 16167  011438  0101               	movlb	1	; () banked
 16168  01143A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16169  01143C  0E14               	movlw	high _Event_NULL
 16170  01143E  0101               	movlb	1	; () banked
 16171  011440  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16172  011442  0E00               	movlw	low (_Event_NULL shr (0+16))
 16173  011444  0101               	movlb	1	; () banked
 16174  011446  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16175  011448  EC72  F093         	call	_Button_Init	;wreg free
 16176                           
 16177                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 16178                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 16179  01144C  0E54               	movlw	low (_HMIBoard+38)
 16180  01144E  0101               	movlb	1	; () banked
 16181  011450  6F00               	movwf	Button_Init@pInput& (0+255),b
 16182  011452  0E03               	movlw	high (_HMIBoard+38)
 16183  011454  0101               	movlb	1	; () banked
 16184  011456  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16185  011458  0E00               	movlw	0
 16186  01145A  0101               	movlb	1	; () banked
 16187  01145C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16188  01145E  0E02               	movlw	2
 16189  011460  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16190  011462  0EEA               	movlw	low _HMI_InitButtons
 16191  011464  0101               	movlb	1	; () banked
 16192  011466  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16193  011468  0E49               	movlw	high _HMI_InitButtons
 16194  01146A  0101               	movlb	1	; () banked
 16195  01146C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16196  01146E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16197  011470  0101               	movlb	1	; () banked
 16198  011472  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16199  011474  0E8E               	movlw	low _HMI_DownSwitch
 16200  011476  0101               	movlb	1	; () banked
 16201  011478  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16202  01147A  0E48               	movlw	high _HMI_DownSwitch
 16203  01147C  0101               	movlb	1	; () banked
 16204  01147E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16205  011480  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 16206  011482  0101               	movlb	1	; () banked
 16207  011484  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16208  011486  0E04               	movlw	low _Event_NULL
 16209  011488  0101               	movlb	1	; () banked
 16210  01148A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16211  01148C  0E14               	movlw	high _Event_NULL
 16212  01148E  0101               	movlb	1	; () banked
 16213  011490  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16214  011492  0E00               	movlw	low (_Event_NULL shr (0+16))
 16215  011494  0101               	movlb	1	; () banked
 16216  011496  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16217  011498  EC72  F093         	call	_Button_Init	;wreg free
 16218                           
 16219                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 16220  01149C  0EA0               	movlw	160
 16221  01149E  0100               	movlb	0	; () banked
 16222  0114A0  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 16223  0114A2  0E86               	movlw	134
 16224  0114A4  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 16225  0114A6  0E01               	movlw	1
 16226  0114A8  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 16227  0114AA  0E00               	movlw	0
 16228  0114AC  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 16229  0114AE  0E00               	movlw	0
 16230  0114B0  0100               	movlb	0	; () banked
 16231  0114B2  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 16232  0114B4  0E02               	movlw	2
 16233  0114B6  0100               	movlb	0	; () banked
 16234  0114B8  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 16235  0114BA  EC00  F080         	call	_SPI_Init	;wreg free
 16236                           
 16237                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 16238  0114BE  0E68               	movlw	low _SPI1
 16239  0114C0  0100               	movlb	0	; () banked
 16240  0114C2  6FC4               	movwf	SPI_MinSpeed@pInput& (0+255),b
 16241  0114C4  0E03               	movlw	high _SPI1
 16242  0114C6  0100               	movlb	0	; () banked
 16243  0114C8  6FC5               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 16244  0114CA  EC4F  F09C         	call	_SPI_MinSpeed	;wreg free
 16245                           
 16246                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 16247  0114CE  0E00               	movlw	0
 16248  0114D0  0100               	movlb	0	; () banked
 16249  0114D2  6FF1               	movwf	(HMI_Init@in+1)& (0+255),b
 16250  0114D4  0E00               	movlw	0
 16251  0114D6  6FF0               	movwf	HMI_Init@in& (0+255),b
 16252  0114D8                     l12324:
 16253                           
 16254                           ; BSR set to: 0
 16255  0114D8  0100               	movlb	0	; () banked
 16256  0114DA  51F1               	movf	(HMI_Init@in+1)& (0+255),w,b
 16257  0114DC  E113               	bnz	l1153
 16258  0114DE  0E08               	movlw	8
 16259  0114E0  0100               	movlb	0	; () banked
 16260  0114E2  5DF0               	subwf	HMI_Init@in& (0+255),w,b
 16261  0114E4  B0D8               	btfsc	status,0,c
 16262  0114E6  0012               	return	
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 16266                           
 16267                           ; BSR set to: 0
 16268                           
 16269                           ; BSR set to: 0
 16270  0114E8  0E2E               	movlw	low _HMIBoard
 16271  0114EA  0100               	movlb	0	; () banked
 16272  0114EC  25F0               	addwf	HMI_Init@in& (0+255),w,b
 16273  0114EE  6ED9               	movwf	fsr2l,c
 16274  0114F0  0E03               	movlw	high _HMIBoard
 16275  0114F2  0100               	movlb	0	; () banked
 16276  0114F4  21F1               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 16277  0114F6  6EDA               	movwf	fsr2h,c
 16278  0114F8  0E00               	movlw	0
 16279  0114FA  6EDF               	movwf	indf2,c
 16280                           
 16281                           ; BSR set to: 0
 16282  0114FC  0100               	movlb	0	; () banked
 16283  0114FE  4BF0               	infsnz	HMI_Init@in& (0+255),f,b
 16284  011500  2BF1               	incf	(HMI_Init@in+1)& (0+255),f,b
 16285  011502  D7EA               	goto	l12324
 16286  011504                     l1153:
 16287                           
 16288                           ; BSR set to: 0
 16289  011504  0012               	return		;funcret
 16290  011506                     __end_of_HMI_Init:
 16291                           	opt stack 0
 16292                           tosu	equ	0xFFF
 16293                           tosh	equ	0xFFE
 16294                           tosl	equ	0xFFD
 16295                           pclath	equ	0xFFA
 16296                           tblptru	equ	0xFF8
 16297                           tblptrh	equ	0xFF7
 16298                           tblptrl	equ	0xFF6
 16299                           tablat	equ	0xFF5
 16300                           prodh	equ	0xFF4
 16301                           prodl	equ	0xFF3
 16302                           intcon	equ	0xFF2
 16303                           postinc0	equ	0xFEE
 16304                           wreg	equ	0xFE8
 16305                           indf1	equ	0xFE7
 16306                           postdec1	equ	0xFE5
 16307                           fsr1h	equ	0xFE2
 16308                           fsr1l	equ	0xFE1
 16309                           indf2	equ	0xFDF
 16310                           postinc2	equ	0xFDE
 16311                           postdec2	equ	0xFDD
 16312                           plusw2	equ	0xFDB
 16313                           fsr2h	equ	0xFDA
 16314                           fsr2l	equ	0xFD9
 16315                           status	equ	0xFD8
 16316                           
 16317 ;; *************** function _SPI_MinSpeed *****************
 16318 ;; Defined at:
 16319 ;;		line 190 in file "Library/SPI.c"
 16320 ;; Parameters:    Size  Location     Type
 16321 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 16322 ;;		 -> SPI1(11), 
 16323 ;; Auto vars:     Size  Location     Type
 16324 ;;		None
 16325 ;; Return value:  Size  Location     Type
 16326 ;;                  1    wreg      void 
 16327 ;; Registers used:
 16328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16329 ;; Tracked objects:
 16330 ;;		On entry : 0/0
 16331 ;;		On exit  : 0/0
 16332 ;;		Unchanged: 0/0
 16333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16338 ;;Total ram usage:        2 bytes
 16339 ;; Hardware stack levels used:    1
 16340 ;; Hardware stack levels required when called:    9
 16341 ;; This function calls:
 16342 ;;		_Byte_SetBit
 16343 ;;		_Byte_SetQuad
 16344 ;; This function is called by:
 16345 ;;		_HMI_Init
 16346 ;; This function uses a non-reentrant model
 16347 ;;
 16348                           
 16349                           	psect	text89
 16350  01389E                     __ptext89:
 16351                           	opt stack 0
 16352  01389E                     _SPI_MinSpeed:
 16353                           	opt stack 20
 16354                           
 16355                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16356                           
 16357                           ; BSR set to: 0
 16358                           ;incstack = 0
 16359  01389E  0100               	movlb	0	; () banked
 16360  0138A0  EE20 F006          	lfsr	2,6
 16361  0138A4  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16362  0138A6  26D9               	addwf	fsr2l,f,c
 16363  0138A8  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16364  0138AA  22DA               	addwfc	fsr2h,f,c
 16365  0138AC  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16366  0138B0  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16367  0138B4  0E05               	movlw	5
 16368  0138B6  0100               	movlb	0	; () banked
 16369  0138B8  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16370  0138BA  0E00               	movlw	0
 16371  0138BC  0100               	movlb	0	; () banked
 16372  0138BE  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16373  0138C0  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16374                           
 16375                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 16376  0138C4  0100               	movlb	0	; () banked
 16377  0138C6  EE20 F006          	lfsr	2,6
 16378  0138CA  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16379  0138CC  26D9               	addwf	fsr2l,f,c
 16380  0138CE  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16381  0138D0  22DA               	addwfc	fsr2h,f,c
 16382  0138D2  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 16383  0138D6  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 16384  0138DA  0E00               	movlw	0
 16385  0138DC  0100               	movlb	0	; () banked
 16386  0138DE  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16387  0138E0  0E02               	movlw	2
 16388  0138E2  0100               	movlb	0	; () banked
 16389  0138E4  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 16390  0138E6  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 16391                           
 16392                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16393  0138EA  0100               	movlb	0	; () banked
 16394  0138EC  EE20 F006          	lfsr	2,6
 16395  0138F0  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16396  0138F2  26D9               	addwf	fsr2l,f,c
 16397  0138F4  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16398  0138F6  22DA               	addwfc	fsr2h,f,c
 16399  0138F8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16400  0138FC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16401  013900  0E05               	movlw	5
 16402  013902  0100               	movlb	0	; () banked
 16403  013904  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16404  013906  0E01               	movlw	1
 16405  013908  0100               	movlb	0	; () banked
 16406  01390A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16407  01390C  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16408  013910  0012               	return		;funcret
 16409  013912                     __end_of_SPI_MinSpeed:
 16410                           	opt stack 0
 16411                           tosu	equ	0xFFF
 16412                           tosh	equ	0xFFE
 16413                           tosl	equ	0xFFD
 16414                           pclath	equ	0xFFA
 16415                           tblptru	equ	0xFF8
 16416                           tblptrh	equ	0xFF7
 16417                           tblptrl	equ	0xFF6
 16418                           tablat	equ	0xFF5
 16419                           prodh	equ	0xFF4
 16420                           prodl	equ	0xFF3
 16421                           intcon	equ	0xFF2
 16422                           postinc0	equ	0xFEE
 16423                           wreg	equ	0xFE8
 16424                           indf1	equ	0xFE7
 16425                           postdec1	equ	0xFE5
 16426                           fsr1h	equ	0xFE2
 16427                           fsr1l	equ	0xFE1
 16428                           indf2	equ	0xFDF
 16429                           postinc2	equ	0xFDE
 16430                           postdec2	equ	0xFDD
 16431                           plusw2	equ	0xFDB
 16432                           fsr2h	equ	0xFDA
 16433                           fsr2l	equ	0xFD9
 16434                           status	equ	0xFD8
 16435                           
 16436 ;; *************** function _SPI_Init *****************
 16437 ;; Defined at:
 16438 ;;		line 12 in file "Library/SPI.c"
 16439 ;; Parameters:    Size  Location     Type
 16440 ;;  pClock          4   45[BANK0 ] unsigned long 
 16441 ;;  pChannel        1   49[BANK0 ] enum E6744
 16442 ;;  pMode           1   50[BANK0 ] enum E6748
 16443 ;; Auto vars:     Size  Location     Type
 16444 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 16445 ;;		 -> SPI1(11), SPI2(11), 
 16446 ;; Return value:  Size  Location     Type
 16447 ;;                  1    wreg      void 
 16448 ;; Registers used:
 16449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16455 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;Total ram usage:        8 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:   12
 16462 ;; This function calls:
 16463 ;;		_Byte_SetBit
 16464 ;;		_Byte_SetQuad
 16465 ;;		_Port_SetPinType
 16466 ;;		_SPI_DCS
 16467 ;;		_SPI_DisableISR
 16468 ;;		_Timer2_Init
 16469 ;; This function is called by:
 16470 ;;		_Configure_GPIOs
 16471 ;;		_HMI_Init
 16472 ;; This function uses a non-reentrant model
 16473 ;;
 16474                           
 16475                           	psect	text90
 16476  010000                     __ptext90:
 16477                           	opt stack 0
 16478  010000                     _SPI_Init:
 16479                           	opt stack 16
 16480                           
 16481                           ;SPI.c: 14: SPIPtr pInput;
 16482                           ;SPI.c: 16: switch (pChannel)
 16483                           
 16484                           ;incstack = 0
 16485  010000  D00C               	goto	l597
 16486  010002                     
 16487                           ;SPI.c: 19: pInput = &SPI1;
 16488  010002  0E68               	movlw	low _SPI1
 16489  010004  0100               	movlb	0	; () banked
 16490  010006  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 16491  010008  0E03               	movlw	high _SPI1
 16492  01000A  D004               	goto	L10
 16493  01000C                     
 16494                           ; BSR set to: 0
 16495                           ;SPI.c: 22: pInput = &SPI2;
 16496                           
 16497                           ; BSR set to: 0
 16498  01000C  0E73               	movlw	low _SPI2
 16499  01000E  0100               	movlb	0	; () banked
 16500  010010  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 16501  010012  0E03               	movlw	high _SPI2
 16502  010014                     L10:
 16503  010014  0100               	movlb	0	; () banked
 16504  010016  6FE9               	movwf	(SPI_Init@pInput+1)& (0+255),b
 16505                           
 16506                           ; BSR set to: 0
 16507                           ;SPI.c: 24: };
 16508                           
 16509                           ;SPI.c: 23: break;
 16510  010018  D008               	goto	l599
 16511  01001A                     l597:
 16512                           
 16513                           ; BSR set to: 0
 16514  01001A  0100               	movlb	0	; () banked
 16515  01001C  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 16516                           
 16517                           ; Switch size 1, requested type "space"
 16518                           ; Number of cases is 2, Range of values is 0 to 1
 16519                           ; switch strategies available:
 16520                           ; Name         Instructions Cycles
 16521                           ; simple_byte            7     4 (average)
 16522                           ;	Chosen strategy is simple_byte
 16523  01001E  0A00               	xorlw	0	; case 0
 16524  010020  B4D8               	btfsc	status,2,c
 16525  010022  D7EF               	goto	l598
 16526  010024  0A01               	xorlw	1	; case 1
 16527  010026  B4D8               	btfsc	status,2,c
 16528  010028  D7F1               	goto	l600
 16529  01002A                     l599:
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;SPI.c: 26: pInput->mChannel = pChannel;
 16533                           
 16534                           ; BSR set to: 0
 16535  01002A  0100               	movlb	0	; () banked
 16536  01002C  EE20 F002          	lfsr	2,2
 16537  010030  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16538  010032  26D9               	addwf	fsr2l,f,c
 16539  010034  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16540  010036  22DA               	addwfc	fsr2h,f,c
 16541  010038  C0E6  FFDF         	movff	SPI_Init@pChannel,indf2
 16542                           
 16543                           ;SPI.c: 35: switch (pChannel)
 16544  01003C  D0B1               	goto	l601
 16545  01003E                     
 16546                           ; BSR set to: 0
 16547                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 16548                           
 16549                           ; BSR set to: 0
 16550  01003E  0EA3               	movlw	low _PortC
 16551  010040  0100               	movlb	0	; () banked
 16552  010042  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16553  010044  0E00               	movlw	high _PortC
 16554  010046  0100               	movlb	0	; () banked
 16555  010048  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16556  01004A  0E02               	movlw	2
 16557  01004C  0100               	movlb	0	; () banked
 16558  01004E  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16559  010050  0E03               	movlw	3
 16560  010052  0100               	movlb	0	; () banked
 16561  010054  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16562  010056  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16563                           
 16564                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 16565  01005A  0EA3               	movlw	low _PortC
 16566  01005C  0100               	movlb	0	; () banked
 16567  01005E  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16568  010060  0E00               	movlw	high _PortC
 16569  010062  0100               	movlb	0	; () banked
 16570  010064  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16571  010066  0E03               	movlw	3
 16572  010068  0100               	movlb	0	; () banked
 16573  01006A  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16574  01006C  0E03               	movlw	3
 16575  01006E  0100               	movlb	0	; () banked
 16576  010070  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16577  010072  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16578                           
 16579                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 16580  010076  0EA3               	movlw	low _PortC
 16581  010078  0100               	movlb	0	; () banked
 16582  01007A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16583  01007C  0E00               	movlw	high _PortC
 16584  01007E  0100               	movlb	0	; () banked
 16585  010080  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16586  010082  0E05               	movlw	5
 16587  010084  0100               	movlb	0	; () banked
 16588  010086  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16589  010088  0E03               	movlw	3
 16590  01008A  0100               	movlb	0	; () banked
 16591  01008C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16592  01008E  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16593                           
 16594                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 16595  010092  0EA3               	movlw	low _PortC
 16596  010094  0100               	movlb	0	; () banked
 16597  010096  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16598  010098  0E00               	movlw	high _PortC
 16599  01009A  0100               	movlb	0	; () banked
 16600  01009C  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16601  01009E  0E04               	movlw	4
 16602  0100A0  0100               	movlb	0	; () banked
 16603  0100A2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16604  0100A4  0E00               	movlw	0
 16605  0100A6  0100               	movlb	0	; () banked
 16606  0100A8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16607  0100AA  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16608                           
 16609                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 16610  0100AE  0100               	movlb	0	; () banked
 16611  0100B0  EE20 F003          	lfsr	2,3
 16612  0100B4  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16613  0100B6  26D9               	addwf	fsr2l,f,c
 16614  0100B8  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16615  0100BA  22DA               	addwfc	fsr2h,f,c
 16616  0100BC  0EC7               	movlw	199
 16617  0100BE  6EDE               	movwf	postinc2,c
 16618  0100C0  0E0F               	movlw	15
 16619  0100C2  6EDD               	movwf	postdec2,c
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 16623  0100C4  0100               	movlb	0	; () banked
 16624  0100C6  EE20 F006          	lfsr	2,6
 16625  0100CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16626  0100CC  26D9               	addwf	fsr2l,f,c
 16627  0100CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16628  0100D0  22DA               	addwfc	fsr2h,f,c
 16629  0100D2  0EC6               	movlw	198
 16630  0100D4  6EDE               	movwf	postinc2,c
 16631  0100D6  0E0F               	movlw	15
 16632  0100D8  6EDD               	movwf	postdec2,c
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 16636  0100DA  0100               	movlb	0	; () banked
 16637  0100DC  EE20 F009          	lfsr	2,9
 16638  0100E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16639  0100E2  26D9               	addwf	fsr2l,f,c
 16640  0100E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16641  0100E6  22DA               	addwfc	fsr2h,f,c
 16642  0100E8  0EC9               	movlw	201
 16643  0100EA  D056               	goto	L11
 16644  0100EC                     
 16645                           ; BSR set to: 0
 16646                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 16647                           
 16648                           ; BSR set to: 0
 16649  0100EC  0E99               	movlw	low _PortD
 16650  0100EE  0100               	movlb	0	; () banked
 16651  0100F0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16652  0100F2  0E00               	movlw	high _PortD
 16653  0100F4  0100               	movlb	0	; () banked
 16654  0100F6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16655  0100F8  0E07               	movlw	7
 16656  0100FA  0100               	movlb	0	; () banked
 16657  0100FC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16658  0100FE  0E03               	movlw	3
 16659  010100  0100               	movlb	0	; () banked
 16660  010102  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16661  010104  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16662                           
 16663                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 16664  010108  0E99               	movlw	low _PortD
 16665  01010A  0100               	movlb	0	; () banked
 16666  01010C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16667  01010E  0E00               	movlw	high _PortD
 16668  010110  0100               	movlb	0	; () banked
 16669  010112  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16670  010114  0E06               	movlw	6
 16671  010116  0100               	movlb	0	; () banked
 16672  010118  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16673  01011A  0E03               	movlw	3
 16674  01011C  0100               	movlb	0	; () banked
 16675  01011E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16676  010120  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16677                           
 16678                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 16679  010124  0E99               	movlw	low _PortD
 16680  010126  0100               	movlb	0	; () banked
 16681  010128  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16682  01012A  0E00               	movlw	high _PortD
 16683  01012C  0100               	movlb	0	; () banked
 16684  01012E  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16685  010130  0E04               	movlw	4
 16686  010132  0100               	movlb	0	; () banked
 16687  010134  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16688  010136  0E03               	movlw	3
 16689  010138  0100               	movlb	0	; () banked
 16690  01013A  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16691  01013C  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16692                           
 16693                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 16694  010140  0E99               	movlw	low _PortD
 16695  010142  0100               	movlb	0	; () banked
 16696  010144  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16697  010146  0E00               	movlw	high _PortD
 16698  010148  0100               	movlb	0	; () banked
 16699  01014A  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16700  01014C  0E05               	movlw	5
 16701  01014E  0100               	movlb	0	; () banked
 16702  010150  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16703  010152  0E00               	movlw	0
 16704  010154  0100               	movlb	0	; () banked
 16705  010156  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16706  010158  EC64  F08B         	call	_Port_SetPinType	;wreg free
 16707                           
 16708                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 16709  01015C  0100               	movlb	0	; () banked
 16710  01015E  EE20 F003          	lfsr	2,3
 16711  010162  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16712  010164  26D9               	addwf	fsr2l,f,c
 16713  010166  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16714  010168  22DA               	addwfc	fsr2h,f,c
 16715  01016A  0E6D               	movlw	109
 16716  01016C  6EDE               	movwf	postinc2,c
 16717  01016E  0E0F               	movlw	15
 16718  010170  6EDD               	movwf	postdec2,c
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 16722  010172  0100               	movlb	0	; () banked
 16723  010174  EE20 F006          	lfsr	2,6
 16724  010178  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16725  01017A  26D9               	addwf	fsr2l,f,c
 16726  01017C  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16727  01017E  22DA               	addwfc	fsr2h,f,c
 16728  010180  0E6C               	movlw	108
 16729  010182  6EDE               	movwf	postinc2,c
 16730  010184  0E0F               	movlw	15
 16731  010186  6EDD               	movwf	postdec2,c
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 16735  010188  0100               	movlb	0	; () banked
 16736  01018A  EE20 F009          	lfsr	2,9
 16737  01018E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16738  010190  26D9               	addwf	fsr2l,f,c
 16739  010192  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16740  010194  22DA               	addwfc	fsr2h,f,c
 16741  010196  0E6F               	movlw	111
 16742  010198                     L11:
 16743  010198  6EDE               	movwf	postinc2,c
 16744  01019A  0E0F               	movlw	15
 16745  01019C  6EDD               	movwf	postdec2,c
 16746                           
 16747                           ;SPI.c: 68: break;
 16748  01019E  D009               	goto	l603
 16749  0101A0                     l601:
 16750                           
 16751                           ; BSR set to: 0
 16752                           
 16753                           ; BSR set to: 0
 16754  0101A0  0100               	movlb	0	; () banked
 16755  0101A2  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 16756                           
 16757                           ; Switch size 1, requested type "space"
 16758                           ; Number of cases is 2, Range of values is 0 to 1
 16759                           ; switch strategies available:
 16760                           ; Name         Instructions Cycles
 16761                           ; simple_byte            7     4 (average)
 16762                           ;	Chosen strategy is simple_byte
 16763  0101A4  0A00               	xorlw	0	; case 0
 16764  0101A6  B4D8               	btfsc	status,2,c
 16765  0101A8  D74A               	goto	l602
 16766  0101AA  0A01               	xorlw	1	; case 1
 16767  0101AC  A4D8               	btfss	status,2,c
 16768  0101AE  0012               	return	
 16769  0101B0  D79D               	goto	l604
 16770  0101B2                     l603:
 16771                           
 16772                           ; BSR set to: 0
 16773                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16774                           
 16775                           ; BSR set to: 0
 16776  0101B2  0100               	movlb	0	; () banked
 16777  0101B4  EE20 F006          	lfsr	2,6
 16778  0101B8  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16779  0101BA  26D9               	addwf	fsr2l,f,c
 16780  0101BC  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16781  0101BE  22DA               	addwfc	fsr2h,f,c
 16782  0101C0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16783  0101C4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16784  0101C8  0E05               	movlw	5
 16785  0101CA  0100               	movlb	0	; () banked
 16786  0101CC  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16787  0101CE  0E00               	movlw	0
 16788  0101D0  0100               	movlb	0	; () banked
 16789  0101D2  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16790  0101D4  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16791                           
 16792                           ;SPI.c: 77: switch(pMode)
 16793  0101D8  D09C               	goto	l607
 16794  0101DA                     
 16795                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16796  0101DA  0100               	movlb	0	; () banked
 16797  0101DC  EE20 F006          	lfsr	2,6
 16798  0101E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16799  0101E2  26D9               	addwf	fsr2l,f,c
 16800  0101E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16801  0101E6  22DA               	addwfc	fsr2h,f,c
 16802  0101E8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16803  0101EC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16804  0101F0  0E04               	movlw	4
 16805  0101F2  0100               	movlb	0	; () banked
 16806  0101F4  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16807  0101F6  0E00               	movlw	0
 16808  0101F8  0100               	movlb	0	; () banked
 16809  0101FA  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16810  0101FC  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16811                           
 16812                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16813  010200  0100               	movlb	0	; () banked
 16814  010202  EE20 F003          	lfsr	2,3
 16815  010206  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16816  010208  26D9               	addwf	fsr2l,f,c
 16817  01020A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16818  01020C  22DA               	addwfc	fsr2h,f,c
 16819  01020E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16820  010212  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16821  010216  0E06               	movlw	6
 16822  010218  0100               	movlb	0	; () banked
 16823  01021A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16824  01021C  0E00               	movlw	0
 16825  01021E  0100               	movlb	0	; () banked
 16826  010220  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16827  010222  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16828                           
 16829                           ;SPI.c: 82: break;
 16830  010226  D084               	goto	l609
 16831  010228                     
 16832                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16833  010228  0100               	movlb	0	; () banked
 16834  01022A  EE20 F006          	lfsr	2,6
 16835  01022E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16836  010230  26D9               	addwf	fsr2l,f,c
 16837  010232  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16838  010234  22DA               	addwfc	fsr2h,f,c
 16839  010236  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16840  01023A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16841  01023E  0E04               	movlw	4
 16842  010240  0100               	movlb	0	; () banked
 16843  010242  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16844  010244  0E00               	movlw	0
 16845  010246  0100               	movlb	0	; () banked
 16846  010248  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16847  01024A  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16848                           
 16849                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16850  01024E  0100               	movlb	0	; () banked
 16851  010250  EE20 F003          	lfsr	2,3
 16852  010254  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16853  010256  26D9               	addwf	fsr2l,f,c
 16854  010258  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16855  01025A  22DA               	addwfc	fsr2h,f,c
 16856  01025C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16857  010260  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16858  010264  0E06               	movlw	6
 16859  010266  0100               	movlb	0	; () banked
 16860  010268  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16861  01026A  0E01               	movlw	1
 16862  01026C  0100               	movlb	0	; () banked
 16863  01026E  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16864  010270  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16865                           
 16866                           ;SPI.c: 86: break;
 16867  010274  D05D               	goto	l609
 16868  010276                     
 16869                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16870  010276  0100               	movlb	0	; () banked
 16871  010278  EE20 F006          	lfsr	2,6
 16872  01027C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16873  01027E  26D9               	addwf	fsr2l,f,c
 16874  010280  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16875  010282  22DA               	addwfc	fsr2h,f,c
 16876  010284  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16877  010288  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16878  01028C  0E04               	movlw	4
 16879  01028E  0100               	movlb	0	; () banked
 16880  010290  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16881  010292  0E01               	movlw	1
 16882  010294  0100               	movlb	0	; () banked
 16883  010296  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16884  010298  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16885                           
 16886                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16887  01029C  0100               	movlb	0	; () banked
 16888  01029E  EE20 F003          	lfsr	2,3
 16889  0102A2  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16890  0102A4  26D9               	addwf	fsr2l,f,c
 16891  0102A6  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16892  0102A8  22DA               	addwfc	fsr2h,f,c
 16893  0102AA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16894  0102AE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16895  0102B2  0E06               	movlw	6
 16896  0102B4  0100               	movlb	0	; () banked
 16897  0102B6  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16898  0102B8  0E00               	movlw	0
 16899  0102BA  0100               	movlb	0	; () banked
 16900  0102BC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16901  0102BE  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16902                           
 16903                           ;SPI.c: 90: break;
 16904  0102C2  D036               	goto	l609
 16905  0102C4                     
 16906                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16907  0102C4  0100               	movlb	0	; () banked
 16908  0102C6  EE20 F006          	lfsr	2,6
 16909  0102CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16910  0102CC  26D9               	addwf	fsr2l,f,c
 16911  0102CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16912  0102D0  22DA               	addwfc	fsr2h,f,c
 16913  0102D2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16914  0102D6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16915  0102DA  0E04               	movlw	4
 16916  0102DC  0100               	movlb	0	; () banked
 16917  0102DE  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16918  0102E0  0E01               	movlw	1
 16919  0102E2  0100               	movlb	0	; () banked
 16920  0102E4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16921  0102E6  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16922                           
 16923                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16924  0102EA  0100               	movlb	0	; () banked
 16925  0102EC  EE20 F003          	lfsr	2,3
 16926  0102F0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16927  0102F2  26D9               	addwf	fsr2l,f,c
 16928  0102F4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16929  0102F6  22DA               	addwfc	fsr2h,f,c
 16930  0102F8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16931  0102FC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16932  010300  0E06               	movlw	6
 16933  010302  0100               	movlb	0	; () banked
 16934  010304  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16935  010306  0E01               	movlw	1
 16936  010308  0100               	movlb	0	; () banked
 16937  01030A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16938  01030C  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16939                           
 16940                           ;SPI.c: 94: break;
 16941  010310  D00F               	goto	l609
 16942  010312                     l607:
 16943  010312  0100               	movlb	0	; () banked
 16944  010314  51E7               	movf	SPI_Init@pMode& (0+255),w,b
 16945                           
 16946                           ; Switch size 1, requested type "space"
 16947                           ; Number of cases is 4, Range of values is 0 to 3
 16948                           ; switch strategies available:
 16949                           ; Name         Instructions Cycles
 16950                           ; simple_byte           13     7 (average)
 16951                           ;	Chosen strategy is simple_byte
 16952  010316  0A00               	xorlw	0	; case 0
 16953  010318  B4D8               	btfsc	status,2,c
 16954  01031A  D75F               	goto	l608
 16955  01031C  0A01               	xorlw	1	; case 1
 16956  01031E  B4D8               	btfsc	status,2,c
 16957  010320  D783               	goto	l610
 16958  010322  0A03               	xorlw	3	; case 2
 16959  010324  B4D8               	btfsc	status,2,c
 16960  010326  D7A7               	goto	l611
 16961  010328  0A01               	xorlw	1	; case 3
 16962  01032A  A4D8               	btfss	status,2,c
 16963  01032C  0012               	return	
 16964  01032E  D7CA               	goto	l612
 16965  010330                     l609:
 16966                           
 16967                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 16968                           
 16969                           ; BSR set to: 0
 16970  010330  0100               	movlb	0	; () banked
 16971  010332  EE20 F006          	lfsr	2,6
 16972  010336  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16973  010338  26D9               	addwf	fsr2l,f,c
 16974  01033A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16975  01033C  22DA               	addwfc	fsr2h,f,c
 16976  01033E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16977  010342  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16978  010346  0E07               	movlw	7
 16979  010348  0100               	movlb	0	; () banked
 16980  01034A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16981  01034C  0E00               	movlw	0
 16982  01034E  0100               	movlb	0	; () banked
 16983  010350  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16984  010352  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 16985                           
 16986                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 16987  010356  0100               	movlb	0	; () banked
 16988  010358  EE20 F006          	lfsr	2,6
 16989  01035C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16990  01035E  26D9               	addwf	fsr2l,f,c
 16991  010360  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16992  010362  22DA               	addwfc	fsr2h,f,c
 16993  010364  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16994  010368  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16995  01036C  0E06               	movlw	6
 16996  01036E  0100               	movlb	0	; () banked
 16997  010370  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16998  010372  0E00               	movlw	0
 16999  010374  0100               	movlb	0	; () banked
 17000  010376  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 17001  010378  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17002                           
 17003                           ;SPI.c: 106: Timer2_Init(pClock);
 17004  01037C  C0E2  F0C2         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 17005  010380  C0E3  F0C3         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 17006  010384  C0E4  F0C4         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 17007  010388  C0E5  F0C5         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 17008  01038C  ECCB  F090         	call	_Timer2_Init	;wreg free
 17009                           
 17010                           ;SPI.c: 112: SPI_DisableISR(pInput);
 17011  010390  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 17012  010394  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 17013  010398  EC1E  F0A3         	call	_SPI_DisableISR	;wreg free
 17014                           
 17015                           ;SPI.c: 116: switch (pChannel)
 17016  01039C  D004               	goto	l614
 17017  01039E                     l615:
 17018                           
 17019                           ; BSR set to: 0
 17020  01039E  869F               	bsf	3999,3,c	;volatile
 17021  0103A0  D00B               	goto	l616
 17022  0103A2                     l617:
 17023                           
 17024                           ; BSR set to: 0
 17025  0103A2  8EA5               	bsf	4005,7,c	;volatile
 17026  0103A4  D009               	goto	l616
 17027  0103A6                     l614:
 17028                           
 17029                           ; BSR set to: 0
 17030  0103A6  0100               	movlb	0	; () banked
 17031  0103A8  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 17032                           
 17033                           ; Switch size 1, requested type "space"
 17034                           ; Number of cases is 2, Range of values is 0 to 1
 17035                           ; switch strategies available:
 17036                           ; Name         Instructions Cycles
 17037                           ; simple_byte            7     4 (average)
 17038                           ;	Chosen strategy is simple_byte
 17039  0103AA  0A00               	xorlw	0	; case 0
 17040  0103AC  B4D8               	btfsc	status,2,c
 17041  0103AE  D7F7               	goto	l615
 17042  0103B0  0A01               	xorlw	1	; case 1
 17043  0103B2  A4D8               	btfss	status,2,c
 17044  0103B4  0012               	return	
 17045  0103B6  D7F5               	goto	l617
 17046  0103B8                     l616:
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;SPI.c: 124: SPI_DCS(pInput);
 17050                           
 17051                           ; BSR set to: 0
 17052  0103B8  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DCS@pInput
 17053  0103BC  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 17054  0103C0  ECAB  F0A2         	call	_SPI_DCS	;wreg free
 17055                           
 17056                           ;SPI.c: 126: pInput->mBusy = 0;
 17057  0103C4  C0E8  FFD9         	movff	SPI_Init@pInput,fsr2l
 17058  0103C8  C0E9  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 17059  0103CC  0E00               	movlw	0
 17060  0103CE  6EDF               	movwf	indf2,c
 17061                           
 17062                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 17063  0103D0  0100               	movlb	0	; () banked
 17064  0103D2  EE20 F006          	lfsr	2,6
 17065  0103D6  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17066  0103D8  26D9               	addwf	fsr2l,f,c
 17067  0103DA  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17068  0103DC  22DA               	addwfc	fsr2h,f,c
 17069  0103DE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 17070  0103E2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 17071  0103E6  0E00               	movlw	0
 17072  0103E8  0100               	movlb	0	; () banked
 17073  0103EA  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17074  0103EC  0E03               	movlw	3
 17075  0103EE  0100               	movlb	0	; () banked
 17076  0103F0  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 17077  0103F2  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 17078                           
 17079                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17080  0103F6  0100               	movlb	0	; () banked
 17081  0103F8  EE20 F006          	lfsr	2,6
 17082  0103FC  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17083  0103FE  26D9               	addwf	fsr2l,f,c
 17084  010400  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17085  010402  22DA               	addwfc	fsr2h,f,c
 17086  010404  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 17087  010408  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 17088  01040C  0E05               	movlw	5
 17089  01040E  0100               	movlb	0	; () banked
 17090  010410  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 17091  010412  0E01               	movlw	1
 17092  010414  0100               	movlb	0	; () banked
 17093  010416  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 17094  010418  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17095  01041C  0012               	return		;funcret
 17096  01041E                     __end_of_SPI_Init:
 17097                           	opt stack 0
 17098                           tosu	equ	0xFFF
 17099                           tosh	equ	0xFFE
 17100                           tosl	equ	0xFFD
 17101                           pclath	equ	0xFFA
 17102                           tblptru	equ	0xFF8
 17103                           tblptrh	equ	0xFF7
 17104                           tblptrl	equ	0xFF6
 17105                           tablat	equ	0xFF5
 17106                           prodh	equ	0xFF4
 17107                           prodl	equ	0xFF3
 17108                           intcon	equ	0xFF2
 17109                           postinc0	equ	0xFEE
 17110                           wreg	equ	0xFE8
 17111                           indf1	equ	0xFE7
 17112                           postdec1	equ	0xFE5
 17113                           fsr1h	equ	0xFE2
 17114                           fsr1l	equ	0xFE1
 17115                           indf2	equ	0xFDF
 17116                           postinc2	equ	0xFDE
 17117                           postdec2	equ	0xFDD
 17118                           plusw2	equ	0xFDB
 17119                           fsr2h	equ	0xFDA
 17120                           fsr2l	equ	0xFD9
 17121                           status	equ	0xFD8
 17122                           
 17123 ;; *************** function _Timer2_Init *****************
 17124 ;; Defined at:
 17125 ;;		line 10 in file "Library/Timer2.c"
 17126 ;; Parameters:    Size  Location     Type
 17127 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 17128 ;; Auto vars:     Size  Location     Type
 17129 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 17130 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 17131 ;;  RDIV            4   18[BANK0 ] unsigned long 
 17132 ;; Return value:  Size  Location     Type
 17133 ;;                  1    wreg      void 
 17134 ;; Registers used:
 17135 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17136 ;; Tracked objects:
 17137 ;;		On entry : 0/0
 17138 ;;		On exit  : 0/0
 17139 ;;		Unchanged: 0/0
 17140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17142 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17144 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17145 ;;Total ram usage:       17 bytes
 17146 ;; Hardware stack levels used:    1
 17147 ;; Hardware stack levels required when called:    8
 17148 ;; This function calls:
 17149 ;;		_Timer2_Clear
 17150 ;;		___lldiv
 17151 ;; This function is called by:
 17152 ;;		_SPI_Init
 17153 ;; This function uses a non-reentrant model
 17154 ;;
 17155                           
 17156                           	psect	text91
 17157  012196                     __ptext91:
 17158                           	opt stack 0
 17159  012196                     _Timer2_Init:
 17160                           	opt stack 19
 17161                           
 17162                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 17163                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 17164                           ;Timer2.c: 14: static UINT8 PRE = 0;
 17165                           ;Timer2.c: 15: static UINT32 DIV = 0;
 17166                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 17167                           
 17168                           ;incstack = 0
 17169  012196  0E00               	movlw	0
 17170  012198  0100               	movlb	0	; () banked
 17171  01219A  6FCB               	movwf	Timer2_Init@pCPUClock& (0+255),b
 17172  01219C  0E6C               	movlw	108
 17173  01219E  6FCC               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 17174  0121A0  0EDC               	movlw	220
 17175  0121A2  6FCD               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 17176  0121A4  0E02               	movlw	2
 17177  0121A6  6FCE               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 17181                           ;Timer2.c: 20: pFrequency *= 2;
 17182  0121A8  0100               	movlb	0	; () banked
 17183  0121AA  90D8               	bcf	status,0,c
 17184  0121AC  37C2               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 17185  0121AE  37C3               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 17186  0121B0  37C4               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 17187  0121B2  37C5               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 17188                           
 17189                           ; BSR set to: 0
 17190                           ;Timer2.c: 23: pCPUClock /= 4;
 17191  0121B4  0E02               	movlw	2
 17192  0121B6  0100               	movlb	0	; () banked
 17193  0121B8  6FC6               	movwf	??_Timer2_Init& (0+255),b
 17194  0121BA                     u7115:
 17195  0121BA  90D8               	bcf	status,0,c
 17196  0121BC  0100               	movlb	0	; () banked
 17197  0121BE  33CE               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 17198  0121C0  33CD               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 17199  0121C2  33CC               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 17200  0121C4  33CB               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 17201  0121C6  0100               	movlb	0	; () banked
 17202  0121C8  2FC6               	decfsz	??_Timer2_Init& (0+255),f,b
 17203  0121CA  D7F7               	goto	u7115
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 17207  0121CC  C0CB  F0B5         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 17208  0121D0  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 17209  0121D4  C0CD  F0B7         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 17210  0121D8  C0CE  F0B8         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 17211  0121DC  C0C2  F0B9         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 17212  0121E0  C0C3  F0BA         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 17213  0121E4  C0C4  F0BB         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 17214  0121E8  C0C5  F0BC         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 17215  0121EC  EC66  F095         	call	___lldiv	;wreg free
 17216  0121F0  C0B5  F0CF         	movff	?___lldiv,Timer2_Init@DIVIDE
 17217  0121F4  C0B6  F0D0         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 17218  0121F8  C0B7  F0D1         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 17219  0121FC  C0B8  F0D2         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 17220                           
 17221                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 17222  012200  D010               	goto	l1828
 17223  012202                     l11022:
 17224                           
 17225                           ;Timer2.c: 28: {
 17226                           ;Timer2.c: 29: RDIV = 0;
 17227  012202  0E00               	movlw	0
 17228  012204  0100               	movlb	0	; () banked
 17229  012206  6FC7               	movwf	Timer2_Init@RDIV& (0+255),b
 17230  012208  0E00               	movlw	0
 17231  01220A  6FC8               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 17232  01220C  0E00               	movlw	0
 17233  01220E  6FC9               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 17234  012210  0E00               	movlw	0
 17235  012212  6FCA               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 17236                           
 17237                           ; BSR set to: 0
 17238                           ;Timer2.c: 30: INDEX ++;
 17239  012214  0100               	movlb	0	; () banked
 17240  012216  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;Timer2.c: 31: if (INDEX >= 3)
 17244  012218  0E02               	movlw	2
 17245  01221A  0100               	movlb	0	; () banked
 17246  01221C  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 17247  01221E  D001               	goto	l1828
 17248  012220  D026               	goto	u7130
 17249  012222                     l1828:
 17250                           
 17251                           ; BSR set to: 0
 17252                           
 17253                           ; BSR set to: 0
 17254  012222  C0CF  F0B5         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 17255  012226  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 17256  01222A  C0D1  F0B7         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 17257  01222E  C0D2  F0B8         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 17258  012232  0100               	movlb	0	; () banked
 17259  012234  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 17260  012236  0D01               	mullw	1
 17261  012238  0EB6               	movlw	low Timer2_Init@PRESCALE
 17262  01223A  24F3               	addwf	prodl,w,c
 17263  01223C  6EF6               	movwf	tblptrl,c
 17264  01223E  0EFD               	movlw	high Timer2_Init@PRESCALE
 17265  012240  20F4               	addwfc	prodh,w,c
 17266  012242  6EF7               	movwf	tblptrh,c
 17267  012244                     	if	1	;There are 3 active tblptr bytes
 17268  012244  6AF8               	clrf	tblptru,c
 17269  012246  0E00               	movlw	low (__mediumconst shr (0+16))
 17270  012248  22F8               	addwfc	tblptru,f,c
 17271  01224A                     	endif
 17272  01224A  0008               	tblrd		*
 17273  01224C  50F5               	movf	tablat,w,c
 17274  01224E  0100               	movlb	0	; () banked
 17275  012250  6FB9               	movwf	___lldiv@divisor& (0+255),b
 17276  012252  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 17277  012254  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 17278  012256  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 17279  012258  EC66  F095         	call	___lldiv	;wreg free
 17280  01225C  0100               	movlb	0	; () banked
 17281  01225E  51B8               	movf	(?___lldiv+3)& (0+255),w,b
 17282  012260  0100               	movlb	0	; () banked
 17283  012262  11B7               	iorwf	(?___lldiv+2)& (0+255),w,b
 17284  012264  E1CE               	bnz	l11022
 17285  012266  0100               	movlb	0	; () banked
 17286  012268  05B6               	decf	(?___lldiv+1)& (0+255),w,b
 17287  01226A  B0D8               	btfsc	status,0,c
 17288  01226C  D7CA               	goto	l1827
 17289  01226E                     u7130:
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;Timer2.c: 33: }
 17293                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 17294                           
 17295                           ; BSR set to: 0
 17296  01226E  50CA               	movf	4042,w,c	;volatile
 17297  012270  0100               	movlb	0	; () banked
 17298  012272  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17299  012274  0BFC               	andlw	-4
 17300  012276  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17301  012278  6ECA               	movwf	4042,c	;volatile
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 17305  01227A  84CA               	bsf	4042,2,c	;volatile
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;Timer2.c: 44: Timer2_Clear();
 17309  01227C  ECE7  F0A4         	call	_Timer2_Clear	;wreg free
 17310                           
 17311                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 17312  012280  0100               	movlb	0	; () banked
 17313  012282  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 17314  012284  0D01               	mullw	1
 17315  012286  0EB6               	movlw	low Timer2_Init@PRESCALE
 17316  012288  24F3               	addwf	prodl,w,c
 17317  01228A  6EF6               	movwf	tblptrl,c
 17318  01228C  0EFD               	movlw	high Timer2_Init@PRESCALE
 17319  01228E  20F4               	addwfc	prodh,w,c
 17320  012290  6EF7               	movwf	tblptrh,c
 17321  012292                     	if	1	;There are 3 active tblptr bytes
 17322  012292  6AF8               	clrf	tblptru,c
 17323  012294  0E00               	movlw	low (__mediumconst shr (0+16))
 17324  012296  22F8               	addwfc	tblptru,f,c
 17325  012298                     	endif
 17326  012298  0008               	tblrd		*
 17327  01229A  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 17328                           
 17329                           ; BSR set to: 0
 17330                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 17331  01229E  0EFF               	movlw	255
 17332  0122A0  0100               	movlb	0	; () banked
 17333  0122A2  25CF               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 17334  0122A4  0103               	movlb	3	; () banked
 17335  0122A6  6F1E               	movwf	Timer2_Init@DIV& (0+255),b
 17336  0122A8  0EFF               	movlw	255
 17337  0122AA  0100               	movlb	0	; () banked
 17338  0122AC  21D0               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 17339  0122AE  0103               	movlb	3	; () banked
 17340  0122B0  6F1F               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 17341  0122B2  0EFF               	movlw	255
 17342  0122B4  0100               	movlb	0	; () banked
 17343  0122B6  21D1               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 17344  0122B8  0103               	movlb	3	; () banked
 17345  0122BA  6F20               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 17346  0122BC  0EFF               	movlw	255
 17347  0122BE  0100               	movlb	0	; () banked
 17348  0122C0  21D2               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 17349  0122C2  0103               	movlb	3	; () banked
 17350  0122C4  6F21               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 17351                           
 17352                           ; BSR set to: 3
 17353                           ;Timer2.c: 48: INDEX = DIV/PRE;
 17354  0122C6  C31E  F0B5         	movff	Timer2_Init@DIV,___lldiv@dividend
 17355  0122CA  C31F  F0B6         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 17356  0122CE  C320  F0B7         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 17357  0122D2  C321  F0B8         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 17358  0122D6  0100               	movlb	0	; () banked
 17359  0122D8  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 17360  0122DA  0100               	movlb	0	; () banked
 17361  0122DC  6FB9               	movwf	___lldiv@divisor& (0+255),b
 17362  0122DE  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 17363  0122E0  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 17364  0122E2  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 17365  0122E4  EC66  F095         	call	___lldiv	;wreg free
 17366  0122E8  0100               	movlb	0	; () banked
 17367  0122EA  51B5               	movf	?___lldiv& (0+255),w,b
 17368  0122EC  0100               	movlb	0	; () banked
 17369  0122EE  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;Timer2.c: 49: PR2 = INDEX;
 17373  0122F0  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 17374                           
 17375                           ; BSR set to: 0
 17376  0122F4  0012               	return		;funcret
 17377  0122F6                     __end_of_Timer2_Init:
 17378                           	opt stack 0
 17379                           tosu	equ	0xFFF
 17380                           tosh	equ	0xFFE
 17381                           tosl	equ	0xFFD
 17382                           pclath	equ	0xFFA
 17383                           tblptru	equ	0xFF8
 17384                           tblptrh	equ	0xFF7
 17385                           tblptrl	equ	0xFF6
 17386                           tablat	equ	0xFF5
 17387                           prodh	equ	0xFF4
 17388                           prodl	equ	0xFF3
 17389                           intcon	equ	0xFF2
 17390                           postinc0	equ	0xFEE
 17391                           wreg	equ	0xFE8
 17392                           indf1	equ	0xFE7
 17393                           postdec1	equ	0xFE5
 17394                           fsr1h	equ	0xFE2
 17395                           fsr1l	equ	0xFE1
 17396                           indf2	equ	0xFDF
 17397                           postinc2	equ	0xFDE
 17398                           postdec2	equ	0xFDD
 17399                           plusw2	equ	0xFDB
 17400                           fsr2h	equ	0xFDA
 17401                           fsr2l	equ	0xFD9
 17402                           status	equ	0xFD8
 17403                           
 17404 ;; *************** function ___lldiv *****************
 17405 ;; Defined at:
 17406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 17407 ;; Parameters:    Size  Location     Type
 17408 ;;  dividend        4    0[BANK0 ] unsigned long 
 17409 ;;  divisor         4    4[BANK0 ] unsigned long 
 17410 ;; Auto vars:     Size  Location     Type
 17411 ;;  quotient        4    8[BANK0 ] unsigned long 
 17412 ;;  counter         1   12[BANK0 ] unsigned char 
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  4    0[BANK0 ] unsigned long 
 17415 ;; Registers used:
 17416 ;;		wreg, status,2, status,0
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17422 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17423 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17425 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;Total ram usage:       13 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:    7
 17429 ;; This function calls:
 17430 ;;		Nothing
 17431 ;; This function is called by:
 17432 ;;		_Timer2_Init
 17433 ;;		_rand_between
 17434 ;;		_I2C_Init
 17435 ;;		_Timer0_Init
 17436 ;; This function uses a non-reentrant model
 17437 ;;
 17438                           
 17439                           	psect	text92
 17440  012ACC                     __ptext92:
 17441                           	opt stack 0
 17442  012ACC                     ___lldiv:
 17443                           	opt stack 19
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;incstack = 0
 17447  012ACC  0E00               	movlw	0
 17448  012ACE  0100               	movlb	0	; () banked
 17449  012AD0  6FBD               	movwf	___lldiv@quotient& (0+255),b
 17450  012AD2  0E00               	movlw	0
 17451  012AD4  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
 17452  012AD6  0E00               	movlw	0
 17453  012AD8  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
 17454  012ADA  0E00               	movlw	0
 17455  012ADC  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
 17456                           
 17457                           ; BSR set to: 0
 17458  012ADE  0100               	movlb	0	; () banked
 17459  012AE0  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17460  012AE2  0100               	movlb	0	; () banked
 17461  012AE4  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 17462  012AE6  0100               	movlb	0	; () banked
 17463  012AE8  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 17464  012AEA  0100               	movlb	0	; () banked
 17465  012AEC  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 17466  012AEE  B4D8               	btfsc	status,2,c
 17467  012AF0  D042               	goto	l2626
 17468                           
 17469                           ; BSR set to: 0
 17470  012AF2  0E01               	movlw	1
 17471  012AF4  0100               	movlb	0	; () banked
 17472  012AF6  6FC1               	movwf	___lldiv@counter& (0+255),b
 17473  012AF8  D008               	goto	l2621
 17474  012AFA                     
 17475                           ; BSR set to: 0
 17476                           
 17477                           ; BSR set to: 0
 17478  012AFA  0100               	movlb	0	; () banked
 17479  012AFC  90D8               	bcf	status,0,c
 17480  012AFE  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
 17481  012B00  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 17482  012B02  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 17483  012B04  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 17484  012B06  0100               	movlb	0	; () banked
 17485  012B08  2BC1               	incf	___lldiv@counter& (0+255),f,b
 17486  012B0A                     l2621:
 17487                           
 17488                           ; BSR set to: 0
 17489                           
 17490                           ; BSR set to: 0
 17491  012B0A  0100               	movlb	0	; () banked
 17492  012B0C  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 17493  012B0E  D7F5               	goto	l2622
 17494  012B10                     u6980:
 17495                           
 17496                           ; BSR set to: 0
 17497                           
 17498                           ; BSR set to: 0
 17499                           
 17500                           ; BSR set to: 0
 17501  012B10  0100               	movlb	0	; () banked
 17502  012B12  90D8               	bcf	status,0,c
 17503  012B14  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
 17504  012B16  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 17505  012B18  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 17506  012B1A  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 17507                           
 17508                           ; BSR set to: 0
 17509  012B1C  0100               	movlb	0	; () banked
 17510  012B1E  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17511  012B20  0100               	movlb	0	; () banked
 17512  012B22  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
 17513  012B24  0100               	movlb	0	; () banked
 17514  012B26  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17515  012B28  0100               	movlb	0	; () banked
 17516  012B2A  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 17517  012B2C  0100               	movlb	0	; () banked
 17518  012B2E  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17519  012B30  0100               	movlb	0	; () banked
 17520  012B32  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 17521  012B34  0100               	movlb	0	; () banked
 17522  012B36  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17523  012B38  0100               	movlb	0	; () banked
 17524  012B3A  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 17525  012B3C  A0D8               	btfss	status,0,c
 17526  012B3E  D012               	goto	l2625
 17527                           
 17528                           ; BSR set to: 0
 17529  012B40  0100               	movlb	0	; () banked
 17530  012B42  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17531  012B44  0100               	movlb	0	; () banked
 17532  012B46  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
 17533  012B48  0100               	movlb	0	; () banked
 17534  012B4A  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17535  012B4C  0100               	movlb	0	; () banked
 17536  012B4E  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 17537  012B50  0100               	movlb	0	; () banked
 17538  012B52  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17539  012B54  0100               	movlb	0	; () banked
 17540  012B56  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 17541  012B58  0100               	movlb	0	; () banked
 17542  012B5A  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17543  012B5C  0100               	movlb	0	; () banked
 17544  012B5E  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 17545                           
 17546                           ; BSR set to: 0
 17547  012B60  0100               	movlb	0	; () banked
 17548  012B62  81BD               	bsf	___lldiv@quotient& (0+255),0,b
 17549  012B64                     l2625:
 17550                           
 17551                           ; BSR set to: 0
 17552                           
 17553                           ; BSR set to: 0
 17554  012B64  0100               	movlb	0	; () banked
 17555  012B66  90D8               	bcf	status,0,c
 17556  012B68  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 17557  012B6A  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 17558  012B6C  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 17559  012B6E  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
 17560                           
 17561                           ; BSR set to: 0
 17562  012B70  0100               	movlb	0	; () banked
 17563  012B72  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
 17564  012B74  D7CD               	goto	u6980
 17565  012B76                     l2626:
 17566                           
 17567                           ; BSR set to: 0
 17568                           
 17569                           ; BSR set to: 0
 17570  012B76  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
 17571  012B7A  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
 17572  012B7E  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
 17573  012B82  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
 17574                           
 17575                           ; BSR set to: 0
 17576  012B86  0012               	return		;funcret
 17577  012B88                     __end_of___lldiv:
 17578                           	opt stack 0
 17579                           tosu	equ	0xFFF
 17580                           tosh	equ	0xFFE
 17581                           tosl	equ	0xFFD
 17582                           pclath	equ	0xFFA
 17583                           tblptru	equ	0xFF8
 17584                           tblptrh	equ	0xFF7
 17585                           tblptrl	equ	0xFF6
 17586                           tablat	equ	0xFF5
 17587                           prodh	equ	0xFF4
 17588                           prodl	equ	0xFF3
 17589                           intcon	equ	0xFF2
 17590                           postinc0	equ	0xFEE
 17591                           wreg	equ	0xFE8
 17592                           indf1	equ	0xFE7
 17593                           postdec1	equ	0xFE5
 17594                           fsr1h	equ	0xFE2
 17595                           fsr1l	equ	0xFE1
 17596                           indf2	equ	0xFDF
 17597                           postinc2	equ	0xFDE
 17598                           postdec2	equ	0xFDD
 17599                           plusw2	equ	0xFDB
 17600                           fsr2h	equ	0xFDA
 17601                           fsr2l	equ	0xFD9
 17602                           status	equ	0xFD8
 17603                           
 17604 ;; *************** function _Timer2_Clear *****************
 17605 ;; Defined at:
 17606 ;;		line 3 in file "Library/Timer2.c"
 17607 ;; Parameters:    Size  Location     Type
 17608 ;;		None
 17609 ;; Auto vars:     Size  Location     Type
 17610 ;;		None
 17611 ;; Return value:  Size  Location     Type
 17612 ;;                  1    wreg      void 
 17613 ;; Registers used:
 17614 ;;		None
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;Total ram usage:        0 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    7
 17627 ;; This function calls:
 17628 ;;		Nothing
 17629 ;; This function is called by:
 17630 ;;		_Timer2_Init
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           	psect	text93
 17635  0149CE                     __ptext93:
 17636                           	opt stack 0
 17637  0149CE                     _Timer2_Clear:
 17638                           	opt stack 19
 17639                           
 17640                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;incstack = 0
 17644  0149CE  929E               	bcf	3998,1,c	;volatile
 17645                           
 17646                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 17647  0149D0  929D               	bcf	3997,1,c	;volatile
 17648                           
 17649                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 17650  0149D2  929F               	bcf	3999,1,c	;volatile
 17651  0149D4  0012               	return		;funcret
 17652  0149D6                     __end_of_Timer2_Clear:
 17653                           	opt stack 0
 17654                           tosu	equ	0xFFF
 17655                           tosh	equ	0xFFE
 17656                           tosl	equ	0xFFD
 17657                           pclath	equ	0xFFA
 17658                           tblptru	equ	0xFF8
 17659                           tblptrh	equ	0xFF7
 17660                           tblptrl	equ	0xFF6
 17661                           tablat	equ	0xFF5
 17662                           prodh	equ	0xFF4
 17663                           prodl	equ	0xFF3
 17664                           intcon	equ	0xFF2
 17665                           postinc0	equ	0xFEE
 17666                           wreg	equ	0xFE8
 17667                           indf1	equ	0xFE7
 17668                           postdec1	equ	0xFE5
 17669                           fsr1h	equ	0xFE2
 17670                           fsr1l	equ	0xFE1
 17671                           indf2	equ	0xFDF
 17672                           postinc2	equ	0xFDE
 17673                           postdec2	equ	0xFDD
 17674                           plusw2	equ	0xFDB
 17675                           fsr2h	equ	0xFDA
 17676                           fsr2l	equ	0xFD9
 17677                           status	equ	0xFD8
 17678                           
 17679 ;; *************** function _SPI_DisableISR *****************
 17680 ;; Defined at:
 17681 ;;		line 181 in file "Library/SPI.c"
 17682 ;; Parameters:    Size  Location     Type
 17683 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17684 ;;		 -> SPI1(11), SPI2(11), 
 17685 ;; Auto vars:     Size  Location     Type
 17686 ;;		None
 17687 ;; Return value:  Size  Location     Type
 17688 ;;                  1    wreg      void 
 17689 ;; Registers used:
 17690 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17691 ;; Tracked objects:
 17692 ;;		On entry : 0/0
 17693 ;;		On exit  : 0/0
 17694 ;;		Unchanged: 0/0
 17695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17696 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17700 ;;Total ram usage:        2 bytes
 17701 ;; Hardware stack levels used:    1
 17702 ;; Hardware stack levels required when called:    7
 17703 ;; This function calls:
 17704 ;;		Nothing
 17705 ;; This function is called by:
 17706 ;;		_SPI_Init
 17707 ;; This function uses a non-reentrant model
 17708 ;;
 17709                           
 17710                           	psect	text94
 17711  01463C                     __ptext94:
 17712                           	opt stack 0
 17713  01463C                     _SPI_DisableISR:
 17714                           	opt stack 20
 17715                           
 17716                           ;SPI.c: 183: switch (pInput->mChannel)
 17717                           
 17718                           ;incstack = 0
 17719  01463C  D004               	goto	l654
 17720  01463E                     l655:
 17721                           
 17722                           ; BSR set to: 0
 17723  01463E  969D               	bcf	3997,3,c	;volatile
 17724  014640  0012               	return	
 17725  014642                     l657:
 17726                           
 17727                           ; BSR set to: 0
 17728  014642  9EA3               	bcf	4003,7,c	;volatile
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;SPI.c: 188: };
 17732                           
 17733                           ; BSR set to: 0
 17734                           
 17735                           ;SPI.c: 187: default: return;
 17736  014644  0012               	return	
 17737  014646                     l654:
 17738                           
 17739                           ; BSR set to: 0
 17740  014646  0100               	movlb	0	; () banked
 17741  014648  EE20 F002          	lfsr	2,2
 17742  01464C  51B5               	movf	SPI_DisableISR@pInput& (0+255),w,b
 17743  01464E  26D9               	addwf	fsr2l,f,c
 17744  014650  51B6               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 17745  014652  22DA               	addwfc	fsr2h,f,c
 17746  014654  50DF               	movf	indf2,w,c
 17747                           
 17748                           ; Switch size 1, requested type "space"
 17749                           ; Number of cases is 2, Range of values is 0 to 1
 17750                           ; switch strategies available:
 17751                           ; Name         Instructions Cycles
 17752                           ; simple_byte            7     4 (average)
 17753                           ;	Chosen strategy is simple_byte
 17754  014656  0A00               	xorlw	0	; case 0
 17755  014658  B4D8               	btfsc	status,2,c
 17756  01465A  D7F1               	goto	l655
 17757  01465C  0A01               	xorlw	1	; case 1
 17758  01465E  A4D8               	btfss	status,2,c
 17759  014660  0012               	return	
 17760  014662  D7EF               	goto	l657
 17761  014664                     __end_of_SPI_DisableISR:
 17762                           	opt stack 0
 17763                           tosu	equ	0xFFF
 17764                           tosh	equ	0xFFE
 17765                           tosl	equ	0xFFD
 17766                           pclath	equ	0xFFA
 17767                           tblptru	equ	0xFF8
 17768                           tblptrh	equ	0xFF7
 17769                           tblptrl	equ	0xFF6
 17770                           tablat	equ	0xFF5
 17771                           prodh	equ	0xFF4
 17772                           prodl	equ	0xFF3
 17773                           intcon	equ	0xFF2
 17774                           postinc0	equ	0xFEE
 17775                           wreg	equ	0xFE8
 17776                           indf1	equ	0xFE7
 17777                           postdec1	equ	0xFE5
 17778                           fsr1h	equ	0xFE2
 17779                           fsr1l	equ	0xFE1
 17780                           indf2	equ	0xFDF
 17781                           postinc2	equ	0xFDE
 17782                           postdec2	equ	0xFDD
 17783                           plusw2	equ	0xFDB
 17784                           fsr2h	equ	0xFDA
 17785                           fsr2l	equ	0xFD9
 17786                           status	equ	0xFD8
 17787                           
 17788 ;; *************** function _SPI_DCS *****************
 17789 ;; Defined at:
 17790 ;;		line 219 in file "Library/SPI.c"
 17791 ;; Parameters:    Size  Location     Type
 17792 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17793 ;;		 -> SPI1(11), SPI2(11), 
 17794 ;; Auto vars:     Size  Location     Type
 17795 ;;		None
 17796 ;; Return value:  Size  Location     Type
 17797 ;;                  1    wreg      void 
 17798 ;; Registers used:
 17799 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17800 ;; Tracked objects:
 17801 ;;		On entry : 0/0
 17802 ;;		On exit  : 0/0
 17803 ;;		Unchanged: 0/0
 17804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17809 ;;Total ram usage:        2 bytes
 17810 ;; Hardware stack levels used:    1
 17811 ;; Hardware stack levels required when called:    7
 17812 ;; This function calls:
 17813 ;;		Nothing
 17814 ;; This function is called by:
 17815 ;;		_SPI_Init
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           	psect	text95
 17820  014556                     __ptext95:
 17821                           	opt stack 0
 17822  014556                     _SPI_DCS:
 17823                           	opt stack 20
 17824                           
 17825                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 17826                           
 17827                           ; BSR set to: 0
 17828                           ;incstack = 0
 17829  014556  0100               	movlb	0	; () banked
 17830  014558  EE20 F002          	lfsr	2,2
 17831  01455C  51B5               	movf	SPI_DCS@pInput& (0+255),w,b
 17832  01455E  26D9               	addwf	fsr2l,f,c
 17833  014560  51B6               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 17834  014562  22DA               	addwfc	fsr2h,f,c
 17835  014564  50DF               	movf	indf2,w,c
 17836  014566  A4D8               	btfss	status,2,c
 17837  014568  D007               	goto	l673
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 17841  01456A  C0A7  FFD9         	movff	_PortC+4,fsr2l
 17842  01456E  C0A8  FFDA         	movff	_PortC+5,fsr2h
 17843  014572  0100               	movlb	0	; () banked
 17844  014574  84DF               	bsf	indf2,2,c
 17845  014576  0012               	return	
 17846  014578                     l673:
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;SPI.c: 223: else
 17850                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 17851                           
 17852                           ; BSR set to: 0
 17853  014578  C09D  FFD9         	movff	_PortD+4,fsr2l
 17854  01457C  C09E  FFDA         	movff	_PortD+5,fsr2h
 17855  014580  0100               	movlb	0	; () banked
 17856  014582  8EDF               	bsf	indf2,7,c
 17857  014584  0012               	return	
 17858  014586                     __end_of_SPI_DCS:
 17859                           	opt stack 0
 17860                           tosu	equ	0xFFF
 17861                           tosh	equ	0xFFE
 17862                           tosl	equ	0xFFD
 17863                           pclath	equ	0xFFA
 17864                           tblptru	equ	0xFF8
 17865                           tblptrh	equ	0xFF7
 17866                           tblptrl	equ	0xFF6
 17867                           tablat	equ	0xFF5
 17868                           prodh	equ	0xFF4
 17869                           prodl	equ	0xFF3
 17870                           intcon	equ	0xFF2
 17871                           postinc0	equ	0xFEE
 17872                           wreg	equ	0xFE8
 17873                           indf1	equ	0xFE7
 17874                           postdec1	equ	0xFE5
 17875                           fsr1h	equ	0xFE2
 17876                           fsr1l	equ	0xFE1
 17877                           indf2	equ	0xFDF
 17878                           postinc2	equ	0xFDE
 17879                           postdec2	equ	0xFDD
 17880                           plusw2	equ	0xFDB
 17881                           fsr2h	equ	0xFDA
 17882                           fsr2l	equ	0xFD9
 17883                           status	equ	0xFD8
 17884                           
 17885 ;; *************** function _Button_Init *****************
 17886 ;; Defined at:
 17887 ;;		line 18 in file "Library/Button.c"
 17888 ;; Parameters:    Size  Location     Type
 17889 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 17890 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17891 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 17892 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 17893 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17894 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 17895 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17896 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17897 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 17898 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 17899 ;; Auto vars:     Size  Location     Type
 17900 ;;		None
 17901 ;; Return value:  Size  Location     Type
 17902 ;;                  1    wreg      void 
 17903 ;; Registers used:
 17904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17905 ;; Tracked objects:
 17906 ;;		On entry : 0/0
 17907 ;;		On exit  : 0/0
 17908 ;;		Unchanged: 0/0
 17909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17910 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17913 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17914 ;;Total ram usage:       13 bytes
 17915 ;; Hardware stack levels used:    1
 17916 ;; Hardware stack levels required when called:   15
 17917 ;; This function calls:
 17918 ;;		_HMI_InitButtons
 17919 ;;		_MXK_InitDIPSwitch
 17920 ;;		_MXK_InitTestButton
 17921 ;; This function is called by:
 17922 ;;		_HMI_Init
 17923 ;;		_FunctInitButton
 17924 ;; This function uses a non-reentrant model
 17925 ;;
 17926                           
 17927                           	psect	text96
 17928  0126E4                     __ptext96:
 17929                           	opt stack 0
 17930  0126E4                     _Button_Init:
 17931                           	opt stack 14
 17932                           
 17933                           ;Button.c: 21: if(pInput==(void*)0)
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;incstack = 0
 17937  0126E4  0101               	movlb	1	; () banked
 17938  0126E6  5100               	movf	Button_Init@pInput& (0+255),w,b
 17939  0126E8  0101               	movlb	1	; () banked
 17940  0126EA  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17941  0126EC  B4D8               	btfsc	status,2,c
 17942  0126EE  0012               	return	
 17943                           
 17944                           ; BSR set to: 1
 17945                           ;Button.c: 23: if(pInitIO==(void*)0)
 17946                           
 17947                           ; BSR set to: 1
 17948                           
 17949                           ; BSR set to: 1
 17950                           ;Button.c: 22: return;
 17951  0126F0  0101               	movlb	1	; () banked
 17952  0126F2  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 17953  0126F4  0101               	movlb	1	; () banked
 17954  0126F6  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17955  0126F8  0101               	movlb	1	; () banked
 17956  0126FA  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17957  0126FC  B4D8               	btfsc	status,2,c
 17958  0126FE  0012               	return	
 17959                           
 17960                           ; BSR set to: 1
 17961                           ;Button.c: 25: if(pGetState==(void*)0)
 17962                           
 17963                           ; BSR set to: 1
 17964                           
 17965                           ; BSR set to: 1
 17966                           ;Button.c: 24: return;
 17967  012700  0101               	movlb	1	; () banked
 17968  012702  5107               	movf	Button_Init@pGetState& (0+255),w,b
 17969  012704  0101               	movlb	1	; () banked
 17970  012706  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 17971  012708  0101               	movlb	1	; () banked
 17972  01270A  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 17973  01270C  B4D8               	btfsc	status,2,c
 17974  01270E  0012               	return	
 17975                           
 17976                           ; BSR set to: 1
 17977                           ;Button.c: 27: if(pFunction==(void*)0)
 17978                           
 17979                           ; BSR set to: 1
 17980                           
 17981                           ; BSR set to: 1
 17982                           ;Button.c: 26: return;
 17983  012710  0101               	movlb	1	; () banked
 17984  012712  510A               	movf	Button_Init@pFunction& (0+255),w,b
 17985  012714  0101               	movlb	1	; () banked
 17986  012716  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 17987  012718  0101               	movlb	1	; () banked
 17988  01271A  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 17989  01271C  B4D8               	btfsc	status,2,c
 17990  01271E  0012               	return	
 17991                           
 17992                           ; BSR set to: 1
 17993                           ;Button.c: 30: if(pThreshold == 0)
 17994                           
 17995                           ; BSR set to: 1
 17996                           
 17997                           ; BSR set to: 1
 17998                           ;Button.c: 28: return;
 17999  012720  0101               	movlb	1	; () banked
 18000  012722  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 18001  012724  0101               	movlb	1	; () banked
 18002  012726  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 18003  012728  A4D8               	btfss	status,2,c
 18004  01272A  D005               	goto	l8
 18005                           
 18006                           ; BSR set to: 1
 18007                           ;Button.c: 31: pThreshold = 1;
 18008  01272C  0E00               	movlw	0
 18009  01272E  0101               	movlb	1	; () banked
 18010  012730  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18011  012732  0E01               	movlw	1
 18012  012734  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18013  012736                     l8:
 18014                           
 18015                           ; BSR set to: 1
 18016                           ;Button.c: 34: pInput->mState = 0;
 18017                           
 18018                           ; BSR set to: 1
 18019  012736  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 18020  01273A  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 18021  01273E  0E00               	movlw	0
 18022  012740  6EDF               	movwf	indf2,c
 18023                           
 18024                           ; BSR set to: 1
 18025                           ;Button.c: 35: pInput->mCount = 0;
 18026  012742  0101               	movlb	1	; () banked
 18027  012744  EE20 F001          	lfsr	2,1
 18028  012748  5100               	movf	Button_Init@pInput& (0+255),w,b
 18029  01274A  26D9               	addwf	fsr2l,f,c
 18030  01274C  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18031  01274E  22DA               	addwfc	fsr2h,f,c
 18032  012750  0E00               	movlw	0
 18033  012752  6EDF               	movwf	indf2,c
 18034                           
 18035                           ; BSR set to: 1
 18036                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 18037  012754  0101               	movlb	1	; () banked
 18038  012756  EE20 F002          	lfsr	2,2
 18039  01275A  5100               	movf	Button_Init@pInput& (0+255),w,b
 18040  01275C  26D9               	addwf	fsr2l,f,c
 18041  01275E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18042  012760  22DA               	addwfc	fsr2h,f,c
 18043  012762  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 18044  012766  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 18045                           
 18046                           ; BSR set to: 1
 18047                           ;Button.c: 37: pInput->mFunction = pFunction;
 18048  01276A  0101               	movlb	1	; () banked
 18049  01276C  EE20 F004          	lfsr	2,4
 18050  012770  5100               	movf	Button_Init@pInput& (0+255),w,b
 18051  012772  26D9               	addwf	fsr2l,f,c
 18052  012774  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18053  012776  22DA               	addwfc	fsr2h,f,c
 18054  012778  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 18055  01277C  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 18056  012780  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 18057                           
 18058                           ; BSR set to: 1
 18059                           ;Button.c: 38: pInput->mGetState = pGetState;
 18060  012784  0101               	movlb	1	; () banked
 18061  012786  EE20 F007          	lfsr	2,7
 18062  01278A  5100               	movf	Button_Init@pInput& (0+255),w,b
 18063  01278C  26D9               	addwf	fsr2l,f,c
 18064  01278E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18065  012790  22DA               	addwfc	fsr2h,f,c
 18066  012792  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 18067  012796  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 18068  01279A  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 18069                           
 18070                           ; BSR set to: 1
 18071                           ;Button.c: 41: pInitIO();
 18072  01279E  D801               	call	u7598
 18073  0127A0  0012               	return	
 18074  0127A2                     u7598:
 18075  0127A2  0005               	push	
 18076  0127A4  6EFA               	movwf	pclath,c
 18077  0127A6  0101               	movlb	1	; () banked
 18078  0127A8  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 18079  0127AA  6EFD               	movwf	tosl,c
 18080  0127AC  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 18081  0127AE  6EFE               	movwf	tosh,c
 18082  0127B0  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 18083  0127B2  6EFF               	movwf	tosu,c
 18084  0127B4  50FA               	movf	pclath,w,c
 18085  0127B6  0012               	return		;indir
 18086  0127B8                     __end_of_Button_Init:
 18087                           	opt stack 0
 18088                           tosu	equ	0xFFF
 18089                           tosh	equ	0xFFE
 18090                           tosl	equ	0xFFD
 18091                           pclath	equ	0xFFA
 18092                           tblptru	equ	0xFF8
 18093                           tblptrh	equ	0xFF7
 18094                           tblptrl	equ	0xFF6
 18095                           tablat	equ	0xFF5
 18096                           prodh	equ	0xFF4
 18097                           prodl	equ	0xFF3
 18098                           intcon	equ	0xFF2
 18099                           postinc0	equ	0xFEE
 18100                           wreg	equ	0xFE8
 18101                           indf1	equ	0xFE7
 18102                           postdec1	equ	0xFE5
 18103                           fsr1h	equ	0xFE2
 18104                           fsr1l	equ	0xFE1
 18105                           indf2	equ	0xFDF
 18106                           postinc2	equ	0xFDE
 18107                           postdec2	equ	0xFDD
 18108                           plusw2	equ	0xFDB
 18109                           fsr2h	equ	0xFDA
 18110                           fsr2l	equ	0xFD9
 18111                           status	equ	0xFD8
 18112                           
 18113 ;; *************** function _MXK_InitDIPSwitch *****************
 18114 ;; Defined at:
 18115 ;;		line 20 in file "Library/MXK.c"
 18116 ;; Parameters:    Size  Location     Type
 18117 ;;		None
 18118 ;; Auto vars:     Size  Location     Type
 18119 ;;		None
 18120 ;; Return value:  Size  Location     Type
 18121 ;;                  1    wreg      void 
 18122 ;; Registers used:
 18123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18124 ;; Tracked objects:
 18125 ;;		On entry : 0/0
 18126 ;;		On exit  : 0/0
 18127 ;;		Unchanged: 0/0
 18128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;Total ram usage:        0 bytes
 18134 ;; Hardware stack levels used:    1
 18135 ;; Hardware stack levels required when called:   14
 18136 ;; This function calls:
 18137 ;;		_Port_SetQuadType
 18138 ;; This function is called by:
 18139 ;;		_FunctInitButton
 18140 ;;		_Button_Init
 18141 ;; This function uses a non-reentrant model
 18142 ;;
 18143                           
 18144                           	psect	text97
 18145  014762                     __ptext97:
 18146                           	opt stack 0
 18147  014762                     _MXK_InitDIPSwitch:
 18148                           	opt stack 14
 18149                           
 18150                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 18151                           
 18152                           ;incstack = 0
 18153  014762  0E99               	movlw	low _PortD
 18154  014764  0100               	movlb	0	; () banked
 18155  014766  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
 18156  014768  0E00               	movlw	high _PortD
 18157  01476A  0100               	movlb	0	; () banked
 18158  01476C  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 18159  01476E  0E00               	movlw	0
 18160  014770  0100               	movlb	0	; () banked
 18161  014772  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
 18162  014774  0E00               	movlw	0
 18163  014776  0100               	movlb	0	; () banked
 18164  014778  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
 18165  01477A  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 18166  01477E  0012               	return		;funcret
 18167  014780                     __end_of_MXK_InitDIPSwitch:
 18168                           	opt stack 0
 18169                           tosu	equ	0xFFF
 18170                           tosh	equ	0xFFE
 18171                           tosl	equ	0xFFD
 18172                           pclath	equ	0xFFA
 18173                           tblptru	equ	0xFF8
 18174                           tblptrh	equ	0xFF7
 18175                           tblptrl	equ	0xFF6
 18176                           tablat	equ	0xFF5
 18177                           prodh	equ	0xFF4
 18178                           prodl	equ	0xFF3
 18179                           intcon	equ	0xFF2
 18180                           postinc0	equ	0xFEE
 18181                           wreg	equ	0xFE8
 18182                           indf1	equ	0xFE7
 18183                           postdec1	equ	0xFE5
 18184                           fsr1h	equ	0xFE2
 18185                           fsr1l	equ	0xFE1
 18186                           indf2	equ	0xFDF
 18187                           postinc2	equ	0xFDE
 18188                           postdec2	equ	0xFDD
 18189                           plusw2	equ	0xFDB
 18190                           fsr2h	equ	0xFDA
 18191                           fsr2l	equ	0xFD9
 18192                           status	equ	0xFD8
 18193                           
 18194 ;; *************** function _HMI_InitButtons *****************
 18195 ;; Defined at:
 18196 ;;		line 21 in file "HMI.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;		None
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;		None
 18201 ;; Return value:  Size  Location     Type
 18202 ;;                  1    wreg      void 
 18203 ;; Registers used:
 18204 ;;		wreg, status,2
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18214 ;;Total ram usage:        0 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    7
 18217 ;; This function calls:
 18218 ;;		Nothing
 18219 ;; This function is called by:
 18220 ;;		_HMI_Init
 18221 ;;		_Button_Init
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           	psect	text98
 18226  0149EA                     __ptext98:
 18227                           	opt stack 0
 18228  0149EA                     _HMI_InitButtons:
 18229                           	opt stack 21
 18230                           
 18231                           ;HMI.c: 23: TRISE = 0xFC;
 18232                           
 18233                           ;incstack = 0
 18234  0149EA  0EFC               	movlw	252
 18235  0149EC  6E96               	movwf	3990,c	;volatile
 18236  0149EE  0012               	return		;funcret
 18237  0149F0                     __end_of_HMI_InitButtons:
 18238                           	opt stack 0
 18239                           tosu	equ	0xFFF
 18240                           tosh	equ	0xFFE
 18241                           tosl	equ	0xFFD
 18242                           pclath	equ	0xFFA
 18243                           tblptru	equ	0xFF8
 18244                           tblptrh	equ	0xFF7
 18245                           tblptrl	equ	0xFF6
 18246                           tablat	equ	0xFF5
 18247                           prodh	equ	0xFF4
 18248                           prodl	equ	0xFF3
 18249                           intcon	equ	0xFF2
 18250                           postinc0	equ	0xFEE
 18251                           wreg	equ	0xFE8
 18252                           indf1	equ	0xFE7
 18253                           postdec1	equ	0xFE5
 18254                           fsr1h	equ	0xFE2
 18255                           fsr1l	equ	0xFE1
 18256                           indf2	equ	0xFDF
 18257                           postinc2	equ	0xFDE
 18258                           postdec2	equ	0xFDD
 18259                           plusw2	equ	0xFDB
 18260                           fsr2h	equ	0xFDA
 18261                           fsr2l	equ	0xFD9
 18262                           status	equ	0xFD8
 18263                           
 18264 ;; *************** function _MXK_InitTestButton *****************
 18265 ;; Defined at:
 18266 ;;		line 10 in file "Library/MXK.c"
 18267 ;; Parameters:    Size  Location     Type
 18268 ;;		None
 18269 ;; Auto vars:     Size  Location     Type
 18270 ;;		None
 18271 ;; Return value:  Size  Location     Type
 18272 ;;                  1    wreg      void 
 18273 ;; Registers used:
 18274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18275 ;; Tracked objects:
 18276 ;;		On entry : 0/0
 18277 ;;		On exit  : 0/0
 18278 ;;		Unchanged: 0/0
 18279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18284 ;;Total ram usage:        0 bytes
 18285 ;; Hardware stack levels used:    1
 18286 ;; Hardware stack levels required when called:   12
 18287 ;; This function calls:
 18288 ;;		_Port_SetPinType
 18289 ;; This function is called by:
 18290 ;;		_FunctInitButton
 18291 ;;		_Button_Init
 18292 ;; This function uses a non-reentrant model
 18293 ;;
 18294                           
 18295                           	psect	text99
 18296  014780                     __ptext99:
 18297                           	opt stack 0
 18298  014780                     _MXK_InitTestButton:
 18299                           	opt stack 16
 18300                           
 18301                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 18302                           
 18303                           ;incstack = 0
 18304  014780  0E9C               	movlw	low _PortB
 18305  014782  0100               	movlb	0	; () banked
 18306  014784  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 18307  014786  0E03               	movlw	high _PortB
 18308  014788  0100               	movlb	0	; () banked
 18309  01478A  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18310  01478C  0E04               	movlw	4
 18311  01478E  0100               	movlb	0	; () banked
 18312  014790  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 18313  014792  0E00               	movlw	0
 18314  014794  0100               	movlb	0	; () banked
 18315  014796  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 18316  014798  EC64  F08B         	call	_Port_SetPinType	;wreg free
 18317  01479C  0012               	return		;funcret
 18318  01479E                     __end_of_MXK_InitTestButton:
 18319                           	opt stack 0
 18320                           tosu	equ	0xFFF
 18321                           tosh	equ	0xFFE
 18322                           tosl	equ	0xFFD
 18323                           pclath	equ	0xFFA
 18324                           tblptru	equ	0xFF8
 18325                           tblptrh	equ	0xFF7
 18326                           tblptrl	equ	0xFF6
 18327                           tablat	equ	0xFF5
 18328                           prodh	equ	0xFF4
 18329                           prodl	equ	0xFF3
 18330                           intcon	equ	0xFF2
 18331                           postinc0	equ	0xFEE
 18332                           wreg	equ	0xFE8
 18333                           indf1	equ	0xFE7
 18334                           postdec1	equ	0xFE5
 18335                           fsr1h	equ	0xFE2
 18336                           fsr1l	equ	0xFE1
 18337                           indf2	equ	0xFDF
 18338                           postinc2	equ	0xFDE
 18339                           postdec2	equ	0xFDD
 18340                           plusw2	equ	0xFDB
 18341                           fsr2h	equ	0xFDA
 18342                           fsr2l	equ	0xFD9
 18343                           status	equ	0xFD8
 18344                           
 18345 ;; *************** function _Port_SetPinType *****************
 18346 ;; Defined at:
 18347 ;;		line 189 in file "Library/Port.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18350 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18351 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18352 ;;  pPin            1   40[BANK0 ] enum E6750
 18353 ;;  pType           1   41[BANK0 ] enum E6795
 18354 ;; Auto vars:     Size  Location     Type
 18355 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 18356 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 18357 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 18358 ;;  Output          1   42[BANK0 ] enum E6475
 18359 ;; Return value:  Size  Location     Type
 18360 ;;                  1    wreg      enum E6475
 18361 ;; Registers used:
 18362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18363 ;; Tracked objects:
 18364 ;;		On entry : 0/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18368 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18369 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18372 ;;Total ram usage:        7 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:   11
 18375 ;; This function calls:
 18376 ;;		_Byte_SetBit
 18377 ;;		_PortProperty_Valid
 18378 ;;		_Word_SetPair
 18379 ;; This function is called by:
 18380 ;;		_Configure_GPIOs
 18381 ;;		_LED_Init
 18382 ;;		_Port_Init
 18383 ;;		_SPI_Init
 18384 ;;		_MXK_InitTestButton
 18385 ;;		_MXK_Init
 18386 ;;		_I2C_Init
 18387 ;;		_Motor_Init
 18388 ;; This function uses a non-reentrant model
 18389 ;;
 18390                           
 18391                           	psect	text100
 18392  0116C8                     __ptext100:
 18393                           	opt stack 0
 18394  0116C8                     _Port_SetPinType:
 18395                           	opt stack 18
 18396                           
 18397                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 18398                           
 18399                           ;incstack = 0
 18400  0116C8  C0DB  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 18401  0116CC  C0DC  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 18402  0116D0  CFDE F0E0          	movff	postinc2,Port_SetPinType@Props
 18403  0116D4  CFDD F0E1          	movff	postdec2,Port_SetPinType@Props+1
 18404                           
 18405                           ;Port.c: 192: ePinError Output = ePinErrorState;
 18406  0116D8  0E05               	movlw	5
 18407  0116DA  0100               	movlb	0	; () banked
 18408  0116DC  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18409                           
 18410                           ;Port.c: 193: switch (pType)
 18411  0116DE  D0B5               	goto	l412
 18412  0116E0                     
 18413                           ; BSR set to: 0
 18414                           ;Port.c: 197: {
 18415                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18416                           
 18417                           ; BSR set to: 0
 18418  0116E0  0100               	movlb	0	; () banked
 18419  0116E2  EE20 F002          	lfsr	2,2
 18420  0116E6  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18421  0116E8  26D9               	addwf	fsr2l,f,c
 18422  0116EA  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18423  0116EC  22DA               	addwfc	fsr2h,f,c
 18424  0116EE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18425  0116F2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18426  0116F6  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18427  0116FA  0E01               	movlw	1
 18428  0116FC  0100               	movlb	0	; () banked
 18429  0116FE  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18430  011700  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18431                           
 18432                           ;Port.c: 203: break;
 18433  011704  D0B0               	goto	l414
 18434  011706                     
 18435                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 18436  011706  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18437  01170A  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18438  01170E  0E01               	movlw	1
 18439  011710  0100               	movlb	0	; () banked
 18440  011712  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18441  011714  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18442  011718  EC26  F09B         	call	_PortProperty_Valid	;wreg free
 18443  01171C  0100               	movlb	0	; () banked
 18444  01171E  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18445  011720  0100               	movlb	0	; () banked
 18446  011722  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18447  011724  A4D8               	btfss	status,2,c
 18448  011726  0012               	return	
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;Port.c: 208: {
 18452                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18453  011728  0100               	movlb	0	; () banked
 18454  01172A  EE20 F002          	lfsr	2,2
 18455  01172E  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18456  011730  26D9               	addwf	fsr2l,f,c
 18457  011732  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18458  011734  22DA               	addwfc	fsr2h,f,c
 18459  011736  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18460  01173A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18461  01173E  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18462  011742  0E00               	movlw	0
 18463  011744  0100               	movlb	0	; () banked
 18464  011746  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18465  011748  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18466                           
 18467                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18468  01174C  0100               	movlb	0	; () banked
 18469  01174E  EE20 F004          	lfsr	2,4
 18470  011752  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18471  011754  26D9               	addwf	fsr2l,f,c
 18472  011756  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18473  011758  22DA               	addwfc	fsr2h,f,c
 18474  01175A  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18475  01175E  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18476  011762  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18477  011766  0E00               	movlw	0
 18478  011768  0100               	movlb	0	; () banked
 18479  01176A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18480  01176C  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18481                           
 18482                           ;Port.c: 214: break;
 18483  011770  D07A               	goto	l414
 18484  011772                     
 18485                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 18486                           
 18487                           ;Port.c: 218: case eTypeOutputOpenSource:
 18488  011772  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18489  011776  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18490  01177A  0E02               	movlw	2
 18491  01177C  0100               	movlb	0	; () banked
 18492  01177E  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18493  011780  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18494  011784  EC26  F09B         	call	_PortProperty_Valid	;wreg free
 18495  011788  0100               	movlb	0	; () banked
 18496  01178A  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18497  01178C  0100               	movlb	0	; () banked
 18498  01178E  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18499  011790  A4D8               	btfss	status,2,c
 18500  011792  0012               	return	
 18501                           
 18502                           ; BSR set to: 0
 18503                           ;Port.c: 220: {
 18504                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18505  011794  0100               	movlb	0	; () banked
 18506  011796  EE20 F002          	lfsr	2,2
 18507  01179A  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18508  01179C  26D9               	addwf	fsr2l,f,c
 18509  01179E  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18510  0117A0  22DA               	addwfc	fsr2h,f,c
 18511  0117A2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18512  0117A6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18513  0117AA  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18514  0117AE  0E01               	movlw	1
 18515  0117B0  0100               	movlb	0	; () banked
 18516  0117B2  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18517  0117B4  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18518                           
 18519                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 18520  0117B8  0100               	movlb	0	; () banked
 18521  0117BA  EE20 F004          	lfsr	2,4
 18522  0117BE  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18523  0117C0  26D9               	addwf	fsr2l,f,c
 18524  0117C2  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18525  0117C4  22DA               	addwfc	fsr2h,f,c
 18526  0117C6  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18527  0117CA  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18528  0117CE  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18529  0117D2  0E01               	movlw	1
 18530  0117D4  0100               	movlb	0	; () banked
 18531  0117D6  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18532  0117D8  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18533                           
 18534                           ;Port.c: 226: break;
 18535  0117DC  D044               	goto	l414
 18536  0117DE                     
 18537                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 18538                           
 18539                           ;Port.c: 230: case eTypeOutputPushPull:
 18540  0117DE  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18541  0117E2  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18542  0117E6  0E00               	movlw	0
 18543  0117E8  0100               	movlb	0	; () banked
 18544  0117EA  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18545  0117EC  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18546  0117F0  EC26  F09B         	call	_PortProperty_Valid	;wreg free
 18547  0117F4  0100               	movlb	0	; () banked
 18548  0117F6  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18549  0117F8  0100               	movlb	0	; () banked
 18550  0117FA  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18551  0117FC  A4D8               	btfss	status,2,c
 18552  0117FE  0012               	return	
 18553                           
 18554                           ; BSR set to: 0
 18555                           ;Port.c: 232: {
 18556                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18557  011800  0100               	movlb	0	; () banked
 18558  011802  EE20 F002          	lfsr	2,2
 18559  011806  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18560  011808  26D9               	addwf	fsr2l,f,c
 18561  01180A  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18562  01180C  22DA               	addwfc	fsr2h,f,c
 18563  01180E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18564  011812  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18565  011816  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18566  01181A  0E00               	movlw	0
 18567  01181C  0100               	movlb	0	; () banked
 18568  01181E  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18569  011820  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18570                           
 18571                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18572  011824  0100               	movlb	0	; () banked
 18573  011826  EE20 F004          	lfsr	2,4
 18574  01182A  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18575  01182C  26D9               	addwf	fsr2l,f,c
 18576  01182E  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18577  011830  22DA               	addwfc	fsr2h,f,c
 18578  011832  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18579  011836  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18580  01183A  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18581  01183E  0E00               	movlw	0
 18582  011840  0100               	movlb	0	; () banked
 18583  011842  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18584  011844  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18585                           
 18586                           ;Port.c: 239: }
 18587                           
 18588                           ;Port.c: 238: break;
 18589  011848  D00E               	goto	l414
 18590  01184A                     l412:
 18591  01184A  0100               	movlb	0	; () banked
 18592  01184C  51DE               	movf	Port_SetPinType@pType& (0+255),w,b
 18593                           
 18594                           ; Switch size 1, requested type "space"
 18595                           ; Number of cases is 4, Range of values is 0 to 3
 18596                           ; switch strategies available:
 18597                           ; Name         Instructions Cycles
 18598                           ; simple_byte           13     7 (average)
 18599                           ;	Chosen strategy is simple_byte
 18600  01184E  0A00               	xorlw	0	; case 0
 18601  011850  B4D8               	btfsc	status,2,c
 18602  011852  D746               	goto	l413
 18603  011854  0A01               	xorlw	1	; case 1
 18604  011856  B4D8               	btfsc	status,2,c
 18605  011858  D756               	goto	l415
 18606  01185A  0A03               	xorlw	3	; case 2
 18607  01185C  B4D8               	btfsc	status,2,c
 18608  01185E  D789               	goto	l417
 18609  011860  0A01               	xorlw	1	; case 3
 18610  011862  B4D8               	btfsc	status,2,c
 18611  011864  D7BC               	goto	l421
 18612  011866                     l414:
 18613                           
 18614                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 18615                           
 18616                           ; BSR set to: 0
 18617  011866  0E08               	movlw	8
 18618  011868  0100               	movlb	0	; () banked
 18619  01186A  25DB               	addwf	Port_SetPinType@pInput& (0+255),w,b
 18620  01186C  0100               	movlb	0	; () banked
 18621  01186E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 18622  011870  0E00               	movlw	0
 18623  011872  0100               	movlb	0	; () banked
 18624  011874  21DC               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 18625  011876  0100               	movlb	0	; () banked
 18626  011878  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18627  01187A  C0DD  F0C6         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 18628  01187E  C0DE  F0C7         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 18629  011882  EC05  F0A1         	call	_Word_SetPair	;wreg free
 18630  011886  0012               	return	
 18631  011888                     __end_of_Port_SetPinType:
 18632                           	opt stack 0
 18633                           tosu	equ	0xFFF
 18634                           tosh	equ	0xFFE
 18635                           tosl	equ	0xFFD
 18636                           pclath	equ	0xFFA
 18637                           tblptru	equ	0xFF8
 18638                           tblptrh	equ	0xFF7
 18639                           tblptrl	equ	0xFF6
 18640                           tablat	equ	0xFF5
 18641                           prodh	equ	0xFF4
 18642                           prodl	equ	0xFF3
 18643                           intcon	equ	0xFF2
 18644                           postinc0	equ	0xFEE
 18645                           wreg	equ	0xFE8
 18646                           indf1	equ	0xFE7
 18647                           postdec1	equ	0xFE5
 18648                           fsr1h	equ	0xFE2
 18649                           fsr1l	equ	0xFE1
 18650                           indf2	equ	0xFDF
 18651                           postinc2	equ	0xFDE
 18652                           postdec2	equ	0xFDD
 18653                           plusw2	equ	0xFDB
 18654                           fsr2h	equ	0xFDA
 18655                           fsr2l	equ	0xFD9
 18656                           status	equ	0xFD8
 18657                           
 18658 ;; *************** function _Byte_SetBit *****************
 18659 ;; Defined at:
 18660 ;;		line 32 in file "Library/Types.c"
 18661 ;; Parameters:    Size  Location     Type
 18662 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18663 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 18664 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 18665 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18666 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18667 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18668 ;;		 -> NULL(0), 
 18669 ;;  pBit            1    2[BANK0 ] unsigned char 
 18670 ;;  pValue          1    3[BANK0 ] unsigned char 
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;		None
 18673 ;; Return value:  Size  Location     Type
 18674 ;;                  1    wreg      void 
 18675 ;; Registers used:
 18676 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18677 ;; Tracked objects:
 18678 ;;		On entry : 0/0
 18679 ;;		On exit  : 0/0
 18680 ;;		Unchanged: 0/0
 18681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18682 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18684 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18685 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18686 ;;Total ram usage:        7 bytes
 18687 ;; Hardware stack levels used:    1
 18688 ;; Hardware stack levels required when called:    7
 18689 ;; This function calls:
 18690 ;;		Nothing
 18691 ;; This function is called by:
 18692 ;;		_Port_SetPinType
 18693 ;;		_Port_SetPin
 18694 ;;		_SPI_Init
 18695 ;;		_SPI_MinSpeed
 18696 ;;		_SPI_MaxSpeed
 18697 ;;		_Word_SetBit
 18698 ;;		_I2C_Init
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           	psect	text101
 18703  013CD8                     __ptext101:
 18704                           	opt stack 0
 18705  013CD8                     _Byte_SetBit:
 18706                           	opt stack 21
 18707                           
 18708                           ;Types.c: 34: pValue &= 1;
 18709                           
 18710                           ;incstack = 0
 18711  013CD8  0E01               	movlw	1
 18712  013CDA  0100               	movlb	0	; () banked
 18713  013CDC  17B8               	andwf	Byte_SetBit@pValue& (0+255),f,b
 18714                           
 18715                           ; BSR set to: 0
 18716                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 18717  013CDE  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18718  013CE2  0E01               	movlw	1
 18719  013CE4  0100               	movlb	0	; () banked
 18720  013CE6  6FBA               	movwf	(??_Byte_SetBit+1)& (0+255),b
 18721  013CE8  0100               	movlb	0	; () banked
 18722  013CEA  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 18723  013CEC  D003               	goto	u6574
 18724  013CEE                     u6575:
 18725  013CEE  0100               	movlb	0	; () banked
 18726  013CF0  90D8               	bcf	status,0,c
 18727  013CF2  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18728  013CF4                     u6574:
 18729  013CF4  0100               	movlb	0	; () banked
 18730  013CF6  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 18731  013CF8  D7FA               	goto	u6575
 18732  013CFA  0100               	movlb	0	; () banked
 18733  013CFC  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18734  013CFE  0AFF               	xorlw	255
 18735  013D00  0100               	movlb	0	; () banked
 18736  013D02  6FBB               	movwf	(??_Byte_SetBit+2)& (0+255),b
 18737  013D04  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18738  013D08  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18739  013D0C  0100               	movlb	0	; () banked
 18740  013D0E  51BB               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 18741  013D10  16DF               	andwf	indf2,f,c
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 18745  013D12  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18746  013D16  C0B8  F0BA         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 18747  013D1A  0100               	movlb	0	; () banked
 18748  013D1C  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 18749  013D1E  D003               	goto	u6584
 18750  013D20                     u6585:
 18751  013D20  0100               	movlb	0	; () banked
 18752  013D22  90D8               	bcf	status,0,c
 18753  013D24  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18754  013D26                     u6584:
 18755  013D26  0100               	movlb	0	; () banked
 18756  013D28  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 18757  013D2A  D7FA               	goto	u6585
 18758  013D2C  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18759  013D30  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18760  013D34  0100               	movlb	0	; () banked
 18761  013D36  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18762  013D38  12DF               	iorwf	indf2,f,c
 18763                           
 18764                           ; BSR set to: 0
 18765  013D3A  0012               	return		;funcret
 18766  013D3C                     __end_of_Byte_SetBit:
 18767                           	opt stack 0
 18768                           tosu	equ	0xFFF
 18769                           tosh	equ	0xFFE
 18770                           tosl	equ	0xFFD
 18771                           pclath	equ	0xFFA
 18772                           tblptru	equ	0xFF8
 18773                           tblptrh	equ	0xFF7
 18774                           tblptrl	equ	0xFF6
 18775                           tablat	equ	0xFF5
 18776                           prodh	equ	0xFF4
 18777                           prodl	equ	0xFF3
 18778                           intcon	equ	0xFF2
 18779                           postinc0	equ	0xFEE
 18780                           wreg	equ	0xFE8
 18781                           indf1	equ	0xFE7
 18782                           postdec1	equ	0xFE5
 18783                           fsr1h	equ	0xFE2
 18784                           fsr1l	equ	0xFE1
 18785                           indf2	equ	0xFDF
 18786                           postinc2	equ	0xFDE
 18787                           postdec2	equ	0xFDD
 18788                           plusw2	equ	0xFDB
 18789                           fsr2h	equ	0xFDA
 18790                           fsr2l	equ	0xFD9
 18791                           status	equ	0xFD8
 18792                           
 18793 ;; *************** function _Port_SetQuadType *****************
 18794 ;; Defined at:
 18795 ;;		line 399 in file "Library/Port.c"
 18796 ;; Parameters:    Size  Location     Type
 18797 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 18798 ;;		 -> PortB(10), PortD(10), 
 18799 ;;  pQuad           1   56[BANK0 ] enum E6776
 18800 ;;  pType           1   57[BANK0 ] enum E6795
 18801 ;; Auto vars:     Size  Location     Type
 18802 ;;  Output          1   58[BANK0 ] enum E6475
 18803 ;; Return value:  Size  Location     Type
 18804 ;;                  1    wreg      enum E6475
 18805 ;; Registers used:
 18806 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18807 ;; Tracked objects:
 18808 ;;		On entry : 0/0
 18809 ;;		On exit  : 0/0
 18810 ;;		Unchanged: 0/0
 18811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18812 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18815 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18816 ;;Total ram usage:        5 bytes
 18817 ;; Hardware stack levels used:    1
 18818 ;; Hardware stack levels required when called:   13
 18819 ;; This function calls:
 18820 ;;		_Byte_SetQuad
 18821 ;;		_Port_CheckQuadType
 18822 ;;		_Word_SetPair
 18823 ;; This function is called by:
 18824 ;;		_MXK_InitDIPSwitch
 18825 ;;		_MXK_Init
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           	psect	text102
 18830  010A5C                     __ptext102:
 18831                           	opt stack 0
 18832  010A5C                     _Port_SetQuadType:
 18833                           	opt stack 16
 18834                           
 18835                           ;Port.c: 401: ePinError Output = ePinErrorState;
 18836                           
 18837                           ; BSR set to: 0
 18838                           ;incstack = 0
 18839  010A5C  0E05               	movlw	5
 18840  010A5E  0100               	movlb	0	; () banked
 18841  010A60  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18842                           
 18843                           ;Port.c: 403: switch (pType)
 18844  010A62  D0C7               	goto	l476
 18845  010A64                     
 18846                           ; BSR set to: 0
 18847                           ;Port.c: 407: {
 18848                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18849                           
 18850                           ; BSR set to: 0
 18851  010A64  0100               	movlb	0	; () banked
 18852  010A66  EE20 F002          	lfsr	2,2
 18853  010A6A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18854  010A6C  26D9               	addwf	fsr2l,f,c
 18855  010A6E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18856  010A70  22DA               	addwfc	fsr2h,f,c
 18857  010A72  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18858  010A76  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18859  010A7A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18860  010A7E  0E0F               	movlw	15
 18861  010A80  0100               	movlb	0	; () banked
 18862  010A82  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18863  010A84  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18864                           
 18865                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18866  010A88  0100               	movlb	0	; () banked
 18867  010A8A  EE20 F004          	lfsr	2,4
 18868  010A8E  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18869  010A90  26D9               	addwf	fsr2l,f,c
 18870  010A92  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18871  010A94  22DA               	addwfc	fsr2h,f,c
 18872  010A96  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18873  010A9A  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18874  010A9E  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18875  010AA2  0E00               	movlw	0
 18876  010AA4  0100               	movlb	0	; () banked
 18877  010AA6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18878  010AA8  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18879                           
 18880                           ;Port.c: 413: }
 18881                           ;Port.c: 415: break;
 18882  010AAC  D0B0               	goto	l478
 18883  010AAE                     
 18884                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18885  010AAE  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18886  010AB2  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18887  010AB6  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18888  010ABA  0E03               	movlw	3
 18889  010ABC  0100               	movlb	0	; () banked
 18890  010ABE  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18891  010AC0  EC2E  F09F         	call	_Port_CheckQuadType	;wreg free
 18892  010AC4  0100               	movlb	0	; () banked
 18893  010AC6  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18894  010AC8  0100               	movlb	0	; () banked
 18895  010ACA  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 18896  010ACC  A4D8               	btfss	status,2,c
 18897  010ACE  0012               	return	
 18898                           
 18899                           ; BSR set to: 0
 18900                           ;Port.c: 418: {
 18901                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18902  010AD0  0100               	movlb	0	; () banked
 18903  010AD2  EE20 F002          	lfsr	2,2
 18904  010AD6  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18905  010AD8  26D9               	addwf	fsr2l,f,c
 18906  010ADA  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18907  010ADC  22DA               	addwfc	fsr2h,f,c
 18908  010ADE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18909  010AE2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18910  010AE6  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18911  010AEA  0E00               	movlw	0
 18912  010AEC  0100               	movlb	0	; () banked
 18913  010AEE  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18914  010AF0  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18915                           
 18916                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18917  010AF4  0100               	movlb	0	; () banked
 18918  010AF6  EE20 F004          	lfsr	2,4
 18919  010AFA  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18920  010AFC  26D9               	addwf	fsr2l,f,c
 18921  010AFE  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18922  010B00  22DA               	addwfc	fsr2h,f,c
 18923  010B02  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18924  010B06  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18925  010B0A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18926  010B0E  0E00               	movlw	0
 18927  010B10  0100               	movlb	0	; () banked
 18928  010B12  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18929  010B14  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18930                           
 18931                           ;Port.c: 424: }
 18932  010B18  D07A               	goto	l478
 18933  010B1A                     
 18934                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18935  010B1A  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18936  010B1E  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18937  010B22  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18938  010B26  0E03               	movlw	3
 18939  010B28  0100               	movlb	0	; () banked
 18940  010B2A  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18941  010B2C  EC2E  F09F         	call	_Port_CheckQuadType	;wreg free
 18942  010B30  0100               	movlb	0	; () banked
 18943  010B32  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18944  010B34  0100               	movlb	0	; () banked
 18945  010B36  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 18946  010B38  A4D8               	btfss	status,2,c
 18947  010B3A  0012               	return	
 18948                           
 18949                           ; BSR set to: 0
 18950                           ;Port.c: 429: {
 18951                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18952  010B3C  0100               	movlb	0	; () banked
 18953  010B3E  EE20 F002          	lfsr	2,2
 18954  010B42  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18955  010B44  26D9               	addwf	fsr2l,f,c
 18956  010B46  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18957  010B48  22DA               	addwfc	fsr2h,f,c
 18958  010B4A  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18959  010B4E  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18960  010B52  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18961  010B56  0E0F               	movlw	15
 18962  010B58  0100               	movlb	0	; () banked
 18963  010B5A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18964  010B5C  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18965                           
 18966                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 18967  010B60  0100               	movlb	0	; () banked
 18968  010B62  EE20 F004          	lfsr	2,4
 18969  010B66  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18970  010B68  26D9               	addwf	fsr2l,f,c
 18971  010B6A  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18972  010B6C  22DA               	addwfc	fsr2h,f,c
 18973  010B6E  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18974  010B72  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18975  010B76  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18976  010B7A  0E0F               	movlw	15
 18977  010B7C  0100               	movlb	0	; () banked
 18978  010B7E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18979  010B80  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 18980                           
 18981                           ;Port.c: 435: }
 18982  010B84  D044               	goto	l478
 18983  010B86                     
 18984                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18985  010B86  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18986  010B8A  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18987  010B8E  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18988  010B92  0E03               	movlw	3
 18989  010B94  0100               	movlb	0	; () banked
 18990  010B96  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18991  010B98  EC2E  F09F         	call	_Port_CheckQuadType	;wreg free
 18992  010B9C  0100               	movlb	0	; () banked
 18993  010B9E  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18994  010BA0  0100               	movlb	0	; () banked
 18995  010BA2  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 18996  010BA4  A4D8               	btfss	status,2,c
 18997  010BA6  0012               	return	
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;Port.c: 440: {
 19001                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19002  010BA8  0100               	movlb	0	; () banked
 19003  010BAA  EE20 F002          	lfsr	2,2
 19004  010BAE  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19005  010BB0  26D9               	addwf	fsr2l,f,c
 19006  010BB2  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19007  010BB4  22DA               	addwfc	fsr2h,f,c
 19008  010BB6  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19009  010BBA  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19010  010BBE  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19011  010BC2  0E00               	movlw	0
 19012  010BC4  0100               	movlb	0	; () banked
 19013  010BC6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19014  010BC8  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 19015                           
 19016                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19017  010BCC  0100               	movlb	0	; () banked
 19018  010BCE  EE20 F004          	lfsr	2,4
 19019  010BD2  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19020  010BD4  26D9               	addwf	fsr2l,f,c
 19021  010BD6  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19022  010BD8  22DA               	addwfc	fsr2h,f,c
 19023  010BDA  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19024  010BDE  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19025  010BE2  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19026  010BE6  0E00               	movlw	0
 19027  010BE8  0100               	movlb	0	; () banked
 19028  010BEA  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19029  010BEC  EC43  F0A3         	call	_Byte_SetQuad	;wreg free
 19030                           
 19031                           ;Port.c: 446: }
 19032  010BF0  D00E               	goto	l478
 19033  010BF2                     l476:
 19034  010BF2  0100               	movlb	0	; () banked
 19035  010BF4  51EE               	movf	Port_SetQuadType@pType& (0+255),w,b
 19036                           
 19037                           ; Switch size 1, requested type "space"
 19038                           ; Number of cases is 4, Range of values is 0 to 3
 19039                           ; switch strategies available:
 19040                           ; Name         Instructions Cycles
 19041                           ; simple_byte           13     7 (average)
 19042                           ;	Chosen strategy is simple_byte
 19043  010BF6  0A00               	xorlw	0	; case 0
 19044  010BF8  B4D8               	btfsc	status,2,c
 19045  010BFA  D734               	goto	l477
 19046  010BFC  0A01               	xorlw	1	; case 1
 19047  010BFE  B4D8               	btfsc	status,2,c
 19048  010C00  D756               	goto	l479
 19049  010C02  0A03               	xorlw	3	; case 2
 19050  010C04  B4D8               	btfsc	status,2,c
 19051  010C06  D789               	goto	l483
 19052  010C08  0A01               	xorlw	1	; case 3
 19053  010C0A  B4D8               	btfsc	status,2,c
 19054  010C0C  D7BC               	goto	l486
 19055  010C0E                     l478:
 19056                           
 19057                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 19058                           
 19059                           ; BSR set to: 0
 19060  010C0E  0E08               	movlw	8
 19061  010C10  0100               	movlb	0	; () banked
 19062  010C12  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19063  010C14  0100               	movlb	0	; () banked
 19064  010C16  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19065  010C18  0E00               	movlw	0
 19066  010C1A  0100               	movlb	0	; () banked
 19067  010C1C  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19068  010C1E  0100               	movlb	0	; () banked
 19069  010C20  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19070  010C22  0100               	movlb	0	; () banked
 19071  010C24  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19072  010C26  0D04               	mullw	4
 19073  010C28  CFF3 F0C6          	movff	prodl,Word_SetPair@pPair
 19074  010C2C  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19075  010C30  EC05  F0A1         	call	_Word_SetPair	;wreg free
 19076                           
 19077                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 19078  010C34  0E08               	movlw	8
 19079  010C36  0100               	movlb	0	; () banked
 19080  010C38  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19081  010C3A  0100               	movlb	0	; () banked
 19082  010C3C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19083  010C3E  0E00               	movlw	0
 19084  010C40  0100               	movlb	0	; () banked
 19085  010C42  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19086  010C44  0100               	movlb	0	; () banked
 19087  010C46  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19088  010C48  0100               	movlb	0	; () banked
 19089  010C4A  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19090  010C4C  0D04               	mullw	4
 19091  010C4E  28F3               	incf	prodl,w,c
 19092  010C50  0100               	movlb	0	; () banked
 19093  010C52  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19094  010C54  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19095  010C58  EC05  F0A1         	call	_Word_SetPair	;wreg free
 19096                           
 19097                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 19098  010C5C  0E08               	movlw	8
 19099  010C5E  0100               	movlb	0	; () banked
 19100  010C60  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19101  010C62  0100               	movlb	0	; () banked
 19102  010C64  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19103  010C66  0E00               	movlw	0
 19104  010C68  0100               	movlb	0	; () banked
 19105  010C6A  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19106  010C6C  0100               	movlb	0	; () banked
 19107  010C6E  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19108  010C70  0100               	movlb	0	; () banked
 19109  010C72  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19110  010C74  0D04               	mullw	4
 19111  010C76  50F3               	movf	prodl,w,c
 19112  010C78  0F02               	addlw	2
 19113  010C7A  0100               	movlb	0	; () banked
 19114  010C7C  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19115  010C7E  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19116  010C82  EC05  F0A1         	call	_Word_SetPair	;wreg free
 19117                           
 19118                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 19119  010C86  0E08               	movlw	8
 19120  010C88  0100               	movlb	0	; () banked
 19121  010C8A  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19122  010C8C  0100               	movlb	0	; () banked
 19123  010C8E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19124  010C90  0E00               	movlw	0
 19125  010C92  0100               	movlb	0	; () banked
 19126  010C94  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19127  010C96  0100               	movlb	0	; () banked
 19128  010C98  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19129  010C9A  0100               	movlb	0	; () banked
 19130  010C9C  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19131  010C9E  0D04               	mullw	4
 19132  010CA0  50F3               	movf	prodl,w,c
 19133  010CA2  0F03               	addlw	3
 19134  010CA4  0100               	movlb	0	; () banked
 19135  010CA6  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19136  010CA8  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19137  010CAC  EC05  F0A1         	call	_Word_SetPair	;wreg free
 19138  010CB0  0012               	return	
 19139  010CB2                     __end_of_Port_SetQuadType:
 19140                           	opt stack 0
 19141                           tosu	equ	0xFFF
 19142                           tosh	equ	0xFFE
 19143                           tosl	equ	0xFFD
 19144                           pclath	equ	0xFFA
 19145                           tblptru	equ	0xFF8
 19146                           tblptrh	equ	0xFF7
 19147                           tblptrl	equ	0xFF6
 19148                           tablat	equ	0xFF5
 19149                           prodh	equ	0xFF4
 19150                           prodl	equ	0xFF3
 19151                           intcon	equ	0xFF2
 19152                           postinc0	equ	0xFEE
 19153                           wreg	equ	0xFE8
 19154                           indf1	equ	0xFE7
 19155                           postdec1	equ	0xFE5
 19156                           fsr1h	equ	0xFE2
 19157                           fsr1l	equ	0xFE1
 19158                           indf2	equ	0xFDF
 19159                           postinc2	equ	0xFDE
 19160                           postdec2	equ	0xFDD
 19161                           plusw2	equ	0xFDB
 19162                           fsr2h	equ	0xFDA
 19163                           fsr2l	equ	0xFD9
 19164                           status	equ	0xFD8
 19165                           
 19166 ;; *************** function _Word_SetPair *****************
 19167 ;; Defined at:
 19168 ;;		line 149 in file "Library/Types.c"
 19169 ;; Parameters:    Size  Location     Type
 19170 ;;  pInput          2   15[BANK0 ] PTR struct Word
 19171 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19172 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19173 ;;  pPair           1   17[BANK0 ] unsigned char 
 19174 ;;  pValue          1   18[BANK0 ] unsigned char 
 19175 ;; Auto vars:     Size  Location     Type
 19176 ;;		None
 19177 ;; Return value:  Size  Location     Type
 19178 ;;                  1    wreg      void 
 19179 ;; Registers used:
 19180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19181 ;; Tracked objects:
 19182 ;;		On entry : 0/0
 19183 ;;		On exit  : 0/0
 19184 ;;		Unchanged: 0/0
 19185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19186 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19189 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19190 ;;Total ram usage:        4 bytes
 19191 ;; Hardware stack levels used:    1
 19192 ;; Hardware stack levels required when called:    9
 19193 ;; This function calls:
 19194 ;;		_Byte_SetPair
 19195 ;; This function is called by:
 19196 ;;		_Port_SetPinType
 19197 ;;		_Port_SetQuadType
 19198 ;;		_Port_SetType
 19199 ;;		_Port_SetPairType
 19200 ;;		_PortProperty_Init
 19201 ;; This function uses a non-reentrant model
 19202 ;;
 19203                           
 19204                           	psect	text103
 19205  01420A                     __ptext103:
 19206                           	opt stack 0
 19207  01420A                     _Word_SetPair:
 19208                           	opt stack 19
 19209                           
 19210                           ;Types.c: 151: if (pPair >= 4)
 19211                           
 19212                           ;incstack = 0
 19213  01420A  0E03               	movlw	3
 19214  01420C  0100               	movlb	0	; () banked
 19215  01420E  65C6               	cpfsgt	Word_SetPair@pPair& (0+255),b
 19216  014210  D014               	goto	l776
 19217                           
 19218                           ; BSR set to: 0
 19219                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 19220  014212  0E01               	movlw	1
 19221  014214  0100               	movlb	0	; () banked
 19222  014216  25C4               	addwf	Word_SetPair@pInput& (0+255),w,b
 19223  014218  0100               	movlb	0	; () banked
 19224  01421A  6FC0               	movwf	Byte_SetPair@pInput& (0+255),b
 19225  01421C  0E00               	movlw	0
 19226  01421E  0100               	movlb	0	; () banked
 19227  014220  21C5               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 19228  014222  0100               	movlb	0	; () banked
 19229  014224  6FC1               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 19230  014226  0100               	movlb	0	; () banked
 19231  014228  51C6               	movf	Word_SetPair@pPair& (0+255),w,b
 19232  01422A  0FFC               	addlw	252
 19233  01422C  0100               	movlb	0	; () banked
 19234  01422E  6FC2               	movwf	Byte_SetPair@pPair& (0+255),b
 19235  014230  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19236  014234  EC32  F0A3         	call	_Byte_SetPair	;wreg free
 19237  014238  0012               	return	
 19238  01423A                     l776:
 19239                           
 19240                           ;Types.c: 153: else
 19241                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 19242  01423A  C0C4  F0C0         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 19243  01423E  C0C5  F0C1         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 19244  014242  C0C6  F0C2         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 19245  014246  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19246  01424A  EC32  F0A3         	call	_Byte_SetPair	;wreg free
 19247  01424E  0012               	return	
 19248  014250                     __end_of_Word_SetPair:
 19249                           	opt stack 0
 19250                           tosu	equ	0xFFF
 19251                           tosh	equ	0xFFE
 19252                           tosl	equ	0xFFD
 19253                           pclath	equ	0xFFA
 19254                           tblptru	equ	0xFF8
 19255                           tblptrh	equ	0xFF7
 19256                           tblptrl	equ	0xFF6
 19257                           tablat	equ	0xFF5
 19258                           prodh	equ	0xFF4
 19259                           prodl	equ	0xFF3
 19260                           intcon	equ	0xFF2
 19261                           postinc0	equ	0xFEE
 19262                           wreg	equ	0xFE8
 19263                           indf1	equ	0xFE7
 19264                           postdec1	equ	0xFE5
 19265                           fsr1h	equ	0xFE2
 19266                           fsr1l	equ	0xFE1
 19267                           indf2	equ	0xFDF
 19268                           postinc2	equ	0xFDE
 19269                           postdec2	equ	0xFDD
 19270                           plusw2	equ	0xFDB
 19271                           fsr2h	equ	0xFDA
 19272                           fsr2l	equ	0xFD9
 19273                           status	equ	0xFD8
 19274                           
 19275 ;; *************** function _Byte_SetPair *****************
 19276 ;; Defined at:
 19277 ;;		line 83 in file "Library/Types.c"
 19278 ;; Parameters:    Size  Location     Type
 19279 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19280 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19281 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19282 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 19283 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 19284 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 19285 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 19286 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 19287 ;;		 -> NULL(0), 
 19288 ;;  pPair           1   13[BANK0 ] unsigned char 
 19289 ;;  pValue          1   14[BANK0 ] unsigned char 
 19290 ;; Auto vars:     Size  Location     Type
 19291 ;;		None
 19292 ;; Return value:  Size  Location     Type
 19293 ;;                  1    wreg      void 
 19294 ;; Registers used:
 19295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19296 ;; Tracked objects:
 19297 ;;		On entry : 0/0
 19298 ;;		On exit  : 0/0
 19299 ;;		Unchanged: 0/0
 19300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19304 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19305 ;;Total ram usage:        4 bytes
 19306 ;; Hardware stack levels used:    1
 19307 ;; Hardware stack levels required when called:    8
 19308 ;; This function calls:
 19309 ;;		_Byte_SetZone
 19310 ;; This function is called by:
 19311 ;;		_Word_SetPair
 19312 ;;		_Port_SetPairType
 19313 ;;		_Port_SetPair
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           	psect	text104
 19318  014664                     __ptext104:
 19319                           	opt stack 0
 19320  014664                     _Byte_SetPair:
 19321                           	opt stack 19
 19322                           
 19323                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 19324                           
 19325                           ;incstack = 0
 19326  014664  C0C0  F0B5         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 19327  014668  C0C1  F0B6         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 19328  01466C  0E04               	movlw	4
 19329  01466E  0100               	movlb	0	; () banked
 19330  014670  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 19331  014672  C0C2  F0B8         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 19332  014676  0E02               	movlw	2
 19333  014678  0100               	movlb	0	; () banked
 19334  01467A  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19335  01467C  C0C3  F0BA         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 19336  014680  EC21  F096         	call	_Byte_SetZone	;wreg free
 19337  014684  0012               	return		;funcret
 19338  014686                     __end_of_Byte_SetPair:
 19339                           	opt stack 0
 19340                           tosu	equ	0xFFF
 19341                           tosh	equ	0xFFE
 19342                           tosl	equ	0xFFD
 19343                           pclath	equ	0xFFA
 19344                           tblptru	equ	0xFF8
 19345                           tblptrh	equ	0xFF7
 19346                           tblptrl	equ	0xFF6
 19347                           tablat	equ	0xFF5
 19348                           prodh	equ	0xFF4
 19349                           prodl	equ	0xFF3
 19350                           intcon	equ	0xFF2
 19351                           postinc0	equ	0xFEE
 19352                           wreg	equ	0xFE8
 19353                           indf1	equ	0xFE7
 19354                           postdec1	equ	0xFE5
 19355                           fsr1h	equ	0xFE2
 19356                           fsr1l	equ	0xFE1
 19357                           indf2	equ	0xFDF
 19358                           postinc2	equ	0xFDE
 19359                           postdec2	equ	0xFDD
 19360                           plusw2	equ	0xFDB
 19361                           fsr2h	equ	0xFDA
 19362                           fsr2l	equ	0xFD9
 19363                           status	equ	0xFD8
 19364                           
 19365 ;; *************** function _Port_CheckQuadType *****************
 19366 ;; Defined at:
 19367 ;;		line 126 in file "Library/Port.c"
 19368 ;; Parameters:    Size  Location     Type
 19369 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 19370 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19371 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19372 ;;  pQuad           1   49[BANK0 ] enum E6776
 19373 ;;  pDrive          1   50[BANK0 ] enum E6469
 19374 ;; Auto vars:     Size  Location     Type
 19375 ;;  Output          1   53[BANK0 ] enum E6475
 19376 ;;  Pair2           1   52[BANK0 ] enum E6760
 19377 ;;  Pair1           1   51[BANK0 ] enum E6760
 19378 ;; Return value:  Size  Location     Type
 19379 ;;                  1    wreg      enum E6475
 19380 ;; Registers used:
 19381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;Total ram usage:        7 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:   12
 19394 ;; This function calls:
 19395 ;;		_Port_CheckPairType
 19396 ;; This function is called by:
 19397 ;;		_Port_CheckPortType
 19398 ;;		_Port_SetQuadType
 19399 ;; This function uses a non-reentrant model
 19400 ;;
 19401                           
 19402                           	psect	text105
 19403  013E5C                     __ptext105:
 19404                           	opt stack 0
 19405  013E5C                     _Port_CheckQuadType:
 19406                           	opt stack 15
 19407                           
 19408                           ;Port.c: 128: ePinError Output = ePinErrorState;
 19409                           
 19410                           ;incstack = 0
 19411  013E5C  0E05               	movlw	5
 19412  013E5E  0100               	movlb	0	; () banked
 19413  013E60  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19414                           
 19415                           ; BSR set to: 0
 19416                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 19417  013E62  0100               	movlb	0	; () banked
 19418  013E64  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19419  013E66  0D02               	mullw	2
 19420  013E68  CFF3 F0E8          	movff	prodl,Port_CheckQuadType@Pair1
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 19424  013E6C  0100               	movlb	0	; () banked
 19425  013E6E  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19426  013E70  0D02               	mullw	2
 19427  013E72  28F3               	incf	prodl,w,c
 19428  013E74  0100               	movlb	0	; () banked
 19429  013E76  6FE9               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 19433  013E78  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19434  013E7C  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19435  013E80  C0E8  F0DD         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 19436  013E84  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19437  013E88  ECD1  F09D         	call	_Port_CheckPairType	;wreg free
 19438  013E8C  0100               	movlb	0	; () banked
 19439  013E8E  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19440  013E90  0100               	movlb	0	; () banked
 19441  013E92  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19442  013E94  A4D8               	btfss	status,2,c
 19443  013E96  D00C               	goto	l393
 19444                           
 19445                           ; BSR set to: 0
 19446                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 19447  013E98  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19448  013E9C  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19449  013EA0  C0E9  F0DD         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 19450  013EA4  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19451  013EA8  ECD1  F09D         	call	_Port_CheckPairType	;wreg free
 19452  013EAC  0100               	movlb	0	; () banked
 19453  013EAE  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19454  013EB0                     l393:
 19455                           
 19456                           ; BSR set to: 0
 19457                           ;Port.c: 136: return Output;
 19458                           
 19459                           ; BSR set to: 0
 19460  013EB0  0100               	movlb	0	; () banked
 19461  013EB2  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19462  013EB4  0012               	return	
 19463  013EB6                     __end_of_Port_CheckQuadType:
 19464                           	opt stack 0
 19465                           tosu	equ	0xFFF
 19466                           tosh	equ	0xFFE
 19467                           tosl	equ	0xFFD
 19468                           pclath	equ	0xFFA
 19469                           tblptru	equ	0xFF8
 19470                           tblptrh	equ	0xFF7
 19471                           tblptrl	equ	0xFF6
 19472                           tablat	equ	0xFF5
 19473                           prodh	equ	0xFF4
 19474                           prodl	equ	0xFF3
 19475                           intcon	equ	0xFF2
 19476                           postinc0	equ	0xFEE
 19477                           wreg	equ	0xFE8
 19478                           indf1	equ	0xFE7
 19479                           postdec1	equ	0xFE5
 19480                           fsr1h	equ	0xFE2
 19481                           fsr1l	equ	0xFE1
 19482                           indf2	equ	0xFDF
 19483                           postinc2	equ	0xFDE
 19484                           postdec2	equ	0xFDD
 19485                           plusw2	equ	0xFDB
 19486                           fsr2h	equ	0xFDA
 19487                           fsr2l	equ	0xFD9
 19488                           status	equ	0xFD8
 19489                           
 19490 ;; *************** function _Port_CheckPairType *****************
 19491 ;; Defined at:
 19492 ;;		line 112 in file "Library/Port.c"
 19493 ;; Parameters:    Size  Location     Type
 19494 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 19495 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19496 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19497 ;;  pPair           1   40[BANK0 ] enum E6760
 19498 ;;  pDrive          1   41[BANK0 ] enum E6469
 19499 ;; Auto vars:     Size  Location     Type
 19500 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 19501 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19502 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19503 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19504 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19505 ;;  Output          1   44[BANK0 ] enum E6475
 19506 ;;  Pin2            1   43[BANK0 ] enum E6750
 19507 ;;  Pin1            1   42[BANK0 ] enum E6750
 19508 ;; Return value:  Size  Location     Type
 19509 ;;                  1    wreg      enum E6475
 19510 ;; Registers used:
 19511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19512 ;; Tracked objects:
 19513 ;;		On entry : 0/0
 19514 ;;		On exit  : 0/0
 19515 ;;		Unchanged: 0/0
 19516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19517 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19518 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19520 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19521 ;;Total ram usage:        9 bytes
 19522 ;; Hardware stack levels used:    1
 19523 ;; Hardware stack levels required when called:   11
 19524 ;; This function calls:
 19525 ;;		_PortProperty_Valid
 19526 ;; This function is called by:
 19527 ;;		_Port_CheckQuadType
 19528 ;;		_Port_SetPairType
 19529 ;; This function uses a non-reentrant model
 19530 ;;
 19531                           
 19532                           	psect	text106
 19533  013BA2                     __ptext106:
 19534                           	opt stack 0
 19535  013BA2                     _Port_CheckPairType:
 19536                           	opt stack 15
 19537                           
 19538                           ;Port.c: 114: ePinError Output = ePinErrorState;
 19539                           
 19540                           ; BSR set to: 0
 19541                           ;incstack = 0
 19542  013BA2  0E05               	movlw	5
 19543  013BA4  0100               	movlb	0	; () banked
 19544  013BA6  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19545                           
 19546                           ; BSR set to: 0
 19547                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 19548  013BA8  C0DB  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 19549  013BAC  C0DC  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 19550  013BB0  CFDE F0E2          	movff	postinc2,Port_CheckPairType@Props
 19551  013BB4  CFDD F0E3          	movff	postdec2,Port_CheckPairType@Props+1
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 19555  013BB8  0100               	movlb	0	; () banked
 19556  013BBA  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19557  013BBC  0D02               	mullw	2
 19558  013BBE  CFF3 F0DF          	movff	prodl,Port_CheckPairType@Pin1
 19559                           
 19560                           ; BSR set to: 0
 19561                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 19562  013BC2  0100               	movlb	0	; () banked
 19563  013BC4  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19564  013BC6  0D02               	mullw	2
 19565  013BC8  28F3               	incf	prodl,w,c
 19566  013BCA  0100               	movlb	0	; () banked
 19567  013BCC  6FE0               	movwf	Port_CheckPairType@Pin2& (0+255),b
 19568                           
 19569                           ; BSR set to: 0
 19570                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 19571  013BCE  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19572  013BD2  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19573  013BD6  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19574  013BDA  C0DF  F0C7         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 19575  013BDE  EC26  F09B         	call	_PortProperty_Valid	;wreg free
 19576  013BE2  0100               	movlb	0	; () banked
 19577  013BE4  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19578  013BE6  0100               	movlb	0	; () banked
 19579  013BE8  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 19580  013BEA  A4D8               	btfss	status,2,c
 19581  013BEC  D00C               	goto	l389
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 19585  013BEE  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19586  013BF2  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19587  013BF6  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19588  013BFA  C0E0  F0C7         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 19589  013BFE  EC26  F09B         	call	_PortProperty_Valid	;wreg free
 19590  013C02  0100               	movlb	0	; () banked
 19591  013C04  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19592  013C06                     l389:
 19593                           
 19594                           ; BSR set to: 0
 19595                           ;Port.c: 124: return Output;
 19596                           
 19597                           ; BSR set to: 0
 19598  013C06  0100               	movlb	0	; () banked
 19599  013C08  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 19600  013C0A  0012               	return	
 19601  013C0C                     __end_of_Port_CheckPairType:
 19602                           	opt stack 0
 19603                           tosu	equ	0xFFF
 19604                           tosh	equ	0xFFE
 19605                           tosl	equ	0xFFD
 19606                           pclath	equ	0xFFA
 19607                           tblptru	equ	0xFF8
 19608                           tblptrh	equ	0xFF7
 19609                           tblptrl	equ	0xFF6
 19610                           tablat	equ	0xFF5
 19611                           prodh	equ	0xFF4
 19612                           prodl	equ	0xFF3
 19613                           intcon	equ	0xFF2
 19614                           postinc0	equ	0xFEE
 19615                           wreg	equ	0xFE8
 19616                           indf1	equ	0xFE7
 19617                           postdec1	equ	0xFE5
 19618                           fsr1h	equ	0xFE2
 19619                           fsr1l	equ	0xFE1
 19620                           indf2	equ	0xFDF
 19621                           postinc2	equ	0xFDE
 19622                           postdec2	equ	0xFDD
 19623                           plusw2	equ	0xFDB
 19624                           fsr2h	equ	0xFDA
 19625                           fsr2l	equ	0xFD9
 19626                           status	equ	0xFD8
 19627                           
 19628 ;; *************** function _PortProperty_Valid *****************
 19629 ;; Defined at:
 19630 ;;		line 220 in file "Library/Types.c"
 19631 ;; Parameters:    Size  Location     Type
 19632 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 19633 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19634 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19635 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19636 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19637 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 19638 ;;  pPin            1   18[BANK0 ] unsigned char 
 19639 ;; Auto vars:     Size  Location     Type
 19640 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 19641 ;;  Pair            1   37[BANK0 ] enum E6469
 19642 ;; Return value:  Size  Location     Type
 19643 ;;                  1    wreg      enum E6475
 19644 ;; Registers used:
 19645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19651 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19654 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19655 ;;Total ram usage:       23 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:   10
 19658 ;; This function calls:
 19659 ;;		_Word_GetPair
 19660 ;; This function is called by:
 19661 ;;		_Port_CheckPairType
 19662 ;;		_Port_SetPinType
 19663 ;; This function uses a non-reentrant model
 19664 ;;
 19665                           
 19666                           	psect	text107
 19667  01364C                     __ptext107:
 19668                           	opt stack 0
 19669  01364C                     _PortProperty_Valid:
 19670                           	opt stack 15
 19671                           
 19672                           ;Types.c: 222: ePinDrive Pair;
 19673                           ;Types.c: 223: const ePinError Errors[4][4] =
 19674                           ;Types.c: 224: {
 19675                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 19676                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 19677                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 19678                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 19679                           ;Types.c: 230: };
 19680                           
 19681                           ; BSR set to: 0
 19682                           ;incstack = 0
 19683  01364C  0E8F               	movlw	low PortProperty_Valid@F6830
 19684  01364E  6EF6               	movwf	tblptrl,c
 19685  013650                     	if	1	;There is more than 1 active tblptr byte
 19686  013650  0EFD               	movlw	high PortProperty_Valid@F6830
 19687  013652  6EF7               	movwf	tblptrh,c
 19688  013654                     	endif
 19689  013654                     	if	1	;There are 3 active tblptr bytes
 19690  013654  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 19691  013656  6EF8               	movwf	tblptru,c
 19692  013658                     	endif
 19693  013658  EE20  F0CA         	lfsr	2,PortProperty_Valid@Errors
 19694  01365C  0E0F               	movlw	15
 19695  01365E                     u6540:
 19696  01365E  0009               	tblrd		*+
 19697  013660  CFF5 FFDE          	movff	tablat,postinc2
 19698  013664  06E8               	decf	wreg,f,c
 19699  013666  E2FB               	bc	u6540
 19700                           
 19701                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 19702  013668  C0C4  F0C1         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 19703  01366C  C0C5  F0C2         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 19704  013670  C0C7  F0C3         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 19705  013674  ECE9  F0A1         	call	_Word_GetPair	;wreg free
 19706  013678  0100               	movlb	0	; () banked
 19707  01367A  6FDA               	movwf	PortProperty_Valid@Pair& (0+255),b
 19708                           
 19709                           ; BSR set to: 0
 19710                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 19711  01367C  0E04               	movlw	4
 19712  01367E  0100               	movlb	0	; () banked
 19713  013680  61C6               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 19714  013682  D020               	goto	l819
 19715                           
 19716                           ; BSR set to: 0
 19717  013684  0E04               	movlw	4
 19718  013686  0100               	movlb	0	; () banked
 19719  013688  61DA               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 19720  01368A  D01C               	goto	l819
 19721                           
 19722                           ; BSR set to: 0
 19723                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 19724  01368C  0100               	movlb	0	; () banked
 19725  01368E  51C6               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 19726  013690  0D04               	mullw	4
 19727  013692  0ECA               	movlw	low PortProperty_Valid@Errors
 19728  013694  0100               	movlb	0	; () banked
 19729  013696  6FC8               	movwf	??_PortProperty_Valid& (0+255),b
 19730  013698  0E00               	movlw	high PortProperty_Valid@Errors
 19731  01369A  0100               	movlb	0	; () banked
 19732  01369C  6FC9               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 19733  01369E  50F3               	movf	prodl,w,c
 19734  0136A0  0100               	movlb	0	; () banked
 19735  0136A2  27C8               	addwf	??_PortProperty_Valid& (0+255),f,b
 19736  0136A4  50F4               	movf	prodh,w,c
 19737  0136A6  0100               	movlb	0	; () banked
 19738  0136A8  23C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 19739  0136AA  0100               	movlb	0	; () banked
 19740  0136AC  51DA               	movf	PortProperty_Valid@Pair& (0+255),w,b
 19741  0136AE  0D01               	mullw	1
 19742  0136B0  50F3               	movf	prodl,w,c
 19743  0136B2  0100               	movlb	0	; () banked
 19744  0136B4  25C8               	addwf	??_PortProperty_Valid& (0+255),w,b
 19745  0136B6  6ED9               	movwf	fsr2l,c
 19746  0136B8  50F4               	movf	prodh,w,c
 19747  0136BA  0100               	movlb	0	; () banked
 19748  0136BC  21C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 19749  0136BE  6EDA               	movwf	fsr2h,c
 19750  0136C0  50DF               	movf	indf2,w,c
 19751                           
 19752                           ; BSR set to: 0
 19753  0136C2  0012               	return	
 19754  0136C4                     l819:
 19755                           
 19756                           ; BSR set to: 0
 19757                           ;Types.c: 237: return ePinErrorState;
 19758                           
 19759                           ; BSR set to: 0
 19760  0136C4  0E05               	movlw	5
 19761  0136C6  0012               	return	
 19762  0136C8                     __end_of_PortProperty_Valid:
 19763                           	opt stack 0
 19764                           tosu	equ	0xFFF
 19765                           tosh	equ	0xFFE
 19766                           tosl	equ	0xFFD
 19767                           pclath	equ	0xFFA
 19768                           tblptru	equ	0xFF8
 19769                           tblptrh	equ	0xFF7
 19770                           tblptrl	equ	0xFF6
 19771                           tablat	equ	0xFF5
 19772                           prodh	equ	0xFF4
 19773                           prodl	equ	0xFF3
 19774                           intcon	equ	0xFF2
 19775                           postinc0	equ	0xFEE
 19776                           wreg	equ	0xFE8
 19777                           indf1	equ	0xFE7
 19778                           postdec1	equ	0xFE5
 19779                           fsr1h	equ	0xFE2
 19780                           fsr1l	equ	0xFE1
 19781                           indf2	equ	0xFDF
 19782                           postinc2	equ	0xFDE
 19783                           postdec2	equ	0xFDD
 19784                           plusw2	equ	0xFDB
 19785                           fsr2h	equ	0xFDA
 19786                           fsr2l	equ	0xFD9
 19787                           status	equ	0xFD8
 19788                           
 19789 ;; *************** function _Word_GetPair *****************
 19790 ;; Defined at:
 19791 ;;		line 156 in file "Library/Types.c"
 19792 ;; Parameters:    Size  Location     Type
 19793 ;;  pInput          2   12[BANK0 ] PTR struct Word
 19794 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19795 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19796 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19797 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19798 ;;  pPair           1   14[BANK0 ] unsigned char 
 19799 ;; Auto vars:     Size  Location     Type
 19800 ;;		None
 19801 ;; Return value:  Size  Location     Type
 19802 ;;                  1    wreg      unsigned char 
 19803 ;; Registers used:
 19804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19805 ;; Tracked objects:
 19806 ;;		On entry : 0/0
 19807 ;;		On exit  : 0/0
 19808 ;;		Unchanged: 0/0
 19809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19814 ;;Total ram usage:        3 bytes
 19815 ;; Hardware stack levels used:    1
 19816 ;; Hardware stack levels required when called:    9
 19817 ;; This function calls:
 19818 ;;		_Byte_GetPair
 19819 ;; This function is called by:
 19820 ;;		_Port_Init
 19821 ;;		_Port_SetPin
 19822 ;;		_Port_Set
 19823 ;;		_PortProperty_Valid
 19824 ;;		_Port_SetPair
 19825 ;;		_Port_SetQuad
 19826 ;; This function uses a non-reentrant model
 19827 ;;
 19828                           
 19829                           	psect	text108
 19830  0143D2                     __ptext108:
 19831                           	opt stack 0
 19832  0143D2                     _Word_GetPair:
 19833                           	opt stack 15
 19834                           
 19835                           ;Types.c: 158: if (pPair >= 4)
 19836                           
 19837                           ; BSR set to: 0
 19838                           ;incstack = 0
 19839  0143D2  0E03               	movlw	3
 19840  0143D4  0100               	movlb	0	; () banked
 19841  0143D6  65C3               	cpfsgt	Word_GetPair@pPair& (0+255),b
 19842  0143D8  D012               	goto	l781
 19843                           
 19844                           ; BSR set to: 0
 19845                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 19846  0143DA  0E01               	movlw	1
 19847  0143DC  0100               	movlb	0	; () banked
 19848  0143DE  25C1               	addwf	Word_GetPair@pInput& (0+255),w,b
 19849  0143E0  0100               	movlb	0	; () banked
 19850  0143E2  6FBE               	movwf	Byte_GetPair@pInput& (0+255),b
 19851  0143E4  0E00               	movlw	0
 19852  0143E6  0100               	movlb	0	; () banked
 19853  0143E8  21C2               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 19854  0143EA  0100               	movlb	0	; () banked
 19855  0143EC  6FBF               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 19856  0143EE  0100               	movlb	0	; () banked
 19857  0143F0  51C3               	movf	Word_GetPair@pPair& (0+255),w,b
 19858  0143F2  0FFC               	addlw	252
 19859  0143F4  0100               	movlb	0	; () banked
 19860  0143F6  6FC0               	movwf	Byte_GetPair@pPair& (0+255),b
 19861  0143F8  ECCF  F0A3         	call	_Byte_GetPair	;wreg free
 19862  0143FC  0012               	return	
 19863  0143FE                     l781:
 19864                           
 19865                           ;Types.c: 160: else
 19866                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 19867  0143FE  C0C1  F0BE         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 19868  014402  C0C2  F0BF         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 19869  014406  C0C3  F0C0         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 19870  01440A  ECCF  F0A3         	call	_Byte_GetPair	;wreg free
 19871  01440E  0012               	return	
 19872  014410                     __end_of_Word_GetPair:
 19873                           	opt stack 0
 19874                           tosu	equ	0xFFF
 19875                           tosh	equ	0xFFE
 19876                           tosl	equ	0xFFD
 19877                           pclath	equ	0xFFA
 19878                           tblptru	equ	0xFF8
 19879                           tblptrh	equ	0xFF7
 19880                           tblptrl	equ	0xFF6
 19881                           tablat	equ	0xFF5
 19882                           prodh	equ	0xFF4
 19883                           prodl	equ	0xFF3
 19884                           intcon	equ	0xFF2
 19885                           postinc0	equ	0xFEE
 19886                           wreg	equ	0xFE8
 19887                           indf1	equ	0xFE7
 19888                           postdec1	equ	0xFE5
 19889                           fsr1h	equ	0xFE2
 19890                           fsr1l	equ	0xFE1
 19891                           indf2	equ	0xFDF
 19892                           postinc2	equ	0xFDE
 19893                           postdec2	equ	0xFDD
 19894                           plusw2	equ	0xFDB
 19895                           fsr2h	equ	0xFDA
 19896                           fsr2l	equ	0xFD9
 19897                           status	equ	0xFD8
 19898                           
 19899 ;; *************** function _Byte_GetPair *****************
 19900 ;; Defined at:
 19901 ;;		line 87 in file "Library/Types.c"
 19902 ;; Parameters:    Size  Location     Type
 19903 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 19904 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19905 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19906 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19907 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19908 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19909 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19910 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19911 ;;		 -> NULL(0), 
 19912 ;;  pPair           1   11[BANK0 ] unsigned char 
 19913 ;; Auto vars:     Size  Location     Type
 19914 ;;		None
 19915 ;; Return value:  Size  Location     Type
 19916 ;;                  1    wreg      unsigned char 
 19917 ;; Registers used:
 19918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19919 ;; Tracked objects:
 19920 ;;		On entry : 0/0
 19921 ;;		On exit  : 0/0
 19922 ;;		Unchanged: 0/0
 19923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19924 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19928 ;;Total ram usage:        3 bytes
 19929 ;; Hardware stack levels used:    1
 19930 ;; Hardware stack levels required when called:    8
 19931 ;; This function calls:
 19932 ;;		_Byte_GetZone
 19933 ;; This function is called by:
 19934 ;;		_Word_GetPair
 19935 ;; This function uses a non-reentrant model
 19936 ;;
 19937                           
 19938                           	psect	text109
 19939  01479E                     __ptext109:
 19940                           	opt stack 0
 19941  01479E                     _Byte_GetPair:
 19942                           	opt stack 15
 19943                           
 19944                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 19945                           
 19946                           ;incstack = 0
 19947  01479E  C0BE  F0B5         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 19948  0147A2  C0BF  F0B6         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 19949  0147A6  0E04               	movlw	4
 19950  0147A8  0100               	movlb	0	; () banked
 19951  0147AA  6FB7               	movwf	Byte_GetZone@pMax& (0+255),b
 19952  0147AC  C0C0  F0B8         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 19953  0147B0  0E02               	movlw	2
 19954  0147B2  0100               	movlb	0	; () banked
 19955  0147B4  6FB9               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 19956  0147B6  EC71  F099         	call	_Byte_GetZone	;wreg free
 19957  0147BA  0012               	return	
 19958  0147BC                     __end_of_Byte_GetPair:
 19959                           	opt stack 0
 19960                           tosu	equ	0xFFF
 19961                           tosh	equ	0xFFE
 19962                           tosl	equ	0xFFD
 19963                           pclath	equ	0xFFA
 19964                           tblptru	equ	0xFF8
 19965                           tblptrh	equ	0xFF7
 19966                           tblptrl	equ	0xFF6
 19967                           tablat	equ	0xFF5
 19968                           prodh	equ	0xFF4
 19969                           prodl	equ	0xFF3
 19970                           intcon	equ	0xFF2
 19971                           postinc0	equ	0xFEE
 19972                           wreg	equ	0xFE8
 19973                           indf1	equ	0xFE7
 19974                           postdec1	equ	0xFE5
 19975                           fsr1h	equ	0xFE2
 19976                           fsr1l	equ	0xFE1
 19977                           indf2	equ	0xFDF
 19978                           postinc2	equ	0xFDE
 19979                           postdec2	equ	0xFDD
 19980                           plusw2	equ	0xFDB
 19981                           fsr2h	equ	0xFDA
 19982                           fsr2l	equ	0xFD9
 19983                           status	equ	0xFD8
 19984                           
 19985 ;; *************** function _Byte_GetZone *****************
 19986 ;; Defined at:
 19987 ;;		line 64 in file "Library/Types.c"
 19988 ;; Parameters:    Size  Location     Type
 19989 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19990 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19991 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19992 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19993 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19994 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19995 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19996 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19997 ;;		 -> NULL(0), 
 19998 ;;  pMax            1    2[BANK0 ] unsigned char 
 19999 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20000 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  Output          1    8[BANK0 ] unsigned char 
 20003 ;;  Offset          1    7[BANK0 ] unsigned char 
 20004 ;;  MASK            1    6[BANK0 ] unsigned char 
 20005 ;; Return value:  Size  Location     Type
 20006 ;;                  1    wreg      unsigned char 
 20007 ;; Registers used:
 20008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20009 ;; Tracked objects:
 20010 ;;		On entry : 0/0
 20011 ;;		On exit  : 0/0
 20012 ;;		Unchanged: 0/0
 20013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20014 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20017 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20018 ;;Total ram usage:        9 bytes
 20019 ;; Hardware stack levels used:    1
 20020 ;; Hardware stack levels required when called:    7
 20021 ;; This function calls:
 20022 ;;		Nothing
 20023 ;; This function is called by:
 20024 ;;		_Byte_GetPair
 20025 ;;		_Byte_GetTriple
 20026 ;;		_Byte_GetQuad
 20027 ;; This function uses a non-reentrant model
 20028 ;;
 20029                           
 20030                           	psect	text110
 20031  0132E2                     __ptext110:
 20032                           	opt stack 0
 20033  0132E2                     _Byte_GetZone:
 20034                           	opt stack 15
 20035                           
 20036                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20037                           
 20038                           ;incstack = 0
 20039  0132E2  C0B5  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 20040  0132E6  C0B6  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 20041  0132EA  0E00               	movlw	low (__mediumconst shr (0+16))
 20042  0132EC  6EF8               	movwf	tblptru,c
 20043  0132EE  0E0F               	movlw	(high __ramtop+-1)
 20044  0132F0  64F7               	cpfsgt	tblptrh,c
 20045  0132F2  D003               	bra	u6507
 20046  0132F4  0008               	tblrd		*
 20047  0132F6  50F5               	movf	tablat,w,c
 20048  0132F8  D005               	bra	u6500
 20049  0132FA                     u6507:
 20050  0132FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 20051  0132FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 20052  013302  50EF               	movf	indf0,w,c
 20053  013304                     u6500:
 20054  013304  0100               	movlb	0	; () banked
 20055  013306  6FBD               	movwf	Byte_GetZone@Output& (0+255),b
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20059  013308  0100               	movlb	0	; () banked
 20060  01330A  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20061  01330C  0D01               	mullw	1
 20062  01330E  0EA9               	movlw	low _MASKS
 20063  013310  24F3               	addwf	prodl,w,c
 20064  013312  6EF6               	movwf	tblptrl,c
 20065  013314  0EFD               	movlw	high _MASKS
 20066  013316  20F4               	addwfc	prodh,w,c
 20067  013318  6EF7               	movwf	tblptrh,c
 20068  01331A                     	if	1	;There are 3 active tblptr bytes
 20069  01331A  6AF8               	clrf	tblptru,c
 20070  01331C  0E00               	movlw	low (__mediumconst shr (0+16))
 20071  01331E  22F8               	addwfc	tblptru,f,c
 20072  013320                     	endif
 20073  013320  0008               	tblrd		*
 20074  013322  CFF5 F0BB          	movff	tablat,Byte_GetZone@MASK
 20075                           
 20076                           ; BSR set to: 0
 20077                           ;Types.c: 68: UINT8 Offset = 0;
 20078  013326  0E00               	movlw	0
 20079  013328  0100               	movlb	0	; () banked
 20080  01332A  6FBC               	movwf	Byte_GetZone@Offset& (0+255),b
 20081                           
 20082                           ;Types.c: 70: while (pChunk >= pMax)
 20083  01332C  D006               	goto	l732
 20084  01332E                     
 20085                           ; BSR set to: 0
 20086                           ;Types.c: 71: {
 20087                           ;Types.c: 72: pChunk -= pMax;
 20088                           
 20089                           ; BSR set to: 0
 20090  01332E  0100               	movlb	0	; () banked
 20091  013330  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 20092  013332  0100               	movlb	0	; () banked
 20093  013334  5FB8               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;Types.c: 73: Offset += 1;
 20097  013336  0100               	movlb	0	; () banked
 20098  013338  2BBC               	incf	Byte_GetZone@Offset& (0+255),f,b
 20099  01333A                     l732:
 20100                           
 20101                           ; BSR set to: 0
 20102                           
 20103                           ; BSR set to: 0
 20104  01333A  0100               	movlb	0	; () banked
 20105  01333C  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 20106  01333E  0100               	movlb	0	; () banked
 20107  013340  5DB8               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 20108  013342  B0D8               	btfsc	status,0,c
 20109  013344  D7F4               	goto	l733
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;Types.c: 74: }
 20113                           ;Types.c: 75: pChunk *= pChunkSize;
 20114                           
 20115                           ; BSR set to: 0
 20116  013346  0100               	movlb	0	; () banked
 20117  013348  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20118  01334A  0100               	movlb	0	; () banked
 20119  01334C  03B8               	mulwf	Byte_GetZone@pChunk& (0+255),b
 20120  01334E  50F3               	movf	prodl,w,c
 20121  013350  6FB8               	movwf	Byte_GetZone@pChunk& (0+255),b
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;Types.c: 76: pChunk += Offset;
 20125  013352  0100               	movlb	0	; () banked
 20126  013354  51BC               	movf	Byte_GetZone@Offset& (0+255),w,b
 20127  013356  0100               	movlb	0	; () banked
 20128  013358  27B8               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 20129                           
 20130                           ; BSR set to: 0
 20131                           ;Types.c: 78: Output >>= pChunk;
 20132  01335A  0100               	movlb	0	; () banked
 20133  01335C  29B8               	incf	Byte_GetZone@pChunk& (0+255),w,b
 20134  01335E  0100               	movlb	0	; () banked
 20135  013360  6FBA               	movwf	??_Byte_GetZone& (0+255),b
 20136  013362  D003               	goto	u6520
 20137  013364                     u6525:
 20138  013364  0100               	movlb	0	; () banked
 20139  013366  90D8               	bcf	status,0,c
 20140  013368  33BD               	rrcf	Byte_GetZone@Output& (0+255),f,b
 20141  01336A                     u6520:
 20142  01336A  0100               	movlb	0	; () banked
 20143  01336C  2FBA               	decfsz	??_Byte_GetZone& (0+255),f,b
 20144  01336E  D7FA               	goto	u6525
 20145                           
 20146                           ;Types.c: 79: Output &= MASK;
 20147  013370  0100               	movlb	0	; () banked
 20148  013372  51BB               	movf	Byte_GetZone@MASK& (0+255),w,b
 20149  013374  0100               	movlb	0	; () banked
 20150  013376  17BD               	andwf	Byte_GetZone@Output& (0+255),f,b
 20151                           
 20152                           ; BSR set to: 0
 20153                           ;Types.c: 80: return Output;
 20154  013378  0100               	movlb	0	; () banked
 20155  01337A  51BD               	movf	Byte_GetZone@Output& (0+255),w,b
 20156  01337C  0012               	return	
 20157  01337E                     __end_of_Byte_GetZone:
 20158                           	opt stack 0
 20159                           tosu	equ	0xFFF
 20160                           tosh	equ	0xFFE
 20161                           tosl	equ	0xFFD
 20162                           pclath	equ	0xFFA
 20163                           tblptru	equ	0xFF8
 20164                           tblptrh	equ	0xFF7
 20165                           tblptrl	equ	0xFF6
 20166                           tablat	equ	0xFF5
 20167                           prodh	equ	0xFF4
 20168                           prodl	equ	0xFF3
 20169                           intcon	equ	0xFF2
 20170                           indf0	equ	0xFEF
 20171                           postinc0	equ	0xFEE
 20172                           fsr0h	equ	0xFEA
 20173                           fsr0l	equ	0xFE9
 20174                           wreg	equ	0xFE8
 20175                           indf1	equ	0xFE7
 20176                           postdec1	equ	0xFE5
 20177                           fsr1h	equ	0xFE2
 20178                           fsr1l	equ	0xFE1
 20179                           indf2	equ	0xFDF
 20180                           postinc2	equ	0xFDE
 20181                           postdec2	equ	0xFDD
 20182                           plusw2	equ	0xFDB
 20183                           fsr2h	equ	0xFDA
 20184                           fsr2l	equ	0xFD9
 20185                           status	equ	0xFD8
 20186                           
 20187 ;; *************** function _Byte_SetQuad *****************
 20188 ;; Defined at:
 20189 ;;		line 101 in file "Library/Types.c"
 20190 ;; Parameters:    Size  Location     Type
 20191 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 20192 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 20193 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20194 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20195 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20196 ;;		 -> NULL(0), 
 20197 ;;  pQuad           1   13[BANK0 ] unsigned char 
 20198 ;;  pValue          1   14[BANK0 ] unsigned char 
 20199 ;; Auto vars:     Size  Location     Type
 20200 ;;		None
 20201 ;; Return value:  Size  Location     Type
 20202 ;;                  1    wreg      void 
 20203 ;; Registers used:
 20204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20205 ;; Tracked objects:
 20206 ;;		On entry : 0/0
 20207 ;;		On exit  : 0/0
 20208 ;;		Unchanged: 0/0
 20209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20210 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20214 ;;Total ram usage:        4 bytes
 20215 ;; Hardware stack levels used:    1
 20216 ;; Hardware stack levels required when called:    8
 20217 ;; This function calls:
 20218 ;;		_Byte_SetZone
 20219 ;; This function is called by:
 20220 ;;		_Port_SetQuadType
 20221 ;;		_SPI_Init
 20222 ;;		_SPI_MinSpeed
 20223 ;;		_SPI_MaxSpeed
 20224 ;;		_Port_SetQuad
 20225 ;;		_Word_SetQuad
 20226 ;;		_I2C_Init
 20227 ;; This function uses a non-reentrant model
 20228 ;;
 20229                           
 20230                           	psect	text111
 20231  014686                     __ptext111:
 20232                           	opt stack 0
 20233  014686                     _Byte_SetQuad:
 20234                           	opt stack 20
 20235                           
 20236                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;incstack = 0
 20240  014686  C0C0  F0B5         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 20241  01468A  C0C1  F0B6         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 20242  01468E  0E02               	movlw	2
 20243  014690  0100               	movlb	0	; () banked
 20244  014692  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 20245  014694  C0C2  F0B8         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 20246  014698  0E04               	movlw	4
 20247  01469A  0100               	movlb	0	; () banked
 20248  01469C  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 20249  01469E  C0C3  F0BA         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 20250  0146A2  EC21  F096         	call	_Byte_SetZone	;wreg free
 20251  0146A6  0012               	return		;funcret
 20252  0146A8                     __end_of_Byte_SetQuad:
 20253                           	opt stack 0
 20254                           tosu	equ	0xFFF
 20255                           tosh	equ	0xFFE
 20256                           tosl	equ	0xFFD
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           indf0	equ	0xFEF
 20266                           postinc0	equ	0xFEE
 20267                           fsr0h	equ	0xFEA
 20268                           fsr0l	equ	0xFE9
 20269                           wreg	equ	0xFE8
 20270                           indf1	equ	0xFE7
 20271                           postdec1	equ	0xFE5
 20272                           fsr1h	equ	0xFE2
 20273                           fsr1l	equ	0xFE1
 20274                           indf2	equ	0xFDF
 20275                           postinc2	equ	0xFDE
 20276                           postdec2	equ	0xFDD
 20277                           plusw2	equ	0xFDB
 20278                           fsr2h	equ	0xFDA
 20279                           fsr2l	equ	0xFD9
 20280                           status	equ	0xFD8
 20281                           
 20282 ;; *************** function _Byte_SetZone *****************
 20283 ;; Defined at:
 20284 ;;		line 47 in file "Library/Types.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20287 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 20288 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 20289 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 20290 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 20291 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20292 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20293 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20294 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20295 ;;  pMax            1    2[BANK0 ] unsigned char 
 20296 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20297 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20298 ;;  pValue          1    5[BANK0 ] unsigned char 
 20299 ;; Auto vars:     Size  Location     Type
 20300 ;;  MASK            1   10[BANK0 ] unsigned char 
 20301 ;;  Offset          1    9[BANK0 ] unsigned char 
 20302 ;; Return value:  Size  Location     Type
 20303 ;;                  1    wreg      void 
 20304 ;; Registers used:
 20305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20306 ;; Tracked objects:
 20307 ;;		On entry : 0/0
 20308 ;;		On exit  : 0/0
 20309 ;;		Unchanged: 0/0
 20310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20311 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20313 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20314 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20315 ;;Total ram usage:       11 bytes
 20316 ;; Hardware stack levels used:    1
 20317 ;; Hardware stack levels required when called:    7
 20318 ;; This function calls:
 20319 ;;		Nothing
 20320 ;; This function is called by:
 20321 ;;		_Byte_SetPair
 20322 ;;		_Byte_SetQuad
 20323 ;;		_Byte_SetTriple
 20324 ;; This function uses a non-reentrant model
 20325 ;;
 20326                           
 20327                           	psect	text112
 20328  012C42                     __ptext112:
 20329                           	opt stack 0
 20330  012C42                     _Byte_SetZone:
 20331                           	opt stack 19
 20332                           
 20333                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 20334                           
 20335                           ;incstack = 0
 20336  012C42  0100               	movlb	0	; () banked
 20337  012C44  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20338  012C46  0D01               	mullw	1
 20339  012C48  0EA9               	movlw	low _MASKS
 20340  012C4A  24F3               	addwf	prodl,w,c
 20341  012C4C  6EF6               	movwf	tblptrl,c
 20342  012C4E  0EFD               	movlw	high _MASKS
 20343  012C50  20F4               	addwfc	prodh,w,c
 20344  012C52  6EF7               	movwf	tblptrh,c
 20345  012C54                     	if	1	;There are 3 active tblptr bytes
 20346  012C54  6AF8               	clrf	tblptru,c
 20347  012C56  0E00               	movlw	low (__mediumconst shr (0+16))
 20348  012C58  22F8               	addwfc	tblptru,f,c
 20349  012C5A                     	endif
 20350  012C5A  0008               	tblrd		*
 20351  012C5C  CFF5 F0BF          	movff	tablat,Byte_SetZone@MASK
 20352                           
 20353                           ; BSR set to: 0
 20354                           ;Types.c: 50: UINT8 Offset = 0;
 20355  012C60  0E00               	movlw	0
 20356  012C62  0100               	movlb	0	; () banked
 20357  012C64  6FBE               	movwf	Byte_SetZone@Offset& (0+255),b
 20358                           
 20359                           ;Types.c: 52: while (pChunk >= pMax)
 20360  012C66  D006               	goto	l726
 20361  012C68                     
 20362                           ; BSR set to: 0
 20363                           ;Types.c: 53: {
 20364                           ;Types.c: 54: pChunk -= pMax;
 20365                           
 20366                           ; BSR set to: 0
 20367  012C68  0100               	movlb	0	; () banked
 20368  012C6A  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 20369  012C6C  0100               	movlb	0	; () banked
 20370  012C6E  5FB8               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;Types.c: 55: Offset += 1;
 20374  012C70  0100               	movlb	0	; () banked
 20375  012C72  2BBE               	incf	Byte_SetZone@Offset& (0+255),f,b
 20376  012C74                     l726:
 20377                           
 20378                           ; BSR set to: 0
 20379                           
 20380                           ; BSR set to: 0
 20381  012C74  0100               	movlb	0	; () banked
 20382  012C76  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 20383  012C78  0100               	movlb	0	; () banked
 20384  012C7A  5DB8               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 20385  012C7C  B0D8               	btfsc	status,0,c
 20386  012C7E  D7F4               	goto	l727
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;Types.c: 56: }
 20390                           ;Types.c: 57: pChunk *= pChunkSize;
 20391                           
 20392                           ; BSR set to: 0
 20393  012C80  0100               	movlb	0	; () banked
 20394  012C82  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20395  012C84  0100               	movlb	0	; () banked
 20396  012C86  03B8               	mulwf	Byte_SetZone@pChunk& (0+255),b
 20397  012C88  50F3               	movf	prodl,w,c
 20398  012C8A  6FB8               	movwf	Byte_SetZone@pChunk& (0+255),b
 20399                           
 20400                           ; BSR set to: 0
 20401                           ;Types.c: 58: pChunk += Offset;
 20402  012C8C  0100               	movlb	0	; () banked
 20403  012C8E  51BE               	movf	Byte_SetZone@Offset& (0+255),w,b
 20404  012C90  0100               	movlb	0	; () banked
 20405  012C92  27B8               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 20406                           
 20407                           ; BSR set to: 0
 20408                           ;Types.c: 60: pValue &= MASK;
 20409  012C94  0100               	movlb	0	; () banked
 20410  012C96  51BF               	movf	Byte_SetZone@MASK& (0+255),w,b
 20411  012C98  0100               	movlb	0	; () banked
 20412  012C9A  17BA               	andwf	Byte_SetZone@pValue& (0+255),f,b
 20413                           
 20414                           ; BSR set to: 0
 20415                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 20416  012C9C  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20417  012CA0  C0BF  F0BC         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 20418  012CA4  0100               	movlb	0	; () banked
 20419  012CA6  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 20420  012CA8  D003               	goto	u6604
 20421  012CAA                     u6605:
 20422  012CAA  0100               	movlb	0	; () banked
 20423  012CAC  90D8               	bcf	status,0,c
 20424  012CAE  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20425  012CB0                     u6604:
 20426  012CB0  0100               	movlb	0	; () banked
 20427  012CB2  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 20428  012CB4  D7FA               	goto	u6605
 20429  012CB6  0100               	movlb	0	; () banked
 20430  012CB8  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20431  012CBA  0AFF               	xorlw	255
 20432  012CBC  0100               	movlb	0	; () banked
 20433  012CBE  6FBD               	movwf	(??_Byte_SetZone+2)& (0+255),b
 20434  012CC0  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20435  012CC4  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20436  012CC8  0100               	movlb	0	; () banked
 20437  012CCA  51BD               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 20438  012CCC  16DF               	andwf	indf2,f,c
 20439                           
 20440                           ; BSR set to: 0
 20441                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 20442  012CCE  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20443  012CD2  C0BA  F0BC         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 20444  012CD6  0100               	movlb	0	; () banked
 20445  012CD8  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 20446  012CDA  D003               	goto	u6614
 20447  012CDC                     u6615:
 20448  012CDC  0100               	movlb	0	; () banked
 20449  012CDE  90D8               	bcf	status,0,c
 20450  012CE0  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20451  012CE2                     u6614:
 20452  012CE2  0100               	movlb	0	; () banked
 20453  012CE4  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 20454  012CE6  D7FA               	goto	u6615
 20455  012CE8  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20456  012CEC  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20457  012CF0  0100               	movlb	0	; () banked
 20458  012CF2  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20459  012CF4  12DF               	iorwf	indf2,f,c
 20460                           
 20461                           ; BSR set to: 0
 20462  012CF6  0012               	return		;funcret
 20463  012CF8                     __end_of_Byte_SetZone:
 20464                           	opt stack 0
 20465                           tosu	equ	0xFFF
 20466                           tosh	equ	0xFFE
 20467                           tosl	equ	0xFFD
 20468                           pclath	equ	0xFFA
 20469                           tblptru	equ	0xFF8
 20470                           tblptrh	equ	0xFF7
 20471                           tblptrl	equ	0xFF6
 20472                           tablat	equ	0xFF5
 20473                           prodh	equ	0xFF4
 20474                           prodl	equ	0xFF3
 20475                           intcon	equ	0xFF2
 20476                           indf0	equ	0xFEF
 20477                           postinc0	equ	0xFEE
 20478                           fsr0h	equ	0xFEA
 20479                           fsr0l	equ	0xFE9
 20480                           wreg	equ	0xFE8
 20481                           indf1	equ	0xFE7
 20482                           postdec1	equ	0xFE5
 20483                           fsr1h	equ	0xFE2
 20484                           fsr1l	equ	0xFE1
 20485                           indf2	equ	0xFDF
 20486                           postinc2	equ	0xFDE
 20487                           postdec2	equ	0xFDD
 20488                           plusw2	equ	0xFDB
 20489                           fsr2h	equ	0xFDA
 20490                           fsr2l	equ	0xFD9
 20491                           status	equ	0xFD8
 20492                           
 20493 ;; *************** function _Console_Render *****************
 20494 ;; Defined at:
 20495 ;;		line 377 in file "Library/Console.c"
 20496 ;; Parameters:    Size  Location     Type
 20497 ;;		None
 20498 ;; Auto vars:     Size  Location     Type
 20499 ;;  lCursor         4   38[BANK0 ] struct Point
 20500 ;;  y               1   43[BANK0 ] unsigned char 
 20501 ;;  x               1   42[BANK0 ] unsigned char 
 20502 ;;  temp            1   37[BANK0 ] unsigned char 
 20503 ;;  Temp            2    0        unsigned short 
 20504 ;; Return value:  Size  Location     Type
 20505 ;;                  1    wreg      void 
 20506 ;; Registers used:
 20507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20508 ;; Tracked objects:
 20509 ;;		On entry : 0/0
 20510 ;;		On exit  : 0/0
 20511 ;;		Unchanged: 0/0
 20512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20516 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20517 ;;Total ram usage:        9 bytes
 20518 ;; Hardware stack levels used:    1
 20519 ;; Hardware stack levels required when called:   11
 20520 ;; This function calls:
 20521 ;;		_Console_MakeField
 20522 ;;		_LCD_DrawField
 20523 ;;		_LCD_FillRectangle
 20524 ;; This function is called by:
 20525 ;;		_main
 20526 ;; This function uses a non-reentrant model
 20527 ;;
 20528                           
 20529                           	psect	text113
 20530  0110FC                     __ptext113:
 20531                           	opt stack 0
 20532  0110FC                     _Console_Render:
 20533                           	opt stack 19
 20534                           
 20535                           ;Console.c: 379: Colour Temp;
 20536                           ;Console.c: 380: if (change)
 20537                           
 20538                           ; BSR set to: 0
 20539                           ;incstack = 0
 20540  0110FC  0100               	movlb	0	; () banked
 20541  0110FE  51FF               	movf	_change& (0+255),w,b
 20542  011100  B4D8               	btfsc	status,2,c
 20543  011102  0012               	return	
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;Console.c: 381: {
 20547                           ;Console.c: 382: UINT8 x, y, temp;
 20548                           ;Console.c: 383: Point lCursor = {6,6};
 20549  011104  C3D5  F0DB         	movff	Console_Render@F6956,Console_Render@lCursor
 20550  011108  C3D6  F0DC         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20551  01110C  C3D7  F0DD         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20552  011110  C3D8  F0DE         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;Console.c: 385: if (clearall)
 20556  011114  0100               	movlb	0	; () banked
 20557  011116  518E               	movf	_clearall& (0+255),w,b
 20558  011118  B4D8               	btfsc	status,2,c
 20559  01111A  D005               	goto	l1056
 20560                           
 20561                           ; BSR set to: 0
 20562                           ;Console.c: 386: {
 20563                           ;Console.c: 389: temp = lBufferY;
 20564  01111C  C08C  F0DA         	movff	_lBufferY,Console_Render@temp
 20565                           
 20566                           ; BSR set to: 0
 20567                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20568  011120  0E0F               	movlw	15
 20569  011122  0100               	movlb	0	; () banked
 20570  011124  6F8C               	movwf	_lBufferY& (0+255),b
 20571  011126                     l1056:
 20572                           
 20573                           ; BSR set to: 0
 20574                           ;Console.c: 391: }
 20575                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20576  011126  0E00               	movlw	0
 20577  011128  0100               	movlb	0	; () banked
 20578  01112A  6FE0               	movwf	Console_Render@y& (0+255),b
 20579  01112C  D0DF               	goto	l1057
 20580  01112E                     
 20581                           ; BSR set to: 0
 20582                           ;Console.c: 394: {
 20583                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20584                           
 20585                           ; BSR set to: 0
 20586  01112E  0100               	movlb	0	; () banked
 20587  011130  51E0               	movf	Console_Render@y& (0+255),w,b
 20588  011132  0D02               	mullw	2
 20589  011134  0E00               	movlw	low _lCBuffer
 20590  011136  24F3               	addwf	prodl,w,c
 20591  011138  6ED9               	movwf	fsr2l,c
 20592  01113A  0E03               	movlw	high _lCBuffer
 20593  01113C  20F4               	addwfc	prodh,w,c
 20594  01113E  6EDA               	movwf	fsr2h,c
 20595  011140  CFDE F0FD          	movff	postinc2,_gForecolour
 20596  011144  CFDD F0FE          	movff	postdec2,_gForecolour+1
 20597                           
 20598                           ; BSR set to: 0
 20599                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20600  011148  0E00               	movlw	0
 20601  01114A  0100               	movlb	0	; () banked
 20602  01114C  6FDF               	movwf	Console_Render@x& (0+255),b
 20603  01114E                     l12262:
 20604                           
 20605                           ; BSR set to: 0
 20606  01114E  0E13               	movlw	19
 20607  011150  0100               	movlb	0	; () banked
 20608  011152  65DF               	cpfsgt	Console_Render@x& (0+255),b
 20609  011154  D001               	goto	l1059
 20610  011156  D0BE               	goto	u8260
 20611  011158                     l1059:
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;Console.c: 397: {
 20615                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20616                           
 20617                           ; BSR set to: 0
 20618  011158  0100               	movlb	0	; () banked
 20619  01115A  51E0               	movf	Console_Render@y& (0+255),w,b
 20620  01115C  0D14               	mullw	20
 20621  01115E  0EAA               	movlw	low _lBuffer
 20622  011160  0100               	movlb	0	; () banked
 20623  011162  6FD8               	movwf	??_Console_Render& (0+255),b
 20624  011164  0E04               	movlw	high _lBuffer
 20625  011166  0100               	movlb	0	; () banked
 20626  011168  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20627  01116A  50F3               	movf	prodl,w,c
 20628  01116C  0100               	movlb	0	; () banked
 20629  01116E  27D8               	addwf	??_Console_Render& (0+255),f,b
 20630  011170  50F4               	movf	prodh,w,c
 20631  011172  0100               	movlb	0	; () banked
 20632  011174  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20633  011176  0100               	movlb	0	; () banked
 20634  011178  51DF               	movf	Console_Render@x& (0+255),w,b
 20635  01117A  0D01               	mullw	1
 20636  01117C  50F3               	movf	prodl,w,c
 20637  01117E  0100               	movlb	0	; () banked
 20638  011180  25D8               	addwf	??_Console_Render& (0+255),w,b
 20639  011182  6ED9               	movwf	fsr2l,c
 20640  011184  50F4               	movf	prodh,w,c
 20641  011186  0100               	movlb	0	; () banked
 20642  011188  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20643  01118A  6EDA               	movwf	fsr2h,c
 20644  01118C  AEDF               	btfss	indf2,7,c
 20645  01118E  D09A               	goto	l1063
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;Console.c: 399: {
 20649                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20650  011190  0100               	movlb	0	; () banked
 20651  011192  51E0               	movf	Console_Render@y& (0+255),w,b
 20652  011194  0D14               	mullw	20
 20653  011196  0EAA               	movlw	low _lBuffer
 20654  011198  0100               	movlb	0	; () banked
 20655  01119A  6FD8               	movwf	??_Console_Render& (0+255),b
 20656  01119C  0E04               	movlw	high _lBuffer
 20657  01119E  0100               	movlb	0	; () banked
 20658  0111A0  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20659  0111A2  50F3               	movf	prodl,w,c
 20660  0111A4  0100               	movlb	0	; () banked
 20661  0111A6  27D8               	addwf	??_Console_Render& (0+255),f,b
 20662  0111A8  50F4               	movf	prodh,w,c
 20663  0111AA  0100               	movlb	0	; () banked
 20664  0111AC  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20665  0111AE  0100               	movlb	0	; () banked
 20666  0111B0  51DF               	movf	Console_Render@x& (0+255),w,b
 20667  0111B2  0D01               	mullw	1
 20668  0111B4  50F3               	movf	prodl,w,c
 20669  0111B6  0100               	movlb	0	; () banked
 20670  0111B8  25D8               	addwf	??_Console_Render& (0+255),w,b
 20671  0111BA  6ED9               	movwf	fsr2l,c
 20672  0111BC  50F4               	movf	prodh,w,c
 20673  0111BE  0100               	movlb	0	; () banked
 20674  0111C0  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20675  0111C2  6EDA               	movwf	fsr2h,c
 20676  0111C4  0E7F               	movlw	127
 20677  0111C6  16DF               	andwf	indf2,f,c
 20678                           
 20679                           ;Console.c: 401: if (lBuffer[y][x])
 20680  0111C8  0100               	movlb	0	; () banked
 20681  0111CA  51E0               	movf	Console_Render@y& (0+255),w,b
 20682  0111CC  0D14               	mullw	20
 20683  0111CE  0EAA               	movlw	low _lBuffer
 20684  0111D0  0100               	movlb	0	; () banked
 20685  0111D2  6FD8               	movwf	??_Console_Render& (0+255),b
 20686  0111D4  0E04               	movlw	high _lBuffer
 20687  0111D6  0100               	movlb	0	; () banked
 20688  0111D8  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20689  0111DA  50F3               	movf	prodl,w,c
 20690  0111DC  0100               	movlb	0	; () banked
 20691  0111DE  27D8               	addwf	??_Console_Render& (0+255),f,b
 20692  0111E0  50F4               	movf	prodh,w,c
 20693  0111E2  0100               	movlb	0	; () banked
 20694  0111E4  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20695  0111E6  0100               	movlb	0	; () banked
 20696  0111E8  51DF               	movf	Console_Render@x& (0+255),w,b
 20697  0111EA  0D01               	mullw	1
 20698  0111EC  50F3               	movf	prodl,w,c
 20699  0111EE  0100               	movlb	0	; () banked
 20700  0111F0  25D8               	addwf	??_Console_Render& (0+255),w,b
 20701  0111F2  6ED9               	movwf	fsr2l,c
 20702  0111F4  50F4               	movf	prodh,w,c
 20703  0111F6  0100               	movlb	0	; () banked
 20704  0111F8  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20705  0111FA  6EDA               	movwf	fsr2h,c
 20706  0111FC  50DF               	movf	indf2,w,c
 20707  0111FE  B4D8               	btfsc	status,2,c
 20708  011200  D04A               	goto	l1062
 20709                           
 20710                           ; BSR set to: 0
 20711                           ;Console.c: 402: {
 20712                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20713  011202  C081  F0BE         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20714  011206  C082  F0BF         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20715  01120A  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20716  01120E  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20717  011212  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20718  011216  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20719  01121A  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 20720  01121E  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20721  011222  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20722  011226  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20723  01122A  EC89  F09C         	call	_LCD_FillRectangle	;wreg free
 20724                           
 20725                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20726  01122E  0100               	movlb	0	; () banked
 20727  011230  51E0               	movf	Console_Render@y& (0+255),w,b
 20728  011232  0D14               	mullw	20
 20729  011234  0EAA               	movlw	low _lBuffer
 20730  011236  0100               	movlb	0	; () banked
 20731  011238  6FD8               	movwf	??_Console_Render& (0+255),b
 20732  01123A  0E04               	movlw	high _lBuffer
 20733  01123C  0100               	movlb	0	; () banked
 20734  01123E  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20735  011240  50F3               	movf	prodl,w,c
 20736  011242  0100               	movlb	0	; () banked
 20737  011244  27D8               	addwf	??_Console_Render& (0+255),f,b
 20738  011246  50F4               	movf	prodh,w,c
 20739  011248  0100               	movlb	0	; () banked
 20740  01124A  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20741  01124C  0100               	movlb	0	; () banked
 20742  01124E  51DF               	movf	Console_Render@x& (0+255),w,b
 20743  011250  0D01               	mullw	1
 20744  011252  50F3               	movf	prodl,w,c
 20745  011254  0100               	movlb	0	; () banked
 20746  011256  25D8               	addwf	??_Console_Render& (0+255),w,b
 20747  011258  6ED9               	movwf	fsr2l,c
 20748  01125A  50F4               	movf	prodh,w,c
 20749  01125C  0100               	movlb	0	; () banked
 20750  01125E  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20751  011260  6EDA               	movwf	fsr2h,c
 20752  011262  50DF               	movf	indf2,w,c
 20753  011264  ECDC  F093         	call	_Console_MakeField
 20754  011268  C0BA  F0C7         	movff	?_Console_MakeField,LCD_DrawField@pField
 20755  01126C  C0BB  F0C8         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20756  011270  C0DB  F0C9         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20757  011274  C0DC  F0CA         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20758  011278  C0DD  F0CB         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20759  01127C  C0DE  F0CC         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20760  011280  C0F9  F0CD         	movff	_gCharSize,LCD_DrawField@pSize
 20761  011284  C0FA  F0CE         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20762  011288  C0FB  F0CF         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20763  01128C  C0FC  F0D0         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20764  011290  ECCE  F098         	call	_LCD_DrawField	;wreg free
 20765                           
 20766                           ;Console.c: 405: }
 20767  011294  D017               	goto	l1063
 20768  011296                     l1062:
 20769                           
 20770                           ;Console.c: 406: else
 20771                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20772  011296  0E00               	movlw	0
 20773  011298  0100               	movlb	0	; () banked
 20774  01129A  6FBF               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20775  01129C  0E00               	movlw	0
 20776  01129E  6FBE               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20777  0112A0  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20778  0112A4  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20779  0112A8  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20780  0112AC  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20781  0112B0  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 20782  0112B4  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20783  0112B8  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20784  0112BC  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20785  0112C0  EC89  F09C         	call	_LCD_FillRectangle	;wreg free
 20786  0112C4                     l1063:
 20787                           
 20788                           ;Console.c: 408: }
 20789                           ;Console.c: 409: lCursor.x += (5 + 1);
 20790  0112C4  0E06               	movlw	6
 20791  0112C6  0100               	movlb	0	; () banked
 20792  0112C8  27DB               	addwf	Console_Render@lCursor& (0+255),f,b
 20793  0112CA  0E00               	movlw	0
 20794  0112CC  23DC               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20795                           
 20796                           ; BSR set to: 0
 20797  0112CE  0100               	movlb	0	; () banked
 20798  0112D0  2BDF               	incf	Console_Render@x& (0+255),f,b
 20799  0112D2  D73D               	goto	l12262
 20800  0112D4                     u8260:
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;Console.c: 410: }
 20804                           ;Console.c: 411: lCursor.y += (7 + 1);
 20805                           
 20806                           ; BSR set to: 0
 20807  0112D4  0E08               	movlw	8
 20808  0112D6  0100               	movlb	0	; () banked
 20809  0112D8  27DD               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20810  0112DA  0E00               	movlw	0
 20811  0112DC  23DE               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20812                           
 20813                           ; BSR set to: 0
 20814                           ;Console.c: 412: lCursor.x = 6;
 20815  0112DE  0E00               	movlw	0
 20816  0112E0  0100               	movlb	0	; () banked
 20817  0112E2  6FDC               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20818  0112E4  0E06               	movlw	6
 20819  0112E6  6FDB               	movwf	Console_Render@lCursor& (0+255),b
 20820                           
 20821                           ; BSR set to: 0
 20822  0112E8  0100               	movlb	0	; () banked
 20823  0112EA  2BE0               	incf	Console_Render@y& (0+255),f,b
 20824  0112EC                     l1057:
 20825                           
 20826                           ; BSR set to: 0
 20827                           
 20828                           ; BSR set to: 0
 20829  0112EC  0100               	movlb	0	; () banked
 20830  0112EE  51E0               	movf	Console_Render@y& (0+255),w,b
 20831  0112F0  0100               	movlb	0	; () banked
 20832  0112F2  5D8C               	subwf	_lBufferY& (0+255),w,b
 20833  0112F4  B0D8               	btfsc	status,0,c
 20834  0112F6  D71B               	goto	l1058
 20835                           
 20836                           ; BSR set to: 0
 20837                           ;Console.c: 413: }
 20838                           ;Console.c: 415: if (clearall)
 20839                           
 20840                           ; BSR set to: 0
 20841  0112F8  0100               	movlb	0	; () banked
 20842  0112FA  518E               	movf	_clearall& (0+255),w,b
 20843  0112FC  B4D8               	btfsc	status,2,c
 20844  0112FE  0012               	return	
 20845                           
 20846                           ; BSR set to: 0
 20847                           ;Console.c: 416: {
 20848                           ;Console.c: 417: clearall = 0;
 20849  011300  0E00               	movlw	0
 20850  011302  0100               	movlb	0	; () banked
 20851  011304  6F8E               	movwf	_clearall& (0+255),b
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;Console.c: 418: lBufferY = temp;
 20855  011306  C0DA  F08C         	movff	Console_Render@temp,_lBufferY
 20856                           
 20857                           ; BSR set to: 0
 20858  01130A  0012               	return	
 20859  01130C                     __end_of_Console_Render:
 20860                           	opt stack 0
 20861                           tosu	equ	0xFFF
 20862                           tosh	equ	0xFFE
 20863                           tosl	equ	0xFFD
 20864                           pclath	equ	0xFFA
 20865                           tblptru	equ	0xFF8
 20866                           tblptrh	equ	0xFF7
 20867                           tblptrl	equ	0xFF6
 20868                           tablat	equ	0xFF5
 20869                           prodh	equ	0xFF4
 20870                           prodl	equ	0xFF3
 20871                           intcon	equ	0xFF2
 20872                           indf0	equ	0xFEF
 20873                           postinc0	equ	0xFEE
 20874                           fsr0h	equ	0xFEA
 20875                           fsr0l	equ	0xFE9
 20876                           wreg	equ	0xFE8
 20877                           indf1	equ	0xFE7
 20878                           postdec1	equ	0xFE5
 20879                           fsr1h	equ	0xFE2
 20880                           fsr1l	equ	0xFE1
 20881                           indf2	equ	0xFDF
 20882                           postinc2	equ	0xFDE
 20883                           postdec2	equ	0xFDD
 20884                           plusw2	equ	0xFDB
 20885                           fsr2h	equ	0xFDA
 20886                           fsr2l	equ	0xFD9
 20887                           status	equ	0xFD8
 20888                           
 20889 ;; *************** function _LCD_FillRectangle *****************
 20890 ;; Defined at:
 20891 ;;		line 318 in file "Library/LCD.c"
 20892 ;; Parameters:    Size  Location     Type
 20893 ;;  pColour         2    9[BANK0 ] unsigned short 
 20894 ;;  pPoint          4   11[BANK0 ] struct Point
 20895 ;;  pSize           4   15[BANK0 ] struct Point
 20896 ;; Auto vars:     Size  Location     Type
 20897 ;;  j               1   22[BANK0 ] unsigned char 
 20898 ;;  i               1   21[BANK0 ] unsigned char 
 20899 ;; Return value:  Size  Location     Type
 20900 ;;                  1    wreg      void 
 20901 ;; Registers used:
 20902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20903 ;; Tracked objects:
 20904 ;;		On entry : 0/0
 20905 ;;		On exit  : 0/0
 20906 ;;		Unchanged: 0/0
 20907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20908 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;Total ram usage:       14 bytes
 20913 ;; Hardware stack levels used:    1
 20914 ;; Hardware stack levels required when called:   10
 20915 ;; This function calls:
 20916 ;;		_LCD_Word_Write
 20917 ;;		_Set_Addr_Window
 20918 ;; This function is called by:
 20919 ;;		_Console_Render
 20920 ;;		_Console_ClearLine
 20921 ;; This function uses a non-reentrant model
 20922 ;;
 20923                           
 20924                           	psect	text114
 20925  013912                     __ptext114:
 20926                           	opt stack 0
 20927  013912                     _LCD_FillRectangle:
 20928                           	opt stack 19
 20929                           
 20930                           ;LCD.c: 320: UINT8 i = 0x00;
 20931                           
 20932                           ; BSR set to: 0
 20933                           ;incstack = 0
 20934  013912  0E00               	movlw	0
 20935  013914  0100               	movlb	0	; () banked
 20936  013916  6FCA               	movwf	LCD_FillRectangle@i& (0+255),b
 20937                           
 20938                           ;LCD.c: 321: UINT8 j = 0x00;
 20939  013918  0E00               	movlw	0
 20940  01391A  0100               	movlb	0	; () banked
 20941  01391C  6FCB               	movwf	LCD_FillRectangle@j& (0+255),b
 20942                           
 20943                           ; BSR set to: 0
 20944                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20945  01391E  C0C2  F0BA         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20946  013922  0100               	movlb	0	; () banked
 20947  013924  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20948  013926  0100               	movlb	0	; () banked
 20949  013928  25C4               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20950  01392A  0100               	movlb	0	; () banked
 20951  01392C  6FC8               	movwf	??_LCD_FillRectangle& (0+255),b
 20952  01392E  0100               	movlb	0	; () banked
 20953  013930  05C8               	decf	??_LCD_FillRectangle& (0+255),w,b
 20954  013932  0100               	movlb	0	; () banked
 20955  013934  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 20956  013936  0100               	movlb	0	; () banked
 20957  013938  51C2               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20958  01393A  0100               	movlb	0	; () banked
 20959  01393C  25C6               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20960  01393E  0100               	movlb	0	; () banked
 20961  013940  6FC9               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20962  013942  0100               	movlb	0	; () banked
 20963  013944  05C9               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20964  013946  0100               	movlb	0	; () banked
 20965  013948  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 20966  01394A  0100               	movlb	0	; () banked
 20967  01394C  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20968  01394E  EC2B  F097         	call	_Set_Addr_Window
 20969                           
 20970                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20971  013952  C0C6  F0CB         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20972  013956                     l11826:
 20973  013956  0100               	movlb	0	; () banked
 20974  013958  51CB               	movf	LCD_FillRectangle@j& (0+255),w,b
 20975  01395A  0100               	movlb	0	; () banked
 20976  01395C  B4D8               	btfsc	status,2,c
 20977  01395E  0012               	return	
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20981                           
 20982                           ; BSR set to: 0
 20983  013960  C0C4  F0CA         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20984  013964                     l11830:
 20985                           
 20986                           ; BSR set to: 0
 20987  013964  0100               	movlb	0	; () banked
 20988  013966  51CA               	movf	LCD_FillRectangle@i& (0+255),w,b
 20989  013968  0100               	movlb	0	; () banked
 20990  01396A  B4D8               	btfsc	status,2,c
 20991  01396C  D009               	goto	u7720
 20992                           
 20993                           ; BSR set to: 0
 20994                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20995                           
 20996                           ; BSR set to: 0
 20997                           
 20998                           ; BSR set to: 0
 20999  01396E  C0BE  F0BA         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 21000  013972  C0BF  F0BB         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 21001  013976  ECDE  F0A3         	call	_LCD_Word_Write	;wreg free
 21002  01397A  0100               	movlb	0	; () banked
 21003  01397C  07CA               	decf	LCD_FillRectangle@i& (0+255),f,b
 21004  01397E  D7F2               	goto	l11830
 21005  013980                     u7720:
 21006                           
 21007                           ; BSR set to: 0
 21008                           
 21009                           ; BSR set to: 0
 21010  013980  0100               	movlb	0	; () banked
 21011  013982  07CB               	decf	LCD_FillRectangle@j& (0+255),f,b
 21012  013984  D7E8               	goto	l11826
 21013  013986                     __end_of_LCD_FillRectangle:
 21014                           	opt stack 0
 21015                           tosu	equ	0xFFF
 21016                           tosh	equ	0xFFE
 21017                           tosl	equ	0xFFD
 21018                           pclath	equ	0xFFA
 21019                           tblptru	equ	0xFF8
 21020                           tblptrh	equ	0xFF7
 21021                           tblptrl	equ	0xFF6
 21022                           tablat	equ	0xFF5
 21023                           prodh	equ	0xFF4
 21024                           prodl	equ	0xFF3
 21025                           intcon	equ	0xFF2
 21026                           indf0	equ	0xFEF
 21027                           postinc0	equ	0xFEE
 21028                           fsr0h	equ	0xFEA
 21029                           fsr0l	equ	0xFE9
 21030                           wreg	equ	0xFE8
 21031                           indf1	equ	0xFE7
 21032                           postdec1	equ	0xFE5
 21033                           fsr1h	equ	0xFE2
 21034                           fsr1l	equ	0xFE1
 21035                           indf2	equ	0xFDF
 21036                           postinc2	equ	0xFDE
 21037                           postdec2	equ	0xFDD
 21038                           plusw2	equ	0xFDB
 21039                           fsr2h	equ	0xFDA
 21040                           fsr2l	equ	0xFD9
 21041                           status	equ	0xFD8
 21042                           
 21043 ;; *************** function _LCD_DrawField *****************
 21044 ;; Defined at:
 21045 ;;		line 393 in file "Library/LCD.c"
 21046 ;; Parameters:    Size  Location     Type
 21047 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 21048 ;;		 -> Console_MakeField@Fill(70), 
 21049 ;;  pPoint          4   20[BANK0 ] struct Point
 21050 ;;  pSize           4   24[BANK0 ] struct Point
 21051 ;; Auto vars:     Size  Location     Type
 21052 ;;  count           2   30[BANK0 ] unsigned short 
 21053 ;;  i               1   34[BANK0 ] unsigned char 
 21054 ;;  ymax            1   33[BANK0 ] unsigned char 
 21055 ;;  xmax            1   32[BANK0 ] unsigned char 
 21056 ;; Return value:  Size  Location     Type
 21057 ;;                  1    wreg      void 
 21058 ;; Registers used:
 21059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21060 ;; Tracked objects:
 21061 ;;		On entry : 0/0
 21062 ;;		On exit  : 0/0
 21063 ;;		Unchanged: 0/0
 21064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21065 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21069 ;;Total ram usage:       17 bytes
 21070 ;; Hardware stack levels used:    1
 21071 ;; Hardware stack levels required when called:   10
 21072 ;; This function calls:
 21073 ;;		_LCD_Word_Write
 21074 ;;		_Set_Addr_Window
 21075 ;;		___wmul
 21076 ;; This function is called by:
 21077 ;;		_Console_Render
 21078 ;; This function uses a non-reentrant model
 21079 ;;
 21080                           
 21081                           	psect	text115
 21082  01319C                     __ptext115:
 21083                           	opt stack 0
 21084  01319C                     _LCD_DrawField:
 21085                           	opt stack 19
 21086                           
 21087                           ;LCD.c: 396: UINT8 i = 0x00;
 21088                           
 21089                           ; BSR set to: 0
 21090                           ;incstack = 0
 21091  01319C  0E00               	movlw	0
 21092  01319E  0100               	movlb	0	; () banked
 21093  0131A0  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 21094                           
 21095                           ; BSR set to: 0
 21096                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 21097  0131A2  0100               	movlb	0	; () banked
 21098  0131A4  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 21099  0131A6  0100               	movlb	0	; () banked
 21100  0131A8  25CD               	addwf	LCD_DrawField@pSize& (0+255),w,b
 21101  0131AA  0100               	movlb	0	; () banked
 21102  0131AC  6FD5               	movwf	LCD_DrawField@xmax& (0+255),b
 21103                           
 21104                           ; BSR set to: 0
 21105                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 21106  0131AE  0100               	movlb	0	; () banked
 21107  0131B0  51CB               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 21108  0131B2  0100               	movlb	0	; () banked
 21109  0131B4  25CF               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 21110  0131B6  0100               	movlb	0	; () banked
 21111  0131B8  6FD6               	movwf	LCD_DrawField@ymax& (0+255),b
 21112                           
 21113                           ; BSR set to: 0
 21114                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 21115  0131BA  C0CF  F0B5         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 21116  0131BE  C0D0  F0B6         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 21117  0131C2  C0CD  F0B7         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 21118  0131C6  C0CE  F0B8         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 21119  0131CA  EC43  F0A2         	call	___wmul	;wreg free
 21120  0131CE  C0B5  F0D3         	movff	?___wmul,LCD_DrawField@count
 21121  0131D2  C0B6  F0D4         	movff	?___wmul+1,LCD_DrawField@count+1
 21122                           
 21123                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 21124  0131D6  C0CB  F0BA         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 21125  0131DA  0100               	movlb	0	; () banked
 21126  0131DC  05D5               	decf	LCD_DrawField@xmax& (0+255),w,b
 21127  0131DE  0100               	movlb	0	; () banked
 21128  0131E0  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 21129  0131E2  0100               	movlb	0	; () banked
 21130  0131E4  05D6               	decf	LCD_DrawField@ymax& (0+255),w,b
 21131  0131E6  0100               	movlb	0	; () banked
 21132  0131E8  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 21133  0131EA  0100               	movlb	0	; () banked
 21134  0131EC  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 21135  0131EE  EC2B  F097         	call	_Set_Addr_Window
 21136                           
 21137                           ;LCD.c: 403: for(i = 0; i < count; i++)
 21138  0131F2  0E00               	movlw	0
 21139  0131F4  0100               	movlb	0	; () banked
 21140  0131F6  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 21141  0131F8  D013               	goto	l183
 21142  0131FA                     
 21143                           ; BSR set to: 0
 21144                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 21145                           
 21146                           ; BSR set to: 0
 21147  0131FA  0100               	movlb	0	; () banked
 21148  0131FC  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 21149  0131FE  0D02               	mullw	2
 21150  013200  50F3               	movf	prodl,w,c
 21151  013202  0100               	movlb	0	; () banked
 21152  013204  25C7               	addwf	LCD_DrawField@pField& (0+255),w,b
 21153  013206  6ED9               	movwf	fsr2l,c
 21154  013208  50F4               	movf	prodh,w,c
 21155  01320A  0100               	movlb	0	; () banked
 21156  01320C  21C8               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 21157  01320E  6EDA               	movwf	fsr2h,c
 21158  013210  CFDE F0BA          	movff	postinc2,LCD_Word_Write@value
 21159  013214  CFDD F0BB          	movff	postdec2,LCD_Word_Write@value+1
 21160  013218  ECDE  F0A3         	call	_LCD_Word_Write	;wreg free
 21161  01321C  0100               	movlb	0	; () banked
 21162  01321E  2BD7               	incf	LCD_DrawField@i& (0+255),f,b
 21163  013220                     l183:
 21164                           
 21165                           ; BSR set to: 0
 21166                           
 21167                           ; BSR set to: 0
 21168  013220  0100               	movlb	0	; () banked
 21169  013222  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 21170  013224  0100               	movlb	0	; () banked
 21171  013226  6FD1               	movwf	??_LCD_DrawField& (0+255),b
 21172  013228  6BD2               	clrf	(??_LCD_DrawField+1)& (0+255),b
 21173  01322A  0100               	movlb	0	; () banked
 21174  01322C  51D3               	movf	LCD_DrawField@count& (0+255),w,b
 21175  01322E  0100               	movlb	0	; () banked
 21176  013230  5DD1               	subwf	??_LCD_DrawField& (0+255),w,b
 21177  013232  0100               	movlb	0	; () banked
 21178  013234  51D4               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 21179  013236  0100               	movlb	0	; () banked
 21180  013238  59D2               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 21181  01323A  B0D8               	btfsc	status,0,c
 21182  01323C  0012               	return	
 21183  01323E  D7DD               	goto	l184
 21184  013240                     __end_of_LCD_DrawField:
 21185                           	opt stack 0
 21186                           tosu	equ	0xFFF
 21187                           tosh	equ	0xFFE
 21188                           tosl	equ	0xFFD
 21189                           pclath	equ	0xFFA
 21190                           tblptru	equ	0xFF8
 21191                           tblptrh	equ	0xFF7
 21192                           tblptrl	equ	0xFF6
 21193                           tablat	equ	0xFF5
 21194                           prodh	equ	0xFF4
 21195                           prodl	equ	0xFF3
 21196                           intcon	equ	0xFF2
 21197                           indf0	equ	0xFEF
 21198                           postinc0	equ	0xFEE
 21199                           fsr0h	equ	0xFEA
 21200                           fsr0l	equ	0xFE9
 21201                           wreg	equ	0xFE8
 21202                           indf1	equ	0xFE7
 21203                           postdec1	equ	0xFE5
 21204                           fsr1h	equ	0xFE2
 21205                           fsr1l	equ	0xFE1
 21206                           indf2	equ	0xFDF
 21207                           postinc2	equ	0xFDE
 21208                           postdec2	equ	0xFDD
 21209                           plusw2	equ	0xFDB
 21210                           fsr2h	equ	0xFDA
 21211                           fsr2l	equ	0xFD9
 21212                           status	equ	0xFD8
 21213                           
 21214 ;; *************** function ___wmul *****************
 21215 ;; Defined at:
 21216 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 21217 ;; Parameters:    Size  Location     Type
 21218 ;;  multiplier      2    0[BANK0 ] unsigned int 
 21219 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 21220 ;; Auto vars:     Size  Location     Type
 21221 ;;  product         2    4[BANK0 ] unsigned int 
 21222 ;; Return value:  Size  Location     Type
 21223 ;;                  2    0[BANK0 ] unsigned int 
 21224 ;; Registers used:
 21225 ;;		wreg, status,2, status,0, prodl, prodh
 21226 ;; Tracked objects:
 21227 ;;		On entry : 0/0
 21228 ;;		On exit  : 0/0
 21229 ;;		Unchanged: 0/0
 21230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21231 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21234 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21235 ;;Total ram usage:        6 bytes
 21236 ;; Hardware stack levels used:    1
 21237 ;; Hardware stack levels required when called:    7
 21238 ;; This function calls:
 21239 ;;		Nothing
 21240 ;; This function is called by:
 21241 ;;		_LCD_DrawField
 21242 ;; This function uses a non-reentrant model
 21243 ;;
 21244                           
 21245                           	psect	text116
 21246  014486                     __ptext116:
 21247                           	opt stack 0
 21248  014486                     ___wmul:
 21249                           	opt stack 21
 21250                           
 21251                           ; BSR set to: 0
 21252                           ;incstack = 0
 21253  014486  0100               	movlb	0	; () banked
 21254  014488  51B5               	movf	___wmul@multiplier& (0+255),w,b
 21255  01448A  0100               	movlb	0	; () banked
 21256  01448C  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 21257  01448E  CFF3 F0B9          	movff	prodl,___wmul@product
 21258  014492  CFF4 F0BA          	movff	prodh,___wmul@product+1
 21259  014496  0100               	movlb	0	; () banked
 21260  014498  51B5               	movf	___wmul@multiplier& (0+255),w,b
 21261  01449A  0100               	movlb	0	; () banked
 21262  01449C  03B8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 21263  01449E  50F3               	movf	prodl,w,c
 21264  0144A0  0100               	movlb	0	; () banked
 21265  0144A2  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 21266  0144A4  0100               	movlb	0	; () banked
 21267  0144A6  51B6               	movf	(___wmul@multiplier+1)& (0+255),w,b
 21268  0144A8  0100               	movlb	0	; () banked
 21269  0144AA  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 21270  0144AC  50F3               	movf	prodl,w,c
 21271  0144AE  0100               	movlb	0	; () banked
 21272  0144B0  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 21273                           
 21274                           ; BSR set to: 0
 21275  0144B2  C0B9  F0B5         	movff	___wmul@product,?___wmul
 21276  0144B6  C0BA  F0B6         	movff	___wmul@product+1,?___wmul+1
 21277  0144BA  0012               	return	
 21278  0144BC                     __end_of___wmul:
 21279                           	opt stack 0
 21280                           tosu	equ	0xFFF
 21281                           tosh	equ	0xFFE
 21282                           tosl	equ	0xFFD
 21283                           pclath	equ	0xFFA
 21284                           tblptru	equ	0xFF8
 21285                           tblptrh	equ	0xFF7
 21286                           tblptrl	equ	0xFF6
 21287                           tablat	equ	0xFF5
 21288                           prodh	equ	0xFF4
 21289                           prodl	equ	0xFF3
 21290                           intcon	equ	0xFF2
 21291                           indf0	equ	0xFEF
 21292                           postinc0	equ	0xFEE
 21293                           fsr0h	equ	0xFEA
 21294                           fsr0l	equ	0xFE9
 21295                           wreg	equ	0xFE8
 21296                           indf1	equ	0xFE7
 21297                           postdec1	equ	0xFE5
 21298                           fsr1h	equ	0xFE2
 21299                           fsr1l	equ	0xFE1
 21300                           indf2	equ	0xFDF
 21301                           postinc2	equ	0xFDE
 21302                           postdec2	equ	0xFDD
 21303                           plusw2	equ	0xFDB
 21304                           fsr2h	equ	0xFDA
 21305                           fsr2l	equ	0xFD9
 21306                           status	equ	0xFD8
 21307                           
 21308 ;; *************** function _Set_Addr_Window *****************
 21309 ;; Defined at:
 21310 ;;		line 214 in file "Library/LCD.c"
 21311 ;; Parameters:    Size  Location     Type
 21312 ;;  xs              1    wreg     unsigned char 
 21313 ;;  ys              1    5[BANK0 ] unsigned char 
 21314 ;;  xe              1    6[BANK0 ] unsigned char 
 21315 ;;  ye              1    7[BANK0 ] unsigned char 
 21316 ;; Auto vars:     Size  Location     Type
 21317 ;;  xs              1    8[BANK0 ] unsigned char 
 21318 ;; Return value:  Size  Location     Type
 21319 ;;                  1    wreg      void 
 21320 ;; Registers used:
 21321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21322 ;; Tracked objects:
 21323 ;;		On entry : 0/0
 21324 ;;		On exit  : 0/0
 21325 ;;		Unchanged: 0/0
 21326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21327 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21331 ;;Total ram usage:        4 bytes
 21332 ;; Hardware stack levels used:    1
 21333 ;; Hardware stack levels required when called:    9
 21334 ;; This function calls:
 21335 ;;		_LCD_Write
 21336 ;; This function is called by:
 21337 ;;		_LCD_Fill
 21338 ;;		_LCD_FillRectangle
 21339 ;;		_LCD_DrawField
 21340 ;;		_RAM_Address_Set
 21341 ;;		_LCD_DrawPixel
 21342 ;; This function uses a non-reentrant model
 21343 ;;
 21344                           
 21345                           	psect	text117
 21346  012E56                     __ptext117:
 21347                           	opt stack 0
 21348  012E56                     _Set_Addr_Window:
 21349                           	opt stack 19
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;incstack = 0
 21353                           ;Set_Addr_Window@xs stored from wreg
 21354  012E56  0100               	movlb	0	; () banked
 21355  012E58  6FBD               	movwf	Set_Addr_Window@xs& (0+255),b
 21356                           
 21357                           ;LCD.c: 216: ys+=2;
 21358  012E5A  0E02               	movlw	2
 21359  012E5C  0100               	movlb	0	; () banked
 21360  012E5E  27BA               	addwf	Set_Addr_Window@ys& (0+255),f,b
 21361                           
 21362                           ;LCD.c: 217: ye+=2;
 21363  012E60  0E02               	movlw	2
 21364  012E62  0100               	movlb	0	; () banked
 21365  012E64  27BC               	addwf	Set_Addr_Window@ye& (0+255),f,b
 21366                           
 21367                           ;LCD.c: 218: xs+=3;
 21368  012E66  0E03               	movlw	3
 21369  012E68  0100               	movlb	0	; () banked
 21370  012E6A  27BD               	addwf	Set_Addr_Window@xs& (0+255),f,b
 21371                           
 21372                           ;LCD.c: 219: xe+=3;
 21373  012E6C  0E03               	movlw	3
 21374  012E6E  0100               	movlb	0	; () banked
 21375  012E70  27BB               	addwf	Set_Addr_Window@xe& (0+255),f,b
 21376                           
 21377                           ; BSR set to: 0
 21378                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 21379  012E72  0E00               	movlw	0
 21380  012E74  0100               	movlb	0	; () banked
 21381  012E76  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21382  012E78  0E2A               	movlw	42
 21383  012E7A  EC54  F0A3         	call	_LCD_Write
 21384                           
 21385                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 21386  012E7E  0E01               	movlw	1
 21387  012E80  0100               	movlb	0	; () banked
 21388  012E82  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21389  012E84  0E00               	movlw	0
 21390  012E86  EC54  F0A3         	call	_LCD_Write
 21391                           
 21392                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 21393  012E8A  0E01               	movlw	1
 21394  012E8C  0100               	movlb	0	; () banked
 21395  012E8E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21396  012E90  0100               	movlb	0	; () banked
 21397  012E92  51BD               	movf	Set_Addr_Window@xs& (0+255),w,b
 21398  012E94  EC54  F0A3         	call	_LCD_Write
 21399                           
 21400                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 21401  012E98  0E01               	movlw	1
 21402  012E9A  0100               	movlb	0	; () banked
 21403  012E9C  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21404  012E9E  0E00               	movlw	0
 21405  012EA0  EC54  F0A3         	call	_LCD_Write
 21406                           
 21407                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 21408  012EA4  0E01               	movlw	1
 21409  012EA6  0100               	movlb	0	; () banked
 21410  012EA8  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21411  012EAA  0100               	movlb	0	; () banked
 21412  012EAC  51BB               	movf	Set_Addr_Window@xe& (0+255),w,b
 21413  012EAE  EC54  F0A3         	call	_LCD_Write
 21414                           
 21415                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 21416  012EB2  0E00               	movlw	0
 21417  012EB4  0100               	movlb	0	; () banked
 21418  012EB6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21419  012EB8  0E2B               	movlw	43
 21420  012EBA  EC54  F0A3         	call	_LCD_Write
 21421                           
 21422                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 21423  012EBE  0E01               	movlw	1
 21424  012EC0  0100               	movlb	0	; () banked
 21425  012EC2  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21426  012EC4  0E00               	movlw	0
 21427  012EC6  EC54  F0A3         	call	_LCD_Write
 21428                           
 21429                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 21430  012ECA  0E01               	movlw	1
 21431  012ECC  0100               	movlb	0	; () banked
 21432  012ECE  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21433  012ED0  0100               	movlb	0	; () banked
 21434  012ED2  51BA               	movf	Set_Addr_Window@ys& (0+255),w,b
 21435  012ED4  EC54  F0A3         	call	_LCD_Write
 21436                           
 21437                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 21438  012ED8  0E01               	movlw	1
 21439  012EDA  0100               	movlb	0	; () banked
 21440  012EDC  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21441  012EDE  0E00               	movlw	0
 21442  012EE0  EC54  F0A3         	call	_LCD_Write
 21443                           
 21444                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 21445  012EE4  0E01               	movlw	1
 21446  012EE6  0100               	movlb	0	; () banked
 21447  012EE8  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21448  012EEA  0100               	movlb	0	; () banked
 21449  012EEC  51BC               	movf	Set_Addr_Window@ye& (0+255),w,b
 21450  012EEE  EC54  F0A3         	call	_LCD_Write
 21451                           
 21452                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 21453  012EF2  0E00               	movlw	0
 21454  012EF4  0100               	movlb	0	; () banked
 21455  012EF6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21456  012EF8  0E2C               	movlw	44
 21457  012EFA  EC54  F0A3         	call	_LCD_Write
 21458  012EFE  0012               	return		;funcret
 21459  012F00                     __end_of_Set_Addr_Window:
 21460                           	opt stack 0
 21461                           tosu	equ	0xFFF
 21462                           tosh	equ	0xFFE
 21463                           tosl	equ	0xFFD
 21464                           pclath	equ	0xFFA
 21465                           tblptru	equ	0xFF8
 21466                           tblptrh	equ	0xFF7
 21467                           tblptrl	equ	0xFF6
 21468                           tablat	equ	0xFF5
 21469                           prodh	equ	0xFF4
 21470                           prodl	equ	0xFF3
 21471                           intcon	equ	0xFF2
 21472                           indf0	equ	0xFEF
 21473                           postinc0	equ	0xFEE
 21474                           fsr0h	equ	0xFEA
 21475                           fsr0l	equ	0xFE9
 21476                           wreg	equ	0xFE8
 21477                           indf1	equ	0xFE7
 21478                           postdec1	equ	0xFE5
 21479                           fsr1h	equ	0xFE2
 21480                           fsr1l	equ	0xFE1
 21481                           indf2	equ	0xFDF
 21482                           postinc2	equ	0xFDE
 21483                           postdec2	equ	0xFDD
 21484                           plusw2	equ	0xFDB
 21485                           fsr2h	equ	0xFDA
 21486                           fsr2l	equ	0xFD9
 21487                           status	equ	0xFD8
 21488                           
 21489 ;; *************** function _LCD_Word_Write *****************
 21490 ;; Defined at:
 21491 ;;		line 198 in file "Library/LCD.c"
 21492 ;; Parameters:    Size  Location     Type
 21493 ;;  value           2    5[BANK0 ] unsigned short 
 21494 ;; Auto vars:     Size  Location     Type
 21495 ;;		None
 21496 ;; Return value:  Size  Location     Type
 21497 ;;                  1    wreg      void 
 21498 ;; Registers used:
 21499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21500 ;; Tracked objects:
 21501 ;;		On entry : 0/0
 21502 ;;		On exit  : 0/0
 21503 ;;		Unchanged: 0/0
 21504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21505 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21508 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21509 ;;Total ram usage:        2 bytes
 21510 ;; Hardware stack levels used:    1
 21511 ;; Hardware stack levels required when called:    9
 21512 ;; This function calls:
 21513 ;;		_LCD_Write
 21514 ;; This function is called by:
 21515 ;;		_LCD_Fill
 21516 ;;		_LCD_FillRectangle
 21517 ;;		_LCD_DrawField
 21518 ;;		_LCD_DrawPixel
 21519 ;; This function uses a non-reentrant model
 21520 ;;
 21521                           
 21522                           	psect	text118
 21523  0147BC                     __ptext118:
 21524                           	opt stack 0
 21525  0147BC                     _LCD_Word_Write:
 21526                           	opt stack 19
 21527                           
 21528                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 21529                           
 21530                           ;incstack = 0
 21531  0147BC  0E01               	movlw	1
 21532  0147BE  0100               	movlb	0	; () banked
 21533  0147C0  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21534  0147C2  0100               	movlb	0	; () banked
 21535  0147C4  51BB               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 21536  0147C6  EC54  F0A3         	call	_LCD_Write
 21537                           
 21538                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 21539  0147CA  0E01               	movlw	1
 21540  0147CC  0100               	movlb	0	; () banked
 21541  0147CE  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21542  0147D0  0100               	movlb	0	; () banked
 21543  0147D2  51BA               	movf	LCD_Word_Write@value& (0+255),w,b
 21544  0147D4  EC54  F0A3         	call	_LCD_Write
 21545  0147D8  0012               	return		;funcret
 21546  0147DA                     __end_of_LCD_Word_Write:
 21547                           	opt stack 0
 21548                           tosu	equ	0xFFF
 21549                           tosh	equ	0xFFE
 21550                           tosl	equ	0xFFD
 21551                           pclath	equ	0xFFA
 21552                           tblptru	equ	0xFF8
 21553                           tblptrh	equ	0xFF7
 21554                           tblptrl	equ	0xFF6
 21555                           tablat	equ	0xFF5
 21556                           prodh	equ	0xFF4
 21557                           prodl	equ	0xFF3
 21558                           intcon	equ	0xFF2
 21559                           indf0	equ	0xFEF
 21560                           postinc0	equ	0xFEE
 21561                           fsr0h	equ	0xFEA
 21562                           fsr0l	equ	0xFE9
 21563                           wreg	equ	0xFE8
 21564                           indf1	equ	0xFE7
 21565                           postdec1	equ	0xFE5
 21566                           fsr1h	equ	0xFE2
 21567                           fsr1l	equ	0xFE1
 21568                           indf2	equ	0xFDF
 21569                           postinc2	equ	0xFDE
 21570                           postdec2	equ	0xFDD
 21571                           plusw2	equ	0xFDB
 21572                           fsr2h	equ	0xFDA
 21573                           fsr2l	equ	0xFD9
 21574                           status	equ	0xFD8
 21575                           
 21576 ;; *************** function _LCD_Write *****************
 21577 ;; Defined at:
 21578 ;;		line 67 in file "Library/LCD.c"
 21579 ;; Parameters:    Size  Location     Type
 21580 ;;  value           1    wreg     unsigned char 
 21581 ;;  mode            1    3[BANK0 ] enum E6761
 21582 ;; Auto vars:     Size  Location     Type
 21583 ;;  value           1    4[BANK0 ] unsigned char 
 21584 ;; Return value:  Size  Location     Type
 21585 ;;                  1    wreg      void 
 21586 ;; Registers used:
 21587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21588 ;; Tracked objects:
 21589 ;;		On entry : 0/0
 21590 ;;		On exit  : 0/0
 21591 ;;		Unchanged: 0/0
 21592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21593 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21596 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21597 ;;Total ram usage:        2 bytes
 21598 ;; Hardware stack levels used:    1
 21599 ;; Hardware stack levels required when called:    8
 21600 ;; This function calls:
 21601 ;;		_Mode_Set
 21602 ;;		_SPI_Send
 21603 ;; This function is called by:
 21604 ;;		_LCD_Init
 21605 ;;		_LCD_Word_Write
 21606 ;;		_Set_Addr_Window
 21607 ;;		_Set_Rotation
 21608 ;;		_LCD_WriteCMD
 21609 ;;		_LCD_WriteData
 21610 ;;		_LCD_Data_Write
 21611 ;;		_LCD_Data_Write_4k
 21612 ;;		_Invert_Display
 21613 ;; This function uses a non-reentrant model
 21614 ;;
 21615                           
 21616                           	psect	text119
 21617  0146A8                     __ptext119:
 21618                           	opt stack 0
 21619  0146A8                     _LCD_Write:
 21620                           	opt stack 20
 21621                           
 21622                           ;incstack = 0
 21623                           ;LCD_Write@value stored from wreg
 21624  0146A8  0100               	movlb	0	; () banked
 21625  0146AA  6FB9               	movwf	LCD_Write@value& (0+255),b
 21626                           
 21627                           ;LCD.c: 89: Mode_Set(mode);
 21628  0146AC  0100               	movlb	0	; () banked
 21629  0146AE  51B8               	movf	LCD_Write@mode& (0+255),w,b
 21630  0146B0  EC96  F0A4         	call	_Mode_Set
 21631                           
 21632                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21633  0146B4  0E73               	movlw	low _SPI2
 21634  0146B6  0100               	movlb	0	; () banked
 21635  0146B8  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 21636  0146BA  0E03               	movlw	high _SPI2
 21637  0146BC  0100               	movlb	0	; () banked
 21638  0146BE  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21639  0146C0  C0B9  F0B7         	movff	LCD_Write@value,SPI_Send@pData
 21640  0146C4  EC31  F09D         	call	_SPI_Send	;wreg free
 21641  0146C8  0012               	return		;funcret
 21642  0146CA                     __end_of_LCD_Write:
 21643                           	opt stack 0
 21644                           tosu	equ	0xFFF
 21645                           tosh	equ	0xFFE
 21646                           tosl	equ	0xFFD
 21647                           pclath	equ	0xFFA
 21648                           tblptru	equ	0xFF8
 21649                           tblptrh	equ	0xFF7
 21650                           tblptrl	equ	0xFF6
 21651                           tablat	equ	0xFF5
 21652                           prodh	equ	0xFF4
 21653                           prodl	equ	0xFF3
 21654                           intcon	equ	0xFF2
 21655                           indf0	equ	0xFEF
 21656                           postinc0	equ	0xFEE
 21657                           fsr0h	equ	0xFEA
 21658                           fsr0l	equ	0xFE9
 21659                           wreg	equ	0xFE8
 21660                           indf1	equ	0xFE7
 21661                           postdec1	equ	0xFE5
 21662                           fsr1h	equ	0xFE2
 21663                           fsr1l	equ	0xFE1
 21664                           indf2	equ	0xFDF
 21665                           postinc2	equ	0xFDE
 21666                           postdec2	equ	0xFDD
 21667                           plusw2	equ	0xFDB
 21668                           fsr2h	equ	0xFDA
 21669                           fsr2l	equ	0xFD9
 21670                           status	equ	0xFD8
 21671                           
 21672 ;; *************** function _SPI_Send *****************
 21673 ;; Defined at:
 21674 ;;		line 226 in file "Library/SPI.c"
 21675 ;; Parameters:    Size  Location     Type
 21676 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21677 ;;		 -> SPI1(11), SPI2(11), 
 21678 ;;  pData           1    2[BANK0 ] unsigned char 
 21679 ;; Auto vars:     Size  Location     Type
 21680 ;;		None
 21681 ;; Return value:  Size  Location     Type
 21682 ;;                  1    wreg      unsigned char 
 21683 ;; Registers used:
 21684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21685 ;; Tracked objects:
 21686 ;;		On entry : 0/0
 21687 ;;		On exit  : 0/0
 21688 ;;		Unchanged: 0/0
 21689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21690 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;Total ram usage:        3 bytes
 21695 ;; Hardware stack levels used:    1
 21696 ;; Hardware stack levels required when called:    7
 21697 ;; This function calls:
 21698 ;;		Nothing
 21699 ;; This function is called by:
 21700 ;;		_LCD_Write
 21701 ;;		_OutSeg
 21702 ;; This function uses a non-reentrant model
 21703 ;;
 21704                           
 21705                           	psect	text120
 21706  013A62                     __ptext120:
 21707                           	opt stack 0
 21708  013A62                     _SPI_Send:
 21709                           	opt stack 20
 21710                           
 21711                           ;SPI.c: 253: switch (pInput->mChannel)
 21712                           
 21713                           ;incstack = 0
 21714  013A62  D026               	goto	l678
 21715  013A64                     
 21716                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 21717  013A64  C0A7  FFD9         	movff	_PortC+4,fsr2l
 21718  013A68  C0A8  FFDA         	movff	_PortC+5,fsr2h
 21719  013A6C  0100               	movlb	0	; () banked
 21720  013A6E  94DF               	bcf	indf2,2,c
 21721                           
 21722                           ; BSR set to: 0
 21723                           ;SPI.c: 257: SSP1BUF = pData;
 21724  013A70  C0B7  FFC9         	movff	SPI_Send@pData,4041	;volatile
 21725  013A74                     
 21726                           ; BSR set to: 0
 21727  013A74  A0C7               	btfss	4039,0,c	;volatile
 21728  013A76  D7FE               	goto	l681
 21729                           
 21730                           ;SPI.c: 259: pData = SSP1BUF;
 21731  013A78  CFC9 F0B7          	movff	4041,SPI_Send@pData	;volatile
 21732                           
 21733                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 21734  013A7C  C0A7  FFD9         	movff	_PortC+4,fsr2l
 21735  013A80  C0A8  FFDA         	movff	_PortC+5,fsr2h
 21736  013A84  0100               	movlb	0	; () banked
 21737  013A86  84DF               	bsf	indf2,2,c
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;SPI.c: 261: return pData;
 21741                           ;	Return value of _SPI_Send is never used
 21742  013A88  0012               	return	
 21743  013A8A                     
 21744                           ; BSR set to: 0
 21745                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 21746                           
 21747                           ; BSR set to: 0
 21748  013A8A  C09D  FFD9         	movff	_PortD+4,fsr2l
 21749  013A8E  C09E  FFDA         	movff	_PortD+5,fsr2h
 21750  013A92  0100               	movlb	0	; () banked
 21751  013A94  9EDF               	bcf	indf2,7,c
 21752                           
 21753                           ; BSR set to: 0
 21754                           ;SPI.c: 264: SSP2BUF = pData;
 21755  013A96  C0B7  FF6F         	movff	SPI_Send@pData,3951	;volatile
 21756  013A9A                     
 21757                           ; BSR set to: 0
 21758  013A9A  A06D               	btfss	3949,0,c	;volatile
 21759  013A9C  D7FE               	goto	l686
 21760                           
 21761                           ;SPI.c: 266: pData = SSP2BUF;
 21762  013A9E  CF6F F0B7          	movff	3951,SPI_Send@pData	;volatile
 21763                           
 21764                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 21765  013AA2  C09D  FFD9         	movff	_PortD+4,fsr2l
 21766  013AA6  C09E  FFDA         	movff	_PortD+5,fsr2h
 21767  013AAA  0100               	movlb	0	; () banked
 21768  013AAC  8EDF               	bsf	indf2,7,c
 21769                           
 21770                           ; BSR set to: 0
 21771                           ;SPI.c: 269: };
 21772                           
 21773                           ; BSR set to: 0
 21774                           ;SPI.c: 268: return pData;
 21775                           ;	Return value of _SPI_Send is never used
 21776  013AAE  0012               	return	
 21777  013AB0                     l678:
 21778                           
 21779                           ; BSR set to: 0
 21780  013AB0  0100               	movlb	0	; () banked
 21781  013AB2  EE20 F002          	lfsr	2,2
 21782  013AB6  51B5               	movf	SPI_Send@pInput& (0+255),w,b
 21783  013AB8  26D9               	addwf	fsr2l,f,c
 21784  013ABA  51B6               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21785  013ABC  22DA               	addwfc	fsr2h,f,c
 21786  013ABE  50DF               	movf	indf2,w,c
 21787                           
 21788                           ; Switch size 1, requested type "space"
 21789                           ; Number of cases is 2, Range of values is 0 to 1
 21790                           ; switch strategies available:
 21791                           ; Name         Instructions Cycles
 21792                           ; simple_byte            7     4 (average)
 21793                           ;	Chosen strategy is simple_byte
 21794  013AC0  0A00               	xorlw	0	; case 0
 21795  013AC2  B4D8               	btfsc	status,2,c
 21796  013AC4  D7CF               	goto	l679
 21797  013AC6  0A01               	xorlw	1	; case 1
 21798  013AC8  A4D8               	btfss	status,2,c
 21799  013ACA  0012               	return	
 21800  013ACC  D7DE               	goto	l684
 21801  013ACE                     __end_of_SPI_Send:
 21802                           	opt stack 0
 21803                           tosu	equ	0xFFF
 21804                           tosh	equ	0xFFE
 21805                           tosl	equ	0xFFD
 21806                           pclath	equ	0xFFA
 21807                           tblptru	equ	0xFF8
 21808                           tblptrh	equ	0xFF7
 21809                           tblptrl	equ	0xFF6
 21810                           tablat	equ	0xFF5
 21811                           prodh	equ	0xFF4
 21812                           prodl	equ	0xFF3
 21813                           intcon	equ	0xFF2
 21814                           indf0	equ	0xFEF
 21815                           postinc0	equ	0xFEE
 21816                           fsr0h	equ	0xFEA
 21817                           fsr0l	equ	0xFE9
 21818                           wreg	equ	0xFE8
 21819                           indf1	equ	0xFE7
 21820                           postdec1	equ	0xFE5
 21821                           fsr1h	equ	0xFE2
 21822                           fsr1l	equ	0xFE1
 21823                           indf2	equ	0xFDF
 21824                           postinc2	equ	0xFDE
 21825                           postdec2	equ	0xFDD
 21826                           plusw2	equ	0xFDB
 21827                           fsr2h	equ	0xFDA
 21828                           fsr2l	equ	0xFD9
 21829                           status	equ	0xFD8
 21830                           
 21831 ;; *************** function _Mode_Set *****************
 21832 ;; Defined at:
 21833 ;;		line 40 in file "Library/LCD.c"
 21834 ;; Parameters:    Size  Location     Type
 21835 ;;  pMode           1    wreg     enum E6761
 21836 ;; Auto vars:     Size  Location     Type
 21837 ;;  pMode           1    0[BANK0 ] enum E6761
 21838 ;; Return value:  Size  Location     Type
 21839 ;;                  1    wreg      void 
 21840 ;; Registers used:
 21841 ;;		wreg
 21842 ;; Tracked objects:
 21843 ;;		On entry : 0/0
 21844 ;;		On exit  : 0/0
 21845 ;;		Unchanged: 0/0
 21846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21851 ;;Total ram usage:        1 bytes
 21852 ;; Hardware stack levels used:    1
 21853 ;; Hardware stack levels required when called:    7
 21854 ;; This function calls:
 21855 ;;		Nothing
 21856 ;; This function is called by:
 21857 ;;		_LCD_Write
 21858 ;; This function uses a non-reentrant model
 21859 ;;
 21860                           
 21861                           	psect	text121
 21862  01492C                     __ptext121:
 21863                           	opt stack 0
 21864  01492C                     _Mode_Set:
 21865                           	opt stack 20
 21866                           
 21867                           ; BSR set to: 0
 21868                           ;incstack = 0
 21869                           ;Mode_Set@pMode stored from wreg
 21870  01492C  0100               	movlb	0	; () banked
 21871  01492E  6FB5               	movwf	Mode_Set@pMode& (0+255),b
 21872                           
 21873                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21874  014930  0100               	movlb	0	; () banked
 21875  014932  B1B5               	btfsc	Mode_Set@pMode& (0+255),0,b
 21876  014934  D002               	bra	u6775
 21877  014936  9E85               	bcf	3973,7,c	;volatile
 21878  014938  D001               	bra	u6776
 21879  01493A                     u6775:
 21880  01493A  8E85               	bsf	3973,7,c	;volatile
 21881  01493C                     u6776:
 21882  01493C  0012               	return		;funcret
 21883  01493E                     __end_of_Mode_Set:
 21884                           	opt stack 0
 21885                           tosu	equ	0xFFF
 21886                           tosh	equ	0xFFE
 21887                           tosl	equ	0xFFD
 21888                           pclath	equ	0xFFA
 21889                           tblptru	equ	0xFF8
 21890                           tblptrh	equ	0xFF7
 21891                           tblptrl	equ	0xFF6
 21892                           tablat	equ	0xFF5
 21893                           prodh	equ	0xFF4
 21894                           prodl	equ	0xFF3
 21895                           intcon	equ	0xFF2
 21896                           indf0	equ	0xFEF
 21897                           postinc0	equ	0xFEE
 21898                           fsr0h	equ	0xFEA
 21899                           fsr0l	equ	0xFE9
 21900                           wreg	equ	0xFE8
 21901                           indf1	equ	0xFE7
 21902                           postdec1	equ	0xFE5
 21903                           fsr1h	equ	0xFE2
 21904                           fsr1l	equ	0xFE1
 21905                           indf2	equ	0xFDF
 21906                           postinc2	equ	0xFDE
 21907                           postdec2	equ	0xFDD
 21908                           plusw2	equ	0xFDB
 21909                           fsr2h	equ	0xFDA
 21910                           fsr2l	equ	0xFD9
 21911                           status	equ	0xFD8
 21912                           
 21913 ;; *************** function _Console_MakeField *****************
 21914 ;; Defined at:
 21915 ;;		line 435 in file "Library/Console.c"
 21916 ;; Parameters:    Size  Location     Type
 21917 ;;  pInput          1    wreg     unsigned char 
 21918 ;; Auto vars:     Size  Location     Type
 21919 ;;  pInput          1   11[BANK0 ] unsigned char 
 21920 ;;  y               1   17[BANK0 ] unsigned char 
 21921 ;;  x               1   16[BANK0 ] unsigned char 
 21922 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21923 ;;		 -> Font5x7(480), 
 21924 ;;  Index           2    9[BANK0 ] unsigned short 
 21925 ;; Return value:  Size  Location     Type
 21926 ;;                  2    5[BANK0 ] PTR unsigned short 
 21927 ;; Registers used:
 21928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21929 ;; Tracked objects:
 21930 ;;		On entry : 0/0
 21931 ;;		On exit  : 0/0
 21932 ;;		Unchanged: 0/0
 21933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21935 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21937 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21938 ;;Total ram usage:       13 bytes
 21939 ;; Hardware stack levels used:    1
 21940 ;; Hardware stack levels required when called:    8
 21941 ;; This function calls:
 21942 ;;		_Byte_GetBit
 21943 ;; This function is called by:
 21944 ;;		_Console_Render
 21945 ;; This function uses a non-reentrant model
 21946 ;;
 21947                           
 21948                           	psect	text122
 21949  0127B8                     __ptext122:
 21950                           	opt stack 0
 21951  0127B8                     _Console_MakeField:
 21952                           	opt stack 21
 21953                           
 21954                           ;incstack = 0
 21955                           ;Console_MakeField@pInput stored from wreg
 21956  0127B8  0100               	movlb	0	; () banked
 21957  0127BA  6FC0               	movwf	Console_MakeField@pInput& (0+255),b
 21958                           
 21959                           ;Console.c: 437: static Colour Fill[7][5];
 21960                           ;Console.c: 438: pInput -= 32;
 21961  0127BC  0E20               	movlw	32
 21962  0127BE  0100               	movlb	0	; () banked
 21963  0127C0  5FC0               	subwf	Console_MakeField@pInput& (0+255),f,b
 21964                           
 21965                           ; BSR set to: 0
 21966                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21967  0127C2  0100               	movlb	0	; () banked
 21968  0127C4  51C0               	movf	Console_MakeField@pInput& (0+255),w,b
 21969  0127C6  0D05               	mullw	5
 21970  0127C8  CFF3 F0BE          	movff	prodl,Console_MakeField@Index
 21971  0127CC  CFF4 F0BF          	movff	prodh,Console_MakeField@Index+1
 21972                           
 21973                           ; BSR set to: 0
 21974                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21975  0127D0  0EB9               	movlw	low _Font5x7
 21976  0127D2  0100               	movlb	0	; () banked
 21977  0127D4  25BE               	addwf	Console_MakeField@Index& (0+255),w,b
 21978  0127D6  0100               	movlb	0	; () banked
 21979  0127D8  6FC1               	movwf	Console_MakeField@Column& (0+255),b
 21980  0127DA  0EFD               	movlw	high _Font5x7
 21981  0127DC  0100               	movlb	0	; () banked
 21982  0127DE  21BF               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21983  0127E0  0100               	movlb	0	; () banked
 21984  0127E2  6FC2               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21985                           
 21986                           ; BSR set to: 0
 21987                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21988  0127E4  0E00               	movlw	0
 21989  0127E6  0100               	movlb	0	; () banked
 21990  0127E8  6FC5               	movwf	Console_MakeField@x& (0+255),b
 21991  0127EA                     l11922:
 21992                           
 21993                           ; BSR set to: 0
 21994  0127EA  0E04               	movlw	4
 21995  0127EC  0100               	movlb	0	; () banked
 21996  0127EE  65C5               	cpfsgt	Console_MakeField@x& (0+255),b
 21997  0127F0  D001               	goto	l1077
 21998  0127F2  D043               	goto	u7810
 21999  0127F4                     l1077:
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;Console.c: 444: {
 22003                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 22004                           
 22005                           ; BSR set to: 0
 22006  0127F4  0E00               	movlw	0
 22007  0127F6  0100               	movlb	0	; () banked
 22008  0127F8  6FC6               	movwf	Console_MakeField@y& (0+255),b
 22009  0127FA                     l11928:
 22010                           
 22011                           ; BSR set to: 0
 22012  0127FA  0E06               	movlw	6
 22013  0127FC  0100               	movlb	0	; () banked
 22014  0127FE  65C6               	cpfsgt	Console_MakeField@y& (0+255),b
 22015  012800  D001               	goto	l1079
 22016  012802  D035               	goto	u7800
 22017  012804                     l1079:
 22018                           
 22019                           ; BSR set to: 0
 22020                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 22021                           
 22022                           ; BSR set to: 0
 22023  012804  C0C1  F0B5         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 22024  012808  C0C2  F0B6         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 22025  01280C  C0C6  F0B7         	movff	Console_MakeField@y,Byte_GetBit@pBit
 22026  012810  EC79  F0A2         	call	_Byte_GetBit	;wreg free
 22027  012814  0900               	iorlw	0
 22028  012816  A4D8               	btfss	status,2,c
 22029  012818  D005               	goto	l1082
 22030  01281A  C081  F0C3         	movff	_gBackcolour,_Console_MakeField$10974
 22031  01281E  C082  F0C4         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 22032  012822  D004               	goto	l1084
 22033  012824                     l1082:
 22034  012824  C0FD  F0C3         	movff	_gForecolour,_Console_MakeField$10974
 22035  012828  C0FE  F0C4         	movff	_gForecolour+1,_Console_MakeField$10974+1
 22036  01282C                     l1084:
 22037  01282C  0100               	movlb	0	; () banked
 22038  01282E  51C6               	movf	Console_MakeField@y& (0+255),w,b
 22039  012830  0D0A               	mullw	10
 22040  012832  0E64               	movlw	low Console_MakeField@Fill
 22041  012834  0100               	movlb	0	; () banked
 22042  012836  6FBC               	movwf	??_Console_MakeField& (0+255),b
 22043  012838  0E04               	movlw	high Console_MakeField@Fill
 22044  01283A  0100               	movlb	0	; () banked
 22045  01283C  6FBD               	movwf	(??_Console_MakeField+1)& (0+255),b
 22046  01283E  50F3               	movf	prodl,w,c
 22047  012840  0100               	movlb	0	; () banked
 22048  012842  27BC               	addwf	??_Console_MakeField& (0+255),f,b
 22049  012844  50F4               	movf	prodh,w,c
 22050  012846  0100               	movlb	0	; () banked
 22051  012848  23BD               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 22052  01284A  0100               	movlb	0	; () banked
 22053  01284C  51C5               	movf	Console_MakeField@x& (0+255),w,b
 22054  01284E  0D02               	mullw	2
 22055  012850  50F3               	movf	prodl,w,c
 22056  012852  0100               	movlb	0	; () banked
 22057  012854  25BC               	addwf	??_Console_MakeField& (0+255),w,b
 22058  012856  6ED9               	movwf	fsr2l,c
 22059  012858  50F4               	movf	prodh,w,c
 22060  01285A  0100               	movlb	0	; () banked
 22061  01285C  21BD               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 22062  01285E  6EDA               	movwf	fsr2h,c
 22063  012860  C0C3  FFDE         	movff	_Console_MakeField$10974,postinc2
 22064  012864  C0C4  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 22065                           
 22066                           ; BSR set to: 0
 22067  012868  0100               	movlb	0	; () banked
 22068  01286A  2BC6               	incf	Console_MakeField@y& (0+255),f,b
 22069  01286C  D7C6               	goto	l11928
 22070  01286E                     u7800:
 22071                           
 22072                           ; BSR set to: 0
 22073                           ;Console.c: 447: Column += 1;
 22074                           
 22075                           ; BSR set to: 0
 22076  01286E  0100               	movlb	0	; () banked
 22077  012870  4BC1               	infsnz	Console_MakeField@Column& (0+255),f,b
 22078  012872  2BC2               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 22079  012874  0100               	movlb	0	; () banked
 22080  012876  2BC5               	incf	Console_MakeField@x& (0+255),f,b
 22081  012878  D7B8               	goto	l11922
 22082  01287A                     u7810:
 22083                           
 22084                           ; BSR set to: 0
 22085                           ;Console.c: 448: }
 22086                           ;Console.c: 449: return (ColourPtr)Fill;
 22087                           
 22088                           ; BSR set to: 0
 22089  01287A  0E64               	movlw	low Console_MakeField@Fill
 22090  01287C  0100               	movlb	0	; () banked
 22091  01287E  6FBA               	movwf	?_Console_MakeField& (0+255),b
 22092  012880  0E04               	movlw	high Console_MakeField@Fill
 22093  012882  0100               	movlb	0	; () banked
 22094  012884  6FBB               	movwf	(?_Console_MakeField+1)& (0+255),b
 22095  012886  0012               	return	
 22096  012888                     __end_of_Console_MakeField:
 22097                           	opt stack 0
 22098                           tosu	equ	0xFFF
 22099                           tosh	equ	0xFFE
 22100                           tosl	equ	0xFFD
 22101                           pclath	equ	0xFFA
 22102                           tblptru	equ	0xFF8
 22103                           tblptrh	equ	0xFF7
 22104                           tblptrl	equ	0xFF6
 22105                           tablat	equ	0xFF5
 22106                           prodh	equ	0xFF4
 22107                           prodl	equ	0xFF3
 22108                           intcon	equ	0xFF2
 22109                           indf0	equ	0xFEF
 22110                           postinc0	equ	0xFEE
 22111                           fsr0h	equ	0xFEA
 22112                           fsr0l	equ	0xFE9
 22113                           wreg	equ	0xFE8
 22114                           indf1	equ	0xFE7
 22115                           postdec1	equ	0xFE5
 22116                           fsr1h	equ	0xFE2
 22117                           fsr1l	equ	0xFE1
 22118                           indf2	equ	0xFDF
 22119                           postinc2	equ	0xFDE
 22120                           postdec2	equ	0xFDD
 22121                           plusw2	equ	0xFDB
 22122                           fsr2h	equ	0xFDA
 22123                           fsr2l	equ	0xFD9
 22124                           status	equ	0xFD8
 22125                           
 22126 ;; *************** function _Byte_GetBit *****************
 22127 ;; Defined at:
 22128 ;;		line 38 in file "Library/Types.c"
 22129 ;; Parameters:    Size  Location     Type
 22130 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22131 ;;		 -> Font5x7(480), 
 22132 ;;  pBit            1    2[BANK0 ] unsigned char 
 22133 ;; Auto vars:     Size  Location     Type
 22134 ;;  Output          1    4[BANK0 ] unsigned char 
 22135 ;; Return value:  Size  Location     Type
 22136 ;;                  1    wreg      unsigned char 
 22137 ;; Registers used:
 22138 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 22139 ;; Tracked objects:
 22140 ;;		On entry : 0/0
 22141 ;;		On exit  : 0/0
 22142 ;;		Unchanged: 0/0
 22143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22144 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22147 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22148 ;;Total ram usage:        5 bytes
 22149 ;; Hardware stack levels used:    1
 22150 ;; Hardware stack levels required when called:    7
 22151 ;; This function calls:
 22152 ;;		Nothing
 22153 ;; This function is called by:
 22154 ;;		_Console_MakeField
 22155 ;;		_Word_GetBit
 22156 ;; This function uses a non-reentrant model
 22157 ;;
 22158                           
 22159                           	psect	text123
 22160  0144F2                     __ptext123:
 22161                           	opt stack 0
 22162  0144F2                     _Byte_GetBit:
 22163                           	opt stack 21
 22164                           
 22165                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 22166                           
 22167                           ; BSR set to: 0
 22168                           ;incstack = 0
 22169  0144F2  C0B5  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 22170  0144F6  C0B6  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 22171  0144FA                     	if	0	;tblptru may be non-zero
 22172  0144FA                     	endif
 22173  0144FA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22174  0144FA  0E00               	movlw	low (__mediumconst shr (0+16))
 22175  0144FC  6EF8               	movwf	tblptru,c
 22176  0144FE                     	endif
 22177  0144FE  0008               	tblrd		*
 22178  014500  CFF5 F0B9          	movff	tablat,Byte_GetBit@Output
 22179                           
 22180                           ;Types.c: 42: Output >>= pBit;
 22181  014504  0100               	movlb	0	; () banked
 22182  014506  29B7               	incf	Byte_GetBit@pBit& (0+255),w,b
 22183  014508  0100               	movlb	0	; () banked
 22184  01450A  6FB8               	movwf	??_Byte_GetBit& (0+255),b
 22185  01450C  D003               	goto	u7390
 22186  01450E                     u7395:
 22187  01450E  0100               	movlb	0	; () banked
 22188  014510  90D8               	bcf	status,0,c
 22189  014512  33B9               	rrcf	Byte_GetBit@Output& (0+255),f,b
 22190  014514                     u7390:
 22191  014514  0100               	movlb	0	; () banked
 22192  014516  2FB8               	decfsz	??_Byte_GetBit& (0+255),f,b
 22193  014518  D7FA               	goto	u7395
 22194                           
 22195                           ;Types.c: 43: Output &= 1;
 22196  01451A  0E01               	movlw	1
 22197  01451C  0100               	movlb	0	; () banked
 22198  01451E  17B9               	andwf	Byte_GetBit@Output& (0+255),f,b
 22199                           
 22200                           ; BSR set to: 0
 22201                           ;Types.c: 44: return Output;
 22202  014520  0100               	movlb	0	; () banked
 22203  014522  51B9               	movf	Byte_GetBit@Output& (0+255),w,b
 22204  014524  0012               	return	
 22205  014526                     __end_of_Byte_GetBit:
 22206                           	opt stack 0
 22207                           tosu	equ	0xFFF
 22208                           tosh	equ	0xFFE
 22209                           tosl	equ	0xFFD
 22210                           pclath	equ	0xFFA
 22211                           tblptru	equ	0xFF8
 22212                           tblptrh	equ	0xFF7
 22213                           tblptrl	equ	0xFF6
 22214                           tablat	equ	0xFF5
 22215                           prodh	equ	0xFF4
 22216                           prodl	equ	0xFF3
 22217                           intcon	equ	0xFF2
 22218                           indf0	equ	0xFEF
 22219                           postinc0	equ	0xFEE
 22220                           fsr0h	equ	0xFEA
 22221                           fsr0l	equ	0xFE9
 22222                           wreg	equ	0xFE8
 22223                           indf1	equ	0xFE7
 22224                           postdec1	equ	0xFE5
 22225                           fsr1h	equ	0xFE2
 22226                           fsr1l	equ	0xFE1
 22227                           indf2	equ	0xFDF
 22228                           postinc2	equ	0xFDE
 22229                           postdec2	equ	0xFDD
 22230                           plusw2	equ	0xFDB
 22231                           fsr2h	equ	0xFDA
 22232                           fsr2l	equ	0xFD9
 22233                           status	equ	0xFD8
 22234                           
 22235 ;; *************** function _Console_Init *****************
 22236 ;; Defined at:
 22237 ;;		line 157 in file "Library/Console.c"
 22238 ;; Parameters:    Size  Location     Type
 22239 ;;		None
 22240 ;; Auto vars:     Size  Location     Type
 22241 ;;  y               1    3[BANK0 ] unsigned char 
 22242 ;;  x               1    2[BANK0 ] unsigned char 
 22243 ;; Return value:  Size  Location     Type
 22244 ;;                  1    wreg      void 
 22245 ;; Registers used:
 22246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22247 ;; Tracked objects:
 22248 ;;		On entry : 0/0
 22249 ;;		On exit  : 0/0
 22250 ;;		Unchanged: 0/0
 22251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22254 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22256 ;;Total ram usage:        4 bytes
 22257 ;; Hardware stack levels used:    1
 22258 ;; Hardware stack levels required when called:    7
 22259 ;; This function calls:
 22260 ;;		Nothing
 22261 ;; This function is called by:
 22262 ;;		_main
 22263 ;; This function uses a non-reentrant model
 22264 ;;
 22265                           
 22266                           	psect	text124
 22267  0135C2                     __ptext124:
 22268                           	opt stack 0
 22269  0135C2                     _Console_Init:
 22270                           	opt stack 23
 22271                           
 22272                           ;Console.c: 160: lBufferX = 0;
 22273                           
 22274                           ; BSR set to: 0
 22275                           ;incstack = 0
 22276  0135C2  0E00               	movlw	0
 22277  0135C4  0100               	movlb	0	; () banked
 22278  0135C6  6F8D               	movwf	_lBufferX& (0+255),b
 22279                           
 22280                           ;Console.c: 161: lBufferY = 0;
 22281  0135C8  0E00               	movlw	0
 22282  0135CA  0100               	movlb	0	; () banked
 22283  0135CC  6F8C               	movwf	_lBufferY& (0+255),b
 22284                           
 22285                           ;Console.c: 163: UINT8 x, y;
 22286                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22287  0135CE  0E00               	movlw	0
 22288  0135D0  0100               	movlb	0	; () banked
 22289  0135D2  6FB7               	movwf	Console_Init@x& (0+255),b
 22290  0135D4                     l12228:
 22291                           
 22292                           ; BSR set to: 0
 22293  0135D4  0E13               	movlw	19
 22294  0135D6  0100               	movlb	0	; () banked
 22295  0135D8  65B7               	cpfsgt	Console_Init@x& (0+255),b
 22296  0135DA  D001               	goto	l976
 22297  0135DC  0012               	return	
 22298  0135DE                     l976:
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;Console.c: 165: {
 22302                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22303                           
 22304                           ; BSR set to: 0
 22305  0135DE  0E00               	movlw	0
 22306  0135E0  0100               	movlb	0	; () banked
 22307  0135E2  6FB8               	movwf	Console_Init@y& (0+255),b
 22308  0135E4                     l12234:
 22309                           
 22310                           ; BSR set to: 0
 22311  0135E4  0E0E               	movlw	14
 22312  0135E6  0100               	movlb	0	; () banked
 22313  0135E8  65B8               	cpfsgt	Console_Init@y& (0+255),b
 22314  0135EA  D001               	goto	l978
 22315  0135EC  D02C               	goto	u8190
 22316  0135EE                     l978:
 22317                           
 22318                           ; BSR set to: 0
 22319                           ;Console.c: 167: {
 22320                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22321                           
 22322                           ; BSR set to: 0
 22323  0135EE  0100               	movlb	0	; () banked
 22324  0135F0  51B8               	movf	Console_Init@y& (0+255),w,b
 22325  0135F2  0D14               	mullw	20
 22326  0135F4  0EAA               	movlw	low _lBuffer
 22327  0135F6  0100               	movlb	0	; () banked
 22328  0135F8  6FB5               	movwf	??_Console_Init& (0+255),b
 22329  0135FA  0E04               	movlw	high _lBuffer
 22330  0135FC  0100               	movlb	0	; () banked
 22331  0135FE  6FB6               	movwf	(??_Console_Init+1)& (0+255),b
 22332  013600  50F3               	movf	prodl,w,c
 22333  013602  0100               	movlb	0	; () banked
 22334  013604  27B5               	addwf	??_Console_Init& (0+255),f,b
 22335  013606  50F4               	movf	prodh,w,c
 22336  013608  0100               	movlb	0	; () banked
 22337  01360A  23B6               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22338  01360C  0100               	movlb	0	; () banked
 22339  01360E  51B7               	movf	Console_Init@x& (0+255),w,b
 22340  013610  0D01               	mullw	1
 22341  013612  50F3               	movf	prodl,w,c
 22342  013614  0100               	movlb	0	; () banked
 22343  013616  25B5               	addwf	??_Console_Init& (0+255),w,b
 22344  013618  6ED9               	movwf	fsr2l,c
 22345  01361A  50F4               	movf	prodh,w,c
 22346  01361C  0100               	movlb	0	; () banked
 22347  01361E  21B6               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22348  013620  6EDA               	movwf	fsr2h,c
 22349  013622  0E00               	movlw	0
 22350  013624  6EDF               	movwf	indf2,c
 22351                           
 22352                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22353  013626  0100               	movlb	0	; () banked
 22354  013628  51B8               	movf	Console_Init@y& (0+255),w,b
 22355  01362A  0D02               	mullw	2
 22356  01362C  0E00               	movlw	low _lCBuffer
 22357  01362E  24F3               	addwf	prodl,w,c
 22358  013630  6ED9               	movwf	fsr2l,c
 22359  013632  0E03               	movlw	high _lCBuffer
 22360  013634  20F4               	addwfc	prodh,w,c
 22361  013636  6EDA               	movwf	fsr2h,c
 22362  013638  0EFF               	movlw	255
 22363  01363A  6EDE               	movwf	postinc2,c
 22364  01363C  0EFF               	movlw	255
 22365  01363E  6EDD               	movwf	postdec2,c
 22366                           
 22367                           ; BSR set to: 0
 22368  013640  0100               	movlb	0	; () banked
 22369  013642  2BB8               	incf	Console_Init@y& (0+255),f,b
 22370  013644  D7CF               	goto	l12234
 22371  013646                     u8190:
 22372                           
 22373                           ; BSR set to: 0
 22374                           
 22375                           ; BSR set to: 0
 22376  013646  0100               	movlb	0	; () banked
 22377  013648  2BB7               	incf	Console_Init@x& (0+255),f,b
 22378  01364A  D7C4               	goto	l12228
 22379  01364C                     __end_of_Console_Init:
 22380                           	opt stack 0
 22381                           tosu	equ	0xFFF
 22382                           tosh	equ	0xFFE
 22383                           tosl	equ	0xFFD
 22384                           pclath	equ	0xFFA
 22385                           tblptru	equ	0xFF8
 22386                           tblptrh	equ	0xFF7
 22387                           tblptrl	equ	0xFF6
 22388                           tablat	equ	0xFF5
 22389                           prodh	equ	0xFF4
 22390                           prodl	equ	0xFF3
 22391                           intcon	equ	0xFF2
 22392                           indf0	equ	0xFEF
 22393                           postinc0	equ	0xFEE
 22394                           fsr0h	equ	0xFEA
 22395                           fsr0l	equ	0xFE9
 22396                           wreg	equ	0xFE8
 22397                           indf1	equ	0xFE7
 22398                           postdec1	equ	0xFE5
 22399                           fsr1h	equ	0xFE2
 22400                           fsr1l	equ	0xFE1
 22401                           indf2	equ	0xFDF
 22402                           postinc2	equ	0xFDE
 22403                           postdec2	equ	0xFDD
 22404                           plusw2	equ	0xFDB
 22405                           fsr2h	equ	0xFDA
 22406                           fsr2l	equ	0xFD9
 22407                           status	equ	0xFD8
 22408                           
 22409 ;; *************** function _ISR_Function *****************
 22410 ;; Defined at:
 22411 ;;		line 38 in file "Library/ISR.c"
 22412 ;; Parameters:    Size  Location     Type
 22413 ;;		None
 22414 ;; Auto vars:     Size  Location     Type
 22415 ;;		None
 22416 ;; Return value:  Size  Location     Type
 22417 ;;                  1    wreg      void 
 22418 ;; Registers used:
 22419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22420 ;; Tracked objects:
 22421 ;;		On entry : 0/0
 22422 ;;		On exit  : 0/0
 22423 ;;		Unchanged: 0/0
 22424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22427 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22428 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22429 ;;Total ram usage:       18 bytes
 22430 ;; Hardware stack levels used:    1
 22431 ;; Hardware stack levels required when called:    6
 22432 ;; This function calls:
 22433 ;;		_Timer0_ISR
 22434 ;; This function is called by:
 22435 ;;		Interrupt level 2
 22436 ;; This function uses a non-reentrant model
 22437 ;;
 22438                           
 22439                           	psect	intcode
 22440  001408                     __pintcode:
 22441                           	opt stack 0
 22442  001408                     _ISR_Function:
 22443                           	opt stack 14
 22444                           
 22445                           ; BSR set to: 0
 22446                           ;incstack = 0
 22447  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22448  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 22449  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 22450  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 22451  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 22452  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 22453  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 22454  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 22455  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 22456  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 22457  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 22458  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 22459  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 22460  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 22461  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 22462  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 22463  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 22464  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 22465  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 22466                           
 22467                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22468  001452  92F2               	bcf	intcon,1,c	;volatile
 22469                           
 22470                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22471  001454  B4F2               	btfsc	intcon,2,c	;volatile
 22472  001456  AAF2               	btfss	intcon,5,c	;volatile
 22473  001458  D002               	goto	i2l1590
 22474                           
 22475                           ;ISR.c: 68: Timer0_ISR();
 22476  00145A  ECF2  F0A2         	call	_Timer0_ISR	;wreg free
 22477  00145E                     i2l1590:
 22478  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 22479  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 22480  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 22481  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 22482  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 22483  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 22484  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 22485  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 22486  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 22487  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 22488  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 22489  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 22490  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 22491  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 22492  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 22493  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 22494  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 22495  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 22496  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22497  0014A8  0011               	retfie		f
 22498  0014AA                     __end_of_ISR_Function:
 22499                           	opt stack 0
 22500                           tosu	equ	0xFFF
 22501                           tosh	equ	0xFFE
 22502                           tosl	equ	0xFFD
 22503                           pclatu	equ	0xFFB
 22504                           pclath	equ	0xFFA
 22505                           tblptru	equ	0xFF8
 22506                           tblptrh	equ	0xFF7
 22507                           tblptrl	equ	0xFF6
 22508                           tablat	equ	0xFF5
 22509                           prodh	equ	0xFF4
 22510                           prodl	equ	0xFF3
 22511                           intcon	equ	0xFF2
 22512                           indf0	equ	0xFEF
 22513                           postinc0	equ	0xFEE
 22514                           fsr0h	equ	0xFEA
 22515                           fsr0l	equ	0xFE9
 22516                           wreg	equ	0xFE8
 22517                           indf1	equ	0xFE7
 22518                           postdec1	equ	0xFE5
 22519                           fsr1h	equ	0xFE2
 22520                           fsr1l	equ	0xFE1
 22521                           indf2	equ	0xFDF
 22522                           postinc2	equ	0xFDE
 22523                           postdec2	equ	0xFDD
 22524                           plusw2	equ	0xFDB
 22525                           fsr2h	equ	0xFDA
 22526                           fsr2l	equ	0xFD9
 22527                           status	equ	0xFD8
 22528                           
 22529 ;; *************** function _Timer0_ISR *****************
 22530 ;; Defined at:
 22531 ;;		line 94 in file "Library/Timer0.c"
 22532 ;; Parameters:    Size  Location     Type
 22533 ;;		None
 22534 ;; Auto vars:     Size  Location     Type
 22535 ;;		None
 22536 ;; Return value:  Size  Location     Type
 22537 ;;                  1    wreg      void 
 22538 ;; Registers used:
 22539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22540 ;; Tracked objects:
 22541 ;;		On entry : 0/0
 22542 ;;		On exit  : 0/0
 22543 ;;		Unchanged: 0/0
 22544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22549 ;;Total ram usage:        0 bytes
 22550 ;; Hardware stack levels used:    1
 22551 ;; Hardware stack levels required when called:    5
 22552 ;; This function calls:
 22553 ;;		Absolute function
 22554 ;;		i2_Motor_Step
 22555 ;;		i2_Timer0_Stop
 22556 ;; This function is called by:
 22557 ;;		_ISR_Function
 22558 ;; This function uses a non-reentrant model
 22559 ;;
 22560                           
 22561                           	psect	text126
 22562  0145E4                     __ptext126:
 22563                           	opt stack 0
 22564  0145E4                     _Timer0_ISR:
 22565                           	opt stack 14
 22566                           
 22567                           ;Timer0.c: 96: Timer0_Stop();
 22568                           
 22569                           ;incstack = 0
 22570  0145E4  ECF8  F0A4         	call	i2_Timer0_Stop	;wreg free
 22571                           
 22572                           ;Timer0.c: 99: if (gISR != 0)
 22573  0145E8  0100               	movlb	0	; () banked
 22574  0145EA  516C               	movf	_gISR& (0+255),w,b
 22575  0145EC  0100               	movlb	0	; () banked
 22576  0145EE  116D               	iorwf	(_gISR+1)& (0+255),w,b
 22577  0145F0  0100               	movlb	0	; () banked
 22578  0145F2  116E               	iorwf	(_gISR+2)& (0+255),w,b
 22579  0145F4  B4D8               	btfsc	status,2,c
 22580  0145F6  0012               	return	
 22581                           
 22582                           ; BSR set to: 0
 22583                           ;Timer0.c: 100: gISR();
 22584  0145F8  D801               	call	i2u933_48
 22585  0145FA  0012               	return	
 22586  0145FC                     i2u933_48:
 22587  0145FC  0005               	push	
 22588  0145FE  6EFA               	movwf	pclath,c
 22589  014600  0100               	movlb	0	; () banked
 22590  014602  516C               	movf	_gISR& (0+255),w,b
 22591  014604  6EFD               	movwf	tosl,c
 22592  014606  516D               	movf	(_gISR+1)& (0+255),w,b
 22593  014608  6EFE               	movwf	tosh,c
 22594  01460A  516E               	movf	(_gISR+2)& (0+255),w,b
 22595  01460C  6EFF               	movwf	tosu,c
 22596  01460E  50FA               	movf	pclath,w,c
 22597  014610  0012               	return		;indir
 22598  014612                     __end_of_Timer0_ISR:
 22599                           	opt stack 0
 22600                           tosu	equ	0xFFF
 22601                           tosh	equ	0xFFE
 22602                           tosl	equ	0xFFD
 22603                           pclatu	equ	0xFFB
 22604                           pclath	equ	0xFFA
 22605                           tblptru	equ	0xFF8
 22606                           tblptrh	equ	0xFF7
 22607                           tblptrl	equ	0xFF6
 22608                           tablat	equ	0xFF5
 22609                           prodh	equ	0xFF4
 22610                           prodl	equ	0xFF3
 22611                           intcon	equ	0xFF2
 22612                           indf0	equ	0xFEF
 22613                           postinc0	equ	0xFEE
 22614                           fsr0h	equ	0xFEA
 22615                           fsr0l	equ	0xFE9
 22616                           wreg	equ	0xFE8
 22617                           indf1	equ	0xFE7
 22618                           postdec1	equ	0xFE5
 22619                           fsr1h	equ	0xFE2
 22620                           fsr1l	equ	0xFE1
 22621                           indf2	equ	0xFDF
 22622                           postinc2	equ	0xFDE
 22623                           postdec2	equ	0xFDD
 22624                           plusw2	equ	0xFDB
 22625                           fsr2h	equ	0xFDA
 22626                           fsr2l	equ	0xFD9
 22627                           status	equ	0xFD8
 22628                           
 22629 ;; *************** function i2_Motor_Step *****************
 22630 ;; Defined at:
 22631 ;;		line 75 in file "Library/Motor.c"
 22632 ;; Parameters:    Size  Location     Type
 22633 ;;		None
 22634 ;; Auto vars:     Size  Location     Type
 22635 ;;		None
 22636 ;; Return value:  Size  Location     Type
 22637 ;;                  1    wreg      void 
 22638 ;; Registers used:
 22639 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22640 ;; Tracked objects:
 22641 ;;		On entry : 0/0
 22642 ;;		On exit  : 0/0
 22643 ;;		Unchanged: 0/0
 22644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22649 ;;Total ram usage:        2 bytes
 22650 ;; Hardware stack levels used:    1
 22651 ;; Hardware stack levels required when called:    4
 22652 ;; This function calls:
 22653 ;;		i2_MXK_Queue
 22654 ;;		i2_MXK_Release
 22655 ;;		i2_MXK_SwitchTo
 22656 ;;		i2_Port_SetPin
 22657 ;;		i2_Timer0_Restart
 22658 ;;		i2_Timer0_Stop
 22659 ;; This function is called by:
 22660 ;; This function uses a non-reentrant model
 22661 ;;
 22662                           
 22663                           	psect	text127
 22664  01241C                     __ptext127:
 22665                           	opt stack 0
 22666  01241C                     i2_Motor_Step:
 22667                           	opt stack 14
 22668                           
 22669                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 22670                           
 22671                           ;incstack = 0
 22672  01241C  0100               	movlb	0	; () banked
 22673  01241E  EE20 F004          	lfsr	2,4
 22674  012422  517D               	movf	_lMotor& (0+255),w,b
 22675  012424  26D9               	addwf	fsr2l,f,c
 22676  012426  517E               	movf	(_lMotor+1)& (0+255),w,b
 22677  012428  22DA               	addwfc	fsr2h,f,c
 22678  01242A  50DF               	movf	indf2,w,c
 22679  01242C  EC5E  F0A2         	call	i2_MXK_SwitchTo
 22680  012430  0900               	iorlw	0
 22681  012432  B4D8               	btfsc	status,2,c
 22682  012434  D06A               	goto	i2l1627
 22683                           
 22684                           ;Motor.c: 78: {
 22685                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 22686  012436  C07D  FFD9         	movff	_lMotor,fsr2l
 22687  01243A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22688  01243E  50DE               	movf	postinc2,w,c
 22689  012440  10DE               	iorwf	postinc2,w,c
 22690  012442  B4D8               	btfsc	status,2,c
 22691  012444  D05D               	goto	i2l1628
 22692                           
 22693                           ;Motor.c: 80: {
 22694                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 22695  012446  C07D  FFD9         	movff	_lMotor,fsr2l
 22696  01244A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22697  01244E  0E01               	movlw	1
 22698  012450  BEDB               	btfsc	plusw2,7,c
 22699  012452  D022               	goto	i2l1629
 22700  012454  0E01               	movlw	1
 22701  012456  50DB               	movf	plusw2,w,c
 22702  012458  E103               	bnz	i2u495_40
 22703  01245A  04DE               	decf	postinc2,w,c
 22704  01245C  A0D8               	btfss	status,0,c
 22705  01245E  D01C               	goto	i2l1629
 22706  012460                     i2u495_40:
 22707                           
 22708                           ;Motor.c: 83: {
 22709                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 22710  012460  C07D  FFD9         	movff	_lMotor,fsr2l
 22711  012464  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22712  012468  28DE               	incf	postinc2,w,c
 22713  01246A  E104               	bnz	i2u496_40
 22714  01246C  0E7F               	movlw	127
 22715  01246E  18DE               	xorwf	postinc2,w,c
 22716  012470  B4D8               	btfsc	status,2,c
 22717  012472  D007               	goto	i2l1630
 22718  012474                     i2u496_40:
 22719                           
 22720                           ;Motor.c: 85: lMotor->mDelta --;
 22721  012474  C07D  FFD9         	movff	_lMotor,fsr2l
 22722  012478  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22723  01247C  06DE               	decf	postinc2,f,c
 22724  01247E  0E00               	movlw	0
 22725  012480  5ADD               	subwfb	postdec2,f,c
 22726  012482                     i2l1630:
 22727                           
 22728                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 22729  012482  0E8F               	movlw	low _PortE
 22730  012484  6E10               	movwf	i2Port_SetPin@pInput,c
 22731  012486  0E00               	movlw	high _PortE
 22732  012488  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22733  01248A  0E00               	movlw	0
 22734  01248C  6E12               	movwf	i2Port_SetPin@pPin,c
 22735  01248E  0E01               	movlw	1
 22736  012490  6E13               	movwf	i2Port_SetPin@pValue,c
 22737  012492  EC80  F097         	call	i2_Port_SetPin	;wreg free
 22738                           
 22739                           ;Motor.c: 88: }
 22740  012496  D01B               	goto	i2l1631
 22741  012498                     i2l1629:
 22742                           
 22743                           ;Motor.c: 89: else
 22744                           ;Motor.c: 90: {
 22745                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 22746  012498  C07D  FFD9         	movff	_lMotor,fsr2l
 22747  01249C  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22748  0124A0  04DE               	decf	postinc2,w,c
 22749  0124A2  E104               	bnz	i2u497_40
 22750  0124A4  0E80               	movlw	128
 22751  0124A6  18DE               	xorwf	postinc2,w,c
 22752  0124A8  B4D8               	btfsc	status,2,c
 22753  0124AA  D007               	goto	i2l1632
 22754  0124AC                     i2u497_40:
 22755                           
 22756                           ;Motor.c: 92: lMotor->mDelta ++;
 22757  0124AC  C07D  FFD9         	movff	_lMotor,fsr2l
 22758  0124B0  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22759  0124B4  2ADE               	incf	postinc2,f,c
 22760  0124B6  0E00               	movlw	0
 22761  0124B8  22DD               	addwfc	postdec2,f,c
 22762  0124BA                     i2l1632:
 22763                           
 22764                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 22765  0124BA  0E8F               	movlw	low _PortE
 22766  0124BC  6E10               	movwf	i2Port_SetPin@pInput,c
 22767  0124BE  0E00               	movlw	high _PortE
 22768  0124C0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22769  0124C2  0E00               	movlw	0
 22770  0124C4  6E12               	movwf	i2Port_SetPin@pPin,c
 22771  0124C6  0E00               	movlw	0
 22772  0124C8  6E13               	movwf	i2Port_SetPin@pValue,c
 22773  0124CA  EC80  F097         	call	i2_Port_SetPin	;wreg free
 22774  0124CE                     i2l1631:
 22775                           
 22776                           ;Motor.c: 95: }
 22777                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 22778  0124CE  0E8F               	movlw	low _PortE
 22779  0124D0  6E10               	movwf	i2Port_SetPin@pInput,c
 22780  0124D2  0E00               	movlw	high _PortE
 22781  0124D4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22782  0124D6  0E01               	movlw	1
 22783  0124D8  6E12               	movwf	i2Port_SetPin@pPin,c
 22784  0124DA  0E01               	movlw	1
 22785  0124DC  6E13               	movwf	i2Port_SetPin@pValue,c
 22786  0124DE  EC80  F097         	call	i2_Port_SetPin	;wreg free
 22787                           
 22788                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 22789  0124E2  0E8F               	movlw	low _PortE
 22790  0124E4  6E10               	movwf	i2Port_SetPin@pInput,c
 22791  0124E6  0E00               	movlw	high _PortE
 22792  0124E8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22793  0124EA  0E01               	movlw	1
 22794  0124EC  6E12               	movwf	i2Port_SetPin@pPin,c
 22795  0124EE  0E00               	movlw	0
 22796  0124F0  6E13               	movwf	i2Port_SetPin@pValue,c
 22797  0124F2  EC80  F097         	call	i2_Port_SetPin	;wreg free
 22798                           
 22799                           ;Motor.c: 101: MXK_Release();
 22800  0124F6  ECFB  F0A4         	call	i2_MXK_Release	;wreg free
 22801                           
 22802                           ;Motor.c: 102: Timer0_Restart();
 22803  0124FA  ECCF  F0A4         	call	i2_Timer0_Restart	;wreg free
 22804                           
 22805                           ;Motor.c: 103: return;
 22806  0124FE  0012               	return	
 22807  012500                     i2l1628:
 22808                           
 22809                           ;Motor.c: 104: }
 22810                           ;Motor.c: 105: MXK_Release();
 22811  012500  ECFB  F0A4         	call	i2_MXK_Release	;wreg free
 22812                           
 22813                           ;Motor.c: 106: Timer0_Stop();
 22814  012504  ECF8  F0A4         	call	i2_Timer0_Stop	;wreg free
 22815                           
 22816                           ;Motor.c: 107: return;
 22817  012508  0012               	return	
 22818  01250A                     i2l1627:
 22819                           
 22820                           ;Motor.c: 108: }
 22821                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 22822  01250A  C072  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 22823  01250E  C073  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 22824  012512  C074  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 22825  012516  ECC2  F0A4         	call	i2_MXK_Queue	;wreg free
 22826  01251A  0012               	return		;funcret
 22827  01251C                     __end_ofi2_Motor_Step:
 22828                           	opt stack 0
 22829                           tosu	equ	0xFFF
 22830                           tosh	equ	0xFFE
 22831                           tosl	equ	0xFFD
 22832                           pclatu	equ	0xFFB
 22833                           pclath	equ	0xFFA
 22834                           tblptru	equ	0xFF8
 22835                           tblptrh	equ	0xFF7
 22836                           tblptrl	equ	0xFF6
 22837                           tablat	equ	0xFF5
 22838                           prodh	equ	0xFF4
 22839                           prodl	equ	0xFF3
 22840                           intcon	equ	0xFF2
 22841                           indf0	equ	0xFEF
 22842                           postinc0	equ	0xFEE
 22843                           fsr0h	equ	0xFEA
 22844                           fsr0l	equ	0xFE9
 22845                           wreg	equ	0xFE8
 22846                           indf1	equ	0xFE7
 22847                           postdec1	equ	0xFE5
 22848                           fsr1h	equ	0xFE2
 22849                           fsr1l	equ	0xFE1
 22850                           indf2	equ	0xFDF
 22851                           postinc2	equ	0xFDE
 22852                           postdec2	equ	0xFDD
 22853                           plusw2	equ	0xFDB
 22854                           fsr2h	equ	0xFDA
 22855                           fsr2l	equ	0xFD9
 22856                           status	equ	0xFD8
 22857                           
 22858 ;; *************** function i2_Timer0_Stop *****************
 22859 ;; Defined at:
 22860 ;;		line 89 in file "Library/Timer0.c"
 22861 ;; Parameters:    Size  Location     Type
 22862 ;;		None
 22863 ;; Auto vars:     Size  Location     Type
 22864 ;;		None
 22865 ;; Return value:  Size  Location     Type
 22866 ;;                  1    wreg      void 
 22867 ;; Registers used:
 22868 ;;		None
 22869 ;; Tracked objects:
 22870 ;;		On entry : 0/0
 22871 ;;		On exit  : 0/0
 22872 ;;		Unchanged: 0/0
 22873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22878 ;;Total ram usage:        0 bytes
 22879 ;; Hardware stack levels used:    1
 22880 ;; This function calls:
 22881 ;;		Nothing
 22882 ;; This function is called by:
 22883 ;;		_Timer0_ISR
 22884 ;;		i2_Motor_Step
 22885 ;; This function uses a non-reentrant model
 22886 ;;
 22887                           
 22888                           	psect	text128
 22889  0149F0                     __ptext128:
 22890                           	opt stack 0
 22891  0149F0                     i2_Timer0_Stop:
 22892                           	opt stack 18
 22893                           
 22894                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 22895                           
 22896                           ;incstack = 0
 22897  0149F0  9AF2               	bcf	intcon,5,c	;volatile
 22898                           
 22899                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 22900  0149F2  94F2               	bcf	intcon,2,c	;volatile
 22901  0149F4  0012               	return		;funcret
 22902  0149F6                     __end_ofi2_Timer0_Stop:
 22903                           	opt stack 0
 22904                           tosu	equ	0xFFF
 22905                           tosh	equ	0xFFE
 22906                           tosl	equ	0xFFD
 22907                           pclatu	equ	0xFFB
 22908                           pclath	equ	0xFFA
 22909                           tblptru	equ	0xFF8
 22910                           tblptrh	equ	0xFF7
 22911                           tblptrl	equ	0xFF6
 22912                           tablat	equ	0xFF5
 22913                           prodh	equ	0xFF4
 22914                           prodl	equ	0xFF3
 22915                           intcon	equ	0xFF2
 22916                           indf0	equ	0xFEF
 22917                           postinc0	equ	0xFEE
 22918                           fsr0h	equ	0xFEA
 22919                           fsr0l	equ	0xFE9
 22920                           wreg	equ	0xFE8
 22921                           indf1	equ	0xFE7
 22922                           postdec1	equ	0xFE5
 22923                           fsr1h	equ	0xFE2
 22924                           fsr1l	equ	0xFE1
 22925                           indf2	equ	0xFDF
 22926                           postinc2	equ	0xFDE
 22927                           postdec2	equ	0xFDD
 22928                           plusw2	equ	0xFDB
 22929                           fsr2h	equ	0xFDA
 22930                           fsr2l	equ	0xFD9
 22931                           status	equ	0xFD8
 22932                           
 22933 ;; *************** function i2_Timer0_Restart *****************
 22934 ;; Defined at:
 22935 ;;		line 83 in file "Library/Timer0.c"
 22936 ;; Parameters:    Size  Location     Type
 22937 ;;		None
 22938 ;; Auto vars:     Size  Location     Type
 22939 ;;		None
 22940 ;; Return value:  Size  Location     Type
 22941 ;;                  1    wreg      void 
 22942 ;; Registers used:
 22943 ;;		None
 22944 ;; Tracked objects:
 22945 ;;		On entry : 0/0
 22946 ;;		On exit  : 0/0
 22947 ;;		Unchanged: 0/0
 22948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22953 ;;Total ram usage:        0 bytes
 22954 ;; Hardware stack levels used:    1
 22955 ;; This function calls:
 22956 ;;		Nothing
 22957 ;; This function is called by:
 22958 ;;		i2_Motor_Step
 22959 ;; This function uses a non-reentrant model
 22960 ;;
 22961                           
 22962                           	psect	text129
 22963  01499E                     __ptext129:
 22964                           	opt stack 0
 22965  01499E                     i2_Timer0_Restart:
 22966                           	opt stack 17
 22967                           
 22968                           ;Timer0.c: 85: TMR0 = COUNTER;
 22969                           
 22970                           ;incstack = 0
 22971  01499E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 22972  0149A2  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 22973                           
 22974                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 22975  0149A6  8AF2               	bsf	intcon,5,c	;volatile
 22976  0149A8  0012               	return		;funcret
 22977  0149AA                     __end_ofi2_Timer0_Restart:
 22978                           	opt stack 0
 22979                           tosu	equ	0xFFF
 22980                           tosh	equ	0xFFE
 22981                           tosl	equ	0xFFD
 22982                           pclatu	equ	0xFFB
 22983                           pclath	equ	0xFFA
 22984                           tblptru	equ	0xFF8
 22985                           tblptrh	equ	0xFF7
 22986                           tblptrl	equ	0xFF6
 22987                           tablat	equ	0xFF5
 22988                           prodh	equ	0xFF4
 22989                           prodl	equ	0xFF3
 22990                           intcon	equ	0xFF2
 22991                           indf0	equ	0xFEF
 22992                           postinc0	equ	0xFEE
 22993                           fsr0h	equ	0xFEA
 22994                           fsr0l	equ	0xFE9
 22995                           wreg	equ	0xFE8
 22996                           indf1	equ	0xFE7
 22997                           postdec1	equ	0xFE5
 22998                           fsr1h	equ	0xFE2
 22999                           fsr1l	equ	0xFE1
 23000                           indf2	equ	0xFDF
 23001                           postinc2	equ	0xFDE
 23002                           postdec2	equ	0xFDD
 23003                           plusw2	equ	0xFDB
 23004                           fsr2h	equ	0xFDA
 23005                           fsr2l	equ	0xFD9
 23006                           status	equ	0xFD8
 23007                           
 23008 ;; *************** function i2_Port_SetPin *****************
 23009 ;; Defined at:
 23010 ;;		line 247 in file "Library/Port.c"
 23011 ;; Parameters:    Size  Location     Type
 23012 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23013 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23014 ;;  pPin            1   17[COMRAM] enum E6750
 23015 ;;  pValue          1   18[COMRAM] unsigned char 
 23016 ;; Auto vars:     Size  Location     Type
 23017 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23018 ;; Return value:  Size  Location     Type
 23019 ;;                  1    wreg      void 
 23020 ;; Registers used:
 23021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23022 ;; Tracked objects:
 23023 ;;		On entry : 0/0
 23024 ;;		On exit  : 0/0
 23025 ;;		Unchanged: 0/0
 23026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23030 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23031 ;;Total ram usage:        5 bytes
 23032 ;; Hardware stack levels used:    1
 23033 ;; Hardware stack levels required when called:    3
 23034 ;; This function calls:
 23035 ;;		i2_Byte_SetBit
 23036 ;;		i2_Word_GetPair
 23037 ;; This function is called by:
 23038 ;;		i2_Motor_Step
 23039 ;; This function uses a non-reentrant model
 23040 ;;
 23041                           
 23042                           	psect	text130
 23043  012F00                     __ptext130:
 23044                           	opt stack 0
 23045  012F00                     i2_Port_SetPin:
 23046                           	opt stack 14
 23047                           
 23048                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23049                           
 23050                           ;incstack = 0
 23051  012F00  0E08               	movlw	8
 23052  012F02  2410               	addwf	i2Port_SetPin@pInput,w,c
 23053  012F04  6E0D               	movwf	i2Word_GetPair@pInput,c
 23054  012F06  0E00               	movlw	0
 23055  012F08  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23056  012F0A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23057  012F0C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23058  012F10  ECC3  F0A2         	call	i2_Word_GetPair	;wreg free
 23059  012F14  6E14               	movwf	i2Port_SetPin@Type,c
 23060                           
 23061                           ;Port.c: 250: switch (Type)
 23062  012F16  D03B               	goto	i2l427
 23063  012F18                     
 23064                           ;Port.c: 256: pValue &= 1;
 23065  012F18  0E01               	movlw	1
 23066  012F1A  1613               	andwf	i2Port_SetPin@pValue,f,c
 23067                           
 23068                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23069  012F1C  EE20 F002          	lfsr	2,2
 23070  012F20  5010               	movf	i2Port_SetPin@pInput,w,c
 23071  012F22  26D9               	addwf	fsr2l,f,c
 23072  012F24  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23073  012F26  22DA               	addwfc	fsr2h,f,c
 23074  012F28  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23075  012F2C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23076  012F30  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23077  012F34  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23078  012F38  EC2C  F0A0         	call	i2_Byte_SetBit	;wreg free
 23079                           
 23080                           ;Port.c: 258: break;
 23081  012F3C  0012               	return	
 23082  012F3E                     
 23083                           ;Port.c: 261: pValue &= 1;
 23084  012F3E  0E01               	movlw	1
 23085  012F40  1613               	andwf	i2Port_SetPin@pValue,f,c
 23086                           
 23087                           ;Port.c: 262: pValue ^= 1;
 23088  012F42  0E01               	movlw	1
 23089  012F44  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23090                           
 23091                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23092  012F46  EE20 F002          	lfsr	2,2
 23093  012F4A  5010               	movf	i2Port_SetPin@pInput,w,c
 23094  012F4C  26D9               	addwf	fsr2l,f,c
 23095  012F4E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23096  012F50  22DA               	addwfc	fsr2h,f,c
 23097  012F52  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23098  012F56  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23099  012F5A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23100  012F5E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23101  012F62  EC2C  F0A0         	call	i2_Byte_SetBit	;wreg free
 23102                           
 23103                           ;Port.c: 264: break;
 23104  012F66  0012               	return	
 23105  012F68                     
 23106                           ;Port.c: 266: pValue &= 1;
 23107  012F68  0E01               	movlw	1
 23108  012F6A  1613               	andwf	i2Port_SetPin@pValue,f,c
 23109                           
 23110                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23111  012F6C  EE20 F004          	lfsr	2,4
 23112  012F70  5010               	movf	i2Port_SetPin@pInput,w,c
 23113  012F72  26D9               	addwf	fsr2l,f,c
 23114  012F74  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23115  012F76  22DA               	addwfc	fsr2h,f,c
 23116  012F78  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23117  012F7C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23118  012F80  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23119  012F84  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23120  012F88  EC2C  F0A0         	call	i2_Byte_SetBit	;wreg free
 23121                           
 23122                           ;Port.c: 269: }
 23123                           
 23124                           ;Port.c: 268: break;
 23125  012F8C  0012               	return	
 23126  012F8E                     i2l427:
 23127  012F8E  5014               	movf	i2Port_SetPin@Type,w,c
 23128                           
 23129                           ; Switch size 1, requested type "space"
 23130                           ; Number of cases is 4, Range of values is 0 to 3
 23131                           ; switch strategies available:
 23132                           ; Name         Instructions Cycles
 23133                           ; simple_byte           13     7 (average)
 23134                           ;	Chosen strategy is simple_byte
 23135  012F90  0A00               	xorlw	0	; case 0
 23136  012F92  B4D8               	btfsc	status,2,c
 23137  012F94  0012               	return	
 23138  012F96  0A01               	xorlw	1	; case 1
 23139  012F98  B4D8               	btfsc	status,2,c
 23140  012F9A  D7BE               	goto	i2l430
 23141  012F9C  0A03               	xorlw	3	; case 2
 23142  012F9E  B4D8               	btfsc	status,2,c
 23143  012FA0  D7CE               	goto	i2l432
 23144  012FA2  0A01               	xorlw	1	; case 3
 23145  012FA4  A4D8               	btfss	status,2,c
 23146  012FA6  0012               	return	
 23147  012FA8  D7DF               	goto	i2l433
 23148  012FAA                     __end_ofi2_Port_SetPin:
 23149                           	opt stack 0
 23150                           tosu	equ	0xFFF
 23151                           tosh	equ	0xFFE
 23152                           tosl	equ	0xFFD
 23153                           pclatu	equ	0xFFB
 23154                           pclath	equ	0xFFA
 23155                           tblptru	equ	0xFF8
 23156                           tblptrh	equ	0xFF7
 23157                           tblptrl	equ	0xFF6
 23158                           tablat	equ	0xFF5
 23159                           prodh	equ	0xFF4
 23160                           prodl	equ	0xFF3
 23161                           intcon	equ	0xFF2
 23162                           indf0	equ	0xFEF
 23163                           postinc0	equ	0xFEE
 23164                           fsr0h	equ	0xFEA
 23165                           fsr0l	equ	0xFE9
 23166                           wreg	equ	0xFE8
 23167                           indf1	equ	0xFE7
 23168                           postdec1	equ	0xFE5
 23169                           fsr1h	equ	0xFE2
 23170                           fsr1l	equ	0xFE1
 23171                           indf2	equ	0xFDF
 23172                           postinc2	equ	0xFDE
 23173                           postdec2	equ	0xFDD
 23174                           plusw2	equ	0xFDB
 23175                           fsr2h	equ	0xFDA
 23176                           fsr2l	equ	0xFD9
 23177                           status	equ	0xFD8
 23178                           
 23179 ;; *************** function i2_Word_GetPair *****************
 23180 ;; Defined at:
 23181 ;;		line 156 in file "Library/Types.c"
 23182 ;; Parameters:    Size  Location     Type
 23183 ;;  pInput          2   12[COMRAM] PTR struct Word
 23184 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23185 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23186 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23187 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23188 ;;  pPair           1   14[COMRAM] unsigned char 
 23189 ;; Auto vars:     Size  Location     Type
 23190 ;;		None
 23191 ;; Return value:  Size  Location     Type
 23192 ;;                  1    wreg      unsigned char 
 23193 ;; Registers used:
 23194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23195 ;; Tracked objects:
 23196 ;;		On entry : 0/0
 23197 ;;		On exit  : 0/0
 23198 ;;		Unchanged: 0/0
 23199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23200 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23203 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23204 ;;Total ram usage:        3 bytes
 23205 ;; Hardware stack levels used:    1
 23206 ;; Hardware stack levels required when called:    2
 23207 ;; This function calls:
 23208 ;;		i2_Byte_GetPair
 23209 ;; This function is called by:
 23210 ;;		i2_Port_SetPin
 23211 ;; This function uses a non-reentrant model
 23212 ;;
 23213                           
 23214                           	psect	text131
 23215  014586                     __ptext131:
 23216                           	opt stack 0
 23217  014586                     i2_Word_GetPair:
 23218                           	opt stack 14
 23219                           
 23220                           ;Types.c: 158: if (pPair >= 4)
 23221                           
 23222                           ;incstack = 0
 23223  014586  0E03               	movlw	3
 23224  014588  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23225  01458A  D00C               	goto	i2l781
 23226                           
 23227                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23228  01458C  0E01               	movlw	1
 23229  01458E  240D               	addwf	i2Word_GetPair@pInput,w,c
 23230  014590  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23231  014592  0E00               	movlw	0
 23232  014594  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23233  014596  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23234  014598  500F               	movf	i2Word_GetPair@pPair,w,c
 23235  01459A  0FFC               	addlw	252
 23236  01459C  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23237  01459E  EC16  F0A4         	call	i2_Byte_GetPair	;wreg free
 23238  0145A2  0012               	return	
 23239  0145A4                     i2l781:
 23240                           
 23241                           ;Types.c: 160: else
 23242                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23243  0145A4  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23244  0145A8  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23245  0145AC  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23246  0145B0  EC16  F0A4         	call	i2_Byte_GetPair	;wreg free
 23247  0145B4  0012               	return	
 23248  0145B6                     __end_ofi2_Word_GetPair:
 23249                           	opt stack 0
 23250                           tosu	equ	0xFFF
 23251                           tosh	equ	0xFFE
 23252                           tosl	equ	0xFFD
 23253                           pclatu	equ	0xFFB
 23254                           pclath	equ	0xFFA
 23255                           tblptru	equ	0xFF8
 23256                           tblptrh	equ	0xFF7
 23257                           tblptrl	equ	0xFF6
 23258                           tablat	equ	0xFF5
 23259                           prodh	equ	0xFF4
 23260                           prodl	equ	0xFF3
 23261                           intcon	equ	0xFF2
 23262                           indf0	equ	0xFEF
 23263                           postinc0	equ	0xFEE
 23264                           fsr0h	equ	0xFEA
 23265                           fsr0l	equ	0xFE9
 23266                           wreg	equ	0xFE8
 23267                           indf1	equ	0xFE7
 23268                           postdec1	equ	0xFE5
 23269                           fsr1h	equ	0xFE2
 23270                           fsr1l	equ	0xFE1
 23271                           indf2	equ	0xFDF
 23272                           postinc2	equ	0xFDE
 23273                           postdec2	equ	0xFDD
 23274                           plusw2	equ	0xFDB
 23275                           fsr2h	equ	0xFDA
 23276                           fsr2l	equ	0xFD9
 23277                           status	equ	0xFD8
 23278                           
 23279 ;; *************** function i2_Byte_GetPair *****************
 23280 ;; Defined at:
 23281 ;;		line 87 in file "Library/Types.c"
 23282 ;; Parameters:    Size  Location     Type
 23283 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23284 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23285 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23286 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23287 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23288 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23289 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23290 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23291 ;;		 -> NULL(0), 
 23292 ;;  pPair           1   11[COMRAM] unsigned char 
 23293 ;; Auto vars:     Size  Location     Type
 23294 ;;		None
 23295 ;; Return value:  Size  Location     Type
 23296 ;;                  1    wreg      unsigned char 
 23297 ;; Registers used:
 23298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23299 ;; Tracked objects:
 23300 ;;		On entry : 0/0
 23301 ;;		On exit  : 0/0
 23302 ;;		Unchanged: 0/0
 23303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23304 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;Total ram usage:        3 bytes
 23309 ;; Hardware stack levels used:    1
 23310 ;; Hardware stack levels required when called:    1
 23311 ;; This function calls:
 23312 ;;		i2_Byte_GetZone
 23313 ;; This function is called by:
 23314 ;;		i2_Word_GetPair
 23315 ;; This function uses a non-reentrant model
 23316 ;;
 23317                           
 23318                           	psect	text132
 23319  01482C                     __ptext132:
 23320                           	opt stack 0
 23321  01482C                     i2_Byte_GetPair:
 23322                           	opt stack 14
 23323                           
 23324                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23325                           
 23326                           ;incstack = 0
 23327  01482C  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23328  014830  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23329  014834  0E04               	movlw	4
 23330  014836  6E03               	movwf	i2Byte_GetZone@pMax,c
 23331  014838  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23332  01483C  0E02               	movlw	2
 23333  01483E  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23334  014840  ECA0  F09B         	call	i2_Byte_GetZone	;wreg free
 23335  014844  0012               	return	
 23336  014846                     __end_ofi2_Byte_GetPair:
 23337                           	opt stack 0
 23338                           tosu	equ	0xFFF
 23339                           tosh	equ	0xFFE
 23340                           tosl	equ	0xFFD
 23341                           pclatu	equ	0xFFB
 23342                           pclath	equ	0xFFA
 23343                           tblptru	equ	0xFF8
 23344                           tblptrh	equ	0xFF7
 23345                           tblptrl	equ	0xFF6
 23346                           tablat	equ	0xFF5
 23347                           prodh	equ	0xFF4
 23348                           prodl	equ	0xFF3
 23349                           intcon	equ	0xFF2
 23350                           indf0	equ	0xFEF
 23351                           postinc0	equ	0xFEE
 23352                           fsr0h	equ	0xFEA
 23353                           fsr0l	equ	0xFE9
 23354                           wreg	equ	0xFE8
 23355                           indf1	equ	0xFE7
 23356                           postdec1	equ	0xFE5
 23357                           fsr1h	equ	0xFE2
 23358                           fsr1l	equ	0xFE1
 23359                           indf2	equ	0xFDF
 23360                           postinc2	equ	0xFDE
 23361                           postdec2	equ	0xFDD
 23362                           plusw2	equ	0xFDB
 23363                           fsr2h	equ	0xFDA
 23364                           fsr2l	equ	0xFD9
 23365                           status	equ	0xFD8
 23366                           
 23367 ;; *************** function i2_Byte_GetZone *****************
 23368 ;; Defined at:
 23369 ;;		line 64 in file "Library/Types.c"
 23370 ;; Parameters:    Size  Location     Type
 23371 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23372 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23373 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23374 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23375 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23376 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23377 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23378 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23379 ;;		 -> NULL(0), 
 23380 ;;  pMax            1    2[COMRAM] unsigned char 
 23381 ;;  pChunk          1    3[COMRAM] unsigned char 
 23382 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23383 ;; Auto vars:     Size  Location     Type
 23384 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23385 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23386 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23387 ;; Return value:  Size  Location     Type
 23388 ;;                  1    wreg      unsigned char 
 23389 ;; Registers used:
 23390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23391 ;; Tracked objects:
 23392 ;;		On entry : 0/0
 23393 ;;		On exit  : 0/0
 23394 ;;		Unchanged: 0/0
 23395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23396 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23397 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23399 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23400 ;;Total ram usage:        9 bytes
 23401 ;; Hardware stack levels used:    1
 23402 ;; This function calls:
 23403 ;;		Nothing
 23404 ;; This function is called by:
 23405 ;;		i2_Byte_GetPair
 23406 ;; This function uses a non-reentrant model
 23407 ;;
 23408                           
 23409                           	psect	text133
 23410  013740                     __ptext133:
 23411                           	opt stack 0
 23412  013740                     i2_Byte_GetZone:
 23413                           	opt stack 14
 23414                           
 23415                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23416                           
 23417                           ;incstack = 0
 23418  013740  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23419  013744  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23420  013748  0E00               	movlw	low (__mediumconst shr (0+16))
 23421  01374A  6EF8               	movwf	tblptru,c
 23422  01374C  0E0F               	movlw	(high __ramtop+-1)
 23423  01374E  64F7               	cpfsgt	tblptrh,c
 23424  013750  D003               	bra	i2u356_47
 23425  013752  0008               	tblrd		*
 23426  013754  50F5               	movf	tablat,w,c
 23427  013756  D005               	bra	i2u356_40
 23428  013758                     i2u356_47:
 23429  013758  CFF6 FFE9          	movff	tblptrl,fsr0l
 23430  01375C  CFF7 FFEA          	movff	tblptrh,fsr0h
 23431  013760  50EF               	movf	indf0,w,c
 23432  013762                     i2u356_40:
 23433  013762  6E09               	movwf	i2Byte_GetZone@Output,c
 23434                           
 23435                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23436  013764  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23437  013766  0D01               	mullw	1
 23438  013768  0EA9               	movlw	low _MASKS
 23439  01376A  24F3               	addwf	prodl,w,c
 23440  01376C  6EF6               	movwf	tblptrl,c
 23441  01376E  0EFD               	movlw	high _MASKS
 23442  013770  20F4               	addwfc	prodh,w,c
 23443  013772  6EF7               	movwf	tblptrh,c
 23444  013774                     	if	1	;There are 3 active tblptr bytes
 23445  013774  6AF8               	clrf	tblptru,c
 23446  013776  0E00               	movlw	low (__mediumconst shr (0+16))
 23447  013778  22F8               	addwfc	tblptru,f,c
 23448  01377A                     	endif
 23449  01377A  0008               	tblrd		*
 23450  01377C  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 23451                           
 23452                           ;Types.c: 68: UINT8 Offset = 0;
 23453  013780  0E00               	movlw	0
 23454  013782  6E08               	movwf	i2Byte_GetZone@Offset,c
 23455                           
 23456                           ;Types.c: 70: while (pChunk >= pMax)
 23457  013784  D003               	goto	i2l732
 23458  013786                     
 23459                           ;Types.c: 71: {
 23460                           ;Types.c: 72: pChunk -= pMax;
 23461  013786  5003               	movf	i2Byte_GetZone@pMax,w,c
 23462  013788  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 23463                           
 23464                           ;Types.c: 73: Offset += 1;
 23465  01378A  2A08               	incf	i2Byte_GetZone@Offset,f,c
 23466  01378C                     i2l732:
 23467  01378C  5003               	movf	i2Byte_GetZone@pMax,w,c
 23468  01378E  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 23469  013790  B0D8               	btfsc	status,0,c
 23470  013792  D7F9               	goto	i2l733
 23471                           
 23472                           ;Types.c: 74: }
 23473                           ;Types.c: 75: pChunk *= pChunkSize;
 23474  013794  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23475  013796  0204               	mulwf	i2Byte_GetZone@pChunk,c
 23476  013798  50F3               	movf	prodl,w,c
 23477  01379A  6E04               	movwf	i2Byte_GetZone@pChunk,c
 23478                           
 23479                           ;Types.c: 76: pChunk += Offset;
 23480  01379C  5008               	movf	i2Byte_GetZone@Offset,w,c
 23481  01379E  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 23482                           
 23483                           ;Types.c: 78: Output >>= pChunk;
 23484  0137A0  2804               	incf	i2Byte_GetZone@pChunk,w,c
 23485  0137A2  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 23486  0137A4  D002               	goto	i2u358_40
 23487  0137A6                     i2u358_45:
 23488  0137A6  90D8               	bcf	status,0,c
 23489  0137A8  3209               	rrcf	i2Byte_GetZone@Output,f,c
 23490  0137AA                     i2u358_40:
 23491  0137AA  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 23492  0137AC  D7FC               	goto	i2u358_45
 23493                           
 23494                           ;Types.c: 79: Output &= MASK;
 23495  0137AE  5007               	movf	i2Byte_GetZone@MASK,w,c
 23496  0137B0  1609               	andwf	i2Byte_GetZone@Output,f,c
 23497                           
 23498                           ;Types.c: 80: return Output;
 23499  0137B2  5009               	movf	i2Byte_GetZone@Output,w,c
 23500  0137B4  0012               	return	
 23501  0137B6                     __end_ofi2_Byte_GetZone:
 23502                           	opt stack 0
 23503                           tosu	equ	0xFFF
 23504                           tosh	equ	0xFFE
 23505                           tosl	equ	0xFFD
 23506                           pclatu	equ	0xFFB
 23507                           pclath	equ	0xFFA
 23508                           tblptru	equ	0xFF8
 23509                           tblptrh	equ	0xFF7
 23510                           tblptrl	equ	0xFF6
 23511                           tablat	equ	0xFF5
 23512                           prodh	equ	0xFF4
 23513                           prodl	equ	0xFF3
 23514                           intcon	equ	0xFF2
 23515                           indf0	equ	0xFEF
 23516                           postinc0	equ	0xFEE
 23517                           fsr0h	equ	0xFEA
 23518                           fsr0l	equ	0xFE9
 23519                           wreg	equ	0xFE8
 23520                           indf1	equ	0xFE7
 23521                           postdec1	equ	0xFE5
 23522                           fsr1h	equ	0xFE2
 23523                           fsr1l	equ	0xFE1
 23524                           indf2	equ	0xFDF
 23525                           postinc2	equ	0xFDE
 23526                           postdec2	equ	0xFDD
 23527                           plusw2	equ	0xFDB
 23528                           fsr2h	equ	0xFDA
 23529                           fsr2l	equ	0xFD9
 23530                           status	equ	0xFD8
 23531                           
 23532 ;; *************** function i2_Byte_SetBit *****************
 23533 ;; Defined at:
 23534 ;;		line 32 in file "Library/Types.c"
 23535 ;; Parameters:    Size  Location     Type
 23536 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23537 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 23538 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 23539 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23540 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23541 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23542 ;;		 -> NULL(0), 
 23543 ;;  pBit            1    2[COMRAM] unsigned char 
 23544 ;;  pValue          1    3[COMRAM] unsigned char 
 23545 ;; Auto vars:     Size  Location     Type
 23546 ;;		None
 23547 ;; Return value:  Size  Location     Type
 23548 ;;                  1    wreg      void 
 23549 ;; Registers used:
 23550 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23551 ;; Tracked objects:
 23552 ;;		On entry : 0/0
 23553 ;;		On exit  : 0/0
 23554 ;;		Unchanged: 0/0
 23555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23559 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23560 ;;Total ram usage:        7 bytes
 23561 ;; Hardware stack levels used:    1
 23562 ;; This function calls:
 23563 ;;		Nothing
 23564 ;; This function is called by:
 23565 ;;		i2_Port_SetPin
 23566 ;; This function uses a non-reentrant model
 23567 ;;
 23568                           
 23569                           	psect	text134
 23570  014058                     __ptext134:
 23571                           	opt stack 0
 23572  014058                     i2_Byte_SetBit:
 23573                           	opt stack 16
 23574                           
 23575                           ;Types.c: 34: pValue &= 1;
 23576                           
 23577                           ;incstack = 0
 23578  014058  0E01               	movlw	1
 23579  01405A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 23580                           
 23581                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 23582  01405C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23583  014060  0E01               	movlw	1
 23584  014062  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 23585  014064  2A05               	incf	??i2_Byte_SetBit,f,c
 23586  014066  D002               	goto	i2u409_44
 23587  014068                     i2u409_45:
 23588  014068  90D8               	bcf	status,0,c
 23589  01406A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23590  01406C                     i2u409_44:
 23591  01406C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23592  01406E  D7FC               	goto	i2u409_45
 23593  014070  5006               	movf	??i2_Byte_SetBit+1,w,c
 23594  014072  0AFF               	xorlw	255
 23595  014074  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 23596  014076  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23597  01407A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23598  01407E  5007               	movf	??i2_Byte_SetBit+2,w,c
 23599  014080  16DF               	andwf	indf2,f,c
 23600                           
 23601                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 23602  014082  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23603  014086  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 23604  01408A  2A05               	incf	??i2_Byte_SetBit,f,c
 23605  01408C  D002               	goto	i2u410_44
 23606  01408E                     i2u410_45:
 23607  01408E  90D8               	bcf	status,0,c
 23608  014090  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23609  014092                     i2u410_44:
 23610  014092  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23611  014094  D7FC               	goto	i2u410_45
 23612  014096  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23613  01409A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23614  01409E  5006               	movf	??i2_Byte_SetBit+1,w,c
 23615  0140A0  12DF               	iorwf	indf2,f,c
 23616  0140A2  0012               	return		;funcret
 23617  0140A4                     __end_ofi2_Byte_SetBit:
 23618                           	opt stack 0
 23619                           tosu	equ	0xFFF
 23620                           tosh	equ	0xFFE
 23621                           tosl	equ	0xFFD
 23622                           pclatu	equ	0xFFB
 23623                           pclath	equ	0xFFA
 23624                           tblptru	equ	0xFF8
 23625                           tblptrh	equ	0xFF7
 23626                           tblptrl	equ	0xFF6
 23627                           tablat	equ	0xFF5
 23628                           prodh	equ	0xFF4
 23629                           prodl	equ	0xFF3
 23630                           intcon	equ	0xFF2
 23631                           indf0	equ	0xFEF
 23632                           postinc0	equ	0xFEE
 23633                           fsr0h	equ	0xFEA
 23634                           fsr0l	equ	0xFE9
 23635                           wreg	equ	0xFE8
 23636                           indf1	equ	0xFE7
 23637                           postdec1	equ	0xFE5
 23638                           fsr1h	equ	0xFE2
 23639                           fsr1l	equ	0xFE1
 23640                           indf2	equ	0xFDF
 23641                           postinc2	equ	0xFDE
 23642                           postdec2	equ	0xFDD
 23643                           plusw2	equ	0xFDB
 23644                           fsr2h	equ	0xFDA
 23645                           fsr2l	equ	0xFD9
 23646                           status	equ	0xFD8
 23647                           
 23648 ;; *************** function i2_MXK_SwitchTo *****************
 23649 ;; Defined at:
 23650 ;;		line 105 in file "Library/MXK.c"
 23651 ;; Parameters:    Size  Location     Type
 23652 ;;  pModule         1    wreg     enum E6927
 23653 ;; Auto vars:     Size  Location     Type
 23654 ;;  pModule         1    7[COMRAM] enum E6927
 23655 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 23656 ;; Return value:  Size  Location     Type
 23657 ;;                  1    wreg      unsigned char 
 23658 ;; Registers used:
 23659 ;;		wreg, status,2, status,0, cstack
 23660 ;; Tracked objects:
 23661 ;;		On entry : 0/0
 23662 ;;		On exit  : 0/0
 23663 ;;		Unchanged: 0/0
 23664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23666 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23669 ;;Total ram usage:        2 bytes
 23670 ;; Hardware stack levels used:    1
 23671 ;; Hardware stack levels required when called:    1
 23672 ;; This function calls:
 23673 ;;		i2_delay_us
 23674 ;; This function is called by:
 23675 ;;		i2_Motor_Step
 23676 ;; This function uses a non-reentrant model
 23677 ;;
 23678                           
 23679                           	psect	text135
 23680  0144BC                     __ptext135:
 23681                           	opt stack 0
 23682  0144BC                     i2_MXK_SwitchTo:
 23683                           	opt stack 16
 23684                           
 23685                           ;incstack = 0
 23686                           ;i2MXK_SwitchTo@pModule stored from wreg
 23687  0144BC  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 23688                           
 23689                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 23690  0144BE  5086               	movf	3974,w,c	;volatile
 23691  0144C0  0B0F               	andlw	15
 23692  0144C2  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 23693                           
 23694                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 23695  0144C4  504B               	movf	_Bus_State,w,c
 23696  0144C6  A4D8               	btfss	status,2,c
 23697  0144C8  D002               	goto	i2l1730
 23698                           
 23699                           ;MXK.c: 110: return 0;
 23700  0144CA  0E00               	movlw	0
 23701  0144CC  0012               	return	
 23702  0144CE                     i2l1730:
 23703                           
 23704                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 23705  0144CE  0E00               	movlw	0
 23706  0144D0  6E4B               	movwf	_Bus_State,c
 23707                           
 23708                           ;MXK.c: 114: if (CUR != pModule)
 23709  0144D2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23710  0144D4  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 23711  0144D6  B4D8               	btfsc	status,2,c
 23712  0144D8  D00A               	goto	i2l1732
 23713                           
 23714                           ;MXK.c: 115: {
 23715                           ;MXK.c: 116: PORTG &= ~(0xF);
 23716  0144DA  0EF0               	movlw	240
 23717  0144DC  1686               	andwf	3974,f,c	;volatile
 23718                           
 23719                           ;MXK.c: 117: PORTG |= pModule;
 23720  0144DE  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23721  0144E0  1286               	iorwf	3974,f,c	;volatile
 23722                           
 23723                           ;MXK.c: 120: delay_us(10);
 23724  0144E2  0E00               	movlw	0
 23725  0144E4  6E02               	movwf	i2delay_us@us+1,c
 23726  0144E6  0E0A               	movlw	10
 23727  0144E8  6E01               	movwf	i2delay_us@us,c
 23728  0144EA  EC8B  F0A1         	call	i2_delay_us	;wreg free
 23729  0144EE                     i2l1732:
 23730                           
 23731                           ;MXK.c: 121: }
 23732                           ;MXK.c: 122: return 1;
 23733  0144EE  0E01               	movlw	1
 23734  0144F0  0012               	return	
 23735  0144F2                     __end_ofi2_MXK_SwitchTo:
 23736                           	opt stack 0
 23737                           tosu	equ	0xFFF
 23738                           tosh	equ	0xFFE
 23739                           tosl	equ	0xFFD
 23740                           pclatu	equ	0xFFB
 23741                           pclath	equ	0xFFA
 23742                           tblptru	equ	0xFF8
 23743                           tblptrh	equ	0xFF7
 23744                           tblptrl	equ	0xFF6
 23745                           tablat	equ	0xFF5
 23746                           prodh	equ	0xFF4
 23747                           prodl	equ	0xFF3
 23748                           intcon	equ	0xFF2
 23749                           indf0	equ	0xFEF
 23750                           postinc0	equ	0xFEE
 23751                           fsr0h	equ	0xFEA
 23752                           fsr0l	equ	0xFE9
 23753                           wreg	equ	0xFE8
 23754                           indf1	equ	0xFE7
 23755                           postdec1	equ	0xFE5
 23756                           fsr1h	equ	0xFE2
 23757                           fsr1l	equ	0xFE1
 23758                           indf2	equ	0xFDF
 23759                           postinc2	equ	0xFDE
 23760                           postdec2	equ	0xFDD
 23761                           plusw2	equ	0xFDB
 23762                           fsr2h	equ	0xFDA
 23763                           fsr2l	equ	0xFD9
 23764                           status	equ	0xFD8
 23765                           
 23766 ;; *************** function i2_delay_us *****************
 23767 ;; Defined at:
 23768 ;;		line 255 in file "Library/Types.c"
 23769 ;; Parameters:    Size  Location     Type
 23770 ;;  us              2    0[COMRAM] unsigned short 
 23771 ;; Auto vars:     Size  Location     Type
 23772 ;;  delay_us        4    2[COMRAM] unsigned long 
 23773 ;; Return value:  Size  Location     Type
 23774 ;;                  1    wreg      void 
 23775 ;; Registers used:
 23776 ;;		wreg, status,2, status,0
 23777 ;; Tracked objects:
 23778 ;;		On entry : 0/0
 23779 ;;		On exit  : 0/0
 23780 ;;		Unchanged: 0/0
 23781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23783 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23786 ;;Total ram usage:        6 bytes
 23787 ;; Hardware stack levels used:    1
 23788 ;; This function calls:
 23789 ;;		Nothing
 23790 ;; This function is called by:
 23791 ;;		i2_MXK_SwitchTo
 23792 ;; This function uses a non-reentrant model
 23793 ;;
 23794                           
 23795                           	psect	text136
 23796  014316                     __ptext136:
 23797                           	opt stack 0
 23798  014316                     i2_delay_us:
 23799                           	opt stack 16
 23800                           
 23801                           ;Types.c: 256: unsigned long u;
 23802                           ;Types.c: 257: while (us--) {
 23803                           
 23804                           ;incstack = 0
 23805  014316  D016               	goto	i2u413_40
 23806  014318                     i2l7648:
 23807                           
 23808                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 23809  014318  0E00               	movlw	0
 23810  01431A  6E03               	movwf	i2delay_us@u,c
 23811  01431C  0E00               	movlw	0
 23812  01431E  6E04               	movwf	i2delay_us@u+1,c
 23813  014320  0E00               	movlw	0
 23814  014322  6E05               	movwf	i2delay_us@u+2,c
 23815  014324  0E00               	movlw	0
 23816  014326  6E06               	movwf	i2delay_us@u+3,c
 23817  014328                     i2l7650:
 23818  014328  5003               	movf	i2delay_us@u,w,c
 23819  01432A  1004               	iorwf	i2delay_us@u+1,w,c
 23820  01432C  1005               	iorwf	i2delay_us@u+2,w,c
 23821  01432E  1006               	iorwf	i2delay_us@u+3,w,c
 23822  014330  A4D8               	btfss	status,2,c
 23823  014332  D008               	goto	i2u413_40
 23824  014334  F000               	nop		; ;# 
 23825  014336  0E01               	movlw	1
 23826  014338  2603               	addwf	i2delay_us@u,f,c
 23827  01433A  0E00               	movlw	0
 23828  01433C  2204               	addwfc	i2delay_us@u+1,f,c
 23829  01433E  2205               	addwfc	i2delay_us@u+2,f,c
 23830  014340  2206               	addwfc	i2delay_us@u+3,f,c
 23831  014342  D7F2               	goto	i2l7650
 23832  014344                     i2u413_40:
 23833  014344  0601               	decf	i2delay_us@us,f,c
 23834  014346  A0D8               	btfss	status,0,c
 23835  014348  0602               	decf	i2delay_us@us+1,f,c
 23836  01434A  2801               	incf	i2delay_us@us,w,c
 23837  01434C  E1E5               	bnz	i2l7648
 23838  01434E  2802               	incf	i2delay_us@us+1,w,c
 23839  014350  B4D8               	btfsc	status,2,c
 23840  014352  0012               	return	
 23841  014354  D7E1               	goto	i2l832
 23842  014356                     __end_ofi2_delay_us:
 23843                           	opt stack 0
 23844                           tosu	equ	0xFFF
 23845                           tosh	equ	0xFFE
 23846                           tosl	equ	0xFFD
 23847                           pclatu	equ	0xFFB
 23848                           pclath	equ	0xFFA
 23849                           tblptru	equ	0xFF8
 23850                           tblptrh	equ	0xFF7
 23851                           tblptrl	equ	0xFF6
 23852                           tablat	equ	0xFF5
 23853                           prodh	equ	0xFF4
 23854                           prodl	equ	0xFF3
 23855                           intcon	equ	0xFF2
 23856                           indf0	equ	0xFEF
 23857                           postinc0	equ	0xFEE
 23858                           fsr0h	equ	0xFEA
 23859                           fsr0l	equ	0xFE9
 23860                           wreg	equ	0xFE8
 23861                           indf1	equ	0xFE7
 23862                           postdec1	equ	0xFE5
 23863                           fsr1h	equ	0xFE2
 23864                           fsr1l	equ	0xFE1
 23865                           indf2	equ	0xFDF
 23866                           postinc2	equ	0xFDE
 23867                           postdec2	equ	0xFDD
 23868                           plusw2	equ	0xFDB
 23869                           fsr2h	equ	0xFDA
 23870                           fsr2l	equ	0xFD9
 23871                           status	equ	0xFD8
 23872                           
 23873 ;; *************** function i2_MXK_Release *****************
 23874 ;; Defined at:
 23875 ;;		line 130 in file "Library/MXK.c"
 23876 ;; Parameters:    Size  Location     Type
 23877 ;;		None
 23878 ;; Auto vars:     Size  Location     Type
 23879 ;;		None
 23880 ;; Return value:  Size  Location     Type
 23881 ;;                  1    wreg      unsigned char 
 23882 ;; Registers used:
 23883 ;;		wreg, status,2, status,0
 23884 ;; Tracked objects:
 23885 ;;		On entry : 0/0
 23886 ;;		On exit  : 0/0
 23887 ;;		Unchanged: 0/0
 23888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23893 ;;Total ram usage:        0 bytes
 23894 ;; Hardware stack levels used:    1
 23895 ;; This function calls:
 23896 ;;		Nothing
 23897 ;; This function is called by:
 23898 ;;		i2_Motor_Step
 23899 ;; This function uses a non-reentrant model
 23900 ;;
 23901                           
 23902                           	psect	text137
 23903  0149F6                     __ptext137:
 23904                           	opt stack 0
 23905  0149F6                     i2_MXK_Release:
 23906                           	opt stack 17
 23907                           
 23908                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 23909                           
 23910                           ;incstack = 0
 23911  0149F6  0E01               	movlw	1
 23912  0149F8  6E4B               	movwf	_Bus_State,c
 23913                           
 23914                           ;MXK.c: 135: return 1;
 23915                           ;	Return value of i2_MXK_Release is never used
 23916  0149FA  0012               	return	
 23917  0149FC                     __end_ofi2_MXK_Release:
 23918                           	opt stack 0
 23919                           tosu	equ	0xFFF
 23920                           tosh	equ	0xFFE
 23921                           tosl	equ	0xFFD
 23922                           pclatu	equ	0xFFB
 23923                           pclath	equ	0xFFA
 23924                           tblptru	equ	0xFF8
 23925                           tblptrh	equ	0xFF7
 23926                           tblptrl	equ	0xFF6
 23927                           tablat	equ	0xFF5
 23928                           prodh	equ	0xFF4
 23929                           prodl	equ	0xFF3
 23930                           intcon	equ	0xFF2
 23931                           indf0	equ	0xFEF
 23932                           postinc0	equ	0xFEE
 23933                           fsr0h	equ	0xFEA
 23934                           fsr0l	equ	0xFE9
 23935                           wreg	equ	0xFE8
 23936                           indf1	equ	0xFE7
 23937                           postdec1	equ	0xFE5
 23938                           fsr1h	equ	0xFE2
 23939                           fsr1l	equ	0xFE1
 23940                           indf2	equ	0xFDF
 23941                           postinc2	equ	0xFDE
 23942                           postdec2	equ	0xFDD
 23943                           plusw2	equ	0xFDB
 23944                           fsr2h	equ	0xFDA
 23945                           fsr2l	equ	0xFD9
 23946                           status	equ	0xFD8
 23947                           
 23948 ;; *************** function i2_MXK_Queue *****************
 23949 ;; Defined at:
 23950 ;;		line 144 in file "Library/MXK.c"
 23951 ;; Parameters:    Size  Location     Type
 23952 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 23953 ;;		 -> Absolute function(1), Motor_Step(1), 
 23954 ;; Auto vars:     Size  Location     Type
 23955 ;;		None
 23956 ;; Return value:  Size  Location     Type
 23957 ;;                  1    wreg      void 
 23958 ;; Registers used:
 23959 ;;		wreg, status,2, status,0
 23960 ;; Tracked objects:
 23961 ;;		On entry : 0/0
 23962 ;;		On exit  : 0/0
 23963 ;;		Unchanged: 0/0
 23964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23965 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23969 ;;Total ram usage:        3 bytes
 23970 ;; Hardware stack levels used:    1
 23971 ;; This function calls:
 23972 ;;		Nothing
 23973 ;; This function is called by:
 23974 ;;		i2_Motor_Step
 23975 ;; This function uses a non-reentrant model
 23976 ;;
 23977                           
 23978                           	psect	text138
 23979  014984                     __ptext138:
 23980                           	opt stack 0
 23981  014984                     i2_MXK_Queue:
 23982                           	opt stack 17
 23983                           
 23984                           ;MXK.c: 146: lQueue = pCallback;
 23985                           
 23986                           ;incstack = 0
 23987  014984  C001  F06F         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 23988  014988  C002  F070         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 23989  01498C  C003  F071         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 23990  014990  0012               	return		;funcret
 23991  014992                     __end_ofi2_MXK_Queue:
 23992                           	opt stack 0
 23993                           tosu	equ	0xFFF
 23994                           tosh	equ	0xFFE
 23995                           tosl	equ	0xFFD
 23996                           pclatu	equ	0xFFB
 23997                           pclath	equ	0xFFA
 23998                           tblptru	equ	0xFF8
 23999                           tblptrh	equ	0xFF7
 24000                           tblptrl	equ	0xFF6
 24001                           tablat	equ	0xFF5
 24002                           prodh	equ	0xFF4
 24003                           prodl	equ	0xFF3
 24004                           intcon	equ	0xFF2
 24005                           indf0	equ	0xFEF
 24006                           postinc0	equ	0xFEE
 24007                           fsr0h	equ	0xFEA
 24008                           fsr0l	equ	0xFE9
 24009                           wreg	equ	0xFE8
 24010                           indf1	equ	0xFE7
 24011                           postdec1	equ	0xFE5
 24012                           fsr1h	equ	0xFE2
 24013                           fsr1l	equ	0xFE1
 24014                           indf2	equ	0xFDF
 24015                           postinc2	equ	0xFDE
 24016                           postdec2	equ	0xFDD
 24017                           plusw2	equ	0xFDB
 24018                           fsr2h	equ	0xFDA
 24019                           fsr2l	equ	0xFD9
 24020                           status	equ	0xFD8
 24021                           tosu	equ	0xFFF
 24022                           tosh	equ	0xFFE
 24023                           tosl	equ	0xFFD
 24024                           pclatu	equ	0xFFB
 24025                           pclath	equ	0xFFA
 24026                           tblptru	equ	0xFF8
 24027                           tblptrh	equ	0xFF7
 24028                           tblptrl	equ	0xFF6
 24029                           tablat	equ	0xFF5
 24030                           prodh	equ	0xFF4
 24031                           prodl	equ	0xFF3
 24032                           intcon	equ	0xFF2
 24033                           indf0	equ	0xFEF
 24034                           postinc0	equ	0xFEE
 24035                           fsr0h	equ	0xFEA
 24036                           fsr0l	equ	0xFE9
 24037                           wreg	equ	0xFE8
 24038                           indf1	equ	0xFE7
 24039                           postdec1	equ	0xFE5
 24040                           fsr1h	equ	0xFE2
 24041                           fsr1l	equ	0xFE1
 24042                           indf2	equ	0xFDF
 24043                           postinc2	equ	0xFDE
 24044                           postdec2	equ	0xFDD
 24045                           plusw2	equ	0xFDB
 24046                           fsr2h	equ	0xFDA
 24047                           fsr2l	equ	0xFD9
 24048                           status	equ	0xFD8
 24049                           
 24050                           	psect	text139
 24051  000000                     __ptext139:
 24052                           	opt stack 0
 24053                           tosu	equ	0xFFF
 24054                           tosh	equ	0xFFE
 24055                           tosl	equ	0xFFD
 24056                           pclatu	equ	0xFFB
 24057                           pclath	equ	0xFFA
 24058                           tblptru	equ	0xFF8
 24059                           tblptrh	equ	0xFF7
 24060                           tblptrl	equ	0xFF6
 24061                           tablat	equ	0xFF5
 24062                           prodh	equ	0xFF4
 24063                           prodl	equ	0xFF3
 24064                           intcon	equ	0xFF2
 24065                           indf0	equ	0xFEF
 24066                           postinc0	equ	0xFEE
 24067                           fsr0h	equ	0xFEA
 24068                           fsr0l	equ	0xFE9
 24069                           wreg	equ	0xFE8
 24070                           indf1	equ	0xFE7
 24071                           postdec1	equ	0xFE5
 24072                           fsr1h	equ	0xFE2
 24073                           fsr1l	equ	0xFE1
 24074                           indf2	equ	0xFDF
 24075                           postinc2	equ	0xFDE
 24076                           postdec2	equ	0xFDD
 24077                           plusw2	equ	0xFDB
 24078                           fsr2h	equ	0xFDA
 24079                           fsr2l	equ	0xFD9
 24080                           status	equ	0xFD8
 24081                           
 24082                           	psect	rparam
 24083  0000                     tosu	equ	0xFFF
 24084                           tosh	equ	0xFFE
 24085                           tosl	equ	0xFFD
 24086                           pclatu	equ	0xFFB
 24087                           pclath	equ	0xFFA
 24088                           tblptru	equ	0xFF8
 24089                           tblptrh	equ	0xFF7
 24090                           tblptrl	equ	0xFF6
 24091                           tablat	equ	0xFF5
 24092                           prodh	equ	0xFF4
 24093                           prodl	equ	0xFF3
 24094                           intcon	equ	0xFF2
 24095                           indf0	equ	0xFEF
 24096                           postinc0	equ	0xFEE
 24097                           fsr0h	equ	0xFEA
 24098                           fsr0l	equ	0xFE9
 24099                           wreg	equ	0xFE8
 24100                           indf1	equ	0xFE7
 24101                           postdec1	equ	0xFE5
 24102                           fsr1h	equ	0xFE2
 24103                           fsr1l	equ	0xFE1
 24104                           indf2	equ	0xFDF
 24105                           postinc2	equ	0xFDE
 24106                           postdec2	equ	0xFDD
 24107                           plusw2	equ	0xFDB
 24108                           fsr2h	equ	0xFDA
 24109                           fsr2l	equ	0xFD9
 24110                           status	equ	0xFD8
 24111                           
 24112                           	psect	temp
 24113  000051                     btemp:
 24114                           	opt stack 0
 24115  000051                     	ds	1
 24116  0000                     int$flags	set	btemp
 24117  0000                     wtemp6	set	btemp+1
 24118                           tosu	equ	0xFFF
 24119                           tosh	equ	0xFFE
 24120                           tosl	equ	0xFFD
 24121                           pclatu	equ	0xFFB
 24122                           pclath	equ	0xFFA
 24123                           tblptru	equ	0xFF8
 24124                           tblptrh	equ	0xFF7
 24125                           tblptrl	equ	0xFF6
 24126                           tablat	equ	0xFF5
 24127                           prodh	equ	0xFF4
 24128                           prodl	equ	0xFF3
 24129                           intcon	equ	0xFF2
 24130                           indf0	equ	0xFEF
 24131                           postinc0	equ	0xFEE
 24132                           fsr0h	equ	0xFEA
 24133                           fsr0l	equ	0xFE9
 24134                           wreg	equ	0xFE8
 24135                           indf1	equ	0xFE7
 24136                           postdec1	equ	0xFE5
 24137                           fsr1h	equ	0xFE2
 24138                           fsr1l	equ	0xFE1
 24139                           indf2	equ	0xFDF
 24140                           postinc2	equ	0xFDE
 24141                           postdec2	equ	0xFDD
 24142                           plusw2	equ	0xFDB
 24143                           fsr2h	equ	0xFDA
 24144                           fsr2l	equ	0xFD9
 24145                           status	equ	0xFD8


Data Sizes:
    Strings     88
    Constant    730
    Data        25
    BSS         798
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     68     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      7     228
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_5(CODE[26]), STR_4(CODE[3]), STR_3(CODE[13]), STR_2(CODE[46]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK3[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_song_play->_eusart_putch
    _irobot_move_straight->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_led_power_on->_irobot_leds
    _irobot_led_power_off->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 1056542
                                              0 BANK3      7     7      0
                       _Console_Init
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                           _LCD_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
                            ___awdiv
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
               _irobot_led_power_off
                _irobot_led_power_on
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (1) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (3) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (4) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    5427
                                             21 BANK0     16     8      8
                      _HMI_DIPSwitch (ARG) *
                     _HMI_DownSwitch (ARG) *
                     _HMI_LeftSwitch (ARG) *
                    _HMI_RightSwitch (ARG) *
                       _HMI_UpSwitch (ARG) *
                      _MXK_DIPSwitch (ARG) *
                     _MXK_TestButton (ARG) *
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_move_straight                                 2     0      2    3510
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (3) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (1) _irobot_led_power_off                                 0     0      0    1327
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (2) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (3) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (1) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (3) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362464
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      4     1      3
                                              0 BANK1      2     2      0
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  291124
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261965
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94589
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    1470
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84405
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84405
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (5) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (6) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (6) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_UpSwitch *
     _Port_GetPin
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_SwitchTo *
     _delay_us
   _MXK_TestButton *
     _Port_GetPin
   ___awdiv *
   _delay_ms *
   _eusart_init *
   _irobot_init *
     _eusart_putch
   _irobot_init_song_0 *
     _eusart_putch
   _irobot_led_power_off *
     _irobot_leds
       _eusart_putch
       _load_iRScriptStack
   _irobot_led_power_on *
     _irobot_leds
       _eusart_putch
       _load_iRScriptStack
   _irobot_move_straight *
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _irobot_song_play *
     _eusart_putch
   _irobot_stop_motion *
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _printf *
     _HMI_DIPSwitch (ARG) *
       _Port_GetQuad
     _HMI_DownSwitch (ARG) *
       _Port_GetPin
     _HMI_LeftSwitch (ARG) *
       _Port_GetPin
     _HMI_RightSwitch (ARG) *
       _Port_GetPin
     _HMI_UpSwitch (ARG) *
       _Port_GetPin
     _MXK_DIPSwitch (ARG) *
       _Port_GetQuad
     _MXK_TestButton (ARG) *
       _Port_GetPin
     ___lwdiv (ARG) *
     ___lwmod (ARG) *
       ___lwdiv (ARG)
     _putch (ARG) *
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
   _update_bump_and_cliff *
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop
   _update_distance *
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      7      E4      11       89.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     47E      12        0.0%
DATA                 0      0     5AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 07 19:52:54 2017

                                i2_Timer0_Stop 49F0                               SPI_Init@pChannel 00E6  
                   __size_of_MXK_BlockSwitchTo 003E                                   i2_Motor_Step 241C  
                                            _A 004C                                              l8 2736  
                                            _a 004D                                              _i 0038  
                                            _j 0037                                              _l 004F  
                                            _u 0036                                              _w 0050  
                          _irobot_led_power_on 47DA                                             l11 20AE  
                                           l12 2098                                             l90 1FE4  
                                           l85 1EE0                                             l87 1F4E  
                                           l89 1FBA                                   ___awdiv@sign 00BA  
                          ___wmul@multiplicand 00B7                           _irobot_led_power_off 4812  
                                _HMI_DIPSwitch 4876                             LCD_DrawField@pSize 00CD  
                           LCD_DrawField@count 00D3                     __end_of_irobot_stop_motion 41C4  
                            ?_Event_TestButton 0001                               i2_Timer0_Restart 499E  
                                          l120 33B6                                            l121 33CC  
                                          l122 33E2                                            l220 3D7E  
                                          l117 33F8                                            l221 3D42  
                                          l118 33A0                                            l230 3FDA  
                                          l222 3D8E                                            l223 3D60  
                                  ?_LED_Toggle 0001                                            l234 416C  
                                          l235 413C                                            l227 3FF6  
                                          l403 1B6E                                            l412 184A  
                                          l228 3FBE                                            l340 3064  
                                          l404 1B0E                                            l421 17DE  
                                          l413 16E0                                            l237 4154  
                                          l341 3072                                            l405 1B9E  
                                ??_Console_Tab 00BD                                            l414 1866  
                                          l430 28AA                                            l350 316C  
                                          l342 3080                                            l510 0CBA  
                                          l406 1B26                                            l183 3220  
                                          l415 1706                                            l351 30FC  
                                          l343 308E                                            l511 0DCA  
                                          l407 1B3E                                            l184 31FA  
                                          l600 000C                                            l432 28D4  
                                          l344 309C                                            l512 0CDC  
                                          l408 1B56                                            l417 1772  
                                          l601 01A0                                            l433 2904  
                                          l353 310A                                            l337 30C6  
                                          l345 30AA                                            l610 0228  
                                          l602 003E                                            l354 3118  
                                          l346 30B8                                            l338 3056  
                                          l370 2FF6                                            l611 0276  
                                          l603 01B2                                            l427 292E  
                                          l355 3126                                            l363 3020  
                                          l371 3004                                            l531 0774  
                                  ?_HMI_GetBar 0001                                            l612 02C4  
                                          l604 00EC                                            l356 3134  
                                          l372 3012                                            l364 2FB0  
                                          l532 0798                                            l516 0D24  
                                          l357 3142                                            l509 0DAE  
                                          l614 03A6                                            l358 3150  
                                          l366 2FBE                                            l526 07B8  
                                          l615 039E                                            l607 0312  
                                          l359 315E                                            l367 2FCC  
                                          l519 0D6C                                            l616 03B8  
                                          l608 01DA                                            l368 2FDA  
                                          l528 07D6                                            l393 3EB0  
                                          l617 03A2                                            l609 0330  
                                          l369 2FE8                                            l529 0754  
                                          l483 0B1A                                            l732 333A  
                                          l476 0BF2                                            l900 0892  
                                          l733 332E                                            l389 3C06  
                                          l477 0A64                                            l901 0896  
                                          l397 4130                                            l726 2C74  
                                          l478 0C0E                                            l486 0B86  
                                          l654 4646                                            l910 08BA  
                                          l902 089A                                            l727 2C68  
                                          l479 0AAE                                            l655 463E  
                                          l911 08BE                                            l903 089E  
                                          l912 08C2                                            l904 08A2  
                                          l824 3B3A                                            l832 3F68  
                                          l681 3A74                                            l673 4578  
                                          l657 4642                                            l913 08C6  
                                          l905 08A6                                            l921 3A44  
                                          l914 08CA                                            l906 08AA  
                                          l922 3A10                                            l930 264A  
                                          l819 36C4                                            l915 08CE  
                                          l907 08AE                                            l684 3A8A  
                                          l916 08D2                                            l908 08B2  
                                          l860 07F2                                            l781 43FE  
                                          l597 001A                                            l853 08DA  
                                          l917 08D6                                            l909 08B6  
                                          l861 07F6                                            l678 3AB0  
                                          l686 3A9A                                            l598 0002  
                                          l870 081A                                            l862 07FA  
                                          l854 07DE                                            l679 3A64  
                                          l599 002A                                            l871 081E  
                                          l863 07FE                                            l776 423A  
                                          l880 0842                                            l872 0822  
                                          l864 0802                                            l856 07E2  
                                          l928 26CA                                            l881 0846  
                                          l873 0826                                            l865 0806  
                                          l857 07E6                                            l929 269A  
                                          l890 086A                                            l882 084A  
                                          l874 082A                                            l866 080A  
                                          l858 07EA                                            l891 086E  
                                          l883 084E                                            l875 082E  
                                          l867 080E                                            l859 07EE  
                                          l892 0872                                            l884 0852  
                                          l876 0832                                            l868 0812  
                                          l893 0876                                            l885 0856  
                                          l877 0836                                            l869 0816  
                                          l894 087A                                            l886 085A  
                                          l878 083A                                            l990 3550  
                                          l895 087E                                            l887 085E  
                                          l879 083E                                            l983 32BE  
                                          l976 35DE                                            l896 0882  
                                          l888 0862                                            l992 3560  
                                          l984 3242                                            l897 0886  
                                          l889 0866                                            l985 32BA  
                                          l978 35EE                                            l898 088A  
                                          l899 088E                                            l997 3E16  
                                          l999 3E3A                                            _PR2 000FCB  
                                          _val 007B                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00CE                                   _Word_GetPair 43D2  
                                          prod 000FF3                            MXK_SwitchTo@pModule 00BC  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00C5                             Console_MakeField@y 00C6  
                                   _TXSTA1bits 000FAD                                _update_distance 491A  
                                 Console_Tab@c 00C4                                   Console_Tab@i 00C3  
                          LCD_DrawField@pField 00C7                                   Console_Tab@t 00C2  
                                   i2_delay_us 4316                           Port_Set@TypeRequired 00D7  
                            Console_FormFeed@x 00B7                              Console_FormFeed@y 00B8  
                          LCD_DrawField@pPoint 00C9                                 ?_LCD_DrawField 00C7  
                        Port_SetPinType@Output 00DF                                Port_SetPin@Type 00C8  
                              Port_SetPin@pPin 00C6                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00BE                                __end_of_LED_Set 4008  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 2F00  
                                 _Word_SetPair 420A                                           l1000 3E56  
                                         l1010 299E                                           l1004 3CA6  
                                ?_Byte_GetZone 00B5                                           l1005 3CD4  
                                         l1200 2B94                                           l1040 1894  
                                         l1201 2BE8                                           l1009 29AA  
                                         l1041 189A                                           l1202 2C04  
                                         l1042 18A0                                           l1043 18A6  
                                         l1204 2C2E                                           l1036 19F0  
                                         l1044 18AC                                           l1205 2C14  
                                         l1045 18B2                                           l1037 188E  
                                         l1062 1296                                           l1063 12C4  
                                         l1207 2C40                                           l1047 1958  
                                         l1056 1126                                           l2120 1C60  
                                         l1057 12EC                                           l1153 1504  
                                         l2121 1C44                                           l1082 2824  
                                         l1058 112E                                           l2050 3C26  
                                         l1059 1158                                           l2043 3C36  
                                         l2051 3C2A                                           l2123 1D30  
                                         l1084 282C                                           l2140 3B24  
                                         l2132 428A                                           l2052 3C2E  
                                         l2044 3C12                                           l2060 252C  
                                         l2124 1C74                                           l1077 27F4  
                                         l2141 3AE6                                           l2053 3C32  
                                         l2061 2532                                           l2125 1CBC  
                                         l2117 1C30                                           l2134 4276  
                                         l2046 3C16                                           l2062 2538  
                                         l2126 1C7A                                           l2118 1BEA  
                                         l2230 10E8                                           l2222 0F04  
                                         l1079 2804                                           l2047 3C1A  
                                         l2071 2590                                           l2063 253E  
                                         l2231 10CC                                           l2223 0F58  
                                         l2136 427E                                           l2048 3C1E  
                                         l2080 34AE                                           l2064 2544  
                                         l2232 1074                                           l2224 0F82  
                                         l2161 2D80                                           l2049 3C22  
                                         l2057 25D0                                           l2073 25A4  
                                         l2065 254A                                           l2225 0F86  
                                         l2250 1558                                           l2066 2550  
                                         l2058 2522                                           l2226 0FBA  
                                         l2092 350C                                           l2084 34C8  
                                         l2068 2564                                           l2261 15E6  
                                         l1630 2362                                           l2166 3EEE  
                                         l1631 23BE                                           l2255 1594  
                                         l1632 23A2                                           l2256 1530  
                                         l2248 1514                                           l2096 352C  
                                         l2088 34E8                                           l2441 2A6A  
                                         l2265 163C                                           l2257 1548  
                                         l2249 1528                                           l1730 42AA  
                                         l2442 2A5E                                           l2266 169A  
                                         l2258 1552                                           l1627 240A  
                                         l2267 1642                                           l2259 15CC  
                                         l1724 43A0                                           l1732 42D2  
                                         l1628 2400                                           l2621 2B0A  
                                         l1629 2380                                           l2189 41A8  
                                         l2445 2AA0                                           l2622 2AFA  
                                         l1726 43CE                                           l2446 2AAE  
                                         l2438 2A2A                                           l1735 480E  
                                         l2447 2AC2                                           l2439 2A40  
                                         l2625 2B64                                           l2626 2B76  
                                         l1827 2202                                           l1828 2222  
                                         l1873 4444                                           l2674 36F2  
                                         l2675 36E6                                           l2684 3DBE  
                                         l2685 3DB2                                           l2678 3728  
                                         l2679 3736                                           l2688 3DE8  
                                         l2689 3DF6                                 ??_Console_Init 00B5  
                        Port_SetPinType@pInput 00DB                                           STR_1 FFFC  
                                         STR_2 FFA7                                           STR_3 FFEF  
                                         STR_4 FFFC                                           STR_5 FFD5  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 319C                                           u7100 40DC  
                                         u7040 3B78                                           u7105 40D6  
                                         u7130 226E                                           u7115 21BA  
                     __end_of_irobot_song_play 491A                                           u6500 3304  
                                         u7214 3472                                           u7215 346C  
                                         u6520 336A                                           u7160 3FA0  
                                         u7305 044C                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           u6507 32FA  
                                         u7315 0464                                           _PIR3 000FA4  
                                         u6604 2CB0                                           u6540 365E  
                                         u6700 35AA                                           u6605 2CAA  
                                         u6525 3364                                           u7325 047C  
                                         u6614 2CE2                                           u6630 41F8  
                                         u6615 2CDC                                           u7335 049E  
                                         u6720 36F8                            __end_of_GetPortTRIS 3050  
                                         u7520 426A                                           u7345 061E  
                                         u6635 41F2                                           u7355 069C  
                                         u8260 12D4                                           u7365 06DE  
                                         u8190 3646                                           u7390 4514  
                                         u6574 3CF4                                           u6750 3DC4  
                                         u8510 16A6                                           u6575 3CEE  
                                         u7375 0720                                           u7800 286E  
                                         u7720 3980                                           u6584 3D26  
                                         u6840 26B6                                           u7608 2042  
                                         u6585 3D20                                           u7609 2056  
                                         u7810 287A                                           u6690 35A4  
                                         u6850 3CA2                                           u7395 450E  
                                         u6860 3CCC                                           u6940 2A70  
                                         u9420 0FAE                                           u6775 493A  
                                         u6776 493C                                           u7680 3F60  
                                         u7840 2340                                           u7760 1BA4  
                                         u7658 217E                                           u7930 1EDE  
                                         u7850 2354                                           u8490 1628  
                                         u6980 2B10                                           u7860 2394  
                                         u7598 27A2                                           u9358 436A  
                                         u9359 4380                                           u9448 1020  
                                         u9449 1034                                           u7970 1FF2  
                                         u9458 104E                                           u9459 1062  
                                         _SPI1 0368                                           _SPI2 0373  
                                         _TMR0 000FD6                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BA                                           _gISR 006C  
                           Event_DIPSwitch@Bar 00CF                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00B8                                  _iRVirtualWall 002E  
                           SPI_MaxSpeed@pInput 00C4                                  ?_Byte_SetByte 00B5  
                                ?_Byte_SetPair 00C0                                __end_of_SPI_DCS 4586  
                                         _main 0EDC                     irobot_leds@powerLuminosity 00C7  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C0  
                                         _itos 260C                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00B5                                           btemp 0051  
                                         _zero 004E                                  ??_Byte_SetBit 00B9  
                           __size_of_LCD_Reset 0050                                           prodh 000FF4  
                                         prodl 000FF3                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ?_SPI_DisableISR 00B5                            HMI_SetButton@pValue 00BB  
                                Console_Init@x 00B7                                  Console_Init@y 00B8  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF99  
                         Set_Rotation@rotation 00BB                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                             _irobot_init_song_0 46CA  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 3F66  
                             __end_of_LCD_Init 2030                          ?_irobot_led_power_off 0001  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 3D9E                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00F0                        GetPortProperties@pInput 00B7  
                                ??_Button_Poll 00D3                               __end_of_HMI_Init 1506  
                                        l11022 2202                                          l11060 3F68  
                                        l11062 3F7A                                          l12072 1F4E  
                                        l12234 35E4                                          l12082 1FF2  
                                        l12228 35D4                                          l12324 14D8  
                                        l10652 3556                                          l12262 114E  
                                        l10646 3546                                          l11802 3F36  
                                        l10836 2C2E                                          l11830 3964  
                                        l11806 3F44                                          l11662 495E  
                                        l12518 15EC                                          l10784 26B6  
                                        l11922 27EA                                          l11826 3956  
                                        l10956 3B3A                                          l10964 3B78  
                                        l10958 3B4C                                          l11928 27FA  
                                        l11886 1B04                               __end_of_HMI_Poll 389E  
                                        _I2C1T 0040                                          _I2C2T 03BA  
                                        ?_main 0001                                __end_of___awdiv 2ACC  
                                        ?_itos 00C1                                _Event_DIPSwitch 45B6  
                              __end_of___lldiv 2B88                        __size_of_HMI_LeftSwitch 0018  
                              ___awdiv@divisor 00B7                                          _INDEX 003A  
                              __end_of___lwdiv 3740                                          _MASKS FDA9  
                              __end_of___lwmod 3E00                                          i2l430 2F18  
                                        i2l432 2F3E                                          i2l433 2F68  
                                        i2l427 2F8E                                          i2l732 378C  
                                        i2l733 3786                                          i2l832 4318  
                                        i2l781 45A4                                ___awdiv@counter 00B9  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CB                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03A6                                          _PortB 039C  
                                        _PortC 00A3                                          _PortD 0099  
                                        _PortE 008F                                          _PortF 03B0  
                                        _PortG 0392                        __end_of_Port_SetPinType 1888  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C1  
                        ??_irobot_led_power_on 00C9                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CA                                __end_of_dpowers FDA9  
                               ??_Byte_GetZone 00BA                      irobot_move@moveTurnRadius 00C7  
                               Button_Poll@Pin 00D8                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 2A0E                               __end_of_MXK_Init 1EBE  
                     __size_of_sort_iRBumpDrop 008E                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 493E  
                             __end_of_SPI_Init 041E                               __end_of_SPI_Send 3ACE  
                        __end_ofi2_MXK_Release 49FC                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 3A62  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00B8  
                               ??_Byte_SetPair 00C4                                 ??_Byte_SetQuad 00C4  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00BB  
                                        status 000FD8                                          wtemp6 0052  
                              _Configure_GPIOs 3986                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00B6  
                               _LCD_Word_Write 47BC                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00C5  
                                 ?_irobot_init 0001                                __initialization 2DA8  
                                 ?_irobot_move 00C5                            __end_of_Byte_GetBit 4526  
                       irobot_leds@powerColour 00C6                                   __end_of_main 10FC  
             irobot_query_and_update@packetIDs 00CA                                   __end_of_itos 26E4  
                         HMI_SetButton@reindex 00B7                                   SPI_Send9@dat 0083  
                          __end_of_Byte_SetBit 3D3C                               __end_of_InitList FD7F  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 493E  
                      __end_of_update_distance 492C                    __size_of_Port_CheckPortType 0048  
                                       ??_main 03DD                                         ??_itos 00C5  
                      _Console_MakeField$10974 00C3                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C4                              __end_of_LCD_Reset 4058  
                            Port_SetPin@pValue 00C7                                      ??_LED_Set 00CA  
                            _MXK_InitDIPSwitch 4762                              GetPortPORT@pInput 00B7  
                       Port_CheckPairType@Pin1 00DF                         Port_CheckPairType@Pin2 00E0  
                            __end_of_LCD_Write 46CA                                    _GetPortPORT 30F6  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 2FAA  
                              ??_LCD_DrawField 00D1                     __end_of_PortProperty_Valid 36C8  
                             __end_of_Port_Set 07D8                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 27B8  
                          __end_of_Button_Poll 2196                              Word_GetPair@pPair 00C3  
                      LCD_FillRectangle@pPoint 00C0                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 3416                                      ??_SPI_DCS 00B7  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                _HMI_SetNumber 4612                         Port_SetQuadType@Output 00EF  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00B5  
                                       ?_putch 0001                               ??_Console_Render 00D8  
                                ToSegment@pCHR 00B5                               _Console_FormFeed 3534  
                       Port_SetQuadType@pInput 00EB                                         i2l1630 2482  
                                       i2l1631 24CE                                         i2l1632 24BA  
                                       i2l1730 44CE                                         i2l1627 250A  
                                       i2l1732 44EE                                         i2l1628 2500  
                                       i2l1629 2498                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                                         i2l7650 4328  
                                       i2l7648 4318                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 47DA  
                               _Timer0_Restart 4992                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F0                                         _TXREG1 000FAE  
                               i2_MXK_SwitchTo 44BC                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00B7                                     _Reset_High 4744  
                           Console_Render@temp 00DA                                 ??_HMI_UpSwitch 00BB  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 00CC  
                             __end_of_delay_ms 3BA2                                   LED_Init@pLED 00E2  
                             __end_of_delay_us 3FB8                                  ??_Timer2_Init 00C6  
                                ??_Timer0_Stop 00B5                                     _Timer0_ISR 45E4  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 00CF  
                               __CFG_XINST$OFF 000000                       __size_of_HMI_InitButtons 0006  
                   __end_of_load_iRScriptStack 3B38                                         _iRWall 0033  
                                   _Motor_Step 22F6                            rx_assign@byteNumber 00B7  
                      __end_of_Event_DIPSwitch 45E4                                         ___wmul 4486  
                              ??_HMI_DIPSwitch 00BB                  load_iRScriptStack@bytesToLoad 00C3  
                                    ??___awdiv 00B9                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                         ??_irobot_led_power_off 00C9  
                                       _lMotor 007D                                      ??___lldiv 00BD  
                                       _lQueue 006F                                     _TestButton 0388  
                                    ??___lwdiv 00B9                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C0                       __end_of_Port_SetQuadType 0CB2  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 364C                              GetPortTRIS@pInput 00B7  
                           __size_of_Reset_Low 001E                                         clear_0 2E10  
                                       clear_1 2E22                                         clear_2 2E2E  
                                       clear_3 2E3A                                         clear_4 2E46  
                             ___awdiv@quotient 00BB                     irobot_stop_motion@isScript 00CE  
                                ?_eusart_getch 0001                                     Port_Init@i 00F8  
                                   _iRDistance 0077                              __end_of_MXK_Queue 4984  
                   __end_ofHMI_SetButton@F7213 FDB6                                     _iRBumpLeft 0087  
                                       _printf 1506                                     _iRBumpDrop 0034  
                    __end_of_MXK_InitDIPSwitch 4780                                     _iRDropLeft 0086  
                               HMI_SetButton@v 00BC                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00B6                                    _Console_Tab 294C  
                          LCD_Word_Write@value 00BA                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00B8  
                     Port_CheckPortType@Output 00EE                             _twos_complement_of 4250  
                              ??i2_Port_SetPin 0014                                   __mediumconst FCCC  
                  __end_ofTimer2_Init@PRESCALE FDB9                       Port_CheckPortType@pDrive 00ED  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00EB  
                                ??_Port_SetPin 00C8                                      ??_reverse 00B9  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00DB  
                                       putch@c 00C9                                 ?_HMI_SetNumber 00CB  
                               i2_Word_GetPair 4586                        __end_of_Configure_GPIOs 39F6  
                          irobot_leds@isScript 00C8                               ??_MXK_TestButton 00BB  
                       __end_of_Timer0_Restart 499E                                  Set_Rotation@m 00BA  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 00B5  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 44F2                                   i2delay_us@us 0001  
                        _update_bump_and_cliff 444C                                ?_LCD_Word_Write 00BA  
                                   __accesstop 0060                        __end_of__initialization 2E4C  
                                    ?_LCD_Fill 00BE          irobot_query_and_update@packetVariable 00CE  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00E7  
                                  _Byte_GetBit 44F2                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 49AA                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00BD                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 00B5                                    _Byte_SetBit 3CD8  
                                __end_of_MASKS FDB2                                 _PortA_Property FFA5  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C0  
                                    LCD_Fill@j 00C1                            load_iRScriptStack@i 00C4  
                                    LCD_Init@i 00EC                                 __pcstackCOMRAM 0001  
                               _PortB_Property FFA3                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 49D6                                   __pidataBANK3 49BE  
            irobot_move_straight@straightSpeed 00CE                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 47BC                                Console_Render@x 00DF  
                              Console_Render@y 00E0                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD7F  
                         __end_of_Byte_GetZone 337E                           ??_twos_complement_of 00B7  
                            irobot_leds@LEDBit 00C5                                 _PortC_Property FFA1  
                                __end_of_putch 494C                                 ??_eusart_getch 00B5  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 22F6  
                          __end_of_Timer0_Stop 49E4                                      ?_SPI_Init 00E2  
                             ?_update_distance 0001                                      ?_SPI_Send 00B5  
                               ??_eusart_putch 00B5                                    _Button_Init 26E4  
                            Port_SetType@pType 00F1                                    _Button_Poll 2030  
                         __end_of_Byte_SetByte 4976                           __end_of_Byte_SetPair 4686  
                               _HMI_LeftSwitch 48D6                                 _PortD_Property FF9F  
                         __end_of_Byte_SetQuad 46A8                                   ??_LED_Toggle 00CD  
                                 ??_HMI_GetBar 00B5                     eusart_putch@eusartSendChar 00B5  
                         __end_of_Byte_SetZone 2CF8                                 _HMI_DownSwitch 488E  
                                SPI_Send@pData 00B7                          __end_of_MXK_DIPSwitch 4876  
                                 ??_HMI_SetBar 00B5                       __size_of_get_packet_size 0066  
                               _PortE_Property FF9D                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 45B6                                 _PortF_Property FF9B  
                      Port_CheckQuadType@Pair1 00E8                        Port_CheckQuadType@Pair2 00E9  
                     MXK_BlockSwitchTo@pModule 00BC                              _Console_Backspace 3E00  
                              ?_Timer0_Restart 0001                                        ??_putch 00C9  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 42D6  
                            __end_of_ToSegment 0A5C                                 _PortG_Property FF99  
                                   __pbssBANK0 0060                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 420A  
                           _irobot_stop_motion 417E                        Port_CheckQuadType@pQuad 00E6  
                              reverse@iterator 00BA                               ??_SPI_DisableISR 00B7  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 4744  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 00C0                                     ??_LCD_Init 00EA  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 294C  
                       __end_of_PortA_Property FFA7               irobot_led_power_on@powerOnColour 00C9  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 00B5  
                                   ??_LED_Init 00E2                             Byte_SetByte@pValue 00B7  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                                   ??_HMI_Init 00F0                             ??_irobot_song_play 00B6  
                                   ??_HMI_Poll 00D9                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E2                         __end_of_PortB_Property FFA5  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 1BB8  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 00DD  
                           __end_of_LED_Toggle 417E                             __end_of_HMI_GetBar 49EA  
                     LCD_FillRectangle@pColour 00BE                            ??_Console_Backspace 00B7  
                            Set_Addr_Window@xe 00BB                              Set_Addr_Window@ye 00BC  
                            Set_Addr_Window@xs 00BD                              Set_Addr_Window@ys 00BA  
                           Byte_SetPair@pInput 00C0                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C3                             __end_of_HMI_SetBar 49BE  
                       __end_of_PortC_Property FFA3                             Word_GetPair@pInput 00C1  
                               ??_Set_Rotation 00BA                                      ?_Port_Set 00C4  
                                      ?___wmul 00B5                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 48EE                         __end_of_PortD_Property FFA1  
                                      _ADC_AN0 03D0                                        _ADC_AN1 03CB  
                                      _ADC_AN2 03C6                                        _ADC_AN3 03C1  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00B5  
                            _Console_MakeField 27B8                              ??_Console_NewLine 00B5  
                       __end_of_HMI_DownSwitch 48A6                                     ??_SPI_Init 00E8  
                       Event_TestButton@pState 00CE                                     ??_SPI_Send 00B8  
                                      ?_printf 00CA                              ??_HMI_InitButtons 00B5  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FF9F  
                          Console_Render@F6956 03D5                             ?_Console_MakeField 00BA  
                                      _COUNTER 0029                                ??_HMI_SetButton 00B5  
                         __end_of_HMI_UpSwitch 48BE                           ??_irobot_stop_motion 00CE  
                                      _LED_Set 3FB8                        _Console_IncrementCursor 3C72  
                       __end_of_PortF_Property FF9D                                    _gBackcolour 0081  
                              ??_HMI_SetNumber 00CD                                      _I2C1_Done 032B  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0328  
                                    _I2C1_More 0325                                      _I2C2_More 0322  
                                    ?_delay_ms 00B5                      __end_of_Console_Backspace 3E5C  
                                    ?_delay_us 00B5                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 479E                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                         __end_of_PortG_Property FF9B  
                          ??_Console_MakeField 00BC                                        _SPI_DCS 4556  
                         __size_ofi2_MXK_Queue 000E                               ?_Configure_GPIOs 0001  
                       ?_update_bump_and_cliff 0001                           i2Byte_GetZone@Offset 0008  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                            Event_TestButton@j 0089                                     ??_Mode_Set 00B5  
                               ??_Timer2_Clear 00B5                                        _Font5x7 FDB9  
                         i2Byte_GetZone@pChunk 0004                           i2Byte_GetZone@pInput 0001  
                         SPI_DisableISR@pInput 00B5                                  ?_Port_GetQuad 00B5  
                              Byte_SetBit@pBit 00B7                           Port_TogglePin@pInput 00C9  
                        __end_ofi2_Byte_SetBit 40A4                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00B7                                    _Timer2_Init 2196  
                                      __Lparam 0000                                    _Timer0_Stop 49DE  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FD9F                                        _iRAngle 0075  
                                LCD_Write@mode 00B8                                     ??_Port_Set 00C7  
                    __end_of_Console_MakeField 2888                              _Console_PrintChar 1888  
                                ?_Port_SetType 00EF                                        _gCursor 0047  
                                      ___awdiv 2A0E                          ??_Console_ClearCursor 00B5  
                                      _lBuffer 04AA                                        ___lldiv 2ACC  
                              __size_of___wmul 0036                                        ___lwdiv 36C8  
                                      ___lwmod 3D9E                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 35C2                             ?_Console_PrintChar 0001  
                                      __pcinit 2DA8                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        __ptext0 0EDC  
                                      __ptext1 491A                                        __ptext2 444C  
                                      __ptext3 1BB8                                        __ptext4 251C  
                                      __ptext5 34A6                                        __ptext6 3C0C  
                                      __ptext7 49C6                                        __ptext8 1506  
                                      __ptext9 493E                                __size_of_printf 01C2  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 47F6  
                            i2MXK_SwitchTo@CUR 0007                                        _dpowers FD9F  
                                    _T2CONbits 000FCA                                  LED_Set@pValue 00C9  
                          __size_of_Reset_High 001E                          Event_DIPSwitch@pState 00CE  
                                 ?_GetPortPORT 00B5                                   ?_GetPortTRIS 00B5  
                          ??_Console_PrintChar 00C5                                    _Port_GetPin 41C4  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 00B1  
                          LCD_DrawRectangle@p4 00AD                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00B7                                     ??_delay_us 00B7  
                                      _reverse 39F6                                      _DIPSwitch 037E  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 2888  
                                  _iRBumpRight 0088                                 LCD_DrawField@i 00D7  
                                    _LCD_Reset 4008                            __size_of_Motor_Step 0126  
                                    _LCD_Write 46A8                                    _iRDropRight 002D  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00B5  
                         end_of_initialization 2E4C                              ??_get_packet_size 00B5  
irobot_query_and_update@numberOfPacketRequests 00CD                                     delay_us@us 00B5  
                            ??_HMI_SetSegments 00B8                        Console_PrintChar@pInput 00C8  
                                 _Console_Init 35C2                           __end_of_eusart_getch 49CE  
                      _irobot_query_and_update 1BB8                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 3C0C                           __end_of_eusart_putch 4968  
                                      itos@Out 00C9                                 ??_Port_GetQuad 00B8  
                           _PortProperty_Valid 364C                             Byte_SetQuad@pInput 00C0  
                           SPI_MinSpeed@pInput 00C4                             Byte_SetQuad@pValue 00C3  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00B9                          __size_of_Byte_GetZone 009C  
                            ??_HMI_RightSwitch 00BB                                ___lldiv@counter 00C1  
                    __end_of_Console_PrintChar 1A26                                 ??_Port_SetType 00F2  
                   __end_of_Port_CheckQuadType 3EB6                                        printf@c 00D9  
                                      printf@f 00CA                                 Port_Init@pPort 00F7  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00BE                              __end_of_rx_assign 260C  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C4                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 4136                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 4356                             Button_Init@pInitIO 0104  
                            ?_Port_SetQuadType 00EB                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00B9                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00EF  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BB  
                        Console_Render@lCursor 00DB                             _load_iRScriptStack 3ACE  
                                    _MXK_Queue 4976                               __CFG_CPUDIV$OSC1 000000  
                             Byte_GetZone@pMax 00B7                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C1  
                              _Set_Addr_Window 2E56                                 SPI_Init@pClock 00E2  
                             ??_LCD_Word_Write 00BC                                _sort_iRBumpDrop 34A6  
                        __end_of_LCD_DrawField 3240                                 Port_Set@pInput 00C4  
                               SPI_Init@pInput 00E8                           ??_PortProperty_Valid 00C8  
                               Port_Set@pValue 00C6                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 3416                                     ?_LCD_Write 00B8  
                                 _Byte_GetPair 479E                             HMI_SetButton@F7213 FDB2  
                          ?_load_iRScriptStack 00B5                                   _Byte_GetZone 32E2  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 00D5  
                            LCD_DrawField@ymax 00D6                                 _Port_TogglePin 4526  
                             _Event_TestButton 4410                           Port_SetPinType@Props 00E0  
                                 ?_Byte_GetBit 00B5                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 4968                                   _Byte_SetPair 4664  
                                 _Byte_SetQuad 4686                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 2C42                           Port_SetPinType@pType 00DE  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B5  
                                ?_SPI_MaxSpeed 00C4                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00B5                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C4  
                        __end_ofi2_Timer0_Stop 49F6                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                         ??_load_iRScriptStack 00BF                   __end_of_irobot_move_straight 485E  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 44BC  
                        __end_of_HMI_DIPSwitch 488E                                  __pidataCOMRAM 49AA  
                __size_of_irobot_led_power_off 001A                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D0                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 49D6  
                               __end_of_printf 16C8                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 00B5                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 00C1                               ??_Timer0_Restart 00B5  
                           Port_SetType@Output 00F4                            start_initialization 2DA8  
                                   ?_MXK_Queue 00B5                       PortProperty_Valid@Errors 00CA  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 3912  
                           Port_SetType@pInput 00EF                                     HMI_Init@in 00F0  
                          HMI_SetNumber@pInput 00CB                          __end_ofi2_Port_SetPin 2FAA  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 00B6  
                       __end_of_Port_TogglePin 4556                                  ?_Word_SetPair 00C4  
                            Byte_SetBit@pInput 00B5                                 ??_MXK_SwitchTo 00BB  
                            Byte_SetBit@pValue 00B8                             ?_LCD_FillRectangle 00BE  
                    ??_irobot_query_and_update 00C5                            _Console_ResetCursor 46EA  
                  PortProperty_Valid@pPinDrive 00C6                           MXK_BlockSwitchTo@CUR 00BB  
                     PortProperty_Valid@pInput 00C4                                  i2_MXK_Release 49F6  
                       LCD_FillRectangle@pSize 00C4                                 SPI_Send@pInput 00B5  
                                 ??_Reset_High 00C9                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00C6                          Port_SetQuadType@pQuad 00ED  
                                    _ToSegment 07D8                            ??_LCD_FillRectangle 00C8  
                        Port_SetQuadType@pType 00EE                                _Console_NewLine 3240  
                               ??_SPI_MinSpeed 00C6                                   _HMI_UpSwitch 48A6  
                                    _Reset_Low 4726                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 49EA                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                      _gCharSize 00F9  
                             Timer2_Init@INDEX 008B                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                        __size_of_Console_Render 0210  
                                 ??_Motor_Step 00C9                                      _iRAngleSS 0060  
                                    _iRCliffFL 0031                                      _iRCliffFR 0030  
                           Byte_SetZone@Offset 00BE                                       ??___wmul 00B9  
                         ?_Console_ResetCursor 0001                                      _Port_Init 1A26  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03D5  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00B8  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00B5  
                           Byte_SetZone@pValue 00BA                                  Mode_Set@pMode 00B5  
                                     ??_printf 00D2                        __end_of_Set_Addr_Window 2F00  
                     Port_CheckQuadType@Output 00EA                        __end_of_sort_iRBumpDrop 3534  
                                    _gLineSize 03D9                       Port_CheckQuadType@pDrive 00E7  
                               ??_Word_GetPair 00C4                       Port_CheckQuadType@pInput 00E4  
                         __end_of_Port_GetQuad 40EE                      __end_of_LCD_FillRectangle 3986  
                                  __pbssBIGRAM 04AA                                       ?_LED_Set 00C9  
                                  __pbssCOMRAM 0029                             __end_of_Reset_High 4762  
                                __pcstackBANK0 00B5                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03DD  
                      ??_update_bump_and_cliff 00D2                                     itos@Length 00C7  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00C8  
                     __size_of_update_distance 0012                             __end_of_Timer0_ISR 4612  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 00CE  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 0EDC  
                                     ?_SPI_DCS 00B5                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 00C9                                  ??_eusart_init 00B5  
                                  ??_LCD_Write 00B9                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Step 241C                          Timer2_Init@pFrequency 00C2  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 00E1  
            twos_complement_of@complementValue 00B5                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00DE                       Port_CheckPairType@pInput 00DB  
                               reverse@tempVar 00B9                             _MXK_InitTestButton 4780  
                                   ?_Reset_Low 0001                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C2                               ??_HMI_LeftSwitch 00BB  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00B5  
                                ??_irobot_leds 00C8                                  ??_irobot_init 00B6  
                                ??_irobot_move 00C9                                  _lStepFunction 0072  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C2  
                             ??_HMI_DownSwitch 00BB                                      __pintcode 1408  
                                __pmediumconst FCCC                          ??_Console_ResetCursor 00B5  
                                     ?___awdiv 00B5                                      __ptext100 16C8  
                                    __ptext101 3CD8                                      __ptext110 32E2  
                                    __ptext102 0A5C                                      __ptext111 4686  
                                    __ptext103 420A                                      __ptext120 3A62  
                                    __ptext112 2C42                                      __ptext104 4664  
                                    __ptext121 492C                                      __ptext113 10FC  
                                    __ptext105 3E5C                                      __ptext130 2F00  
                                    __ptext122 27B8                                      __ptext114 3912  
                                    __ptext106 3BA2                                      __ptext131 4586  
                                    __ptext123 44F2                                      __ptext115 319C  
                                    __ptext107 364C                                      __ptext132 482C  
                                    __ptext124 35C2                                      __ptext116 4486  
                                    __ptext108 43D2                                      __ptext133 3740  
                                    __ptext117 2E56                                      __ptext109 479E  
                                    __ptext134 4058                                      __ptext126 45E4  
                                    __ptext118 47BC                                      __ptext135 44BC  
                                    __ptext127 241C                                      __ptext119 46A8  
                                    __ptext136 4316                                      __ptext128 49F0  
                                    __ptext137 49F6                                      __ptext129 499E  
                                    __ptext138 4984                                      __ptext139 0000  
              __end_of_irobot_query_and_update 1D3E                                      _pShiftVal 0079  
                                     ?___lldiv 00B5                                     ?_Port_Init 00F5  
                                     ?___lwdiv 00B5                                       ?___lwmod 00BC  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 3050                                   _eusart_getch 49C6  
                  __end_ofTimer0_Init@PRESCALE FD8F                                _get_packet_size 3C0C  
                                 _eusart_putch 495A                             ??_Console_FormFeed 00B5  
                              _HMI_SetSegments 2B88                             ?_GetPortProperties 00B5  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00B8                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00B5                          __end_of_HMI_SetButton 34A6  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00B5  
                         irobot_move@moveSpeed 00C5                                   ?_Port_SetPin 00C4  
                            main@distanceTotal 03DE                          __end_of_HMI_SetNumber 463C  
                             ___lwdiv@quotient 00BA                                _HMI_RightSwitch 48BE  
                          ??_GetPortProperties 00B7                        __end_of_Console_NewLine 32E2  
                         ??_MXK_InitTestButton 00E2                             Byte_GetPair@pInput 00BE  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 49F0  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 4846  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 482C  
                                     _LCD_Fill 3F0E                                       _LCD_Init 1EBE  
                               ___wmul@product 00B9                                       _HMIBoard 032E  
                               i2_Byte_GetZone 3740                                       _LED_Init 3D3C  
                                    delay_ms@u 00B7                             Button_Poll@pButton 00D0  
                                    delay_us@u 00B7                                       _HMI_Init 130C  
                                     _HMI_Poll 382A                             MXK_Queue@pCallback 00B5  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 4726  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 4316  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C2                                       i2u410_44 4092  
                                     i2u410_45 408E                                       i2u413_40 4344  
                                     _PIR1bits 000F9E                                       i2u409_44 406C  
                                     i2u409_45 4068                                       i2u356_40 3762  
                                     i2u356_47 3758                                       _PIR3bits 000FA4  
                                     i2u358_40 37AA                                       i2u358_45 37A6  
                                     i2u495_40 2460                                       i2u496_40 2474  
                                     i2u497_40 24AC                                       i2u933_48 45FC  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00B6                               HMI_SetBar@pValue 00B5  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00DF  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 30F6  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 337E  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 42D6  
                           _Port_CheckPairType 3BA2                                       _MXK_Init 1D3E  
                              MXK_SwitchTo@CUR 00BB                            __end_of_irobot_leds 3F0E  
                                     _SPI_Init 0000                            __end_of_irobot_init 495A  
                     __end_of_Event_TestButton 444C                                       _SPI_Send 3A62  
                          __end_of_irobot_move 2DA8                                      _rx_assign 251C  
                                   _ADCON0bits 000FC2                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BA                              ___wmul@multiplier 00B5  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00B9  
                                   printf@flag 00D4                           Timer2_Init@pCPUClock 00CB  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 382A                                     printf@prec 00D3  
                            Byte_GetBit@pInput 00B5                            Port_SetPinType@pPin 00DD  
                         __size_of_Button_Poll 0166                             _Port_CheckQuadType 3E5C  
                                _MXK_DIPSwitch 485E                            ?_Port_CheckPairType 00DB  
                         __end_of_SPI_MinSpeed 3912                                  ??_MXK_Dequeue 00CB  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 40EE                          Button_Poll@pIncrement 00D2  
                      PortProperty_Valid@F6830 FD8F                           __end_ofi2_Motor_Step 251C  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 2DBC                                      copy_data1 2DDC  
                                    copy_data2 2DFC                                  ??_MXK_Release 00B5  
                       __end_ofi2_Byte_GetPair 4846                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E4  
                        ?_irobot_move_straight 00CE                         __end_ofi2_Byte_GetZone 37B6  
                          __end_ofi2_MXK_Queue 4992                            ?_Port_CheckPortType 00EB  
                              itos@destination 00C3                                       _InitList FCCD  
                   __end_of_irobot_init_song_0 46EA                           _Motor_Step$intlevel0 22FC  
                                     _Mode_Set 492C                             Port_GetQuad@Output 00BA  
                            ??_update_distance 00D2                                    ??_ToSegment 00B5  
                                 _ISR_Function 1408                             Port_GetQuad@pInput 00B5  
                                 _Timer2_Clear 49CE                           __end_of_Word_GetPair 4410  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00DF  
                                  ??_Reset_Low 00C9                                       __Hrparam 0000  
                               _Console_Render 10FC                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00C7                                       _iRCliffL 0032  
                                     _iRCliffR 002F                                 LCD_Write@value 00B9  
                                     _Port_Set 041E                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 4250  
                      __end_of_get_packet_size 3C72                                    ??_Port_Init 0100  
                      __end_of_HMI_SetSegments 2C42                           ??_Port_CheckQuadType 00E8  
                             _irobot_song_play 4906                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 4394                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00EE                               __size_of___lwmod 0062  
                                     _lBufferX 008D                                       _lBufferY 008C  
                          Timer2_Init@PRESCALE FDB6                                     ?_rx_assign 00B6  
                              LCD_Fill@pColour 00BE                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 007F  
                      __end_of_HMI_RightSwitch 48D6                         Byte_GetZone@pChunkSize 00B9  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00B9  
                        __size_of_Port_SetType 022A                                  reverse@length 00B7  
                                    itos@input 00C1                          i2MXK_SwitchTo@pModule 0008  
                          irobot_move@isScript 00CD                                       _delay_ms 3B38  
                                     _delay_us 3F66                                       _clearall 008E  
                              ___lwdiv@divisor 00B7                                ___lwdiv@counter 00B9  
                              Port_GetPin@pPin 00B7                                       __ptext10 1888  
                                     __ptext11 294C                                       __ptext20 4906  
                                     __ptext12 2A0E                                       __ptext21 4846  
                                     __ptext13 3C72                                       __ptext30 495A  
                                     __ptext22 2CF8                                       __ptext14 3240  
                                     __ptext31 4708                                       __ptext23 4250  
                                     __ptext15 3534                                       __ptext40 30F6  
                                     __ptext32 1D3E                                       __ptext24 47DA  
                                     __ptext16 46EA                                       __ptext41 3D3C  
                                     __ptext33 1A26                                       __ptext25 4812  
                                     __ptext17 3E00                                       __ptext50 4394  
                                     __ptext42 3FB8                                       __ptext34 0CB2  
                                     __ptext26 3EB6                                       __ptext18 42D6  
                                     __ptext51 3F66                                       __ptext43 4356  
                                     __ptext35 40EE                                       __ptext27 3ACE  
                                     __ptext19 417E                                       __ptext60 4744  
                                     __ptext52 1EBE                                       __ptext44 22F6  
                                     __ptext36 041E                                       __ptext28 46CA  
                                     __ptext61 382A                                       __ptext53 337E  
                                     __ptext45 49DE                                       __ptext37 4968  
                                     __ptext29 494C                                       __ptext70 40A4  
                                     __ptext62 2030                                       __ptext54 3F0E  
                                     __ptext46 4992                                       __ptext38 2FAA  
                                     __ptext71 45B6                                       __ptext63 485E  
                                     __ptext55 3986                                       __ptext47 4294  
                                     __ptext39 3050                            ??_MXK_BlockSwitchTo 00BB  
                                     __ptext80 07D8                                       __ptext72 1404  
                                     __ptext64 4876                                       __ptext56 37B6  
                                     __ptext48 47F6                                       __ptext81 3416  
                                     __ptext73 4410                                       __ptext65 488E  
                                     __ptext57 4008                                       __ptext49 4976  
                                     __ptext90 0000                                       __ptext82 4136  
                                     __ptext74 4612                                       __ptext66 48A6  
                                     __ptext58 3B38                                       __ptext91 2196  
                                     __ptext83 4526                                       __ptext75 260C  
                                     __ptext67 48BE                                       __ptext59 4726  
                                     __ptext92 2ACC                                       __ptext84 2888  
                                     __ptext76 39F6                                       __ptext68 48D6  
                                     __ptext93 49CE                                       __ptext85 41C4  
                                     __ptext77 3D9E                                       __ptext69 48EE  
                                     __ptext94 463C                                       __ptext86 49B4  
                                     __ptext78 36C8                                       __ptext95 4556  
                                     __ptext87 49E4                                       __ptext79 2B88  
                                     __ptext96 26E4                                       __ptext88 130C  
                                     __ptext97 4762                                       __ptext89 389E  
                                     __ptext98 49EA                                       __ptext99 4780  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 4708  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00CE                   __end_of_irobot_led_power_off 482C  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                            __end_of_MXK_Dequeue 4394  
                            HMI_SetSegments@in 00B9                          Button_Init@pThreshold 0102  
                                __size_of_main 0220                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C0                         __end_of_Console_Render 130C  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 40A4                            __end_of_MXK_Release 4812  
                               _MXK_TestButton 48EE                                  i2_Byte_SetBit 4058  
                                 _iRDistanceSS 0064                                    _irobot_leds 3EB6  
                                  _irobot_init 494C                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 2CF8                      __end_of_MXK_BlockSwitchTo 43D2  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 0CB2                                   Port_Set@Type 00DB  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 0085                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EA                                      printf@val 00D7  
                                     main@dist 03E2                                   _SSP1STATbits 000FC7  
                                     main@time 03E0                                 Timer0_Init@DIV 0068  
                               Timer0_Init@PRE 0039                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 4136                                     _HMI_GetBar 49E4  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00DA  
                             ??_Port_TogglePin 00CC                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00C7  
                                   _HMI_SetBar 49B4                               Byte_SetZone@MASK 00BF  
                                  i2_MXK_Queue 4984                                 Timer2_Init@DIV 031E  
                               Timer2_Init@PRE 008A                               Byte_SetZone@pMax 00B7  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D0                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00C5  
                __end_of_update_bump_and_cliff 4486                             LCD_FillRectangle@i 00CA  
                           LCD_FillRectangle@j 00CB                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00B5  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00BC  
                             ___lldiv@dividend 00B5                         __end_of_MXK_TestButton 4906  
                              ?_Console_Render 0001                                  _iRScriptIndex 0035  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D1                       irobot_query_and_update@j 00CF  
                               _SPI_DisableISR 463C                     __end_of_twos_complement_of 4294  
                              Port_Init@pInput 00F5                                       printf@ap 00D5  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                             ?_HMI_SetSegments 00B6                        Console_MakeField@Column 00C1  
                        __size_of_SPI_MaxSpeed 0074                                  SPI_DCS@pInput 00B5  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00BB  
                                  ??_rx_assign 00B8                          __size_ofi2_Motor_Step 0100  
                      Console_MakeField@pInput 00C0                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00BD                                  ??_GetPortPORT 00B7  
                              ___lwmod@divisor 00BE                                  ??_GetPortTRIS 00B7  
                           Word_SetPair@pInput 00C4                                ___lwmod@counter 00C0  
                           Word_SetPair@pValue 00C7                       ?_irobot_query_and_update 00BB  
                                  _MXK_Dequeue 4356                                 LED_Toggle@pLED 00CD  
                                _LCD_DrawField 319C                               _Port_SetQuadType 0A5C  
                                  _MXK_Release 47F6                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 4294                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D0                             Byte_GetZone@Offset 00BC  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00C6  
                              _Port_SetPinType 16C8                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00BD                             Byte_GetZone@pChunk 00B8  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 4708  
                           Byte_GetZone@pInput 00B5                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 3CD8                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 4664                                   _SPI_MaxSpeed 37B6  
            irobot_query_and_update@streamSize 00CC                                   _SPI_MinSpeed 389E  
                           Port_Set@TypeActual 00D9  
