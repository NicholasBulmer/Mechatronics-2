

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Sep 18 10:30:40 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1,inline
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1,group=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1,inline
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1,inline
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   198                           	psect	text174,global,reloc=2,class=CODE,delta=1
   199                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   200                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   201  0000                     
   202                           ; Version 1.43
   203                           ; Generated 25/07/2017 GMT
   204                           ; 
   205                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   206                           ; All rights reserved.
   207                           ; 
   208                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   209                           ; 
   210                           ; Redistribution and use in source and binary forms, with or without modification, are
   211                           ; permitted provided that the following conditions are met:
   212                           ; 
   213                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   214                           ;        conditions and the following disclaimer.
   215                           ; 
   216                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   217                           ;        of conditions and the following disclaimer in the documentation and/or other
   218                           ;        materials provided with the distribution.
   219                           ; 
   220                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   221                           ;        software without specific prior written permission.
   222                           ; 
   223                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   224                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   225                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   226                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   227                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   228                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   229                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   230                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   231                           ; 
   232                           ; 
   233                           ; Code-generator required, PIC18F67J50 Definitions
   234                           ; 
   235                           ; SFR Addresses
   236  0000                     
   237                           	psect	idataCOMRAM
   238  016CF4                     __pidataCOMRAM:
   239                           	opt stack 0
   240                           
   241                           ;initializer for _gCursor
   242  016CF4  0006               	dw	6
   243  016CF6  0006               	dw	6
   244                           
   245                           ;initializer for _Bus_State
   246  016CF8  01                 	db	1
   247                           
   248                           ;initializer for _A
   249  016CF9  41                 	db	65
   250                           
   251                           ;initializer for _a
   252  016CFA  61                 	db	97
   253                           
   254                           ;initializer for _zero
   255  016CFB  30                 	db	48
   256                           
   257                           ;initializer for _l
   258  016CFC  80                 	db	128
   259                           
   260                           ;initializer for _w
   261  016CFD  80                 	db	128
   262                           
   263                           	psect	idataBANK0
   264  016D2A                     __pidataBANK0:
   265                           	opt stack 0
   266                           
   267                           ;initializer for _TimerX
   268  016D2A  0008               	dw	8
   269                           
   270                           ;initializer for _MinDist
   271  016D2C  03E8               	dw	1000
   272                           
   273                           ;initializer for _gForecolour
   274  016D2E  FFFF               	dw	65535
   275                           
   276                           ;initializer for _change
   277  016D30  01                 	db	1
   278                           
   279                           	psect	idataBANK3
   280  016C6E                     __pidataBANK3:
   281                           	opt stack 0
   282                           
   283                           ;initializer for Console_Render@F6956
   284  016C6E  0006               	dw	6
   285  016C70  0006               	dw	6
   286                           
   287                           ;initializer for _gLineSize
   288  016C72  0080               	dw	128
   289  016C74  0007               	dw	7
   290                           
   291                           ;initializer for _gCharSize
   292  016C76  0005               	dw	5
   293  016C78  0007               	dw	7
   294                           
   295                           ;initializer for _corner
   296  016C7A  0001               	dw	1
   297                           
   298                           	psect	mediumconst
   299  00FC7E                     __pmediumconst:
   300                           	opt stack 0
   301  00FC7E  00                 	db	0
   302  00FC7F                     _InitList:
   303                           	opt stack 0
   304  00FC7F  1100               	dw	4352
   305  00FC81  0080               	dw	128
   306  00FC83  012C               	dw	300
   307  00FC85  B100               	dw	45312
   308  00FC87  0002               	dw	2
   309  00FC89  0035               	dw	53
   310  00FC8B  0036               	dw	54
   311  00FC8D  B200               	dw	45568
   312  00FC8F  0002               	dw	2
   313  00FC91  0035               	dw	53
   314  00FC93  0036               	dw	54
   315  00FC95  B300               	dw	45824
   316  00FC97  0002               	dw	2
   317  00FC99  0035               	dw	53
   318  00FC9B  0036               	dw	54
   319  00FC9D  0002               	dw	2
   320  00FC9F  0035               	dw	53
   321  00FCA1  0036               	dw	54
   322  00FCA3  B400               	dw	46080
   323  00FCA5  0000               	dw	0
   324  00FCA7  C000               	dw	49152
   325  00FCA9  00A2               	dw	162
   326  00FCAB  0002               	dw	2
   327  00FCAD  0084               	dw	132
   328  00FCAF  C100               	dw	49408
   329  00FCB1  00C5               	dw	197
   330  00FCB3  C200               	dw	49664
   331  00FCB5  000D               	dw	13
   332  00FCB7  0000               	dw	0
   333  00FCB9  C300               	dw	49920
   334  00FCBB  008D               	dw	141
   335  00FCBD  002A               	dw	42
   336  00FCBF  C400               	dw	50176
   337  00FCC1  008D               	dw	141
   338  00FCC3  00EE               	dw	238
   339  00FCC5  C500               	dw	50432
   340  00FCC7  000A               	dw	10
   341  00FCC9  3600               	dw	13824
   342  00FCCB  00C8               	dw	200
   343  00FCCD  E000               	dw	57344
   344  00FCCF  0012               	dw	18
   345  00FCD1  001C               	dw	28
   346  00FCD3  0010               	dw	16
   347  00FCD5  0018               	dw	24
   348  00FCD7  0033               	dw	51
   349  00FCD9  002C               	dw	44
   350  00FCDB  0025               	dw	37
   351  00FCDD  0028               	dw	40
   352  00FCDF  0028               	dw	40
   353  00FCE1  0027               	dw	39
   354  00FCE3  002F               	dw	47
   355  00FCE5  003C               	dw	60
   356  00FCE7  0000               	dw	0
   357  00FCE9  0003               	dw	3
   358  00FCEB  0003               	dw	3
   359  00FCED  0010               	dw	16
   360  00FCEF  0080               	dw	128
   361  00FCF1  0078               	dw	120
   362  00FCF3  E100               	dw	57600
   363  00FCF5  0012               	dw	18
   364  00FCF7  001C               	dw	28
   365  00FCF9  0010               	dw	16
   366  00FCFB  0018               	dw	24
   367  00FCFD  002D               	dw	45
   368  00FCFF  0028               	dw	40
   369  00FD01  0023               	dw	35
   370  00FD03  0028               	dw	40
   371  00FD05  0028               	dw	40
   372  00FD07  0026               	dw	38
   373  00FD09  002F               	dw	47
   374  00FD0B  003B               	dw	59
   375  00FD0D  0000               	dw	0
   376  00FD0F  0003               	dw	3
   377  00FD11  0003               	dw	3
   378  00FD13  0010               	dw	16
   379  00FD15  3A00               	dw	14848
   380  00FD17  0005               	dw	5
   381  00FD19  2A00               	dw	10752
   382  00FD1B  0000               	dw	0
   383  00FD1D  0002               	dw	2
   384  00FD1F  0000               	dw	0
   385  00FD21  0081               	dw	129
   386  00FD23  2B00               	dw	11008
   387  00FD25  0000               	dw	0
   388  00FD27  0003               	dw	3
   389  00FD29  0000               	dw	0
   390  00FD2B  00A2               	dw	162
   391  00FD2D  2900               	dw	10496
   392  00FD2F  2C00               	dw	11264
   393  00FD31                     __end_of_InitList:
   394                           	opt stack 0
   395  00FD31                     Timer0_Init@PRESCALE:
   396                           	opt stack 0
   397  00FD31  0002               	dw	2
   398  00FD33  0004               	dw	4
   399  00FD35  0008               	dw	8
   400  00FD37  0010               	dw	16
   401  00FD39  0020               	dw	32
   402  00FD3B  0040               	dw	64
   403  00FD3D  0080               	dw	128
   404  00FD3F  0100               	dw	256
   405  00FD41                     __end_ofTimer0_Init@PRESCALE:
   406                           	opt stack 0
   407  00FD41                     PortProperty_Valid@F6830:
   408                           	opt stack 0
   409  00FD41  00                 	db	0
   410  00FD42  01                 	db	1
   411  00FD43  02                 	db	2
   412  00FD44  00                 	db	0
   413  00FD45  01                 	db	1
   414  00FD46  00                 	db	0
   415  00FD47  01                 	db	1
   416  00FD48  00                 	db	0
   417  00FD49  02                 	db	2
   418  00FD4A  02                 	db	2
   419  00FD4B  00                 	db	0
   420  00FD4C  00                 	db	0
   421  00FD4D  03                 	db	3
   422  00FD4E  03                 	db	3
   423  00FD4F  03                 	db	3
   424  00FD50  00                 	db	0
   425  00FD51                     __end_ofPortProperty_Valid@F6830:
   426                           	opt stack 0
   427  00FD51                     _dpowers:
   428                           	opt stack 0
   429  00FD51  0001               	dw	1
   430  00FD53  000A               	dw	10
   431  00FD55  0064               	dw	100
   432  00FD57  03E8               	dw	1000
   433  00FD59  2710               	dw	10000
   434  00FD5B                     __end_of_dpowers:
   435                           	opt stack 0
   436  00FD5B                     _MASKS:
   437                           	opt stack 0
   438  00FD5B  00                 	db	0
   439  00FD5C  01                 	db	1
   440  00FD5D  03                 	db	3
   441  00FD5E  07                 	db	7
   442  00FD5F  0F                 	db	15
   443  00FD60  1F                 	db	31
   444  00FD61  3F                 	db	63
   445  00FD62  7F                 	db	127
   446  00FD63  FF                 	db	255
   447  00FD64                     __end_of_MASKS:
   448                           	opt stack 0
   449  00FD64                     HMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FD64  00                 	db	0
   452  00FD65  02                 	db	2
   453  00FD66  01                 	db	1
   454  00FD67  03                 	db	3
   455  00FD68                     __end_ofHMI_SetButton@F7213:
   456                           	opt stack 0
   457  00FD68                     Timer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD68  01                 	db	1
   460  00FD69  04                 	db	4
   461  00FD6A  10                 	db	16
   462  00FD6B                     __end_ofTimer2_Init@PRESCALE:
   463                           	opt stack 0
   464  00FD6B                     _Font5x7:
   465                           	opt stack 0
   466  00FD6B  00                 	db	0
   467  00FD6C  00                 	db	0
   468  00FD6D  00                 	db	0
   469  00FD6E  00                 	db	0
   470  00FD6F  00                 	db	0
   471  00FD70  00                 	db	0
   472  00FD71  00                 	db	0
   473  00FD72  5F                 	db	95
   474  00FD73  00                 	db	0
   475  00FD74  00                 	db	0
   476  00FD75  00                 	db	0
   477  00FD76  07                 	db	7
   478  00FD77  00                 	db	0
   479  00FD78  07                 	db	7
   480  00FD79  00                 	db	0
   481  00FD7A  14                 	db	20
   482  00FD7B  7F                 	db	127
   483  00FD7C  14                 	db	20
   484  00FD7D  7F                 	db	127
   485  00FD7E  14                 	db	20
   486  00FD7F  24                 	db	36
   487  00FD80  2A                 	db	42
   488  00FD81  7F                 	db	127
   489  00FD82  2A                 	db	42
   490  00FD83  12                 	db	18
   491  00FD84  23                 	db	35
   492  00FD85  13                 	db	19
   493  00FD86  08                 	db	8
   494  00FD87  64                 	db	100
   495  00FD88  62                 	db	98
   496  00FD89  36                 	db	54
   497  00FD8A  49                 	db	73
   498  00FD8B  55                 	db	85
   499  00FD8C  22                 	db	34
   500  00FD8D  50                 	db	80
   501  00FD8E  00                 	db	0
   502  00FD8F  05                 	db	5
   503  00FD90  03                 	db	3
   504  00FD91  00                 	db	0
   505  00FD92  00                 	db	0
   506  00FD93  00                 	db	0
   507  00FD94  1C                 	db	28
   508  00FD95  22                 	db	34
   509  00FD96  41                 	db	65
   510  00FD97  00                 	db	0
   511  00FD98  00                 	db	0
   512  00FD99  41                 	db	65
   513  00FD9A  22                 	db	34
   514  00FD9B  1C                 	db	28
   515  00FD9C  00                 	db	0
   516  00FD9D  08                 	db	8
   517  00FD9E  2A                 	db	42
   518  00FD9F  1C                 	db	28
   519  00FDA0  2A                 	db	42
   520  00FDA1  08                 	db	8
   521  00FDA2  08                 	db	8
   522  00FDA3  08                 	db	8
   523  00FDA4  3E                 	db	62
   524  00FDA5  08                 	db	8
   525  00FDA6  08                 	db	8
   526  00FDA7  00                 	db	0
   527  00FDA8  50                 	db	80
   528  00FDA9  30                 	db	48
   529  00FDAA  00                 	db	0
   530  00FDAB  00                 	db	0
   531  00FDAC  08                 	db	8
   532  00FDAD  08                 	db	8
   533  00FDAE  08                 	db	8
   534  00FDAF  08                 	db	8
   535  00FDB0  08                 	db	8
   536  00FDB1  00                 	db	0
   537  00FDB2  60                 	db	96
   538  00FDB3  60                 	db	96
   539  00FDB4  00                 	db	0
   540  00FDB5  00                 	db	0
   541  00FDB6  20                 	db	32
   542  00FDB7  10                 	db	16
   543  00FDB8  08                 	db	8
   544  00FDB9  04                 	db	4
   545  00FDBA  02                 	db	2
   546  00FDBB  3E                 	db	62
   547  00FDBC  51                 	db	81
   548  00FDBD  49                 	db	73
   549  00FDBE  45                 	db	69
   550  00FDBF  3E                 	db	62
   551  00FDC0  00                 	db	0
   552  00FDC1  42                 	db	66
   553  00FDC2  7F                 	db	127
   554  00FDC3  40                 	db	64
   555  00FDC4  00                 	db	0
   556  00FDC5  42                 	db	66
   557  00FDC6  61                 	db	97
   558  00FDC7  51                 	db	81
   559  00FDC8  49                 	db	73
   560  00FDC9  46                 	db	70
   561  00FDCA  21                 	db	33
   562  00FDCB  41                 	db	65
   563  00FDCC  45                 	db	69
   564  00FDCD  4B                 	db	75
   565  00FDCE  31                 	db	49
   566  00FDCF  18                 	db	24
   567  00FDD0  14                 	db	20
   568  00FDD1  12                 	db	18
   569  00FDD2  7F                 	db	127
   570  00FDD3  10                 	db	16
   571  00FDD4  27                 	db	39
   572  00FDD5  45                 	db	69
   573  00FDD6  45                 	db	69
   574  00FDD7  45                 	db	69
   575  00FDD8  39                 	db	57
   576  00FDD9  3C                 	db	60
   577  00FDDA  4A                 	db	74
   578  00FDDB  49                 	db	73
   579  00FDDC  49                 	db	73
   580  00FDDD  30                 	db	48
   581  00FDDE  01                 	db	1
   582  00FDDF  71                 	db	113
   583  00FDE0  09                 	db	9
   584  00FDE1  05                 	db	5
   585  00FDE2  03                 	db	3
   586  00FDE3  36                 	db	54
   587  00FDE4  49                 	db	73
   588  00FDE5  49                 	db	73
   589  00FDE6  49                 	db	73
   590  00FDE7  36                 	db	54
   591  00FDE8  06                 	db	6
   592  00FDE9  49                 	db	73
   593  00FDEA  49                 	db	73
   594  00FDEB  29                 	db	41
   595  00FDEC  1E                 	db	30
   596  00FDED  00                 	db	0
   597  00FDEE  36                 	db	54
   598  00FDEF  36                 	db	54
   599  00FDF0  00                 	db	0
   600  00FDF1  00                 	db	0
   601  00FDF2  00                 	db	0
   602  00FDF3  56                 	db	86
   603  00FDF4  36                 	db	54
   604  00FDF5  00                 	db	0
   605  00FDF6  00                 	db	0
   606  00FDF7  00                 	db	0
   607  00FDF8  08                 	db	8
   608  00FDF9  14                 	db	20
   609  00FDFA  22                 	db	34
   610  00FDFB  41                 	db	65
   611  00FDFC  14                 	db	20
   612  00FDFD  14                 	db	20
   613  00FDFE  14                 	db	20
   614  00FDFF  14                 	db	20
   615  00FE00  14                 	db	20
   616  00FE01  41                 	db	65
   617  00FE02  22                 	db	34
   618  00FE03  14                 	db	20
   619  00FE04  08                 	db	8
   620  00FE05  00                 	db	0
   621  00FE06  02                 	db	2
   622  00FE07  01                 	db	1
   623  00FE08  51                 	db	81
   624  00FE09  09                 	db	9
   625  00FE0A  06                 	db	6
   626  00FE0B  32                 	db	50
   627  00FE0C  49                 	db	73
   628  00FE0D  79                 	db	121
   629  00FE0E  41                 	db	65
   630  00FE0F  3E                 	db	62
   631  00FE10  7E                 	db	126
   632  00FE11  11                 	db	17
   633  00FE12  11                 	db	17
   634  00FE13  11                 	db	17
   635  00FE14  7E                 	db	126
   636  00FE15  7F                 	db	127
   637  00FE16  49                 	db	73
   638  00FE17  49                 	db	73
   639  00FE18  49                 	db	73
   640  00FE19  36                 	db	54
   641  00FE1A  3E                 	db	62
   642  00FE1B  41                 	db	65
   643  00FE1C  41                 	db	65
   644  00FE1D  41                 	db	65
   645  00FE1E  22                 	db	34
   646  00FE1F  7F                 	db	127
   647  00FE20  41                 	db	65
   648  00FE21  41                 	db	65
   649  00FE22  22                 	db	34
   650  00FE23  1C                 	db	28
   651  00FE24  7F                 	db	127
   652  00FE25  49                 	db	73
   653  00FE26  49                 	db	73
   654  00FE27  49                 	db	73
   655  00FE28  41                 	db	65
   656  00FE29  7F                 	db	127
   657  00FE2A  09                 	db	9
   658  00FE2B  09                 	db	9
   659  00FE2C  01                 	db	1
   660  00FE2D  01                 	db	1
   661  00FE2E  3E                 	db	62
   662  00FE2F  41                 	db	65
   663  00FE30  41                 	db	65
   664  00FE31  51                 	db	81
   665  00FE32  32                 	db	50
   666  00FE33  7F                 	db	127
   667  00FE34  08                 	db	8
   668  00FE35  08                 	db	8
   669  00FE36  08                 	db	8
   670  00FE37  7F                 	db	127
   671  00FE38  00                 	db	0
   672  00FE39  41                 	db	65
   673  00FE3A  7F                 	db	127
   674  00FE3B  41                 	db	65
   675  00FE3C  00                 	db	0
   676  00FE3D  20                 	db	32
   677  00FE3E  40                 	db	64
   678  00FE3F  41                 	db	65
   679  00FE40  3F                 	db	63
   680  00FE41  01                 	db	1
   681  00FE42  7F                 	db	127
   682  00FE43  08                 	db	8
   683  00FE44  14                 	db	20
   684  00FE45  22                 	db	34
   685  00FE46  41                 	db	65
   686  00FE47  7F                 	db	127
   687  00FE48  40                 	db	64
   688  00FE49  40                 	db	64
   689  00FE4A  40                 	db	64
   690  00FE4B  40                 	db	64
   691  00FE4C  7F                 	db	127
   692  00FE4D  02                 	db	2
   693  00FE4E  04                 	db	4
   694  00FE4F  02                 	db	2
   695  00FE50  7F                 	db	127
   696  00FE51  7F                 	db	127
   697  00FE52  04                 	db	4
   698  00FE53  08                 	db	8
   699  00FE54  10                 	db	16
   700  00FE55  7F                 	db	127
   701  00FE56  3E                 	db	62
   702  00FE57  41                 	db	65
   703  00FE58  41                 	db	65
   704  00FE59  41                 	db	65
   705  00FE5A  3E                 	db	62
   706  00FE5B  7F                 	db	127
   707  00FE5C  09                 	db	9
   708  00FE5D  09                 	db	9
   709  00FE5E  09                 	db	9
   710  00FE5F  06                 	db	6
   711  00FE60  3E                 	db	62
   712  00FE61  41                 	db	65
   713  00FE62  51                 	db	81
   714  00FE63  21                 	db	33
   715  00FE64  5E                 	db	94
   716  00FE65  7F                 	db	127
   717  00FE66  09                 	db	9
   718  00FE67  19                 	db	25
   719  00FE68  29                 	db	41
   720  00FE69  46                 	db	70
   721  00FE6A  46                 	db	70
   722  00FE6B  49                 	db	73
   723  00FE6C  49                 	db	73
   724  00FE6D  49                 	db	73
   725  00FE6E  31                 	db	49
   726  00FE6F  01                 	db	1
   727  00FE70  01                 	db	1
   728  00FE71  7F                 	db	127
   729  00FE72  01                 	db	1
   730  00FE73  01                 	db	1
   731  00FE74  3F                 	db	63
   732  00FE75  40                 	db	64
   733  00FE76  40                 	db	64
   734  00FE77  40                 	db	64
   735  00FE78  3F                 	db	63
   736  00FE79  1F                 	db	31
   737  00FE7A  20                 	db	32
   738  00FE7B  40                 	db	64
   739  00FE7C  20                 	db	32
   740  00FE7D  1F                 	db	31
   741  00FE7E  7F                 	db	127
   742  00FE7F  20                 	db	32
   743  00FE80  18                 	db	24
   744  00FE81  20                 	db	32
   745  00FE82  7F                 	db	127
   746  00FE83  63                 	db	99
   747  00FE84  14                 	db	20
   748  00FE85  08                 	db	8
   749  00FE86  14                 	db	20
   750  00FE87  63                 	db	99
   751  00FE88  03                 	db	3
   752  00FE89  04                 	db	4
   753  00FE8A  78                 	db	120
   754  00FE8B  04                 	db	4
   755  00FE8C  03                 	db	3
   756  00FE8D  61                 	db	97
   757  00FE8E  51                 	db	81
   758  00FE8F  49                 	db	73
   759  00FE90  45                 	db	69
   760  00FE91  43                 	db	67
   761  00FE92  00                 	db	0
   762  00FE93  00                 	db	0
   763  00FE94  7F                 	db	127
   764  00FE95  41                 	db	65
   765  00FE96  41                 	db	65
   766  00FE97  02                 	db	2
   767  00FE98  04                 	db	4
   768  00FE99  08                 	db	8
   769  00FE9A  10                 	db	16
   770  00FE9B  20                 	db	32
   771  00FE9C  41                 	db	65
   772  00FE9D  41                 	db	65
   773  00FE9E  7F                 	db	127
   774  00FE9F  00                 	db	0
   775  00FEA0  00                 	db	0
   776  00FEA1  04                 	db	4
   777  00FEA2  02                 	db	2
   778  00FEA3  01                 	db	1
   779  00FEA4  02                 	db	2
   780  00FEA5  04                 	db	4
   781  00FEA6  40                 	db	64
   782  00FEA7  40                 	db	64
   783  00FEA8  40                 	db	64
   784  00FEA9  40                 	db	64
   785  00FEAA  40                 	db	64
   786  00FEAB  00                 	db	0
   787  00FEAC  01                 	db	1
   788  00FEAD  02                 	db	2
   789  00FEAE  04                 	db	4
   790  00FEAF  00                 	db	0
   791  00FEB0  20                 	db	32
   792  00FEB1  54                 	db	84
   793  00FEB2  54                 	db	84
   794  00FEB3  54                 	db	84
   795  00FEB4  78                 	db	120
   796  00FEB5  7F                 	db	127
   797  00FEB6  48                 	db	72
   798  00FEB7  44                 	db	68
   799  00FEB8  44                 	db	68
   800  00FEB9  38                 	db	56
   801  00FEBA  38                 	db	56
   802  00FEBB  44                 	db	68
   803  00FEBC  44                 	db	68
   804  00FEBD  44                 	db	68
   805  00FEBE  20                 	db	32
   806  00FEBF  38                 	db	56
   807  00FEC0  44                 	db	68
   808  00FEC1  44                 	db	68
   809  00FEC2  48                 	db	72
   810  00FEC3  7F                 	db	127
   811  00FEC4  38                 	db	56
   812  00FEC5  54                 	db	84
   813  00FEC6  54                 	db	84
   814  00FEC7  54                 	db	84
   815  00FEC8  18                 	db	24
   816  00FEC9  08                 	db	8
   817  00FECA  7E                 	db	126
   818  00FECB  09                 	db	9
   819  00FECC  01                 	db	1
   820  00FECD  02                 	db	2
   821  00FECE  08                 	db	8
   822  00FECF  14                 	db	20
   823  00FED0  54                 	db	84
   824  00FED1  54                 	db	84
   825  00FED2  3C                 	db	60
   826  00FED3  7F                 	db	127
   827  00FED4  08                 	db	8
   828  00FED5  04                 	db	4
   829  00FED6  04                 	db	4
   830  00FED7  78                 	db	120
   831  00FED8  00                 	db	0
   832  00FED9  44                 	db	68
   833  00FEDA  7D                 	db	125
   834  00FEDB  40                 	db	64
   835  00FEDC  00                 	db	0
   836  00FEDD  20                 	db	32
   837  00FEDE  40                 	db	64
   838  00FEDF  44                 	db	68
   839  00FEE0  3D                 	db	61
   840  00FEE1  00                 	db	0
   841  00FEE2  00                 	db	0
   842  00FEE3  7F                 	db	127
   843  00FEE4  10                 	db	16
   844  00FEE5  28                 	db	40
   845  00FEE6  44                 	db	68
   846  00FEE7  00                 	db	0
   847  00FEE8  41                 	db	65
   848  00FEE9  7F                 	db	127
   849  00FEEA  40                 	db	64
   850  00FEEB  00                 	db	0
   851  00FEEC  7C                 	db	124
   852  00FEED  04                 	db	4
   853  00FEEE  18                 	db	24
   854  00FEEF  04                 	db	4
   855  00FEF0  78                 	db	120
   856  00FEF1  7C                 	db	124
   857  00FEF2  08                 	db	8
   858  00FEF3  04                 	db	4
   859  00FEF4  04                 	db	4
   860  00FEF5  78                 	db	120
   861  00FEF6  38                 	db	56
   862  00FEF7  44                 	db	68
   863  00FEF8  44                 	db	68
   864  00FEF9  44                 	db	68
   865  00FEFA  38                 	db	56
   866  00FEFB  7C                 	db	124
   867  00FEFC  14                 	db	20
   868  00FEFD  14                 	db	20
   869  00FEFE  14                 	db	20
   870  00FEFF  08                 	db	8
   871  00FF00  08                 	db	8
   872  00FF01  14                 	db	20
   873  00FF02  14                 	db	20
   874  00FF03  18                 	db	24
   875  00FF04  7C                 	db	124
   876  00FF05  7C                 	db	124
   877  00FF06  08                 	db	8
   878  00FF07  04                 	db	4
   879  00FF08  04                 	db	4
   880  00FF09  08                 	db	8
   881  00FF0A  48                 	db	72
   882  00FF0B  54                 	db	84
   883  00FF0C  54                 	db	84
   884  00FF0D  54                 	db	84
   885  00FF0E  20                 	db	32
   886  00FF0F  04                 	db	4
   887  00FF10  3F                 	db	63
   888  00FF11  44                 	db	68
   889  00FF12  40                 	db	64
   890  00FF13  20                 	db	32
   891  00FF14  3C                 	db	60
   892  00FF15  40                 	db	64
   893  00FF16  40                 	db	64
   894  00FF17  20                 	db	32
   895  00FF18  7C                 	db	124
   896  00FF19  1C                 	db	28
   897  00FF1A  20                 	db	32
   898  00FF1B  40                 	db	64
   899  00FF1C  20                 	db	32
   900  00FF1D  1C                 	db	28
   901  00FF1E  3C                 	db	60
   902  00FF1F  40                 	db	64
   903  00FF20  30                 	db	48
   904  00FF21  40                 	db	64
   905  00FF22  3C                 	db	60
   906  00FF23  44                 	db	68
   907  00FF24  28                 	db	40
   908  00FF25  10                 	db	16
   909  00FF26  28                 	db	40
   910  00FF27  44                 	db	68
   911  00FF28  0C                 	db	12
   912  00FF29  50                 	db	80
   913  00FF2A  50                 	db	80
   914  00FF2B  50                 	db	80
   915  00FF2C  3C                 	db	60
   916  00FF2D  44                 	db	68
   917  00FF2E  64                 	db	100
   918  00FF2F  54                 	db	84
   919  00FF30  4C                 	db	76
   920  00FF31  44                 	db	68
   921  00FF32  00                 	db	0
   922  00FF33  08                 	db	8
   923  00FF34  36                 	db	54
   924  00FF35  41                 	db	65
   925  00FF36  00                 	db	0
   926  00FF37  00                 	db	0
   927  00FF38  00                 	db	0
   928  00FF39  7F                 	db	127
   929  00FF3A  00                 	db	0
   930  00FF3B  00                 	db	0
   931  00FF3C  00                 	db	0
   932  00FF3D  41                 	db	65
   933  00FF3E  36                 	db	54
   934  00FF3F  08                 	db	8
   935  00FF40  00                 	db	0
   936  00FF41  08                 	db	8
   937  00FF42  08                 	db	8
   938  00FF43  2A                 	db	42
   939  00FF44  1C                 	db	28
   940  00FF45  08                 	db	8
   941  00FF46  08                 	db	8
   942  00FF47  1C                 	db	28
   943  00FF48  2A                 	db	42
   944  00FF49  08                 	db	8
   945  00FF4A  08                 	db	8
   946  00FF4B                     __end_of_Font5x7:
   947                           	opt stack 0
   948  00FF4B                     _PortG_Property:
   949                           	opt stack 0
   950  00FF4B  FC00               	dw	64512
   951  00FF4D                     __end_of_PortG_Property:
   952                           	opt stack 0
   953  00FF4D                     _PortF_Property:
   954                           	opt stack 0
   955  00FF4D  0FFF               	dw	4095
   956  00FF4F                     __end_of_PortF_Property:
   957                           	opt stack 0
   958  00FF4F                     _PortE_Property:
   959                           	opt stack 0
   960  00FF4F  0000               	dw	0
   961  00FF51                     __end_of_PortE_Property:
   962                           	opt stack 0
   963  00FF51                     _PortD_Property:
   964                           	opt stack 0
   965  00FF51  FFFF               	dw	65535
   966  00FF53                     __end_of_PortD_Property:
   967                           	opt stack 0
   968  00FF53                     _PortC_Property:
   969                           	opt stack 0
   970  00FF53  FFF0               	dw	65520
   971  00FF55                     __end_of_PortC_Property:
   972                           	opt stack 0
   973  00FF55                     _PortB_Property:
   974                           	opt stack 0
   975  00FF55  FF00               	dw	65280
   976  00FF57                     __end_of_PortB_Property:
   977                           	opt stack 0
   978  00FF57                     _PortA_Property:
   979                           	opt stack 0
   980  00FF57  00FF               	dw	255
   981  00FF59                     __end_of_PortA_Property:
   982                           	opt stack 0
   983  0000                     _TMR0	set	4054
   984  0000                     _RCREG1	set	4015
   985  0000                     _TXREG1	set	4014
   986  0000                     _SPBRG1	set	4016
   987  0000                     _TXSTA1bits	set	4013
   988  0000                     _BAUDCON1bits	set	3966
   989  0000                     _RCSTA1	set	4012
   990  0000                     _TXSTA1	set	4013
   991  0000                     _TRISCbits	set	3988
   992  0000                     _PR2	set	4043
   993  0000                     _T2CONbits	set	4042
   994  0000                     _T0CONbits	set	4053
   995  0000                     _RCONbits	set	4048
   996  0000                     _OSCTUNEbits	set	3995
   997  0000                     _PIR3	set	4004
   998  0000                     _PIR2	set	4001
   999  0000                     _PIR1	set	3998
  1000  0000                     _INTCONbits	set	4082
  1001  0000                     _SSP2CON2bits	set	3947
  1002  0000                     _SSP1CON2bits	set	4037
  1003  0000                     _SSP1ADD	set	4040
  1004  0000                     _ANCON0	set	4033
  1005  0000                     _ADRESL	set	4035
  1006  0000                     _ADRESH	set	4036
  1007  0000                     _ADCON1bits	set	4033
  1008  0000                     _ADCON0bits	set	4034
  1009  0000                     _SSP2CON1bits	set	3948
  1010  0000                     _SSP1CON1bits	set	4038
  1011  0000                     _SSP2STATbits	set	3949
  1012  0000                     _SSP1STATbits	set	4039
  1013  0000                     _PIE3bits	set	4003
  1014  0000                     _PIE1bits	set	3997
  1015  0000                     _PIR3bits	set	4004
  1016  0000                     _PIR1bits	set	3998
  1017  0000                     _IPR3bits	set	4005
  1018  0000                     _IPR1bits	set	3999
  1019  0000                     _PORTFbits	set	3973
  1020  0000                     _SSP2CON2	set	3947
  1021  0000                     _SSP1CON2	set	4037
  1022  0000                     _SSP2BUF	set	3951
  1023  0000                     _SSP2CON1	set	3948
  1024  0000                     _SSP2STAT	set	3949
  1025  0000                     _SSP1BUF	set	4041
  1026  0000                     _SSP1CON1	set	4038
  1027  0000                     _SSP1STAT	set	4039
  1028  0000                     _LATG	set	3983
  1029  0000                     _LATF	set	3982
  1030  0000                     _LATE	set	3981
  1031  0000                     _LATD	set	3980
  1032  0000                     _LATC	set	3979
  1033  0000                     _LATB	set	3978
  1034  0000                     _LATA	set	3977
  1035  0000                     _TRISG	set	3992
  1036  0000                     _TRISF	set	3991
  1037  0000                     _TRISE	set	3990
  1038  0000                     _TRISD	set	3989
  1039  0000                     _TRISC	set	3988
  1040  0000                     _TRISB	set	3987
  1041  0000                     _TRISA	set	3986
  1042  0000                     _PORTG	set	3974
  1043  0000                     _PORTF	set	3973
  1044  0000                     _PORTE	set	3972
  1045  0000                     _PORTD	set	3971
  1046  0000                     _PORTC	set	3970
  1047  0000                     _PORTB	set	3969
  1048  0000                     _PORTA	set	3968
  1049  00FF59                     STR_4:
  1050  00FF59  43                 	db	67	;'C'
  1051  00FF5A  6C                 	db	108	;'l'
  1052  00FF5B  6F                 	db	111	;'o'
  1053  00FF5C  73                 	db	115	;'s'
  1054  00FF5D  65                 	db	101	;'e'
  1055  00FF5E  73                 	db	115	;'s'
  1056  00FF5F  74                 	db	116	;'t'
  1057  00FF60  20                 	db	32
  1058  00FF61  57                 	db	87	;'W'
  1059  00FF62  61                 	db	97	;'a'
  1060  00FF63  6C                 	db	108	;'l'
  1061  00FF64  6C                 	db	108	;'l'
  1062  00FF65  3A                 	db	58	;':'
  1063  00FF66  25                 	db	37
  1064  00FF67  75                 	db	117	;'u'
  1065  00FF68  0A                 	db	10
  1066  00FF69  43                 	db	67	;'C'
  1067  00FF6A  6C                 	db	108	;'l'
  1068  00FF6B  6F                 	db	111	;'o'
  1069  00FF6C  73                 	db	115	;'s'
  1070  00FF6D  65                 	db	101	;'e'
  1071  00FF6E  73                 	db	115	;'s'
  1072  00FF6F  74                 	db	116	;'t'
  1073  00FF70  20                 	db	32
  1074  00FF71  41                 	db	65	;'A'
  1075  00FF72  6E                 	db	110	;'n'
  1076  00FF73  67                 	db	103	;'g'
  1077  00FF74  6C                 	db	108	;'l'
  1078  00FF75  65                 	db	101	;'e'
  1079  00FF76  3A                 	db	58	;':'
  1080  00FF77  25                 	db	37
  1081  00FF78  64                 	db	100	;'d'
  1082  00FF79  0A                 	db	10
  1083  00FF7A  4C                 	db	76	;'L'
  1084  00FF7B  65                 	db	101	;'e'
  1085  00FF7C  66                 	db	102	;'f'
  1086  00FF7D  74                 	db	116	;'t'
  1087  00FF7E  20                 	db	32
  1088  00FF7F  42                 	db	66	;'B'
  1089  00FF80  75                 	db	117	;'u'
  1090  00FF81  6D                 	db	109	;'m'
  1091  00FF82  70                 	db	112	;'p'
  1092  00FF83  3A                 	db	58	;':'
  1093  00FF84  25                 	db	37
  1094  00FF85  75                 	db	117	;'u'
  1095  00FF86  0A                 	db	10
  1096  00FF87  52                 	db	82	;'R'
  1097  00FF88  69                 	db	105	;'i'
  1098  00FF89  67                 	db	103	;'g'
  1099  00FF8A  68                 	db	104	;'h'
  1100  00FF8B  74                 	db	116	;'t'
  1101  00FF8C  42                 	db	66	;'B'
  1102  00FF8D  75                 	db	117	;'u'
  1103  00FF8E  6D                 	db	109	;'m'
  1104  00FF8F  70                 	db	112	;'p'
  1105  00FF90  3A                 	db	58	;':'
  1106  00FF91  25                 	db	37
  1107  00FF92  75                 	db	117	;'u'
  1108  00FF93  0A                 	db	10
  1109  00FF94  00                 	db	0
  1110  00FF95                     STR_8:
  1111  00FF95  54                 	db	84	;'T'
  1112  00FF96  6F                 	db	111	;'o'
  1113  00FF97  74                 	db	116	;'t'
  1114  00FF98  61                 	db	97	;'a'
  1115  00FF99  6C                 	db	108	;'l'
  1116  00FF9A  20                 	db	32
  1117  00FF9B  44                 	db	68	;'D'
  1118  00FF9C  69                 	db	105	;'i'
  1119  00FF9D  73                 	db	115	;'s'
  1120  00FF9E  74                 	db	116	;'t'
  1121  00FF9F  61                 	db	97	;'a'
  1122  00FFA0  6E                 	db	110	;'n'
  1123  00FFA1  63                 	db	99	;'c'
  1124  00FFA2  65                 	db	101	;'e'
  1125  00FFA3  3A                 	db	58	;':'
  1126  00FFA4  25                 	db	37
  1127  00FFA5  75                 	db	117	;'u'
  1128  00FFA6  0A                 	db	10
  1129  00FFA7  4C                 	db	76	;'L'
  1130  00FFA8  65                 	db	101	;'e'
  1131  00FFA9  66                 	db	102	;'f'
  1132  00FFAA  74                 	db	116	;'t'
  1133  00FFAB  20                 	db	32
  1134  00FFAC  42                 	db	66	;'B'
  1135  00FFAD  75                 	db	117	;'u'
  1136  00FFAE  6D                 	db	109	;'m'
  1137  00FFAF  70                 	db	112	;'p'
  1138  00FFB0  3A                 	db	58	;':'
  1139  00FFB1  25                 	db	37
  1140  00FFB2  75                 	db	117	;'u'
  1141  00FFB3  0A                 	db	10
  1142  00FFB4  52                 	db	82	;'R'
  1143  00FFB5  69                 	db	105	;'i'
  1144  00FFB6  67                 	db	103	;'g'
  1145  00FFB7  68                 	db	104	;'h'
  1146  00FFB8  74                 	db	116	;'t'
  1147  00FFB9  20                 	db	32
  1148  00FFBA  42                 	db	66	;'B'
  1149  00FFBB  75                 	db	117	;'u'
  1150  00FFBC  6D                 	db	109	;'m'
  1151  00FFBD  70                 	db	112	;'p'
  1152  00FFBE  3A                 	db	58	;':'
  1153  00FFBF  25                 	db	37
  1154  00FFC0  75                 	db	117	;'u'
  1155  00FFC1  0A                 	db	10
  1156  00FFC2  00                 	db	0
  1157  00FFC3                     STR_15:
  1158  00FFC3  20                 	db	32
  1159  00FFC4  20                 	db	32
  1160  00FFC5  20                 	db	32
  1161  00FFC6  20                 	db	32
  1162  00FFC7  20                 	db	32
  1163  00FFC8  20                 	db	32
  1164  00FFC9  20                 	db	32
  1165  00FFCA  20                 	db	32
  1166  00FFCB  20                 	db	32
  1167  00FFCC  20                 	db	32
  1168  00FFCD  20                 	db	32
  1169  00FFCE  20                 	db	32
  1170  00FFCF  20                 	db	32
  1171  00FFD0  20                 	db	32
  1172  00FFD1  20                 	db	32
  1173  00FFD2  20                 	db	32
  1174  00FFD3  20                 	db	32
  1175  00FFD4  20                 	db	32
  1176  00FFD5  20                 	db	32
  1177  00FFD6  0A                 	db	10
  1178  00FFD7  00                 	db	0
  1179  00FFD8                     STR_14:
  1180  00FFD8  50                 	db	80	;'P'
  1181  00FFD9  6C                 	db	108	;'l'
  1182  00FFDA  65                 	db	101	;'e'
  1183  00FFDB  61                 	db	97	;'a'
  1184  00FFDC  73                 	db	115	;'s'
  1185  00FFDD  65                 	db	101	;'e'
  1186  00FFDE  20                 	db	32
  1187  00FFDF  73                 	db	115	;'s'
  1188  00FFE0  65                 	db	101	;'e'
  1189  00FFE1  6C                 	db	108	;'l'
  1190  00FFE2  65                 	db	101	;'e'
  1191  00FFE3  63                 	db	99	;'c'
  1192  00FFE4  74                 	db	116	;'t'
  1193  00FFE5  20                 	db	32
  1194  00FFE6  6D                 	db	109	;'m'
  1195  00FFE7  6F                 	db	111	;'o'
  1196  00FFE8  64                 	db	100	;'d'
  1197  00FFE9  65                 	db	101	;'e'
  1198  00FFEA  2E                 	db	46
  1199  00FFEB  0A                 	db	10
  1200  00FFEC  00                 	db	0
  1201  00FFED                     STR_2:
  1202  00FFED  44                 	db	68	;'D'
  1203  00FFEE  69                 	db	105	;'i'
  1204  00FFEF  73                 	db	115	;'s'
  1205  00FFF0  74                 	db	116	;'t'
  1206  00FFF1  61                 	db	97	;'a'
  1207  00FFF2  6E                 	db	110	;'n'
  1208  00FFF3  63                 	db	99	;'c'
  1209  00FFF4  65                 	db	101	;'e'
  1210  00FFF5  3A                 	db	58	;':'
  1211  00FFF6  20                 	db	32
  1212  00FFF7  25                 	db	37
  1213  00FFF8  64                 	db	100	;'d'
  1214  00FFF9  0A                 	db	10
  1215  00FFFA  00                 	db	0
  1216  00FFFB                     STR_1:
  1217  00FFFB  25                 	db	37
  1218  00FFFC  63                 	db	99	;'c'
  1219  00FFFD  00                 	db	0
  1220  0000                     
  1221                           ; #config settings
  1222  00FFFE  00                 	db	0	; dummy byte at the end
  1223  0000                     
  1224                           	psect	cinit
  1225  014B96                     __pcinit:
  1226                           	opt stack 0
  1227  014B96                     start_initialization:
  1228                           	opt stack 0
  1229  014B96                     __initialization:
  1230                           	opt stack 0
  1231                           
  1232                           ; Initialize objects allocated to BANK3 (14 bytes)
  1233                           ; load TBLPTR registers with __pidataBANK3
  1234  014B96  0E6E               	movlw	low __pidataBANK3
  1235  014B98  6EF6               	movwf	tblptrl,c
  1236  014B9A  0E6C               	movlw	high __pidataBANK3
  1237  014B9C  6EF7               	movwf	tblptrh,c
  1238  014B9E  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1239  014BA0  6EF8               	movwf	tblptru,c
  1240  014BA2  EE03  F0F2         	lfsr	0,__pdataBANK3
  1241  014BA6  EE10 F00E          	lfsr	1,14
  1242  014BAA                     copy_data0:
  1243  014BAA  0009               	tblrd		*+
  1244  014BAC  CFF5 FFEE          	movff	tablat,postinc0
  1245  014BB0  50E5               	movf	postdec1,w,c
  1246  014BB2  50E1               	movf	fsr1l,w,c
  1247  014BB4  E1FA               	bnz	copy_data0
  1248                           
  1249                           ; Initialize objects allocated to BANK0 (7 bytes)
  1250                           ; load TBLPTR registers with __pidataBANK0
  1251  014BB6  0E2A               	movlw	low __pidataBANK0
  1252  014BB8  6EF6               	movwf	tblptrl,c
  1253  014BBA  0E6D               	movlw	high __pidataBANK0
  1254  014BBC  6EF7               	movwf	tblptrh,c
  1255  014BBE  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1256  014BC0  6EF8               	movwf	tblptru,c
  1257  014BC2  EE00  F0F9         	lfsr	0,__pdataBANK0
  1258  014BC6  EE10 F007          	lfsr	1,7
  1259  014BCA                     copy_data1:
  1260  014BCA  0009               	tblrd		*+
  1261  014BCC  CFF5 FFEE          	movff	tablat,postinc0
  1262  014BD0  50E5               	movf	postdec1,w,c
  1263  014BD2  50E1               	movf	fsr1l,w,c
  1264  014BD4  E1FA               	bnz	copy_data1
  1265                           
  1266                           ; Initialize objects allocated to COMRAM (10 bytes)
  1267                           ; load TBLPTR registers with __pidataCOMRAM
  1268  014BD6  0EF4               	movlw	low __pidataCOMRAM
  1269  014BD8  6EF6               	movwf	tblptrl,c
  1270  014BDA  0E6C               	movlw	high __pidataCOMRAM
  1271  014BDC  6EF7               	movwf	tblptrh,c
  1272  014BDE  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1273  014BE0  6EF8               	movwf	tblptru,c
  1274  014BE2  EE00  F047         	lfsr	0,__pdataCOMRAM
  1275  014BE6  EE10 F00A          	lfsr	1,10
  1276  014BEA                     copy_data2:
  1277  014BEA  0009               	tblrd		*+
  1278  014BEC  CFF5 FFEE          	movff	tablat,postinc0
  1279  014BF0  50E5               	movf	postdec1,w,c
  1280  014BF2  50E1               	movf	fsr1l,w,c
  1281  014BF4  E1FA               	bnz	copy_data2
  1282                           
  1283                           ; Clear objects allocated to BIGRAM (300 bytes)
  1284  014BF6  EE04  F0B4         	lfsr	0,__pbssBIGRAM
  1285  014BFA  EE11 F02C          	lfsr	1,300
  1286  014BFE                     clear_0:
  1287  014BFE  6AEE               	clrf	postinc0,c
  1288  014C00  50E5               	movf	postdec1,w,c
  1289  014C02  50E1               	movf	fsr1l,w,c
  1290  014C04  E1FC               	bnz	clear_0
  1291  014C06  50E2               	movf	fsr1h,w,c
  1292  014C08  E1FA               	bnz	clear_0
  1293                           
  1294                           ; Clear objects allocated to BANK4 (170 bytes)
  1295  014C0A  EE04  F000         	lfsr	0,__pbssBANK4
  1296  014C0E  0EAA               	movlw	170
  1297  014C10                     clear_1:
  1298  014C10  6AEE               	clrf	postinc0,c
  1299  014C12  06E8               	decf	wreg,f,c
  1300  014C14  E1FD               	bnz	clear_1
  1301                           
  1302                           ; Clear objects allocated to BANK3 (242 bytes)
  1303  014C16  EE03  F000         	lfsr	0,__pbssBANK3
  1304  014C1A  0EF2               	movlw	242
  1305  014C1C                     clear_2:
  1306  014C1C  6AEE               	clrf	postinc0,c
  1307  014C1E  06E8               	decf	wreg,f,c
  1308  014C20  E1FD               	bnz	clear_2
  1309                           
  1310                           ; Clear objects allocated to BANK0 (85 bytes)
  1311  014C22  EE00  F060         	lfsr	0,__pbssBANK0
  1312  014C26  0E55               	movlw	85
  1313  014C28                     clear_3:
  1314  014C28  6AEE               	clrf	postinc0,c
  1315  014C2A  06E8               	decf	wreg,f,c
  1316  014C2C  E1FD               	bnz	clear_3
  1317                           
  1318                           ; Clear objects allocated to COMRAM (30 bytes)
  1319  014C2E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1320  014C32  0E1E               	movlw	30
  1321  014C34                     clear_4:
  1322  014C34  6AEE               	clrf	postinc0,c
  1323  014C36  06E8               	decf	wreg,f,c
  1324  014C38  E1FD               	bnz	clear_4
  1325  014C3A                     end_of_initialization:
  1326                           	opt stack 0
  1327  014C3A                     __end_of__initialization:
  1328                           	opt stack 0
  1329  014C3A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1330  014C3C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1331  014C3E  0100               	movlb	0
  1332  014C40  EFEA  F09F         	goto	_main	;jump to C main() function
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           
  1343                           	psect	bssCOMRAM
  1344  000029                     __pbssCOMRAM:
  1345                           	opt stack 0
  1346  000029                     _COUNTER:
  1347                           	opt stack 0
  1348  000029                     	ds	2
  1349  00002B                     HMI_GRender@a:
  1350                           	opt stack 0
  1351  00002B                     	ds	2
  1352  00002D                     SPI_Send9@dat:
  1353                           	opt stack 0
  1354  00002D                     	ds	2
  1355  00002F                     _iRDropCaster:
  1356                           	opt stack 0
  1357  00002F                     	ds	1
  1358  000030                     _iRVirtualWall:
  1359                           	opt stack 0
  1360  000030                     	ds	1
  1361  000031                     _iRCliffR:
  1362                           	opt stack 0
  1363  000031                     	ds	1
  1364  000032                     _iRCliffFR:
  1365                           	opt stack 0
  1366  000032                     	ds	1
  1367  000033                     _iRCliffFL:
  1368                           	opt stack 0
  1369  000033                     	ds	1
  1370  000034                     _iRCliffL:
  1371                           	opt stack 0
  1372  000034                     	ds	1
  1373  000035                     _iRWall:
  1374                           	opt stack 0
  1375  000035                     	ds	1
  1376  000036                     _iRBumpDrop:
  1377                           	opt stack 0
  1378  000036                     	ds	1
  1379  000037                     _iRScriptIndex:
  1380                           	opt stack 0
  1381  000037                     	ds	1
  1382  000038                     _u:
  1383                           	opt stack 0
  1384  000038                     	ds	1
  1385  000039                     _j:
  1386                           	opt stack 0
  1387  000039                     	ds	1
  1388  00003A                     _i:
  1389                           	opt stack 0
  1390  00003A                     	ds	1
  1391  00003B                     rand@screw:
  1392                           	opt stack 0
  1393  00003B                     	ds	1
  1394  00003C                     _ADC_Initialised:
  1395                           	opt stack 0
  1396  00003C                     	ds	1
  1397  00003D                     OutSeg@a:
  1398                           	opt stack 0
  1399  00003D                     	ds	1
  1400  00003E                     OutSeg@segset:
  1401                           	opt stack 0
  1402  00003E                     	ds	1
  1403  00003F                     OutSeg@cur:
  1404                           	opt stack 0
  1405  00003F                     	ds	1
  1406  000040                     _I2C1T:
  1407                           	opt stack 0
  1408  000040                     	ds	7
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1h	equ	0xFE2
  1417                           fsr1l	equ	0xFE1
  1418                           
  1419                           	psect	dataCOMRAM
  1420  000047                     __pdataCOMRAM:
  1421                           	opt stack 0
  1422  000047                     _gCursor:
  1423                           	opt stack 0
  1424  000047                     	ds	4
  1425  00004B                     _Bus_State:
  1426                           	opt stack 0
  1427  00004B                     	ds	1
  1428  00004C                     	ds	1
  1429  00004D                     	ds	1
  1430  00004E                     	ds	1
  1431  00004F                     _l:
  1432                           	opt stack 0
  1433  00004F                     	ds	1
  1434  000050                     _w:
  1435                           	opt stack 0
  1436  000050                     	ds	1
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1h	equ	0xFE2
  1445                           fsr1l	equ	0xFE1
  1446                           
  1447                           	psect	bssBANK0
  1448  000060                     __pbssBANK0:
  1449                           	opt stack 0
  1450  000060                     _gISR:
  1451                           	opt stack 0
  1452  000060                     	ds	3
  1453  000063                     _lQueue:
  1454                           	opt stack 0
  1455  000063                     	ds	3
  1456  000066                     _lStepFunction:
  1457                           	opt stack 0
  1458  000066                     	ds	3
  1459  000069                     _dummy1:
  1460                           	opt stack 0
  1461  000069                     	ds	2
  1462  00006B                     _dist:
  1463                           	opt stack 0
  1464  00006B                     	ds	2
  1465  00006D                     _angleToClosestWall:
  1466                           	opt stack 0
  1467  00006D                     	ds	2
  1468  00006F                     _IRValue:
  1469                           	opt stack 0
  1470  00006F                     	ds	2
  1471  000071                     _Stepstomin:
  1472                           	opt stack 0
  1473  000071                     	ds	2
  1474  000073                     _StepRotate:
  1475                           	opt stack 0
  1476  000073                     	ds	2
  1477  000075                     _mode:
  1478                           	opt stack 0
  1479  000075                     	ds	2
  1480  000077                     _angleTotal:
  1481                           	opt stack 0
  1482  000077                     	ds	2
  1483  000079                     _distanceTotal:
  1484                           	opt stack 0
  1485  000079                     	ds	2
  1486  00007B                     _iRAngle:
  1487                           	opt stack 0
  1488  00007B                     	ds	2
  1489  00007D                     _iRDistance:
  1490                           	opt stack 0
  1491  00007D                     	ds	2
  1492  00007F                     _pShiftVal:
  1493                           	opt stack 0
  1494  00007F                     	ds	2
  1495  000081                     _val:
  1496                           	opt stack 0
  1497  000081                     	ds	2
  1498  000083                     _lMotor:
  1499                           	opt stack 0
  1500  000083                     	ds	2
  1501  000085                     _lCurrent:
  1502                           	opt stack 0
  1503  000085                     	ds	2
  1504  000087                     _gBackcolour:
  1505                           	opt stack 0
  1506  000087                     	ds	2
  1507  000089                     _correctOrientation:
  1508                           	opt stack 0
  1509  000089                     	ds	1
  1510  00008A                     _iRDropLeft:
  1511                           	opt stack 0
  1512  00008A                     	ds	1
  1513  00008B                     _iRDropRight:
  1514                           	opt stack 0
  1515  00008B                     	ds	1
  1516  00008C                     _iRBumpLeft:
  1517                           	opt stack 0
  1518  00008C                     	ds	1
  1519  00008D                     _iRBumpRight:
  1520                           	opt stack 0
  1521  00008D                     	ds	1
  1522  00008E                     Event_TestButton@j:
  1523                           	opt stack 0
  1524  00008E                     	ds	1
  1525  00008F                     Timer2_Init@PRE:
  1526                           	opt stack 0
  1527  00008F                     	ds	1
  1528  000090                     Timer2_Init@INDEX:
  1529                           	opt stack 0
  1530  000090                     	ds	1
  1531  000091                     Timer0_Init@PRE:
  1532                           	opt stack 0
  1533  000091                     	ds	1
  1534  000092                     _INDEX:
  1535                           	opt stack 0
  1536  000092                     	ds	1
  1537  000093                     _lBufferY:
  1538                           	opt stack 0
  1539  000093                     	ds	1
  1540  000094                     _lBufferX:
  1541                           	opt stack 0
  1542  000094                     	ds	1
  1543  000095                     _clearall:
  1544                           	opt stack 0
  1545  000095                     	ds	1
  1546  000096                     _PortD:
  1547                           	opt stack 0
  1548  000096                     	ds	10
  1549  0000A0                     _PortC:
  1550                           	opt stack 0
  1551  0000A0                     	ds	10
  1552  0000AA                     _Stepper:
  1553                           	opt stack 0
  1554  0000AA                     	ds	6
  1555  0000B0                     _ADC_AN0:
  1556                           	opt stack 0
  1557  0000B0                     	ds	5
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           postdec1	equ	0xFE5
  1565                           fsr1h	equ	0xFE2
  1566                           fsr1l	equ	0xFE1
  1567                           
  1568                           	psect	dataBANK0
  1569  0000F9                     __pdataBANK0:
  1570                           	opt stack 0
  1571  0000F9                     _TimerX:
  1572                           	opt stack 0
  1573  0000F9                     	ds	2
  1574  0000FB                     _MinDist:
  1575                           	opt stack 0
  1576  0000FB                     	ds	2
  1577  0000FD                     _gForecolour:
  1578                           	opt stack 0
  1579  0000FD                     	ds	2
  1580  0000FF                     _change:
  1581                           	opt stack 0
  1582  0000FF                     	ds	1
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postdec1	equ	0xFE5
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           
  1593                           	psect	bssBANK3
  1594  000300                     __pbssBANK3:
  1595                           	opt stack 0
  1596  000300                     _lCBuffer:
  1597                           	opt stack 0
  1598  000300                     	ds	30
  1599  00031E                     _iRAngleSS:
  1600                           	opt stack 0
  1601  00031E                     	ds	4
  1602  000322                     _iRDistanceSS:
  1603                           	opt stack 0
  1604  000322                     	ds	4
  1605  000326                     Timer2_Init@DIV:
  1606                           	opt stack 0
  1607  000326                     	ds	4
  1608  00032A                     Timer0_Init@DIV:
  1609                           	opt stack 0
  1610  00032A                     	ds	4
  1611  00032E                     _I2C2_More:
  1612                           	opt stack 0
  1613  00032E                     	ds	3
  1614  000331                     _I2C1_More:
  1615                           	opt stack 0
  1616  000331                     	ds	3
  1617  000334                     _I2C2_Done:
  1618                           	opt stack 0
  1619  000334                     	ds	3
  1620  000337                     _I2C1_Done:
  1621                           	opt stack 0
  1622  000337                     	ds	3
  1623  00033A                     _iRValue:
  1624                           	opt stack 0
  1625  00033A                     	ds	2
  1626  00033C                     _angle:
  1627                           	opt stack 0
  1628  00033C                     	ds	2
  1629  00033E                     _HMIBoard:
  1630                           	opt stack 0
  1631  00033E                     	ds	58
  1632  000378                     _SPI1:
  1633                           	opt stack 0
  1634  000378                     	ds	11
  1635  000383                     _SPI2:
  1636                           	opt stack 0
  1637  000383                     	ds	11
  1638  00038E                     _DIPSwitch:
  1639                           	opt stack 0
  1640  00038E                     	ds	10
  1641  000398                     _TestButton:
  1642                           	opt stack 0
  1643  000398                     	ds	10
  1644  0003A2                     _PortG:
  1645                           	opt stack 0
  1646  0003A2                     	ds	10
  1647  0003AC                     _PortE:
  1648                           	opt stack 0
  1649  0003AC                     	ds	10
  1650  0003B6                     _PortB:
  1651                           	opt stack 0
  1652  0003B6                     	ds	10
  1653  0003C0                     _PortA:
  1654                           	opt stack 0
  1655  0003C0                     	ds	10
  1656  0003CA                     _PortF:
  1657                           	opt stack 0
  1658  0003CA                     	ds	10
  1659  0003D4                     _I2C2T:
  1660                           	opt stack 0
  1661  0003D4                     	ds	7
  1662  0003DB                     _ADC_AN3:
  1663                           	opt stack 0
  1664  0003DB                     	ds	5
  1665  0003E0                     _ADC_AN2:
  1666                           	opt stack 0
  1667  0003E0                     	ds	5
  1668  0003E5                     _ADC_AN1:
  1669                           	opt stack 0
  1670  0003E5                     	ds	5
  1671  0003EA                     LCD_DrawRectangle@p4:
  1672                           	opt stack 0
  1673  0003EA                     	ds	4
  1674  0003EE                     LCD_DrawRectangle@p2:
  1675                           	opt stack 0
  1676  0003EE                     	ds	4
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1h	equ	0xFE2
  1685                           fsr1l	equ	0xFE1
  1686                           
  1687                           	psect	dataBANK3
  1688  0003F2                     __pdataBANK3:
  1689                           	opt stack 0
  1690  0003F2                     Console_Render@F6956:
  1691                           	opt stack 0
  1692  0003F2                     	ds	4
  1693  0003F6                     _gLineSize:
  1694                           	opt stack 0
  1695  0003F6                     	ds	4
  1696  0003FA                     _gCharSize:
  1697                           	opt stack 0
  1698  0003FA                     	ds	4
  1699  0003FE                     _corner:
  1700                           	opt stack 0
  1701  0003FE                     	ds	2
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           postdec1	equ	0xFE5
  1709                           fsr1h	equ	0xFE2
  1710                           fsr1l	equ	0xFE1
  1711                           
  1712                           	psect	bssBANK4
  1713  000400                     __pbssBANK4:
  1714                           	opt stack 0
  1715  000400                     _iRScriptStack:
  1716                           	opt stack 0
  1717  000400                     	ds	100
  1718  000464                     Console_MakeField@Fill:
  1719                           	opt stack 0
  1720  000464                     	ds	70
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1h	equ	0xFE2
  1729                           fsr1l	equ	0xFE1
  1730                           
  1731                           	psect	bssBIGRAM
  1732  0004B4                     __pbssBIGRAM:
  1733                           	opt stack 0
  1734  0004B4                     _lBuffer:
  1735                           	opt stack 0
  1736  0004B4                     	ds	300
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1h	equ	0xFE2
  1745                           fsr1l	equ	0xFE1
  1746                           
  1747                           	psect	cstackBANK4
  1748  0004AA                     __pcstackBANK4:
  1749                           	opt stack 0
  1750  0004AA                     ??_findClosestWall:
  1751  0004AA                     ??_mode1:
  1752                           
  1753                           ; 1 bytes @ 0x0
  1754  0004AA                     	ds	2
  1755  0004AC                     _findClosestWall$15616:
  1756                           	opt stack 0
  1757  0004AC                     _mode1$15618:
  1758                           	opt stack 0
  1759                           
  1760                           ; 4 bytes @ 0x2
  1761  0004AC                     	ds	4
  1762  0004B0                     mode1@moveto:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x6
  1766  0004B0                     	ds	2
  1767  0004B2                     ??_main:
  1768                           
  1769                           ; 1 bytes @ 0x8
  1770  0004B2                     	ds	2
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postdec1	equ	0xFE5
  1778                           fsr1h	equ	0xFE2
  1779                           fsr1l	equ	0xFE1
  1780                           
  1781                           	psect	cstackBANK2
  1782  000200                     __pcstackBANK2:
  1783                           	opt stack 0
  1784  000200                     irobot_query_and_update@TXArray:
  1785                           	opt stack 0
  1786                           
  1787                           ; 256 bytes @ 0x0
  1788  000200                     	ds	256
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postdec1	equ	0xFE5
  1796                           fsr1h	equ	0xFE2
  1797                           fsr1l	equ	0xFE1
  1798                           
  1799                           	psect	cstackBANK1
  1800  000100                     __pcstackBANK1:
  1801                           	opt stack 0
  1802  000100                     ??_Port_Init:
  1803  000100                     Button_Init@pInput:
  1804                           	opt stack 0
  1805  000100                     _measureAndDisplayDistance$15617:
  1806                           	opt stack 0
  1807  000100                     irobot_query_and_update@RXArray:
  1808                           	opt stack 0
  1809                           
  1810                           ; 256 bytes @ 0x0
  1811  000100                     	ds	2
  1812  000102                     Button_Init@pThreshold:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x2
  1816  000102                     	ds	2
  1817  000104                     correct_distance@_d1:
  1818                           	opt stack 0
  1819  000104                     Button_Init@pInitIO:
  1820                           	opt stack 0
  1821                           
  1822                           ; 3 bytes @ 0x4
  1823  000104                     	ds	2
  1824  000106                     correct_distance@_d2:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x6
  1828  000106                     	ds	1
  1829  000107                     Button_Init@pGetState:
  1830                           	opt stack 0
  1831                           
  1832                           ; 3 bytes @ 0x7
  1833  000107                     	ds	1
  1834  000108                     correct_distance@_d3:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x8
  1838  000108                     	ds	2
  1839  00010A                     Button_Init@pFunction:
  1840                           	opt stack 0
  1841                           
  1842                           ; 3 bytes @ 0xA
  1843  00010A                     	ds	246
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854                           	psect	cstackBANK0
  1855  0000B5                     __pcstackBANK0:
  1856                           	opt stack 0
  1857  0000B5                     ??_Console_ClearCursor:
  1858  0000B5                     ??_ADC_SetChannel:
  1859  0000B5                     ??_ADC_ConversionTime:
  1860  0000B5                     ??_ADC_SetupIO:
  1861  0000B5                     ??_sort_iRBumpDrop:
  1862  0000B5                     ?_load_iRScriptStack:
  1863                           	opt stack 0
  1864  0000B5                     ??_Console_Init:
  1865  0000B5                     ??_Console_NewLine:
  1866  0000B5                     ??_Console_FormFeed:
  1867  0000B5                     ??_HMI_SetButton:
  1868  0000B5                     ?_GetPortProperties:
  1869                           	opt stack 0
  1870  0000B5                     ?_GetPortPORT:
  1871                           	opt stack 0
  1872  0000B5                     ?_GetPortTRIS:
  1873                           	opt stack 0
  1874  0000B5                     ?_twos_complement_of:
  1875                           	opt stack 0
  1876  0000B5                     ?___wmul:
  1877                           	opt stack 0
  1878  0000B5                     ?___awdiv:
  1879                           	opt stack 0
  1880  0000B5                     ?___lwdiv:
  1881                           	opt stack 0
  1882  0000B5                     ?___fldiv:
  1883                           	opt stack 0
  1884  0000B5                     ?___lldiv:
  1885                           	opt stack 0
  1886  0000B5                     ?___xxtofl:
  1887                           	opt stack 0
  1888  0000B5                     Mode_Set@pMode:
  1889                           	opt stack 0
  1890  0000B5                     ToSegment@pCHR:
  1891                           	opt stack 0
  1892  0000B5                     HMI_SetBar@pValue:
  1893                           	opt stack 0
  1894  0000B5                     ADC_ClockDivision@pDivide:
  1895                           	opt stack 0
  1896  0000B5                     get_packet_size@packetID:
  1897                           	opt stack 0
  1898  0000B5                     eusart_putch@eusartSendChar:
  1899                           	opt stack 0
  1900  0000B5                     Port_GetPin@pInput:
  1901                           	opt stack 0
  1902  0000B5                     Port_GetQuad@pInput:
  1903                           	opt stack 0
  1904  0000B5                     SPI_DisableISR@pInput:
  1905                           	opt stack 0
  1906  0000B5                     SPI_DCS@pInput:
  1907                           	opt stack 0
  1908  0000B5                     SPI_Send@pInput:
  1909                           	opt stack 0
  1910  0000B5                     Byte_SetBit@pInput:
  1911                           	opt stack 0
  1912  0000B5                     Byte_GetBit@pInput:
  1913                           	opt stack 0
  1914  0000B5                     Byte_SetZone@pInput:
  1915                           	opt stack 0
  1916  0000B5                     Byte_GetZone@pInput:
  1917                           	opt stack 0
  1918  0000B5                     Byte_SetByte@pInput:
  1919                           	opt stack 0
  1920  0000B5                     delay_ms@ms:
  1921                           	opt stack 0
  1922  0000B5                     delay_us@us:
  1923                           	opt stack 0
  1924  0000B5                     reverse@input:
  1925                           	opt stack 0
  1926  0000B5                     twos_complement_of@complementValue:
  1927                           	opt stack 0
  1928  0000B5                     ___wmul@multiplier:
  1929                           	opt stack 0
  1930  0000B5                     ___awdiv@dividend:
  1931                           	opt stack 0
  1932  0000B5                     ___lwdiv@dividend:
  1933                           	opt stack 0
  1934  0000B5                     MXK_Queue@pCallback:
  1935                           	opt stack 0
  1936  0000B5                     Timer0_Start@pFunction:
  1937                           	opt stack 0
  1938  0000B5                     ___lldiv@dividend:
  1939                           	opt stack 0
  1940  0000B5                     ___fldiv@b:
  1941                           	opt stack 0
  1942  0000B5                     ___xxtofl@val:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x0
  1946  0000B5                     	ds	1
  1947  0000B6                     ADC_SetChannel@pChannel:
  1948                           	opt stack 0
  1949  0000B6                     ADC_ClockDivision@reg:
  1950                           	opt stack 0
  1951  0000B6                     ADC_ConversionTime@pCount:
  1952                           	opt stack 0
  1953  0000B6                     rx_assign@packetIDValue:
  1954                           	opt stack 0
  1955  0000B6                     irobot_song_play@songNumber:
  1956                           	opt stack 0
  1957  0000B6                     HMI_SetSegments@pString:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x1
  1961  0000B6                     	ds	1
  1962  0000B7                     GetPortProperties@pInput:
  1963                           	opt stack 0
  1964  0000B7                     GetPortPORT@pInput:
  1965                           	opt stack 0
  1966  0000B7                     GetPortTRIS@pInput:
  1967                           	opt stack 0
  1968  0000B7                     Port_GetPin@pPin:
  1969                           	opt stack 0
  1970  0000B7                     Port_GetQuad@pQuad:
  1971                           	opt stack 0
  1972  0000B7                     SPI_Send@pData:
  1973                           	opt stack 0
  1974  0000B7                     Byte_SetBit@pBit:
  1975                           	opt stack 0
  1976  0000B7                     Byte_GetBit@pBit:
  1977                           	opt stack 0
  1978  0000B7                     Byte_SetZone@pMax:
  1979                           	opt stack 0
  1980  0000B7                     Byte_GetZone@pMax:
  1981                           	opt stack 0
  1982  0000B7                     Byte_SetByte@pValue:
  1983                           	opt stack 0
  1984  0000B7                     Console_Init@x:
  1985                           	opt stack 0
  1986  0000B7                     Console_FormFeed@x:
  1987                           	opt stack 0
  1988  0000B7                     ADC_SetupIO@pChannel:
  1989                           	opt stack 0
  1990  0000B7                     ADC_ClockDivision@unfound:
  1991                           	opt stack 0
  1992  0000B7                     rx_assign@byteNumber:
  1993                           	opt stack 0
  1994  0000B7                     reverse@length:
  1995                           	opt stack 0
  1996  0000B7                     ADC_Start@pInput:
  1997                           	opt stack 0
  1998  0000B7                     ___wmul@multiplicand:
  1999                           	opt stack 0
  2000  0000B7                     ___awdiv@divisor:
  2001                           	opt stack 0
  2002  0000B7                     ___lwdiv@divisor:
  2003                           	opt stack 0
  2004  0000B7                     delay_ms@u:
  2005                           	opt stack 0
  2006  0000B7                     delay_us@u:
  2007                           	opt stack 0
  2008  0000B7                     HMI_SetButton@reindex:
  2009                           	opt stack 0
  2010                           
  2011                           ; 4 bytes @ 0x2
  2012  0000B7                     	ds	1
  2013  0000B8                     ??_Port_GetPin:
  2014  0000B8                     ??_Port_GetQuad:
  2015  0000B8                     ??_Byte_GetBit:
  2016  0000B8                     ??_rx_assign:
  2017  0000B8                     LCD_Write@mode:
  2018                           	opt stack 0
  2019  0000B8                     Byte_SetBit@pValue:
  2020                           	opt stack 0
  2021  0000B8                     Byte_SetZone@pChunk:
  2022                           	opt stack 0
  2023  0000B8                     Byte_GetZone@pChunk:
  2024                           	opt stack 0
  2025  0000B8                     Console_Init@y:
  2026                           	opt stack 0
  2027  0000B8                     Console_FormFeed@y:
  2028                           	opt stack 0
  2029  0000B8                     OutSeg@pSegment:
  2030                           	opt stack 0
  2031  0000B8                     ADC_SetupIO@MASK:
  2032                           	opt stack 0
  2033  0000B8                     Motor_Move@pMotor:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x3
  2037  0000B8                     	ds	1
  2038  0000B9                     ??_Byte_SetBit:
  2039  0000B9                     ??_Console_IncrementCursor:
  2040  0000B9                     ??_OutSeg:
  2041  0000B9                     ??_ADC_Start:
  2042  0000B9                     ??___xxtofl:
  2043  0000B9                     LCD_Write@value:
  2044                           	opt stack 0
  2045  0000B9                     Byte_GetBit@Output:
  2046                           	opt stack 0
  2047  0000B9                     Byte_SetZone@pChunkSize:
  2048                           	opt stack 0
  2049  0000B9                     Byte_GetZone@pChunkSize:
  2050                           	opt stack 0
  2051  0000B9                     reverse@tempVar:
  2052                           	opt stack 0
  2053  0000B9                     ___awdiv@counter:
  2054                           	opt stack 0
  2055  0000B9                     ___lwdiv@counter:
  2056                           	opt stack 0
  2057  0000B9                     HMI_SetSegments@in:
  2058                           	opt stack 0
  2059  0000B9                     ADC_Init@pInput:
  2060                           	opt stack 0
  2061  0000B9                     ___wmul@product:
  2062                           	opt stack 0
  2063  0000B9                     ___lldiv@divisor:
  2064                           	opt stack 0
  2065  0000B9                     ___fldiv@a:
  2066                           	opt stack 0
  2067                           
  2068                           ; 4 bytes @ 0x4
  2069  0000B9                     	ds	1
  2070  0000BA                     ??_Byte_GetZone:
  2071  0000BA                     ?_Console_MakeField:
  2072                           	opt stack 0
  2073  0000BA                     Set_Addr_Window@ys:
  2074                           	opt stack 0
  2075  0000BA                     Set_Rotation@m:
  2076                           	opt stack 0
  2077  0000BA                     Port_GetPin@Output:
  2078                           	opt stack 0
  2079  0000BA                     Port_GetQuad@Output:
  2080                           	opt stack 0
  2081  0000BA                     Byte_SetZone@pValue:
  2082                           	opt stack 0
  2083  0000BA                     rx_assign@packetID:
  2084                           	opt stack 0
  2085  0000BA                     ___awdiv@sign:
  2086                           	opt stack 0
  2087  0000BA                     LCD_Word_Write@value:
  2088                           	opt stack 0
  2089  0000BA                     reverse@iterator:
  2090                           	opt stack 0
  2091  0000BA                     Motor_Move@pDelta:
  2092                           	opt stack 0
  2093  0000BA                     ___lwdiv@quotient:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x5
  2097  0000BA                     	ds	1
  2098  0000BB                     ?_irobot_query_and_update:
  2099                           	opt stack 0
  2100  0000BB                     ??_Byte_SetZone:
  2101  0000BB                     Set_Addr_Window@xe:
  2102                           	opt stack 0
  2103  0000BB                     Set_Rotation@rotation:
  2104                           	opt stack 0
  2105  0000BB                     Byte_GetZone@MASK:
  2106                           	opt stack 0
  2107  0000BB                     OutSeg@pInput:
  2108                           	opt stack 0
  2109  0000BB                     HMI_SetButton@pValue:
  2110                           	opt stack 0
  2111  0000BB                     ADC_Init@pChannel:
  2112                           	opt stack 0
  2113  0000BB                     MXK_BlockSwitchTo@CUR:
  2114                           	opt stack 0
  2115  0000BB                     MXK_SwitchTo@CUR:
  2116                           	opt stack 0
  2117  0000BB                     ___awdiv@quotient:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x6
  2121  0000BB                     	ds	1
  2122  0000BC                     ??_Console_MakeField:
  2123  0000BC                     ?___lwmod:
  2124                           	opt stack 0
  2125  0000BC                     Set_Addr_Window@ye:
  2126                           	opt stack 0
  2127  0000BC                     Byte_GetZone@Offset:
  2128                           	opt stack 0
  2129  0000BC                     OutSeg@out:
  2130                           	opt stack 0
  2131  0000BC                     HMI_SetButton@v:
  2132                           	opt stack 0
  2133  0000BC                     MXK_BlockSwitchTo@pModule:
  2134                           	opt stack 0
  2135  0000BC                     MXK_SwitchTo@pModule:
  2136                           	opt stack 0
  2137  0000BC                     ___lwmod@dividend:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x7
  2141  0000BC                     	ds	1
  2142  0000BD                     ??___fldiv:
  2143  0000BD                     ??_Console_Tab:
  2144  0000BD                     Set_Addr_Window@xs:
  2145                           	opt stack 0
  2146  0000BD                     Byte_GetZone@Output:
  2147                           	opt stack 0
  2148  0000BD                     ___xxtofl@sign:
  2149                           	opt stack 0
  2150  0000BD                     HMI_Render@a:
  2151                           	opt stack 0
  2152  0000BD                     ___lldiv@quotient:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0x8
  2156  0000BD                     	ds	1
  2157  0000BE                     Byte_SetZone@Offset:
  2158                           	opt stack 0
  2159  0000BE                     ___xxtofl@exp:
  2160                           	opt stack 0
  2161  0000BE                     LCD_Fill@pColour:
  2162                           	opt stack 0
  2163  0000BE                     LCD_FillRectangle@pColour:
  2164                           	opt stack 0
  2165  0000BE                     Byte_GetPair@pInput:
  2166                           	opt stack 0
  2167  0000BE                     Console_MakeField@Index:
  2168                           	opt stack 0
  2169  0000BE                     ___lwmod@divisor:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x9
  2173  0000BE                     	ds	1
  2174  0000BF                     ??_load_iRScriptStack:
  2175  0000BF                     Byte_SetZone@MASK:
  2176                           	opt stack 0
  2177  0000BF                     ___xxtofl@arg:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0xA
  2181  0000BF                     	ds	1
  2182  0000C0                     LCD_Fill@i:
  2183                           	opt stack 0
  2184  0000C0                     Byte_GetPair@pPair:
  2185                           	opt stack 0
  2186  0000C0                     Console_MakeField@pInput:
  2187                           	opt stack 0
  2188  0000C0                     ___lwmod@counter:
  2189                           	opt stack 0
  2190  0000C0                     Byte_SetPair@pInput:
  2191                           	opt stack 0
  2192  0000C0                     Byte_SetQuad@pInput:
  2193                           	opt stack 0
  2194  0000C0                     LCD_FillRectangle@pPoint:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0xB
  2198  0000C0                     	ds	1
  2199  0000C1                     LCD_Fill@j:
  2200                           	opt stack 0
  2201  0000C1                     ___lldiv@counter:
  2202                           	opt stack 0
  2203  0000C1                     ___fldiv@sign:
  2204                           	opt stack 0
  2205  0000C1                     Word_GetPair@pInput:
  2206                           	opt stack 0
  2207  0000C1                     itos@input:
  2208                           	opt stack 0
  2209  0000C1                     Console_MakeField@Column:
  2210                           	opt stack 0
  2211  0000C1                     load_iRScriptStack@loadByte:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0xC
  2215  0000C1                     	ds	1
  2216  0000C2                     Byte_SetPair@pPair:
  2217                           	opt stack 0
  2218  0000C2                     Byte_SetQuad@pQuad:
  2219                           	opt stack 0
  2220  0000C2                     Console_Tab@t:
  2221                           	opt stack 0
  2222  0000C2                     Timer0_Init@pFrequency:
  2223                           	opt stack 0
  2224  0000C2                     Timer2_Init@pFrequency:
  2225                           	opt stack 0
  2226  0000C2                     ___fldiv@rem:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0xD
  2230  0000C2                     	ds	1
  2231  0000C3                     ?___flmul:
  2232                           	opt stack 0
  2233  0000C3                     Byte_SetPair@pValue:
  2234                           	opt stack 0
  2235  0000C3                     Byte_SetQuad@pValue:
  2236                           	opt stack 0
  2237  0000C3                     Word_GetPair@pPair:
  2238                           	opt stack 0
  2239  0000C3                     Console_Tab@i:
  2240                           	opt stack 0
  2241  0000C3                     load_iRScriptStack@bytesToLoad:
  2242                           	opt stack 0
  2243  0000C3                     itos@destination:
  2244                           	opt stack 0
  2245  0000C3                     _Console_MakeField$10974:
  2246                           	opt stack 0
  2247  0000C3                     ___flmul@b:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0xE
  2251  0000C3                     	ds	1
  2252  0000C4                     Console_Tab@c:
  2253                           	opt stack 0
  2254  0000C4                     load_iRScriptStack@i:
  2255                           	opt stack 0
  2256  0000C4                     Port_SetPin@pInput:
  2257                           	opt stack 0
  2258  0000C4                     Port_Set@pInput:
  2259                           	opt stack 0
  2260  0000C4                     SPI_MinSpeed@pInput:
  2261                           	opt stack 0
  2262  0000C4                     SPI_MaxSpeed@pInput:
  2263                           	opt stack 0
  2264  0000C4                     Word_SetPair@pInput:
  2265                           	opt stack 0
  2266  0000C4                     PortProperty_Valid@pInput:
  2267                           	opt stack 0
  2268  0000C4                     LCD_FillRectangle@pSize:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0xF
  2272  0000C4                     	ds	1
  2273  0000C5                     ??_irobot_query_and_update:
  2274  0000C5                     ??_Console_PrintChar:
  2275  0000C5                     Console_MakeField@x:
  2276                           	opt stack 0
  2277  0000C5                     irobot_leds@LEDBit:
  2278                           	opt stack 0
  2279  0000C5                     itos@Data:
  2280                           	opt stack 0
  2281  0000C5                     irobot_move@moveSpeed:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x10
  2285  0000C5                     	ds	1
  2286  0000C6                     ??_Timer2_Init:
  2287  0000C6                     ??_Timer0_Init:
  2288  0000C6                     Port_SetPin@pPin:
  2289                           	opt stack 0
  2290  0000C6                     Port_Set@pValue:
  2291                           	opt stack 0
  2292  0000C6                     Word_SetPair@pPair:
  2293                           	opt stack 0
  2294  0000C6                     PortProperty_Valid@pPinDrive:
  2295                           	opt stack 0
  2296  0000C6                     Console_MakeField@y:
  2297                           	opt stack 0
  2298  0000C6                     irobot_leds@powerColour:
  2299                           	opt stack 0
  2300  0000C6                     ___fldiv@new_exp:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x11
  2304  0000C6                     	ds	1
  2305  0000C7                     ??_Port_Set:
  2306  0000C7                     Port_SetPin@pValue:
  2307                           	opt stack 0
  2308  0000C7                     Word_SetPair@pValue:
  2309                           	opt stack 0
  2310  0000C7                     PortProperty_Valid@pPin:
  2311                           	opt stack 0
  2312  0000C7                     irobot_leds@powerLuminosity:
  2313                           	opt stack 0
  2314  0000C7                     LCD_DrawField@pField:
  2315                           	opt stack 0
  2316  0000C7                     itos@Length:
  2317                           	opt stack 0
  2318  0000C7                     irobot_move@moveTurnRadius:
  2319                           	opt stack 0
  2320  0000C7                     Timer2_Init@RDIV:
  2321                           	opt stack 0
  2322  0000C7                     ___flmul@a:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x12
  2326  0000C7                     	ds	1
  2327  0000C8                     ??_PortProperty_Valid:
  2328  0000C8                     ??_LCD_FillRectangle:
  2329  0000C8                     Port_SetPin@Type:
  2330                           	opt stack 0
  2331  0000C8                     Console_PrintChar@pInput:
  2332                           	opt stack 0
  2333  0000C8                     irobot_leds@isScript:
  2334                           	opt stack 0
  2335  0000C8                     Timer0_Init@pCPUClock:
  2336                           	opt stack 0
  2337  0000C8                     ___fldiv@grs:
  2338                           	opt stack 0
  2339                           
  2340                           ; 4 bytes @ 0x13
  2341  0000C8                     	ds	1
  2342  0000C9                     ??_irobot_move:
  2343  0000C9                     LED_Set@pValue:
  2344                           	opt stack 0
  2345  0000C9                     putch@c:
  2346                           	opt stack 0
  2347  0000C9                     irobot_led_power_on@powerOnColour:
  2348                           	opt stack 0
  2349  0000C9                     Port_TogglePin@pInput:
  2350                           	opt stack 0
  2351  0000C9                     itos@Out:
  2352                           	opt stack 0
  2353  0000C9                     LCD_DrawField@pPoint:
  2354                           	opt stack 0
  2355                           
  2356                           ; 4 bytes @ 0x14
  2357  0000C9                     	ds	1
  2358  0000CA                     ?_printf:
  2359                           	opt stack 0
  2360  0000CA                     LCD_FillRectangle@i:
  2361                           	opt stack 0
  2362  0000CA                     LED_Set@pLED:
  2363                           	opt stack 0
  2364  0000CA                     irobot_query_and_update@packetIDs:
  2365                           	opt stack 0
  2366  0000CA                     printf@f:
  2367                           	opt stack 0
  2368  0000CA                     PortProperty_Valid@Errors:
  2369                           	opt stack 0
  2370                           
  2371                           ; 16 bytes @ 0x15
  2372  0000CA                     	ds	1
  2373  0000CB                     ??___flmul:
  2374  0000CB                     LCD_FillRectangle@j:
  2375                           	opt stack 0
  2376  0000CB                     Port_TogglePin@pPin:
  2377                           	opt stack 0
  2378  0000CB                     HMI_SetNumber@pInput:
  2379                           	opt stack 0
  2380  0000CB                     Timer2_Init@pCPUClock:
  2381                           	opt stack 0
  2382                           
  2383                           ; 4 bytes @ 0x16
  2384  0000CB                     	ds	1
  2385  0000CC                     Port_TogglePin@Value:
  2386                           	opt stack 0
  2387  0000CC                     irobot_query_and_update@streamSize:
  2388                           	opt stack 0
  2389  0000CC                     ___fldiv@bexp:
  2390                           	opt stack 0
  2391  0000CC                     Timer0_Init@DIVIDE:
  2392                           	opt stack 0
  2393                           
  2394                           ; 4 bytes @ 0x17
  2395  0000CC                     	ds	1
  2396  0000CD                     LED_Toggle@pLED:
  2397                           	opt stack 0
  2398  0000CD                     irobot_query_and_update@numberOfPacketRequests:
  2399                           	opt stack 0
  2400  0000CD                     irobot_move@isScript:
  2401                           	opt stack 0
  2402  0000CD                     ___fldiv@aexp:
  2403                           	opt stack 0
  2404  0000CD                     LCD_DrawField@pSize:
  2405                           	opt stack 0
  2406                           
  2407                           ; 4 bytes @ 0x18
  2408  0000CD                     	ds	1
  2409  0000CE                     Event_DIPSwitch@pState:
  2410                           	opt stack 0
  2411  0000CE                     Event_TestButton@pState:
  2412                           	opt stack 0
  2413  0000CE                     irobot_query_and_update@packetVariable:
  2414                           	opt stack 0
  2415  0000CE                     irobot_stop_motion@isScript:
  2416                           	opt stack 0
  2417  0000CE                     irobot_move_straight@straightSpeed:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x19
  2421  0000CE                     	ds	1
  2422  0000CF                     Event_DIPSwitch@Bar:
  2423                           	opt stack 0
  2424  0000CF                     irobot_query_and_update@j:
  2425                           	opt stack 0
  2426  0000CF                     ___flmul@sign:
  2427                           	opt stack 0
  2428  0000CF                     Timer2_Init@DIVIDE:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x1A
  2432  0000CF                     	ds	1
  2433  0000D0                     irobot_query_and_update@startIndex:
  2434                           	opt stack 0
  2435  0000D0                     ___flmul@aexp:
  2436                           	opt stack 0
  2437  0000D0                     Button_Poll@pButton:
  2438                           	opt stack 0
  2439  0000D0                     Motor_Speed@pMotor:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x1B
  2443  0000D0                     	ds	1
  2444  0000D1                     ??_LCD_DrawField:
  2445  0000D1                     irobot_query_and_update@i:
  2446                           	opt stack 0
  2447  0000D1                     ___flmul@grs:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x1C
  2451  0000D1                     	ds	1
  2452  0000D2                     Button_Poll@pIncrement:
  2453                           	opt stack 0
  2454  0000D2                     Motor_Speed@pFrequency:
  2455                           	opt stack 0
  2456  0000D2                     irobot_rotate@rotateAngle:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x1D
  2460  0000D2                     	ds	1
  2461  0000D3                     ??_Button_Poll:
  2462  0000D3                     LCD_DrawField@count:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x1E
  2466  0000D3                     	ds	1
  2467  0000D4                     ??_printf:
  2468  0000D4                     irobot_rotate@rotateSpeed:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x1F
  2472  0000D4                     	ds	1
  2473  0000D5                     LCD_DrawField@xmax:
  2474                           	opt stack 0
  2475  0000D5                     printf@prec:
  2476                           	opt stack 0
  2477  0000D5                     ___flmul@bexp:
  2478                           	opt stack 0
  2479                           
  2480                           ; 1 bytes @ 0x20
  2481  0000D5                     	ds	1
  2482  0000D6                     ??_irobot_rotate:
  2483  0000D6                     LCD_DrawField@ymax:
  2484                           	opt stack 0
  2485  0000D6                     printf@flag:
  2486                           	opt stack 0
  2487  0000D6                     ___flmul@prod:
  2488                           	opt stack 0
  2489                           
  2490                           ; 4 bytes @ 0x21
  2491  0000D6                     	ds	1
  2492  0000D7                     LCD_DrawField@i:
  2493                           	opt stack 0
  2494  0000D7                     Port_Set@TypeRequired:
  2495                           	opt stack 0
  2496  0000D7                     printf@ap:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x22
  2500  0000D7                     	ds	1
  2501  0000D8                     ??_Console_Render:
  2502  0000D8                     Button_Poll@Pin:
  2503                           	opt stack 0
  2504  0000D8                     irobot_rotate@isScript:
  2505                           	opt stack 0
  2506                           
  2507                           ; 1 bytes @ 0x23
  2508  0000D8                     	ds	1
  2509  0000D9                     Port_Set@TypeActual:
  2510                           	opt stack 0
  2511  0000D9                     irobot_rotate@rotateDirection:
  2512                           	opt stack 0
  2513  0000D9                     printf@val:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x24
  2517  0000D9                     	ds	1
  2518  0000DA                     PortProperty_Valid@Pair:
  2519                           	opt stack 0
  2520  0000DA                     Console_Render@temp:
  2521                           	opt stack 0
  2522  0000DA                     ___flmul@temp:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x25
  2526  0000DA                     	ds	1
  2527  0000DB                     Port_Set@Type:
  2528                           	opt stack 0
  2529  0000DB                     printf@c:
  2530                           	opt stack 0
  2531  0000DB                     Port_CheckPairType@pInput:
  2532                           	opt stack 0
  2533  0000DB                     Port_SetPinType@pInput:
  2534                           	opt stack 0
  2535  0000DB                     irobot_rotate@angleTotal:
  2536                           	opt stack 0
  2537  0000DB                     Console_Render@lCursor:
  2538                           	opt stack 0
  2539                           
  2540                           ; 4 bytes @ 0x26
  2541  0000DB                     	ds	1
  2542  0000DC                     ?_ADC_Voltage:
  2543                           	opt stack 0
  2544  0000DC                     ADC_Voltage@pInput:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x27
  2548  0000DC                     	ds	1
  2549  0000DD                     Port_CheckPairType@pPair:
  2550                           	opt stack 0
  2551  0000DD                     Port_SetPinType@pPin:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x28
  2555  0000DD                     	ds	1
  2556  0000DE                     Port_CheckPairType@pDrive:
  2557                           	opt stack 0
  2558  0000DE                     Port_SetPinType@pType:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x29
  2562  0000DE                     	ds	1
  2563  0000DF                     Port_CheckPairType@Pin1:
  2564                           	opt stack 0
  2565  0000DF                     Port_SetPinType@Output:
  2566                           	opt stack 0
  2567  0000DF                     Console_Render@x:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x2A
  2571  0000DF                     	ds	1
  2572  0000E0                     ??_ADC_Voltage:
  2573  0000E0                     Port_CheckPairType@Pin2:
  2574                           	opt stack 0
  2575  0000E0                     Console_Render@y:
  2576                           	opt stack 0
  2577  0000E0                     Port_SetPinType@Props:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x2B
  2581  0000E0                     	ds	1
  2582  0000E1                     Port_CheckPairType@Output:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x2C
  2586  0000E1                     	ds	1
  2587  0000E2                     LED_Init@pLED:
  2588                           	opt stack 0
  2589  0000E2                     Port_CheckPairType@Props:
  2590                           	opt stack 0
  2591  0000E2                     Motor_Init@pMotor:
  2592                           	opt stack 0
  2593  0000E2                     SPI_Init@pClock:
  2594                           	opt stack 0
  2595  0000E2                     ADC_Voltage@max:
  2596                           	opt stack 0
  2597                           
  2598                           ; 4 bytes @ 0x2D
  2599  0000E2                     	ds	2
  2600  0000E4                     Port_CheckQuadType@pInput:
  2601                           	opt stack 0
  2602  0000E4                     Motor_Init@pAddress:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x2F
  2606  0000E4                     	ds	2
  2607  0000E6                     Port_CheckQuadType@pQuad:
  2608                           	opt stack 0
  2609  0000E6                     SPI_Init@pChannel:
  2610                           	opt stack 0
  2611  0000E6                     ADC_Voltage@ref:
  2612                           	opt stack 0
  2613                           
  2614                           ; 4 bytes @ 0x31
  2615  0000E6                     	ds	1
  2616  0000E7                     Port_CheckQuadType@pDrive:
  2617                           	opt stack 0
  2618  0000E7                     SPI_Init@pMode:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x32
  2622  0000E7                     	ds	1
  2623  0000E8                     Port_CheckQuadType@Pair1:
  2624                           	opt stack 0
  2625  0000E8                     SPI_Init@pInput:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x33
  2629  0000E8                     	ds	1
  2630  0000E9                     Port_CheckQuadType@Pair2:
  2631                           	opt stack 0
  2632                           
  2633                           ; 1 bytes @ 0x34
  2634  0000E9                     	ds	1
  2635  0000EA                     ??_LCD_Init:
  2636  0000EA                     Port_CheckQuadType@Output:
  2637                           	opt stack 0
  2638  0000EA                     ADC_Voltage@output:
  2639                           	opt stack 0
  2640                           
  2641                           ; 4 bytes @ 0x35
  2642  0000EA                     	ds	1
  2643  0000EB                     Port_CheckPortType@pInput:
  2644                           	opt stack 0
  2645  0000EB                     Port_SetQuadType@pInput:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x36
  2649  0000EB                     	ds	1
  2650  0000EC                     LCD_Init@i:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x37
  2654  0000EC                     	ds	1
  2655  0000ED                     Port_CheckPortType@pDrive:
  2656                           	opt stack 0
  2657  0000ED                     Port_SetQuadType@pQuad:
  2658                           	opt stack 0
  2659                           
  2660                           ; 1 bytes @ 0x38
  2661  0000ED                     	ds	1
  2662  0000EE                     ?___fltol:
  2663                           	opt stack 0
  2664  0000EE                     Port_CheckPortType@Output:
  2665                           	opt stack 0
  2666  0000EE                     Port_SetQuadType@pType:
  2667                           	opt stack 0
  2668  0000EE                     ___fltol@f1:
  2669                           	opt stack 0
  2670                           
  2671                           ; 4 bytes @ 0x39
  2672  0000EE                     	ds	1
  2673  0000EF                     Port_SetQuadType@Output:
  2674                           	opt stack 0
  2675  0000EF                     Port_SetType@pInput:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x3A
  2679  0000EF                     	ds	1
  2680  0000F0                     HMI_Init@in:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x3B
  2684  0000F0                     	ds	1
  2685  0000F1                     Port_SetType@pType:
  2686                           	opt stack 0
  2687                           
  2688                           ; 1 bytes @ 0x3C
  2689  0000F1                     	ds	1
  2690  0000F2                     ??_Port_SetType:
  2691  0000F2                     ??___fltol:
  2692                           
  2693                           ; 1 bytes @ 0x3D
  2694  0000F2                     	ds	2
  2695  0000F4                     Port_SetType@Output:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x3F
  2699  0000F4                     	ds	1
  2700  0000F5                     Port_Init@pInput:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x40
  2704  0000F5                     	ds	1
  2705  0000F6                     ___fltol@sign1:
  2706                           	opt stack 0
  2707                           
  2708                           ; 1 bytes @ 0x41
  2709  0000F6                     	ds	1
  2710  0000F7                     Port_Init@pPort:
  2711                           	opt stack 0
  2712  0000F7                     ___fltol@exp1:
  2713                           	opt stack 0
  2714                           
  2715                           ; 1 bytes @ 0x42
  2716  0000F7                     	ds	1
  2717  0000F8                     ??_move_and_rotate:
  2718  0000F8                     Port_Init@i:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x43
  2722  0000F8                     	ds	1
  2723  0000F9                     tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           fsr1h	equ	0xFE2
  2731                           fsr1l	equ	0xFE1
  2732                           
  2733                           ; 1 bytes @ 0x44
  2734                           
  2735                           	psect	cstackCOMRAM
  2736  000001                     __pcstackCOMRAM:
  2737                           	opt stack 0
  2738  000001                     i2Byte_SetBit@pInput:
  2739                           	opt stack 0
  2740  000001                     i2Byte_GetZone@pInput:
  2741                           	opt stack 0
  2742  000001                     i2delay_us@us:
  2743                           	opt stack 0
  2744  000001                     i2MXK_Queue@pCallback:
  2745                           	opt stack 0
  2746                           
  2747                           ; 3 bytes @ 0x0
  2748  000001                     	ds	2
  2749  000003                     i2Byte_SetBit@pBit:
  2750                           	opt stack 0
  2751  000003                     i2Byte_GetZone@pMax:
  2752                           	opt stack 0
  2753  000003                     i2delay_us@u:
  2754                           	opt stack 0
  2755                           
  2756                           ; 4 bytes @ 0x2
  2757  000003                     	ds	1
  2758  000004                     i2Byte_SetBit@pValue:
  2759                           	opt stack 0
  2760  000004                     i2Byte_GetZone@pChunk:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x3
  2764  000004                     	ds	1
  2765  000005                     ??i2_Byte_SetBit:
  2766  000005                     i2Byte_GetZone@pChunkSize:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x4
  2770  000005                     	ds	1
  2771  000006                     ??i2_Byte_GetZone:
  2772                           
  2773                           ; 1 bytes @ 0x5
  2774  000006                     	ds	1
  2775  000007                     i2Byte_GetZone@MASK:
  2776                           	opt stack 0
  2777  000007                     i2MXK_SwitchTo@CUR:
  2778                           	opt stack 0
  2779                           
  2780                           ; 1 bytes @ 0x6
  2781  000007                     	ds	1
  2782  000008                     i2Byte_GetZone@Offset:
  2783                           	opt stack 0
  2784  000008                     i2MXK_SwitchTo@pModule:
  2785                           	opt stack 0
  2786                           
  2787                           ; 1 bytes @ 0x7
  2788  000008                     	ds	1
  2789  000009                     i2Byte_GetZone@Output:
  2790                           	opt stack 0
  2791                           
  2792                           ; 1 bytes @ 0x8
  2793  000009                     	ds	1
  2794  00000A                     i2Byte_GetPair@pInput:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x9
  2798  00000A                     	ds	2
  2799  00000C                     i2Byte_GetPair@pPair:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0xB
  2803  00000C                     	ds	1
  2804  00000D                     i2Word_GetPair@pInput:
  2805                           	opt stack 0
  2806                           
  2807                           ; 2 bytes @ 0xC
  2808  00000D                     	ds	2
  2809  00000F                     i2Word_GetPair@pPair:
  2810                           	opt stack 0
  2811                           
  2812                           ; 1 bytes @ 0xE
  2813  00000F                     	ds	1
  2814  000010                     i2Port_SetPin@pInput:
  2815                           	opt stack 0
  2816                           
  2817                           ; 2 bytes @ 0xF
  2818  000010                     	ds	2
  2819  000012                     i2Port_SetPin@pPin:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x11
  2823  000012                     	ds	1
  2824  000013                     i2Port_SetPin@pValue:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x12
  2828  000013                     	ds	1
  2829  000014                     i2Port_SetPin@Type:
  2830                           	opt stack 0
  2831                           
  2832                           ; 1 bytes @ 0x13
  2833  000014                     	ds	1
  2834  000015                     
  2835                           ; 1 bytes @ 0x14
  2836  000015                     	ds	2
  2837  000017                     ??_ISR_Function:
  2838                           
  2839                           ; 1 bytes @ 0x16
  2840  000017                     	ds	18
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           postdec1	equ	0xFE5
  2848                           fsr1h	equ	0xFE2
  2849                           fsr1l	equ	0xFE1
  2850                           
  2851 ;;
  2852 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2853 ;;
  2854 ;; *************** function _main *****************
  2855 ;; Defined at:
  2856 ;;		line 476 in file "main.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;Total ram usage:        2 bytes
  2875 ;; Hardware stack levels required when called:   18
  2876 ;; This function calls:
  2877 ;;		_Console_Render
  2878 ;;		_HMI_Poll
  2879 ;;		_MXK_Dequeue
  2880 ;;		_MXK_Release
  2881 ;;		_MXK_SwitchTo
  2882 ;;		_getMode
  2883 ;;		_init
  2884 ;;		_measureAndDisplayDistance
  2885 ;;		_mode1
  2886 ;;		_mode2
  2887 ;;		_mode3
  2888 ;;		_mode4
  2889 ;;		_printf
  2890 ;; This function is called by:
  2891 ;;		Startup code after reset
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text0
  2896  013FD4                     __ptext0:
  2897                           	opt stack 0
  2898  013FD4                     _main:
  2899                           	opt stack 13
  2900                           
  2901                           ;main.c: 478: init();
  2902                           
  2903                           ;incstack = 0
  2904  013FD4  ECCC  F0A6         	call	_init	;wreg free
  2905  013FD8                     l2453:
  2906                           
  2907                           ;main.c: 481: getMode();
  2908  013FD8  EC9E  F0A3         	call	_getMode	;wreg free
  2909                           
  2910                           ;main.c: 484: switch (mode) {
  2911  013FDC  D053               	goto	l2454
  2912  013FDE                     
  2913                           ;main.c: 486: mode1();
  2914  013FDE  EC79  F08C         	call	_mode1	;wreg free
  2915                           
  2916                           ;main.c: 487: break;
  2917  013FE2  D068               	goto	l2456
  2918  013FE4                     
  2919                           ;main.c: 489: mode2();
  2920  013FE4  ECFD  F09E         	call	_mode2	;wreg free
  2921                           
  2922                           ;main.c: 490: break;
  2923  013FE8  D065               	goto	l2456
  2924  013FEA                     
  2925                           ;main.c: 492: mode3();
  2926  013FEA  EC30  F0B2         	call	_mode3	;wreg free
  2927                           
  2928                           ;main.c: 493: break;
  2929  013FEE  D062               	goto	l2456
  2930  013FF0                     
  2931                           ;main.c: 495: mode4();
  2932  013FF0  EC85  F09D         	call	_mode4	;wreg free
  2933                           
  2934                           ;main.c: 496: break;
  2935  013FF4  D05F               	goto	l2456
  2936  013FF6                     
  2937                           ;main.c: 498: if (MXK_SwitchTo(eMXK_HMI)) {
  2938  013FF6  0E01               	movlw	1
  2939  013FF8  EC51  F0B2         	call	_MXK_SwitchTo
  2940  013FFC  0900               	iorlw	0
  2941  013FFE  B4D8               	btfsc	status,2,c
  2942  014000  D059               	goto	l2456
  2943                           
  2944                           ;main.c: 499: printf("%c", (char)35);
  2945  014002  0EFB               	movlw	low STR_1
  2946  014004  0100               	movlb	0	; () banked
  2947  014006  6FCA               	movwf	printf@f& (0+255),b
  2948  014008  0EFF               	movlw	high STR_1
  2949  01400A  0100               	movlb	0	; () banked
  2950  01400C  6FCB               	movwf	(printf@f+1)& (0+255),b
  2951  01400E  0E00               	movlw	0
  2952  014010  0100               	movlb	0	; () banked
  2953  014012  6FCD               	movwf	(?_printf+3)& (0+255),b
  2954  014014  0E23               	movlw	35
  2955  014016  6FCC               	movwf	(?_printf+2)& (0+255),b
  2956  014018  EC3E  F094         	call	_printf	;wreg free
  2957                           
  2958                           ;main.c: 500: printf("Please select mode.\n");
  2959  01401C  0ED8               	movlw	low STR_14
  2960  01401E  0100               	movlb	0	; () banked
  2961  014020  6FCA               	movwf	printf@f& (0+255),b
  2962  014022  0EFF               	movlw	high STR_14
  2963  014024  0100               	movlb	0	; () banked
  2964  014026  6FCB               	movwf	(printf@f+1)& (0+255),b
  2965  014028  EC3E  F094         	call	_printf	;wreg free
  2966                           
  2967                           ;main.c: 501: printf("                   \n");
  2968  01402C  0EC3               	movlw	low STR_15
  2969  01402E  0100               	movlb	0	; () banked
  2970  014030  6FCA               	movwf	printf@f& (0+255),b
  2971  014032  0EFF               	movlw	high STR_15
  2972  014034  0100               	movlb	0	; () banked
  2973  014036  6FCB               	movwf	(printf@f+1)& (0+255),b
  2974  014038  EC3E  F094         	call	_printf	;wreg free
  2975                           
  2976                           ;main.c: 502: printf("                   \n");
  2977  01403C  0EC3               	movlw	low STR_15
  2978  01403E  0100               	movlb	0	; () banked
  2979  014040  6FCA               	movwf	printf@f& (0+255),b
  2980  014042  0EFF               	movlw	high STR_15
  2981  014044  0100               	movlb	0	; () banked
  2982  014046  6FCB               	movwf	(printf@f+1)& (0+255),b
  2983  014048  EC3E  F094         	call	_printf	;wreg free
  2984                           
  2985                           ;main.c: 503: printf("                   \n");
  2986  01404C  0EC3               	movlw	low STR_15
  2987  01404E  0100               	movlb	0	; () banked
  2988  014050  6FCA               	movwf	printf@f& (0+255),b
  2989  014052  0EFF               	movlw	high STR_15
  2990  014054  0100               	movlb	0	; () banked
  2991  014056  6FCB               	movwf	(printf@f+1)& (0+255),b
  2992  014058  EC3E  F094         	call	_printf	;wreg free
  2993                           
  2994                           ;main.c: 504: printf("                   \n");
  2995  01405C  0EC3               	movlw	low STR_15
  2996  01405E  0100               	movlb	0	; () banked
  2997  014060  6FCA               	movwf	printf@f& (0+255),b
  2998  014062  0EFF               	movlw	high STR_15
  2999  014064  0100               	movlb	0	; () banked
  3000  014066  6FCB               	movwf	(printf@f+1)& (0+255),b
  3001  014068  EC3E  F094         	call	_printf	;wreg free
  3002                           
  3003                           ;main.c: 505: Console_Render();
  3004  01406C  EC52  F091         	call	_Console_Render	;wreg free
  3005                           
  3006                           ;main.c: 506: HMI_Poll();
  3007  014070  EC26  F0AD         	call	_HMI_Poll	;wreg free
  3008                           
  3009                           ;main.c: 507: if (MXK_Release())
  3010  014074  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3011  014078  0900               	iorlw	0
  3012  01407A  B4D8               	btfsc	status,2,c
  3013  01407C  D01B               	goto	l2456
  3014                           
  3015                           ;main.c: 508: MXK_Dequeue();
  3016  01407E  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3017                           
  3018                           ;main.c: 509: }
  3019                           ;main.c: 510: }
  3020  014082  D018               	goto	l2456
  3021  014084                     l2454:
  3022  014084  C075  F4B2         	movff	_mode,??_main
  3023  014088  C076  F4B3         	movff	_mode+1,??_main+1
  3024                           
  3025                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3026                           ; Switch size 1, requested type "space"
  3027                           ; Number of cases is 1, Range of values is 0 to 0
  3028                           ; switch strategies available:
  3029                           ; Name         Instructions Cycles
  3030                           ; simple_byte            4     3 (average)
  3031                           ;	Chosen strategy is simple_byte
  3032  01408C  0104               	movlb	4	; () banked
  3033  01408E  51B3               	movf	(??_main+1)& (0+255),w,b
  3034  014090  0A00               	xorlw	0	; case 0
  3035  014092  A4D8               	btfss	status,2,c
  3036  014094  D7B0               	goto	l2460
  3037                           
  3038                           ; BSR set to: 4
  3039                           ; Switch size 1, requested type "space"
  3040                           ; Number of cases is 4, Range of values is 1 to 4
  3041                           ; switch strategies available:
  3042                           ; Name         Instructions Cycles
  3043                           ; simple_byte           13     7 (average)
  3044                           ;	Chosen strategy is simple_byte
  3045  014096  0104               	movlb	4	; () banked
  3046  014098  51B2               	movf	??_main& (0+255),w,b
  3047  01409A  0A01               	xorlw	1	; case 1
  3048  01409C  B4D8               	btfsc	status,2,c
  3049  01409E  D79F               	goto	l2455
  3050  0140A0  0A03               	xorlw	3	; case 2
  3051  0140A2  B4D8               	btfsc	status,2,c
  3052  0140A4  D79F               	goto	l2457
  3053  0140A6  0A01               	xorlw	1	; case 3
  3054  0140A8  B4D8               	btfsc	status,2,c
  3055  0140AA  D79F               	goto	l2458
  3056  0140AC  0A07               	xorlw	7	; case 4
  3057  0140AE  B4D8               	btfsc	status,2,c
  3058  0140B0  D79F               	goto	l2459
  3059  0140B2  D7A1               	goto	l2460
  3060  0140B4                     l2456:
  3061                           
  3062                           ;main.c: 511: measureAndDisplayDistance();
  3063                           
  3064                           ; BSR set to: 4
  3065  0140B4  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  3066                           
  3067                           ;main.c: 512: }
  3068  0140B8  D78F               	goto	l2453
  3069  0140BA                     __end_of_main:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _mode4 *****************
  3083 ;; Defined at:
  3084 ;;		line 439 in file "main.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;Total ram usage:        0 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:   17
  3105 ;; This function calls:
  3106 ;;		_MXK_Dequeue
  3107 ;;		_MXK_Release
  3108 ;;		_MXK_SwitchTo
  3109 ;;		_Motor_Move
  3110 ;;		_Motor_Speed
  3111 ;;		_correct_distance
  3112 ;;		_delay_ms
  3113 ;;		_findClosestWall
  3114 ;;		_irobot_song_play
  3115 ;;		_irobot_stop_motion
  3116 ;;		_measureAndDisplayDistance
  3117 ;;		_safeToGo
  3118 ;;		_update_bump_and_cliff
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text1
  3125  013B0A                     __ptext1:
  3126                           	opt stack 0
  3127  013B0A                     _mode4:
  3128                           	opt stack 13
  3129                           
  3130                           ;main.c: 440: safeToGo();
  3131                           
  3132                           ;incstack = 0
  3133  013B0A  ECEF  F0B0         	call	_safeToGo	;wreg free
  3134                           
  3135                           ;main.c: 442: findClosestWall();
  3136  013B0E  EC00  F080         	call	_findClosestWall	;wreg free
  3137                           
  3138                           ;main.c: 443: delay_ms(100);
  3139  013B12  0E00               	movlw	0
  3140  013B14  0100               	movlb	0	; () banked
  3141  013B16  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  3142  013B18  0E64               	movlw	100
  3143  013B1A  6FB5               	movwf	delay_ms@ms& (0+255),b
  3144  013B1C  EC39  F0AE         	call	_delay_ms	;wreg free
  3145                           
  3146                           ;main.c: 446: if (MXK_SwitchTo(eMXK_Motor)) {
  3147  013B20  0E08               	movlw	8
  3148  013B22  EC51  F0B2         	call	_MXK_SwitchTo
  3149  013B26  0900               	iorlw	0
  3150  013B28  B4D8               	btfsc	status,2,c
  3151  013B2A  D020               	goto	l2440
  3152                           
  3153                           ;main.c: 447: Motor_Speed(&Stepper, (100));
  3154  013B2C  0EAA               	movlw	low _Stepper
  3155  013B2E  0100               	movlb	0	; () banked
  3156  013B30  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  3157  013B32  0E00               	movlw	high _Stepper
  3158  013B34  0100               	movlb	0	; () banked
  3159  013B36  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3160  013B38  0E00               	movlw	0
  3161  013B3A  0100               	movlb	0	; () banked
  3162  013B3C  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3163  013B3E  0E64               	movlw	100
  3164  013B40  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  3165  013B42  EC65  F0B4         	call	_Motor_Speed	;wreg free
  3166                           
  3167                           ;main.c: 448: Motor_Move(&Stepper, -50);
  3168  013B46  0EAA               	movlw	low _Stepper
  3169  013B48  0100               	movlb	0	; () banked
  3170  013B4A  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  3171  013B4C  0E00               	movlw	high _Stepper
  3172  013B4E  0100               	movlb	0	; () banked
  3173  013B50  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3174  013B52  0EFF               	movlw	255
  3175  013B54  0100               	movlb	0	; () banked
  3176  013B56  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3177  013B58  0ECE               	movlw	206
  3178  013B5A  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  3179  013B5C  EC69  F0B3         	call	_Motor_Move	;wreg free
  3180                           
  3181                           ;main.c: 449: if (MXK_Release())
  3182  013B60  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3183  013B64  0900               	iorlw	0
  3184  013B66  A4D8               	btfss	status,2,c
  3185                           
  3186                           ;main.c: 450: MXK_Dequeue();
  3187  013B68  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3188  013B6C                     l2440:
  3189                           
  3190                           ;main.c: 451: }
  3191                           ;main.c: 452: delay_ms(100);
  3192  013B6C  0E00               	movlw	0
  3193  013B6E  0100               	movlb	0	; () banked
  3194  013B70  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  3195  013B72  0E64               	movlw	100
  3196  013B74  6FB5               	movwf	delay_ms@ms& (0+255),b
  3197  013B76  EC39  F0AE         	call	_delay_ms	;wreg free
  3198                           
  3199                           ;main.c: 453: measureAndDisplayDistance();
  3200  013B7A  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  3201                           
  3202                           ;main.c: 454: dummy1 = IRValue;
  3203  013B7E  C06F  F069         	movff	_IRValue,_dummy1
  3204  013B82  C070  F06A         	movff	_IRValue+1,_dummy1+1
  3205                           
  3206                           ;main.c: 457: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3207  013B86  D004               	goto	l2441
  3208  013B88                     
  3209                           ;main.c: 458: correct_distance();
  3210  013B88  EC74  F09F         	call	_correct_distance	;wreg free
  3211                           
  3212                           ;main.c: 459: update_bump_and_cliff();
  3213  013B8C  EC4C  F0B3         	call	_update_bump_and_cliff	;wreg free
  3214  013B90                     l2441:
  3215  013B90  0100               	movlb	0	; () banked
  3216  013B92  518C               	movf	_iRBumpLeft& (0+255),w,b
  3217  013B94  A4D8               	btfss	status,2,c
  3218  013B96  D00C               	goto	u15150
  3219                           
  3220                           ; BSR set to: 0
  3221  013B98  0100               	movlb	0	; () banked
  3222  013B9A  518D               	movf	_iRBumpRight& (0+255),w,b
  3223  013B9C  A4D8               	btfss	status,2,c
  3224  013B9E  D008               	goto	u15150
  3225                           
  3226                           ; BSR set to: 0
  3227  013BA0  0100               	movlb	0	; () banked
  3228  013BA2  518B               	movf	_iRDropRight& (0+255),w,b
  3229  013BA4  A4D8               	btfss	status,2,c
  3230  013BA6  D004               	goto	u15150
  3231                           
  3232                           ; BSR set to: 0
  3233  013BA8  0100               	movlb	0	; () banked
  3234  013BAA  518A               	movf	_iRDropLeft& (0+255),w,b
  3235  013BAC  B4D8               	btfsc	status,2,c
  3236  013BAE  D7EC               	goto	l2442
  3237  013BB0                     u15150:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;main.c: 460: }
  3241                           ;main.c: 463: irobot_stop_motion(0);
  3242                           
  3243                           ; BSR set to: 0
  3244                           
  3245                           ; BSR set to: 0
  3246  013BB0  0E00               	movlw	0
  3247  013BB2  ECA5  F0B1         	call	_irobot_stop_motion
  3248                           
  3249                           ;main.c: 466: if (MXK_SwitchTo(eMXK_Motor)) {
  3250  013BB6  0E08               	movlw	8
  3251  013BB8  EC51  F0B2         	call	_MXK_SwitchTo
  3252  013BBC  0900               	iorlw	0
  3253  013BBE  B4D8               	btfsc	status,2,c
  3254  013BC0  D020               	goto	l2447
  3255                           
  3256                           ;main.c: 467: Motor_Speed(&Stepper, (100));
  3257  013BC2  0EAA               	movlw	low _Stepper
  3258  013BC4  0100               	movlb	0	; () banked
  3259  013BC6  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  3260  013BC8  0E00               	movlw	high _Stepper
  3261  013BCA  0100               	movlb	0	; () banked
  3262  013BCC  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3263  013BCE  0E00               	movlw	0
  3264  013BD0  0100               	movlb	0	; () banked
  3265  013BD2  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3266  013BD4  0E64               	movlw	100
  3267  013BD6  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  3268  013BD8  EC65  F0B4         	call	_Motor_Speed	;wreg free
  3269                           
  3270                           ;main.c: 468: Motor_Move(&Stepper, 50);
  3271  013BDC  0EAA               	movlw	low _Stepper
  3272  013BDE  0100               	movlb	0	; () banked
  3273  013BE0  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  3274  013BE2  0E00               	movlw	high _Stepper
  3275  013BE4  0100               	movlb	0	; () banked
  3276  013BE6  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3277  013BE8  0E00               	movlw	0
  3278  013BEA  0100               	movlb	0	; () banked
  3279  013BEC  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3280  013BEE  0E32               	movlw	50
  3281  013BF0  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  3282  013BF2  EC69  F0B3         	call	_Motor_Move	;wreg free
  3283                           
  3284                           ;main.c: 469: if (MXK_Release())
  3285  013BF6  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3286  013BFA  0900               	iorlw	0
  3287  013BFC  A4D8               	btfss	status,2,c
  3288                           
  3289                           ;main.c: 470: MXK_Dequeue();
  3290  013BFE  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3291  013C02                     l2447:
  3292                           
  3293                           ;main.c: 471: }
  3294                           ;main.c: 472: irobot_song_play(0);
  3295  013C02  0E00               	movlw	0
  3296  013C04  EC08  F0B6         	call	_irobot_song_play
  3297  013C08  0012               	return		;funcret
  3298  013C0A                     __end_of_mode4:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           postdec1	equ	0xFE5
  3307                           fsr1h	equ	0xFE2
  3308                           fsr1l	equ	0xFE1
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _findClosestWall *****************
  3312 ;; Defined at:
  3313 ;;		line 155 in file "main.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Totals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;Total ram usage:        6 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:   13
  3334 ;; This function calls:
  3335 ;;		_ADC_Start
  3336 ;;		_ADC_Voltage
  3337 ;;		_Console_Render
  3338 ;;		_HMI_Render
  3339 ;;		_HMI_SetNumber
  3340 ;;		_MXK_Dequeue
  3341 ;;		_MXK_Release
  3342 ;;		_MXK_SwitchTo
  3343 ;;		_Motor_Move
  3344 ;;		_Motor_Speed
  3345 ;;		___fldiv
  3346 ;;		___flmul
  3347 ;;		___fltol
  3348 ;;		___xxtofl
  3349 ;;		_delay_ms
  3350 ;;		_irobot_rotate
  3351 ;;		_printf
  3352 ;; This function is called by:
  3353 ;;		_mode4
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text2
  3358  010000                     __ptext2:
  3359                           	opt stack 0
  3360  010000                     _findClosestWall:
  3361                           	opt stack 16
  3362                           
  3363                           ;main.c: 156: correctOrientation = 0;
  3364                           
  3365                           ;incstack = 0
  3366  010000  0E00               	movlw	0
  3367  010002  0100               	movlb	0	; () banked
  3368  010004  6F89               	movwf	_correctOrientation& (0+255),b
  3369                           
  3370                           ;main.c: 157: StepRotate = 400;
  3371  010006  0E01               	movlw	1
  3372  010008  0100               	movlb	0	; () banked
  3373  01000A  6F74               	movwf	(_StepRotate+1)& (0+255),b
  3374  01000C  0E90               	movlw	144
  3375  01000E  6F73               	movwf	_StepRotate& (0+255),b
  3376                           
  3377                           ;main.c: 158: MinDist = 1000;
  3378  010010  0E03               	movlw	3
  3379  010012  0100               	movlb	0	; () banked
  3380  010014  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3381  010016  0EE8               	movlw	232
  3382  010018  6FFB               	movwf	_MinDist& (0+255),b
  3383                           
  3384                           ;main.c: 159: Stepstomin = 0;
  3385  01001A  0E00               	movlw	0
  3386  01001C  0100               	movlb	0	; () banked
  3387  01001E  6F72               	movwf	(_Stepstomin+1)& (0+255),b
  3388  010020  0E00               	movlw	0
  3389  010022  6F71               	movwf	_Stepstomin& (0+255),b
  3390                           
  3391                           ;main.c: 160: angleToClosestWall = 1000;
  3392  010024  0E03               	movlw	3
  3393  010026  0100               	movlb	0	; () banked
  3394  010028  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  3395  01002A  0EE8               	movlw	232
  3396  01002C  6F6D               	movwf	_angleToClosestWall& (0+255),b
  3397                           
  3398                           ;main.c: 161: IRValue = 0;
  3399  01002E  0E00               	movlw	0
  3400  010030  0100               	movlb	0	; () banked
  3401  010032  6F70               	movwf	(_IRValue+1)& (0+255),b
  3402  010034  0E00               	movlw	0
  3403  010036  6F6F               	movwf	_IRValue& (0+255),b
  3404                           
  3405                           ;main.c: 162: TimerX = 8;
  3406  010038  0E00               	movlw	0
  3407  01003A  0100               	movlb	0	; () banked
  3408  01003C  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3409  01003E  0E08               	movlw	8
  3410  010040  6FF9               	movwf	_TimerX& (0+255),b
  3411                           
  3412                           ;main.c: 163: angle = 0;
  3413  010042  0E00               	movlw	0
  3414  010044  0103               	movlb	3	; () banked
  3415  010046  6F3D               	movwf	(_angle+1)& (0+255),b
  3416  010048  0E00               	movlw	0
  3417  01004A  6F3C               	movwf	_angle& (0+255),b
  3418                           
  3419                           ;main.c: 164: while (StepRotate > 0) {
  3420  01004C  D15A               	goto	l2360
  3421  01004E                     
  3422                           ;main.c: 165: StepRotate--;
  3423                           
  3424                           ; BSR set to: 3
  3425  01004E  0100               	movlb	0	; () banked
  3426  010050  0773               	decf	_StepRotate& (0+255),f,b
  3427  010052  A0D8               	btfss	status,0,c
  3428  010054  0774               	decf	(_StepRotate+1)& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;main.c: 166: ADC_Start(&ADC_AN0);
  3432  010056  0EB0               	movlw	low _ADC_AN0
  3433  010058  0100               	movlb	0	; () banked
  3434  01005A  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  3435  01005C  0E00               	movlw	high _ADC_AN0
  3436  01005E  0100               	movlb	0	; () banked
  3437  010060  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3438  010062  EC03  F0AB         	call	_ADC_Start	;wreg free
  3439                           
  3440                           ;main.c: 167: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3441  010066  0EB0               	movlw	low _ADC_AN0
  3442  010068  0100               	movlb	0	; () banked
  3443  01006A  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  3444  01006C  0E00               	movlw	high _ADC_AN0
  3445  01006E  0100               	movlb	0	; () banked
  3446  010070  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3447  010072  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  3448  010076  C0DC  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15616
  3449  01007A  C0DD  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15616+1
  3450  01007E  C0DE  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15616+2
  3451  010082  C0DF  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15616+3
  3452                           
  3453                           ;main.c: 167: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3454  010086  C4AC  F0B9         	movff	_findClosestWall$15616,___fldiv@a
  3455  01008A  C4AD  F0BA         	movff	_findClosestWall$15616+1,___fldiv@a+1
  3456  01008E  C4AE  F0BB         	movff	_findClosestWall$15616+2,___fldiv@a+2
  3457  010092  C4AF  F0BC         	movff	_findClosestWall$15616+3,___fldiv@a+3
  3458  010096  0E00               	movlw	0
  3459  010098  0100               	movlb	0	; () banked
  3460  01009A  6FB5               	movwf	___fldiv@b& (0+255),b
  3461  01009C  0E00               	movlw	0
  3462  01009E  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  3463  0100A0  0E6C               	movlw	108
  3464  0100A2  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  3465  0100A4  0E42               	movlw	66
  3466  0100A6  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  3467  0100A8  ECBC  F088         	call	___fldiv	;wreg free
  3468  0100AC  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  3469  0100B0  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  3470  0100B4  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  3471  0100B8  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  3472  0100BC  ECFF  F09C         	call	___fltol	;wreg free
  3473  0100C0  C0EE  F06F         	movff	?___fltol,_IRValue
  3474  0100C4  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  3475                           
  3476                           ;main.c: 168: if (MXK_SwitchTo(eMXK_HMI)) {
  3477  0100C8  0E01               	movlw	1
  3478  0100CA  EC51  F0B2         	call	_MXK_SwitchTo
  3479  0100CE  0900               	iorlw	0
  3480  0100D0  B4D8               	btfsc	status,2,c
  3481  0100D2  D00E               	goto	l2349
  3482                           
  3483                           ;main.c: 169: HMI_SetNumber(IRValue);
  3484  0100D4  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  3485  0100D8  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3486  0100DC  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
  3487                           
  3488                           ;main.c: 170: HMI_Render();
  3489  0100E0  ECB2  F0B2         	call	_HMI_Render	;wreg free
  3490                           
  3491                           ;main.c: 171: if (MXK_Release())
  3492  0100E4  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3493  0100E8  0900               	iorlw	0
  3494  0100EA  A4D8               	btfss	status,2,c
  3495                           
  3496                           ;main.c: 172: MXK_Dequeue();
  3497  0100EC  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3498  0100F0                     l2349:
  3499                           
  3500                           ;main.c: 173: }
  3501                           ;main.c: 174: if (IRValue < MinDist) {
  3502  0100F0  0100               	movlb	0	; () banked
  3503  0100F2  51FB               	movf	_MinDist& (0+255),w,b
  3504  0100F4  0100               	movlb	0	; () banked
  3505  0100F6  5D6F               	subwf	_IRValue& (0+255),w,b
  3506  0100F8  0100               	movlb	0	; () banked
  3507  0100FA  5170               	movf	(_IRValue+1)& (0+255),w,b
  3508  0100FC  0A80               	xorlw	128
  3509  0100FE  0104               	movlb	4	; () banked
  3510  010100  6FAA               	movwf	??_findClosestWall& (0+255),b
  3511  010102  0100               	movlb	0	; () banked
  3512  010104  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3513  010106  0A80               	xorlw	128
  3514  010108  0104               	movlb	4	; () banked
  3515  01010A  59AA               	subwfb	??_findClosestWall& (0+255),w,b
  3516  01010C  B0D8               	btfsc	status,0,c
  3517  01010E  D036               	goto	l2350
  3518                           
  3519                           ; BSR set to: 4
  3520                           ;main.c: 175: MinDist = IRValue;
  3521  010110  C06F  F0FB         	movff	_IRValue,_MinDist
  3522  010114  C070  F0FC         	movff	_IRValue+1,_MinDist+1
  3523                           
  3524                           ;main.c: 176: Stepstomin = StepRotate;
  3525  010118  C073  F071         	movff	_StepRotate,_Stepstomin
  3526  01011C  C074  F072         	movff	_StepRotate+1,_Stepstomin+1
  3527                           
  3528                           ; BSR set to: 4
  3529                           ;main.c: 177: angleToClosestWall = Stepstomin * 0.675;
  3530  010120  0ECD               	movlw	205
  3531  010122  0100               	movlb	0	; () banked
  3532  010124  6FC7               	movwf	___flmul@a& (0+255),b
  3533  010126  0ECC               	movlw	204
  3534  010128  6FC8               	movwf	(___flmul@a+1)& (0+255),b
  3535  01012A  0E2C               	movlw	44
  3536  01012C  6FC9               	movwf	(___flmul@a+2)& (0+255),b
  3537  01012E  0E3F               	movlw	63
  3538  010130  6FCA               	movwf	(___flmul@a+3)& (0+255),b
  3539  010132  C071  F0B5         	movff	_Stepstomin,___xxtofl@val
  3540  010136  C072  F0B6         	movff	_Stepstomin+1,___xxtofl@val+1
  3541  01013A  0100               	movlb	0	; () banked
  3542  01013C  0E00               	movlw	0
  3543  01013E  BFB6               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3544  010140  0EFF               	movlw	-1
  3545  010142  6FB7               	movwf	(___xxtofl@val+2)& (0+255),b
  3546  010144  6FB8               	movwf	(___xxtofl@val+3)& (0+255),b
  3547  010146  0E01               	movlw	1
  3548  010148  EC57  F093         	call	___xxtofl
  3549  01014C  C0B5  F0C3         	movff	?___xxtofl,___flmul@b
  3550  010150  C0B6  F0C4         	movff	?___xxtofl+1,___flmul@b+1
  3551  010154  C0B7  F0C5         	movff	?___xxtofl+2,___flmul@b+2
  3552  010158  C0B8  F0C6         	movff	?___xxtofl+3,___flmul@b+3
  3553  01015C  EC5A  F084         	call	___flmul	;wreg free
  3554  010160  C0C3  F0EE         	movff	?___flmul,___fltol@f1
  3555  010164  C0C4  F0EF         	movff	?___flmul+1,___fltol@f1+1
  3556  010168  C0C5  F0F0         	movff	?___flmul+2,___fltol@f1+2
  3557  01016C  C0C6  F0F1         	movff	?___flmul+3,___fltol@f1+3
  3558  010170  ECFF  F09C         	call	___fltol	;wreg free
  3559  010174  C0EE  F06D         	movff	?___fltol,_angleToClosestWall
  3560  010178  C0EF  F06E         	movff	?___fltol+1,_angleToClosestWall+1
  3561  01017C                     l2350:
  3562                           
  3563                           ;main.c: 178: }
  3564                           ;main.c: 179: if (MXK_SwitchTo(eMXK_Motor)) {
  3565  01017C  0E08               	movlw	8
  3566  01017E  EC51  F0B2         	call	_MXK_SwitchTo
  3567  010182  0900               	iorlw	0
  3568  010184  B4D8               	btfsc	status,2,c
  3569  010186  D01F               	goto	l2352
  3570                           
  3571                           ;main.c: 180: Motor_Speed(&Stepper, (100));
  3572  010188  0EAA               	movlw	low _Stepper
  3573  01018A  0100               	movlb	0	; () banked
  3574  01018C  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  3575  01018E  0E00               	movlw	high _Stepper
  3576  010190  0100               	movlb	0	; () banked
  3577  010192  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3578  010194  0E00               	movlw	0
  3579  010196  0100               	movlb	0	; () banked
  3580  010198  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3581  01019A  0E64               	movlw	100
  3582  01019C  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  3583  01019E  EC65  F0B4         	call	_Motor_Speed	;wreg free
  3584                           
  3585                           ;main.c: 181: Motor_Move(&Stepper, -1);
  3586  0101A2  0EAA               	movlw	low _Stepper
  3587  0101A4  0100               	movlb	0	; () banked
  3588  0101A6  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  3589  0101A8  0E00               	movlw	high _Stepper
  3590  0101AA  0100               	movlb	0	; () banked
  3591  0101AC  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3592  0101AE  0EFF               	movlw	255
  3593  0101B0  0100               	movlb	0	; () banked
  3594  0101B2  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3595  0101B4  69BA               	setf	Motor_Move@pDelta& (0+255),b
  3596  0101B6  EC69  F0B3         	call	_Motor_Move	;wreg free
  3597                           
  3598                           ;main.c: 182: if (MXK_Release())
  3599  0101BA  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3600  0101BE  0900               	iorlw	0
  3601  0101C0  A4D8               	btfss	status,2,c
  3602                           
  3603                           ;main.c: 183: MXK_Dequeue();
  3604  0101C2  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3605  0101C6                     l2352:
  3606                           
  3607                           ;main.c: 184: }
  3608                           ;main.c: 185: TimerX = 10;
  3609  0101C6  0E00               	movlw	0
  3610  0101C8  0100               	movlb	0	; () banked
  3611  0101CA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3612  0101CC  0E0A               	movlw	10
  3613  0101CE  6FF9               	movwf	_TimerX& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;main.c: 186: if (TimerX > 0) {
  3617  0101D0  0100               	movlb	0	; () banked
  3618  0101D2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3619  0101D4  D063               	goto	u14620
  3620  0101D6  0100               	movlb	0	; () banked
  3621  0101D8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3622  0101DA  E156               	bnz	l17170
  3623  0101DC  0100               	movlb	0	; () banked
  3624  0101DE  05F9               	decf	_TimerX& (0+255),w,b
  3625  0101E0  B0D8               	btfsc	status,0,c
  3626  0101E2  D052               	goto	l2354
  3627  0101E4  D05B               	goto	u14620
  3628  0101E6                     l17152:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 188: ADC_Start(&ADC_AN0);
  3632  0101E6  0EB0               	movlw	low _ADC_AN0
  3633  0101E8  0100               	movlb	0	; () banked
  3634  0101EA  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  3635  0101EC  0E00               	movlw	high _ADC_AN0
  3636  0101EE  0100               	movlb	0	; () banked
  3637  0101F0  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3638  0101F2  EC03  F0AB         	call	_ADC_Start	;wreg free
  3639                           
  3640                           ;main.c: 189: if (MXK_SwitchTo(eMXK_HMI)) {
  3641  0101F6  0E01               	movlw	1
  3642  0101F8  EC51  F0B2         	call	_MXK_SwitchTo
  3643  0101FC  0900               	iorlw	0
  3644  0101FE  B4D8               	btfsc	status,2,c
  3645  010200  D00E               	goto	l2357
  3646                           
  3647                           ;main.c: 190: HMI_SetNumber(IRValue);
  3648  010202  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  3649  010206  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3650  01020A  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
  3651                           
  3652                           ;main.c: 191: HMI_Render();
  3653  01020E  ECB2  F0B2         	call	_HMI_Render	;wreg free
  3654                           
  3655                           ;main.c: 192: if (MXK_Release())
  3656  010212  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3657  010216  0900               	iorlw	0
  3658  010218  A4D8               	btfss	status,2,c
  3659                           
  3660                           ;main.c: 193: MXK_Dequeue();
  3661  01021A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3662  01021E                     l2357:
  3663                           
  3664                           ;main.c: 194: }
  3665                           ;main.c: 195: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3666  01021E  0EB0               	movlw	low _ADC_AN0
  3667  010220  0100               	movlb	0	; () banked
  3668  010222  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  3669  010224  0E00               	movlw	high _ADC_AN0
  3670  010226  0100               	movlb	0	; () banked
  3671  010228  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3672  01022A  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  3673  01022E  C0DC  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15616
  3674  010232  C0DD  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15616+1
  3675  010236  C0DE  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15616+2
  3676  01023A  C0DF  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15616+3
  3677                           
  3678                           ;main.c: 194: }
  3679                           ;main.c: 195: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3680  01023E  C4AC  F0B9         	movff	_findClosestWall$15616,___fldiv@a
  3681  010242  C4AD  F0BA         	movff	_findClosestWall$15616+1,___fldiv@a+1
  3682  010246  C4AE  F0BB         	movff	_findClosestWall$15616+2,___fldiv@a+2
  3683  01024A  C4AF  F0BC         	movff	_findClosestWall$15616+3,___fldiv@a+3
  3684  01024E  0E00               	movlw	0
  3685  010250  0100               	movlb	0	; () banked
  3686  010252  6FB5               	movwf	___fldiv@b& (0+255),b
  3687  010254  0E00               	movlw	0
  3688  010256  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  3689  010258  0E6C               	movlw	108
  3690  01025A  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  3691  01025C  0E42               	movlw	66
  3692  01025E  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  3693  010260  ECBC  F088         	call	___fldiv	;wreg free
  3694  010264  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  3695  010268  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  3696  01026C  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  3697  010270  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  3698  010274  ECFF  F09C         	call	___fltol	;wreg free
  3699  010278  C0EE  F06F         	movff	?___fltol,_IRValue
  3700  01027C  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  3701                           
  3702                           ;main.c: 196: TimerX--;
  3703  010280  0100               	movlb	0	; () banked
  3704  010282  07F9               	decf	_TimerX& (0+255),f,b
  3705  010284  A0D8               	btfss	status,0,c
  3706  010286  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3707  010288                     l2354:
  3708  010288                     l17170:
  3709                           
  3710                           ; BSR set to: 0
  3711  010288  0100               	movlb	0	; () banked
  3712  01028A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3713  01028C  D007               	goto	u14620
  3714  01028E  0100               	movlb	0	; () banked
  3715  010290  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3716  010292  E1A9               	bnz	l17152
  3717  010294  0100               	movlb	0	; () banked
  3718  010296  05F9               	decf	_TimerX& (0+255),w,b
  3719  010298  B0D8               	btfsc	status,0,c
  3720  01029A  D7A5               	goto	l2355
  3721  01029C                     u14620:
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;main.c: 197: }
  3725                           ;main.c: 198: }
  3726                           ;main.c: 199: if (MXK_SwitchTo(eMXK_HMI)) {
  3727                           
  3728                           ; BSR set to: 0
  3729                           
  3730                           ; BSR set to: 0
  3731  01029C  0E01               	movlw	1
  3732  01029E  EC51  F0B2         	call	_MXK_SwitchTo
  3733  0102A2  0900               	iorlw	0
  3734  0102A4  B4D8               	btfsc	status,2,c
  3735  0102A6  D02D               	goto	l2360
  3736                           
  3737                           ;main.c: 200: printf("%c", (char)35);
  3738  0102A8  0EFB               	movlw	low STR_1
  3739  0102AA  0100               	movlb	0	; () banked
  3740  0102AC  6FCA               	movwf	printf@f& (0+255),b
  3741  0102AE  0EFF               	movlw	high STR_1
  3742  0102B0  0100               	movlb	0	; () banked
  3743  0102B2  6FCB               	movwf	(printf@f+1)& (0+255),b
  3744  0102B4  0E00               	movlw	0
  3745  0102B6  0100               	movlb	0	; () banked
  3746  0102B8  6FCD               	movwf	(?_printf+3)& (0+255),b
  3747  0102BA  0E23               	movlw	35
  3748  0102BC  6FCC               	movwf	(?_printf+2)& (0+255),b
  3749  0102BE  EC3E  F094         	call	_printf	;wreg free
  3750                           
  3751                           ;main.c: 201: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3752  0102C2  0E59               	movlw	low STR_4
  3753  0102C4  0100               	movlb	0	; () banked
  3754  0102C6  6FCA               	movwf	printf@f& (0+255),b
  3755  0102C8  0EFF               	movlw	high STR_4
  3756  0102CA  0100               	movlb	0	; () banked
  3757  0102CC  6FCB               	movwf	(printf@f+1)& (0+255),b
  3758  0102CE  C0FB  F0CC         	movff	_MinDist,?_printf+2
  3759  0102D2  C0FC  F0CD         	movff	_MinDist+1,?_printf+3
  3760  0102D6  C06D  F0CE         	movff	_angleToClosestWall,?_printf+4
  3761  0102DA  C06E  F0CF         	movff	_angleToClosestWall+1,?_printf+5
  3762  0102DE  C08C  F0D0         	movff	_iRBumpLeft,?_printf+6
  3763  0102E2  0100               	movlb	0	; () banked
  3764  0102E4  6BD1               	clrf	(?_printf+7)& (0+255),b
  3765  0102E6  C08D  F0D2         	movff	_iRBumpRight,?_printf+8
  3766  0102EA  0100               	movlb	0	; () banked
  3767  0102EC  6BD3               	clrf	(?_printf+9)& (0+255),b
  3768  0102EE  EC3E  F094         	call	_printf	;wreg free
  3769                           
  3770                           ;main.c: 202: Console_Render();
  3771  0102F2  EC52  F091         	call	_Console_Render	;wreg free
  3772                           
  3773                           ;main.c: 203: if (MXK_Release())
  3774  0102F6  EC7F  F0B5         	call	_MXK_Release	;wreg free
  3775  0102FA  0900               	iorlw	0
  3776  0102FC  A4D8               	btfss	status,2,c
  3777                           
  3778                           ;main.c: 204: MXK_Dequeue();
  3779  0102FE  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3780  010302                     l2360:
  3781  010302  0100               	movlb	0	; () banked
  3782  010304  BF74               	btfsc	(_StepRotate+1)& (0+255),7,b
  3783  010306  D007               	goto	u14650
  3784  010308  0100               	movlb	0	; () banked
  3785  01030A  5174               	movf	(_StepRotate+1)& (0+255),w,b
  3786  01030C  E103               	bnz	u14651
  3787  01030E  0100               	movlb	0	; () banked
  3788  010310  0573               	decf	_StepRotate& (0+255),w,b
  3789  010312  B0D8               	btfsc	status,0,c
  3790  010314                     u14651:
  3791  010314  D69C               	goto	l2347
  3792  010316                     u14650:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;main.c: 205: }
  3796                           ;main.c: 206: }
  3797                           ;main.c: 207: Motor_Speed(&Stepper, (400));
  3798                           
  3799                           ; BSR set to: 0
  3800  010316  0EAA               	movlw	low _Stepper
  3801  010318  0100               	movlb	0	; () banked
  3802  01031A  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  3803  01031C  0E00               	movlw	high _Stepper
  3804  01031E  0100               	movlb	0	; () banked
  3805  010320  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3806  010322  0E01               	movlw	1
  3807  010324  0100               	movlb	0	; () banked
  3808  010326  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3809  010328  0E90               	movlw	144
  3810  01032A  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  3811  01032C  EC65  F0B4         	call	_Motor_Speed	;wreg free
  3812                           
  3813                           ;main.c: 208: Motor_Move(&Stepper, 400);
  3814  010330  0EAA               	movlw	low _Stepper
  3815  010332  0100               	movlb	0	; () banked
  3816  010334  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  3817  010336  0E00               	movlw	high _Stepper
  3818  010338  0100               	movlb	0	; () banked
  3819  01033A  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3820  01033C  0E01               	movlw	1
  3821  01033E  0100               	movlb	0	; () banked
  3822  010340  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3823  010342  0E90               	movlw	144
  3824  010344  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  3825  010346  EC69  F0B3         	call	_Motor_Move	;wreg free
  3826                           
  3827                           ;main.c: 209: angleToClosestWall = angleToClosestWall + 67;
  3828  01034A  0E43               	movlw	67
  3829  01034C  0100               	movlb	0	; () banked
  3830  01034E  256D               	addwf	_angleToClosestWall& (0+255),w,b
  3831  010350  0100               	movlb	0	; () banked
  3832  010352  6F6D               	movwf	_angleToClosestWall& (0+255),b
  3833  010354  0E00               	movlw	0
  3834  010356  0100               	movlb	0	; () banked
  3835  010358  216E               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3836  01035A  0100               	movlb	0	; () banked
  3837  01035C  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;main.c: 210: if(angleToClosestWall > 270) {
  3841  01035E  0100               	movlb	0	; () banked
  3842  010360  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3843  010362  D012               	goto	l2362
  3844  010364  0E0F               	movlw	15
  3845  010366  0100               	movlb	0	; () banked
  3846  010368  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  3847  01036A  0E01               	movlw	1
  3848  01036C  0100               	movlb	0	; () banked
  3849  01036E  596E               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  3850  010370  A0D8               	btfss	status,0,c
  3851  010372  D00A               	goto	l2362
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;main.c: 211: angleToClosestWall = angleToClosestWall - 270;
  3855  010374  0EF2               	movlw	242
  3856  010376  0100               	movlb	0	; () banked
  3857  010378  256D               	addwf	_angleToClosestWall& (0+255),w,b
  3858  01037A  0100               	movlb	0	; () banked
  3859  01037C  6F6D               	movwf	_angleToClosestWall& (0+255),b
  3860  01037E  0EFE               	movlw	254
  3861  010380  0100               	movlb	0	; () banked
  3862  010382  216E               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3863  010384  0100               	movlb	0	; () banked
  3864  010386  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  3865  010388                     l2362:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 212: }
  3869                           ;main.c: 213: angleToClosestWall = 270 - angleToClosestWall;
  3870  010388  C06D  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  3871  01038C  C06E  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3872  010390  0104               	movlb	4	; () banked
  3873  010392  1FAA               	comf	??_findClosestWall& (0+255),f,b
  3874  010394  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  3875  010396  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  3876  010398  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  3877  01039A  0E0E               	movlw	14
  3878  01039C  0104               	movlb	4	; () banked
  3879  01039E  25AA               	addwf	??_findClosestWall& (0+255),w,b
  3880  0103A0  0100               	movlb	0	; () banked
  3881  0103A2  6F6D               	movwf	_angleToClosestWall& (0+255),b
  3882  0103A4  0E01               	movlw	1
  3883  0103A6  0104               	movlb	4	; () banked
  3884  0103A8  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3885  0103AA  0100               	movlb	0	; () banked
  3886  0103AC  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  3887                           
  3888                           ;main.c: 214: if(angleToClosestWall < 135) {
  3889  0103AE  0100               	movlb	0	; () banked
  3890  0103B0  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3891  0103B2  D008               	goto	u14670
  3892  0103B4  0100               	movlb	0	; () banked
  3893  0103B6  516E               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3894  0103B8  E112               	bnz	l17194
  3895  0103BA  0E87               	movlw	135
  3896  0103BC  0100               	movlb	0	; () banked
  3897  0103BE  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  3898  0103C0  B0D8               	btfsc	status,0,c
  3899  0103C2  D00D               	goto	l2363
  3900  0103C4                     u14670:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;main.c: 215: irobot_rotate(0, angleToClosestWall, 200);
  3904  0103C4  C06D  F0D2         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  3905  0103C8  C06E  F0D3         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  3906  0103CC  0E00               	movlw	0
  3907  0103CE  0100               	movlb	0	; () banked
  3908  0103D0  6FD5               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3909  0103D2  0EC8               	movlw	200
  3910  0103D4  6FD4               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3911  0103D6  0E00               	movlw	0
  3912  0103D8  EC79  F09C         	call	_irobot_rotate
  3913                           
  3914                           ;main.c: 216: }
  3915  0103DC  D01B               	goto	l2364
  3916  0103DE                     l2363:
  3917  0103DE                     l17194:
  3918                           
  3919                           ;main.c: 217: else{
  3920                           ;main.c: 218: irobot_rotate(0, 270 - angleToClosestWall, -200);
  3921  0103DE  C06D  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  3922  0103E2  C06E  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3923  0103E6  0104               	movlb	4	; () banked
  3924  0103E8  1FAA               	comf	??_findClosestWall& (0+255),f,b
  3925  0103EA  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  3926  0103EC  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  3927  0103EE  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  3928  0103F0  0E0E               	movlw	14
  3929  0103F2  0104               	movlb	4	; () banked
  3930  0103F4  25AA               	addwf	??_findClosestWall& (0+255),w,b
  3931  0103F6  0100               	movlb	0	; () banked
  3932  0103F8  6FD2               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3933  0103FA  0E01               	movlw	1
  3934  0103FC  0104               	movlb	4	; () banked
  3935  0103FE  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3936  010400  0100               	movlb	0	; () banked
  3937  010402  6FD3               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3938  010404  0EFF               	movlw	255
  3939  010406  0100               	movlb	0	; () banked
  3940  010408  6FD5               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3941  01040A  0E38               	movlw	56
  3942  01040C  6FD4               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3943  01040E  0E00               	movlw	0
  3944  010410  EC79  F09C         	call	_irobot_rotate
  3945  010414                     l2364:
  3946                           
  3947                           ;main.c: 219: }
  3948                           ;main.c: 220: delay_ms(200);
  3949  010414  0E00               	movlw	0
  3950  010416  0100               	movlb	0	; () banked
  3951  010418  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  3952  01041A  0EC8               	movlw	200
  3953  01041C  6FB5               	movwf	delay_ms@ms& (0+255),b
  3954  01041E  EC39  F0AE         	call	_delay_ms	;wreg free
  3955                           
  3956                           ;main.c: 221: while (!correctOrientation) {
  3957  010422  D228               	goto	l2365
  3958  010424                     
  3959                           ;main.c: 222: StepRotate = 400;
  3960  010424  0E01               	movlw	1
  3961  010426  0100               	movlb	0	; () banked
  3962  010428  6F74               	movwf	(_StepRotate+1)& (0+255),b
  3963  01042A  0E90               	movlw	144
  3964  01042C  6F73               	movwf	_StepRotate& (0+255),b
  3965                           
  3966                           ;main.c: 223: MinDist = 1000;
  3967  01042E  0E03               	movlw	3
  3968  010430  0100               	movlb	0	; () banked
  3969  010432  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3970  010434  0EE8               	movlw	232
  3971  010436  6FFB               	movwf	_MinDist& (0+255),b
  3972                           
  3973                           ;main.c: 224: Stepstomin = 0;
  3974  010438  0E00               	movlw	0
  3975  01043A  0100               	movlb	0	; () banked
  3976  01043C  6F72               	movwf	(_Stepstomin+1)& (0+255),b
  3977  01043E  0E00               	movlw	0
  3978  010440  6F71               	movwf	_Stepstomin& (0+255),b
  3979                           
  3980                           ;main.c: 225: angleToClosestWall = 1000;
  3981  010442  0E03               	movlw	3
  3982  010444  0100               	movlb	0	; () banked
  3983  010446  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  3984  010448  0EE8               	movlw	232
  3985  01044A  6F6D               	movwf	_angleToClosestWall& (0+255),b
  3986                           
  3987                           ;main.c: 226: IRValue = 0;
  3988  01044C  0E00               	movlw	0
  3989  01044E  0100               	movlb	0	; () banked
  3990  010450  6F70               	movwf	(_IRValue+1)& (0+255),b
  3991  010452  0E00               	movlw	0
  3992  010454  6F6F               	movwf	_IRValue& (0+255),b
  3993                           
  3994                           ;main.c: 227: TimerX = 8;
  3995  010456  0E00               	movlw	0
  3996  010458  0100               	movlb	0	; () banked
  3997  01045A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3998  01045C  0E08               	movlw	8
  3999  01045E  6FF9               	movwf	_TimerX& (0+255),b
  4000                           
  4001                           ;main.c: 228: angle = 0;
  4002  010460  0E00               	movlw	0
  4003  010462  0103               	movlb	3	; () banked
  4004  010464  6F3D               	movwf	(_angle+1)& (0+255),b
  4005  010466  0E00               	movlw	0
  4006  010468  6F3C               	movwf	_angle& (0+255),b
  4007                           
  4008                           ;main.c: 229: while (StepRotate > 0) {
  4009  01046A  D15A               	goto	l2381
  4010  01046C                     
  4011                           ;main.c: 230: StepRotate--;
  4012                           
  4013                           ; BSR set to: 3
  4014  01046C  0100               	movlb	0	; () banked
  4015  01046E  0773               	decf	_StepRotate& (0+255),f,b
  4016  010470  A0D8               	btfss	status,0,c
  4017  010472  0774               	decf	(_StepRotate+1)& (0+255),f,b
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;main.c: 231: ADC_Start(&ADC_AN0);
  4021  010474  0EB0               	movlw	low _ADC_AN0
  4022  010476  0100               	movlb	0	; () banked
  4023  010478  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  4024  01047A  0E00               	movlw	high _ADC_AN0
  4025  01047C  0100               	movlb	0	; () banked
  4026  01047E  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4027  010480  EC03  F0AB         	call	_ADC_Start	;wreg free
  4028                           
  4029                           ;main.c: 232: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4030  010484  0EB0               	movlw	low _ADC_AN0
  4031  010486  0100               	movlb	0	; () banked
  4032  010488  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  4033  01048A  0E00               	movlw	high _ADC_AN0
  4034  01048C  0100               	movlb	0	; () banked
  4035  01048E  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4036  010490  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  4037  010494  C0DC  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15616
  4038  010498  C0DD  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15616+1
  4039  01049C  C0DE  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15616+2
  4040  0104A0  C0DF  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15616+3
  4041                           
  4042                           ;main.c: 232: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4043  0104A4  C4AC  F0B9         	movff	_findClosestWall$15616,___fldiv@a
  4044  0104A8  C4AD  F0BA         	movff	_findClosestWall$15616+1,___fldiv@a+1
  4045  0104AC  C4AE  F0BB         	movff	_findClosestWall$15616+2,___fldiv@a+2
  4046  0104B0  C4AF  F0BC         	movff	_findClosestWall$15616+3,___fldiv@a+3
  4047  0104B4  0E00               	movlw	0
  4048  0104B6  0100               	movlb	0	; () banked
  4049  0104B8  6FB5               	movwf	___fldiv@b& (0+255),b
  4050  0104BA  0E00               	movlw	0
  4051  0104BC  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  4052  0104BE  0E6C               	movlw	108
  4053  0104C0  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  4054  0104C2  0E42               	movlw	66
  4055  0104C4  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  4056  0104C6  ECBC  F088         	call	___fldiv	;wreg free
  4057  0104CA  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  4058  0104CE  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  4059  0104D2  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  4060  0104D6  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  4061  0104DA  ECFF  F09C         	call	___fltol	;wreg free
  4062  0104DE  C0EE  F06F         	movff	?___fltol,_IRValue
  4063  0104E2  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  4064                           
  4065                           ;main.c: 233: if (MXK_SwitchTo(eMXK_HMI)) {
  4066  0104E6  0E01               	movlw	1
  4067  0104E8  EC51  F0B2         	call	_MXK_SwitchTo
  4068  0104EC  0900               	iorlw	0
  4069  0104EE  B4D8               	btfsc	status,2,c
  4070  0104F0  D00E               	goto	l2370
  4071                           
  4072                           ;main.c: 234: HMI_SetNumber(IRValue);
  4073  0104F2  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  4074  0104F6  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4075  0104FA  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
  4076                           
  4077                           ;main.c: 235: HMI_Render();
  4078  0104FE  ECB2  F0B2         	call	_HMI_Render	;wreg free
  4079                           
  4080                           ;main.c: 236: if (MXK_Release())
  4081  010502  EC7F  F0B5         	call	_MXK_Release	;wreg free
  4082  010506  0900               	iorlw	0
  4083  010508  A4D8               	btfss	status,2,c
  4084                           
  4085                           ;main.c: 237: MXK_Dequeue();
  4086  01050A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4087  01050E                     l2370:
  4088                           
  4089                           ;main.c: 238: }
  4090                           ;main.c: 239: if (IRValue < MinDist) {
  4091  01050E  0100               	movlb	0	; () banked
  4092  010510  51FB               	movf	_MinDist& (0+255),w,b
  4093  010512  0100               	movlb	0	; () banked
  4094  010514  5D6F               	subwf	_IRValue& (0+255),w,b
  4095  010516  0100               	movlb	0	; () banked
  4096  010518  5170               	movf	(_IRValue+1)& (0+255),w,b
  4097  01051A  0A80               	xorlw	128
  4098  01051C  0104               	movlb	4	; () banked
  4099  01051E  6FAA               	movwf	??_findClosestWall& (0+255),b
  4100  010520  0100               	movlb	0	; () banked
  4101  010522  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4102  010524  0A80               	xorlw	128
  4103  010526  0104               	movlb	4	; () banked
  4104  010528  59AA               	subwfb	??_findClosestWall& (0+255),w,b
  4105  01052A  B0D8               	btfsc	status,0,c
  4106  01052C  D036               	goto	l2371
  4107                           
  4108                           ; BSR set to: 4
  4109                           ;main.c: 240: MinDist = IRValue;
  4110  01052E  C06F  F0FB         	movff	_IRValue,_MinDist
  4111  010532  C070  F0FC         	movff	_IRValue+1,_MinDist+1
  4112                           
  4113                           ;main.c: 241: Stepstomin = StepRotate;
  4114  010536  C073  F071         	movff	_StepRotate,_Stepstomin
  4115  01053A  C074  F072         	movff	_StepRotate+1,_Stepstomin+1
  4116                           
  4117                           ; BSR set to: 4
  4118                           ;main.c: 242: angleToClosestWall = Stepstomin * 0.675;
  4119  01053E  0ECD               	movlw	205
  4120  010540  0100               	movlb	0	; () banked
  4121  010542  6FC7               	movwf	___flmul@a& (0+255),b
  4122  010544  0ECC               	movlw	204
  4123  010546  6FC8               	movwf	(___flmul@a+1)& (0+255),b
  4124  010548  0E2C               	movlw	44
  4125  01054A  6FC9               	movwf	(___flmul@a+2)& (0+255),b
  4126  01054C  0E3F               	movlw	63
  4127  01054E  6FCA               	movwf	(___flmul@a+3)& (0+255),b
  4128  010550  C071  F0B5         	movff	_Stepstomin,___xxtofl@val
  4129  010554  C072  F0B6         	movff	_Stepstomin+1,___xxtofl@val+1
  4130  010558  0100               	movlb	0	; () banked
  4131  01055A  0E00               	movlw	0
  4132  01055C  BFB6               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4133  01055E  0EFF               	movlw	-1
  4134  010560  6FB7               	movwf	(___xxtofl@val+2)& (0+255),b
  4135  010562  6FB8               	movwf	(___xxtofl@val+3)& (0+255),b
  4136  010564  0E01               	movlw	1
  4137  010566  EC57  F093         	call	___xxtofl
  4138  01056A  C0B5  F0C3         	movff	?___xxtofl,___flmul@b
  4139  01056E  C0B6  F0C4         	movff	?___xxtofl+1,___flmul@b+1
  4140  010572  C0B7  F0C5         	movff	?___xxtofl+2,___flmul@b+2
  4141  010576  C0B8  F0C6         	movff	?___xxtofl+3,___flmul@b+3
  4142  01057A  EC5A  F084         	call	___flmul	;wreg free
  4143  01057E  C0C3  F0EE         	movff	?___flmul,___fltol@f1
  4144  010582  C0C4  F0EF         	movff	?___flmul+1,___fltol@f1+1
  4145  010586  C0C5  F0F0         	movff	?___flmul+2,___fltol@f1+2
  4146  01058A  C0C6  F0F1         	movff	?___flmul+3,___fltol@f1+3
  4147  01058E  ECFF  F09C         	call	___fltol	;wreg free
  4148  010592  C0EE  F06D         	movff	?___fltol,_angleToClosestWall
  4149  010596  C0EF  F06E         	movff	?___fltol+1,_angleToClosestWall+1
  4150  01059A                     l2371:
  4151                           
  4152                           ;main.c: 243: }
  4153                           ;main.c: 244: if (MXK_SwitchTo(eMXK_Motor)) {
  4154  01059A  0E08               	movlw	8
  4155  01059C  EC51  F0B2         	call	_MXK_SwitchTo
  4156  0105A0  0900               	iorlw	0
  4157  0105A2  B4D8               	btfsc	status,2,c
  4158  0105A4  D01F               	goto	l2373
  4159                           
  4160                           ;main.c: 245: Motor_Speed(&Stepper, (100));
  4161  0105A6  0EAA               	movlw	low _Stepper
  4162  0105A8  0100               	movlb	0	; () banked
  4163  0105AA  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  4164  0105AC  0E00               	movlw	high _Stepper
  4165  0105AE  0100               	movlb	0	; () banked
  4166  0105B0  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4167  0105B2  0E00               	movlw	0
  4168  0105B4  0100               	movlb	0	; () banked
  4169  0105B6  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4170  0105B8  0E64               	movlw	100
  4171  0105BA  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  4172  0105BC  EC65  F0B4         	call	_Motor_Speed	;wreg free
  4173                           
  4174                           ;main.c: 246: Motor_Move(&Stepper, -1);
  4175  0105C0  0EAA               	movlw	low _Stepper
  4176  0105C2  0100               	movlb	0	; () banked
  4177  0105C4  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  4178  0105C6  0E00               	movlw	high _Stepper
  4179  0105C8  0100               	movlb	0	; () banked
  4180  0105CA  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4181  0105CC  0EFF               	movlw	255
  4182  0105CE  0100               	movlb	0	; () banked
  4183  0105D0  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4184  0105D2  69BA               	setf	Motor_Move@pDelta& (0+255),b
  4185  0105D4  EC69  F0B3         	call	_Motor_Move	;wreg free
  4186                           
  4187                           ;main.c: 247: if (MXK_Release())
  4188  0105D8  EC7F  F0B5         	call	_MXK_Release	;wreg free
  4189  0105DC  0900               	iorlw	0
  4190  0105DE  A4D8               	btfss	status,2,c
  4191                           
  4192                           ;main.c: 248: MXK_Dequeue();
  4193  0105E0  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4194  0105E4                     l2373:
  4195                           
  4196                           ;main.c: 249: }
  4197                           ;main.c: 250: TimerX = 10;
  4198  0105E4  0E00               	movlw	0
  4199  0105E6  0100               	movlb	0	; () banked
  4200  0105E8  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4201  0105EA  0E0A               	movlw	10
  4202  0105EC  6FF9               	movwf	_TimerX& (0+255),b
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;main.c: 251: if (TimerX > 0) {
  4206  0105EE  0100               	movlb	0	; () banked
  4207  0105F0  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4208  0105F2  D063               	goto	u14760
  4209  0105F4  0100               	movlb	0	; () banked
  4210  0105F6  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4211  0105F8  E156               	bnz	l17258
  4212  0105FA  0100               	movlb	0	; () banked
  4213  0105FC  05F9               	decf	_TimerX& (0+255),w,b
  4214  0105FE  B0D8               	btfsc	status,0,c
  4215  010600  D052               	goto	l2375
  4216  010602  D05B               	goto	u14760
  4217  010604                     l17240:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 253: ADC_Start(&ADC_AN0);
  4221  010604  0EB0               	movlw	low _ADC_AN0
  4222  010606  0100               	movlb	0	; () banked
  4223  010608  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  4224  01060A  0E00               	movlw	high _ADC_AN0
  4225  01060C  0100               	movlb	0	; () banked
  4226  01060E  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4227  010610  EC03  F0AB         	call	_ADC_Start	;wreg free
  4228                           
  4229                           ;main.c: 254: if (MXK_SwitchTo(eMXK_HMI)) {
  4230  010614  0E01               	movlw	1
  4231  010616  EC51  F0B2         	call	_MXK_SwitchTo
  4232  01061A  0900               	iorlw	0
  4233  01061C  B4D8               	btfsc	status,2,c
  4234  01061E  D00E               	goto	l2378
  4235                           
  4236                           ;main.c: 255: HMI_SetNumber(IRValue);
  4237  010620  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  4238  010624  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4239  010628  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
  4240                           
  4241                           ;main.c: 256: HMI_Render();
  4242  01062C  ECB2  F0B2         	call	_HMI_Render	;wreg free
  4243                           
  4244                           ;main.c: 257: if (MXK_Release())
  4245  010630  EC7F  F0B5         	call	_MXK_Release	;wreg free
  4246  010634  0900               	iorlw	0
  4247  010636  A4D8               	btfss	status,2,c
  4248                           
  4249                           ;main.c: 258: MXK_Dequeue();
  4250  010638  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4251  01063C                     l2378:
  4252                           
  4253                           ;main.c: 259: }
  4254                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4255  01063C  0EB0               	movlw	low _ADC_AN0
  4256  01063E  0100               	movlb	0	; () banked
  4257  010640  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  4258  010642  0E00               	movlw	high _ADC_AN0
  4259  010644  0100               	movlb	0	; () banked
  4260  010646  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4261  010648  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  4262  01064C  C0DC  F4AC         	movff	?_ADC_Voltage,_findClosestWall$15616
  4263  010650  C0DD  F4AD         	movff	?_ADC_Voltage+1,_findClosestWall$15616+1
  4264  010654  C0DE  F4AE         	movff	?_ADC_Voltage+2,_findClosestWall$15616+2
  4265  010658  C0DF  F4AF         	movff	?_ADC_Voltage+3,_findClosestWall$15616+3
  4266                           
  4267                           ;main.c: 259: }
  4268                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4269  01065C  C4AC  F0B9         	movff	_findClosestWall$15616,___fldiv@a
  4270  010660  C4AD  F0BA         	movff	_findClosestWall$15616+1,___fldiv@a+1
  4271  010664  C4AE  F0BB         	movff	_findClosestWall$15616+2,___fldiv@a+2
  4272  010668  C4AF  F0BC         	movff	_findClosestWall$15616+3,___fldiv@a+3
  4273  01066C  0E00               	movlw	0
  4274  01066E  0100               	movlb	0	; () banked
  4275  010670  6FB5               	movwf	___fldiv@b& (0+255),b
  4276  010672  0E00               	movlw	0
  4277  010674  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  4278  010676  0E6C               	movlw	108
  4279  010678  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  4280  01067A  0E42               	movlw	66
  4281  01067C  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  4282  01067E  ECBC  F088         	call	___fldiv	;wreg free
  4283  010682  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  4284  010686  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  4285  01068A  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  4286  01068E  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  4287  010692  ECFF  F09C         	call	___fltol	;wreg free
  4288  010696  C0EE  F06F         	movff	?___fltol,_IRValue
  4289  01069A  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  4290                           
  4291                           ;main.c: 261: TimerX--;
  4292  01069E  0100               	movlb	0	; () banked
  4293  0106A0  07F9               	decf	_TimerX& (0+255),f,b
  4294  0106A2  A0D8               	btfss	status,0,c
  4295  0106A4  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4296  0106A6                     l2375:
  4297  0106A6                     l17258:
  4298                           
  4299                           ; BSR set to: 0
  4300  0106A6  0100               	movlb	0	; () banked
  4301  0106A8  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4302  0106AA  D007               	goto	u14760
  4303  0106AC  0100               	movlb	0	; () banked
  4304  0106AE  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4305  0106B0  E1A9               	bnz	l17240
  4306  0106B2  0100               	movlb	0	; () banked
  4307  0106B4  05F9               	decf	_TimerX& (0+255),w,b
  4308  0106B6  B0D8               	btfsc	status,0,c
  4309  0106B8  D7A5               	goto	l2376
  4310  0106BA                     u14760:
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;main.c: 262: }
  4314                           ;main.c: 263: }
  4315                           ;main.c: 264: if (MXK_SwitchTo(eMXK_HMI)) {
  4316                           
  4317                           ; BSR set to: 0
  4318                           
  4319                           ; BSR set to: 0
  4320  0106BA  0E01               	movlw	1
  4321  0106BC  EC51  F0B2         	call	_MXK_SwitchTo
  4322  0106C0  0900               	iorlw	0
  4323  0106C2  B4D8               	btfsc	status,2,c
  4324  0106C4  D02D               	goto	l2381
  4325                           
  4326                           ;main.c: 265: printf("%c", (char)35);
  4327  0106C6  0EFB               	movlw	low STR_1
  4328  0106C8  0100               	movlb	0	; () banked
  4329  0106CA  6FCA               	movwf	printf@f& (0+255),b
  4330  0106CC  0EFF               	movlw	high STR_1
  4331  0106CE  0100               	movlb	0	; () banked
  4332  0106D0  6FCB               	movwf	(printf@f+1)& (0+255),b
  4333  0106D2  0E00               	movlw	0
  4334  0106D4  0100               	movlb	0	; () banked
  4335  0106D6  6FCD               	movwf	(?_printf+3)& (0+255),b
  4336  0106D8  0E23               	movlw	35
  4337  0106DA  6FCC               	movwf	(?_printf+2)& (0+255),b
  4338  0106DC  EC3E  F094         	call	_printf	;wreg free
  4339                           
  4340                           ;main.c: 266: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  4341  0106E0  0E59               	movlw	low STR_4
  4342  0106E2  0100               	movlb	0	; () banked
  4343  0106E4  6FCA               	movwf	printf@f& (0+255),b
  4344  0106E6  0EFF               	movlw	high STR_4
  4345  0106E8  0100               	movlb	0	; () banked
  4346  0106EA  6FCB               	movwf	(printf@f+1)& (0+255),b
  4347  0106EC  C0FB  F0CC         	movff	_MinDist,?_printf+2
  4348  0106F0  C0FC  F0CD         	movff	_MinDist+1,?_printf+3
  4349  0106F4  C06D  F0CE         	movff	_angleToClosestWall,?_printf+4
  4350  0106F8  C06E  F0CF         	movff	_angleToClosestWall+1,?_printf+5
  4351  0106FC  C08C  F0D0         	movff	_iRBumpLeft,?_printf+6
  4352  010700  0100               	movlb	0	; () banked
  4353  010702  6BD1               	clrf	(?_printf+7)& (0+255),b
  4354  010704  C08D  F0D2         	movff	_iRBumpRight,?_printf+8
  4355  010708  0100               	movlb	0	; () banked
  4356  01070A  6BD3               	clrf	(?_printf+9)& (0+255),b
  4357  01070C  EC3E  F094         	call	_printf	;wreg free
  4358                           
  4359                           ;main.c: 267: Console_Render();
  4360  010710  EC52  F091         	call	_Console_Render	;wreg free
  4361                           
  4362                           ;main.c: 268: if (MXK_Release())
  4363  010714  EC7F  F0B5         	call	_MXK_Release	;wreg free
  4364  010718  0900               	iorlw	0
  4365  01071A  A4D8               	btfss	status,2,c
  4366                           
  4367                           ;main.c: 269: MXK_Dequeue();
  4368  01071C  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4369  010720                     l2381:
  4370  010720  0100               	movlb	0	; () banked
  4371  010722  BF74               	btfsc	(_StepRotate+1)& (0+255),7,b
  4372  010724  D007               	goto	u14790
  4373  010726  0100               	movlb	0	; () banked
  4374  010728  5174               	movf	(_StepRotate+1)& (0+255),w,b
  4375  01072A  E103               	bnz	u14791
  4376  01072C  0100               	movlb	0	; () banked
  4377  01072E  0573               	decf	_StepRotate& (0+255),w,b
  4378  010730  B0D8               	btfsc	status,0,c
  4379  010732                     u14791:
  4380  010732  D69C               	goto	l2368
  4381  010734                     u14790:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 270: }
  4385                           ;main.c: 271: }
  4386                           ;main.c: 272: Motor_Speed(&Stepper, (400));
  4387                           
  4388                           ; BSR set to: 0
  4389  010734  0EAA               	movlw	low _Stepper
  4390  010736  0100               	movlb	0	; () banked
  4391  010738  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  4392  01073A  0E00               	movlw	high _Stepper
  4393  01073C  0100               	movlb	0	; () banked
  4394  01073E  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4395  010740  0E01               	movlw	1
  4396  010742  0100               	movlb	0	; () banked
  4397  010744  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4398  010746  0E90               	movlw	144
  4399  010748  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  4400  01074A  EC65  F0B4         	call	_Motor_Speed	;wreg free
  4401                           
  4402                           ;main.c: 273: Motor_Move(&Stepper, 400);
  4403  01074E  0EAA               	movlw	low _Stepper
  4404  010750  0100               	movlb	0	; () banked
  4405  010752  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  4406  010754  0E00               	movlw	high _Stepper
  4407  010756  0100               	movlb	0	; () banked
  4408  010758  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4409  01075A  0E01               	movlw	1
  4410  01075C  0100               	movlb	0	; () banked
  4411  01075E  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4412  010760  0E90               	movlw	144
  4413  010762  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  4414  010764  EC69  F0B3         	call	_Motor_Move	;wreg free
  4415                           
  4416                           ;main.c: 274: if(angleToClosestWall > 193 && angleToClosestWall < 212) {
  4417  010768  0100               	movlb	0	; () banked
  4418  01076A  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4419  01076C  D017               	goto	l2383
  4420  01076E  0100               	movlb	0	; () banked
  4421  010770  516E               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4422  010772  E105               	bnz	u14800
  4423  010774  0EC2               	movlw	194
  4424  010776  0100               	movlb	0	; () banked
  4425  010778  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  4426  01077A  A0D8               	btfss	status,0,c
  4427  01077C  D00F               	goto	l2383
  4428  01077E                     u14800:
  4429                           
  4430                           ; BSR set to: 0
  4431  01077E  0100               	movlb	0	; () banked
  4432  010780  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4433  010782  D008               	goto	u14810
  4434  010784  0100               	movlb	0	; () banked
  4435  010786  516E               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4436  010788  E109               	bnz	l17280
  4437  01078A  0ED4               	movlw	212
  4438  01078C  0100               	movlb	0	; () banked
  4439  01078E  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  4440  010790  B0D8               	btfsc	status,0,c
  4441  010792  D004               	goto	l2383
  4442  010794                     u14810:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;main.c: 275: correctOrientation = 1;
  4446  010794  0E01               	movlw	1
  4447  010796  0100               	movlb	0	; () banked
  4448  010798  6F89               	movwf	_correctOrientation& (0+255),b
  4449                           
  4450                           ;main.c: 276: }
  4451  01079A  D065               	goto	l2387
  4452  01079C                     l2383:
  4453  01079C                     l17280:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;main.c: 277: else{
  4457                           ;main.c: 278: angleToClosestWall = angleToClosestWall + 67;
  4458  01079C  0E43               	movlw	67
  4459  01079E  0100               	movlb	0	; () banked
  4460  0107A0  256D               	addwf	_angleToClosestWall& (0+255),w,b
  4461  0107A2  0100               	movlb	0	; () banked
  4462  0107A4  6F6D               	movwf	_angleToClosestWall& (0+255),b
  4463  0107A6  0E00               	movlw	0
  4464  0107A8  0100               	movlb	0	; () banked
  4465  0107AA  216E               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4466  0107AC  0100               	movlb	0	; () banked
  4467  0107AE  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  4468                           
  4469                           ;main.c: 279: if(angleToClosestWall > 270) {
  4470  0107B0  0100               	movlb	0	; () banked
  4471  0107B2  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4472  0107B4  D012               	goto	l2385
  4473  0107B6  0E0F               	movlw	15
  4474  0107B8  0100               	movlb	0	; () banked
  4475  0107BA  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  4476  0107BC  0E01               	movlw	1
  4477  0107BE  0100               	movlb	0	; () banked
  4478  0107C0  596E               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  4479  0107C2  A0D8               	btfss	status,0,c
  4480  0107C4  D00A               	goto	l2385
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 280: angleToClosestWall = angleToClosestWall - 270;
  4484  0107C6  0EF2               	movlw	242
  4485  0107C8  0100               	movlb	0	; () banked
  4486  0107CA  256D               	addwf	_angleToClosestWall& (0+255),w,b
  4487  0107CC  0100               	movlb	0	; () banked
  4488  0107CE  6F6D               	movwf	_angleToClosestWall& (0+255),b
  4489  0107D0  0EFE               	movlw	254
  4490  0107D2  0100               	movlb	0	; () banked
  4491  0107D4  216E               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4492  0107D6  0100               	movlb	0	; () banked
  4493  0107D8  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  4494  0107DA                     l2385:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;main.c: 281: }
  4498                           ;main.c: 282: angleToClosestWall = 270 - angleToClosestWall;
  4499  0107DA  C06D  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4500  0107DE  C06E  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4501  0107E2  0104               	movlb	4	; () banked
  4502  0107E4  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4503  0107E6  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4504  0107E8  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4505  0107EA  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4506  0107EC  0E0E               	movlw	14
  4507  0107EE  0104               	movlb	4	; () banked
  4508  0107F0  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4509  0107F2  0100               	movlb	0	; () banked
  4510  0107F4  6F6D               	movwf	_angleToClosestWall& (0+255),b
  4511  0107F6  0E01               	movlw	1
  4512  0107F8  0104               	movlb	4	; () banked
  4513  0107FA  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4514  0107FC  0100               	movlb	0	; () banked
  4515  0107FE  6F6E               	movwf	(_angleToClosestWall+1)& (0+255),b
  4516                           
  4517                           ;main.c: 283: if(angleToClosestWall < 135) {
  4518  010800  0100               	movlb	0	; () banked
  4519  010802  BF6E               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4520  010804  D008               	goto	u14830
  4521  010806  0100               	movlb	0	; () banked
  4522  010808  516E               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4523  01080A  E112               	bnz	l17286
  4524  01080C  0E87               	movlw	135
  4525  01080E  0100               	movlb	0	; () banked
  4526  010810  5D6D               	subwf	_angleToClosestWall& (0+255),w,b
  4527  010812  B0D8               	btfsc	status,0,c
  4528  010814  D00D               	goto	l2386
  4529  010816                     u14830:
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;main.c: 284: irobot_rotate(0, angleToClosestWall, 200);
  4533  010816  C06D  F0D2         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  4534  01081A  C06E  F0D3         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  4535  01081E  0E00               	movlw	0
  4536  010820  0100               	movlb	0	; () banked
  4537  010822  6FD5               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4538  010824  0EC8               	movlw	200
  4539  010826  6FD4               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4540  010828  0E00               	movlw	0
  4541  01082A  EC79  F09C         	call	_irobot_rotate
  4542                           
  4543                           ;main.c: 285: }
  4544  01082E  D01B               	goto	l2387
  4545  010830                     l2386:
  4546  010830                     l17286:
  4547                           
  4548                           ;main.c: 286: else{
  4549                           ;main.c: 287: irobot_rotate(0, 270 - angleToClosestWall, -200);
  4550  010830  C06D  F4AA         	movff	_angleToClosestWall,??_findClosestWall
  4551  010834  C06E  F4AB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4552  010838  0104               	movlb	4	; () banked
  4553  01083A  1FAA               	comf	??_findClosestWall& (0+255),f,b
  4554  01083C  1FAB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4555  01083E  4BAA               	infsnz	??_findClosestWall& (0+255),f,b
  4556  010840  2BAB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4557  010842  0E0E               	movlw	14
  4558  010844  0104               	movlb	4	; () banked
  4559  010846  25AA               	addwf	??_findClosestWall& (0+255),w,b
  4560  010848  0100               	movlb	0	; () banked
  4561  01084A  6FD2               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4562  01084C  0E01               	movlw	1
  4563  01084E  0104               	movlb	4	; () banked
  4564  010850  21AB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4565  010852  0100               	movlb	0	; () banked
  4566  010854  6FD3               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4567  010856  0EFF               	movlw	255
  4568  010858  0100               	movlb	0	; () banked
  4569  01085A  6FD5               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4570  01085C  0E38               	movlw	56
  4571  01085E  6FD4               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4572  010860  0E00               	movlw	0
  4573  010862  EC79  F09C         	call	_irobot_rotate
  4574  010866                     l2387:
  4575                           
  4576                           ;main.c: 288: }
  4577                           ;main.c: 289: }
  4578                           ;main.c: 290: delay_ms(200);
  4579  010866  0E00               	movlw	0
  4580  010868  0100               	movlb	0	; () banked
  4581  01086A  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  4582  01086C  0EC8               	movlw	200
  4583  01086E  6FB5               	movwf	delay_ms@ms& (0+255),b
  4584  010870  EC39  F0AE         	call	_delay_ms	;wreg free
  4585  010874                     l2365:
  4586  010874  0100               	movlb	0	; () banked
  4587  010876  5189               	movf	_correctOrientation& (0+255),w,b
  4588  010878  0100               	movlb	0	; () banked
  4589  01087A  B4D8               	btfsc	status,2,c
  4590  01087C  D5D3               	goto	l2366
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;main.c: 291: }
  4594                           ;main.c: 292: Motor_Speed(&Stepper, (400));
  4595                           
  4596                           ; BSR set to: 0
  4597  01087E  0EAA               	movlw	low _Stepper
  4598  010880  0100               	movlb	0	; () banked
  4599  010882  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  4600  010884  0E00               	movlw	high _Stepper
  4601  010886  0100               	movlb	0	; () banked
  4602  010888  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4603  01088A  0E01               	movlw	1
  4604  01088C  0100               	movlb	0	; () banked
  4605  01088E  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4606  010890  0E90               	movlw	144
  4607  010892  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  4608  010894  EC65  F0B4         	call	_Motor_Speed	;wreg free
  4609                           
  4610                           ;main.c: 293: Motor_Move(&Stepper, -100);
  4611  010898  0EAA               	movlw	low _Stepper
  4612  01089A  0100               	movlb	0	; () banked
  4613  01089C  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  4614  01089E  0E00               	movlw	high _Stepper
  4615  0108A0  0100               	movlb	0	; () banked
  4616  0108A2  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4617  0108A4  0EFF               	movlw	255
  4618  0108A6  0100               	movlb	0	; () banked
  4619  0108A8  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4620  0108AA  0E9C               	movlw	156
  4621  0108AC  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  4622  0108AE  EC69  F0B3         	call	_Motor_Move	;wreg free
  4623  0108B2  0012               	return		;funcret
  4624  0108B4                     __end_of_findClosestWall:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           fsr1h	equ	0xFE2
  4634                           fsr1l	equ	0xFE1
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function _correct_distance *****************
  4638 ;; Defined at:
  4639 ;;		line 312 in file "main.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  _d3             2    8[BANK1 ] unsigned short 
  4644 ;;  _d2             2    6[BANK1 ] unsigned short 
  4645 ;;  _d1             2    4[BANK1 ] unsigned short 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;Total ram usage:        6 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:   14
  4662 ;; This function calls:
  4663 ;;		_irobot_move
  4664 ;;		_measureAndDisplayDistance
  4665 ;; This function is called by:
  4666 ;;		_mode4
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text3
  4671  013EE8                     __ptext3:
  4672                           	opt stack 0
  4673  013EE8                     _correct_distance:
  4674                           	opt stack 15
  4675                           
  4676                           ;main.c: 313: UINT16 _d1 = dummy1 -8, _d2=dummy1-3, _d3=dummy1+3;
  4677                           
  4678                           ;incstack = 0
  4679  013EE8  0EF8               	movlw	248
  4680  013EEA  0100               	movlb	0	; () banked
  4681  013EEC  2569               	addwf	_dummy1& (0+255),w,b
  4682  013EEE  0101               	movlb	1	; () banked
  4683  013EF0  6F04               	movwf	correct_distance@_d1& (0+255),b
  4684  013EF2  0EFF               	movlw	255
  4685  013EF4  0100               	movlb	0	; () banked
  4686  013EF6  216A               	addwfc	(_dummy1+1)& (0+255),w,b
  4687  013EF8  0101               	movlb	1	; () banked
  4688  013EFA  6F05               	movwf	(correct_distance@_d1+1)& (0+255),b
  4689  013EFC  0EFD               	movlw	253
  4690  013EFE  0100               	movlb	0	; () banked
  4691  013F00  2569               	addwf	_dummy1& (0+255),w,b
  4692  013F02  0101               	movlb	1	; () banked
  4693  013F04  6F06               	movwf	correct_distance@_d2& (0+255),b
  4694  013F06  0EFF               	movlw	255
  4695  013F08  0100               	movlb	0	; () banked
  4696  013F0A  216A               	addwfc	(_dummy1+1)& (0+255),w,b
  4697  013F0C  0101               	movlb	1	; () banked
  4698  013F0E  6F07               	movwf	(correct_distance@_d2+1)& (0+255),b
  4699  013F10  0E03               	movlw	3
  4700  013F12  0100               	movlb	0	; () banked
  4701  013F14  2569               	addwf	_dummy1& (0+255),w,b
  4702  013F16  0101               	movlb	1	; () banked
  4703  013F18  6F08               	movwf	correct_distance@_d3& (0+255),b
  4704  013F1A  0E00               	movlw	0
  4705  013F1C  0100               	movlb	0	; () banked
  4706  013F1E  216A               	addwfc	(_dummy1+1)& (0+255),w,b
  4707  013F20  0101               	movlb	1	; () banked
  4708  013F22  6F09               	movwf	(correct_distance@_d3+1)& (0+255),b
  4709                           
  4710                           ; BSR set to: 1
  4711                           ;main.c: 314: measureAndDisplayDistance();
  4712  013F24  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  4713                           
  4714                           ;main.c: 315: if(IRValue < _d1) {
  4715  013F28  0101               	movlb	1	; () banked
  4716  013F2A  5104               	movf	correct_distance@_d1& (0+255),w,b
  4717  013F2C  0100               	movlb	0	; () banked
  4718  013F2E  5D6F               	subwf	_IRValue& (0+255),w,b
  4719  013F30  0101               	movlb	1	; () banked
  4720  013F32  5105               	movf	(correct_distance@_d1+1)& (0+255),w,b
  4721  013F34  0100               	movlb	0	; () banked
  4722  013F36  5970               	subwfb	(_IRValue+1)& (0+255),w,b
  4723  013F38  B0D8               	btfsc	status,0,c
  4724  013F3A  D00E               	goto	l2397
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 316: irobot_move(0,200,-500);
  4728  013F3C  0E00               	movlw	0
  4729  013F3E  0100               	movlb	0	; () banked
  4730  013F40  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4731  013F42  0EC8               	movlw	200
  4732  013F44  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  4733  013F46  0EFE               	movlw	254
  4734  013F48  0100               	movlb	0	; () banked
  4735  013F4A  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4736  013F4C  0E0C               	movlw	12
  4737  013F4E  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4738  013F50  0E00               	movlw	0
  4739  013F52  EC73  F0A5         	call	_irobot_move
  4740                           
  4741                           ;main.c: 317: }
  4742  013F56  0012               	return	
  4743  013F58                     l2397:
  4744                           
  4745                           ;main.c: 318: else if(IRValue < _d2) {
  4746  013F58  0101               	movlb	1	; () banked
  4747  013F5A  5106               	movf	correct_distance@_d2& (0+255),w,b
  4748  013F5C  0100               	movlb	0	; () banked
  4749  013F5E  5D6F               	subwf	_IRValue& (0+255),w,b
  4750  013F60  0101               	movlb	1	; () banked
  4751  013F62  5107               	movf	(correct_distance@_d2+1)& (0+255),w,b
  4752  013F64  0100               	movlb	0	; () banked
  4753  013F66  5970               	subwfb	(_IRValue+1)& (0+255),w,b
  4754  013F68  B0D8               	btfsc	status,0,c
  4755  013F6A  D00E               	goto	l2399
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;main.c: 319: irobot_move(0,200,-1000);
  4759  013F6C  0E00               	movlw	0
  4760  013F6E  0100               	movlb	0	; () banked
  4761  013F70  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4762  013F72  0EC8               	movlw	200
  4763  013F74  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  4764  013F76  0EFC               	movlw	252
  4765  013F78  0100               	movlb	0	; () banked
  4766  013F7A  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4767  013F7C  0E18               	movlw	24
  4768  013F7E  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4769  013F80  0E00               	movlw	0
  4770  013F82  EC73  F0A5         	call	_irobot_move
  4771                           
  4772                           ;main.c: 320: }
  4773  013F86  0012               	return	
  4774  013F88                     l2399:
  4775                           
  4776                           ;main.c: 321: else if(IRValue > _d3) {
  4777  013F88  0100               	movlb	0	; () banked
  4778  013F8A  516F               	movf	_IRValue& (0+255),w,b
  4779  013F8C  0101               	movlb	1	; () banked
  4780  013F8E  5D08               	subwf	correct_distance@_d3& (0+255),w,b
  4781  013F90  0100               	movlb	0	; () banked
  4782  013F92  5170               	movf	(_IRValue+1)& (0+255),w,b
  4783  013F94  0101               	movlb	1	; () banked
  4784  013F96  5909               	subwfb	(correct_distance@_d3+1)& (0+255),w,b
  4785  013F98  B0D8               	btfsc	status,0,c
  4786  013F9A  D00E               	goto	l2401
  4787                           
  4788                           ; BSR set to: 1
  4789                           ;main.c: 322: irobot_move(0,200,750);
  4790  013F9C  0E00               	movlw	0
  4791  013F9E  0100               	movlb	0	; () banked
  4792  013FA0  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4793  013FA2  0EC8               	movlw	200
  4794  013FA4  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  4795  013FA6  0E02               	movlw	2
  4796  013FA8  0100               	movlb	0	; () banked
  4797  013FAA  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4798  013FAC  0EEE               	movlw	238
  4799  013FAE  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4800  013FB0  0E00               	movlw	0
  4801  013FB2  EC73  F0A5         	call	_irobot_move
  4802                           
  4803                           ;main.c: 323: }
  4804  013FB6  0012               	return	
  4805  013FB8                     l2401:
  4806                           
  4807                           ;main.c: 324: else{
  4808                           ;main.c: 325: irobot_move(0,200,1000);
  4809  013FB8  0E00               	movlw	0
  4810  013FBA  0100               	movlb	0	; () banked
  4811  013FBC  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  4812  013FBE  0EC8               	movlw	200
  4813  013FC0  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  4814  013FC2  0E03               	movlw	3
  4815  013FC4  0100               	movlb	0	; () banked
  4816  013FC6  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4817  013FC8  0EE8               	movlw	232
  4818  013FCA  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  4819  013FCC  0E00               	movlw	0
  4820  013FCE  EC73  F0A5         	call	_irobot_move
  4821  013FD2  0012               	return	
  4822  013FD4                     __end_of_correct_distance:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _mode3 *****************
  4836 ;; Defined at:
  4837 ;;		line 422 in file "main.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;Total ram usage:        0 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:   17
  4858 ;; This function calls:
  4859 ;;		_irobot_song_play
  4860 ;;		_move_and_rotate
  4861 ;;		_safeToGo
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text4
  4868  016460                     __ptext4:
  4869                           	opt stack 0
  4870  016460                     _mode3:
  4871                           	opt stack 13
  4872                           
  4873                           ;main.c: 423: safeToGo();
  4874                           
  4875                           ;incstack = 0
  4876  016460  ECEF  F0B0         	call	_safeToGo	;wreg free
  4877                           
  4878                           ;main.c: 424: dist = 0;
  4879  016464  0E00               	movlw	0
  4880  016466  0100               	movlb	0	; () banked
  4881  016468  6F6C               	movwf	(_dist+1)& (0+255),b
  4882  01646A  0E00               	movlw	0
  4883  01646C  6F6B               	movwf	_dist& (0+255),b
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;main.c: 426: corner = 1;
  4887  01646E  0E00               	movlw	0
  4888  016470  0103               	movlb	3	; () banked
  4889  016472  6FFF               	movwf	(_corner+1)& (0+255),b
  4890  016474  0E01               	movlw	1
  4891  016476  6FFE               	movwf	_corner& (0+255),b
  4892                           
  4893                           ;main.c: 427: move_and_rotate();
  4894  016478  EC0A  F0A2         	call	_move_and_rotate	;wreg free
  4895                           
  4896                           ;main.c: 428: corner++;
  4897  01647C  0103               	movlb	3	; () banked
  4898  01647E  4BFE               	infsnz	_corner& (0+255),f,b
  4899  016480  2BFF               	incf	(_corner+1)& (0+255),f,b
  4900                           
  4901                           ; BSR set to: 3
  4902                           ;main.c: 429: move_and_rotate();
  4903  016482  EC0A  F0A2         	call	_move_and_rotate	;wreg free
  4904                           
  4905                           ;main.c: 430: corner++;
  4906  016486  0103               	movlb	3	; () banked
  4907  016488  4BFE               	infsnz	_corner& (0+255),f,b
  4908  01648A  2BFF               	incf	(_corner+1)& (0+255),f,b
  4909                           
  4910                           ; BSR set to: 3
  4911                           ;main.c: 431: move_and_rotate();
  4912  01648C  EC0A  F0A2         	call	_move_and_rotate	;wreg free
  4913                           
  4914                           ;main.c: 432: corner++;
  4915  016490  0103               	movlb	3	; () banked
  4916  016492  4BFE               	infsnz	_corner& (0+255),f,b
  4917  016494  2BFF               	incf	(_corner+1)& (0+255),f,b
  4918                           
  4919                           ;main.c: 433: move_and_rotate();
  4920  016496  EC0A  F0A2         	call	_move_and_rotate	;wreg free
  4921                           
  4922                           ;main.c: 435: irobot_song_play(0);
  4923  01649A  0E00               	movlw	0
  4924  01649C  EC08  F0B6         	call	_irobot_song_play
  4925  0164A0  0012               	return		;funcret
  4926  0164A2                     __end_of_mode3:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           postinc0	equ	0xFEE
  4933                           wreg	equ	0xFE8
  4934                           postdec1	equ	0xFE5
  4935                           fsr1h	equ	0xFE2
  4936                           fsr1l	equ	0xFE1
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _move_and_rotate *****************
  4940 ;; Defined at:
  4941 ;;		line 133 in file "main.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;Total ram usage:        1 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:   14
  4962 ;; This function calls:
  4963 ;;		_Console_Render
  4964 ;;		___wmul
  4965 ;;		_delay_ms
  4966 ;;		_irobot_move_straight
  4967 ;;		_irobot_rotate
  4968 ;;		_irobot_stop_motion
  4969 ;;		_measureAndDisplayDistance
  4970 ;;		_printf
  4971 ;;		_update_distance
  4972 ;; This function is called by:
  4973 ;;		_mode3
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text5
  4978  014414                     __ptext5:
  4979                           	opt stack 0
  4980  014414                     _move_and_rotate:
  4981                           	opt stack 15
  4982                           
  4983                           ;main.c: 135: irobot_move_straight(100);
  4984                           
  4985                           ;incstack = 0
  4986  014414  0E00               	movlw	0
  4987  014416  0100               	movlb	0	; () banked
  4988  014418  6FCF               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4989  01441A  0E64               	movlw	100
  4990  01441C  6FCE               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4991  01441E  ECA8  F0B5         	call	_irobot_move_straight	;wreg free
  4992                           
  4993                           ;main.c: 138: while (dist < (corner * 1000)) {
  4994  014422  D027               	goto	l2340
  4995  014424                     
  4996                           ;main.c: 139: update_distance();
  4997  014424  EC1C  F0B6         	call	_update_distance	;wreg free
  4998                           
  4999                           ;main.c: 140: dist += iRDistance;
  5000  014428  0100               	movlb	0	; () banked
  5001  01442A  517D               	movf	_iRDistance& (0+255),w,b
  5002  01442C  0100               	movlb	0	; () banked
  5003  01442E  276B               	addwf	_dist& (0+255),f,b
  5004  014430  0100               	movlb	0	; () banked
  5005  014432  517E               	movf	(_iRDistance+1)& (0+255),w,b
  5006  014434  0100               	movlb	0	; () banked
  5007  014436  236C               	addwfc	(_dist+1)& (0+255),f,b
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;main.c: 141: printf("%c", (char)35);
  5011  014438  0EFB               	movlw	low STR_1
  5012  01443A  0100               	movlb	0	; () banked
  5013  01443C  6FCA               	movwf	printf@f& (0+255),b
  5014  01443E  0EFF               	movlw	high STR_1
  5015  014440  0100               	movlb	0	; () banked
  5016  014442  6FCB               	movwf	(printf@f+1)& (0+255),b
  5017  014444  0E00               	movlw	0
  5018  014446  0100               	movlb	0	; () banked
  5019  014448  6FCD               	movwf	(?_printf+3)& (0+255),b
  5020  01444A  0E23               	movlw	35
  5021  01444C  6FCC               	movwf	(?_printf+2)& (0+255),b
  5022  01444E  EC3E  F094         	call	_printf	;wreg free
  5023                           
  5024                           ;main.c: 142: printf("Distance: %d\n", dist);
  5025  014452  0EED               	movlw	low STR_2
  5026  014454  0100               	movlb	0	; () banked
  5027  014456  6FCA               	movwf	printf@f& (0+255),b
  5028  014458  0EFF               	movlw	high STR_2
  5029  01445A  0100               	movlb	0	; () banked
  5030  01445C  6FCB               	movwf	(printf@f+1)& (0+255),b
  5031  01445E  C06B  F0CC         	movff	_dist,?_printf+2
  5032  014462  C06C  F0CD         	movff	_dist+1,?_printf+3
  5033  014466  EC3E  F094         	call	_printf	;wreg free
  5034                           
  5035                           ;main.c: 143: Console_Render();
  5036  01446A  EC52  F091         	call	_Console_Render	;wreg free
  5037                           
  5038                           ;main.c: 144: measureAndDisplayDistance();
  5039  01446E  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  5040  014472                     l2340:
  5041  014472  C3FE  F0B5         	movff	_corner,___wmul@multiplier
  5042  014476  C3FF  F0B6         	movff	_corner+1,___wmul@multiplier+1
  5043  01447A  0E03               	movlw	3
  5044  01447C  0100               	movlb	0	; () banked
  5045  01447E  6FB8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5046  014480  0EE8               	movlw	232
  5047  014482  6FB7               	movwf	___wmul@multiplicand& (0+255),b
  5048  014484  EC86  F0B3         	call	___wmul	;wreg free
  5049  014488  0100               	movlb	0	; () banked
  5050  01448A  51B5               	movf	?___wmul& (0+255),w,b
  5051  01448C  0100               	movlb	0	; () banked
  5052  01448E  5D6B               	subwf	_dist& (0+255),w,b
  5053  014490  0100               	movlb	0	; () banked
  5054  014492  516C               	movf	(_dist+1)& (0+255),w,b
  5055  014494  0A80               	xorlw	128
  5056  014496  0100               	movlb	0	; () banked
  5057  014498  6FF8               	movwf	??_move_and_rotate& (0+255),b
  5058  01449A  0100               	movlb	0	; () banked
  5059  01449C  51B6               	movf	(?___wmul+1)& (0+255),w,b
  5060  01449E  0A80               	xorlw	128
  5061  0144A0  0100               	movlb	0	; () banked
  5062  0144A2  59F8               	subwfb	??_move_and_rotate& (0+255),w,b
  5063  0144A4  A0D8               	btfss	status,0,c
  5064  0144A6  D7BE               	goto	l2341
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;main.c: 145: }
  5068                           ;main.c: 148: irobot_stop_motion(0);
  5069                           
  5070                           ; BSR set to: 0
  5071  0144A8  0E00               	movlw	0
  5072  0144AA  ECA5  F0B1         	call	_irobot_stop_motion
  5073                           
  5074                           ;main.c: 149: delay_ms(100);
  5075  0144AE  0E00               	movlw	0
  5076  0144B0  0100               	movlb	0	; () banked
  5077  0144B2  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  5078  0144B4  0E64               	movlw	100
  5079  0144B6  6FB5               	movwf	delay_ms@ms& (0+255),b
  5080  0144B8  EC39  F0AE         	call	_delay_ms	;wreg free
  5081                           
  5082                           ;main.c: 150: irobot_rotate(0, 68, 200);
  5083  0144BC  0E00               	movlw	0
  5084  0144BE  0100               	movlb	0	; () banked
  5085  0144C0  6FD3               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  5086  0144C2  0E44               	movlw	68
  5087  0144C4  6FD2               	movwf	irobot_rotate@rotateAngle& (0+255),b
  5088  0144C6  0E00               	movlw	0
  5089  0144C8  0100               	movlb	0	; () banked
  5090  0144CA  6FD5               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  5091  0144CC  0EC8               	movlw	200
  5092  0144CE  6FD4               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  5093  0144D0  0E00               	movlw	0
  5094  0144D2  EC79  F09C         	call	_irobot_rotate
  5095                           
  5096                           ;main.c: 151: delay_ms(100);
  5097  0144D6  0E00               	movlw	0
  5098  0144D8  0100               	movlb	0	; () banked
  5099  0144DA  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  5100  0144DC  0E64               	movlw	100
  5101  0144DE  6FB5               	movwf	delay_ms@ms& (0+255),b
  5102  0144E0  EC39  F0AE         	call	_delay_ms	;wreg free
  5103  0144E4  0012               	return		;funcret
  5104  0144E6                     __end_of_move_and_rotate:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1h	equ	0xFE2
  5114                           fsr1l	equ	0xFE1
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _irobot_rotate *****************
  5118 ;; Defined at:
  5119 ;;		line 301 in file "Library/iRobotSerial.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  isScript        1    wreg     unsigned char 
  5122 ;;  rotateAngle     2   29[BANK0 ] short 
  5123 ;;  rotateSpeed     2   31[BANK0 ] short 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  isScript        1   35[BANK0 ] unsigned char 
  5126 ;;  angleTotal      2   38[BANK0 ] short 
  5127 ;;  rotateDirect    2   36[BANK0 ] short 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:       11 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:   11
  5144 ;; This function calls:
  5145 ;;		_irobot_move
  5146 ;;		_irobot_stop_motion
  5147 ;;		_update_angle
  5148 ;; This function is called by:
  5149 ;;		_move_and_rotate
  5150 ;;		_findClosestWall
  5151 ;;		_irobot_rotate_to
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text6
  5156  0138F2                     __ptext6:
  5157                           	opt stack 0
  5158  0138F2                     _irobot_rotate:
  5159                           	opt stack 17
  5160                           
  5161                           ;incstack = 0
  5162                           ;irobot_rotate@isScript stored from wreg
  5163  0138F2  0100               	movlb	0	; () banked
  5164  0138F4  6FD8               	movwf	irobot_rotate@isScript& (0+255),b
  5165                           
  5166                           ;iRobotSerial.c: 302: INT16 angleTotal = 0;
  5167  0138F6  0E00               	movlw	0
  5168  0138F8  0100               	movlb	0	; () banked
  5169  0138FA  6FDC               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  5170  0138FC  0E00               	movlw	0
  5171  0138FE  6FDB               	movwf	irobot_rotate@angleTotal& (0+255),b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;iRobotSerial.c: 303: INT16 rotateDirection;
  5175                           ;iRobotSerial.c: 305: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  5176  013900  0100               	movlb	0	; () banked
  5177  013902  BFD3               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  5178  013904  D00D               	goto	l2156
  5179  013906  0100               	movlb	0	; () banked
  5180  013908  51D3               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5181  01390A  E104               	bnz	u11440
  5182  01390C  0100               	movlb	0	; () banked
  5183  01390E  05D2               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  5184  013910  A0D8               	btfss	status,0,c
  5185  013912  D006               	goto	l2156
  5186  013914                     u11440:
  5187                           
  5188                           ; BSR set to: 0
  5189  013914  0E00               	movlw	0
  5190  013916  0100               	movlb	0	; () banked
  5191  013918  6FDA               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  5192  01391A  0E01               	movlw	1
  5193  01391C  6FD9               	movwf	irobot_rotate@rotateDirection& (0+255),b
  5194  01391E  D003               	goto	l2158
  5195  013920                     l2156:
  5196                           
  5197                           ; BSR set to: 0
  5198  013920  0100               	movlb	0	; () banked
  5199  013922  69D2               	setf	irobot_rotate@rotateAngle& (0+255),b
  5200  013924  69D3               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  5201  013926                     l2158:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;iRobotSerial.c: 306: if (isScript) {
  5205                           
  5206                           ; BSR set to: 0
  5207  013926  0100               	movlb	0	; () banked
  5208  013928  51D8               	movf	irobot_rotate@isScript& (0+255),w,b
  5209  01392A  0100               	movlb	0	; () banked
  5210  01392C  B4D8               	btfsc	status,2,c
  5211  01392E  D00C               	goto	l2159
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;iRobotSerial.c: 307: irobot_move(1, rotateSpeed, rotateDirection);
  5215  013930  C0D4  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5216  013934  C0D5  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5217  013938  C0D9  F0C7         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5218  01393C  C0DA  F0C8         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5219  013940  0E01               	movlw	1
  5220  013942  EC73  F0A5         	call	_irobot_move
  5221                           
  5222                           ;iRobotSerial.c: 308: } else {
  5223  013946  0012               	return	
  5224  013948                     l2159:
  5225                           
  5226                           ;iRobotSerial.c: 309: irobot_move(0, rotateSpeed, rotateDirection);
  5227  013948  C0D4  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5228  01394C  C0D5  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5229  013950  C0D9  F0C7         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5230  013954  C0DA  F0C8         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5231  013958  0E00               	movlw	0
  5232  01395A  EC73  F0A5         	call	_irobot_move
  5233                           
  5234                           ;iRobotSerial.c: 310: if (rotateSpeed > 0) {
  5235  01395E  0100               	movlb	0	; () banked
  5236  013960  BFD5               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5237  013962  D022               	goto	u11470
  5238  013964  0100               	movlb	0	; () banked
  5239  013966  51D5               	movf	(irobot_rotate@rotateSpeed+1)& (0+255),w,b
  5240  013968  E10F               	bnz	l14622
  5241  01396A  0100               	movlb	0	; () banked
  5242  01396C  05D4               	decf	irobot_rotate@rotateSpeed& (0+255),w,b
  5243  01396E  B0D8               	btfsc	status,0,c
  5244  013970  D00B               	goto	l2162
  5245  013972  D01A               	goto	u11470
  5246  013974                     
  5247                           ; BSR set to: 0
  5248                           ;iRobotSerial.c: 312: update_angle();
  5249                           
  5250                           ; BSR set to: 0
  5251  013974  EC25  F0B6         	call	_update_angle	;wreg free
  5252                           
  5253                           ;iRobotSerial.c: 313: angleTotal += iRAngle;
  5254  013978  0100               	movlb	0	; () banked
  5255  01397A  517B               	movf	_iRAngle& (0+255),w,b
  5256  01397C  0100               	movlb	0	; () banked
  5257  01397E  27DB               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5258  013980  0100               	movlb	0	; () banked
  5259  013982  517C               	movf	(_iRAngle+1)& (0+255),w,b
  5260  013984  0100               	movlb	0	; () banked
  5261  013986  23DC               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5262  013988                     l2162:
  5263  013988                     l14622:
  5264                           
  5265                           ; BSR set to: 0
  5266  013988  0100               	movlb	0	; () banked
  5267  01398A  51D2               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5268  01398C  0100               	movlb	0	; () banked
  5269  01398E  5DDB               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5270  013990  0100               	movlb	0	; () banked
  5271  013992  51DC               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5272  013994  0A80               	xorlw	128
  5273  013996  0100               	movlb	0	; () banked
  5274  013998  6FD6               	movwf	??_irobot_rotate& (0+255),b
  5275  01399A  0100               	movlb	0	; () banked
  5276  01399C  51D3               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5277  01399E  0A80               	xorlw	128
  5278  0139A0  0100               	movlb	0	; () banked
  5279  0139A2  59D6               	subwfb	??_irobot_rotate& (0+255),w,b
  5280  0139A4  A0D8               	btfss	status,0,c
  5281  0139A6  D7E6               	goto	l2163
  5282  0139A8                     u11470:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;iRobotSerial.c: 314: }
  5286                           ;iRobotSerial.c: 315: }
  5287                           ;iRobotSerial.c: 316: if (rotateSpeed < 0) {
  5288                           
  5289                           ; BSR set to: 0
  5290                           
  5291                           ; BSR set to: 0
  5292  0139A8  0100               	movlb	0	; () banked
  5293  0139AA  BFD5               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5294  0139AC  D014               	goto	l2166
  5295  0139AE  D023               	goto	u11490
  5296  0139B0                     
  5297                           ; BSR set to: 0
  5298                           ;iRobotSerial.c: 318: update_angle();
  5299                           
  5300                           ; BSR set to: 0
  5301  0139B0  EC25  F0B6         	call	_update_angle	;wreg free
  5302                           
  5303                           ;iRobotSerial.c: 319: angleTotal += -iRAngle;
  5304  0139B4  C07B  F0D6         	movff	_iRAngle,??_irobot_rotate
  5305  0139B8  C07C  F0D7         	movff	_iRAngle+1,??_irobot_rotate+1
  5306  0139BC  0100               	movlb	0	; () banked
  5307  0139BE  1FD6               	comf	??_irobot_rotate& (0+255),f,b
  5308  0139C0  1FD7               	comf	(??_irobot_rotate+1)& (0+255),f,b
  5309  0139C2  4BD6               	infsnz	??_irobot_rotate& (0+255),f,b
  5310  0139C4  2BD7               	incf	(??_irobot_rotate+1)& (0+255),f,b
  5311  0139C6  0100               	movlb	0	; () banked
  5312  0139C8  51D6               	movf	??_irobot_rotate& (0+255),w,b
  5313  0139CA  0100               	movlb	0	; () banked
  5314  0139CC  27DB               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5315  0139CE  0100               	movlb	0	; () banked
  5316  0139D0  51D7               	movf	(??_irobot_rotate+1)& (0+255),w,b
  5317  0139D2  0100               	movlb	0	; () banked
  5318  0139D4  23DC               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5319  0139D6                     l2166:
  5320                           
  5321                           ; BSR set to: 0
  5322                           
  5323                           ; BSR set to: 0
  5324  0139D6  0100               	movlb	0	; () banked
  5325  0139D8  51D2               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5326  0139DA  0100               	movlb	0	; () banked
  5327  0139DC  5DDB               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5328  0139DE  0100               	movlb	0	; () banked
  5329  0139E0  51DC               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5330  0139E2  0A80               	xorlw	128
  5331  0139E4  0100               	movlb	0	; () banked
  5332  0139E6  6FD6               	movwf	??_irobot_rotate& (0+255),b
  5333  0139E8  0100               	movlb	0	; () banked
  5334  0139EA  51D3               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5335  0139EC  0A80               	xorlw	128
  5336  0139EE  0100               	movlb	0	; () banked
  5337  0139F0  59D6               	subwfb	??_irobot_rotate& (0+255),w,b
  5338  0139F2  A0D8               	btfss	status,0,c
  5339  0139F4  D7DD               	goto	l2167
  5340  0139F6                     u11490:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;iRobotSerial.c: 320: }
  5344                           ;iRobotSerial.c: 321: }
  5345                           ;iRobotSerial.c: 322: irobot_stop_motion(0);
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ; BSR set to: 0
  5350  0139F6  0E00               	movlw	0
  5351  0139F8  ECA5  F0B1         	call	_irobot_stop_motion
  5352  0139FC  0012               	return	
  5353  0139FE                     __end_of_irobot_rotate:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postdec1	equ	0xFE5
  5362                           fsr1h	equ	0xFE2
  5363                           fsr1l	equ	0xFE1
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _mode2 *****************
  5367 ;; Defined at:
  5368 ;;		line 392 in file "main.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;Total ram usage:        0 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:   17
  5389 ;; This function calls:
  5390 ;;		_Console_Render
  5391 ;;		_MXK_Dequeue
  5392 ;;		_MXK_Release
  5393 ;;		_MXK_SwitchTo
  5394 ;;		_irobot_move_straight
  5395 ;;		_irobot_song_play
  5396 ;;		_irobot_stop_motion
  5397 ;;		_measureAndDisplayDistance
  5398 ;;		_printf
  5399 ;;		_safeToGo
  5400 ;;		_update_distance
  5401 ;; This function is called by:
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text7
  5407  013DFA                     __ptext7:
  5408                           	opt stack 0
  5409  013DFA                     _mode2:
  5410                           	opt stack 13
  5411                           
  5412                           ;main.c: 393: safeToGo();
  5413                           
  5414                           ;incstack = 0
  5415  013DFA  ECEF  F0B0         	call	_safeToGo	;wreg free
  5416                           
  5417                           ;main.c: 394: if (MXK_SwitchTo(eMXK_HMI)) {
  5418  013DFE  0E01               	movlw	1
  5419  013E00  EC51  F0B2         	call	_MXK_SwitchTo
  5420  013E04  0900               	iorlw	0
  5421  013E06  B4D8               	btfsc	status,2,c
  5422  013E08  D06B               	goto	l2432
  5423                           
  5424                           ;main.c: 395: printf("%c", (char)35);
  5425  013E0A  0EFB               	movlw	low STR_1
  5426  013E0C  0100               	movlb	0	; () banked
  5427  013E0E  6FCA               	movwf	printf@f& (0+255),b
  5428  013E10  0EFF               	movlw	high STR_1
  5429  013E12  0100               	movlb	0	; () banked
  5430  013E14  6FCB               	movwf	(printf@f+1)& (0+255),b
  5431  013E16  0E00               	movlw	0
  5432  013E18  0100               	movlb	0	; () banked
  5433  013E1A  6FCD               	movwf	(?_printf+3)& (0+255),b
  5434  013E1C  0E23               	movlw	35
  5435  013E1E  6FCC               	movwf	(?_printf+2)& (0+255),b
  5436  013E20  EC3E  F094         	call	_printf	;wreg free
  5437                           
  5438                           ;main.c: 396: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5439  013E24  0E95               	movlw	low STR_8
  5440  013E26  0100               	movlb	0	; () banked
  5441  013E28  6FCA               	movwf	printf@f& (0+255),b
  5442  013E2A  0EFF               	movlw	high STR_8
  5443  013E2C  0100               	movlb	0	; () banked
  5444  013E2E  6FCB               	movwf	(printf@f+1)& (0+255),b
  5445  013E30  C079  F0CC         	movff	_distanceTotal,?_printf+2
  5446  013E34  C07A  F0CD         	movff	_distanceTotal+1,?_printf+3
  5447  013E38  C08C  F0CE         	movff	_iRBumpLeft,?_printf+4
  5448  013E3C  0100               	movlb	0	; () banked
  5449  013E3E  6BCF               	clrf	(?_printf+5)& (0+255),b
  5450  013E40  C08D  F0D0         	movff	_iRBumpRight,?_printf+6
  5451  013E44  0100               	movlb	0	; () banked
  5452  013E46  6BD1               	clrf	(?_printf+7)& (0+255),b
  5453  013E48  EC3E  F094         	call	_printf	;wreg free
  5454                           
  5455                           ;main.c: 397: Console_Render();
  5456  013E4C  EC52  F091         	call	_Console_Render	;wreg free
  5457                           
  5458                           ;main.c: 400: dist = 0;
  5459  013E50  0E00               	movlw	0
  5460  013E52  0100               	movlb	0	; () banked
  5461  013E54  6F6C               	movwf	(_dist+1)& (0+255),b
  5462  013E56  0E00               	movlw	0
  5463  013E58  6F6B               	movwf	_dist& (0+255),b
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;main.c: 401: irobot_move_straight(200);
  5467  013E5A  0E00               	movlw	0
  5468  013E5C  0100               	movlb	0	; () banked
  5469  013E5E  6FCF               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  5470  013E60  0EC8               	movlw	200
  5471  013E62  6FCE               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  5472  013E64  ECA8  F0B5         	call	_irobot_move_straight	;wreg free
  5473                           
  5474                           ;main.c: 403: while (dist < 5000) {
  5475  013E68  D027               	goto	l2429
  5476  013E6A                     
  5477                           ;main.c: 404: update_distance();
  5478  013E6A  EC1C  F0B6         	call	_update_distance	;wreg free
  5479                           
  5480                           ;main.c: 405: dist += iRDistance;
  5481  013E6E  0100               	movlb	0	; () banked
  5482  013E70  517D               	movf	_iRDistance& (0+255),w,b
  5483  013E72  0100               	movlb	0	; () banked
  5484  013E74  276B               	addwf	_dist& (0+255),f,b
  5485  013E76  0100               	movlb	0	; () banked
  5486  013E78  517E               	movf	(_iRDistance+1)& (0+255),w,b
  5487  013E7A  0100               	movlb	0	; () banked
  5488  013E7C  236C               	addwfc	(_dist+1)& (0+255),f,b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 406: printf("%c", (char)35);
  5492  013E7E  0EFB               	movlw	low STR_1
  5493  013E80  0100               	movlb	0	; () banked
  5494  013E82  6FCA               	movwf	printf@f& (0+255),b
  5495  013E84  0EFF               	movlw	high STR_1
  5496  013E86  0100               	movlb	0	; () banked
  5497  013E88  6FCB               	movwf	(printf@f+1)& (0+255),b
  5498  013E8A  0E00               	movlw	0
  5499  013E8C  0100               	movlb	0	; () banked
  5500  013E8E  6FCD               	movwf	(?_printf+3)& (0+255),b
  5501  013E90  0E23               	movlw	35
  5502  013E92  6FCC               	movwf	(?_printf+2)& (0+255),b
  5503  013E94  EC3E  F094         	call	_printf	;wreg free
  5504                           
  5505                           ;main.c: 408: printf("Distance: %d\n", dist);
  5506  013E98  0EED               	movlw	low STR_2
  5507  013E9A  0100               	movlb	0	; () banked
  5508  013E9C  6FCA               	movwf	printf@f& (0+255),b
  5509  013E9E  0EFF               	movlw	high STR_2
  5510  013EA0  0100               	movlb	0	; () banked
  5511  013EA2  6FCB               	movwf	(printf@f+1)& (0+255),b
  5512  013EA4  C06B  F0CC         	movff	_dist,?_printf+2
  5513  013EA8  C06C  F0CD         	movff	_dist+1,?_printf+3
  5514  013EAC  EC3E  F094         	call	_printf	;wreg free
  5515                           
  5516                           ;main.c: 409: Console_Render();
  5517  013EB0  EC52  F091         	call	_Console_Render	;wreg free
  5518                           
  5519                           ;main.c: 410: measureAndDisplayDistance();
  5520  013EB4  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  5521  013EB8                     l2429:
  5522  013EB8  0100               	movlb	0	; () banked
  5523  013EBA  BF6C               	btfsc	(_dist+1)& (0+255),7,b
  5524  013EBC  D7D6               	goto	l2430
  5525  013EBE  0E88               	movlw	136
  5526  013EC0  0100               	movlb	0	; () banked
  5527  013EC2  5D6B               	subwf	_dist& (0+255),w,b
  5528  013EC4  0E13               	movlw	19
  5529  013EC6  0100               	movlb	0	; () banked
  5530  013EC8  596C               	subwfb	(_dist+1)& (0+255),w,b
  5531  013ECA  A0D8               	btfss	status,0,c
  5532  013ECC  D7CE               	goto	l2430
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;main.c: 411: }
  5536                           ;main.c: 413: irobot_stop_motion(0);
  5537                           
  5538                           ; BSR set to: 0
  5539  013ECE  0E00               	movlw	0
  5540  013ED0  ECA5  F0B1         	call	_irobot_stop_motion
  5541                           
  5542                           ;main.c: 414: if (MXK_Release())
  5543  013ED4  EC7F  F0B5         	call	_MXK_Release	;wreg free
  5544  013ED8  0900               	iorlw	0
  5545  013EDA  A4D8               	btfss	status,2,c
  5546                           
  5547                           ;main.c: 415: MXK_Dequeue();
  5548  013EDC  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5549  013EE0                     l2432:
  5550                           
  5551                           ;main.c: 416: }
  5552                           ;main.c: 418: irobot_song_play(0);
  5553  013EE0  0E00               	movlw	0
  5554  013EE2  EC08  F0B6         	call	_irobot_song_play
  5555  013EE6  0012               	return		;funcret
  5556  013EE8                     __end_of_mode2:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           postdec1	equ	0xFE5
  5565                           fsr1h	equ	0xFE2
  5566                           fsr1l	equ	0xFE1
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _irobot_move_straight *****************
  5570 ;; Defined at:
  5571 ;;		line 346 in file "Library/iRobotSerial.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  straightSpee    2   25[BANK0 ] short 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:        2 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    9
  5592 ;; This function calls:
  5593 ;;		_irobot_move
  5594 ;; This function is called by:
  5595 ;;		_move_and_rotate
  5596 ;;		_mode2
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text8
  5601  016B50                     __ptext8:
  5602                           	opt stack 0
  5603  016B50                     _irobot_move_straight:
  5604                           	opt stack 19
  5605                           
  5606                           ;iRobotSerial.c: 347: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  5607                           
  5608                           ;incstack = 0
  5609  016B50  C0CE  F0C5         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  5610  016B54  C0CF  F0C6         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  5611  016B58  0E7F               	movlw	127
  5612  016B5A  0100               	movlb	0	; () banked
  5613  016B5C  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  5614  016B5E  69C7               	setf	irobot_move@moveTurnRadius& (0+255),b
  5615  016B60  0E00               	movlw	0
  5616  016B62  EC73  F0A5         	call	_irobot_move
  5617  016B66  0012               	return		;funcret
  5618  016B68                     __end_of_irobot_move_straight:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           postinc0	equ	0xFEE
  5625                           wreg	equ	0xFE8
  5626                           postdec1	equ	0xFE5
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _mode1 *****************
  5632 ;; Defined at:
  5633 ;;		line 330 in file "main.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  moveto          2    6[BANK4 ] int 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      void 
  5640 ;; Registers used:
  5641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;Total ram usage:        8 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:   17
  5654 ;; This function calls:
  5655 ;;		_ADC_Start
  5656 ;;		_ADC_Voltage
  5657 ;;		_Console_Render
  5658 ;;		_HMI_Render
  5659 ;;		_HMI_SetNumber
  5660 ;;		_MXK_Dequeue
  5661 ;;		_MXK_Release
  5662 ;;		_MXK_SwitchTo
  5663 ;;		_Motor_Move
  5664 ;;		_Motor_Speed
  5665 ;;		___fldiv
  5666 ;;		___fltol
  5667 ;;		_irobot_song_play
  5668 ;;		_measureAndDisplayDistance
  5669 ;;		_printf
  5670 ;;		_safeToGo
  5671 ;; This function is called by:
  5672 ;;		_main
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text9
  5677  0118F2                     __ptext9:
  5678                           	opt stack 0
  5679  0118F2                     _mode1:
  5680                           	opt stack 13
  5681                           
  5682                           ;main.c: 331: safeToGo();
  5683                           
  5684                           ;incstack = 0
  5685  0118F2  ECEF  F0B0         	call	_safeToGo	;wreg free
  5686                           
  5687                           ;main.c: 332: if (MXK_SwitchTo(eMXK_HMI)) {
  5688  0118F6  0E01               	movlw	1
  5689  0118F8  EC51  F0B2         	call	_MXK_SwitchTo
  5690  0118FC  0900               	iorlw	0
  5691  0118FE  B4D8               	btfsc	status,2,c
  5692  011900  D029               	goto	l2407
  5693                           
  5694                           ;main.c: 333: printf("%c", (char)35);
  5695  011902  0EFB               	movlw	low STR_1
  5696  011904  0100               	movlb	0	; () banked
  5697  011906  6FCA               	movwf	printf@f& (0+255),b
  5698  011908  0EFF               	movlw	high STR_1
  5699  01190A  0100               	movlb	0	; () banked
  5700  01190C  6FCB               	movwf	(printf@f+1)& (0+255),b
  5701  01190E  0E00               	movlw	0
  5702  011910  0100               	movlb	0	; () banked
  5703  011912  6FCD               	movwf	(?_printf+3)& (0+255),b
  5704  011914  0E23               	movlw	35
  5705  011916  6FCC               	movwf	(?_printf+2)& (0+255),b
  5706  011918  EC3E  F094         	call	_printf	;wreg free
  5707                           
  5708                           ;main.c: 334: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5709  01191C  0E95               	movlw	low STR_8
  5710  01191E  0100               	movlb	0	; () banked
  5711  011920  6FCA               	movwf	printf@f& (0+255),b
  5712  011922  0EFF               	movlw	high STR_8
  5713  011924  0100               	movlb	0	; () banked
  5714  011926  6FCB               	movwf	(printf@f+1)& (0+255),b
  5715  011928  C079  F0CC         	movff	_distanceTotal,?_printf+2
  5716  01192C  C07A  F0CD         	movff	_distanceTotal+1,?_printf+3
  5717  011930  C08C  F0CE         	movff	_iRBumpLeft,?_printf+4
  5718  011934  0100               	movlb	0	; () banked
  5719  011936  6BCF               	clrf	(?_printf+5)& (0+255),b
  5720  011938  C08D  F0D0         	movff	_iRBumpRight,?_printf+6
  5721  01193C  0100               	movlb	0	; () banked
  5722  01193E  6BD1               	clrf	(?_printf+7)& (0+255),b
  5723  011940  EC3E  F094         	call	_printf	;wreg free
  5724                           
  5725                           ;main.c: 335: Console_Render();
  5726  011944  EC52  F091         	call	_Console_Render	;wreg free
  5727                           
  5728                           ;main.c: 336: if (MXK_Release())
  5729  011948  EC7F  F0B5         	call	_MXK_Release	;wreg free
  5730  01194C  0900               	iorlw	0
  5731  01194E  A4D8               	btfss	status,2,c
  5732                           
  5733                           ;main.c: 337: MXK_Dequeue();
  5734  011950  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5735  011954                     l2407:
  5736                           
  5737                           ;main.c: 338: }
  5738                           ;main.c: 339: StepRotate = 0;
  5739  011954  0E00               	movlw	0
  5740  011956  0100               	movlb	0	; () banked
  5741  011958  6F74               	movwf	(_StepRotate+1)& (0+255),b
  5742  01195A  0E00               	movlw	0
  5743  01195C  6F73               	movwf	_StepRotate& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;main.c: 340: MinDist = 1000;
  5747  01195E  0E03               	movlw	3
  5748  011960  0100               	movlb	0	; () banked
  5749  011962  6FFC               	movwf	(_MinDist+1)& (0+255),b
  5750  011964  0EE8               	movlw	232
  5751  011966  6FFB               	movwf	_MinDist& (0+255),b
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;main.c: 341: Stepstomin = 0;
  5755  011968  0E00               	movlw	0
  5756  01196A  0100               	movlb	0	; () banked
  5757  01196C  6F72               	movwf	(_Stepstomin+1)& (0+255),b
  5758  01196E  0E00               	movlw	0
  5759  011970  6F71               	movwf	_Stepstomin& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 342: IRValue = 0;
  5763  011972  0E00               	movlw	0
  5764  011974  0100               	movlb	0	; () banked
  5765  011976  6F70               	movwf	(_IRValue+1)& (0+255),b
  5766  011978  0E00               	movlw	0
  5767  01197A  6F6F               	movwf	_IRValue& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;main.c: 343: TimerX = 8;
  5771  01197C  0E00               	movlw	0
  5772  01197E  0100               	movlb	0	; () banked
  5773  011980  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5774  011982  0E08               	movlw	8
  5775  011984  6FF9               	movwf	_TimerX& (0+255),b
  5776                           
  5777                           ;main.c: 346: while (StepRotate < 400) {
  5778  011986  D0AE               	goto	u15020
  5779  011988                     
  5780                           ; BSR set to: 0
  5781                           ;main.c: 347: StepRotate++;
  5782                           
  5783                           ; BSR set to: 0
  5784  011988  0100               	movlb	0	; () banked
  5785  01198A  4B73               	infsnz	_StepRotate& (0+255),f,b
  5786  01198C  2B74               	incf	(_StepRotate+1)& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;main.c: 348: measureAndDisplayDistance();
  5790  01198E  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  5791                           
  5792                           ;main.c: 349: if (IRValue < MinDist) {
  5793  011992  0100               	movlb	0	; () banked
  5794  011994  51FB               	movf	_MinDist& (0+255),w,b
  5795  011996  0100               	movlb	0	; () banked
  5796  011998  5D6F               	subwf	_IRValue& (0+255),w,b
  5797  01199A  0100               	movlb	0	; () banked
  5798  01199C  5170               	movf	(_IRValue+1)& (0+255),w,b
  5799  01199E  0A80               	xorlw	128
  5800  0119A0  0104               	movlb	4	; () banked
  5801  0119A2  6FAA               	movwf	??_mode1& (0+255),b
  5802  0119A4  0100               	movlb	0	; () banked
  5803  0119A6  51FC               	movf	(_MinDist+1)& (0+255),w,b
  5804  0119A8  0A80               	xorlw	128
  5805  0119AA  0104               	movlb	4	; () banked
  5806  0119AC  59AA               	subwfb	??_mode1& (0+255),w,b
  5807  0119AE  B0D8               	btfsc	status,0,c
  5808  0119B0  D008               	goto	l2410
  5809                           
  5810                           ; BSR set to: 4
  5811                           ;main.c: 350: MinDist = IRValue;
  5812  0119B2  C06F  F0FB         	movff	_IRValue,_MinDist
  5813  0119B6  C070  F0FC         	movff	_IRValue+1,_MinDist+1
  5814                           
  5815                           ;main.c: 351: Stepstomin = StepRotate;
  5816  0119BA  C073  F071         	movff	_StepRotate,_Stepstomin
  5817  0119BE  C074  F072         	movff	_StepRotate+1,_Stepstomin+1
  5818  0119C2                     l2410:
  5819                           
  5820                           ; BSR set to: 4
  5821                           ;main.c: 352: }
  5822                           ;main.c: 353: if (MXK_SwitchTo(eMXK_Motor)) {
  5823                           
  5824                           ; BSR set to: 4
  5825  0119C2  0E08               	movlw	8
  5826  0119C4  EC51  F0B2         	call	_MXK_SwitchTo
  5827  0119C8  0900               	iorlw	0
  5828  0119CA  B4D8               	btfsc	status,2,c
  5829  0119CC  D020               	goto	l2412
  5830                           
  5831                           ;main.c: 354: Motor_Speed(&Stepper, (50));
  5832  0119CE  0EAA               	movlw	low _Stepper
  5833  0119D0  0100               	movlb	0	; () banked
  5834  0119D2  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  5835  0119D4  0E00               	movlw	high _Stepper
  5836  0119D6  0100               	movlb	0	; () banked
  5837  0119D8  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5838  0119DA  0E00               	movlw	0
  5839  0119DC  0100               	movlb	0	; () banked
  5840  0119DE  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5841  0119E0  0E32               	movlw	50
  5842  0119E2  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  5843  0119E4  EC65  F0B4         	call	_Motor_Speed	;wreg free
  5844                           
  5845                           ;main.c: 355: Motor_Move(&Stepper, 1);
  5846  0119E8  0EAA               	movlw	low _Stepper
  5847  0119EA  0100               	movlb	0	; () banked
  5848  0119EC  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  5849  0119EE  0E00               	movlw	high _Stepper
  5850  0119F0  0100               	movlb	0	; () banked
  5851  0119F2  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5852  0119F4  0E00               	movlw	0
  5853  0119F6  0100               	movlb	0	; () banked
  5854  0119F8  6FBB               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  5855  0119FA  0E01               	movlw	1
  5856  0119FC  6FBA               	movwf	Motor_Move@pDelta& (0+255),b
  5857  0119FE  EC69  F0B3         	call	_Motor_Move	;wreg free
  5858                           
  5859                           ;main.c: 356: if (MXK_Release())
  5860  011A02  EC7F  F0B5         	call	_MXK_Release	;wreg free
  5861  011A06  0900               	iorlw	0
  5862  011A08  A4D8               	btfss	status,2,c
  5863                           
  5864                           ;main.c: 357: MXK_Dequeue();
  5865  011A0A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5866  011A0E                     l2412:
  5867                           
  5868                           ;main.c: 358: }
  5869                           ;main.c: 359: TimerX = 10;
  5870  011A0E  0E00               	movlw	0
  5871  011A10  0100               	movlb	0	; () banked
  5872  011A12  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5873  011A14  0E0A               	movlw	10
  5874  011A16  6FF9               	movwf	_TimerX& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;main.c: 360: if (TimerX > 0) {
  5878  011A18  0100               	movlb	0	; () banked
  5879  011A1A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5880  011A1C  D063               	goto	u15020
  5881  011A1E  0100               	movlb	0	; () banked
  5882  011A20  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5883  011A22  E156               	bnz	l17420
  5884  011A24  0100               	movlb	0	; () banked
  5885  011A26  05F9               	decf	_TimerX& (0+255),w,b
  5886  011A28  B0D8               	btfsc	status,0,c
  5887  011A2A  D052               	goto	l2414
  5888  011A2C  D05B               	goto	u15020
  5889  011A2E                     l17402:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;main.c: 362: ADC_Start(&ADC_AN0);
  5893  011A2E  0EB0               	movlw	low _ADC_AN0
  5894  011A30  0100               	movlb	0	; () banked
  5895  011A32  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  5896  011A34  0E00               	movlw	high _ADC_AN0
  5897  011A36  0100               	movlb	0	; () banked
  5898  011A38  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5899  011A3A  EC03  F0AB         	call	_ADC_Start	;wreg free
  5900                           
  5901                           ;main.c: 363: if (MXK_SwitchTo(eMXK_HMI)) {
  5902  011A3E  0E01               	movlw	1
  5903  011A40  EC51  F0B2         	call	_MXK_SwitchTo
  5904  011A44  0900               	iorlw	0
  5905  011A46  B4D8               	btfsc	status,2,c
  5906  011A48  D00E               	goto	l2417
  5907                           
  5908                           ;main.c: 364: HMI_SetNumber(IRValue);
  5909  011A4A  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  5910  011A4E  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5911  011A52  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
  5912                           
  5913                           ;main.c: 365: HMI_Render();
  5914  011A56  ECB2  F0B2         	call	_HMI_Render	;wreg free
  5915                           
  5916                           ;main.c: 366: if (MXK_Release())
  5917  011A5A  EC7F  F0B5         	call	_MXK_Release	;wreg free
  5918  011A5E  0900               	iorlw	0
  5919  011A60  A4D8               	btfss	status,2,c
  5920                           
  5921                           ;main.c: 367: MXK_Dequeue();
  5922  011A62  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5923  011A66                     l2417:
  5924                           
  5925                           ;main.c: 368: }
  5926                           ;main.c: 369: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5927  011A66  0EB0               	movlw	low _ADC_AN0
  5928  011A68  0100               	movlb	0	; () banked
  5929  011A6A  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  5930  011A6C  0E00               	movlw	high _ADC_AN0
  5931  011A6E  0100               	movlb	0	; () banked
  5932  011A70  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5933  011A72  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  5934  011A76  C0DC  F4AC         	movff	?_ADC_Voltage,_mode1$15618
  5935  011A7A  C0DD  F4AD         	movff	?_ADC_Voltage+1,_mode1$15618+1
  5936  011A7E  C0DE  F4AE         	movff	?_ADC_Voltage+2,_mode1$15618+2
  5937  011A82  C0DF  F4AF         	movff	?_ADC_Voltage+3,_mode1$15618+3
  5938                           
  5939                           ;main.c: 368: }
  5940                           ;main.c: 369: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5941  011A86  C4AC  F0B9         	movff	_mode1$15618,___fldiv@a
  5942  011A8A  C4AD  F0BA         	movff	_mode1$15618+1,___fldiv@a+1
  5943  011A8E  C4AE  F0BB         	movff	_mode1$15618+2,___fldiv@a+2
  5944  011A92  C4AF  F0BC         	movff	_mode1$15618+3,___fldiv@a+3
  5945  011A96  0E00               	movlw	0
  5946  011A98  0100               	movlb	0	; () banked
  5947  011A9A  6FB5               	movwf	___fldiv@b& (0+255),b
  5948  011A9C  0E00               	movlw	0
  5949  011A9E  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  5950  011AA0  0E6C               	movlw	108
  5951  011AA2  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  5952  011AA4  0E42               	movlw	66
  5953  011AA6  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  5954  011AA8  ECBC  F088         	call	___fldiv	;wreg free
  5955  011AAC  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  5956  011AB0  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  5957  011AB4  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  5958  011AB8  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  5959  011ABC  ECFF  F09C         	call	___fltol	;wreg free
  5960  011AC0  C0EE  F06F         	movff	?___fltol,_IRValue
  5961  011AC4  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  5962                           
  5963                           ;main.c: 370: TimerX--;
  5964  011AC8  0100               	movlb	0	; () banked
  5965  011ACA  07F9               	decf	_TimerX& (0+255),f,b
  5966  011ACC  A0D8               	btfss	status,0,c
  5967  011ACE  07FA               	decf	(_TimerX+1)& (0+255),f,b
  5968  011AD0                     l2414:
  5969  011AD0                     l17420:
  5970                           
  5971                           ; BSR set to: 0
  5972  011AD0  0100               	movlb	0	; () banked
  5973  011AD2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5974  011AD4  D007               	goto	u15020
  5975  011AD6  0100               	movlb	0	; () banked
  5976  011AD8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5977  011ADA  E1A9               	bnz	l17402
  5978  011ADC  0100               	movlb	0	; () banked
  5979  011ADE  05F9               	decf	_TimerX& (0+255),w,b
  5980  011AE0  B0D8               	btfsc	status,0,c
  5981  011AE2  D7A5               	goto	l2415
  5982  011AE4                     u15020:
  5983                           
  5984                           ; BSR set to: 0
  5985                           
  5986                           ; BSR set to: 0
  5987                           
  5988                           ; BSR set to: 0
  5989                           
  5990                           ; BSR set to: 0
  5991  011AE4  0100               	movlb	0	; () banked
  5992  011AE6  BF74               	btfsc	(_StepRotate+1)& (0+255),7,b
  5993  011AE8  D74F               	goto	l2409
  5994  011AEA  0E90               	movlw	144
  5995  011AEC  0100               	movlb	0	; () banked
  5996  011AEE  5D73               	subwf	_StepRotate& (0+255),w,b
  5997  011AF0  0E01               	movlw	1
  5998  011AF2  0100               	movlb	0	; () banked
  5999  011AF4  5974               	subwfb	(_StepRotate+1)& (0+255),w,b
  6000  011AF6  A0D8               	btfss	status,0,c
  6001  011AF8  D747               	goto	l2409
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;main.c: 371: }
  6005                           ;main.c: 372: }
  6006                           ;main.c: 373: }
  6007                           ;main.c: 376: if (MXK_SwitchTo(eMXK_Motor)) {
  6008                           
  6009                           ; BSR set to: 0
  6010  011AFA  0E08               	movlw	8
  6011  011AFC  EC51  F0B2         	call	_MXK_SwitchTo
  6012  011B00  0900               	iorlw	0
  6013  011B02  B4D8               	btfsc	status,2,c
  6014  011B04  D03F               	goto	l2422
  6015                           
  6016                           ;main.c: 377: Motor_Speed(&Stepper, (50));
  6017  011B06  0EAA               	movlw	low _Stepper
  6018  011B08  0100               	movlb	0	; () banked
  6019  011B0A  6FD0               	movwf	Motor_Speed@pMotor& (0+255),b
  6020  011B0C  0E00               	movlw	high _Stepper
  6021  011B0E  0100               	movlb	0	; () banked
  6022  011B10  6FD1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  6023  011B12  0E00               	movlw	0
  6024  011B14  0100               	movlb	0	; () banked
  6025  011B16  6FD3               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  6026  011B18  0E32               	movlw	50
  6027  011B1A  6FD2               	movwf	Motor_Speed@pFrequency& (0+255),b
  6028  011B1C  EC65  F0B4         	call	_Motor_Speed	;wreg free
  6029                           
  6030                           ;main.c: 378: int moveto = 400 - Stepstomin;
  6031  011B20  C071  F4AA         	movff	_Stepstomin,??_mode1
  6032  011B24  C072  F4AB         	movff	_Stepstomin+1,??_mode1+1
  6033  011B28  0104               	movlb	4	; () banked
  6034  011B2A  1FAA               	comf	??_mode1& (0+255),f,b
  6035  011B2C  1FAB               	comf	(??_mode1+1)& (0+255),f,b
  6036  011B2E  4BAA               	infsnz	??_mode1& (0+255),f,b
  6037  011B30  2BAB               	incf	(??_mode1+1)& (0+255),f,b
  6038  011B32  0E90               	movlw	144
  6039  011B34  0104               	movlb	4	; () banked
  6040  011B36  25AA               	addwf	??_mode1& (0+255),w,b
  6041  011B38  0104               	movlb	4	; () banked
  6042  011B3A  6FB0               	movwf	mode1@moveto& (0+255),b
  6043  011B3C  0E01               	movlw	1
  6044  011B3E  0104               	movlb	4	; () banked
  6045  011B40  21AB               	addwfc	(??_mode1+1)& (0+255),w,b
  6046  011B42  0104               	movlb	4	; () banked
  6047  011B44  6FB1               	movwf	(mode1@moveto+1)& (0+255),b
  6048                           
  6049                           ; BSR set to: 4
  6050                           ;main.c: 380: Motor_Move(&Stepper, (-moveto));
  6051  011B46  0EAA               	movlw	low _Stepper
  6052  011B48  0100               	movlb	0	; () banked
  6053  011B4A  6FB8               	movwf	Motor_Move@pMotor& (0+255),b
  6054  011B4C  0E00               	movlw	high _Stepper
  6055  011B4E  0100               	movlb	0	; () banked
  6056  011B50  6FB9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  6057  011B52  C4B0  F4AA         	movff	mode1@moveto,??_mode1
  6058  011B56  C4B1  F4AB         	movff	mode1@moveto+1,??_mode1+1
  6059  011B5A  0104               	movlb	4	; () banked
  6060  011B5C  1FAA               	comf	??_mode1& (0+255),f,b
  6061  011B5E  1FAB               	comf	(??_mode1+1)& (0+255),f,b
  6062  011B60  4BAA               	infsnz	??_mode1& (0+255),f,b
  6063  011B62  2BAB               	incf	(??_mode1+1)& (0+255),f,b
  6064  011B64  C4AA  F0BA         	movff	??_mode1,Motor_Move@pDelta
  6065  011B68  C4AB  F0BB         	movff	??_mode1+1,Motor_Move@pDelta+1
  6066  011B6C  EC69  F0B3         	call	_Motor_Move	;wreg free
  6067                           
  6068                           ;main.c: 381: if (MXK_Release())
  6069  011B70  EC7F  F0B5         	call	_MXK_Release	;wreg free
  6070  011B74  0900               	iorlw	0
  6071  011B76  B4D8               	btfsc	status,2,c
  6072  011B78  D005               	goto	l2422
  6073                           
  6074                           ;main.c: 382: MXK_Dequeue();
  6075  011B7A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  6076                           
  6077                           ;main.c: 383: }
  6078                           ;main.c: 384: while (Stepper.mDelta > 0) {
  6079  011B7E  D002               	goto	l2422
  6080  011B80                     l17436:
  6081                           
  6082                           ;main.c: 385: measureAndDisplayDistance();
  6083  011B80  ECBB  F0A8         	call	_measureAndDisplayDistance	;wreg free
  6084  011B84                     l2422:
  6085  011B84  0100               	movlb	0	; () banked
  6086  011B86  BFAB               	btfsc	(_Stepper+1)& (0+255),7,b
  6087  011B88  D007               	goto	u15060
  6088  011B8A  0100               	movlb	0	; () banked
  6089  011B8C  51AB               	movf	(_Stepper+1)& (0+255),w,b
  6090  011B8E  E1F8               	bnz	l17436
  6091  011B90  0100               	movlb	0	; () banked
  6092  011B92  05AA               	decf	_Stepper& (0+255),w,b
  6093  011B94  B0D8               	btfsc	status,0,c
  6094  011B96  D7F4               	goto	l2423
  6095  011B98                     u15060:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;main.c: 386: }
  6099                           ;main.c: 388: irobot_song_play(0);
  6100                           
  6101                           ; BSR set to: 0
  6102  011B98  0E00               	movlw	0
  6103  011B9A  EC08  F0B6         	call	_irobot_song_play
  6104  011B9E  0012               	return		;funcret
  6105  011BA0                     __end_of_mode1:
  6106                           	opt stack 0
  6107                           tblptru	equ	0xFF8
  6108                           tblptrh	equ	0xFF7
  6109                           tblptrl	equ	0xFF6
  6110                           tablat	equ	0xFF5
  6111                           postinc0	equ	0xFEE
  6112                           wreg	equ	0xFE8
  6113                           postdec1	equ	0xFE5
  6114                           fsr1h	equ	0xFE2
  6115                           fsr1l	equ	0xFE1
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _safeToGo *****************
  6119 ;; Defined at:
  6120 ;;		line 118 in file "main.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;		None
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;		None
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;Total ram usage:        0 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:   16
  6141 ;; This function calls:
  6142 ;;		_HMI_Poll
  6143 ;;		_irobot_song_play
  6144 ;;		_irobot_stop_motion
  6145 ;;		_update_angle
  6146 ;;		_update_bump_and_cliff
  6147 ;;		_update_distance
  6148 ;; This function is called by:
  6149 ;;		_mode1
  6150 ;;		_mode2
  6151 ;;		_mode3
  6152 ;;		_mode4
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text10
  6157  0161DE                     __ptext10:
  6158                           	opt stack 0
  6159  0161DE                     _safeToGo:
  6160                           	opt stack 13
  6161                           
  6162                           ;main.c: 119: update_bump_and_cliff();
  6163                           
  6164                           ;incstack = 0
  6165  0161DE  EC4C  F0B3         	call	_update_bump_and_cliff	;wreg free
  6166                           
  6167                           ;main.c: 120: update_distance();
  6168  0161E2  EC1C  F0B6         	call	_update_distance	;wreg free
  6169                           
  6170                           ;main.c: 121: update_angle();
  6171  0161E6  EC25  F0B6         	call	_update_angle	;wreg free
  6172                           
  6173                           ;main.c: 122: if (iRBumpLeft || iRBumpRight) {
  6174  0161EA  0100               	movlb	0	; () banked
  6175  0161EC  518C               	movf	_iRBumpLeft& (0+255),w,b
  6176  0161EE  A4D8               	btfss	status,2,c
  6177  0161F0  D004               	goto	u11770
  6178                           
  6179                           ; BSR set to: 0
  6180  0161F2  0100               	movlb	0	; () banked
  6181  0161F4  518D               	movf	_iRBumpRight& (0+255),w,b
  6182  0161F6  B4D8               	btfsc	status,2,c
  6183  0161F8  D006               	goto	l2333
  6184  0161FA                     u11770:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;main.c: 123: irobot_song_play(0);
  6188                           
  6189                           ; BSR set to: 0
  6190  0161FA  0E00               	movlw	0
  6191  0161FC  EC08  F0B6         	call	_irobot_song_play
  6192                           
  6193                           ;main.c: 124: irobot_stop_motion(0);
  6194  016200  0E00               	movlw	0
  6195  016202  ECA5  F0B1         	call	_irobot_stop_motion
  6196  016206                     l2333:
  6197                           
  6198                           ;main.c: 125: }
  6199                           ;main.c: 126: if (angleTotal > 83) {
  6200  016206  0100               	movlb	0	; () banked
  6201  016208  BF78               	btfsc	(_angleTotal+1)& (0+255),7,b
  6202  01620A  D00B               	goto	l2336
  6203  01620C  0100               	movlb	0	; () banked
  6204  01620E  5178               	movf	(_angleTotal+1)& (0+255),w,b
  6205  016210  E105               	bnz	u11780
  6206  016212  0E54               	movlw	84
  6207  016214  0100               	movlb	0	; () banked
  6208  016216  5D77               	subwf	_angleTotal& (0+255),w,b
  6209  016218  A0D8               	btfss	status,0,c
  6210  01621A  D003               	goto	l2336
  6211  01621C                     u11780:
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;main.c: 127: irobot_stop_motion(0);
  6215  01621C  0E00               	movlw	0
  6216  01621E  ECA5  F0B1         	call	_irobot_stop_motion
  6217  016222                     l2336:
  6218                           
  6219                           ;main.c: 128: }
  6220                           ;main.c: 129: HMI_Poll();
  6221  016222  EC26  F0AD         	call	_HMI_Poll	;wreg free
  6222  016226  0012               	return		;funcret
  6223  016228                     __end_of_safeToGo:
  6224                           	opt stack 0
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           postinc0	equ	0xFEE
  6230                           wreg	equ	0xFE8
  6231                           postdec1	equ	0xFE5
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           status	equ	0xFD8
  6235                           
  6236 ;; *************** function _update_distance *****************
  6237 ;; Defined at:
  6238 ;;		line 360 in file "Library/iRobotSerial.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;Total ram usage:        0 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:   10
  6259 ;; This function calls:
  6260 ;;		_irobot_query_and_update
  6261 ;; This function is called by:
  6262 ;;		_safeToGo
  6263 ;;		_move_and_rotate
  6264 ;;		_mode2
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text11
  6269  016C38                     __ptext11:
  6270                           	opt stack 0
  6271  016C38                     _update_distance:
  6272                           	opt stack 18
  6273                           
  6274                           ;iRobotSerial.c: 361: irobot_query_and_update(1, iR_PKT_DISTANCE);
  6275                           
  6276                           ;incstack = 0
  6277  016C38  0E00               	movlw	0
  6278  016C3A  0100               	movlb	0	; () banked
  6279  016C3C  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6280  016C3E  0E13               	movlw	19
  6281  016C40  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  6282  016C42  0E01               	movlw	1
  6283  016C44  EC97  F097         	call	_irobot_query_and_update
  6284  016C48  0012               	return		;funcret
  6285  016C4A                     __end_of_update_distance:
  6286                           	opt stack 0
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1h	equ	0xFE2
  6295                           fsr1l	equ	0xFE1
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _update_bump_and_cliff *****************
  6299 ;; Defined at:
  6300 ;;		line 352 in file "Library/iRobotSerial.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:   10
  6321 ;; This function calls:
  6322 ;;		_irobot_query_and_update
  6323 ;; This function is called by:
  6324 ;;		_safeToGo
  6325 ;;		_mode4
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text12
  6330  016698                     __ptext12:
  6331                           	opt stack 0
  6332  016698                     _update_bump_and_cliff:
  6333                           	opt stack 19
  6334                           
  6335                           ;iRobotSerial.c: 353: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  6336                           ;iRobotSerial.c: 354: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  6337                           ;iRobotSerial.c: 355: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  6338                           
  6339                           ;incstack = 0
  6340  016698  0E00               	movlw	0
  6341  01669A  0100               	movlb	0	; () banked
  6342  01669C  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6343  01669E  0E07               	movlw	7
  6344  0166A0  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  6345  0166A2  0E00               	movlw	0
  6346  0166A4  0100               	movlb	0	; () banked
  6347  0166A6  6FBE               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  6348  0166A8  0E09               	movlw	9
  6349  0166AA  6FBD               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  6350  0166AC  0E00               	movlw	0
  6351  0166AE  0100               	movlb	0	; () banked
  6352  0166B0  6FC0               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  6353  0166B2  0E0A               	movlw	10
  6354  0166B4  6FBF               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  6355  0166B6  0E00               	movlw	0
  6356  0166B8  0100               	movlb	0	; () banked
  6357  0166BA  6FC2               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  6358  0166BC  0E0B               	movlw	11
  6359  0166BE  6FC1               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  6360  0166C0  0E00               	movlw	0
  6361  0166C2  0100               	movlb	0	; () banked
  6362  0166C4  6FC4               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  6363  0166C6  0E0C               	movlw	12
  6364  0166C8  6FC3               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  6365  0166CA  0E05               	movlw	5
  6366  0166CC  EC97  F097         	call	_irobot_query_and_update
  6367  0166D0  0012               	return		;funcret
  6368  0166D2                     __end_of_update_bump_and_cliff:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           postdec1	equ	0xFE5
  6377                           fsr1h	equ	0xFE2
  6378                           fsr1l	equ	0xFE1
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function _update_angle *****************
  6382 ;; Defined at:
  6383 ;;		line 366 in file "Library/iRobotSerial.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;Total ram usage:        0 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:   10
  6404 ;; This function calls:
  6405 ;;		_irobot_query_and_update
  6406 ;; This function is called by:
  6407 ;;		_irobot_rotate
  6408 ;;		_safeToGo
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text13
  6413  016C4A                     __ptext13:
  6414                           	opt stack 0
  6415  016C4A                     _update_angle:
  6416                           	opt stack 18
  6417                           
  6418                           ;iRobotSerial.c: 367: irobot_query_and_update(1, iR_PKT_ANGLE);
  6419                           
  6420                           ;incstack = 0
  6421  016C4A  0E00               	movlw	0
  6422  016C4C  0100               	movlb	0	; () banked
  6423  016C4E  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6424  016C50  0E14               	movlw	20
  6425  016C52  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  6426  016C54  0E01               	movlw	1
  6427  016C56  EC97  F097         	call	_irobot_query_and_update
  6428  016C5A  0012               	return		;funcret
  6429  016C5C                     __end_of_update_angle:
  6430                           	opt stack 0
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           postinc0	equ	0xFEE
  6436                           wreg	equ	0xFE8
  6437                           postdec1	equ	0xFE5
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _irobot_query_and_update *****************
  6443 ;; Defined at:
  6444 ;;		line 142 in file "Library/iRobotSerial.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  numberOfPack    1    wreg     unsigned char 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  6449 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  6450 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  6451 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  6452 ;;		 -> ?_irobot_query_and_update(1), 
  6453 ;;  i               1   28[BANK0 ] unsigned char 
  6454 ;;  startIndex      1   27[BANK0 ] unsigned char 
  6455 ;;  j               1   26[BANK0 ] unsigned char 
  6456 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  6457 ;;  streamSize      1   23[BANK0 ] unsigned char 
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  1    wreg      void 
  6460 ;; Registers used:
  6461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6467 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;Total ram usage:      535 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    9
  6474 ;; This function calls:
  6475 ;;		_eusart_getch
  6476 ;;		_eusart_putch
  6477 ;;		_get_packet_size
  6478 ;;		_rx_assign
  6479 ;; This function is called by:
  6480 ;;		_update_bump_and_cliff
  6481 ;;		_update_distance
  6482 ;;		_update_angle
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text14
  6487  012F2E                     __ptext14:
  6488                           	opt stack 0
  6489  012F2E                     _irobot_query_and_update:
  6490                           	opt stack 19
  6491                           
  6492                           ;incstack = 0
  6493                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  6494  012F2E  0100               	movlb	0	; () banked
  6495  012F30  6FCD               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  6496                           
  6497                           ;iRobotSerial.c: 143: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  6498  012F32  0E00               	movlw	0
  6499  012F34  0100               	movlb	0	; () banked
  6500  012F36  6FCC               	movwf	irobot_query_and_update@streamSize& (0+255),b
  6501  012F38  0E00               	movlw	0
  6502  012F3A  0100               	movlb	0	; () banked
  6503  012F3C  6FD0               	movwf	irobot_query_and_update@startIndex& (0+255),b
  6504                           
  6505                           ;iRobotSerial.c: 145: va_list packetIDs;
  6506                           ;iRobotSerial.c: 146: *packetIDs = __va_start();
  6507  012F3E  0EBB               	movlw	low ?_irobot_query_and_update
  6508  012F40  0100               	movlb	0	; () banked
  6509  012F42  6FCA               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  6510  012F44  0E00               	movlw	high ?_irobot_query_and_update
  6511  012F46  0100               	movlb	0	; () banked
  6512  012F48  6FCB               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;iRobotSerial.c: 147: eusart_putch(iR_QUERY_LIST);
  6516  012F4A  0E95               	movlw	149
  6517  012F4C  EC4C  F0B6         	call	_eusart_putch
  6518                           
  6519                           ;iRobotSerial.c: 148: eusart_putch(numberOfPacketRequests);
  6520  012F50  0100               	movlb	0	; () banked
  6521  012F52  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6522  012F54  EC4C  F0B6         	call	_eusart_putch
  6523                           
  6524                           ;iRobotSerial.c: 149: for (i = 0; i < numberOfPacketRequests; i++) {
  6525  012F58  0E00               	movlw	0
  6526  012F5A  0100               	movlb	0	; () banked
  6527  012F5C  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  6528  012F5E  D023               	goto	l2095
  6529  012F60                     
  6530                           ; BSR set to: 0
  6531                           ;iRobotSerial.c: 150: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  6532                           
  6533                           ; BSR set to: 0
  6534  012F60  C0CA  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  6535  012F64  C0CB  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  6536  012F68  50DF               	movf	indf2,w,c
  6537  012F6A  0100               	movlb	0	; () banked
  6538  012F6C  6FCE               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  6539                           
  6540                           ; BSR set to: 0
  6541  012F6E  0E02               	movlw	2
  6542  012F70  0100               	movlb	0	; () banked
  6543  012F72  27CA               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  6544  012F74  0E00               	movlw	0
  6545  012F76  23CB               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;iRobotSerial.c: 151: streamSize += get_packet_size(packetVariable);
  6549  012F78  0100               	movlb	0	; () banked
  6550  012F7A  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6551  012F7C  ECA3  F0AE         	call	_get_packet_size
  6552  012F80  0100               	movlb	0	; () banked
  6553  012F82  27CC               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;iRobotSerial.c: 152: TXArray[i] = packetVariable;
  6557  012F84  0100               	movlb	0	; () banked
  6558  012F86  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  6559  012F88  0D01               	mullw	1
  6560  012F8A  0E00               	movlw	low irobot_query_and_update@TXArray
  6561  012F8C  24F3               	addwf	prodl,w,c
  6562  012F8E  6ED9               	movwf	fsr2l,c
  6563  012F90  0E02               	movlw	high irobot_query_and_update@TXArray
  6564  012F92  20F4               	addwfc	prodh,w,c
  6565  012F94  6EDA               	movwf	fsr2h,c
  6566  012F96  C0CE  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;iRobotSerial.c: 153: eusart_putch(packetVariable);
  6570  012F9A  0100               	movlb	0	; () banked
  6571  012F9C  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6572  012F9E  EC4C  F0B6         	call	_eusart_putch
  6573  012FA2  0100               	movlb	0	; () banked
  6574  012FA4  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  6575  012FA6                     l2095:
  6576                           
  6577                           ; BSR set to: 0
  6578                           
  6579                           ; BSR set to: 0
  6580  012FA6  0100               	movlb	0	; () banked
  6581  012FA8  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6582  012FAA  0100               	movlb	0	; () banked
  6583  012FAC  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  6584  012FAE  A0D8               	btfss	status,0,c
  6585  012FB0  D7D7               	goto	l2096
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;iRobotSerial.c: 154: }
  6589                           ;iRobotSerial.c: 155: ;
  6590                           ;iRobotSerial.c: 157: for (i = 0; i < streamSize; i++) {
  6591                           
  6592                           ; BSR set to: 0
  6593  012FB2  0E00               	movlw	0
  6594  012FB4  0100               	movlb	0	; () banked
  6595  012FB6  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  6596  012FB8  D00E               	goto	l2098
  6597  012FBA                     
  6598                           ; BSR set to: 0
  6599                           ;iRobotSerial.c: 158: RXArray[i] = eusart_getch();
  6600                           
  6601                           ; BSR set to: 0
  6602  012FBA  0100               	movlb	0	; () banked
  6603  012FBC  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  6604  012FBE  0D01               	mullw	1
  6605  012FC0  0E00               	movlw	low irobot_query_and_update@RXArray
  6606  012FC2  24F3               	addwf	prodl,w,c
  6607  012FC4  6ED9               	movwf	fsr2l,c
  6608  012FC6  0E01               	movlw	high irobot_query_and_update@RXArray
  6609  012FC8  20F4               	addwfc	prodh,w,c
  6610  012FCA  6EDA               	movwf	fsr2h,c
  6611  012FCC  EC89  F0B6         	call	_eusart_getch	;wreg free
  6612  012FD0  6EDF               	movwf	indf2,c
  6613  012FD2  0100               	movlb	0	; () banked
  6614  012FD4  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  6615  012FD6                     l2098:
  6616                           
  6617                           ; BSR set to: 0
  6618                           
  6619                           ; BSR set to: 0
  6620  012FD6  0100               	movlb	0	; () banked
  6621  012FD8  51CC               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  6622  012FDA  0100               	movlb	0	; () banked
  6623  012FDC  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  6624  012FDE  A0D8               	btfss	status,0,c
  6625  012FE0  D7EC               	goto	l2099
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;iRobotSerial.c: 159: }
  6629                           ;iRobotSerial.c: 161: for (i = 0; i < numberOfPacketRequests; i++) {
  6630                           
  6631                           ; BSR set to: 0
  6632  012FE2  0E00               	movlw	0
  6633  012FE4  0100               	movlb	0	; () banked
  6634  012FE6  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  6635  012FE8  D05E               	goto	l2101
  6636  012FEA                     l2102:
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;iRobotSerial.c: 162: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  6640  012FEA  C0D0  F0CF         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  6641  012FEE  D021               	goto	l2103
  6642  012FF0                     
  6643                           ; BSR set to: 0
  6644                           ;iRobotSerial.c: 163: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  6645                           
  6646                           ; BSR set to: 0
  6647  012FF0  0100               	movlb	0	; () banked
  6648  012FF2  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  6649  012FF4  0D01               	mullw	1
  6650  012FF6  0E00               	movlw	low irobot_query_and_update@RXArray
  6651  012FF8  24F3               	addwf	prodl,w,c
  6652  012FFA  6ED9               	movwf	fsr2l,c
  6653  012FFC  0E01               	movlw	high irobot_query_and_update@RXArray
  6654  012FFE  20F4               	addwfc	prodh,w,c
  6655  013000  6EDA               	movwf	fsr2h,c
  6656  013002  50DF               	movf	indf2,w,c
  6657  013004  0100               	movlb	0	; () banked
  6658  013006  6FB6               	movwf	rx_assign@packetIDValue& (0+255),b
  6659  013008  0100               	movlb	0	; () banked
  6660  01300A  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6661  01300C  0800               	sublw	0
  6662  01300E  0100               	movlb	0	; () banked
  6663  013010  25CF               	addwf	irobot_query_and_update@j& (0+255),w,b
  6664  013012  0100               	movlb	0	; () banked
  6665  013014  6FB7               	movwf	rx_assign@byteNumber& (0+255),b
  6666  013016  0100               	movlb	0	; () banked
  6667  013018  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  6668  01301A  0D01               	mullw	1
  6669  01301C  0E00               	movlw	low irobot_query_and_update@TXArray
  6670  01301E  24F3               	addwf	prodl,w,c
  6671  013020  6ED9               	movwf	fsr2l,c
  6672  013022  0E02               	movlw	high irobot_query_and_update@TXArray
  6673  013024  20F4               	addwfc	prodh,w,c
  6674  013026  6EDA               	movwf	fsr2h,c
  6675  013028  50DF               	movf	indf2,w,c
  6676  01302A  EC85  F09E         	call	_rx_assign
  6677  01302E  0100               	movlb	0	; () banked
  6678  013030  2BCF               	incf	irobot_query_and_update@j& (0+255),f,b
  6679  013032                     l2103:
  6680                           
  6681                           ; BSR set to: 0
  6682                           
  6683                           ; BSR set to: 0
  6684  013032  0100               	movlb	0	; () banked
  6685  013034  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  6686  013036  0D01               	mullw	1
  6687  013038  0E00               	movlw	low irobot_query_and_update@TXArray
  6688  01303A  24F3               	addwf	prodl,w,c
  6689  01303C  6ED9               	movwf	fsr2l,c
  6690  01303E  0E02               	movlw	high irobot_query_and_update@TXArray
  6691  013040  20F4               	addwfc	prodh,w,c
  6692  013042  6EDA               	movwf	fsr2h,c
  6693  013044  50DF               	movf	indf2,w,c
  6694  013046  ECA3  F0AE         	call	_get_packet_size
  6695  01304A  0100               	movlb	0	; () banked
  6696  01304C  6FC5               	movwf	??_irobot_query_and_update& (0+255),b
  6697  01304E  6BC6               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  6698  013050  0100               	movlb	0	; () banked
  6699  013052  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6700  013054  0100               	movlb	0	; () banked
  6701  013056  27C5               	addwf	??_irobot_query_and_update& (0+255),f,b
  6702  013058  0E00               	movlw	0
  6703  01305A  23C6               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  6704  01305C  0100               	movlb	0	; () banked
  6705  01305E  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  6706  013060  0100               	movlb	0	; () banked
  6707  013062  6FC7               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  6708  013064  6BC8               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  6709  013066  0100               	movlb	0	; () banked
  6710  013068  51C5               	movf	??_irobot_query_and_update& (0+255),w,b
  6711  01306A  0100               	movlb	0	; () banked
  6712  01306C  5DC7               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  6713  01306E  0100               	movlb	0	; () banked
  6714  013070  51C8               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  6715  013072  0A80               	xorlw	128
  6716  013074  0100               	movlb	0	; () banked
  6717  013076  6FC9               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  6718  013078  0100               	movlb	0	; () banked
  6719  01307A  51C6               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  6720  01307C  0A80               	xorlw	128
  6721  01307E  0100               	movlb	0	; () banked
  6722  013080  59C9               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  6723  013082  A0D8               	btfss	status,0,c
  6724  013084  D7B5               	goto	l2104
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;iRobotSerial.c: 164: }
  6728                           ;iRobotSerial.c: 165: startIndex += get_packet_size(TXArray[i]);
  6729                           
  6730                           ; BSR set to: 0
  6731  013086  0100               	movlb	0	; () banked
  6732  013088  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  6733  01308A  0D01               	mullw	1
  6734  01308C  0E00               	movlw	low irobot_query_and_update@TXArray
  6735  01308E  24F3               	addwf	prodl,w,c
  6736  013090  6ED9               	movwf	fsr2l,c
  6737  013092  0E02               	movlw	high irobot_query_and_update@TXArray
  6738  013094  20F4               	addwfc	prodh,w,c
  6739  013096  6EDA               	movwf	fsr2h,c
  6740  013098  50DF               	movf	indf2,w,c
  6741  01309A  ECA3  F0AE         	call	_get_packet_size
  6742  01309E  0100               	movlb	0	; () banked
  6743  0130A0  27D0               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  6744                           
  6745                           ; BSR set to: 0
  6746  0130A2  0100               	movlb	0	; () banked
  6747  0130A4  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  6748  0130A6                     l2101:
  6749                           
  6750                           ; BSR set to: 0
  6751                           
  6752                           ; BSR set to: 0
  6753  0130A6  0100               	movlb	0	; () banked
  6754  0130A8  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6755  0130AA  0100               	movlb	0	; () banked
  6756  0130AC  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  6757  0130AE  B0D8               	btfsc	status,0,c
  6758  0130B0  0012               	return	
  6759  0130B2  D79B               	goto	l2102
  6760  0130B4                     __end_of_irobot_query_and_update:
  6761                           	opt stack 0
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           postinc0	equ	0xFEE
  6769                           wreg	equ	0xFE8
  6770                           postdec1	equ	0xFE5
  6771                           fsr1h	equ	0xFE2
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _rx_assign *****************
  6779 ;; Defined at:
  6780 ;;		line 74 in file "Library/iRobotSerial.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  packetID        1    wreg     unsigned char 
  6783 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  6784 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  packetID        1    5[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      void 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6796 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;Total ram usage:        5 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    8
  6803 ;; This function calls:
  6804 ;;		_sort_iRBumpDrop
  6805 ;; This function is called by:
  6806 ;;		_irobot_query_and_update
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text15
  6811  013D0A                     __ptext15:
  6812                           	opt stack 0
  6813  013D0A                     _rx_assign:
  6814                           	opt stack 19
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;incstack = 0
  6818                           ;rx_assign@packetID stored from wreg
  6819  013D0A  0100               	movlb	0	; () banked
  6820  013D0C  6FBA               	movwf	rx_assign@packetID& (0+255),b
  6821                           
  6822                           ;iRobotSerial.c: 75: switch (packetID) {
  6823  013D0E  D057               	goto	l2035
  6824  013D10                     l2036:
  6825                           
  6826                           ; BSR set to: 0
  6827  013D10  C0B6  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;iRobotSerial.c: 77: sort_iRBumpDrop();
  6831  013D14  EC33  F0AA         	call	_sort_iRBumpDrop	;wreg free
  6832                           
  6833                           ;iRobotSerial.c: 78: break;
  6834  013D18  0012               	return	
  6835  013D1A                     l2038:
  6836                           
  6837                           ; BSR set to: 0
  6838  013D1A  C0B6  F035         	movff	rx_assign@packetIDValue,_iRWall
  6839                           
  6840                           ;iRobotSerial.c: 80: break;
  6841  013D1E  0012               	return	
  6842  013D20                     l2039:
  6843                           
  6844                           ; BSR set to: 0
  6845  013D20  C0B6  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  6846                           
  6847                           ;iRobotSerial.c: 82: break;
  6848  013D24  0012               	return	
  6849  013D26                     l2040:
  6850                           
  6851                           ; BSR set to: 0
  6852  013D26  C0B6  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  6853                           
  6854                           ;iRobotSerial.c: 84: break;
  6855  013D2A  0012               	return	
  6856  013D2C                     l2041:
  6857                           
  6858                           ; BSR set to: 0
  6859  013D2C  C0B6  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  6860                           
  6861                           ;iRobotSerial.c: 86: break;
  6862  013D30  0012               	return	
  6863  013D32                     l2042:
  6864                           
  6865                           ; BSR set to: 0
  6866  013D32  C0B6  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  6867                           
  6868                           ;iRobotSerial.c: 88: break;
  6869  013D36  0012               	return	
  6870  013D38                     l2043:
  6871                           
  6872                           ; BSR set to: 0
  6873  013D38  C0B6  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  6874                           
  6875                           ;iRobotSerial.c: 90: break;
  6876  013D3C  0012               	return	
  6877  013D3E                     
  6878                           ; BSR set to: 0
  6879                           ;iRobotSerial.c: 92: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  6880                           ;iRobotSerial.c: 93: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB);
  6881                           
  6882                           ; BSR set to: 0
  6883  013D3E  0100               	movlb	0	; () banked
  6884  013D40  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  6885  013D42  0100               	movlb	0	; () banked
  6886  013D44  A4D8               	btfss	status,2,c
  6887  013D46  D005               	goto	l2046
  6888                           
  6889                           ; BSR set to: 0
  6890  013D48  C0B6  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  6891  013D4C  0103               	movlb	3	; () banked
  6892  013D4E  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  6893  013D50  0012               	return	
  6894  013D52                     l2046:
  6895                           
  6896                           ; BSR set to: 0
  6897  013D52  C0B6  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  6898  013D56  0103               	movlb	3	; () banked
  6899  013D58  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  6900                           
  6901                           ; BSR set to: 3
  6902  013D5A  0103               	movlb	3	; () banked
  6903  013D5C  5122               	movf	_iRDistanceSS& (0+255),w,b
  6904  013D5E  0100               	movlb	0	; () banked
  6905  013D60  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  6906  013D62  6BB8               	clrf	??_rx_assign& (0+255),b
  6907  013D64  0103               	movlb	3	; () banked
  6908  013D66  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  6909  013D68  0100               	movlb	0	; () banked
  6910  013D6A  25B8               	addwf	??_rx_assign& (0+255),w,b
  6911  013D6C  0100               	movlb	0	; () banked
  6912  013D6E  6F7D               	movwf	_iRDistance& (0+255),b
  6913  013D70  0103               	movlb	3	; () banked
  6914  013D72  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  6915  013D74  0100               	movlb	0	; () banked
  6916  013D76  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6917  013D78  0100               	movlb	0	; () banked
  6918  013D7A  6F7E               	movwf	(_iRDistance+1)& (0+255),b
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;iRobotSerial.c: 94: break;
  6922  013D7C  0012               	return	
  6923  013D7E                     
  6924                           ; BSR set to: 0
  6925                           ;iRobotSerial.c: 96: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  6926                           ;iRobotSerial.c: 97: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB);
  6927                           
  6928                           ; BSR set to: 0
  6929  013D7E  0100               	movlb	0	; () banked
  6930  013D80  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  6931  013D82  0100               	movlb	0	; () banked
  6932  013D84  A4D8               	btfss	status,2,c
  6933  013D86  D005               	goto	l2051
  6934                           
  6935                           ; BSR set to: 0
  6936  013D88  C0B6  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6937  013D8C  0103               	movlb	3	; () banked
  6938  013D8E  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6939  013D90  0012               	return	
  6940  013D92                     l2051:
  6941                           
  6942                           ; BSR set to: 0
  6943  013D92  C0B6  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6944  013D96  0103               	movlb	3	; () banked
  6945  013D98  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6946                           
  6947                           ; BSR set to: 3
  6948  013D9A  0103               	movlb	3	; () banked
  6949  013D9C  511E               	movf	_iRAngleSS& (0+255),w,b
  6950  013D9E  0100               	movlb	0	; () banked
  6951  013DA0  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  6952  013DA2  6BB8               	clrf	??_rx_assign& (0+255),b
  6953  013DA4  0103               	movlb	3	; () banked
  6954  013DA6  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6955  013DA8  0100               	movlb	0	; () banked
  6956  013DAA  25B8               	addwf	??_rx_assign& (0+255),w,b
  6957  013DAC  0100               	movlb	0	; () banked
  6958  013DAE  6F7B               	movwf	_iRAngle& (0+255),b
  6959  013DB0  0103               	movlb	3	; () banked
  6960  013DB2  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6961  013DB4  0100               	movlb	0	; () banked
  6962  013DB6  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6963  013DB8  0100               	movlb	0	; () banked
  6964  013DBA  6F7C               	movwf	(_iRAngle+1)& (0+255),b
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;iRobotSerial.c: 99: }
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;iRobotSerial.c: 98: break;
  6971  013DBC  0012               	return	
  6972  013DBE                     l2035:
  6973                           
  6974                           ; BSR set to: 0
  6975  013DBE  0100               	movlb	0	; () banked
  6976  013DC0  51BA               	movf	rx_assign@packetID& (0+255),w,b
  6977                           
  6978                           ; Switch size 1, requested type "space"
  6979                           ; Number of cases is 9, Range of values is 7 to 20
  6980                           ; switch strategies available:
  6981                           ; Name         Instructions Cycles
  6982                           ; simple_byte           28    15 (average)
  6983                           ;	Chosen strategy is simple_byte
  6984  013DC2  0A07               	xorlw	7	; case 7
  6985  013DC4  B4D8               	btfsc	status,2,c
  6986  013DC6  D7A4               	goto	l2036
  6987  013DC8  0A0F               	xorlw	15	; case 8
  6988  013DCA  B4D8               	btfsc	status,2,c
  6989  013DCC  D7A6               	goto	l2038
  6990  013DCE  0A01               	xorlw	1	; case 9
  6991  013DD0  B4D8               	btfsc	status,2,c
  6992  013DD2  D7A6               	goto	l2039
  6993  013DD4  0A03               	xorlw	3	; case 10
  6994  013DD6  B4D8               	btfsc	status,2,c
  6995  013DD8  D7A6               	goto	l2040
  6996  013DDA  0A01               	xorlw	1	; case 11
  6997  013DDC  B4D8               	btfsc	status,2,c
  6998  013DDE  D7A6               	goto	l2041
  6999  013DE0  0A07               	xorlw	7	; case 12
  7000  013DE2  B4D8               	btfsc	status,2,c
  7001  013DE4  D7A6               	goto	l2042
  7002  013DE6  0A01               	xorlw	1	; case 13
  7003  013DE8  B4D8               	btfsc	status,2,c
  7004  013DEA  D7A6               	goto	l2043
  7005  013DEC  0A1E               	xorlw	30	; case 19
  7006  013DEE  B4D8               	btfsc	status,2,c
  7007  013DF0  D7A6               	goto	l2044
  7008  013DF2  0A07               	xorlw	7	; case 20
  7009  013DF4  A4D8               	btfss	status,2,c
  7010  013DF6  0012               	return	
  7011  013DF8  D7C2               	goto	l2049
  7012  013DFA                     __end_of_rx_assign:
  7013                           	opt stack 0
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           postinc0	equ	0xFEE
  7021                           wreg	equ	0xFE8
  7022                           postdec1	equ	0xFE5
  7023                           fsr1h	equ	0xFE2
  7024                           fsr1l	equ	0xFE1
  7025                           indf2	equ	0xFDF
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function _sort_iRBumpDrop *****************
  7031 ;; Defined at:
  7032 ;;		line 102 in file "Library/iRobotSerial.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;		None
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;		None
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      void 
  7039 ;; Registers used:
  7040 ;;		wreg, status,2, status,0
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;Total ram usage:        1 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:    7
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_rx_assign
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text16
  7061  015466                     __ptext16:
  7062                           	opt stack 0
  7063  015466                     _sort_iRBumpDrop:
  7064                           	opt stack 19
  7065                           
  7066                           ;iRobotSerial.c: 103: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  7067                           
  7068                           ;incstack = 0
  7069  015466  A036               	btfss	_iRBumpDrop,0,c
  7070  015468  D002               	goto	l2058
  7071  01546A  0E01               	movlw	1
  7072  01546C  D001               	goto	L1
  7073  01546E                     l2058:
  7074                           
  7075                           ; BSR set to: 0
  7076  01546E  0E00               	movlw	0
  7077  015470                     L1:
  7078  015470  0100               	movlb	0	; () banked
  7079  015472  6F8D               	movwf	_iRBumpRight& (0+255),b
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;iRobotSerial.c: 104: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0
      +                          );
  7083                           
  7084                           ; BSR set to: 0
  7085  015474  C036  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7086  015478  0100               	movlb	0	; () banked
  7087  01547A  90D8               	bcf	status,0,c
  7088  01547C  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7089  01547E  0100               	movlb	0	; () banked
  7090  015480  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7091  015482  D002               	goto	l2062
  7092                           
  7093                           ; BSR set to: 0
  7094  015484  0E01               	movlw	1
  7095  015486  D001               	goto	L2
  7096  015488                     l2062:
  7097                           
  7098                           ; BSR set to: 0
  7099                           
  7100                           ; BSR set to: 0
  7101  015488  0E00               	movlw	0
  7102  01548A                     L2:
  7103  01548A  0100               	movlb	0	; () banked
  7104  01548C  6F8C               	movwf	_iRBumpLeft& (0+255),b
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;iRobotSerial.c: 105: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight =
      +                           0);
  7108                           
  7109                           ; BSR set to: 0
  7110  01548E  C036  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7111  015492  0100               	movlb	0	; () banked
  7112  015494  90D8               	bcf	status,0,c
  7113  015496  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7114  015498  0100               	movlb	0	; () banked
  7115  01549A  90D8               	bcf	status,0,c
  7116  01549C  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7117  01549E  0100               	movlb	0	; () banked
  7118  0154A0  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7119  0154A2  D002               	goto	l2066
  7120                           
  7121                           ; BSR set to: 0
  7122  0154A4  0E01               	movlw	1
  7123  0154A6  D001               	goto	L3
  7124  0154A8                     l2066:
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129  0154A8  0E00               	movlw	0
  7130  0154AA                     L3:
  7131  0154AA  0100               	movlb	0	; () banked
  7132  0154AC  6F8B               	movwf	_iRDropRight& (0+255),b
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;iRobotSerial.c: 106: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0
      +                          );
  7136                           
  7137                           ; BSR set to: 0
  7138  0154AE  C036  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7139  0154B2  0100               	movlb	0	; () banked
  7140  0154B4  90D8               	bcf	status,0,c
  7141  0154B6  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7142  0154B8  0100               	movlb	0	; () banked
  7143  0154BA  90D8               	bcf	status,0,c
  7144  0154BC  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7145  0154BE  0100               	movlb	0	; () banked
  7146  0154C0  90D8               	bcf	status,0,c
  7147  0154C2  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7148  0154C4  0100               	movlb	0	; () banked
  7149  0154C6  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7150  0154C8  D002               	goto	l2070
  7151                           
  7152                           ; BSR set to: 0
  7153  0154CA  0E01               	movlw	1
  7154  0154CC  D001               	goto	L4
  7155  0154CE                     l2070:
  7156                           
  7157                           ; BSR set to: 0
  7158                           
  7159                           ; BSR set to: 0
  7160  0154CE  0E00               	movlw	0
  7161  0154D0                     L4:
  7162  0154D0  0100               	movlb	0	; () banked
  7163  0154D2  6F8A               	movwf	_iRDropLeft& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;iRobotSerial.c: 107: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster
      +                           = 0);
  7167                           
  7168                           ; BSR set to: 0
  7169  0154D4  C036  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7170  0154D8  0100               	movlb	0	; () banked
  7171  0154DA  3BB5               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  7172  0154DC  0E0F               	movlw	15
  7173  0154DE  17B5               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  7174  0154E0  0100               	movlb	0	; () banked
  7175  0154E2  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7176  0154E4  D003               	goto	l2074
  7177                           
  7178                           ; BSR set to: 0
  7179  0154E6  0E01               	movlw	1
  7180  0154E8  6E2F               	movwf	_iRDropCaster,c
  7181  0154EA  0012               	return	
  7182  0154EC                     l2074:
  7183                           
  7184                           ; BSR set to: 0
  7185                           
  7186                           ; BSR set to: 0
  7187  0154EC  0E00               	movlw	0
  7188  0154EE  6E2F               	movwf	_iRDropCaster,c
  7189  0154F0  0012               	return	
  7190  0154F2                     __end_of_sort_iRBumpDrop:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           postdec1	equ	0xFE5
  7201                           fsr1h	equ	0xFE2
  7202                           fsr1l	equ	0xFE1
  7203                           indf2	equ	0xFDF
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _get_packet_size *****************
  7209 ;; Defined at:
  7210 ;;		line 60 in file "Library/iRobotSerial.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  packetID        1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  packetID        1    0[BANK0 ] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      unsigned char 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;Total ram usage:        1 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    7
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_irobot_query_and_update
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text17
  7239  015D46                     __ptext17:
  7240                           	opt stack 0
  7241  015D46                     _get_packet_size:
  7242                           	opt stack 20
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;incstack = 0
  7246                           ;get_packet_size@packetID stored from wreg
  7247  015D46  0100               	movlb	0	; () banked
  7248  015D48  6FB5               	movwf	get_packet_size@packetID& (0+255),b
  7249                           
  7250                           ;iRobotSerial.c: 61: switch (packetID) {
  7251  015D4A  D012               	goto	l2021
  7252  015D4C  0E01               	movlw	1
  7253  015D4E  0012               	return	
  7254  015D50  0E01               	movlw	1
  7255  015D52  0012               	return	
  7256  015D54  0E01               	movlw	1
  7257  015D56  0012               	return	
  7258  015D58  0E01               	movlw	1
  7259  015D5A  0012               	return	
  7260  015D5C  0E01               	movlw	1
  7261  015D5E  0012               	return	
  7262  015D60  0E01               	movlw	1
  7263  015D62  0012               	return	
  7264  015D64  0E01               	movlw	1
  7265  015D66  0012               	return	
  7266  015D68  0E02               	movlw	2
  7267  015D6A  0012               	return	
  7268  015D6C  0E02               	movlw	2
  7269                           
  7270                           ;iRobotSerial.c: 71: }
  7271  015D6E  0012               	return	
  7272  015D70                     l2021:
  7273  015D70  0100               	movlb	0	; () banked
  7274  015D72  51B5               	movf	get_packet_size@packetID& (0+255),w,b
  7275                           
  7276                           ; Switch size 1, requested type "space"
  7277                           ; Number of cases is 9, Range of values is 7 to 20
  7278                           ; switch strategies available:
  7279                           ; Name         Instructions Cycles
  7280                           ; simple_byte           28    15 (average)
  7281                           ;	Chosen strategy is simple_byte
  7282  015D74  0A07               	xorlw	7	; case 7
  7283  015D76  B4D8               	btfsc	status,2,c
  7284  015D78  D7E9               	goto	l2022
  7285  015D7A  0A0F               	xorlw	15	; case 8
  7286  015D7C  B4D8               	btfsc	status,2,c
  7287  015D7E  D7E8               	goto	l2024
  7288  015D80  0A01               	xorlw	1	; case 9
  7289  015D82  B4D8               	btfsc	status,2,c
  7290  015D84  D7E7               	goto	l2025
  7291  015D86  0A03               	xorlw	3	; case 10
  7292  015D88  B4D8               	btfsc	status,2,c
  7293  015D8A  D7E6               	goto	l2026
  7294  015D8C  0A01               	xorlw	1	; case 11
  7295  015D8E  B4D8               	btfsc	status,2,c
  7296  015D90  D7E5               	goto	l2027
  7297  015D92  0A07               	xorlw	7	; case 12
  7298  015D94  B4D8               	btfsc	status,2,c
  7299  015D96  D7E4               	goto	l2028
  7300  015D98  0A01               	xorlw	1	; case 13
  7301  015D9A  B4D8               	btfsc	status,2,c
  7302  015D9C  D7E3               	goto	l2029
  7303  015D9E  0A1E               	xorlw	30	; case 19
  7304  015DA0  B4D8               	btfsc	status,2,c
  7305  015DA2  D7E2               	goto	l2030
  7306  015DA4  0A07               	xorlw	7	; case 20
  7307  015DA6  A4D8               	btfss	status,2,c
  7308  015DA8  0012               	return	
  7309  015DAA  D7E0               	goto	l2031
  7310  015DAC                     __end_of_get_packet_size:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           postinc0	equ	0xFEE
  7319                           wreg	equ	0xFE8
  7320                           postdec1	equ	0xFE5
  7321                           fsr1h	equ	0xFE2
  7322                           fsr1l	equ	0xFE1
  7323                           indf2	equ	0xFDF
  7324                           fsr2h	equ	0xFDA
  7325                           fsr2l	equ	0xFD9
  7326                           status	equ	0xFD8
  7327                           
  7328 ;; *************** function _eusart_getch *****************
  7329 ;; Defined at:
  7330 ;;		line 136 in file "Library/iRobotSerial.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;		None
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;		None
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  1    wreg      unsigned char 
  7337 ;; Registers used:
  7338 ;;		wreg, status,2
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;Total ram usage:        0 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    7
  7351 ;; This function calls:
  7352 ;;		Nothing
  7353 ;; This function is called by:
  7354 ;;		_irobot_query_and_update
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           	psect	text18
  7359  016D12                     __ptext18:
  7360                           	opt stack 0
  7361  016D12                     _eusart_getch:
  7362                           	opt stack 20
  7363                           
  7364                           ;iRobotSerial.c: 137: while (!PIR1bits.RC1IF) {
  7365                           
  7366                           ;incstack = 0
  7367  016D12  AA9E               	btfss	3998,5,c	;volatile
  7368  016D14  D7FE               	goto	_eusart_getch
  7369                           
  7370                           ;iRobotSerial.c: 138: };
  7371                           ;iRobotSerial.c: 139: return RCREG1;
  7372  016D16  50AF               	movf	4015,w,c	;volatile
  7373  016D18  0012               	return	
  7374  016D1A                     __end_of_eusart_getch:
  7375                           	opt stack 0
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           postdec1	equ	0xFE5
  7385                           fsr1h	equ	0xFE2
  7386                           fsr1l	equ	0xFE1
  7387                           indf2	equ	0xFDF
  7388                           fsr2h	equ	0xFDA
  7389                           fsr2l	equ	0xFD9
  7390                           status	equ	0xFD8
  7391                           
  7392 ;; *************** function _irobot_stop_motion *****************
  7393 ;; Defined at:
  7394 ;;		line 328 in file "Library/iRobotSerial.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  isScript        1    wreg     unsigned char 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  isScript        1   25[BANK0 ] unsigned char 
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;Total ram usage:        1 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    9
  7415 ;; This function calls:
  7416 ;;		_irobot_move
  7417 ;; This function is called by:
  7418 ;;		_irobot_rotate
  7419 ;;		_safeToGo
  7420 ;;		_move_and_rotate
  7421 ;;		_mode2
  7422 ;;		_mode4
  7423 ;;		_irobot_move_to_simple
  7424 ;;		_irobot_rotate_to
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text19
  7429  01634A                     __ptext19:
  7430                           	opt stack 0
  7431  01634A                     _irobot_stop_motion:
  7432                           	opt stack 19
  7433                           
  7434                           ;incstack = 0
  7435                           ;irobot_stop_motion@isScript stored from wreg
  7436  01634A  0100               	movlb	0	; () banked
  7437  01634C  6FCE               	movwf	irobot_stop_motion@isScript& (0+255),b
  7438                           
  7439                           ;iRobotSerial.c: 329: (isScript) ? irobot_move(1, 0, 0) : irobot_move(0, 0, 0);
  7440  01634E  0100               	movlb	0	; () banked
  7441  016350  51CE               	movf	irobot_stop_motion@isScript& (0+255),w,b
  7442  016352  0100               	movlb	0	; () banked
  7443  016354  B4D8               	btfsc	status,2,c
  7444  016356  D00E               	goto	l2173
  7445                           
  7446                           ; BSR set to: 0
  7447  016358  0E00               	movlw	0
  7448  01635A  0100               	movlb	0	; () banked
  7449  01635C  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7450  01635E  0E00               	movlw	0
  7451  016360  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  7452  016362  0E00               	movlw	0
  7453  016364  0100               	movlb	0	; () banked
  7454  016366  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7455  016368  0E00               	movlw	0
  7456  01636A  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7457  01636C  0E01               	movlw	1
  7458  01636E  EC73  F0A5         	call	_irobot_move
  7459  016372  0012               	return	
  7460  016374                     l2173:
  7461  016374  0E00               	movlw	0
  7462  016376  0100               	movlb	0	; () banked
  7463  016378  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7464  01637A  0E00               	movlw	0
  7465  01637C  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  7466  01637E  0E00               	movlw	0
  7467  016380  0100               	movlb	0	; () banked
  7468  016382  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7469  016384  0E00               	movlw	0
  7470  016386  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7471  016388  0E00               	movlw	0
  7472  01638A  EC73  F0A5         	call	_irobot_move
  7473  01638E  0012               	return	
  7474  016390                     __end_of_irobot_stop_motion:
  7475                           	opt stack 0
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodh	equ	0xFF4
  7481                           prodl	equ	0xFF3
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           postdec1	equ	0xFE5
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function _irobot_move *****************
  7493 ;; Defined at:
  7494 ;;		line 240 in file "Library/iRobotSerial.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  isScript        1    wreg     unsigned char 
  7497 ;;  moveSpeed       2   16[BANK0 ] short 
  7498 ;;  moveTurnRadi    2   18[BANK0 ] short 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  isScript        1   24[BANK0 ] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;Total ram usage:        9 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    8
  7517 ;; This function calls:
  7518 ;;		_eusart_putch
  7519 ;;		_load_iRScriptStack
  7520 ;;		_twos_complement_of
  7521 ;; This function is called by:
  7522 ;;		_irobot_rotate
  7523 ;;		_irobot_stop_motion
  7524 ;;		_irobot_move_straight
  7525 ;;		_correct_distance
  7526 ;;		_irobot_move_to_simple
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text20
  7531  014AE6                     __ptext20:
  7532                           	opt stack 0
  7533  014AE6                     _irobot_move:
  7534                           	opt stack 19
  7535                           
  7536                           ;incstack = 0
  7537                           ;irobot_move@isScript stored from wreg
  7538  014AE6  0100               	movlb	0	; () banked
  7539  014AE8  6FCD               	movwf	irobot_move@isScript& (0+255),b
  7540                           
  7541                           ;iRobotSerial.c: 241: moveSpeed = twos_complement_of(moveSpeed);
  7542  014AEA  C0C5  F0B5         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  7543  014AEE  C0C6  F0B6         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  7544  014AF2  EC0E  F0B2         	call	_twos_complement_of	;wreg free
  7545  014AF6  C0B5  F0C5         	movff	?_twos_complement_of,irobot_move@moveSpeed
  7546  014AFA  C0B6  F0C6         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  7547                           
  7548                           ;iRobotSerial.c: 242: moveTurnRadius = twos_complement_of(moveTurnRadius);
  7549  014AFE  C0C7  F0B5         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  7550  014B02  C0C8  F0B6         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  7551  014B06  EC0E  F0B2         	call	_twos_complement_of	;wreg free
  7552  014B0A  C0B5  F0C7         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  7553  014B0E  C0B6  F0C8         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  7554                           
  7555                           ;iRobotSerial.c: 244: if (isScript) {
  7556  014B12  0100               	movlb	0	; () banked
  7557  014B14  51CD               	movf	irobot_move@isScript& (0+255),w,b
  7558  014B16  0100               	movlb	0	; () banked
  7559  014B18  B4D8               	btfsc	status,2,c
  7560  014B1A  D029               	goto	l2139
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;iRobotSerial.c: 245: load_iRScriptStack(5, iR_DRIVE,
  7564                           ;iRobotSerial.c: 246: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  7565                           ;iRobotSerial.c: 247: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  7566  014B1C  0E00               	movlw	0
  7567  014B1E  0100               	movlb	0	; () banked
  7568  014B20  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  7569  014B22  0E89               	movlw	137
  7570  014B24  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  7571  014B26  C0C6  F0C9         	movff	irobot_move@moveSpeed+1,??_irobot_move
  7572  014B2A  0100               	movlb	0	; () banked
  7573  014B2C  6BCA               	clrf	(??_irobot_move+1)& (0+255),b
  7574  014B2E  BFC9               	btfsc	??_irobot_move& (0+255),7,b
  7575  014B30  69CA               	setf	(??_irobot_move+1)& (0+255),b
  7576  014B32  0100               	movlb	0	; () banked
  7577  014B34  51C9               	movf	??_irobot_move& (0+255),w,b
  7578  014B36  0100               	movlb	0	; () banked
  7579  014B38  6FB7               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  7580  014B3A  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  7581  014B3C  0100               	movlb	0	; () banked
  7582  014B3E  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  7583  014B40  0100               	movlb	0	; () banked
  7584  014B42  6FB9               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  7585  014B44  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  7586  014B46  C0C8  F0CB         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  7587  014B4A  0100               	movlb	0	; () banked
  7588  014B4C  6BCC               	clrf	(??_irobot_move+3)& (0+255),b
  7589  014B4E  BFCB               	btfsc	(??_irobot_move+2)& (0+255),7,b
  7590  014B50  69CC               	setf	(??_irobot_move+3)& (0+255),b
  7591  014B52  0100               	movlb	0	; () banked
  7592  014B54  51CB               	movf	(??_irobot_move+2)& (0+255),w,b
  7593  014B56  0100               	movlb	0	; () banked
  7594  014B58  6FBB               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  7595  014B5A  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  7596  014B5C  0100               	movlb	0	; () banked
  7597  014B5E  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7598  014B60  0100               	movlb	0	; () banked
  7599  014B62  6FBD               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  7600  014B64  6BBE               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  7601  014B66  0E05               	movlw	5
  7602  014B68  EC04  F0AE         	call	_load_iRScriptStack
  7603                           
  7604                           ;iRobotSerial.c: 248: } else {
  7605  014B6C  0012               	return	
  7606  014B6E                     l2139:
  7607                           
  7608                           ;iRobotSerial.c: 249: eusart_putch(iR_DRIVE);
  7609  014B6E  0E89               	movlw	137
  7610  014B70  EC4C  F0B6         	call	_eusart_putch
  7611                           
  7612                           ;iRobotSerial.c: 250: eusart_putch((((moveSpeed)>>8) & 0xFF));
  7613  014B74  0100               	movlb	0	; () banked
  7614  014B76  51C6               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  7615  014B78  EC4C  F0B6         	call	_eusart_putch
  7616                           
  7617                           ;iRobotSerial.c: 251: eusart_putch(((moveSpeed) & 0xFF));
  7618  014B7C  0100               	movlb	0	; () banked
  7619  014B7E  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  7620  014B80  EC4C  F0B6         	call	_eusart_putch
  7621                           
  7622                           ;iRobotSerial.c: 252: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  7623  014B84  0100               	movlb	0	; () banked
  7624  014B86  51C8               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  7625  014B88  EC4C  F0B6         	call	_eusart_putch
  7626                           
  7627                           ;iRobotSerial.c: 253: eusart_putch(((moveTurnRadius) & 0xFF));
  7628  014B8C  0100               	movlb	0	; () banked
  7629  014B8E  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7630  014B90  EC4C  F0B6         	call	_eusart_putch
  7631  014B94  0012               	return	
  7632  014B96                     __end_of_irobot_move:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           postinc0	equ	0xFEE
  7641                           wreg	equ	0xFE8
  7642                           postdec1	equ	0xFE5
  7643                           fsr1h	equ	0xFE2
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _twos_complement_of *****************
  7651 ;; Defined at:
  7652 ;;		line 181 in file "Library/iRobotSerial.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  complementVa    2    0[BANK0 ] short 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  2    0[BANK0 ] unsigned short 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7666 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;Total ram usage:        2 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    7
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_irobot_move
  7677 ;;		_irobot_angle_wait
  7678 ;;		_irobot_distance_wait
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text21
  7683  01641C                     __ptext21:
  7684                           	opt stack 0
  7685  01641C                     _twos_complement_of:
  7686                           	opt stack 19
  7687                           
  7688                           ;iRobotSerial.c: 182: if (complementValue < 0) {
  7689                           
  7690                           ;incstack = 0
  7691  01641C  0100               	movlb	0	; () banked
  7692  01641E  AFB6               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  7693  016420  D01A               	goto	l2110
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;iRobotSerial.c: 183: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  7697  016422  0100               	movlb	0	; () banked
  7698  016424  BFB6               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  7699  016426  D007               	goto	u9780
  7700  016428  0100               	movlb	0	; () banked
  7701  01642A  51B6               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  7702  01642C  E10A               	bnz	l2112
  7703  01642E  0100               	movlb	0	; () banked
  7704  016430  05B5               	decf	twos_complement_of@complementValue& (0+255),w,b
  7705  016432  B0D8               	btfsc	status,0,c
  7706  016434  D006               	goto	l2112
  7707  016436                     u9780:
  7708                           
  7709                           ; BSR set to: 0
  7710  016436  0100               	movlb	0	; () banked
  7711  016438  6DB5               	negf	twos_complement_of@complementValue& (0+255),b
  7712  01643A  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7713  01643C  B0D8               	btfsc	status,0,c
  7714  01643E  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7715  016440  D004               	goto	l2114
  7716  016442                     l2112:
  7717                           
  7718                           ; BSR set to: 0
  7719  016442  C0B5  F0B5         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  7720  016446  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  7721  01644A                     l2114:
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;iRobotSerial.c: 184: complementValue = ~complementValue;
  7725                           
  7726                           ; BSR set to: 0
  7727  01644A  0100               	movlb	0	; () banked
  7728  01644C  1FB5               	comf	twos_complement_of@complementValue& (0+255),f,b
  7729  01644E  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7730                           
  7731                           ;iRobotSerial.c: 185: complementValue += 1;
  7732  016450  0100               	movlb	0	; () banked
  7733  016452  4BB5               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  7734  016454  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7735  016456                     l2110:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;iRobotSerial.c: 186: }
  7739                           ;iRobotSerial.c: 187: return complementValue;
  7740                           
  7741                           ; BSR set to: 0
  7742  016456  C0B5  F0B5         	movff	twos_complement_of@complementValue,?_twos_complement_of
  7743  01645A  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  7744  01645E  0012               	return	
  7745  016460                     __end_of_twos_complement_of:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           postinc0	equ	0xFEE
  7754                           wreg	equ	0xFE8
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           fsr2h	equ	0xFDA
  7760                           fsr2l	equ	0xFD9
  7761                           status	equ	0xFD8
  7762                           
  7763 ;; *************** function _irobot_song_play *****************
  7764 ;; Defined at:
  7765 ;;		line 294 in file "Library/iRobotSerial.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  songNumber      1    wreg     unsigned char 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  songNumber      1    1[BANK0 ] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, cstack
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;Total ram usage:        1 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    8
  7786 ;; This function calls:
  7787 ;;		_eusart_putch
  7788 ;; This function is called by:
  7789 ;;		_safeToGo
  7790 ;;		_mode1
  7791 ;;		_mode2
  7792 ;;		_mode3
  7793 ;;		_mode4
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           	psect	text22
  7798  016C10                     __ptext22:
  7799                           	opt stack 0
  7800  016C10                     _irobot_song_play:
  7801                           	opt stack 20
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;incstack = 0
  7805                           ;irobot_song_play@songNumber stored from wreg
  7806  016C10  0100               	movlb	0	; () banked
  7807  016C12  6FB6               	movwf	irobot_song_play@songNumber& (0+255),b
  7808                           
  7809                           ;iRobotSerial.c: 295: eusart_putch(iR_SONG_PLAY);
  7810  016C14  0E8D               	movlw	141
  7811  016C16  EC4C  F0B6         	call	_eusart_putch
  7812                           
  7813                           ;iRobotSerial.c: 296: eusart_putch(songNumber);
  7814  016C1A  0100               	movlb	0	; () banked
  7815  016C1C  51B6               	movf	irobot_song_play@songNumber& (0+255),w,b
  7816  016C1E  EC4C  F0B6         	call	_eusart_putch
  7817  016C22  0012               	return		;funcret
  7818  016C24                     __end_of_irobot_song_play:
  7819                           	opt stack 0
  7820                           tblptru	equ	0xFF8
  7821                           tblptrh	equ	0xFF7
  7822                           tblptrl	equ	0xFF6
  7823                           tablat	equ	0xFF5
  7824                           prodh	equ	0xFF4
  7825                           prodl	equ	0xFF3
  7826                           postinc0	equ	0xFEE
  7827                           wreg	equ	0xFE8
  7828                           postdec1	equ	0xFE5
  7829                           fsr1h	equ	0xFE2
  7830                           fsr1l	equ	0xFE1
  7831                           indf2	equ	0xFDF
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _printf *****************
  7837 ;; Defined at:
  7838 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  7841 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_15(21), 
  7842 ;;		 -> STR_14(21), STR_13(3), STR_12(14), STR_11(3), 
  7843 ;;		 -> STR_10(46), STR_9(3), STR_8(46), STR_7(3), 
  7844 ;;		 -> STR_6(60), STR_5(3), STR_4(60), STR_3(3), 
  7845 ;;		 -> STR_2(14), STR_1(3), 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;  tmpval          4    0        struct .
  7848 ;;  cp              3    0        PTR const unsigned char 
  7849 ;;  val             2   36[BANK0 ] unsigned int 
  7850 ;;  ap              2   34[BANK0 ] PTR void [1]
  7851 ;;		 -> ?_printf(2), 
  7852 ;;  len             2    0        unsigned int 
  7853 ;;  c               1   38[BANK0 ] char 
  7854 ;;  flag            1   33[BANK0 ] unsigned char 
  7855 ;;  prec            1   32[BANK0 ] char 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  2   21[BANK0 ] int 
  7858 ;; Registers used:
  7859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7865 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;Total ram usage:       18 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:   12
  7872 ;; This function calls:
  7873 ;;		___lwdiv
  7874 ;;		___lwmod
  7875 ;;		_putch
  7876 ;; This function is called by:
  7877 ;;		_move_and_rotate
  7878 ;;		_findClosestWall
  7879 ;;		_mode1
  7880 ;;		_mode2
  7881 ;;		_main
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text23
  7886  01287C                     __ptext23:
  7887                           	opt stack 0
  7888  01287C                     _printf:
  7889                           	opt stack 18
  7890                           
  7891                           ;doprnt.c: 466: va_list ap;
  7892                           ;doprnt.c: 499: signed char c;
  7893                           ;doprnt.c: 506: signed char prec;
  7894                           ;doprnt.c: 508: unsigned char flag;
  7895                           ;doprnt.c: 523: union {
  7896                           ;doprnt.c: 524: unsigned long vd;
  7897                           ;doprnt.c: 525: double integ;
  7898                           ;doprnt.c: 526: } tmpval;
  7899                           ;doprnt.c: 528: unsigned int val;
  7900                           ;doprnt.c: 529: unsigned len;
  7901                           ;doprnt.c: 530: const char * cp;
  7902                           ;doprnt.c: 533: *ap = __va_start();
  7903                           
  7904                           ;incstack = 0
  7905  01287C  0ECC               	movlw	low (?_printf+2)
  7906  01287E  0100               	movlb	0	; () banked
  7907  012880  6FD7               	movwf	printf@ap& (0+255),b
  7908  012882  0E00               	movlw	high (?_printf+2)
  7909  012884  0100               	movlb	0	; () banked
  7910  012886  6FD8               	movwf	(printf@ap+1)& (0+255),b
  7911                           
  7912                           ;doprnt.c: 536: while(c = *f++) {
  7913  012888  D0C9               	goto	u11570
  7914  01288A                     
  7915                           ; BSR set to: 0
  7916                           ;doprnt.c: 538: if(c != '%')
  7917                           
  7918                           ; BSR set to: 0
  7919  01288A  0E25               	movlw	37
  7920  01288C  0100               	movlb	0	; () banked
  7921  01288E  19DB               	xorwf	printf@c& (0+255),w,b
  7922  012890  B4D8               	btfsc	status,2,c
  7923  012892  D005               	goto	l2477
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;doprnt.c: 540: {
  7927                           ;doprnt.c: 541: (putch(c) );
  7928  012894  0100               	movlb	0	; () banked
  7929  012896  51DB               	movf	printf@c& (0+255),w,b
  7930  012898  EC3E  F0B6         	call	_putch
  7931                           
  7932                           ;doprnt.c: 542: continue;
  7933  01289C  D0BF               	goto	u11570
  7934  01289E                     l2477:
  7935                           
  7936                           ;doprnt.c: 543: }
  7937                           ;doprnt.c: 548: flag = 0;
  7938  01289E  0E00               	movlw	0
  7939  0128A0  0100               	movlb	0	; () banked
  7940  0128A2  6FD6               	movwf	printf@flag& (0+255),b
  7941                           
  7942                           ;doprnt.c: 635: switch(c = *f++) {
  7943  0128A4  D014               	goto	l2478
  7944  0128A6                     
  7945                           ; BSR set to: 0
  7946                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7947                           
  7948                           ; BSR set to: 0
  7949  0128A6  C0D7  FFD9         	movff	printf@ap,fsr2l
  7950  0128AA  C0D8  FFDA         	movff	printf@ap+1,fsr2h
  7951  0128AE  50DF               	movf	indf2,w,c
  7952  0128B0  0100               	movlb	0	; () banked
  7953  0128B2  6FDB               	movwf	printf@c& (0+255),b
  7954                           
  7955                           ; BSR set to: 0
  7956  0128B4  0E02               	movlw	2
  7957  0128B6  0100               	movlb	0	; () banked
  7958  0128B8  27D7               	addwf	printf@ap& (0+255),f,b
  7959  0128BA  0E00               	movlw	0
  7960  0128BC  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  7961  0128BE                     
  7962                           ; BSR set to: 0
  7963                           ;doprnt.c: 809: (putch(c) );
  7964                           
  7965                           ; BSR set to: 0
  7966  0128BE  0100               	movlb	0	; () banked
  7967  0128C0  51DB               	movf	printf@c& (0+255),w,b
  7968  0128C2  EC3E  F0B6         	call	_putch
  7969                           
  7970                           ;doprnt.c: 810: continue;
  7971  0128C6  D0AA               	goto	u11570
  7972  0128C8                     
  7973                           ;doprnt.c: 818: flag |= 0x40;
  7974  0128C8  0100               	movlb	0	; () banked
  7975  0128CA  8DD6               	bsf	printf@flag& (0+255),6,b
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;doprnt.c: 822: }
  7979                           
  7980                           ;doprnt.c: 819: break;
  7981  0128CC  D01E               	goto	l2483
  7982  0128CE                     l2478:
  7983                           
  7984                           ; BSR set to: 0
  7985                           
  7986                           ; BSR set to: 0
  7987  0128CE  C0CA  FFF6         	movff	printf@f,tblptrl
  7988  0128D2  C0CB  FFF7         	movff	printf@f+1,tblptrh
  7989  0128D6  0100               	movlb	0	; () banked
  7990  0128D8  4BCA               	infsnz	printf@f& (0+255),f,b
  7991  0128DA  2BCB               	incf	(printf@f+1)& (0+255),f,b
  7992  0128DC                     	if	0	;tblptru may be non-zero
  7993  0128DC                     	endif
  7994  0128DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7995  0128DC  0E00               	movlw	low (__mediumconst shr (0+16))
  7996  0128DE  6EF8               	movwf	tblptru,c
  7997  0128E0                     	endif
  7998  0128E0  0008               	tblrd		*
  7999  0128E2  CFF5 F0DB          	movff	tablat,printf@c
  8000  0128E6  0100               	movlb	0	; () banked
  8001  0128E8  51DB               	movf	printf@c& (0+255),w,b
  8002                           
  8003                           ; Switch size 1, requested type "space"
  8004                           ; Number of cases is 5, Range of values is 0 to 117
  8005                           ; switch strategies available:
  8006                           ; Name         Instructions Cycles
  8007                           ; simple_byte           16     9 (average)
  8008                           ;	Chosen strategy is simple_byte
  8009  0128EA  0A00               	xorlw	0	; case 0
  8010  0128EC  B4D8               	btfsc	status,2,c
  8011  0128EE  0012               	return	
  8012  0128F0  0A63               	xorlw	99	; case 99
  8013  0128F2  B4D8               	btfsc	status,2,c
  8014  0128F4  D7D8               	goto	l2484
  8015  0128F6  0A07               	xorlw	7	; case 100
  8016  0128F8  B4D8               	btfsc	status,2,c
  8017  0128FA  D007               	goto	l2483
  8018  0128FC  0A0D               	xorlw	13	; case 105
  8019  0128FE  B4D8               	btfsc	status,2,c
  8020  012900  D004               	goto	l2483
  8021  012902  0A1C               	xorlw	28	; case 117
  8022  012904  B4D8               	btfsc	status,2,c
  8023  012906  D7E0               	goto	l2486
  8024  012908  D7DA               	goto	l2485
  8025  01290A                     l2483:
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8029  01290A  0100               	movlb	0	; () banked
  8030  01290C  BDD6               	btfsc	printf@flag& (0+255),6,b
  8031  01290E  D019               	goto	l2487
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;doprnt.c: 1253: {
  8035                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8036  012910  C0D7  FFD9         	movff	printf@ap,fsr2l
  8037  012914  C0D8  FFDA         	movff	printf@ap+1,fsr2h
  8038  012918  CFDE F0D9          	movff	postinc2,printf@val
  8039  01291C  CFDD F0DA          	movff	postdec2,printf@val+1
  8040                           
  8041                           ; BSR set to: 0
  8042  012920  0E02               	movlw	2
  8043  012922  0100               	movlb	0	; () banked
  8044  012924  27D7               	addwf	printf@ap& (0+255),f,b
  8045  012926  0E00               	movlw	0
  8046  012928  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;doprnt.c: 1261: if((int)val < 0) {
  8050  01292A  0100               	movlb	0	; () banked
  8051  01292C  AFDA               	btfss	(printf@val+1)& (0+255),7,b
  8052  01292E  D016               	goto	l2489
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;doprnt.c: 1262: flag |= 0x03;
  8056  012930  0E03               	movlw	3
  8057  012932  0100               	movlb	0	; () banked
  8058  012934  13D6               	iorwf	printf@flag& (0+255),f,b
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;doprnt.c: 1263: val = -val;
  8062  012936  0100               	movlb	0	; () banked
  8063  012938  6DD9               	negf	printf@val& (0+255),b
  8064  01293A  1FDA               	comf	(printf@val+1)& (0+255),f,b
  8065  01293C  B0D8               	btfsc	status,0,c
  8066  01293E  2BDA               	incf	(printf@val+1)& (0+255),f,b
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;doprnt.c: 1264: }
  8070                           ;doprnt.c: 1266: }
  8071  012940  D00D               	goto	l2489
  8072  012942                     l2487:
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;doprnt.c: 1268: else
  8076                           ;doprnt.c: 1273: {
  8077                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8078                           
  8079                           ; BSR set to: 0
  8080  012942  C0D7  FFD9         	movff	printf@ap,fsr2l
  8081  012946  C0D8  FFDA         	movff	printf@ap+1,fsr2h
  8082  01294A  CFDE F0D9          	movff	postinc2,printf@val
  8083  01294E  CFDD F0DA          	movff	postdec2,printf@val+1
  8084                           
  8085                           ; BSR set to: 0
  8086  012952  0E02               	movlw	2
  8087  012954  0100               	movlb	0	; () banked
  8088  012956  27D7               	addwf	printf@ap& (0+255),f,b
  8089  012958  0E00               	movlw	0
  8090  01295A  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  8091  01295C                     l2489:
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;doprnt.c: 1287: }
  8095                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8096                           
  8097                           ; BSR set to: 0
  8098  01295C  0E01               	movlw	1
  8099  01295E  0100               	movlb	0	; () banked
  8100  012960  6FDB               	movwf	printf@c& (0+255),b
  8101  012962                     l14678:
  8102                           
  8103                           ; BSR set to: 0
  8104  012962  0E05               	movlw	5
  8105  012964  0100               	movlb	0	; () banked
  8106  012966  19DB               	xorwf	printf@c& (0+255),w,b
  8107  012968  B4D8               	btfsc	status,2,c
  8108  01296A  D019               	goto	u11550
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;doprnt.c: 1306: if(val < dpowers[c])
  8112                           
  8113                           ; BSR set to: 0
  8114                           
  8115                           ; BSR set to: 0
  8116  01296C  0100               	movlb	0	; () banked
  8117  01296E  51DB               	movf	printf@c& (0+255),w,b
  8118  012970  0D02               	mullw	2
  8119  012972  0E51               	movlw	low _dpowers
  8120  012974  24F3               	addwf	prodl,w,c
  8121  012976  6EF6               	movwf	tblptrl,c
  8122  012978  0EFD               	movlw	high _dpowers
  8123  01297A  20F4               	addwfc	prodh,w,c
  8124  01297C  6EF7               	movwf	tblptrh,c
  8125  01297E                     	if	1	;There are 3 active tblptr bytes
  8126  01297E  6AF8               	clrf	tblptru,c
  8127  012980  0E00               	movlw	low (__mediumconst shr (0+16))
  8128  012982  22F8               	addwfc	tblptru,f,c
  8129  012984                     	endif
  8130  012984  0009               	tblrd		*+
  8131  012986  50F5               	movf	tablat,w,c
  8132  012988  0100               	movlb	0	; () banked
  8133  01298A  5DD9               	subwf	printf@val& (0+255),w,b
  8134  01298C  0009               	tblrd		*+
  8135  01298E  50F5               	movf	tablat,w,c
  8136  012990  0100               	movlb	0	; () banked
  8137  012992  59DA               	subwfb	(printf@val+1)& (0+255),w,b
  8138  012994  A0D8               	btfss	status,0,c
  8139  012996  D003               	goto	u11550
  8140                           
  8141                           ; BSR set to: 0
  8142                           
  8143                           ; BSR set to: 0
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;doprnt.c: 1307: break;
  8147  012998  0100               	movlb	0	; () banked
  8148  01299A  2BDB               	incf	printf@c& (0+255),f,b
  8149  01299C  D7E2               	goto	l14678
  8150  01299E                     u11550:
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;doprnt.c: 1422: {
  8154                           ;doprnt.c: 1438: if(flag & 0x03)
  8155                           
  8156                           ; BSR set to: 0
  8157  01299E  C0D6  F0D4         	movff	printf@flag,??_printf
  8158  0129A2  0E03               	movlw	3
  8159  0129A4  0100               	movlb	0	; () banked
  8160  0129A6  17D4               	andwf	??_printf& (0+255),f,b
  8161  0129A8  B4D8               	btfsc	status,2,c
  8162  0129AA  D003               	goto	l2493
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;doprnt.c: 1439: (putch('-') );
  8166  0129AC  0E2D               	movlw	45
  8167  0129AE  EC3E  F0B6         	call	_putch
  8168  0129B2                     l2493:
  8169                           
  8170                           ;doprnt.c: 1469: }
  8171                           ;doprnt.c: 1472: prec = c;
  8172  0129B2  C0DB  F0D5         	movff	printf@c,printf@prec
  8173                           
  8174                           ;doprnt.c: 1474: while(prec--) {
  8175  0129B6  D02C               	goto	l2494
  8176  0129B8                     
  8177                           ;doprnt.c: 1478: {
  8178                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8179  0129B8  0100               	movlb	0	; () banked
  8180  0129BA  51D5               	movf	printf@prec& (0+255),w,b
  8181  0129BC  0D02               	mullw	2
  8182  0129BE  0E51               	movlw	low _dpowers
  8183  0129C0  24F3               	addwf	prodl,w,c
  8184  0129C2  6EF6               	movwf	tblptrl,c
  8185  0129C4  0EFD               	movlw	high _dpowers
  8186  0129C6  20F4               	addwfc	prodh,w,c
  8187  0129C8  6EF7               	movwf	tblptrh,c
  8188  0129CA                     	if	1	;There are 3 active tblptr bytes
  8189  0129CA  6AF8               	clrf	tblptru,c
  8190  0129CC  0E00               	movlw	low (__mediumconst shr (0+16))
  8191  0129CE  22F8               	addwfc	tblptru,f,c
  8192  0129D0                     	endif
  8193  0129D0  0009               	tblrd		*+
  8194  0129D2  CFF5 F0B7          	movff	tablat,___lwdiv@divisor
  8195  0129D6  000A               	tblrd		*-
  8196  0129D8  CFF5 F0B8          	movff	tablat,___lwdiv@divisor+1
  8197  0129DC  C0D9  F0B5         	movff	printf@val,___lwdiv@dividend
  8198  0129E0  C0DA  F0B6         	movff	printf@val+1,___lwdiv@dividend+1
  8199  0129E4  EC01  F0AC         	call	___lwdiv	;wreg free
  8200  0129E8  C0B5  F0BC         	movff	?___lwdiv,___lwmod@dividend
  8201  0129EC  C0B6  F0BD         	movff	?___lwdiv+1,___lwmod@dividend+1
  8202  0129F0  0E00               	movlw	0
  8203  0129F2  0100               	movlb	0	; () banked
  8204  0129F4  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
  8205  0129F6  0E0A               	movlw	10
  8206  0129F8  6FBE               	movwf	___lwmod@divisor& (0+255),b
  8207  0129FA  EC6C  F0AF         	call	___lwmod	;wreg free
  8208  0129FE  0100               	movlb	0	; () banked
  8209  012A00  51BC               	movf	?___lwmod& (0+255),w,b
  8210  012A02  0F30               	addlw	48
  8211  012A04  0100               	movlb	0	; () banked
  8212  012A06  6FDB               	movwf	printf@c& (0+255),b
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;doprnt.c: 1523: }
  8216                           ;doprnt.c: 1524: (putch(c) );
  8217  012A08  0100               	movlb	0	; () banked
  8218  012A0A  51DB               	movf	printf@c& (0+255),w,b
  8219  012A0C  EC3E  F0B6         	call	_putch
  8220  012A10                     l2494:
  8221  012A10  0100               	movlb	0	; () banked
  8222  012A12  07D5               	decf	printf@prec& (0+255),f,b
  8223  012A14  0100               	movlb	0	; () banked
  8224  012A16  29D5               	incf	printf@prec& (0+255),w,b
  8225  012A18  A4D8               	btfss	status,2,c
  8226  012A1A  D7CE               	goto	l2495
  8227  012A1C                     u11570:
  8228                           
  8229                           ; BSR set to: 0
  8230                           
  8231                           ; BSR set to: 0
  8232  012A1C  C0CA  FFF6         	movff	printf@f,tblptrl
  8233  012A20  C0CB  FFF7         	movff	printf@f+1,tblptrh
  8234  012A24  0100               	movlb	0	; () banked
  8235  012A26  4BCA               	infsnz	printf@f& (0+255),f,b
  8236  012A28  2BCB               	incf	(printf@f+1)& (0+255),f,b
  8237  012A2A                     	if	0	;tblptru may be non-zero
  8238  012A2A                     	endif
  8239  012A2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8240  012A2A  0E00               	movlw	low (__mediumconst shr (0+16))
  8241  012A2C  6EF8               	movwf	tblptru,c
  8242  012A2E                     	endif
  8243  012A2E  0008               	tblrd		*
  8244  012A30  CFF5 F0DB          	movff	tablat,printf@c
  8245  012A34  0100               	movlb	0	; () banked
  8246  012A36  51DB               	movf	printf@c& (0+255),w,b
  8247  012A38  B4D8               	btfsc	status,2,c
  8248  012A3A  0012               	return	
  8249  012A3C  D726               	goto	l2476
  8250  012A3E                     __end_of_printf:
  8251                           	opt stack 0
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           postinc0	equ	0xFEE
  8259                           wreg	equ	0xFE8
  8260                           postdec1	equ	0xFE5
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           fsr2h	equ	0xFDA
  8267                           fsr2l	equ	0xFD9
  8268                           status	equ	0xFD8
  8269                           
  8270 ;; *************** function _putch *****************
  8271 ;; Defined at:
  8272 ;;		line 454 in file "Library/Console.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;  c               1    wreg     unsigned char 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  c               1   20[BANK0 ] unsigned char 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      void 
  8279 ;; Registers used:
  8280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;Total ram usage:        1 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:   11
  8293 ;; This function calls:
  8294 ;;		_Console_PrintChar
  8295 ;; This function is called by:
  8296 ;;		_printf
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           	psect	text24
  8301  016C7C                     __ptext24:
  8302                           	opt stack 0
  8303  016C7C                     _putch:
  8304                           	opt stack 18
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;incstack = 0
  8308                           ;putch@c stored from wreg
  8309  016C7C  0100               	movlb	0	; () banked
  8310  016C7E  6FC9               	movwf	putch@c& (0+255),b
  8311                           
  8312                           ;Console.c: 456: Console_PrintChar(c);
  8313  016C80  0100               	movlb	0	; () banked
  8314  016C82  51C9               	movf	putch@c& (0+255),w,b
  8315  016C84  ECFF  F095         	call	_Console_PrintChar
  8316  016C88  0012               	return		;funcret
  8317  016C8A                     __end_of_putch:
  8318                           	opt stack 0
  8319                           tblptru	equ	0xFF8
  8320                           tblptrh	equ	0xFF7
  8321                           tblptrl	equ	0xFF6
  8322                           tablat	equ	0xFF5
  8323                           prodh	equ	0xFF4
  8324                           prodl	equ	0xFF3
  8325                           postinc0	equ	0xFEE
  8326                           wreg	equ	0xFE8
  8327                           postdec1	equ	0xFE5
  8328                           fsr1h	equ	0xFE2
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           postdec2	equ	0xFDD
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function _Console_PrintChar *****************
  8338 ;; Defined at:
  8339 ;;		line 322 in file "Library/Console.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  pInput          1    wreg     unsigned char 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  pInput          1   19[BANK0 ] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:        4 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:   10
  8360 ;; This function calls:
  8361 ;;		_Console_Backspace
  8362 ;;		_Console_FormFeed
  8363 ;;		_Console_IncrementCursor
  8364 ;;		_Console_NewLine
  8365 ;;		_Console_ResetCursor
  8366 ;;		_Console_Tab
  8367 ;; This function is called by:
  8368 ;;		_putch
  8369 ;;		_Console_PrintString
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text25
  8374  012BFE                     __ptext25:
  8375                           	opt stack 0
  8376  012BFE                     _Console_PrintChar:
  8377                           	opt stack 18
  8378                           
  8379                           ;incstack = 0
  8380                           ;Console_PrintChar@pInput stored from wreg
  8381  012BFE  0100               	movlb	0	; () banked
  8382  012C00  6FC8               	movwf	Console_PrintChar@pInput& (0+255),b
  8383                           
  8384                           ;Console.c: 324: switch(pInput)
  8385  012C02  D0B1               	goto	l1036
  8386  012C04                     
  8387                           ;Console.c: 327: case '\n':
  8388                           ;Console.c: 328: Console_NewLine();
  8389  012C04  EC6A  F0A8         	call	_Console_NewLine	;wreg free
  8390                           
  8391                           ;Console.c: 329: return;
  8392  012C08  0012               	return	
  8393  012C0A                     
  8394                           ;Console.c: 331: Console_Backspace();
  8395  012C0A  EC9D  F0AF         	call	_Console_Backspace	;wreg free
  8396                           
  8397                           ;Console.c: 332: return;
  8398  012C0E  0012               	return	
  8399  012C10                     
  8400                           ;Console.c: 334: Console_FormFeed();
  8401  012C10  ECEC  F0A9         	call	_Console_FormFeed	;wreg free
  8402                           
  8403                           ;Console.c: 335: return;
  8404  012C14  0012               	return	
  8405  012C16                     
  8406                           ;Console.c: 337: Console_Tab();
  8407  012C16  EC3D  F0A3         	call	_Console_Tab	;wreg free
  8408                           
  8409                           ;Console.c: 338: return;
  8410  012C1A  0012               	return	
  8411  012C1C                     
  8412                           ;Console.c: 340: Console_IncrementCursor();
  8413  012C1C  ECD6  F0AE         	call	_Console_IncrementCursor	;wreg free
  8414                           
  8415                           ;Console.c: 341: return;
  8416  012C20  0012               	return	
  8417  012C22                     
  8418                           ;Console.c: 343: Console_ResetCursor();
  8419  012C22  ECF9  F0B4         	call	_Console_ResetCursor	;wreg free
  8420                           
  8421                           ;Console.c: 344: return;
  8422  012C26  0012               	return	
  8423  012C28                     
  8424                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8425                           
  8426                           ;Console.c: 349: default:
  8427  012C28  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8428  012C2C  0E7F               	movlw	127
  8429  012C2E  0100               	movlb	0	; () banked
  8430  012C30  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  8431  012C32  0100               	movlb	0	; () banked
  8432  012C34  5193               	movf	_lBufferY& (0+255),w,b
  8433  012C36  0D14               	mullw	20
  8434  012C38  0EB4               	movlw	low _lBuffer
  8435  012C3A  0100               	movlb	0	; () banked
  8436  012C3C  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8437  012C3E  0E04               	movlw	high _lBuffer
  8438  012C40  0100               	movlb	0	; () banked
  8439  012C42  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8440  012C44  50F3               	movf	prodl,w,c
  8441  012C46  0100               	movlb	0	; () banked
  8442  012C48  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8443  012C4A  50F4               	movf	prodh,w,c
  8444  012C4C  0100               	movlb	0	; () banked
  8445  012C4E  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8446  012C50  0100               	movlb	0	; () banked
  8447  012C52  5194               	movf	_lBufferX& (0+255),w,b
  8448  012C54  0D01               	mullw	1
  8449  012C56  50F3               	movf	prodl,w,c
  8450  012C58  0100               	movlb	0	; () banked
  8451  012C5A  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8452  012C5C  6ED9               	movwf	fsr2l,c
  8453  012C5E  50F4               	movf	prodh,w,c
  8454  012C60  0100               	movlb	0	; () banked
  8455  012C62  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8456  012C64  6EDA               	movwf	fsr2h,c
  8457  012C66  50DF               	movf	indf2,w,c
  8458  012C68  0B7F               	andlw	127
  8459  012C6A  0100               	movlb	0	; () banked
  8460  012C6C  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  8461  012C6E  B4D8               	btfsc	status,2,c
  8462  012C70  D02E               	goto	l1047
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;Console.c: 351: {
  8466                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8467  012C72  0E01               	movlw	1
  8468  012C74  0100               	movlb	0	; () banked
  8469  012C76  6FFF               	movwf	_change& (0+255),b
  8470                           
  8471                           ; BSR set to: 0
  8472  012C78  0100               	movlb	0	; () banked
  8473  012C7A  5193               	movf	_lBufferY& (0+255),w,b
  8474  012C7C  0D14               	mullw	20
  8475  012C7E  0EB4               	movlw	low _lBuffer
  8476  012C80  0100               	movlb	0	; () banked
  8477  012C82  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  8478  012C84  0E04               	movlw	high _lBuffer
  8479  012C86  0100               	movlb	0	; () banked
  8480  012C88  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8481  012C8A  50F3               	movf	prodl,w,c
  8482  012C8C  0100               	movlb	0	; () banked
  8483  012C8E  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  8484  012C90  50F4               	movf	prodh,w,c
  8485  012C92  0100               	movlb	0	; () banked
  8486  012C94  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8487  012C96  0100               	movlb	0	; () banked
  8488  012C98  5194               	movf	_lBufferX& (0+255),w,b
  8489  012C9A  0D01               	mullw	1
  8490  012C9C  50F3               	movf	prodl,w,c
  8491  012C9E  0100               	movlb	0	; () banked
  8492  012CA0  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  8493  012CA2  6ED9               	movwf	fsr2l,c
  8494  012CA4  50F4               	movf	prodh,w,c
  8495  012CA6  0100               	movlb	0	; () banked
  8496  012CA8  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8497  012CAA  6EDA               	movwf	fsr2h,c
  8498  012CAC  0100               	movlb	0	; () banked
  8499  012CAE  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  8500  012CB0  0980               	iorlw	128
  8501  012CB2  6EDF               	movwf	indf2,c
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  8505  012CB4  0100               	movlb	0	; () banked
  8506  012CB6  5193               	movf	_lBufferY& (0+255),w,b
  8507  012CB8  0D02               	mullw	2
  8508  012CBA  0E00               	movlw	low _lCBuffer
  8509  012CBC  24F3               	addwf	prodl,w,c
  8510  012CBE  6ED9               	movwf	fsr2l,c
  8511  012CC0  0E03               	movlw	high _lCBuffer
  8512  012CC2  20F4               	addwfc	prodh,w,c
  8513  012CC4  6EDA               	movwf	fsr2h,c
  8514  012CC6  C0FD  FFDE         	movff	_gForecolour,postinc2
  8515  012CCA  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  8516  012CCE                     l1047:
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;Console.c: 354: }
  8520                           ;Console.c: 368: if(Console_IncrementCursor())
  8521                           
  8522                           ; BSR set to: 0
  8523  012CCE  ECD6  F0AE         	call	_Console_IncrementCursor	;wreg free
  8524  012CD2  0900               	iorlw	0
  8525  012CD4  B4D8               	btfsc	status,2,c
  8526  012CD6  0012               	return	
  8527                           
  8528                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8529  012CD8  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8530  012CDC  0E7F               	movlw	127
  8531  012CDE  0100               	movlb	0	; () banked
  8532  012CE0  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  8533  012CE2  0100               	movlb	0	; () banked
  8534  012CE4  5193               	movf	_lBufferY& (0+255),w,b
  8535  012CE6  0D14               	mullw	20
  8536  012CE8  0EB4               	movlw	low _lBuffer
  8537  012CEA  0100               	movlb	0	; () banked
  8538  012CEC  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8539  012CEE  0E04               	movlw	high _lBuffer
  8540  012CF0  0100               	movlb	0	; () banked
  8541  012CF2  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8542  012CF4  50F3               	movf	prodl,w,c
  8543  012CF6  0100               	movlb	0	; () banked
  8544  012CF8  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8545  012CFA  50F4               	movf	prodh,w,c
  8546  012CFC  0100               	movlb	0	; () banked
  8547  012CFE  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8548  012D00  0100               	movlb	0	; () banked
  8549  012D02  5194               	movf	_lBufferX& (0+255),w,b
  8550  012D04  0D01               	mullw	1
  8551  012D06  50F3               	movf	prodl,w,c
  8552  012D08  0100               	movlb	0	; () banked
  8553  012D0A  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8554  012D0C  6ED9               	movwf	fsr2l,c
  8555  012D0E  50F4               	movf	prodh,w,c
  8556  012D10  0100               	movlb	0	; () banked
  8557  012D12  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8558  012D14  6EDA               	movwf	fsr2h,c
  8559  012D16  50DF               	movf	indf2,w,c
  8560  012D18  0B7F               	andlw	127
  8561  012D1A  0100               	movlb	0	; () banked
  8562  012D1C  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  8563  012D1E  B4D8               	btfsc	status,2,c
  8564  012D20  0012               	return	
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8568  012D22  0E01               	movlw	1
  8569  012D24  0100               	movlb	0	; () banked
  8570  012D26  6FFF               	movwf	_change& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573  012D28  0100               	movlb	0	; () banked
  8574  012D2A  5193               	movf	_lBufferY& (0+255),w,b
  8575  012D2C  0D14               	mullw	20
  8576  012D2E  0EB4               	movlw	low _lBuffer
  8577  012D30  0100               	movlb	0	; () banked
  8578  012D32  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  8579  012D34  0E04               	movlw	high _lBuffer
  8580  012D36  0100               	movlb	0	; () banked
  8581  012D38  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8582  012D3A  50F3               	movf	prodl,w,c
  8583  012D3C  0100               	movlb	0	; () banked
  8584  012D3E  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  8585  012D40  50F4               	movf	prodh,w,c
  8586  012D42  0100               	movlb	0	; () banked
  8587  012D44  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8588  012D46  0100               	movlb	0	; () banked
  8589  012D48  5194               	movf	_lBufferX& (0+255),w,b
  8590  012D4A  0D01               	mullw	1
  8591  012D4C  50F3               	movf	prodl,w,c
  8592  012D4E  0100               	movlb	0	; () banked
  8593  012D50  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  8594  012D52  6ED9               	movwf	fsr2l,c
  8595  012D54  50F4               	movf	prodh,w,c
  8596  012D56  0100               	movlb	0	; () banked
  8597  012D58  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8598  012D5A  6EDA               	movwf	fsr2h,c
  8599  012D5C  0100               	movlb	0	; () banked
  8600  012D5E  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  8601  012D60  0980               	iorlw	128
  8602  012D62  6EDF               	movwf	indf2,c
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;Console.c: 372: };
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;Console.c: 371: return;
  8609                           
  8610                           ; BSR set to: 0
  8611                           
  8612                           ; BSR set to: 0
  8613  012D64  0012               	return	
  8614  012D66                     l1036:
  8615                           
  8616                           ; BSR set to: 0
  8617  012D66  0100               	movlb	0	; () banked
  8618  012D68  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  8619                           
  8620                           ; Switch size 1, requested type "space"
  8621                           ; Number of cases is 8, Range of values is 7 to 35
  8622                           ; switch strategies available:
  8623                           ; Name         Instructions Cycles
  8624                           ; simple_byte           25    13 (average)
  8625                           ;	Chosen strategy is simple_byte
  8626  012D6A  0A07               	xorlw	7	; case 7
  8627  012D6C  B4D8               	btfsc	status,2,c
  8628  012D6E  D756               	goto	l1043
  8629  012D70  0A0F               	xorlw	15	; case 8
  8630  012D72  B4D8               	btfsc	status,2,c
  8631  012D74  D74A               	goto	l1040
  8632  012D76  0A01               	xorlw	1	; case 9
  8633  012D78  B4D8               	btfsc	status,2,c
  8634  012D7A  D74D               	goto	l1042
  8635  012D7C  0A03               	xorlw	3	; case 10
  8636  012D7E  B4D8               	btfsc	status,2,c
  8637  012D80  D741               	goto	l1037
  8638  012D82  0A06               	xorlw	6	; case 12
  8639  012D84  B4D8               	btfsc	status,2,c
  8640  012D86  D744               	goto	l1041
  8641  012D88  0A01               	xorlw	1	; case 13
  8642  012D8A  B4D8               	btfsc	status,2,c
  8643  012D8C  D73B               	goto	l1037
  8644  012D8E  0A2D               	xorlw	45	; case 32
  8645  012D90  B4D8               	btfsc	status,2,c
  8646  012D92  D74A               	goto	l1045
  8647  012D94  0A03               	xorlw	3	; case 35
  8648  012D96  B4D8               	btfsc	status,2,c
  8649  012D98  D744               	goto	l1044
  8650  012D9A  D746               	goto	l1045
  8651  012D9C                     __end_of_Console_PrintChar:
  8652                           	opt stack 0
  8653                           tblptru	equ	0xFF8
  8654                           tblptrh	equ	0xFF7
  8655                           tblptrl	equ	0xFF6
  8656                           tablat	equ	0xFF5
  8657                           prodh	equ	0xFF4
  8658                           prodl	equ	0xFF3
  8659                           postinc0	equ	0xFEE
  8660                           wreg	equ	0xFE8
  8661                           postdec1	equ	0xFE5
  8662                           fsr1h	equ	0xFE2
  8663                           fsr1l	equ	0xFE1
  8664                           indf2	equ	0xFDF
  8665                           postinc2	equ	0xFDE
  8666                           postdec2	equ	0xFDD
  8667                           fsr2h	equ	0xFDA
  8668                           fsr2l	equ	0xFD9
  8669                           status	equ	0xFD8
  8670                           
  8671 ;; *************** function _Console_Tab *****************
  8672 ;; Defined at:
  8673 ;;		line 260 in file "Library/Console.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;  c               1   15[BANK0 ] unsigned char 
  8678 ;;  i               1   14[BANK0 ] unsigned char 
  8679 ;;  t               1   13[BANK0 ] unsigned char 
  8680 ;; Return value:  Size  Location     Type
  8681 ;;                  1    wreg      void 
  8682 ;; Registers used:
  8683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8684 ;; Tracked objects:
  8685 ;;		On entry : 0/0
  8686 ;;		On exit  : 0/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;Total ram usage:        8 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; Hardware stack levels required when called:    9
  8696 ;; This function calls:
  8697 ;;		_Console_ClearCursor
  8698 ;;		_Console_IncrementCursor
  8699 ;;		___awdiv
  8700 ;; This function is called by:
  8701 ;;		_Console_PrintChar
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text26
  8706  01467A                     __ptext26:
  8707                           	opt stack 0
  8708  01467A                     _Console_Tab:
  8709                           	opt stack 18
  8710                           
  8711                           ;Console.c: 262: UINT8 i = 0;
  8712                           
  8713                           ;incstack = 0
  8714  01467A  0E00               	movlw	0
  8715  01467C  0100               	movlb	0	; () banked
  8716  01467E  6FC3               	movwf	Console_Tab@i& (0+255),b
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  8720  014680  0EFA               	movlw	250
  8721  014682  2447               	addwf	_gCursor,w,c
  8722  014684  0100               	movlb	0	; () banked
  8723  014686  6FB5               	movwf	___awdiv@dividend& (0+255),b
  8724  014688  0EFF               	movlw	255
  8725  01468A  2048               	addwfc	_gCursor+1,w,c
  8726  01468C  0100               	movlb	0	; () banked
  8727  01468E  6FB6               	movwf	(___awdiv@dividend+1)& (0+255),b
  8728  014690  0E00               	movlw	0
  8729  014692  0100               	movlb	0	; () banked
  8730  014694  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  8731  014696  0E06               	movlw	6
  8732  014698  6FB7               	movwf	___awdiv@divisor& (0+255),b
  8733  01469A  ECFE  F0A3         	call	___awdiv	;wreg free
  8734  01469E  0100               	movlb	0	; () banked
  8735  0146A0  51B5               	movf	?___awdiv& (0+255),w,b
  8736  0146A2  0100               	movlb	0	; () banked
  8737  0146A4  6FC4               	movwf	Console_Tab@c& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;Console.c: 264: UINT8 t = c/4;
  8741  0146A6  C0C4  F0B5         	movff	Console_Tab@c,___awdiv@dividend
  8742  0146AA  0100               	movlb	0	; () banked
  8743  0146AC  6BB6               	clrf	(___awdiv@dividend+1)& (0+255),b
  8744  0146AE  0E00               	movlw	0
  8745  0146B0  0100               	movlb	0	; () banked
  8746  0146B2  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  8747  0146B4  0E04               	movlw	4
  8748  0146B6  6FB7               	movwf	___awdiv@divisor& (0+255),b
  8749  0146B8  ECFE  F0A3         	call	___awdiv	;wreg free
  8750  0146BC  0100               	movlb	0	; () banked
  8751  0146BE  51B5               	movf	?___awdiv& (0+255),w,b
  8752  0146C0  0100               	movlb	0	; () banked
  8753  0146C2  6FC2               	movwf	Console_Tab@t& (0+255),b
  8754                           
  8755                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  8756  0146C4  0E00               	movlw	0
  8757  0146C6  0100               	movlb	0	; () banked
  8758  0146C8  6FC3               	movwf	Console_Tab@i& (0+255),b
  8759  0146CA  D006               	goto	l1009
  8760  0146CC                     
  8761                           ; BSR set to: 0
  8762                           ;Console.c: 266: {
  8763                           ;Console.c: 267: Console_ClearCursor();
  8764                           
  8765                           ; BSR set to: 0
  8766  0146CC  EC72  F0B2         	call	_Console_ClearCursor	;wreg free
  8767                           
  8768                           ;Console.c: 268: Console_IncrementCursor();
  8769  0146D0  ECD6  F0AE         	call	_Console_IncrementCursor	;wreg free
  8770  0146D4  0100               	movlb	0	; () banked
  8771  0146D6  2BC3               	incf	Console_Tab@i& (0+255),f,b
  8772  0146D8                     l1009:
  8773                           
  8774                           ; BSR set to: 0
  8775                           
  8776                           ; BSR set to: 0
  8777  0146D8  0100               	movlb	0	; () banked
  8778  0146DA  51C2               	movf	Console_Tab@t& (0+255),w,b
  8779  0146DC  0D04               	mullw	4
  8780  0146DE  1EF3               	comf	prodl,f,c
  8781  0146E0  1EF4               	comf	prodh,f,c
  8782  0146E2  4AF3               	infsnz	prodl,f,c
  8783  0146E4  2AF4               	incf	prodh,f,c
  8784  0146E6  0100               	movlb	0	; () banked
  8785  0146E8  51C4               	movf	Console_Tab@c& (0+255),w,b
  8786  0146EA  0100               	movlb	0	; () banked
  8787  0146EC  6FBD               	movwf	??_Console_Tab& (0+255),b
  8788  0146EE  6BBE               	clrf	(??_Console_Tab+1)& (0+255),b
  8789  0146F0  50F3               	movf	prodl,w,c
  8790  0146F2  0100               	movlb	0	; () banked
  8791  0146F4  27BD               	addwf	??_Console_Tab& (0+255),f,b
  8792  0146F6  50F4               	movf	prodh,w,c
  8793  0146F8  0100               	movlb	0	; () banked
  8794  0146FA  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8795  0146FC  0100               	movlb	0	; () banked
  8796  0146FE  1FBD               	comf	??_Console_Tab& (0+255),f,b
  8797  014700  1FBE               	comf	(??_Console_Tab+1)& (0+255),f,b
  8798  014702  4BBD               	infsnz	??_Console_Tab& (0+255),f,b
  8799  014704  2BBE               	incf	(??_Console_Tab+1)& (0+255),f,b
  8800  014706  0E04               	movlw	4
  8801  014708  0100               	movlb	0	; () banked
  8802  01470A  27BD               	addwf	??_Console_Tab& (0+255),f,b
  8803  01470C  0E00               	movlw	0
  8804  01470E  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8805  014710  0100               	movlb	0	; () banked
  8806  014712  51C3               	movf	Console_Tab@i& (0+255),w,b
  8807  014714  0100               	movlb	0	; () banked
  8808  014716  6FBF               	movwf	(??_Console_Tab+2)& (0+255),b
  8809  014718  6BC0               	clrf	(??_Console_Tab+3)& (0+255),b
  8810  01471A  0100               	movlb	0	; () banked
  8811  01471C  51BD               	movf	??_Console_Tab& (0+255),w,b
  8812  01471E  0100               	movlb	0	; () banked
  8813  014720  5DBF               	subwf	(??_Console_Tab+2)& (0+255),w,b
  8814  014722  0100               	movlb	0	; () banked
  8815  014724  51C0               	movf	(??_Console_Tab+3)& (0+255),w,b
  8816  014726  0A80               	xorlw	128
  8817  014728  0100               	movlb	0	; () banked
  8818  01472A  6FC1               	movwf	(??_Console_Tab+4)& (0+255),b
  8819  01472C  0100               	movlb	0	; () banked
  8820  01472E  51BE               	movf	(??_Console_Tab+1)& (0+255),w,b
  8821  014730  0A80               	xorlw	128
  8822  014732  0100               	movlb	0	; () banked
  8823  014734  59C1               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  8824  014736  B0D8               	btfsc	status,0,c
  8825  014738  0012               	return	
  8826  01473A  D7C8               	goto	l1010
  8827  01473C                     __end_of_Console_Tab:
  8828                           	opt stack 0
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           postinc0	equ	0xFEE
  8836                           wreg	equ	0xFE8
  8837                           postdec1	equ	0xFE5
  8838                           fsr1h	equ	0xFE2
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function ___awdiv *****************
  8848 ;; Defined at:
  8849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  dividend        2    0[BANK0 ] int 
  8852 ;;  divisor         2    2[BANK0 ] int 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  quotient        2    6[BANK0 ] int 
  8855 ;;  sign            1    5[BANK0 ] unsigned char 
  8856 ;;  counter         1    4[BANK0 ] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  2    0[BANK0 ] int 
  8859 ;; Registers used:
  8860 ;;		wreg, status,2, status,0
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;Total ram usage:        8 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    7
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_Console_Tab
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text27
  8881  0147FC                     __ptext27:
  8882                           	opt stack 0
  8883  0147FC                     ___awdiv:
  8884                           	opt stack 19
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;incstack = 0
  8888  0147FC  0E00               	movlw	0
  8889  0147FE  0100               	movlb	0	; () banked
  8890  014800  6FBA               	movwf	___awdiv@sign& (0+255),b
  8891                           
  8892                           ; BSR set to: 0
  8893  014802  0100               	movlb	0	; () banked
  8894  014804  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8895  014806  D008               	goto	l2666
  8896                           
  8897                           ; BSR set to: 0
  8898  014808  0100               	movlb	0	; () banked
  8899  01480A  6DB7               	negf	___awdiv@divisor& (0+255),b
  8900  01480C  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8901  01480E  B0D8               	btfsc	status,0,c
  8902  014810  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8903                           
  8904                           ; BSR set to: 0
  8905  014812  0E01               	movlw	1
  8906  014814  0100               	movlb	0	; () banked
  8907  014816  6FBA               	movwf	___awdiv@sign& (0+255),b
  8908  014818                     l2666:
  8909                           
  8910                           ; BSR set to: 0
  8911                           
  8912                           ; BSR set to: 0
  8913  014818  0100               	movlb	0	; () banked
  8914  01481A  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8915  01481C  D008               	goto	l2667
  8916                           
  8917                           ; BSR set to: 0
  8918  01481E  0100               	movlb	0	; () banked
  8919  014820  6DB5               	negf	___awdiv@dividend& (0+255),b
  8920  014822  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8921  014824  B0D8               	btfsc	status,0,c
  8922  014826  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8923                           
  8924                           ; BSR set to: 0
  8925  014828  0E01               	movlw	1
  8926  01482A  0100               	movlb	0	; () banked
  8927  01482C  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  8928  01482E                     l2667:
  8929                           
  8930                           ; BSR set to: 0
  8931                           
  8932                           ; BSR set to: 0
  8933  01482E  0E00               	movlw	0
  8934  014830  0100               	movlb	0	; () banked
  8935  014832  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  8936  014834  0E00               	movlw	0
  8937  014836  6FBB               	movwf	___awdiv@quotient& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940  014838  0100               	movlb	0	; () banked
  8941  01483A  51B7               	movf	___awdiv@divisor& (0+255),w,b
  8942  01483C  0100               	movlb	0	; () banked
  8943  01483E  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8944  014840  B4D8               	btfsc	status,2,c
  8945  014842  D02C               	goto	l2674
  8946                           
  8947                           ; BSR set to: 0
  8948  014844  0E01               	movlw	1
  8949  014846  0100               	movlb	0	; () banked
  8950  014848  6FB9               	movwf	___awdiv@counter& (0+255),b
  8951  01484A  D006               	goto	l2669
  8952  01484C                     
  8953                           ; BSR set to: 0
  8954                           
  8955                           ; BSR set to: 0
  8956  01484C  0100               	movlb	0	; () banked
  8957  01484E  90D8               	bcf	status,0,c
  8958  014850  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  8959  014852  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8960  014854  0100               	movlb	0	; () banked
  8961  014856  2BB9               	incf	___awdiv@counter& (0+255),f,b
  8962  014858                     l2669:
  8963                           
  8964                           ; BSR set to: 0
  8965                           
  8966                           ; BSR set to: 0
  8967  014858  0100               	movlb	0	; () banked
  8968  01485A  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8969  01485C  D7F7               	goto	l2670
  8970  01485E                     u9600:
  8971                           
  8972                           ; BSR set to: 0
  8973                           
  8974                           ; BSR set to: 0
  8975                           
  8976                           ; BSR set to: 0
  8977  01485E  0100               	movlb	0	; () banked
  8978  014860  90D8               	bcf	status,0,c
  8979  014862  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  8980  014864  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8981                           
  8982                           ; BSR set to: 0
  8983  014866  0100               	movlb	0	; () banked
  8984  014868  51B7               	movf	___awdiv@divisor& (0+255),w,b
  8985  01486A  0100               	movlb	0	; () banked
  8986  01486C  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  8987  01486E  0100               	movlb	0	; () banked
  8988  014870  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8989  014872  0100               	movlb	0	; () banked
  8990  014874  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8991  014876  A0D8               	btfss	status,0,c
  8992  014878  D00A               	goto	l2673
  8993                           
  8994                           ; BSR set to: 0
  8995  01487A  0100               	movlb	0	; () banked
  8996  01487C  51B7               	movf	___awdiv@divisor& (0+255),w,b
  8997  01487E  0100               	movlb	0	; () banked
  8998  014880  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  8999  014882  0100               	movlb	0	; () banked
  9000  014884  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9001  014886  0100               	movlb	0	; () banked
  9002  014888  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9003                           
  9004                           ; BSR set to: 0
  9005  01488A  0100               	movlb	0	; () banked
  9006  01488C  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  9007  01488E                     l2673:
  9008                           
  9009                           ; BSR set to: 0
  9010                           
  9011                           ; BSR set to: 0
  9012  01488E  0100               	movlb	0	; () banked
  9013  014890  90D8               	bcf	status,0,c
  9014  014892  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9015  014894  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  9016                           
  9017                           ; BSR set to: 0
  9018  014896  0100               	movlb	0	; () banked
  9019  014898  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  9020  01489A  D7E1               	goto	u9600
  9021  01489C                     l2674:
  9022                           
  9023                           ; BSR set to: 0
  9024                           
  9025                           ; BSR set to: 0
  9026                           
  9027                           ; BSR set to: 0
  9028  01489C  0100               	movlb	0	; () banked
  9029  01489E  51BA               	movf	___awdiv@sign& (0+255),w,b
  9030  0148A0  0100               	movlb	0	; () banked
  9031  0148A2  B4D8               	btfsc	status,2,c
  9032  0148A4  D005               	goto	l2675
  9033                           
  9034                           ; BSR set to: 0
  9035  0148A6  0100               	movlb	0	; () banked
  9036  0148A8  6DBB               	negf	___awdiv@quotient& (0+255),b
  9037  0148AA  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9038  0148AC  B0D8               	btfsc	status,0,c
  9039  0148AE  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9040  0148B0                     l2675:
  9041                           
  9042                           ; BSR set to: 0
  9043                           
  9044                           ; BSR set to: 0
  9045  0148B0  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  9046  0148B4  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  9047  0148B8  0012               	return	
  9048  0148BA                     __end_of___awdiv:
  9049                           	opt stack 0
  9050                           tblptru	equ	0xFF8
  9051                           tblptrh	equ	0xFF7
  9052                           tblptrl	equ	0xFF6
  9053                           tablat	equ	0xFF5
  9054                           prodh	equ	0xFF4
  9055                           prodl	equ	0xFF3
  9056                           postinc0	equ	0xFEE
  9057                           wreg	equ	0xFE8
  9058                           postdec1	equ	0xFE5
  9059                           fsr1h	equ	0xFE2
  9060                           fsr1l	equ	0xFE1
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _Console_IncrementCursor *****************
  9069 ;; Defined at:
  9070 ;;		line 243 in file "Library/Console.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      unsigned char 
  9077 ;; Registers used:
  9078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;Total ram usage:        2 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    8
  9091 ;; This function calls:
  9092 ;;		_Console_FormFeed
  9093 ;;		_Console_NewLine
  9094 ;; This function is called by:
  9095 ;;		_Console_Tab
  9096 ;;		_Console_PrintChar
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           	psect	text28
  9101  015DAC                     __ptext28:
  9102                           	opt stack 0
  9103  015DAC                     _Console_IncrementCursor:
  9104                           	opt stack 18
  9105                           
  9106                           ;Console.c: 246: lBufferX += 1;
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;incstack = 0
  9110  015DAC  0100               	movlb	0	; () banked
  9111  015DAE  2B94               	incf	_lBufferX& (0+255),f,b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;Console.c: 248: gCursor.x += 6;
  9115  015DB0  0E06               	movlw	6
  9116  015DB2  2647               	addwf	_gCursor,f,c
  9117  015DB4  0E00               	movlw	0
  9118  015DB6  2248               	addwfc	_gCursor+1,f,c
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  9122  015DB8  0E06               	movlw	6
  9123  015DBA  2447               	addwf	_gCursor,w,c
  9124  015DBC  0100               	movlb	0	; () banked
  9125  015DBE  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  9126  015DC0  0E00               	movlw	0
  9127  015DC2  2048               	addwfc	_gCursor+1,w,c
  9128  015DC4  0100               	movlb	0	; () banked
  9129  015DC6  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9130  015DC8  0100               	movlb	0	; () banked
  9131  015DCA  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9132  015DCC  D009               	goto	l1004
  9133  015DCE  0100               	movlb	0	; () banked
  9134  015DD0  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9135  015DD2  E104               	bnz	u9460
  9136  015DD4  0E80               	movlw	128
  9137  015DD6  0100               	movlb	0	; () banked
  9138  015DD8  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9139  015DDA  B0D8               	btfsc	status,0,c
  9140  015DDC                     u9460:
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;Console.c: 250: Console_NewLine();
  9144  015DDC  EC6A  F0A8         	call	_Console_NewLine	;wreg free
  9145  015DE0                     l1004:
  9146                           
  9147                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  9148  015DE0  0E08               	movlw	8
  9149  015DE2  2449               	addwf	_gCursor+2,w,c
  9150  015DE4  0100               	movlb	0	; () banked
  9151  015DE6  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  9152  015DE8  0E00               	movlw	0
  9153  015DEA  204A               	addwfc	_gCursor+3,w,c
  9154  015DEC  0100               	movlb	0	; () banked
  9155  015DEE  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9156  015DF0  0100               	movlb	0	; () banked
  9157  015DF2  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9158  015DF4  D00C               	goto	l1005
  9159  015DF6  0100               	movlb	0	; () banked
  9160  015DF8  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9161  015DFA  E105               	bnz	u9470
  9162  015DFC  0E80               	movlw	128
  9163  015DFE  0100               	movlb	0	; () banked
  9164  015E00  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9165  015E02  A0D8               	btfss	status,0,c
  9166  015E04  D004               	goto	l1005
  9167  015E06                     u9470:
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;Console.c: 252: {
  9171                           ;Console.c: 253: Console_FormFeed();
  9172  015E06  ECEC  F0A9         	call	_Console_FormFeed	;wreg free
  9173                           
  9174                           ;Console.c: 254: return 1;
  9175  015E0A  0E01               	movlw	1
  9176  015E0C  0012               	return	
  9177  015E0E                     l1005:
  9178                           
  9179                           ;Console.c: 255: }
  9180                           ;Console.c: 257: return 0;
  9181  015E0E  0E00               	movlw	0
  9182  015E10  0012               	return	
  9183  015E12                     __end_of_Console_IncrementCursor:
  9184                           	opt stack 0
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           postinc0	equ	0xFEE
  9192                           wreg	equ	0xFE8
  9193                           postdec1	equ	0xFE5
  9194                           fsr1h	equ	0xFE2
  9195                           fsr1l	equ	0xFE1
  9196                           indf2	equ	0xFDF
  9197                           postinc2	equ	0xFDE
  9198                           postdec2	equ	0xFDD
  9199                           fsr2h	equ	0xFDA
  9200                           fsr2l	equ	0xFD9
  9201                           status	equ	0xFD8
  9202                           
  9203 ;; *************** function _Console_NewLine *****************
  9204 ;; Defined at:
  9205 ;;		line 175 in file "Library/Console.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;		None
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;		None
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  1    wreg      void 
  9212 ;; Registers used:
  9213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;Total ram usage:        2 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    7
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_Console_IncrementCursor
  9230 ;;		_Console_PrintChar
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text29
  9235  0150D4                     __ptext29:
  9236                           	opt stack 0
  9237  0150D4                     _Console_NewLine:
  9238                           	opt stack 18
  9239                           
  9240                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  9241                           
  9242                           ;incstack = 0
  9243  0150D4  D03E               	goto	l983
  9244  0150D6                     
  9245                           ;Console.c: 179: {
  9246                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  9247  0150D6  0100               	movlb	0	; () banked
  9248  0150D8  5193               	movf	_lBufferY& (0+255),w,b
  9249  0150DA  0D14               	mullw	20
  9250  0150DC  0EB4               	movlw	low _lBuffer
  9251  0150DE  0100               	movlb	0	; () banked
  9252  0150E0  6FB5               	movwf	??_Console_NewLine& (0+255),b
  9253  0150E2  0E04               	movlw	high _lBuffer
  9254  0150E4  0100               	movlb	0	; () banked
  9255  0150E6  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  9256  0150E8  50F3               	movf	prodl,w,c
  9257  0150EA  0100               	movlb	0	; () banked
  9258  0150EC  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  9259  0150EE  50F4               	movf	prodh,w,c
  9260  0150F0  0100               	movlb	0	; () banked
  9261  0150F2  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9262  0150F4  0100               	movlb	0	; () banked
  9263  0150F6  5194               	movf	_lBufferX& (0+255),w,b
  9264  0150F8  0D01               	mullw	1
  9265  0150FA  50F3               	movf	prodl,w,c
  9266  0150FC  0100               	movlb	0	; () banked
  9267  0150FE  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  9268  015100  6ED9               	movwf	fsr2l,c
  9269  015102  50F4               	movf	prodh,w,c
  9270  015104  0100               	movlb	0	; () banked
  9271  015106  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9272  015108  6EDA               	movwf	fsr2h,c
  9273  01510A  50DF               	movf	indf2,w,c
  9274  01510C  B4D8               	btfsc	status,2,c
  9275  01510E  D01F               	goto	l985
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  9279  015110  0E01               	movlw	1
  9280  015112  0100               	movlb	0	; () banked
  9281  015114  6FFF               	movwf	_change& (0+255),b
  9282                           
  9283                           ; BSR set to: 0
  9284  015116  0100               	movlb	0	; () banked
  9285  015118  5193               	movf	_lBufferY& (0+255),w,b
  9286  01511A  0D14               	mullw	20
  9287  01511C  0EB4               	movlw	low _lBuffer
  9288  01511E  0100               	movlb	0	; () banked
  9289  015120  6FB5               	movwf	??_Console_NewLine& (0+255),b
  9290  015122  0E04               	movlw	high _lBuffer
  9291  015124  0100               	movlb	0	; () banked
  9292  015126  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  9293  015128  50F3               	movf	prodl,w,c
  9294  01512A  0100               	movlb	0	; () banked
  9295  01512C  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  9296  01512E  50F4               	movf	prodh,w,c
  9297  015130  0100               	movlb	0	; () banked
  9298  015132  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9299  015134  0100               	movlb	0	; () banked
  9300  015136  5194               	movf	_lBufferX& (0+255),w,b
  9301  015138  0D01               	mullw	1
  9302  01513A  50F3               	movf	prodl,w,c
  9303  01513C  0100               	movlb	0	; () banked
  9304  01513E  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  9305  015140  6ED9               	movwf	fsr2l,c
  9306  015142  50F4               	movf	prodh,w,c
  9307  015144  0100               	movlb	0	; () banked
  9308  015146  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9309  015148  6EDA               	movwf	fsr2h,c
  9310  01514A  0E80               	movlw	128
  9311  01514C  6EDF               	movwf	indf2,c
  9312  01514E                     l985:
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;Console.c: 182: lBufferX ++;
  9316                           
  9317                           ; BSR set to: 0
  9318  01514E  0100               	movlb	0	; () banked
  9319  015150  2B94               	incf	_lBufferX& (0+255),f,b
  9320  015152                     l983:
  9321                           
  9322                           ; BSR set to: 0
  9323  015152  0E13               	movlw	19
  9324  015154  0100               	movlb	0	; () banked
  9325  015156  6594               	cpfsgt	_lBufferX& (0+255),b
  9326  015158  D7BE               	goto	l984
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;Console.c: 183: }
  9330                           ;Console.c: 185: lBufferX = 0;
  9331                           
  9332                           ; BSR set to: 0
  9333  01515A  0E00               	movlw	0
  9334  01515C  0100               	movlb	0	; () banked
  9335  01515E  6F94               	movwf	_lBufferX& (0+255),b
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;Console.c: 186: lBufferY ++;
  9339  015160  0100               	movlb	0	; () banked
  9340  015162  2B93               	incf	_lBufferY& (0+255),f,b
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;Console.c: 188: gCursor.y += 8;
  9344  015164  0E08               	movlw	8
  9345  015166  2649               	addwf	_gCursor+2,f,c
  9346  015168  0E00               	movlw	0
  9347  01516A  224A               	addwfc	_gCursor+3,f,c
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;Console.c: 189: gCursor.x = 6;
  9351  01516C  0E00               	movlw	0
  9352  01516E  6E48               	movwf	_gCursor+1,c
  9353  015170  0E06               	movlw	6
  9354  015172  6E47               	movwf	_gCursor,c
  9355                           
  9356                           ; BSR set to: 0
  9357  015174  0012               	return		;funcret
  9358  015176                     __end_of_Console_NewLine:
  9359                           	opt stack 0
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           postinc0	equ	0xFEE
  9367                           wreg	equ	0xFE8
  9368                           postdec1	equ	0xFE5
  9369                           fsr1h	equ	0xFE2
  9370                           fsr1l	equ	0xFE1
  9371                           indf2	equ	0xFDF
  9372                           postinc2	equ	0xFDE
  9373                           postdec2	equ	0xFDD
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function _Console_FormFeed *****************
  9379 ;; Defined at:
  9380 ;;		line 192 in file "Library/Console.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  y               1    3[BANK0 ] unsigned char 
  9385 ;;  x               1    2[BANK0 ] unsigned char 
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  1    wreg      void 
  9388 ;; Registers used:
  9389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;Total ram usage:        4 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    7
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_Console_IncrementCursor
  9406 ;;		_Console_PrintChar
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text30
  9411  0153D8                     __ptext30:
  9412                           	opt stack 0
  9413  0153D8                     _Console_FormFeed:
  9414                           	opt stack 18
  9415                           
  9416                           ;Console.c: 195: lBufferX = 0;
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;incstack = 0
  9420  0153D8  0E00               	movlw	0
  9421  0153DA  0100               	movlb	0	; () banked
  9422  0153DC  6F94               	movwf	_lBufferX& (0+255),b
  9423                           
  9424                           ;Console.c: 196: lBufferY = 0;
  9425  0153DE  0E00               	movlw	0
  9426  0153E0  0100               	movlb	0	; () banked
  9427  0153E2  6F93               	movwf	_lBufferY& (0+255),b
  9428                           
  9429                           ;Console.c: 197: UINT8 x, y;
  9430                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  9431  0153E4  0E00               	movlw	0
  9432  0153E6  0100               	movlb	0	; () banked
  9433  0153E8  6FB8               	movwf	Console_FormFeed@y& (0+255),b
  9434  0153EA                     l12566:
  9435                           
  9436                           ; BSR set to: 0
  9437  0153EA  0E0E               	movlw	14
  9438  0153EC  0100               	movlb	0	; () banked
  9439  0153EE  65B8               	cpfsgt	Console_FormFeed@y& (0+255),b
  9440  0153F0  D001               	goto	l990
  9441  0153F2  D02D               	goto	u9290
  9442  0153F4                     l990:
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9446                           
  9447                           ; BSR set to: 0
  9448  0153F4  0E00               	movlw	0
  9449  0153F6  0100               	movlb	0	; () banked
  9450  0153F8  6FB7               	movwf	Console_FormFeed@x& (0+255),b
  9451  0153FA                     l12572:
  9452                           
  9453                           ; BSR set to: 0
  9454  0153FA  0E13               	movlw	19
  9455  0153FC  0100               	movlb	0	; () banked
  9456  0153FE  65B7               	cpfsgt	Console_FormFeed@x& (0+255),b
  9457  015400  D001               	goto	l992
  9458  015402  D022               	goto	u9280
  9459  015404                     l992:
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  9463                           
  9464                           ; BSR set to: 0
  9465  015404  0E01               	movlw	1
  9466  015406  0100               	movlb	0	; () banked
  9467  015408  6FFF               	movwf	_change& (0+255),b
  9468                           
  9469                           ; BSR set to: 0
  9470  01540A  0100               	movlb	0	; () banked
  9471  01540C  51B8               	movf	Console_FormFeed@y& (0+255),w,b
  9472  01540E  0D14               	mullw	20
  9473  015410  0EB4               	movlw	low _lBuffer
  9474  015412  0100               	movlb	0	; () banked
  9475  015414  6FB5               	movwf	??_Console_FormFeed& (0+255),b
  9476  015416  0E04               	movlw	high _lBuffer
  9477  015418  0100               	movlb	0	; () banked
  9478  01541A  6FB6               	movwf	(??_Console_FormFeed+1)& (0+255),b
  9479  01541C  50F3               	movf	prodl,w,c
  9480  01541E  0100               	movlb	0	; () banked
  9481  015420  27B5               	addwf	??_Console_FormFeed& (0+255),f,b
  9482  015422  50F4               	movf	prodh,w,c
  9483  015424  0100               	movlb	0	; () banked
  9484  015426  23B6               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  9485  015428  0100               	movlb	0	; () banked
  9486  01542A  51B7               	movf	Console_FormFeed@x& (0+255),w,b
  9487  01542C  0D01               	mullw	1
  9488  01542E  50F3               	movf	prodl,w,c
  9489  015430  0100               	movlb	0	; () banked
  9490  015432  25B5               	addwf	??_Console_FormFeed& (0+255),w,b
  9491  015434  6ED9               	movwf	fsr2l,c
  9492  015436  50F4               	movf	prodh,w,c
  9493  015438  0100               	movlb	0	; () banked
  9494  01543A  21B6               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  9495  01543C  6EDA               	movwf	fsr2h,c
  9496  01543E  0E80               	movlw	128
  9497  015440  6EDF               	movwf	indf2,c
  9498                           
  9499                           ; BSR set to: 0
  9500  015442  0100               	movlb	0	; () banked
  9501  015444  2BB7               	incf	Console_FormFeed@x& (0+255),f,b
  9502  015446  D7D9               	goto	l12572
  9503  015448                     u9280:
  9504                           
  9505                           ; BSR set to: 0
  9506                           
  9507                           ; BSR set to: 0
  9508  015448  0100               	movlb	0	; () banked
  9509  01544A  2BB8               	incf	Console_FormFeed@y& (0+255),f,b
  9510  01544C  D7CE               	goto	l12566
  9511  01544E                     u9290:
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;Console.c: 204: clearall = 1;
  9515                           
  9516                           ; BSR set to: 0
  9517  01544E  0E01               	movlw	1
  9518  015450  0100               	movlb	0	; () banked
  9519  015452  6F95               	movwf	_clearall& (0+255),b
  9520                           
  9521                           ;Console.c: 205: gCursor.x = 6;
  9522  015454  0E00               	movlw	0
  9523  015456  6E48               	movwf	_gCursor+1,c
  9524  015458  0E06               	movlw	6
  9525  01545A  6E47               	movwf	_gCursor,c
  9526                           
  9527                           ;Console.c: 206: gCursor.y = 6;
  9528  01545C  0E00               	movlw	0
  9529  01545E  6E4A               	movwf	_gCursor+3,c
  9530  015460  0E06               	movlw	6
  9531  015462  6E49               	movwf	_gCursor+2,c
  9532                           
  9533                           ; BSR set to: 0
  9534  015464  0012               	return		;funcret
  9535  015466                     __end_of_Console_FormFeed:
  9536                           	opt stack 0
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           postinc0	equ	0xFEE
  9544                           wreg	equ	0xFE8
  9545                           postdec1	equ	0xFE5
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function _Console_ResetCursor *****************
  9556 ;; Defined at:
  9557 ;;		line 297 in file "Library/Console.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;		None
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;		None
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      void 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;Total ram usage:        0 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    7
  9578 ;; This function calls:
  9579 ;;		Nothing
  9580 ;; This function is called by:
  9581 ;;		_Console_PrintChar
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           	psect	text31
  9586  0169F2                     __ptext31:
  9587                           	opt stack 0
  9588  0169F2                     _Console_ResetCursor:
  9589                           	opt stack 20
  9590                           
  9591                           ;Console.c: 299: gCursor.x = 6;
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;incstack = 0
  9595  0169F2  0E00               	movlw	0
  9596  0169F4  6E48               	movwf	_gCursor+1,c
  9597  0169F6  0E06               	movlw	6
  9598  0169F8  6E47               	movwf	_gCursor,c
  9599                           
  9600                           ;Console.c: 300: gCursor.y = 6;
  9601  0169FA  0E00               	movlw	0
  9602  0169FC  6E4A               	movwf	_gCursor+3,c
  9603  0169FE  0E06               	movlw	6
  9604  016A00  6E49               	movwf	_gCursor+2,c
  9605                           
  9606                           ;Console.c: 303: lBufferX = 0;
  9607  016A02  0E00               	movlw	0
  9608  016A04  0100               	movlb	0	; () banked
  9609  016A06  6F94               	movwf	_lBufferX& (0+255),b
  9610                           
  9611                           ;Console.c: 304: lBufferY = 0;
  9612  016A08  0E00               	movlw	0
  9613  016A0A  0100               	movlb	0	; () banked
  9614  016A0C  6F93               	movwf	_lBufferY& (0+255),b
  9615                           
  9616                           ; BSR set to: 0
  9617  016A0E  0012               	return		;funcret
  9618  016A10                     __end_of_Console_ResetCursor:
  9619                           	opt stack 0
  9620                           tblptru	equ	0xFF8
  9621                           tblptrh	equ	0xFF7
  9622                           tblptrl	equ	0xFF6
  9623                           tablat	equ	0xFF5
  9624                           prodh	equ	0xFF4
  9625                           prodl	equ	0xFF3
  9626                           postinc0	equ	0xFEE
  9627                           wreg	equ	0xFE8
  9628                           postdec1	equ	0xFE5
  9629                           fsr1h	equ	0xFE2
  9630                           fsr1l	equ	0xFE1
  9631                           indf2	equ	0xFDF
  9632                           postinc2	equ	0xFDE
  9633                           postdec2	equ	0xFDD
  9634                           fsr2h	equ	0xFDA
  9635                           fsr2l	equ	0xFD9
  9636                           status	equ	0xFD8
  9637                           
  9638 ;; *************** function _Console_Backspace *****************
  9639 ;; Defined at:
  9640 ;;		line 209 in file "Library/Console.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;		None
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;		None
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  1    wreg      void 
  9647 ;; Registers used:
  9648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;Total ram usage:        0 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    8
  9661 ;; This function calls:
  9662 ;;		_Console_ClearCursor
  9663 ;; This function is called by:
  9664 ;;		_Console_PrintChar
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text32
  9669  015F3A                     __ptext32:
  9670                           	opt stack 0
  9671  015F3A                     _Console_Backspace:
  9672                           	opt stack 19
  9673                           
  9674                           ;Console.c: 211: if (lBufferX > 0)
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;incstack = 0
  9678  015F3A  0100               	movlb	0	; () banked
  9679  015F3C  5194               	movf	_lBufferX& (0+255),w,b
  9680  015F3E  B4D8               	btfsc	status,2,c
  9681  015F40  D007               	goto	l997
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;Console.c: 212: {
  9685                           ;Console.c: 213: gCursor.x -= 6;
  9686  015F42  0EFA               	movlw	250
  9687  015F44  2647               	addwf	_gCursor,f,c
  9688  015F46  0EFF               	movlw	255
  9689  015F48  2248               	addwfc	_gCursor+1,f,c
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;Console.c: 216: lBufferX --;
  9693  015F4A  0100               	movlb	0	; () banked
  9694  015F4C  0794               	decf	_lBufferX& (0+255),f,b
  9695                           
  9696                           ;Console.c: 218: }
  9697  015F4E  D020               	goto	l1000
  9698  015F50                     l997:
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;Console.c: 219: else if (lBufferY > 0)
  9702                           
  9703                           ; BSR set to: 0
  9704  015F50  0100               	movlb	0	; () banked
  9705  015F52  5193               	movf	_lBufferY& (0+255),w,b
  9706  015F54  B4D8               	btfsc	status,2,c
  9707  015F56  D00E               	goto	l999
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;Console.c: 220: {
  9711                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  9712  015F58  0E00               	movlw	0
  9713  015F5A  6E48               	movwf	_gCursor+1,c
  9714  015F5C  0E72               	movlw	114
  9715  015F5E  6E47               	movwf	_gCursor,c
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;Console.c: 222: gCursor.y -= 8;
  9719  015F60  0EF8               	movlw	248
  9720  015F62  2649               	addwf	_gCursor+2,f,c
  9721  015F64  0EFF               	movlw	255
  9722  015F66  224A               	addwfc	_gCursor+3,f,c
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  9726  015F68  0E13               	movlw	19
  9727  015F6A  0100               	movlb	0	; () banked
  9728  015F6C  6F94               	movwf	_lBufferX& (0+255),b
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;Console.c: 226: lBufferY --;
  9732  015F6E  0100               	movlb	0	; () banked
  9733  015F70  0793               	decf	_lBufferY& (0+255),f,b
  9734                           
  9735                           ;Console.c: 228: }
  9736  015F72  D00E               	goto	l1000
  9737  015F74                     l999:
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;Console.c: 229: else
  9741                           ;Console.c: 230: {
  9742                           ;Console.c: 231: gCursor.x = 6;
  9743                           
  9744                           ; BSR set to: 0
  9745  015F74  0E00               	movlw	0
  9746  015F76  6E48               	movwf	_gCursor+1,c
  9747  015F78  0E06               	movlw	6
  9748  015F7A  6E47               	movwf	_gCursor,c
  9749                           
  9750                           ;Console.c: 232: gCursor.y = 6;
  9751  015F7C  0E00               	movlw	0
  9752  015F7E  6E4A               	movwf	_gCursor+3,c
  9753  015F80  0E06               	movlw	6
  9754  015F82  6E49               	movwf	_gCursor+2,c
  9755                           
  9756                           ;Console.c: 235: lBufferX = 0;
  9757  015F84  0E00               	movlw	0
  9758  015F86  0100               	movlb	0	; () banked
  9759  015F88  6F94               	movwf	_lBufferX& (0+255),b
  9760                           
  9761                           ;Console.c: 236: lBufferY = 0;
  9762  015F8A  0E00               	movlw	0
  9763  015F8C  0100               	movlb	0	; () banked
  9764  015F8E  6F93               	movwf	_lBufferY& (0+255),b
  9765  015F90                     l1000:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;Console.c: 238: }
  9769                           ;Console.c: 240: Console_ClearCursor();
  9770                           
  9771                           ; BSR set to: 0
  9772                           
  9773                           ; BSR set to: 0
  9774  015F90  EC72  F0B2         	call	_Console_ClearCursor	;wreg free
  9775  015F94  0012               	return		;funcret
  9776  015F96                     __end_of_Console_Backspace:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           prodh	equ	0xFF4
  9783                           prodl	equ	0xFF3
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postdec1	equ	0xFE5
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function _Console_ClearCursor *****************
  9797 ;; Defined at:
  9798 ;;		line 308 in file "Library/Console.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  1    wreg      void 
  9805 ;; Registers used:
  9806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;Total ram usage:        2 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    7
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_Console_Backspace
  9823 ;;		_Console_Tab
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text33
  9828  0164E4                     __ptext33:
  9829                           	opt stack 0
  9830  0164E4                     _Console_ClearCursor:
  9831                           	opt stack 19
  9832                           
  9833                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9834                           
  9835                           ;incstack = 0
  9836  0164E4  0E01               	movlw	1
  9837  0164E6  0100               	movlb	0	; () banked
  9838  0164E8  6FFF               	movwf	_change& (0+255),b
  9839                           
  9840                           ; BSR set to: 0
  9841  0164EA  0100               	movlb	0	; () banked
  9842  0164EC  5193               	movf	_lBufferY& (0+255),w,b
  9843  0164EE  0D14               	mullw	20
  9844  0164F0  0EB4               	movlw	low _lBuffer
  9845  0164F2  0100               	movlb	0	; () banked
  9846  0164F4  6FB5               	movwf	??_Console_ClearCursor& (0+255),b
  9847  0164F6  0E04               	movlw	high _lBuffer
  9848  0164F8  0100               	movlb	0	; () banked
  9849  0164FA  6FB6               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9850  0164FC  50F3               	movf	prodl,w,c
  9851  0164FE  0100               	movlb	0	; () banked
  9852  016500  27B5               	addwf	??_Console_ClearCursor& (0+255),f,b
  9853  016502  50F4               	movf	prodh,w,c
  9854  016504  0100               	movlb	0	; () banked
  9855  016506  23B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9856  016508  0100               	movlb	0	; () banked
  9857  01650A  5194               	movf	_lBufferX& (0+255),w,b
  9858  01650C  0D01               	mullw	1
  9859  01650E  50F3               	movf	prodl,w,c
  9860  016510  0100               	movlb	0	; () banked
  9861  016512  25B5               	addwf	??_Console_ClearCursor& (0+255),w,b
  9862  016514  6ED9               	movwf	fsr2l,c
  9863  016516  50F4               	movf	prodh,w,c
  9864  016518  0100               	movlb	0	; () banked
  9865  01651A  21B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9866  01651C  6EDA               	movwf	fsr2h,c
  9867  01651E  0E80               	movlw	128
  9868  016520  6EDF               	movwf	indf2,c
  9869                           
  9870                           ; BSR set to: 0
  9871  016522  0012               	return		;funcret
  9872  016524                     __end_of_Console_ClearCursor:
  9873                           	opt stack 0
  9874                           tblptru	equ	0xFF8
  9875                           tblptrh	equ	0xFF7
  9876                           tblptrl	equ	0xFF6
  9877                           tablat	equ	0xFF5
  9878                           prodh	equ	0xFF4
  9879                           prodl	equ	0xFF3
  9880                           postinc0	equ	0xFEE
  9881                           wreg	equ	0xFE8
  9882                           postdec1	equ	0xFE5
  9883                           fsr1h	equ	0xFE2
  9884                           fsr1l	equ	0xFE1
  9885                           indf2	equ	0xFDF
  9886                           postinc2	equ	0xFDE
  9887                           postdec2	equ	0xFDD
  9888                           fsr2h	equ	0xFDA
  9889                           fsr2l	equ	0xFD9
  9890                           status	equ	0xFD8
  9891                           
  9892 ;; *************** function _measureAndDisplayDistance *****************
  9893 ;; Defined at:
  9894 ;;		line 297 in file "main.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;		None
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      void 
  9901 ;; Registers used:
  9902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;Total ram usage:        4 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:   13
  9915 ;; This function calls:
  9916 ;;		_ADC_Start
  9917 ;;		_ADC_Voltage
  9918 ;;		_HMI_Render
  9919 ;;		_HMI_SetNumber
  9920 ;;		_MXK_Dequeue
  9921 ;;		_MXK_Release
  9922 ;;		_MXK_SwitchTo
  9923 ;;		___fldiv
  9924 ;;		___fltol
  9925 ;; This function is called by:
  9926 ;;		_move_and_rotate
  9927 ;;		_correct_distance
  9928 ;;		_mode1
  9929 ;;		_mode2
  9930 ;;		_mode4
  9931 ;;		_main
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           	psect	text34
  9936  015176                     __ptext34:
  9937                           	opt stack 0
  9938  015176                     _measureAndDisplayDistance:
  9939                           	opt stack 16
  9940                           
  9941                           ;main.c: 299: ADC_Start(&ADC_AN0);
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;incstack = 0
  9945  015176  0EB0               	movlw	low _ADC_AN0
  9946  015178  0100               	movlb	0	; () banked
  9947  01517A  6FB7               	movwf	ADC_Start@pInput& (0+255),b
  9948  01517C  0E00               	movlw	high _ADC_AN0
  9949  01517E  0100               	movlb	0	; () banked
  9950  015180  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
  9951  015182  EC03  F0AB         	call	_ADC_Start	;wreg free
  9952                           
  9953                           ;main.c: 301: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  9954  015186  0EB0               	movlw	low _ADC_AN0
  9955  015188  0100               	movlb	0	; () banked
  9956  01518A  6FDC               	movwf	ADC_Voltage@pInput& (0+255),b
  9957  01518C  0E00               	movlw	high _ADC_AN0
  9958  01518E  0100               	movlb	0	; () banked
  9959  015190  6FDD               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  9960  015192  EC5D  F0A0         	call	_ADC_Voltage	;wreg free
  9961  015196  C0DC  F100         	movff	?_ADC_Voltage,_measureAndDisplayDistance$15617
  9962  01519A  C0DD  F101         	movff	?_ADC_Voltage+1,_measureAndDisplayDistance$15617+1
  9963  01519E  C0DE  F102         	movff	?_ADC_Voltage+2,_measureAndDisplayDistance$15617+2
  9964  0151A2  C0DF  F103         	movff	?_ADC_Voltage+3,_measureAndDisplayDistance$15617+3
  9965                           
  9966                           ;main.c: 301: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  9967  0151A6  C100  F0B9         	movff	_measureAndDisplayDistance$15617,___fldiv@a
  9968  0151AA  C101  F0BA         	movff	_measureAndDisplayDistance$15617+1,___fldiv@a+1
  9969  0151AE  C102  F0BB         	movff	_measureAndDisplayDistance$15617+2,___fldiv@a+2
  9970  0151B2  C103  F0BC         	movff	_measureAndDisplayDistance$15617+3,___fldiv@a+3
  9971  0151B6  0E00               	movlw	0
  9972  0151B8  0100               	movlb	0	; () banked
  9973  0151BA  6FB5               	movwf	___fldiv@b& (0+255),b
  9974  0151BC  0E00               	movlw	0
  9975  0151BE  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
  9976  0151C0  0E6C               	movlw	108
  9977  0151C2  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
  9978  0151C4  0E42               	movlw	66
  9979  0151C6  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
  9980  0151C8  ECBC  F088         	call	___fldiv	;wreg free
  9981  0151CC  C0B5  F0EE         	movff	?___fldiv,___fltol@f1
  9982  0151D0  C0B6  F0EF         	movff	?___fldiv+1,___fltol@f1+1
  9983  0151D4  C0B7  F0F0         	movff	?___fldiv+2,___fltol@f1+2
  9984  0151D8  C0B8  F0F1         	movff	?___fldiv+3,___fltol@f1+3
  9985  0151DC  ECFF  F09C         	call	___fltol	;wreg free
  9986  0151E0  C0EE  F06F         	movff	?___fltol,_IRValue
  9987  0151E4  C0EF  F070         	movff	?___fltol+1,_IRValue+1
  9988                           
  9989                           ;main.c: 303: if (MXK_SwitchTo(eMXK_HMI)) {
  9990  0151E8  0E01               	movlw	1
  9991  0151EA  EC51  F0B2         	call	_MXK_SwitchTo
  9992  0151EE  0900               	iorlw	0
  9993  0151F0  B4D8               	btfsc	status,2,c
  9994  0151F2  0012               	return	
  9995                           
  9996                           ;main.c: 304: HMI_SetNumber(IRValue);
  9997  0151F4  C06F  F0CB         	movff	_IRValue,HMI_SetNumber@pInput
  9998  0151F8  C070  F0CC         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  9999  0151FC  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
 10000                           
 10001                           ;main.c: 305: HMI_Render();
 10002  015200  ECB2  F0B2         	call	_HMI_Render	;wreg free
 10003                           
 10004                           ;main.c: 306: if (MXK_Release())
 10005  015204  EC7F  F0B5         	call	_MXK_Release	;wreg free
 10006  015208  0900               	iorlw	0
 10007  01520A  B4D8               	btfsc	status,2,c
 10008  01520C  0012               	return	
 10009                           
 10010                           ;main.c: 307: MXK_Dequeue();
 10011  01520E  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
 10012  015212  0012               	return	
 10013  015214                     __end_of_measureAndDisplayDistance:
 10014                           	opt stack 0
 10015                           tblptru	equ	0xFF8
 10016                           tblptrh	equ	0xFF7
 10017                           tblptrl	equ	0xFF6
 10018                           tablat	equ	0xFF5
 10019                           prodh	equ	0xFF4
 10020                           prodl	equ	0xFF3
 10021                           postinc0	equ	0xFEE
 10022                           wreg	equ	0xFE8
 10023                           postdec1	equ	0xFE5
 10024                           fsr1h	equ	0xFE2
 10025                           fsr1l	equ	0xFE1
 10026                           indf2	equ	0xFDF
 10027                           postinc2	equ	0xFDE
 10028                           postdec2	equ	0xFDD
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function ___fltol *****************
 10034 ;; Defined at:
 10035 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  f1              4   57[BANK0 ] void 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  exp1            1   66[BANK0 ] unsigned char 
 10040 ;;  sign1           1   65[BANK0 ] unsigned char 
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  4   57[BANK0 ] long 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:       10 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    7
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_findClosestWall
 10061 ;;		_measureAndDisplayDistance
 10062 ;;		_mode1
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text35
 10067  0139FE                     __ptext35:
 10068                           	opt stack 0
 10069  0139FE                     ___fltol:
 10070                           	opt stack 21
 10071                           
 10072                           ;incstack = 0
 10073  0139FE  0100               	movlb	0	; () banked
 10074  013A00  35F0               	rlcf	(___fltol@f1+2)& (0+255),w,b
 10075  013A02  35F1               	rlcf	(___fltol@f1+3)& (0+255),w,b
 10076  013A04  0100               	movlb	0	; () banked
 10077  013A06  6FF7               	movwf	___fltol@exp1& (0+255),b
 10078  013A08  0100               	movlb	0	; () banked
 10079  013A0A  51F7               	movf	___fltol@exp1& (0+255),w,b
 10080  013A0C  A4D8               	btfss	status,2,c
 10081  013A0E  D00A               	goto	l2728
 10082                           
 10083                           ; BSR set to: 0
 10084  013A10  0E00               	movlw	0
 10085  013A12  0100               	movlb	0	; () banked
 10086  013A14  6FEE               	movwf	?___fltol& (0+255),b
 10087  013A16  0E00               	movlw	0
 10088  013A18  6FEF               	movwf	(?___fltol+1)& (0+255),b
 10089  013A1A  0E00               	movlw	0
 10090  013A1C  6FF0               	movwf	(?___fltol+2)& (0+255),b
 10091  013A1E  0E00               	movlw	0
 10092  013A20  6FF1               	movwf	(?___fltol+3)& (0+255),b
 10093                           
 10094                           ; BSR set to: 0
 10095  013A22  0012               	return	
 10096  013A24                     l2728:
 10097                           
 10098                           ; BSR set to: 0
 10099                           
 10100                           ; BSR set to: 0
 10101  013A24  C0EE  F0F2         	movff	___fltol@f1,??___fltol
 10102  013A28  C0EF  F0F3         	movff	___fltol@f1+1,??___fltol+1
 10103  013A2C  C0F0  F0F4         	movff	___fltol@f1+2,??___fltol+2
 10104  013A30  C0F1  F0F5         	movff	___fltol@f1+3,??___fltol+3
 10105  013A34  0E20               	movlw	32
 10106  013A36  D006               	goto	u11090
 10107  013A38                     u11095:
 10108  013A38  0100               	movlb	0	; () banked
 10109  013A3A  90D8               	bcf	status,0,c
 10110  013A3C  33F5               	rrcf	(??___fltol+3)& (0+255),f,b
 10111  013A3E  33F4               	rrcf	(??___fltol+2)& (0+255),f,b
 10112  013A40  33F3               	rrcf	(??___fltol+1)& (0+255),f,b
 10113  013A42  33F2               	rrcf	??___fltol& (0+255),f,b
 10114  013A44                     u11090:
 10115  013A44  2EE8               	decfsz	wreg,f,c
 10116  013A46  D7F8               	goto	u11095
 10117  013A48  0100               	movlb	0	; () banked
 10118  013A4A  51F2               	movf	??___fltol& (0+255),w,b
 10119  013A4C  0100               	movlb	0	; () banked
 10120  013A4E  6FF6               	movwf	___fltol@sign1& (0+255),b
 10121                           
 10122                           ; BSR set to: 0
 10123  013A50  0100               	movlb	0	; () banked
 10124  013A52  8FF0               	bsf	(___fltol@f1+2)& (0+255),7,b
 10125                           
 10126                           ; BSR set to: 0
 10127  013A54  0EFF               	movlw	255
 10128  013A56  0100               	movlb	0	; () banked
 10129  013A58  17EE               	andwf	___fltol@f1& (0+255),f,b
 10130  013A5A  0EFF               	movlw	255
 10131  013A5C  17EF               	andwf	(___fltol@f1+1)& (0+255),f,b
 10132  013A5E  0EFF               	movlw	255
 10133  013A60  17F0               	andwf	(___fltol@f1+2)& (0+255),f,b
 10134  013A62  0E00               	movlw	0
 10135  013A64  17F1               	andwf	(___fltol@f1+3)& (0+255),f,b
 10136                           
 10137                           ; BSR set to: 0
 10138  013A66  0E96               	movlw	150
 10139  013A68  0100               	movlb	0	; () banked
 10140  013A6A  5FF7               	subwf	___fltol@exp1& (0+255),f,b
 10141                           
 10142                           ; BSR set to: 0
 10143  013A6C  0100               	movlb	0	; () banked
 10144  013A6E  AFF7               	btfss	___fltol@exp1& (0+255),7,b
 10145  013A70  D01A               	goto	l2730
 10146                           
 10147                           ; BSR set to: 0
 10148  013A72  0100               	movlb	0	; () banked
 10149  013A74  51F7               	movf	___fltol@exp1& (0+255),w,b
 10150  013A76  0A80               	xorlw	128
 10151  013A78  0F97               	addlw	151
 10152  013A7A  B0D8               	btfsc	status,0,c
 10153  013A7C  D00A               	goto	l2731
 10154                           
 10155                           ; BSR set to: 0
 10156  013A7E  0E00               	movlw	0
 10157  013A80  0100               	movlb	0	; () banked
 10158  013A82  6FEE               	movwf	?___fltol& (0+255),b
 10159  013A84  0E00               	movlw	0
 10160  013A86  6FEF               	movwf	(?___fltol+1)& (0+255),b
 10161  013A88  0E00               	movlw	0
 10162  013A8A  6FF0               	movwf	(?___fltol+2)& (0+255),b
 10163  013A8C  0E00               	movlw	0
 10164  013A8E  6FF1               	movwf	(?___fltol+3)& (0+255),b
 10165                           
 10166                           ; BSR set to: 0
 10167  013A90  0012               	return	
 10168  013A92                     l2731:
 10169                           
 10170                           ; BSR set to: 0
 10171                           
 10172                           ; BSR set to: 0
 10173                           
 10174                           ; BSR set to: 0
 10175  013A92  0100               	movlb	0	; () banked
 10176  013A94  90D8               	bcf	status,0,c
 10177  013A96  33F1               	rrcf	(___fltol@f1+3)& (0+255),f,b
 10178  013A98  33F0               	rrcf	(___fltol@f1+2)& (0+255),f,b
 10179  013A9A  33EF               	rrcf	(___fltol@f1+1)& (0+255),f,b
 10180  013A9C  33EE               	rrcf	___fltol@f1& (0+255),f,b
 10181                           
 10182                           ; BSR set to: 0
 10183  013A9E  0100               	movlb	0	; () banked
 10184  013AA0  3FF7               	incfsz	___fltol@exp1& (0+255),f,b
 10185  013AA2  D7F7               	goto	l2731
 10186                           
 10187                           ; BSR set to: 0
 10188  013AA4  D01B               	goto	u11130
 10189  013AA6                     l2730:
 10190                           
 10191                           ; BSR set to: 0
 10192                           
 10193                           ; BSR set to: 0
 10194  013AA6  0E1F               	movlw	31
 10195  013AA8  0100               	movlb	0	; () banked
 10196  013AAA  65F7               	cpfsgt	___fltol@exp1& (0+255),b
 10197  013AAC  D012               	goto	l2736
 10198                           
 10199                           ; BSR set to: 0
 10200  013AAE  0E00               	movlw	0
 10201  013AB0  0100               	movlb	0	; () banked
 10202  013AB2  6FEE               	movwf	?___fltol& (0+255),b
 10203  013AB4  0E00               	movlw	0
 10204  013AB6  6FEF               	movwf	(?___fltol+1)& (0+255),b
 10205  013AB8  0E00               	movlw	0
 10206  013ABA  6FF0               	movwf	(?___fltol+2)& (0+255),b
 10207  013ABC  0E00               	movlw	0
 10208  013ABE  6FF1               	movwf	(?___fltol+3)& (0+255),b
 10209                           
 10210                           ; BSR set to: 0
 10211  013AC0  0012               	return	
 10212  013AC2                     
 10213                           ; BSR set to: 0
 10214                           
 10215                           ; BSR set to: 0
 10216  013AC2  0100               	movlb	0	; () banked
 10217  013AC4  90D8               	bcf	status,0,c
 10218  013AC6  37EE               	rlcf	___fltol@f1& (0+255),f,b
 10219  013AC8  37EF               	rlcf	(___fltol@f1+1)& (0+255),f,b
 10220  013ACA  37F0               	rlcf	(___fltol@f1+2)& (0+255),f,b
 10221  013ACC  37F1               	rlcf	(___fltol@f1+3)& (0+255),f,b
 10222  013ACE  0100               	movlb	0	; () banked
 10223  013AD0  07F7               	decf	___fltol@exp1& (0+255),f,b
 10224  013AD2                     l2736:
 10225                           
 10226                           ; BSR set to: 0
 10227                           
 10228                           ; BSR set to: 0
 10229  013AD2  0100               	movlb	0	; () banked
 10230  013AD4  51F7               	movf	___fltol@exp1& (0+255),w,b
 10231  013AD6  0100               	movlb	0	; () banked
 10232  013AD8  A4D8               	btfss	status,2,c
 10233  013ADA  D7F3               	goto	l2737
 10234  013ADC                     u11130:
 10235                           
 10236                           ; BSR set to: 0
 10237                           
 10238                           ; BSR set to: 0
 10239                           
 10240                           ; BSR set to: 0
 10241  013ADC  0100               	movlb	0	; () banked
 10242  013ADE  51F6               	movf	___fltol@sign1& (0+255),w,b
 10243  013AE0  0100               	movlb	0	; () banked
 10244  013AE2  B4D8               	btfsc	status,2,c
 10245  013AE4  D009               	goto	l2739
 10246                           
 10247                           ; BSR set to: 0
 10248  013AE6  0100               	movlb	0	; () banked
 10249  013AE8  1FF1               	comf	(___fltol@f1+3)& (0+255),f,b
 10250  013AEA  1FF0               	comf	(___fltol@f1+2)& (0+255),f,b
 10251  013AEC  1FEF               	comf	(___fltol@f1+1)& (0+255),f,b
 10252  013AEE  6DEE               	negf	___fltol@f1& (0+255),b
 10253  013AF0  0E00               	movlw	0
 10254  013AF2  23EF               	addwfc	(___fltol@f1+1)& (0+255),f,b
 10255  013AF4  23F0               	addwfc	(___fltol@f1+2)& (0+255),f,b
 10256  013AF6  23F1               	addwfc	(___fltol@f1+3)& (0+255),f,b
 10257  013AF8                     l2739:
 10258                           
 10259                           ; BSR set to: 0
 10260                           
 10261                           ; BSR set to: 0
 10262  013AF8  C0EE  F0EE         	movff	___fltol@f1,?___fltol
 10263  013AFC  C0EF  F0EF         	movff	___fltol@f1+1,?___fltol+1
 10264  013B00  C0F0  F0F0         	movff	___fltol@f1+2,?___fltol+2
 10265  013B04  C0F1  F0F1         	movff	___fltol@f1+3,?___fltol+3
 10266  013B08  0012               	return	
 10267  013B0A                     __end_of___fltol:
 10268                           	opt stack 0
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           postinc0	equ	0xFEE
 10276                           wreg	equ	0xFE8
 10277                           postdec1	equ	0xFE5
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function _HMI_Render *****************
 10288 ;; Defined at:
 10289 ;;		line 138 in file "HMI.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;		None
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  a               2    8[BANK0 ] unsigned short 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  1    wreg      void 
 10296 ;; Registers used:
 10297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        2 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    9
 10310 ;; This function calls:
 10311 ;;		_OutSeg
 10312 ;; This function is called by:
 10313 ;;		_findClosestWall
 10314 ;;		_measureAndDisplayDistance
 10315 ;;		_mode1
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text36
 10320  016564                     __ptext36:
 10321                           	opt stack 0
 10322  016564                     _HMI_Render:
 10323                           	opt stack 19
 10324                           
 10325                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;incstack = 0
 10329  016564  0E00               	movlw	0
 10330  016566  0100               	movlb	0	; () banked
 10331  016568  6FBE               	movwf	(HMI_Render@a+1)& (0+255),b
 10332  01656A  0E00               	movlw	0
 10333  01656C  6FBD               	movwf	HMI_Render@a& (0+255),b
 10334  01656E                     l14172:
 10335                           
 10336                           ; BSR set to: 0
 10337  01656E  0100               	movlb	0	; () banked
 10338  016570  51BE               	movf	(HMI_Render@a+1)& (0+255),w,b
 10339  016572  E116               	bnz	l1158
 10340  016574  0E08               	movlw	8
 10341  016576  0100               	movlb	0	; () banked
 10342  016578  5DBD               	subwf	HMI_Render@a& (0+255),w,b
 10343  01657A  B0D8               	btfsc	status,0,c
 10344  01657C  0012               	return	
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10348                           
 10349                           ; BSR set to: 0
 10350                           
 10351                           ; BSR set to: 0
 10352  01657E  C0BD  F0B8         	movff	HMI_Render@a,OutSeg@pSegment
 10353  016582  0E3E               	movlw	low _HMIBoard
 10354  016584  0100               	movlb	0	; () banked
 10355  016586  25BD               	addwf	HMI_Render@a& (0+255),w,b
 10356  016588  6ED9               	movwf	fsr2l,c
 10357  01658A  0E03               	movlw	high _HMIBoard
 10358  01658C  0100               	movlb	0	; () banked
 10359  01658E  21BE               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10360  016590  6EDA               	movwf	fsr2h,c
 10361  016592  50DF               	movf	indf2,w,c
 10362  016594  EC45  F0AB         	call	_OutSeg
 10363  016598  0100               	movlb	0	; () banked
 10364  01659A  4BBD               	infsnz	HMI_Render@a& (0+255),f,b
 10365  01659C  2BBE               	incf	(HMI_Render@a+1)& (0+255),f,b
 10366  01659E  D7E7               	goto	l14172
 10367  0165A0                     l1158:
 10368                           
 10369                           ; BSR set to: 0
 10370  0165A0  0012               	return		;funcret
 10371  0165A2                     __end_of_HMI_Render:
 10372                           	opt stack 0
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           postinc0	equ	0xFEE
 10380                           wreg	equ	0xFE8
 10381                           postdec1	equ	0xFE5
 10382                           fsr1h	equ	0xFE2
 10383                           fsr1l	equ	0xFE1
 10384                           indf2	equ	0xFDF
 10385                           postinc2	equ	0xFDE
 10386                           postdec2	equ	0xFDD
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function _OutSeg *****************
 10392 ;; Defined at:
 10393 ;;		line 54 in file "HMI.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  pInput          1    wreg     unsigned char 
 10396 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;  pInput          1    6[BANK0 ] unsigned char 
 10399 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  1    wreg      void 
 10402 ;; Registers used:
 10403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10409 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;Total ram usage:        5 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:    8
 10416 ;; This function calls:
 10417 ;;		_SPI_Send
 10418 ;; This function is called by:
 10419 ;;		_HMI_Render
 10420 ;;		_HMI_GRender
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text37
 10425  01568A                     __ptext37:
 10426                           	opt stack 0
 10427  01568A                     _OutSeg:
 10428                           	opt stack 19
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;incstack = 0
 10432                           ;OutSeg@pInput stored from wreg
 10433  01568A  0100               	movlb	0	; () banked
 10434  01568C  6FBB               	movwf	OutSeg@pInput& (0+255),b
 10435                           
 10436                           ;HMI.c: 58: static UINT8 cur;
 10437                           ;HMI.c: 59: volatile UINT8 out;
 10438                           ;HMI.c: 60: static UINT8 segset;
 10439                           ;HMI.c: 61: static UINT8 a;
 10440                           ;HMI.c: 83: if (pSegment <= 8)
 10441  01568E  0E09               	movlw	9
 10442  015690  0100               	movlb	0	; () banked
 10443  015692  61B8               	cpfslt	OutSeg@pSegment& (0+255),b
 10444  015694  0012               	return	
 10445                           
 10446                           ; BSR set to: 0
 10447                           ;HMI.c: 84: {
 10448                           ;HMI.c: 85: cur = pInput;
 10449  015696  C0BB  F03F         	movff	OutSeg@pInput,OutSeg@cur
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10453  01569A  0E00               	movlw	0
 10454  01569C  6E3D               	movwf	OutSeg@a,c
 10455  01569E                     l13338:
 10456                           
 10457                           ; BSR set to: 0
 10458  01569E  0E07               	movlw	7
 10459  0156A0  643D               	cpfsgt	OutSeg@a,c
 10460  0156A2  D001               	goto	l1146
 10461  0156A4  D027               	goto	u10040
 10462  0156A6                     l1146:
 10463                           
 10464                           ;HMI.c: 87: {
 10465                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10466                           
 10467                           ; BSR set to: 0
 10468  0156A6  C03F  F0B9         	movff	OutSeg@cur,??_OutSeg
 10469  0156AA  0E01               	movlw	1
 10470  0156AC  0100               	movlb	0	; () banked
 10471  0156AE  17B9               	andwf	??_OutSeg& (0+255),f,b
 10472  0156B0  0E06               	movlw	6
 10473  0156B2  0100               	movlb	0	; () banked
 10474  0156B4  6FBA               	movwf	(??_OutSeg+1)& (0+255),b
 10475  0156B6                     u10035:
 10476  0156B6  0100               	movlb	0	; () banked
 10477  0156B8  90D8               	bcf	status,0,c
 10478  0156BA  37B9               	rlcf	??_OutSeg& (0+255),f,b
 10479  0156BC  0100               	movlb	0	; () banked
 10480  0156BE  2FBA               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10481  0156C0  D7FA               	goto	u10035
 10482  0156C2  0100               	movlb	0	; () banked
 10483  0156C4  51B9               	movf	??_OutSeg& (0+255),w,b
 10484  0156C6  6E3E               	movwf	OutSeg@segset,c
 10485                           
 10486                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10487  0156C8  0100               	movlb	0	; () banked
 10488  0156CA  39B8               	swapf	OutSeg@pSegment& (0+255),w,b
 10489  0156CC  42E8               	rrncf	wreg,f,c
 10490  0156CE  0BF8               	andlw	248
 10491  0156D0  103D               	iorwf	OutSeg@a,w,c
 10492  0156D2  103E               	iorwf	OutSeg@segset,w,c
 10493  0156D4  0100               	movlb	0	; () banked
 10494  0156D6  6FBC               	movwf	OutSeg@out& (0+255),b	;volatile
 10495                           
 10496                           ;HMI.c: 90: cur >>= 1;
 10497  0156D8  90D8               	bcf	status,0,c
 10498  0156DA  323F               	rrcf	OutSeg@cur,f,c
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10502  0156DC  0E78               	movlw	low _SPI1
 10503  0156DE  0100               	movlb	0	; () banked
 10504  0156E0  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 10505  0156E2  0E03               	movlw	high _SPI1
 10506  0156E4  0100               	movlb	0	; () banked
 10507  0156E6  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10508  0156E8  C0BC  F0B7         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10509  0156EC  EC98  F0AD         	call	_SPI_Send	;wreg free
 10510  0156F0  2A3D               	incf	OutSeg@a,f,c
 10511  0156F2  D7D5               	goto	l13338
 10512  0156F4                     u10040:
 10513                           
 10514                           ;HMI.c: 96: }
 10515                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10516  0156F4  0E78               	movlw	low _SPI1
 10517  0156F6  0100               	movlb	0	; () banked
 10518  0156F8  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 10519  0156FA  0E03               	movlw	high _SPI1
 10520  0156FC  0100               	movlb	0	; () banked
 10521  0156FE  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10522  015700  0E00               	movlw	0
 10523  015702  0100               	movlb	0	; () banked
 10524  015704  6FB7               	movwf	SPI_Send@pData& (0+255),b
 10525  015706  EC98  F0AD         	call	_SPI_Send	;wreg free
 10526  01570A  0012               	return	
 10527  01570C                     __end_of_OutSeg:
 10528                           	opt stack 0
 10529                           tblptru	equ	0xFF8
 10530                           tblptrh	equ	0xFF7
 10531                           tblptrl	equ	0xFF6
 10532                           tablat	equ	0xFF5
 10533                           prodh	equ	0xFF4
 10534                           prodl	equ	0xFF3
 10535                           postinc0	equ	0xFEE
 10536                           wreg	equ	0xFE8
 10537                           postdec1	equ	0xFE5
 10538                           fsr1h	equ	0xFE2
 10539                           fsr1l	equ	0xFE1
 10540                           indf2	equ	0xFDF
 10541                           postinc2	equ	0xFDE
 10542                           postdec2	equ	0xFDD
 10543                           fsr2h	equ	0xFDA
 10544                           fsr2l	equ	0xFD9
 10545                           status	equ	0xFD8
 10546                           
 10547 ;; *************** function _ADC_Voltage *****************
 10548 ;; Defined at:
 10549 ;;		line 259 in file "Library/ADC.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10552 ;;		 -> ADC_AN0(5), 
 10553 ;; Auto vars:     Size  Location     Type
 10554 ;;  output          4   53[BANK0 ] float 
 10555 ;;  ref             4   49[BANK0 ] const float 
 10556 ;;  max             4   45[BANK0 ] const float 
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  4   39[BANK0 ] float 
 10559 ;; Registers used:
 10560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10561 ;; Tracked objects:
 10562 ;;		On entry : 0/0
 10563 ;;		On exit  : 0/0
 10564 ;;		Unchanged: 0/0
 10565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10567 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;Total ram usage:       18 bytes
 10571 ;; Hardware stack levels used:    1
 10572 ;; Hardware stack levels required when called:    8
 10573 ;; This function calls:
 10574 ;;		___fldiv
 10575 ;;		___flmul
 10576 ;;		___xxtofl
 10577 ;; This function is called by:
 10578 ;;		_findClosestWall
 10579 ;;		_measureAndDisplayDistance
 10580 ;;		_mode1
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text38
 10585  0140BA                     __ptext38:
 10586                           	opt stack 0
 10587  0140BA                     _ADC_Voltage:
 10588                           	opt stack 20
 10589                           
 10590                           ;ADC.c: 261: const float max = 1024;
 10591                           
 10592                           ;incstack = 0
 10593  0140BA  0E00               	movlw	0
 10594  0140BC  0100               	movlb	0	; () banked
 10595  0140BE  6FE2               	movwf	ADC_Voltage@max& (0+255),b
 10596  0140C0  0E00               	movlw	0
 10597  0140C2  6FE3               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10598  0140C4  0E80               	movlw	128
 10599  0140C6  6FE4               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10600  0140C8  0E44               	movlw	68
 10601  0140CA  6FE5               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10602                           
 10603                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10604  0140CC  0E33               	movlw	51
 10605  0140CE  0100               	movlb	0	; () banked
 10606  0140D0  6FE6               	movwf	ADC_Voltage@ref& (0+255),b
 10607  0140D2  0E33               	movlw	51
 10608  0140D4  6FE7               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10609  0140D6  0E53               	movlw	83
 10610  0140D8  6FE8               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10611  0140DA  0E40               	movlw	64
 10612  0140DC  6FE9               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;ADC.c: 263: float output = pInput->mValue;
 10616  0140DE  0100               	movlb	0	; () banked
 10617  0140E0  EE20 F001          	lfsr	2,1
 10618  0140E4  51DC               	movf	ADC_Voltage@pInput& (0+255),w,b
 10619  0140E6  26D9               	addwf	fsr2l,f,c
 10620  0140E8  51DD               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10621  0140EA  22DA               	addwfc	fsr2h,f,c
 10622  0140EC  CFDE F0E0          	movff	postinc2,??_ADC_Voltage
 10623  0140F0  CFDD F0E1          	movff	postdec2,??_ADC_Voltage+1
 10624  0140F4  C0E0  F0B5         	movff	??_ADC_Voltage,___xxtofl@val
 10625  0140F8  C0E1  F0B6         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10626  0140FC  0100               	movlb	0	; () banked
 10627  0140FE  6BB7               	clrf	(___xxtofl@val+2)& (0+255),b
 10628  014100  6BB8               	clrf	(___xxtofl@val+3)& (0+255),b
 10629  014102  0E00               	movlw	0
 10630  014104  EC57  F093         	call	___xxtofl
 10631  014108  C0B5  F0EA         	movff	?___xxtofl,ADC_Voltage@output
 10632  01410C  C0B6  F0EB         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10633  014110  C0B7  F0EC         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10634  014114  C0B8  F0ED         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10635                           
 10636                           ;ADC.c: 265: output /= max;
 10637  014118  C0EA  F0B5         	movff	ADC_Voltage@output,___fldiv@b
 10638  01411C  C0EB  F0B6         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10639  014120  C0EC  F0B7         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10640  014124  C0ED  F0B8         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10641  014128  C0E2  F0B9         	movff	ADC_Voltage@max,___fldiv@a
 10642  01412C  C0E3  F0BA         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10643  014130  C0E4  F0BB         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10644  014134  C0E5  F0BC         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10645  014138  ECBC  F088         	call	___fldiv	;wreg free
 10646  01413C  C0B5  F0EA         	movff	?___fldiv,ADC_Voltage@output
 10647  014140  C0B6  F0EB         	movff	?___fldiv+1,ADC_Voltage@output+1
 10648  014144  C0B7  F0EC         	movff	?___fldiv+2,ADC_Voltage@output+2
 10649  014148  C0B8  F0ED         	movff	?___fldiv+3,ADC_Voltage@output+3
 10650                           
 10651                           ;ADC.c: 266: output *= ref;
 10652  01414C  C0EA  F0C3         	movff	ADC_Voltage@output,___flmul@b
 10653  014150  C0EB  F0C4         	movff	ADC_Voltage@output+1,___flmul@b+1
 10654  014154  C0EC  F0C5         	movff	ADC_Voltage@output+2,___flmul@b+2
 10655  014158  C0ED  F0C6         	movff	ADC_Voltage@output+3,___flmul@b+3
 10656  01415C  C0E6  F0C7         	movff	ADC_Voltage@ref,___flmul@a
 10657  014160  C0E7  F0C8         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10658  014164  C0E8  F0C9         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10659  014168  C0E9  F0CA         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10660  01416C  EC5A  F084         	call	___flmul	;wreg free
 10661  014170  C0C3  F0EA         	movff	?___flmul,ADC_Voltage@output
 10662  014174  C0C4  F0EB         	movff	?___flmul+1,ADC_Voltage@output+1
 10663  014178  C0C5  F0EC         	movff	?___flmul+2,ADC_Voltage@output+2
 10664  01417C  C0C6  F0ED         	movff	?___flmul+3,ADC_Voltage@output+3
 10665                           
 10666                           ;ADC.c: 268: return output + (float)0.000;
 10667  014180  C0EA  F0DC         	movff	ADC_Voltage@output,?_ADC_Voltage
 10668  014184  C0EB  F0DD         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10669  014188  C0EC  F0DE         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10670  01418C  C0ED  F0DF         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10671  014190  0012               	return	
 10672  014192                     __end_of_ADC_Voltage:
 10673                           	opt stack 0
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           postinc0	equ	0xFEE
 10681                           wreg	equ	0xFE8
 10682                           postdec1	equ	0xFE5
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           fsr2h	equ	0xFDA
 10689                           fsr2l	equ	0xFD9
 10690                           status	equ	0xFD8
 10691                           
 10692 ;; *************** function ___xxtofl *****************
 10693 ;; Defined at:
 10694 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;  sign            1    wreg     unsigned char 
 10697 ;;  val             4    0[BANK0 ] long 
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  sign            1    8[BANK0 ] unsigned char 
 10700 ;;  arg             4   10[BANK0 ] unsigned long 
 10701 ;;  exp             1    9[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  4    0[BANK0 ] unsigned char 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10712 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;Total ram usage:       14 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    7
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_ADC_Voltage
 10722 ;;		_findClosestWall
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           	psect	text39
 10727  0126AE                     __ptext39:
 10728                           	opt stack 0
 10729  0126AE                     ___xxtofl:
 10730                           	opt stack 20
 10731                           
 10732                           ;incstack = 0
 10733                           ;___xxtofl@sign stored from wreg
 10734  0126AE  0100               	movlb	0	; () banked
 10735  0126B0  6FBD               	movwf	___xxtofl@sign& (0+255),b
 10736  0126B2  0100               	movlb	0	; () banked
 10737  0126B4  51BD               	movf	___xxtofl@sign& (0+255),w,b
 10738  0126B6  0100               	movlb	0	; () banked
 10739  0126B8  B4D8               	btfsc	status,2,c
 10740  0126BA  D01E               	goto	l3052
 10741                           
 10742                           ; BSR set to: 0
 10743  0126BC  0100               	movlb	0	; () banked
 10744  0126BE  AFB8               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10745  0126C0  D01B               	goto	l3052
 10746                           
 10747                           ; BSR set to: 0
 10748  0126C2  C0B5  F0B9         	movff	___xxtofl@val,??___xxtofl
 10749  0126C6  C0B6  F0BA         	movff	___xxtofl@val+1,??___xxtofl+1
 10750  0126CA  C0B7  F0BB         	movff	___xxtofl@val+2,??___xxtofl+2
 10751  0126CE  C0B8  F0BC         	movff	___xxtofl@val+3,??___xxtofl+3
 10752  0126D2  0100               	movlb	0	; () banked
 10753  0126D4  1FB9               	comf	??___xxtofl& (0+255),f,b
 10754  0126D6  1FBA               	comf	(??___xxtofl+1)& (0+255),f,b
 10755  0126D8  1FBB               	comf	(??___xxtofl+2)& (0+255),f,b
 10756  0126DA  1FBC               	comf	(??___xxtofl+3)& (0+255),f,b
 10757  0126DC  2BB9               	incf	??___xxtofl& (0+255),f,b
 10758  0126DE  0E00               	movlw	0
 10759  0126E0  23BA               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10760  0126E2  23BB               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10761  0126E4  23BC               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10762  0126E6  C0B9  F0BF         	movff	??___xxtofl,___xxtofl@arg
 10763  0126EA  C0BA  F0C0         	movff	??___xxtofl+1,___xxtofl@arg+1
 10764  0126EE  C0BB  F0C1         	movff	??___xxtofl+2,___xxtofl@arg+2
 10765  0126F2  C0BC  F0C2         	movff	??___xxtofl+3,___xxtofl@arg+3
 10766  0126F6  D008               	goto	l3053
 10767  0126F8                     l3052:
 10768                           
 10769                           ; BSR set to: 0
 10770  0126F8  C0B5  F0BF         	movff	___xxtofl@val,___xxtofl@arg
 10771  0126FC  C0B6  F0C0         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10772  012700  C0B7  F0C1         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10773  012704  C0B8  F0C2         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10774  012708                     l3053:
 10775                           
 10776                           ; BSR set to: 0
 10777                           
 10778                           ; BSR set to: 0
 10779  012708  0100               	movlb	0	; () banked
 10780  01270A  51B5               	movf	___xxtofl@val& (0+255),w,b
 10781  01270C  0100               	movlb	0	; () banked
 10782  01270E  11B6               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10783  012710  0100               	movlb	0	; () banked
 10784  012712  11B7               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10785  012714  0100               	movlb	0	; () banked
 10786  012716  11B8               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10787  012718  A4D8               	btfss	status,2,c
 10788  01271A  D00A               	goto	l3054
 10789                           
 10790                           ; BSR set to: 0
 10791  01271C  0E00               	movlw	0
 10792  01271E  0100               	movlb	0	; () banked
 10793  012720  6FB5               	movwf	?___xxtofl& (0+255),b
 10794  012722  0E00               	movlw	0
 10795  012724  6FB6               	movwf	(?___xxtofl+1)& (0+255),b
 10796  012726  0E00               	movlw	0
 10797  012728  6FB7               	movwf	(?___xxtofl+2)& (0+255),b
 10798  01272A  0E00               	movlw	0
 10799  01272C  6FB8               	movwf	(?___xxtofl+3)& (0+255),b
 10800                           
 10801                           ; BSR set to: 0
 10802  01272E  0012               	return	
 10803  012730                     l3054:
 10804                           
 10805                           ; BSR set to: 0
 10806                           
 10807                           ; BSR set to: 0
 10808  012730  0E96               	movlw	150
 10809  012732  0100               	movlb	0	; () banked
 10810  012734  6FBE               	movwf	___xxtofl@exp& (0+255),b
 10811  012736  D008               	goto	l3056
 10812  012738                     
 10813                           ; BSR set to: 0
 10814                           
 10815                           ; BSR set to: 0
 10816  012738  0100               	movlb	0	; () banked
 10817  01273A  2BBE               	incf	___xxtofl@exp& (0+255),f,b
 10818  01273C  0100               	movlb	0	; () banked
 10819  01273E  90D8               	bcf	status,0,c
 10820  012740  33C2               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10821  012742  33C1               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10822  012744  33C0               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10823  012746  33BF               	rrcf	___xxtofl@arg& (0+255),f,b
 10824  012748                     l3056:
 10825                           
 10826                           ; BSR set to: 0
 10827                           
 10828                           ; BSR set to: 0
 10829  012748  0E00               	movlw	0
 10830  01274A  0100               	movlb	0	; () banked
 10831  01274C  15BF               	andwf	___xxtofl@arg& (0+255),w,b
 10832  01274E  0100               	movlb	0	; () banked
 10833  012750  6FB9               	movwf	??___xxtofl& (0+255),b
 10834  012752  0E00               	movlw	0
 10835  012754  0100               	movlb	0	; () banked
 10836  012756  15C0               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10837  012758  0100               	movlb	0	; () banked
 10838  01275A  6FBA               	movwf	(??___xxtofl+1)& (0+255),b
 10839  01275C  0E00               	movlw	0
 10840  01275E  0100               	movlb	0	; () banked
 10841  012760  15C1               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10842  012762  0100               	movlb	0	; () banked
 10843  012764  6FBB               	movwf	(??___xxtofl+2)& (0+255),b
 10844  012766  0EFE               	movlw	254
 10845  012768  0100               	movlb	0	; () banked
 10846  01276A  15C2               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10847  01276C  0100               	movlb	0	; () banked
 10848  01276E  6FBC               	movwf	(??___xxtofl+3)& (0+255),b
 10849  012770  0100               	movlb	0	; () banked
 10850  012772  51B9               	movf	??___xxtofl& (0+255),w,b
 10851  012774  0100               	movlb	0	; () banked
 10852  012776  11BA               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10853  012778  0100               	movlb	0	; () banked
 10854  01277A  11BB               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10855  01277C  0100               	movlb	0	; () banked
 10856  01277E  11BC               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10857  012780  B4D8               	btfsc	status,2,c
 10858  012782  D010               	goto	l3059
 10859  012784  D7D9               	goto	l3057
 10860  012786                     
 10861                           ; BSR set to: 0
 10862                           
 10863                           ; BSR set to: 0
 10864  012786  0100               	movlb	0	; () banked
 10865  012788  2BBE               	incf	___xxtofl@exp& (0+255),f,b
 10866                           
 10867                           ; BSR set to: 0
 10868  01278A  0E01               	movlw	1
 10869  01278C  0100               	movlb	0	; () banked
 10870  01278E  27BF               	addwf	___xxtofl@arg& (0+255),f,b
 10871  012790  0E00               	movlw	0
 10872  012792  23C0               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10873  012794  23C1               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10874  012796  23C2               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10875                           
 10876                           ; BSR set to: 0
 10877  012798  0100               	movlb	0	; () banked
 10878  01279A  90D8               	bcf	status,0,c
 10879  01279C  33C2               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10880  01279E  33C1               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10881  0127A0  33C0               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10882  0127A2  33BF               	rrcf	___xxtofl@arg& (0+255),f,b
 10883  0127A4                     l3059:
 10884                           
 10885                           ; BSR set to: 0
 10886  0127A4  0E00               	movlw	0
 10887  0127A6  0100               	movlb	0	; () banked
 10888  0127A8  15BF               	andwf	___xxtofl@arg& (0+255),w,b
 10889  0127AA  0100               	movlb	0	; () banked
 10890  0127AC  6FB9               	movwf	??___xxtofl& (0+255),b
 10891  0127AE  0E00               	movlw	0
 10892  0127B0  0100               	movlb	0	; () banked
 10893  0127B2  15C0               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10894  0127B4  0100               	movlb	0	; () banked
 10895  0127B6  6FBA               	movwf	(??___xxtofl+1)& (0+255),b
 10896  0127B8  0E00               	movlw	0
 10897  0127BA  0100               	movlb	0	; () banked
 10898  0127BC  15C1               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10899  0127BE  0100               	movlb	0	; () banked
 10900  0127C0  6FBB               	movwf	(??___xxtofl+2)& (0+255),b
 10901  0127C2  0EFF               	movlw	255
 10902  0127C4  0100               	movlb	0	; () banked
 10903  0127C6  15C2               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10904  0127C8  0100               	movlb	0	; () banked
 10905  0127CA  6FBC               	movwf	(??___xxtofl+3)& (0+255),b
 10906  0127CC  0100               	movlb	0	; () banked
 10907  0127CE  51B9               	movf	??___xxtofl& (0+255),w,b
 10908  0127D0  0100               	movlb	0	; () banked
 10909  0127D2  11BA               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10910  0127D4  0100               	movlb	0	; () banked
 10911  0127D6  11BB               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10912  0127D8  0100               	movlb	0	; () banked
 10913  0127DA  11BC               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10914  0127DC  B4D8               	btfsc	status,2,c
 10915  0127DE  D009               	goto	l3062
 10916  0127E0  D7D2               	goto	l3060
 10917  0127E2                     
 10918                           ; BSR set to: 0
 10919                           
 10920                           ; BSR set to: 0
 10921  0127E2  0100               	movlb	0	; () banked
 10922  0127E4  07BE               	decf	___xxtofl@exp& (0+255),f,b
 10923  0127E6  0100               	movlb	0	; () banked
 10924  0127E8  90D8               	bcf	status,0,c
 10925  0127EA  37BF               	rlcf	___xxtofl@arg& (0+255),f,b
 10926  0127EC  37C0               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10927  0127EE  37C1               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10928  0127F0  37C2               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10929  0127F2                     l3062:
 10930                           
 10931                           ; BSR set to: 0
 10932                           
 10933                           ; BSR set to: 0
 10934  0127F2  0100               	movlb	0	; () banked
 10935  0127F4  BFC1               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10936  0127F6  D004               	goto	u10640
 10937                           
 10938                           ; BSR set to: 0
 10939  0127F8  0E02               	movlw	2
 10940  0127FA  0100               	movlb	0	; () banked
 10941  0127FC  61BE               	cpfslt	___xxtofl@exp& (0+255),b
 10942  0127FE  D7F1               	goto	l3063
 10943  012800                     u10640:
 10944                           
 10945                           ; BSR set to: 0
 10946                           
 10947                           ; BSR set to: 0
 10948  012800  0100               	movlb	0	; () banked
 10949  012802  B1BE               	btfsc	___xxtofl@exp& (0+255),0,b
 10950  012804  D009               	goto	l3067
 10951                           
 10952                           ; BSR set to: 0
 10953  012806  0EFF               	movlw	255
 10954  012808  0100               	movlb	0	; () banked
 10955  01280A  17BF               	andwf	___xxtofl@arg& (0+255),f,b
 10956  01280C  0EFF               	movlw	255
 10957  01280E  17C0               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 10958  012810  0E7F               	movlw	127
 10959  012812  17C1               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 10960  012814  0EFF               	movlw	255
 10961  012816  17C2               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 10962  012818                     l3067:
 10963                           
 10964                           ; BSR set to: 0
 10965  012818  0100               	movlb	0	; () banked
 10966  01281A  90D8               	bcf	status,0,c
 10967  01281C  33BE               	rrcf	___xxtofl@exp& (0+255),f,b
 10968  01281E  C0BE  F0B9         	movff	___xxtofl@exp,??___xxtofl
 10969  012822  0100               	movlb	0	; () banked
 10970  012824  6BBA               	clrf	(??___xxtofl+1)& (0+255),b
 10971  012826  6BBB               	clrf	(??___xxtofl+2)& (0+255),b
 10972  012828  6BBC               	clrf	(??___xxtofl+3)& (0+255),b
 10973  01282A  C0B9  F0BC         	movff	??___xxtofl,??___xxtofl+3
 10974  01282E  0100               	movlb	0	; () banked
 10975  012830  6BBB               	clrf	(??___xxtofl+2)& (0+255),b
 10976  012832  6BBA               	clrf	(??___xxtofl+1)& (0+255),b
 10977  012834  6BB9               	clrf	??___xxtofl& (0+255),b
 10978  012836  0100               	movlb	0	; () banked
 10979  012838  51B9               	movf	??___xxtofl& (0+255),w,b
 10980  01283A  0100               	movlb	0	; () banked
 10981  01283C  13BF               	iorwf	___xxtofl@arg& (0+255),f,b
 10982  01283E  0100               	movlb	0	; () banked
 10983  012840  51BA               	movf	(??___xxtofl+1)& (0+255),w,b
 10984  012842  0100               	movlb	0	; () banked
 10985  012844  13C0               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 10986  012846  0100               	movlb	0	; () banked
 10987  012848  51BB               	movf	(??___xxtofl+2)& (0+255),w,b
 10988  01284A  0100               	movlb	0	; () banked
 10989  01284C  13C1               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 10990  01284E  0100               	movlb	0	; () banked
 10991  012850  51BC               	movf	(??___xxtofl+3)& (0+255),w,b
 10992  012852  0100               	movlb	0	; () banked
 10993  012854  13C2               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 10994                           
 10995                           ; BSR set to: 0
 10996  012856  0100               	movlb	0	; () banked
 10997  012858  51BD               	movf	___xxtofl@sign& (0+255),w,b
 10998  01285A  0100               	movlb	0	; () banked
 10999  01285C  B4D8               	btfsc	status,2,c
 11000  01285E  D005               	goto	l3068
 11001                           
 11002                           ; BSR set to: 0
 11003  012860  0100               	movlb	0	; () banked
 11004  012862  AFB8               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11005  012864  D002               	goto	l3068
 11006                           
 11007                           ; BSR set to: 0
 11008  012866  0100               	movlb	0	; () banked
 11009  012868  8FC2               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11010  01286A                     l3068:
 11011                           
 11012                           ; BSR set to: 0
 11013                           
 11014                           ; BSR set to: 0
 11015  01286A  C0BF  F0B5         	movff	___xxtofl@arg,?___xxtofl
 11016  01286E  C0C0  F0B6         	movff	___xxtofl@arg+1,?___xxtofl+1
 11017  012872  C0C1  F0B7         	movff	___xxtofl@arg+2,?___xxtofl+2
 11018  012876  C0C2  F0B8         	movff	___xxtofl@arg+3,?___xxtofl+3
 11019  01287A  0012               	return	
 11020  01287C                     __end_of___xxtofl:
 11021                           	opt stack 0
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           postinc0	equ	0xFEE
 11029                           wreg	equ	0xFE8
 11030                           postdec1	equ	0xFE5
 11031                           fsr1h	equ	0xFE2
 11032                           fsr1l	equ	0xFE1
 11033                           indf2	equ	0xFDF
 11034                           postinc2	equ	0xFDE
 11035                           postdec2	equ	0xFDD
 11036                           fsr2h	equ	0xFDA
 11037                           fsr2l	equ	0xFD9
 11038                           status	equ	0xFD8
 11039                           
 11040 ;; *************** function ___flmul *****************
 11041 ;; Defined at:
 11042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;  b               4   14[BANK0 ] unsigned char 
 11045 ;;  a               4   18[BANK0 ] unsigned char 
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;  prod            4   33[BANK0 ] struct .
 11048 ;;  grs             4   28[BANK0 ] unsigned long 
 11049 ;;  temp            2   37[BANK0 ] struct .
 11050 ;;  bexp            1   32[BANK0 ] unsigned char 
 11051 ;;  aexp            1   27[BANK0 ] unsigned char 
 11052 ;;  sign            1   26[BANK0 ] unsigned char 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  4   14[BANK0 ] unsigned char 
 11055 ;; Registers used:
 11056 ;;		wreg, status,2, status,0, prodl, prodh
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11062 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;Total ram usage:       25 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    7
 11069 ;; This function calls:
 11070 ;;		Nothing
 11071 ;; This function is called by:
 11072 ;;		_ADC_Voltage
 11073 ;;		_findClosestWall
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text40
 11078  0108B4                     __ptext40:
 11079                           	opt stack 0
 11080  0108B4                     ___flmul:
 11081                           	opt stack 20
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;incstack = 0
 11085  0108B4  0100               	movlb	0	; () banked
 11086  0108B6  51C6               	movf	(___flmul@b+3)& (0+255),w,b
 11087  0108B8  0B80               	andlw	128
 11088  0108BA  0100               	movlb	0	; () banked
 11089  0108BC  6FCF               	movwf	___flmul@sign& (0+255),b
 11090  0108BE  0100               	movlb	0	; () banked
 11091  0108C0  51C6               	movf	(___flmul@b+3)& (0+255),w,b
 11092  0108C2  25C6               	addwf	(___flmul@b+3)& (0+255),w,b
 11093  0108C4  0100               	movlb	0	; () banked
 11094  0108C6  6FD5               	movwf	___flmul@bexp& (0+255),b
 11095                           
 11096                           ; BSR set to: 0
 11097  0108C8  0100               	movlb	0	; () banked
 11098  0108CA  AFC5               	btfss	(___flmul@b+2)& (0+255),7,b
 11099  0108CC  D002               	goto	l3023
 11100                           
 11101                           ; BSR set to: 0
 11102  0108CE  0100               	movlb	0	; () banked
 11103  0108D0  81D5               	bsf	___flmul@bexp& (0+255),0,b
 11104  0108D2                     l3023:
 11105                           
 11106                           ; BSR set to: 0
 11107                           
 11108                           ; BSR set to: 0
 11109  0108D2  0100               	movlb	0	; () banked
 11110  0108D4  51D5               	movf	___flmul@bexp& (0+255),w,b
 11111  0108D6  0100               	movlb	0	; () banked
 11112  0108D8  B4D8               	btfsc	status,2,c
 11113  0108DA  D010               	goto	l3024
 11114                           
 11115                           ; BSR set to: 0
 11116  0108DC  0100               	movlb	0	; () banked
 11117  0108DE  29D5               	incf	___flmul@bexp& (0+255),w,b
 11118  0108E0  A4D8               	btfss	status,2,c
 11119  0108E2  D009               	goto	l3025
 11120                           
 11121                           ; BSR set to: 0
 11122  0108E4  0E00               	movlw	0
 11123  0108E6  0100               	movlb	0	; () banked
 11124  0108E8  6FC3               	movwf	___flmul@b& (0+255),b
 11125  0108EA  0E00               	movlw	0
 11126  0108EC  6FC4               	movwf	(___flmul@b+1)& (0+255),b
 11127  0108EE  0E00               	movlw	0
 11128  0108F0  6FC5               	movwf	(___flmul@b+2)& (0+255),b
 11129  0108F2  0E00               	movlw	0
 11130  0108F4  6FC6               	movwf	(___flmul@b+3)& (0+255),b
 11131  0108F6                     l3025:
 11132                           
 11133                           ; BSR set to: 0
 11134                           
 11135                           ; BSR set to: 0
 11136  0108F6  0100               	movlb	0	; () banked
 11137  0108F8  8FC5               	bsf	(___flmul@b+2)& (0+255),7,b
 11138  0108FA  D009               	goto	l3026
 11139  0108FC                     l3024:
 11140                           
 11141                           ; BSR set to: 0
 11142                           
 11143                           ; BSR set to: 0
 11144  0108FC  0E00               	movlw	0
 11145  0108FE  0100               	movlb	0	; () banked
 11146  010900  6FC3               	movwf	___flmul@b& (0+255),b
 11147  010902  0E00               	movlw	0
 11148  010904  6FC4               	movwf	(___flmul@b+1)& (0+255),b
 11149  010906  0E00               	movlw	0
 11150  010908  6FC5               	movwf	(___flmul@b+2)& (0+255),b
 11151  01090A  0E00               	movlw	0
 11152  01090C  6FC6               	movwf	(___flmul@b+3)& (0+255),b
 11153  01090E                     l3026:
 11154                           
 11155                           ; BSR set to: 0
 11156                           
 11157                           ; BSR set to: 0
 11158  01090E  0100               	movlb	0	; () banked
 11159  010910  51CA               	movf	(___flmul@a+3)& (0+255),w,b
 11160  010912  0B80               	andlw	128
 11161  010914  0100               	movlb	0	; () banked
 11162  010916  1BCF               	xorwf	___flmul@sign& (0+255),f,b
 11163                           
 11164                           ; BSR set to: 0
 11165  010918  0100               	movlb	0	; () banked
 11166  01091A  51CA               	movf	(___flmul@a+3)& (0+255),w,b
 11167  01091C  25CA               	addwf	(___flmul@a+3)& (0+255),w,b
 11168  01091E  0100               	movlb	0	; () banked
 11169  010920  6FD0               	movwf	___flmul@aexp& (0+255),b
 11170                           
 11171                           ; BSR set to: 0
 11172  010922  0100               	movlb	0	; () banked
 11173  010924  AFC9               	btfss	(___flmul@a+2)& (0+255),7,b
 11174  010926  D002               	goto	l3027
 11175                           
 11176                           ; BSR set to: 0
 11177  010928  0100               	movlb	0	; () banked
 11178  01092A  81D0               	bsf	___flmul@aexp& (0+255),0,b
 11179  01092C                     l3027:
 11180                           
 11181                           ; BSR set to: 0
 11182                           
 11183                           ; BSR set to: 0
 11184  01092C  0100               	movlb	0	; () banked
 11185  01092E  51D0               	movf	___flmul@aexp& (0+255),w,b
 11186  010930  0100               	movlb	0	; () banked
 11187  010932  B4D8               	btfsc	status,2,c
 11188  010934  D010               	goto	l3028
 11189                           
 11190                           ; BSR set to: 0
 11191  010936  0100               	movlb	0	; () banked
 11192  010938  29D0               	incf	___flmul@aexp& (0+255),w,b
 11193  01093A  A4D8               	btfss	status,2,c
 11194  01093C  D009               	goto	l3029
 11195                           
 11196                           ; BSR set to: 0
 11197  01093E  0E00               	movlw	0
 11198  010940  0100               	movlb	0	; () banked
 11199  010942  6FC7               	movwf	___flmul@a& (0+255),b
 11200  010944  0E00               	movlw	0
 11201  010946  6FC8               	movwf	(___flmul@a+1)& (0+255),b
 11202  010948  0E00               	movlw	0
 11203  01094A  6FC9               	movwf	(___flmul@a+2)& (0+255),b
 11204  01094C  0E00               	movlw	0
 11205  01094E  6FCA               	movwf	(___flmul@a+3)& (0+255),b
 11206  010950                     l3029:
 11207                           
 11208                           ; BSR set to: 0
 11209                           
 11210                           ; BSR set to: 0
 11211  010950  0100               	movlb	0	; () banked
 11212  010952  8FC9               	bsf	(___flmul@a+2)& (0+255),7,b
 11213  010954  D009               	goto	l3030
 11214  010956                     l3028:
 11215                           
 11216                           ; BSR set to: 0
 11217                           
 11218                           ; BSR set to: 0
 11219  010956  0E00               	movlw	0
 11220  010958  0100               	movlb	0	; () banked
 11221  01095A  6FC7               	movwf	___flmul@a& (0+255),b
 11222  01095C  0E00               	movlw	0
 11223  01095E  6FC8               	movwf	(___flmul@a+1)& (0+255),b
 11224  010960  0E00               	movlw	0
 11225  010962  6FC9               	movwf	(___flmul@a+2)& (0+255),b
 11226  010964  0E00               	movlw	0
 11227  010966  6FCA               	movwf	(___flmul@a+3)& (0+255),b
 11228  010968                     l3030:
 11229                           
 11230                           ; BSR set to: 0
 11231  010968  0100               	movlb	0	; () banked
 11232  01096A  51D0               	movf	___flmul@aexp& (0+255),w,b
 11233  01096C  0100               	movlb	0	; () banked
 11234  01096E  B4D8               	btfsc	status,2,c
 11235  010970  D005               	goto	u10460
 11236                           
 11237                           ; BSR set to: 0
 11238  010972  0100               	movlb	0	; () banked
 11239  010974  51D5               	movf	___flmul@bexp& (0+255),w,b
 11240  010976  0100               	movlb	0	; () banked
 11241  010978  A4D8               	btfss	status,2,c
 11242  01097A  D00A               	goto	l3031
 11243  01097C                     u10460:
 11244                           
 11245                           ; BSR set to: 0
 11246                           
 11247                           ; BSR set to: 0
 11248  01097C  0E00               	movlw	0
 11249  01097E  0100               	movlb	0	; () banked
 11250  010980  6FC3               	movwf	?___flmul& (0+255),b
 11251  010982  0E00               	movlw	0
 11252  010984  6FC4               	movwf	(?___flmul+1)& (0+255),b
 11253  010986  0E00               	movlw	0
 11254  010988  6FC5               	movwf	(?___flmul+2)& (0+255),b
 11255  01098A  0E00               	movlw	0
 11256  01098C  6FC6               	movwf	(?___flmul+3)& (0+255),b
 11257                           
 11258                           ; BSR set to: 0
 11259  01098E  0012               	return	
 11260  010990                     l3031:
 11261                           
 11262                           ; BSR set to: 0
 11263                           
 11264                           ; BSR set to: 0
 11265  010990  0100               	movlb	0	; () banked
 11266  010992  51C9               	movf	(___flmul@a+2)& (0+255),w,b
 11267  010994  0100               	movlb	0	; () banked
 11268  010996  03C3               	mulwf	___flmul@b& (0+255),b
 11269  010998  CFF3 F0DA          	movff	prodl,___flmul@temp
 11270  01099C  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11271                           
 11272                           ; BSR set to: 0
 11273  0109A0  0100               	movlb	0	; () banked
 11274  0109A2  51DA               	movf	___flmul@temp& (0+255),w,b
 11275  0109A4  0100               	movlb	0	; () banked
 11276  0109A6  6FD1               	movwf	___flmul@grs& (0+255),b
 11277  0109A8  6BD2               	clrf	(___flmul@grs+1)& (0+255),b
 11278  0109AA  6BD3               	clrf	(___flmul@grs+2)& (0+255),b
 11279  0109AC  6BD4               	clrf	(___flmul@grs+3)& (0+255),b
 11280                           
 11281                           ; BSR set to: 0
 11282  0109AE  0100               	movlb	0	; () banked
 11283  0109B0  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11284  0109B2  0100               	movlb	0	; () banked
 11285  0109B4  6FD6               	movwf	___flmul@prod& (0+255),b
 11286  0109B6  6BD7               	clrf	(___flmul@prod+1)& (0+255),b
 11287  0109B8  6BD8               	clrf	(___flmul@prod+2)& (0+255),b
 11288  0109BA  6BD9               	clrf	(___flmul@prod+3)& (0+255),b
 11289  0109BC  0100               	movlb	0	; () banked
 11290  0109BE  51C8               	movf	(___flmul@a+1)& (0+255),w,b
 11291  0109C0  0100               	movlb	0	; () banked
 11292  0109C2  03C4               	mulwf	(___flmul@b+1)& (0+255),b
 11293  0109C4  CFF3 F0DA          	movff	prodl,___flmul@temp
 11294  0109C8  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11295                           
 11296                           ; BSR set to: 0
 11297  0109CC  0100               	movlb	0	; () banked
 11298  0109CE  51DA               	movf	___flmul@temp& (0+255),w,b
 11299  0109D0  0100               	movlb	0	; () banked
 11300  0109D2  27D1               	addwf	___flmul@grs& (0+255),f,b
 11301  0109D4  0E00               	movlw	0
 11302  0109D6  23D2               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11303  0109D8  23D3               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11304  0109DA  23D4               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11305                           
 11306                           ; BSR set to: 0
 11307  0109DC  0100               	movlb	0	; () banked
 11308  0109DE  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11309  0109E0  0100               	movlb	0	; () banked
 11310  0109E2  27D6               	addwf	___flmul@prod& (0+255),f,b
 11311  0109E4  0E00               	movlw	0
 11312  0109E6  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11313  0109E8  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11314  0109EA  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11315  0109EC  0100               	movlb	0	; () banked
 11316  0109EE  51C7               	movf	___flmul@a& (0+255),w,b
 11317  0109F0  0100               	movlb	0	; () banked
 11318  0109F2  03C5               	mulwf	(___flmul@b+2)& (0+255),b
 11319  0109F4  CFF3 F0DA          	movff	prodl,___flmul@temp
 11320  0109F8  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11321                           
 11322                           ; BSR set to: 0
 11323  0109FC  0100               	movlb	0	; () banked
 11324  0109FE  51DA               	movf	___flmul@temp& (0+255),w,b
 11325  010A00  0100               	movlb	0	; () banked
 11326  010A02  27D1               	addwf	___flmul@grs& (0+255),f,b
 11327  010A04  0E00               	movlw	0
 11328  010A06  23D2               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11329  010A08  23D3               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11330  010A0A  23D4               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11331                           
 11332                           ; BSR set to: 0
 11333  010A0C  0100               	movlb	0	; () banked
 11334  010A0E  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11335  010A10  0100               	movlb	0	; () banked
 11336  010A12  27D6               	addwf	___flmul@prod& (0+255),f,b
 11337  010A14  0E00               	movlw	0
 11338  010A16  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11339  010A18  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11340  010A1A  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11341                           
 11342                           ; BSR set to: 0
 11343  010A1C  C0D3  F0D4         	movff	___flmul@grs+2,___flmul@grs+3
 11344  010A20  C0D2  F0D3         	movff	___flmul@grs+1,___flmul@grs+2
 11345  010A24  C0D1  F0D2         	movff	___flmul@grs,___flmul@grs+1
 11346  010A28  0100               	movlb	0	; () banked
 11347  010A2A  6BD1               	clrf	___flmul@grs& (0+255),b
 11348                           
 11349                           ; BSR set to: 0
 11350  010A2C  0100               	movlb	0	; () banked
 11351  010A2E  51C7               	movf	___flmul@a& (0+255),w,b
 11352  010A30  0100               	movlb	0	; () banked
 11353  010A32  03C4               	mulwf	(___flmul@b+1)& (0+255),b
 11354  010A34  CFF3 F0DA          	movff	prodl,___flmul@temp
 11355  010A38  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11356                           
 11357                           ; BSR set to: 0
 11358  010A3C  0100               	movlb	0	; () banked
 11359  010A3E  51DA               	movf	___flmul@temp& (0+255),w,b
 11360  010A40  0100               	movlb	0	; () banked
 11361  010A42  27D1               	addwf	___flmul@grs& (0+255),f,b
 11362  010A44  0100               	movlb	0	; () banked
 11363  010A46  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11364  010A48  0100               	movlb	0	; () banked
 11365  010A4A  23D2               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11366  010A4C  0E00               	movlw	0
 11367  010A4E  0100               	movlb	0	; () banked
 11368  010A50  23D3               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11369  010A52  0E00               	movlw	0
 11370  010A54  0100               	movlb	0	; () banked
 11371  010A56  23D4               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11372                           
 11373                           ; BSR set to: 0
 11374  010A58  0100               	movlb	0	; () banked
 11375  010A5A  51C8               	movf	(___flmul@a+1)& (0+255),w,b
 11376  010A5C  0100               	movlb	0	; () banked
 11377  010A5E  03C3               	mulwf	___flmul@b& (0+255),b
 11378  010A60  CFF3 F0DA          	movff	prodl,___flmul@temp
 11379  010A64  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11380                           
 11381                           ; BSR set to: 0
 11382  010A68  0100               	movlb	0	; () banked
 11383  010A6A  51DA               	movf	___flmul@temp& (0+255),w,b
 11384  010A6C  0100               	movlb	0	; () banked
 11385  010A6E  27D1               	addwf	___flmul@grs& (0+255),f,b
 11386  010A70  0100               	movlb	0	; () banked
 11387  010A72  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11388  010A74  0100               	movlb	0	; () banked
 11389  010A76  23D2               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11390  010A78  0E00               	movlw	0
 11391  010A7A  0100               	movlb	0	; () banked
 11392  010A7C  23D3               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11393  010A7E  0E00               	movlw	0
 11394  010A80  0100               	movlb	0	; () banked
 11395  010A82  23D4               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11396                           
 11397                           ; BSR set to: 0
 11398  010A84  C0D3  F0D4         	movff	___flmul@grs+2,___flmul@grs+3
 11399  010A88  C0D2  F0D3         	movff	___flmul@grs+1,___flmul@grs+2
 11400  010A8C  C0D1  F0D2         	movff	___flmul@grs,___flmul@grs+1
 11401  010A90  0100               	movlb	0	; () banked
 11402  010A92  6BD1               	clrf	___flmul@grs& (0+255),b
 11403  010A94  0100               	movlb	0	; () banked
 11404  010A96  51C7               	movf	___flmul@a& (0+255),w,b
 11405  010A98  0100               	movlb	0	; () banked
 11406  010A9A  03C3               	mulwf	___flmul@b& (0+255),b
 11407  010A9C  CFF3 F0DA          	movff	prodl,___flmul@temp
 11408  010AA0  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11409                           
 11410                           ; BSR set to: 0
 11411  010AA4  0100               	movlb	0	; () banked
 11412  010AA6  51DA               	movf	___flmul@temp& (0+255),w,b
 11413  010AA8  0100               	movlb	0	; () banked
 11414  010AAA  27D1               	addwf	___flmul@grs& (0+255),f,b
 11415  010AAC  0100               	movlb	0	; () banked
 11416  010AAE  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11417  010AB0  0100               	movlb	0	; () banked
 11418  010AB2  23D2               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11419  010AB4  0E00               	movlw	0
 11420  010AB6  0100               	movlb	0	; () banked
 11421  010AB8  23D3               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11422  010ABA  0E00               	movlw	0
 11423  010ABC  0100               	movlb	0	; () banked
 11424  010ABE  23D4               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11425                           
 11426                           ; BSR set to: 0
 11427  010AC0  0100               	movlb	0	; () banked
 11428  010AC2  51C9               	movf	(___flmul@a+2)& (0+255),w,b
 11429  010AC4  0100               	movlb	0	; () banked
 11430  010AC6  03C4               	mulwf	(___flmul@b+1)& (0+255),b
 11431  010AC8  CFF3 F0DA          	movff	prodl,___flmul@temp
 11432  010ACC  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11433  010AD0  0100               	movlb	0	; () banked
 11434  010AD2  51DA               	movf	___flmul@temp& (0+255),w,b
 11435  010AD4  0100               	movlb	0	; () banked
 11436  010AD6  27D6               	addwf	___flmul@prod& (0+255),f,b
 11437  010AD8  0100               	movlb	0	; () banked
 11438  010ADA  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11439  010ADC  0100               	movlb	0	; () banked
 11440  010ADE  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11441  010AE0  0E00               	movlw	0
 11442  010AE2  0100               	movlb	0	; () banked
 11443  010AE4  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11444  010AE6  0E00               	movlw	0
 11445  010AE8  0100               	movlb	0	; () banked
 11446  010AEA  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11447                           
 11448                           ; BSR set to: 0
 11449  010AEC  0100               	movlb	0	; () banked
 11450  010AEE  51C8               	movf	(___flmul@a+1)& (0+255),w,b
 11451  010AF0  0100               	movlb	0	; () banked
 11452  010AF2  03C5               	mulwf	(___flmul@b+2)& (0+255),b
 11453  010AF4  CFF3 F0DA          	movff	prodl,___flmul@temp
 11454  010AF8  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11455                           
 11456                           ; BSR set to: 0
 11457  010AFC  0100               	movlb	0	; () banked
 11458  010AFE  51DA               	movf	___flmul@temp& (0+255),w,b
 11459  010B00  0100               	movlb	0	; () banked
 11460  010B02  27D6               	addwf	___flmul@prod& (0+255),f,b
 11461  010B04  0100               	movlb	0	; () banked
 11462  010B06  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11463  010B08  0100               	movlb	0	; () banked
 11464  010B0A  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11465  010B0C  0E00               	movlw	0
 11466  010B0E  0100               	movlb	0	; () banked
 11467  010B10  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11468  010B12  0E00               	movlw	0
 11469  010B14  0100               	movlb	0	; () banked
 11470  010B16  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11471  010B18  0100               	movlb	0	; () banked
 11472  010B1A  51C9               	movf	(___flmul@a+2)& (0+255),w,b
 11473  010B1C  0100               	movlb	0	; () banked
 11474  010B1E  03C5               	mulwf	(___flmul@b+2)& (0+255),b
 11475  010B20  CFF3 F0DA          	movff	prodl,___flmul@temp
 11476  010B24  CFF4 F0DB          	movff	prodh,___flmul@temp+1
 11477                           
 11478                           ; BSR set to: 0
 11479  010B28  0100               	movlb	0	; () banked
 11480  010B2A  51DA               	movf	___flmul@temp& (0+255),w,b
 11481  010B2C  0100               	movlb	0	; () banked
 11482  010B2E  6FCB               	movwf	??___flmul& (0+255),b
 11483  010B30  0100               	movlb	0	; () banked
 11484  010B32  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11485  010B34  0100               	movlb	0	; () banked
 11486  010B36  6FCC               	movwf	(??___flmul+1)& (0+255),b
 11487  010B38  0100               	movlb	0	; () banked
 11488  010B3A  6BCD               	clrf	(??___flmul+2)& (0+255),b
 11489  010B3C  0100               	movlb	0	; () banked
 11490  010B3E  6BCE               	clrf	(??___flmul+3)& (0+255),b
 11491  010B40  C0CD  F0CE         	movff	??___flmul+2,??___flmul+3
 11492  010B44  C0CC  F0CD         	movff	??___flmul+1,??___flmul+2
 11493  010B48  C0CB  F0CC         	movff	??___flmul,??___flmul+1
 11494  010B4C  0100               	movlb	0	; () banked
 11495  010B4E  6BCB               	clrf	??___flmul& (0+255),b
 11496  010B50  0100               	movlb	0	; () banked
 11497  010B52  51CB               	movf	??___flmul& (0+255),w,b
 11498  010B54  0100               	movlb	0	; () banked
 11499  010B56  27D6               	addwf	___flmul@prod& (0+255),f,b
 11500  010B58  0100               	movlb	0	; () banked
 11501  010B5A  51CC               	movf	(??___flmul+1)& (0+255),w,b
 11502  010B5C  0100               	movlb	0	; () banked
 11503  010B5E  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11504  010B60  0100               	movlb	0	; () banked
 11505  010B62  51CD               	movf	(??___flmul+2)& (0+255),w,b
 11506  010B64  0100               	movlb	0	; () banked
 11507  010B66  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11508  010B68  0100               	movlb	0	; () banked
 11509  010B6A  51CE               	movf	(??___flmul+3)& (0+255),w,b
 11510  010B6C  0100               	movlb	0	; () banked
 11511  010B6E  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11512                           
 11513                           ; BSR set to: 0
 11514  010B70  C0D1  F0CB         	movff	___flmul@grs,??___flmul
 11515  010B74  C0D2  F0CC         	movff	___flmul@grs+1,??___flmul+1
 11516  010B78  C0D3  F0CD         	movff	___flmul@grs+2,??___flmul+2
 11517  010B7C  C0D4  F0CE         	movff	___flmul@grs+3,??___flmul+3
 11518  010B80  0E19               	movlw	25
 11519  010B82  D006               	goto	u10470
 11520  010B84                     u10475:
 11521  010B84  0100               	movlb	0	; () banked
 11522  010B86  90D8               	bcf	status,0,c
 11523  010B88  33CE               	rrcf	(??___flmul+3)& (0+255),f,b
 11524  010B8A  33CD               	rrcf	(??___flmul+2)& (0+255),f,b
 11525  010B8C  33CC               	rrcf	(??___flmul+1)& (0+255),f,b
 11526  010B8E  33CB               	rrcf	??___flmul& (0+255),f,b
 11527  010B90                     u10470:
 11528  010B90  2EE8               	decfsz	wreg,f,c
 11529  010B92  D7F8               	goto	u10475
 11530  010B94  0100               	movlb	0	; () banked
 11531  010B96  51CB               	movf	??___flmul& (0+255),w,b
 11532  010B98  0100               	movlb	0	; () banked
 11533  010B9A  27D6               	addwf	___flmul@prod& (0+255),f,b
 11534  010B9C  0100               	movlb	0	; () banked
 11535  010B9E  51CC               	movf	(??___flmul+1)& (0+255),w,b
 11536  010BA0  0100               	movlb	0	; () banked
 11537  010BA2  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11538  010BA4  0100               	movlb	0	; () banked
 11539  010BA6  51CD               	movf	(??___flmul+2)& (0+255),w,b
 11540  010BA8  0100               	movlb	0	; () banked
 11541  010BAA  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11542  010BAC  0100               	movlb	0	; () banked
 11543  010BAE  51CE               	movf	(??___flmul+3)& (0+255),w,b
 11544  010BB0  0100               	movlb	0	; () banked
 11545  010BB2  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11546                           
 11547                           ; BSR set to: 0
 11548  010BB4  C0D3  F0D4         	movff	___flmul@grs+2,___flmul@grs+3
 11549  010BB8  C0D2  F0D3         	movff	___flmul@grs+1,___flmul@grs+2
 11550  010BBC  C0D1  F0D2         	movff	___flmul@grs,___flmul@grs+1
 11551  010BC0  0100               	movlb	0	; () banked
 11552  010BC2  6BD1               	clrf	___flmul@grs& (0+255),b
 11553                           
 11554                           ; BSR set to: 0
 11555  010BC4  0100               	movlb	0	; () banked
 11556  010BC6  51D0               	movf	___flmul@aexp& (0+255),w,b
 11557  010BC8  C0D5  F0CB         	movff	___flmul@bexp,??___flmul
 11558  010BCC  0100               	movlb	0	; () banked
 11559  010BCE  6BCC               	clrf	(??___flmul+1)& (0+255),b
 11560  010BD0  0100               	movlb	0	; () banked
 11561  010BD2  27CB               	addwf	??___flmul& (0+255),f,b
 11562  010BD4  0E00               	movlw	0
 11563  010BD6  23CC               	addwfc	(??___flmul+1)& (0+255),f,b
 11564  010BD8  0E82               	movlw	130
 11565  010BDA  0100               	movlb	0	; () banked
 11566  010BDC  25CB               	addwf	??___flmul& (0+255),w,b
 11567  010BDE  0100               	movlb	0	; () banked
 11568  010BE0  6FDA               	movwf	___flmul@temp& (0+255),b
 11569  010BE2  0EFF               	movlw	255
 11570  010BE4  0100               	movlb	0	; () banked
 11571  010BE6  21CC               	addwfc	(??___flmul+1)& (0+255),w,b
 11572  010BE8  0100               	movlb	0	; () banked
 11573  010BEA  6FDB               	movwf	(___flmul@temp+1)& (0+255),b
 11574  010BEC  D015               	goto	l3035
 11575  010BEE                     
 11576                           ; BSR set to: 0
 11577                           
 11578                           ; BSR set to: 0
 11579  010BEE  0100               	movlb	0	; () banked
 11580  010BF0  90D8               	bcf	status,0,c
 11581  010BF2  37D6               	rlcf	___flmul@prod& (0+255),f,b
 11582  010BF4  37D7               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11583  010BF6  37D8               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11584  010BF8  37D9               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11585                           
 11586                           ; BSR set to: 0
 11587  010BFA  0100               	movlb	0	; () banked
 11588  010BFC  AFD4               	btfss	(___flmul@grs+3)& (0+255),7,b
 11589  010BFE  D002               	goto	l3037
 11590                           
 11591                           ; BSR set to: 0
 11592  010C00  0100               	movlb	0	; () banked
 11593  010C02  81D6               	bsf	___flmul@prod& (0+255),0,b
 11594  010C04                     l3037:
 11595                           
 11596                           ; BSR set to: 0
 11597  010C04  0100               	movlb	0	; () banked
 11598  010C06  90D8               	bcf	status,0,c
 11599  010C08  37D1               	rlcf	___flmul@grs& (0+255),f,b
 11600  010C0A  37D2               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11601  010C0C  37D3               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11602  010C0E  37D4               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11603  010C10  0100               	movlb	0	; () banked
 11604  010C12  07DA               	decf	___flmul@temp& (0+255),f,b
 11605  010C14  A0D8               	btfss	status,0,c
 11606  010C16  07DB               	decf	(___flmul@temp+1)& (0+255),f,b
 11607  010C18                     l3035:
 11608                           
 11609                           ; BSR set to: 0
 11610                           
 11611                           ; BSR set to: 0
 11612  010C18  0100               	movlb	0	; () banked
 11613  010C1A  AFD8               	btfss	(___flmul@prod+2)& (0+255),7,b
 11614  010C1C  D7E8               	goto	l3036
 11615                           
 11616                           ; BSR set to: 0
 11617                           
 11618                           ; BSR set to: 0
 11619  010C1E  0E00               	movlw	0
 11620  010C20  0100               	movlb	0	; () banked
 11621  010C22  6FD0               	movwf	___flmul@aexp& (0+255),b
 11622                           
 11623                           ; BSR set to: 0
 11624  010C24  0100               	movlb	0	; () banked
 11625  010C26  AFD4               	btfss	(___flmul@grs+3)& (0+255),7,b
 11626  010C28  D024               	goto	l3042
 11627                           
 11628                           ; BSR set to: 0
 11629  010C2A  0EFF               	movlw	255
 11630  010C2C  0100               	movlb	0	; () banked
 11631  010C2E  15D1               	andwf	___flmul@grs& (0+255),w,b
 11632  010C30  0100               	movlb	0	; () banked
 11633  010C32  6FCB               	movwf	??___flmul& (0+255),b
 11634  010C34  0EFF               	movlw	255
 11635  010C36  0100               	movlb	0	; () banked
 11636  010C38  15D2               	andwf	(___flmul@grs+1)& (0+255),w,b
 11637  010C3A  0100               	movlb	0	; () banked
 11638  010C3C  6FCC               	movwf	(??___flmul+1)& (0+255),b
 11639  010C3E  0EFF               	movlw	255
 11640  010C40  0100               	movlb	0	; () banked
 11641  010C42  15D3               	andwf	(___flmul@grs+2)& (0+255),w,b
 11642  010C44  0100               	movlb	0	; () banked
 11643  010C46  6FCD               	movwf	(??___flmul+2)& (0+255),b
 11644  010C48  0E7F               	movlw	127
 11645  010C4A  0100               	movlb	0	; () banked
 11646  010C4C  15D4               	andwf	(___flmul@grs+3)& (0+255),w,b
 11647  010C4E  0100               	movlb	0	; () banked
 11648  010C50  6FCE               	movwf	(??___flmul+3)& (0+255),b
 11649  010C52  0100               	movlb	0	; () banked
 11650  010C54  51CB               	movf	??___flmul& (0+255),w,b
 11651  010C56  0100               	movlb	0	; () banked
 11652  010C58  11CC               	iorwf	(??___flmul+1)& (0+255),w,b
 11653  010C5A  0100               	movlb	0	; () banked
 11654  010C5C  11CD               	iorwf	(??___flmul+2)& (0+255),w,b
 11655  010C5E  0100               	movlb	0	; () banked
 11656  010C60  11CE               	iorwf	(??___flmul+3)& (0+255),w,b
 11657  010C62  A4D8               	btfss	status,2,c
 11658  010C64  D003               	goto	u10520
 11659                           
 11660                           ; BSR set to: 0
 11661                           
 11662                           ; BSR set to: 0
 11663  010C66  0100               	movlb	0	; () banked
 11664  010C68  A1D6               	btfss	___flmul@prod& (0+255),0,b
 11665  010C6A  D003               	goto	l3042
 11666  010C6C                     u10520:
 11667                           
 11668                           ; BSR set to: 0
 11669  010C6C  0E01               	movlw	1
 11670  010C6E  0100               	movlb	0	; () banked
 11671  010C70  6FD0               	movwf	___flmul@aexp& (0+255),b
 11672  010C72                     l3042:
 11673                           
 11674                           ; BSR set to: 0
 11675                           
 11676                           ; BSR set to: 0
 11677                           
 11678                           ; BSR set to: 0
 11679  010C72  0100               	movlb	0	; () banked
 11680  010C74  51D0               	movf	___flmul@aexp& (0+255),w,b
 11681  010C76  0100               	movlb	0	; () banked
 11682  010C78  B4D8               	btfsc	status,2,c
 11683  010C7A  D023               	goto	l3044
 11684                           
 11685                           ; BSR set to: 0
 11686  010C7C  0E01               	movlw	1
 11687  010C7E  0100               	movlb	0	; () banked
 11688  010C80  27D6               	addwf	___flmul@prod& (0+255),f,b
 11689  010C82  0E00               	movlw	0
 11690  010C84  23D7               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11691  010C86  23D8               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11692  010C88  23D9               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11693                           
 11694                           ; BSR set to: 0
 11695  010C8A  0100               	movlb	0	; () banked
 11696  010C8C  A1D9               	btfss	(___flmul@prod+3)& (0+255),0,b
 11697  010C8E  D019               	goto	l3044
 11698                           
 11699                           ; BSR set to: 0
 11700  010C90  C0D6  F0CB         	movff	___flmul@prod,??___flmul
 11701  010C94  C0D7  F0CC         	movff	___flmul@prod+1,??___flmul+1
 11702  010C98  C0D8  F0CD         	movff	___flmul@prod+2,??___flmul+2
 11703  010C9C  C0D9  F0CE         	movff	___flmul@prod+3,??___flmul+3
 11704  010CA0  0100               	movlb	0	; () banked
 11705  010CA2  35CE               	rlcf	(??___flmul+3)& (0+255),w,b
 11706  010CA4  33CE               	rrcf	(??___flmul+3)& (0+255),f,b
 11707  010CA6  33CD               	rrcf	(??___flmul+2)& (0+255),f,b
 11708  010CA8  33CC               	rrcf	(??___flmul+1)& (0+255),f,b
 11709  010CAA  33CB               	rrcf	??___flmul& (0+255),f,b
 11710  010CAC  C0CB  F0D6         	movff	??___flmul,___flmul@prod
 11711  010CB0  C0CC  F0D7         	movff	??___flmul+1,___flmul@prod+1
 11712  010CB4  C0CD  F0D8         	movff	??___flmul+2,___flmul@prod+2
 11713  010CB8  C0CE  F0D9         	movff	??___flmul+3,___flmul@prod+3
 11714                           
 11715                           ; BSR set to: 0
 11716  010CBC  0100               	movlb	0	; () banked
 11717  010CBE  4BDA               	infsnz	___flmul@temp& (0+255),f,b
 11718  010CC0  2BDB               	incf	(___flmul@temp+1)& (0+255),f,b
 11719  010CC2                     l3044:
 11720                           
 11721                           ; BSR set to: 0
 11722                           
 11723                           ; BSR set to: 0
 11724                           
 11725                           ; BSR set to: 0
 11726  010CC2  0100               	movlb	0	; () banked
 11727  010CC4  BFDB               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11728  010CC6  D010               	goto	l3045
 11729  010CC8  0100               	movlb	0	; () banked
 11730  010CCA  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11731  010CCC  E104               	bnz	u10550
 11732  010CCE  0100               	movlb	0	; () banked
 11733  010CD0  29DA               	incf	___flmul@temp& (0+255),w,b
 11734  010CD2  A0D8               	btfss	status,0,c
 11735  010CD4  D009               	goto	l3045
 11736  010CD6                     u10550:
 11737                           
 11738                           ; BSR set to: 0
 11739  010CD6  0E00               	movlw	0
 11740  010CD8  0100               	movlb	0	; () banked
 11741  010CDA  6FD6               	movwf	___flmul@prod& (0+255),b
 11742  010CDC  0E00               	movlw	0
 11743  010CDE  6FD7               	movwf	(___flmul@prod+1)& (0+255),b
 11744  010CE0  0E80               	movlw	128
 11745  010CE2  6FD8               	movwf	(___flmul@prod+2)& (0+255),b
 11746  010CE4  0E7F               	movlw	127
 11747  010CE6  D02B               	goto	L5
 11748  010CE8                     l3045:
 11749                           
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  010CE8  0100               	movlb	0	; () banked
 11754  010CEA  BFDB               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11755  010CEC  D007               	goto	u10560
 11756  010CEE  0100               	movlb	0	; () banked
 11757  010CF0  51DB               	movf	(___flmul@temp+1)& (0+255),w,b
 11758  010CF2  E111               	bnz	l3047
 11759  010CF4  0100               	movlb	0	; () banked
 11760  010CF6  05DA               	decf	___flmul@temp& (0+255),w,b
 11761  010CF8  B0D8               	btfsc	status,0,c
 11762  010CFA  D00D               	goto	l3047
 11763  010CFC                     u10560:
 11764                           
 11765                           ; BSR set to: 0
 11766  010CFC  0E00               	movlw	0
 11767  010CFE  0100               	movlb	0	; () banked
 11768  010D00  6FD6               	movwf	___flmul@prod& (0+255),b
 11769  010D02  0E00               	movlw	0
 11770  010D04  6FD7               	movwf	(___flmul@prod+1)& (0+255),b
 11771  010D06  0E00               	movlw	0
 11772  010D08  6FD8               	movwf	(___flmul@prod+2)& (0+255),b
 11773  010D0A  0E00               	movlw	0
 11774  010D0C  6FD9               	movwf	(___flmul@prod+3)& (0+255),b
 11775  010D0E  0E00               	movlw	0
 11776  010D10  0100               	movlb	0	; () banked
 11777  010D12  6FCF               	movwf	___flmul@sign& (0+255),b
 11778  010D14  D015               	goto	l3048
 11779  010D16                     l3047:
 11780                           
 11781                           ; BSR set to: 0
 11782  010D16  C0DA  F0D5         	movff	___flmul@temp,___flmul@bexp
 11783                           
 11784                           ; BSR set to: 0
 11785  010D1A  0EFF               	movlw	255
 11786  010D1C  0100               	movlb	0	; () banked
 11787  010D1E  17D6               	andwf	___flmul@prod& (0+255),f,b
 11788  010D20  0EFF               	movlw	255
 11789  010D22  17D7               	andwf	(___flmul@prod+1)& (0+255),f,b
 11790  010D24  0E7F               	movlw	127
 11791  010D26  17D8               	andwf	(___flmul@prod+2)& (0+255),f,b
 11792  010D28  0E00               	movlw	0
 11793  010D2A  17D9               	andwf	(___flmul@prod+3)& (0+255),f,b
 11794                           
 11795                           ; BSR set to: 0
 11796  010D2C  0100               	movlb	0	; () banked
 11797  010D2E  A1D5               	btfss	___flmul@bexp& (0+255),0,b
 11798  010D30  D002               	goto	l3049
 11799                           
 11800                           ; BSR set to: 0
 11801  010D32  0100               	movlb	0	; () banked
 11802  010D34  8FD8               	bsf	(___flmul@prod+2)& (0+255),7,b
 11803  010D36                     l3049:
 11804                           
 11805                           ; BSR set to: 0
 11806                           
 11807                           ; BSR set to: 0
 11808  010D36  0100               	movlb	0	; () banked
 11809  010D38  90D8               	bcf	status,0,c
 11810  010D3A  31D5               	rrcf	___flmul@bexp& (0+255),w,b
 11811  010D3C  0100               	movlb	0	; () banked
 11812  010D3E                     L5:
 11813  010D3E  6FD9               	movwf	(___flmul@prod+3)& (0+255),b
 11814  010D40                     l3048:
 11815                           
 11816                           ; BSR set to: 0
 11817                           
 11818                           ; BSR set to: 0
 11819                           
 11820                           ; BSR set to: 0
 11821  010D40  0100               	movlb	0	; () banked
 11822  010D42  51CF               	movf	___flmul@sign& (0+255),w,b
 11823  010D44  0100               	movlb	0	; () banked
 11824  010D46  13D9               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11825                           
 11826                           ; BSR set to: 0
 11827  010D48  C0D6  F0C3         	movff	___flmul@prod,?___flmul
 11828  010D4C  C0D7  F0C4         	movff	___flmul@prod+1,?___flmul+1
 11829  010D50  C0D8  F0C5         	movff	___flmul@prod+2,?___flmul+2
 11830  010D54  C0D9  F0C6         	movff	___flmul@prod+3,?___flmul+3
 11831  010D58  0012               	return	
 11832  010D5A                     __end_of___flmul:
 11833                           	opt stack 0
 11834                           tblptru	equ	0xFF8
 11835                           tblptrh	equ	0xFF7
 11836                           tblptrl	equ	0xFF6
 11837                           tablat	equ	0xFF5
 11838                           prodh	equ	0xFF4
 11839                           prodl	equ	0xFF3
 11840                           postinc0	equ	0xFEE
 11841                           wreg	equ	0xFE8
 11842                           postdec1	equ	0xFE5
 11843                           fsr1h	equ	0xFE2
 11844                           fsr1l	equ	0xFE1
 11845                           indf2	equ	0xFDF
 11846                           postinc2	equ	0xFDE
 11847                           postdec2	equ	0xFDD
 11848                           fsr2h	equ	0xFDA
 11849                           fsr2l	equ	0xFD9
 11850                           status	equ	0xFD8
 11851                           
 11852 ;; *************** function ___fldiv *****************
 11853 ;; Defined at:
 11854 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  b               4    0[BANK0 ] unsigned char 
 11857 ;;  a               4    4[BANK0 ] unsigned char 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  grs             4   19[BANK0 ] unsigned long 
 11860 ;;  rem             4   13[BANK0 ] unsigned long 
 11861 ;;  new_exp         2   17[BANK0 ] int 
 11862 ;;  aexp            1   24[BANK0 ] unsigned char 
 11863 ;;  bexp            1   23[BANK0 ] unsigned char 
 11864 ;;  sign            1   12[BANK0 ] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  4    0[BANK0 ] unsigned char 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11874 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;Total ram usage:       25 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    7
 11881 ;; This function calls:
 11882 ;;		Nothing
 11883 ;; This function is called by:
 11884 ;;		_ADC_Voltage
 11885 ;;		_findClosestWall
 11886 ;;		_measureAndDisplayDistance
 11887 ;;		_mode1
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           	psect	text41
 11892  011178                     __ptext41:
 11893                           	opt stack 0
 11894  011178                     ___fldiv:
 11895                           	opt stack 21
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;incstack = 0
 11899  011178  0100               	movlb	0	; () banked
 11900  01117A  51B8               	movf	(___fldiv@b+3)& (0+255),w,b
 11901  01117C  0B80               	andlw	128
 11902  01117E  0100               	movlb	0	; () banked
 11903  011180  6FC1               	movwf	___fldiv@sign& (0+255),b
 11904  011182  0100               	movlb	0	; () banked
 11905  011184  51B8               	movf	(___fldiv@b+3)& (0+255),w,b
 11906  011186  25B8               	addwf	(___fldiv@b+3)& (0+255),w,b
 11907  011188  0100               	movlb	0	; () banked
 11908  01118A  6FCC               	movwf	___fldiv@bexp& (0+255),b
 11909                           
 11910                           ; BSR set to: 0
 11911  01118C  0100               	movlb	0	; () banked
 11912  01118E  AFB7               	btfss	(___fldiv@b+2)& (0+255),7,b
 11913  011190  D002               	goto	l2989
 11914                           
 11915                           ; BSR set to: 0
 11916  011192  0100               	movlb	0	; () banked
 11917  011194  81CC               	bsf	___fldiv@bexp& (0+255),0,b
 11918  011196                     l2989:
 11919                           
 11920                           ; BSR set to: 0
 11921                           
 11922                           ; BSR set to: 0
 11923  011196  0100               	movlb	0	; () banked
 11924  011198  51CC               	movf	___fldiv@bexp& (0+255),w,b
 11925  01119A  0100               	movlb	0	; () banked
 11926  01119C  B4D8               	btfsc	status,2,c
 11927  01119E  D012               	goto	l2990
 11928                           
 11929                           ; BSR set to: 0
 11930  0111A0  0100               	movlb	0	; () banked
 11931  0111A2  29CC               	incf	___fldiv@bexp& (0+255),w,b
 11932  0111A4  A4D8               	btfss	status,2,c
 11933  0111A6  D009               	goto	l2991
 11934                           
 11935                           ; BSR set to: 0
 11936  0111A8  0E00               	movlw	0
 11937  0111AA  0100               	movlb	0	; () banked
 11938  0111AC  6FB5               	movwf	___fldiv@b& (0+255),b
 11939  0111AE  0E00               	movlw	0
 11940  0111B0  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 11941  0111B2  0E00               	movlw	0
 11942  0111B4  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 11943  0111B6  0E00               	movlw	0
 11944  0111B8  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 11945  0111BA                     l2991:
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  0111BA  0100               	movlb	0	; () banked
 11951  0111BC  8FB7               	bsf	(___fldiv@b+2)& (0+255),7,b
 11952                           
 11953                           ; BSR set to: 0
 11954  0111BE  0E00               	movlw	0
 11955  0111C0  0100               	movlb	0	; () banked
 11956  0111C2  D008               	goto	L6
 11957  0111C4                     l2990:
 11958                           
 11959                           ; BSR set to: 0
 11960                           
 11961                           ; BSR set to: 0
 11962  0111C4  0E00               	movlw	0
 11963  0111C6  0100               	movlb	0	; () banked
 11964  0111C8  6FB5               	movwf	___fldiv@b& (0+255),b
 11965  0111CA  0E00               	movlw	0
 11966  0111CC  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 11967  0111CE  0E00               	movlw	0
 11968  0111D0  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 11969  0111D2  0E00               	movlw	0
 11970  0111D4                     L6:
 11971  0111D4  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 11972                           
 11973                           ; BSR set to: 0
 11974                           
 11975                           ; BSR set to: 0
 11976  0111D6  0100               	movlb	0	; () banked
 11977  0111D8  51BC               	movf	(___fldiv@a+3)& (0+255),w,b
 11978  0111DA  0B80               	andlw	128
 11979  0111DC  0100               	movlb	0	; () banked
 11980  0111DE  1BC1               	xorwf	___fldiv@sign& (0+255),f,b
 11981                           
 11982                           ; BSR set to: 0
 11983  0111E0  0100               	movlb	0	; () banked
 11984  0111E2  51BC               	movf	(___fldiv@a+3)& (0+255),w,b
 11985  0111E4  25BC               	addwf	(___fldiv@a+3)& (0+255),w,b
 11986  0111E6  0100               	movlb	0	; () banked
 11987  0111E8  6FCD               	movwf	___fldiv@aexp& (0+255),b
 11988                           
 11989                           ; BSR set to: 0
 11990  0111EA  0100               	movlb	0	; () banked
 11991  0111EC  AFBB               	btfss	(___fldiv@a+2)& (0+255),7,b
 11992  0111EE  D002               	goto	l2993
 11993                           
 11994                           ; BSR set to: 0
 11995  0111F0  0100               	movlb	0	; () banked
 11996  0111F2  81CD               	bsf	___fldiv@aexp& (0+255),0,b
 11997  0111F4                     l2993:
 11998                           
 11999                           ; BSR set to: 0
 12000                           
 12001                           ; BSR set to: 0
 12002  0111F4  0100               	movlb	0	; () banked
 12003  0111F6  51CD               	movf	___fldiv@aexp& (0+255),w,b
 12004  0111F8  0100               	movlb	0	; () banked
 12005  0111FA  B4D8               	btfsc	status,2,c
 12006  0111FC  D012               	goto	l2994
 12007                           
 12008                           ; BSR set to: 0
 12009  0111FE  0100               	movlb	0	; () banked
 12010  011200  29CD               	incf	___fldiv@aexp& (0+255),w,b
 12011  011202  A4D8               	btfss	status,2,c
 12012  011204  D009               	goto	l2995
 12013                           
 12014                           ; BSR set to: 0
 12015  011206  0E00               	movlw	0
 12016  011208  0100               	movlb	0	; () banked
 12017  01120A  6FB9               	movwf	___fldiv@a& (0+255),b
 12018  01120C  0E00               	movlw	0
 12019  01120E  6FBA               	movwf	(___fldiv@a+1)& (0+255),b
 12020  011210  0E00               	movlw	0
 12021  011212  6FBB               	movwf	(___fldiv@a+2)& (0+255),b
 12022  011214  0E00               	movlw	0
 12023  011216  6FBC               	movwf	(___fldiv@a+3)& (0+255),b
 12024  011218                     l2995:
 12025                           
 12026                           ; BSR set to: 0
 12027                           
 12028                           ; BSR set to: 0
 12029  011218  0100               	movlb	0	; () banked
 12030  01121A  8FBB               	bsf	(___fldiv@a+2)& (0+255),7,b
 12031                           
 12032                           ; BSR set to: 0
 12033  01121C  0E00               	movlw	0
 12034  01121E  0100               	movlb	0	; () banked
 12035  011220  D008               	goto	L7
 12036  011222                     l2994:
 12037                           
 12038                           ; BSR set to: 0
 12039                           
 12040                           ; BSR set to: 0
 12041  011222  0E00               	movlw	0
 12042  011224  0100               	movlb	0	; () banked
 12043  011226  6FB9               	movwf	___fldiv@a& (0+255),b
 12044  011228  0E00               	movlw	0
 12045  01122A  6FBA               	movwf	(___fldiv@a+1)& (0+255),b
 12046  01122C  0E00               	movlw	0
 12047  01122E  6FBB               	movwf	(___fldiv@a+2)& (0+255),b
 12048  011230  0E00               	movlw	0
 12049  011232                     L7:
 12050  011232  6FBC               	movwf	(___fldiv@a+3)& (0+255),b
 12051                           
 12052                           ; BSR set to: 0
 12053                           
 12054                           ; BSR set to: 0
 12055  011234  0100               	movlb	0	; () banked
 12056  011236  51B9               	movf	___fldiv@a& (0+255),w,b
 12057  011238  0100               	movlb	0	; () banked
 12058  01123A  11BA               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12059  01123C  0100               	movlb	0	; () banked
 12060  01123E  11BB               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12061  011240  0100               	movlb	0	; () banked
 12062  011242  11BC               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12063  011244  A4D8               	btfss	status,2,c
 12064  011246  D017               	goto	l2997
 12065                           
 12066                           ; BSR set to: 0
 12067  011248  0E00               	movlw	0
 12068  01124A  0100               	movlb	0	; () banked
 12069  01124C  6FB5               	movwf	___fldiv@b& (0+255),b
 12070  01124E  0E00               	movlw	0
 12071  011250  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 12072  011252  0E00               	movlw	0
 12073  011254  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 12074  011256  0E00               	movlw	0
 12075  011258  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12076                           
 12077                           ; BSR set to: 0
 12078  01125A  0100               	movlb	0	; () banked
 12079  01125C  0E80               	movlw	128
 12080  01125E  13B7               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12081  011260  0E7F               	movlw	127
 12082  011262  13B8               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12083                           
 12084                           ; BSR set to: 0
 12085  011264  C0B5  F0B5         	movff	___fldiv@b,?___fldiv
 12086  011268  C0B6  F0B6         	movff	___fldiv@b+1,?___fldiv+1
 12087  01126C  C0B7  F0B7         	movff	___fldiv@b+2,?___fldiv+2
 12088  011270  C0B8  F0B8         	movff	___fldiv@b+3,?___fldiv+3
 12089                           
 12090                           ; BSR set to: 0
 12091  011274  0012               	return	
 12092  011276                     l2997:
 12093                           
 12094                           ; BSR set to: 0
 12095                           
 12096                           ; BSR set to: 0
 12097  011276  0100               	movlb	0	; () banked
 12098  011278  51CC               	movf	___fldiv@bexp& (0+255),w,b
 12099  01127A  0100               	movlb	0	; () banked
 12100  01127C  A4D8               	btfss	status,2,c
 12101  01127E  D012               	goto	l2999
 12102                           
 12103                           ; BSR set to: 0
 12104  011280  0E00               	movlw	0
 12105  011282  0100               	movlb	0	; () banked
 12106  011284  6FB5               	movwf	___fldiv@b& (0+255),b
 12107  011286  0E00               	movlw	0
 12108  011288  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 12109  01128A  0E00               	movlw	0
 12110  01128C  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 12111  01128E  0E00               	movlw	0
 12112  011290  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12113                           
 12114                           ; BSR set to: 0
 12115  011292  C0B5  F0B5         	movff	___fldiv@b,?___fldiv
 12116  011296  C0B6  F0B6         	movff	___fldiv@b+1,?___fldiv+1
 12117  01129A  C0B7  F0B7         	movff	___fldiv@b+2,?___fldiv+2
 12118  01129E  C0B8  F0B8         	movff	___fldiv@b+3,?___fldiv+3
 12119                           
 12120                           ; BSR set to: 0
 12121  0112A2  0012               	return	
 12122  0112A4                     l2999:
 12123                           
 12124                           ; BSR set to: 0
 12125                           
 12126                           ; BSR set to: 0
 12127  0112A4  0100               	movlb	0	; () banked
 12128  0112A6  51CD               	movf	___fldiv@aexp& (0+255),w,b
 12129  0112A8  0100               	movlb	0	; () banked
 12130  0112AA  6FBD               	movwf	??___fldiv& (0+255),b
 12131  0112AC  6BBE               	clrf	(??___fldiv+1)& (0+255),b
 12132  0112AE  0100               	movlb	0	; () banked
 12133  0112B0  1FBD               	comf	??___fldiv& (0+255),f,b
 12134  0112B2  1FBE               	comf	(??___fldiv+1)& (0+255),f,b
 12135  0112B4  4BBD               	infsnz	??___fldiv& (0+255),f,b
 12136  0112B6  2BBE               	incf	(??___fldiv+1)& (0+255),f,b
 12137  0112B8  0100               	movlb	0	; () banked
 12138  0112BA  51CC               	movf	___fldiv@bexp& (0+255),w,b
 12139  0112BC  0100               	movlb	0	; () banked
 12140  0112BE  6FBF               	movwf	(??___fldiv+2)& (0+255),b
 12141  0112C0  6BC0               	clrf	(??___fldiv+3)& (0+255),b
 12142  0112C2  0100               	movlb	0	; () banked
 12143  0112C4  51BD               	movf	??___fldiv& (0+255),w,b
 12144  0112C6  0100               	movlb	0	; () banked
 12145  0112C8  27BF               	addwf	(??___fldiv+2)& (0+255),f,b
 12146  0112CA  0100               	movlb	0	; () banked
 12147  0112CC  51BE               	movf	(??___fldiv+1)& (0+255),w,b
 12148  0112CE  0100               	movlb	0	; () banked
 12149  0112D0  23C0               	addwfc	(??___fldiv+3)& (0+255),f,b
 12150  0112D2  0E7F               	movlw	127
 12151  0112D4  0100               	movlb	0	; () banked
 12152  0112D6  25BF               	addwf	(??___fldiv+2)& (0+255),w,b
 12153  0112D8  0100               	movlb	0	; () banked
 12154  0112DA  6FC6               	movwf	___fldiv@new_exp& (0+255),b
 12155  0112DC  0E00               	movlw	0
 12156  0112DE  0100               	movlb	0	; () banked
 12157  0112E0  21C0               	addwfc	(??___fldiv+3)& (0+255),w,b
 12158  0112E2  0100               	movlb	0	; () banked
 12159  0112E4  6FC7               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12160                           
 12161                           ; BSR set to: 0
 12162  0112E6  C0B5  F0C2         	movff	___fldiv@b,___fldiv@rem
 12163  0112EA  C0B6  F0C3         	movff	___fldiv@b+1,___fldiv@rem+1
 12164  0112EE  C0B7  F0C4         	movff	___fldiv@b+2,___fldiv@rem+2
 12165  0112F2  C0B8  F0C5         	movff	___fldiv@b+3,___fldiv@rem+3
 12166                           
 12167                           ; BSR set to: 0
 12168  0112F6  0E00               	movlw	0
 12169  0112F8  0100               	movlb	0	; () banked
 12170  0112FA  6FB5               	movwf	___fldiv@b& (0+255),b
 12171  0112FC  0E00               	movlw	0
 12172  0112FE  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 12173  011300  0E00               	movlw	0
 12174  011302  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 12175  011304  0E00               	movlw	0
 12176  011306  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12177                           
 12178                           ; BSR set to: 0
 12179  011308  0E00               	movlw	0
 12180  01130A  0100               	movlb	0	; () banked
 12181  01130C  6FC8               	movwf	___fldiv@grs& (0+255),b
 12182  01130E  0E00               	movlw	0
 12183  011310  6FC9               	movwf	(___fldiv@grs+1)& (0+255),b
 12184  011312  0E00               	movlw	0
 12185  011314  6FCA               	movwf	(___fldiv@grs+2)& (0+255),b
 12186  011316  0E00               	movlw	0
 12187  011318  6FCB               	movwf	(___fldiv@grs+3)& (0+255),b
 12188                           
 12189                           ; BSR set to: 0
 12190  01131A  0E00               	movlw	0
 12191  01131C  0100               	movlb	0	; () banked
 12192  01131E  6FCD               	movwf	___fldiv@aexp& (0+255),b
 12193  011320  D042               	goto	l3000
 12194  011322                     
 12195                           ; BSR set to: 0
 12196                           
 12197                           ; BSR set to: 0
 12198  011322  0100               	movlb	0	; () banked
 12199  011324  51CD               	movf	___fldiv@aexp& (0+255),w,b
 12200  011326  0100               	movlb	0	; () banked
 12201  011328  B4D8               	btfsc	status,2,c
 12202  01132A  D017               	goto	l3002
 12203                           
 12204                           ; BSR set to: 0
 12205  01132C  0100               	movlb	0	; () banked
 12206  01132E  90D8               	bcf	status,0,c
 12207  011330  37C2               	rlcf	___fldiv@rem& (0+255),f,b
 12208  011332  37C3               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12209  011334  37C4               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12210  011336  37C5               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12211  011338  0100               	movlb	0	; () banked
 12212  01133A  90D8               	bcf	status,0,c
 12213  01133C  37B5               	rlcf	___fldiv@b& (0+255),f,b
 12214  01133E  37B6               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12215  011340  37B7               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12216  011342  37B8               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12217                           
 12218                           ; BSR set to: 0
 12219  011344  0100               	movlb	0	; () banked
 12220  011346  AFCB               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12221  011348  D002               	goto	l3003
 12222                           
 12223                           ; BSR set to: 0
 12224  01134A  0100               	movlb	0	; () banked
 12225  01134C  81B5               	bsf	___fldiv@b& (0+255),0,b
 12226  01134E                     l3003:
 12227                           
 12228                           ; BSR set to: 0
 12229  01134E  0100               	movlb	0	; () banked
 12230  011350  90D8               	bcf	status,0,c
 12231  011352  37C8               	rlcf	___fldiv@grs& (0+255),f,b
 12232  011354  37C9               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12233  011356  37CA               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12234  011358  37CB               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12235  01135A                     l3002:
 12236                           
 12237                           ; BSR set to: 0
 12238                           
 12239                           ; BSR set to: 0
 12240  01135A  0100               	movlb	0	; () banked
 12241  01135C  51B9               	movf	___fldiv@a& (0+255),w,b
 12242  01135E  0100               	movlb	0	; () banked
 12243  011360  5DC2               	subwf	___fldiv@rem& (0+255),w,b
 12244  011362  0100               	movlb	0	; () banked
 12245  011364  51BA               	movf	(___fldiv@a+1)& (0+255),w,b
 12246  011366  0100               	movlb	0	; () banked
 12247  011368  59C3               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12248  01136A  0100               	movlb	0	; () banked
 12249  01136C  51BB               	movf	(___fldiv@a+2)& (0+255),w,b
 12250  01136E  0100               	movlb	0	; () banked
 12251  011370  59C4               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12252  011372  0100               	movlb	0	; () banked
 12253  011374  51BC               	movf	(___fldiv@a+3)& (0+255),w,b
 12254  011376  0100               	movlb	0	; () banked
 12255  011378  59C5               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12256  01137A  A0D8               	btfss	status,0,c
 12257  01137C  D012               	goto	l3004
 12258                           
 12259                           ; BSR set to: 0
 12260  01137E  0100               	movlb	0	; () banked
 12261  011380  8DCB               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12262                           
 12263                           ; BSR set to: 0
 12264  011382  0100               	movlb	0	; () banked
 12265  011384  51B9               	movf	___fldiv@a& (0+255),w,b
 12266  011386  0100               	movlb	0	; () banked
 12267  011388  5FC2               	subwf	___fldiv@rem& (0+255),f,b
 12268  01138A  0100               	movlb	0	; () banked
 12269  01138C  51BA               	movf	(___fldiv@a+1)& (0+255),w,b
 12270  01138E  0100               	movlb	0	; () banked
 12271  011390  5BC3               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12272  011392  0100               	movlb	0	; () banked
 12273  011394  51BB               	movf	(___fldiv@a+2)& (0+255),w,b
 12274  011396  0100               	movlb	0	; () banked
 12275  011398  5BC4               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12276  01139A  0100               	movlb	0	; () banked
 12277  01139C  51BC               	movf	(___fldiv@a+3)& (0+255),w,b
 12278  01139E  0100               	movlb	0	; () banked
 12279  0113A0  5BC5               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12280  0113A2                     l3004:
 12281                           
 12282                           ; BSR set to: 0
 12283                           
 12284                           ; BSR set to: 0
 12285  0113A2  0100               	movlb	0	; () banked
 12286  0113A4  2BCD               	incf	___fldiv@aexp& (0+255),f,b
 12287  0113A6                     l3000:
 12288                           
 12289                           ; BSR set to: 0
 12290  0113A6  0E19               	movlw	25
 12291  0113A8  0100               	movlb	0	; () banked
 12292  0113AA  65CD               	cpfsgt	___fldiv@aexp& (0+255),b
 12293  0113AC  D7BA               	goto	l3001
 12294                           
 12295                           ; BSR set to: 0
 12296                           
 12297                           ; BSR set to: 0
 12298  0113AE  0100               	movlb	0	; () banked
 12299  0113B0  51C2               	movf	___fldiv@rem& (0+255),w,b
 12300  0113B2  0100               	movlb	0	; () banked
 12301  0113B4  11C3               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12302  0113B6  0100               	movlb	0	; () banked
 12303  0113B8  11C4               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12304  0113BA  0100               	movlb	0	; () banked
 12305  0113BC  11C5               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12306  0113BE  B4D8               	btfsc	status,2,c
 12307  0113C0  D018               	goto	l3007
 12308                           
 12309                           ; BSR set to: 0
 12310  0113C2  0100               	movlb	0	; () banked
 12311  0113C4  81C8               	bsf	___fldiv@grs& (0+255),0,b
 12312                           
 12313                           ; BSR set to: 0
 12314  0113C6  D015               	goto	l3007
 12315  0113C8                     
 12316                           ; BSR set to: 0
 12317                           
 12318                           ; BSR set to: 0
 12319  0113C8  0100               	movlb	0	; () banked
 12320  0113CA  90D8               	bcf	status,0,c
 12321  0113CC  37B5               	rlcf	___fldiv@b& (0+255),f,b
 12322  0113CE  37B6               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12323  0113D0  37B7               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12324  0113D2  37B8               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12325                           
 12326                           ; BSR set to: 0
 12327  0113D4  0100               	movlb	0	; () banked
 12328  0113D6  AFCB               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12329  0113D8  D002               	goto	l3009
 12330                           
 12331                           ; BSR set to: 0
 12332  0113DA  0100               	movlb	0	; () banked
 12333  0113DC  81B5               	bsf	___fldiv@b& (0+255),0,b
 12334  0113DE                     l3009:
 12335                           
 12336                           ; BSR set to: 0
 12337  0113DE  0100               	movlb	0	; () banked
 12338  0113E0  90D8               	bcf	status,0,c
 12339  0113E2  37C8               	rlcf	___fldiv@grs& (0+255),f,b
 12340  0113E4  37C9               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12341  0113E6  37CA               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12342  0113E8  37CB               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12343  0113EA  0100               	movlb	0	; () banked
 12344  0113EC  07C6               	decf	___fldiv@new_exp& (0+255),f,b
 12345  0113EE  A0D8               	btfss	status,0,c
 12346  0113F0  07C7               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12347  0113F2                     l3007:
 12348                           
 12349                           ; BSR set to: 0
 12350                           
 12351                           ; BSR set to: 0
 12352  0113F2  0100               	movlb	0	; () banked
 12353  0113F4  AFB7               	btfss	(___fldiv@b+2)& (0+255),7,b
 12354  0113F6  D7E8               	goto	l3008
 12355                           
 12356                           ; BSR set to: 0
 12357                           
 12358                           ; BSR set to: 0
 12359  0113F8  0E00               	movlw	0
 12360  0113FA  0100               	movlb	0	; () banked
 12361  0113FC  6FCD               	movwf	___fldiv@aexp& (0+255),b
 12362                           
 12363                           ; BSR set to: 0
 12364  0113FE  0100               	movlb	0	; () banked
 12365  011400  AFCB               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12366  011402  D024               	goto	l3014
 12367                           
 12368                           ; BSR set to: 0
 12369  011404  0EFF               	movlw	255
 12370  011406  0100               	movlb	0	; () banked
 12371  011408  15C8               	andwf	___fldiv@grs& (0+255),w,b
 12372  01140A  0100               	movlb	0	; () banked
 12373  01140C  6FBD               	movwf	??___fldiv& (0+255),b
 12374  01140E  0EFF               	movlw	255
 12375  011410  0100               	movlb	0	; () banked
 12376  011412  15C9               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12377  011414  0100               	movlb	0	; () banked
 12378  011416  6FBE               	movwf	(??___fldiv+1)& (0+255),b
 12379  011418  0EFF               	movlw	255
 12380  01141A  0100               	movlb	0	; () banked
 12381  01141C  15CA               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12382  01141E  0100               	movlb	0	; () banked
 12383  011420  6FBF               	movwf	(??___fldiv+2)& (0+255),b
 12384  011422  0E7F               	movlw	127
 12385  011424  0100               	movlb	0	; () banked
 12386  011426  15CB               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12387  011428  0100               	movlb	0	; () banked
 12388  01142A  6FC0               	movwf	(??___fldiv+3)& (0+255),b
 12389  01142C  0100               	movlb	0	; () banked
 12390  01142E  51BD               	movf	??___fldiv& (0+255),w,b
 12391  011430  0100               	movlb	0	; () banked
 12392  011432  11BE               	iorwf	(??___fldiv+1)& (0+255),w,b
 12393  011434  0100               	movlb	0	; () banked
 12394  011436  11BF               	iorwf	(??___fldiv+2)& (0+255),w,b
 12395  011438  0100               	movlb	0	; () banked
 12396  01143A  11C0               	iorwf	(??___fldiv+3)& (0+255),w,b
 12397  01143C  A4D8               	btfss	status,2,c
 12398  01143E  D003               	goto	u10330
 12399                           
 12400                           ; BSR set to: 0
 12401                           
 12402                           ; BSR set to: 0
 12403  011440  0100               	movlb	0	; () banked
 12404  011442  A1B5               	btfss	___fldiv@b& (0+255),0,b
 12405  011444  D003               	goto	l3014
 12406  011446                     u10330:
 12407                           
 12408                           ; BSR set to: 0
 12409  011446  0E01               	movlw	1
 12410  011448  0100               	movlb	0	; () banked
 12411  01144A  6FCD               	movwf	___fldiv@aexp& (0+255),b
 12412  01144C                     l3014:
 12413                           
 12414                           ; BSR set to: 0
 12415                           
 12416                           ; BSR set to: 0
 12417                           
 12418                           ; BSR set to: 0
 12419  01144C  0100               	movlb	0	; () banked
 12420  01144E  51CD               	movf	___fldiv@aexp& (0+255),w,b
 12421  011450  0100               	movlb	0	; () banked
 12422  011452  B4D8               	btfsc	status,2,c
 12423  011454  D023               	goto	l3016
 12424                           
 12425                           ; BSR set to: 0
 12426  011456  0E01               	movlw	1
 12427  011458  0100               	movlb	0	; () banked
 12428  01145A  27B5               	addwf	___fldiv@b& (0+255),f,b
 12429  01145C  0E00               	movlw	0
 12430  01145E  23B6               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12431  011460  23B7               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12432  011462  23B8               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12433                           
 12434                           ; BSR set to: 0
 12435  011464  0100               	movlb	0	; () banked
 12436  011466  A1B8               	btfss	(___fldiv@b+3)& (0+255),0,b
 12437  011468  D019               	goto	l3016
 12438                           
 12439                           ; BSR set to: 0
 12440  01146A  C0B5  F0BD         	movff	___fldiv@b,??___fldiv
 12441  01146E  C0B6  F0BE         	movff	___fldiv@b+1,??___fldiv+1
 12442  011472  C0B7  F0BF         	movff	___fldiv@b+2,??___fldiv+2
 12443  011476  C0B8  F0C0         	movff	___fldiv@b+3,??___fldiv+3
 12444  01147A  0100               	movlb	0	; () banked
 12445  01147C  35C0               	rlcf	(??___fldiv+3)& (0+255),w,b
 12446  01147E  33C0               	rrcf	(??___fldiv+3)& (0+255),f,b
 12447  011480  33BF               	rrcf	(??___fldiv+2)& (0+255),f,b
 12448  011482  33BE               	rrcf	(??___fldiv+1)& (0+255),f,b
 12449  011484  33BD               	rrcf	??___fldiv& (0+255),f,b
 12450  011486  C0BD  F0B5         	movff	??___fldiv,___fldiv@b
 12451  01148A  C0BE  F0B6         	movff	??___fldiv+1,___fldiv@b+1
 12452  01148E  C0BF  F0B7         	movff	??___fldiv+2,___fldiv@b+2
 12453  011492  C0C0  F0B8         	movff	??___fldiv+3,___fldiv@b+3
 12454                           
 12455                           ; BSR set to: 0
 12456  011496  0100               	movlb	0	; () banked
 12457  011498  4BC6               	infsnz	___fldiv@new_exp& (0+255),f,b
 12458  01149A  2BC7               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12459  01149C                     l3016:
 12460                           
 12461                           ; BSR set to: 0
 12462                           
 12463                           ; BSR set to: 0
 12464                           
 12465                           ; BSR set to: 0
 12466  01149C  0100               	movlb	0	; () banked
 12467  01149E  BFC7               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12468  0114A0  D014               	goto	l3017
 12469  0114A2  0100               	movlb	0	; () banked
 12470  0114A4  51C7               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12471  0114A6  E104               	bnz	u10360
 12472  0114A8  0100               	movlb	0	; () banked
 12473  0114AA  29C6               	incf	___fldiv@new_exp& (0+255),w,b
 12474  0114AC  A0D8               	btfss	status,0,c
 12475  0114AE  D00D               	goto	l3017
 12476  0114B0                     u10360:
 12477                           
 12478                           ; BSR set to: 0
 12479  0114B0  0E00               	movlw	0
 12480  0114B2  0100               	movlb	0	; () banked
 12481  0114B4  6FC7               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12482  0114B6  69C6               	setf	___fldiv@new_exp& (0+255),b
 12483  0114B8  0E00               	movlw	0
 12484  0114BA  0100               	movlb	0	; () banked
 12485  0114BC  6FB5               	movwf	___fldiv@b& (0+255),b
 12486  0114BE  0E00               	movlw	0
 12487  0114C0  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 12488  0114C2  0E00               	movlw	0
 12489  0114C4  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 12490  0114C6  0E00               	movlw	0
 12491  0114C8  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12492  0114CA                     l3017:
 12493                           
 12494                           ; BSR set to: 0
 12495                           
 12496                           ; BSR set to: 0
 12497  0114CA  0100               	movlb	0	; () banked
 12498  0114CC  BFC7               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12499  0114CE  D007               	goto	u10370
 12500  0114D0  0100               	movlb	0	; () banked
 12501  0114D2  51C7               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12502  0114D4  E115               	bnz	l13610
 12503  0114D6  0100               	movlb	0	; () banked
 12504  0114D8  05C6               	decf	___fldiv@new_exp& (0+255),w,b
 12505  0114DA  B0D8               	btfsc	status,0,c
 12506  0114DC  D011               	goto	l3018
 12507  0114DE                     u10370:
 12508                           
 12509                           ; BSR set to: 0
 12510  0114DE  0E00               	movlw	0
 12511  0114E0  0100               	movlb	0	; () banked
 12512  0114E2  6FC7               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12513  0114E4  0E00               	movlw	0
 12514  0114E6  6FC6               	movwf	___fldiv@new_exp& (0+255),b
 12515  0114E8  0E00               	movlw	0
 12516  0114EA  0100               	movlb	0	; () banked
 12517  0114EC  6FB5               	movwf	___fldiv@b& (0+255),b
 12518  0114EE  0E00               	movlw	0
 12519  0114F0  6FB6               	movwf	(___fldiv@b+1)& (0+255),b
 12520  0114F2  0E00               	movlw	0
 12521  0114F4  6FB7               	movwf	(___fldiv@b+2)& (0+255),b
 12522  0114F6  0E00               	movlw	0
 12523  0114F8  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12524  0114FA  0E00               	movlw	0
 12525  0114FC  0100               	movlb	0	; () banked
 12526  0114FE  6FC1               	movwf	___fldiv@sign& (0+255),b
 12527  011500                     l3018:
 12528  011500                     l13610:
 12529                           
 12530                           ; BSR set to: 0
 12531  011500  C0C6  F0CC         	movff	___fldiv@new_exp,___fldiv@bexp
 12532                           
 12533                           ; BSR set to: 0
 12534  011504  0100               	movlb	0	; () banked
 12535  011506  A1CC               	btfss	___fldiv@bexp& (0+255),0,b
 12536  011508  D003               	goto	l3019
 12537                           
 12538                           ; BSR set to: 0
 12539  01150A  0100               	movlb	0	; () banked
 12540  01150C  8FB7               	bsf	(___fldiv@b+2)& (0+255),7,b
 12541  01150E  D002               	goto	l3020
 12542  011510                     l3019:
 12543                           
 12544                           ; BSR set to: 0
 12545                           
 12546                           ; BSR set to: 0
 12547  011510  0100               	movlb	0	; () banked
 12548  011512  9FB7               	bcf	(___fldiv@b+2)& (0+255),7,b
 12549  011514                     l3020:
 12550                           
 12551                           ; BSR set to: 0
 12552                           
 12553                           ; BSR set to: 0
 12554  011514  0100               	movlb	0	; () banked
 12555  011516  90D8               	bcf	status,0,c
 12556  011518  31CC               	rrcf	___fldiv@bexp& (0+255),w,b
 12557  01151A  0100               	movlb	0	; () banked
 12558  01151C  6FB8               	movwf	(___fldiv@b+3)& (0+255),b
 12559                           
 12560                           ; BSR set to: 0
 12561  01151E  0100               	movlb	0	; () banked
 12562  011520  51C1               	movf	___fldiv@sign& (0+255),w,b
 12563  011522  0100               	movlb	0	; () banked
 12564  011524  13B8               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12565                           
 12566                           ; BSR set to: 0
 12567  011526  C0B5  F0B5         	movff	___fldiv@b,?___fldiv
 12568  01152A  C0B6  F0B6         	movff	___fldiv@b+1,?___fldiv+1
 12569  01152E  C0B7  F0B7         	movff	___fldiv@b+2,?___fldiv+2
 12570  011532  C0B8  F0B8         	movff	___fldiv@b+3,?___fldiv+3
 12571  011536  0012               	return	
 12572  011538                     __end_of___fldiv:
 12573                           	opt stack 0
 12574                           tblptru	equ	0xFF8
 12575                           tblptrh	equ	0xFF7
 12576                           tblptrl	equ	0xFF6
 12577                           tablat	equ	0xFF5
 12578                           prodh	equ	0xFF4
 12579                           prodl	equ	0xFF3
 12580                           postinc0	equ	0xFEE
 12581                           wreg	equ	0xFE8
 12582                           postdec1	equ	0xFE5
 12583                           fsr1h	equ	0xFE2
 12584                           fsr1l	equ	0xFE1
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           fsr2h	equ	0xFDA
 12589                           fsr2l	equ	0xFD9
 12590                           status	equ	0xFD8
 12591                           
 12592 ;; *************** function _Motor_Speed *****************
 12593 ;; Defined at:
 12594 ;;		line 117 in file "Library/Motor.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 12597 ;;		 -> Stepper(6), 
 12598 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;		None
 12601 ;; Return value:  Size  Location     Type
 12602 ;;                  1    wreg      unsigned char 
 12603 ;; Registers used:
 12604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;Total ram usage:        4 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; Hardware stack levels required when called:    9
 12617 ;; This function calls:
 12618 ;;		_Timer0_Init
 12619 ;; This function is called by:
 12620 ;;		_findClosestWall
 12621 ;;		_mode1
 12622 ;;		_mode4
 12623 ;; This function uses a non-reentrant model
 12624 ;;
 12625                           
 12626                           	psect	text42
 12627  0168CA                     __ptext42:
 12628                           	opt stack 0
 12629  0168CA                     _Motor_Speed:
 12630                           	opt stack 19
 12631                           
 12632                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;incstack = 0
 12636  0168CA  0100               	movlb	0	; () banked
 12637  0168CC  EE20 F002          	lfsr	2,2
 12638  0168D0  51D0               	movf	Motor_Speed@pMotor& (0+255),w,b
 12639  0168D2  26D9               	addwf	fsr2l,f,c
 12640  0168D4  51D1               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 12641  0168D6  22DA               	addwfc	fsr2h,f,c
 12642  0168D8  C0D2  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 12643  0168DC  C0D3  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;Motor.c: 120: Timer0_Init(pFrequency);
 12647  0168E0  C0D2  F0C2         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 12648  0168E4  C0D3  F0C3         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 12649  0168E8  0100               	movlb	0	; () banked
 12650  0168EA  6BC4               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 12651  0168EC  6BC5               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 12652  0168EE  EC86  F09A         	call	_Timer0_Init	;wreg free
 12653  0168F2  0012               	return	
 12654  0168F4                     __end_of_Motor_Speed:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           postinc0	equ	0xFEE
 12663                           wreg	equ	0xFE8
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _Motor_Move *****************
 12675 ;; Defined at:
 12676 ;;		line 51 in file "Library/Motor.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 12679 ;;		 -> Stepper(6), 
 12680 ;;  pDelta          2    5[BANK0 ] short 
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      unsigned char 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;Total ram usage:        6 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    8
 12699 ;; This function calls:
 12700 ;;		_Timer0_Start
 12701 ;; This function is called by:
 12702 ;;		_findClosestWall
 12703 ;;		_mode1
 12704 ;;		_mode4
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text43
 12709  0166D2                     __ptext43:
 12710                           	opt stack 0
 12711  0166D2                     _Motor_Move:
 12712                           	opt stack 20
 12713                           
 12714                           ;Motor.c: 54: lMotor = pMotor;
 12715                           
 12716                           ;incstack = 0
 12717  0166D2  C0B8  F083         	movff	Motor_Move@pMotor,_lMotor
 12718  0166D6  C0B9  F084         	movff	Motor_Move@pMotor+1,_lMotor+1
 12719                           
 12720                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 12721  0166DA  C0B8  FFD9         	movff	Motor_Move@pMotor,fsr2l
 12722  0166DE  C0B9  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 12723  0166E2  50DE               	movf	postinc2,w,c
 12724  0166E4  10DE               	iorwf	postinc2,w,c
 12725  0166E6  A4D8               	btfss	status,2,c
 12726  0166E8  0012               	return	
 12727                           
 12728                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 12729                           
 12730                           ;Motor.c: 59: return 0;
 12731                           ;	Return value of _Motor_Move is never used
 12732  0166EA  C0B8  FFD9         	movff	Motor_Move@pMotor,fsr2l
 12733  0166EE  C0B9  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 12734  0166F2  C0BA  FFDE         	movff	Motor_Move@pDelta,postinc2
 12735  0166F6  C0BB  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 12736                           
 12737                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 12738  0166FA  C066  F0B5         	movff	_lStepFunction,Timer0_Start@pFunction
 12739  0166FE  C067  F0B6         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 12740  016702  C068  F0B7         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 12741  016706  ECA3  F0B4         	call	_Timer0_Start	;wreg free
 12742  01670A  0012               	return	
 12743  01670C                     __end_of_Motor_Move:
 12744                           	opt stack 0
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           postinc0	equ	0xFEE
 12752                           wreg	equ	0xFE8
 12753                           postdec1	equ	0xFE5
 12754                           fsr1h	equ	0xFE2
 12755                           fsr1l	equ	0xFE1
 12756                           indf2	equ	0xFDF
 12757                           postinc2	equ	0xFDE
 12758                           postdec2	equ	0xFDD
 12759                           fsr2h	equ	0xFDA
 12760                           fsr2l	equ	0xFD9
 12761                           status	equ	0xFD8
 12762                           
 12763 ;; *************** function _Timer0_Start *****************
 12764 ;; Defined at:
 12765 ;;		line 75 in file "Library/Timer0.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 12768 ;;		 -> Absolute function(1), Motor_Step(1), 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;		None
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      void 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12780 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12783 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;Total ram usage:        3 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    7
 12787 ;; This function calls:
 12788 ;;		Nothing
 12789 ;; This function is called by:
 12790 ;;		_Motor_Move
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           	psect	text44
 12795  016946                     __ptext44:
 12796                           	opt stack 0
 12797  016946                     _Timer0_Start:
 12798                           	opt stack 20
 12799                           
 12800                           ;Timer0.c: 77: gISR = pFunction;
 12801                           
 12802                           ;incstack = 0
 12803  016946  C0B5  F060         	movff	Timer0_Start@pFunction,_gISR
 12804  01694A  C0B6  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
 12805  01694E  C0B7  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
 12806                           
 12807                           ;Timer0.c: 78: TMR0 = COUNTER;
 12808  016952  C029  FFD6         	movff	_COUNTER,4054	;volatile
 12809  016956  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 12810                           
 12811                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 12812  01695A  50D5               	movf	4053,w,c	;volatile
 12813  01695C  0100               	movlb	0	; () banked
 12814  01695E  1992               	xorwf	_INDEX& (0+255),w,b
 12815  016960  0BF8               	andlw	-8
 12816  016962  1992               	xorwf	_INDEX& (0+255),w,b
 12817  016964  6ED5               	movwf	4053,c	;volatile
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 12821  016966  94F2               	bcf	intcon,2,c	;volatile
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 12825  016968  8AF2               	bsf	intcon,5,c	;volatile
 12826                           
 12827                           ; BSR set to: 0
 12828  01696A  0012               	return		;funcret
 12829  01696C                     __end_of_Timer0_Start:
 12830                           	opt stack 0
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           postinc0	equ	0xFEE
 12839                           wreg	equ	0xFE8
 12840                           postdec1	equ	0xFE5
 12841                           fsr1h	equ	0xFE2
 12842                           fsr1l	equ	0xFE1
 12843                           indf2	equ	0xFDF
 12844                           postinc2	equ	0xFDE
 12845                           postdec2	equ	0xFDD
 12846                           fsr2h	equ	0xFDA
 12847                           fsr2l	equ	0xFD9
 12848                           status	equ	0xFD8
 12849                           
 12850 ;; *************** function _Console_Render *****************
 12851 ;; Defined at:
 12852 ;;		line 377 in file "Library/Console.c"
 12853 ;; Parameters:    Size  Location     Type
 12854 ;;		None
 12855 ;; Auto vars:     Size  Location     Type
 12856 ;;  lCursor         4   38[BANK0 ] struct Point
 12857 ;;  y               1   43[BANK0 ] unsigned char 
 12858 ;;  x               1   42[BANK0 ] unsigned char 
 12859 ;;  temp            1   37[BANK0 ] unsigned char 
 12860 ;;  Temp            2    0        unsigned short 
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  1    wreg      void 
 12863 ;; Registers used:
 12864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;Total ram usage:        9 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:   11
 12877 ;; This function calls:
 12878 ;;		_Console_MakeField
 12879 ;;		_LCD_DrawField
 12880 ;;		_LCD_FillRectangle
 12881 ;; This function is called by:
 12882 ;;		_move_and_rotate
 12883 ;;		_findClosestWall
 12884 ;;		_mode1
 12885 ;;		_mode2
 12886 ;;		_main
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           	psect	text45
 12891  0122A4                     __ptext45:
 12892                           	opt stack 0
 12893  0122A4                     _Console_Render:
 12894                           	opt stack 17
 12895                           
 12896                           ;Console.c: 379: Colour Temp;
 12897                           ;Console.c: 380: if (change)
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;incstack = 0
 12901  0122A4  0100               	movlb	0	; () banked
 12902  0122A6  51FF               	movf	_change& (0+255),w,b
 12903  0122A8  B4D8               	btfsc	status,2,c
 12904  0122AA  0012               	return	
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;Console.c: 381: {
 12908                           ;Console.c: 382: UINT8 x, y, temp;
 12909                           ;Console.c: 383: Point lCursor = {6,6};
 12910  0122AC  C3F2  F0DB         	movff	Console_Render@F6956,Console_Render@lCursor
 12911  0122B0  C3F3  F0DC         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 12912  0122B4  C3F4  F0DD         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 12913  0122B8  C3F5  F0DE         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;Console.c: 385: if (clearall)
 12917  0122BC  0100               	movlb	0	; () banked
 12918  0122BE  5195               	movf	_clearall& (0+255),w,b
 12919  0122C0  B4D8               	btfsc	status,2,c
 12920  0122C2  D005               	goto	l1056
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;Console.c: 386: {
 12924                           ;Console.c: 389: temp = lBufferY;
 12925  0122C4  C093  F0DA         	movff	_lBufferY,Console_Render@temp
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 12929  0122C8  0E0F               	movlw	15
 12930  0122CA  0100               	movlb	0	; () banked
 12931  0122CC  6F93               	movwf	_lBufferY& (0+255),b
 12932  0122CE                     l1056:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;Console.c: 391: }
 12936                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 12937  0122CE  0E00               	movlw	0
 12938  0122D0  0100               	movlb	0	; () banked
 12939  0122D2  6FE0               	movwf	Console_Render@y& (0+255),b
 12940  0122D4  D0DF               	goto	l1057
 12941  0122D6                     
 12942                           ; BSR set to: 0
 12943                           ;Console.c: 394: {
 12944                           ;Console.c: 395: gForecolour = lCBuffer[y];
 12945                           
 12946                           ; BSR set to: 0
 12947  0122D6  0100               	movlb	0	; () banked
 12948  0122D8  51E0               	movf	Console_Render@y& (0+255),w,b
 12949  0122DA  0D02               	mullw	2
 12950  0122DC  0E00               	movlw	low _lCBuffer
 12951  0122DE  24F3               	addwf	prodl,w,c
 12952  0122E0  6ED9               	movwf	fsr2l,c
 12953  0122E2  0E03               	movlw	high _lCBuffer
 12954  0122E4  20F4               	addwfc	prodh,w,c
 12955  0122E6  6EDA               	movwf	fsr2h,c
 12956  0122E8  CFDE F0FD          	movff	postinc2,_gForecolour
 12957  0122EC  CFDD F0FE          	movff	postdec2,_gForecolour+1
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 12961  0122F0  0E00               	movlw	0
 12962  0122F2  0100               	movlb	0	; () banked
 12963  0122F4  6FDF               	movwf	Console_Render@x& (0+255),b
 12964  0122F6                     l14474:
 12965                           
 12966                           ; BSR set to: 0
 12967  0122F6  0E13               	movlw	19
 12968  0122F8  0100               	movlb	0	; () banked
 12969  0122FA  65DF               	cpfsgt	Console_Render@x& (0+255),b
 12970  0122FC  D001               	goto	l1059
 12971  0122FE  D0BE               	goto	u11320
 12972  012300                     l1059:
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;Console.c: 397: {
 12976                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 12977                           
 12978                           ; BSR set to: 0
 12979  012300  0100               	movlb	0	; () banked
 12980  012302  51E0               	movf	Console_Render@y& (0+255),w,b
 12981  012304  0D14               	mullw	20
 12982  012306  0EB4               	movlw	low _lBuffer
 12983  012308  0100               	movlb	0	; () banked
 12984  01230A  6FD8               	movwf	??_Console_Render& (0+255),b
 12985  01230C  0E04               	movlw	high _lBuffer
 12986  01230E  0100               	movlb	0	; () banked
 12987  012310  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 12988  012312  50F3               	movf	prodl,w,c
 12989  012314  0100               	movlb	0	; () banked
 12990  012316  27D8               	addwf	??_Console_Render& (0+255),f,b
 12991  012318  50F4               	movf	prodh,w,c
 12992  01231A  0100               	movlb	0	; () banked
 12993  01231C  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 12994  01231E  0100               	movlb	0	; () banked
 12995  012320  51DF               	movf	Console_Render@x& (0+255),w,b
 12996  012322  0D01               	mullw	1
 12997  012324  50F3               	movf	prodl,w,c
 12998  012326  0100               	movlb	0	; () banked
 12999  012328  25D8               	addwf	??_Console_Render& (0+255),w,b
 13000  01232A  6ED9               	movwf	fsr2l,c
 13001  01232C  50F4               	movf	prodh,w,c
 13002  01232E  0100               	movlb	0	; () banked
 13003  012330  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 13004  012332  6EDA               	movwf	fsr2h,c
 13005  012334  AEDF               	btfss	indf2,7,c
 13006  012336  D09A               	goto	l1063
 13007                           
 13008                           ; BSR set to: 0
 13009                           ;Console.c: 399: {
 13010                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 13011  012338  0100               	movlb	0	; () banked
 13012  01233A  51E0               	movf	Console_Render@y& (0+255),w,b
 13013  01233C  0D14               	mullw	20
 13014  01233E  0EB4               	movlw	low _lBuffer
 13015  012340  0100               	movlb	0	; () banked
 13016  012342  6FD8               	movwf	??_Console_Render& (0+255),b
 13017  012344  0E04               	movlw	high _lBuffer
 13018  012346  0100               	movlb	0	; () banked
 13019  012348  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 13020  01234A  50F3               	movf	prodl,w,c
 13021  01234C  0100               	movlb	0	; () banked
 13022  01234E  27D8               	addwf	??_Console_Render& (0+255),f,b
 13023  012350  50F4               	movf	prodh,w,c
 13024  012352  0100               	movlb	0	; () banked
 13025  012354  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 13026  012356  0100               	movlb	0	; () banked
 13027  012358  51DF               	movf	Console_Render@x& (0+255),w,b
 13028  01235A  0D01               	mullw	1
 13029  01235C  50F3               	movf	prodl,w,c
 13030  01235E  0100               	movlb	0	; () banked
 13031  012360  25D8               	addwf	??_Console_Render& (0+255),w,b
 13032  012362  6ED9               	movwf	fsr2l,c
 13033  012364  50F4               	movf	prodh,w,c
 13034  012366  0100               	movlb	0	; () banked
 13035  012368  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 13036  01236A  6EDA               	movwf	fsr2h,c
 13037  01236C  0E7F               	movlw	127
 13038  01236E  16DF               	andwf	indf2,f,c
 13039                           
 13040                           ;Console.c: 401: if (lBuffer[y][x])
 13041  012370  0100               	movlb	0	; () banked
 13042  012372  51E0               	movf	Console_Render@y& (0+255),w,b
 13043  012374  0D14               	mullw	20
 13044  012376  0EB4               	movlw	low _lBuffer
 13045  012378  0100               	movlb	0	; () banked
 13046  01237A  6FD8               	movwf	??_Console_Render& (0+255),b
 13047  01237C  0E04               	movlw	high _lBuffer
 13048  01237E  0100               	movlb	0	; () banked
 13049  012380  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 13050  012382  50F3               	movf	prodl,w,c
 13051  012384  0100               	movlb	0	; () banked
 13052  012386  27D8               	addwf	??_Console_Render& (0+255),f,b
 13053  012388  50F4               	movf	prodh,w,c
 13054  01238A  0100               	movlb	0	; () banked
 13055  01238C  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 13056  01238E  0100               	movlb	0	; () banked
 13057  012390  51DF               	movf	Console_Render@x& (0+255),w,b
 13058  012392  0D01               	mullw	1
 13059  012394  50F3               	movf	prodl,w,c
 13060  012396  0100               	movlb	0	; () banked
 13061  012398  25D8               	addwf	??_Console_Render& (0+255),w,b
 13062  01239A  6ED9               	movwf	fsr2l,c
 13063  01239C  50F4               	movf	prodh,w,c
 13064  01239E  0100               	movlb	0	; () banked
 13065  0123A0  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 13066  0123A2  6EDA               	movwf	fsr2h,c
 13067  0123A4  50DF               	movf	indf2,w,c
 13068  0123A6  B4D8               	btfsc	status,2,c
 13069  0123A8  D04A               	goto	l1062
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;Console.c: 402: {
 13073                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 13074  0123AA  C087  F0BE         	movff	_gBackcolour,LCD_FillRectangle@pColour
 13075  0123AE  C088  F0BF         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 13076  0123B2  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 13077  0123B6  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 13078  0123BA  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 13079  0123BE  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 13080  0123C2  C3FA  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 13081  0123C6  C3FB  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 13082  0123CA  C3FC  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 13083  0123CE  C3FD  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 13084  0123D2  EC78  F0AC         	call	_LCD_FillRectangle	;wreg free
 13085                           
 13086                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 13087  0123D6  0100               	movlb	0	; () banked
 13088  0123D8  51E0               	movf	Console_Render@y& (0+255),w,b
 13089  0123DA  0D14               	mullw	20
 13090  0123DC  0EB4               	movlw	low _lBuffer
 13091  0123DE  0100               	movlb	0	; () banked
 13092  0123E0  6FD8               	movwf	??_Console_Render& (0+255),b
 13093  0123E2  0E04               	movlw	high _lBuffer
 13094  0123E4  0100               	movlb	0	; () banked
 13095  0123E6  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 13096  0123E8  50F3               	movf	prodl,w,c
 13097  0123EA  0100               	movlb	0	; () banked
 13098  0123EC  27D8               	addwf	??_Console_Render& (0+255),f,b
 13099  0123EE  50F4               	movf	prodh,w,c
 13100  0123F0  0100               	movlb	0	; () banked
 13101  0123F2  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 13102  0123F4  0100               	movlb	0	; () banked
 13103  0123F6  51DF               	movf	Console_Render@x& (0+255),w,b
 13104  0123F8  0D01               	mullw	1
 13105  0123FA  50F3               	movf	prodl,w,c
 13106  0123FC  0100               	movlb	0	; () banked
 13107  0123FE  25D8               	addwf	??_Console_Render& (0+255),w,b
 13108  012400  6ED9               	movwf	fsr2l,c
 13109  012402  50F4               	movf	prodh,w,c
 13110  012404  0100               	movlb	0	; () banked
 13111  012406  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 13112  012408  6EDA               	movwf	fsr2h,c
 13113  01240A  50DF               	movf	indf2,w,c
 13114  01240C  EC73  F0A2         	call	_Console_MakeField
 13115  012410  C0BA  F0C7         	movff	?_Console_MakeField,LCD_DrawField@pField
 13116  012414  C0BB  F0C8         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 13117  012418  C0DB  F0C9         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 13118  01241C  C0DC  F0CA         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 13119  012420  C0DD  F0CB         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 13120  012424  C0DE  F0CC         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 13121  012428  C3FA  F0CD         	movff	_gCharSize,LCD_DrawField@pSize
 13122  01242C  C3FB  F0CE         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 13123  012430  C3FC  F0CF         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 13124  012434  C3FD  F0D0         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 13125  012438  EC18  F0A8         	call	_LCD_DrawField	;wreg free
 13126                           
 13127                           ;Console.c: 405: }
 13128  01243C  D017               	goto	l1063
 13129  01243E                     l1062:
 13130                           
 13131                           ;Console.c: 406: else
 13132                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 13133  01243E  0E00               	movlw	0
 13134  012440  0100               	movlb	0	; () banked
 13135  012442  6FBF               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 13136  012444  0E00               	movlw	0
 13137  012446  6FBE               	movwf	LCD_FillRectangle@pColour& (0+255),b
 13138  012448  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 13139  01244C  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 13140  012450  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 13141  012454  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 13142  012458  C3FA  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 13143  01245C  C3FB  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 13144  012460  C3FC  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 13145  012464  C3FD  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 13146  012468  EC78  F0AC         	call	_LCD_FillRectangle	;wreg free
 13147  01246C                     l1063:
 13148                           
 13149                           ;Console.c: 408: }
 13150                           ;Console.c: 409: lCursor.x += (5 + 1);
 13151  01246C  0E06               	movlw	6
 13152  01246E  0100               	movlb	0	; () banked
 13153  012470  27DB               	addwf	Console_Render@lCursor& (0+255),f,b
 13154  012472  0E00               	movlw	0
 13155  012474  23DC               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 13156                           
 13157                           ; BSR set to: 0
 13158  012476  0100               	movlb	0	; () banked
 13159  012478  2BDF               	incf	Console_Render@x& (0+255),f,b
 13160  01247A  D73D               	goto	l14474
 13161  01247C                     u11320:
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;Console.c: 410: }
 13165                           ;Console.c: 411: lCursor.y += (7 + 1);
 13166                           
 13167                           ; BSR set to: 0
 13168  01247C  0E08               	movlw	8
 13169  01247E  0100               	movlb	0	; () banked
 13170  012480  27DD               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 13171  012482  0E00               	movlw	0
 13172  012484  23DE               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;Console.c: 412: lCursor.x = 6;
 13176  012486  0E00               	movlw	0
 13177  012488  0100               	movlb	0	; () banked
 13178  01248A  6FDC               	movwf	(Console_Render@lCursor+1)& (0+255),b
 13179  01248C  0E06               	movlw	6
 13180  01248E  6FDB               	movwf	Console_Render@lCursor& (0+255),b
 13181                           
 13182                           ; BSR set to: 0
 13183  012490  0100               	movlb	0	; () banked
 13184  012492  2BE0               	incf	Console_Render@y& (0+255),f,b
 13185  012494                     l1057:
 13186                           
 13187                           ; BSR set to: 0
 13188                           
 13189                           ; BSR set to: 0
 13190  012494  0100               	movlb	0	; () banked
 13191  012496  51E0               	movf	Console_Render@y& (0+255),w,b
 13192  012498  0100               	movlb	0	; () banked
 13193  01249A  5D93               	subwf	_lBufferY& (0+255),w,b
 13194  01249C  B0D8               	btfsc	status,0,c
 13195  01249E  D71B               	goto	l1058
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;Console.c: 413: }
 13199                           ;Console.c: 415: if (clearall)
 13200                           
 13201                           ; BSR set to: 0
 13202  0124A0  0100               	movlb	0	; () banked
 13203  0124A2  5195               	movf	_clearall& (0+255),w,b
 13204  0124A4  B4D8               	btfsc	status,2,c
 13205  0124A6  0012               	return	
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;Console.c: 416: {
 13209                           ;Console.c: 417: clearall = 0;
 13210  0124A8  0E00               	movlw	0
 13211  0124AA  0100               	movlb	0	; () banked
 13212  0124AC  6F95               	movwf	_clearall& (0+255),b
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Console.c: 418: lBufferY = temp;
 13216  0124AE  C0DA  F093         	movff	Console_Render@temp,_lBufferY
 13217                           
 13218                           ; BSR set to: 0
 13219  0124B2  0012               	return	
 13220  0124B4                     __end_of_Console_Render:
 13221                           	opt stack 0
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           postdec1	equ	0xFE5
 13232                           fsr1h	equ	0xFE2
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function _LCD_FillRectangle *****************
 13242 ;; Defined at:
 13243 ;;		line 318 in file "Library/LCD.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  pColour         2    9[BANK0 ] unsigned short 
 13246 ;;  pPoint          4   11[BANK0 ] struct Point
 13247 ;;  pSize           4   15[BANK0 ] struct Point
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;  j               1   22[BANK0 ] unsigned char 
 13250 ;;  i               1   21[BANK0 ] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  1    wreg      void 
 13253 ;; Registers used:
 13254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13260 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;Total ram usage:       14 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:   10
 13267 ;; This function calls:
 13268 ;;		_LCD_Word_Write
 13269 ;;		_Set_Addr_Window
 13270 ;; This function is called by:
 13271 ;;		_Console_Render
 13272 ;;		_Console_ClearLine
 13273 ;; This function uses a non-reentrant model
 13274 ;;
 13275                           
 13276                           	psect	text46
 13277  0158F0                     __ptext46:
 13278                           	opt stack 0
 13279  0158F0                     _LCD_FillRectangle:
 13280                           	opt stack 17
 13281                           
 13282                           ;LCD.c: 320: UINT8 i = 0x00;
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;incstack = 0
 13286  0158F0  0E00               	movlw	0
 13287  0158F2  0100               	movlb	0	; () banked
 13288  0158F4  6FCA               	movwf	LCD_FillRectangle@i& (0+255),b
 13289                           
 13290                           ;LCD.c: 321: UINT8 j = 0x00;
 13291  0158F6  0E00               	movlw	0
 13292  0158F8  0100               	movlb	0	; () banked
 13293  0158FA  6FCB               	movwf	LCD_FillRectangle@j& (0+255),b
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 13297  0158FC  C0C2  F0BA         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 13298  015900  0100               	movlb	0	; () banked
 13299  015902  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 13300  015904  0100               	movlb	0	; () banked
 13301  015906  25C4               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 13302  015908  0100               	movlb	0	; () banked
 13303  01590A  6FC8               	movwf	??_LCD_FillRectangle& (0+255),b
 13304  01590C  0100               	movlb	0	; () banked
 13305  01590E  05C8               	decf	??_LCD_FillRectangle& (0+255),w,b
 13306  015910  0100               	movlb	0	; () banked
 13307  015912  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 13308  015914  0100               	movlb	0	; () banked
 13309  015916  51C2               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 13310  015918  0100               	movlb	0	; () banked
 13311  01591A  25C6               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 13312  01591C  0100               	movlb	0	; () banked
 13313  01591E  6FC9               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 13314  015920  0100               	movlb	0	; () banked
 13315  015922  05C9               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 13316  015924  0100               	movlb	0	; () banked
 13317  015926  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 13318  015928  0100               	movlb	0	; () banked
 13319  01592A  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 13320  01592C  EC22  F0A6         	call	_Set_Addr_Window
 13321                           
 13322                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 13323  015930  C0C6  F0CB         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 13324  015934                     l13912:
 13325  015934  0100               	movlb	0	; () banked
 13326  015936  51CB               	movf	LCD_FillRectangle@j& (0+255),w,b
 13327  015938  0100               	movlb	0	; () banked
 13328  01593A  B4D8               	btfsc	status,2,c
 13329  01593C  0012               	return	
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 13333                           
 13334                           ; BSR set to: 0
 13335  01593E  C0C4  F0CA         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 13336  015942                     l13916:
 13337                           
 13338                           ; BSR set to: 0
 13339  015942  0100               	movlb	0	; () banked
 13340  015944  51CA               	movf	LCD_FillRectangle@i& (0+255),w,b
 13341  015946  0100               	movlb	0	; () banked
 13342  015948  B4D8               	btfsc	status,2,c
 13343  01594A  D009               	goto	u10760
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;LCD.c: 333: LCD_Word_Write(pColour);
 13347                           
 13348                           ; BSR set to: 0
 13349                           
 13350                           ; BSR set to: 0
 13351  01594C  C0BE  F0BA         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 13352  015950  C0BF  F0BB         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 13353  015954  EC17  F0B5         	call	_LCD_Word_Write	;wreg free
 13354  015958  0100               	movlb	0	; () banked
 13355  01595A  07CA               	decf	LCD_FillRectangle@i& (0+255),f,b
 13356  01595C  D7F2               	goto	l13916
 13357  01595E                     u10760:
 13358                           
 13359                           ; BSR set to: 0
 13360                           
 13361                           ; BSR set to: 0
 13362  01595E  0100               	movlb	0	; () banked
 13363  015960  07CB               	decf	LCD_FillRectangle@j& (0+255),f,b
 13364  015962  D7E8               	goto	l13912
 13365  015964                     __end_of_LCD_FillRectangle:
 13366                           	opt stack 0
 13367                           tblptru	equ	0xFF8
 13368                           tblptrh	equ	0xFF7
 13369                           tblptrl	equ	0xFF6
 13370                           tablat	equ	0xFF5
 13371                           prodh	equ	0xFF4
 13372                           prodl	equ	0xFF3
 13373                           intcon	equ	0xFF2
 13374                           postinc0	equ	0xFEE
 13375                           wreg	equ	0xFE8
 13376                           postdec1	equ	0xFE5
 13377                           fsr1h	equ	0xFE2
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           fsr2h	equ	0xFDA
 13383                           fsr2l	equ	0xFD9
 13384                           status	equ	0xFD8
 13385                           
 13386 ;; *************** function _LCD_DrawField *****************
 13387 ;; Defined at:
 13388 ;;		line 393 in file "Library/LCD.c"
 13389 ;; Parameters:    Size  Location     Type
 13390 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 13391 ;;		 -> Console_MakeField@Fill(70), 
 13392 ;;  pPoint          4   20[BANK0 ] struct Point
 13393 ;;  pSize           4   24[BANK0 ] struct Point
 13394 ;; Auto vars:     Size  Location     Type
 13395 ;;  count           2   30[BANK0 ] unsigned short 
 13396 ;;  i               1   34[BANK0 ] unsigned char 
 13397 ;;  ymax            1   33[BANK0 ] unsigned char 
 13398 ;;  xmax            1   32[BANK0 ] unsigned char 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13408 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13409 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13411 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13412 ;;Total ram usage:       17 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:   10
 13415 ;; This function calls:
 13416 ;;		_LCD_Word_Write
 13417 ;;		_Set_Addr_Window
 13418 ;;		___wmul
 13419 ;; This function is called by:
 13420 ;;		_Console_Render
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text47
 13425  015030                     __ptext47:
 13426                           	opt stack 0
 13427  015030                     _LCD_DrawField:
 13428                           	opt stack 17
 13429                           
 13430                           ;LCD.c: 396: UINT8 i = 0x00;
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;incstack = 0
 13434  015030  0E00               	movlw	0
 13435  015032  0100               	movlb	0	; () banked
 13436  015034  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 13440  015036  0100               	movlb	0	; () banked
 13441  015038  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 13442  01503A  0100               	movlb	0	; () banked
 13443  01503C  25CD               	addwf	LCD_DrawField@pSize& (0+255),w,b
 13444  01503E  0100               	movlb	0	; () banked
 13445  015040  6FD5               	movwf	LCD_DrawField@xmax& (0+255),b
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 13449  015042  0100               	movlb	0	; () banked
 13450  015044  51CB               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 13451  015046  0100               	movlb	0	; () banked
 13452  015048  25CF               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 13453  01504A  0100               	movlb	0	; () banked
 13454  01504C  6FD6               	movwf	LCD_DrawField@ymax& (0+255),b
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 13458  01504E  C0CF  F0B5         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 13459  015052  C0D0  F0B6         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 13460  015056  C0CD  F0B7         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 13461  01505A  C0CE  F0B8         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 13462  01505E  EC86  F0B3         	call	___wmul	;wreg free
 13463  015062  C0B5  F0D3         	movff	?___wmul,LCD_DrawField@count
 13464  015066  C0B6  F0D4         	movff	?___wmul+1,LCD_DrawField@count+1
 13465                           
 13466                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 13467  01506A  C0CB  F0BA         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 13468  01506E  0100               	movlb	0	; () banked
 13469  015070  05D5               	decf	LCD_DrawField@xmax& (0+255),w,b
 13470  015072  0100               	movlb	0	; () banked
 13471  015074  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 13472  015076  0100               	movlb	0	; () banked
 13473  015078  05D6               	decf	LCD_DrawField@ymax& (0+255),w,b
 13474  01507A  0100               	movlb	0	; () banked
 13475  01507C  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 13476  01507E  0100               	movlb	0	; () banked
 13477  015080  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 13478  015082  EC22  F0A6         	call	_Set_Addr_Window
 13479                           
 13480                           ;LCD.c: 403: for(i = 0; i < count; i++)
 13481  015086  0E00               	movlw	0
 13482  015088  0100               	movlb	0	; () banked
 13483  01508A  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 13484  01508C  D013               	goto	l183
 13485  01508E                     
 13486                           ; BSR set to: 0
 13487                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 13488                           
 13489                           ; BSR set to: 0
 13490  01508E  0100               	movlb	0	; () banked
 13491  015090  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 13492  015092  0D02               	mullw	2
 13493  015094  50F3               	movf	prodl,w,c
 13494  015096  0100               	movlb	0	; () banked
 13495  015098  25C7               	addwf	LCD_DrawField@pField& (0+255),w,b
 13496  01509A  6ED9               	movwf	fsr2l,c
 13497  01509C  50F4               	movf	prodh,w,c
 13498  01509E  0100               	movlb	0	; () banked
 13499  0150A0  21C8               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 13500  0150A2  6EDA               	movwf	fsr2h,c
 13501  0150A4  CFDE F0BA          	movff	postinc2,LCD_Word_Write@value
 13502  0150A8  CFDD F0BB          	movff	postdec2,LCD_Word_Write@value+1
 13503  0150AC  EC17  F0B5         	call	_LCD_Word_Write	;wreg free
 13504  0150B0  0100               	movlb	0	; () banked
 13505  0150B2  2BD7               	incf	LCD_DrawField@i& (0+255),f,b
 13506  0150B4                     l183:
 13507                           
 13508                           ; BSR set to: 0
 13509                           
 13510                           ; BSR set to: 0
 13511  0150B4  0100               	movlb	0	; () banked
 13512  0150B6  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 13513  0150B8  0100               	movlb	0	; () banked
 13514  0150BA  6FD1               	movwf	??_LCD_DrawField& (0+255),b
 13515  0150BC  6BD2               	clrf	(??_LCD_DrawField+1)& (0+255),b
 13516  0150BE  0100               	movlb	0	; () banked
 13517  0150C0  51D3               	movf	LCD_DrawField@count& (0+255),w,b
 13518  0150C2  0100               	movlb	0	; () banked
 13519  0150C4  5DD1               	subwf	??_LCD_DrawField& (0+255),w,b
 13520  0150C6  0100               	movlb	0	; () banked
 13521  0150C8  51D4               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 13522  0150CA  0100               	movlb	0	; () banked
 13523  0150CC  59D2               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 13524  0150CE  B0D8               	btfsc	status,0,c
 13525  0150D0  0012               	return	
 13526  0150D2  D7DD               	goto	l184
 13527  0150D4                     __end_of_LCD_DrawField:
 13528                           	opt stack 0
 13529                           tblptru	equ	0xFF8
 13530                           tblptrh	equ	0xFF7
 13531                           tblptrl	equ	0xFF6
 13532                           tablat	equ	0xFF5
 13533                           prodh	equ	0xFF4
 13534                           prodl	equ	0xFF3
 13535                           intcon	equ	0xFF2
 13536                           postinc0	equ	0xFEE
 13537                           wreg	equ	0xFE8
 13538                           postdec1	equ	0xFE5
 13539                           fsr1h	equ	0xFE2
 13540                           fsr1l	equ	0xFE1
 13541                           indf2	equ	0xFDF
 13542                           postinc2	equ	0xFDE
 13543                           postdec2	equ	0xFDD
 13544                           fsr2h	equ	0xFDA
 13545                           fsr2l	equ	0xFD9
 13546                           status	equ	0xFD8
 13547                           
 13548 ;; *************** function ___wmul *****************
 13549 ;; Defined at:
 13550 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 13551 ;; Parameters:    Size  Location     Type
 13552 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13553 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13554 ;; Auto vars:     Size  Location     Type
 13555 ;;  product         2    4[BANK0 ] unsigned int 
 13556 ;; Return value:  Size  Location     Type
 13557 ;;                  2    0[BANK0 ] unsigned int 
 13558 ;; Registers used:
 13559 ;;		wreg, status,2, status,0, prodl, prodh
 13560 ;; Tracked objects:
 13561 ;;		On entry : 0/0
 13562 ;;		On exit  : 0/0
 13563 ;;		Unchanged: 0/0
 13564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13565 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;Total ram usage:        6 bytes
 13570 ;; Hardware stack levels used:    1
 13571 ;; Hardware stack levels required when called:    7
 13572 ;; This function calls:
 13573 ;;		Nothing
 13574 ;; This function is called by:
 13575 ;;		_LCD_DrawField
 13576 ;;		_move_and_rotate
 13577 ;; This function uses a non-reentrant model
 13578 ;;
 13579                           
 13580                           	psect	text48
 13581  01670C                     __ptext48:
 13582                           	opt stack 0
 13583  01670C                     ___wmul:
 13584                           	opt stack 19
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;incstack = 0
 13588  01670C  0100               	movlb	0	; () banked
 13589  01670E  51B5               	movf	___wmul@multiplier& (0+255),w,b
 13590  016710  0100               	movlb	0	; () banked
 13591  016712  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 13592  016714  CFF3 F0B9          	movff	prodl,___wmul@product
 13593  016718  CFF4 F0BA          	movff	prodh,___wmul@product+1
 13594  01671C  0100               	movlb	0	; () banked
 13595  01671E  51B5               	movf	___wmul@multiplier& (0+255),w,b
 13596  016720  0100               	movlb	0	; () banked
 13597  016722  03B8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13598  016724  50F3               	movf	prodl,w,c
 13599  016726  0100               	movlb	0	; () banked
 13600  016728  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 13601  01672A  0100               	movlb	0	; () banked
 13602  01672C  51B6               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13603  01672E  0100               	movlb	0	; () banked
 13604  016730  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 13605  016732  50F3               	movf	prodl,w,c
 13606  016734  0100               	movlb	0	; () banked
 13607  016736  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 13608                           
 13609                           ; BSR set to: 0
 13610  016738  C0B9  F0B5         	movff	___wmul@product,?___wmul
 13611  01673C  C0BA  F0B6         	movff	___wmul@product+1,?___wmul+1
 13612  016740  0012               	return	
 13613  016742                     __end_of___wmul:
 13614                           	opt stack 0
 13615                           tblptru	equ	0xFF8
 13616                           tblptrh	equ	0xFF7
 13617                           tblptrl	equ	0xFF6
 13618                           tablat	equ	0xFF5
 13619                           prodh	equ	0xFF4
 13620                           prodl	equ	0xFF3
 13621                           intcon	equ	0xFF2
 13622                           postinc0	equ	0xFEE
 13623                           wreg	equ	0xFE8
 13624                           postdec1	equ	0xFE5
 13625                           fsr1h	equ	0xFE2
 13626                           fsr1l	equ	0xFE1
 13627                           indf2	equ	0xFDF
 13628                           postinc2	equ	0xFDE
 13629                           postdec2	equ	0xFDD
 13630                           fsr2h	equ	0xFDA
 13631                           fsr2l	equ	0xFD9
 13632                           status	equ	0xFD8
 13633                           
 13634 ;; *************** function _Console_MakeField *****************
 13635 ;; Defined at:
 13636 ;;		line 435 in file "Library/Console.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  pInput          1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  pInput          1   11[BANK0 ] unsigned char 
 13641 ;;  y               1   17[BANK0 ] unsigned char 
 13642 ;;  x               1   16[BANK0 ] unsigned char 
 13643 ;;  Column          2   12[BANK0 ] PTR struct Byte
 13644 ;;		 -> Font5x7(480), 
 13645 ;;  Index           2    9[BANK0 ] unsigned short 
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  2    5[BANK0 ] PTR unsigned short 
 13648 ;; Registers used:
 13649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13650 ;; Tracked objects:
 13651 ;;		On entry : 0/0
 13652 ;;		On exit  : 0/0
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13655 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;Total ram usage:       13 bytes
 13660 ;; Hardware stack levels used:    1
 13661 ;; Hardware stack levels required when called:    8
 13662 ;; This function calls:
 13663 ;;		_Byte_GetBit
 13664 ;; This function is called by:
 13665 ;;		_Console_Render
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           	psect	text49
 13670  0144E6                     __ptext49:
 13671                           	opt stack 0
 13672  0144E6                     _Console_MakeField:
 13673                           	opt stack 19
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;incstack = 0
 13677                           ;Console_MakeField@pInput stored from wreg
 13678  0144E6  0100               	movlb	0	; () banked
 13679  0144E8  6FC0               	movwf	Console_MakeField@pInput& (0+255),b
 13680                           
 13681                           ;Console.c: 437: static Colour Fill[7][5];
 13682                           ;Console.c: 438: pInput -= 32;
 13683  0144EA  0E20               	movlw	32
 13684  0144EC  0100               	movlb	0	; () banked
 13685  0144EE  5FC0               	subwf	Console_MakeField@pInput& (0+255),f,b
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 13689  0144F0  0100               	movlb	0	; () banked
 13690  0144F2  51C0               	movf	Console_MakeField@pInput& (0+255),w,b
 13691  0144F4  0D05               	mullw	5
 13692  0144F6  CFF3 F0BE          	movff	prodl,Console_MakeField@Index
 13693  0144FA  CFF4 F0BF          	movff	prodh,Console_MakeField@Index+1
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 13697  0144FE  0E6B               	movlw	low _Font5x7
 13698  014500  0100               	movlb	0	; () banked
 13699  014502  25BE               	addwf	Console_MakeField@Index& (0+255),w,b
 13700  014504  0100               	movlb	0	; () banked
 13701  014506  6FC1               	movwf	Console_MakeField@Column& (0+255),b
 13702  014508  0EFD               	movlw	high _Font5x7
 13703  01450A  0100               	movlb	0	; () banked
 13704  01450C  21BF               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 13705  01450E  0100               	movlb	0	; () banked
 13706  014510  6FC2               	movwf	(Console_MakeField@Column+1)& (0+255),b
 13707                           
 13708                           ; BSR set to: 0
 13709                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 13710  014512  0E00               	movlw	0
 13711  014514  0100               	movlb	0	; () banked
 13712  014516  6FC5               	movwf	Console_MakeField@x& (0+255),b
 13713  014518                     l14138:
 13714                           
 13715                           ; BSR set to: 0
 13716  014518  0E04               	movlw	4
 13717  01451A  0100               	movlb	0	; () banked
 13718  01451C  65C5               	cpfsgt	Console_MakeField@x& (0+255),b
 13719  01451E  D001               	goto	l1077
 13720  014520  D043               	goto	u10950
 13721  014522                     l1077:
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;Console.c: 444: {
 13725                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 13726                           
 13727                           ; BSR set to: 0
 13728  014522  0E00               	movlw	0
 13729  014524  0100               	movlb	0	; () banked
 13730  014526  6FC6               	movwf	Console_MakeField@y& (0+255),b
 13731  014528                     l14144:
 13732                           
 13733                           ; BSR set to: 0
 13734  014528  0E06               	movlw	6
 13735  01452A  0100               	movlb	0	; () banked
 13736  01452C  65C6               	cpfsgt	Console_MakeField@y& (0+255),b
 13737  01452E  D001               	goto	l1079
 13738  014530  D035               	goto	u10940
 13739  014532                     l1079:
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 13743                           
 13744                           ; BSR set to: 0
 13745  014532  C0C1  F0B5         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 13746  014536  C0C2  F0B6         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 13747  01453A  C0C6  F0B7         	movff	Console_MakeField@y,Byte_GetBit@pBit
 13748  01453E  ECBC  F0B3         	call	_Byte_GetBit	;wreg free
 13749  014542  0900               	iorlw	0
 13750  014544  A4D8               	btfss	status,2,c
 13751  014546  D005               	goto	l1082
 13752  014548  C087  F0C3         	movff	_gBackcolour,_Console_MakeField$10974
 13753  01454C  C088  F0C4         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 13754  014550  D004               	goto	l1084
 13755  014552                     l1082:
 13756  014552  C0FD  F0C3         	movff	_gForecolour,_Console_MakeField$10974
 13757  014556  C0FE  F0C4         	movff	_gForecolour+1,_Console_MakeField$10974+1
 13758  01455A                     l1084:
 13759  01455A  0100               	movlb	0	; () banked
 13760  01455C  51C6               	movf	Console_MakeField@y& (0+255),w,b
 13761  01455E  0D0A               	mullw	10
 13762  014560  0E64               	movlw	low Console_MakeField@Fill
 13763  014562  0100               	movlb	0	; () banked
 13764  014564  6FBC               	movwf	??_Console_MakeField& (0+255),b
 13765  014566  0E04               	movlw	high Console_MakeField@Fill
 13766  014568  0100               	movlb	0	; () banked
 13767  01456A  6FBD               	movwf	(??_Console_MakeField+1)& (0+255),b
 13768  01456C  50F3               	movf	prodl,w,c
 13769  01456E  0100               	movlb	0	; () banked
 13770  014570  27BC               	addwf	??_Console_MakeField& (0+255),f,b
 13771  014572  50F4               	movf	prodh,w,c
 13772  014574  0100               	movlb	0	; () banked
 13773  014576  23BD               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 13774  014578  0100               	movlb	0	; () banked
 13775  01457A  51C5               	movf	Console_MakeField@x& (0+255),w,b
 13776  01457C  0D02               	mullw	2
 13777  01457E  50F3               	movf	prodl,w,c
 13778  014580  0100               	movlb	0	; () banked
 13779  014582  25BC               	addwf	??_Console_MakeField& (0+255),w,b
 13780  014584  6ED9               	movwf	fsr2l,c
 13781  014586  50F4               	movf	prodh,w,c
 13782  014588  0100               	movlb	0	; () banked
 13783  01458A  21BD               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 13784  01458C  6EDA               	movwf	fsr2h,c
 13785  01458E  C0C3  FFDE         	movff	_Console_MakeField$10974,postinc2
 13786  014592  C0C4  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 13787                           
 13788                           ; BSR set to: 0
 13789  014596  0100               	movlb	0	; () banked
 13790  014598  2BC6               	incf	Console_MakeField@y& (0+255),f,b
 13791  01459A  D7C6               	goto	l14144
 13792  01459C                     u10940:
 13793                           
 13794                           ; BSR set to: 0
 13795                           ;Console.c: 447: Column += 1;
 13796                           
 13797                           ; BSR set to: 0
 13798  01459C  0100               	movlb	0	; () banked
 13799  01459E  4BC1               	infsnz	Console_MakeField@Column& (0+255),f,b
 13800  0145A0  2BC2               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 13801  0145A2  0100               	movlb	0	; () banked
 13802  0145A4  2BC5               	incf	Console_MakeField@x& (0+255),f,b
 13803  0145A6  D7B8               	goto	l14138
 13804  0145A8                     u10950:
 13805                           
 13806                           ; BSR set to: 0
 13807                           ;Console.c: 448: }
 13808                           ;Console.c: 449: return (ColourPtr)Fill;
 13809                           
 13810                           ; BSR set to: 0
 13811  0145A8  0E64               	movlw	low Console_MakeField@Fill
 13812  0145AA  0100               	movlb	0	; () banked
 13813  0145AC  6FBA               	movwf	?_Console_MakeField& (0+255),b
 13814  0145AE  0E04               	movlw	high Console_MakeField@Fill
 13815  0145B0  0100               	movlb	0	; () banked
 13816  0145B2  6FBB               	movwf	(?_Console_MakeField+1)& (0+255),b
 13817  0145B4  0012               	return	
 13818  0145B6                     __end_of_Console_MakeField:
 13819                           	opt stack 0
 13820                           tblptru	equ	0xFF8
 13821                           tblptrh	equ	0xFF7
 13822                           tblptrl	equ	0xFF6
 13823                           tablat	equ	0xFF5
 13824                           prodh	equ	0xFF4
 13825                           prodl	equ	0xFF3
 13826                           intcon	equ	0xFF2
 13827                           postinc0	equ	0xFEE
 13828                           wreg	equ	0xFE8
 13829                           postdec1	equ	0xFE5
 13830                           fsr1h	equ	0xFE2
 13831                           fsr1l	equ	0xFE1
 13832                           indf2	equ	0xFDF
 13833                           postinc2	equ	0xFDE
 13834                           postdec2	equ	0xFDD
 13835                           fsr2h	equ	0xFDA
 13836                           fsr2l	equ	0xFD9
 13837                           status	equ	0xFD8
 13838                           
 13839 ;; *************** function _Byte_GetBit *****************
 13840 ;; Defined at:
 13841 ;;		line 38 in file "Library/Types.c"
 13842 ;; Parameters:    Size  Location     Type
 13843 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13844 ;;		 -> Font5x7(480), 
 13845 ;;  pBit            1    2[BANK0 ] unsigned char 
 13846 ;; Auto vars:     Size  Location     Type
 13847 ;;  Output          1    4[BANK0 ] unsigned char 
 13848 ;; Return value:  Size  Location     Type
 13849 ;;                  1    wreg      unsigned char 
 13850 ;; Registers used:
 13851 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13852 ;; Tracked objects:
 13853 ;;		On entry : 0/0
 13854 ;;		On exit  : 0/0
 13855 ;;		Unchanged: 0/0
 13856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13857 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13861 ;;Total ram usage:        5 bytes
 13862 ;; Hardware stack levels used:    1
 13863 ;; Hardware stack levels required when called:    7
 13864 ;; This function calls:
 13865 ;;		Nothing
 13866 ;; This function is called by:
 13867 ;;		_Console_MakeField
 13868 ;;		_Word_GetBit
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text50
 13873  016778                     __ptext50:
 13874                           	opt stack 0
 13875  016778                     _Byte_GetBit:
 13876                           	opt stack 19
 13877                           
 13878                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 13879                           
 13880                           ; BSR set to: 0
 13881                           ;incstack = 0
 13882  016778  C0B5  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 13883  01677C  C0B6  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 13884  016780                     	if	0	;tblptru may be non-zero
 13885  016780                     	endif
 13886  016780                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13887  016780  0E00               	movlw	low (__mediumconst shr (0+16))
 13888  016782  6EF8               	movwf	tblptru,c
 13889  016784                     	endif
 13890  016784  0008               	tblrd		*
 13891  016786  CFF5 F0B9          	movff	tablat,Byte_GetBit@Output
 13892                           
 13893                           ;Types.c: 42: Output >>= pBit;
 13894  01678A  0100               	movlb	0	; () banked
 13895  01678C  29B7               	incf	Byte_GetBit@pBit& (0+255),w,b
 13896  01678E  0100               	movlb	0	; () banked
 13897  016790  6FB8               	movwf	??_Byte_GetBit& (0+255),b
 13898  016792  D003               	goto	u9970
 13899  016794                     u9975:
 13900  016794  0100               	movlb	0	; () banked
 13901  016796  90D8               	bcf	status,0,c
 13902  016798  33B9               	rrcf	Byte_GetBit@Output& (0+255),f,b
 13903  01679A                     u9970:
 13904  01679A  0100               	movlb	0	; () banked
 13905  01679C  2FB8               	decfsz	??_Byte_GetBit& (0+255),f,b
 13906  01679E  D7FA               	goto	u9975
 13907                           
 13908                           ;Types.c: 43: Output &= 1;
 13909  0167A0  0E01               	movlw	1
 13910  0167A2  0100               	movlb	0	; () banked
 13911  0167A4  17B9               	andwf	Byte_GetBit@Output& (0+255),f,b
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;Types.c: 44: return Output;
 13915  0167A6  0100               	movlb	0	; () banked
 13916  0167A8  51B9               	movf	Byte_GetBit@Output& (0+255),w,b
 13917  0167AA  0012               	return	
 13918  0167AC                     __end_of_Byte_GetBit:
 13919                           	opt stack 0
 13920                           tblptru	equ	0xFF8
 13921                           tblptrh	equ	0xFF7
 13922                           tblptrl	equ	0xFF6
 13923                           tablat	equ	0xFF5
 13924                           prodh	equ	0xFF4
 13925                           prodl	equ	0xFF3
 13926                           intcon	equ	0xFF2
 13927                           postinc0	equ	0xFEE
 13928                           wreg	equ	0xFE8
 13929                           postdec1	equ	0xFE5
 13930                           fsr1h	equ	0xFE2
 13931                           fsr1l	equ	0xFE1
 13932                           indf2	equ	0xFDF
 13933                           postinc2	equ	0xFDE
 13934                           postdec2	equ	0xFDD
 13935                           fsr2h	equ	0xFDA
 13936                           fsr2l	equ	0xFD9
 13937                           status	equ	0xFD8
 13938                           
 13939 ;; *************** function _init *****************
 13940 ;; Defined at:
 13941 ;;		line 63 in file "main.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;		None
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;		None
 13946 ;; Return value:  Size  Location     Type
 13947 ;;                  1    wreg      void 
 13948 ;; Registers used:
 13949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13950 ;; Tracked objects:
 13951 ;;		On entry : 0/0
 13952 ;;		On exit  : 0/0
 13953 ;;		Unchanged: 0/0
 13954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;Total ram usage:        0 bytes
 13960 ;; Hardware stack levels used:    1
 13961 ;; Hardware stack levels required when called:   17
 13962 ;; This function calls:
 13963 ;;		_ADC_Init
 13964 ;;		_ADC_Start
 13965 ;;		_Console_Init
 13966 ;;		_HMI_Init
 13967 ;;		_ISR_Enable
 13968 ;;		_LCD_Init
 13969 ;;		_MXK_BlockSwitchTo
 13970 ;;		_MXK_Dequeue
 13971 ;;		_MXK_Init
 13972 ;;		_MXK_Release
 13973 ;;		_Motor_Init
 13974 ;;		_delay_ms
 13975 ;;		_eusart_init
 13976 ;;		_irobot_init
 13977 ;;		_irobot_init_song_0
 13978 ;;		_irobot_led_power_on
 13979 ;; This function is called by:
 13980 ;;		_main
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           	psect	text51
 13985  014D98                     __ptext51:
 13986                           	opt stack 0
 13987  014D98                     _init:
 13988                           	opt stack 13
 13989                           
 13990                           ;main.c: 65: MXK_Init();
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;incstack = 0
 13994  014D98  EC5A  F098         	call	_MXK_Init	;wreg free
 13995                           
 13996                           ;main.c: 68: ISR_Enable();
 13997  014D9C  EC7F  F0B6         	call	_ISR_Enable	;wreg free
 13998                           
 13999                           ;main.c: 71: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14000  014DA0  0E01               	movlw	1
 14001  014DA2  ECF0  F0B2         	call	_MXK_BlockSwitchTo
 14002  014DA6  0900               	iorlw	0
 14003  014DA8  B4D8               	btfsc	status,2,c
 14004  014DAA  D00C               	goto	l2318
 14005                           
 14006                           ;main.c: 72: Console_Init();
 14007  014DAC  EC79  F0AA         	call	_Console_Init	;wreg free
 14008                           
 14009                           ;main.c: 73: HMI_Init();
 14010  014DB0  EC5A  F092         	call	_HMI_Init	;wreg free
 14011                           
 14012                           ;main.c: 74: LCD_Init();
 14013  014DB4  EC1A  F099         	call	_LCD_Init	;wreg free
 14014                           
 14015                           ;main.c: 75: if (MXK_Release())
 14016  014DB8  EC7F  F0B5         	call	_MXK_Release	;wreg free
 14017  014DBC  0900               	iorlw	0
 14018  014DBE  A4D8               	btfss	status,2,c
 14019                           
 14020                           ;main.c: 76: MXK_Dequeue();
 14021  014DC0  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
 14022  014DC4                     l2318:
 14023                           
 14024                           ;main.c: 77: }
 14025                           ;main.c: 80: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14026  014DC4  0E08               	movlw	8
 14027  014DC6  ECF0  F0B2         	call	_MXK_BlockSwitchTo
 14028  014DCA  0900               	iorlw	0
 14029  014DCC  B4D8               	btfsc	status,2,c
 14030  014DCE  D013               	goto	l2320
 14031                           
 14032                           ;main.c: 81: Motor_Init(&Stepper, 0b1000);
 14033  014DD0  0EAA               	movlw	low _Stepper
 14034  014DD2  0100               	movlb	0	; () banked
 14035  014DD4  6FE2               	movwf	Motor_Init@pMotor& (0+255),b
 14036  014DD6  0E00               	movlw	high _Stepper
 14037  014DD8  0100               	movlb	0	; () banked
 14038  014DDA  6FE3               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14039  014DDC  0E00               	movlw	0
 14040  014DDE  0100               	movlb	0	; () banked
 14041  014DE0  6FE5               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14042  014DE2  0E08               	movlw	8
 14043  014DE4  6FE4               	movwf	Motor_Init@pAddress& (0+255),b
 14044  014DE6  EC35  F0A1         	call	_Motor_Init	;wreg free
 14045                           
 14046                           ;main.c: 82: if (MXK_Release())
 14047  014DEA  EC7F  F0B5         	call	_MXK_Release	;wreg free
 14048  014DEE  0900               	iorlw	0
 14049  014DF0  A4D8               	btfss	status,2,c
 14050                           
 14051                           ;main.c: 83: MXK_Dequeue();
 14052  014DF2  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
 14053  014DF6                     l2320:
 14054                           
 14055                           ;main.c: 84: }
 14056                           ;main.c: 87: ADC_Init(&ADC_AN0, eADC_Ch0);
 14057  014DF6  0EB0               	movlw	low _ADC_AN0
 14058  014DF8  0100               	movlb	0	; () banked
 14059  014DFA  6FB9               	movwf	ADC_Init@pInput& (0+255),b
 14060  014DFC  0E00               	movlw	high _ADC_AN0
 14061  014DFE  0100               	movlb	0	; () banked
 14062  014E00  6FBA               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14063  014E02  0E00               	movlw	0
 14064  014E04  0100               	movlb	0	; () banked
 14065  014E06  6FBB               	movwf	ADC_Init@pChannel& (0+255),b
 14066  014E08  ECC4  F0AB         	call	_ADC_Init	;wreg free
 14067                           
 14068                           ;main.c: 88: float ADC_Voltage(ADCPtr plnput);
 14069                           ;main.c: 89: ADC_Start(&ADC_AN0);
 14070  014E0C  0EB0               	movlw	low _ADC_AN0
 14071  014E0E  0100               	movlb	0	; () banked
 14072  014E10  6FB7               	movwf	ADC_Start@pInput& (0+255),b
 14073  014E12  0E00               	movlw	high _ADC_AN0
 14074  014E14  0100               	movlb	0	; () banked
 14075  014E16  6FB8               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14076  014E18  EC03  F0AB         	call	_ADC_Start	;wreg free
 14077                           
 14078                           ;main.c: 91: eusart_init();
 14079  014E1C  EC08  F0B5         	call	_eusart_init	;wreg free
 14080                           
 14081                           ;main.c: 92: irobot_init();
 14082  014E20  EC45  F0B6         	call	_irobot_init	;wreg free
 14083                           
 14084                           ;main.c: 94: irobot_led_power_on(0xA);
 14085  014E24  0E0A               	movlw	10
 14086  014E26  EC71  F0B5         	call	_irobot_led_power_on
 14087                           
 14088                           ;main.c: 95: irobot_init_song_0();
 14089  014E2A  ECE9  F0B4         	call	_irobot_init_song_0	;wreg free
 14090                           
 14091                           ;main.c: 96: delay_ms(20);
 14092  014E2E  0E00               	movlw	0
 14093  014E30  0100               	movlb	0	; () banked
 14094  014E32  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 14095  014E34  0E14               	movlw	20
 14096  014E36  6FB5               	movwf	delay_ms@ms& (0+255),b
 14097  014E38  EC39  F0AE         	call	_delay_ms	;wreg free
 14098  014E3C  0012               	return		;funcret
 14099  014E3E                     __end_of_init:
 14100                           	opt stack 0
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           postinc0	equ	0xFEE
 14109                           wreg	equ	0xFE8
 14110                           postdec1	equ	0xFE5
 14111                           fsr1h	equ	0xFE2
 14112                           fsr1l	equ	0xFE1
 14113                           indf2	equ	0xFDF
 14114                           postinc2	equ	0xFDE
 14115                           postdec2	equ	0xFDD
 14116                           fsr2h	equ	0xFDA
 14117                           fsr2l	equ	0xFD9
 14118                           status	equ	0xFD8
 14119                           
 14120 ;; *************** function _irobot_led_power_on *****************
 14121 ;; Defined at:
 14122 ;;		line 334 in file "Library/iRobotSerial.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  powerOnColou    1    wreg     unsigned char 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14127 ;; Return value:  Size  Location     Type
 14128 ;;                  1    wreg      void 
 14129 ;; Registers used:
 14130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14139 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14140 ;;Total ram usage:        1 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    9
 14143 ;; This function calls:
 14144 ;;		_irobot_leds
 14145 ;; This function is called by:
 14146 ;;		_init
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           	psect	text52
 14151  016AE2                     __ptext52:
 14152                           	opt stack 0
 14153  016AE2                     _irobot_led_power_on:
 14154                           	opt stack 20
 14155                           
 14156                           ;incstack = 0
 14157                           ;irobot_led_power_on@powerOnColour stored from wreg
 14158  016AE2  0100               	movlb	0	; () banked
 14159  016AE4  6FC9               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 14160                           
 14161                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 14162  016AE6  0E00               	movlw	0
 14163  016AE8  0100               	movlb	0	; () banked
 14164  016AEA  6FC5               	movwf	irobot_leds@LEDBit& (0+255),b
 14165  016AEC  C0C9  F0C6         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 14166  016AF0  0EFF               	movlw	255
 14167  016AF2  0100               	movlb	0	; () banked
 14168  016AF4  6FC7               	movwf	irobot_leds@powerLuminosity& (0+255),b
 14169  016AF6  0E00               	movlw	0
 14170  016AF8  ECF8  F0AF         	call	_irobot_leds
 14171  016AFC  0012               	return		;funcret
 14172  016AFE                     __end_of_irobot_led_power_on:
 14173                           	opt stack 0
 14174                           tblptru	equ	0xFF8
 14175                           tblptrh	equ	0xFF7
 14176                           tblptrl	equ	0xFF6
 14177                           tablat	equ	0xFF5
 14178                           prodh	equ	0xFF4
 14179                           prodl	equ	0xFF3
 14180                           intcon	equ	0xFF2
 14181                           postinc0	equ	0xFEE
 14182                           wreg	equ	0xFE8
 14183                           postdec1	equ	0xFE5
 14184                           fsr1h	equ	0xFE2
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           fsr2h	equ	0xFDA
 14190                           fsr2l	equ	0xFD9
 14191                           status	equ	0xFD8
 14192                           
 14193 ;; *************** function _irobot_leds *****************
 14194 ;; Defined at:
 14195 ;;		line 259 in file "Library/iRobotSerial.c"
 14196 ;; Parameters:    Size  Location     Type
 14197 ;;  isScript        1    wreg     unsigned char 
 14198 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 14199 ;;  powerColour     1   17[BANK0 ] unsigned char 
 14200 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;  isScript        1   19[BANK0 ] unsigned char 
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  1    wreg      void 
 14205 ;; Registers used:
 14206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14212 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14215 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14216 ;;Total ram usage:        4 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    8
 14219 ;; This function calls:
 14220 ;;		_eusart_putch
 14221 ;;		_load_iRScriptStack
 14222 ;; This function is called by:
 14223 ;;		_irobot_led_power_on
 14224 ;;		_irobot_led_power_off
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           	psect	text53
 14229  015FF0                     __ptext53:
 14230                           	opt stack 0
 14231  015FF0                     _irobot_leds:
 14232                           	opt stack 20
 14233                           
 14234                           ;incstack = 0
 14235                           ;irobot_leds@isScript stored from wreg
 14236  015FF0  0100               	movlb	0	; () banked
 14237  015FF2  6FC8               	movwf	irobot_leds@isScript& (0+255),b
 14238                           
 14239                           ;iRobotSerial.c: 260: if (isScript) {
 14240  015FF4  0100               	movlb	0	; () banked
 14241  015FF6  51C8               	movf	irobot_leds@isScript& (0+255),w,b
 14242  015FF8  0100               	movlb	0	; () banked
 14243  015FFA  B4D8               	btfsc	status,2,c
 14244  015FFC  D015               	goto	l2144
 14245                           
 14246                           ; BSR set to: 0
 14247                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
 14248                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
 14249  015FFE  0E00               	movlw	0
 14250  016000  0100               	movlb	0	; () banked
 14251  016002  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 14252  016004  0E8B               	movlw	139
 14253  016006  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
 14254  016008  C0C5  F0B7         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 14255  01600C  0100               	movlb	0	; () banked
 14256  01600E  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 14257  016010  C0C6  F0B9         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 14258  016014  0100               	movlb	0	; () banked
 14259  016016  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 14260  016018  C0C7  F0BB         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 14261  01601C  0100               	movlb	0	; () banked
 14262  01601E  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 14263  016020  0E04               	movlw	4
 14264  016022  EC04  F0AE         	call	_load_iRScriptStack
 14265                           
 14266                           ;iRobotSerial.c: 263: } else {
 14267  016026  0012               	return	
 14268  016028                     l2144:
 14269                           
 14270                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
 14271  016028  0E8B               	movlw	139
 14272  01602A  EC4C  F0B6         	call	_eusart_putch
 14273                           
 14274                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
 14275  01602E  0100               	movlb	0	; () banked
 14276  016030  51C5               	movf	irobot_leds@LEDBit& (0+255),w,b
 14277  016032  EC4C  F0B6         	call	_eusart_putch
 14278                           
 14279                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
 14280  016036  0100               	movlb	0	; () banked
 14281  016038  51C6               	movf	irobot_leds@powerColour& (0+255),w,b
 14282  01603A  EC4C  F0B6         	call	_eusart_putch
 14283                           
 14284                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
 14285  01603E  0100               	movlb	0	; () banked
 14286  016040  51C7               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 14287  016042  EC4C  F0B6         	call	_eusart_putch
 14288  016046  0012               	return	
 14289  016048                     __end_of_irobot_leds:
 14290                           	opt stack 0
 14291                           tblptru	equ	0xFF8
 14292                           tblptrh	equ	0xFF7
 14293                           tblptrl	equ	0xFF6
 14294                           tablat	equ	0xFF5
 14295                           prodh	equ	0xFF4
 14296                           prodl	equ	0xFF3
 14297                           intcon	equ	0xFF2
 14298                           postinc0	equ	0xFEE
 14299                           wreg	equ	0xFE8
 14300                           postdec1	equ	0xFE5
 14301                           fsr1h	equ	0xFE2
 14302                           fsr1l	equ	0xFE1
 14303                           indf2	equ	0xFDF
 14304                           postinc2	equ	0xFDE
 14305                           postdec2	equ	0xFDD
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8
 14309                           
 14310 ;; *************** function _load_iRScriptStack *****************
 14311 ;; Defined at:
 14312 ;;		line 190 in file "Library/iRobotSerial.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;  bytesToLoad     1    wreg     unsigned char 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 14317 ;;  i               1   15[BANK0 ] unsigned char 
 14318 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 14319 ;;		 -> ?_load_iRScriptStack(1), 
 14320 ;; Return value:  Size  Location     Type
 14321 ;;                  1    wreg      void 
 14322 ;; Registers used:
 14323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14324 ;; Tracked objects:
 14325 ;;		On entry : 0/0
 14326 ;;		On exit  : 0/0
 14327 ;;		Unchanged: 0/0
 14328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14329 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14333 ;;Total ram usage:       16 bytes
 14334 ;; Hardware stack levels used:    1
 14335 ;; Hardware stack levels required when called:    7
 14336 ;; This function calls:
 14337 ;;		Nothing
 14338 ;; This function is called by:
 14339 ;;		_irobot_move
 14340 ;;		_irobot_leds
 14341 ;;		_irobot_angle_wait
 14342 ;;		_irobot_distance_wait
 14343 ;; This function uses a non-reentrant model
 14344 ;;
 14345                           
 14346                           	psect	text54
 14347  015C08                     __ptext54:
 14348                           	opt stack 0
 14349  015C08                     _load_iRScriptStack:
 14350                           	opt stack 19
 14351                           
 14352                           ;incstack = 0
 14353                           ;load_iRScriptStack@bytesToLoad stored from wreg
 14354  015C08  0100               	movlb	0	; () banked
 14355  015C0A  6FC3               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 14356                           
 14357                           ;iRobotSerial.c: 191: va_list loadByte;
 14358                           ;iRobotSerial.c: 192: *loadByte = __va_start();
 14359  015C0C  0EB5               	movlw	low ?_load_iRScriptStack
 14360  015C0E  0100               	movlb	0	; () banked
 14361  015C10  6FC1               	movwf	load_iRScriptStack@loadByte& (0+255),b
 14362  015C12  0E00               	movlw	high ?_load_iRScriptStack
 14363  015C14  0100               	movlb	0	; () banked
 14364  015C16  6FC2               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 14365                           
 14366                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
 14367  015C18  0E00               	movlw	0
 14368  015C1A  0100               	movlb	0	; () banked
 14369  015C1C  6FC4               	movwf	load_iRScriptStack@i& (0+255),b
 14370  015C1E  D01F               	goto	l2118
 14371  015C20                     
 14372                           ; BSR set to: 0
 14373                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 14374                           
 14375                           ; BSR set to: 0
 14376  015C20  C0C1  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 14377  015C24  C0C2  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 14378  015C28  0100               	movlb	0	; () banked
 14379  015C2A  51C4               	movf	load_iRScriptStack@i& (0+255),w,b
 14380  015C2C  C037  F0BF         	movff	_iRScriptIndex,??_load_iRScriptStack
 14381  015C30  0100               	movlb	0	; () banked
 14382  015C32  6BC0               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 14383  015C34  0100               	movlb	0	; () banked
 14384  015C36  27BF               	addwf	??_load_iRScriptStack& (0+255),f,b
 14385  015C38  0E00               	movlw	0
 14386  015C3A  23C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 14387  015C3C  0E00               	movlw	low _iRScriptStack
 14388  015C3E  0100               	movlb	0	; () banked
 14389  015C40  25BF               	addwf	??_load_iRScriptStack& (0+255),w,b
 14390  015C42  6EE1               	movwf	fsr1l,c
 14391  015C44  0E04               	movlw	high _iRScriptStack
 14392  015C46  0100               	movlb	0	; () banked
 14393  015C48  21C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 14394  015C4A  6EE2               	movwf	fsr1h,c
 14395  015C4C  CFDF FFE7          	movff	indf2,indf1
 14396                           
 14397                           ; BSR set to: 0
 14398  015C50  0E02               	movlw	2
 14399  015C52  0100               	movlb	0	; () banked
 14400  015C54  27C1               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 14401  015C56  0E00               	movlw	0
 14402  015C58  23C2               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 14403                           
 14404                           ; BSR set to: 0
 14405  015C5A  0100               	movlb	0	; () banked
 14406  015C5C  2BC4               	incf	load_iRScriptStack@i& (0+255),f,b
 14407  015C5E                     l2118:
 14408                           
 14409                           ; BSR set to: 0
 14410                           
 14411                           ; BSR set to: 0
 14412  015C5E  0100               	movlb	0	; () banked
 14413  015C60  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14414  015C62  0100               	movlb	0	; () banked
 14415  015C64  5DC4               	subwf	load_iRScriptStack@i& (0+255),w,b
 14416  015C66  A0D8               	btfss	status,0,c
 14417  015C68  D7DB               	goto	l2119
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;iRobotSerial.c: 195: }
 14421                           ;iRobotSerial.c: 196: ;
 14422                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
 14423                           
 14424                           ; BSR set to: 0
 14425  015C6A  0100               	movlb	0	; () banked
 14426  015C6C  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14427  015C6E  2637               	addwf	_iRScriptIndex,f,c
 14428                           
 14429                           ; BSR set to: 0
 14430  015C70  0012               	return		;funcret
 14431  015C72                     __end_of_load_iRScriptStack:
 14432                           	opt stack 0
 14433                           tblptru	equ	0xFF8
 14434                           tblptrh	equ	0xFF7
 14435                           tblptrl	equ	0xFF6
 14436                           tablat	equ	0xFF5
 14437                           prodh	equ	0xFF4
 14438                           prodl	equ	0xFF3
 14439                           intcon	equ	0xFF2
 14440                           postinc0	equ	0xFEE
 14441                           wreg	equ	0xFE8
 14442                           indf1	equ	0xFE7
 14443                           postdec1	equ	0xFE5
 14444                           fsr1h	equ	0xFE2
 14445                           fsr1l	equ	0xFE1
 14446                           indf2	equ	0xFDF
 14447                           postinc2	equ	0xFDE
 14448                           postdec2	equ	0xFDD
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _irobot_init_song_0 *****************
 14454 ;; Defined at:
 14455 ;;		line 271 in file "Library/iRobotSerial.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;		None
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;		None
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      void 
 14462 ;; Registers used:
 14463 ;;		wreg, cstack
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;Total ram usage:        0 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; Hardware stack levels required when called:    8
 14476 ;; This function calls:
 14477 ;;		_eusart_putch
 14478 ;; This function is called by:
 14479 ;;		_init
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text55
 14484  0169D2                     __ptext55:
 14485                           	opt stack 0
 14486  0169D2                     _irobot_init_song_0:
 14487                           	opt stack 21
 14488                           
 14489                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
 14490                           
 14491                           ; BSR set to: 0
 14492                           ;incstack = 0
 14493  0169D2  0E8C               	movlw	140
 14494  0169D4  EC4C  F0B6         	call	_eusart_putch
 14495                           
 14496                           ;iRobotSerial.c: 273: eusart_putch(0);
 14497  0169D8  0E00               	movlw	0
 14498  0169DA  EC4C  F0B6         	call	_eusart_putch
 14499                           
 14500                           ;iRobotSerial.c: 274: eusart_putch(1);
 14501  0169DE  0E01               	movlw	1
 14502  0169E0  EC4C  F0B6         	call	_eusart_putch
 14503                           
 14504                           ;iRobotSerial.c: 275: eusart_putch(60);
 14505  0169E4  0E3C               	movlw	60
 14506  0169E6  EC4C  F0B6         	call	_eusart_putch
 14507                           
 14508                           ;iRobotSerial.c: 276: eusart_putch(4);
 14509  0169EA  0E04               	movlw	4
 14510  0169EC  EC4C  F0B6         	call	_eusart_putch
 14511  0169F0  0012               	return		;funcret
 14512  0169F2                     __end_of_irobot_init_song_0:
 14513                           	opt stack 0
 14514                           tblptru	equ	0xFF8
 14515                           tblptrh	equ	0xFF7
 14516                           tblptrl	equ	0xFF6
 14517                           tablat	equ	0xFF5
 14518                           prodh	equ	0xFF4
 14519                           prodl	equ	0xFF3
 14520                           intcon	equ	0xFF2
 14521                           postinc0	equ	0xFEE
 14522                           wreg	equ	0xFE8
 14523                           indf1	equ	0xFE7
 14524                           postdec1	equ	0xFE5
 14525                           fsr1h	equ	0xFE2
 14526                           fsr1l	equ	0xFE1
 14527                           indf2	equ	0xFDF
 14528                           postinc2	equ	0xFDE
 14529                           postdec2	equ	0xFDD
 14530                           fsr2h	equ	0xFDA
 14531                           fsr2l	equ	0xFD9
 14532                           status	equ	0xFD8
 14533                           
 14534 ;; *************** function _irobot_init *****************
 14535 ;; Defined at:
 14536 ;;		line 215 in file "Library/iRobotSerial.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;		None
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;		None
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		wreg, cstack
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;Total ram usage:        0 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    8
 14557 ;; This function calls:
 14558 ;;		_eusart_putch
 14559 ;; This function is called by:
 14560 ;;		_init
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text56
 14565  016C8A                     __ptext56:
 14566                           	opt stack 0
 14567  016C8A                     _irobot_init:
 14568                           	opt stack 21
 14569                           
 14570                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
 14571                           
 14572                           ;incstack = 0
 14573  016C8A  0E80               	movlw	128
 14574  016C8C  EC4C  F0B6         	call	_eusart_putch
 14575                           
 14576                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
 14577  016C90  0E84               	movlw	132
 14578  016C92  EC4C  F0B6         	call	_eusart_putch
 14579  016C96  0012               	return		;funcret
 14580  016C98                     __end_of_irobot_init:
 14581                           	opt stack 0
 14582                           tblptru	equ	0xFF8
 14583                           tblptrh	equ	0xFF7
 14584                           tblptrl	equ	0xFF6
 14585                           tablat	equ	0xFF5
 14586                           prodh	equ	0xFF4
 14587                           prodl	equ	0xFF3
 14588                           intcon	equ	0xFF2
 14589                           postinc0	equ	0xFEE
 14590                           wreg	equ	0xFE8
 14591                           indf1	equ	0xFE7
 14592                           postdec1	equ	0xFE5
 14593                           fsr1h	equ	0xFE2
 14594                           fsr1l	equ	0xFE1
 14595                           indf2	equ	0xFDF
 14596                           postinc2	equ	0xFDE
 14597                           postdec2	equ	0xFDD
 14598                           fsr2h	equ	0xFDA
 14599                           fsr2l	equ	0xFD9
 14600                           status	equ	0xFD8
 14601                           
 14602 ;; *************** function _eusart_putch *****************
 14603 ;; Defined at:
 14604 ;;		line 130 in file "Library/iRobotSerial.c"
 14605 ;; Parameters:    Size  Location     Type
 14606 ;;  eusartSendCh    1    wreg     unsigned char 
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 14609 ;; Return value:  Size  Location     Type
 14610 ;;                  1    wreg      void 
 14611 ;; Registers used:
 14612 ;;		wreg
 14613 ;; Tracked objects:
 14614 ;;		On entry : 0/0
 14615 ;;		On exit  : 0/0
 14616 ;;		Unchanged: 0/0
 14617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14622 ;;Total ram usage:        1 bytes
 14623 ;; Hardware stack levels used:    1
 14624 ;; Hardware stack levels required when called:    7
 14625 ;; This function calls:
 14626 ;;		Nothing
 14627 ;; This function is called by:
 14628 ;;		_irobot_query_and_update
 14629 ;;		_irobot_init
 14630 ;;		_irobot_move
 14631 ;;		_irobot_leds
 14632 ;;		_irobot_init_song_0
 14633 ;;		_irobot_song_play
 14634 ;;		_irobot_script_play
 14635 ;; This function uses a non-reentrant model
 14636 ;;
 14637                           
 14638                           	psect	text57
 14639  016C98                     __ptext57:
 14640                           	opt stack 0
 14641  016C98                     _eusart_putch:
 14642                           	opt stack 20
 14643                           
 14644                           ;incstack = 0
 14645                           ;eusart_putch@eusartSendChar stored from wreg
 14646  016C98  0100               	movlb	0	; () banked
 14647  016C9A  6FB5               	movwf	eusart_putch@eusartSendChar& (0+255),b
 14648  016C9C                     
 14649                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
 14650  016C9C  A2AD               	btfss	4013,1,c	;volatile
 14651  016C9E  D7FE               	goto	l13044
 14652                           
 14653                           ;iRobotSerial.c: 132: };
 14654                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
 14655  016CA0  C0B5  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 14656  016CA4  0012               	return		;funcret
 14657  016CA6                     __end_of_eusart_putch:
 14658                           	opt stack 0
 14659                           tblptru	equ	0xFF8
 14660                           tblptrh	equ	0xFF7
 14661                           tblptrl	equ	0xFF6
 14662                           tablat	equ	0xFF5
 14663                           prodh	equ	0xFF4
 14664                           prodl	equ	0xFF3
 14665                           intcon	equ	0xFF2
 14666                           postinc0	equ	0xFEE
 14667                           wreg	equ	0xFE8
 14668                           indf1	equ	0xFE7
 14669                           postdec1	equ	0xFE5
 14670                           fsr1h	equ	0xFE2
 14671                           fsr1l	equ	0xFE1
 14672                           indf2	equ	0xFDF
 14673                           postinc2	equ	0xFDE
 14674                           postdec2	equ	0xFDD
 14675                           fsr2h	equ	0xFDA
 14676                           fsr2l	equ	0xFD9
 14677                           status	equ	0xFD8
 14678                           
 14679 ;; *************** function _eusart_init *****************
 14680 ;; Defined at:
 14681 ;;		line 113 in file "Library/iRobotSerial.c"
 14682 ;; Parameters:    Size  Location     Type
 14683 ;;		None
 14684 ;; Auto vars:     Size  Location     Type
 14685 ;;		None
 14686 ;; Return value:  Size  Location     Type
 14687 ;;                  1    wreg      void 
 14688 ;; Registers used:
 14689 ;;		wreg, status,2
 14690 ;; Tracked objects:
 14691 ;;		On entry : 0/0
 14692 ;;		On exit  : 0/0
 14693 ;;		Unchanged: 0/0
 14694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14699 ;;Total ram usage:        0 bytes
 14700 ;; Hardware stack levels used:    1
 14701 ;; Hardware stack levels required when called:    7
 14702 ;; This function calls:
 14703 ;;		Nothing
 14704 ;; This function is called by:
 14705 ;;		_init
 14706 ;; This function uses a non-reentrant model
 14707 ;;
 14708                           
 14709                           	psect	text58
 14710  016A10                     __ptext58:
 14711                           	opt stack 0
 14712  016A10                     _eusart_init:
 14713                           	opt stack 22
 14714                           
 14715                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
 14716                           
 14717                           ;incstack = 0
 14718  016A10  9C94               	bcf	3988,6,c	;volatile
 14719                           
 14720                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
 14721  016A12  8E94               	bsf	3988,7,c	;volatile
 14722                           
 14723                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
 14724  016A14  0E24               	movlw	36
 14725  016A16  6EAD               	movwf	4013,c	;volatile
 14726                           
 14727                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
 14728  016A18  0E98               	movlw	152
 14729  016A1A  6EAC               	movwf	4012,c	;volatile
 14730                           
 14731                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
 14732  016A1C  9A7E               	bcf	3966,5,c	;volatile
 14733                           
 14734                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
 14735  016A1E  987E               	bcf	3966,4,c	;volatile
 14736                           
 14737                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
 14738  016A20  927E               	bcf	3966,1,c	;volatile
 14739                           
 14740                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
 14741  016A22  907E               	bcf	3966,0,c	;volatile
 14742                           
 14743                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
 14744  016A24  84AD               	bsf	4013,2,c	;volatile
 14745                           
 14746                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
 14747  016A26  967E               	bcf	3966,3,c	;volatile
 14748                           
 14749                           ;iRobotSerial.c: 127: SPBRG1 = 51;
 14750  016A28  0E33               	movlw	51
 14751  016A2A  6EB0               	movwf	4016,c	;volatile
 14752  016A2C  0012               	return		;funcret
 14753  016A2E                     __end_of_eusart_init:
 14754                           	opt stack 0
 14755                           tblptru	equ	0xFF8
 14756                           tblptrh	equ	0xFF7
 14757                           tblptrl	equ	0xFF6
 14758                           tablat	equ	0xFF5
 14759                           prodh	equ	0xFF4
 14760                           prodl	equ	0xFF3
 14761                           intcon	equ	0xFF2
 14762                           postinc0	equ	0xFEE
 14763                           wreg	equ	0xFE8
 14764                           indf1	equ	0xFE7
 14765                           postdec1	equ	0xFE5
 14766                           fsr1h	equ	0xFE2
 14767                           fsr1l	equ	0xFE1
 14768                           indf2	equ	0xFDF
 14769                           postinc2	equ	0xFDE
 14770                           postdec2	equ	0xFDD
 14771                           fsr2h	equ	0xFDA
 14772                           fsr2l	equ	0xFD9
 14773                           status	equ	0xFD8
 14774                           
 14775 ;; *************** function _Motor_Init *****************
 14776 ;; Defined at:
 14777 ;;		line 26 in file "Library/Motor.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 14780 ;;		 -> Stepper(6), 
 14781 ;;  pAddress        2   47[BANK0 ] unsigned short 
 14782 ;; Auto vars:     Size  Location     Type
 14783 ;;		None
 14784 ;; Return value:  Size  Location     Type
 14785 ;;                  1    wreg      void 
 14786 ;; Registers used:
 14787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14788 ;; Tracked objects:
 14789 ;;		On entry : 0/0
 14790 ;;		On exit  : 0/0
 14791 ;;		Unchanged: 0/0
 14792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;Total ram usage:        4 bytes
 14798 ;; Hardware stack levels used:    1
 14799 ;; Hardware stack levels required when called:   12
 14800 ;; This function calls:
 14801 ;;		_Port_SetPin
 14802 ;;		_Port_SetPinType
 14803 ;;		_Timer0_Init
 14804 ;; This function is called by:
 14805 ;;		_init
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           	psect	text59
 14810  01426A                     __ptext59:
 14811                           	opt stack 0
 14812  01426A                     _Motor_Init:
 14813                           	opt stack 17
 14814                           
 14815                           ;Motor.c: 28: pMotor->mDelta = 0;
 14816                           
 14817                           ;incstack = 0
 14818  01426A  C0E2  FFD9         	movff	Motor_Init@pMotor,fsr2l
 14819  01426E  C0E3  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 14820  014272  0E00               	movlw	0
 14821  014274  6EDE               	movwf	postinc2,c
 14822  014276  0E00               	movlw	0
 14823  014278  6EDD               	movwf	postdec2,c
 14824                           
 14825                           ;Motor.c: 29: pMotor->mFrequency = 0;
 14826  01427A  0100               	movlb	0	; () banked
 14827  01427C  EE20 F002          	lfsr	2,2
 14828  014280  51E2               	movf	Motor_Init@pMotor& (0+255),w,b
 14829  014282  26D9               	addwf	fsr2l,f,c
 14830  014284  51E3               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14831  014286  22DA               	addwfc	fsr2h,f,c
 14832  014288  0E00               	movlw	0
 14833  01428A  6EDE               	movwf	postinc2,c
 14834  01428C  0E00               	movlw	0
 14835  01428E  6EDD               	movwf	postdec2,c
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 14839  014290  0100               	movlb	0	; () banked
 14840  014292  EE20 F004          	lfsr	2,4
 14841  014296  51E2               	movf	Motor_Init@pMotor& (0+255),w,b
 14842  014298  26D9               	addwf	fsr2l,f,c
 14843  01429A  51E3               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14844  01429C  22DA               	addwfc	fsr2h,f,c
 14845  01429E  C0E4  FFDE         	movff	Motor_Init@pAddress,postinc2
 14846  0142A2  C0E5  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 14850  0142A6  0EAC               	movlw	low _PortE
 14851  0142A8  0100               	movlb	0	; () banked
 14852  0142AA  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 14853  0142AC  0E03               	movlw	high _PortE
 14854  0142AE  0100               	movlb	0	; () banked
 14855  0142B0  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14856  0142B2  0E00               	movlw	0
 14857  0142B4  0100               	movlb	0	; () banked
 14858  0142B6  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 14859  0142B8  0E03               	movlw	3
 14860  0142BA  0100               	movlb	0	; () banked
 14861  0142BC  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 14862  0142BE  EC1F  F095         	call	_Port_SetPinType	;wreg free
 14863                           
 14864                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 14865  0142C2  0EAC               	movlw	low _PortE
 14866  0142C4  0100               	movlb	0	; () banked
 14867  0142C6  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 14868  0142C8  0E03               	movlw	high _PortE
 14869  0142CA  0100               	movlb	0	; () banked
 14870  0142CC  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14871  0142CE  0E01               	movlw	1
 14872  0142D0  0100               	movlb	0	; () banked
 14873  0142D2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 14874  0142D4  0E03               	movlw	3
 14875  0142D6  0100               	movlb	0	; () banked
 14876  0142D8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 14877  0142DA  EC1F  F095         	call	_Port_SetPinType	;wreg free
 14878                           
 14879                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 14880  0142DE  0EAC               	movlw	low _PortE
 14881  0142E0  0100               	movlb	0	; () banked
 14882  0142E2  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 14883  0142E4  0E03               	movlw	high _PortE
 14884  0142E6  0100               	movlb	0	; () banked
 14885  0142E8  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14886  0142EA  0E00               	movlw	0
 14887  0142EC  0100               	movlb	0	; () banked
 14888  0142EE  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 14889  0142F0  0E00               	movlw	0
 14890  0142F2  0100               	movlb	0	; () banked
 14891  0142F4  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 14892  0142F6  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 14893                           
 14894                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 14895  0142FA  0EAC               	movlw	low _PortE
 14896  0142FC  0100               	movlb	0	; () banked
 14897  0142FE  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 14898  014300  0E03               	movlw	high _PortE
 14899  014302  0100               	movlb	0	; () banked
 14900  014304  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14901  014306  0E01               	movlw	1
 14902  014308  0100               	movlb	0	; () banked
 14903  01430A  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 14904  01430C  0E00               	movlw	0
 14905  01430E  0100               	movlb	0	; () banked
 14906  014310  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 14907  014312  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 14908                           
 14909                           ;Motor.c: 38: lStepFunction = Motor_Step;
 14910  014316  0ECC               	movlw	low _Motor_Step
 14911  014318  0100               	movlb	0	; () banked
 14912  01431A  6F66               	movwf	_lStepFunction& (0+255),b
 14913  01431C  0E37               	movlw	high _Motor_Step
 14914  01431E  0100               	movlb	0	; () banked
 14915  014320  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 14916  014322  0E01               	movlw	low (_Motor_Step shr (0+16))
 14917  014324  0100               	movlb	0	; () banked
 14918  014326  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;Motor.c: 39: Timer0_Init(1000);
 14922  014328  0EE8               	movlw	232
 14923  01432A  0100               	movlb	0	; () banked
 14924  01432C  6FC2               	movwf	Timer0_Init@pFrequency& (0+255),b
 14925  01432E  0E03               	movlw	3
 14926  014330  6FC3               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 14927  014332  0E00               	movlw	0
 14928  014334  6FC4               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 14929  014336  0E00               	movlw	0
 14930  014338  6FC5               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 14931  01433A  EC86  F09A         	call	_Timer0_Init	;wreg free
 14932  01433E  0012               	return		;funcret
 14933  014340                     __end_of_Motor_Init:
 14934                           	opt stack 0
 14935                           tblptru	equ	0xFF8
 14936                           tblptrh	equ	0xFF7
 14937                           tblptrl	equ	0xFF6
 14938                           tablat	equ	0xFF5
 14939                           prodh	equ	0xFF4
 14940                           prodl	equ	0xFF3
 14941                           intcon	equ	0xFF2
 14942                           postinc0	equ	0xFEE
 14943                           wreg	equ	0xFE8
 14944                           indf1	equ	0xFE7
 14945                           postdec1	equ	0xFE5
 14946                           fsr1h	equ	0xFE2
 14947                           fsr1l	equ	0xFE1
 14948                           indf2	equ	0xFDF
 14949                           postinc2	equ	0xFDE
 14950                           postdec2	equ	0xFDD
 14951                           fsr2h	equ	0xFDA
 14952                           fsr2l	equ	0xFD9
 14953                           status	equ	0xFD8
 14954                           
 14955 ;; *************** function _Timer0_Init *****************
 14956 ;; Defined at:
 14957 ;;		line 25 in file "Library/Timer0.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 14962 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;                  1    wreg      void 
 14965 ;; Registers used:
 14966 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14972 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14973 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14975 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;Total ram usage:       14 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    8
 14979 ;; This function calls:
 14980 ;;		_Timer0_Clear
 14981 ;;		___lldiv
 14982 ;; This function is called by:
 14983 ;;		_Motor_Init
 14984 ;;		_Motor_Speed
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           	psect	text60
 14989  01350C                     __ptext60:
 14990                           	opt stack 0
 14991  01350C                     _Timer0_Init:
 14992                           	opt stack 19
 14993                           
 14994                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 14995                           
 14996                           ;incstack = 0
 14997  01350C  0E80               	movlw	128
 14998  01350E  0100               	movlb	0	; () banked
 14999  013510  6FC8               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15000  013512  0E8D               	movlw	141
 15001  013514  6FC9               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15002  013516  0E5B               	movlw	91
 15003  013518  6FCA               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15004  01351A  0E00               	movlw	0
 15005  01351C  6FCB               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15009                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15010                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15011                           ;Timer0.c: 34: UINT32 DIVIDE;
 15012                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15013  01351E  9ED5               	bcf	4053,7,c	;volatile
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;Timer0.c: 38: if (pFrequency == 0)
 15017  013520  0100               	movlb	0	; () banked
 15018  013522  51C2               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15019  013524  0100               	movlb	0	; () banked
 15020  013526  11C3               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15021  013528  0100               	movlb	0	; () banked
 15022  01352A  11C4               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15023  01352C  0100               	movlb	0	; () banked
 15024  01352E  11C5               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15025  013530  B4D8               	btfsc	status,2,c
 15026  013532  0012               	return	
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;Timer0.c: 39: return;
 15033  013534  96D5               	bcf	4053,3,c	;volatile
 15034                           
 15035                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15036  013536  9CD5               	bcf	4053,6,c	;volatile
 15037                           
 15038                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15039  013538  9AD5               	bcf	4053,5,c	;volatile
 15040                           
 15041                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15042  01353A  98D5               	bcf	4053,4,c	;volatile
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15046  01353C  C0C8  F0B5         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15047  013540  C0C9  F0B6         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15048  013544  C0CA  F0B7         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15049  013548  C0CB  F0B8         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15050  01354C  C0C2  F0B9         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15051  013550  C0C3  F0BA         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15052  013554  C0C4  F0BB         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15053  013558  C0C5  F0BC         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15054  01355C  EC5D  F0A4         	call	___lldiv	;wreg free
 15055  013560  C0B5  F0CC         	movff	?___lldiv,Timer0_Init@DIVIDE
 15056  013564  C0B6  F0CD         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15057  013568  C0B7  F0CE         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15058  01356C  C0B8  F0CF         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15059                           
 15060                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15061  013570  D00C               	goto	l1787
 15062  013572                     l14224:
 15063                           
 15064                           ;Timer0.c: 50: {
 15065                           ;Timer0.c: 51: INDEX ++;
 15066  013572  0100               	movlb	0	; () banked
 15067  013574  2B92               	incf	_INDEX& (0+255),f,b
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;Timer0.c: 52: if (INDEX >= 3)
 15071  013576  0E02               	movlw	2
 15072  013578  0100               	movlb	0	; () banked
 15073  01357A  6592               	cpfsgt	_INDEX& (0+255),b
 15074  01357C  D001               	goto	l1785
 15075  01357E  D02F               	goto	u11040
 15076  013580                     l1785:
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;Timer0.c: 56: if (INDEX >= 8)
 15080                           
 15081                           ; BSR set to: 0
 15082  013580  0E07               	movlw	7
 15083  013582  0100               	movlb	0	; () banked
 15084  013584  6592               	cpfsgt	_INDEX& (0+255),b
 15085  013586  D001               	goto	l1787
 15086  013588  0012               	return	
 15087  01358A                     l1787:
 15088                           
 15089                           ; BSR set to: 0
 15090                           
 15091                           ; BSR set to: 0
 15092  01358A  C0CC  F0B5         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 15093  01358E  C0CD  F0B6         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 15094  013592  C0CE  F0B7         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 15095  013596  C0CF  F0B8         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 15096  01359A  0100               	movlb	0	; () banked
 15097  01359C  5192               	movf	_INDEX& (0+255),w,b
 15098  01359E  0D02               	mullw	2
 15099  0135A0  0E31               	movlw	low Timer0_Init@PRESCALE
 15100  0135A2  24F3               	addwf	prodl,w,c
 15101  0135A4  6EF6               	movwf	tblptrl,c
 15102  0135A6  0EFD               	movlw	high Timer0_Init@PRESCALE
 15103  0135A8  20F4               	addwfc	prodh,w,c
 15104  0135AA  6EF7               	movwf	tblptrh,c
 15105  0135AC                     	if	1	;There are 3 active tblptr bytes
 15106  0135AC  6AF8               	clrf	tblptru,c
 15107  0135AE  0E00               	movlw	low (__mediumconst shr (0+16))
 15108  0135B0  22F8               	addwfc	tblptru,f,c
 15109  0135B2                     	endif
 15110  0135B2  0009               	tblrd		*+
 15111  0135B4  CFF5 F0C6          	movff	tablat,??_Timer0_Init
 15112  0135B8  0009               	tblrd		*+
 15113  0135BA  CFF5 F0C7          	movff	tablat,??_Timer0_Init+1
 15114  0135BE  C0C6  F0B9         	movff	??_Timer0_Init,___lldiv@divisor
 15115  0135C2  C0C7  F0BA         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 15116  0135C6  0100               	movlb	0	; () banked
 15117  0135C8  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 15118  0135CA  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 15119  0135CC  EC5D  F0A4         	call	___lldiv	;wreg free
 15120  0135D0  0100               	movlb	0	; () banked
 15121  0135D2  51B8               	movf	(?___lldiv+3)& (0+255),w,b
 15122  0135D4  E1CE               	bnz	l14224
 15123  0135D6  0100               	movlb	0	; () banked
 15124  0135D8  05B7               	decf	(?___lldiv+2)& (0+255),w,b
 15125  0135DA  B0D8               	btfsc	status,0,c
 15126  0135DC  D7CA               	goto	l1784
 15127  0135DE                     u11040:
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;Timer0.c: 58: }
 15131                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 15132                           
 15133                           ; BSR set to: 0
 15134  0135DE  0100               	movlb	0	; () banked
 15135  0135E0  5192               	movf	_INDEX& (0+255),w,b
 15136  0135E2  0D02               	mullw	2
 15137  0135E4  0E31               	movlw	low Timer0_Init@PRESCALE
 15138  0135E6  24F3               	addwf	prodl,w,c
 15139  0135E8  6EF6               	movwf	tblptrl,c
 15140  0135EA  0EFD               	movlw	high Timer0_Init@PRESCALE
 15141  0135EC  20F4               	addwfc	prodh,w,c
 15142  0135EE  6EF7               	movwf	tblptrh,c
 15143  0135F0                     	if	1	;There are 3 active tblptr bytes
 15144  0135F0  6AF8               	clrf	tblptru,c
 15145  0135F2  0E00               	movlw	low (__mediumconst shr (0+16))
 15146  0135F4  22F8               	addwfc	tblptru,f,c
 15147  0135F6                     	endif
 15148  0135F6  0008               	tblrd		*
 15149  0135F8  CFF5 F091          	movff	tablat,Timer0_Init@PRE
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 15153  0135FC  0EFF               	movlw	255
 15154  0135FE  0100               	movlb	0	; () banked
 15155  013600  25CC               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 15156  013602  0103               	movlb	3	; () banked
 15157  013604  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 15158  013606  0EFF               	movlw	255
 15159  013608  0100               	movlb	0	; () banked
 15160  01360A  21CD               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 15161  01360C  0103               	movlb	3	; () banked
 15162  01360E  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 15163  013610  0EFF               	movlw	255
 15164  013612  0100               	movlb	0	; () banked
 15165  013614  21CE               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 15166  013616  0103               	movlb	3	; () banked
 15167  013618  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 15168  01361A  0EFF               	movlw	255
 15169  01361C  0100               	movlb	0	; () banked
 15170  01361E  21CF               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 15171  013620  0103               	movlb	3	; () banked
 15172  013622  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 15173                           
 15174                           ; BSR set to: 3
 15175                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 15176  013624  C32A  F0B5         	movff	Timer0_Init@DIV,___lldiv@dividend
 15177  013628  C32B  F0B6         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 15178  01362C  C32C  F0B7         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 15179  013630  C32D  F0B8         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 15180  013634  0100               	movlb	0	; () banked
 15181  013636  5191               	movf	Timer0_Init@PRE& (0+255),w,b
 15182  013638  0100               	movlb	0	; () banked
 15183  01363A  6FB9               	movwf	___lldiv@divisor& (0+255),b
 15184  01363C  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 15185  01363E  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 15186  013640  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 15187  013642  EC5D  F0A4         	call	___lldiv	;wreg free
 15188  013646  0100               	movlb	0	; () banked
 15189  013648  1FB5               	comf	?___lldiv& (0+255),f,b
 15190  01364A  0100               	movlb	0	; () banked
 15191  01364C  1FB6               	comf	(?___lldiv+1)& (0+255),f,b
 15192  01364E  0100               	movlb	0	; () banked
 15193  013650  4BB5               	infsnz	?___lldiv& (0+255),f,b
 15194  013652  2BB6               	incf	(?___lldiv+1)& (0+255),f,b
 15195  013654  0EFF               	movlw	255
 15196  013656  0100               	movlb	0	; () banked
 15197  013658  25B5               	addwf	?___lldiv& (0+255),w,b
 15198  01365A  6E29               	movwf	_COUNTER,c
 15199  01365C  0EFF               	movlw	255
 15200  01365E  0100               	movlb	0	; () banked
 15201  013660  21B6               	addwfc	(?___lldiv+1)& (0+255),w,b
 15202  013662  6E2A               	movwf	_COUNTER+1,c
 15203                           
 15204                           ; BSR set to: 0
 15205                           ;Timer0.c: 68: Timer0_Clear();
 15206  013664  EC68  F0B6         	call	_Timer0_Clear	;wreg free
 15207                           
 15208                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 15209  013668  8ED5               	bsf	4053,7,c	;volatile
 15210  01366A  0012               	return		;funcret
 15211  01366C                     __end_of_Timer0_Init:
 15212                           	opt stack 0
 15213                           tblptru	equ	0xFF8
 15214                           tblptrh	equ	0xFF7
 15215                           tblptrl	equ	0xFF6
 15216                           tablat	equ	0xFF5
 15217                           prodh	equ	0xFF4
 15218                           prodl	equ	0xFF3
 15219                           intcon	equ	0xFF2
 15220                           postinc0	equ	0xFEE
 15221                           wreg	equ	0xFE8
 15222                           indf1	equ	0xFE7
 15223                           postdec1	equ	0xFE5
 15224                           fsr1h	equ	0xFE2
 15225                           fsr1l	equ	0xFE1
 15226                           indf2	equ	0xFDF
 15227                           postinc2	equ	0xFDE
 15228                           postdec2	equ	0xFDD
 15229                           fsr2h	equ	0xFDA
 15230                           fsr2l	equ	0xFD9
 15231                           status	equ	0xFD8
 15232                           
 15233 ;; *************** function _Timer0_Clear *****************
 15234 ;; Defined at:
 15235 ;;		line 20 in file "Library/Timer0.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;		None
 15238 ;; Auto vars:     Size  Location     Type
 15239 ;;		None
 15240 ;; Return value:  Size  Location     Type
 15241 ;;                  1    wreg      void 
 15242 ;; Registers used:
 15243 ;;		None
 15244 ;; Tracked objects:
 15245 ;;		On entry : 0/0
 15246 ;;		On exit  : 0/0
 15247 ;;		Unchanged: 0/0
 15248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;Total ram usage:        0 bytes
 15254 ;; Hardware stack levels used:    1
 15255 ;; Hardware stack levels required when called:    7
 15256 ;; This function calls:
 15257 ;;		Nothing
 15258 ;; This function is called by:
 15259 ;;		_Timer0_Init
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           	psect	text61
 15264  016CD0                     __ptext61:
 15265                           	opt stack 0
 15266  016CD0                     _Timer0_Clear:
 15267                           	opt stack 19
 15268                           
 15269                           ;Timer0.c: 22: TMR0 = COUNTER;
 15270                           
 15271                           ;incstack = 0
 15272  016CD0  C029  FFD6         	movff	_COUNTER,4054	;volatile
 15273  016CD4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 15274                           
 15275                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 15276  016CD8  94F2               	bcf	intcon,2,c	;volatile
 15277  016CDA  0012               	return		;funcret
 15278  016CDC                     __end_of_Timer0_Clear:
 15279                           	opt stack 0
 15280                           tblptru	equ	0xFF8
 15281                           tblptrh	equ	0xFF7
 15282                           tblptrl	equ	0xFF6
 15283                           tablat	equ	0xFF5
 15284                           prodh	equ	0xFF4
 15285                           prodl	equ	0xFF3
 15286                           intcon	equ	0xFF2
 15287                           postinc0	equ	0xFEE
 15288                           wreg	equ	0xFE8
 15289                           indf1	equ	0xFE7
 15290                           postdec1	equ	0xFE5
 15291                           fsr1h	equ	0xFE2
 15292                           fsr1l	equ	0xFE1
 15293                           indf2	equ	0xFDF
 15294                           postinc2	equ	0xFDE
 15295                           postdec2	equ	0xFDD
 15296                           fsr2h	equ	0xFDA
 15297                           fsr2l	equ	0xFD9
 15298                           status	equ	0xFD8
 15299                           
 15300 ;; *************** function _MXK_Init *****************
 15301 ;; Defined at:
 15302 ;;		line 33 in file "Library/MXK.c"
 15303 ;; Parameters:    Size  Location     Type
 15304 ;;		None
 15305 ;; Auto vars:     Size  Location     Type
 15306 ;;		None
 15307 ;; Return value:  Size  Location     Type
 15308 ;;                  1    wreg      void 
 15309 ;; Registers used:
 15310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15311 ;; Tracked objects:
 15312 ;;		On entry : 0/0
 15313 ;;		On exit  : 0/0
 15314 ;;		Unchanged: 0/0
 15315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15320 ;;Total ram usage:        0 bytes
 15321 ;; Hardware stack levels used:    1
 15322 ;; Hardware stack levels required when called:   16
 15323 ;; This function calls:
 15324 ;;		_LED_Init
 15325 ;;		_Port_Init
 15326 ;;		_Port_SetPin
 15327 ;;		_Port_SetPinType
 15328 ;;		_Port_SetQuadType
 15329 ;;		_Port_SetType
 15330 ;;		_delay_ms
 15331 ;; This function is called by:
 15332 ;;		_init
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336                           	psect	text62
 15337  0130B4                     __ptext62:
 15338                           	opt stack 0
 15339  0130B4                     _MXK_Init:
 15340                           	opt stack 13
 15341                           
 15342                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 15343                           
 15344                           ;incstack = 0
 15345  0130B4  0E01               	movlw	1
 15346  0130B6  6E4B               	movwf	_Bus_State,c
 15347                           
 15348                           ;MXK.c: 36: lQueue = (Function)0;
 15349  0130B8  0E00               	movlw	0
 15350  0130BA  0100               	movlb	0	; () banked
 15351  0130BC  6F63               	movwf	_lQueue& (0+255),b	;volatile
 15352  0130BE  0E00               	movlw	0
 15353  0130C0  0100               	movlb	0	; () banked
 15354  0130C2  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15355  0130C4  0E00               	movlw	0
 15356  0130C6  0100               	movlb	0	; () banked
 15357  0130C8  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15358                           
 15359                           ; BSR set to: 0
 15360                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 15361  0130CA  0EC0               	movlw	low _PortA
 15362  0130CC  0100               	movlb	0	; () banked
 15363  0130CE  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15364  0130D0  0E03               	movlw	high _PortA
 15365  0130D2  0100               	movlb	0	; () banked
 15366  0130D4  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15367  0130D6  0E00               	movlw	0
 15368  0130D8  0100               	movlb	0	; () banked
 15369  0130DA  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15370  0130DC  ECCE  F096         	call	_Port_Init	;wreg free
 15371                           
 15372                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 15373  0130E0  0EB6               	movlw	low _PortB
 15374  0130E2  0100               	movlb	0	; () banked
 15375  0130E4  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15376  0130E6  0E03               	movlw	high _PortB
 15377  0130E8  0100               	movlb	0	; () banked
 15378  0130EA  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15379  0130EC  0E01               	movlw	1
 15380  0130EE  0100               	movlb	0	; () banked
 15381  0130F0  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15382  0130F2  ECCE  F096         	call	_Port_Init	;wreg free
 15383                           
 15384                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 15385  0130F6  0EA0               	movlw	low _PortC
 15386  0130F8  0100               	movlb	0	; () banked
 15387  0130FA  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15388  0130FC  0E00               	movlw	high _PortC
 15389  0130FE  0100               	movlb	0	; () banked
 15390  013100  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15391  013102  0E02               	movlw	2
 15392  013104  0100               	movlb	0	; () banked
 15393  013106  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15394  013108  ECCE  F096         	call	_Port_Init	;wreg free
 15395                           
 15396                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 15397  01310C  0E96               	movlw	low _PortD
 15398  01310E  0100               	movlb	0	; () banked
 15399  013110  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15400  013112  0E00               	movlw	high _PortD
 15401  013114  0100               	movlb	0	; () banked
 15402  013116  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15403  013118  0E03               	movlw	3
 15404  01311A  0100               	movlb	0	; () banked
 15405  01311C  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15406  01311E  ECCE  F096         	call	_Port_Init	;wreg free
 15407                           
 15408                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 15409  013122  0EAC               	movlw	low _PortE
 15410  013124  0100               	movlb	0	; () banked
 15411  013126  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15412  013128  0E03               	movlw	high _PortE
 15413  01312A  0100               	movlb	0	; () banked
 15414  01312C  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15415  01312E  0E04               	movlw	4
 15416  013130  0100               	movlb	0	; () banked
 15417  013132  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15418  013134  ECCE  F096         	call	_Port_Init	;wreg free
 15419                           
 15420                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 15421  013138  0ECA               	movlw	low _PortF
 15422  01313A  0100               	movlb	0	; () banked
 15423  01313C  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15424  01313E  0E03               	movlw	high _PortF
 15425  013140  0100               	movlb	0	; () banked
 15426  013142  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15427  013144  0E05               	movlw	5
 15428  013146  0100               	movlb	0	; () banked
 15429  013148  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15430  01314A  ECCE  F096         	call	_Port_Init	;wreg free
 15431                           
 15432                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 15433  01314E  0EA2               	movlw	low _PortG
 15434  013150  0100               	movlb	0	; () banked
 15435  013152  6FF5               	movwf	Port_Init@pInput& (0+255),b
 15436  013154  0E03               	movlw	high _PortG
 15437  013156  0100               	movlb	0	; () banked
 15438  013158  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
 15439  01315A  0E06               	movlw	6
 15440  01315C  0100               	movlb	0	; () banked
 15441  01315E  6FF7               	movwf	Port_Init@pPort& (0+255),b
 15442  013160  ECCE  F096         	call	_Port_Init	;wreg free
 15443                           
 15444                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 15445  013164  0ECA               	movlw	low _PortF
 15446  013166  0100               	movlb	0	; () banked
 15447  013168  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 15448  01316A  0E03               	movlw	high _PortF
 15449  01316C  0100               	movlb	0	; () banked
 15450  01316E  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15451  013170  0E05               	movlw	5
 15452  013172  0100               	movlb	0	; () banked
 15453  013174  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 15454  013176  0E00               	movlw	0
 15455  013178  0100               	movlb	0	; () banked
 15456  01317A  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15457  01317C  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15458                           
 15459                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 15460  013180  0EB6               	movlw	low _PortB
 15461  013182  0100               	movlb	0	; () banked
 15462  013184  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
 15463  013186  0E03               	movlw	high _PortB
 15464  013188  0100               	movlb	0	; () banked
 15465  01318A  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15466  01318C  0E00               	movlw	0
 15467  01318E  0100               	movlb	0	; () banked
 15468  013190  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15469  013192  0E00               	movlw	0
 15470  013194  0100               	movlb	0	; () banked
 15471  013196  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
 15472  013198  EC12  F08F         	call	_Port_SetQuadType	;wreg free
 15473                           
 15474                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 15475  01319C  0ECA               	movlw	low _PortF
 15476  01319E  0100               	movlb	0	; () banked
 15477  0131A0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 15478  0131A2  0E03               	movlw	high _PortF
 15479  0131A4  0100               	movlb	0	; () banked
 15480  0131A6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15481  0131A8  0E06               	movlw	6
 15482  0131AA  0100               	movlb	0	; () banked
 15483  0131AC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 15484  0131AE  0E03               	movlw	3
 15485  0131B0  0100               	movlb	0	; () banked
 15486  0131B2  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15487  0131B4  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15488                           
 15489                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 15490  0131B8  0EA2               	movlw	low _PortG
 15491  0131BA  0100               	movlb	0	; () banked
 15492  0131BC  6FEF               	movwf	Port_SetType@pInput& (0+255),b
 15493  0131BE  0E03               	movlw	high _PortG
 15494  0131C0  0100               	movlb	0	; () banked
 15495  0131C2  6FF0               	movwf	(Port_SetType@pInput+1)& (0+255),b
 15496  0131C4  0E03               	movlw	3
 15497  0131C6  0100               	movlb	0	; () banked
 15498  0131C8  6FF1               	movwf	Port_SetType@pType& (0+255),b
 15499  0131CA  EC3D  F090         	call	_Port_SetType	;wreg free
 15500                           
 15501                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 15502  0131CE  0EA2               	movlw	low _PortG
 15503  0131D0  0100               	movlb	0	; () banked
 15504  0131D2  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 15505  0131D4  0E03               	movlw	high _PortG
 15506  0131D6  0100               	movlb	0	; () banked
 15507  0131D8  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15508  0131DA  0E04               	movlw	4
 15509  0131DC  0100               	movlb	0	; () banked
 15510  0131DE  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 15511  0131E0  0E00               	movlw	0
 15512  0131E2  0100               	movlb	0	; () banked
 15513  0131E4  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 15514  0131E6  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 15515                           
 15516                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 15517  0131EA  0ECA               	movlw	low _PortF
 15518  0131EC  0100               	movlb	0	; () banked
 15519  0131EE  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 15520  0131F0  0E03               	movlw	high _PortF
 15521  0131F2  0100               	movlb	0	; () banked
 15522  0131F4  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15523  0131F6  0E06               	movlw	6
 15524  0131F8  0100               	movlb	0	; () banked
 15525  0131FA  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 15526  0131FC  0E01               	movlw	1
 15527  0131FE  0100               	movlb	0	; () banked
 15528  013200  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 15529  013202  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 15530                           
 15531                           ;MXK.c: 55: LED_Init(eLED1);
 15532  013206  0E00               	movlw	0
 15533  013208  EC3B  F0AF         	call	_LED_Init
 15534                           
 15535                           ;MXK.c: 56: LED_Init(eLED2);
 15536  01320C  0E01               	movlw	1
 15537  01320E  EC3B  F0AF         	call	_LED_Init
 15538                           
 15539                           ;MXK.c: 58: PIR1 = 0;
 15540  013212  0E00               	movlw	0
 15541  013214  6E9E               	movwf	3998,c	;volatile
 15542                           
 15543                           ;MXK.c: 59: PIR2 = 0;
 15544  013216  0E00               	movlw	0
 15545  013218  6EA1               	movwf	4001,c	;volatile
 15546                           
 15547                           ;MXK.c: 60: PIR3 = 0;
 15548  01321A  0E00               	movlw	0
 15549  01321C  6EA4               	movwf	4004,c	;volatile
 15550                           
 15551                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 15552  01321E  8E9B               	bsf	3995,7,c	;volatile
 15553                           
 15554                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 15555  013220  8C9B               	bsf	3995,6,c	;volatile
 15556                           
 15557                           ;MXK.c: 66: delay_ms(100);
 15558  013222  0E00               	movlw	0
 15559  013224  0100               	movlb	0	; () banked
 15560  013226  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 15561  013228  0E64               	movlw	100
 15562  01322A  6FB5               	movwf	delay_ms@ms& (0+255),b
 15563  01322C  EC39  F0AE         	call	_delay_ms	;wreg free
 15564                           
 15565                           ;MXK.c: 68: RCONbits.IPEN = 1;
 15566  013230  8ED0               	bsf	4048,7,c	;volatile
 15567  013232  0012               	return		;funcret
 15568  013234                     __end_of_MXK_Init:
 15569                           	opt stack 0
 15570                           tblptru	equ	0xFF8
 15571                           tblptrh	equ	0xFF7
 15572                           tblptrl	equ	0xFF6
 15573                           tablat	equ	0xFF5
 15574                           prodh	equ	0xFF4
 15575                           prodl	equ	0xFF3
 15576                           intcon	equ	0xFF2
 15577                           postinc0	equ	0xFEE
 15578                           wreg	equ	0xFE8
 15579                           indf1	equ	0xFE7
 15580                           postdec1	equ	0xFE5
 15581                           fsr1h	equ	0xFE2
 15582                           fsr1l	equ	0xFE1
 15583                           indf2	equ	0xFDF
 15584                           postinc2	equ	0xFDE
 15585                           postdec2	equ	0xFDD
 15586                           fsr2h	equ	0xFDA
 15587                           fsr2l	equ	0xFD9
 15588                           status	equ	0xFD8
 15589                           
 15590 ;; *************** function _Port_Init *****************
 15591 ;; Defined at:
 15592 ;;		line 150 in file "Library/Port.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 15595 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15596 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15597 ;;  pPort           1   66[BANK0 ] enum E6786
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;  i               1   67[BANK0 ] unsigned char 
 15600 ;; Return value:  Size  Location     Type
 15601 ;;                  1    wreg      void 
 15602 ;; Registers used:
 15603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15609 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15611 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15612 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;Total ram usage:        6 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; Hardware stack levels required when called:   15
 15616 ;; This function calls:
 15617 ;;		_GetPortPORT
 15618 ;;		_GetPortProperties
 15619 ;;		_GetPortTRIS
 15620 ;;		_Port_Set
 15621 ;;		_Port_SetPinType
 15622 ;;		_Port_SetType
 15623 ;;		_Word_GetPair
 15624 ;; This function is called by:
 15625 ;;		_MXK_Init
 15626 ;; This function uses a non-reentrant model
 15627 ;;
 15628                           
 15629                           	psect	text63
 15630  012D9C                     __ptext63:
 15631                           	opt stack 0
 15632  012D9C                     _Port_Init:
 15633                           	opt stack 13
 15634                           
 15635                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 15636                           
 15637                           ;incstack = 0
 15638  012D9C  0100               	movlb	0	; () banked
 15639  012D9E  51F7               	movf	Port_Init@pPort& (0+255),w,b
 15640  012DA0  EC72  F0A7         	call	_GetPortProperties
 15641  012DA4  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
 15642  012DA8  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15643  012DAC  0100               	movlb	0	; () banked
 15644  012DAE  C0B5  FFDE         	movff	?_GetPortProperties,postinc2
 15645  012DB2  0100               	movlb	0	; () banked
 15646  012DB4  C0B6  FFDD         	movff	?_GetPortProperties+1,postdec2
 15647                           
 15648                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 15649  012DB8  0100               	movlb	0	; () banked
 15650  012DBA  51F7               	movf	Port_Init@pPort& (0+255),w,b
 15651  012DBC  ECC5  F0A7         	call	_GetPortPORT
 15652  012DC0  0100               	movlb	0	; () banked
 15653  012DC2  EE20 F006          	lfsr	2,6
 15654  012DC6  51F5               	movf	Port_Init@pInput& (0+255),w,b
 15655  012DC8  26D9               	addwf	fsr2l,f,c
 15656  012DCA  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15657  012DCC  22DA               	addwfc	fsr2h,f,c
 15658  012DCE  0100               	movlb	0	; () banked
 15659  012DD0  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
 15660  012DD4  0100               	movlb	0	; () banked
 15661  012DD6  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
 15662                           
 15663                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 15664  012DDA  0100               	movlb	0	; () banked
 15665  012DDC  51F7               	movf	Port_Init@pPort& (0+255),w,b
 15666  012DDE  ECC5  F0A7         	call	_GetPortPORT
 15667  012DE2  0100               	movlb	0	; () banked
 15668  012DE4  EE20 F004          	lfsr	2,4
 15669  012DE8  51F5               	movf	Port_Init@pInput& (0+255),w,b
 15670  012DEA  26D9               	addwf	fsr2l,f,c
 15671  012DEC  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15672  012DEE  22DA               	addwfc	fsr2h,f,c
 15673  012DF0  0100               	movlb	0	; () banked
 15674  012DF2  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
 15675  012DF6  0100               	movlb	0	; () banked
 15676  012DF8  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
 15677                           
 15678                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 15679  012DFC  0100               	movlb	0	; () banked
 15680  012DFE  51F7               	movf	Port_Init@pPort& (0+255),w,b
 15681  012E00  EC1F  F0A7         	call	_GetPortTRIS
 15682  012E04  0100               	movlb	0	; () banked
 15683  012E06  EE20 F002          	lfsr	2,2
 15684  012E0A  51F5               	movf	Port_Init@pInput& (0+255),w,b
 15685  012E0C  26D9               	addwf	fsr2l,f,c
 15686  012E0E  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15687  012E10  22DA               	addwfc	fsr2h,f,c
 15688  012E12  0100               	movlb	0	; () banked
 15689  012E14  C0B5  FFDE         	movff	?_GetPortTRIS,postinc2
 15690  012E18  0100               	movlb	0	; () banked
 15691  012E1A  C0B6  FFDD         	movff	?_GetPortTRIS+1,postdec2
 15692                           
 15693                           ; BSR set to: 0
 15694                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 15695  012E1E  0100               	movlb	0	; () banked
 15696  012E20  EE20 F004          	lfsr	2,4
 15697  012E24  51F5               	movf	Port_Init@pInput& (0+255),w,b
 15698  012E26  26D9               	addwf	fsr2l,f,c
 15699  012E28  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15700  012E2A  22DA               	addwfc	fsr2h,f,c
 15701  012E2C  CFDE F100          	movff	postinc2,??_Port_Init
 15702  012E30  CFDD F101          	movff	postdec2,??_Port_Init+1
 15703  012E34  C100  FFD9         	movff	??_Port_Init,fsr2l
 15704  012E38  C101  FFDA         	movff	??_Port_Init+1,fsr2h
 15705  012E3C  0E00               	movlw	0
 15706  012E3E  6EDF               	movwf	indf2,c
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 15710  012E40  0100               	movlb	0	; () banked
 15711  012E42  EE20 F002          	lfsr	2,2
 15712  012E46  51F5               	movf	Port_Init@pInput& (0+255),w,b
 15713  012E48  26D9               	addwf	fsr2l,f,c
 15714  012E4A  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15715  012E4C  22DA               	addwfc	fsr2h,f,c
 15716  012E4E  CFDE F100          	movff	postinc2,??_Port_Init
 15717  012E52  CFDD F101          	movff	postdec2,??_Port_Init+1
 15718  012E56  C100  FFD9         	movff	??_Port_Init,fsr2l
 15719  012E5A  C101  FFDA         	movff	??_Port_Init+1,fsr2h
 15720  012E5E  0EFF               	movlw	255
 15721  012E60  6EDF               	movwf	indf2,c
 15722                           
 15723                           ; BSR set to: 0
 15724                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 15725  012E62  C0F5  F0EF         	movff	Port_Init@pInput,Port_SetType@pInput
 15726  012E66  C0F6  F0F0         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 15727  012E6A  0E00               	movlw	0
 15728  012E6C  0100               	movlb	0	; () banked
 15729  012E6E  6FF1               	movwf	Port_SetType@pType& (0+255),b
 15730  012E70  EC3D  F090         	call	_Port_SetType	;wreg free
 15731                           
 15732                           ;Port.c: 166: UINT8 i;
 15733                           ;Port.c: 167: for (i=0; i<8; i++)
 15734  012E74  0E00               	movlw	0
 15735  012E76  0100               	movlb	0	; () banked
 15736  012E78  6FF8               	movwf	Port_Init@i& (0+255),b
 15737  012E7A                     l14432:
 15738                           
 15739                           ; BSR set to: 0
 15740  012E7A  0E07               	movlw	7
 15741  012E7C  0100               	movlb	0	; () banked
 15742  012E7E  65F8               	cpfsgt	Port_Init@i& (0+255),b
 15743  012E80  D031               	goto	l403
 15744  012E82  D04B               	goto	u11260
 15745  012E84                     
 15746                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 15747                           
 15748                           ; BSR set to: 0
 15749  012E84  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15750  012E88  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15751  012E8C  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
 15752  012E90  0E03               	movlw	3
 15753  012E92  0100               	movlb	0	; () banked
 15754  012E94  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15755  012E96  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15756                           
 15757                           ;Port.c: 173: break;
 15758  012E9A  D03C               	goto	l405
 15759  012E9C                     
 15760                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 15761  012E9C  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15762  012EA0  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15763  012EA4  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
 15764  012EA8  0E02               	movlw	2
 15765  012EAA  0100               	movlb	0	; () banked
 15766  012EAC  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15767  012EAE  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15768                           
 15769                           ;Port.c: 176: break;
 15770  012EB2  D030               	goto	l405
 15771  012EB4                     
 15772                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 15773  012EB4  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15774  012EB8  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15775  012EBC  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
 15776  012EC0  0E01               	movlw	1
 15777  012EC2  0100               	movlb	0	; () banked
 15778  012EC4  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15779  012EC6  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15780                           
 15781                           ;Port.c: 179: break;
 15782  012ECA  D024               	goto	l405
 15783  012ECC                     
 15784                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 15785  012ECC  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15786  012ED0  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15787  012ED4  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
 15788  012ED8  0E00               	movlw	0
 15789  012EDA  0100               	movlb	0	; () banked
 15790  012EDC  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15791  012EDE  EC1F  F095         	call	_Port_SetPinType	;wreg free
 15792                           
 15793                           ;Port.c: 183: }
 15794                           
 15795                           ;Port.c: 182: break;
 15796  012EE2  D018               	goto	l405
 15797  012EE4                     l403:
 15798  012EE4  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
 15799  012EE8  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15800  012EEC  CFDE F0C1          	movff	postinc2,Word_GetPair@pInput
 15801  012EF0  CFDD F0C2          	movff	postdec2,Word_GetPair@pInput+1
 15802  012EF4  C0F8  F0C3         	movff	Port_Init@i,Word_GetPair@pPair
 15803  012EF8  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 15804                           
 15805                           ; Switch size 1, requested type "space"
 15806                           ; Number of cases is 4, Range of values is 0 to 3
 15807                           ; switch strategies available:
 15808                           ; Name         Instructions Cycles
 15809                           ; simple_byte           13     7 (average)
 15810                           ;	Chosen strategy is simple_byte
 15811  012EFC  0A00               	xorlw	0	; case 0
 15812  012EFE  B4D8               	btfsc	status,2,c
 15813  012F00  D7C1               	goto	l404
 15814  012F02  0A01               	xorlw	1	; case 1
 15815  012F04  B4D8               	btfsc	status,2,c
 15816  012F06  D7D6               	goto	l407
 15817  012F08  0A03               	xorlw	3	; case 2
 15818  012F0A  B4D8               	btfsc	status,2,c
 15819  012F0C  D7C7               	goto	l406
 15820  012F0E  0A01               	xorlw	1	; case 3
 15821  012F10  B4D8               	btfsc	status,2,c
 15822  012F12  D7DC               	goto	l408
 15823  012F14                     l405:
 15824  012F14  0100               	movlb	0	; () banked
 15825  012F16  2BF8               	incf	Port_Init@i& (0+255),f,b
 15826  012F18  D7B0               	goto	l14432
 15827  012F1A                     u11260:
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;Port.c: 184: }
 15831                           ;Port.c: 185: Port_Set(pInput, 0x00);
 15832                           
 15833                           ; BSR set to: 0
 15834  012F1A  C0F5  F0C4         	movff	Port_Init@pInput,Port_Set@pInput
 15835  012F1E  C0F6  F0C5         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 15836  012F22  0E00               	movlw	0
 15837  012F24  0100               	movlb	0	; () banked
 15838  012F26  6FC6               	movwf	Port_Set@pValue& (0+255),b
 15839  012F28  EC9C  F08A         	call	_Port_Set	;wreg free
 15840  012F2C  0012               	return		;funcret
 15841  012F2E                     __end_of_Port_Init:
 15842                           	opt stack 0
 15843                           tblptru	equ	0xFF8
 15844                           tblptrh	equ	0xFF7
 15845                           tblptrl	equ	0xFF6
 15846                           tablat	equ	0xFF5
 15847                           prodh	equ	0xFF4
 15848                           prodl	equ	0xFF3
 15849                           intcon	equ	0xFF2
 15850                           postinc0	equ	0xFEE
 15851                           wreg	equ	0xFE8
 15852                           indf1	equ	0xFE7
 15853                           postdec1	equ	0xFE5
 15854                           fsr1h	equ	0xFE2
 15855                           fsr1l	equ	0xFE1
 15856                           indf2	equ	0xFDF
 15857                           postinc2	equ	0xFDE
 15858                           postdec2	equ	0xFDD
 15859                           fsr2h	equ	0xFDA
 15860                           fsr2l	equ	0xFD9
 15861                           status	equ	0xFD8
 15862                           
 15863 ;; *************** function _Port_SetType *****************
 15864 ;; Defined at:
 15865 ;;		line 513 in file "Library/Port.c"
 15866 ;; Parameters:    Size  Location     Type
 15867 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 15868 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15869 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15870 ;;  pType           1   60[BANK0 ] enum E6795
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;  Output          1   63[BANK0 ] enum E6475
 15873 ;; Return value:  Size  Location     Type
 15874 ;;                  1    wreg      enum E6475
 15875 ;; Registers used:
 15876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15877 ;; Tracked objects:
 15878 ;;		On entry : 0/0
 15879 ;;		On exit  : 0/0
 15880 ;;		Unchanged: 0/0
 15881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15882 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15886 ;;Total ram usage:        6 bytes
 15887 ;; Hardware stack levels used:    1
 15888 ;; Hardware stack levels required when called:   14
 15889 ;; This function calls:
 15890 ;;		_Port_CheckPortType
 15891 ;;		_Word_SetPair
 15892 ;; This function is called by:
 15893 ;;		_Port_Init
 15894 ;;		_MXK_Init
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text64
 15899  01207A                     __ptext64:
 15900                           	opt stack 0
 15901  01207A                     _Port_SetType:
 15902                           	opt stack 14
 15903                           
 15904                           ;Port.c: 515: ePinError Output = ePinErrorState;
 15905                           
 15906                           ;incstack = 0
 15907  01207A  0E05               	movlw	5
 15908  01207C  0100               	movlb	0	; () banked
 15909  01207E  6FF4               	movwf	Port_SetType@Output& (0+255),b
 15910                           
 15911                           ;Port.c: 517: switch (pType)
 15912  012080  D07A               	goto	l509
 15913  012082                     
 15914                           ; BSR set to: 0
 15915                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 15916                           
 15917                           ; BSR set to: 0
 15918  012082  0100               	movlb	0	; () banked
 15919  012084  EE20 F002          	lfsr	2,2
 15920  012088  51EF               	movf	Port_SetType@pInput& (0+255),w,b
 15921  01208A  26D9               	addwf	fsr2l,f,c
 15922  01208C  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15923  01208E  22DA               	addwfc	fsr2h,f,c
 15924  012090  CFDE F0F2          	movff	postinc2,??_Port_SetType
 15925  012094  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
 15926  012098  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
 15927  01209C  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
 15928  0120A0  0EFF               	movlw	255
 15929  0120A2  D067               	goto	L10
 15930  0120A4                     
 15931                           ; BSR set to: 0
 15932                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 15933                           
 15934                           ; BSR set to: 0
 15935  0120A4  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15936  0120A8  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15937  0120AC  0E01               	movlw	1
 15938  0120AE  0100               	movlb	0	; () banked
 15939  0120B0  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15940  0120B2  EC39  F0B1         	call	_Port_CheckPortType	;wreg free
 15941  0120B6  0100               	movlb	0	; () banked
 15942  0120B8  6FF4               	movwf	Port_SetType@Output& (0+255),b
 15943  0120BA  0100               	movlb	0	; () banked
 15944  0120BC  51F4               	movf	Port_SetType@Output& (0+255),w,b
 15945  0120BE  A4D8               	btfss	status,2,c
 15946  0120C0  0012               	return	
 15947                           
 15948                           ; BSR set to: 0
 15949                           ;Port.c: 527: {
 15950                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 15951  0120C2  0100               	movlb	0	; () banked
 15952  0120C4  EE20 F002          	lfsr	2,2
 15953  0120C8  51EF               	movf	Port_SetType@pInput& (0+255),w,b
 15954  0120CA  26D9               	addwf	fsr2l,f,c
 15955  0120CC  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15956  0120CE  22DA               	addwfc	fsr2h,f,c
 15957  0120D0  CFDE F0F2          	movff	postinc2,??_Port_SetType
 15958  0120D4  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
 15959  0120D8  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
 15960  0120DC  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
 15961  0120E0  0E00               	movlw	0
 15962  0120E2  6EDF               	movwf	indf2,c
 15963                           
 15964                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 15965  0120E4  0100               	movlb	0	; () banked
 15966  0120E6  EE20 F004          	lfsr	2,4
 15967  0120EA  D036               	goto	L21
 15968  0120EC                     
 15969                           ; BSR set to: 0
 15970                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 15971                           
 15972                           ; BSR set to: 0
 15973  0120EC  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15974  0120F0  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15975  0120F4  0E02               	movlw	2
 15976  0120F6  0100               	movlb	0	; () banked
 15977  0120F8  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15978  0120FA  EC39  F0B1         	call	_Port_CheckPortType	;wreg free
 15979  0120FE  0100               	movlb	0	; () banked
 15980  012100  6FF4               	movwf	Port_SetType@Output& (0+255),b
 15981  012102  0100               	movlb	0	; () banked
 15982  012104  51F4               	movf	Port_SetType@Output& (0+255),w,b
 15983  012106  A4D8               	btfss	status,2,c
 15984  012108  0012               	return	
 15985                           
 15986                           ; BSR set to: 0
 15987                           ;Port.c: 538: {
 15988                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 15989  01210A  0100               	movlb	0	; () banked
 15990  01210C  EE20 F002          	lfsr	2,2
 15991  012110  51EF               	movf	Port_SetType@pInput& (0+255),w,b
 15992  012112  26D9               	addwf	fsr2l,f,c
 15993  012114  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15994  012116  22DA               	addwfc	fsr2h,f,c
 15995  012118  CFDE F0F2          	movff	postinc2,??_Port_SetType
 15996  01211C  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
 15997  012120  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
 15998  012124  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
 15999  012128  0EFF               	movlw	255
 16000  01212A  6EDF               	movwf	indf2,c
 16001                           
 16002                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16003  01212C  0100               	movlb	0	; () banked
 16004  01212E  EE20 F004          	lfsr	2,4
 16005  012132  D7AA               	goto	L11
 16006  012134                     
 16007                           ; BSR set to: 0
 16008                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16009                           
 16010                           ; BSR set to: 0
 16011  012134  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16012  012138  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16013  01213C  0E00               	movlw	0
 16014  01213E  0100               	movlb	0	; () banked
 16015  012140  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16016  012142  EC39  F0B1         	call	_Port_CheckPortType	;wreg free
 16017  012146  0100               	movlb	0	; () banked
 16018  012148  6FF4               	movwf	Port_SetType@Output& (0+255),b
 16019  01214A  0100               	movlb	0	; () banked
 16020  01214C  51F4               	movf	Port_SetType@Output& (0+255),w,b
 16021  01214E  A4D8               	btfss	status,2,c
 16022  012150  0012               	return	
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;Port.c: 549: {
 16026                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16027  012152  0100               	movlb	0	; () banked
 16028  012154  EE20 F002          	lfsr	2,2
 16029  012158                     L21:
 16030  012158  51EF               	movf	Port_SetType@pInput& (0+255),w,b
 16031  01215A  26D9               	addwf	fsr2l,f,c
 16032  01215C  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16033  01215E  22DA               	addwfc	fsr2h,f,c
 16034  012160  CFDE F0F2          	movff	postinc2,??_Port_SetType
 16035  012164  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
 16036  012168  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
 16037  01216C  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
 16038  012170  0E00               	movlw	0
 16039  012172                     L10:
 16040  012172  6EDF               	movwf	indf2,c
 16041                           
 16042                           ;Port.c: 552: }
 16043  012174  D00E               	goto	l511
 16044  012176                     l509:
 16045                           
 16046                           ; BSR set to: 0
 16047                           
 16048                           ; BSR set to: 0
 16049  012176  0100               	movlb	0	; () banked
 16050  012178  51F1               	movf	Port_SetType@pType& (0+255),w,b
 16051                           
 16052                           ; Switch size 1, requested type "space"
 16053                           ; Number of cases is 4, Range of values is 0 to 3
 16054                           ; switch strategies available:
 16055                           ; Name         Instructions Cycles
 16056                           ; simple_byte           13     7 (average)
 16057                           ;	Chosen strategy is simple_byte
 16058  01217A  0A00               	xorlw	0	; case 0
 16059  01217C  B4D8               	btfsc	status,2,c
 16060  01217E  D781               	goto	l510
 16061  012180  0A01               	xorlw	1	; case 1
 16062  012182  B4D8               	btfsc	status,2,c
 16063  012184  D78F               	goto	l512
 16064  012186  0A03               	xorlw	3	; case 2
 16065  012188  B4D8               	btfsc	status,2,c
 16066  01218A  D7B0               	goto	l516
 16067  01218C  0A01               	xorlw	1	; case 3
 16068  01218E  B4D8               	btfsc	status,2,c
 16069  012190  D7D1               	goto	l519
 16070  012192                     l511:
 16071                           
 16072                           ; BSR set to: 0
 16073                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16074                           
 16075                           ; BSR set to: 0
 16076  012192  0E08               	movlw	8
 16077  012194  0100               	movlb	0	; () banked
 16078  012196  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16079  012198  0100               	movlb	0	; () banked
 16080  01219A  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16081  01219C  0E00               	movlw	0
 16082  01219E  0100               	movlb	0	; () banked
 16083  0121A0  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16084  0121A2  0100               	movlb	0	; () banked
 16085  0121A4  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16086  0121A6  0E00               	movlw	0
 16087  0121A8  0100               	movlb	0	; () banked
 16088  0121AA  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16089  0121AC  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16090  0121B0  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16091                           
 16092                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16093  0121B4  0E08               	movlw	8
 16094  0121B6  0100               	movlb	0	; () banked
 16095  0121B8  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16096  0121BA  0100               	movlb	0	; () banked
 16097  0121BC  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16098  0121BE  0E00               	movlw	0
 16099  0121C0  0100               	movlb	0	; () banked
 16100  0121C2  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16101  0121C4  0100               	movlb	0	; () banked
 16102  0121C6  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16103  0121C8  0E01               	movlw	1
 16104  0121CA  0100               	movlb	0	; () banked
 16105  0121CC  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16106  0121CE  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16107  0121D2  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16108                           
 16109                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16110  0121D6  0E08               	movlw	8
 16111  0121D8  0100               	movlb	0	; () banked
 16112  0121DA  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16113  0121DC  0100               	movlb	0	; () banked
 16114  0121DE  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16115  0121E0  0E00               	movlw	0
 16116  0121E2  0100               	movlb	0	; () banked
 16117  0121E4  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16118  0121E6  0100               	movlb	0	; () banked
 16119  0121E8  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16120  0121EA  0E02               	movlw	2
 16121  0121EC  0100               	movlb	0	; () banked
 16122  0121EE  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16123  0121F0  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16124  0121F4  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16125                           
 16126                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16127  0121F8  0E08               	movlw	8
 16128  0121FA  0100               	movlb	0	; () banked
 16129  0121FC  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16130  0121FE  0100               	movlb	0	; () banked
 16131  012200  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16132  012202  0E00               	movlw	0
 16133  012204  0100               	movlb	0	; () banked
 16134  012206  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16135  012208  0100               	movlb	0	; () banked
 16136  01220A  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16137  01220C  0E03               	movlw	3
 16138  01220E  0100               	movlb	0	; () banked
 16139  012210  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16140  012212  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16141  012216  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16142                           
 16143                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16144  01221A  0E08               	movlw	8
 16145  01221C  0100               	movlb	0	; () banked
 16146  01221E  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16147  012220  0100               	movlb	0	; () banked
 16148  012222  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16149  012224  0E00               	movlw	0
 16150  012226  0100               	movlb	0	; () banked
 16151  012228  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16152  01222A  0100               	movlb	0	; () banked
 16153  01222C  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16154  01222E  0E04               	movlw	4
 16155  012230  0100               	movlb	0	; () banked
 16156  012232  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16157  012234  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16158  012238  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16159                           
 16160                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16161  01223C  0E08               	movlw	8
 16162  01223E  0100               	movlb	0	; () banked
 16163  012240  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16164  012242  0100               	movlb	0	; () banked
 16165  012244  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16166  012246  0E00               	movlw	0
 16167  012248  0100               	movlb	0	; () banked
 16168  01224A  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16169  01224C  0100               	movlb	0	; () banked
 16170  01224E  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16171  012250  0E05               	movlw	5
 16172  012252  0100               	movlb	0	; () banked
 16173  012254  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16174  012256  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16175  01225A  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16176                           
 16177                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16178  01225E  0E08               	movlw	8
 16179  012260  0100               	movlb	0	; () banked
 16180  012262  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16181  012264  0100               	movlb	0	; () banked
 16182  012266  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16183  012268  0E00               	movlw	0
 16184  01226A  0100               	movlb	0	; () banked
 16185  01226C  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16186  01226E  0100               	movlb	0	; () banked
 16187  012270  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16188  012272  0E06               	movlw	6
 16189  012274  0100               	movlb	0	; () banked
 16190  012276  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16191  012278  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16192  01227C  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16193                           
 16194                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 16195  012280  0E08               	movlw	8
 16196  012282  0100               	movlb	0	; () banked
 16197  012284  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
 16198  012286  0100               	movlb	0	; () banked
 16199  012288  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 16200  01228A  0E00               	movlw	0
 16201  01228C  0100               	movlb	0	; () banked
 16202  01228E  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16203  012290  0100               	movlb	0	; () banked
 16204  012292  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16205  012294  0E07               	movlw	7
 16206  012296  0100               	movlb	0	; () banked
 16207  012298  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 16208  01229A  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
 16209  01229E  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 16210  0122A2  0012               	return	
 16211  0122A4                     __end_of_Port_SetType:
 16212                           	opt stack 0
 16213                           tblptru	equ	0xFF8
 16214                           tblptrh	equ	0xFF7
 16215                           tblptrl	equ	0xFF6
 16216                           tablat	equ	0xFF5
 16217                           prodh	equ	0xFF4
 16218                           prodl	equ	0xFF3
 16219                           intcon	equ	0xFF2
 16220                           postinc0	equ	0xFEE
 16221                           wreg	equ	0xFE8
 16222                           indf1	equ	0xFE7
 16223                           postdec1	equ	0xFE5
 16224                           fsr1h	equ	0xFE2
 16225                           fsr1l	equ	0xFE1
 16226                           indf2	equ	0xFDF
 16227                           postinc2	equ	0xFDE
 16228                           postdec2	equ	0xFDD
 16229                           fsr2h	equ	0xFDA
 16230                           fsr2l	equ	0xFD9
 16231                           status	equ	0xFD8
 16232                           
 16233 ;; *************** function _Port_CheckPortType *****************
 16234 ;; Defined at:
 16235 ;;		line 138 in file "Library/Port.c"
 16236 ;; Parameters:    Size  Location     Type
 16237 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16238 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16239 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16240 ;;  pDrive          1   56[BANK0 ] enum E6469
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;  Output          1   57[BANK0 ] enum E6475
 16243 ;; Return value:  Size  Location     Type
 16244 ;;                  1    wreg      enum E6475
 16245 ;; Registers used:
 16246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16247 ;; Tracked objects:
 16248 ;;		On entry : 0/0
 16249 ;;		On exit  : 0/0
 16250 ;;		Unchanged: 0/0
 16251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16252 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16256 ;;Total ram usage:        4 bytes
 16257 ;; Hardware stack levels used:    1
 16258 ;; Hardware stack levels required when called:   13
 16259 ;; This function calls:
 16260 ;;		_Port_CheckQuadType
 16261 ;; This function is called by:
 16262 ;;		_Port_SetType
 16263 ;; This function uses a non-reentrant model
 16264 ;;
 16265                           
 16266                           	psect	text65
 16267  016272                     __ptext65:
 16268                           	opt stack 0
 16269  016272                     _Port_CheckPortType:
 16270                           	opt stack 14
 16271                           
 16272                           ;Port.c: 140: ePinError Output = ePinErrorState;
 16273                           
 16274                           ;incstack = 0
 16275  016272  0E05               	movlw	5
 16276  016274  0100               	movlb	0	; () banked
 16277  016276  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 16281  016278  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16282  01627C  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16283  016280  0E00               	movlw	0
 16284  016282  0100               	movlb	0	; () banked
 16285  016284  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16286  016286  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16287  01628A  ECCB  F0AF         	call	_Port_CheckQuadType	;wreg free
 16288  01628E  0100               	movlb	0	; () banked
 16289  016290  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
 16290  016292  0100               	movlb	0	; () banked
 16291  016294  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
 16292  016296  A4D8               	btfss	status,2,c
 16293  016298  D00D               	goto	l397
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 16297  01629A  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16298  01629E  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16299  0162A2  0E01               	movlw	1
 16300  0162A4  0100               	movlb	0	; () banked
 16301  0162A6  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16302  0162A8  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16303  0162AC  ECCB  F0AF         	call	_Port_CheckQuadType	;wreg free
 16304  0162B0  0100               	movlb	0	; () banked
 16305  0162B2  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
 16306  0162B4                     l397:
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;Port.c: 146: return Output;
 16310                           
 16311                           ; BSR set to: 0
 16312  0162B4  0100               	movlb	0	; () banked
 16313  0162B6  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
 16314  0162B8  0012               	return	
 16315  0162BA                     __end_of_Port_CheckPortType:
 16316                           	opt stack 0
 16317                           tblptru	equ	0xFF8
 16318                           tblptrh	equ	0xFF7
 16319                           tblptrl	equ	0xFF6
 16320                           tablat	equ	0xFF5
 16321                           prodh	equ	0xFF4
 16322                           prodl	equ	0xFF3
 16323                           intcon	equ	0xFF2
 16324                           postinc0	equ	0xFEE
 16325                           wreg	equ	0xFE8
 16326                           indf1	equ	0xFE7
 16327                           postdec1	equ	0xFE5
 16328                           fsr1h	equ	0xFE2
 16329                           fsr1l	equ	0xFE1
 16330                           indf2	equ	0xFDF
 16331                           postinc2	equ	0xFDE
 16332                           postdec2	equ	0xFDD
 16333                           fsr2h	equ	0xFDA
 16334                           fsr2l	equ	0xFD9
 16335                           status	equ	0xFD8
 16336                           
 16337 ;; *************** function _Port_Set *****************
 16338 ;; Defined at:
 16339 ;;		line 570 in file "Library/Port.c"
 16340 ;; Parameters:    Size  Location     Type
 16341 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16342 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16343 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16344 ;;  pValue          1   17[BANK0 ] unsigned char 
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 16347 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 16348 ;;  Type            1   38[BANK0 ] enum E6795
 16349 ;; Return value:  Size  Location     Type
 16350 ;;                  1    wreg      void 
 16351 ;; Registers used:
 16352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16353 ;; Tracked objects:
 16354 ;;		On entry : 0/0
 16355 ;;		On exit  : 0/0
 16356 ;;		Unchanged: 0/0
 16357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16358 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16359 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16360 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16361 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16362 ;;Total ram usage:       24 bytes
 16363 ;; Hardware stack levels used:    1
 16364 ;; Hardware stack levels required when called:   10
 16365 ;; This function calls:
 16366 ;;		_Byte_SetByte
 16367 ;;		_Word_GetPair
 16368 ;; This function is called by:
 16369 ;;		_Port_Init
 16370 ;;		_Port_Toggle
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           	psect	text66
 16375  011538                     __ptext66:
 16376                           	opt stack 0
 16377  011538                     _Port_Set:
 16378                           	opt stack 17
 16379                           
 16380                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 16381                           
 16382                           ; BSR set to: 0
 16383                           ;incstack = 0
 16384  011538  0E08               	movlw	8
 16385  01153A  0100               	movlb	0	; () banked
 16386  01153C  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16387  01153E  0100               	movlb	0	; () banked
 16388  011540  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16389  011542  0E00               	movlw	0
 16390  011544  0100               	movlb	0	; () banked
 16391  011546  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16392  011548  0100               	movlb	0	; () banked
 16393  01154A  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16394  01154C  0E00               	movlw	0
 16395  01154E  0100               	movlb	0	; () banked
 16396  011550  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16397  011552  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16398  011556  0100               	movlb	0	; () banked
 16399  011558  6FDB               	movwf	Port_Set@Type& (0+255),b
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 16403  01155A  0100               	movlb	0	; () banked
 16404  01155C  51DB               	movf	Port_Set@Type& (0+255),w,b
 16405  01155E  0100               	movlb	0	; () banked
 16406  011560  6FC7               	movwf	??_Port_Set& (0+255),b
 16407  011562  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16408  011564  0E0E               	movlw	14
 16409  011566                     u10825:
 16410  011566  90D8               	bcf	status,0,c
 16411  011568  0100               	movlb	0	; () banked
 16412  01156A  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16413  01156C  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16414  01156E  2EE8               	decfsz	wreg,f,c
 16415  011570  D7FA               	goto	u10825
 16416  011572  0100               	movlb	0	; () banked
 16417  011574  51DB               	movf	Port_Set@Type& (0+255),w,b
 16418  011576  0100               	movlb	0	; () banked
 16419  011578  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
 16420  01157A  6BCA               	clrf	(??_Port_Set+3)& (0+255),b
 16421  01157C  0E0C               	movlw	12
 16422  01157E                     u10835:
 16423  01157E  90D8               	bcf	status,0,c
 16424  011580  0100               	movlb	0	; () banked
 16425  011582  37C9               	rlcf	(??_Port_Set+2)& (0+255),f,b
 16426  011584  37CA               	rlcf	(??_Port_Set+3)& (0+255),f,b
 16427  011586  2EE8               	decfsz	wreg,f,c
 16428  011588  D7FA               	goto	u10835
 16429  01158A  0100               	movlb	0	; () banked
 16430  01158C  51DB               	movf	Port_Set@Type& (0+255),w,b
 16431  01158E  0100               	movlb	0	; () banked
 16432  011590  6FCB               	movwf	(??_Port_Set+4)& (0+255),b
 16433  011592  6BCC               	clrf	(??_Port_Set+5)& (0+255),b
 16434  011594  0E0A               	movlw	10
 16435  011596                     u10845:
 16436  011596  90D8               	bcf	status,0,c
 16437  011598  0100               	movlb	0	; () banked
 16438  01159A  37CB               	rlcf	(??_Port_Set+4)& (0+255),f,b
 16439  01159C  37CC               	rlcf	(??_Port_Set+5)& (0+255),f,b
 16440  01159E  2EE8               	decfsz	wreg,f,c
 16441  0115A0  D7FA               	goto	u10845
 16442  0115A2  0100               	movlb	0	; () banked
 16443  0115A4  51DB               	movf	Port_Set@Type& (0+255),w,b
 16444  0115A6  0100               	movlb	0	; () banked
 16445  0115A8  6FCE               	movwf	(??_Port_Set+7)& (0+255),b
 16446  0115AA  6BCD               	clrf	(??_Port_Set+6)& (0+255),b
 16447  0115AC  0100               	movlb	0	; () banked
 16448  0115AE  51DB               	movf	Port_Set@Type& (0+255),w,b
 16449  0115B0  0100               	movlb	0	; () banked
 16450  0115B2  6FCF               	movwf	(??_Port_Set+8)& (0+255),b
 16451  0115B4  6BD0               	clrf	(??_Port_Set+9)& (0+255),b
 16452  0115B6  0E06               	movlw	6
 16453  0115B8                     u10855:
 16454  0115B8  90D8               	bcf	status,0,c
 16455  0115BA  0100               	movlb	0	; () banked
 16456  0115BC  37CF               	rlcf	(??_Port_Set+8)& (0+255),f,b
 16457  0115BE  37D0               	rlcf	(??_Port_Set+9)& (0+255),f,b
 16458  0115C0  2EE8               	decfsz	wreg,f,c
 16459  0115C2  D7FA               	goto	u10855
 16460  0115C4  0100               	movlb	0	; () banked
 16461  0115C6  51DB               	movf	Port_Set@Type& (0+255),w,b
 16462  0115C8  0100               	movlb	0	; () banked
 16463  0115CA  6FD1               	movwf	(??_Port_Set+10)& (0+255),b
 16464  0115CC  6BD2               	clrf	(??_Port_Set+11)& (0+255),b
 16465  0115CE  0100               	movlb	0	; () banked
 16466  0115D0  3BD1               	swapf	(??_Port_Set+10)& (0+255),f,b
 16467  0115D2  3BD2               	swapf	(??_Port_Set+11)& (0+255),f,b
 16468  0115D4  0EF0               	movlw	240
 16469  0115D6  17D2               	andwf	(??_Port_Set+11)& (0+255),f,b
 16470  0115D8  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
 16471  0115DA  0B0F               	andlw	15
 16472  0115DC  13D2               	iorwf	(??_Port_Set+11)& (0+255),f,b
 16473  0115DE  0EF0               	movlw	240
 16474  0115E0  17D1               	andwf	(??_Port_Set+10)& (0+255),f,b
 16475  0115E2  0100               	movlb	0	; () banked
 16476  0115E4  51DB               	movf	Port_Set@Type& (0+255),w,b
 16477  0115E6  0100               	movlb	0	; () banked
 16478  0115E8  6FD3               	movwf	(??_Port_Set+12)& (0+255),b
 16479  0115EA  6BD4               	clrf	(??_Port_Set+13)& (0+255),b
 16480  0115EC  0100               	movlb	0	; () banked
 16481  0115EE  90D8               	bcf	status,0,c
 16482  0115F0  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16483  0115F2  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16484  0115F4  0100               	movlb	0	; () banked
 16485  0115F6  90D8               	bcf	status,0,c
 16486  0115F8  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16487  0115FA  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16488  0115FC  0100               	movlb	0	; () banked
 16489  0115FE  51DB               	movf	Port_Set@Type& (0+255),w,b
 16490  011600  0100               	movlb	0	; () banked
 16491  011602  6FD5               	movwf	(??_Port_Set+14)& (0+255),b
 16492  011604  6BD6               	clrf	(??_Port_Set+15)& (0+255),b
 16493  011606  0100               	movlb	0	; () banked
 16494  011608  51D3               	movf	(??_Port_Set+12)& (0+255),w,b
 16495  01160A  0100               	movlb	0	; () banked
 16496  01160C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16497  01160E  0100               	movlb	0	; () banked
 16498  011610  51D4               	movf	(??_Port_Set+13)& (0+255),w,b
 16499  011612  0100               	movlb	0	; () banked
 16500  011614  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16501  011616  0100               	movlb	0	; () banked
 16502  011618  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
 16503  01161A  0100               	movlb	0	; () banked
 16504  01161C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16505  01161E  0100               	movlb	0	; () banked
 16506  011620  51D2               	movf	(??_Port_Set+11)& (0+255),w,b
 16507  011622  0100               	movlb	0	; () banked
 16508  011624  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16509  011626  0100               	movlb	0	; () banked
 16510  011628  51CF               	movf	(??_Port_Set+8)& (0+255),w,b
 16511  01162A  0100               	movlb	0	; () banked
 16512  01162C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16513  01162E  0100               	movlb	0	; () banked
 16514  011630  51D0               	movf	(??_Port_Set+9)& (0+255),w,b
 16515  011632  0100               	movlb	0	; () banked
 16516  011634  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16517  011636  0100               	movlb	0	; () banked
 16518  011638  51CD               	movf	(??_Port_Set+6)& (0+255),w,b
 16519  01163A  0100               	movlb	0	; () banked
 16520  01163C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16521  01163E  0100               	movlb	0	; () banked
 16522  011640  51CE               	movf	(??_Port_Set+7)& (0+255),w,b
 16523  011642  0100               	movlb	0	; () banked
 16524  011644  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16525  011646  0100               	movlb	0	; () banked
 16526  011648  51CB               	movf	(??_Port_Set+4)& (0+255),w,b
 16527  01164A  0100               	movlb	0	; () banked
 16528  01164C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16529  01164E  0100               	movlb	0	; () banked
 16530  011650  51CC               	movf	(??_Port_Set+5)& (0+255),w,b
 16531  011652  0100               	movlb	0	; () banked
 16532  011654  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16533  011656  0100               	movlb	0	; () banked
 16534  011658  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
 16535  01165A  0100               	movlb	0	; () banked
 16536  01165C  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16537  01165E  0100               	movlb	0	; () banked
 16538  011660  51CA               	movf	(??_Port_Set+3)& (0+255),w,b
 16539  011662  0100               	movlb	0	; () banked
 16540  011664  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16541  011666  0100               	movlb	0	; () banked
 16542  011668  51C7               	movf	??_Port_Set& (0+255),w,b
 16543  01166A  0100               	movlb	0	; () banked
 16544  01166C  11D5               	iorwf	(??_Port_Set+14)& (0+255),w,b
 16545  01166E  0100               	movlb	0	; () banked
 16546  011670  6FD7               	movwf	Port_Set@TypeRequired& (0+255),b
 16547  011672  0100               	movlb	0	; () banked
 16548  011674  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16549  011676  0100               	movlb	0	; () banked
 16550  011678  11D6               	iorwf	(??_Port_Set+15)& (0+255),w,b
 16551  01167A  0100               	movlb	0	; () banked
 16552  01167C  6FD8               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 16553                           
 16554                           ; BSR set to: 0
 16555                           ;Port.c: 574: UINT16 TypeActual = Type;
 16556  01167E  C0DB  F0D9         	movff	Port_Set@Type,Port_Set@TypeActual
 16557  011682  0100               	movlb	0	; () banked
 16558  011684  6BDA               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 16562  011686  0E08               	movlw	8
 16563  011688  0100               	movlb	0	; () banked
 16564  01168A  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16565  01168C  0100               	movlb	0	; () banked
 16566  01168E  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16567  011690  0E00               	movlw	0
 16568  011692  0100               	movlb	0	; () banked
 16569  011694  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16570  011696  0100               	movlb	0	; () banked
 16571  011698  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16572  01169A  0E01               	movlw	1
 16573  01169C  0100               	movlb	0	; () banked
 16574  01169E  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16575  0116A0  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16576  0116A4  0100               	movlb	0	; () banked
 16577  0116A6  6FC7               	movwf	??_Port_Set& (0+255),b
 16578  0116A8  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16579  0116AA  0100               	movlb	0	; () banked
 16580  0116AC  90D8               	bcf	status,0,c
 16581  0116AE  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16582  0116B0  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16583  0116B2  0100               	movlb	0	; () banked
 16584  0116B4  90D8               	bcf	status,0,c
 16585  0116B6  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16586  0116B8  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16587  0116BA  0100               	movlb	0	; () banked
 16588  0116BC  51C7               	movf	??_Port_Set& (0+255),w,b
 16589  0116BE  0100               	movlb	0	; () banked
 16590  0116C0  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16591  0116C2  0100               	movlb	0	; () banked
 16592  0116C4  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16593  0116C6  0100               	movlb	0	; () banked
 16594  0116C8  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16595                           
 16596                           ; BSR set to: 0
 16597                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 16598  0116CA  0E08               	movlw	8
 16599  0116CC  0100               	movlb	0	; () banked
 16600  0116CE  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16601  0116D0  0100               	movlb	0	; () banked
 16602  0116D2  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16603  0116D4  0E00               	movlw	0
 16604  0116D6  0100               	movlb	0	; () banked
 16605  0116D8  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16606  0116DA  0100               	movlb	0	; () banked
 16607  0116DC  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16608  0116DE  0E02               	movlw	2
 16609  0116E0  0100               	movlb	0	; () banked
 16610  0116E2  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16611  0116E4  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16612  0116E8  0100               	movlb	0	; () banked
 16613  0116EA  6FC7               	movwf	??_Port_Set& (0+255),b
 16614  0116EC  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16615  0116EE  0100               	movlb	0	; () banked
 16616  0116F0  3BC7               	swapf	??_Port_Set& (0+255),f,b
 16617  0116F2  3BC8               	swapf	(??_Port_Set+1)& (0+255),f,b
 16618  0116F4  0EF0               	movlw	240
 16619  0116F6  17C8               	andwf	(??_Port_Set+1)& (0+255),f,b
 16620  0116F8  51C7               	movf	??_Port_Set& (0+255),w,b
 16621  0116FA  0B0F               	andlw	15
 16622  0116FC  13C8               	iorwf	(??_Port_Set+1)& (0+255),f,b
 16623  0116FE  0EF0               	movlw	240
 16624  011700  17C7               	andwf	??_Port_Set& (0+255),f,b
 16625  011702  0100               	movlb	0	; () banked
 16626  011704  51C7               	movf	??_Port_Set& (0+255),w,b
 16627  011706  0100               	movlb	0	; () banked
 16628  011708  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16629  01170A  0100               	movlb	0	; () banked
 16630  01170C  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16631  01170E  0100               	movlb	0	; () banked
 16632  011710  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 16636  011712  0E08               	movlw	8
 16637  011714  0100               	movlb	0	; () banked
 16638  011716  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16639  011718  0100               	movlb	0	; () banked
 16640  01171A  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16641  01171C  0E00               	movlw	0
 16642  01171E  0100               	movlb	0	; () banked
 16643  011720  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16644  011722  0100               	movlb	0	; () banked
 16645  011724  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16646  011726  0E03               	movlw	3
 16647  011728  0100               	movlb	0	; () banked
 16648  01172A  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16649  01172C  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16650  011730  0100               	movlb	0	; () banked
 16651  011732  6FC7               	movwf	??_Port_Set& (0+255),b
 16652  011734  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16653  011736  0E06               	movlw	6
 16654  011738                     u10865:
 16655  011738  90D8               	bcf	status,0,c
 16656  01173A  0100               	movlb	0	; () banked
 16657  01173C  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16658  01173E  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16659  011740  2EE8               	decfsz	wreg,f,c
 16660  011742  D7FA               	goto	u10865
 16661  011744  0100               	movlb	0	; () banked
 16662  011746  51C7               	movf	??_Port_Set& (0+255),w,b
 16663  011748  0100               	movlb	0	; () banked
 16664  01174A  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16665  01174C  0100               	movlb	0	; () banked
 16666  01174E  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16667  011750  0100               	movlb	0	; () banked
 16668  011752  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 16672  011754  0E08               	movlw	8
 16673  011756  0100               	movlb	0	; () banked
 16674  011758  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16675  01175A  0100               	movlb	0	; () banked
 16676  01175C  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16677  01175E  0E00               	movlw	0
 16678  011760  0100               	movlb	0	; () banked
 16679  011762  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16680  011764  0100               	movlb	0	; () banked
 16681  011766  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16682  011768  0E04               	movlw	4
 16683  01176A  0100               	movlb	0	; () banked
 16684  01176C  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16685  01176E  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16686  011772  0100               	movlb	0	; () banked
 16687  011774  6FC7               	movwf	??_Port_Set& (0+255),b
 16688  011776  0100               	movlb	0	; () banked
 16689  011778  51C7               	movf	??_Port_Set& (0+255),w,b
 16690  01177A  0100               	movlb	0	; () banked
 16691  01177C  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
 16692  01177E  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16693  011780  0100               	movlb	0	; () banked
 16694  011782  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16695  011784  0100               	movlb	0	; () banked
 16696  011786  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16697  011788  0100               	movlb	0	; () banked
 16698  01178A  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
 16699  01178C  0100               	movlb	0	; () banked
 16700  01178E  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 16704  011790  0E08               	movlw	8
 16705  011792  0100               	movlb	0	; () banked
 16706  011794  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16707  011796  0100               	movlb	0	; () banked
 16708  011798  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16709  01179A  0E00               	movlw	0
 16710  01179C  0100               	movlb	0	; () banked
 16711  01179E  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16712  0117A0  0100               	movlb	0	; () banked
 16713  0117A2  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16714  0117A4  0E05               	movlw	5
 16715  0117A6  0100               	movlb	0	; () banked
 16716  0117A8  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16717  0117AA  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16718  0117AE  0100               	movlb	0	; () banked
 16719  0117B0  6FC7               	movwf	??_Port_Set& (0+255),b
 16720  0117B2  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16721  0117B4  0E0A               	movlw	10
 16722  0117B6                     u10875:
 16723  0117B6  90D8               	bcf	status,0,c
 16724  0117B8  0100               	movlb	0	; () banked
 16725  0117BA  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16726  0117BC  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16727  0117BE  2EE8               	decfsz	wreg,f,c
 16728  0117C0  D7FA               	goto	u10875
 16729  0117C2  0100               	movlb	0	; () banked
 16730  0117C4  51C7               	movf	??_Port_Set& (0+255),w,b
 16731  0117C6  0100               	movlb	0	; () banked
 16732  0117C8  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16733  0117CA  0100               	movlb	0	; () banked
 16734  0117CC  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16735  0117CE  0100               	movlb	0	; () banked
 16736  0117D0  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 16740  0117D2  0E08               	movlw	8
 16741  0117D4  0100               	movlb	0	; () banked
 16742  0117D6  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16743  0117D8  0100               	movlb	0	; () banked
 16744  0117DA  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16745  0117DC  0E00               	movlw	0
 16746  0117DE  0100               	movlb	0	; () banked
 16747  0117E0  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16748  0117E2  0100               	movlb	0	; () banked
 16749  0117E4  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16750  0117E6  0E06               	movlw	6
 16751  0117E8  0100               	movlb	0	; () banked
 16752  0117EA  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16753  0117EC  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16754  0117F0  0100               	movlb	0	; () banked
 16755  0117F2  6FC7               	movwf	??_Port_Set& (0+255),b
 16756  0117F4  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16757  0117F6  0E0C               	movlw	12
 16758  0117F8                     u10885:
 16759  0117F8  90D8               	bcf	status,0,c
 16760  0117FA  0100               	movlb	0	; () banked
 16761  0117FC  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16762  0117FE  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16763  011800  2EE8               	decfsz	wreg,f,c
 16764  011802  D7FA               	goto	u10885
 16765  011804  0100               	movlb	0	; () banked
 16766  011806  51C7               	movf	??_Port_Set& (0+255),w,b
 16767  011808  0100               	movlb	0	; () banked
 16768  01180A  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16769  01180C  0100               	movlb	0	; () banked
 16770  01180E  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16771  011810  0100               	movlb	0	; () banked
 16772  011812  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 16776  011814  0E08               	movlw	8
 16777  011816  0100               	movlb	0	; () banked
 16778  011818  25C4               	addwf	Port_Set@pInput& (0+255),w,b
 16779  01181A  0100               	movlb	0	; () banked
 16780  01181C  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 16781  01181E  0E00               	movlw	0
 16782  011820  0100               	movlb	0	; () banked
 16783  011822  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16784  011824  0100               	movlb	0	; () banked
 16785  011826  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16786  011828  0E07               	movlw	7
 16787  01182A  0100               	movlb	0	; () banked
 16788  01182C  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
 16789  01182E  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16790  011832  0100               	movlb	0	; () banked
 16791  011834  6FC7               	movwf	??_Port_Set& (0+255),b
 16792  011836  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
 16793  011838  0E0E               	movlw	14
 16794  01183A                     u10895:
 16795  01183A  90D8               	bcf	status,0,c
 16796  01183C  0100               	movlb	0	; () banked
 16797  01183E  37C7               	rlcf	??_Port_Set& (0+255),f,b
 16798  011840  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16799  011842  2EE8               	decfsz	wreg,f,c
 16800  011844  D7FA               	goto	u10895
 16801  011846  0100               	movlb	0	; () banked
 16802  011848  51C7               	movf	??_Port_Set& (0+255),w,b
 16803  01184A  0100               	movlb	0	; () banked
 16804  01184C  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16805  01184E  0100               	movlb	0	; () banked
 16806  011850  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
 16807  011852  0100               	movlb	0	; () banked
 16808  011854  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16809                           
 16810                           ;Port.c: 584: if (TypeRequired == TypeActual)
 16811  011856  0100               	movlb	0	; () banked
 16812  011858  51D9               	movf	Port_Set@TypeActual& (0+255),w,b
 16813  01185A  0100               	movlb	0	; () banked
 16814  01185C  19D7               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 16815  01185E  E148               	bnz	l528
 16816  011860  0100               	movlb	0	; () banked
 16817  011862  51DA               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 16818  011864  0100               	movlb	0	; () banked
 16819  011866  19D8               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 16820  011868  A4D8               	btfss	status,2,c
 16821  01186A  0012               	return	
 16822  01186C  D032               	goto	l526
 16823  01186E                     
 16824                           ; BSR set to: 0
 16825                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 16826                           
 16827                           ; BSR set to: 0
 16828  01186E  0100               	movlb	0	; () banked
 16829  011870  EE20 F002          	lfsr	2,2
 16830  011874  51C4               	movf	Port_Set@pInput& (0+255),w,b
 16831  011876  26D9               	addwf	fsr2l,f,c
 16832  011878  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16833  01187A  22DA               	addwfc	fsr2h,f,c
 16834  01187C  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
 16835  011880  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
 16836  011884  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16837  011888  EC53  F0B6         	call	_Byte_SetByte	;wreg free
 16838                           
 16839                           ;Port.c: 594: break;
 16840  01188C  0012               	return	
 16841  01188E                     
 16842                           ;Port.c: 597: pValue = ~pValue;
 16843  01188E  0100               	movlb	0	; () banked
 16844  011890  1FC6               	comf	Port_Set@pValue& (0+255),f,b
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 16848  011892  0100               	movlb	0	; () banked
 16849  011894  EE20 F002          	lfsr	2,2
 16850  011898  51C4               	movf	Port_Set@pInput& (0+255),w,b
 16851  01189A  26D9               	addwf	fsr2l,f,c
 16852  01189C  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16853  01189E  22DA               	addwfc	fsr2h,f,c
 16854  0118A0  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
 16855  0118A4  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
 16856  0118A8  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16857  0118AC  EC53  F0B6         	call	_Byte_SetByte	;wreg free
 16858                           
 16859                           ;Port.c: 599: break;
 16860  0118B0  0012               	return	
 16861  0118B2                     
 16862                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 16863  0118B2  0100               	movlb	0	; () banked
 16864  0118B4  EE20 F004          	lfsr	2,4
 16865  0118B8  51C4               	movf	Port_Set@pInput& (0+255),w,b
 16866  0118BA  26D9               	addwf	fsr2l,f,c
 16867  0118BC  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16868  0118BE  22DA               	addwfc	fsr2h,f,c
 16869  0118C0  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
 16870  0118C4  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
 16871  0118C8  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16872  0118CC  EC53  F0B6         	call	_Byte_SetByte	;wreg free
 16873                           
 16874                           ;Port.c: 606: }
 16875                           
 16876                           ;Port.c: 605: break;
 16877                           
 16878                           ;Port.c: 604: default:
 16879                           
 16880                           ;Port.c: 603: break;
 16881  0118D0  0012               	return	
 16882  0118D2                     l526:
 16883  0118D2  0100               	movlb	0	; () banked
 16884  0118D4  51DB               	movf	Port_Set@Type& (0+255),w,b
 16885                           
 16886                           ; Switch size 1, requested type "space"
 16887                           ; Number of cases is 4, Range of values is 0 to 3
 16888                           ; switch strategies available:
 16889                           ; Name         Instructions Cycles
 16890                           ; simple_byte           13     7 (average)
 16891                           ;	Chosen strategy is simple_byte
 16892  0118D6  0A00               	xorlw	0	; case 0
 16893  0118D8  B4D8               	btfsc	status,2,c
 16894  0118DA  0012               	return	
 16895  0118DC  0A01               	xorlw	1	; case 1
 16896  0118DE  B4D8               	btfsc	status,2,c
 16897  0118E0  D7C6               	goto	l529
 16898  0118E2  0A03               	xorlw	3	; case 2
 16899  0118E4  B4D8               	btfsc	status,2,c
 16900  0118E6  D7D3               	goto	l531
 16901  0118E8  0A01               	xorlw	1	; case 3
 16902  0118EA  A4D8               	btfss	status,2,c
 16903                           
 16904                           ; BSR set to: 0
 16905                           
 16906                           ; BSR set to: 0
 16907                           ;Port.c: 607: }
 16908  0118EC  0012               	return	
 16909  0118EE  D7E1               	goto	l532
 16910  0118F0                     l528:
 16911  0118F0  0012               	return		;funcret
 16912  0118F2                     __end_of_Port_Set:
 16913                           	opt stack 0
 16914                           tblptru	equ	0xFF8
 16915                           tblptrh	equ	0xFF7
 16916                           tblptrl	equ	0xFF6
 16917                           tablat	equ	0xFF5
 16918                           prodh	equ	0xFF4
 16919                           prodl	equ	0xFF3
 16920                           intcon	equ	0xFF2
 16921                           postinc0	equ	0xFEE
 16922                           wreg	equ	0xFE8
 16923                           indf1	equ	0xFE7
 16924                           postdec1	equ	0xFE5
 16925                           fsr1h	equ	0xFE2
 16926                           fsr1l	equ	0xFE1
 16927                           indf2	equ	0xFDF
 16928                           postinc2	equ	0xFDE
 16929                           postdec2	equ	0xFDD
 16930                           fsr2h	equ	0xFDA
 16931                           fsr2l	equ	0xFD9
 16932                           status	equ	0xFD8
 16933                           
 16934 ;; *************** function _Byte_SetByte *****************
 16935 ;; Defined at:
 16936 ;;		line 110 in file "Library/Types.c"
 16937 ;; Parameters:    Size  Location     Type
 16938 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16939 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 16940 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16941 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16942 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16943 ;;		 -> NULL(0), 
 16944 ;;  pValue          1    2[BANK0 ] unsigned char 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;		None
 16947 ;; Return value:  Size  Location     Type
 16948 ;;                  1    wreg      void 
 16949 ;; Registers used:
 16950 ;;		fsr2l, fsr2h
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16956 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;Total ram usage:        3 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    7
 16963 ;; This function calls:
 16964 ;;		Nothing
 16965 ;; This function is called by:
 16966 ;;		_Port_Set
 16967 ;;		_I2C_Init
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           	psect	text67
 16972  016CA6                     __ptext67:
 16973                           	opt stack 0
 16974  016CA6                     _Byte_SetByte:
 16975                           	opt stack 19
 16976                           
 16977                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 16978                           
 16979                           ;incstack = 0
 16980  016CA6  C0B5  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 16981  016CAA  C0B6  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 16982  016CAE  C0B7  FFDF         	movff	Byte_SetByte@pValue,indf2
 16983  016CB2  0012               	return		;funcret
 16984  016CB4                     __end_of_Byte_SetByte:
 16985                           	opt stack 0
 16986                           tblptru	equ	0xFF8
 16987                           tblptrh	equ	0xFF7
 16988                           tblptrl	equ	0xFF6
 16989                           tablat	equ	0xFF5
 16990                           prodh	equ	0xFF4
 16991                           prodl	equ	0xFF3
 16992                           intcon	equ	0xFF2
 16993                           postinc0	equ	0xFEE
 16994                           wreg	equ	0xFE8
 16995                           indf1	equ	0xFE7
 16996                           postdec1	equ	0xFE5
 16997                           fsr1h	equ	0xFE2
 16998                           fsr1l	equ	0xFE1
 16999                           indf2	equ	0xFDF
 17000                           postinc2	equ	0xFDE
 17001                           postdec2	equ	0xFDD
 17002                           fsr2h	equ	0xFDA
 17003                           fsr2l	equ	0xFD9
 17004                           status	equ	0xFD8
 17005                           
 17006 ;; *************** function _GetPortTRIS *****************
 17007 ;; Defined at:
 17008 ;;		line 67 in file "Library/Port.c"
 17009 ;; Parameters:    Size  Location     Type
 17010 ;;  pInput          1    wreg     enum E6786
 17011 ;; Auto vars:     Size  Location     Type
 17012 ;;  pInput          1    2[BANK0 ] enum E6786
 17013 ;; Return value:  Size  Location     Type
 17014 ;;                  2    0[BANK0 ] PTR struct Byte
 17015 ;; Registers used:
 17016 ;;		wreg, status,2, status,0
 17017 ;; Tracked objects:
 17018 ;;		On entry : 0/0
 17019 ;;		On exit  : 0/0
 17020 ;;		Unchanged: 0/0
 17021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17026 ;;Total ram usage:        3 bytes
 17027 ;; Hardware stack levels used:    1
 17028 ;; Hardware stack levels required when called:    7
 17029 ;; This function calls:
 17030 ;;		Nothing
 17031 ;; This function is called by:
 17032 ;;		_Port_Init
 17033 ;; This function uses a non-reentrant model
 17034 ;;
 17035                           
 17036                           	psect	text68
 17037  014E3E                     __ptext68:
 17038                           	opt stack 0
 17039  014E3E                     _GetPortTRIS:
 17040                           	opt stack 20
 17041                           
 17042                           ;incstack = 0
 17043                           ;GetPortTRIS@pInput stored from wreg
 17044  014E3E  0100               	movlb	0	; () banked
 17045  014E40  6FB7               	movwf	GetPortTRIS@pInput& (0+255),b
 17046                           
 17047                           ;Port.c: 69: switch (pInput)
 17048  014E42  D038               	goto	l363
 17049  014E44                     
 17050                           ;Port.c: 72: return (BytePtr)&TRISA;
 17051  014E44  0E92               	movlw	146
 17052  014E46  0100               	movlb	0	; () banked
 17053  014E48  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17054  014E4A  0E0F               	movlw	15
 17055  014E4C  0100               	movlb	0	; () banked
 17056  014E4E  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17057                           
 17058                           ; BSR set to: 0
 17059  014E50  0012               	return	
 17060  014E52                     
 17061                           ; BSR set to: 0
 17062                           ;Port.c: 74: return (BytePtr)&TRISB;
 17063                           
 17064                           ; BSR set to: 0
 17065  014E52  0E93               	movlw	147
 17066  014E54  0100               	movlb	0	; () banked
 17067  014E56  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17068  014E58  0E0F               	movlw	15
 17069  014E5A  0100               	movlb	0	; () banked
 17070  014E5C  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17071                           
 17072                           ; BSR set to: 0
 17073  014E5E  0012               	return	
 17074  014E60                     
 17075                           ; BSR set to: 0
 17076                           ;Port.c: 76: return (BytePtr)&TRISC;
 17077                           
 17078                           ; BSR set to: 0
 17079  014E60  0E94               	movlw	148
 17080  014E62  0100               	movlb	0	; () banked
 17081  014E64  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17082  014E66  0E0F               	movlw	15
 17083  014E68  0100               	movlb	0	; () banked
 17084  014E6A  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17085                           
 17086                           ; BSR set to: 0
 17087  014E6C  0012               	return	
 17088  014E6E                     
 17089                           ; BSR set to: 0
 17090                           ;Port.c: 78: return (BytePtr)&TRISD;
 17091                           
 17092                           ; BSR set to: 0
 17093  014E6E  0E95               	movlw	149
 17094  014E70  0100               	movlb	0	; () banked
 17095  014E72  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17096  014E74  0E0F               	movlw	15
 17097  014E76  0100               	movlb	0	; () banked
 17098  014E78  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17099                           
 17100                           ; BSR set to: 0
 17101  014E7A  0012               	return	
 17102  014E7C                     
 17103                           ; BSR set to: 0
 17104                           ;Port.c: 80: return (BytePtr)&TRISE;
 17105                           
 17106                           ; BSR set to: 0
 17107  014E7C  0E96               	movlw	150
 17108  014E7E  0100               	movlb	0	; () banked
 17109  014E80  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17110  014E82  0E0F               	movlw	15
 17111  014E84  0100               	movlb	0	; () banked
 17112  014E86  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17113                           
 17114                           ; BSR set to: 0
 17115  014E88  0012               	return	
 17116  014E8A                     
 17117                           ; BSR set to: 0
 17118                           ;Port.c: 82: return (BytePtr)&TRISF;
 17119                           
 17120                           ; BSR set to: 0
 17121  014E8A  0E97               	movlw	151
 17122  014E8C  0100               	movlb	0	; () banked
 17123  014E8E  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17124  014E90  0E0F               	movlw	15
 17125  014E92  0100               	movlb	0	; () banked
 17126  014E94  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17127                           
 17128                           ; BSR set to: 0
 17129  014E96  0012               	return	
 17130  014E98                     
 17131                           ; BSR set to: 0
 17132                           ;Port.c: 84: return (BytePtr)&TRISG;
 17133                           
 17134                           ; BSR set to: 0
 17135  014E98  0E98               	movlw	152
 17136  014E9A  0100               	movlb	0	; () banked
 17137  014E9C  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17138  014E9E  0E0F               	movlw	15
 17139  014EA0  0100               	movlb	0	; () banked
 17140  014EA2  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17141                           
 17142                           ; BSR set to: 0
 17143  014EA4  0012               	return	
 17144  014EA6                     
 17145                           ; BSR set to: 0
 17146                           ;Port.c: 86: return (void*)0;
 17147                           
 17148                           ; BSR set to: 0
 17149  014EA6  0E00               	movlw	0
 17150  014EA8  0100               	movlb	0	; () banked
 17151  014EAA  6FB5               	movwf	?_GetPortTRIS& (0+255),b
 17152  014EAC  0E00               	movlw	0
 17153  014EAE  0100               	movlb	0	; () banked
 17154  014EB0  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17155                           
 17156                           ; BSR set to: 0
 17157                           ;Port.c: 87: }
 17158                           
 17159                           ; BSR set to: 0
 17160  014EB2  0012               	return	
 17161  014EB4                     l363:
 17162                           
 17163                           ; BSR set to: 0
 17164  014EB4  0100               	movlb	0	; () banked
 17165  014EB6  51B7               	movf	GetPortTRIS@pInput& (0+255),w,b
 17166                           
 17167                           ; Switch size 1, requested type "space"
 17168                           ; Number of cases is 7, Range of values is 0 to 6
 17169                           ; switch strategies available:
 17170                           ; Name         Instructions Cycles
 17171                           ; simple_byte           22    12 (average)
 17172                           ;	Chosen strategy is simple_byte
 17173  014EB8  0A00               	xorlw	0	; case 0
 17174  014EBA  B4D8               	btfsc	status,2,c
 17175  014EBC  D7C3               	goto	l364
 17176  014EBE  0A01               	xorlw	1	; case 1
 17177  014EC0  B4D8               	btfsc	status,2,c
 17178  014EC2  D7C7               	goto	l366
 17179  014EC4  0A03               	xorlw	3	; case 2
 17180  014EC6  B4D8               	btfsc	status,2,c
 17181  014EC8  D7CB               	goto	l367
 17182  014ECA  0A01               	xorlw	1	; case 3
 17183  014ECC  B4D8               	btfsc	status,2,c
 17184  014ECE  D7CF               	goto	l368
 17185  014ED0  0A07               	xorlw	7	; case 4
 17186  014ED2  B4D8               	btfsc	status,2,c
 17187  014ED4  D7D3               	goto	l369
 17188  014ED6  0A01               	xorlw	1	; case 5
 17189  014ED8  B4D8               	btfsc	status,2,c
 17190  014EDA  D7D7               	goto	l370
 17191  014EDC  0A03               	xorlw	3	; case 6
 17192  014EDE  B4D8               	btfsc	status,2,c
 17193  014EE0  D7DB               	goto	l371
 17194  014EE2  D7E1               	goto	l372
 17195  014EE4                     __end_of_GetPortTRIS:
 17196                           	opt stack 0
 17197                           tblptru	equ	0xFF8
 17198                           tblptrh	equ	0xFF7
 17199                           tblptrl	equ	0xFF6
 17200                           tablat	equ	0xFF5
 17201                           prodh	equ	0xFF4
 17202                           prodl	equ	0xFF3
 17203                           intcon	equ	0xFF2
 17204                           postinc0	equ	0xFEE
 17205                           wreg	equ	0xFE8
 17206                           indf1	equ	0xFE7
 17207                           postdec1	equ	0xFE5
 17208                           fsr1h	equ	0xFE2
 17209                           fsr1l	equ	0xFE1
 17210                           indf2	equ	0xFDF
 17211                           postinc2	equ	0xFDE
 17212                           postdec2	equ	0xFDD
 17213                           fsr2h	equ	0xFDA
 17214                           fsr2l	equ	0xFD9
 17215                           status	equ	0xFD8
 17216                           
 17217 ;; *************** function _GetPortProperties *****************
 17218 ;; Defined at:
 17219 ;;		line 21 in file "Library/Port.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;  pInput          1    wreg     enum E6786
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;  pInput          1    2[BANK0 ] enum E6786
 17224 ;; Return value:  Size  Location     Type
 17225 ;;                  2    0[BANK0 ] PTR struct PortProperty
 17226 ;; Registers used:
 17227 ;;		wreg, status,2, status,0
 17228 ;; Tracked objects:
 17229 ;;		On entry : 0/0
 17230 ;;		On exit  : 0/0
 17231 ;;		Unchanged: 0/0
 17232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17233 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;Total ram usage:        3 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; Hardware stack levels required when called:    7
 17240 ;; This function calls:
 17241 ;;		Nothing
 17242 ;; This function is called by:
 17243 ;;		_Port_Init
 17244 ;; This function uses a non-reentrant model
 17245 ;;
 17246                           
 17247                           	psect	text69
 17248  014EE4                     __ptext69:
 17249                           	opt stack 0
 17250  014EE4                     _GetPortProperties:
 17251                           	opt stack 20
 17252                           
 17253                           ; BSR set to: 0
 17254                           ;incstack = 0
 17255                           ;GetPortProperties@pInput stored from wreg
 17256  014EE4  0100               	movlb	0	; () banked
 17257  014EE6  6FB7               	movwf	GetPortProperties@pInput& (0+255),b
 17258                           
 17259                           ;Port.c: 23: switch (pInput)
 17260  014EE8  D038               	goto	l337
 17261  014EEA                     
 17262                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 17263  014EEA  0E57               	movlw	low _PortA_Property
 17264  014EEC  0100               	movlb	0	; () banked
 17265  014EEE  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17266  014EF0  0EFF               	movlw	high _PortA_Property
 17267  014EF2  0100               	movlb	0	; () banked
 17268  014EF4  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17269                           
 17270                           ; BSR set to: 0
 17271  014EF6  0012               	return	
 17272  014EF8                     
 17273                           ; BSR set to: 0
 17274                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 17275                           
 17276                           ; BSR set to: 0
 17277  014EF8  0E55               	movlw	low _PortB_Property
 17278  014EFA  0100               	movlb	0	; () banked
 17279  014EFC  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17280  014EFE  0EFF               	movlw	high _PortB_Property
 17281  014F00  0100               	movlb	0	; () banked
 17282  014F02  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17283                           
 17284                           ; BSR set to: 0
 17285  014F04  0012               	return	
 17286  014F06                     
 17287                           ; BSR set to: 0
 17288                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 17289                           
 17290                           ; BSR set to: 0
 17291  014F06  0E53               	movlw	low _PortC_Property
 17292  014F08  0100               	movlb	0	; () banked
 17293  014F0A  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17294  014F0C  0EFF               	movlw	high _PortC_Property
 17295  014F0E  0100               	movlb	0	; () banked
 17296  014F10  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17297                           
 17298                           ; BSR set to: 0
 17299  014F12  0012               	return	
 17300  014F14                     
 17301                           ; BSR set to: 0
 17302                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 17303                           
 17304                           ; BSR set to: 0
 17305  014F14  0E51               	movlw	low _PortD_Property
 17306  014F16  0100               	movlb	0	; () banked
 17307  014F18  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17308  014F1A  0EFF               	movlw	high _PortD_Property
 17309  014F1C  0100               	movlb	0	; () banked
 17310  014F1E  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17311                           
 17312                           ; BSR set to: 0
 17313  014F20  0012               	return	
 17314  014F22                     
 17315                           ; BSR set to: 0
 17316                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 17317                           
 17318                           ; BSR set to: 0
 17319  014F22  0E4F               	movlw	low _PortE_Property
 17320  014F24  0100               	movlb	0	; () banked
 17321  014F26  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17322  014F28  0EFF               	movlw	high _PortE_Property
 17323  014F2A  0100               	movlb	0	; () banked
 17324  014F2C  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17325                           
 17326                           ; BSR set to: 0
 17327  014F2E  0012               	return	
 17328  014F30                     
 17329                           ; BSR set to: 0
 17330                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 17331                           
 17332                           ; BSR set to: 0
 17333  014F30  0E4D               	movlw	low _PortF_Property
 17334  014F32  0100               	movlb	0	; () banked
 17335  014F34  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17336  014F36  0EFF               	movlw	high _PortF_Property
 17337  014F38  0100               	movlb	0	; () banked
 17338  014F3A  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17339                           
 17340                           ; BSR set to: 0
 17341  014F3C  0012               	return	
 17342  014F3E                     
 17343                           ; BSR set to: 0
 17344                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 17345                           
 17346                           ; BSR set to: 0
 17347  014F3E  0E4B               	movlw	low _PortG_Property
 17348  014F40  0100               	movlb	0	; () banked
 17349  014F42  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17350  014F44  0EFF               	movlw	high _PortG_Property
 17351  014F46  0100               	movlb	0	; () banked
 17352  014F48  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17353                           
 17354                           ; BSR set to: 0
 17355  014F4A  0012               	return	
 17356  014F4C                     
 17357                           ; BSR set to: 0
 17358                           ;Port.c: 40: return (void*)0;
 17359                           
 17360                           ; BSR set to: 0
 17361  014F4C  0E00               	movlw	0
 17362  014F4E  0100               	movlb	0	; () banked
 17363  014F50  6FB5               	movwf	?_GetPortProperties& (0+255),b
 17364  014F52  0E00               	movlw	0
 17365  014F54  0100               	movlb	0	; () banked
 17366  014F56  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;Port.c: 41: }
 17370                           
 17371                           ; BSR set to: 0
 17372  014F58  0012               	return	
 17373  014F5A                     l337:
 17374                           
 17375                           ; BSR set to: 0
 17376  014F5A  0100               	movlb	0	; () banked
 17377  014F5C  51B7               	movf	GetPortProperties@pInput& (0+255),w,b
 17378                           
 17379                           ; Switch size 1, requested type "space"
 17380                           ; Number of cases is 7, Range of values is 0 to 6
 17381                           ; switch strategies available:
 17382                           ; Name         Instructions Cycles
 17383                           ; simple_byte           22    12 (average)
 17384                           ;	Chosen strategy is simple_byte
 17385  014F5E  0A00               	xorlw	0	; case 0
 17386  014F60  B4D8               	btfsc	status,2,c
 17387  014F62  D7C3               	goto	l338
 17388  014F64  0A01               	xorlw	1	; case 1
 17389  014F66  B4D8               	btfsc	status,2,c
 17390  014F68  D7C7               	goto	l340
 17391  014F6A  0A03               	xorlw	3	; case 2
 17392  014F6C  B4D8               	btfsc	status,2,c
 17393  014F6E  D7CB               	goto	l341
 17394  014F70  0A01               	xorlw	1	; case 3
 17395  014F72  B4D8               	btfsc	status,2,c
 17396  014F74  D7CF               	goto	l342
 17397  014F76  0A07               	xorlw	7	; case 4
 17398  014F78  B4D8               	btfsc	status,2,c
 17399  014F7A  D7D3               	goto	l343
 17400  014F7C  0A01               	xorlw	1	; case 5
 17401  014F7E  B4D8               	btfsc	status,2,c
 17402  014F80  D7D7               	goto	l344
 17403  014F82  0A03               	xorlw	3	; case 6
 17404  014F84  B4D8               	btfsc	status,2,c
 17405  014F86  D7DB               	goto	l345
 17406  014F88  D7E1               	goto	l346
 17407  014F8A                     __end_of_GetPortProperties:
 17408                           	opt stack 0
 17409                           tblptru	equ	0xFF8
 17410                           tblptrh	equ	0xFF7
 17411                           tblptrl	equ	0xFF6
 17412                           tablat	equ	0xFF5
 17413                           prodh	equ	0xFF4
 17414                           prodl	equ	0xFF3
 17415                           intcon	equ	0xFF2
 17416                           postinc0	equ	0xFEE
 17417                           wreg	equ	0xFE8
 17418                           indf1	equ	0xFE7
 17419                           postdec1	equ	0xFE5
 17420                           fsr1h	equ	0xFE2
 17421                           fsr1l	equ	0xFE1
 17422                           indf2	equ	0xFDF
 17423                           postinc2	equ	0xFDE
 17424                           postdec2	equ	0xFDD
 17425                           fsr2h	equ	0xFDA
 17426                           fsr2l	equ	0xFD9
 17427                           status	equ	0xFD8
 17428                           
 17429 ;; *************** function _GetPortPORT *****************
 17430 ;; Defined at:
 17431 ;;		line 44 in file "Library/Port.c"
 17432 ;; Parameters:    Size  Location     Type
 17433 ;;  pInput          1    wreg     enum E6786
 17434 ;; Auto vars:     Size  Location     Type
 17435 ;;  pInput          1    2[BANK0 ] enum E6786
 17436 ;; Return value:  Size  Location     Type
 17437 ;;                  2    0[BANK0 ] PTR struct Byte
 17438 ;; Registers used:
 17439 ;;		wreg, status,2, status,0
 17440 ;; Tracked objects:
 17441 ;;		On entry : 0/0
 17442 ;;		On exit  : 0/0
 17443 ;;		Unchanged: 0/0
 17444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;Total ram usage:        3 bytes
 17450 ;; Hardware stack levels used:    1
 17451 ;; Hardware stack levels required when called:    7
 17452 ;; This function calls:
 17453 ;;		Nothing
 17454 ;; This function is called by:
 17455 ;;		_Port_Init
 17456 ;; This function uses a non-reentrant model
 17457 ;;
 17458                           
 17459                           	psect	text70
 17460  014F8A                     __ptext70:
 17461                           	opt stack 0
 17462  014F8A                     _GetPortPORT:
 17463                           	opt stack 20
 17464                           
 17465                           ; BSR set to: 0
 17466                           ;incstack = 0
 17467                           ;GetPortPORT@pInput stored from wreg
 17468  014F8A  0100               	movlb	0	; () banked
 17469  014F8C  6FB7               	movwf	GetPortPORT@pInput& (0+255),b
 17470                           
 17471                           ;Port.c: 46: switch (pInput)
 17472  014F8E  D038               	goto	l350
 17473  014F90                     
 17474                           ;Port.c: 49: return (BytePtr)&PORTA;
 17475  014F90  0E80               	movlw	128
 17476  014F92  0100               	movlb	0	; () banked
 17477  014F94  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17478  014F96  0E0F               	movlw	15
 17479  014F98  0100               	movlb	0	; () banked
 17480  014F9A  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17481                           
 17482                           ; BSR set to: 0
 17483  014F9C  0012               	return	
 17484  014F9E                     
 17485                           ; BSR set to: 0
 17486                           ;Port.c: 51: return (BytePtr)&PORTB;
 17487                           
 17488                           ; BSR set to: 0
 17489  014F9E  0E81               	movlw	129
 17490  014FA0  0100               	movlb	0	; () banked
 17491  014FA2  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17492  014FA4  0E0F               	movlw	15
 17493  014FA6  0100               	movlb	0	; () banked
 17494  014FA8  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17495                           
 17496                           ; BSR set to: 0
 17497  014FAA  0012               	return	
 17498  014FAC                     
 17499                           ; BSR set to: 0
 17500                           ;Port.c: 53: return (BytePtr)&PORTC;
 17501                           
 17502                           ; BSR set to: 0
 17503  014FAC  0E82               	movlw	130
 17504  014FAE  0100               	movlb	0	; () banked
 17505  014FB0  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17506  014FB2  0E0F               	movlw	15
 17507  014FB4  0100               	movlb	0	; () banked
 17508  014FB6  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17509                           
 17510                           ; BSR set to: 0
 17511  014FB8  0012               	return	
 17512  014FBA                     
 17513                           ; BSR set to: 0
 17514                           ;Port.c: 55: return (BytePtr)&PORTD;
 17515                           
 17516                           ; BSR set to: 0
 17517  014FBA  0E83               	movlw	131
 17518  014FBC  0100               	movlb	0	; () banked
 17519  014FBE  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17520  014FC0  0E0F               	movlw	15
 17521  014FC2  0100               	movlb	0	; () banked
 17522  014FC4  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17523                           
 17524                           ; BSR set to: 0
 17525  014FC6  0012               	return	
 17526  014FC8                     
 17527                           ; BSR set to: 0
 17528                           ;Port.c: 57: return (BytePtr)&PORTE;
 17529                           
 17530                           ; BSR set to: 0
 17531  014FC8  0E84               	movlw	132
 17532  014FCA  0100               	movlb	0	; () banked
 17533  014FCC  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17534  014FCE  0E0F               	movlw	15
 17535  014FD0  0100               	movlb	0	; () banked
 17536  014FD2  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17537                           
 17538                           ; BSR set to: 0
 17539  014FD4  0012               	return	
 17540  014FD6                     
 17541                           ; BSR set to: 0
 17542                           ;Port.c: 59: return (BytePtr)&PORTF;
 17543                           
 17544                           ; BSR set to: 0
 17545  014FD6  0E85               	movlw	133
 17546  014FD8  0100               	movlb	0	; () banked
 17547  014FDA  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17548  014FDC  0E0F               	movlw	15
 17549  014FDE  0100               	movlb	0	; () banked
 17550  014FE0  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17551                           
 17552                           ; BSR set to: 0
 17553  014FE2  0012               	return	
 17554  014FE4                     
 17555                           ; BSR set to: 0
 17556                           ;Port.c: 61: return (BytePtr)&PORTG;
 17557                           
 17558                           ; BSR set to: 0
 17559  014FE4  0E86               	movlw	134
 17560  014FE6  0100               	movlb	0	; () banked
 17561  014FE8  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17562  014FEA  0E0F               	movlw	15
 17563  014FEC  0100               	movlb	0	; () banked
 17564  014FEE  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17565                           
 17566                           ; BSR set to: 0
 17567  014FF0  0012               	return	
 17568  014FF2                     
 17569                           ; BSR set to: 0
 17570                           ;Port.c: 63: return (void*)0;
 17571                           
 17572                           ; BSR set to: 0
 17573  014FF2  0E00               	movlw	0
 17574  014FF4  0100               	movlb	0	; () banked
 17575  014FF6  6FB5               	movwf	?_GetPortPORT& (0+255),b
 17576  014FF8  0E00               	movlw	0
 17577  014FFA  0100               	movlb	0	; () banked
 17578  014FFC  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;Port.c: 64: }
 17582                           
 17583                           ; BSR set to: 0
 17584  014FFE  0012               	return	
 17585  015000                     l350:
 17586                           
 17587                           ; BSR set to: 0
 17588  015000  0100               	movlb	0	; () banked
 17589  015002  51B7               	movf	GetPortPORT@pInput& (0+255),w,b
 17590                           
 17591                           ; Switch size 1, requested type "space"
 17592                           ; Number of cases is 7, Range of values is 0 to 6
 17593                           ; switch strategies available:
 17594                           ; Name         Instructions Cycles
 17595                           ; simple_byte           22    12 (average)
 17596                           ;	Chosen strategy is simple_byte
 17597  015004  0A00               	xorlw	0	; case 0
 17598  015006  B4D8               	btfsc	status,2,c
 17599  015008  D7C3               	goto	l351
 17600  01500A  0A01               	xorlw	1	; case 1
 17601  01500C  B4D8               	btfsc	status,2,c
 17602  01500E  D7C7               	goto	l353
 17603  015010  0A03               	xorlw	3	; case 2
 17604  015012  B4D8               	btfsc	status,2,c
 17605  015014  D7CB               	goto	l354
 17606  015016  0A01               	xorlw	1	; case 3
 17607  015018  B4D8               	btfsc	status,2,c
 17608  01501A  D7CF               	goto	l355
 17609  01501C  0A07               	xorlw	7	; case 4
 17610  01501E  B4D8               	btfsc	status,2,c
 17611  015020  D7D3               	goto	l356
 17612  015022  0A01               	xorlw	1	; case 5
 17613  015024  B4D8               	btfsc	status,2,c
 17614  015026  D7D7               	goto	l357
 17615  015028  0A03               	xorlw	3	; case 6
 17616  01502A  B4D8               	btfsc	status,2,c
 17617  01502C  D7DB               	goto	l358
 17618  01502E  D7E1               	goto	l359
 17619  015030                     __end_of_GetPortPORT:
 17620                           	opt stack 0
 17621                           tblptru	equ	0xFF8
 17622                           tblptrh	equ	0xFF7
 17623                           tblptrl	equ	0xFF6
 17624                           tablat	equ	0xFF5
 17625                           prodh	equ	0xFF4
 17626                           prodl	equ	0xFF3
 17627                           intcon	equ	0xFF2
 17628                           postinc0	equ	0xFEE
 17629                           wreg	equ	0xFE8
 17630                           indf1	equ	0xFE7
 17631                           postdec1	equ	0xFE5
 17632                           fsr1h	equ	0xFE2
 17633                           fsr1l	equ	0xFE1
 17634                           indf2	equ	0xFDF
 17635                           postinc2	equ	0xFDE
 17636                           postdec2	equ	0xFDD
 17637                           fsr2h	equ	0xFDA
 17638                           fsr2l	equ	0xFD9
 17639                           status	equ	0xFD8
 17640                           
 17641 ;; *************** function _LED_Init *****************
 17642 ;; Defined at:
 17643 ;;		line 15 in file "Library/LED.c"
 17644 ;; Parameters:    Size  Location     Type
 17645 ;;  pLED            1    wreg     enum E6739
 17646 ;; Auto vars:     Size  Location     Type
 17647 ;;  pLED            1   45[BANK0 ] enum E6739
 17648 ;; Return value:  Size  Location     Type
 17649 ;;                  1    wreg      void 
 17650 ;; Registers used:
 17651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17652 ;; Tracked objects:
 17653 ;;		On entry : 0/0
 17654 ;;		On exit  : 0/0
 17655 ;;		Unchanged: 0/0
 17656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;Total ram usage:        1 bytes
 17662 ;; Hardware stack levels used:    1
 17663 ;; Hardware stack levels required when called:   12
 17664 ;; This function calls:
 17665 ;;		_LED_Set
 17666 ;;		_Port_SetPinType
 17667 ;; This function is called by:
 17668 ;;		_MXK_Init
 17669 ;; This function uses a non-reentrant model
 17670 ;;
 17671                           
 17672                           	psect	text71
 17673  015E76                     __ptext71:
 17674                           	opt stack 0
 17675  015E76                     _LED_Init:
 17676                           	opt stack 16
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;incstack = 0
 17680                           ;LED_Init@pLED stored from wreg
 17681  015E76  0100               	movlb	0	; () banked
 17682  015E78  6FE2               	movwf	LED_Init@pLED& (0+255),b
 17683                           
 17684                           ;LED.c: 17: switch (pLED)
 17685  015E7A  D01E               	goto	l220
 17686  015E7C                     
 17687                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 17688  015E7C  0EA0               	movlw	low _PortC
 17689  015E7E  0100               	movlb	0	; () banked
 17690  015E80  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 17691  015E82  0E00               	movlw	high _PortC
 17692  015E84  0100               	movlb	0	; () banked
 17693  015E86  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17694  015E88  0E00               	movlw	0
 17695  015E8A  0100               	movlb	0	; () banked
 17696  015E8C  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 17697  015E8E  0E03               	movlw	3
 17698  015E90  0100               	movlb	0	; () banked
 17699  015E92  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 17700  015E94  EC1F  F095         	call	_Port_SetPinType	;wreg free
 17701                           
 17702                           ;LED.c: 21: break;
 17703  015E98  D017               	goto	l222
 17704  015E9A                     
 17705                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 17706  015E9A  0EA0               	movlw	low _PortC
 17707  015E9C  0100               	movlb	0	; () banked
 17708  015E9E  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 17709  015EA0  0E00               	movlw	high _PortC
 17710  015EA2  0100               	movlb	0	; () banked
 17711  015EA4  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17712  015EA6  0E01               	movlw	1
 17713  015EA8  0100               	movlb	0	; () banked
 17714  015EAA  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 17715  015EAC  0E03               	movlw	3
 17716  015EAE  0100               	movlb	0	; () banked
 17717  015EB0  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 17718  015EB2  EC1F  F095         	call	_Port_SetPinType	;wreg free
 17719                           
 17720                           ;LED.c: 25: }
 17721                           
 17722                           ;LED.c: 24: break;
 17723  015EB6  D008               	goto	l222
 17724  015EB8                     l220:
 17725  015EB8  0100               	movlb	0	; () banked
 17726  015EBA  51E2               	movf	LED_Init@pLED& (0+255),w,b
 17727                           
 17728                           ; Switch size 1, requested type "space"
 17729                           ; Number of cases is 2, Range of values is 0 to 1
 17730                           ; switch strategies available:
 17731                           ; Name         Instructions Cycles
 17732                           ; simple_byte            7     4 (average)
 17733                           ;	Chosen strategy is simple_byte
 17734  015EBC  0A00               	xorlw	0	; case 0
 17735  015EBE  B4D8               	btfsc	status,2,c
 17736  015EC0  D7DD               	goto	l221
 17737  015EC2  0A01               	xorlw	1	; case 1
 17738  015EC4  B4D8               	btfsc	status,2,c
 17739  015EC6  D7E9               	goto	l223
 17740  015EC8                     l222:
 17741                           
 17742                           ;LED.c: 26: LED_Set(pLED, 0);
 17743                           
 17744                           ; BSR set to: 0
 17745  015EC8  0E00               	movlw	0
 17746  015ECA  0100               	movlb	0	; () banked
 17747  015ECC  6FC9               	movwf	LED_Set@pValue& (0+255),b
 17748  015ECE  0100               	movlb	0	; () banked
 17749  015ED0  51E2               	movf	LED_Init@pLED& (0+255),w,b
 17750  015ED2  EC79  F0B0         	call	_LED_Set
 17751  015ED6  0012               	return		;funcret
 17752  015ED8                     __end_of_LED_Init:
 17753                           	opt stack 0
 17754                           tblptru	equ	0xFF8
 17755                           tblptrh	equ	0xFF7
 17756                           tblptrl	equ	0xFF6
 17757                           tablat	equ	0xFF5
 17758                           prodh	equ	0xFF4
 17759                           prodl	equ	0xFF3
 17760                           intcon	equ	0xFF2
 17761                           postinc0	equ	0xFEE
 17762                           wreg	equ	0xFE8
 17763                           indf1	equ	0xFE7
 17764                           postdec1	equ	0xFE5
 17765                           fsr1h	equ	0xFE2
 17766                           fsr1l	equ	0xFE1
 17767                           indf2	equ	0xFDF
 17768                           postinc2	equ	0xFDE
 17769                           postdec2	equ	0xFDD
 17770                           fsr2h	equ	0xFDA
 17771                           fsr2l	equ	0xFD9
 17772                           status	equ	0xFD8
 17773                           
 17774 ;; *************** function _LED_Set *****************
 17775 ;; Defined at:
 17776 ;;		line 33 in file "Library/LED.c"
 17777 ;; Parameters:    Size  Location     Type
 17778 ;;  pLED            1    wreg     enum E6739
 17779 ;;  pValue          1   20[BANK0 ] unsigned char 
 17780 ;; Auto vars:     Size  Location     Type
 17781 ;;  pLED            1   21[BANK0 ] enum E6739
 17782 ;; Return value:  Size  Location     Type
 17783 ;;                  1    wreg      void 
 17784 ;; Registers used:
 17785 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17786 ;; Tracked objects:
 17787 ;;		On entry : 0/0
 17788 ;;		On exit  : 0/0
 17789 ;;		Unchanged: 0/0
 17790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17791 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17795 ;;Total ram usage:        2 bytes
 17796 ;; Hardware stack levels used:    1
 17797 ;; Hardware stack levels required when called:   11
 17798 ;; This function calls:
 17799 ;;		_Port_SetPin
 17800 ;; This function is called by:
 17801 ;;		_LED_Init
 17802 ;;		_SYSTEM_Initialize
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           	psect	text72
 17807  0160F2                     __ptext72:
 17808                           	opt stack 0
 17809  0160F2                     _LED_Set:
 17810                           	opt stack 16
 17811                           
 17812                           ;incstack = 0
 17813                           ;LED_Set@pLED stored from wreg
 17814  0160F2  0100               	movlb	0	; () banked
 17815  0160F4  6FCA               	movwf	LED_Set@pLED& (0+255),b
 17816                           
 17817                           ;LED.c: 35: switch (pLED)
 17818  0160F6  D01C               	goto	l227
 17819  0160F8                     
 17820                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 17821  0160F8  0EA0               	movlw	low _PortC
 17822  0160FA  0100               	movlb	0	; () banked
 17823  0160FC  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 17824  0160FE  0E00               	movlw	high _PortC
 17825  016100  0100               	movlb	0	; () banked
 17826  016102  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17827  016104  0E00               	movlw	0
 17828  016106  0100               	movlb	0	; () banked
 17829  016108  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 17830  01610A  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 17831  01610E  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 17832                           
 17833                           ;LED.c: 39: break;
 17834  016112  0012               	return	
 17835  016114                     
 17836                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 17837  016114  0EA0               	movlw	low _PortC
 17838  016116  0100               	movlb	0	; () banked
 17839  016118  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 17840  01611A  0E00               	movlw	high _PortC
 17841  01611C  0100               	movlb	0	; () banked
 17842  01611E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17843  016120  0E01               	movlw	1
 17844  016122  0100               	movlb	0	; () banked
 17845  016124  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 17846  016126  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 17847  01612A  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 17848                           
 17849                           ;LED.c: 43: }
 17850                           
 17851                           ;LED.c: 42: break;
 17852  01612E  0012               	return	
 17853  016130                     l227:
 17854  016130  0100               	movlb	0	; () banked
 17855  016132  51CA               	movf	LED_Set@pLED& (0+255),w,b
 17856                           
 17857                           ; Switch size 1, requested type "space"
 17858                           ; Number of cases is 2, Range of values is 0 to 1
 17859                           ; switch strategies available:
 17860                           ; Name         Instructions Cycles
 17861                           ; simple_byte            7     4 (average)
 17862                           ;	Chosen strategy is simple_byte
 17863  016134  0A00               	xorlw	0	; case 0
 17864  016136  B4D8               	btfsc	status,2,c
 17865  016138  D7DF               	goto	l228
 17866  01613A  0A01               	xorlw	1	; case 1
 17867  01613C  A4D8               	btfss	status,2,c
 17868  01613E  0012               	return	
 17869  016140  D7E9               	goto	l230
 17870  016142                     __end_of_LED_Set:
 17871                           	opt stack 0
 17872                           tblptru	equ	0xFF8
 17873                           tblptrh	equ	0xFF7
 17874                           tblptrl	equ	0xFF6
 17875                           tablat	equ	0xFF5
 17876                           prodh	equ	0xFF4
 17877                           prodl	equ	0xFF3
 17878                           intcon	equ	0xFF2
 17879                           postinc0	equ	0xFEE
 17880                           wreg	equ	0xFE8
 17881                           indf1	equ	0xFE7
 17882                           postdec1	equ	0xFE5
 17883                           fsr1h	equ	0xFE2
 17884                           fsr1l	equ	0xFE1
 17885                           indf2	equ	0xFDF
 17886                           postinc2	equ	0xFDE
 17887                           postdec2	equ	0xFDD
 17888                           fsr2h	equ	0xFDA
 17889                           fsr2l	equ	0xFD9
 17890                           status	equ	0xFD8
 17891                           
 17892 ;; *************** function _MXK_Dequeue *****************
 17893 ;; Defined at:
 17894 ;;		line 153 in file "Library/MXK.c"
 17895 ;; Parameters:    Size  Location     Type
 17896 ;;		None
 17897 ;; Auto vars:     Size  Location     Type
 17898 ;;		None
 17899 ;; Return value:  Size  Location     Type
 17900 ;;                  1    wreg      void 
 17901 ;; Registers used:
 17902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17903 ;; Tracked objects:
 17904 ;;		On entry : 0/0
 17905 ;;		On exit  : 0/0
 17906 ;;		Unchanged: 0/0
 17907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;Total ram usage:        0 bytes
 17913 ;; Hardware stack levels used:    1
 17914 ;; Hardware stack levels required when called:   12
 17915 ;; This function calls:
 17916 ;;		Absolute function
 17917 ;;		_Motor_Step
 17918 ;; This function is called by:
 17919 ;;		_init
 17920 ;;		_findClosestWall
 17921 ;;		_measureAndDisplayDistance
 17922 ;;		_mode1
 17923 ;;		_mode2
 17924 ;;		_mode4
 17925 ;;		_main
 17926 ;; This function uses a non-reentrant model
 17927 ;;
 17928                           
 17929                           	psect	text73
 17930  0165A2                     __ptext73:
 17931                           	opt stack 0
 17932  0165A2                     _MXK_Dequeue:
 17933                           	opt stack 16
 17934                           
 17935                           ;MXK.c: 155: if (lQueue)
 17936                           
 17937                           ;incstack = 0
 17938  0165A2  0100               	movlb	0	; () banked
 17939  0165A4  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17940  0165A6  0100               	movlb	0	; () banked
 17941  0165A8  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17942  0165AA  0100               	movlb	0	; () banked
 17943  0165AC  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17944  0165AE  B4D8               	btfsc	status,2,c
 17945  0165B0  D00D               	goto	u14509
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;MXK.c: 156: lQueue();
 17949  0165B2  D801               	call	u14508
 17950  0165B4  D00B               	goto	u14509
 17951  0165B6                     u14508:
 17952  0165B6  0005               	push	
 17953  0165B8  6EFA               	movwf	pclath,c
 17954  0165BA  0100               	movlb	0	; () banked
 17955  0165BC  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17956  0165BE  6EFD               	movwf	tosl,c
 17957  0165C0  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 17958  0165C2  6EFE               	movwf	tosh,c
 17959  0165C4  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 17960  0165C6  6EFF               	movwf	tosu,c
 17961  0165C8  50FA               	movf	pclath,w,c
 17962  0165CA  0012               	return		;indir
 17963  0165CC                     u14509:
 17964                           
 17965                           ;MXK.c: 157: lQueue = 0;
 17966  0165CC  0E00               	movlw	0
 17967  0165CE  0100               	movlb	0	; () banked
 17968  0165D0  6F63               	movwf	_lQueue& (0+255),b	;volatile
 17969  0165D2  0E00               	movlw	0
 17970  0165D4  0100               	movlb	0	; () banked
 17971  0165D6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 17972  0165D8  0E00               	movlw	0
 17973  0165DA  0100               	movlb	0	; () banked
 17974  0165DC  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 17975                           
 17976                           ; BSR set to: 0
 17977  0165DE  0012               	return		;funcret
 17978  0165E0                     __end_of_MXK_Dequeue:
 17979                           	opt stack 0
 17980                           tosu	equ	0xFFF
 17981                           tosh	equ	0xFFE
 17982                           tosl	equ	0xFFD
 17983                           pclath	equ	0xFFA
 17984                           tblptru	equ	0xFF8
 17985                           tblptrh	equ	0xFF7
 17986                           tblptrl	equ	0xFF6
 17987                           tablat	equ	0xFF5
 17988                           prodh	equ	0xFF4
 17989                           prodl	equ	0xFF3
 17990                           intcon	equ	0xFF2
 17991                           postinc0	equ	0xFEE
 17992                           wreg	equ	0xFE8
 17993                           indf1	equ	0xFE7
 17994                           postdec1	equ	0xFE5
 17995                           fsr1h	equ	0xFE2
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           fsr2h	equ	0xFDA
 18001                           fsr2l	equ	0xFD9
 18002                           status	equ	0xFD8
 18003                           
 18004 ;; *************** function _Motor_Step *****************
 18005 ;; Defined at:
 18006 ;;		line 75 in file "Library/Motor.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;		None
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;		None
 18011 ;; Return value:  Size  Location     Type
 18012 ;;                  1    wreg      void 
 18013 ;; Registers used:
 18014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;Total ram usage:        2 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:   11
 18027 ;; This function calls:
 18028 ;;		_MXK_Queue
 18029 ;;		_MXK_Release
 18030 ;;		_MXK_SwitchTo
 18031 ;;		_Port_SetPin
 18032 ;;		_Timer0_Restart
 18033 ;;		_Timer0_Stop
 18034 ;; This function is called by:
 18035 ;;		_Motor_Init
 18036 ;;		_MXK_Dequeue
 18037 ;;		_Timer0_ISR
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           	psect	text74
 18042  0137CC                     __ptext74:
 18043                           	opt stack 0
 18044  0137CC                     _Motor_Step:
 18045                           	opt stack 0
 18046                           
 18047                           ; BSR set to: 0
 18048                           ;Skip over the trampoline to the duplicate function for level 2
 18049  0137CC  B251               	btfsc	btemp,1,c
 18050  0137CE  EF05  F09E         	goto	i2_Motor_Step
 18051  0137D2                     _Motor_Step$intlevel0:
 18052                           	opt stack 16
 18053                           
 18054                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18055                           
 18056                           ;incstack = 0
 18057  0137D2  0100               	movlb	0	; () banked
 18058  0137D4  EE20 F004          	lfsr	2,4
 18059  0137D8  5183               	movf	_lMotor& (0+255),w,b
 18060  0137DA  26D9               	addwf	fsr2l,f,c
 18061  0137DC  5184               	movf	(_lMotor+1)& (0+255),w,b
 18062  0137DE  22DA               	addwfc	fsr2h,f,c
 18063  0137E0  50DF               	movf	indf2,w,c
 18064  0137E2  EC51  F0B2         	call	_MXK_SwitchTo
 18065  0137E6  0900               	iorlw	0
 18066  0137E8  B4D8               	btfsc	status,2,c
 18067  0137EA  D07A               	goto	l1627
 18068                           
 18069                           ;Motor.c: 78: {
 18070                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18071  0137EC  C083  FFD9         	movff	_lMotor,fsr2l
 18072  0137F0  C084  FFDA         	movff	_lMotor+1,fsr2h
 18073  0137F4  50DE               	movf	postinc2,w,c
 18074  0137F6  10DE               	iorwf	postinc2,w,c
 18075  0137F8  B4D8               	btfsc	status,2,c
 18076  0137FA  D06D               	goto	l1628
 18077                           
 18078                           ;Motor.c: 80: {
 18079                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18080  0137FC  C083  FFD9         	movff	_lMotor,fsr2l
 18081  013800  C084  FFDA         	movff	_lMotor+1,fsr2h
 18082  013804  0E01               	movlw	1
 18083  013806  BEDB               	btfsc	plusw2,7,c
 18084  013808  D026               	goto	l1629
 18085  01380A  0E01               	movlw	1
 18086  01380C  50DB               	movf	plusw2,w,c
 18087  01380E  E103               	bnz	u10070
 18088  013810  04DE               	decf	postinc2,w,c
 18089  013812  A0D8               	btfss	status,0,c
 18090  013814  D020               	goto	l1629
 18091  013816                     u10070:
 18092                           
 18093                           ;Motor.c: 83: {
 18094                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18095  013816  C083  FFD9         	movff	_lMotor,fsr2l
 18096  01381A  C084  FFDA         	movff	_lMotor+1,fsr2h
 18097  01381E  28DE               	incf	postinc2,w,c
 18098  013820  E104               	bnz	u10080
 18099  013822  0E7F               	movlw	127
 18100  013824  18DE               	xorwf	postinc2,w,c
 18101  013826  B4D8               	btfsc	status,2,c
 18102  013828  D007               	goto	l1630
 18103  01382A                     u10080:
 18104                           
 18105                           ;Motor.c: 85: lMotor->mDelta --;
 18106  01382A  C083  FFD9         	movff	_lMotor,fsr2l
 18107  01382E  C084  FFDA         	movff	_lMotor+1,fsr2h
 18108  013832  06DE               	decf	postinc2,f,c
 18109  013834  0E00               	movlw	0
 18110  013836  5ADD               	subwfb	postdec2,f,c
 18111  013838                     l1630:
 18112                           
 18113                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18114  013838  0EAC               	movlw	low _PortE
 18115  01383A  0100               	movlb	0	; () banked
 18116  01383C  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 18117  01383E  0E03               	movlw	high _PortE
 18118  013840  0100               	movlb	0	; () banked
 18119  013842  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18120  013844  0E00               	movlw	0
 18121  013846  0100               	movlb	0	; () banked
 18122  013848  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 18123  01384A  0E01               	movlw	1
 18124  01384C  0100               	movlb	0	; () banked
 18125  01384E  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 18126  013850  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 18127                           
 18128                           ;Motor.c: 88: }
 18129  013854  D01F               	goto	l1631
 18130  013856                     l1629:
 18131                           
 18132                           ;Motor.c: 89: else
 18133                           ;Motor.c: 90: {
 18134                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18135  013856  C083  FFD9         	movff	_lMotor,fsr2l
 18136  01385A  C084  FFDA         	movff	_lMotor+1,fsr2h
 18137  01385E  04DE               	decf	postinc2,w,c
 18138  013860  E104               	bnz	u10090
 18139  013862  0E80               	movlw	128
 18140  013864  18DE               	xorwf	postinc2,w,c
 18141  013866  B4D8               	btfsc	status,2,c
 18142  013868  D007               	goto	l1632
 18143  01386A                     u10090:
 18144                           
 18145                           ;Motor.c: 92: lMotor->mDelta ++;
 18146  01386A  C083  FFD9         	movff	_lMotor,fsr2l
 18147  01386E  C084  FFDA         	movff	_lMotor+1,fsr2h
 18148  013872  2ADE               	incf	postinc2,f,c
 18149  013874  0E00               	movlw	0
 18150  013876  22DD               	addwfc	postdec2,f,c
 18151  013878                     l1632:
 18152                           
 18153                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18154  013878  0EAC               	movlw	low _PortE
 18155  01387A  0100               	movlb	0	; () banked
 18156  01387C  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 18157  01387E  0E03               	movlw	high _PortE
 18158  013880  0100               	movlb	0	; () banked
 18159  013882  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18160  013884  0E00               	movlw	0
 18161  013886  0100               	movlb	0	; () banked
 18162  013888  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 18163  01388A  0E00               	movlw	0
 18164  01388C  0100               	movlb	0	; () banked
 18165  01388E  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 18166  013890  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 18167  013894                     l1631:
 18168                           
 18169                           ;Motor.c: 95: }
 18170                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18171  013894  0EAC               	movlw	low _PortE
 18172  013896  0100               	movlb	0	; () banked
 18173  013898  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 18174  01389A  0E03               	movlw	high _PortE
 18175  01389C  0100               	movlb	0	; () banked
 18176  01389E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18177  0138A0  0E01               	movlw	1
 18178  0138A2  0100               	movlb	0	; () banked
 18179  0138A4  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 18180  0138A6  0E01               	movlw	1
 18181  0138A8  0100               	movlb	0	; () banked
 18182  0138AA  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 18183  0138AC  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 18184                           
 18185                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18186  0138B0  0EAC               	movlw	low _PortE
 18187  0138B2  0100               	movlb	0	; () banked
 18188  0138B4  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 18189  0138B6  0E03               	movlw	high _PortE
 18190  0138B8  0100               	movlb	0	; () banked
 18191  0138BA  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18192  0138BC  0E01               	movlw	1
 18193  0138BE  0100               	movlb	0	; () banked
 18194  0138C0  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 18195  0138C2  0E00               	movlw	0
 18196  0138C4  0100               	movlb	0	; () banked
 18197  0138C6  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 18198  0138C8  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 18199                           
 18200                           ;Motor.c: 101: MXK_Release();
 18201  0138CC  EC7F  F0B5         	call	_MXK_Release	;wreg free
 18202                           
 18203                           ;Motor.c: 102: Timer0_Restart();
 18204  0138D0  EC6E  F0B6         	call	_Timer0_Restart	;wreg free
 18205                           
 18206                           ;Motor.c: 103: return;
 18207  0138D4  0012               	return	
 18208  0138D6                     l1628:
 18209                           
 18210                           ;Motor.c: 104: }
 18211                           ;Motor.c: 105: MXK_Release();
 18212  0138D6  EC7F  F0B5         	call	_MXK_Release	;wreg free
 18213                           
 18214                           ;Motor.c: 106: Timer0_Stop();
 18215  0138DA  EC99  F0B6         	call	_Timer0_Stop	;wreg free
 18216                           
 18217                           ;Motor.c: 107: return;
 18218  0138DE  0012               	return	
 18219  0138E0                     l1627:
 18220                           
 18221                           ;Motor.c: 108: }
 18222                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18223  0138E0  C066  F0B5         	movff	_lStepFunction,MXK_Queue@pCallback
 18224  0138E4  C067  F0B6         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 18225  0138E8  C068  F0B7         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 18226  0138EC  EC5A  F0B6         	call	_MXK_Queue	;wreg free
 18227  0138F0  0012               	return		;funcret
 18228  0138F2                     __end_of_Motor_Step:
 18229                           	opt stack 0
 18230                           tosu	equ	0xFFF
 18231                           tosh	equ	0xFFE
 18232                           tosl	equ	0xFFD
 18233                           pclath	equ	0xFFA
 18234                           tblptru	equ	0xFF8
 18235                           tblptrh	equ	0xFF7
 18236                           tblptrl	equ	0xFF6
 18237                           tablat	equ	0xFF5
 18238                           prodh	equ	0xFF4
 18239                           prodl	equ	0xFF3
 18240                           intcon	equ	0xFF2
 18241                           postinc0	equ	0xFEE
 18242                           wreg	equ	0xFE8
 18243                           indf1	equ	0xFE7
 18244                           postdec1	equ	0xFE5
 18245                           fsr1h	equ	0xFE2
 18246                           fsr1l	equ	0xFE1
 18247                           indf2	equ	0xFDF
 18248                           postinc2	equ	0xFDE
 18249                           postdec2	equ	0xFDD
 18250                           plusw2	equ	0xFDB
 18251                           fsr2h	equ	0xFDA
 18252                           fsr2l	equ	0xFD9
 18253                           status	equ	0xFD8
 18254                           
 18255 ;; *************** function _Timer0_Stop *****************
 18256 ;; Defined at:
 18257 ;;		line 89 in file "Library/Timer0.c"
 18258 ;; Parameters:    Size  Location     Type
 18259 ;;		None
 18260 ;; Auto vars:     Size  Location     Type
 18261 ;;		None
 18262 ;; Return value:  Size  Location     Type
 18263 ;;                  1    wreg      void 
 18264 ;; Registers used:
 18265 ;;		None
 18266 ;; Tracked objects:
 18267 ;;		On entry : 0/0
 18268 ;;		On exit  : 0/0
 18269 ;;		Unchanged: 0/0
 18270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18275 ;;Total ram usage:        0 bytes
 18276 ;; Hardware stack levels used:    1
 18277 ;; Hardware stack levels required when called:    7
 18278 ;; This function calls:
 18279 ;;		Nothing
 18280 ;; This function is called by:
 18281 ;;		_Motor_Step
 18282 ;; This function uses a non-reentrant model
 18283 ;;
 18284                           
 18285                           	psect	text75
 18286  016D32                     __ptext75:
 18287                           	opt stack 0
 18288  016D32                     _Timer0_Stop:
 18289                           	opt stack 19
 18290                           
 18291                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18292                           
 18293                           ;incstack = 0
 18294  016D32  9AF2               	bcf	intcon,5,c	;volatile
 18295                           
 18296                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18297  016D34  94F2               	bcf	intcon,2,c	;volatile
 18298  016D36  0012               	return		;funcret
 18299  016D38                     __end_of_Timer0_Stop:
 18300                           	opt stack 0
 18301                           tosu	equ	0xFFF
 18302                           tosh	equ	0xFFE
 18303                           tosl	equ	0xFFD
 18304                           pclath	equ	0xFFA
 18305                           tblptru	equ	0xFF8
 18306                           tblptrh	equ	0xFF7
 18307                           tblptrl	equ	0xFF6
 18308                           tablat	equ	0xFF5
 18309                           prodh	equ	0xFF4
 18310                           prodl	equ	0xFF3
 18311                           intcon	equ	0xFF2
 18312                           postinc0	equ	0xFEE
 18313                           wreg	equ	0xFE8
 18314                           indf1	equ	0xFE7
 18315                           postdec1	equ	0xFE5
 18316                           fsr1h	equ	0xFE2
 18317                           fsr1l	equ	0xFE1
 18318                           indf2	equ	0xFDF
 18319                           postinc2	equ	0xFDE
 18320                           postdec2	equ	0xFDD
 18321                           plusw2	equ	0xFDB
 18322                           fsr2h	equ	0xFDA
 18323                           fsr2l	equ	0xFD9
 18324                           status	equ	0xFD8
 18325                           
 18326 ;; *************** function _Timer0_Restart *****************
 18327 ;; Defined at:
 18328 ;;		line 83 in file "Library/Timer0.c"
 18329 ;; Parameters:    Size  Location     Type
 18330 ;;		None
 18331 ;; Auto vars:     Size  Location     Type
 18332 ;;		None
 18333 ;; Return value:  Size  Location     Type
 18334 ;;                  1    wreg      void 
 18335 ;; Registers used:
 18336 ;;		None
 18337 ;; Tracked objects:
 18338 ;;		On entry : 0/0
 18339 ;;		On exit  : 0/0
 18340 ;;		Unchanged: 0/0
 18341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18346 ;;Total ram usage:        0 bytes
 18347 ;; Hardware stack levels used:    1
 18348 ;; Hardware stack levels required when called:    7
 18349 ;; This function calls:
 18350 ;;		Nothing
 18351 ;; This function is called by:
 18352 ;;		_Motor_Step
 18353 ;; This function uses a non-reentrant model
 18354 ;;
 18355                           
 18356                           	psect	text76
 18357  016CDC                     __ptext76:
 18358                           	opt stack 0
 18359  016CDC                     _Timer0_Restart:
 18360                           	opt stack 19
 18361                           
 18362                           ;Timer0.c: 85: TMR0 = COUNTER;
 18363                           
 18364                           ;incstack = 0
 18365  016CDC  C029  FFD6         	movff	_COUNTER,4054	;volatile
 18366  016CE0  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 18367                           
 18368                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18369  016CE4  8AF2               	bsf	intcon,5,c	;volatile
 18370  016CE6  0012               	return		;funcret
 18371  016CE8                     __end_of_Timer0_Restart:
 18372                           	opt stack 0
 18373                           tosu	equ	0xFFF
 18374                           tosh	equ	0xFFE
 18375                           tosl	equ	0xFFD
 18376                           pclath	equ	0xFFA
 18377                           tblptru	equ	0xFF8
 18378                           tblptrh	equ	0xFF7
 18379                           tblptrl	equ	0xFF6
 18380                           tablat	equ	0xFF5
 18381                           prodh	equ	0xFF4
 18382                           prodl	equ	0xFF3
 18383                           intcon	equ	0xFF2
 18384                           postinc0	equ	0xFEE
 18385                           wreg	equ	0xFE8
 18386                           indf1	equ	0xFE7
 18387                           postdec1	equ	0xFE5
 18388                           fsr1h	equ	0xFE2
 18389                           fsr1l	equ	0xFE1
 18390                           indf2	equ	0xFDF
 18391                           postinc2	equ	0xFDE
 18392                           postdec2	equ	0xFDD
 18393                           plusw2	equ	0xFDB
 18394                           fsr2h	equ	0xFDA
 18395                           fsr2l	equ	0xFD9
 18396                           status	equ	0xFD8
 18397                           
 18398 ;; *************** function _MXK_SwitchTo *****************
 18399 ;; Defined at:
 18400 ;;		line 105 in file "Library/MXK.c"
 18401 ;; Parameters:    Size  Location     Type
 18402 ;;  pModule         1    wreg     enum E6927
 18403 ;; Auto vars:     Size  Location     Type
 18404 ;;  pModule         1    7[BANK0 ] enum E6927
 18405 ;;  CUR             1    6[BANK0 ] unsigned char 
 18406 ;; Return value:  Size  Location     Type
 18407 ;;                  1    wreg      unsigned char 
 18408 ;; Registers used:
 18409 ;;		wreg, status,2, status,0, cstack
 18410 ;; Tracked objects:
 18411 ;;		On entry : 0/0
 18412 ;;		On exit  : 0/0
 18413 ;;		Unchanged: 0/0
 18414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18419 ;;Total ram usage:        2 bytes
 18420 ;; Hardware stack levels used:    1
 18421 ;; Hardware stack levels required when called:    8
 18422 ;; This function calls:
 18423 ;;		_delay_us
 18424 ;; This function is called by:
 18425 ;;		_Motor_Step
 18426 ;;		_findClosestWall
 18427 ;;		_measureAndDisplayDistance
 18428 ;;		_mode1
 18429 ;;		_mode2
 18430 ;;		_mode4
 18431 ;;		_main
 18432 ;; This function uses a non-reentrant model
 18433 ;;
 18434                           
 18435                           	psect	text77
 18436  0164A2                     __ptext77:
 18437                           	opt stack 0
 18438  0164A2                     _MXK_SwitchTo:
 18439                           	opt stack 20
 18440                           
 18441                           ;incstack = 0
 18442                           ;MXK_SwitchTo@pModule stored from wreg
 18443  0164A2  0100               	movlb	0	; () banked
 18444  0164A4  6FBC               	movwf	MXK_SwitchTo@pModule& (0+255),b
 18445                           
 18446                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18447  0164A6  5086               	movf	3974,w,c	;volatile
 18448  0164A8  0B0F               	andlw	15
 18449  0164AA  0100               	movlb	0	; () banked
 18450  0164AC  6FBB               	movwf	MXK_SwitchTo@CUR& (0+255),b
 18451                           
 18452                           ; BSR set to: 0
 18453                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18454  0164AE  504B               	movf	_Bus_State,w,c
 18455  0164B0  A4D8               	btfss	status,2,c
 18456  0164B2  D002               	goto	l1730
 18457                           
 18458                           ; BSR set to: 0
 18459                           ;MXK.c: 110: return 0;
 18460  0164B4  0E00               	movlw	0
 18461                           
 18462                           ; BSR set to: 0
 18463  0164B6  0012               	return	
 18464  0164B8                     l1730:
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18468                           
 18469                           ; BSR set to: 0
 18470  0164B8  0E00               	movlw	0
 18471  0164BA  6E4B               	movwf	_Bus_State,c
 18472                           
 18473                           ; BSR set to: 0
 18474                           ;MXK.c: 114: if (CUR != pModule)
 18475  0164BC  0100               	movlb	0	; () banked
 18476  0164BE  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18477  0164C0  0100               	movlb	0	; () banked
 18478  0164C2  19BB               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 18479  0164C4  B4D8               	btfsc	status,2,c
 18480  0164C6  D00C               	goto	l1732
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;MXK.c: 115: {
 18484                           ;MXK.c: 116: PORTG &= ~(0xF);
 18485  0164C8  0EF0               	movlw	240
 18486  0164CA  1686               	andwf	3974,f,c	;volatile
 18487                           
 18488                           ;MXK.c: 117: PORTG |= pModule;
 18489  0164CC  0100               	movlb	0	; () banked
 18490  0164CE  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18491  0164D0  1286               	iorwf	3974,f,c	;volatile
 18492                           
 18493                           ; BSR set to: 0
 18494                           ;MXK.c: 120: delay_us(10);
 18495  0164D2  0E00               	movlw	0
 18496  0164D4  0100               	movlb	0	; () banked
 18497  0164D6  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 18498  0164D8  0E0A               	movlw	10
 18499  0164DA  6FB5               	movwf	delay_us@us& (0+255),b
 18500  0164DC  EC50  F0B0         	call	_delay_us	;wreg free
 18501  0164E0                     l1732:
 18502                           
 18503                           ;MXK.c: 121: }
 18504                           ;MXK.c: 122: return 1;
 18505  0164E0  0E01               	movlw	1
 18506  0164E2  0012               	return	
 18507  0164E4                     __end_of_MXK_SwitchTo:
 18508                           	opt stack 0
 18509                           tosu	equ	0xFFF
 18510                           tosh	equ	0xFFE
 18511                           tosl	equ	0xFFD
 18512                           pclath	equ	0xFFA
 18513                           tblptru	equ	0xFF8
 18514                           tblptrh	equ	0xFF7
 18515                           tblptrl	equ	0xFF6
 18516                           tablat	equ	0xFF5
 18517                           prodh	equ	0xFF4
 18518                           prodl	equ	0xFF3
 18519                           intcon	equ	0xFF2
 18520                           postinc0	equ	0xFEE
 18521                           wreg	equ	0xFE8
 18522                           indf1	equ	0xFE7
 18523                           postdec1	equ	0xFE5
 18524                           fsr1h	equ	0xFE2
 18525                           fsr1l	equ	0xFE1
 18526                           indf2	equ	0xFDF
 18527                           postinc2	equ	0xFDE
 18528                           postdec2	equ	0xFDD
 18529                           plusw2	equ	0xFDB
 18530                           fsr2h	equ	0xFDA
 18531                           fsr2l	equ	0xFD9
 18532                           status	equ	0xFD8
 18533                           
 18534 ;; *************** function _MXK_Release *****************
 18535 ;; Defined at:
 18536 ;;		line 130 in file "Library/MXK.c"
 18537 ;; Parameters:    Size  Location     Type
 18538 ;;		None
 18539 ;; Auto vars:     Size  Location     Type
 18540 ;;		None
 18541 ;; Return value:  Size  Location     Type
 18542 ;;                  1    wreg      unsigned char 
 18543 ;; Registers used:
 18544 ;;		wreg, status,2, status,0
 18545 ;; Tracked objects:
 18546 ;;		On entry : 0/0
 18547 ;;		On exit  : 0/0
 18548 ;;		Unchanged: 0/0
 18549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;Total ram usage:        0 bytes
 18555 ;; Hardware stack levels used:    1
 18556 ;; Hardware stack levels required when called:    7
 18557 ;; This function calls:
 18558 ;;		Nothing
 18559 ;; This function is called by:
 18560 ;;		_Motor_Step
 18561 ;;		_init
 18562 ;;		_findClosestWall
 18563 ;;		_measureAndDisplayDistance
 18564 ;;		_mode1
 18565 ;;		_mode2
 18566 ;;		_mode4
 18567 ;;		_main
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text78
 18572  016AFE                     __ptext78:
 18573                           	opt stack 0
 18574  016AFE                     _MXK_Release:
 18575                           	opt stack 21
 18576                           
 18577                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 18578                           
 18579                           ;incstack = 0
 18580  016AFE  0E01               	movlw	1
 18581  016B00  6E4B               	movwf	_Bus_State,c
 18582                           
 18583                           ;MXK.c: 134: if (lQueue != 0)
 18584  016B02  0100               	movlb	0	; () banked
 18585  016B04  5163               	movf	_lQueue& (0+255),w,b	;volatile
 18586  016B06  0100               	movlb	0	; () banked
 18587  016B08  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18588  016B0A  0100               	movlb	0	; () banked
 18589  016B0C  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18590  016B0E  B4D8               	btfsc	status,2,c
 18591  016B10  D002               	goto	l1735
 18592                           
 18593                           ; BSR set to: 0
 18594                           ;MXK.c: 135: return 1;
 18595  016B12  0E01               	movlw	1
 18596                           
 18597                           ; BSR set to: 0
 18598  016B14  0012               	return	
 18599  016B16                     l1735:
 18600                           
 18601                           ; BSR set to: 0
 18602                           ;MXK.c: 137: return 0;
 18603                           
 18604                           ; BSR set to: 0
 18605  016B16  0E00               	movlw	0
 18606  016B18  0012               	return	
 18607  016B1A                     __end_of_MXK_Release:
 18608                           	opt stack 0
 18609                           tosu	equ	0xFFF
 18610                           tosh	equ	0xFFE
 18611                           tosl	equ	0xFFD
 18612                           pclath	equ	0xFFA
 18613                           tblptru	equ	0xFF8
 18614                           tblptrh	equ	0xFF7
 18615                           tblptrl	equ	0xFF6
 18616                           tablat	equ	0xFF5
 18617                           prodh	equ	0xFF4
 18618                           prodl	equ	0xFF3
 18619                           intcon	equ	0xFF2
 18620                           postinc0	equ	0xFEE
 18621                           wreg	equ	0xFE8
 18622                           indf1	equ	0xFE7
 18623                           postdec1	equ	0xFE5
 18624                           fsr1h	equ	0xFE2
 18625                           fsr1l	equ	0xFE1
 18626                           indf2	equ	0xFDF
 18627                           postinc2	equ	0xFDE
 18628                           postdec2	equ	0xFDD
 18629                           plusw2	equ	0xFDB
 18630                           fsr2h	equ	0xFDA
 18631                           fsr2l	equ	0xFD9
 18632                           status	equ	0xFD8
 18633                           
 18634 ;; *************** function _MXK_Queue *****************
 18635 ;; Defined at:
 18636 ;;		line 144 in file "Library/MXK.c"
 18637 ;; Parameters:    Size  Location     Type
 18638 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 18639 ;;		 -> Absolute function(1), Motor_Step(1), 
 18640 ;; Auto vars:     Size  Location     Type
 18641 ;;		None
 18642 ;; Return value:  Size  Location     Type
 18643 ;;                  1    wreg      void 
 18644 ;; Registers used:
 18645 ;;		wreg, status,2, status,0
 18646 ;; Tracked objects:
 18647 ;;		On entry : 0/0
 18648 ;;		On exit  : 0/0
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18651 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;Total ram usage:        3 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:    7
 18658 ;; This function calls:
 18659 ;;		Nothing
 18660 ;; This function is called by:
 18661 ;;		_Motor_Step
 18662 ;; This function uses a non-reentrant model
 18663 ;;
 18664                           
 18665                           	psect	text79
 18666  016CB4                     __ptext79:
 18667                           	opt stack 0
 18668  016CB4                     _MXK_Queue:
 18669                           	opt stack 19
 18670                           
 18671                           ;MXK.c: 146: lQueue = pCallback;
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;incstack = 0
 18675  016CB4  C0B5  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 18676  016CB8  C0B6  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 18677  016CBC  C0B7  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 18678  016CC0  0012               	return		;funcret
 18679  016CC2                     __end_of_MXK_Queue:
 18680                           	opt stack 0
 18681                           tosu	equ	0xFFF
 18682                           tosh	equ	0xFFE
 18683                           tosl	equ	0xFFD
 18684                           pclath	equ	0xFFA
 18685                           tblptru	equ	0xFF8
 18686                           tblptrh	equ	0xFF7
 18687                           tblptrl	equ	0xFF6
 18688                           tablat	equ	0xFF5
 18689                           prodh	equ	0xFF4
 18690                           prodl	equ	0xFF3
 18691                           intcon	equ	0xFF2
 18692                           postinc0	equ	0xFEE
 18693                           wreg	equ	0xFE8
 18694                           indf1	equ	0xFE7
 18695                           postdec1	equ	0xFE5
 18696                           fsr1h	equ	0xFE2
 18697                           fsr1l	equ	0xFE1
 18698                           indf2	equ	0xFDF
 18699                           postinc2	equ	0xFDE
 18700                           postdec2	equ	0xFDD
 18701                           plusw2	equ	0xFDB
 18702                           fsr2h	equ	0xFDA
 18703                           fsr2l	equ	0xFD9
 18704                           status	equ	0xFD8
 18705                           
 18706 ;; *************** function _MXK_BlockSwitchTo *****************
 18707 ;; Defined at:
 18708 ;;		line 82 in file "Library/MXK.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;  pModule         1    wreg     enum E6927
 18711 ;; Auto vars:     Size  Location     Type
 18712 ;;  pModule         1    7[BANK0 ] enum E6927
 18713 ;;  CUR             1    6[BANK0 ] unsigned char 
 18714 ;; Return value:  Size  Location     Type
 18715 ;;                  1    wreg      unsigned char 
 18716 ;; Registers used:
 18717 ;;		wreg, status,2, status,0, cstack
 18718 ;; Tracked objects:
 18719 ;;		On entry : 0/0
 18720 ;;		On exit  : 0/0
 18721 ;;		Unchanged: 0/0
 18722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18724 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;Total ram usage:        2 bytes
 18728 ;; Hardware stack levels used:    1
 18729 ;; Hardware stack levels required when called:    8
 18730 ;; This function calls:
 18731 ;;		_delay_us
 18732 ;; This function is called by:
 18733 ;;		_init
 18734 ;; This function uses a non-reentrant model
 18735 ;;
 18736                           
 18737                           	psect	text80
 18738  0165E0                     __ptext80:
 18739                           	opt stack 0
 18740  0165E0                     _MXK_BlockSwitchTo:
 18741                           	opt stack 21
 18742                           
 18743                           ;incstack = 0
 18744                           ;MXK_BlockSwitchTo@pModule stored from wreg
 18745  0165E0  0100               	movlb	0	; () banked
 18746  0165E2  6FBC               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 18747                           
 18748                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 18749  0165E4  5086               	movf	3974,w,c	;volatile
 18750  0165E6  0B0F               	andlw	15
 18751  0165E8  0100               	movlb	0	; () banked
 18752  0165EA  6FBB               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 18753  0165EC                     
 18754                           ; BSR set to: 0
 18755                           
 18756                           ; BSR set to: 0
 18757  0165EC  504B               	movf	_Bus_State,w,c
 18758  0165EE  B4D8               	btfsc	status,2,c
 18759  0165F0  D7FD               	goto	l1724
 18760                           
 18761                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 18762  0165F2  0E00               	movlw	0
 18763  0165F4  6E4B               	movwf	_Bus_State,c
 18764                           
 18765                           ;MXK.c: 90: if (CUR != pModule)
 18766  0165F6  0100               	movlb	0	; () banked
 18767  0165F8  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18768  0165FA  0100               	movlb	0	; () banked
 18769  0165FC  19BB               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 18770  0165FE  B4D8               	btfsc	status,2,c
 18771  016600  D00C               	goto	l1726
 18772                           
 18773                           ; BSR set to: 0
 18774                           ;MXK.c: 91: {
 18775                           ;MXK.c: 92: PORTG &= ~(0xF);
 18776  016602  0EF0               	movlw	240
 18777  016604  1686               	andwf	3974,f,c	;volatile
 18778                           
 18779                           ;MXK.c: 93: PORTG |= pModule;
 18780  016606  0100               	movlb	0	; () banked
 18781  016608  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18782  01660A  1286               	iorwf	3974,f,c	;volatile
 18783                           
 18784                           ; BSR set to: 0
 18785                           ;MXK.c: 96: delay_us(10);
 18786  01660C  0E00               	movlw	0
 18787  01660E  0100               	movlb	0	; () banked
 18788  016610  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 18789  016612  0E0A               	movlw	10
 18790  016614  6FB5               	movwf	delay_us@us& (0+255),b
 18791  016616  EC50  F0B0         	call	_delay_us	;wreg free
 18792  01661A                     l1726:
 18793                           
 18794                           ;MXK.c: 97: }
 18795                           ;MXK.c: 98: return 1;
 18796  01661A  0E01               	movlw	1
 18797  01661C  0012               	return	
 18798  01661E                     __end_of_MXK_BlockSwitchTo:
 18799                           	opt stack 0
 18800                           tosu	equ	0xFFF
 18801                           tosh	equ	0xFFE
 18802                           tosl	equ	0xFFD
 18803                           pclath	equ	0xFFA
 18804                           tblptru	equ	0xFF8
 18805                           tblptrh	equ	0xFF7
 18806                           tblptrl	equ	0xFF6
 18807                           tablat	equ	0xFF5
 18808                           prodh	equ	0xFF4
 18809                           prodl	equ	0xFF3
 18810                           intcon	equ	0xFF2
 18811                           postinc0	equ	0xFEE
 18812                           wreg	equ	0xFE8
 18813                           indf1	equ	0xFE7
 18814                           postdec1	equ	0xFE5
 18815                           fsr1h	equ	0xFE2
 18816                           fsr1l	equ	0xFE1
 18817                           indf2	equ	0xFDF
 18818                           postinc2	equ	0xFDE
 18819                           postdec2	equ	0xFDD
 18820                           plusw2	equ	0xFDB
 18821                           fsr2h	equ	0xFDA
 18822                           fsr2l	equ	0xFD9
 18823                           status	equ	0xFD8
 18824                           
 18825 ;; *************** function _delay_us *****************
 18826 ;; Defined at:
 18827 ;;		line 255 in file "Library/Types.c"
 18828 ;; Parameters:    Size  Location     Type
 18829 ;;  us              2    0[BANK0 ] unsigned short 
 18830 ;; Auto vars:     Size  Location     Type
 18831 ;;  u               4    2[BANK0 ] unsigned long 
 18832 ;; Return value:  Size  Location     Type
 18833 ;;                  1    wreg      void 
 18834 ;; Registers used:
 18835 ;;		wreg, status,2, status,0
 18836 ;; Tracked objects:
 18837 ;;		On entry : 0/0
 18838 ;;		On exit  : 0/0
 18839 ;;		Unchanged: 0/0
 18840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18841 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18842 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;Total ram usage:        6 bytes
 18846 ;; Hardware stack levels used:    1
 18847 ;; Hardware stack levels required when called:    7
 18848 ;; This function calls:
 18849 ;;		Nothing
 18850 ;; This function is called by:
 18851 ;;		_MXK_BlockSwitchTo
 18852 ;;		_MXK_SwitchTo
 18853 ;; This function uses a non-reentrant model
 18854 ;;
 18855                           
 18856                           	psect	text81
 18857  0160A0                     __ptext81:
 18858                           	opt stack 0
 18859  0160A0                     _delay_us:
 18860                           	opt stack 20
 18861                           
 18862                           ;Types.c: 256: unsigned long u;
 18863                           ;Types.c: 257: while (us--) {
 18864                           
 18865                           ;incstack = 0
 18866  0160A0  D01C               	goto	u9410
 18867  0160A2                     l12678:
 18868                           
 18869                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 18870  0160A2  0E00               	movlw	0
 18871  0160A4  0100               	movlb	0	; () banked
 18872  0160A6  6FB7               	movwf	delay_us@u& (0+255),b
 18873  0160A8  0E00               	movlw	0
 18874  0160AA  6FB8               	movwf	(delay_us@u+1)& (0+255),b
 18875  0160AC  0E00               	movlw	0
 18876  0160AE  6FB9               	movwf	(delay_us@u+2)& (0+255),b
 18877  0160B0  0E00               	movlw	0
 18878  0160B2  6FBA               	movwf	(delay_us@u+3)& (0+255),b
 18879  0160B4                     l12680:
 18880                           
 18881                           ; BSR set to: 0
 18882  0160B4  0100               	movlb	0	; () banked
 18883  0160B6  51B7               	movf	delay_us@u& (0+255),w,b
 18884  0160B8  0100               	movlb	0	; () banked
 18885  0160BA  11B8               	iorwf	(delay_us@u+1)& (0+255),w,b
 18886  0160BC  0100               	movlb	0	; () banked
 18887  0160BE  11B9               	iorwf	(delay_us@u+2)& (0+255),w,b
 18888  0160C0  0100               	movlb	0	; () banked
 18889  0160C2  11BA               	iorwf	(delay_us@u+3)& (0+255),w,b
 18890  0160C4  A4D8               	btfss	status,2,c
 18891  0160C6  D009               	goto	u9410
 18892                           
 18893                           ; BSR set to: 0
 18894                           
 18895                           ; BSR set to: 0
 18896  0160C8  F000               	nop		; ;# 
 18897  0160CA  0E01               	movlw	1
 18898  0160CC  0100               	movlb	0	; () banked
 18899  0160CE  27B7               	addwf	delay_us@u& (0+255),f,b
 18900  0160D0  0E00               	movlw	0
 18901  0160D2  23B8               	addwfc	(delay_us@u+1)& (0+255),f,b
 18902  0160D4  23B9               	addwfc	(delay_us@u+2)& (0+255),f,b
 18903  0160D6  23BA               	addwfc	(delay_us@u+3)& (0+255),f,b
 18904  0160D8  D7ED               	goto	l12680
 18905  0160DA                     u9410:
 18906                           
 18907                           ; BSR set to: 0
 18908                           
 18909                           ; BSR set to: 0
 18910  0160DA  0100               	movlb	0	; () banked
 18911  0160DC  07B5               	decf	delay_us@us& (0+255),f,b
 18912  0160DE  A0D8               	btfss	status,0,c
 18913  0160E0  07B6               	decf	(delay_us@us+1)& (0+255),f,b
 18914  0160E2  0100               	movlb	0	; () banked
 18915  0160E4  29B5               	incf	delay_us@us& (0+255),w,b
 18916  0160E6  E1DD               	bnz	l12678
 18917  0160E8  0100               	movlb	0	; () banked
 18918  0160EA  29B6               	incf	(delay_us@us+1)& (0+255),w,b
 18919  0160EC  B4D8               	btfsc	status,2,c
 18920  0160EE  0012               	return	
 18921  0160F0  D7D8               	goto	l832
 18922  0160F2                     __end_of_delay_us:
 18923                           	opt stack 0
 18924                           tosu	equ	0xFFF
 18925                           tosh	equ	0xFFE
 18926                           tosl	equ	0xFFD
 18927                           pclath	equ	0xFFA
 18928                           tblptru	equ	0xFF8
 18929                           tblptrh	equ	0xFF7
 18930                           tblptrl	equ	0xFF6
 18931                           tablat	equ	0xFF5
 18932                           prodh	equ	0xFF4
 18933                           prodl	equ	0xFF3
 18934                           intcon	equ	0xFF2
 18935                           postinc0	equ	0xFEE
 18936                           wreg	equ	0xFE8
 18937                           indf1	equ	0xFE7
 18938                           postdec1	equ	0xFE5
 18939                           fsr1h	equ	0xFE2
 18940                           fsr1l	equ	0xFE1
 18941                           indf2	equ	0xFDF
 18942                           postinc2	equ	0xFDE
 18943                           postdec2	equ	0xFDD
 18944                           plusw2	equ	0xFDB
 18945                           fsr2h	equ	0xFDA
 18946                           fsr2l	equ	0xFD9
 18947                           status	equ	0xFD8
 18948                           
 18949 ;; *************** function _LCD_Init *****************
 18950 ;; Defined at:
 18951 ;;		line 172 in file "Library/LCD.c"
 18952 ;; Parameters:    Size  Location     Type
 18953 ;;		None
 18954 ;; Auto vars:     Size  Location     Type
 18955 ;;  i               2   55[BANK0 ] unsigned short 
 18956 ;; Return value:  Size  Location     Type
 18957 ;;                  1    wreg      void 
 18958 ;; Registers used:
 18959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18960 ;; Tracked objects:
 18961 ;;		On entry : 0/0
 18962 ;;		On exit  : 0/0
 18963 ;;		Unchanged: 0/0
 18964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;Total ram usage:        4 bytes
 18970 ;; Hardware stack levels used:    1
 18971 ;; Hardware stack levels required when called:   15
 18972 ;; This function calls:
 18973 ;;		_Configure_GPIOs
 18974 ;;		_LCD_Fill
 18975 ;;		_LCD_Write
 18976 ;;		_Set_Rotation
 18977 ;;		_delay_ms
 18978 ;; This function is called by:
 18979 ;;		_init
 18980 ;; This function uses a non-reentrant model
 18981 ;;
 18982                           
 18983                           	psect	text82
 18984  013234                     __ptext82:
 18985                           	opt stack 0
 18986  013234                     _LCD_Init:
 18987                           	opt stack 14
 18988                           
 18989                           ;LCD.c: 174: UINT16 i;
 18990                           ;LCD.c: 175: Configure_GPIOs();
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;incstack = 0
 18994  013234  EC60  F0AD         	call	_Configure_GPIOs	;wreg free
 18995                           
 18996                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 18997  013238  0E00               	movlw	0
 18998  01323A  0100               	movlb	0	; () banked
 18999  01323C  6FED               	movwf	(LCD_Init@i+1)& (0+255),b
 19000  01323E  0E00               	movlw	0
 19001  013240  6FEC               	movwf	LCD_Init@i& (0+255),b
 19002                           
 19003                           ; BSR set to: 0
 19004  013242  0100               	movlb	0	; () banked
 19005  013244  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 19006  013246  E106               	bnz	u11610
 19007  013248  0E59               	movlw	89
 19008  01324A  0100               	movlb	0	; () banked
 19009  01324C  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 19010  01324E  B0D8               	btfsc	status,0,c
 19011  013250  D08B               	goto	u11650
 19012  013252  D001               	goto	l85
 19013  013254                     u11610:
 19014                           
 19015                           ; BSR set to: 0
 19016  013254  D089               	goto	u11650
 19017  013256                     l85:
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;LCD.c: 178: {
 19021                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19022                           
 19023                           ; BSR set to: 0
 19024  013256  90D8               	bcf	status,0,c
 19025  013258  0100               	movlb	0	; () banked
 19026  01325A  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 19027  01325C  6EF6               	movwf	tblptrl,c
 19028  01325E  0100               	movlb	0	; () banked
 19029  013260  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19030  013262  6EF7               	movwf	tblptrh,c
 19031  013264  0E7F               	movlw	low _InitList
 19032  013266  26F6               	addwf	tblptrl,f,c
 19033  013268  0EFC               	movlw	high _InitList
 19034  01326A  22F7               	addwfc	tblptrh,f,c
 19035  01326C                     	if	1	;There are 3 active tblptr bytes
 19036  01326C  6AF8               	clrf	tblptru,c
 19037  01326E  0E00               	movlw	low (__mediumconst shr (0+16))
 19038  013270  22F8               	addwfc	tblptru,f,c
 19039  013272                     	endif
 19040  013272  0009               	tblrd		*+
 19041  013274  0E80               	movlw	128
 19042  013276  18F5               	xorwf	tablat,w,c
 19043  013278  0009               	tblrd		*+
 19044  01327A  10F5               	iorwf	tablat,w,c
 19045  01327C  A4D8               	btfss	status,2,c
 19046  01327E  D022               	goto	l87
 19047                           
 19048                           ; BSR set to: 0
 19049  013280  0100               	movlb	0	; () banked
 19050  013282  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 19051  013284  E11F               	bnz	l14734
 19052  013286  0E58               	movlw	88
 19053  013288  0100               	movlb	0	; () banked
 19054  01328A  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 19055  01328C  B0D8               	btfsc	status,0,c
 19056  01328E  D01A               	goto	l87
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19060  013290  0100               	movlb	0	; () banked
 19061  013292  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 19062  013294  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 19063  013296  90D8               	bcf	status,0,c
 19064  013298  0100               	movlb	0	; () banked
 19065  01329A  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 19066  01329C  6EF6               	movwf	tblptrl,c
 19067  01329E  0100               	movlb	0	; () banked
 19068  0132A0  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19069  0132A2  6EF7               	movwf	tblptrh,c
 19070  0132A4  0E7F               	movlw	low _InitList
 19071  0132A6  26F6               	addwf	tblptrl,f,c
 19072  0132A8  0EFC               	movlw	high _InitList
 19073  0132AA  22F7               	addwfc	tblptrh,f,c
 19074  0132AC                     	if	1	;There are 3 active tblptr bytes
 19075  0132AC  6AF8               	clrf	tblptru,c
 19076  0132AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19077  0132B0  22F8               	addwfc	tblptru,f,c
 19078  0132B2                     	endif
 19079  0132B2  0009               	tblrd		*+
 19080  0132B4  CFF5 F0B5          	movff	tablat,delay_ms@ms
 19081  0132B8  000A               	tblrd		*-
 19082  0132BA  CFF5 F0B6          	movff	tablat,delay_ms@ms+1
 19083  0132BE  EC39  F0AE         	call	_delay_ms	;wreg free
 19084  0132C2  D04B               	goto	l90
 19085  0132C4                     l87:
 19086  0132C4                     l14734:
 19087                           
 19088                           ;LCD.c: 181: else
 19089                           ;LCD.c: 182: {
 19090                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19091  0132C4  90D8               	bcf	status,0,c
 19092  0132C6  0100               	movlb	0	; () banked
 19093  0132C8  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 19094  0132CA  6EF6               	movwf	tblptrl,c
 19095  0132CC  0100               	movlb	0	; () banked
 19096  0132CE  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19097  0132D0  6EF7               	movwf	tblptrh,c
 19098  0132D2  0E7F               	movlw	low _InitList
 19099  0132D4  26F6               	addwf	tblptrl,f,c
 19100  0132D6  0EFC               	movlw	high _InitList
 19101  0132D8  22F7               	addwfc	tblptrh,f,c
 19102  0132DA                     	if	1	;There are 3 active tblptr bytes
 19103  0132DA  6AF8               	clrf	tblptru,c
 19104  0132DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19105  0132DE  22F8               	addwfc	tblptru,f,c
 19106  0132E0                     	endif
 19107  0132E0  0009               	tblrd		*+
 19108  0132E2  0E00               	movlw	0
 19109  0132E4  5EF5               	subwf	tablat,f,c
 19110  0132E6  0009               	tblrd		*+
 19111  0132E8  0E01               	movlw	1
 19112  0132EA  5AF5               	subwfb	tablat,f,c
 19113  0132EC  A0D8               	btfss	status,0,c
 19114  0132EE  D020               	goto	l89
 19115                           
 19116                           ; BSR set to: 0
 19117  0132F0  0E00               	movlw	0
 19118  0132F2  0100               	movlb	0	; () banked
 19119  0132F4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19120  0132F6  90D8               	bcf	status,0,c
 19121  0132F8  0100               	movlb	0	; () banked
 19122  0132FA  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 19123  0132FC  6EF6               	movwf	tblptrl,c
 19124  0132FE  0100               	movlb	0	; () banked
 19125  013300  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19126  013302  6EF7               	movwf	tblptrh,c
 19127  013304  0E7F               	movlw	low _InitList
 19128  013306  26F6               	addwf	tblptrl,f,c
 19129  013308  0EFC               	movlw	high _InitList
 19130  01330A  22F7               	addwfc	tblptrh,f,c
 19131  01330C                     	if	1	;There are 3 active tblptr bytes
 19132  01330C  6AF8               	clrf	tblptru,c
 19133  01330E  0E00               	movlw	low (__mediumconst shr (0+16))
 19134  013310  22F8               	addwfc	tblptru,f,c
 19135  013312                     	endif
 19136  013312  0009               	tblrd		*+
 19137  013314  CFF5 F0EA          	movff	tablat,??_LCD_Init
 19138  013318  0009               	tblrd		*+
 19139  01331A  CFF5 F0EB          	movff	tablat,??_LCD_Init+1
 19140  01331E  C0EB  F0EA         	movff	??_LCD_Init+1,??_LCD_Init
 19141  013322  0100               	movlb	0	; () banked
 19142  013324  6BEB               	clrf	(??_LCD_Init+1)& (0+255),b
 19143  013326  0100               	movlb	0	; () banked
 19144  013328  51EA               	movf	??_LCD_Init& (0+255),w,b
 19145  01332A  ECB6  F0B4         	call	_LCD_Write
 19146  01332E  D015               	goto	l90
 19147  013330                     l89:
 19148                           
 19149                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 19150  013330  0E01               	movlw	1
 19151  013332  0100               	movlb	0	; () banked
 19152  013334  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19153  013336  90D8               	bcf	status,0,c
 19154  013338  0100               	movlb	0	; () banked
 19155  01333A  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 19156  01333C  6EF6               	movwf	tblptrl,c
 19157  01333E  0100               	movlb	0	; () banked
 19158  013340  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19159  013342  6EF7               	movwf	tblptrh,c
 19160  013344  0E7F               	movlw	low _InitList
 19161  013346  26F6               	addwf	tblptrl,f,c
 19162  013348  0EFC               	movlw	high _InitList
 19163  01334A  22F7               	addwfc	tblptrh,f,c
 19164  01334C                     	if	1	;There are 3 active tblptr bytes
 19165  01334C  6AF8               	clrf	tblptru,c
 19166  01334E  0E00               	movlw	low (__mediumconst shr (0+16))
 19167  013350  22F8               	addwfc	tblptru,f,c
 19168  013352                     	endif
 19169  013352  0008               	tblrd		*
 19170  013354  50F5               	movf	tablat,w,c
 19171  013356  ECB6  F0B4         	call	_LCD_Write
 19172  01335A                     l90:
 19173  01335A  0100               	movlb	0	; () banked
 19174  01335C  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 19175  01335E  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 19176                           
 19177                           ; BSR set to: 0
 19178  013360  0100               	movlb	0	; () banked
 19179  013362  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 19180  013364  E101               	bnz	l14744
 19181  013366  D770               	goto	L12
 19182  013368                     u11650:
 19183  013368                     l14744:
 19184                           
 19185                           ; BSR set to: 0
 19186                           ;LCD.c: 185: }
 19187                           ;LCD.c: 186: }
 19188                           ;LCD.c: 187: delay_ms(100);
 19189  013368  0E00               	movlw	0
 19190  01336A  0100               	movlb	0	; () banked
 19191  01336C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 19192  01336E  0E64               	movlw	100
 19193  013370  6FB5               	movwf	delay_ms@ms& (0+255),b
 19194  013372  EC39  F0AE         	call	_delay_ms	;wreg free
 19195                           
 19196                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 19197  013376  0E00               	movlw	0
 19198  013378  0100               	movlb	0	; () banked
 19199  01337A  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19200  01337C  0E29               	movlw	41
 19201  01337E  ECB6  F0B4         	call	_LCD_Write
 19202                           
 19203                           ;LCD.c: 189: Set_Rotation(1);
 19204  013382  0E01               	movlw	1
 19205  013384  EC58  F0A9         	call	_Set_Rotation
 19206                           
 19207                           ;LCD.c: 191: delay_ms(100);
 19208  013388  0E00               	movlw	0
 19209  01338A  0100               	movlb	0	; () banked
 19210  01338C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 19211  01338E  0E64               	movlw	100
 19212  013390  6FB5               	movwf	delay_ms@ms& (0+255),b
 19213  013392  EC39  F0AE         	call	_delay_ms	;wreg free
 19214                           
 19215                           ;LCD.c: 192: LCD_Fill(0x0000);
 19216  013396  0E00               	movlw	0
 19217  013398  0100               	movlb	0	; () banked
 19218  01339A  6FBF               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 19219  01339C  0E00               	movlw	0
 19220  01339E  6FBE               	movwf	LCD_Fill@pColour& (0+255),b
 19221  0133A0  EC24  F0B0         	call	_LCD_Fill	;wreg free
 19222  0133A4  0012               	return		;funcret
 19223  0133A6                     __end_of_LCD_Init:
 19224                           	opt stack 0
 19225                           tosu	equ	0xFFF
 19226                           tosh	equ	0xFFE
 19227                           tosl	equ	0xFFD
 19228                           pclath	equ	0xFFA
 19229                           tblptru	equ	0xFF8
 19230                           tblptrh	equ	0xFF7
 19231                           tblptrl	equ	0xFF6
 19232                           tablat	equ	0xFF5
 19233                           prodh	equ	0xFF4
 19234                           prodl	equ	0xFF3
 19235                           intcon	equ	0xFF2
 19236                           postinc0	equ	0xFEE
 19237                           wreg	equ	0xFE8
 19238                           indf1	equ	0xFE7
 19239                           postdec1	equ	0xFE5
 19240                           fsr1h	equ	0xFE2
 19241                           fsr1l	equ	0xFE1
 19242                           indf2	equ	0xFDF
 19243                           postinc2	equ	0xFDE
 19244                           postdec2	equ	0xFDD
 19245                           plusw2	equ	0xFDB
 19246                           fsr2h	equ	0xFDA
 19247                           fsr2l	equ	0xFD9
 19248                           status	equ	0xFD8
 19249                           
 19250 ;; *************** function _Set_Rotation *****************
 19251 ;; Defined at:
 19252 ;;		line 248 in file "Library/LCD.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;  m               1    wreg     unsigned char 
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;  m               1    5[BANK0 ] unsigned char 
 19257 ;;  rotation        1    6[BANK0 ] unsigned char 
 19258 ;; Return value:  Size  Location     Type
 19259 ;;                  1    wreg      void 
 19260 ;; Registers used:
 19261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19262 ;; Tracked objects:
 19263 ;;		On entry : 0/0
 19264 ;;		On exit  : 0/0
 19265 ;;		Unchanged: 0/0
 19266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19271 ;;Total ram usage:        2 bytes
 19272 ;; Hardware stack levels used:    1
 19273 ;; Hardware stack levels required when called:    9
 19274 ;; This function calls:
 19275 ;;		_LCD_Write
 19276 ;; This function is called by:
 19277 ;;		_LCD_Init
 19278 ;; This function uses a non-reentrant model
 19279 ;;
 19280                           
 19281                           	psect	text83
 19282  0152B0                     __ptext83:
 19283                           	opt stack 0
 19284  0152B0                     _Set_Rotation:
 19285                           	opt stack 19
 19286                           
 19287                           ;incstack = 0
 19288                           ;Set_Rotation@m stored from wreg
 19289  0152B0  0100               	movlb	0	; () banked
 19290  0152B2  6FBA               	movwf	Set_Rotation@m& (0+255),b
 19291                           
 19292                           ;LCD.c: 250: UINT8 rotation = 0x00;
 19293  0152B4  0E00               	movlw	0
 19294  0152B6  0100               	movlb	0	; () banked
 19295  0152B8  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 19296                           
 19297                           ; BSR set to: 0
 19298                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 19299  0152BA  0E00               	movlw	0
 19300  0152BC  0100               	movlb	0	; () banked
 19301  0152BE  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19302  0152C0  0E36               	movlw	54
 19303  0152C2  ECB6  F0B4         	call	_LCD_Write
 19304                           
 19305                           ;LCD.c: 253: rotation = (m % 4);
 19306  0152C6  0100               	movlb	0	; () banked
 19307  0152C8  51BA               	movf	Set_Rotation@m& (0+255),w,b
 19308  0152CA  0B03               	andlw	3
 19309  0152CC  0100               	movlb	0	; () banked
 19310  0152CE  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 19311                           
 19312                           ;LCD.c: 255: switch(rotation)
 19313  0152D0  D02C               	goto	l117
 19314  0152D2                     
 19315                           ; BSR set to: 0
 19316                           ;LCD.c: 258: {
 19317                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 19318                           
 19319                           ; BSR set to: 0
 19320  0152D2  0E01               	movlw	1
 19321  0152D4  0100               	movlb	0	; () banked
 19322  0152D6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19323  0152D8  0EC8               	movlw	200
 19324  0152DA  ECB6  F0B4         	call	_LCD_Write
 19325                           
 19326                           ;LCD.c: 260: w = 128;
 19327  0152DE  0E80               	movlw	128
 19328  0152E0  6E50               	movwf	_w,c
 19329                           
 19330                           ;LCD.c: 261: l = 128;
 19331  0152E2  0E80               	movlw	128
 19332  0152E4  6E4F               	movwf	_l,c
 19333                           
 19334                           ;LCD.c: 262: break;
 19335  0152E6  0012               	return	
 19336  0152E8                     
 19337                           ;LCD.c: 265: {
 19338                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 19339  0152E8  0E01               	movlw	1
 19340  0152EA  0100               	movlb	0	; () banked
 19341  0152EC  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19342  0152EE  0EA8               	movlw	168
 19343  0152F0  ECB6  F0B4         	call	_LCD_Write
 19344                           
 19345                           ;LCD.c: 267: w = 128;
 19346  0152F4  0E80               	movlw	128
 19347  0152F6  6E50               	movwf	_w,c
 19348                           
 19349                           ;LCD.c: 268: l = 128;
 19350  0152F8  0E80               	movlw	128
 19351  0152FA  6E4F               	movwf	_l,c
 19352                           
 19353                           ;LCD.c: 269: break;
 19354  0152FC  0012               	return	
 19355  0152FE                     
 19356                           ;LCD.c: 272: {
 19357                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 19358  0152FE  0E01               	movlw	1
 19359  015300  0100               	movlb	0	; () banked
 19360  015302  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19361  015304  0E08               	movlw	8
 19362  015306  ECB6  F0B4         	call	_LCD_Write
 19363                           
 19364                           ;LCD.c: 274: w = 128;
 19365  01530A  0E80               	movlw	128
 19366  01530C  6E50               	movwf	_w,c
 19367                           
 19368                           ;LCD.c: 275: l = 128;
 19369  01530E  0E80               	movlw	128
 19370  015310  6E4F               	movwf	_l,c
 19371                           
 19372                           ;LCD.c: 276: break;
 19373  015312  0012               	return	
 19374  015314                     
 19375                           ;LCD.c: 279: {
 19376                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 19377  015314  0E01               	movlw	1
 19378  015316  0100               	movlb	0	; () banked
 19379  015318  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19380  01531A  0E68               	movlw	104
 19381  01531C  ECB6  F0B4         	call	_LCD_Write
 19382                           
 19383                           ;LCD.c: 281: w = 128;
 19384  015320  0E80               	movlw	128
 19385  015322  6E50               	movwf	_w,c
 19386                           
 19387                           ;LCD.c: 282: l = 128;
 19388  015324  0E80               	movlw	128
 19389  015326  6E4F               	movwf	_l,c
 19390                           
 19391                           ;LCD.c: 284: }
 19392                           ;LCD.c: 285: }
 19393                           
 19394                           ;LCD.c: 283: break;
 19395  015328  0012               	return	
 19396  01532A                     l117:
 19397  01532A  0100               	movlb	0	; () banked
 19398  01532C  51BB               	movf	Set_Rotation@rotation& (0+255),w,b
 19399                           
 19400                           ; Switch size 1, requested type "space"
 19401                           ; Number of cases is 4, Range of values is 0 to 3
 19402                           ; switch strategies available:
 19403                           ; Name         Instructions Cycles
 19404                           ; simple_byte           13     7 (average)
 19405                           ;	Chosen strategy is simple_byte
 19406  01532E  0A00               	xorlw	0	; case 0
 19407  015330  B4D8               	btfsc	status,2,c
 19408  015332  D7CF               	goto	l118
 19409  015334  0A01               	xorlw	1	; case 1
 19410  015336  B4D8               	btfsc	status,2,c
 19411  015338  D7D7               	goto	l120
 19412  01533A  0A03               	xorlw	3	; case 2
 19413  01533C  B4D8               	btfsc	status,2,c
 19414  01533E  D7DF               	goto	l121
 19415  015340  0A01               	xorlw	1	; case 3
 19416  015342  A4D8               	btfss	status,2,c
 19417  015344  0012               	return	
 19418  015346  D7E6               	goto	l122
 19419  015348                     __end_of_Set_Rotation:
 19420                           	opt stack 0
 19421                           tosu	equ	0xFFF
 19422                           tosh	equ	0xFFE
 19423                           tosl	equ	0xFFD
 19424                           pclath	equ	0xFFA
 19425                           tblptru	equ	0xFF8
 19426                           tblptrh	equ	0xFF7
 19427                           tblptrl	equ	0xFF6
 19428                           tablat	equ	0xFF5
 19429                           prodh	equ	0xFF4
 19430                           prodl	equ	0xFF3
 19431                           intcon	equ	0xFF2
 19432                           postinc0	equ	0xFEE
 19433                           wreg	equ	0xFE8
 19434                           indf1	equ	0xFE7
 19435                           postdec1	equ	0xFE5
 19436                           fsr1h	equ	0xFE2
 19437                           fsr1l	equ	0xFE1
 19438                           indf2	equ	0xFDF
 19439                           postinc2	equ	0xFDE
 19440                           postdec2	equ	0xFDD
 19441                           plusw2	equ	0xFDB
 19442                           fsr2h	equ	0xFDA
 19443                           fsr2l	equ	0xFD9
 19444                           status	equ	0xFD8
 19445                           
 19446 ;; *************** function _LCD_Fill *****************
 19447 ;; Defined at:
 19448 ;;		line 287 in file "Library/LCD.c"
 19449 ;; Parameters:    Size  Location     Type
 19450 ;;  pColour         2    9[BANK0 ] unsigned short 
 19451 ;; Auto vars:     Size  Location     Type
 19452 ;;  j               1   12[BANK0 ] unsigned char 
 19453 ;;  i               1   11[BANK0 ] unsigned char 
 19454 ;; Return value:  Size  Location     Type
 19455 ;;                  1    wreg      void 
 19456 ;; Registers used:
 19457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19458 ;; Tracked objects:
 19459 ;;		On entry : 0/0
 19460 ;;		On exit  : 0/0
 19461 ;;		Unchanged: 0/0
 19462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19466 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19467 ;;Total ram usage:        4 bytes
 19468 ;; Hardware stack levels used:    1
 19469 ;; Hardware stack levels required when called:   10
 19470 ;; This function calls:
 19471 ;;		_LCD_Word_Write
 19472 ;;		_Set_Addr_Window
 19473 ;; This function is called by:
 19474 ;;		_LCD_Init
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text84
 19479  016048                     __ptext84:
 19480                           	opt stack 0
 19481  016048                     _LCD_Fill:
 19482                           	opt stack 18
 19483                           
 19484                           ;LCD.c: 296: UINT8 i = 0x00;
 19485                           
 19486                           ;incstack = 0
 19487  016048  0E00               	movlw	0
 19488  01604A  0100               	movlb	0	; () banked
 19489  01604C  6FC0               	movwf	LCD_Fill@i& (0+255),b
 19490                           
 19491                           ;LCD.c: 297: UINT8 j = 0x00;
 19492  01604E  0E00               	movlw	0
 19493  016050  0100               	movlb	0	; () banked
 19494  016052  6FC1               	movwf	LCD_Fill@j& (0+255),b
 19495                           
 19496                           ; BSR set to: 0
 19497                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 19498  016054  0E00               	movlw	0
 19499  016056  0100               	movlb	0	; () banked
 19500  016058  6FBA               	movwf	Set_Addr_Window@ys& (0+255),b
 19501  01605A  0450               	decf	_w,w,c
 19502  01605C  0100               	movlb	0	; () banked
 19503  01605E  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 19504  016060  044F               	decf	_l,w,c
 19505  016062  0100               	movlb	0	; () banked
 19506  016064  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 19507  016066  0E00               	movlw	0
 19508  016068  EC22  F0A6         	call	_Set_Addr_Window
 19509                           
 19510                           ;LCD.c: 299: for (j = l; j > 0; j--)
 19511  01606C  C04F  F0C1         	movff	_l,LCD_Fill@j
 19512  016070                     l14392:
 19513  016070  0100               	movlb	0	; () banked
 19514  016072  51C1               	movf	LCD_Fill@j& (0+255),w,b
 19515  016074  0100               	movlb	0	; () banked
 19516  016076  B4D8               	btfsc	status,2,c
 19517  016078  0012               	return	
 19518                           
 19519                           ; BSR set to: 0
 19520                           ;LCD.c: 300: for (i = w; i > 0; i--)
 19521                           
 19522                           ; BSR set to: 0
 19523  01607A  C050  F0C0         	movff	_w,LCD_Fill@i
 19524  01607E                     l14396:
 19525                           
 19526                           ; BSR set to: 0
 19527  01607E  0100               	movlb	0	; () banked
 19528  016080  51C0               	movf	LCD_Fill@i& (0+255),w,b
 19529  016082  0100               	movlb	0	; () banked
 19530  016084  B4D8               	btfsc	status,2,c
 19531  016086  D009               	goto	u11230
 19532                           
 19533                           ; BSR set to: 0
 19534                           ;LCD.c: 301: LCD_Word_Write(pColour);
 19535                           
 19536                           ; BSR set to: 0
 19537                           
 19538                           ; BSR set to: 0
 19539  016088  C0BE  F0BA         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 19540  01608C  C0BF  F0BB         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 19541  016090  EC17  F0B5         	call	_LCD_Word_Write	;wreg free
 19542  016094  0100               	movlb	0	; () banked
 19543  016096  07C0               	decf	LCD_Fill@i& (0+255),f,b
 19544  016098  D7F2               	goto	l14396
 19545  01609A                     u11230:
 19546                           
 19547                           ; BSR set to: 0
 19548                           
 19549                           ; BSR set to: 0
 19550  01609A  0100               	movlb	0	; () banked
 19551  01609C  07C1               	decf	LCD_Fill@j& (0+255),f,b
 19552  01609E  D7E8               	goto	l14392
 19553  0160A0                     __end_of_LCD_Fill:
 19554                           	opt stack 0
 19555                           tosu	equ	0xFFF
 19556                           tosh	equ	0xFFE
 19557                           tosl	equ	0xFFD
 19558                           pclath	equ	0xFFA
 19559                           tblptru	equ	0xFF8
 19560                           tblptrh	equ	0xFF7
 19561                           tblptrl	equ	0xFF6
 19562                           tablat	equ	0xFF5
 19563                           prodh	equ	0xFF4
 19564                           prodl	equ	0xFF3
 19565                           intcon	equ	0xFF2
 19566                           postinc0	equ	0xFEE
 19567                           wreg	equ	0xFE8
 19568                           indf1	equ	0xFE7
 19569                           postdec1	equ	0xFE5
 19570                           fsr1h	equ	0xFE2
 19571                           fsr1l	equ	0xFE1
 19572                           indf2	equ	0xFDF
 19573                           postinc2	equ	0xFDE
 19574                           postdec2	equ	0xFDD
 19575                           plusw2	equ	0xFDB
 19576                           fsr2h	equ	0xFDA
 19577                           fsr2l	equ	0xFD9
 19578                           status	equ	0xFD8
 19579                           
 19580 ;; *************** function _Set_Addr_Window *****************
 19581 ;; Defined at:
 19582 ;;		line 214 in file "Library/LCD.c"
 19583 ;; Parameters:    Size  Location     Type
 19584 ;;  xs              1    wreg     unsigned char 
 19585 ;;  ys              1    5[BANK0 ] unsigned char 
 19586 ;;  xe              1    6[BANK0 ] unsigned char 
 19587 ;;  ye              1    7[BANK0 ] unsigned char 
 19588 ;; Auto vars:     Size  Location     Type
 19589 ;;  xs              1    8[BANK0 ] unsigned char 
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      void 
 19592 ;; Registers used:
 19593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:        4 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    9
 19606 ;; This function calls:
 19607 ;;		_LCD_Write
 19608 ;; This function is called by:
 19609 ;;		_LCD_Fill
 19610 ;;		_LCD_FillRectangle
 19611 ;;		_LCD_DrawField
 19612 ;;		_RAM_Address_Set
 19613 ;;		_LCD_DrawPixel
 19614 ;; This function uses a non-reentrant model
 19615 ;;
 19616                           
 19617                           	psect	text85
 19618  014C44                     __ptext85:
 19619                           	opt stack 0
 19620  014C44                     _Set_Addr_Window:
 19621                           	opt stack 17
 19622                           
 19623                           ; BSR set to: 0
 19624                           ;incstack = 0
 19625                           ;Set_Addr_Window@xs stored from wreg
 19626  014C44  0100               	movlb	0	; () banked
 19627  014C46  6FBD               	movwf	Set_Addr_Window@xs& (0+255),b
 19628                           
 19629                           ;LCD.c: 216: ys+=2;
 19630  014C48  0E02               	movlw	2
 19631  014C4A  0100               	movlb	0	; () banked
 19632  014C4C  27BA               	addwf	Set_Addr_Window@ys& (0+255),f,b
 19633                           
 19634                           ;LCD.c: 217: ye+=2;
 19635  014C4E  0E02               	movlw	2
 19636  014C50  0100               	movlb	0	; () banked
 19637  014C52  27BC               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19638                           
 19639                           ;LCD.c: 218: xs+=3;
 19640  014C54  0E03               	movlw	3
 19641  014C56  0100               	movlb	0	; () banked
 19642  014C58  27BD               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19643                           
 19644                           ;LCD.c: 219: xe+=3;
 19645  014C5A  0E03               	movlw	3
 19646  014C5C  0100               	movlb	0	; () banked
 19647  014C5E  27BB               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19651  014C60  0E00               	movlw	0
 19652  014C62  0100               	movlb	0	; () banked
 19653  014C64  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19654  014C66  0E2A               	movlw	42
 19655  014C68  ECB6  F0B4         	call	_LCD_Write
 19656                           
 19657                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19658  014C6C  0E01               	movlw	1
 19659  014C6E  0100               	movlb	0	; () banked
 19660  014C70  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19661  014C72  0E00               	movlw	0
 19662  014C74  ECB6  F0B4         	call	_LCD_Write
 19663                           
 19664                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19665  014C78  0E01               	movlw	1
 19666  014C7A  0100               	movlb	0	; () banked
 19667  014C7C  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19668  014C7E  0100               	movlb	0	; () banked
 19669  014C80  51BD               	movf	Set_Addr_Window@xs& (0+255),w,b
 19670  014C82  ECB6  F0B4         	call	_LCD_Write
 19671                           
 19672                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19673  014C86  0E01               	movlw	1
 19674  014C88  0100               	movlb	0	; () banked
 19675  014C8A  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19676  014C8C  0E00               	movlw	0
 19677  014C8E  ECB6  F0B4         	call	_LCD_Write
 19678                           
 19679                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19680  014C92  0E01               	movlw	1
 19681  014C94  0100               	movlb	0	; () banked
 19682  014C96  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19683  014C98  0100               	movlb	0	; () banked
 19684  014C9A  51BB               	movf	Set_Addr_Window@xe& (0+255),w,b
 19685  014C9C  ECB6  F0B4         	call	_LCD_Write
 19686                           
 19687                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19688  014CA0  0E00               	movlw	0
 19689  014CA2  0100               	movlb	0	; () banked
 19690  014CA4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19691  014CA6  0E2B               	movlw	43
 19692  014CA8  ECB6  F0B4         	call	_LCD_Write
 19693                           
 19694                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19695  014CAC  0E01               	movlw	1
 19696  014CAE  0100               	movlb	0	; () banked
 19697  014CB0  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19698  014CB2  0E00               	movlw	0
 19699  014CB4  ECB6  F0B4         	call	_LCD_Write
 19700                           
 19701                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19702  014CB8  0E01               	movlw	1
 19703  014CBA  0100               	movlb	0	; () banked
 19704  014CBC  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19705  014CBE  0100               	movlb	0	; () banked
 19706  014CC0  51BA               	movf	Set_Addr_Window@ys& (0+255),w,b
 19707  014CC2  ECB6  F0B4         	call	_LCD_Write
 19708                           
 19709                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19710  014CC6  0E01               	movlw	1
 19711  014CC8  0100               	movlb	0	; () banked
 19712  014CCA  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19713  014CCC  0E00               	movlw	0
 19714  014CCE  ECB6  F0B4         	call	_LCD_Write
 19715                           
 19716                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19717  014CD2  0E01               	movlw	1
 19718  014CD4  0100               	movlb	0	; () banked
 19719  014CD6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19720  014CD8  0100               	movlb	0	; () banked
 19721  014CDA  51BC               	movf	Set_Addr_Window@ye& (0+255),w,b
 19722  014CDC  ECB6  F0B4         	call	_LCD_Write
 19723                           
 19724                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19725  014CE0  0E00               	movlw	0
 19726  014CE2  0100               	movlb	0	; () banked
 19727  014CE4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19728  014CE6  0E2C               	movlw	44
 19729  014CE8  ECB6  F0B4         	call	_LCD_Write
 19730  014CEC  0012               	return		;funcret
 19731  014CEE                     __end_of_Set_Addr_Window:
 19732                           	opt stack 0
 19733                           tosu	equ	0xFFF
 19734                           tosh	equ	0xFFE
 19735                           tosl	equ	0xFFD
 19736                           pclath	equ	0xFFA
 19737                           tblptru	equ	0xFF8
 19738                           tblptrh	equ	0xFF7
 19739                           tblptrl	equ	0xFF6
 19740                           tablat	equ	0xFF5
 19741                           prodh	equ	0xFF4
 19742                           prodl	equ	0xFF3
 19743                           intcon	equ	0xFF2
 19744                           postinc0	equ	0xFEE
 19745                           wreg	equ	0xFE8
 19746                           indf1	equ	0xFE7
 19747                           postdec1	equ	0xFE5
 19748                           fsr1h	equ	0xFE2
 19749                           fsr1l	equ	0xFE1
 19750                           indf2	equ	0xFDF
 19751                           postinc2	equ	0xFDE
 19752                           postdec2	equ	0xFDD
 19753                           plusw2	equ	0xFDB
 19754                           fsr2h	equ	0xFDA
 19755                           fsr2l	equ	0xFD9
 19756                           status	equ	0xFD8
 19757                           
 19758 ;; *************** function _LCD_Word_Write *****************
 19759 ;; Defined at:
 19760 ;;		line 198 in file "Library/LCD.c"
 19761 ;; Parameters:    Size  Location     Type
 19762 ;;  value           2    5[BANK0 ] unsigned short 
 19763 ;; Auto vars:     Size  Location     Type
 19764 ;;		None
 19765 ;; Return value:  Size  Location     Type
 19766 ;;                  1    wreg      void 
 19767 ;; Registers used:
 19768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19769 ;; Tracked objects:
 19770 ;;		On entry : 0/0
 19771 ;;		On exit  : 0/0
 19772 ;;		Unchanged: 0/0
 19773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19778 ;;Total ram usage:        2 bytes
 19779 ;; Hardware stack levels used:    1
 19780 ;; Hardware stack levels required when called:    9
 19781 ;; This function calls:
 19782 ;;		_LCD_Write
 19783 ;; This function is called by:
 19784 ;;		_LCD_Fill
 19785 ;;		_LCD_FillRectangle
 19786 ;;		_LCD_DrawField
 19787 ;;		_LCD_DrawPixel
 19788 ;; This function uses a non-reentrant model
 19789 ;;
 19790                           
 19791                           	psect	text86
 19792  016A2E                     __ptext86:
 19793                           	opt stack 0
 19794  016A2E                     _LCD_Word_Write:
 19795                           	opt stack 17
 19796                           
 19797                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 19798                           
 19799                           ;incstack = 0
 19800  016A2E  0E01               	movlw	1
 19801  016A30  0100               	movlb	0	; () banked
 19802  016A32  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19803  016A34  0100               	movlb	0	; () banked
 19804  016A36  51BB               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 19805  016A38  ECB6  F0B4         	call	_LCD_Write
 19806                           
 19807                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 19808  016A3C  0E01               	movlw	1
 19809  016A3E  0100               	movlb	0	; () banked
 19810  016A40  6FB8               	movwf	LCD_Write@mode& (0+255),b
 19811  016A42  0100               	movlb	0	; () banked
 19812  016A44  51BA               	movf	LCD_Word_Write@value& (0+255),w,b
 19813  016A46  ECB6  F0B4         	call	_LCD_Write
 19814  016A4A  0012               	return		;funcret
 19815  016A4C                     __end_of_LCD_Word_Write:
 19816                           	opt stack 0
 19817                           tosu	equ	0xFFF
 19818                           tosh	equ	0xFFE
 19819                           tosl	equ	0xFFD
 19820                           pclath	equ	0xFFA
 19821                           tblptru	equ	0xFF8
 19822                           tblptrh	equ	0xFF7
 19823                           tblptrl	equ	0xFF6
 19824                           tablat	equ	0xFF5
 19825                           prodh	equ	0xFF4
 19826                           prodl	equ	0xFF3
 19827                           intcon	equ	0xFF2
 19828                           postinc0	equ	0xFEE
 19829                           wreg	equ	0xFE8
 19830                           indf1	equ	0xFE7
 19831                           postdec1	equ	0xFE5
 19832                           fsr1h	equ	0xFE2
 19833                           fsr1l	equ	0xFE1
 19834                           indf2	equ	0xFDF
 19835                           postinc2	equ	0xFDE
 19836                           postdec2	equ	0xFDD
 19837                           plusw2	equ	0xFDB
 19838                           fsr2h	equ	0xFDA
 19839                           fsr2l	equ	0xFD9
 19840                           status	equ	0xFD8
 19841                           
 19842 ;; *************** function _LCD_Write *****************
 19843 ;; Defined at:
 19844 ;;		line 67 in file "Library/LCD.c"
 19845 ;; Parameters:    Size  Location     Type
 19846 ;;  value           1    wreg     unsigned char 
 19847 ;;  mode            1    3[BANK0 ] enum E6761
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;  value           1    4[BANK0 ] unsigned char 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  1    wreg      void 
 19852 ;; Registers used:
 19853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19863 ;;Total ram usage:        2 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    8
 19866 ;; This function calls:
 19867 ;;		_Mode_Set
 19868 ;;		_SPI_Send
 19869 ;; This function is called by:
 19870 ;;		_LCD_Init
 19871 ;;		_LCD_Word_Write
 19872 ;;		_Set_Addr_Window
 19873 ;;		_Set_Rotation
 19874 ;;		_LCD_WriteCMD
 19875 ;;		_LCD_WriteData
 19876 ;;		_LCD_Data_Write
 19877 ;;		_LCD_Data_Write_4k
 19878 ;;		_Invert_Display
 19879 ;; This function uses a non-reentrant model
 19880 ;;
 19881                           
 19882                           	psect	text87
 19883  01696C                     __ptext87:
 19884                           	opt stack 0
 19885  01696C                     _LCD_Write:
 19886                           	opt stack 17
 19887                           
 19888                           ;incstack = 0
 19889                           ;LCD_Write@value stored from wreg
 19890  01696C  0100               	movlb	0	; () banked
 19891  01696E  6FB9               	movwf	LCD_Write@value& (0+255),b
 19892                           
 19893                           ;LCD.c: 89: Mode_Set(mode);
 19894  016970  0100               	movlb	0	; () banked
 19895  016972  51B8               	movf	LCD_Write@mode& (0+255),w,b
 19896  016974  EC2E  F0B6         	call	_Mode_Set
 19897                           
 19898                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19899  016978  0E83               	movlw	low _SPI2
 19900  01697A  0100               	movlb	0	; () banked
 19901  01697C  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 19902  01697E  0E03               	movlw	high _SPI2
 19903  016980  0100               	movlb	0	; () banked
 19904  016982  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19905  016984  C0B9  F0B7         	movff	LCD_Write@value,SPI_Send@pData
 19906  016988  EC98  F0AD         	call	_SPI_Send	;wreg free
 19907  01698C  0012               	return		;funcret
 19908  01698E                     __end_of_LCD_Write:
 19909                           	opt stack 0
 19910                           tosu	equ	0xFFF
 19911                           tosh	equ	0xFFE
 19912                           tosl	equ	0xFFD
 19913                           pclath	equ	0xFFA
 19914                           tblptru	equ	0xFF8
 19915                           tblptrh	equ	0xFF7
 19916                           tblptrl	equ	0xFF6
 19917                           tablat	equ	0xFF5
 19918                           prodh	equ	0xFF4
 19919                           prodl	equ	0xFF3
 19920                           intcon	equ	0xFF2
 19921                           postinc0	equ	0xFEE
 19922                           wreg	equ	0xFE8
 19923                           indf1	equ	0xFE7
 19924                           postdec1	equ	0xFE5
 19925                           fsr1h	equ	0xFE2
 19926                           fsr1l	equ	0xFE1
 19927                           indf2	equ	0xFDF
 19928                           postinc2	equ	0xFDE
 19929                           postdec2	equ	0xFDD
 19930                           plusw2	equ	0xFDB
 19931                           fsr2h	equ	0xFDA
 19932                           fsr2l	equ	0xFD9
 19933                           status	equ	0xFD8
 19934                           
 19935 ;; *************** function _SPI_Send *****************
 19936 ;; Defined at:
 19937 ;;		line 226 in file "Library/SPI.c"
 19938 ;; Parameters:    Size  Location     Type
 19939 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19940 ;;		 -> SPI1(11), SPI2(11), 
 19941 ;;  pData           1    2[BANK0 ] unsigned char 
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;		None
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  1    wreg      unsigned char 
 19946 ;; Registers used:
 19947 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19948 ;; Tracked objects:
 19949 ;;		On entry : 0/0
 19950 ;;		On exit  : 0/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19956 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19957 ;;Total ram usage:        3 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; Hardware stack levels required when called:    7
 19960 ;; This function calls:
 19961 ;;		Nothing
 19962 ;; This function is called by:
 19963 ;;		_LCD_Write
 19964 ;;		_OutSeg
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           	psect	text88
 19969  015B30                     __ptext88:
 19970                           	opt stack 0
 19971  015B30                     _SPI_Send:
 19972                           	opt stack 19
 19973                           
 19974                           ;SPI.c: 253: switch (pInput->mChannel)
 19975                           
 19976                           ;incstack = 0
 19977  015B30  D026               	goto	l678
 19978  015B32                     
 19979                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19980  015B32  C0A4  FFD9         	movff	_PortC+4,fsr2l
 19981  015B36  C0A5  FFDA         	movff	_PortC+5,fsr2h
 19982  015B3A  0100               	movlb	0	; () banked
 19983  015B3C  94DF               	bcf	indf2,2,c
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;SPI.c: 257: SSP1BUF = pData;
 19987  015B3E  C0B7  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19988  015B42                     
 19989                           ; BSR set to: 0
 19990  015B42  A0C7               	btfss	4039,0,c	;volatile
 19991  015B44  D7FE               	goto	l681
 19992                           
 19993                           ;SPI.c: 259: pData = SSP1BUF;
 19994  015B46  CFC9 F0B7          	movff	4041,SPI_Send@pData	;volatile
 19995                           
 19996                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19997  015B4A  C0A4  FFD9         	movff	_PortC+4,fsr2l
 19998  015B4E  C0A5  FFDA         	movff	_PortC+5,fsr2h
 19999  015B52  0100               	movlb	0	; () banked
 20000  015B54  84DF               	bsf	indf2,2,c
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;SPI.c: 261: return pData;
 20004                           ;	Return value of _SPI_Send is never used
 20005  015B56  0012               	return	
 20006  015B58                     
 20007                           ; BSR set to: 0
 20008                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20009                           
 20010                           ; BSR set to: 0
 20011  015B58  C09A  FFD9         	movff	_PortD+4,fsr2l
 20012  015B5C  C09B  FFDA         	movff	_PortD+5,fsr2h
 20013  015B60  0100               	movlb	0	; () banked
 20014  015B62  9EDF               	bcf	indf2,7,c
 20015                           
 20016                           ; BSR set to: 0
 20017                           ;SPI.c: 264: SSP2BUF = pData;
 20018  015B64  C0B7  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20019  015B68                     
 20020                           ; BSR set to: 0
 20021  015B68  A06D               	btfss	3949,0,c	;volatile
 20022  015B6A  D7FE               	goto	l686
 20023                           
 20024                           ;SPI.c: 266: pData = SSP2BUF;
 20025  015B6C  CF6F F0B7          	movff	3951,SPI_Send@pData	;volatile
 20026                           
 20027                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20028  015B70  C09A  FFD9         	movff	_PortD+4,fsr2l
 20029  015B74  C09B  FFDA         	movff	_PortD+5,fsr2h
 20030  015B78  0100               	movlb	0	; () banked
 20031  015B7A  8EDF               	bsf	indf2,7,c
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;SPI.c: 269: };
 20035                           
 20036                           ; BSR set to: 0
 20037                           ;SPI.c: 268: return pData;
 20038                           ;	Return value of _SPI_Send is never used
 20039  015B7C  0012               	return	
 20040  015B7E                     l678:
 20041                           
 20042                           ; BSR set to: 0
 20043  015B7E  0100               	movlb	0	; () banked
 20044  015B80  EE20 F002          	lfsr	2,2
 20045  015B84  51B5               	movf	SPI_Send@pInput& (0+255),w,b
 20046  015B86  26D9               	addwf	fsr2l,f,c
 20047  015B88  51B6               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20048  015B8A  22DA               	addwfc	fsr2h,f,c
 20049  015B8C  50DF               	movf	indf2,w,c
 20050                           
 20051                           ; Switch size 1, requested type "space"
 20052                           ; Number of cases is 2, Range of values is 0 to 1
 20053                           ; switch strategies available:
 20054                           ; Name         Instructions Cycles
 20055                           ; simple_byte            7     4 (average)
 20056                           ;	Chosen strategy is simple_byte
 20057  015B8E  0A00               	xorlw	0	; case 0
 20058  015B90  B4D8               	btfsc	status,2,c
 20059  015B92  D7CF               	goto	l679
 20060  015B94  0A01               	xorlw	1	; case 1
 20061  015B96  A4D8               	btfss	status,2,c
 20062  015B98  0012               	return	
 20063  015B9A  D7DE               	goto	l684
 20064  015B9C                     __end_of_SPI_Send:
 20065                           	opt stack 0
 20066                           tosu	equ	0xFFF
 20067                           tosh	equ	0xFFE
 20068                           tosl	equ	0xFFD
 20069                           pclath	equ	0xFFA
 20070                           tblptru	equ	0xFF8
 20071                           tblptrh	equ	0xFF7
 20072                           tblptrl	equ	0xFF6
 20073                           tablat	equ	0xFF5
 20074                           prodh	equ	0xFF4
 20075                           prodl	equ	0xFF3
 20076                           intcon	equ	0xFF2
 20077                           postinc0	equ	0xFEE
 20078                           wreg	equ	0xFE8
 20079                           indf1	equ	0xFE7
 20080                           postdec1	equ	0xFE5
 20081                           fsr1h	equ	0xFE2
 20082                           fsr1l	equ	0xFE1
 20083                           indf2	equ	0xFDF
 20084                           postinc2	equ	0xFDE
 20085                           postdec2	equ	0xFDD
 20086                           plusw2	equ	0xFDB
 20087                           fsr2h	equ	0xFDA
 20088                           fsr2l	equ	0xFD9
 20089                           status	equ	0xFD8
 20090                           
 20091 ;; *************** function _Mode_Set *****************
 20092 ;; Defined at:
 20093 ;;		line 40 in file "Library/LCD.c"
 20094 ;; Parameters:    Size  Location     Type
 20095 ;;  pMode           1    wreg     enum E6761
 20096 ;; Auto vars:     Size  Location     Type
 20097 ;;  pMode           1    0[BANK0 ] enum E6761
 20098 ;; Return value:  Size  Location     Type
 20099 ;;                  1    wreg      void 
 20100 ;; Registers used:
 20101 ;;		wreg
 20102 ;; Tracked objects:
 20103 ;;		On entry : 0/0
 20104 ;;		On exit  : 0/0
 20105 ;;		Unchanged: 0/0
 20106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20111 ;;Total ram usage:        1 bytes
 20112 ;; Hardware stack levels used:    1
 20113 ;; Hardware stack levels required when called:    7
 20114 ;; This function calls:
 20115 ;;		Nothing
 20116 ;; This function is called by:
 20117 ;;		_LCD_Write
 20118 ;; This function uses a non-reentrant model
 20119 ;;
 20120                           
 20121                           	psect	text89
 20122  016C5C                     __ptext89:
 20123                           	opt stack 0
 20124  016C5C                     _Mode_Set:
 20125                           	opt stack 17
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;incstack = 0
 20129                           ;Mode_Set@pMode stored from wreg
 20130  016C5C  0100               	movlb	0	; () banked
 20131  016C5E  6FB5               	movwf	Mode_Set@pMode& (0+255),b
 20132                           
 20133                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20134  016C60  0100               	movlb	0	; () banked
 20135  016C62  B1B5               	btfsc	Mode_Set@pMode& (0+255),0,b
 20136  016C64  D002               	bra	u9365
 20137  016C66  9E85               	bcf	3973,7,c	;volatile
 20138  016C68  D001               	bra	u9366
 20139  016C6A                     u9365:
 20140  016C6A  8E85               	bsf	3973,7,c	;volatile
 20141  016C6C                     u9366:
 20142  016C6C  0012               	return		;funcret
 20143  016C6E                     __end_of_Mode_Set:
 20144                           	opt stack 0
 20145                           tosu	equ	0xFFF
 20146                           tosh	equ	0xFFE
 20147                           tosl	equ	0xFFD
 20148                           pclath	equ	0xFFA
 20149                           tblptru	equ	0xFF8
 20150                           tblptrh	equ	0xFF7
 20151                           tblptrl	equ	0xFF6
 20152                           tablat	equ	0xFF5
 20153                           prodh	equ	0xFF4
 20154                           prodl	equ	0xFF3
 20155                           intcon	equ	0xFF2
 20156                           postinc0	equ	0xFEE
 20157                           wreg	equ	0xFE8
 20158                           indf1	equ	0xFE7
 20159                           postdec1	equ	0xFE5
 20160                           fsr1h	equ	0xFE2
 20161                           fsr1l	equ	0xFE1
 20162                           indf2	equ	0xFDF
 20163                           postinc2	equ	0xFDE
 20164                           postdec2	equ	0xFDD
 20165                           plusw2	equ	0xFDB
 20166                           fsr2h	equ	0xFDA
 20167                           fsr2l	equ	0xFD9
 20168                           status	equ	0xFD8
 20169                           
 20170 ;; *************** function _Configure_GPIOs *****************
 20171 ;; Defined at:
 20172 ;;		line 46 in file "Library/LCD.c"
 20173 ;; Parameters:    Size  Location     Type
 20174 ;;		None
 20175 ;; Auto vars:     Size  Location     Type
 20176 ;;		None
 20177 ;; Return value:  Size  Location     Type
 20178 ;;                  1    wreg      void 
 20179 ;; Registers used:
 20180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20181 ;; Tracked objects:
 20182 ;;		On entry : 0/0
 20183 ;;		On exit  : 0/0
 20184 ;;		Unchanged: 0/0
 20185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;Total ram usage:        0 bytes
 20191 ;; Hardware stack levels used:    1
 20192 ;; Hardware stack levels required when called:   14
 20193 ;; This function calls:
 20194 ;;		_LCD_Reset
 20195 ;;		_Port_SetPinType
 20196 ;;		_SPI_Init
 20197 ;;		_SPI_MaxSpeed
 20198 ;; This function is called by:
 20199 ;;		_LCD_Init
 20200 ;; This function uses a non-reentrant model
 20201 ;;
 20202                           
 20203                           	psect	text90
 20204  015AC0                     __ptext90:
 20205                           	opt stack 0
 20206  015AC0                     _Configure_GPIOs:
 20207                           	opt stack 14
 20208                           
 20209                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 20210                           
 20211                           ;incstack = 0
 20212  015AC0  0ECA               	movlw	low _PortF
 20213  015AC2  0100               	movlb	0	; () banked
 20214  015AC4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 20215  015AC6  0E03               	movlw	high _PortF
 20216  015AC8  0100               	movlb	0	; () banked
 20217  015ACA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20218  015ACC  0E07               	movlw	7
 20219  015ACE  0100               	movlb	0	; () banked
 20220  015AD0  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 20221  015AD2  0E03               	movlw	3
 20222  015AD4  0100               	movlb	0	; () banked
 20223  015AD6  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 20224  015AD8  EC1F  F095         	call	_Port_SetPinType	;wreg free
 20225                           
 20226                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 20227  015ADC  0ECA               	movlw	low _PortF
 20228  015ADE  0100               	movlb	0	; () banked
 20229  015AE0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 20230  015AE2  0E03               	movlw	high _PortF
 20231  015AE4  0100               	movlb	0	; () banked
 20232  015AE6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20233  015AE8  0E06               	movlw	6
 20234  015AEA  0100               	movlb	0	; () banked
 20235  015AEC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 20236  015AEE  0E03               	movlw	3
 20237  015AF0  0100               	movlb	0	; () banked
 20238  015AF2  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 20239  015AF4  EC1F  F095         	call	_Port_SetPinType	;wreg free
 20240                           
 20241                           ;LCD.c: 55: LCD_Reset();
 20242  015AF8  ECA1  F0B0         	call	_LCD_Reset	;wreg free
 20243                           
 20244                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 20245  015AFC  0EC0               	movlw	192
 20246  015AFE  0100               	movlb	0	; () banked
 20247  015B00  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 20248  015B02  0EC6               	movlw	198
 20249  015B04  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20250  015B06  0E2D               	movlw	45
 20251  015B08  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20252  015B0A  0E00               	movlw	0
 20253  015B0C  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20254  015B0E  0E01               	movlw	1
 20255  015B10  0100               	movlb	0	; () banked
 20256  015B12  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 20257  015B14  0E01               	movlw	1
 20258  015B16  0100               	movlb	0	; () banked
 20259  015B18  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 20260  015B1A  ECAD  F086         	call	_SPI_Init	;wreg free
 20261                           
 20262                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 20263  015B1E  0E83               	movlw	low _SPI2
 20264  015B20  0100               	movlb	0	; () banked
 20265  015B22  6FC4               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 20266  015B24  0E03               	movlw	high _SPI2
 20267  015B26  0100               	movlb	0	; () banked
 20268  015B28  6FC5               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 20269  015B2A  ECB2  F0AC         	call	_SPI_MaxSpeed	;wreg free
 20270  015B2E  0012               	return		;funcret
 20271  015B30                     __end_of_Configure_GPIOs:
 20272                           	opt stack 0
 20273                           tosu	equ	0xFFF
 20274                           tosh	equ	0xFFE
 20275                           tosl	equ	0xFFD
 20276                           pclath	equ	0xFFA
 20277                           tblptru	equ	0xFF8
 20278                           tblptrh	equ	0xFF7
 20279                           tblptrl	equ	0xFF6
 20280                           tablat	equ	0xFF5
 20281                           prodh	equ	0xFF4
 20282                           prodl	equ	0xFF3
 20283                           intcon	equ	0xFF2
 20284                           postinc0	equ	0xFEE
 20285                           wreg	equ	0xFE8
 20286                           indf1	equ	0xFE7
 20287                           postdec1	equ	0xFE5
 20288                           fsr1h	equ	0xFE2
 20289                           fsr1l	equ	0xFE1
 20290                           indf2	equ	0xFDF
 20291                           postinc2	equ	0xFDE
 20292                           postdec2	equ	0xFDD
 20293                           plusw2	equ	0xFDB
 20294                           fsr2h	equ	0xFDA
 20295                           fsr2l	equ	0xFD9
 20296                           status	equ	0xFD8
 20297                           
 20298 ;; *************** function _SPI_MaxSpeed *****************
 20299 ;; Defined at:
 20300 ;;		line 201 in file "Library/SPI.c"
 20301 ;; Parameters:    Size  Location     Type
 20302 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20303 ;;		 -> SPI2(11), 
 20304 ;; Auto vars:     Size  Location     Type
 20305 ;;		None
 20306 ;; Return value:  Size  Location     Type
 20307 ;;                  1    wreg      void 
 20308 ;; Registers used:
 20309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20310 ;; Tracked objects:
 20311 ;;		On entry : 0/0
 20312 ;;		On exit  : 0/0
 20313 ;;		Unchanged: 0/0
 20314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20319 ;;Total ram usage:        2 bytes
 20320 ;; Hardware stack levels used:    1
 20321 ;; Hardware stack levels required when called:    9
 20322 ;; This function calls:
 20323 ;;		_Byte_SetBit
 20324 ;;		_Byte_SetQuad
 20325 ;; This function is called by:
 20326 ;;		_Configure_GPIOs
 20327 ;; This function uses a non-reentrant model
 20328 ;;
 20329                           
 20330                           	psect	text91
 20331  015964                     __ptext91:
 20332                           	opt stack 0
 20333  015964                     _SPI_MaxSpeed:
 20334                           	opt stack 18
 20335                           
 20336                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20337                           
 20338                           ;incstack = 0
 20339  015964  0100               	movlb	0	; () banked
 20340  015966  EE20 F006          	lfsr	2,6
 20341  01596A  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20342  01596C  26D9               	addwf	fsr2l,f,c
 20343  01596E  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20344  015970  22DA               	addwfc	fsr2h,f,c
 20345  015972  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 20346  015976  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 20347  01597A  0E05               	movlw	5
 20348  01597C  0100               	movlb	0	; () banked
 20349  01597E  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 20350  015980  0E00               	movlw	0
 20351  015982  0100               	movlb	0	; () banked
 20352  015984  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 20353  015986  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 20354                           
 20355                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 20356  01598A  0100               	movlb	0	; () banked
 20357  01598C  EE20 F006          	lfsr	2,6
 20358  015990  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20359  015992  26D9               	addwf	fsr2l,f,c
 20360  015994  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20361  015996  22DA               	addwfc	fsr2h,f,c
 20362  015998  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 20363  01599C  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 20364  0159A0  0E00               	movlw	0
 20365  0159A2  0100               	movlb	0	; () banked
 20366  0159A4  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20367  0159A6  0E00               	movlw	0
 20368  0159A8  0100               	movlb	0	; () banked
 20369  0159AA  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 20370  0159AC  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 20371                           
 20372                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20373  0159B0  0100               	movlb	0	; () banked
 20374  0159B2  EE20 F006          	lfsr	2,6
 20375  0159B6  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20376  0159B8  26D9               	addwf	fsr2l,f,c
 20377  0159BA  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20378  0159BC  22DA               	addwfc	fsr2h,f,c
 20379  0159BE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 20380  0159C2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 20381  0159C6  0E05               	movlw	5
 20382  0159C8  0100               	movlb	0	; () banked
 20383  0159CA  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 20384  0159CC  0E01               	movlw	1
 20385  0159CE  0100               	movlb	0	; () banked
 20386  0159D0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 20387  0159D2  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 20388  0159D6  0012               	return		;funcret
 20389  0159D8                     __end_of_SPI_MaxSpeed:
 20390                           	opt stack 0
 20391                           tosu	equ	0xFFF
 20392                           tosh	equ	0xFFE
 20393                           tosl	equ	0xFFD
 20394                           pclath	equ	0xFFA
 20395                           tblptru	equ	0xFF8
 20396                           tblptrh	equ	0xFF7
 20397                           tblptrl	equ	0xFF6
 20398                           tablat	equ	0xFF5
 20399                           prodh	equ	0xFF4
 20400                           prodl	equ	0xFF3
 20401                           intcon	equ	0xFF2
 20402                           postinc0	equ	0xFEE
 20403                           wreg	equ	0xFE8
 20404                           indf1	equ	0xFE7
 20405                           postdec1	equ	0xFE5
 20406                           fsr1h	equ	0xFE2
 20407                           fsr1l	equ	0xFE1
 20408                           indf2	equ	0xFDF
 20409                           postinc2	equ	0xFDE
 20410                           postdec2	equ	0xFDD
 20411                           plusw2	equ	0xFDB
 20412                           fsr2h	equ	0xFDA
 20413                           fsr2l	equ	0xFD9
 20414                           status	equ	0xFD8
 20415                           
 20416 ;; *************** function _LCD_Reset *****************
 20417 ;; Defined at:
 20418 ;;		line 95 in file "Library/LCD.c"
 20419 ;; Parameters:    Size  Location     Type
 20420 ;;		None
 20421 ;; Auto vars:     Size  Location     Type
 20422 ;;		None
 20423 ;; Return value:  Size  Location     Type
 20424 ;;                  1    wreg      void 
 20425 ;; Registers used:
 20426 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20427 ;; Tracked objects:
 20428 ;;		On entry : 0/0
 20429 ;;		On exit  : 0/0
 20430 ;;		Unchanged: 0/0
 20431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;Total ram usage:        0 bytes
 20437 ;; Hardware stack levels used:    1
 20438 ;; Hardware stack levels required when called:   13
 20439 ;; This function calls:
 20440 ;;		_LED_Toggle
 20441 ;;		_Reset_High
 20442 ;;		_Reset_Low
 20443 ;;		_delay_ms
 20444 ;; This function is called by:
 20445 ;;		_Configure_GPIOs
 20446 ;; This function uses a non-reentrant model
 20447 ;;
 20448                           
 20449                           	psect	text92
 20450  016142                     __ptext92:
 20451                           	opt stack 0
 20452  016142                     _LCD_Reset:
 20453                           	opt stack 14
 20454                           
 20455                           ;LCD.c: 97: Reset_High();
 20456                           
 20457                           ;incstack = 0
 20458  016142  EC35  F0B5         	call	_Reset_High	;wreg free
 20459                           
 20460                           ;LCD.c: 98: LED_Toggle(eLED2);
 20461  016146  0E01               	movlw	1
 20462  016148  EC81  F0B1         	call	_LED_Toggle
 20463                           
 20464                           ;LCD.c: 99: delay_ms(0x80);
 20465  01614C  0E00               	movlw	0
 20466  01614E  0100               	movlb	0	; () banked
 20467  016150  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 20468  016152  0E80               	movlw	128
 20469  016154  6FB5               	movwf	delay_ms@ms& (0+255),b
 20470  016156  EC39  F0AE         	call	_delay_ms	;wreg free
 20471                           
 20472                           ;LCD.c: 100: LED_Toggle(eLED2);
 20473  01615A  0E01               	movlw	1
 20474  01615C  EC81  F0B1         	call	_LED_Toggle
 20475                           
 20476                           ;LCD.c: 101: Reset_Low();
 20477  016160  EC26  F0B5         	call	_Reset_Low	;wreg free
 20478                           
 20479                           ;LCD.c: 102: delay_ms(0x80);
 20480  016164  0E00               	movlw	0
 20481  016166  0100               	movlb	0	; () banked
 20482  016168  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 20483  01616A  0E80               	movlw	128
 20484  01616C  6FB5               	movwf	delay_ms@ms& (0+255),b
 20485  01616E  EC39  F0AE         	call	_delay_ms	;wreg free
 20486                           
 20487                           ;LCD.c: 103: LED_Toggle(eLED2);
 20488  016172  0E01               	movlw	1
 20489  016174  EC81  F0B1         	call	_LED_Toggle
 20490                           
 20491                           ;LCD.c: 104: Reset_High();
 20492  016178  EC35  F0B5         	call	_Reset_High	;wreg free
 20493                           
 20494                           ;LCD.c: 105: delay_ms(0x80);
 20495  01617C  0E00               	movlw	0
 20496  01617E  0100               	movlb	0	; () banked
 20497  016180  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 20498  016182  0E80               	movlw	128
 20499  016184  6FB5               	movwf	delay_ms@ms& (0+255),b
 20500  016186  EC39  F0AE         	call	_delay_ms	;wreg free
 20501                           
 20502                           ;LCD.c: 106: LED_Toggle(eLED2);
 20503  01618A  0E01               	movlw	1
 20504  01618C  EC81  F0B1         	call	_LED_Toggle
 20505  016190  0012               	return		;funcret
 20506  016192                     __end_of_LCD_Reset:
 20507                           	opt stack 0
 20508                           tosu	equ	0xFFF
 20509                           tosh	equ	0xFFE
 20510                           tosl	equ	0xFFD
 20511                           pclath	equ	0xFFA
 20512                           tblptru	equ	0xFF8
 20513                           tblptrh	equ	0xFF7
 20514                           tblptrl	equ	0xFF6
 20515                           tablat	equ	0xFF5
 20516                           prodh	equ	0xFF4
 20517                           prodl	equ	0xFF3
 20518                           intcon	equ	0xFF2
 20519                           postinc0	equ	0xFEE
 20520                           wreg	equ	0xFE8
 20521                           indf1	equ	0xFE7
 20522                           postdec1	equ	0xFE5
 20523                           fsr1h	equ	0xFE2
 20524                           fsr1l	equ	0xFE1
 20525                           indf2	equ	0xFDF
 20526                           postinc2	equ	0xFDE
 20527                           postdec2	equ	0xFDD
 20528                           plusw2	equ	0xFDB
 20529                           fsr2h	equ	0xFDA
 20530                           fsr2l	equ	0xFD9
 20531                           status	equ	0xFD8
 20532                           
 20533 ;; *************** function _delay_ms *****************
 20534 ;; Defined at:
 20535 ;;		line 240 in file "Library/Types.c"
 20536 ;; Parameters:    Size  Location     Type
 20537 ;;  ms              2    0[BANK0 ] unsigned short 
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;  u               4    2[BANK0 ] volatile unsigned long 
 20540 ;; Return value:  Size  Location     Type
 20541 ;;                  1    wreg      void 
 20542 ;; Registers used:
 20543 ;;		wreg, status,2, status,0
 20544 ;; Tracked objects:
 20545 ;;		On entry : 0/0
 20546 ;;		On exit  : 0/0
 20547 ;;		Unchanged: 0/0
 20548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20550 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20553 ;;Total ram usage:        6 bytes
 20554 ;; Hardware stack levels used:    1
 20555 ;; Hardware stack levels required when called:    7
 20556 ;; This function calls:
 20557 ;;		Nothing
 20558 ;; This function is called by:
 20559 ;;		_LCD_Reset
 20560 ;;		_LCD_Init
 20561 ;;		_MXK_Init
 20562 ;;		_init
 20563 ;;		_move_and_rotate
 20564 ;;		_findClosestWall
 20565 ;;		_mode4
 20566 ;; This function uses a non-reentrant model
 20567 ;;
 20568                           
 20569                           	psect	text93
 20570  015C72                     __ptext93:
 20571                           	opt stack 0
 20572  015C72                     _delay_ms:
 20573                           	opt stack 21
 20574                           
 20575                           ;Types.c: 242: volatile unsigned long u;
 20576                           ;Types.c: 243: while (ms--)
 20577                           
 20578                           ;incstack = 0
 20579  015C72  D01F               	goto	u9870
 20580  015C74                     l13136:
 20581                           
 20582                           ;Types.c: 244: {
 20583                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 20584  015C74  0E00               	movlw	0
 20585  015C76  0100               	movlb	0	; () banked
 20586  015C78  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 20587  015C7A  0E00               	movlw	0
 20588  015C7C  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20589  015C7E  0E00               	movlw	0
 20590  015C80  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20591  015C82  0E00               	movlw	0
 20592  015C84  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20593  015C86                     l13138:
 20594                           
 20595                           ; BSR set to: 0
 20596  015C86  0100               	movlb	0	; () banked
 20597  015C88  51BA               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 20598  015C8A  0100               	movlb	0	; () banked
 20599  015C8C  11B9               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 20600  015C8E  E111               	bnz	l13144
 20601  015C90  0EB0               	movlw	176
 20602  015C92  0100               	movlb	0	; () banked
 20603  015C94  5DB7               	subwf	delay_ms@u& (0+255),w,b	;volatile
 20604  015C96  0E04               	movlw	4
 20605  015C98  0100               	movlb	0	; () banked
 20606  015C9A  59B8               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 20607  015C9C  B0D8               	btfsc	status,0,c
 20608  015C9E  D009               	goto	u9870
 20609                           
 20610                           ; BSR set to: 0
 20611                           
 20612                           ; BSR set to: 0
 20613  015CA0  F000               	nop		; ;# 
 20614  015CA2  0E01               	movlw	1
 20615  015CA4  0100               	movlb	0	; () banked
 20616  015CA6  27B7               	addwf	delay_ms@u& (0+255),f,b	;volatile
 20617  015CA8  0E00               	movlw	0
 20618  015CAA  23B8               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 20619  015CAC  23B9               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 20620  015CAE  23BA               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 20621  015CB0  D7EA               	goto	l13138
 20622  015CB2                     u9870:
 20623  015CB2                     l13144:
 20624  015CB2  0100               	movlb	0	; () banked
 20625  015CB4  07B5               	decf	delay_ms@ms& (0+255),f,b
 20626  015CB6  A0D8               	btfss	status,0,c
 20627  015CB8  07B6               	decf	(delay_ms@ms+1)& (0+255),f,b
 20628  015CBA  0100               	movlb	0	; () banked
 20629  015CBC  29B5               	incf	delay_ms@ms& (0+255),w,b
 20630  015CBE  E1DA               	bnz	l13136
 20631  015CC0  0100               	movlb	0	; () banked
 20632  015CC2  29B6               	incf	(delay_ms@ms+1)& (0+255),w,b
 20633  015CC4  A4D8               	btfss	status,2,c
 20634  015CC6  D7D6               	goto	l824
 20635                           
 20636                           ; BSR set to: 0
 20637                           ;Types.c: 251: }
 20638                           ;Types.c: 252: }
 20639                           ;Types.c: 253: u = 0x8008;
 20640                           
 20641                           ; BSR set to: 0
 20642  015CC8  0E08               	movlw	8
 20643  015CCA  0100               	movlb	0	; () banked
 20644  015CCC  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 20645  015CCE  0E80               	movlw	128
 20646  015CD0  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20647  015CD2  0E00               	movlw	0
 20648  015CD4  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20649  015CD6  0E00               	movlw	0
 20650  015CD8  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20651                           
 20652                           ; BSR set to: 0
 20653  015CDA  0012               	return		;funcret
 20654  015CDC                     __end_of_delay_ms:
 20655                           	opt stack 0
 20656                           tosu	equ	0xFFF
 20657                           tosh	equ	0xFFE
 20658                           tosl	equ	0xFFD
 20659                           pclath	equ	0xFFA
 20660                           tblptru	equ	0xFF8
 20661                           tblptrh	equ	0xFF7
 20662                           tblptrl	equ	0xFF6
 20663                           tablat	equ	0xFF5
 20664                           prodh	equ	0xFF4
 20665                           prodl	equ	0xFF3
 20666                           intcon	equ	0xFF2
 20667                           postinc0	equ	0xFEE
 20668                           wreg	equ	0xFE8
 20669                           indf1	equ	0xFE7
 20670                           postdec1	equ	0xFE5
 20671                           fsr1h	equ	0xFE2
 20672                           fsr1l	equ	0xFE1
 20673                           indf2	equ	0xFDF
 20674                           postinc2	equ	0xFDE
 20675                           postdec2	equ	0xFDD
 20676                           plusw2	equ	0xFDB
 20677                           fsr2h	equ	0xFDA
 20678                           fsr2l	equ	0xFD9
 20679                           status	equ	0xFD8
 20680                           
 20681 ;; *************** function _Reset_Low *****************
 20682 ;; Defined at:
 20683 ;;		line 32 in file "Library/LCD.c"
 20684 ;; Parameters:    Size  Location     Type
 20685 ;;		None
 20686 ;; Auto vars:     Size  Location     Type
 20687 ;;		None
 20688 ;; Return value:  Size  Location     Type
 20689 ;;                  1    wreg      void 
 20690 ;; Registers used:
 20691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20692 ;; Tracked objects:
 20693 ;;		On entry : 0/0
 20694 ;;		On exit  : 0/0
 20695 ;;		Unchanged: 0/0
 20696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20701 ;;Total ram usage:        0 bytes
 20702 ;; Hardware stack levels used:    1
 20703 ;; Hardware stack levels required when called:   11
 20704 ;; This function calls:
 20705 ;;		_Port_SetPin
 20706 ;; This function is called by:
 20707 ;;		_LCD_Reset
 20708 ;; This function uses a non-reentrant model
 20709 ;;
 20710                           
 20711                           	psect	text94
 20712  016A4C                     __ptext94:
 20713                           	opt stack 0
 20714  016A4C                     _Reset_Low:
 20715                           	opt stack 15
 20716                           
 20717                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 20718                           
 20719                           ; BSR set to: 0
 20720                           ;incstack = 0
 20721  016A4C  0ECA               	movlw	low _PortF
 20722  016A4E  0100               	movlb	0	; () banked
 20723  016A50  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 20724  016A52  0E03               	movlw	high _PortF
 20725  016A54  0100               	movlb	0	; () banked
 20726  016A56  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20727  016A58  0E06               	movlw	6
 20728  016A5A  0100               	movlb	0	; () banked
 20729  016A5C  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 20730  016A5E  0E01               	movlw	1
 20731  016A60  0100               	movlb	0	; () banked
 20732  016A62  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 20733  016A64  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 20734  016A68  0012               	return		;funcret
 20735  016A6A                     __end_of_Reset_Low:
 20736                           	opt stack 0
 20737                           tosu	equ	0xFFF
 20738                           tosh	equ	0xFFE
 20739                           tosl	equ	0xFFD
 20740                           pclath	equ	0xFFA
 20741                           tblptru	equ	0xFF8
 20742                           tblptrh	equ	0xFF7
 20743                           tblptrl	equ	0xFF6
 20744                           tablat	equ	0xFF5
 20745                           prodh	equ	0xFF4
 20746                           prodl	equ	0xFF3
 20747                           intcon	equ	0xFF2
 20748                           postinc0	equ	0xFEE
 20749                           wreg	equ	0xFE8
 20750                           indf1	equ	0xFE7
 20751                           postdec1	equ	0xFE5
 20752                           fsr1h	equ	0xFE2
 20753                           fsr1l	equ	0xFE1
 20754                           indf2	equ	0xFDF
 20755                           postinc2	equ	0xFDE
 20756                           postdec2	equ	0xFDD
 20757                           plusw2	equ	0xFDB
 20758                           fsr2h	equ	0xFDA
 20759                           fsr2l	equ	0xFD9
 20760                           status	equ	0xFD8
 20761                           
 20762 ;; *************** function _Reset_High *****************
 20763 ;; Defined at:
 20764 ;;		line 36 in file "Library/LCD.c"
 20765 ;; Parameters:    Size  Location     Type
 20766 ;;		None
 20767 ;; Auto vars:     Size  Location     Type
 20768 ;;		None
 20769 ;; Return value:  Size  Location     Type
 20770 ;;                  1    wreg      void 
 20771 ;; Registers used:
 20772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20773 ;; Tracked objects:
 20774 ;;		On entry : 0/0
 20775 ;;		On exit  : 0/0
 20776 ;;		Unchanged: 0/0
 20777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20782 ;;Total ram usage:        0 bytes
 20783 ;; Hardware stack levels used:    1
 20784 ;; Hardware stack levels required when called:   11
 20785 ;; This function calls:
 20786 ;;		_Port_SetPin
 20787 ;; This function is called by:
 20788 ;;		_LCD_Reset
 20789 ;; This function uses a non-reentrant model
 20790 ;;
 20791                           
 20792                           	psect	text95
 20793  016A6A                     __ptext95:
 20794                           	opt stack 0
 20795  016A6A                     _Reset_High:
 20796                           	opt stack 15
 20797                           
 20798                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 20799                           
 20800                           ;incstack = 0
 20801  016A6A  0ECA               	movlw	low _PortF
 20802  016A6C  0100               	movlb	0	; () banked
 20803  016A6E  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 20804  016A70  0E03               	movlw	high _PortF
 20805  016A72  0100               	movlb	0	; () banked
 20806  016A74  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20807  016A76  0E06               	movlw	6
 20808  016A78  0100               	movlb	0	; () banked
 20809  016A7A  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 20810  016A7C  0E00               	movlw	0
 20811  016A7E  0100               	movlb	0	; () banked
 20812  016A80  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 20813  016A82  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 20814  016A86  0012               	return		;funcret
 20815  016A88                     __end_of_Reset_High:
 20816                           	opt stack 0
 20817                           tosu	equ	0xFFF
 20818                           tosh	equ	0xFFE
 20819                           tosl	equ	0xFFD
 20820                           pclath	equ	0xFFA
 20821                           tblptru	equ	0xFF8
 20822                           tblptrh	equ	0xFF7
 20823                           tblptrl	equ	0xFF6
 20824                           tablat	equ	0xFF5
 20825                           prodh	equ	0xFF4
 20826                           prodl	equ	0xFF3
 20827                           intcon	equ	0xFF2
 20828                           postinc0	equ	0xFEE
 20829                           wreg	equ	0xFE8
 20830                           indf1	equ	0xFE7
 20831                           postdec1	equ	0xFE5
 20832                           fsr1h	equ	0xFE2
 20833                           fsr1l	equ	0xFE1
 20834                           indf2	equ	0xFDF
 20835                           postinc2	equ	0xFDE
 20836                           postdec2	equ	0xFDD
 20837                           plusw2	equ	0xFDB
 20838                           fsr2h	equ	0xFDA
 20839                           fsr2l	equ	0xFD9
 20840                           status	equ	0xFD8
 20841                           
 20842 ;; *************** function _ISR_Enable *****************
 20843 ;; Defined at:
 20844 ;;		line 27 in file "Library/ISR.c"
 20845 ;; Parameters:    Size  Location     Type
 20846 ;;		None
 20847 ;; Auto vars:     Size  Location     Type
 20848 ;;		None
 20849 ;; Return value:  Size  Location     Type
 20850 ;;                  1    wreg      void 
 20851 ;; Registers used:
 20852 ;;		None
 20853 ;; Tracked objects:
 20854 ;;		On entry : 0/0
 20855 ;;		On exit  : 0/0
 20856 ;;		Unchanged: 0/0
 20857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20862 ;;Total ram usage:        0 bytes
 20863 ;; Hardware stack levels used:    1
 20864 ;; Hardware stack levels required when called:    7
 20865 ;; This function calls:
 20866 ;;		Nothing
 20867 ;; This function is called by:
 20868 ;;		_init
 20869 ;; This function uses a non-reentrant model
 20870 ;;
 20871                           
 20872                           	psect	text96
 20873  016CFE                     __ptext96:
 20874                           	opt stack 0
 20875  016CFE                     _ISR_Enable:
 20876                           	opt stack 22
 20877                           
 20878                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 20879                           
 20880                           ;incstack = 0
 20881  016CFE  8CF2               	bsf	intcon,6,c	;volatile
 20882                           
 20883                           ;ISR.c: 30: INTCONbits.GIE = 1;
 20884  016D00  8EF2               	bsf	intcon,7,c	;volatile
 20885                           
 20886                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 20887  016D02  88F2               	bsf	intcon,4,c	;volatile
 20888                           
 20889                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 20890  016D04  92F2               	bcf	intcon,1,c	;volatile
 20891  016D06  0012               	return		;funcret
 20892  016D08                     __end_of_ISR_Enable:
 20893                           	opt stack 0
 20894                           tosu	equ	0xFFF
 20895                           tosh	equ	0xFFE
 20896                           tosl	equ	0xFFD
 20897                           pclath	equ	0xFFA
 20898                           tblptru	equ	0xFF8
 20899                           tblptrh	equ	0xFF7
 20900                           tblptrl	equ	0xFF6
 20901                           tablat	equ	0xFF5
 20902                           prodh	equ	0xFF4
 20903                           prodl	equ	0xFF3
 20904                           intcon	equ	0xFF2
 20905                           postinc0	equ	0xFEE
 20906                           wreg	equ	0xFE8
 20907                           indf1	equ	0xFE7
 20908                           postdec1	equ	0xFE5
 20909                           fsr1h	equ	0xFE2
 20910                           fsr1l	equ	0xFE1
 20911                           indf2	equ	0xFDF
 20912                           postinc2	equ	0xFDE
 20913                           postdec2	equ	0xFDD
 20914                           plusw2	equ	0xFDB
 20915                           fsr2h	equ	0xFDA
 20916                           fsr2l	equ	0xFD9
 20917                           status	equ	0xFD8
 20918                           
 20919 ;; *************** function _HMI_Init *****************
 20920 ;; Defined at:
 20921 ;;		line 104 in file "HMI.c"
 20922 ;; Parameters:    Size  Location     Type
 20923 ;;		None
 20924 ;; Auto vars:     Size  Location     Type
 20925 ;;  in              2   59[BANK0 ] unsigned short 
 20926 ;; Return value:  Size  Location     Type
 20927 ;;                  1    wreg      void 
 20928 ;; Registers used:
 20929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20930 ;; Tracked objects:
 20931 ;;		On entry : 0/0
 20932 ;;		On exit  : 0/0
 20933 ;;		Unchanged: 0/0
 20934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20938 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20939 ;;Total ram usage:        2 bytes
 20940 ;; Hardware stack levels used:    1
 20941 ;; Hardware stack levels required when called:   16
 20942 ;; This function calls:
 20943 ;;		_Button_Init
 20944 ;;		_SPI_Init
 20945 ;;		_SPI_MinSpeed
 20946 ;; This function is called by:
 20947 ;;		_init
 20948 ;; This function uses a non-reentrant model
 20949 ;;
 20950                           
 20951                           	psect	text97
 20952  0124B4                     __ptext97:
 20953                           	opt stack 0
 20954  0124B4                     _HMI_Init:
 20955                           	opt stack 13
 20956                           
 20957                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 20958                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 20959                           
 20960                           ;incstack = 0
 20961  0124B4  0E6E               	movlw	low (_HMIBoard+48)
 20962  0124B6  0101               	movlb	1	; () banked
 20963  0124B8  6F00               	movwf	Button_Init@pInput& (0+255),b
 20964  0124BA  0E03               	movlw	high (_HMIBoard+48)
 20965  0124BC  0101               	movlb	1	; () banked
 20966  0124BE  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20967  0124C0  0E00               	movlw	0
 20968  0124C2  0101               	movlb	1	; () banked
 20969  0124C4  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20970  0124C6  0E02               	movlw	2
 20971  0124C8  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20972  0124CA  0E38               	movlw	low _HMI_InitButtons
 20973  0124CC  0101               	movlb	1	; () banked
 20974  0124CE  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20975  0124D0  0E6D               	movlw	high _HMI_InitButtons
 20976  0124D2  0101               	movlb	1	; () banked
 20977  0124D4  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20978  0124D6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20979  0124D8  0101               	movlb	1	; () banked
 20980  0124DA  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20981  0124DC  0E80               	movlw	low _HMI_DIPSwitch
 20982  0124DE  0101               	movlb	1	; () banked
 20983  0124E0  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20984  0124E2  0E6B               	movlw	high _HMI_DIPSwitch
 20985  0124E4  0101               	movlb	1	; () banked
 20986  0124E6  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20987  0124E8  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 20988  0124EA  0101               	movlb	1	; () banked
 20989  0124EC  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20990  0124EE  0E04               	movlw	low _Event_NULL
 20991  0124F0  0101               	movlb	1	; () banked
 20992  0124F2  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20993  0124F4  0E14               	movlw	high _Event_NULL
 20994  0124F6  0101               	movlb	1	; () banked
 20995  0124F8  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20996  0124FA  0E00               	movlw	low (_Event_NULL shr (0+16))
 20997  0124FC  0101               	movlb	1	; () banked
 20998  0124FE  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20999  012500  ECA0  F0A1         	call	_Button_Init	;wreg free
 21000                           
 21001                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 21002                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 21003  012504  0E50               	movlw	low (_HMIBoard+18)
 21004  012506  0101               	movlb	1	; () banked
 21005  012508  6F00               	movwf	Button_Init@pInput& (0+255),b
 21006  01250A  0E03               	movlw	high (_HMIBoard+18)
 21007  01250C  0101               	movlb	1	; () banked
 21008  01250E  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21009  012510  0E00               	movlw	0
 21010  012512  0101               	movlb	1	; () banked
 21011  012514  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21012  012516  0E02               	movlw	2
 21013  012518  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21014  01251A  0E38               	movlw	low _HMI_InitButtons
 21015  01251C  0101               	movlb	1	; () banked
 21016  01251E  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21017  012520  0E6D               	movlw	high _HMI_InitButtons
 21018  012522  0101               	movlb	1	; () banked
 21019  012524  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21020  012526  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21021  012528  0101               	movlb	1	; () banked
 21022  01252A  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21023  01252C  0EE0               	movlw	low _HMI_LeftSwitch
 21024  01252E  0101               	movlb	1	; () banked
 21025  012530  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21026  012532  0E6B               	movlw	high _HMI_LeftSwitch
 21027  012534  0101               	movlb	1	; () banked
 21028  012536  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21029  012538  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 21030  01253A  0101               	movlb	1	; () banked
 21031  01253C  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21032  01253E  0E04               	movlw	low _Event_NULL
 21033  012540  0101               	movlb	1	; () banked
 21034  012542  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21035  012544  0E14               	movlw	high _Event_NULL
 21036  012546  0101               	movlb	1	; () banked
 21037  012548  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21038  01254A  0E00               	movlw	low (_Event_NULL shr (0+16))
 21039  01254C  0101               	movlb	1	; () banked
 21040  01254E  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21041  012550  ECA0  F0A1         	call	_Button_Init	;wreg free
 21042                           
 21043                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 21044                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 21045  012554  0E46               	movlw	low (_HMIBoard+8)
 21046  012556  0101               	movlb	1	; () banked
 21047  012558  6F00               	movwf	Button_Init@pInput& (0+255),b
 21048  01255A  0E03               	movlw	high (_HMIBoard+8)
 21049  01255C  0101               	movlb	1	; () banked
 21050  01255E  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21051  012560  0E00               	movlw	0
 21052  012562  0101               	movlb	1	; () banked
 21053  012564  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21054  012566  0E02               	movlw	2
 21055  012568  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21056  01256A  0E38               	movlw	low _HMI_InitButtons
 21057  01256C  0101               	movlb	1	; () banked
 21058  01256E  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21059  012570  0E6D               	movlw	high _HMI_InitButtons
 21060  012572  0101               	movlb	1	; () banked
 21061  012574  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21062  012576  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21063  012578  0101               	movlb	1	; () banked
 21064  01257A  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21065  01257C  0EC8               	movlw	low _HMI_RightSwitch
 21066  01257E  0101               	movlb	1	; () banked
 21067  012580  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21068  012582  0E6B               	movlw	high _HMI_RightSwitch
 21069  012584  0101               	movlb	1	; () banked
 21070  012586  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21071  012588  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 21072  01258A  0101               	movlb	1	; () banked
 21073  01258C  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21074  01258E  0E04               	movlw	low _Event_NULL
 21075  012590  0101               	movlb	1	; () banked
 21076  012592  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21077  012594  0E14               	movlw	high _Event_NULL
 21078  012596  0101               	movlb	1	; () banked
 21079  012598  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21080  01259A  0E00               	movlw	low (_Event_NULL shr (0+16))
 21081  01259C  0101               	movlb	1	; () banked
 21082  01259E  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21083  0125A0  ECA0  F0A1         	call	_Button_Init	;wreg free
 21084                           
 21085                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 21086                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 21087  0125A4  0E5A               	movlw	low (_HMIBoard+28)
 21088  0125A6  0101               	movlb	1	; () banked
 21089  0125A8  6F00               	movwf	Button_Init@pInput& (0+255),b
 21090  0125AA  0E03               	movlw	high (_HMIBoard+28)
 21091  0125AC  0101               	movlb	1	; () banked
 21092  0125AE  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21093  0125B0  0E00               	movlw	0
 21094  0125B2  0101               	movlb	1	; () banked
 21095  0125B4  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21096  0125B6  0E02               	movlw	2
 21097  0125B8  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21098  0125BA  0E38               	movlw	low _HMI_InitButtons
 21099  0125BC  0101               	movlb	1	; () banked
 21100  0125BE  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21101  0125C0  0E6D               	movlw	high _HMI_InitButtons
 21102  0125C2  0101               	movlb	1	; () banked
 21103  0125C4  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21104  0125C6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21105  0125C8  0101               	movlb	1	; () banked
 21106  0125CA  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21107  0125CC  0EB0               	movlw	low _HMI_UpSwitch
 21108  0125CE  0101               	movlb	1	; () banked
 21109  0125D0  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21110  0125D2  0E6B               	movlw	high _HMI_UpSwitch
 21111  0125D4  0101               	movlb	1	; () banked
 21112  0125D6  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21113  0125D8  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 21114  0125DA  0101               	movlb	1	; () banked
 21115  0125DC  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21116  0125DE  0E04               	movlw	low _Event_NULL
 21117  0125E0  0101               	movlb	1	; () banked
 21118  0125E2  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21119  0125E4  0E14               	movlw	high _Event_NULL
 21120  0125E6  0101               	movlb	1	; () banked
 21121  0125E8  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21122  0125EA  0E00               	movlw	low (_Event_NULL shr (0+16))
 21123  0125EC  0101               	movlb	1	; () banked
 21124  0125EE  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21125  0125F0  ECA0  F0A1         	call	_Button_Init	;wreg free
 21126                           
 21127                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 21128                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 21129  0125F4  0E64               	movlw	low (_HMIBoard+38)
 21130  0125F6  0101               	movlb	1	; () banked
 21131  0125F8  6F00               	movwf	Button_Init@pInput& (0+255),b
 21132  0125FA  0E03               	movlw	high (_HMIBoard+38)
 21133  0125FC  0101               	movlb	1	; () banked
 21134  0125FE  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21135  012600  0E00               	movlw	0
 21136  012602  0101               	movlb	1	; () banked
 21137  012604  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21138  012606  0E02               	movlw	2
 21139  012608  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21140  01260A  0E38               	movlw	low _HMI_InitButtons
 21141  01260C  0101               	movlb	1	; () banked
 21142  01260E  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21143  012610  0E6D               	movlw	high _HMI_InitButtons
 21144  012612  0101               	movlb	1	; () banked
 21145  012614  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21146  012616  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21147  012618  0101               	movlb	1	; () banked
 21148  01261A  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21149  01261C  0E98               	movlw	low _HMI_DownSwitch
 21150  01261E  0101               	movlb	1	; () banked
 21151  012620  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21152  012622  0E6B               	movlw	high _HMI_DownSwitch
 21153  012624  0101               	movlb	1	; () banked
 21154  012626  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21155  012628  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 21156  01262A  0101               	movlb	1	; () banked
 21157  01262C  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21158  01262E  0E04               	movlw	low _Event_NULL
 21159  012630  0101               	movlb	1	; () banked
 21160  012632  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21161  012634  0E14               	movlw	high _Event_NULL
 21162  012636  0101               	movlb	1	; () banked
 21163  012638  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21164  01263A  0E00               	movlw	low (_Event_NULL shr (0+16))
 21165  01263C  0101               	movlb	1	; () banked
 21166  01263E  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21167  012640  ECA0  F0A1         	call	_Button_Init	;wreg free
 21168                           
 21169                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 21170  012644  0EA0               	movlw	160
 21171  012646  0100               	movlb	0	; () banked
 21172  012648  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 21173  01264A  0E86               	movlw	134
 21174  01264C  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21175  01264E  0E01               	movlw	1
 21176  012650  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21177  012652  0E00               	movlw	0
 21178  012654  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21179  012656  0E00               	movlw	0
 21180  012658  0100               	movlb	0	; () banked
 21181  01265A  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 21182  01265C  0E02               	movlw	2
 21183  01265E  0100               	movlb	0	; () banked
 21184  012660  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 21185  012662  ECAD  F086         	call	_SPI_Init	;wreg free
 21186                           
 21187                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 21188  012666  0E78               	movlw	low _SPI1
 21189  012668  0100               	movlb	0	; () banked
 21190  01266A  6FC4               	movwf	SPI_MinSpeed@pInput& (0+255),b
 21191  01266C  0E03               	movlw	high _SPI1
 21192  01266E  0100               	movlb	0	; () banked
 21193  012670  6FC5               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 21194  012672  ECEC  F0AC         	call	_SPI_MinSpeed	;wreg free
 21195                           
 21196                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 21197  012676  0E00               	movlw	0
 21198  012678  0100               	movlb	0	; () banked
 21199  01267A  6FF1               	movwf	(HMI_Init@in+1)& (0+255),b
 21200  01267C  0E00               	movlw	0
 21201  01267E  6FF0               	movwf	HMI_Init@in& (0+255),b
 21202  012680                     l14784:
 21203                           
 21204                           ; BSR set to: 0
 21205  012680  0100               	movlb	0	; () banked
 21206  012682  51F1               	movf	(HMI_Init@in+1)& (0+255),w,b
 21207  012684  E113               	bnz	l1153
 21208  012686  0E08               	movlw	8
 21209  012688  0100               	movlb	0	; () banked
 21210  01268A  5DF0               	subwf	HMI_Init@in& (0+255),w,b
 21211  01268C  B0D8               	btfsc	status,0,c
 21212  01268E  0012               	return	
 21213                           
 21214                           ; BSR set to: 0
 21215                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 21216                           
 21217                           ; BSR set to: 0
 21218                           
 21219                           ; BSR set to: 0
 21220  012690  0E3E               	movlw	low _HMIBoard
 21221  012692  0100               	movlb	0	; () banked
 21222  012694  25F0               	addwf	HMI_Init@in& (0+255),w,b
 21223  012696  6ED9               	movwf	fsr2l,c
 21224  012698  0E03               	movlw	high _HMIBoard
 21225  01269A  0100               	movlb	0	; () banked
 21226  01269C  21F1               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 21227  01269E  6EDA               	movwf	fsr2h,c
 21228  0126A0  0E00               	movlw	0
 21229  0126A2  6EDF               	movwf	indf2,c
 21230                           
 21231                           ; BSR set to: 0
 21232  0126A4  0100               	movlb	0	; () banked
 21233  0126A6  4BF0               	infsnz	HMI_Init@in& (0+255),f,b
 21234  0126A8  2BF1               	incf	(HMI_Init@in+1)& (0+255),f,b
 21235  0126AA  D7EA               	goto	l14784
 21236  0126AC                     l1153:
 21237                           
 21238                           ; BSR set to: 0
 21239  0126AC  0012               	return		;funcret
 21240  0126AE                     __end_of_HMI_Init:
 21241                           	opt stack 0
 21242                           tosu	equ	0xFFF
 21243                           tosh	equ	0xFFE
 21244                           tosl	equ	0xFFD
 21245                           pclath	equ	0xFFA
 21246                           tblptru	equ	0xFF8
 21247                           tblptrh	equ	0xFF7
 21248                           tblptrl	equ	0xFF6
 21249                           tablat	equ	0xFF5
 21250                           prodh	equ	0xFF4
 21251                           prodl	equ	0xFF3
 21252                           intcon	equ	0xFF2
 21253                           postinc0	equ	0xFEE
 21254                           wreg	equ	0xFE8
 21255                           indf1	equ	0xFE7
 21256                           postdec1	equ	0xFE5
 21257                           fsr1h	equ	0xFE2
 21258                           fsr1l	equ	0xFE1
 21259                           indf2	equ	0xFDF
 21260                           postinc2	equ	0xFDE
 21261                           postdec2	equ	0xFDD
 21262                           plusw2	equ	0xFDB
 21263                           fsr2h	equ	0xFDA
 21264                           fsr2l	equ	0xFD9
 21265                           status	equ	0xFD8
 21266                           
 21267 ;; *************** function _SPI_MinSpeed *****************
 21268 ;; Defined at:
 21269 ;;		line 190 in file "Library/SPI.c"
 21270 ;; Parameters:    Size  Location     Type
 21271 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21272 ;;		 -> SPI1(11), 
 21273 ;; Auto vars:     Size  Location     Type
 21274 ;;		None
 21275 ;; Return value:  Size  Location     Type
 21276 ;;                  1    wreg      void 
 21277 ;; Registers used:
 21278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21279 ;; Tracked objects:
 21280 ;;		On entry : 0/0
 21281 ;;		On exit  : 0/0
 21282 ;;		Unchanged: 0/0
 21283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21284 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21288 ;;Total ram usage:        2 bytes
 21289 ;; Hardware stack levels used:    1
 21290 ;; Hardware stack levels required when called:    9
 21291 ;; This function calls:
 21292 ;;		_Byte_SetBit
 21293 ;;		_Byte_SetQuad
 21294 ;; This function is called by:
 21295 ;;		_HMI_Init
 21296 ;; This function uses a non-reentrant model
 21297 ;;
 21298                           
 21299                           	psect	text98
 21300  0159D8                     __ptext98:
 21301                           	opt stack 0
 21302  0159D8                     _SPI_MinSpeed:
 21303                           	opt stack 19
 21304                           
 21305                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21306                           
 21307                           ; BSR set to: 0
 21308                           ;incstack = 0
 21309  0159D8  0100               	movlb	0	; () banked
 21310  0159DA  EE20 F006          	lfsr	2,6
 21311  0159DE  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21312  0159E0  26D9               	addwf	fsr2l,f,c
 21313  0159E2  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21314  0159E4  22DA               	addwfc	fsr2h,f,c
 21315  0159E6  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21316  0159EA  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21317  0159EE  0E05               	movlw	5
 21318  0159F0  0100               	movlb	0	; () banked
 21319  0159F2  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21320  0159F4  0E00               	movlw	0
 21321  0159F6  0100               	movlb	0	; () banked
 21322  0159F8  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21323  0159FA  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21324                           
 21325                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 21326  0159FE  0100               	movlb	0	; () banked
 21327  015A00  EE20 F006          	lfsr	2,6
 21328  015A04  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21329  015A06  26D9               	addwf	fsr2l,f,c
 21330  015A08  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21331  015A0A  22DA               	addwfc	fsr2h,f,c
 21332  015A0C  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 21333  015A10  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 21334  015A14  0E00               	movlw	0
 21335  015A16  0100               	movlb	0	; () banked
 21336  015A18  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21337  015A1A  0E02               	movlw	2
 21338  015A1C  0100               	movlb	0	; () banked
 21339  015A1E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21340  015A20  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 21341                           
 21342                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21343  015A24  0100               	movlb	0	; () banked
 21344  015A26  EE20 F006          	lfsr	2,6
 21345  015A2A  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21346  015A2C  26D9               	addwf	fsr2l,f,c
 21347  015A2E  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21348  015A30  22DA               	addwfc	fsr2h,f,c
 21349  015A32  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21350  015A36  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21351  015A3A  0E05               	movlw	5
 21352  015A3C  0100               	movlb	0	; () banked
 21353  015A3E  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21354  015A40  0E01               	movlw	1
 21355  015A42  0100               	movlb	0	; () banked
 21356  015A44  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21357  015A46  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21358  015A4A  0012               	return		;funcret
 21359  015A4C                     __end_of_SPI_MinSpeed:
 21360                           	opt stack 0
 21361                           tosu	equ	0xFFF
 21362                           tosh	equ	0xFFE
 21363                           tosl	equ	0xFFD
 21364                           pclath	equ	0xFFA
 21365                           tblptru	equ	0xFF8
 21366                           tblptrh	equ	0xFF7
 21367                           tblptrl	equ	0xFF6
 21368                           tablat	equ	0xFF5
 21369                           prodh	equ	0xFF4
 21370                           prodl	equ	0xFF3
 21371                           intcon	equ	0xFF2
 21372                           postinc0	equ	0xFEE
 21373                           wreg	equ	0xFE8
 21374                           indf1	equ	0xFE7
 21375                           postdec1	equ	0xFE5
 21376                           fsr1h	equ	0xFE2
 21377                           fsr1l	equ	0xFE1
 21378                           indf2	equ	0xFDF
 21379                           postinc2	equ	0xFDE
 21380                           postdec2	equ	0xFDD
 21381                           plusw2	equ	0xFDB
 21382                           fsr2h	equ	0xFDA
 21383                           fsr2l	equ	0xFD9
 21384                           status	equ	0xFD8
 21385                           
 21386 ;; *************** function _SPI_Init *****************
 21387 ;; Defined at:
 21388 ;;		line 12 in file "Library/SPI.c"
 21389 ;; Parameters:    Size  Location     Type
 21390 ;;  pClock          4   45[BANK0 ] unsigned long 
 21391 ;;  pChannel        1   49[BANK0 ] enum E6744
 21392 ;;  pMode           1   50[BANK0 ] enum E6748
 21393 ;; Auto vars:     Size  Location     Type
 21394 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 21395 ;;		 -> SPI1(11), SPI2(11), 
 21396 ;; Return value:  Size  Location     Type
 21397 ;;                  1    wreg      void 
 21398 ;; Registers used:
 21399 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21400 ;; Tracked objects:
 21401 ;;		On entry : 0/0
 21402 ;;		On exit  : 0/0
 21403 ;;		Unchanged: 0/0
 21404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21405 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21408 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21409 ;;Total ram usage:        8 bytes
 21410 ;; Hardware stack levels used:    1
 21411 ;; Hardware stack levels required when called:   12
 21412 ;; This function calls:
 21413 ;;		_Byte_SetBit
 21414 ;;		_Byte_SetQuad
 21415 ;;		_Port_SetPinType
 21416 ;;		_SPI_DCS
 21417 ;;		_SPI_DisableISR
 21418 ;;		_Timer2_Init
 21419 ;; This function is called by:
 21420 ;;		_Configure_GPIOs
 21421 ;;		_HMI_Init
 21422 ;; This function uses a non-reentrant model
 21423 ;;
 21424                           
 21425                           	psect	text99
 21426  010D5A                     __ptext99:
 21427                           	opt stack 0
 21428  010D5A                     _SPI_Init:
 21429                           	opt stack 15
 21430                           
 21431                           ;SPI.c: 14: SPIPtr pInput;
 21432                           ;SPI.c: 16: switch (pChannel)
 21433                           
 21434                           ;incstack = 0
 21435  010D5A  D00C               	goto	l597
 21436  010D5C                     
 21437                           ;SPI.c: 19: pInput = &SPI1;
 21438  010D5C  0E78               	movlw	low _SPI1
 21439  010D5E  0100               	movlb	0	; () banked
 21440  010D60  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 21441  010D62  0E03               	movlw	high _SPI1
 21442  010D64  D004               	goto	L13
 21443  010D66                     
 21444                           ; BSR set to: 0
 21445                           ;SPI.c: 22: pInput = &SPI2;
 21446                           
 21447                           ; BSR set to: 0
 21448  010D66  0E83               	movlw	low _SPI2
 21449  010D68  0100               	movlb	0	; () banked
 21450  010D6A  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 21451  010D6C  0E03               	movlw	high _SPI2
 21452  010D6E                     L13:
 21453  010D6E  0100               	movlb	0	; () banked
 21454  010D70  6FE9               	movwf	(SPI_Init@pInput+1)& (0+255),b
 21455                           
 21456                           ; BSR set to: 0
 21457                           ;SPI.c: 24: };
 21458                           
 21459                           ;SPI.c: 23: break;
 21460  010D72  D008               	goto	l599
 21461  010D74                     l597:
 21462                           
 21463                           ; BSR set to: 0
 21464  010D74  0100               	movlb	0	; () banked
 21465  010D76  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 21466                           
 21467                           ; Switch size 1, requested type "space"
 21468                           ; Number of cases is 2, Range of values is 0 to 1
 21469                           ; switch strategies available:
 21470                           ; Name         Instructions Cycles
 21471                           ; simple_byte            7     4 (average)
 21472                           ;	Chosen strategy is simple_byte
 21473  010D78  0A00               	xorlw	0	; case 0
 21474  010D7A  B4D8               	btfsc	status,2,c
 21475  010D7C  D7EF               	goto	l598
 21476  010D7E  0A01               	xorlw	1	; case 1
 21477  010D80  B4D8               	btfsc	status,2,c
 21478  010D82  D7F1               	goto	l600
 21479  010D84                     l599:
 21480                           
 21481                           ; BSR set to: 0
 21482                           ;SPI.c: 26: pInput->mChannel = pChannel;
 21483                           
 21484                           ; BSR set to: 0
 21485  010D84  0100               	movlb	0	; () banked
 21486  010D86  EE20 F002          	lfsr	2,2
 21487  010D8A  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21488  010D8C  26D9               	addwf	fsr2l,f,c
 21489  010D8E  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21490  010D90  22DA               	addwfc	fsr2h,f,c
 21491  010D92  C0E6  FFDF         	movff	SPI_Init@pChannel,indf2
 21492                           
 21493                           ;SPI.c: 35: switch (pChannel)
 21494  010D96  D0B1               	goto	l601
 21495  010D98                     
 21496                           ; BSR set to: 0
 21497                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 21498                           
 21499                           ; BSR set to: 0
 21500  010D98  0EA0               	movlw	low _PortC
 21501  010D9A  0100               	movlb	0	; () banked
 21502  010D9C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21503  010D9E  0E00               	movlw	high _PortC
 21504  010DA0  0100               	movlb	0	; () banked
 21505  010DA2  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21506  010DA4  0E02               	movlw	2
 21507  010DA6  0100               	movlb	0	; () banked
 21508  010DA8  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21509  010DAA  0E03               	movlw	3
 21510  010DAC  0100               	movlb	0	; () banked
 21511  010DAE  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21512  010DB0  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21513                           
 21514                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 21515  010DB4  0EA0               	movlw	low _PortC
 21516  010DB6  0100               	movlb	0	; () banked
 21517  010DB8  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21518  010DBA  0E00               	movlw	high _PortC
 21519  010DBC  0100               	movlb	0	; () banked
 21520  010DBE  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21521  010DC0  0E03               	movlw	3
 21522  010DC2  0100               	movlb	0	; () banked
 21523  010DC4  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21524  010DC6  0E03               	movlw	3
 21525  010DC8  0100               	movlb	0	; () banked
 21526  010DCA  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21527  010DCC  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21528                           
 21529                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 21530  010DD0  0EA0               	movlw	low _PortC
 21531  010DD2  0100               	movlb	0	; () banked
 21532  010DD4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21533  010DD6  0E00               	movlw	high _PortC
 21534  010DD8  0100               	movlb	0	; () banked
 21535  010DDA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21536  010DDC  0E05               	movlw	5
 21537  010DDE  0100               	movlb	0	; () banked
 21538  010DE0  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21539  010DE2  0E03               	movlw	3
 21540  010DE4  0100               	movlb	0	; () banked
 21541  010DE6  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21542  010DE8  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21543                           
 21544                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 21545  010DEC  0EA0               	movlw	low _PortC
 21546  010DEE  0100               	movlb	0	; () banked
 21547  010DF0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21548  010DF2  0E00               	movlw	high _PortC
 21549  010DF4  0100               	movlb	0	; () banked
 21550  010DF6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21551  010DF8  0E04               	movlw	4
 21552  010DFA  0100               	movlb	0	; () banked
 21553  010DFC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21554  010DFE  0E00               	movlw	0
 21555  010E00  0100               	movlb	0	; () banked
 21556  010E02  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21557  010E04  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21558                           
 21559                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 21560  010E08  0100               	movlb	0	; () banked
 21561  010E0A  EE20 F003          	lfsr	2,3
 21562  010E0E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21563  010E10  26D9               	addwf	fsr2l,f,c
 21564  010E12  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21565  010E14  22DA               	addwfc	fsr2h,f,c
 21566  010E16  0EC7               	movlw	199
 21567  010E18  6EDE               	movwf	postinc2,c
 21568  010E1A  0E0F               	movlw	15
 21569  010E1C  6EDD               	movwf	postdec2,c
 21570                           
 21571                           ; BSR set to: 0
 21572                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 21573  010E1E  0100               	movlb	0	; () banked
 21574  010E20  EE20 F006          	lfsr	2,6
 21575  010E24  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21576  010E26  26D9               	addwf	fsr2l,f,c
 21577  010E28  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21578  010E2A  22DA               	addwfc	fsr2h,f,c
 21579  010E2C  0EC6               	movlw	198
 21580  010E2E  6EDE               	movwf	postinc2,c
 21581  010E30  0E0F               	movlw	15
 21582  010E32  6EDD               	movwf	postdec2,c
 21583                           
 21584                           ; BSR set to: 0
 21585                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 21586  010E34  0100               	movlb	0	; () banked
 21587  010E36  EE20 F009          	lfsr	2,9
 21588  010E3A  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21589  010E3C  26D9               	addwf	fsr2l,f,c
 21590  010E3E  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21591  010E40  22DA               	addwfc	fsr2h,f,c
 21592  010E42  0EC9               	movlw	201
 21593  010E44  D056               	goto	L14
 21594  010E46                     
 21595                           ; BSR set to: 0
 21596                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 21597                           
 21598                           ; BSR set to: 0
 21599  010E46  0E96               	movlw	low _PortD
 21600  010E48  0100               	movlb	0	; () banked
 21601  010E4A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21602  010E4C  0E00               	movlw	high _PortD
 21603  010E4E  0100               	movlb	0	; () banked
 21604  010E50  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21605  010E52  0E07               	movlw	7
 21606  010E54  0100               	movlb	0	; () banked
 21607  010E56  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21608  010E58  0E03               	movlw	3
 21609  010E5A  0100               	movlb	0	; () banked
 21610  010E5C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21611  010E5E  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21612                           
 21613                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 21614  010E62  0E96               	movlw	low _PortD
 21615  010E64  0100               	movlb	0	; () banked
 21616  010E66  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21617  010E68  0E00               	movlw	high _PortD
 21618  010E6A  0100               	movlb	0	; () banked
 21619  010E6C  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21620  010E6E  0E06               	movlw	6
 21621  010E70  0100               	movlb	0	; () banked
 21622  010E72  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21623  010E74  0E03               	movlw	3
 21624  010E76  0100               	movlb	0	; () banked
 21625  010E78  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21626  010E7A  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21627                           
 21628                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 21629  010E7E  0E96               	movlw	low _PortD
 21630  010E80  0100               	movlb	0	; () banked
 21631  010E82  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21632  010E84  0E00               	movlw	high _PortD
 21633  010E86  0100               	movlb	0	; () banked
 21634  010E88  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21635  010E8A  0E04               	movlw	4
 21636  010E8C  0100               	movlb	0	; () banked
 21637  010E8E  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21638  010E90  0E03               	movlw	3
 21639  010E92  0100               	movlb	0	; () banked
 21640  010E94  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21641  010E96  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21642                           
 21643                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 21644  010E9A  0E96               	movlw	low _PortD
 21645  010E9C  0100               	movlb	0	; () banked
 21646  010E9E  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 21647  010EA0  0E00               	movlw	high _PortD
 21648  010EA2  0100               	movlb	0	; () banked
 21649  010EA4  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21650  010EA6  0E05               	movlw	5
 21651  010EA8  0100               	movlb	0	; () banked
 21652  010EAA  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 21653  010EAC  0E00               	movlw	0
 21654  010EAE  0100               	movlb	0	; () banked
 21655  010EB0  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 21656  010EB2  EC1F  F095         	call	_Port_SetPinType	;wreg free
 21657                           
 21658                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 21659  010EB6  0100               	movlb	0	; () banked
 21660  010EB8  EE20 F003          	lfsr	2,3
 21661  010EBC  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21662  010EBE  26D9               	addwf	fsr2l,f,c
 21663  010EC0  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21664  010EC2  22DA               	addwfc	fsr2h,f,c
 21665  010EC4  0E6D               	movlw	109
 21666  010EC6  6EDE               	movwf	postinc2,c
 21667  010EC8  0E0F               	movlw	15
 21668  010ECA  6EDD               	movwf	postdec2,c
 21669                           
 21670                           ; BSR set to: 0
 21671                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 21672  010ECC  0100               	movlb	0	; () banked
 21673  010ECE  EE20 F006          	lfsr	2,6
 21674  010ED2  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21675  010ED4  26D9               	addwf	fsr2l,f,c
 21676  010ED6  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21677  010ED8  22DA               	addwfc	fsr2h,f,c
 21678  010EDA  0E6C               	movlw	108
 21679  010EDC  6EDE               	movwf	postinc2,c
 21680  010EDE  0E0F               	movlw	15
 21681  010EE0  6EDD               	movwf	postdec2,c
 21682                           
 21683                           ; BSR set to: 0
 21684                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 21685  010EE2  0100               	movlb	0	; () banked
 21686  010EE4  EE20 F009          	lfsr	2,9
 21687  010EE8  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21688  010EEA  26D9               	addwf	fsr2l,f,c
 21689  010EEC  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21690  010EEE  22DA               	addwfc	fsr2h,f,c
 21691  010EF0  0E6F               	movlw	111
 21692  010EF2                     L14:
 21693  010EF2  6EDE               	movwf	postinc2,c
 21694  010EF4  0E0F               	movlw	15
 21695  010EF6  6EDD               	movwf	postdec2,c
 21696                           
 21697                           ;SPI.c: 68: break;
 21698  010EF8  D009               	goto	l603
 21699  010EFA                     l601:
 21700                           
 21701                           ; BSR set to: 0
 21702                           
 21703                           ; BSR set to: 0
 21704  010EFA  0100               	movlb	0	; () banked
 21705  010EFC  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 21706                           
 21707                           ; Switch size 1, requested type "space"
 21708                           ; Number of cases is 2, Range of values is 0 to 1
 21709                           ; switch strategies available:
 21710                           ; Name         Instructions Cycles
 21711                           ; simple_byte            7     4 (average)
 21712                           ;	Chosen strategy is simple_byte
 21713  010EFE  0A00               	xorlw	0	; case 0
 21714  010F00  B4D8               	btfsc	status,2,c
 21715  010F02  D74A               	goto	l602
 21716  010F04  0A01               	xorlw	1	; case 1
 21717  010F06  A4D8               	btfss	status,2,c
 21718  010F08  0012               	return	
 21719  010F0A  D79D               	goto	l604
 21720  010F0C                     l603:
 21721                           
 21722                           ; BSR set to: 0
 21723                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21724                           
 21725                           ; BSR set to: 0
 21726  010F0C  0100               	movlb	0	; () banked
 21727  010F0E  EE20 F006          	lfsr	2,6
 21728  010F12  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21729  010F14  26D9               	addwf	fsr2l,f,c
 21730  010F16  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21731  010F18  22DA               	addwfc	fsr2h,f,c
 21732  010F1A  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21733  010F1E  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21734  010F22  0E05               	movlw	5
 21735  010F24  0100               	movlb	0	; () banked
 21736  010F26  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21737  010F28  0E00               	movlw	0
 21738  010F2A  0100               	movlb	0	; () banked
 21739  010F2C  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21740  010F2E  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21741                           
 21742                           ;SPI.c: 77: switch(pMode)
 21743  010F32  D09C               	goto	l607
 21744  010F34                     
 21745                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21746  010F34  0100               	movlb	0	; () banked
 21747  010F36  EE20 F006          	lfsr	2,6
 21748  010F3A  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21749  010F3C  26D9               	addwf	fsr2l,f,c
 21750  010F3E  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21751  010F40  22DA               	addwfc	fsr2h,f,c
 21752  010F42  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21753  010F46  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21754  010F4A  0E04               	movlw	4
 21755  010F4C  0100               	movlb	0	; () banked
 21756  010F4E  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21757  010F50  0E00               	movlw	0
 21758  010F52  0100               	movlb	0	; () banked
 21759  010F54  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21760  010F56  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21761                           
 21762                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21763  010F5A  0100               	movlb	0	; () banked
 21764  010F5C  EE20 F003          	lfsr	2,3
 21765  010F60  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21766  010F62  26D9               	addwf	fsr2l,f,c
 21767  010F64  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21768  010F66  22DA               	addwfc	fsr2h,f,c
 21769  010F68  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21770  010F6C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21771  010F70  0E06               	movlw	6
 21772  010F72  0100               	movlb	0	; () banked
 21773  010F74  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21774  010F76  0E00               	movlw	0
 21775  010F78  0100               	movlb	0	; () banked
 21776  010F7A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21777  010F7C  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21778                           
 21779                           ;SPI.c: 82: break;
 21780  010F80  D084               	goto	l609
 21781  010F82                     
 21782                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21783  010F82  0100               	movlb	0	; () banked
 21784  010F84  EE20 F006          	lfsr	2,6
 21785  010F88  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21786  010F8A  26D9               	addwf	fsr2l,f,c
 21787  010F8C  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21788  010F8E  22DA               	addwfc	fsr2h,f,c
 21789  010F90  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21790  010F94  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21791  010F98  0E04               	movlw	4
 21792  010F9A  0100               	movlb	0	; () banked
 21793  010F9C  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21794  010F9E  0E00               	movlw	0
 21795  010FA0  0100               	movlb	0	; () banked
 21796  010FA2  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21797  010FA4  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21798                           
 21799                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21800  010FA8  0100               	movlb	0	; () banked
 21801  010FAA  EE20 F003          	lfsr	2,3
 21802  010FAE  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21803  010FB0  26D9               	addwf	fsr2l,f,c
 21804  010FB2  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21805  010FB4  22DA               	addwfc	fsr2h,f,c
 21806  010FB6  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21807  010FBA  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21808  010FBE  0E06               	movlw	6
 21809  010FC0  0100               	movlb	0	; () banked
 21810  010FC2  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21811  010FC4  0E01               	movlw	1
 21812  010FC6  0100               	movlb	0	; () banked
 21813  010FC8  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21814  010FCA  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21815                           
 21816                           ;SPI.c: 86: break;
 21817  010FCE  D05D               	goto	l609
 21818  010FD0                     
 21819                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21820  010FD0  0100               	movlb	0	; () banked
 21821  010FD2  EE20 F006          	lfsr	2,6
 21822  010FD6  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21823  010FD8  26D9               	addwf	fsr2l,f,c
 21824  010FDA  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21825  010FDC  22DA               	addwfc	fsr2h,f,c
 21826  010FDE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21827  010FE2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21828  010FE6  0E04               	movlw	4
 21829  010FE8  0100               	movlb	0	; () banked
 21830  010FEA  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21831  010FEC  0E01               	movlw	1
 21832  010FEE  0100               	movlb	0	; () banked
 21833  010FF0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21834  010FF2  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21835                           
 21836                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21837  010FF6  0100               	movlb	0	; () banked
 21838  010FF8  EE20 F003          	lfsr	2,3
 21839  010FFC  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21840  010FFE  26D9               	addwf	fsr2l,f,c
 21841  011000  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21842  011002  22DA               	addwfc	fsr2h,f,c
 21843  011004  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21844  011008  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21845  01100C  0E06               	movlw	6
 21846  01100E  0100               	movlb	0	; () banked
 21847  011010  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21848  011012  0E00               	movlw	0
 21849  011014  0100               	movlb	0	; () banked
 21850  011016  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21851  011018  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21852                           
 21853                           ;SPI.c: 90: break;
 21854  01101C  D036               	goto	l609
 21855  01101E                     
 21856                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21857  01101E  0100               	movlb	0	; () banked
 21858  011020  EE20 F006          	lfsr	2,6
 21859  011024  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21860  011026  26D9               	addwf	fsr2l,f,c
 21861  011028  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21862  01102A  22DA               	addwfc	fsr2h,f,c
 21863  01102C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21864  011030  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21865  011034  0E04               	movlw	4
 21866  011036  0100               	movlb	0	; () banked
 21867  011038  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21868  01103A  0E01               	movlw	1
 21869  01103C  0100               	movlb	0	; () banked
 21870  01103E  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21871  011040  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21872                           
 21873                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21874  011044  0100               	movlb	0	; () banked
 21875  011046  EE20 F003          	lfsr	2,3
 21876  01104A  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21877  01104C  26D9               	addwf	fsr2l,f,c
 21878  01104E  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21879  011050  22DA               	addwfc	fsr2h,f,c
 21880  011052  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21881  011056  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21882  01105A  0E06               	movlw	6
 21883  01105C  0100               	movlb	0	; () banked
 21884  01105E  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21885  011060  0E01               	movlw	1
 21886  011062  0100               	movlb	0	; () banked
 21887  011064  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21888  011066  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21889                           
 21890                           ;SPI.c: 94: break;
 21891  01106A  D00F               	goto	l609
 21892  01106C                     l607:
 21893  01106C  0100               	movlb	0	; () banked
 21894  01106E  51E7               	movf	SPI_Init@pMode& (0+255),w,b
 21895                           
 21896                           ; Switch size 1, requested type "space"
 21897                           ; Number of cases is 4, Range of values is 0 to 3
 21898                           ; switch strategies available:
 21899                           ; Name         Instructions Cycles
 21900                           ; simple_byte           13     7 (average)
 21901                           ;	Chosen strategy is simple_byte
 21902  011070  0A00               	xorlw	0	; case 0
 21903  011072  B4D8               	btfsc	status,2,c
 21904  011074  D75F               	goto	l608
 21905  011076  0A01               	xorlw	1	; case 1
 21906  011078  B4D8               	btfsc	status,2,c
 21907  01107A  D783               	goto	l610
 21908  01107C  0A03               	xorlw	3	; case 2
 21909  01107E  B4D8               	btfsc	status,2,c
 21910  011080  D7A7               	goto	l611
 21911  011082  0A01               	xorlw	1	; case 3
 21912  011084  A4D8               	btfss	status,2,c
 21913  011086  0012               	return	
 21914  011088  D7CA               	goto	l612
 21915  01108A                     l609:
 21916                           
 21917                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 21918                           
 21919                           ; BSR set to: 0
 21920  01108A  0100               	movlb	0	; () banked
 21921  01108C  EE20 F006          	lfsr	2,6
 21922  011090  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21923  011092  26D9               	addwf	fsr2l,f,c
 21924  011094  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21925  011096  22DA               	addwfc	fsr2h,f,c
 21926  011098  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21927  01109C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21928  0110A0  0E07               	movlw	7
 21929  0110A2  0100               	movlb	0	; () banked
 21930  0110A4  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21931  0110A6  0E00               	movlw	0
 21932  0110A8  0100               	movlb	0	; () banked
 21933  0110AA  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21934  0110AC  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21935                           
 21936                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 21937  0110B0  0100               	movlb	0	; () banked
 21938  0110B2  EE20 F006          	lfsr	2,6
 21939  0110B6  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 21940  0110B8  26D9               	addwf	fsr2l,f,c
 21941  0110BA  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21942  0110BC  22DA               	addwfc	fsr2h,f,c
 21943  0110BE  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 21944  0110C2  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 21945  0110C6  0E06               	movlw	6
 21946  0110C8  0100               	movlb	0	; () banked
 21947  0110CA  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 21948  0110CC  0E00               	movlw	0
 21949  0110CE  0100               	movlb	0	; () banked
 21950  0110D0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 21951  0110D2  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 21952                           
 21953                           ;SPI.c: 106: Timer2_Init(pClock);
 21954  0110D6  C0E2  F0C2         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 21955  0110DA  C0E3  F0C3         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 21956  0110DE  C0E4  F0C4         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 21957  0110E2  C0E5  F0C5         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 21958  0110E6  EC36  F09B         	call	_Timer2_Init	;wreg free
 21959                           
 21960                           ;SPI.c: 112: SPI_DisableISR(pInput);
 21961  0110EA  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 21962  0110EE  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 21963  0110F2  EC8F  F0B4         	call	_SPI_DisableISR	;wreg free
 21964                           
 21965                           ;SPI.c: 116: switch (pChannel)
 21966  0110F6  D004               	goto	l614
 21967  0110F8                     l615:
 21968                           
 21969                           ; BSR set to: 0
 21970  0110F8  869F               	bsf	3999,3,c	;volatile
 21971  0110FA  D00B               	goto	l616
 21972  0110FC                     l617:
 21973                           
 21974                           ; BSR set to: 0
 21975  0110FC  8EA5               	bsf	4005,7,c	;volatile
 21976  0110FE  D009               	goto	l616
 21977  011100                     l614:
 21978                           
 21979                           ; BSR set to: 0
 21980  011100  0100               	movlb	0	; () banked
 21981  011102  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 21982                           
 21983                           ; Switch size 1, requested type "space"
 21984                           ; Number of cases is 2, Range of values is 0 to 1
 21985                           ; switch strategies available:
 21986                           ; Name         Instructions Cycles
 21987                           ; simple_byte            7     4 (average)
 21988                           ;	Chosen strategy is simple_byte
 21989  011104  0A00               	xorlw	0	; case 0
 21990  011106  B4D8               	btfsc	status,2,c
 21991  011108  D7F7               	goto	l615
 21992  01110A  0A01               	xorlw	1	; case 1
 21993  01110C  A4D8               	btfss	status,2,c
 21994  01110E  0012               	return	
 21995  011110  D7F5               	goto	l617
 21996  011112                     l616:
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;SPI.c: 124: SPI_DCS(pInput);
 22000                           
 22001                           ; BSR set to: 0
 22002  011112  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DCS@pInput
 22003  011116  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 22004  01111A  ECEF  F0B3         	call	_SPI_DCS	;wreg free
 22005                           
 22006                           ;SPI.c: 126: pInput->mBusy = 0;
 22007  01111E  C0E8  FFD9         	movff	SPI_Init@pInput,fsr2l
 22008  011122  C0E9  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 22009  011126  0E00               	movlw	0
 22010  011128  6EDF               	movwf	indf2,c
 22011                           
 22012                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 22013  01112A  0100               	movlb	0	; () banked
 22014  01112C  EE20 F006          	lfsr	2,6
 22015  011130  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 22016  011132  26D9               	addwf	fsr2l,f,c
 22017  011134  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22018  011136  22DA               	addwfc	fsr2h,f,c
 22019  011138  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 22020  01113C  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 22021  011140  0E00               	movlw	0
 22022  011142  0100               	movlb	0	; () banked
 22023  011144  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22024  011146  0E03               	movlw	3
 22025  011148  0100               	movlb	0	; () banked
 22026  01114A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 22027  01114C  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 22028                           
 22029                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22030  011150  0100               	movlb	0	; () banked
 22031  011152  EE20 F006          	lfsr	2,6
 22032  011156  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 22033  011158  26D9               	addwf	fsr2l,f,c
 22034  01115A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22035  01115C  22DA               	addwfc	fsr2h,f,c
 22036  01115E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 22037  011162  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 22038  011166  0E05               	movlw	5
 22039  011168  0100               	movlb	0	; () banked
 22040  01116A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 22041  01116C  0E01               	movlw	1
 22042  01116E  0100               	movlb	0	; () banked
 22043  011170  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 22044  011172  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 22045  011176  0012               	return		;funcret
 22046  011178                     __end_of_SPI_Init:
 22047                           	opt stack 0
 22048                           tosu	equ	0xFFF
 22049                           tosh	equ	0xFFE
 22050                           tosl	equ	0xFFD
 22051                           pclath	equ	0xFFA
 22052                           tblptru	equ	0xFF8
 22053                           tblptrh	equ	0xFF7
 22054                           tblptrl	equ	0xFF6
 22055                           tablat	equ	0xFF5
 22056                           prodh	equ	0xFF4
 22057                           prodl	equ	0xFF3
 22058                           intcon	equ	0xFF2
 22059                           postinc0	equ	0xFEE
 22060                           wreg	equ	0xFE8
 22061                           indf1	equ	0xFE7
 22062                           postdec1	equ	0xFE5
 22063                           fsr1h	equ	0xFE2
 22064                           fsr1l	equ	0xFE1
 22065                           indf2	equ	0xFDF
 22066                           postinc2	equ	0xFDE
 22067                           postdec2	equ	0xFDD
 22068                           plusw2	equ	0xFDB
 22069                           fsr2h	equ	0xFDA
 22070                           fsr2l	equ	0xFD9
 22071                           status	equ	0xFD8
 22072                           
 22073 ;; *************** function _Timer2_Init *****************
 22074 ;; Defined at:
 22075 ;;		line 10 in file "Library/Timer2.c"
 22076 ;; Parameters:    Size  Location     Type
 22077 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 22078 ;; Auto vars:     Size  Location     Type
 22079 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 22080 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 22081 ;;  RDIV            4   18[BANK0 ] unsigned long 
 22082 ;; Return value:  Size  Location     Type
 22083 ;;                  1    wreg      void 
 22084 ;; Registers used:
 22085 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22086 ;; Tracked objects:
 22087 ;;		On entry : 0/0
 22088 ;;		On exit  : 0/0
 22089 ;;		Unchanged: 0/0
 22090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22091 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22092 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22094 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22095 ;;Total ram usage:       17 bytes
 22096 ;; Hardware stack levels used:    1
 22097 ;; Hardware stack levels required when called:    8
 22098 ;; This function calls:
 22099 ;;		_Timer2_Clear
 22100 ;;		___lldiv
 22101 ;; This function is called by:
 22102 ;;		_SPI_Init
 22103 ;; This function uses a non-reentrant model
 22104 ;;
 22105                           
 22106                           	psect	text100
 22107  01366C                     __ptext100:
 22108                           	opt stack 0
 22109  01366C                     _Timer2_Init:
 22110                           	opt stack 18
 22111                           
 22112                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 22113                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 22114                           ;Timer2.c: 14: static UINT8 PRE = 0;
 22115                           ;Timer2.c: 15: static UINT32 DIV = 0;
 22116                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 22117                           
 22118                           ;incstack = 0
 22119  01366C  0E00               	movlw	0
 22120  01366E  0100               	movlb	0	; () banked
 22121  013670  6FCB               	movwf	Timer2_Init@pCPUClock& (0+255),b
 22122  013672  0E6C               	movlw	108
 22123  013674  6FCC               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 22124  013676  0EDC               	movlw	220
 22125  013678  6FCD               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 22126  01367A  0E02               	movlw	2
 22127  01367C  6FCE               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 22128                           
 22129                           ; BSR set to: 0
 22130                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 22131                           ;Timer2.c: 20: pFrequency *= 2;
 22132  01367E  0100               	movlb	0	; () banked
 22133  013680  90D8               	bcf	status,0,c
 22134  013682  37C2               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 22135  013684  37C3               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 22136  013686  37C4               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 22137  013688  37C5               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;Timer2.c: 23: pCPUClock /= 4;
 22141  01368A  0E02               	movlw	2
 22142  01368C  0100               	movlb	0	; () banked
 22143  01368E  6FC6               	movwf	??_Timer2_Init& (0+255),b
 22144  013690                     u9935:
 22145  013690  90D8               	bcf	status,0,c
 22146  013692  0100               	movlb	0	; () banked
 22147  013694  33CE               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 22148  013696  33CD               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 22149  013698  33CC               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 22150  01369A  33CB               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 22151  01369C  0100               	movlb	0	; () banked
 22152  01369E  2FC6               	decfsz	??_Timer2_Init& (0+255),f,b
 22153  0136A0  D7F7               	goto	u9935
 22154                           
 22155                           ; BSR set to: 0
 22156                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 22157  0136A2  C0CB  F0B5         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 22158  0136A6  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 22159  0136AA  C0CD  F0B7         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 22160  0136AE  C0CE  F0B8         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 22161  0136B2  C0C2  F0B9         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 22162  0136B6  C0C3  F0BA         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 22163  0136BA  C0C4  F0BB         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 22164  0136BE  C0C5  F0BC         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 22165  0136C2  EC5D  F0A4         	call	___lldiv	;wreg free
 22166  0136C6  C0B5  F0CF         	movff	?___lldiv,Timer2_Init@DIVIDE
 22167  0136CA  C0B6  F0D0         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 22168  0136CE  C0B7  F0D1         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 22169  0136D2  C0B8  F0D2         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 22170                           
 22171                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 22172  0136D6  D010               	goto	l1828
 22173  0136D8                     l13218:
 22174                           
 22175                           ;Timer2.c: 28: {
 22176                           ;Timer2.c: 29: RDIV = 0;
 22177  0136D8  0E00               	movlw	0
 22178  0136DA  0100               	movlb	0	; () banked
 22179  0136DC  6FC7               	movwf	Timer2_Init@RDIV& (0+255),b
 22180  0136DE  0E00               	movlw	0
 22181  0136E0  6FC8               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 22182  0136E2  0E00               	movlw	0
 22183  0136E4  6FC9               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 22184  0136E6  0E00               	movlw	0
 22185  0136E8  6FCA               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 22186                           
 22187                           ; BSR set to: 0
 22188                           ;Timer2.c: 30: INDEX ++;
 22189  0136EA  0100               	movlb	0	; () banked
 22190  0136EC  2B90               	incf	Timer2_Init@INDEX& (0+255),f,b
 22191                           
 22192                           ; BSR set to: 0
 22193                           ;Timer2.c: 31: if (INDEX >= 3)
 22194  0136EE  0E02               	movlw	2
 22195  0136F0  0100               	movlb	0	; () banked
 22196  0136F2  6590               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 22197  0136F4  D001               	goto	l1828
 22198  0136F6  D026               	goto	u9950
 22199  0136F8                     l1828:
 22200                           
 22201                           ; BSR set to: 0
 22202                           
 22203                           ; BSR set to: 0
 22204  0136F8  C0CF  F0B5         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 22205  0136FC  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 22206  013700  C0D1  F0B7         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 22207  013704  C0D2  F0B8         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 22208  013708  0100               	movlb	0	; () banked
 22209  01370A  5190               	movf	Timer2_Init@INDEX& (0+255),w,b
 22210  01370C  0D01               	mullw	1
 22211  01370E  0E68               	movlw	low Timer2_Init@PRESCALE
 22212  013710  24F3               	addwf	prodl,w,c
 22213  013712  6EF6               	movwf	tblptrl,c
 22214  013714  0EFD               	movlw	high Timer2_Init@PRESCALE
 22215  013716  20F4               	addwfc	prodh,w,c
 22216  013718  6EF7               	movwf	tblptrh,c
 22217  01371A                     	if	1	;There are 3 active tblptr bytes
 22218  01371A  6AF8               	clrf	tblptru,c
 22219  01371C  0E00               	movlw	low (__mediumconst shr (0+16))
 22220  01371E  22F8               	addwfc	tblptru,f,c
 22221  013720                     	endif
 22222  013720  0008               	tblrd		*
 22223  013722  50F5               	movf	tablat,w,c
 22224  013724  0100               	movlb	0	; () banked
 22225  013726  6FB9               	movwf	___lldiv@divisor& (0+255),b
 22226  013728  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 22227  01372A  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 22228  01372C  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 22229  01372E  EC5D  F0A4         	call	___lldiv	;wreg free
 22230  013732  0100               	movlb	0	; () banked
 22231  013734  51B8               	movf	(?___lldiv+3)& (0+255),w,b
 22232  013736  0100               	movlb	0	; () banked
 22233  013738  11B7               	iorwf	(?___lldiv+2)& (0+255),w,b
 22234  01373A  E1CE               	bnz	l13218
 22235  01373C  0100               	movlb	0	; () banked
 22236  01373E  05B6               	decf	(?___lldiv+1)& (0+255),w,b
 22237  013740  B0D8               	btfsc	status,0,c
 22238  013742  D7CA               	goto	l1827
 22239  013744                     u9950:
 22240                           
 22241                           ; BSR set to: 0
 22242                           ;Timer2.c: 33: }
 22243                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 22244                           
 22245                           ; BSR set to: 0
 22246  013744  50CA               	movf	4042,w,c	;volatile
 22247  013746  0100               	movlb	0	; () banked
 22248  013748  1990               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22249  01374A  0BFC               	andlw	-4
 22250  01374C  1990               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22251  01374E  6ECA               	movwf	4042,c	;volatile
 22252                           
 22253                           ; BSR set to: 0
 22254                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 22255  013750  84CA               	bsf	4042,2,c	;volatile
 22256                           
 22257                           ; BSR set to: 0
 22258                           ;Timer2.c: 44: Timer2_Clear();
 22259  013752  EC8D  F0B6         	call	_Timer2_Clear	;wreg free
 22260                           
 22261                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 22262  013756  0100               	movlb	0	; () banked
 22263  013758  5190               	movf	Timer2_Init@INDEX& (0+255),w,b
 22264  01375A  0D01               	mullw	1
 22265  01375C  0E68               	movlw	low Timer2_Init@PRESCALE
 22266  01375E  24F3               	addwf	prodl,w,c
 22267  013760  6EF6               	movwf	tblptrl,c
 22268  013762  0EFD               	movlw	high Timer2_Init@PRESCALE
 22269  013764  20F4               	addwfc	prodh,w,c
 22270  013766  6EF7               	movwf	tblptrh,c
 22271  013768                     	if	1	;There are 3 active tblptr bytes
 22272  013768  6AF8               	clrf	tblptru,c
 22273  01376A  0E00               	movlw	low (__mediumconst shr (0+16))
 22274  01376C  22F8               	addwfc	tblptru,f,c
 22275  01376E                     	endif
 22276  01376E  0008               	tblrd		*
 22277  013770  CFF5 F08F          	movff	tablat,Timer2_Init@PRE
 22278                           
 22279                           ; BSR set to: 0
 22280                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 22281  013774  0EFF               	movlw	255
 22282  013776  0100               	movlb	0	; () banked
 22283  013778  25CF               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 22284  01377A  0103               	movlb	3	; () banked
 22285  01377C  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 22286  01377E  0EFF               	movlw	255
 22287  013780  0100               	movlb	0	; () banked
 22288  013782  21D0               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 22289  013784  0103               	movlb	3	; () banked
 22290  013786  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 22291  013788  0EFF               	movlw	255
 22292  01378A  0100               	movlb	0	; () banked
 22293  01378C  21D1               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 22294  01378E  0103               	movlb	3	; () banked
 22295  013790  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 22296  013792  0EFF               	movlw	255
 22297  013794  0100               	movlb	0	; () banked
 22298  013796  21D2               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 22299  013798  0103               	movlb	3	; () banked
 22300  01379A  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 22301                           
 22302                           ; BSR set to: 3
 22303                           ;Timer2.c: 48: INDEX = DIV/PRE;
 22304  01379C  C326  F0B5         	movff	Timer2_Init@DIV,___lldiv@dividend
 22305  0137A0  C327  F0B6         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 22306  0137A4  C328  F0B7         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 22307  0137A8  C329  F0B8         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 22308  0137AC  0100               	movlb	0	; () banked
 22309  0137AE  518F               	movf	Timer2_Init@PRE& (0+255),w,b
 22310  0137B0  0100               	movlb	0	; () banked
 22311  0137B2  6FB9               	movwf	___lldiv@divisor& (0+255),b
 22312  0137B4  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 22313  0137B6  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 22314  0137B8  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 22315  0137BA  EC5D  F0A4         	call	___lldiv	;wreg free
 22316  0137BE  0100               	movlb	0	; () banked
 22317  0137C0  51B5               	movf	?___lldiv& (0+255),w,b
 22318  0137C2  0100               	movlb	0	; () banked
 22319  0137C4  6F90               	movwf	Timer2_Init@INDEX& (0+255),b
 22320                           
 22321                           ; BSR set to: 0
 22322                           ;Timer2.c: 49: PR2 = INDEX;
 22323  0137C6  C090  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 22324                           
 22325                           ; BSR set to: 0
 22326  0137CA  0012               	return		;funcret
 22327  0137CC                     __end_of_Timer2_Init:
 22328                           	opt stack 0
 22329                           tosu	equ	0xFFF
 22330                           tosh	equ	0xFFE
 22331                           tosl	equ	0xFFD
 22332                           pclath	equ	0xFFA
 22333                           tblptru	equ	0xFF8
 22334                           tblptrh	equ	0xFF7
 22335                           tblptrl	equ	0xFF6
 22336                           tablat	equ	0xFF5
 22337                           prodh	equ	0xFF4
 22338                           prodl	equ	0xFF3
 22339                           intcon	equ	0xFF2
 22340                           postinc0	equ	0xFEE
 22341                           wreg	equ	0xFE8
 22342                           indf1	equ	0xFE7
 22343                           postdec1	equ	0xFE5
 22344                           fsr1h	equ	0xFE2
 22345                           fsr1l	equ	0xFE1
 22346                           indf2	equ	0xFDF
 22347                           postinc2	equ	0xFDE
 22348                           postdec2	equ	0xFDD
 22349                           plusw2	equ	0xFDB
 22350                           fsr2h	equ	0xFDA
 22351                           fsr2l	equ	0xFD9
 22352                           status	equ	0xFD8
 22353                           
 22354 ;; *************** function ___lldiv *****************
 22355 ;; Defined at:
 22356 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 22357 ;; Parameters:    Size  Location     Type
 22358 ;;  dividend        4    0[BANK0 ] unsigned long 
 22359 ;;  divisor         4    4[BANK0 ] unsigned long 
 22360 ;; Auto vars:     Size  Location     Type
 22361 ;;  quotient        4    8[BANK0 ] unsigned long 
 22362 ;;  counter         1   12[BANK0 ] unsigned char 
 22363 ;; Return value:  Size  Location     Type
 22364 ;;                  4    0[BANK0 ] unsigned long 
 22365 ;; Registers used:
 22366 ;;		wreg, status,2, status,0
 22367 ;; Tracked objects:
 22368 ;;		On entry : 0/0
 22369 ;;		On exit  : 0/0
 22370 ;;		Unchanged: 0/0
 22371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22372 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22373 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22375 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22376 ;;Total ram usage:       13 bytes
 22377 ;; Hardware stack levels used:    1
 22378 ;; Hardware stack levels required when called:    7
 22379 ;; This function calls:
 22380 ;;		Nothing
 22381 ;; This function is called by:
 22382 ;;		_Timer0_Init
 22383 ;;		_Timer2_Init
 22384 ;;		_rand_between
 22385 ;;		_I2C_Init
 22386 ;; This function uses a non-reentrant model
 22387 ;;
 22388                           
 22389                           	psect	text101
 22390  0148BA                     __ptext101:
 22391                           	opt stack 0
 22392  0148BA                     ___lldiv:
 22393                           	opt stack 19
 22394                           
 22395                           ; BSR set to: 0
 22396                           ;incstack = 0
 22397  0148BA  0E00               	movlw	0
 22398  0148BC  0100               	movlb	0	; () banked
 22399  0148BE  6FBD               	movwf	___lldiv@quotient& (0+255),b
 22400  0148C0  0E00               	movlw	0
 22401  0148C2  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
 22402  0148C4  0E00               	movlw	0
 22403  0148C6  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
 22404  0148C8  0E00               	movlw	0
 22405  0148CA  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
 22406                           
 22407                           ; BSR set to: 0
 22408  0148CC  0100               	movlb	0	; () banked
 22409  0148CE  51B9               	movf	___lldiv@divisor& (0+255),w,b
 22410  0148D0  0100               	movlb	0	; () banked
 22411  0148D2  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 22412  0148D4  0100               	movlb	0	; () banked
 22413  0148D6  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 22414  0148D8  0100               	movlb	0	; () banked
 22415  0148DA  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 22416  0148DC  B4D8               	btfsc	status,2,c
 22417  0148DE  D042               	goto	l2854
 22418                           
 22419                           ; BSR set to: 0
 22420  0148E0  0E01               	movlw	1
 22421  0148E2  0100               	movlb	0	; () banked
 22422  0148E4  6FC1               	movwf	___lldiv@counter& (0+255),b
 22423  0148E6  D008               	goto	l2849
 22424  0148E8                     
 22425                           ; BSR set to: 0
 22426                           
 22427                           ; BSR set to: 0
 22428  0148E8  0100               	movlb	0	; () banked
 22429  0148EA  90D8               	bcf	status,0,c
 22430  0148EC  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
 22431  0148EE  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 22432  0148F0  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 22433  0148F2  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 22434  0148F4  0100               	movlb	0	; () banked
 22435  0148F6  2BC1               	incf	___lldiv@counter& (0+255),f,b
 22436  0148F8                     l2849:
 22437                           
 22438                           ; BSR set to: 0
 22439                           
 22440                           ; BSR set to: 0
 22441  0148F8  0100               	movlb	0	; () banked
 22442  0148FA  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 22443  0148FC  D7F5               	goto	l2850
 22444  0148FE                     u9810:
 22445                           
 22446                           ; BSR set to: 0
 22447                           
 22448                           ; BSR set to: 0
 22449                           
 22450                           ; BSR set to: 0
 22451  0148FE  0100               	movlb	0	; () banked
 22452  014900  90D8               	bcf	status,0,c
 22453  014902  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
 22454  014904  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 22455  014906  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 22456  014908  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 22457                           
 22458                           ; BSR set to: 0
 22459  01490A  0100               	movlb	0	; () banked
 22460  01490C  51B9               	movf	___lldiv@divisor& (0+255),w,b
 22461  01490E  0100               	movlb	0	; () banked
 22462  014910  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
 22463  014912  0100               	movlb	0	; () banked
 22464  014914  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22465  014916  0100               	movlb	0	; () banked
 22466  014918  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 22467  01491A  0100               	movlb	0	; () banked
 22468  01491C  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22469  01491E  0100               	movlb	0	; () banked
 22470  014920  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 22471  014922  0100               	movlb	0	; () banked
 22472  014924  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22473  014926  0100               	movlb	0	; () banked
 22474  014928  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 22475  01492A  A0D8               	btfss	status,0,c
 22476  01492C  D012               	goto	l2853
 22477                           
 22478                           ; BSR set to: 0
 22479  01492E  0100               	movlb	0	; () banked
 22480  014930  51B9               	movf	___lldiv@divisor& (0+255),w,b
 22481  014932  0100               	movlb	0	; () banked
 22482  014934  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
 22483  014936  0100               	movlb	0	; () banked
 22484  014938  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22485  01493A  0100               	movlb	0	; () banked
 22486  01493C  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 22487  01493E  0100               	movlb	0	; () banked
 22488  014940  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22489  014942  0100               	movlb	0	; () banked
 22490  014944  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 22491  014946  0100               	movlb	0	; () banked
 22492  014948  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22493  01494A  0100               	movlb	0	; () banked
 22494  01494C  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 22495                           
 22496                           ; BSR set to: 0
 22497  01494E  0100               	movlb	0	; () banked
 22498  014950  81BD               	bsf	___lldiv@quotient& (0+255),0,b
 22499  014952                     l2853:
 22500                           
 22501                           ; BSR set to: 0
 22502                           
 22503                           ; BSR set to: 0
 22504  014952  0100               	movlb	0	; () banked
 22505  014954  90D8               	bcf	status,0,c
 22506  014956  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 22507  014958  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 22508  01495A  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 22509  01495C  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
 22510                           
 22511                           ; BSR set to: 0
 22512  01495E  0100               	movlb	0	; () banked
 22513  014960  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
 22514  014962  D7CD               	goto	u9810
 22515  014964                     l2854:
 22516                           
 22517                           ; BSR set to: 0
 22518                           
 22519                           ; BSR set to: 0
 22520  014964  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
 22521  014968  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
 22522  01496C  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
 22523  014970  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
 22524                           
 22525                           ; BSR set to: 0
 22526  014974  0012               	return		;funcret
 22527  014976                     __end_of___lldiv:
 22528                           	opt stack 0
 22529                           tosu	equ	0xFFF
 22530                           tosh	equ	0xFFE
 22531                           tosl	equ	0xFFD
 22532                           pclath	equ	0xFFA
 22533                           tblptru	equ	0xFF8
 22534                           tblptrh	equ	0xFF7
 22535                           tblptrl	equ	0xFF6
 22536                           tablat	equ	0xFF5
 22537                           prodh	equ	0xFF4
 22538                           prodl	equ	0xFF3
 22539                           intcon	equ	0xFF2
 22540                           postinc0	equ	0xFEE
 22541                           wreg	equ	0xFE8
 22542                           indf1	equ	0xFE7
 22543                           postdec1	equ	0xFE5
 22544                           fsr1h	equ	0xFE2
 22545                           fsr1l	equ	0xFE1
 22546                           indf2	equ	0xFDF
 22547                           postinc2	equ	0xFDE
 22548                           postdec2	equ	0xFDD
 22549                           plusw2	equ	0xFDB
 22550                           fsr2h	equ	0xFDA
 22551                           fsr2l	equ	0xFD9
 22552                           status	equ	0xFD8
 22553                           
 22554 ;; *************** function _Timer2_Clear *****************
 22555 ;; Defined at:
 22556 ;;		line 3 in file "Library/Timer2.c"
 22557 ;; Parameters:    Size  Location     Type
 22558 ;;		None
 22559 ;; Auto vars:     Size  Location     Type
 22560 ;;		None
 22561 ;; Return value:  Size  Location     Type
 22562 ;;                  1    wreg      void 
 22563 ;; Registers used:
 22564 ;;		None
 22565 ;; Tracked objects:
 22566 ;;		On entry : 0/0
 22567 ;;		On exit  : 0/0
 22568 ;;		Unchanged: 0/0
 22569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22574 ;;Total ram usage:        0 bytes
 22575 ;; Hardware stack levels used:    1
 22576 ;; Hardware stack levels required when called:    7
 22577 ;; This function calls:
 22578 ;;		Nothing
 22579 ;; This function is called by:
 22580 ;;		_Timer2_Init
 22581 ;; This function uses a non-reentrant model
 22582 ;;
 22583                           
 22584                           	psect	text102
 22585  016D1A                     __ptext102:
 22586                           	opt stack 0
 22587  016D1A                     _Timer2_Clear:
 22588                           	opt stack 18
 22589                           
 22590                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 22591                           
 22592                           ; BSR set to: 0
 22593                           ;incstack = 0
 22594  016D1A  929E               	bcf	3998,1,c	;volatile
 22595                           
 22596                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 22597  016D1C  929D               	bcf	3997,1,c	;volatile
 22598                           
 22599                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 22600  016D1E  929F               	bcf	3999,1,c	;volatile
 22601  016D20  0012               	return		;funcret
 22602  016D22                     __end_of_Timer2_Clear:
 22603                           	opt stack 0
 22604                           tosu	equ	0xFFF
 22605                           tosh	equ	0xFFE
 22606                           tosl	equ	0xFFD
 22607                           pclath	equ	0xFFA
 22608                           tblptru	equ	0xFF8
 22609                           tblptrh	equ	0xFF7
 22610                           tblptrl	equ	0xFF6
 22611                           tablat	equ	0xFF5
 22612                           prodh	equ	0xFF4
 22613                           prodl	equ	0xFF3
 22614                           intcon	equ	0xFF2
 22615                           postinc0	equ	0xFEE
 22616                           wreg	equ	0xFE8
 22617                           indf1	equ	0xFE7
 22618                           postdec1	equ	0xFE5
 22619                           fsr1h	equ	0xFE2
 22620                           fsr1l	equ	0xFE1
 22621                           indf2	equ	0xFDF
 22622                           postinc2	equ	0xFDE
 22623                           postdec2	equ	0xFDD
 22624                           plusw2	equ	0xFDB
 22625                           fsr2h	equ	0xFDA
 22626                           fsr2l	equ	0xFD9
 22627                           status	equ	0xFD8
 22628                           
 22629 ;; *************** function _SPI_DisableISR *****************
 22630 ;; Defined at:
 22631 ;;		line 181 in file "Library/SPI.c"
 22632 ;; Parameters:    Size  Location     Type
 22633 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22634 ;;		 -> SPI1(11), SPI2(11), 
 22635 ;; Auto vars:     Size  Location     Type
 22636 ;;		None
 22637 ;; Return value:  Size  Location     Type
 22638 ;;                  1    wreg      void 
 22639 ;; Registers used:
 22640 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22641 ;; Tracked objects:
 22642 ;;		On entry : 0/0
 22643 ;;		On exit  : 0/0
 22644 ;;		Unchanged: 0/0
 22645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22650 ;;Total ram usage:        2 bytes
 22651 ;; Hardware stack levels used:    1
 22652 ;; Hardware stack levels required when called:    7
 22653 ;; This function calls:
 22654 ;;		Nothing
 22655 ;; This function is called by:
 22656 ;;		_SPI_Init
 22657 ;; This function uses a non-reentrant model
 22658 ;;
 22659                           
 22660                           	psect	text103
 22661  01691E                     __ptext103:
 22662                           	opt stack 0
 22663  01691E                     _SPI_DisableISR:
 22664                           	opt stack 19
 22665                           
 22666                           ;SPI.c: 183: switch (pInput->mChannel)
 22667                           
 22668                           ;incstack = 0
 22669  01691E  D004               	goto	l654
 22670  016920                     l655:
 22671                           
 22672                           ; BSR set to: 0
 22673  016920  969D               	bcf	3997,3,c	;volatile
 22674  016922  0012               	return	
 22675  016924                     l657:
 22676                           
 22677                           ; BSR set to: 0
 22678  016924  9EA3               	bcf	4003,7,c	;volatile
 22679                           
 22680                           ; BSR set to: 0
 22681                           ;SPI.c: 188: };
 22682                           
 22683                           ; BSR set to: 0
 22684                           
 22685                           ;SPI.c: 187: default: return;
 22686  016926  0012               	return	
 22687  016928                     l654:
 22688                           
 22689                           ; BSR set to: 0
 22690  016928  0100               	movlb	0	; () banked
 22691  01692A  EE20 F002          	lfsr	2,2
 22692  01692E  51B5               	movf	SPI_DisableISR@pInput& (0+255),w,b
 22693  016930  26D9               	addwf	fsr2l,f,c
 22694  016932  51B6               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 22695  016934  22DA               	addwfc	fsr2h,f,c
 22696  016936  50DF               	movf	indf2,w,c
 22697                           
 22698                           ; Switch size 1, requested type "space"
 22699                           ; Number of cases is 2, Range of values is 0 to 1
 22700                           ; switch strategies available:
 22701                           ; Name         Instructions Cycles
 22702                           ; simple_byte            7     4 (average)
 22703                           ;	Chosen strategy is simple_byte
 22704  016938  0A00               	xorlw	0	; case 0
 22705  01693A  B4D8               	btfsc	status,2,c
 22706  01693C  D7F1               	goto	l655
 22707  01693E  0A01               	xorlw	1	; case 1
 22708  016940  A4D8               	btfss	status,2,c
 22709  016942  0012               	return	
 22710  016944  D7EF               	goto	l657
 22711  016946                     __end_of_SPI_DisableISR:
 22712                           	opt stack 0
 22713                           tosu	equ	0xFFF
 22714                           tosh	equ	0xFFE
 22715                           tosl	equ	0xFFD
 22716                           pclath	equ	0xFFA
 22717                           tblptru	equ	0xFF8
 22718                           tblptrh	equ	0xFF7
 22719                           tblptrl	equ	0xFF6
 22720                           tablat	equ	0xFF5
 22721                           prodh	equ	0xFF4
 22722                           prodl	equ	0xFF3
 22723                           intcon	equ	0xFF2
 22724                           postinc0	equ	0xFEE
 22725                           wreg	equ	0xFE8
 22726                           indf1	equ	0xFE7
 22727                           postdec1	equ	0xFE5
 22728                           fsr1h	equ	0xFE2
 22729                           fsr1l	equ	0xFE1
 22730                           indf2	equ	0xFDF
 22731                           postinc2	equ	0xFDE
 22732                           postdec2	equ	0xFDD
 22733                           plusw2	equ	0xFDB
 22734                           fsr2h	equ	0xFDA
 22735                           fsr2l	equ	0xFD9
 22736                           status	equ	0xFD8
 22737                           
 22738 ;; *************** function _SPI_DCS *****************
 22739 ;; Defined at:
 22740 ;;		line 219 in file "Library/SPI.c"
 22741 ;; Parameters:    Size  Location     Type
 22742 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22743 ;;		 -> SPI1(11), SPI2(11), 
 22744 ;; Auto vars:     Size  Location     Type
 22745 ;;		None
 22746 ;; Return value:  Size  Location     Type
 22747 ;;                  1    wreg      void 
 22748 ;; Registers used:
 22749 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22750 ;; Tracked objects:
 22751 ;;		On entry : 0/0
 22752 ;;		On exit  : 0/0
 22753 ;;		Unchanged: 0/0
 22754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22759 ;;Total ram usage:        2 bytes
 22760 ;; Hardware stack levels used:    1
 22761 ;; Hardware stack levels required when called:    7
 22762 ;; This function calls:
 22763 ;;		Nothing
 22764 ;; This function is called by:
 22765 ;;		_SPI_Init
 22766 ;; This function uses a non-reentrant model
 22767 ;;
 22768                           
 22769                           	psect	text104
 22770  0167DE                     __ptext104:
 22771                           	opt stack 0
 22772  0167DE                     _SPI_DCS:
 22773                           	opt stack 19
 22774                           
 22775                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;incstack = 0
 22779  0167DE  0100               	movlb	0	; () banked
 22780  0167E0  EE20 F002          	lfsr	2,2
 22781  0167E4  51B5               	movf	SPI_DCS@pInput& (0+255),w,b
 22782  0167E6  26D9               	addwf	fsr2l,f,c
 22783  0167E8  51B6               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 22784  0167EA  22DA               	addwfc	fsr2h,f,c
 22785  0167EC  50DF               	movf	indf2,w,c
 22786  0167EE  A4D8               	btfss	status,2,c
 22787  0167F0  D007               	goto	l673
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 22791  0167F2  C0A4  FFD9         	movff	_PortC+4,fsr2l
 22792  0167F6  C0A5  FFDA         	movff	_PortC+5,fsr2h
 22793  0167FA  0100               	movlb	0	; () banked
 22794  0167FC  84DF               	bsf	indf2,2,c
 22795  0167FE  0012               	return	
 22796  016800                     l673:
 22797                           
 22798                           ; BSR set to: 0
 22799                           ;SPI.c: 223: else
 22800                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 22801                           
 22802                           ; BSR set to: 0
 22803  016800  C09A  FFD9         	movff	_PortD+4,fsr2l
 22804  016804  C09B  FFDA         	movff	_PortD+5,fsr2h
 22805  016808  0100               	movlb	0	; () banked
 22806  01680A  8EDF               	bsf	indf2,7,c
 22807  01680C  0012               	return	
 22808  01680E                     __end_of_SPI_DCS:
 22809                           	opt stack 0
 22810                           tosu	equ	0xFFF
 22811                           tosh	equ	0xFFE
 22812                           tosl	equ	0xFFD
 22813                           pclath	equ	0xFFA
 22814                           tblptru	equ	0xFF8
 22815                           tblptrh	equ	0xFF7
 22816                           tblptrl	equ	0xFF6
 22817                           tablat	equ	0xFF5
 22818                           prodh	equ	0xFF4
 22819                           prodl	equ	0xFF3
 22820                           intcon	equ	0xFF2
 22821                           postinc0	equ	0xFEE
 22822                           wreg	equ	0xFE8
 22823                           indf1	equ	0xFE7
 22824                           postdec1	equ	0xFE5
 22825                           fsr1h	equ	0xFE2
 22826                           fsr1l	equ	0xFE1
 22827                           indf2	equ	0xFDF
 22828                           postinc2	equ	0xFDE
 22829                           postdec2	equ	0xFDD
 22830                           plusw2	equ	0xFDB
 22831                           fsr2h	equ	0xFDA
 22832                           fsr2l	equ	0xFD9
 22833                           status	equ	0xFD8
 22834                           
 22835 ;; *************** function _Button_Init *****************
 22836 ;; Defined at:
 22837 ;;		line 18 in file "Library/Button.c"
 22838 ;; Parameters:    Size  Location     Type
 22839 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 22840 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 22841 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 22842 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 22843 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 22844 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 22845 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 22846 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 22847 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 22848 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 22849 ;; Auto vars:     Size  Location     Type
 22850 ;;		None
 22851 ;; Return value:  Size  Location     Type
 22852 ;;                  1    wreg      void 
 22853 ;; Registers used:
 22854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22855 ;; Tracked objects:
 22856 ;;		On entry : 0/0
 22857 ;;		On exit  : 0/0
 22858 ;;		Unchanged: 0/0
 22859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22860 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22863 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;Total ram usage:       13 bytes
 22865 ;; Hardware stack levels used:    1
 22866 ;; Hardware stack levels required when called:   15
 22867 ;; This function calls:
 22868 ;;		_HMI_InitButtons
 22869 ;;		_MXK_InitDIPSwitch
 22870 ;;		_MXK_InitTestButton
 22871 ;; This function is called by:
 22872 ;;		_HMI_Init
 22873 ;;		_FunctInitButton
 22874 ;; This function uses a non-reentrant model
 22875 ;;
 22876                           
 22877                           	psect	text105
 22878  014340                     __ptext105:
 22879                           	opt stack 0
 22880  014340                     _Button_Init:
 22881                           	opt stack 13
 22882                           
 22883                           ;Button.c: 21: if(pInput==(void*)0)
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;incstack = 0
 22887  014340  0101               	movlb	1	; () banked
 22888  014342  5100               	movf	Button_Init@pInput& (0+255),w,b
 22889  014344  0101               	movlb	1	; () banked
 22890  014346  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 22891  014348  B4D8               	btfsc	status,2,c
 22892  01434A  0012               	return	
 22893                           
 22894                           ; BSR set to: 1
 22895                           ;Button.c: 23: if(pInitIO==(void*)0)
 22896                           
 22897                           ; BSR set to: 1
 22898                           
 22899                           ; BSR set to: 1
 22900                           ;Button.c: 22: return;
 22901  01434C  0101               	movlb	1	; () banked
 22902  01434E  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22903  014350  0101               	movlb	1	; () banked
 22904  014352  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 22905  014354  0101               	movlb	1	; () banked
 22906  014356  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 22907  014358  B4D8               	btfsc	status,2,c
 22908  01435A  0012               	return	
 22909                           
 22910                           ; BSR set to: 1
 22911                           ;Button.c: 25: if(pGetState==(void*)0)
 22912                           
 22913                           ; BSR set to: 1
 22914                           
 22915                           ; BSR set to: 1
 22916                           ;Button.c: 24: return;
 22917  01435C  0101               	movlb	1	; () banked
 22918  01435E  5107               	movf	Button_Init@pGetState& (0+255),w,b
 22919  014360  0101               	movlb	1	; () banked
 22920  014362  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 22921  014364  0101               	movlb	1	; () banked
 22922  014366  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 22923  014368  B4D8               	btfsc	status,2,c
 22924  01436A  0012               	return	
 22925                           
 22926                           ; BSR set to: 1
 22927                           ;Button.c: 27: if(pFunction==(void*)0)
 22928                           
 22929                           ; BSR set to: 1
 22930                           
 22931                           ; BSR set to: 1
 22932                           ;Button.c: 26: return;
 22933  01436C  0101               	movlb	1	; () banked
 22934  01436E  510A               	movf	Button_Init@pFunction& (0+255),w,b
 22935  014370  0101               	movlb	1	; () banked
 22936  014372  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 22937  014374  0101               	movlb	1	; () banked
 22938  014376  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 22939  014378  B4D8               	btfsc	status,2,c
 22940  01437A  0012               	return	
 22941                           
 22942                           ; BSR set to: 1
 22943                           ;Button.c: 30: if(pThreshold == 0)
 22944                           
 22945                           ; BSR set to: 1
 22946                           
 22947                           ; BSR set to: 1
 22948                           ;Button.c: 28: return;
 22949  01437C  0101               	movlb	1	; () banked
 22950  01437E  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 22951  014380  0101               	movlb	1	; () banked
 22952  014382  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 22953  014384  A4D8               	btfss	status,2,c
 22954  014386  D005               	goto	l8
 22955                           
 22956                           ; BSR set to: 1
 22957                           ;Button.c: 31: pThreshold = 1;
 22958  014388  0E00               	movlw	0
 22959  01438A  0101               	movlb	1	; () banked
 22960  01438C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22961  01438E  0E01               	movlw	1
 22962  014390  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 22963  014392                     l8:
 22964                           
 22965                           ; BSR set to: 1
 22966                           ;Button.c: 34: pInput->mState = 0;
 22967                           
 22968                           ; BSR set to: 1
 22969  014392  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 22970  014396  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 22971  01439A  0E00               	movlw	0
 22972  01439C  6EDF               	movwf	indf2,c
 22973                           
 22974                           ; BSR set to: 1
 22975                           ;Button.c: 35: pInput->mCount = 0;
 22976  01439E  0101               	movlb	1	; () banked
 22977  0143A0  EE20 F001          	lfsr	2,1
 22978  0143A4  5100               	movf	Button_Init@pInput& (0+255),w,b
 22979  0143A6  26D9               	addwf	fsr2l,f,c
 22980  0143A8  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22981  0143AA  22DA               	addwfc	fsr2h,f,c
 22982  0143AC  0E00               	movlw	0
 22983  0143AE  6EDF               	movwf	indf2,c
 22984                           
 22985                           ; BSR set to: 1
 22986                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 22987  0143B0  0101               	movlb	1	; () banked
 22988  0143B2  EE20 F002          	lfsr	2,2
 22989  0143B6  5100               	movf	Button_Init@pInput& (0+255),w,b
 22990  0143B8  26D9               	addwf	fsr2l,f,c
 22991  0143BA  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22992  0143BC  22DA               	addwfc	fsr2h,f,c
 22993  0143BE  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 22994  0143C2  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 22995                           
 22996                           ; BSR set to: 1
 22997                           ;Button.c: 37: pInput->mFunction = pFunction;
 22998  0143C6  0101               	movlb	1	; () banked
 22999  0143C8  EE20 F004          	lfsr	2,4
 23000  0143CC  5100               	movf	Button_Init@pInput& (0+255),w,b
 23001  0143CE  26D9               	addwf	fsr2l,f,c
 23002  0143D0  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23003  0143D2  22DA               	addwfc	fsr2h,f,c
 23004  0143D4  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 23005  0143D8  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 23006  0143DC  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 23007                           
 23008                           ; BSR set to: 1
 23009                           ;Button.c: 38: pInput->mGetState = pGetState;
 23010  0143E0  0101               	movlb	1	; () banked
 23011  0143E2  EE20 F007          	lfsr	2,7
 23012  0143E6  5100               	movf	Button_Init@pInput& (0+255),w,b
 23013  0143E8  26D9               	addwf	fsr2l,f,c
 23014  0143EA  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23015  0143EC  22DA               	addwfc	fsr2h,f,c
 23016  0143EE  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 23017  0143F2  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 23018  0143F6  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 23019                           
 23020                           ; BSR set to: 1
 23021                           ;Button.c: 41: pInitIO();
 23022  0143FA  D801               	call	u11208
 23023  0143FC  0012               	return	
 23024  0143FE                     u11208:
 23025  0143FE  0005               	push	
 23026  014400  6EFA               	movwf	pclath,c
 23027  014402  0101               	movlb	1	; () banked
 23028  014404  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23029  014406  6EFD               	movwf	tosl,c
 23030  014408  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 23031  01440A  6EFE               	movwf	tosh,c
 23032  01440C  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 23033  01440E  6EFF               	movwf	tosu,c
 23034  014410  50FA               	movf	pclath,w,c
 23035  014412  0012               	return		;indir
 23036  014414                     __end_of_Button_Init:
 23037                           	opt stack 0
 23038                           tosu	equ	0xFFF
 23039                           tosh	equ	0xFFE
 23040                           tosl	equ	0xFFD
 23041                           pclath	equ	0xFFA
 23042                           tblptru	equ	0xFF8
 23043                           tblptrh	equ	0xFF7
 23044                           tblptrl	equ	0xFF6
 23045                           tablat	equ	0xFF5
 23046                           prodh	equ	0xFF4
 23047                           prodl	equ	0xFF3
 23048                           intcon	equ	0xFF2
 23049                           postinc0	equ	0xFEE
 23050                           wreg	equ	0xFE8
 23051                           indf1	equ	0xFE7
 23052                           postdec1	equ	0xFE5
 23053                           fsr1h	equ	0xFE2
 23054                           fsr1l	equ	0xFE1
 23055                           indf2	equ	0xFDF
 23056                           postinc2	equ	0xFDE
 23057                           postdec2	equ	0xFDD
 23058                           plusw2	equ	0xFDB
 23059                           fsr2h	equ	0xFDA
 23060                           fsr2l	equ	0xFD9
 23061                           status	equ	0xFD8
 23062                           
 23063 ;; *************** function _MXK_InitDIPSwitch *****************
 23064 ;; Defined at:
 23065 ;;		line 20 in file "Library/MXK.c"
 23066 ;; Parameters:    Size  Location     Type
 23067 ;;		None
 23068 ;; Auto vars:     Size  Location     Type
 23069 ;;		None
 23070 ;; Return value:  Size  Location     Type
 23071 ;;                  1    wreg      void 
 23072 ;; Registers used:
 23073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23074 ;; Tracked objects:
 23075 ;;		On entry : 0/0
 23076 ;;		On exit  : 0/0
 23077 ;;		Unchanged: 0/0
 23078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23083 ;;Total ram usage:        0 bytes
 23084 ;; Hardware stack levels used:    1
 23085 ;; Hardware stack levels required when called:   14
 23086 ;; This function calls:
 23087 ;;		_Port_SetQuadType
 23088 ;; This function is called by:
 23089 ;;		_FunctInitButton
 23090 ;;		_Button_Init
 23091 ;; This function uses a non-reentrant model
 23092 ;;
 23093                           
 23094                           	psect	text106
 23095  016A88                     __ptext106:
 23096                           	opt stack 0
 23097  016A88                     _MXK_InitDIPSwitch:
 23098                           	opt stack 13
 23099                           
 23100                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 23101                           
 23102                           ;incstack = 0
 23103  016A88  0E96               	movlw	low _PortD
 23104  016A8A  0100               	movlb	0	; () banked
 23105  016A8C  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
 23106  016A8E  0E00               	movlw	high _PortD
 23107  016A90  0100               	movlb	0	; () banked
 23108  016A92  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 23109  016A94  0E00               	movlw	0
 23110  016A96  0100               	movlb	0	; () banked
 23111  016A98  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
 23112  016A9A  0E00               	movlw	0
 23113  016A9C  0100               	movlb	0	; () banked
 23114  016A9E  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
 23115  016AA0  EC12  F08F         	call	_Port_SetQuadType	;wreg free
 23116  016AA4  0012               	return		;funcret
 23117  016AA6                     __end_of_MXK_InitDIPSwitch:
 23118                           	opt stack 0
 23119                           tosu	equ	0xFFF
 23120                           tosh	equ	0xFFE
 23121                           tosl	equ	0xFFD
 23122                           pclath	equ	0xFFA
 23123                           tblptru	equ	0xFF8
 23124                           tblptrh	equ	0xFF7
 23125                           tblptrl	equ	0xFF6
 23126                           tablat	equ	0xFF5
 23127                           prodh	equ	0xFF4
 23128                           prodl	equ	0xFF3
 23129                           intcon	equ	0xFF2
 23130                           postinc0	equ	0xFEE
 23131                           wreg	equ	0xFE8
 23132                           indf1	equ	0xFE7
 23133                           postdec1	equ	0xFE5
 23134                           fsr1h	equ	0xFE2
 23135                           fsr1l	equ	0xFE1
 23136                           indf2	equ	0xFDF
 23137                           postinc2	equ	0xFDE
 23138                           postdec2	equ	0xFDD
 23139                           plusw2	equ	0xFDB
 23140                           fsr2h	equ	0xFDA
 23141                           fsr2l	equ	0xFD9
 23142                           status	equ	0xFD8
 23143                           
 23144 ;; *************** function _HMI_InitButtons *****************
 23145 ;; Defined at:
 23146 ;;		line 21 in file "HMI.c"
 23147 ;; Parameters:    Size  Location     Type
 23148 ;;		None
 23149 ;; Auto vars:     Size  Location     Type
 23150 ;;		None
 23151 ;; Return value:  Size  Location     Type
 23152 ;;                  1    wreg      void 
 23153 ;; Registers used:
 23154 ;;		wreg, status,2
 23155 ;; Tracked objects:
 23156 ;;		On entry : 0/0
 23157 ;;		On exit  : 0/0
 23158 ;;		Unchanged: 0/0
 23159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23164 ;;Total ram usage:        0 bytes
 23165 ;; Hardware stack levels used:    1
 23166 ;; Hardware stack levels required when called:    7
 23167 ;; This function calls:
 23168 ;;		Nothing
 23169 ;; This function is called by:
 23170 ;;		_HMI_Init
 23171 ;;		_Button_Init
 23172 ;; This function uses a non-reentrant model
 23173 ;;
 23174                           
 23175                           	psect	text107
 23176  016D38                     __ptext107:
 23177                           	opt stack 0
 23178  016D38                     _HMI_InitButtons:
 23179                           	opt stack 20
 23180                           
 23181                           ;HMI.c: 23: TRISE = 0xFC;
 23182                           
 23183                           ;incstack = 0
 23184  016D38  0EFC               	movlw	252
 23185  016D3A  6E96               	movwf	3990,c	;volatile
 23186  016D3C  0012               	return		;funcret
 23187  016D3E                     __end_of_HMI_InitButtons:
 23188                           	opt stack 0
 23189                           tosu	equ	0xFFF
 23190                           tosh	equ	0xFFE
 23191                           tosl	equ	0xFFD
 23192                           pclath	equ	0xFFA
 23193                           tblptru	equ	0xFF8
 23194                           tblptrh	equ	0xFF7
 23195                           tblptrl	equ	0xFF6
 23196                           tablat	equ	0xFF5
 23197                           prodh	equ	0xFF4
 23198                           prodl	equ	0xFF3
 23199                           intcon	equ	0xFF2
 23200                           postinc0	equ	0xFEE
 23201                           wreg	equ	0xFE8
 23202                           indf1	equ	0xFE7
 23203                           postdec1	equ	0xFE5
 23204                           fsr1h	equ	0xFE2
 23205                           fsr1l	equ	0xFE1
 23206                           indf2	equ	0xFDF
 23207                           postinc2	equ	0xFDE
 23208                           postdec2	equ	0xFDD
 23209                           plusw2	equ	0xFDB
 23210                           fsr2h	equ	0xFDA
 23211                           fsr2l	equ	0xFD9
 23212                           status	equ	0xFD8
 23213                           
 23214 ;; *************** function _MXK_InitTestButton *****************
 23215 ;; Defined at:
 23216 ;;		line 10 in file "Library/MXK.c"
 23217 ;; Parameters:    Size  Location     Type
 23218 ;;		None
 23219 ;; Auto vars:     Size  Location     Type
 23220 ;;		None
 23221 ;; Return value:  Size  Location     Type
 23222 ;;                  1    wreg      void 
 23223 ;; Registers used:
 23224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23225 ;; Tracked objects:
 23226 ;;		On entry : 0/0
 23227 ;;		On exit  : 0/0
 23228 ;;		Unchanged: 0/0
 23229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23234 ;;Total ram usage:        0 bytes
 23235 ;; Hardware stack levels used:    1
 23236 ;; Hardware stack levels required when called:   12
 23237 ;; This function calls:
 23238 ;;		_Port_SetPinType
 23239 ;; This function is called by:
 23240 ;;		_FunctInitButton
 23241 ;;		_Button_Init
 23242 ;; This function uses a non-reentrant model
 23243 ;;
 23244                           
 23245                           	psect	text108
 23246  016AA6                     __ptext108:
 23247                           	opt stack 0
 23248  016AA6                     _MXK_InitTestButton:
 23249                           	opt stack 15
 23250                           
 23251                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 23252                           
 23253                           ;incstack = 0
 23254  016AA6  0EB6               	movlw	low _PortB
 23255  016AA8  0100               	movlb	0	; () banked
 23256  016AAA  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 23257  016AAC  0E03               	movlw	high _PortB
 23258  016AAE  0100               	movlb	0	; () banked
 23259  016AB0  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23260  016AB2  0E04               	movlw	4
 23261  016AB4  0100               	movlb	0	; () banked
 23262  016AB6  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 23263  016AB8  0E00               	movlw	0
 23264  016ABA  0100               	movlb	0	; () banked
 23265  016ABC  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 23266  016ABE  EC1F  F095         	call	_Port_SetPinType	;wreg free
 23267  016AC2  0012               	return		;funcret
 23268  016AC4                     __end_of_MXK_InitTestButton:
 23269                           	opt stack 0
 23270                           tosu	equ	0xFFF
 23271                           tosh	equ	0xFFE
 23272                           tosl	equ	0xFFD
 23273                           pclath	equ	0xFFA
 23274                           tblptru	equ	0xFF8
 23275                           tblptrh	equ	0xFF7
 23276                           tblptrl	equ	0xFF6
 23277                           tablat	equ	0xFF5
 23278                           prodh	equ	0xFF4
 23279                           prodl	equ	0xFF3
 23280                           intcon	equ	0xFF2
 23281                           postinc0	equ	0xFEE
 23282                           wreg	equ	0xFE8
 23283                           indf1	equ	0xFE7
 23284                           postdec1	equ	0xFE5
 23285                           fsr1h	equ	0xFE2
 23286                           fsr1l	equ	0xFE1
 23287                           indf2	equ	0xFDF
 23288                           postinc2	equ	0xFDE
 23289                           postdec2	equ	0xFDD
 23290                           plusw2	equ	0xFDB
 23291                           fsr2h	equ	0xFDA
 23292                           fsr2l	equ	0xFD9
 23293                           status	equ	0xFD8
 23294                           
 23295 ;; *************** function _Port_SetPinType *****************
 23296 ;; Defined at:
 23297 ;;		line 189 in file "Library/Port.c"
 23298 ;; Parameters:    Size  Location     Type
 23299 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23300 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23301 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23302 ;;  pPin            1   40[BANK0 ] enum E6750
 23303 ;;  pType           1   41[BANK0 ] enum E6795
 23304 ;; Auto vars:     Size  Location     Type
 23305 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 23306 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 23307 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 23308 ;;  Output          1   42[BANK0 ] enum E6475
 23309 ;; Return value:  Size  Location     Type
 23310 ;;                  1    wreg      enum E6475
 23311 ;; Registers used:
 23312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23313 ;; Tracked objects:
 23314 ;;		On entry : 0/0
 23315 ;;		On exit  : 0/0
 23316 ;;		Unchanged: 0/0
 23317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23319 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23321 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23322 ;;Total ram usage:        7 bytes
 23323 ;; Hardware stack levels used:    1
 23324 ;; Hardware stack levels required when called:   11
 23325 ;; This function calls:
 23326 ;;		_Byte_SetBit
 23327 ;;		_PortProperty_Valid
 23328 ;;		_Word_SetPair
 23329 ;; This function is called by:
 23330 ;;		_Configure_GPIOs
 23331 ;;		_LED_Init
 23332 ;;		_Port_Init
 23333 ;;		_SPI_Init
 23334 ;;		_Motor_Init
 23335 ;;		_MXK_InitTestButton
 23336 ;;		_MXK_Init
 23337 ;;		_I2C_Init
 23338 ;; This function uses a non-reentrant model
 23339 ;;
 23340                           
 23341                           	psect	text109
 23342  012A3E                     __ptext109:
 23343                           	opt stack 0
 23344  012A3E                     _Port_SetPinType:
 23345                           	opt stack 17
 23346                           
 23347                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 23348                           
 23349                           ;incstack = 0
 23350  012A3E  C0DB  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 23351  012A42  C0DC  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 23352  012A46  CFDE F0E0          	movff	postinc2,Port_SetPinType@Props
 23353  012A4A  CFDD F0E1          	movff	postdec2,Port_SetPinType@Props+1
 23354                           
 23355                           ;Port.c: 192: ePinError Output = ePinErrorState;
 23356  012A4E  0E05               	movlw	5
 23357  012A50  0100               	movlb	0	; () banked
 23358  012A52  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 23359                           
 23360                           ;Port.c: 193: switch (pType)
 23361  012A54  D0B5               	goto	l412
 23362  012A56                     
 23363                           ; BSR set to: 0
 23364                           ;Port.c: 197: {
 23365                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23366                           
 23367                           ; BSR set to: 0
 23368  012A56  0100               	movlb	0	; () banked
 23369  012A58  EE20 F002          	lfsr	2,2
 23370  012A5C  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23371  012A5E  26D9               	addwf	fsr2l,f,c
 23372  012A60  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23373  012A62  22DA               	addwfc	fsr2h,f,c
 23374  012A64  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23375  012A68  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23376  012A6C  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23377  012A70  0E01               	movlw	1
 23378  012A72  0100               	movlb	0	; () banked
 23379  012A74  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23380  012A76  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23381                           
 23382                           ;Port.c: 203: break;
 23383  012A7A  D0B0               	goto	l414
 23384  012A7C                     
 23385                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 23386  012A7C  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23387  012A80  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23388  012A84  0E01               	movlw	1
 23389  012A86  0100               	movlb	0	; () banked
 23390  012A88  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23391  012A8A  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23392  012A8E  EC86  F0AB         	call	_PortProperty_Valid	;wreg free
 23393  012A92  0100               	movlb	0	; () banked
 23394  012A94  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 23395  012A96  0100               	movlb	0	; () banked
 23396  012A98  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 23397  012A9A  A4D8               	btfss	status,2,c
 23398  012A9C  0012               	return	
 23399                           
 23400                           ; BSR set to: 0
 23401                           ;Port.c: 208: {
 23402                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23403  012A9E  0100               	movlb	0	; () banked
 23404  012AA0  EE20 F002          	lfsr	2,2
 23405  012AA4  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23406  012AA6  26D9               	addwf	fsr2l,f,c
 23407  012AA8  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23408  012AAA  22DA               	addwfc	fsr2h,f,c
 23409  012AAC  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23410  012AB0  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23411  012AB4  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23412  012AB8  0E00               	movlw	0
 23413  012ABA  0100               	movlb	0	; () banked
 23414  012ABC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23415  012ABE  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23416                           
 23417                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23418  012AC2  0100               	movlb	0	; () banked
 23419  012AC4  EE20 F004          	lfsr	2,4
 23420  012AC8  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23421  012ACA  26D9               	addwf	fsr2l,f,c
 23422  012ACC  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23423  012ACE  22DA               	addwfc	fsr2h,f,c
 23424  012AD0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23425  012AD4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23426  012AD8  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23427  012ADC  0E00               	movlw	0
 23428  012ADE  0100               	movlb	0	; () banked
 23429  012AE0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23430  012AE2  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23431                           
 23432                           ;Port.c: 214: break;
 23433  012AE6  D07A               	goto	l414
 23434  012AE8                     
 23435                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 23436                           
 23437                           ;Port.c: 218: case eTypeOutputOpenSource:
 23438  012AE8  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23439  012AEC  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23440  012AF0  0E02               	movlw	2
 23441  012AF2  0100               	movlb	0	; () banked
 23442  012AF4  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23443  012AF6  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23444  012AFA  EC86  F0AB         	call	_PortProperty_Valid	;wreg free
 23445  012AFE  0100               	movlb	0	; () banked
 23446  012B00  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 23447  012B02  0100               	movlb	0	; () banked
 23448  012B04  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 23449  012B06  A4D8               	btfss	status,2,c
 23450  012B08  0012               	return	
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;Port.c: 220: {
 23454                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23455  012B0A  0100               	movlb	0	; () banked
 23456  012B0C  EE20 F002          	lfsr	2,2
 23457  012B10  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23458  012B12  26D9               	addwf	fsr2l,f,c
 23459  012B14  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23460  012B16  22DA               	addwfc	fsr2h,f,c
 23461  012B18  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23462  012B1C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23463  012B20  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23464  012B24  0E01               	movlw	1
 23465  012B26  0100               	movlb	0	; () banked
 23466  012B28  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23467  012B2A  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23468                           
 23469                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 23470  012B2E  0100               	movlb	0	; () banked
 23471  012B30  EE20 F004          	lfsr	2,4
 23472  012B34  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23473  012B36  26D9               	addwf	fsr2l,f,c
 23474  012B38  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23475  012B3A  22DA               	addwfc	fsr2h,f,c
 23476  012B3C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23477  012B40  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23478  012B44  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23479  012B48  0E01               	movlw	1
 23480  012B4A  0100               	movlb	0	; () banked
 23481  012B4C  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23482  012B4E  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23483                           
 23484                           ;Port.c: 226: break;
 23485  012B52  D044               	goto	l414
 23486  012B54                     
 23487                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 23488                           
 23489                           ;Port.c: 230: case eTypeOutputPushPull:
 23490  012B54  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23491  012B58  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23492  012B5C  0E00               	movlw	0
 23493  012B5E  0100               	movlb	0	; () banked
 23494  012B60  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23495  012B62  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23496  012B66  EC86  F0AB         	call	_PortProperty_Valid	;wreg free
 23497  012B6A  0100               	movlb	0	; () banked
 23498  012B6C  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 23499  012B6E  0100               	movlb	0	; () banked
 23500  012B70  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 23501  012B72  A4D8               	btfss	status,2,c
 23502  012B74  0012               	return	
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;Port.c: 232: {
 23506                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23507  012B76  0100               	movlb	0	; () banked
 23508  012B78  EE20 F002          	lfsr	2,2
 23509  012B7C  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23510  012B7E  26D9               	addwf	fsr2l,f,c
 23511  012B80  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23512  012B82  22DA               	addwfc	fsr2h,f,c
 23513  012B84  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23514  012B88  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23515  012B8C  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23516  012B90  0E00               	movlw	0
 23517  012B92  0100               	movlb	0	; () banked
 23518  012B94  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23519  012B96  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23520                           
 23521                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23522  012B9A  0100               	movlb	0	; () banked
 23523  012B9C  EE20 F004          	lfsr	2,4
 23524  012BA0  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 23525  012BA2  26D9               	addwf	fsr2l,f,c
 23526  012BA4  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23527  012BA6  22DA               	addwfc	fsr2h,f,c
 23528  012BA8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 23529  012BAC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 23530  012BB0  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23531  012BB4  0E00               	movlw	0
 23532  012BB6  0100               	movlb	0	; () banked
 23533  012BB8  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 23534  012BBA  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 23535                           
 23536                           ;Port.c: 239: }
 23537                           
 23538                           ;Port.c: 238: break;
 23539  012BBE  D00E               	goto	l414
 23540  012BC0                     l412:
 23541  012BC0  0100               	movlb	0	; () banked
 23542  012BC2  51DE               	movf	Port_SetPinType@pType& (0+255),w,b
 23543                           
 23544                           ; Switch size 1, requested type "space"
 23545                           ; Number of cases is 4, Range of values is 0 to 3
 23546                           ; switch strategies available:
 23547                           ; Name         Instructions Cycles
 23548                           ; simple_byte           13     7 (average)
 23549                           ;	Chosen strategy is simple_byte
 23550  012BC4  0A00               	xorlw	0	; case 0
 23551  012BC6  B4D8               	btfsc	status,2,c
 23552  012BC8  D746               	goto	l413
 23553  012BCA  0A01               	xorlw	1	; case 1
 23554  012BCC  B4D8               	btfsc	status,2,c
 23555  012BCE  D756               	goto	l415
 23556  012BD0  0A03               	xorlw	3	; case 2
 23557  012BD2  B4D8               	btfsc	status,2,c
 23558  012BD4  D789               	goto	l417
 23559  012BD6  0A01               	xorlw	1	; case 3
 23560  012BD8  B4D8               	btfsc	status,2,c
 23561  012BDA  D7BC               	goto	l421
 23562  012BDC                     l414:
 23563                           
 23564                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 23565                           
 23566                           ; BSR set to: 0
 23567  012BDC  0E08               	movlw	8
 23568  012BDE  0100               	movlb	0	; () banked
 23569  012BE0  25DB               	addwf	Port_SetPinType@pInput& (0+255),w,b
 23570  012BE2  0100               	movlb	0	; () banked
 23571  012BE4  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 23572  012BE6  0E00               	movlw	0
 23573  012BE8  0100               	movlb	0	; () banked
 23574  012BEA  21DC               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 23575  012BEC  0100               	movlb	0	; () banked
 23576  012BEE  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23577  012BF0  C0DD  F0C6         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 23578  012BF4  C0DE  F0C7         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 23579  012BF8  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 23580  012BFC  0012               	return	
 23581  012BFE                     __end_of_Port_SetPinType:
 23582                           	opt stack 0
 23583                           tosu	equ	0xFFF
 23584                           tosh	equ	0xFFE
 23585                           tosl	equ	0xFFD
 23586                           pclath	equ	0xFFA
 23587                           tblptru	equ	0xFF8
 23588                           tblptrh	equ	0xFF7
 23589                           tblptrl	equ	0xFF6
 23590                           tablat	equ	0xFF5
 23591                           prodh	equ	0xFF4
 23592                           prodl	equ	0xFF3
 23593                           intcon	equ	0xFF2
 23594                           postinc0	equ	0xFEE
 23595                           wreg	equ	0xFE8
 23596                           indf1	equ	0xFE7
 23597                           postdec1	equ	0xFE5
 23598                           fsr1h	equ	0xFE2
 23599                           fsr1l	equ	0xFE1
 23600                           indf2	equ	0xFDF
 23601                           postinc2	equ	0xFDE
 23602                           postdec2	equ	0xFDD
 23603                           plusw2	equ	0xFDB
 23604                           fsr2h	equ	0xFDA
 23605                           fsr2l	equ	0xFD9
 23606                           status	equ	0xFD8
 23607                           
 23608 ;; *************** function _Port_SetQuadType *****************
 23609 ;; Defined at:
 23610 ;;		line 399 in file "Library/Port.c"
 23611 ;; Parameters:    Size  Location     Type
 23612 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 23613 ;;		 -> PortB(10), PortD(10), 
 23614 ;;  pQuad           1   56[BANK0 ] enum E6776
 23615 ;;  pType           1   57[BANK0 ] enum E6795
 23616 ;; Auto vars:     Size  Location     Type
 23617 ;;  Output          1   58[BANK0 ] enum E6475
 23618 ;; Return value:  Size  Location     Type
 23619 ;;                  1    wreg      enum E6475
 23620 ;; Registers used:
 23621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23622 ;; Tracked objects:
 23623 ;;		On entry : 0/0
 23624 ;;		On exit  : 0/0
 23625 ;;		Unchanged: 0/0
 23626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23630 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23631 ;;Total ram usage:        5 bytes
 23632 ;; Hardware stack levels used:    1
 23633 ;; Hardware stack levels required when called:   13
 23634 ;; This function calls:
 23635 ;;		_Byte_SetQuad
 23636 ;;		_Port_CheckQuadType
 23637 ;;		_Word_SetPair
 23638 ;; This function is called by:
 23639 ;;		_MXK_InitDIPSwitch
 23640 ;;		_MXK_Init
 23641 ;; This function uses a non-reentrant model
 23642 ;;
 23643                           
 23644                           	psect	text110
 23645  011E24                     __ptext110:
 23646                           	opt stack 0
 23647  011E24                     _Port_SetQuadType:
 23648                           	opt stack 15
 23649                           
 23650                           ;Port.c: 401: ePinError Output = ePinErrorState;
 23651                           
 23652                           ;incstack = 0
 23653  011E24  0E05               	movlw	5
 23654  011E26  0100               	movlb	0	; () banked
 23655  011E28  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 23656                           
 23657                           ;Port.c: 403: switch (pType)
 23658  011E2A  D0C7               	goto	l476
 23659  011E2C                     
 23660                           ; BSR set to: 0
 23661                           ;Port.c: 407: {
 23662                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23663                           
 23664                           ; BSR set to: 0
 23665  011E2C  0100               	movlb	0	; () banked
 23666  011E2E  EE20 F002          	lfsr	2,2
 23667  011E32  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23668  011E34  26D9               	addwf	fsr2l,f,c
 23669  011E36  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23670  011E38  22DA               	addwfc	fsr2h,f,c
 23671  011E3A  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23672  011E3E  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23673  011E42  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23674  011E46  0E0F               	movlw	15
 23675  011E48  0100               	movlb	0	; () banked
 23676  011E4A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23677  011E4C  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23678                           
 23679                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23680  011E50  0100               	movlb	0	; () banked
 23681  011E52  EE20 F004          	lfsr	2,4
 23682  011E56  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23683  011E58  26D9               	addwf	fsr2l,f,c
 23684  011E5A  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23685  011E5C  22DA               	addwfc	fsr2h,f,c
 23686  011E5E  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23687  011E62  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23688  011E66  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23689  011E6A  0E00               	movlw	0
 23690  011E6C  0100               	movlb	0	; () banked
 23691  011E6E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23692  011E70  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23693                           
 23694                           ;Port.c: 413: }
 23695                           ;Port.c: 415: break;
 23696  011E74  D0B0               	goto	l478
 23697  011E76                     
 23698                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23699  011E76  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23700  011E7A  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23701  011E7E  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23702  011E82  0E03               	movlw	3
 23703  011E84  0100               	movlb	0	; () banked
 23704  011E86  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23705  011E88  ECCB  F0AF         	call	_Port_CheckQuadType	;wreg free
 23706  011E8C  0100               	movlb	0	; () banked
 23707  011E8E  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 23708  011E90  0100               	movlb	0	; () banked
 23709  011E92  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 23710  011E94  A4D8               	btfss	status,2,c
 23711  011E96  0012               	return	
 23712                           
 23713                           ; BSR set to: 0
 23714                           ;Port.c: 418: {
 23715                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23716  011E98  0100               	movlb	0	; () banked
 23717  011E9A  EE20 F002          	lfsr	2,2
 23718  011E9E  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23719  011EA0  26D9               	addwf	fsr2l,f,c
 23720  011EA2  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23721  011EA4  22DA               	addwfc	fsr2h,f,c
 23722  011EA6  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23723  011EAA  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23724  011EAE  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23725  011EB2  0E00               	movlw	0
 23726  011EB4  0100               	movlb	0	; () banked
 23727  011EB6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23728  011EB8  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23729                           
 23730                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23731  011EBC  0100               	movlb	0	; () banked
 23732  011EBE  EE20 F004          	lfsr	2,4
 23733  011EC2  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23734  011EC4  26D9               	addwf	fsr2l,f,c
 23735  011EC6  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23736  011EC8  22DA               	addwfc	fsr2h,f,c
 23737  011ECA  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23738  011ECE  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23739  011ED2  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23740  011ED6  0E00               	movlw	0
 23741  011ED8  0100               	movlb	0	; () banked
 23742  011EDA  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23743  011EDC  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23744                           
 23745                           ;Port.c: 424: }
 23746  011EE0  D07A               	goto	l478
 23747  011EE2                     
 23748                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23749  011EE2  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23750  011EE6  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23751  011EEA  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23752  011EEE  0E03               	movlw	3
 23753  011EF0  0100               	movlb	0	; () banked
 23754  011EF2  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23755  011EF4  ECCB  F0AF         	call	_Port_CheckQuadType	;wreg free
 23756  011EF8  0100               	movlb	0	; () banked
 23757  011EFA  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 23758  011EFC  0100               	movlb	0	; () banked
 23759  011EFE  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 23760  011F00  A4D8               	btfss	status,2,c
 23761  011F02  0012               	return	
 23762                           
 23763                           ; BSR set to: 0
 23764                           ;Port.c: 429: {
 23765                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23766  011F04  0100               	movlb	0	; () banked
 23767  011F06  EE20 F002          	lfsr	2,2
 23768  011F0A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23769  011F0C  26D9               	addwf	fsr2l,f,c
 23770  011F0E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23771  011F10  22DA               	addwfc	fsr2h,f,c
 23772  011F12  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23773  011F16  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23774  011F1A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23775  011F1E  0E0F               	movlw	15
 23776  011F20  0100               	movlb	0	; () banked
 23777  011F22  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23778  011F24  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23779                           
 23780                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 23781  011F28  0100               	movlb	0	; () banked
 23782  011F2A  EE20 F004          	lfsr	2,4
 23783  011F2E  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23784  011F30  26D9               	addwf	fsr2l,f,c
 23785  011F32  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23786  011F34  22DA               	addwfc	fsr2h,f,c
 23787  011F36  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23788  011F3A  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23789  011F3E  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23790  011F42  0E0F               	movlw	15
 23791  011F44  0100               	movlb	0	; () banked
 23792  011F46  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23793  011F48  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23794                           
 23795                           ;Port.c: 435: }
 23796  011F4C  D044               	goto	l478
 23797  011F4E                     
 23798                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23799  011F4E  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23800  011F52  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23801  011F56  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23802  011F5A  0E03               	movlw	3
 23803  011F5C  0100               	movlb	0	; () banked
 23804  011F5E  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23805  011F60  ECCB  F0AF         	call	_Port_CheckQuadType	;wreg free
 23806  011F64  0100               	movlb	0	; () banked
 23807  011F66  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 23808  011F68  0100               	movlb	0	; () banked
 23809  011F6A  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 23810  011F6C  A4D8               	btfss	status,2,c
 23811  011F6E  0012               	return	
 23812                           
 23813                           ; BSR set to: 0
 23814                           ;Port.c: 440: {
 23815                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23816  011F70  0100               	movlb	0	; () banked
 23817  011F72  EE20 F002          	lfsr	2,2
 23818  011F76  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23819  011F78  26D9               	addwf	fsr2l,f,c
 23820  011F7A  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23821  011F7C  22DA               	addwfc	fsr2h,f,c
 23822  011F7E  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23823  011F82  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23824  011F86  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23825  011F8A  0E00               	movlw	0
 23826  011F8C  0100               	movlb	0	; () banked
 23827  011F8E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23828  011F90  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23829                           
 23830                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23831  011F94  0100               	movlb	0	; () banked
 23832  011F96  EE20 F004          	lfsr	2,4
 23833  011F9A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23834  011F9C  26D9               	addwf	fsr2l,f,c
 23835  011F9E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23836  011FA0  22DA               	addwfc	fsr2h,f,c
 23837  011FA2  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 23838  011FA6  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 23839  011FAA  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23840  011FAE  0E00               	movlw	0
 23841  011FB0  0100               	movlb	0	; () banked
 23842  011FB2  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 23843  011FB4  ECD8  F0B4         	call	_Byte_SetQuad	;wreg free
 23844                           
 23845                           ;Port.c: 446: }
 23846  011FB8  D00E               	goto	l478
 23847  011FBA                     l476:
 23848  011FBA  0100               	movlb	0	; () banked
 23849  011FBC  51EE               	movf	Port_SetQuadType@pType& (0+255),w,b
 23850                           
 23851                           ; Switch size 1, requested type "space"
 23852                           ; Number of cases is 4, Range of values is 0 to 3
 23853                           ; switch strategies available:
 23854                           ; Name         Instructions Cycles
 23855                           ; simple_byte           13     7 (average)
 23856                           ;	Chosen strategy is simple_byte
 23857  011FBE  0A00               	xorlw	0	; case 0
 23858  011FC0  B4D8               	btfsc	status,2,c
 23859  011FC2  D734               	goto	l477
 23860  011FC4  0A01               	xorlw	1	; case 1
 23861  011FC6  B4D8               	btfsc	status,2,c
 23862  011FC8  D756               	goto	l479
 23863  011FCA  0A03               	xorlw	3	; case 2
 23864  011FCC  B4D8               	btfsc	status,2,c
 23865  011FCE  D789               	goto	l483
 23866  011FD0  0A01               	xorlw	1	; case 3
 23867  011FD2  B4D8               	btfsc	status,2,c
 23868  011FD4  D7BC               	goto	l486
 23869  011FD6                     l478:
 23870                           
 23871                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 23872                           
 23873                           ; BSR set to: 0
 23874  011FD6  0E08               	movlw	8
 23875  011FD8  0100               	movlb	0	; () banked
 23876  011FDA  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23877  011FDC  0100               	movlb	0	; () banked
 23878  011FDE  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 23879  011FE0  0E00               	movlw	0
 23880  011FE2  0100               	movlb	0	; () banked
 23881  011FE4  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23882  011FE6  0100               	movlb	0	; () banked
 23883  011FE8  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23884  011FEA  0100               	movlb	0	; () banked
 23885  011FEC  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23886  011FEE  0D04               	mullw	4
 23887  011FF0  CFF3 F0C6          	movff	prodl,Word_SetPair@pPair
 23888  011FF4  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23889  011FF8  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 23890                           
 23891                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 23892  011FFC  0E08               	movlw	8
 23893  011FFE  0100               	movlb	0	; () banked
 23894  012000  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23895  012002  0100               	movlb	0	; () banked
 23896  012004  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 23897  012006  0E00               	movlw	0
 23898  012008  0100               	movlb	0	; () banked
 23899  01200A  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23900  01200C  0100               	movlb	0	; () banked
 23901  01200E  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23902  012010  0100               	movlb	0	; () banked
 23903  012012  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23904  012014  0D04               	mullw	4
 23905  012016  28F3               	incf	prodl,w,c
 23906  012018  0100               	movlb	0	; () banked
 23907  01201A  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 23908  01201C  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23909  012020  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 23910                           
 23911                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 23912  012024  0E08               	movlw	8
 23913  012026  0100               	movlb	0	; () banked
 23914  012028  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23915  01202A  0100               	movlb	0	; () banked
 23916  01202C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 23917  01202E  0E00               	movlw	0
 23918  012030  0100               	movlb	0	; () banked
 23919  012032  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23920  012034  0100               	movlb	0	; () banked
 23921  012036  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23922  012038  0100               	movlb	0	; () banked
 23923  01203A  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23924  01203C  0D04               	mullw	4
 23925  01203E  50F3               	movf	prodl,w,c
 23926  012040  0F02               	addlw	2
 23927  012042  0100               	movlb	0	; () banked
 23928  012044  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 23929  012046  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23930  01204A  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 23931                           
 23932                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 23933  01204E  0E08               	movlw	8
 23934  012050  0100               	movlb	0	; () banked
 23935  012052  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23936  012054  0100               	movlb	0	; () banked
 23937  012056  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 23938  012058  0E00               	movlw	0
 23939  01205A  0100               	movlb	0	; () banked
 23940  01205C  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23941  01205E  0100               	movlb	0	; () banked
 23942  012060  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23943  012062  0100               	movlb	0	; () banked
 23944  012064  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23945  012066  0D04               	mullw	4
 23946  012068  50F3               	movf	prodl,w,c
 23947  01206A  0F03               	addlw	3
 23948  01206C  0100               	movlb	0	; () banked
 23949  01206E  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 23950  012070  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23951  012074  ECC8  F0B1         	call	_Word_SetPair	;wreg free
 23952  012078  0012               	return	
 23953  01207A                     __end_of_Port_SetQuadType:
 23954                           	opt stack 0
 23955                           tosu	equ	0xFFF
 23956                           tosh	equ	0xFFE
 23957                           tosl	equ	0xFFD
 23958                           pclath	equ	0xFFA
 23959                           tblptru	equ	0xFF8
 23960                           tblptrh	equ	0xFF7
 23961                           tblptrl	equ	0xFF6
 23962                           tablat	equ	0xFF5
 23963                           prodh	equ	0xFF4
 23964                           prodl	equ	0xFF3
 23965                           intcon	equ	0xFF2
 23966                           postinc0	equ	0xFEE
 23967                           wreg	equ	0xFE8
 23968                           indf1	equ	0xFE7
 23969                           postdec1	equ	0xFE5
 23970                           fsr1h	equ	0xFE2
 23971                           fsr1l	equ	0xFE1
 23972                           indf2	equ	0xFDF
 23973                           postinc2	equ	0xFDE
 23974                           postdec2	equ	0xFDD
 23975                           plusw2	equ	0xFDB
 23976                           fsr2h	equ	0xFDA
 23977                           fsr2l	equ	0xFD9
 23978                           status	equ	0xFD8
 23979                           
 23980 ;; *************** function _Word_SetPair *****************
 23981 ;; Defined at:
 23982 ;;		line 149 in file "Library/Types.c"
 23983 ;; Parameters:    Size  Location     Type
 23984 ;;  pInput          2   15[BANK0 ] PTR struct Word
 23985 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23986 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23987 ;;  pPair           1   17[BANK0 ] unsigned char 
 23988 ;;  pValue          1   18[BANK0 ] unsigned char 
 23989 ;; Auto vars:     Size  Location     Type
 23990 ;;		None
 23991 ;; Return value:  Size  Location     Type
 23992 ;;                  1    wreg      void 
 23993 ;; Registers used:
 23994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23995 ;; Tracked objects:
 23996 ;;		On entry : 0/0
 23997 ;;		On exit  : 0/0
 23998 ;;		Unchanged: 0/0
 23999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24003 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24004 ;;Total ram usage:        4 bytes
 24005 ;; Hardware stack levels used:    1
 24006 ;; Hardware stack levels required when called:    9
 24007 ;; This function calls:
 24008 ;;		_Byte_SetPair
 24009 ;; This function is called by:
 24010 ;;		_Port_SetPinType
 24011 ;;		_Port_SetQuadType
 24012 ;;		_Port_SetType
 24013 ;;		_Port_SetPairType
 24014 ;;		_PortProperty_Init
 24015 ;; This function uses a non-reentrant model
 24016 ;;
 24017                           
 24018                           	psect	text111
 24019  016390                     __ptext111:
 24020                           	opt stack 0
 24021  016390                     _Word_SetPair:
 24022                           	opt stack 18
 24023                           
 24024                           ;Types.c: 151: if (pPair >= 4)
 24025                           
 24026                           ;incstack = 0
 24027  016390  0E03               	movlw	3
 24028  016392  0100               	movlb	0	; () banked
 24029  016394  65C6               	cpfsgt	Word_SetPair@pPair& (0+255),b
 24030  016396  D014               	goto	l776
 24031                           
 24032                           ; BSR set to: 0
 24033                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 24034  016398  0E01               	movlw	1
 24035  01639A  0100               	movlb	0	; () banked
 24036  01639C  25C4               	addwf	Word_SetPair@pInput& (0+255),w,b
 24037  01639E  0100               	movlb	0	; () banked
 24038  0163A0  6FC0               	movwf	Byte_SetPair@pInput& (0+255),b
 24039  0163A2  0E00               	movlw	0
 24040  0163A4  0100               	movlb	0	; () banked
 24041  0163A6  21C5               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 24042  0163A8  0100               	movlb	0	; () banked
 24043  0163AA  6FC1               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 24044  0163AC  0100               	movlb	0	; () banked
 24045  0163AE  51C6               	movf	Word_SetPair@pPair& (0+255),w,b
 24046  0163B0  0FFC               	addlw	252
 24047  0163B2  0100               	movlb	0	; () banked
 24048  0163B4  6FC2               	movwf	Byte_SetPair@pPair& (0+255),b
 24049  0163B6  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24050  0163BA  ECC7  F0B4         	call	_Byte_SetPair	;wreg free
 24051  0163BE  0012               	return	
 24052  0163C0                     l776:
 24053                           
 24054                           ;Types.c: 153: else
 24055                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 24056  0163C0  C0C4  F0C0         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 24057  0163C4  C0C5  F0C1         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 24058  0163C8  C0C6  F0C2         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 24059  0163CC  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24060  0163D0  ECC7  F0B4         	call	_Byte_SetPair	;wreg free
 24061  0163D4  0012               	return	
 24062  0163D6                     __end_of_Word_SetPair:
 24063                           	opt stack 0
 24064                           tosu	equ	0xFFF
 24065                           tosh	equ	0xFFE
 24066                           tosl	equ	0xFFD
 24067                           pclath	equ	0xFFA
 24068                           tblptru	equ	0xFF8
 24069                           tblptrh	equ	0xFF7
 24070                           tblptrl	equ	0xFF6
 24071                           tablat	equ	0xFF5
 24072                           prodh	equ	0xFF4
 24073                           prodl	equ	0xFF3
 24074                           intcon	equ	0xFF2
 24075                           postinc0	equ	0xFEE
 24076                           wreg	equ	0xFE8
 24077                           indf1	equ	0xFE7
 24078                           postdec1	equ	0xFE5
 24079                           fsr1h	equ	0xFE2
 24080                           fsr1l	equ	0xFE1
 24081                           indf2	equ	0xFDF
 24082                           postinc2	equ	0xFDE
 24083                           postdec2	equ	0xFDD
 24084                           plusw2	equ	0xFDB
 24085                           fsr2h	equ	0xFDA
 24086                           fsr2l	equ	0xFD9
 24087                           status	equ	0xFD8
 24088                           
 24089 ;; *************** function _Byte_SetPair *****************
 24090 ;; Defined at:
 24091 ;;		line 83 in file "Library/Types.c"
 24092 ;; Parameters:    Size  Location     Type
 24093 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24094 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24095 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24096 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 24097 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 24098 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 24099 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 24100 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 24101 ;;		 -> NULL(0), 
 24102 ;;  pPair           1   13[BANK0 ] unsigned char 
 24103 ;;  pValue          1   14[BANK0 ] unsigned char 
 24104 ;; Auto vars:     Size  Location     Type
 24105 ;;		None
 24106 ;; Return value:  Size  Location     Type
 24107 ;;                  1    wreg      void 
 24108 ;; Registers used:
 24109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24110 ;; Tracked objects:
 24111 ;;		On entry : 0/0
 24112 ;;		On exit  : 0/0
 24113 ;;		Unchanged: 0/0
 24114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24115 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24118 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24119 ;;Total ram usage:        4 bytes
 24120 ;; Hardware stack levels used:    1
 24121 ;; Hardware stack levels required when called:    8
 24122 ;; This function calls:
 24123 ;;		_Byte_SetZone
 24124 ;; This function is called by:
 24125 ;;		_Word_SetPair
 24126 ;;		_Port_SetPairType
 24127 ;;		_Port_SetPair
 24128 ;; This function uses a non-reentrant model
 24129 ;;
 24130                           
 24131                           	psect	text112
 24132  01698E                     __ptext112:
 24133                           	opt stack 0
 24134  01698E                     _Byte_SetPair:
 24135                           	opt stack 18
 24136                           
 24137                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 24138                           
 24139                           ;incstack = 0
 24140  01698E  C0C0  F0B5         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 24141  016992  C0C1  F0B6         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 24142  016996  0E04               	movlw	4
 24143  016998  0100               	movlb	0	; () banked
 24144  01699A  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 24145  01699C  C0C2  F0B8         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 24146  0169A0  0E02               	movlw	2
 24147  0169A2  0100               	movlb	0	; () banked
 24148  0169A4  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24149  0169A6  C0C3  F0BA         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 24150  0169AA  EC18  F0A5         	call	_Byte_SetZone	;wreg free
 24151  0169AE  0012               	return		;funcret
 24152  0169B0                     __end_of_Byte_SetPair:
 24153                           	opt stack 0
 24154                           tosu	equ	0xFFF
 24155                           tosh	equ	0xFFE
 24156                           tosl	equ	0xFFD
 24157                           pclath	equ	0xFFA
 24158                           tblptru	equ	0xFF8
 24159                           tblptrh	equ	0xFF7
 24160                           tblptrl	equ	0xFF6
 24161                           tablat	equ	0xFF5
 24162                           prodh	equ	0xFF4
 24163                           prodl	equ	0xFF3
 24164                           intcon	equ	0xFF2
 24165                           postinc0	equ	0xFEE
 24166                           wreg	equ	0xFE8
 24167                           indf1	equ	0xFE7
 24168                           postdec1	equ	0xFE5
 24169                           fsr1h	equ	0xFE2
 24170                           fsr1l	equ	0xFE1
 24171                           indf2	equ	0xFDF
 24172                           postinc2	equ	0xFDE
 24173                           postdec2	equ	0xFDD
 24174                           plusw2	equ	0xFDB
 24175                           fsr2h	equ	0xFDA
 24176                           fsr2l	equ	0xFD9
 24177                           status	equ	0xFD8
 24178                           
 24179 ;; *************** function _Port_CheckQuadType *****************
 24180 ;; Defined at:
 24181 ;;		line 126 in file "Library/Port.c"
 24182 ;; Parameters:    Size  Location     Type
 24183 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 24184 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24185 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24186 ;;  pQuad           1   49[BANK0 ] enum E6776
 24187 ;;  pDrive          1   50[BANK0 ] enum E6469
 24188 ;; Auto vars:     Size  Location     Type
 24189 ;;  Output          1   53[BANK0 ] enum E6475
 24190 ;;  Pair2           1   52[BANK0 ] enum E6760
 24191 ;;  Pair1           1   51[BANK0 ] enum E6760
 24192 ;; Return value:  Size  Location     Type
 24193 ;;                  1    wreg      enum E6475
 24194 ;; Registers used:
 24195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24196 ;; Tracked objects:
 24197 ;;		On entry : 0/0
 24198 ;;		On exit  : 0/0
 24199 ;;		Unchanged: 0/0
 24200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24202 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24204 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24205 ;;Total ram usage:        7 bytes
 24206 ;; Hardware stack levels used:    1
 24207 ;; Hardware stack levels required when called:   12
 24208 ;; This function calls:
 24209 ;;		_Port_CheckPairType
 24210 ;; This function is called by:
 24211 ;;		_Port_CheckPortType
 24212 ;;		_Port_SetQuadType
 24213 ;; This function uses a non-reentrant model
 24214 ;;
 24215                           
 24216                           	psect	text113
 24217  015F96                     __ptext113:
 24218                           	opt stack 0
 24219  015F96                     _Port_CheckQuadType:
 24220                           	opt stack 14
 24221                           
 24222                           ;Port.c: 128: ePinError Output = ePinErrorState;
 24223                           
 24224                           ;incstack = 0
 24225  015F96  0E05               	movlw	5
 24226  015F98  0100               	movlb	0	; () banked
 24227  015F9A  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 24228                           
 24229                           ; BSR set to: 0
 24230                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 24231  015F9C  0100               	movlb	0	; () banked
 24232  015F9E  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24233  015FA0  0D02               	mullw	2
 24234  015FA2  CFF3 F0E8          	movff	prodl,Port_CheckQuadType@Pair1
 24235                           
 24236                           ; BSR set to: 0
 24237                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 24238  015FA6  0100               	movlb	0	; () banked
 24239  015FA8  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24240  015FAA  0D02               	mullw	2
 24241  015FAC  28F3               	incf	prodl,w,c
 24242  015FAE  0100               	movlb	0	; () banked
 24243  015FB0  6FE9               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 24244                           
 24245                           ; BSR set to: 0
 24246                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 24247  015FB2  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24248  015FB6  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24249  015FBA  C0E8  F0DD         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 24250  015FBE  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24251  015FC2  EC6E  F0AE         	call	_Port_CheckPairType	;wreg free
 24252  015FC6  0100               	movlb	0	; () banked
 24253  015FC8  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 24254  015FCA  0100               	movlb	0	; () banked
 24255  015FCC  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24256  015FCE  A4D8               	btfss	status,2,c
 24257  015FD0  D00C               	goto	l393
 24258                           
 24259                           ; BSR set to: 0
 24260                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 24261  015FD2  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24262  015FD6  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24263  015FDA  C0E9  F0DD         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 24264  015FDE  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24265  015FE2  EC6E  F0AE         	call	_Port_CheckPairType	;wreg free
 24266  015FE6  0100               	movlb	0	; () banked
 24267  015FE8  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 24268  015FEA                     l393:
 24269                           
 24270                           ; BSR set to: 0
 24271                           ;Port.c: 136: return Output;
 24272                           
 24273                           ; BSR set to: 0
 24274  015FEA  0100               	movlb	0	; () banked
 24275  015FEC  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24276  015FEE  0012               	return	
 24277  015FF0                     __end_of_Port_CheckQuadType:
 24278                           	opt stack 0
 24279                           tosu	equ	0xFFF
 24280                           tosh	equ	0xFFE
 24281                           tosl	equ	0xFFD
 24282                           pclath	equ	0xFFA
 24283                           tblptru	equ	0xFF8
 24284                           tblptrh	equ	0xFF7
 24285                           tblptrl	equ	0xFF6
 24286                           tablat	equ	0xFF5
 24287                           prodh	equ	0xFF4
 24288                           prodl	equ	0xFF3
 24289                           intcon	equ	0xFF2
 24290                           postinc0	equ	0xFEE
 24291                           wreg	equ	0xFE8
 24292                           indf1	equ	0xFE7
 24293                           postdec1	equ	0xFE5
 24294                           fsr1h	equ	0xFE2
 24295                           fsr1l	equ	0xFE1
 24296                           indf2	equ	0xFDF
 24297                           postinc2	equ	0xFDE
 24298                           postdec2	equ	0xFDD
 24299                           plusw2	equ	0xFDB
 24300                           fsr2h	equ	0xFDA
 24301                           fsr2l	equ	0xFD9
 24302                           status	equ	0xFD8
 24303                           
 24304 ;; *************** function _Port_CheckPairType *****************
 24305 ;; Defined at:
 24306 ;;		line 112 in file "Library/Port.c"
 24307 ;; Parameters:    Size  Location     Type
 24308 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24309 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24310 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24311 ;;  pPair           1   40[BANK0 ] enum E6760
 24312 ;;  pDrive          1   41[BANK0 ] enum E6469
 24313 ;; Auto vars:     Size  Location     Type
 24314 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 24315 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24316 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24317 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24318 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24319 ;;  Output          1   44[BANK0 ] enum E6475
 24320 ;;  Pin2            1   43[BANK0 ] enum E6750
 24321 ;;  Pin1            1   42[BANK0 ] enum E6750
 24322 ;; Return value:  Size  Location     Type
 24323 ;;                  1    wreg      enum E6475
 24324 ;; Registers used:
 24325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24326 ;; Tracked objects:
 24327 ;;		On entry : 0/0
 24328 ;;		On exit  : 0/0
 24329 ;;		Unchanged: 0/0
 24330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24332 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24334 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24335 ;;Total ram usage:        9 bytes
 24336 ;; Hardware stack levels used:    1
 24337 ;; Hardware stack levels required when called:   11
 24338 ;; This function calls:
 24339 ;;		_PortProperty_Valid
 24340 ;; This function is called by:
 24341 ;;		_Port_CheckQuadType
 24342 ;;		_Port_SetPairType
 24343 ;; This function uses a non-reentrant model
 24344 ;;
 24345                           
 24346                           	psect	text114
 24347  015CDC                     __ptext114:
 24348                           	opt stack 0
 24349  015CDC                     _Port_CheckPairType:
 24350                           	opt stack 14
 24351                           
 24352                           ;Port.c: 114: ePinError Output = ePinErrorState;
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;incstack = 0
 24356  015CDC  0E05               	movlw	5
 24357  015CDE  0100               	movlb	0	; () banked
 24358  015CE0  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 24359                           
 24360                           ; BSR set to: 0
 24361                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 24362  015CE2  C0DB  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 24363  015CE6  C0DC  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 24364  015CEA  CFDE F0E2          	movff	postinc2,Port_CheckPairType@Props
 24365  015CEE  CFDD F0E3          	movff	postdec2,Port_CheckPairType@Props+1
 24366                           
 24367                           ; BSR set to: 0
 24368                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 24369  015CF2  0100               	movlb	0	; () banked
 24370  015CF4  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24371  015CF6  0D02               	mullw	2
 24372  015CF8  CFF3 F0DF          	movff	prodl,Port_CheckPairType@Pin1
 24373                           
 24374                           ; BSR set to: 0
 24375                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 24376  015CFC  0100               	movlb	0	; () banked
 24377  015CFE  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24378  015D00  0D02               	mullw	2
 24379  015D02  28F3               	incf	prodl,w,c
 24380  015D04  0100               	movlb	0	; () banked
 24381  015D06  6FE0               	movwf	Port_CheckPairType@Pin2& (0+255),b
 24382                           
 24383                           ; BSR set to: 0
 24384                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 24385  015D08  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24386  015D0C  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24387  015D10  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24388  015D14  C0DF  F0C7         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 24389  015D18  EC86  F0AB         	call	_PortProperty_Valid	;wreg free
 24390  015D1C  0100               	movlb	0	; () banked
 24391  015D1E  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 24392  015D20  0100               	movlb	0	; () banked
 24393  015D22  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 24394  015D24  A4D8               	btfss	status,2,c
 24395  015D26  D00C               	goto	l389
 24396                           
 24397                           ; BSR set to: 0
 24398                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 24399  015D28  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24400  015D2C  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24401  015D30  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24402  015D34  C0E0  F0C7         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 24403  015D38  EC86  F0AB         	call	_PortProperty_Valid	;wreg free
 24404  015D3C  0100               	movlb	0	; () banked
 24405  015D3E  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 24406  015D40                     l389:
 24407                           
 24408                           ; BSR set to: 0
 24409                           ;Port.c: 124: return Output;
 24410                           
 24411                           ; BSR set to: 0
 24412  015D40  0100               	movlb	0	; () banked
 24413  015D42  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 24414  015D44  0012               	return	
 24415  015D46                     __end_of_Port_CheckPairType:
 24416                           	opt stack 0
 24417                           tosu	equ	0xFFF
 24418                           tosh	equ	0xFFE
 24419                           tosl	equ	0xFFD
 24420                           pclath	equ	0xFFA
 24421                           tblptru	equ	0xFF8
 24422                           tblptrh	equ	0xFF7
 24423                           tblptrl	equ	0xFF6
 24424                           tablat	equ	0xFF5
 24425                           prodh	equ	0xFF4
 24426                           prodl	equ	0xFF3
 24427                           intcon	equ	0xFF2
 24428                           postinc0	equ	0xFEE
 24429                           wreg	equ	0xFE8
 24430                           indf1	equ	0xFE7
 24431                           postdec1	equ	0xFE5
 24432                           fsr1h	equ	0xFE2
 24433                           fsr1l	equ	0xFE1
 24434                           indf2	equ	0xFDF
 24435                           postinc2	equ	0xFDE
 24436                           postdec2	equ	0xFDD
 24437                           plusw2	equ	0xFDB
 24438                           fsr2h	equ	0xFDA
 24439                           fsr2l	equ	0xFD9
 24440                           status	equ	0xFD8
 24441                           
 24442 ;; *************** function _PortProperty_Valid *****************
 24443 ;; Defined at:
 24444 ;;		line 220 in file "Library/Types.c"
 24445 ;; Parameters:    Size  Location     Type
 24446 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 24447 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24448 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24449 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24450 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24451 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 24452 ;;  pPin            1   18[BANK0 ] unsigned char 
 24453 ;; Auto vars:     Size  Location     Type
 24454 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 24455 ;;  Pair            1   37[BANK0 ] enum E6469
 24456 ;; Return value:  Size  Location     Type
 24457 ;;                  1    wreg      enum E6475
 24458 ;; Registers used:
 24459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24460 ;; Tracked objects:
 24461 ;;		On entry : 0/0
 24462 ;;		On exit  : 0/0
 24463 ;;		Unchanged: 0/0
 24464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24466 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24468 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24469 ;;Total ram usage:       23 bytes
 24470 ;; Hardware stack levels used:    1
 24471 ;; Hardware stack levels required when called:   10
 24472 ;; This function calls:
 24473 ;;		_Word_GetPair
 24474 ;; This function is called by:
 24475 ;;		_Port_CheckPairType
 24476 ;;		_Port_SetPinType
 24477 ;; This function uses a non-reentrant model
 24478 ;;
 24479                           
 24480                           	psect	text115
 24481  01570C                     __ptext115:
 24482                           	opt stack 0
 24483  01570C                     _PortProperty_Valid:
 24484                           	opt stack 17
 24485                           
 24486                           ;Types.c: 222: ePinDrive Pair;
 24487                           ;Types.c: 223: const ePinError Errors[4][4] =
 24488                           ;Types.c: 224: {
 24489                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 24490                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 24491                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 24492                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 24493                           ;Types.c: 230: };
 24494                           
 24495                           ; BSR set to: 0
 24496                           ;incstack = 0
 24497  01570C  0E41               	movlw	low PortProperty_Valid@F6830
 24498  01570E  6EF6               	movwf	tblptrl,c
 24499  015710                     	if	1	;There is more than 1 active tblptr byte
 24500  015710  0EFD               	movlw	high PortProperty_Valid@F6830
 24501  015712  6EF7               	movwf	tblptrh,c
 24502  015714                     	endif
 24503  015714                     	if	1	;There are 3 active tblptr bytes
 24504  015714  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 24505  015716  6EF8               	movwf	tblptru,c
 24506  015718                     	endif
 24507  015718  EE20  F0CA         	lfsr	2,PortProperty_Valid@Errors
 24508  01571C  0E0F               	movlw	15
 24509  01571E                     u9160:
 24510  01571E  0009               	tblrd		*+
 24511  015720  CFF5 FFDE          	movff	tablat,postinc2
 24512  015724  06E8               	decf	wreg,f,c
 24513  015726  E2FB               	bc	u9160
 24514                           
 24515                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 24516  015728  C0C4  F0C1         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 24517  01572C  C0C5  F0C2         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 24518  015730  C0C7  F0C3         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 24519  015734  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 24520  015738  0100               	movlb	0	; () banked
 24521  01573A  6FDA               	movwf	PortProperty_Valid@Pair& (0+255),b
 24522                           
 24523                           ; BSR set to: 0
 24524                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 24525  01573C  0E04               	movlw	4
 24526  01573E  0100               	movlb	0	; () banked
 24527  015740  61C6               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 24528  015742  D020               	goto	l819
 24529                           
 24530                           ; BSR set to: 0
 24531  015744  0E04               	movlw	4
 24532  015746  0100               	movlb	0	; () banked
 24533  015748  61DA               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 24534  01574A  D01C               	goto	l819
 24535                           
 24536                           ; BSR set to: 0
 24537                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 24538  01574C  0100               	movlb	0	; () banked
 24539  01574E  51C6               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 24540  015750  0D04               	mullw	4
 24541  015752  0ECA               	movlw	low PortProperty_Valid@Errors
 24542  015754  0100               	movlb	0	; () banked
 24543  015756  6FC8               	movwf	??_PortProperty_Valid& (0+255),b
 24544  015758  0E00               	movlw	high PortProperty_Valid@Errors
 24545  01575A  0100               	movlb	0	; () banked
 24546  01575C  6FC9               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 24547  01575E  50F3               	movf	prodl,w,c
 24548  015760  0100               	movlb	0	; () banked
 24549  015762  27C8               	addwf	??_PortProperty_Valid& (0+255),f,b
 24550  015764  50F4               	movf	prodh,w,c
 24551  015766  0100               	movlb	0	; () banked
 24552  015768  23C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 24553  01576A  0100               	movlb	0	; () banked
 24554  01576C  51DA               	movf	PortProperty_Valid@Pair& (0+255),w,b
 24555  01576E  0D01               	mullw	1
 24556  015770  50F3               	movf	prodl,w,c
 24557  015772  0100               	movlb	0	; () banked
 24558  015774  25C8               	addwf	??_PortProperty_Valid& (0+255),w,b
 24559  015776  6ED9               	movwf	fsr2l,c
 24560  015778  50F4               	movf	prodh,w,c
 24561  01577A  0100               	movlb	0	; () banked
 24562  01577C  21C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 24563  01577E  6EDA               	movwf	fsr2h,c
 24564  015780  50DF               	movf	indf2,w,c
 24565                           
 24566                           ; BSR set to: 0
 24567  015782  0012               	return	
 24568  015784                     l819:
 24569                           
 24570                           ; BSR set to: 0
 24571                           ;Types.c: 237: return ePinErrorState;
 24572                           
 24573                           ; BSR set to: 0
 24574  015784  0E05               	movlw	5
 24575  015786  0012               	return	
 24576  015788                     __end_of_PortProperty_Valid:
 24577                           	opt stack 0
 24578                           tosu	equ	0xFFF
 24579                           tosh	equ	0xFFE
 24580                           tosl	equ	0xFFD
 24581                           pclath	equ	0xFFA
 24582                           tblptru	equ	0xFF8
 24583                           tblptrh	equ	0xFF7
 24584                           tblptrl	equ	0xFF6
 24585                           tablat	equ	0xFF5
 24586                           prodh	equ	0xFF4
 24587                           prodl	equ	0xFF3
 24588                           intcon	equ	0xFF2
 24589                           postinc0	equ	0xFEE
 24590                           wreg	equ	0xFE8
 24591                           indf1	equ	0xFE7
 24592                           postdec1	equ	0xFE5
 24593                           fsr1h	equ	0xFE2
 24594                           fsr1l	equ	0xFE1
 24595                           indf2	equ	0xFDF
 24596                           postinc2	equ	0xFDE
 24597                           postdec2	equ	0xFDD
 24598                           plusw2	equ	0xFDB
 24599                           fsr2h	equ	0xFDA
 24600                           fsr2l	equ	0xFD9
 24601                           status	equ	0xFD8
 24602                           
 24603 ;; *************** function _Byte_SetQuad *****************
 24604 ;; Defined at:
 24605 ;;		line 101 in file "Library/Types.c"
 24606 ;; Parameters:    Size  Location     Type
 24607 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24608 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 24609 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24610 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24611 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24612 ;;		 -> NULL(0), 
 24613 ;;  pQuad           1   13[BANK0 ] unsigned char 
 24614 ;;  pValue          1   14[BANK0 ] unsigned char 
 24615 ;; Auto vars:     Size  Location     Type
 24616 ;;		None
 24617 ;; Return value:  Size  Location     Type
 24618 ;;                  1    wreg      void 
 24619 ;; Registers used:
 24620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24621 ;; Tracked objects:
 24622 ;;		On entry : 0/0
 24623 ;;		On exit  : 0/0
 24624 ;;		Unchanged: 0/0
 24625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24629 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24630 ;;Total ram usage:        4 bytes
 24631 ;; Hardware stack levels used:    1
 24632 ;; Hardware stack levels required when called:    8
 24633 ;; This function calls:
 24634 ;;		_Byte_SetZone
 24635 ;; This function is called by:
 24636 ;;		_Port_SetQuadType
 24637 ;;		_SPI_Init
 24638 ;;		_SPI_MinSpeed
 24639 ;;		_SPI_MaxSpeed
 24640 ;;		_Port_SetQuad
 24641 ;;		_Word_SetQuad
 24642 ;;		_I2C_Init
 24643 ;; This function uses a non-reentrant model
 24644 ;;
 24645                           
 24646                           	psect	text116
 24647  0169B0                     __ptext116:
 24648                           	opt stack 0
 24649  0169B0                     _Byte_SetQuad:
 24650                           	opt stack 19
 24651                           
 24652                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 24653                           
 24654                           ; BSR set to: 0
 24655                           ;incstack = 0
 24656  0169B0  C0C0  F0B5         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 24657  0169B4  C0C1  F0B6         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 24658  0169B8  0E02               	movlw	2
 24659  0169BA  0100               	movlb	0	; () banked
 24660  0169BC  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 24661  0169BE  C0C2  F0B8         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 24662  0169C2  0E04               	movlw	4
 24663  0169C4  0100               	movlb	0	; () banked
 24664  0169C6  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24665  0169C8  C0C3  F0BA         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 24666  0169CC  EC18  F0A5         	call	_Byte_SetZone	;wreg free
 24667  0169D0  0012               	return		;funcret
 24668  0169D2                     __end_of_Byte_SetQuad:
 24669                           	opt stack 0
 24670                           tosu	equ	0xFFF
 24671                           tosh	equ	0xFFE
 24672                           tosl	equ	0xFFD
 24673                           pclath	equ	0xFFA
 24674                           tblptru	equ	0xFF8
 24675                           tblptrh	equ	0xFF7
 24676                           tblptrl	equ	0xFF6
 24677                           tablat	equ	0xFF5
 24678                           prodh	equ	0xFF4
 24679                           prodl	equ	0xFF3
 24680                           intcon	equ	0xFF2
 24681                           postinc0	equ	0xFEE
 24682                           wreg	equ	0xFE8
 24683                           indf1	equ	0xFE7
 24684                           postdec1	equ	0xFE5
 24685                           fsr1h	equ	0xFE2
 24686                           fsr1l	equ	0xFE1
 24687                           indf2	equ	0xFDF
 24688                           postinc2	equ	0xFDE
 24689                           postdec2	equ	0xFDD
 24690                           plusw2	equ	0xFDB
 24691                           fsr2h	equ	0xFDA
 24692                           fsr2l	equ	0xFD9
 24693                           status	equ	0xFD8
 24694                           
 24695 ;; *************** function _Byte_SetZone *****************
 24696 ;; Defined at:
 24697 ;;		line 47 in file "Library/Types.c"
 24698 ;; Parameters:    Size  Location     Type
 24699 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24700 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24701 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24702 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 24703 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 24704 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24705 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24706 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24707 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24708 ;;  pMax            1    2[BANK0 ] unsigned char 
 24709 ;;  pChunk          1    3[BANK0 ] unsigned char 
 24710 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 24711 ;;  pValue          1    5[BANK0 ] unsigned char 
 24712 ;; Auto vars:     Size  Location     Type
 24713 ;;  MASK            1   10[BANK0 ] unsigned char 
 24714 ;;  Offset          1    9[BANK0 ] unsigned char 
 24715 ;; Return value:  Size  Location     Type
 24716 ;;                  1    wreg      void 
 24717 ;; Registers used:
 24718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 24719 ;; Tracked objects:
 24720 ;;		On entry : 0/0
 24721 ;;		On exit  : 0/0
 24722 ;;		Unchanged: 0/0
 24723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24724 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24725 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24726 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24727 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24728 ;;Total ram usage:       11 bytes
 24729 ;; Hardware stack levels used:    1
 24730 ;; Hardware stack levels required when called:    7
 24731 ;; This function calls:
 24732 ;;		Nothing
 24733 ;; This function is called by:
 24734 ;;		_Byte_SetPair
 24735 ;;		_Byte_SetQuad
 24736 ;;		_Byte_SetTriple
 24737 ;; This function uses a non-reentrant model
 24738 ;;
 24739                           
 24740                           	psect	text117
 24741  014A30                     __ptext117:
 24742                           	opt stack 0
 24743  014A30                     _Byte_SetZone:
 24744                           	opt stack 18
 24745                           
 24746                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 24747                           
 24748                           ;incstack = 0
 24749  014A30  0100               	movlb	0	; () banked
 24750  014A32  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24751  014A34  0D01               	mullw	1
 24752  014A36  0E5B               	movlw	low _MASKS
 24753  014A38  24F3               	addwf	prodl,w,c
 24754  014A3A  6EF6               	movwf	tblptrl,c
 24755  014A3C  0EFD               	movlw	high _MASKS
 24756  014A3E  20F4               	addwfc	prodh,w,c
 24757  014A40  6EF7               	movwf	tblptrh,c
 24758  014A42                     	if	1	;There are 3 active tblptr bytes
 24759  014A42  6AF8               	clrf	tblptru,c
 24760  014A44  0E00               	movlw	low (__mediumconst shr (0+16))
 24761  014A46  22F8               	addwfc	tblptru,f,c
 24762  014A48                     	endif
 24763  014A48  0008               	tblrd		*
 24764  014A4A  CFF5 F0BF          	movff	tablat,Byte_SetZone@MASK
 24765                           
 24766                           ; BSR set to: 0
 24767                           ;Types.c: 50: UINT8 Offset = 0;
 24768  014A4E  0E00               	movlw	0
 24769  014A50  0100               	movlb	0	; () banked
 24770  014A52  6FBE               	movwf	Byte_SetZone@Offset& (0+255),b
 24771                           
 24772                           ;Types.c: 52: while (pChunk >= pMax)
 24773  014A54  D006               	goto	l726
 24774  014A56                     
 24775                           ; BSR set to: 0
 24776                           ;Types.c: 53: {
 24777                           ;Types.c: 54: pChunk -= pMax;
 24778                           
 24779                           ; BSR set to: 0
 24780  014A56  0100               	movlb	0	; () banked
 24781  014A58  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 24782  014A5A  0100               	movlb	0	; () banked
 24783  014A5C  5FB8               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 24784                           
 24785                           ; BSR set to: 0
 24786                           ;Types.c: 55: Offset += 1;
 24787  014A5E  0100               	movlb	0	; () banked
 24788  014A60  2BBE               	incf	Byte_SetZone@Offset& (0+255),f,b
 24789  014A62                     l726:
 24790                           
 24791                           ; BSR set to: 0
 24792                           
 24793                           ; BSR set to: 0
 24794  014A62  0100               	movlb	0	; () banked
 24795  014A64  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 24796  014A66  0100               	movlb	0	; () banked
 24797  014A68  5DB8               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 24798  014A6A  B0D8               	btfsc	status,0,c
 24799  014A6C  D7F4               	goto	l727
 24800                           
 24801                           ; BSR set to: 0
 24802                           ;Types.c: 56: }
 24803                           ;Types.c: 57: pChunk *= pChunkSize;
 24804                           
 24805                           ; BSR set to: 0
 24806  014A6E  0100               	movlb	0	; () banked
 24807  014A70  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24808  014A72  0100               	movlb	0	; () banked
 24809  014A74  03B8               	mulwf	Byte_SetZone@pChunk& (0+255),b
 24810  014A76  50F3               	movf	prodl,w,c
 24811  014A78  6FB8               	movwf	Byte_SetZone@pChunk& (0+255),b
 24812                           
 24813                           ; BSR set to: 0
 24814                           ;Types.c: 58: pChunk += Offset;
 24815  014A7A  0100               	movlb	0	; () banked
 24816  014A7C  51BE               	movf	Byte_SetZone@Offset& (0+255),w,b
 24817  014A7E  0100               	movlb	0	; () banked
 24818  014A80  27B8               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 24819                           
 24820                           ; BSR set to: 0
 24821                           ;Types.c: 60: pValue &= MASK;
 24822  014A82  0100               	movlb	0	; () banked
 24823  014A84  51BF               	movf	Byte_SetZone@MASK& (0+255),w,b
 24824  014A86  0100               	movlb	0	; () banked
 24825  014A88  17BA               	andwf	Byte_SetZone@pValue& (0+255),f,b
 24826                           
 24827                           ; BSR set to: 0
 24828                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 24829  014A8A  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24830  014A8E  C0BF  F0BC         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 24831  014A92  0100               	movlb	0	; () banked
 24832  014A94  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 24833  014A96  D003               	goto	u9214
 24834  014A98                     u9215:
 24835  014A98  0100               	movlb	0	; () banked
 24836  014A9A  90D8               	bcf	status,0,c
 24837  014A9C  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24838  014A9E                     u9214:
 24839  014A9E  0100               	movlb	0	; () banked
 24840  014AA0  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 24841  014AA2  D7FA               	goto	u9215
 24842  014AA4  0100               	movlb	0	; () banked
 24843  014AA6  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24844  014AA8  0AFF               	xorlw	255
 24845  014AAA  0100               	movlb	0	; () banked
 24846  014AAC  6FBD               	movwf	(??_Byte_SetZone+2)& (0+255),b
 24847  014AAE  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24848  014AB2  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24849  014AB6  0100               	movlb	0	; () banked
 24850  014AB8  51BD               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 24851  014ABA  16DF               	andwf	indf2,f,c
 24852                           
 24853                           ; BSR set to: 0
 24854                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 24855  014ABC  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24856  014AC0  C0BA  F0BC         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 24857  014AC4  0100               	movlb	0	; () banked
 24858  014AC6  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 24859  014AC8  D003               	goto	u9224
 24860  014ACA                     u9225:
 24861  014ACA  0100               	movlb	0	; () banked
 24862  014ACC  90D8               	bcf	status,0,c
 24863  014ACE  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24864  014AD0                     u9224:
 24865  014AD0  0100               	movlb	0	; () banked
 24866  014AD2  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 24867  014AD4  D7FA               	goto	u9225
 24868  014AD6  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24869  014ADA  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24870  014ADE  0100               	movlb	0	; () banked
 24871  014AE0  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24872  014AE2  12DF               	iorwf	indf2,f,c
 24873                           
 24874                           ; BSR set to: 0
 24875  014AE4  0012               	return		;funcret
 24876  014AE6                     __end_of_Byte_SetZone:
 24877                           	opt stack 0
 24878                           tosu	equ	0xFFF
 24879                           tosh	equ	0xFFE
 24880                           tosl	equ	0xFFD
 24881                           pclath	equ	0xFFA
 24882                           tblptru	equ	0xFF8
 24883                           tblptrh	equ	0xFF7
 24884                           tblptrl	equ	0xFF6
 24885                           tablat	equ	0xFF5
 24886                           prodh	equ	0xFF4
 24887                           prodl	equ	0xFF3
 24888                           intcon	equ	0xFF2
 24889                           postinc0	equ	0xFEE
 24890                           wreg	equ	0xFE8
 24891                           indf1	equ	0xFE7
 24892                           postdec1	equ	0xFE5
 24893                           fsr1h	equ	0xFE2
 24894                           fsr1l	equ	0xFE1
 24895                           indf2	equ	0xFDF
 24896                           postinc2	equ	0xFDE
 24897                           postdec2	equ	0xFDD
 24898                           plusw2	equ	0xFDB
 24899                           fsr2h	equ	0xFDA
 24900                           fsr2l	equ	0xFD9
 24901                           status	equ	0xFD8
 24902                           
 24903 ;; *************** function _Console_Init *****************
 24904 ;; Defined at:
 24905 ;;		line 157 in file "Library/Console.c"
 24906 ;; Parameters:    Size  Location     Type
 24907 ;;		None
 24908 ;; Auto vars:     Size  Location     Type
 24909 ;;  y               1    3[BANK0 ] unsigned char 
 24910 ;;  x               1    2[BANK0 ] unsigned char 
 24911 ;; Return value:  Size  Location     Type
 24912 ;;                  1    wreg      void 
 24913 ;; Registers used:
 24914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24915 ;; Tracked objects:
 24916 ;;		On entry : 0/0
 24917 ;;		On exit  : 0/0
 24918 ;;		Unchanged: 0/0
 24919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24922 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24923 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24924 ;;Total ram usage:        4 bytes
 24925 ;; Hardware stack levels used:    1
 24926 ;; Hardware stack levels required when called:    7
 24927 ;; This function calls:
 24928 ;;		Nothing
 24929 ;; This function is called by:
 24930 ;;		_init
 24931 ;; This function uses a non-reentrant model
 24932 ;;
 24933                           
 24934                           	psect	text118
 24935  0154F2                     __ptext118:
 24936                           	opt stack 0
 24937  0154F2                     _Console_Init:
 24938                           	opt stack 22
 24939                           
 24940                           ;Console.c: 160: lBufferX = 0;
 24941                           
 24942                           ; BSR set to: 0
 24943                           ;incstack = 0
 24944  0154F2  0E00               	movlw	0
 24945  0154F4  0100               	movlb	0	; () banked
 24946  0154F6  6F94               	movwf	_lBufferX& (0+255),b
 24947                           
 24948                           ;Console.c: 161: lBufferY = 0;
 24949  0154F8  0E00               	movlw	0
 24950  0154FA  0100               	movlb	0	; () banked
 24951  0154FC  6F93               	movwf	_lBufferY& (0+255),b
 24952                           
 24953                           ;Console.c: 163: UINT8 x, y;
 24954                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24955  0154FE  0E00               	movlw	0
 24956  015500  0100               	movlb	0	; () banked
 24957  015502  6FB7               	movwf	Console_Init@x& (0+255),b
 24958  015504                     l14756:
 24959                           
 24960                           ; BSR set to: 0
 24961  015504  0E13               	movlw	19
 24962  015506  0100               	movlb	0	; () banked
 24963  015508  65B7               	cpfsgt	Console_Init@x& (0+255),b
 24964  01550A  D001               	goto	l976
 24965  01550C  0012               	return	
 24966  01550E                     l976:
 24967                           
 24968                           ; BSR set to: 0
 24969                           ;Console.c: 165: {
 24970                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24971                           
 24972                           ; BSR set to: 0
 24973  01550E  0E00               	movlw	0
 24974  015510  0100               	movlb	0	; () banked
 24975  015512  6FB8               	movwf	Console_Init@y& (0+255),b
 24976  015514                     l14762:
 24977                           
 24978                           ; BSR set to: 0
 24979  015514  0E0E               	movlw	14
 24980  015516  0100               	movlb	0	; () banked
 24981  015518  65B8               	cpfsgt	Console_Init@y& (0+255),b
 24982  01551A  D001               	goto	l978
 24983  01551C  D02C               	goto	u11680
 24984  01551E                     l978:
 24985                           
 24986                           ; BSR set to: 0
 24987                           ;Console.c: 167: {
 24988                           ;Console.c: 168: lBuffer[y][x] = '\0';
 24989                           
 24990                           ; BSR set to: 0
 24991  01551E  0100               	movlb	0	; () banked
 24992  015520  51B8               	movf	Console_Init@y& (0+255),w,b
 24993  015522  0D14               	mullw	20
 24994  015524  0EB4               	movlw	low _lBuffer
 24995  015526  0100               	movlb	0	; () banked
 24996  015528  6FB5               	movwf	??_Console_Init& (0+255),b
 24997  01552A  0E04               	movlw	high _lBuffer
 24998  01552C  0100               	movlb	0	; () banked
 24999  01552E  6FB6               	movwf	(??_Console_Init+1)& (0+255),b
 25000  015530  50F3               	movf	prodl,w,c
 25001  015532  0100               	movlb	0	; () banked
 25002  015534  27B5               	addwf	??_Console_Init& (0+255),f,b
 25003  015536  50F4               	movf	prodh,w,c
 25004  015538  0100               	movlb	0	; () banked
 25005  01553A  23B6               	addwfc	(??_Console_Init+1)& (0+255),f,b
 25006  01553C  0100               	movlb	0	; () banked
 25007  01553E  51B7               	movf	Console_Init@x& (0+255),w,b
 25008  015540  0D01               	mullw	1
 25009  015542  50F3               	movf	prodl,w,c
 25010  015544  0100               	movlb	0	; () banked
 25011  015546  25B5               	addwf	??_Console_Init& (0+255),w,b
 25012  015548  6ED9               	movwf	fsr2l,c
 25013  01554A  50F4               	movf	prodh,w,c
 25014  01554C  0100               	movlb	0	; () banked
 25015  01554E  21B6               	addwfc	(??_Console_Init+1)& (0+255),w,b
 25016  015550  6EDA               	movwf	fsr2h,c
 25017  015552  0E00               	movlw	0
 25018  015554  6EDF               	movwf	indf2,c
 25019                           
 25020                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 25021  015556  0100               	movlb	0	; () banked
 25022  015558  51B8               	movf	Console_Init@y& (0+255),w,b
 25023  01555A  0D02               	mullw	2
 25024  01555C  0E00               	movlw	low _lCBuffer
 25025  01555E  24F3               	addwf	prodl,w,c
 25026  015560  6ED9               	movwf	fsr2l,c
 25027  015562  0E03               	movlw	high _lCBuffer
 25028  015564  20F4               	addwfc	prodh,w,c
 25029  015566  6EDA               	movwf	fsr2h,c
 25030  015568  0EFF               	movlw	255
 25031  01556A  6EDE               	movwf	postinc2,c
 25032  01556C  0EFF               	movlw	255
 25033  01556E  6EDD               	movwf	postdec2,c
 25034                           
 25035                           ; BSR set to: 0
 25036  015570  0100               	movlb	0	; () banked
 25037  015572  2BB8               	incf	Console_Init@y& (0+255),f,b
 25038  015574  D7CF               	goto	l14762
 25039  015576                     u11680:
 25040                           
 25041                           ; BSR set to: 0
 25042                           
 25043                           ; BSR set to: 0
 25044  015576  0100               	movlb	0	; () banked
 25045  015578  2BB7               	incf	Console_Init@x& (0+255),f,b
 25046  01557A  D7C4               	goto	l14756
 25047  01557C                     __end_of_Console_Init:
 25048                           	opt stack 0
 25049                           tosu	equ	0xFFF
 25050                           tosh	equ	0xFFE
 25051                           tosl	equ	0xFFD
 25052                           pclath	equ	0xFFA
 25053                           tblptru	equ	0xFF8
 25054                           tblptrh	equ	0xFF7
 25055                           tblptrl	equ	0xFF6
 25056                           tablat	equ	0xFF5
 25057                           prodh	equ	0xFF4
 25058                           prodl	equ	0xFF3
 25059                           intcon	equ	0xFF2
 25060                           postinc0	equ	0xFEE
 25061                           wreg	equ	0xFE8
 25062                           indf1	equ	0xFE7
 25063                           postdec1	equ	0xFE5
 25064                           fsr1h	equ	0xFE2
 25065                           fsr1l	equ	0xFE1
 25066                           indf2	equ	0xFDF
 25067                           postinc2	equ	0xFDE
 25068                           postdec2	equ	0xFDD
 25069                           plusw2	equ	0xFDB
 25070                           fsr2h	equ	0xFDA
 25071                           fsr2l	equ	0xFD9
 25072                           status	equ	0xFD8
 25073                           
 25074 ;; *************** function _ADC_Start *****************
 25075 ;; Defined at:
 25076 ;;		line 114 in file "Library/ADC.c"
 25077 ;; Parameters:    Size  Location     Type
 25078 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 25079 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25080 ;;		 -> NULL(0), 
 25081 ;; Auto vars:     Size  Location     Type
 25082 ;;		None
 25083 ;; Return value:  Size  Location     Type
 25084 ;;                  1    wreg      void 
 25085 ;; Registers used:
 25086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25087 ;; Tracked objects:
 25088 ;;		On entry : 0/0
 25089 ;;		On exit  : 0/0
 25090 ;;		Unchanged: 0/0
 25091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25095 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25096 ;;Total ram usage:        4 bytes
 25097 ;; Hardware stack levels used:    1
 25098 ;; Hardware stack levels required when called:    8
 25099 ;; This function calls:
 25100 ;;		_ADC_Off
 25101 ;;		_ADC_On
 25102 ;;		_ADC_SetChannel
 25103 ;; This function is called by:
 25104 ;;		_init
 25105 ;;		_findClosestWall
 25106 ;;		_measureAndDisplayDistance
 25107 ;;		_mode1
 25108 ;;		_FunctADC
 25109 ;; This function uses a non-reentrant model
 25110 ;;
 25111                           
 25112                           	psect	text119
 25113  015606                     __ptext119:
 25114                           	opt stack 0
 25115  015606                     _ADC_Start:
 25116                           	opt stack 20
 25117                           
 25118                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 25119                           
 25120                           ; BSR set to: 0
 25121                           ;incstack = 0
 25122  015606  B2C2               	btfsc	4034,1,c	;volatile
 25123  015608  0012               	return	
 25124  01560A                     
 25125                           ;ADC.c: 128: {
 25126                           ;ADC.c: 129: ADC_Off();
 25127                           
 25128                           ;ADC.c: 127: for(;;)
 25129  01560A  EC91  F0B6         	call	_ADC_Off	;wreg free
 25130                           
 25131                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 25132  01560E  C0B7  FFD9         	movff	ADC_Start@pInput,fsr2l
 25133  015612  C0B8  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 25134  015616  50DF               	movf	indf2,w,c
 25135  015618  EC8D  F0B5         	call	_ADC_SetChannel
 25136                           
 25137                           ;ADC.c: 131: ADC_On();
 25138  01561C  EC9F  F0B6         	call	_ADC_On	;wreg free
 25139                           
 25140                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 25141  015620  82C2               	bsf	4034,1,c	;volatile
 25142  015622  B2C2               	btfsc	4034,1,c	;volatile
 25143  015624  D7FE               	goto	l1280
 25144                           
 25145                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 25146  015626  50C3               	movf	4035,w,c	;volatile
 25147  015628  CFC4 F0B9          	movff	4036,??_ADC_Start	;volatile
 25148  01562C  0100               	movlb	0	; () banked
 25149  01562E  6BBA               	clrf	(??_ADC_Start+1)& (0+255),b
 25150  015630  C0B9  F0BA         	movff	??_ADC_Start,??_ADC_Start+1
 25151  015634  0100               	movlb	0	; () banked
 25152  015636  6BB9               	clrf	??_ADC_Start& (0+255),b
 25153  015638  0100               	movlb	0	; () banked
 25154  01563A  13B9               	iorwf	??_ADC_Start& (0+255),f,b
 25155  01563C  0E00               	movlw	0
 25156  01563E  13BA               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 25157  015640  0100               	movlb	0	; () banked
 25158  015642  EE20 F001          	lfsr	2,1
 25159  015646  51B7               	movf	ADC_Start@pInput& (0+255),w,b
 25160  015648  26D9               	addwf	fsr2l,f,c
 25161  01564A  51B8               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25162  01564C  22DA               	addwfc	fsr2h,f,c
 25163  01564E  C0B9  FFDE         	movff	??_ADC_Start,postinc2
 25164  015652  C0BA  FFDD         	movff	??_ADC_Start+1,postdec2
 25165                           
 25166                           ;ADC.c: 141: if (pInput->mNext == 0)
 25167  015656  0100               	movlb	0	; () banked
 25168  015658  EE20 F003          	lfsr	2,3
 25169  01565C  51B7               	movf	ADC_Start@pInput& (0+255),w,b
 25170  01565E  26D9               	addwf	fsr2l,f,c
 25171  015660  51B8               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25172  015662  22DA               	addwfc	fsr2h,f,c
 25173  015664  50DE               	movf	postinc2,w,c
 25174  015666  10DE               	iorwf	postinc2,w,c
 25175  015668  B4D8               	btfsc	status,2,c
 25176  01566A  D00C               	goto	l1283
 25177                           
 25178                           ; BSR set to: 0
 25179                           ;ADC.c: 145: pInput = pInput->mNext;
 25180                           
 25181                           ; BSR set to: 0
 25182                           
 25183                           ; BSR set to: 0
 25184                           ;ADC.c: 142: break;
 25185  01566C  0100               	movlb	0	; () banked
 25186  01566E  EE20 F003          	lfsr	2,3
 25187  015672  51B7               	movf	ADC_Start@pInput& (0+255),w,b
 25188  015674  26D9               	addwf	fsr2l,f,c
 25189  015676  51B8               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25190  015678  22DA               	addwfc	fsr2h,f,c
 25191  01567A  CFDE F0B7          	movff	postinc2,ADC_Start@pInput
 25192  01567E  CFDD F0B8          	movff	postdec2,ADC_Start@pInput+1
 25193                           
 25194                           ;ADC.c: 146: }
 25195  015682  D7C3               	goto	l1276
 25196  015684                     l1283:
 25197                           
 25198                           ; BSR set to: 0
 25199                           ;ADC.c: 147: ADC_Off();
 25200                           
 25201                           ; BSR set to: 0
 25202  015684  EC91  F0B6         	call	_ADC_Off	;wreg free
 25203  015688  0012               	return		;funcret
 25204  01568A                     __end_of_ADC_Start:
 25205                           	opt stack 0
 25206                           tosu	equ	0xFFF
 25207                           tosh	equ	0xFFE
 25208                           tosl	equ	0xFFD
 25209                           pclath	equ	0xFFA
 25210                           tblptru	equ	0xFF8
 25211                           tblptrh	equ	0xFF7
 25212                           tblptrl	equ	0xFF6
 25213                           tablat	equ	0xFF5
 25214                           prodh	equ	0xFF4
 25215                           prodl	equ	0xFF3
 25216                           intcon	equ	0xFF2
 25217                           postinc0	equ	0xFEE
 25218                           wreg	equ	0xFE8
 25219                           indf1	equ	0xFE7
 25220                           postdec1	equ	0xFE5
 25221                           fsr1h	equ	0xFE2
 25222                           fsr1l	equ	0xFE1
 25223                           indf2	equ	0xFDF
 25224                           postinc2	equ	0xFDE
 25225                           postdec2	equ	0xFDD
 25226                           plusw2	equ	0xFDB
 25227                           fsr2h	equ	0xFDA
 25228                           fsr2l	equ	0xFD9
 25229                           status	equ	0xFD8
 25230                           
 25231 ;; *************** function _ADC_Init *****************
 25232 ;; Defined at:
 25233 ;;		line 19 in file "Library/ADC.c"
 25234 ;; Parameters:    Size  Location     Type
 25235 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 25236 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25237 ;;  pChannel        1    6[BANK0 ] enum E6742
 25238 ;; Auto vars:     Size  Location     Type
 25239 ;;		None
 25240 ;; Return value:  Size  Location     Type
 25241 ;;                  1    wreg      void 
 25242 ;; Registers used:
 25243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25244 ;; Tracked objects:
 25245 ;;		On entry : 0/0
 25246 ;;		On exit  : 0/0
 25247 ;;		Unchanged: 0/0
 25248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25249 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25252 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25253 ;;Total ram usage:        3 bytes
 25254 ;; Hardware stack levels used:    1
 25255 ;; Hardware stack levels required when called:    9
 25256 ;; This function calls:
 25257 ;;		_ADC_Calibrate
 25258 ;;		_ADC_ClockDivision
 25259 ;;		_ADC_ConversionTime
 25260 ;;		_ADC_SetChannel
 25261 ;;		_ADC_SetupIO
 25262 ;; This function is called by:
 25263 ;;		_init
 25264 ;;		_FunctInitADC
 25265 ;; This function uses a non-reentrant model
 25266 ;;
 25267                           
 25268                           	psect	text120
 25269  015788                     __ptext120:
 25270                           	opt stack 0
 25271  015788                     _ADC_Init:
 25272                           	opt stack 20
 25273                           
 25274                           ;ADC.c: 21: if(pInput==(void*)0)
 25275                           
 25276                           ;incstack = 0
 25277  015788  0100               	movlb	0	; () banked
 25278  01578A  51B9               	movf	ADC_Init@pInput& (0+255),w,b
 25279  01578C  0100               	movlb	0	; () banked
 25280  01578E  11BA               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 25281  015790  B4D8               	btfsc	status,2,c
 25282  015792  0012               	return	
 25283                           
 25284                           ; BSR set to: 0
 25285                           ;ADC.c: 25: lCurrent = pInput;
 25286                           
 25287                           ; BSR set to: 0
 25288                           
 25289                           ; BSR set to: 0
 25290                           ;ADC.c: 22: return;
 25291  015794  C0B9  F085         	movff	ADC_Init@pInput,_lCurrent
 25292  015798  C0BA  F086         	movff	ADC_Init@pInput+1,_lCurrent+1
 25293                           
 25294                           ; BSR set to: 0
 25295                           ;ADC.c: 27: pInput->mChannel = pChannel;
 25296  01579C  C0B9  FFD9         	movff	ADC_Init@pInput,fsr2l
 25297  0157A0  C0BA  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 25298  0157A4  C0BB  FFDF         	movff	ADC_Init@pChannel,indf2
 25299                           
 25300                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 25301  0157A8  0100               	movlb	0	; () banked
 25302  0157AA  EE20 F003          	lfsr	2,3
 25303  0157AE  51B9               	movf	ADC_Init@pInput& (0+255),w,b
 25304  0157B0  26D9               	addwf	fsr2l,f,c
 25305  0157B2  51BA               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25306  0157B4  22DA               	addwfc	fsr2h,f,c
 25307  0157B6  0E00               	movlw	0
 25308  0157B8  6EDE               	movwf	postinc2,c
 25309  0157BA  0E00               	movlw	0
 25310  0157BC  6EDD               	movwf	postdec2,c
 25311                           
 25312                           ;ADC.c: 29: pInput->mValue = 0;
 25313  0157BE  0100               	movlb	0	; () banked
 25314  0157C0  EE20 F001          	lfsr	2,1
 25315  0157C4  51B9               	movf	ADC_Init@pInput& (0+255),w,b
 25316  0157C6  26D9               	addwf	fsr2l,f,c
 25317  0157C8  51BA               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25318  0157CA  22DA               	addwfc	fsr2h,f,c
 25319  0157CC  0E00               	movlw	0
 25320  0157CE  6EDE               	movwf	postinc2,c
 25321  0157D0  0E00               	movlw	0
 25322  0157D2  6EDD               	movwf	postdec2,c
 25323                           
 25324                           ; BSR set to: 0
 25325                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 25326  0157D4  0100               	movlb	0	; () banked
 25327  0157D6  51BB               	movf	ADC_Init@pChannel& (0+255),w,b
 25328  0157D8  EC8D  F0B5         	call	_ADC_SetChannel
 25329                           
 25330                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 25331  0157DC  9EC2               	bcf	4034,7,c	;volatile
 25332                           
 25333                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 25334  0157DE  9CC2               	bcf	4034,6,c	;volatile
 25335                           
 25336                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 25337  0157E0  8EC1               	bsf	4033,7,c	;volatile
 25338                           
 25339                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 25340  0157E2  8CC1               	bsf	4033,6,c	;volatile
 25341                           
 25342                           ;ADC.c: 43: ADC_ConversionTime(12);
 25343  0157E4  0E0C               	movlw	12
 25344  0157E6  EC5D  F0B1         	call	_ADC_ConversionTime
 25345                           
 25346                           ;ADC.c: 47: ADC_ClockDivision(16);
 25347  0157EA  0E10               	movlw	16
 25348  0157EC  ECBE  F0AA         	call	_ADC_ClockDivision
 25349                           
 25350                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 25351  0157F0  0100               	movlb	0	; () banked
 25352  0157F2  51BB               	movf	ADC_Init@pChannel& (0+255),w,b
 25353  0157F4  ECD6  F0B3         	call	_ADC_SetupIO
 25354                           
 25355                           ;ADC.c: 58: ADC_Initialised = 1;
 25356  0157F8  0E01               	movlw	1
 25357  0157FA  6E3C               	movwf	_ADC_Initialised,c
 25358                           
 25359                           ;ADC.c: 61: ADC_Calibrate();
 25360  0157FC  EC12  F0B6         	call	_ADC_Calibrate	;wreg free
 25361  015800  0012               	return		;funcret
 25362  015802                     __end_of_ADC_Init:
 25363                           	opt stack 0
 25364                           tosu	equ	0xFFF
 25365                           tosh	equ	0xFFE
 25366                           tosl	equ	0xFFD
 25367                           pclath	equ	0xFFA
 25368                           tblptru	equ	0xFF8
 25369                           tblptrh	equ	0xFF7
 25370                           tblptrl	equ	0xFF6
 25371                           tablat	equ	0xFF5
 25372                           prodh	equ	0xFF4
 25373                           prodl	equ	0xFF3
 25374                           intcon	equ	0xFF2
 25375                           postinc0	equ	0xFEE
 25376                           wreg	equ	0xFE8
 25377                           indf1	equ	0xFE7
 25378                           postdec1	equ	0xFE5
 25379                           fsr1h	equ	0xFE2
 25380                           fsr1l	equ	0xFE1
 25381                           indf2	equ	0xFDF
 25382                           postinc2	equ	0xFDE
 25383                           postdec2	equ	0xFDD
 25384                           plusw2	equ	0xFDB
 25385                           fsr2h	equ	0xFDA
 25386                           fsr2l	equ	0xFD9
 25387                           status	equ	0xFD8
 25388                           
 25389 ;; *************** function _ADC_SetupIO *****************
 25390 ;; Defined at:
 25391 ;;		line 150 in file "Library/ADC.c"
 25392 ;; Parameters:    Size  Location     Type
 25393 ;;  pChannel        1    wreg     enum E6742
 25394 ;; Auto vars:     Size  Location     Type
 25395 ;;  pChannel        1    2[BANK0 ] enum E6742
 25396 ;;  MASK            1    3[BANK0 ] unsigned char 
 25397 ;; Return value:  Size  Location     Type
 25398 ;;                  1    wreg      void 
 25399 ;; Registers used:
 25400 ;;		wreg, status,2, status,0
 25401 ;; Tracked objects:
 25402 ;;		On entry : 0/0
 25403 ;;		On exit  : 0/0
 25404 ;;		Unchanged: 0/0
 25405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25410 ;;Total ram usage:        4 bytes
 25411 ;; Hardware stack levels used:    1
 25412 ;; Hardware stack levels required when called:    7
 25413 ;; This function calls:
 25414 ;;		Nothing
 25415 ;; This function is called by:
 25416 ;;		_ADC_Init
 25417 ;; This function uses a non-reentrant model
 25418 ;;
 25419                           
 25420                           	psect	text121
 25421  0167AC                     __ptext121:
 25422                           	opt stack 0
 25423  0167AC                     _ADC_SetupIO:
 25424                           	opt stack 21
 25425                           
 25426                           ;incstack = 0
 25427                           ;ADC_SetupIO@pChannel stored from wreg
 25428  0167AC  0100               	movlb	0	; () banked
 25429  0167AE  6FB7               	movwf	ADC_SetupIO@pChannel& (0+255),b
 25430                           
 25431                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 25432  0167B0  C0B7  F0B5         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 25433  0167B4  0E01               	movlw	1
 25434  0167B6  0100               	movlb	0	; () banked
 25435  0167B8  6FB6               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 25436  0167BA  0100               	movlb	0	; () banked
 25437  0167BC  2BB5               	incf	??_ADC_SetupIO& (0+255),f,b
 25438  0167BE  D003               	goto	u11404
 25439  0167C0                     u11405:
 25440  0167C0  0100               	movlb	0	; () banked
 25441  0167C2  90D8               	bcf	status,0,c
 25442  0167C4  37B6               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 25443  0167C6                     u11404:
 25444  0167C6  0100               	movlb	0	; () banked
 25445  0167C8  2FB5               	decfsz	??_ADC_SetupIO& (0+255),f,b
 25446  0167CA  D7FA               	goto	u11405
 25447  0167CC  0100               	movlb	0	; () banked
 25448  0167CE  51B6               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 25449  0167D0  0AFF               	xorlw	255
 25450  0167D2  0100               	movlb	0	; () banked
 25451  0167D4  6FB8               	movwf	ADC_SetupIO@MASK& (0+255),b
 25452                           
 25453                           ;ADC.c: 153: ANCON0 &= MASK;
 25454  0167D6  0100               	movlb	0	; () banked
 25455  0167D8  51B8               	movf	ADC_SetupIO@MASK& (0+255),w,b
 25456  0167DA  16C1               	andwf	4033,f,c	;volatile
 25457                           
 25458                           ; BSR set to: 0
 25459  0167DC  0012               	return		;funcret
 25460  0167DE                     __end_of_ADC_SetupIO:
 25461                           	opt stack 0
 25462                           tosu	equ	0xFFF
 25463                           tosh	equ	0xFFE
 25464                           tosl	equ	0xFFD
 25465                           pclath	equ	0xFFA
 25466                           tblptru	equ	0xFF8
 25467                           tblptrh	equ	0xFF7
 25468                           tblptrl	equ	0xFF6
 25469                           tablat	equ	0xFF5
 25470                           prodh	equ	0xFF4
 25471                           prodl	equ	0xFF3
 25472                           intcon	equ	0xFF2
 25473                           postinc0	equ	0xFEE
 25474                           wreg	equ	0xFE8
 25475                           indf1	equ	0xFE7
 25476                           postdec1	equ	0xFE5
 25477                           fsr1h	equ	0xFE2
 25478                           fsr1l	equ	0xFE1
 25479                           indf2	equ	0xFDF
 25480                           postinc2	equ	0xFDE
 25481                           postdec2	equ	0xFDD
 25482                           plusw2	equ	0xFDB
 25483                           fsr2h	equ	0xFDA
 25484                           fsr2l	equ	0xFD9
 25485                           status	equ	0xFD8
 25486                           
 25487 ;; *************** function _ADC_SetChannel *****************
 25488 ;; Defined at:
 25489 ;;		line 155 in file "Library/ADC.c"
 25490 ;; Parameters:    Size  Location     Type
 25491 ;;  pChannel        1    wreg     enum E6742
 25492 ;; Auto vars:     Size  Location     Type
 25493 ;;  pChannel        1    1[BANK0 ] enum E6742
 25494 ;; Return value:  Size  Location     Type
 25495 ;;                  1    wreg      void 
 25496 ;; Registers used:
 25497 ;;		wreg, status,2, status,0
 25498 ;; Tracked objects:
 25499 ;;		On entry : 0/0
 25500 ;;		On exit  : 0/0
 25501 ;;		Unchanged: 0/0
 25502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25507 ;;Total ram usage:        2 bytes
 25508 ;; Hardware stack levels used:    1
 25509 ;; Hardware stack levels required when called:    7
 25510 ;; This function calls:
 25511 ;;		Nothing
 25512 ;; This function is called by:
 25513 ;;		_ADC_Init
 25514 ;;		_ADC_Start
 25515 ;;		_ADC_ISR
 25516 ;;		_ADC_Sample
 25517 ;; This function uses a non-reentrant model
 25518 ;;
 25519                           
 25520                           	psect	text122
 25521  016B1A                     __ptext122:
 25522                           	opt stack 0
 25523  016B1A                     _ADC_SetChannel:
 25524                           	opt stack 20
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;incstack = 0
 25528                           ;ADC_SetChannel@pChannel stored from wreg
 25529  016B1A  0100               	movlb	0	; () banked
 25530  016B1C  6FB6               	movwf	ADC_SetChannel@pChannel& (0+255),b
 25531                           
 25532                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 25533  016B1E  C0B6  F0B5         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 25534  016B22  0100               	movlb	0	; () banked
 25535  016B24  47B5               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25536  016B26  47B5               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25537  016B28  50C2               	movf	4034,w,c	;volatile
 25538  016B2A  0100               	movlb	0	; () banked
 25539  016B2C  19B5               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25540  016B2E  0BC3               	andlw	-61
 25541  016B30  19B5               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25542  016B32  6EC2               	movwf	4034,c	;volatile
 25543                           
 25544                           ; BSR set to: 0
 25545  016B34  0012               	return		;funcret
 25546  016B36                     __end_of_ADC_SetChannel:
 25547                           	opt stack 0
 25548                           tosu	equ	0xFFF
 25549                           tosh	equ	0xFFE
 25550                           tosl	equ	0xFFD
 25551                           pclath	equ	0xFFA
 25552                           tblptru	equ	0xFF8
 25553                           tblptrh	equ	0xFF7
 25554                           tblptrl	equ	0xFF6
 25555                           tablat	equ	0xFF5
 25556                           prodh	equ	0xFF4
 25557                           prodl	equ	0xFF3
 25558                           intcon	equ	0xFF2
 25559                           postinc0	equ	0xFEE
 25560                           wreg	equ	0xFE8
 25561                           indf1	equ	0xFE7
 25562                           postdec1	equ	0xFE5
 25563                           fsr1h	equ	0xFE2
 25564                           fsr1l	equ	0xFE1
 25565                           indf2	equ	0xFDF
 25566                           postinc2	equ	0xFDE
 25567                           postdec2	equ	0xFDD
 25568                           plusw2	equ	0xFDB
 25569                           fsr2h	equ	0xFDA
 25570                           fsr2l	equ	0xFD9
 25571                           status	equ	0xFD8
 25572                           
 25573 ;; *************** function _ADC_ConversionTime *****************
 25574 ;; Defined at:
 25575 ;;		line 199 in file "Library/ADC.c"
 25576 ;; Parameters:    Size  Location     Type
 25577 ;;  pCount          1    wreg     unsigned char 
 25578 ;; Auto vars:     Size  Location     Type
 25579 ;;  pCount          1    1[BANK0 ] unsigned char 
 25580 ;; Return value:  Size  Location     Type
 25581 ;;                  1    wreg      void 
 25582 ;; Registers used:
 25583 ;;		wreg, status,2, status,0
 25584 ;; Tracked objects:
 25585 ;;		On entry : 0/0
 25586 ;;		On exit  : 0/0
 25587 ;;		Unchanged: 0/0
 25588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25593 ;;Total ram usage:        2 bytes
 25594 ;; Hardware stack levels used:    1
 25595 ;; Hardware stack levels required when called:    7
 25596 ;; This function calls:
 25597 ;;		Nothing
 25598 ;; This function is called by:
 25599 ;;		_ADC_Init
 25600 ;; This function uses a non-reentrant model
 25601 ;;
 25602                           
 25603                           	psect	text123
 25604  0162BA                     __ptext123:
 25605                           	opt stack 0
 25606  0162BA                     _ADC_ConversionTime:
 25607                           	opt stack 21
 25608                           
 25609                           ; BSR set to: 0
 25610                           ;incstack = 0
 25611                           ;ADC_ConversionTime@pCount stored from wreg
 25612  0162BA  0100               	movlb	0	; () banked
 25613  0162BC  6FB6               	movwf	ADC_ConversionTime@pCount& (0+255),b
 25614                           
 25615                           ;ADC.c: 201: if (pCount == 10)
 25616  0162BE  0E0A               	movlw	10
 25617  0162C0  0100               	movlb	0	; () banked
 25618  0162C2  19B6               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25619  0162C4  B4D8               	btfsc	status,2,c
 25620  0162C6  D00A               	goto	u11370
 25621                           
 25622                           ; BSR set to: 0
 25623                           ;ADC.c: 203: else if (pCount == 14)
 25624                           
 25625                           ; BSR set to: 0
 25626                           
 25627                           ; BSR set to: 0
 25628                           ;ADC.c: 202: pCount -= 2;
 25629  0162C8  0E0E               	movlw	14
 25630  0162CA  0100               	movlb	0	; () banked
 25631  0162CC  19B6               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25632  0162CE  B4D8               	btfsc	status,2,c
 25633  0162D0  D005               	goto	u11370
 25634                           
 25635                           ; BSR set to: 0
 25636                           ;ADC.c: 205: else if (pCount == 18)
 25637                           
 25638                           ; BSR set to: 0
 25639                           
 25640                           ; BSR set to: 0
 25641                           ;ADC.c: 204: pCount -= 2;
 25642  0162D2  0E12               	movlw	18
 25643  0162D4  0100               	movlb	0	; () banked
 25644  0162D6  19B6               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25645  0162D8  A4D8               	btfss	status,2,c
 25646  0162DA  D003               	goto	l1313
 25647  0162DC                     u11370:
 25648                           
 25649                           ; BSR set to: 0
 25650                           ;ADC.c: 206: pCount -= 2;
 25651  0162DC  0E02               	movlw	2
 25652  0162DE  0100               	movlb	0	; () banked
 25653  0162E0  5FB6               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 25654  0162E2                     l1313:
 25655                           
 25656                           ; BSR set to: 0
 25657                           ;ADC.c: 208: pCount <<= 1;
 25658                           
 25659                           ; BSR set to: 0
 25660                           
 25661                           ; BSR set to: 0
 25662  0162E2  0100               	movlb	0	; () banked
 25663  0162E4  90D8               	bcf	status,0,c
 25664  0162E6  37B6               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 25665                           
 25666                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 25667  0162E8  C0B6  F0B5         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 25668  0162EC  0100               	movlb	0	; () banked
 25669  0162EE  47B5               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25670  0162F0  47B5               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25671  0162F2  47B5               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25672  0162F4  50C1               	movf	4033,w,c	;volatile
 25673  0162F6  0100               	movlb	0	; () banked
 25674  0162F8  19B5               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25675  0162FA  0BC7               	andlw	-57
 25676  0162FC  19B5               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25677  0162FE  6EC1               	movwf	4033,c	;volatile
 25678                           
 25679                           ; BSR set to: 0
 25680  016300  0012               	return		;funcret
 25681  016302                     __end_of_ADC_ConversionTime:
 25682                           	opt stack 0
 25683                           tosu	equ	0xFFF
 25684                           tosh	equ	0xFFE
 25685                           tosl	equ	0xFFD
 25686                           pclath	equ	0xFFA
 25687                           tblptru	equ	0xFF8
 25688                           tblptrh	equ	0xFF7
 25689                           tblptrl	equ	0xFF6
 25690                           tablat	equ	0xFF5
 25691                           prodh	equ	0xFF4
 25692                           prodl	equ	0xFF3
 25693                           intcon	equ	0xFF2
 25694                           postinc0	equ	0xFEE
 25695                           wreg	equ	0xFE8
 25696                           indf1	equ	0xFE7
 25697                           postdec1	equ	0xFE5
 25698                           fsr1h	equ	0xFE2
 25699                           fsr1l	equ	0xFE1
 25700                           indf2	equ	0xFDF
 25701                           postinc2	equ	0xFDE
 25702                           postdec2	equ	0xFDD
 25703                           plusw2	equ	0xFDB
 25704                           fsr2h	equ	0xFDA
 25705                           fsr2l	equ	0xFD9
 25706                           status	equ	0xFD8
 25707                           
 25708 ;; *************** function _ADC_ClockDivision *****************
 25709 ;; Defined at:
 25710 ;;		line 159 in file "Library/ADC.c"
 25711 ;; Parameters:    Size  Location     Type
 25712 ;;  pDivide         1    wreg     unsigned char 
 25713 ;; Auto vars:     Size  Location     Type
 25714 ;;  pDivide         1    0[BANK0 ] unsigned char 
 25715 ;;  unfound         1    2[BANK0 ] unsigned char 
 25716 ;;  reg             1    1[BANK0 ] unsigned char 
 25717 ;; Return value:  Size  Location     Type
 25718 ;;                  1    wreg      void 
 25719 ;; Registers used:
 25720 ;;		wreg, status,2, status,0
 25721 ;; Tracked objects:
 25722 ;;		On entry : 0/0
 25723 ;;		On exit  : 0/0
 25724 ;;		Unchanged: 0/0
 25725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25727 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25729 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25730 ;;Total ram usage:        3 bytes
 25731 ;; Hardware stack levels used:    1
 25732 ;; Hardware stack levels required when called:    7
 25733 ;; This function calls:
 25734 ;;		Nothing
 25735 ;; This function is called by:
 25736 ;;		_ADC_Init
 25737 ;; This function uses a non-reentrant model
 25738 ;;
 25739                           
 25740                           	psect	text124
 25741  01557C                     __ptext124:
 25742                           	opt stack 0
 25743  01557C                     _ADC_ClockDivision:
 25744                           	opt stack 21
 25745                           
 25746                           ; BSR set to: 0
 25747                           ;incstack = 0
 25748                           ;ADC_ClockDivision@pDivide stored from wreg
 25749  01557C  0100               	movlb	0	; () banked
 25750  01557E  6FB5               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25751                           
 25752                           ;ADC.c: 161: UINT8 reg = 0;
 25753  015580  0E00               	movlw	0
 25754  015582  0100               	movlb	0	; () banked
 25755  015584  6FB6               	movwf	ADC_ClockDivision@reg& (0+255),b
 25756                           
 25757                           ;ADC.c: 162: bool unfound = 1;
 25758  015586  0E01               	movlw	1
 25759  015588  D002               	goto	L15
 25760  01558A                     
 25761                           ; BSR set to: 0
 25762                           ;ADC.c: 167: reg = 0;
 25763                           
 25764                           ; BSR set to: 0
 25765  01558A  0E00               	movlw	0
 25766  01558C  D00C               	goto	L20
 25767  01558E                     L15:
 25768  01558E  0100               	movlb	0	; () banked
 25769  015590  6FB7               	movwf	ADC_ClockDivision@unfound& (0+255),b
 25770                           
 25771                           ;ADC.c: 169: break;
 25772  015592  D02D               	goto	l1296
 25773  015594                     
 25774                           ; BSR set to: 0
 25775                           ;ADC.c: 171: reg = 0b100;
 25776                           
 25777                           ; BSR set to: 0
 25778  015594  0E04               	movlw	4
 25779  015596  D007               	goto	L20
 25780  015598                     
 25781                           ; BSR set to: 0
 25782                           ;ADC.c: 175: reg = 0b001;
 25783                           
 25784                           ; BSR set to: 0
 25785  015598  0E01               	movlw	1
 25786  01559A  D005               	goto	L20
 25787  01559C                     
 25788                           ; BSR set to: 0
 25789                           ;ADC.c: 179: reg = 0b101;
 25790                           
 25791                           ; BSR set to: 0
 25792  01559C  0E05               	movlw	5
 25793  01559E  D003               	goto	L20
 25794  0155A0                     
 25795                           ; BSR set to: 0
 25796                           ;ADC.c: 183: reg = 0b010;
 25797                           
 25798                           ; BSR set to: 0
 25799  0155A0  0E02               	movlw	2
 25800  0155A2  D001               	goto	L20
 25801  0155A4                     
 25802                           ; BSR set to: 0
 25803                           ;ADC.c: 187: reg = 0b110;
 25804                           
 25805                           ; BSR set to: 0
 25806  0155A4  0E06               	movlw	6
 25807  0155A6                     L20:
 25808  0155A6  0100               	movlb	0	; () banked
 25809  0155A8  6FB6               	movwf	ADC_ClockDivision@reg& (0+255),b
 25810                           
 25811                           ;ADC.c: 188: unfound = 0;
 25812  0155AA  0E00               	movlw	0
 25813  0155AC  D7F0               	goto	L15
 25814  0155AE                     
 25815                           ; BSR set to: 0
 25816                           ;ADC.c: 191: if (pDivide > 2)
 25817                           
 25818                           ; BSR set to: 0
 25819  0155AE  0E02               	movlw	2
 25820  0155B0  0100               	movlb	0	; () banked
 25821  0155B2  65B5               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 25822  0155B4  D003               	goto	l1303
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;ADC.c: 192: pDivide--;
 25826  0155B6  0100               	movlb	0	; () banked
 25827  0155B8  07B5               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 25828  0155BA  D019               	goto	l1296
 25829  0155BC                     l1303:
 25830                           
 25831                           ; BSR set to: 0
 25832                           ;ADC.c: 193: else
 25833                           ;ADC.c: 194: pDivide = 2;
 25834                           
 25835                           ; BSR set to: 0
 25836  0155BC  0E02               	movlw	2
 25837  0155BE  0100               	movlb	0	; () banked
 25838  0155C0  6FB5               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25839                           
 25840                           ; BSR set to: 0
 25841                           ;ADC.c: 195: };
 25842  0155C2  D015               	goto	l1296
 25843  0155C4                     
 25844                           ; BSR set to: 0
 25845                           
 25846                           ; BSR set to: 0
 25847  0155C4  0100               	movlb	0	; () banked
 25848  0155C6  51B5               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 25849                           
 25850                           ; Switch size 1, requested type "space"
 25851                           ; Number of cases is 6, Range of values is 2 to 64
 25852                           ; switch strategies available:
 25853                           ; Name         Instructions Cycles
 25854                           ; simple_byte           19    10 (average)
 25855                           ;	Chosen strategy is simple_byte
 25856  0155C8  0A02               	xorlw	2	; case 2
 25857  0155CA  B4D8               	btfsc	status,2,c
 25858  0155CC  D7DE               	goto	l1295
 25859  0155CE  0A06               	xorlw	6	; case 4
 25860  0155D0  B4D8               	btfsc	status,2,c
 25861  0155D2  D7E0               	goto	l1297
 25862  0155D4  0A0C               	xorlw	12	; case 8
 25863  0155D6  B4D8               	btfsc	status,2,c
 25864  0155D8  D7DF               	goto	l1298
 25865  0155DA  0A18               	xorlw	24	; case 16
 25866  0155DC  B4D8               	btfsc	status,2,c
 25867  0155DE  D7DE               	goto	l1299
 25868  0155E0  0A30               	xorlw	48	; case 32
 25869  0155E2  B4D8               	btfsc	status,2,c
 25870  0155E4  D7DD               	goto	l1300
 25871  0155E6  0A60               	xorlw	96	; case 64
 25872  0155E8  B4D8               	btfsc	status,2,c
 25873  0155EA  D7DC               	goto	l1301
 25874  0155EC  D7E0               	goto	l1302
 25875  0155EE                     l1296:
 25876                           
 25877                           ; BSR set to: 0
 25878                           
 25879                           ; BSR set to: 0
 25880                           
 25881                           ; BSR set to: 0
 25882  0155EE  0100               	movlb	0	; () banked
 25883  0155F0  51B7               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 25884  0155F2  0100               	movlb	0	; () banked
 25885  0155F4  A4D8               	btfss	status,2,c
 25886  0155F6  D7E6               	goto	l1294
 25887                           
 25888                           ; BSR set to: 0
 25889                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 25890                           
 25891                           ; BSR set to: 0
 25892  0155F8  50C1               	movf	4033,w,c	;volatile
 25893  0155FA  0100               	movlb	0	; () banked
 25894  0155FC  19B6               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25895  0155FE  0BF8               	andlw	-8
 25896  015600  19B6               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25897  015602  6EC1               	movwf	4033,c	;volatile
 25898                           
 25899                           ; BSR set to: 0
 25900  015604  0012               	return		;funcret
 25901  015606                     __end_of_ADC_ClockDivision:
 25902                           	opt stack 0
 25903                           tosu	equ	0xFFF
 25904                           tosh	equ	0xFFE
 25905                           tosl	equ	0xFFD
 25906                           pclath	equ	0xFFA
 25907                           tblptru	equ	0xFF8
 25908                           tblptrh	equ	0xFF7
 25909                           tblptrl	equ	0xFF6
 25910                           tablat	equ	0xFF5
 25911                           prodh	equ	0xFF4
 25912                           prodl	equ	0xFF3
 25913                           intcon	equ	0xFF2
 25914                           postinc0	equ	0xFEE
 25915                           wreg	equ	0xFE8
 25916                           indf1	equ	0xFE7
 25917                           postdec1	equ	0xFE5
 25918                           fsr1h	equ	0xFE2
 25919                           fsr1l	equ	0xFE1
 25920                           indf2	equ	0xFDF
 25921                           postinc2	equ	0xFDE
 25922                           postdec2	equ	0xFDD
 25923                           plusw2	equ	0xFDB
 25924                           fsr2h	equ	0xFDA
 25925                           fsr2l	equ	0xFD9
 25926                           status	equ	0xFD8
 25927                           
 25928 ;; *************** function _ADC_Calibrate *****************
 25929 ;; Defined at:
 25930 ;;		line 63 in file "Library/ADC.c"
 25931 ;; Parameters:    Size  Location     Type
 25932 ;;		None
 25933 ;; Auto vars:     Size  Location     Type
 25934 ;;		None
 25935 ;; Return value:  Size  Location     Type
 25936 ;;                  1    wreg      void 
 25937 ;; Registers used:
 25938 ;;		cstack
 25939 ;; Tracked objects:
 25940 ;;		On entry : 0/0
 25941 ;;		On exit  : 0/0
 25942 ;;		Unchanged: 0/0
 25943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25948 ;;Total ram usage:        0 bytes
 25949 ;; Hardware stack levels used:    1
 25950 ;; Hardware stack levels required when called:    8
 25951 ;; This function calls:
 25952 ;;		_ADC_Off
 25953 ;;		_ADC_On
 25954 ;; This function is called by:
 25955 ;;		_ADC_Init
 25956 ;; This function uses a non-reentrant model
 25957 ;;
 25958                           
 25959                           	psect	text125
 25960  016C24                     __ptext125:
 25961                           	opt stack 0
 25962  016C24                     _ADC_Calibrate:
 25963                           	opt stack 20
 25964                           
 25965                           ;ADC.c: 65: ADC_On();
 25966                           
 25967                           ; BSR set to: 0
 25968                           ;incstack = 0
 25969  016C24  EC9F  F0B6         	call	_ADC_On	;wreg free
 25970                           
 25971                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 25972  016C28  8CC1               	bsf	4033,6,c	;volatile
 25973                           
 25974                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 25975  016C2A  82C2               	bsf	4034,1,c	;volatile
 25976  016C2C  B2C2               	btfsc	4034,1,c	;volatile
 25977  016C2E  D7FE               	goto	l1254
 25978                           
 25979                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 25980  016C30  9CC1               	bcf	4033,6,c	;volatile
 25981                           
 25982                           ;ADC.c: 73: ADC_Off();
 25983  016C32  EC91  F0B6         	call	_ADC_Off	;wreg free
 25984  016C36  0012               	return		;funcret
 25985  016C38                     __end_of_ADC_Calibrate:
 25986                           	opt stack 0
 25987                           tosu	equ	0xFFF
 25988                           tosh	equ	0xFFE
 25989                           tosl	equ	0xFFD
 25990                           pclath	equ	0xFFA
 25991                           tblptru	equ	0xFF8
 25992                           tblptrh	equ	0xFF7
 25993                           tblptrl	equ	0xFF6
 25994                           tablat	equ	0xFF5
 25995                           prodh	equ	0xFF4
 25996                           prodl	equ	0xFF3
 25997                           intcon	equ	0xFF2
 25998                           postinc0	equ	0xFEE
 25999                           wreg	equ	0xFE8
 26000                           indf1	equ	0xFE7
 26001                           postdec1	equ	0xFE5
 26002                           fsr1h	equ	0xFE2
 26003                           fsr1l	equ	0xFE1
 26004                           indf2	equ	0xFDF
 26005                           postinc2	equ	0xFDE
 26006                           postdec2	equ	0xFDD
 26007                           plusw2	equ	0xFDB
 26008                           fsr2h	equ	0xFDA
 26009                           fsr2l	equ	0xFD9
 26010                           status	equ	0xFD8
 26011                           
 26012 ;; *************** function _ADC_On *****************
 26013 ;; Defined at:
 26014 ;;		line 85 in file "Library/ADC.c"
 26015 ;; Parameters:    Size  Location     Type
 26016 ;;		None
 26017 ;; Auto vars:     Size  Location     Type
 26018 ;;		None
 26019 ;; Return value:  Size  Location     Type
 26020 ;;                  1    wreg      void 
 26021 ;; Registers used:
 26022 ;;		None
 26023 ;; Tracked objects:
 26024 ;;		On entry : 0/0
 26025 ;;		On exit  : 0/0
 26026 ;;		Unchanged: 0/0
 26027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26032 ;;Total ram usage:        0 bytes
 26033 ;; Hardware stack levels used:    1
 26034 ;; Hardware stack levels required when called:    7
 26035 ;; This function calls:
 26036 ;;		Nothing
 26037 ;; This function is called by:
 26038 ;;		_ADC_Calibrate
 26039 ;;		_ADC_Start
 26040 ;;		_ADC_ISR
 26041 ;;		_ADC_Sample
 26042 ;; This function uses a non-reentrant model
 26043 ;;
 26044                           
 26045                           	psect	text126
 26046  016D3E                     __ptext126:
 26047                           	opt stack 0
 26048  016D3E                     _ADC_On:
 26049                           	opt stack 20
 26050                           
 26051                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 26052                           
 26053                           ;incstack = 0
 26054  016D3E  80C2               	bsf	4034,0,c	;volatile
 26055                           
 26056                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 26057  016D40  9C9E               	bcf	3998,6,c	;volatile
 26058  016D42  0012               	return		;funcret
 26059  016D44                     __end_of_ADC_On:
 26060                           	opt stack 0
 26061                           tosu	equ	0xFFF
 26062                           tosh	equ	0xFFE
 26063                           tosl	equ	0xFFD
 26064                           pclath	equ	0xFFA
 26065                           tblptru	equ	0xFF8
 26066                           tblptrh	equ	0xFF7
 26067                           tblptrl	equ	0xFF6
 26068                           tablat	equ	0xFF5
 26069                           prodh	equ	0xFF4
 26070                           prodl	equ	0xFF3
 26071                           intcon	equ	0xFF2
 26072                           postinc0	equ	0xFEE
 26073                           wreg	equ	0xFE8
 26074                           indf1	equ	0xFE7
 26075                           postdec1	equ	0xFE5
 26076                           fsr1h	equ	0xFE2
 26077                           fsr1l	equ	0xFE1
 26078                           indf2	equ	0xFDF
 26079                           postinc2	equ	0xFDE
 26080                           postdec2	equ	0xFDD
 26081                           plusw2	equ	0xFDB
 26082                           fsr2h	equ	0xFDA
 26083                           fsr2l	equ	0xFD9
 26084                           status	equ	0xFD8
 26085                           
 26086 ;; *************** function _ADC_Off *****************
 26087 ;; Defined at:
 26088 ;;		line 94 in file "Library/ADC.c"
 26089 ;; Parameters:    Size  Location     Type
 26090 ;;		None
 26091 ;; Auto vars:     Size  Location     Type
 26092 ;;		None
 26093 ;; Return value:  Size  Location     Type
 26094 ;;                  1    wreg      void 
 26095 ;; Registers used:
 26096 ;;		None
 26097 ;; Tracked objects:
 26098 ;;		On entry : 0/0
 26099 ;;		On exit  : 0/0
 26100 ;;		Unchanged: 0/0
 26101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26106 ;;Total ram usage:        0 bytes
 26107 ;; Hardware stack levels used:    1
 26108 ;; Hardware stack levels required when called:    7
 26109 ;; This function calls:
 26110 ;;		Nothing
 26111 ;; This function is called by:
 26112 ;;		_ADC_Calibrate
 26113 ;;		_ADC_Start
 26114 ;;		_ADC_ISR
 26115 ;;		_ADC_Sample
 26116 ;; This function uses a non-reentrant model
 26117 ;;
 26118                           
 26119                           	psect	text127
 26120  016D22                     __ptext127:
 26121                           	opt stack 0
 26122  016D22                     _ADC_Off:
 26123                           	opt stack 20
 26124                           
 26125                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 26126                           
 26127                           ;incstack = 0
 26128  016D22  90C2               	bcf	4034,0,c	;volatile
 26129                           
 26130                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 26131  016D24  9C9E               	bcf	3998,6,c	;volatile
 26132                           
 26133                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 26134  016D26  9C9D               	bcf	3997,6,c	;volatile
 26135  016D28  0012               	return		;funcret
 26136  016D2A                     __end_of_ADC_Off:
 26137                           	opt stack 0
 26138                           tosu	equ	0xFFF
 26139                           tosh	equ	0xFFE
 26140                           tosl	equ	0xFFD
 26141                           pclath	equ	0xFFA
 26142                           tblptru	equ	0xFF8
 26143                           tblptrh	equ	0xFF7
 26144                           tblptrl	equ	0xFF6
 26145                           tablat	equ	0xFF5
 26146                           prodh	equ	0xFF4
 26147                           prodl	equ	0xFF3
 26148                           intcon	equ	0xFF2
 26149                           postinc0	equ	0xFEE
 26150                           wreg	equ	0xFE8
 26151                           indf1	equ	0xFE7
 26152                           postdec1	equ	0xFE5
 26153                           fsr1h	equ	0xFE2
 26154                           fsr1l	equ	0xFE1
 26155                           indf2	equ	0xFDF
 26156                           postinc2	equ	0xFDE
 26157                           postdec2	equ	0xFDD
 26158                           plusw2	equ	0xFDB
 26159                           fsr2h	equ	0xFDA
 26160                           fsr2l	equ	0xFD9
 26161                           status	equ	0xFD8
 26162                           
 26163 ;; *************** function _getMode *****************
 26164 ;; Defined at:
 26165 ;;		line 100 in file "main.c"
 26166 ;; Parameters:    Size  Location     Type
 26167 ;;		None
 26168 ;; Auto vars:     Size  Location     Type
 26169 ;;		None
 26170 ;; Return value:  Size  Location     Type
 26171 ;;                  1    wreg      void 
 26172 ;; Registers used:
 26173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26174 ;; Tracked objects:
 26175 ;;		On entry : 0/0
 26176 ;;		On exit  : 0/0
 26177 ;;		Unchanged: 0/0
 26178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26183 ;;Total ram usage:        0 bytes
 26184 ;; Hardware stack levels used:    1
 26185 ;; Hardware stack levels required when called:   16
 26186 ;; This function calls:
 26187 ;;		_HMI_DIPSwitch
 26188 ;;		_HMI_DownSwitch
 26189 ;;		_HMI_LeftSwitch
 26190 ;;		_HMI_Poll
 26191 ;;		_HMI_RightSwitch
 26192 ;;		_HMI_UpSwitch
 26193 ;;		_MXK_DIPSwitch
 26194 ;;		_MXK_TestButton
 26195 ;; This function is called by:
 26196 ;;		_main
 26197 ;; This function uses a non-reentrant model
 26198 ;;
 26199                           
 26200                           	psect	text128
 26201  01473C                     __ptext128:
 26202                           	opt stack 0
 26203  01473C                     _getMode:
 26204                           	opt stack 14
 26205                           
 26206                           ;main.c: 101: HMI_Poll();
 26207                           
 26208                           ;incstack = 0
 26209  01473C  EC26  F0AD         	call	_HMI_Poll	;wreg free
 26210                           
 26211                           ;main.c: 102: mode = 0;
 26212  014740  0E00               	movlw	0
 26213  014742  0100               	movlb	0	; () banked
 26214  014744  6F76               	movwf	(_mode+1)& (0+255),b
 26215  014746  0E00               	movlw	0
 26216  014748  6F75               	movwf	_mode& (0+255),b
 26217                           
 26218                           ; BSR set to: 0
 26219                           ;main.c: 103: if (HMIBoard.mUp.mGetState()) {
 26220  01474A  EE23  F061         	lfsr	2,_HMIBoard+35
 26221  01474E  D801               	call	u12418
 26222  014750  D00A               	goto	u12419
 26223  014752                     u12418:
 26224  014752  0005               	push	
 26225  014754  6EFA               	movwf	pclath,c
 26226  014756  50DE               	movf	postinc2,w,c
 26227  014758  6EFD               	movwf	tosl,c
 26228  01475A  50DE               	movf	postinc2,w,c
 26229  01475C  6EFE               	movwf	tosh,c
 26230  01475E  50DE               	movf	postinc2,w,c
 26231  014760  6EFF               	movwf	tosu,c
 26232  014762  50FA               	movf	pclath,w,c
 26233  014764  0012               	return		;indir
 26234  014766                     u12419:
 26235  014766  0900               	iorlw	0
 26236  014768  B4D8               	btfsc	status,2,c
 26237  01476A  D005               	goto	l2326
 26238                           
 26239                           ;main.c: 104: mode = 1;
 26240  01476C  0E00               	movlw	0
 26241  01476E  0100               	movlb	0	; () banked
 26242  014770  6F76               	movwf	(_mode+1)& (0+255),b
 26243  014772  0E01               	movlw	1
 26244  014774  6F75               	movwf	_mode& (0+255),b
 26245  014776                     l2326:
 26246                           
 26247                           ;main.c: 105: }
 26248                           ;main.c: 106: if (HMIBoard.mRight.mGetState()) {
 26249                           
 26250                           ; BSR set to: 0
 26251  014776  EE23  F04D         	lfsr	2,_HMIBoard+15
 26252  01477A  D801               	call	u12438
 26253  01477C  D00A               	goto	u12439
 26254  01477E                     u12438:
 26255  01477E  0005               	push	
 26256  014780  6EFA               	movwf	pclath,c
 26257  014782  50DE               	movf	postinc2,w,c
 26258  014784  6EFD               	movwf	tosl,c
 26259  014786  50DE               	movf	postinc2,w,c
 26260  014788  6EFE               	movwf	tosh,c
 26261  01478A  50DE               	movf	postinc2,w,c
 26262  01478C  6EFF               	movwf	tosu,c
 26263  01478E  50FA               	movf	pclath,w,c
 26264  014790  0012               	return		;indir
 26265  014792                     u12439:
 26266  014792  0900               	iorlw	0
 26267  014794  B4D8               	btfsc	status,2,c
 26268  014796  D005               	goto	l2327
 26269                           
 26270                           ;main.c: 107: mode = 2;
 26271  014798  0E00               	movlw	0
 26272  01479A  0100               	movlb	0	; () banked
 26273  01479C  6F76               	movwf	(_mode+1)& (0+255),b
 26274  01479E  0E02               	movlw	2
 26275  0147A0  6F75               	movwf	_mode& (0+255),b
 26276  0147A2                     l2327:
 26277                           
 26278                           ;main.c: 108: }
 26279                           ;main.c: 109: if (HMIBoard.mDown.mGetState()) {
 26280                           
 26281                           ; BSR set to: 0
 26282  0147A2  EE23  F06B         	lfsr	2,_HMIBoard+45
 26283  0147A6  D801               	call	u12458
 26284  0147A8  D00A               	goto	u12459
 26285  0147AA                     u12458:
 26286  0147AA  0005               	push	
 26287  0147AC  6EFA               	movwf	pclath,c
 26288  0147AE  50DE               	movf	postinc2,w,c
 26289  0147B0  6EFD               	movwf	tosl,c
 26290  0147B2  50DE               	movf	postinc2,w,c
 26291  0147B4  6EFE               	movwf	tosh,c
 26292  0147B6  50DE               	movf	postinc2,w,c
 26293  0147B8  6EFF               	movwf	tosu,c
 26294  0147BA  50FA               	movf	pclath,w,c
 26295  0147BC  0012               	return		;indir
 26296  0147BE                     u12459:
 26297  0147BE  0900               	iorlw	0
 26298  0147C0  B4D8               	btfsc	status,2,c
 26299  0147C2  D005               	goto	l2328
 26300                           
 26301                           ;main.c: 110: mode = 3;
 26302  0147C4  0E00               	movlw	0
 26303  0147C6  0100               	movlb	0	; () banked
 26304  0147C8  6F76               	movwf	(_mode+1)& (0+255),b
 26305  0147CA  0E03               	movlw	3
 26306  0147CC  6F75               	movwf	_mode& (0+255),b
 26307  0147CE                     l2328:
 26308                           
 26309                           ;main.c: 111: }
 26310                           ;main.c: 112: if (HMIBoard.mLeft.mGetState()) {
 26311                           
 26312                           ; BSR set to: 0
 26313  0147CE  EE23  F057         	lfsr	2,_HMIBoard+25
 26314  0147D2  D801               	call	u12478
 26315  0147D4  D00A               	goto	u12479
 26316  0147D6                     u12478:
 26317  0147D6  0005               	push	
 26318  0147D8  6EFA               	movwf	pclath,c
 26319  0147DA  50DE               	movf	postinc2,w,c
 26320  0147DC  6EFD               	movwf	tosl,c
 26321  0147DE  50DE               	movf	postinc2,w,c
 26322  0147E0  6EFE               	movwf	tosh,c
 26323  0147E2  50DE               	movf	postinc2,w,c
 26324  0147E4  6EFF               	movwf	tosu,c
 26325  0147E6  50FA               	movf	pclath,w,c
 26326  0147E8  0012               	return		;indir
 26327  0147EA                     u12479:
 26328  0147EA  0900               	iorlw	0
 26329  0147EC  B4D8               	btfsc	status,2,c
 26330  0147EE  0012               	return	
 26331                           
 26332                           ;main.c: 113: mode = 4;
 26333  0147F0  0E00               	movlw	0
 26334  0147F2  0100               	movlb	0	; () banked
 26335  0147F4  6F76               	movwf	(_mode+1)& (0+255),b
 26336  0147F6  0E04               	movlw	4
 26337  0147F8  6F75               	movwf	_mode& (0+255),b
 26338  0147FA  0012               	return	
 26339  0147FC                     __end_of_getMode:
 26340                           	opt stack 0
 26341                           tosu	equ	0xFFF
 26342                           tosh	equ	0xFFE
 26343                           tosl	equ	0xFFD
 26344                           pclath	equ	0xFFA
 26345                           tblptru	equ	0xFF8
 26346                           tblptrh	equ	0xFF7
 26347                           tblptrl	equ	0xFF6
 26348                           tablat	equ	0xFF5
 26349                           prodh	equ	0xFF4
 26350                           prodl	equ	0xFF3
 26351                           intcon	equ	0xFF2
 26352                           postinc0	equ	0xFEE
 26353                           wreg	equ	0xFE8
 26354                           indf1	equ	0xFE7
 26355                           postdec1	equ	0xFE5
 26356                           fsr1h	equ	0xFE2
 26357                           fsr1l	equ	0xFE1
 26358                           indf2	equ	0xFDF
 26359                           postinc2	equ	0xFDE
 26360                           postdec2	equ	0xFDD
 26361                           plusw2	equ	0xFDB
 26362                           fsr2h	equ	0xFDA
 26363                           fsr2l	equ	0xFD9
 26364                           status	equ	0xFD8
 26365                           
 26366 ;; *************** function _HMI_Poll *****************
 26367 ;; Defined at:
 26368 ;;		line 252 in file "HMI.c"
 26369 ;; Parameters:    Size  Location     Type
 26370 ;;		None
 26371 ;; Auto vars:     Size  Location     Type
 26372 ;;		None
 26373 ;; Return value:  Size  Location     Type
 26374 ;;                  1    wreg      void 
 26375 ;; Registers used:
 26376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26377 ;; Tracked objects:
 26378 ;;		On entry : 0/0
 26379 ;;		On exit  : 0/0
 26380 ;;		Unchanged: 0/0
 26381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26386 ;;Total ram usage:        0 bytes
 26387 ;; Hardware stack levels used:    1
 26388 ;; Hardware stack levels required when called:   15
 26389 ;; This function calls:
 26390 ;;		_Button_Poll
 26391 ;; This function is called by:
 26392 ;;		_getMode
 26393 ;;		_safeToGo
 26394 ;;		_main
 26395 ;; This function uses a non-reentrant model
 26396 ;;
 26397                           
 26398                           	psect	text129
 26399  015A4C                     __ptext129:
 26400                           	opt stack 0
 26401  015A4C                     _HMI_Poll:
 26402                           	opt stack 13
 26403                           
 26404                           ;HMI.c: 254: TRISE = 0xFC;
 26405                           
 26406                           ;incstack = 0
 26407  015A4C  0EFC               	movlw	252
 26408  015A4E  6E96               	movwf	3990,c	;volatile
 26409                           
 26410                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 26411  015A50  0E6E               	movlw	low (_HMIBoard+48)
 26412  015A52  0100               	movlb	0	; () banked
 26413  015A54  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 26414  015A56  0E03               	movlw	high (_HMIBoard+48)
 26415  015A58  0100               	movlb	0	; () banked
 26416  015A5A  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26417  015A5C  0E01               	movlw	1
 26418  015A5E  0100               	movlb	0	; () banked
 26419  015A60  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 26420  015A62  ECD3  F099         	call	_Button_Poll	;wreg free
 26421                           
 26422                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 26423  015A66  0E50               	movlw	low (_HMIBoard+18)
 26424  015A68  0100               	movlb	0	; () banked
 26425  015A6A  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 26426  015A6C  0E03               	movlw	high (_HMIBoard+18)
 26427  015A6E  0100               	movlb	0	; () banked
 26428  015A70  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26429  015A72  0E01               	movlw	1
 26430  015A74  0100               	movlb	0	; () banked
 26431  015A76  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 26432  015A78  ECD3  F099         	call	_Button_Poll	;wreg free
 26433                           
 26434                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 26435  015A7C  0E46               	movlw	low (_HMIBoard+8)
 26436  015A7E  0100               	movlb	0	; () banked
 26437  015A80  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 26438  015A82  0E03               	movlw	high (_HMIBoard+8)
 26439  015A84  0100               	movlb	0	; () banked
 26440  015A86  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26441  015A88  0E01               	movlw	1
 26442  015A8A  0100               	movlb	0	; () banked
 26443  015A8C  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 26444  015A8E  ECD3  F099         	call	_Button_Poll	;wreg free
 26445                           
 26446                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 26447  015A92  0E5A               	movlw	low (_HMIBoard+28)
 26448  015A94  0100               	movlb	0	; () banked
 26449  015A96  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 26450  015A98  0E03               	movlw	high (_HMIBoard+28)
 26451  015A9A  0100               	movlb	0	; () banked
 26452  015A9C  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26453  015A9E  0E01               	movlw	1
 26454  015AA0  0100               	movlb	0	; () banked
 26455  015AA2  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 26456  015AA4  ECD3  F099         	call	_Button_Poll	;wreg free
 26457                           
 26458                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 26459  015AA8  0E64               	movlw	low (_HMIBoard+38)
 26460  015AAA  0100               	movlb	0	; () banked
 26461  015AAC  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 26462  015AAE  0E03               	movlw	high (_HMIBoard+38)
 26463  015AB0  0100               	movlb	0	; () banked
 26464  015AB2  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26465  015AB4  0E01               	movlw	1
 26466  015AB6  0100               	movlb	0	; () banked
 26467  015AB8  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 26468  015ABA  ECD3  F099         	call	_Button_Poll	;wreg free
 26469  015ABE  0012               	return		;funcret
 26470  015AC0                     __end_of_HMI_Poll:
 26471                           	opt stack 0
 26472                           tosu	equ	0xFFF
 26473                           tosh	equ	0xFFE
 26474                           tosl	equ	0xFFD
 26475                           pclath	equ	0xFFA
 26476                           tblptru	equ	0xFF8
 26477                           tblptrh	equ	0xFF7
 26478                           tblptrl	equ	0xFF6
 26479                           tablat	equ	0xFF5
 26480                           prodh	equ	0xFF4
 26481                           prodl	equ	0xFF3
 26482                           intcon	equ	0xFF2
 26483                           postinc0	equ	0xFEE
 26484                           wreg	equ	0xFE8
 26485                           indf1	equ	0xFE7
 26486                           postdec1	equ	0xFE5
 26487                           fsr1h	equ	0xFE2
 26488                           fsr1l	equ	0xFE1
 26489                           indf2	equ	0xFDF
 26490                           postinc2	equ	0xFDE
 26491                           postdec2	equ	0xFDD
 26492                           plusw2	equ	0xFDB
 26493                           fsr2h	equ	0xFDA
 26494                           fsr2l	equ	0xFD9
 26495                           status	equ	0xFD8
 26496                           
 26497 ;; *************** function _Button_Poll *****************
 26498 ;; Defined at:
 26499 ;;		line 57 in file "Library/Button.c"
 26500 ;; Parameters:    Size  Location     Type
 26501 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 26502 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 26503 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 26504 ;; Auto vars:     Size  Location     Type
 26505 ;;  Pin             1   35[BANK0 ] unsigned char 
 26506 ;; Return value:  Size  Location     Type
 26507 ;;                  1    wreg      unsigned char 
 26508 ;; Registers used:
 26509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26510 ;; Tracked objects:
 26511 ;;		On entry : 0/0
 26512 ;;		On exit  : 0/0
 26513 ;;		Unchanged: 0/0
 26514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26515 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26517 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26518 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26519 ;;Total ram usage:        9 bytes
 26520 ;; Hardware stack levels used:    1
 26521 ;; Hardware stack levels required when called:   14
 26522 ;; This function calls:
 26523 ;;		_Event_DIPSwitch
 26524 ;;		_Event_NULL
 26525 ;;		_Event_TestButton
 26526 ;;		_HMI_DIPSwitch
 26527 ;;		_HMI_DownSwitch
 26528 ;;		_HMI_LeftSwitch
 26529 ;;		_HMI_RightSwitch
 26530 ;;		_HMI_UpSwitch
 26531 ;;		_MXK_DIPSwitch
 26532 ;;		_MXK_TestButton
 26533 ;; This function is called by:
 26534 ;;		_HMI_Poll
 26535 ;;		_MXK_Poll
 26536 ;; This function uses a non-reentrant model
 26537 ;;
 26538                           
 26539                           	psect	text130
 26540  0133A6                     __ptext130:
 26541                           	opt stack 0
 26542  0133A6                     _Button_Poll:
 26543                           	opt stack 13
 26544                           
 26545                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 26546                           
 26547                           ;incstack = 0
 26548  0133A6  0100               	movlb	0	; () banked
 26549  0133A8  EE20 F007          	lfsr	2,7
 26550  0133AC  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26551  0133AE  26D9               	addwf	fsr2l,f,c
 26552  0133B0  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26553  0133B2  22DA               	addwfc	fsr2h,f,c
 26554  0133B4  D801               	call	u10688
 26555  0133B6  D00A               	goto	u10689
 26556  0133B8                     u10688:
 26557  0133B8  0005               	push	
 26558  0133BA  6EFA               	movwf	pclath,c
 26559  0133BC  50DE               	movf	postinc2,w,c
 26560  0133BE  6EFD               	movwf	tosl,c
 26561  0133C0  50DE               	movf	postinc2,w,c
 26562  0133C2  6EFE               	movwf	tosh,c
 26563  0133C4  50DE               	movf	postinc2,w,c
 26564  0133C6  6EFF               	movwf	tosu,c
 26565  0133C8  50FA               	movf	pclath,w,c
 26566  0133CA  0012               	return		;indir
 26567  0133CC                     u10689:
 26568  0133CC  0100               	movlb	0	; () banked
 26569  0133CE  6FD8               	movwf	Button_Poll@Pin& (0+255),b
 26570                           
 26571                           ; BSR set to: 0
 26572                           ;Button.c: 61: if (pButton->mState == Pin)
 26573  0133D0  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 26574  0133D4  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26575  0133D8  0100               	movlb	0	; () banked
 26576  0133DA  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 26577  0133DC  18DE               	xorwf	postinc2,w,c
 26578  0133DE  A4D8               	btfss	status,2,c
 26579  0133E0  D021               	goto	l11
 26580                           
 26581                           ; BSR set to: 0
 26582                           ;Button.c: 62: {
 26583                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 26584  0133E2  0100               	movlb	0	; () banked
 26585  0133E4  EE20 F001          	lfsr	2,1
 26586  0133E8  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26587  0133EA  26D9               	addwf	fsr2l,f,c
 26588  0133EC  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26589  0133EE  22DA               	addwfc	fsr2h,f,c
 26590  0133F0  0100               	movlb	0	; () banked
 26591  0133F2  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 26592  0133F4  5CDE               	subwf	postinc2,w,c
 26593  0133F6  B0D8               	btfsc	status,0,c
 26594  0133F8  D00A               	goto	l12
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;Button.c: 66: pButton->mCount = 0;
 26598  0133FA  0100               	movlb	0	; () banked
 26599  0133FC  EE20 F001          	lfsr	2,1
 26600  013400  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26601  013402  26D9               	addwf	fsr2l,f,c
 26602  013404  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26603  013406  22DA               	addwfc	fsr2h,f,c
 26604  013408  0E00               	movlw	0
 26605  01340A  6EDF               	movwf	indf2,c
 26606  01340C  0012               	return	
 26607  01340E                     l12:
 26608                           
 26609                           ; BSR set to: 0
 26610                           ;Button.c: 67: else
 26611                           ;Button.c: 68: pButton->mCount -= pIncrement;
 26612                           
 26613                           ; BSR set to: 0
 26614  01340E  0100               	movlb	0	; () banked
 26615  013410  EE20 F001          	lfsr	2,1
 26616  013414  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26617  013416  26D9               	addwf	fsr2l,f,c
 26618  013418  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26619  01341A  22DA               	addwfc	fsr2h,f,c
 26620  01341C  0100               	movlb	0	; () banked
 26621  01341E  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 26622  013420  5EDF               	subwf	indf2,f,c
 26623                           
 26624                           ; BSR set to: 0
 26625                           ;Button.c: 69: }
 26626  013422  0012               	return	
 26627  013424                     l11:
 26628                           
 26629                           ; BSR set to: 0
 26630                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 26631                           
 26632                           ; BSR set to: 0
 26633  013424  0100               	movlb	0	; () banked
 26634  013426  EE20 F001          	lfsr	2,1
 26635  01342A  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26636  01342C  26D9               	addwf	fsr2l,f,c
 26637  01342E  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26638  013430  22DA               	addwfc	fsr2h,f,c
 26639  013432  50DF               	movf	indf2,w,c
 26640  013434  0100               	movlb	0	; () banked
 26641  013436  6FD3               	movwf	??_Button_Poll& (0+255),b
 26642  013438  6BD4               	clrf	(??_Button_Poll+1)& (0+255),b
 26643  01343A  0100               	movlb	0	; () banked
 26644  01343C  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 26645  01343E  0100               	movlb	0	; () banked
 26646  013440  27D3               	addwf	??_Button_Poll& (0+255),f,b
 26647  013442  0E00               	movlw	0
 26648  013444  23D4               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 26649  013446  0100               	movlb	0	; () banked
 26650  013448  EE20 F001          	lfsr	2,1
 26651  01344C  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26652  01344E  26D9               	addwf	fsr2l,f,c
 26653  013450  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26654  013452  22DA               	addwfc	fsr2h,f,c
 26655  013454  50DF               	movf	indf2,w,c
 26656  013456  0100               	movlb	0	; () banked
 26657  013458  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 26658  01345A  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 26659  01345C  0100               	movlb	0	; () banked
 26660  01345E  51D3               	movf	??_Button_Poll& (0+255),w,b
 26661  013460  0100               	movlb	0	; () banked
 26662  013462  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26663  013464  0100               	movlb	0	; () banked
 26664  013466  51D6               	movf	(??_Button_Poll+3)& (0+255),w,b
 26665  013468  0A80               	xorlw	128
 26666  01346A  0100               	movlb	0	; () banked
 26667  01346C  6FD7               	movwf	(??_Button_Poll+4)& (0+255),b
 26668  01346E  0100               	movlb	0	; () banked
 26669  013470  51D4               	movf	(??_Button_Poll+1)& (0+255),w,b
 26670  013472  0A80               	xorlw	128
 26671  013474  0100               	movlb	0	; () banked
 26672  013476  59D7               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 26673  013478  B0D8               	btfsc	status,0,c
 26674  01347A  0012               	return	
 26675                           
 26676                           ; BSR set to: 0
 26677                           ;Button.c: 73: {
 26678                           ;Button.c: 75: pButton->mCount += pIncrement;
 26679  01347C  0100               	movlb	0	; () banked
 26680  01347E  EE20 F001          	lfsr	2,1
 26681  013482  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26682  013484  26D9               	addwf	fsr2l,f,c
 26683  013486  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26684  013488  22DA               	addwfc	fsr2h,f,c
 26685  01348A  0100               	movlb	0	; () banked
 26686  01348C  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 26687  01348E  26DF               	addwf	indf2,f,c
 26688                           
 26689                           ; BSR set to: 0
 26690                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 26691  013490  0100               	movlb	0	; () banked
 26692  013492  EE20 F002          	lfsr	2,2
 26693  013496  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26694  013498  26D9               	addwf	fsr2l,f,c
 26695  01349A  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26696  01349C  22DA               	addwfc	fsr2h,f,c
 26697  01349E  0100               	movlb	0	; () banked
 26698  0134A0  EE10 F001          	lfsr	1,1
 26699  0134A4  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26700  0134A6  26E1               	addwf	fsr1l,f,c
 26701  0134A8  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26702  0134AA  22E2               	addwfc	fsr1h,f,c
 26703  0134AC  50E7               	movf	indf1,w,c
 26704  0134AE  0100               	movlb	0	; () banked
 26705  0134B0  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 26706  0134B2  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 26707  0134B4  50DE               	movf	postinc2,w,c
 26708  0134B6  0100               	movlb	0	; () banked
 26709  0134B8  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26710  0134BA  50DE               	movf	postinc2,w,c
 26711  0134BC  0100               	movlb	0	; () banked
 26712  0134BE  59D6               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 26713  0134C0  A0D8               	btfss	status,0,c
 26714  0134C2  0012               	return	
 26715                           
 26716                           ; BSR set to: 0
 26717                           ;Button.c: 77: {
 26718                           ;Button.c: 79: pButton->mState = Pin;
 26719  0134C4  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 26720  0134C8  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26721  0134CC  C0D8  FFDF         	movff	Button_Poll@Pin,indf2
 26722                           
 26723                           ; BSR set to: 0
 26724                           ;Button.c: 80: pButton->mCount = 0;
 26725  0134D0  0100               	movlb	0	; () banked
 26726  0134D2  EE20 F001          	lfsr	2,1
 26727  0134D6  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26728  0134D8  26D9               	addwf	fsr2l,f,c
 26729  0134DA  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26730  0134DC  22DA               	addwfc	fsr2h,f,c
 26731  0134DE  0E00               	movlw	0
 26732  0134E0  6EDF               	movwf	indf2,c
 26733                           
 26734                           ; BSR set to: 0
 26735                           ;Button.c: 83: pButton->mFunction(Pin);
 26736  0134E2  0100               	movlb	0	; () banked
 26737  0134E4  EE20 F004          	lfsr	2,4
 26738  0134E8  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 26739  0134EA  26D9               	addwf	fsr2l,f,c
 26740  0134EC  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26741  0134EE  22DA               	addwfc	fsr2h,f,c
 26742  0134F0  D801               	call	u10738
 26743  0134F2  0012               	return	
 26744  0134F4                     u10738:
 26745  0134F4  0005               	push	
 26746  0134F6  6EFA               	movwf	pclath,c
 26747  0134F8  50DE               	movf	postinc2,w,c
 26748  0134FA  6EFD               	movwf	tosl,c
 26749  0134FC  50DE               	movf	postinc2,w,c
 26750  0134FE  6EFE               	movwf	tosh,c
 26751  013500  50DE               	movf	postinc2,w,c
 26752  013502  6EFF               	movwf	tosu,c
 26753  013504  50FA               	movf	pclath,w,c
 26754  013506  0100               	movlb	0	; () banked
 26755  013508  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 26756  01350A  0012               	return		;indir
 26757  01350C                     __end_of_Button_Poll:
 26758                           	opt stack 0
 26759                           tosu	equ	0xFFF
 26760                           tosh	equ	0xFFE
 26761                           tosl	equ	0xFFD
 26762                           pclath	equ	0xFFA
 26763                           tblptru	equ	0xFF8
 26764                           tblptrh	equ	0xFF7
 26765                           tblptrl	equ	0xFF6
 26766                           tablat	equ	0xFF5
 26767                           prodh	equ	0xFF4
 26768                           prodl	equ	0xFF3
 26769                           intcon	equ	0xFF2
 26770                           postinc0	equ	0xFEE
 26771                           wreg	equ	0xFE8
 26772                           indf1	equ	0xFE7
 26773                           postdec1	equ	0xFE5
 26774                           fsr1h	equ	0xFE2
 26775                           fsr1l	equ	0xFE1
 26776                           indf2	equ	0xFDF
 26777                           postinc2	equ	0xFDE
 26778                           postdec2	equ	0xFDD
 26779                           plusw2	equ	0xFDB
 26780                           fsr2h	equ	0xFDA
 26781                           fsr2l	equ	0xFD9
 26782                           status	equ	0xFD8
 26783                           
 26784 ;; *************** function _MXK_DIPSwitch *****************
 26785 ;; Defined at:
 26786 ;;		line 24 in file "Library/MXK.c"
 26787 ;; Parameters:    Size  Location     Type
 26788 ;;		None
 26789 ;; Auto vars:     Size  Location     Type
 26790 ;;		None
 26791 ;; Return value:  Size  Location     Type
 26792 ;;                  1    wreg      unsigned char 
 26793 ;; Registers used:
 26794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26795 ;; Tracked objects:
 26796 ;;		On entry : 0/0
 26797 ;;		On exit  : 0/0
 26798 ;;		Unchanged: 0/0
 26799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26804 ;;Total ram usage:        0 bytes
 26805 ;; Hardware stack levels used:    1
 26806 ;; Hardware stack levels required when called:    8
 26807 ;; This function calls:
 26808 ;;		_Port_GetQuad
 26809 ;; This function is called by:
 26810 ;;		_FunctInitButton
 26811 ;;		_Button_Poll
 26812 ;;		_getMode
 26813 ;; This function uses a non-reentrant model
 26814 ;;
 26815                           
 26816                           	psect	text131
 26817  016B68                     __ptext131:
 26818                           	opt stack 0
 26819  016B68                     _MXK_DIPSwitch:
 26820                           	opt stack 18
 26821                           
 26822                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 26823                           
 26824                           ;incstack = 0
 26825  016B68  0E96               	movlw	low _PortD
 26826  016B6A  0100               	movlb	0	; () banked
 26827  016B6C  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 26828  016B6E  0E00               	movlw	high _PortD
 26829  016B70  0100               	movlb	0	; () banked
 26830  016B72  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26831  016B74  0E00               	movlw	0
 26832  016B76  0100               	movlb	0	; () banked
 26833  016B78  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 26834  016B7A  EC14  F0B1         	call	_Port_GetQuad
 26835  016B7E  0012               	return	
 26836  016B80                     __end_of_MXK_DIPSwitch:
 26837                           	opt stack 0
 26838                           tosu	equ	0xFFF
 26839                           tosh	equ	0xFFE
 26840                           tosl	equ	0xFFD
 26841                           pclath	equ	0xFFA
 26842                           tblptru	equ	0xFF8
 26843                           tblptrh	equ	0xFF7
 26844                           tblptrl	equ	0xFF6
 26845                           tablat	equ	0xFF5
 26846                           prodh	equ	0xFF4
 26847                           prodl	equ	0xFF3
 26848                           intcon	equ	0xFF2
 26849                           postinc0	equ	0xFEE
 26850                           wreg	equ	0xFE8
 26851                           indf1	equ	0xFE7
 26852                           postdec1	equ	0xFE5
 26853                           fsr1h	equ	0xFE2
 26854                           fsr1l	equ	0xFE1
 26855                           indf2	equ	0xFDF
 26856                           postinc2	equ	0xFDE
 26857                           postdec2	equ	0xFDD
 26858                           plusw2	equ	0xFDB
 26859                           fsr2h	equ	0xFDA
 26860                           fsr2l	equ	0xFD9
 26861                           status	equ	0xFD8
 26862                           
 26863 ;; *************** function _HMI_DIPSwitch *****************
 26864 ;; Defined at:
 26865 ;;		line 47 in file "HMI.c"
 26866 ;; Parameters:    Size  Location     Type
 26867 ;;		None
 26868 ;; Auto vars:     Size  Location     Type
 26869 ;;		None
 26870 ;; Return value:  Size  Location     Type
 26871 ;;                  1    wreg      unsigned char 
 26872 ;; Registers used:
 26873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26874 ;; Tracked objects:
 26875 ;;		On entry : 0/0
 26876 ;;		On exit  : 0/0
 26877 ;;		Unchanged: 0/0
 26878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26883 ;;Total ram usage:        0 bytes
 26884 ;; Hardware stack levels used:    1
 26885 ;; Hardware stack levels required when called:    8
 26886 ;; This function calls:
 26887 ;;		_Port_GetQuad
 26888 ;; This function is called by:
 26889 ;;		_HMI_Init
 26890 ;;		_Button_Poll
 26891 ;;		_getMode
 26892 ;; This function uses a non-reentrant model
 26893 ;;
 26894                           
 26895                           	psect	text132
 26896  016B80                     __ptext132:
 26897                           	opt stack 0
 26898  016B80                     _HMI_DIPSwitch:
 26899                           	opt stack 18
 26900                           
 26901                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 26902                           
 26903                           ;incstack = 0
 26904  016B80  0EAC               	movlw	low _PortE
 26905  016B82  0100               	movlb	0	; () banked
 26906  016B84  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 26907  016B86  0E03               	movlw	high _PortE
 26908  016B88  0100               	movlb	0	; () banked
 26909  016B8A  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26910  016B8C  0E00               	movlw	0
 26911  016B8E  0100               	movlb	0	; () banked
 26912  016B90  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 26913  016B92  EC14  F0B1         	call	_Port_GetQuad	;wreg free
 26914  016B96  0012               	return	
 26915  016B98                     __end_of_HMI_DIPSwitch:
 26916                           	opt stack 0
 26917                           tosu	equ	0xFFF
 26918                           tosh	equ	0xFFE
 26919                           tosl	equ	0xFFD
 26920                           pclath	equ	0xFFA
 26921                           tblptru	equ	0xFF8
 26922                           tblptrh	equ	0xFF7
 26923                           tblptrl	equ	0xFF6
 26924                           tablat	equ	0xFF5
 26925                           prodh	equ	0xFF4
 26926                           prodl	equ	0xFF3
 26927                           intcon	equ	0xFF2
 26928                           postinc0	equ	0xFEE
 26929                           wreg	equ	0xFE8
 26930                           indf1	equ	0xFE7
 26931                           postdec1	equ	0xFE5
 26932                           fsr1h	equ	0xFE2
 26933                           fsr1l	equ	0xFE1
 26934                           indf2	equ	0xFDF
 26935                           postinc2	equ	0xFDE
 26936                           postdec2	equ	0xFDD
 26937                           plusw2	equ	0xFDB
 26938                           fsr2h	equ	0xFDA
 26939                           fsr2l	equ	0xFD9
 26940                           status	equ	0xFD8
 26941                           
 26942 ;; *************** function _HMI_DownSwitch *****************
 26943 ;; Defined at:
 26944 ;;		line 42 in file "HMI.c"
 26945 ;; Parameters:    Size  Location     Type
 26946 ;;		None
 26947 ;; Auto vars:     Size  Location     Type
 26948 ;;		None
 26949 ;; Return value:  Size  Location     Type
 26950 ;;                  1    wreg      unsigned char 
 26951 ;; Registers used:
 26952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26953 ;; Tracked objects:
 26954 ;;		On entry : 0/0
 26955 ;;		On exit  : 0/0
 26956 ;;		Unchanged: 0/0
 26957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26962 ;;Total ram usage:        0 bytes
 26963 ;; Hardware stack levels used:    1
 26964 ;; Hardware stack levels required when called:    8
 26965 ;; This function calls:
 26966 ;;		_Port_GetPin
 26967 ;; This function is called by:
 26968 ;;		_HMI_Init
 26969 ;;		_Button_Poll
 26970 ;;		_getMode
 26971 ;; This function uses a non-reentrant model
 26972 ;;
 26973                           
 26974                           	psect	text133
 26975  016B98                     __ptext133:
 26976                           	opt stack 0
 26977  016B98                     _HMI_DownSwitch:
 26978                           	opt stack 18
 26979                           
 26980                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 26981                           
 26982                           ;incstack = 0
 26983  016B98  0EAC               	movlw	low _PortE
 26984  016B9A  0100               	movlb	0	; () banked
 26985  016B9C  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 26986  016B9E  0E03               	movlw	high _PortE
 26987  016BA0  0100               	movlb	0	; () banked
 26988  016BA2  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26989  016BA4  0E06               	movlw	6
 26990  016BA6  0100               	movlb	0	; () banked
 26991  016BA8  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 26992  016BAA  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 26993  016BAE  0012               	return	
 26994  016BB0                     __end_of_HMI_DownSwitch:
 26995                           	opt stack 0
 26996                           tosu	equ	0xFFF
 26997                           tosh	equ	0xFFE
 26998                           tosl	equ	0xFFD
 26999                           pclath	equ	0xFFA
 27000                           tblptru	equ	0xFF8
 27001                           tblptrh	equ	0xFF7
 27002                           tblptrl	equ	0xFF6
 27003                           tablat	equ	0xFF5
 27004                           prodh	equ	0xFF4
 27005                           prodl	equ	0xFF3
 27006                           intcon	equ	0xFF2
 27007                           postinc0	equ	0xFEE
 27008                           wreg	equ	0xFE8
 27009                           indf1	equ	0xFE7
 27010                           postdec1	equ	0xFE5
 27011                           fsr1h	equ	0xFE2
 27012                           fsr1l	equ	0xFE1
 27013                           indf2	equ	0xFDF
 27014                           postinc2	equ	0xFDE
 27015                           postdec2	equ	0xFDD
 27016                           plusw2	equ	0xFDB
 27017                           fsr2h	equ	0xFDA
 27018                           fsr2l	equ	0xFD9
 27019                           status	equ	0xFD8
 27020                           
 27021 ;; *************** function _HMI_UpSwitch *****************
 27022 ;; Defined at:
 27023 ;;		line 37 in file "HMI.c"
 27024 ;; Parameters:    Size  Location     Type
 27025 ;;		None
 27026 ;; Auto vars:     Size  Location     Type
 27027 ;;		None
 27028 ;; Return value:  Size  Location     Type
 27029 ;;                  1    wreg      unsigned char 
 27030 ;; Registers used:
 27031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27032 ;; Tracked objects:
 27033 ;;		On entry : 0/0
 27034 ;;		On exit  : 0/0
 27035 ;;		Unchanged: 0/0
 27036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27041 ;;Total ram usage:        0 bytes
 27042 ;; Hardware stack levels used:    1
 27043 ;; Hardware stack levels required when called:    8
 27044 ;; This function calls:
 27045 ;;		_Port_GetPin
 27046 ;; This function is called by:
 27047 ;;		_HMI_Init
 27048 ;;		_Button_Poll
 27049 ;;		_getMode
 27050 ;; This function uses a non-reentrant model
 27051 ;;
 27052                           
 27053                           	psect	text134
 27054  016BB0                     __ptext134:
 27055                           	opt stack 0
 27056  016BB0                     _HMI_UpSwitch:
 27057                           	opt stack 18
 27058                           
 27059                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 27060                           
 27061                           ;incstack = 0
 27062  016BB0  0EAC               	movlw	low _PortE
 27063  016BB2  0100               	movlb	0	; () banked
 27064  016BB4  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 27065  016BB6  0E03               	movlw	high _PortE
 27066  016BB8  0100               	movlb	0	; () banked
 27067  016BBA  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27068  016BBC  0E07               	movlw	7
 27069  016BBE  0100               	movlb	0	; () banked
 27070  016BC0  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 27071  016BC2  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 27072  016BC6  0012               	return	
 27073  016BC8                     __end_of_HMI_UpSwitch:
 27074                           	opt stack 0
 27075                           tosu	equ	0xFFF
 27076                           tosh	equ	0xFFE
 27077                           tosl	equ	0xFFD
 27078                           pclath	equ	0xFFA
 27079                           tblptru	equ	0xFF8
 27080                           tblptrh	equ	0xFF7
 27081                           tblptrl	equ	0xFF6
 27082                           tablat	equ	0xFF5
 27083                           prodh	equ	0xFF4
 27084                           prodl	equ	0xFF3
 27085                           intcon	equ	0xFF2
 27086                           postinc0	equ	0xFEE
 27087                           wreg	equ	0xFE8
 27088                           indf1	equ	0xFE7
 27089                           postdec1	equ	0xFE5
 27090                           fsr1h	equ	0xFE2
 27091                           fsr1l	equ	0xFE1
 27092                           indf2	equ	0xFDF
 27093                           postinc2	equ	0xFDE
 27094                           postdec2	equ	0xFDD
 27095                           plusw2	equ	0xFDB
 27096                           fsr2h	equ	0xFDA
 27097                           fsr2l	equ	0xFD9
 27098                           status	equ	0xFD8
 27099                           
 27100 ;; *************** function _HMI_RightSwitch *****************
 27101 ;; Defined at:
 27102 ;;		line 32 in file "HMI.c"
 27103 ;; Parameters:    Size  Location     Type
 27104 ;;		None
 27105 ;; Auto vars:     Size  Location     Type
 27106 ;;		None
 27107 ;; Return value:  Size  Location     Type
 27108 ;;                  1    wreg      unsigned char 
 27109 ;; Registers used:
 27110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27111 ;; Tracked objects:
 27112 ;;		On entry : 0/0
 27113 ;;		On exit  : 0/0
 27114 ;;		Unchanged: 0/0
 27115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27120 ;;Total ram usage:        0 bytes
 27121 ;; Hardware stack levels used:    1
 27122 ;; Hardware stack levels required when called:    8
 27123 ;; This function calls:
 27124 ;;		_Port_GetPin
 27125 ;; This function is called by:
 27126 ;;		_HMI_Init
 27127 ;;		_Button_Poll
 27128 ;;		_getMode
 27129 ;; This function uses a non-reentrant model
 27130 ;;
 27131                           
 27132                           	psect	text135
 27133  016BC8                     __ptext135:
 27134                           	opt stack 0
 27135  016BC8                     _HMI_RightSwitch:
 27136                           	opt stack 18
 27137                           
 27138                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 27139                           
 27140                           ;incstack = 0
 27141  016BC8  0EAC               	movlw	low _PortE
 27142  016BCA  0100               	movlb	0	; () banked
 27143  016BCC  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 27144  016BCE  0E03               	movlw	high _PortE
 27145  016BD0  0100               	movlb	0	; () banked
 27146  016BD2  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27147  016BD4  0E04               	movlw	4
 27148  016BD6  0100               	movlb	0	; () banked
 27149  016BD8  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 27150  016BDA  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 27151  016BDE  0012               	return	
 27152  016BE0                     __end_of_HMI_RightSwitch:
 27153                           	opt stack 0
 27154                           tosu	equ	0xFFF
 27155                           tosh	equ	0xFFE
 27156                           tosl	equ	0xFFD
 27157                           pclath	equ	0xFFA
 27158                           tblptru	equ	0xFF8
 27159                           tblptrh	equ	0xFF7
 27160                           tblptrl	equ	0xFF6
 27161                           tablat	equ	0xFF5
 27162                           prodh	equ	0xFF4
 27163                           prodl	equ	0xFF3
 27164                           intcon	equ	0xFF2
 27165                           postinc0	equ	0xFEE
 27166                           wreg	equ	0xFE8
 27167                           indf1	equ	0xFE7
 27168                           postdec1	equ	0xFE5
 27169                           fsr1h	equ	0xFE2
 27170                           fsr1l	equ	0xFE1
 27171                           indf2	equ	0xFDF
 27172                           postinc2	equ	0xFDE
 27173                           postdec2	equ	0xFDD
 27174                           plusw2	equ	0xFDB
 27175                           fsr2h	equ	0xFDA
 27176                           fsr2l	equ	0xFD9
 27177                           status	equ	0xFD8
 27178                           
 27179 ;; *************** function _HMI_LeftSwitch *****************
 27180 ;; Defined at:
 27181 ;;		line 27 in file "HMI.c"
 27182 ;; Parameters:    Size  Location     Type
 27183 ;;		None
 27184 ;; Auto vars:     Size  Location     Type
 27185 ;;		None
 27186 ;; Return value:  Size  Location     Type
 27187 ;;                  1    wreg      unsigned char 
 27188 ;; Registers used:
 27189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27190 ;; Tracked objects:
 27191 ;;		On entry : 0/0
 27192 ;;		On exit  : 0/0
 27193 ;;		Unchanged: 0/0
 27194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27199 ;;Total ram usage:        0 bytes
 27200 ;; Hardware stack levels used:    1
 27201 ;; Hardware stack levels required when called:    8
 27202 ;; This function calls:
 27203 ;;		_Port_GetPin
 27204 ;; This function is called by:
 27205 ;;		_HMI_Init
 27206 ;;		_Button_Poll
 27207 ;;		_getMode
 27208 ;; This function uses a non-reentrant model
 27209 ;;
 27210                           
 27211                           	psect	text136
 27212  016BE0                     __ptext136:
 27213                           	opt stack 0
 27214  016BE0                     _HMI_LeftSwitch:
 27215                           	opt stack 18
 27216                           
 27217                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 27218                           
 27219                           ;incstack = 0
 27220  016BE0  0EAC               	movlw	low _PortE
 27221  016BE2  0100               	movlb	0	; () banked
 27222  016BE4  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 27223  016BE6  0E03               	movlw	high _PortE
 27224  016BE8  0100               	movlb	0	; () banked
 27225  016BEA  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27226  016BEC  0E05               	movlw	5
 27227  016BEE  0100               	movlb	0	; () banked
 27228  016BF0  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 27229  016BF2  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 27230  016BF6  0012               	return	
 27231  016BF8                     __end_of_HMI_LeftSwitch:
 27232                           	opt stack 0
 27233                           tosu	equ	0xFFF
 27234                           tosh	equ	0xFFE
 27235                           tosl	equ	0xFFD
 27236                           pclath	equ	0xFFA
 27237                           tblptru	equ	0xFF8
 27238                           tblptrh	equ	0xFF7
 27239                           tblptrl	equ	0xFF6
 27240                           tablat	equ	0xFF5
 27241                           prodh	equ	0xFF4
 27242                           prodl	equ	0xFF3
 27243                           intcon	equ	0xFF2
 27244                           postinc0	equ	0xFEE
 27245                           wreg	equ	0xFE8
 27246                           indf1	equ	0xFE7
 27247                           postdec1	equ	0xFE5
 27248                           fsr1h	equ	0xFE2
 27249                           fsr1l	equ	0xFE1
 27250                           indf2	equ	0xFDF
 27251                           postinc2	equ	0xFDE
 27252                           postdec2	equ	0xFDD
 27253                           plusw2	equ	0xFDB
 27254                           fsr2h	equ	0xFDA
 27255                           fsr2l	equ	0xFD9
 27256                           status	equ	0xFD8
 27257                           
 27258 ;; *************** function _MXK_TestButton *****************
 27259 ;; Defined at:
 27260 ;;		line 14 in file "Library/MXK.c"
 27261 ;; Parameters:    Size  Location     Type
 27262 ;;		None
 27263 ;; Auto vars:     Size  Location     Type
 27264 ;;		None
 27265 ;; Return value:  Size  Location     Type
 27266 ;;                  1    wreg      unsigned char 
 27267 ;; Registers used:
 27268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27269 ;; Tracked objects:
 27270 ;;		On entry : 0/0
 27271 ;;		On exit  : 0/0
 27272 ;;		Unchanged: 0/0
 27273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27278 ;;Total ram usage:        0 bytes
 27279 ;; Hardware stack levels used:    1
 27280 ;; Hardware stack levels required when called:    8
 27281 ;; This function calls:
 27282 ;;		_Port_GetPin
 27283 ;; This function is called by:
 27284 ;;		_FunctInitButton
 27285 ;;		_Button_Poll
 27286 ;;		_getMode
 27287 ;; This function uses a non-reentrant model
 27288 ;;
 27289                           
 27290                           	psect	text137
 27291  016BF8                     __ptext137:
 27292                           	opt stack 0
 27293  016BF8                     _MXK_TestButton:
 27294                           	opt stack 18
 27295                           
 27296                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 27297                           
 27298                           ;incstack = 0
 27299  016BF8  0EB6               	movlw	low _PortB
 27300  016BFA  0100               	movlb	0	; () banked
 27301  016BFC  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 27302  016BFE  0E03               	movlw	high _PortB
 27303  016C00  0100               	movlb	0	; () banked
 27304  016C02  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27305  016C04  0E04               	movlw	4
 27306  016C06  0100               	movlb	0	; () banked
 27307  016C08  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 27308  016C0A  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 27309  016C0E  0012               	return	
 27310  016C10                     __end_of_MXK_TestButton:
 27311                           	opt stack 0
 27312                           tosu	equ	0xFFF
 27313                           tosh	equ	0xFFE
 27314                           tosl	equ	0xFFD
 27315                           pclath	equ	0xFFA
 27316                           tblptru	equ	0xFF8
 27317                           tblptrh	equ	0xFF7
 27318                           tblptrl	equ	0xFF6
 27319                           tablat	equ	0xFF5
 27320                           prodh	equ	0xFF4
 27321                           prodl	equ	0xFF3
 27322                           intcon	equ	0xFF2
 27323                           postinc0	equ	0xFEE
 27324                           wreg	equ	0xFE8
 27325                           indf1	equ	0xFE7
 27326                           postdec1	equ	0xFE5
 27327                           fsr1h	equ	0xFE2
 27328                           fsr1l	equ	0xFE1
 27329                           indf2	equ	0xFDF
 27330                           postinc2	equ	0xFDE
 27331                           postdec2	equ	0xFDD
 27332                           plusw2	equ	0xFDB
 27333                           fsr2h	equ	0xFDA
 27334                           fsr2l	equ	0xFD9
 27335                           status	equ	0xFD8
 27336                           
 27337 ;; *************** function _Port_GetQuad *****************
 27338 ;; Defined at:
 27339 ;;		line 498 in file "Library/Port.c"
 27340 ;; Parameters:    Size  Location     Type
 27341 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 27342 ;;		 -> PortE(10), PortD(10), 
 27343 ;;  pQuad           1    2[BANK0 ] enum E6776
 27344 ;; Auto vars:     Size  Location     Type
 27345 ;;  Output          1    5[BANK0 ] unsigned char 
 27346 ;; Return value:  Size  Location     Type
 27347 ;;                  1    wreg      unsigned char 
 27348 ;; Registers used:
 27349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27350 ;; Tracked objects:
 27351 ;;		On entry : 0/0
 27352 ;;		On exit  : 0/0
 27353 ;;		Unchanged: 0/0
 27354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27355 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27357 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27359 ;;Total ram usage:        6 bytes
 27360 ;; Hardware stack levels used:    1
 27361 ;; Hardware stack levels required when called:    7
 27362 ;; This function calls:
 27363 ;;		Nothing
 27364 ;; This function is called by:
 27365 ;;		_HMI_DIPSwitch
 27366 ;;		_MXK_DIPSwitch
 27367 ;;		_Port_ToggleQuad
 27368 ;; This function uses a non-reentrant model
 27369 ;;
 27370                           
 27371                           	psect	text138
 27372  016228                     __ptext138:
 27373                           	opt stack 0
 27374  016228                     _Port_GetQuad:
 27375                           	opt stack 18
 27376                           
 27377                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 27378                           
 27379                           ;incstack = 0
 27380  016228  0100               	movlb	0	; () banked
 27381  01622A  EE20 F006          	lfsr	2,6
 27382  01622E  51B5               	movf	Port_GetQuad@pInput& (0+255),w,b
 27383  016230  26D9               	addwf	fsr2l,f,c
 27384  016232  51B6               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 27385  016234  22DA               	addwfc	fsr2h,f,c
 27386  016236  CFDE F0B8          	movff	postinc2,??_Port_GetQuad
 27387  01623A  CFDD F0B9          	movff	postdec2,??_Port_GetQuad+1
 27388  01623E  C0B8  FFD9         	movff	??_Port_GetQuad,fsr2l
 27389  016242  C0B9  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 27390  016246  50DF               	movf	indf2,w,c
 27391  016248  0100               	movlb	0	; () banked
 27392  01624A  6FBA               	movwf	Port_GetQuad@Output& (0+255),b
 27393                           
 27394                           ; BSR set to: 0
 27395                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 27396  01624C  0100               	movlb	0	; () banked
 27397  01624E  51B7               	movf	Port_GetQuad@pQuad& (0+255),w,b
 27398  016250  0D04               	mullw	4
 27399  016252  28F3               	incf	prodl,w,c
 27400  016254  0100               	movlb	0	; () banked
 27401  016256  6FB8               	movwf	??_Port_GetQuad& (0+255),b
 27402  016258  D003               	goto	u9650
 27403  01625A                     u9655:
 27404  01625A  0100               	movlb	0	; () banked
 27405  01625C  90D8               	bcf	status,0,c
 27406  01625E  33BA               	rrcf	Port_GetQuad@Output& (0+255),f,b
 27407  016260                     u9650:
 27408  016260  0100               	movlb	0	; () banked
 27409  016262  2FB8               	decfsz	??_Port_GetQuad& (0+255),f,b
 27410  016264  D7FA               	goto	u9655
 27411                           
 27412                           ;Port.c: 502: Output &= 0xF;
 27413  016266  0E0F               	movlw	15
 27414  016268  0100               	movlb	0	; () banked
 27415  01626A  17BA               	andwf	Port_GetQuad@Output& (0+255),f,b
 27416                           
 27417                           ; BSR set to: 0
 27418                           ;Port.c: 503: return Output;
 27419  01626C  0100               	movlb	0	; () banked
 27420  01626E  51BA               	movf	Port_GetQuad@Output& (0+255),w,b
 27421  016270  0012               	return	
 27422  016272                     __end_of_Port_GetQuad:
 27423                           	opt stack 0
 27424                           tosu	equ	0xFFF
 27425                           tosh	equ	0xFFE
 27426                           tosl	equ	0xFFD
 27427                           pclath	equ	0xFFA
 27428                           tblptru	equ	0xFF8
 27429                           tblptrh	equ	0xFF7
 27430                           tblptrl	equ	0xFF6
 27431                           tablat	equ	0xFF5
 27432                           prodh	equ	0xFF4
 27433                           prodl	equ	0xFF3
 27434                           intcon	equ	0xFF2
 27435                           postinc0	equ	0xFEE
 27436                           wreg	equ	0xFE8
 27437                           indf1	equ	0xFE7
 27438                           postdec1	equ	0xFE5
 27439                           fsr1h	equ	0xFE2
 27440                           fsr1l	equ	0xFE1
 27441                           indf2	equ	0xFDF
 27442                           postinc2	equ	0xFDE
 27443                           postdec2	equ	0xFDD
 27444                           plusw2	equ	0xFDB
 27445                           fsr2h	equ	0xFDA
 27446                           fsr2l	equ	0xFD9
 27447                           status	equ	0xFD8
 27448                           
 27449 ;; *************** function _Event_DIPSwitch *****************
 27450 ;; Defined at:
 27451 ;;		line 22 in file "Events.c"
 27452 ;; Parameters:    Size  Location     Type
 27453 ;;  pState          1    wreg     unsigned char 
 27454 ;; Auto vars:     Size  Location     Type
 27455 ;;  pState          1   25[BANK0 ] unsigned char 
 27456 ;;  Bar             1   26[BANK0 ] unsigned char 
 27457 ;; Return value:  Size  Location     Type
 27458 ;;                  1    wreg      void 
 27459 ;; Registers used:
 27460 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27461 ;; Tracked objects:
 27462 ;;		On entry : 0/0
 27463 ;;		On exit  : 0/0
 27464 ;;		Unchanged: 0/0
 27465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27470 ;;Total ram usage:        2 bytes
 27471 ;; Hardware stack levels used:    1
 27472 ;; Hardware stack levels required when called:   13
 27473 ;; This function calls:
 27474 ;;		_HMI_GetBar
 27475 ;;		_HMI_SetBar
 27476 ;;		_LED_Toggle
 27477 ;; This function is called by:
 27478 ;;		_FunctInitButton
 27479 ;;		_Button_Poll
 27480 ;; This function uses a non-reentrant model
 27481 ;;
 27482                           
 27483                           	psect	text139
 27484  01686E                     __ptext139:
 27485                           	opt stack 0
 27486  01686E                     _Event_DIPSwitch:
 27487                           	opt stack 13
 27488                           
 27489                           ; BSR set to: 0
 27490                           ;incstack = 0
 27491                           ;Event_DIPSwitch@pState stored from wreg
 27492  01686E  0100               	movlb	0	; () banked
 27493  016870  6FCE               	movwf	Event_DIPSwitch@pState& (0+255),b
 27494                           
 27495                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 27496  016872  ECA2  F0B6         	call	_HMI_GetBar	;wreg free
 27497  016876  0100               	movlb	0	; () banked
 27498  016878  6FCF               	movwf	Event_DIPSwitch@Bar& (0+255),b
 27499                           
 27500                           ; BSR set to: 0
 27501                           ;Events.c: 25: Bar &= 0x0F;
 27502  01687A  0E0F               	movlw	15
 27503  01687C  0100               	movlb	0	; () banked
 27504  01687E  17CF               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 27505                           
 27506                           ; BSR set to: 0
 27507                           ;Events.c: 26: pState <<= 4;
 27508  016880  0100               	movlb	0	; () banked
 27509  016882  3BCE               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 27510  016884  0EF0               	movlw	240
 27511  016886  17CE               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 27512                           
 27513                           ; BSR set to: 0
 27514                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 27515  016888  0100               	movlb	0	; () banked
 27516  01688A  51CE               	movf	Event_DIPSwitch@pState& (0+255),w,b
 27517  01688C  0100               	movlb	0	; () banked
 27518  01688E  11CF               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 27519  016890  EC84  F0B6         	call	_HMI_SetBar
 27520                           
 27521                           ;Events.c: 32: LED_Toggle(eLED1);
 27522  016894  0E00               	movlw	0
 27523  016896  EC81  F0B1         	call	_LED_Toggle
 27524  01689A  0012               	return		;funcret
 27525  01689C                     __end_of_Event_DIPSwitch:
 27526                           	opt stack 0
 27527                           tosu	equ	0xFFF
 27528                           tosh	equ	0xFFE
 27529                           tosl	equ	0xFFD
 27530                           pclath	equ	0xFFA
 27531                           tblptru	equ	0xFF8
 27532                           tblptrh	equ	0xFF7
 27533                           tblptrl	equ	0xFF6
 27534                           tablat	equ	0xFF5
 27535                           prodh	equ	0xFF4
 27536                           prodl	equ	0xFF3
 27537                           intcon	equ	0xFF2
 27538                           postinc0	equ	0xFEE
 27539                           wreg	equ	0xFE8
 27540                           indf1	equ	0xFE7
 27541                           postdec1	equ	0xFE5
 27542                           fsr1h	equ	0xFE2
 27543                           fsr1l	equ	0xFE1
 27544                           indf2	equ	0xFDF
 27545                           postinc2	equ	0xFDE
 27546                           postdec2	equ	0xFDD
 27547                           plusw2	equ	0xFDB
 27548                           fsr2h	equ	0xFDA
 27549                           fsr2l	equ	0xFD9
 27550                           status	equ	0xFD8
 27551                           
 27552 ;; *************** function _Event_NULL *****************
 27553 ;; Defined at:
 27554 ;;		line 9 in file "Events.c"
 27555 ;; Parameters:    Size  Location     Type
 27556 ;;  pState          1    wreg     unsigned char 
 27557 ;; Auto vars:     Size  Location     Type
 27558 ;;  pState          1    0[COMRAM] unsigned char 
 27559 ;; Return value:  Size  Location     Type
 27560 ;;                  1    wreg      void 
 27561 ;; Registers used:
 27562 ;;		wreg
 27563 ;; Tracked objects:
 27564 ;;		On entry : 0/0
 27565 ;;		On exit  : 0/0
 27566 ;;		Unchanged: 0/0
 27567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27572 ;;Total ram usage:        0 bytes
 27573 ;; Hardware stack levels used:    1
 27574 ;; Hardware stack levels required when called:    7
 27575 ;; This function calls:
 27576 ;;		Nothing
 27577 ;; This function is called by:
 27578 ;;		_HMI_Init
 27579 ;;		_Button_Poll
 27580 ;; This function uses a non-reentrant model
 27581 ;;
 27582                           
 27583                           	psect	text140
 27584  001404                     __ptext140:
 27585                           	opt stack 0
 27586  001404                     _Event_NULL:
 27587                           	opt stack 19
 27588                           
 27589                           ;incstack = 0
 27590  001404  0012               	return		;funcret
 27591  001406                     __end_of_Event_NULL:
 27592                           	opt stack 0
 27593                           tosu	equ	0xFFF
 27594                           tosh	equ	0xFFE
 27595                           tosl	equ	0xFFD
 27596                           pclath	equ	0xFFA
 27597                           tblptru	equ	0xFF8
 27598                           tblptrh	equ	0xFF7
 27599                           tblptrl	equ	0xFF6
 27600                           tablat	equ	0xFF5
 27601                           prodh	equ	0xFF4
 27602                           prodl	equ	0xFF3
 27603                           intcon	equ	0xFF2
 27604                           postinc0	equ	0xFEE
 27605                           wreg	equ	0xFE8
 27606                           indf1	equ	0xFE7
 27607                           postdec1	equ	0xFE5
 27608                           fsr1h	equ	0xFE2
 27609                           fsr1l	equ	0xFE1
 27610                           indf2	equ	0xFDF
 27611                           postinc2	equ	0xFDE
 27612                           postdec2	equ	0xFDD
 27613                           plusw2	equ	0xFDB
 27614                           fsr2h	equ	0xFDA
 27615                           fsr2l	equ	0xFD9
 27616                           status	equ	0xFD8
 27617                           
 27618 ;; *************** function _Event_TestButton *****************
 27619 ;; Defined at:
 27620 ;;		line 52 in file "Events.c"
 27621 ;; Parameters:    Size  Location     Type
 27622 ;;  pState          1    wreg     unsigned char 
 27623 ;; Auto vars:     Size  Location     Type
 27624 ;;  pState          1   25[BANK0 ] unsigned char 
 27625 ;; Return value:  Size  Location     Type
 27626 ;;                  1    wreg      void 
 27627 ;; Registers used:
 27628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27629 ;; Tracked objects:
 27630 ;;		On entry : 0/0
 27631 ;;		On exit  : 0/0
 27632 ;;		Unchanged: 0/0
 27633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27638 ;;Total ram usage:        1 bytes
 27639 ;; Hardware stack levels used:    1
 27640 ;; Hardware stack levels required when called:   13
 27641 ;; This function calls:
 27642 ;;		_HMI_SetButton
 27643 ;;		_HMI_SetNumber
 27644 ;;		_LED_Toggle
 27645 ;; This function is called by:
 27646 ;;		_FunctInitButton
 27647 ;;		_Button_Poll
 27648 ;; This function uses a non-reentrant model
 27649 ;;
 27650                           
 27651                           	psect	text141
 27652  01665C                     __ptext141:
 27653                           	opt stack 0
 27654  01665C                     _Event_TestButton:
 27655                           	opt stack 13
 27656                           
 27657                           ;incstack = 0
 27658                           ;Event_TestButton@pState stored from wreg
 27659  01665C  0100               	movlb	0	; () banked
 27660  01665E  6FCE               	movwf	Event_TestButton@pState& (0+255),b
 27661                           
 27662                           ;Events.c: 56: static UINT8 j = 0;
 27663                           ;Events.c: 60: if (pState == 0)
 27664  016660  0100               	movlb	0	; () banked
 27665  016662  51CE               	movf	Event_TestButton@pState& (0+255),w,b
 27666  016664  0100               	movlb	0	; () banked
 27667  016666  A4D8               	btfss	status,2,c
 27668  016668  D013               	goto	l1873
 27669                           
 27670                           ; BSR set to: 0
 27671                           ;Events.c: 61: {
 27672                           ;Events.c: 62: j++;
 27673  01666A  0100               	movlb	0	; () banked
 27674  01666C  2B8E               	incf	Event_TestButton@j& (0+255),f,b
 27675                           
 27676                           ; BSR set to: 0
 27677                           ;Events.c: 63: val += j;
 27678  01666E  0100               	movlb	0	; () banked
 27679  016670  518E               	movf	Event_TestButton@j& (0+255),w,b
 27680  016672  0100               	movlb	0	; () banked
 27681  016674  2781               	addwf	_val& (0+255),f,b
 27682  016676  0E00               	movlw	0
 27683  016678  2382               	addwfc	(_val+1)& (0+255),f,b
 27684                           
 27685                           ; BSR set to: 0
 27686                           ;Events.c: 64: HMI_SetNumber( val );
 27687  01667A  C081  F0CB         	movff	_val,HMI_SetNumber@pInput
 27688  01667E  C082  F0CC         	movff	_val+1,HMI_SetNumber@pInput+1
 27689  016682  EC7A  F0B4         	call	_HMI_SetNumber	;wreg free
 27690                           
 27691                           ;Events.c: 67: HMI_SetButton( j & 3 );
 27692  016686  0100               	movlb	0	; () banked
 27693  016688  518E               	movf	Event_TestButton@j& (0+255),w,b
 27694  01668A  0B03               	andlw	3
 27695  01668C  ECA4  F0A9         	call	_HMI_SetButton
 27696  016690                     l1873:
 27697                           
 27698                           ;Events.c: 68: }
 27699                           ;Events.c: 72: LED_Toggle(eLED1);
 27700  016690  0E00               	movlw	0
 27701  016692  EC81  F0B1         	call	_LED_Toggle
 27702  016696  0012               	return		;funcret
 27703  016698                     __end_of_Event_TestButton:
 27704                           	opt stack 0
 27705                           tosu	equ	0xFFF
 27706                           tosh	equ	0xFFE
 27707                           tosl	equ	0xFFD
 27708                           pclath	equ	0xFFA
 27709                           tblptru	equ	0xFF8
 27710                           tblptrh	equ	0xFF7
 27711                           tblptrl	equ	0xFF6
 27712                           tablat	equ	0xFF5
 27713                           prodh	equ	0xFF4
 27714                           prodl	equ	0xFF3
 27715                           intcon	equ	0xFF2
 27716                           postinc0	equ	0xFEE
 27717                           wreg	equ	0xFE8
 27718                           indf1	equ	0xFE7
 27719                           postdec1	equ	0xFE5
 27720                           fsr1h	equ	0xFE2
 27721                           fsr1l	equ	0xFE1
 27722                           indf2	equ	0xFDF
 27723                           postinc2	equ	0xFDE
 27724                           postdec2	equ	0xFDD
 27725                           plusw2	equ	0xFDB
 27726                           fsr2h	equ	0xFDA
 27727                           fsr2l	equ	0xFD9
 27728                           status	equ	0xFD8
 27729                           
 27730 ;; *************** function _HMI_SetNumber *****************
 27731 ;; Defined at:
 27732 ;;		line 221 in file "HMI.c"
 27733 ;; Parameters:    Size  Location     Type
 27734 ;;  pInput          2   22[BANK0 ] int 
 27735 ;; Auto vars:     Size  Location     Type
 27736 ;;		None
 27737 ;; Return value:  Size  Location     Type
 27738 ;;                  1    wreg      void 
 27739 ;; Registers used:
 27740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27741 ;; Tracked objects:
 27742 ;;		On entry : 0/0
 27743 ;;		On exit  : 0/0
 27744 ;;		Unchanged: 0/0
 27745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27746 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27750 ;;Total ram usage:        2 bytes
 27751 ;; Hardware stack levels used:    1
 27752 ;; Hardware stack levels required when called:    9
 27753 ;; This function calls:
 27754 ;;		_HMI_SetSegments
 27755 ;;		_itos
 27756 ;; This function is called by:
 27757 ;;		_Event_TestButton
 27758 ;;		_findClosestWall
 27759 ;;		_measureAndDisplayDistance
 27760 ;;		_mode1
 27761 ;;		_Event_HMI_UpButton
 27762 ;;		_Event_HMI_DownButton
 27763 ;; This function uses a non-reentrant model
 27764 ;;
 27765                           
 27766                           	psect	text142
 27767  0168F4                     __ptext142:
 27768                           	opt stack 0
 27769  0168F4                     _HMI_SetNumber:
 27770                           	opt stack 16
 27771                           
 27772                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 27773                           
 27774                           ;incstack = 0
 27775  0168F4  C0CB  F0C1         	movff	HMI_SetNumber@pInput,itos@input
 27776  0168F8  C0CC  F0C2         	movff	HMI_SetNumber@pInput+1,itos@input+1
 27777  0168FC  0E3E               	movlw	low _HMIBoard
 27778  0168FE  0100               	movlb	0	; () banked
 27779  016900  6FC3               	movwf	itos@destination& (0+255),b
 27780  016902  0E03               	movlw	high _HMIBoard
 27781  016904  0100               	movlb	0	; () banked
 27782  016906  6FC4               	movwf	(itos@destination+1)& (0+255),b
 27783  016908  ECC9  F0A0         	call	_itos	;wreg free
 27784                           
 27785                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 27786  01690C  0E3E               	movlw	low _HMIBoard
 27787  01690E  0100               	movlb	0	; () banked
 27788  016910  6FB6               	movwf	HMI_SetSegments@pString& (0+255),b
 27789  016912  0E03               	movlw	high _HMIBoard
 27790  016914  0100               	movlb	0	; () banked
 27791  016916  6FB7               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 27792  016918  ECBB  F0A4         	call	_HMI_SetSegments	;wreg free
 27793  01691C  0012               	return		;funcret
 27794  01691E                     __end_of_HMI_SetNumber:
 27795                           	opt stack 0
 27796                           tosu	equ	0xFFF
 27797                           tosh	equ	0xFFE
 27798                           tosl	equ	0xFFD
 27799                           pclath	equ	0xFFA
 27800                           tblptru	equ	0xFF8
 27801                           tblptrh	equ	0xFF7
 27802                           tblptrl	equ	0xFF6
 27803                           tablat	equ	0xFF5
 27804                           prodh	equ	0xFF4
 27805                           prodl	equ	0xFF3
 27806                           intcon	equ	0xFF2
 27807                           postinc0	equ	0xFEE
 27808                           wreg	equ	0xFE8
 27809                           indf1	equ	0xFE7
 27810                           postdec1	equ	0xFE5
 27811                           fsr1h	equ	0xFE2
 27812                           fsr1l	equ	0xFE1
 27813                           indf2	equ	0xFDF
 27814                           postinc2	equ	0xFDE
 27815                           postdec2	equ	0xFDD
 27816                           plusw2	equ	0xFDB
 27817                           fsr2h	equ	0xFDA
 27818                           fsr2l	equ	0xFD9
 27819                           status	equ	0xFD8
 27820                           
 27821 ;; *************** function _itos *****************
 27822 ;; Defined at:
 27823 ;;		line 369 in file "Library/Types.c"
 27824 ;; Parameters:    Size  Location     Type
 27825 ;;  input           2   12[BANK0 ] unsigned short 
 27826 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 27827 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27828 ;; Auto vars:     Size  Location     Type
 27829 ;;  Out             2   20[BANK0 ] unsigned short 
 27830 ;;  Length          2   18[BANK0 ] unsigned short 
 27831 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 27832 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27833 ;; Return value:  Size  Location     Type
 27834 ;;                  1    wreg      void 
 27835 ;; Registers used:
 27836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27837 ;; Tracked objects:
 27838 ;;		On entry : 0/0
 27839 ;;		On exit  : 0/0
 27840 ;;		Unchanged: 0/0
 27841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27842 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27843 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27845 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27846 ;;Total ram usage:       10 bytes
 27847 ;; Hardware stack levels used:    1
 27848 ;; Hardware stack levels required when called:    8
 27849 ;; This function calls:
 27850 ;;		___lwdiv
 27851 ;;		___lwmod
 27852 ;;		_reverse
 27853 ;; This function is called by:
 27854 ;;		_HMI_SetNumber
 27855 ;; This function uses a non-reentrant model
 27856 ;;
 27857                           
 27858                           	psect	text143
 27859  014192                     __ptext143:
 27860                           	opt stack 0
 27861  014192                     _itos:
 27862                           	opt stack 16
 27863                           
 27864                           ;Types.c: 371: UINT16 Out = input;
 27865                           
 27866                           ;incstack = 0
 27867  014192  C0C1  F0C9         	movff	itos@input,itos@Out
 27868  014196  C0C2  F0CA         	movff	itos@input+1,itos@Out+1
 27869                           
 27870                           ;Types.c: 372: UINT16 Length = 0;
 27871  01419A  0E00               	movlw	0
 27872  01419C  0100               	movlb	0	; () banked
 27873  01419E  6FC8               	movwf	(itos@Length+1)& (0+255),b
 27874  0141A0  0E00               	movlw	0
 27875  0141A2  6FC7               	movwf	itos@Length& (0+255),b
 27876                           
 27877                           ; BSR set to: 0
 27878                           ;Types.c: 373: char *Data = destination;
 27879  0141A4  C0C3  F0C5         	movff	itos@destination,itos@Data
 27880  0141A8  C0C4  F0C6         	movff	itos@destination+1,itos@Data+1
 27881                           
 27882                           ; BSR set to: 0
 27883                           ;Types.c: 374: if(Out == 0)
 27884  0141AC  0100               	movlb	0	; () banked
 27885  0141AE  51C9               	movf	itos@Out& (0+255),w,b
 27886  0141B0  0100               	movlb	0	; () banked
 27887  0141B2  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 27888  0141B4  A4D8               	btfss	status,2,c
 27889  0141B6  D034               	goto	l929
 27890                           
 27891                           ; BSR set to: 0
 27892                           ;Types.c: 375: {
 27893                           ;Types.c: 376: Data[0] = (UINT16)'0';
 27894  0141B8  C0C5  FFD9         	movff	itos@Data,fsr2l
 27895  0141BC  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 27896  0141C0  0E30               	movlw	48
 27897  0141C2  6EDF               	movwf	indf2,c
 27898                           
 27899                           ; BSR set to: 0
 27900                           ;Types.c: 377: Length = 1;
 27901  0141C4  0E00               	movlw	0
 27902  0141C6  0100               	movlb	0	; () banked
 27903  0141C8  6FC8               	movwf	(itos@Length+1)& (0+255),b
 27904  0141CA  0E01               	movlw	1
 27905  0141CC  6FC7               	movwf	itos@Length& (0+255),b
 27906                           
 27907                           ;Types.c: 378: }
 27908  0141CE  D040               	goto	l928
 27909  0141D0                     
 27910                           ; BSR set to: 0
 27911                           ;Types.c: 382: {
 27912                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 27913                           
 27914                           ; BSR set to: 0
 27915  0141D0  C0C9  F0BC         	movff	itos@Out,___lwmod@dividend
 27916  0141D4  C0CA  F0BD         	movff	itos@Out+1,___lwmod@dividend+1
 27917  0141D8  0E00               	movlw	0
 27918  0141DA  0100               	movlb	0	; () banked
 27919  0141DC  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
 27920  0141DE  0E0A               	movlw	10
 27921  0141E0  6FBE               	movwf	___lwmod@divisor& (0+255),b
 27922  0141E2  EC6C  F0AF         	call	___lwmod	;wreg free
 27923  0141E6  0100               	movlb	0	; () banked
 27924  0141E8  51BC               	movf	?___lwmod& (0+255),w,b
 27925  0141EA  0F30               	addlw	48
 27926  0141EC  C0C5  FFD9         	movff	itos@Data,fsr2l
 27927  0141F0  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 27928  0141F4  6EDF               	movwf	indf2,c
 27929                           
 27930                           ; BSR set to: 0
 27931                           ;Types.c: 384: Out /= 10;
 27932  0141F6  C0C9  F0B5         	movff	itos@Out,___lwdiv@dividend
 27933  0141FA  C0CA  F0B6         	movff	itos@Out+1,___lwdiv@dividend+1
 27934  0141FE  0E00               	movlw	0
 27935  014200  0100               	movlb	0	; () banked
 27936  014202  6FB8               	movwf	(___lwdiv@divisor+1)& (0+255),b
 27937  014204  0E0A               	movlw	10
 27938  014206  6FB7               	movwf	___lwdiv@divisor& (0+255),b
 27939  014208  EC01  F0AC         	call	___lwdiv	;wreg free
 27940  01420C  C0B5  F0C9         	movff	?___lwdiv,itos@Out
 27941  014210  C0B6  F0CA         	movff	?___lwdiv+1,itos@Out+1
 27942                           
 27943                           ;Types.c: 385: Length ++;
 27944  014214  0100               	movlb	0	; () banked
 27945  014216  4BC7               	infsnz	itos@Length& (0+255),f,b
 27946  014218  2BC8               	incf	(itos@Length+1)& (0+255),f,b
 27947                           
 27948                           ; BSR set to: 0
 27949                           ;Types.c: 386: Data++;
 27950  01421A  0100               	movlb	0	; () banked
 27951  01421C  4BC5               	infsnz	itos@Data& (0+255),f,b
 27952  01421E  2BC6               	incf	(itos@Data+1)& (0+255),f,b
 27953  014220                     l929:
 27954                           
 27955                           ; BSR set to: 0
 27956                           
 27957                           ; BSR set to: 0
 27958  014220  0100               	movlb	0	; () banked
 27959  014222  51C9               	movf	itos@Out& (0+255),w,b
 27960  014224  0100               	movlb	0	; () banked
 27961  014226  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 27962  014228  B4D8               	btfsc	status,2,c
 27963  01422A  D008               	goto	u9450
 27964                           
 27965                           ; BSR set to: 0
 27966  01422C  0100               	movlb	0	; () banked
 27967  01422E  51C8               	movf	(itos@Length+1)& (0+255),w,b
 27968  014230  E105               	bnz	l12712
 27969  014232  0E06               	movlw	6
 27970  014234  0100               	movlb	0	; () banked
 27971  014236  5DC7               	subwf	itos@Length& (0+255),w,b
 27972  014238  A0D8               	btfss	status,0,c
 27973  01423A  D7CA               	goto	l930
 27974  01423C                     u9450:
 27975  01423C                     l12712:
 27976                           
 27977                           ; BSR set to: 0
 27978                           ;Types.c: 387: }
 27979                           ;Types.c: 388: reverse(destination, Length);
 27980  01423C  C0C3  F0B5         	movff	itos@destination,reverse@input
 27981  014240  C0C4  F0B6         	movff	itos@destination+1,reverse@input+1
 27982  014244  C0C7  F0B7         	movff	itos@Length,reverse@length
 27983  014248  C0C8  F0B8         	movff	itos@Length+1,reverse@length+1
 27984  01424C  ECCE  F0AD         	call	_reverse	;wreg free
 27985  014250                     l928:
 27986                           
 27987                           ;Types.c: 389: }
 27988                           ;Types.c: 390: destination[Length] = '\0';
 27989  014250  0100               	movlb	0	; () banked
 27990  014252  51C7               	movf	itos@Length& (0+255),w,b
 27991  014254  0100               	movlb	0	; () banked
 27992  014256  25C3               	addwf	itos@destination& (0+255),w,b
 27993  014258  6ED9               	movwf	fsr2l,c
 27994  01425A  0100               	movlb	0	; () banked
 27995  01425C  51C8               	movf	(itos@Length+1)& (0+255),w,b
 27996  01425E  0100               	movlb	0	; () banked
 27997  014260  21C4               	addwfc	(itos@destination+1)& (0+255),w,b
 27998  014262  6EDA               	movwf	fsr2h,c
 27999  014264  0E00               	movlw	0
 28000  014266  6EDF               	movwf	indf2,c
 28001                           
 28002                           ; BSR set to: 0
 28003  014268  0012               	return		;funcret
 28004  01426A                     __end_of_itos:
 28005                           	opt stack 0
 28006                           tosu	equ	0xFFF
 28007                           tosh	equ	0xFFE
 28008                           tosl	equ	0xFFD
 28009                           pclath	equ	0xFFA
 28010                           tblptru	equ	0xFF8
 28011                           tblptrh	equ	0xFF7
 28012                           tblptrl	equ	0xFF6
 28013                           tablat	equ	0xFF5
 28014                           prodh	equ	0xFF4
 28015                           prodl	equ	0xFF3
 28016                           intcon	equ	0xFF2
 28017                           postinc0	equ	0xFEE
 28018                           wreg	equ	0xFE8
 28019                           indf1	equ	0xFE7
 28020                           postdec1	equ	0xFE5
 28021                           fsr1h	equ	0xFE2
 28022                           fsr1l	equ	0xFE1
 28023                           indf2	equ	0xFDF
 28024                           postinc2	equ	0xFDE
 28025                           postdec2	equ	0xFDD
 28026                           plusw2	equ	0xFDB
 28027                           fsr2h	equ	0xFDA
 28028                           fsr2l	equ	0xFD9
 28029                           status	equ	0xFD8
 28030                           
 28031 ;; *************** function _reverse *****************
 28032 ;; Defined at:
 28033 ;;		line 357 in file "Library/Types.c"
 28034 ;; Parameters:    Size  Location     Type
 28035 ;;  input           2    0[BANK0 ] PTR unsigned char 
 28036 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28037 ;;  length          2    2[BANK0 ] unsigned short 
 28038 ;; Auto vars:     Size  Location     Type
 28039 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 28040 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28041 ;;  tempVar         1    4[BANK0 ] unsigned char 
 28042 ;; Return value:  Size  Location     Type
 28043 ;;                  1    wreg      void 
 28044 ;; Registers used:
 28045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28046 ;; Tracked objects:
 28047 ;;		On entry : 0/0
 28048 ;;		On exit  : 0/0
 28049 ;;		Unchanged: 0/0
 28050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28052 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28054 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28055 ;;Total ram usage:        7 bytes
 28056 ;; Hardware stack levels used:    1
 28057 ;; Hardware stack levels required when called:    7
 28058 ;; This function calls:
 28059 ;;		Nothing
 28060 ;; This function is called by:
 28061 ;;		_itos
 28062 ;; This function uses a non-reentrant model
 28063 ;;
 28064                           
 28065                           	psect	text144
 28066  015B9C                     __ptext144:
 28067                           	opt stack 0
 28068  015B9C                     _reverse:
 28069                           	opt stack 16
 28070                           
 28071                           ;Types.c: 359: char tempVar,
 28072                           ;Types.c: 360: *iterator = input + length;
 28073                           
 28074                           ; BSR set to: 0
 28075                           ;incstack = 0
 28076  015B9C  0100               	movlb	0	; () banked
 28077  015B9E  51B7               	movf	reverse@length& (0+255),w,b
 28078  015BA0  0100               	movlb	0	; () banked
 28079  015BA2  25B5               	addwf	reverse@input& (0+255),w,b
 28080  015BA4  0100               	movlb	0	; () banked
 28081  015BA6  6FBA               	movwf	reverse@iterator& (0+255),b
 28082  015BA8  0100               	movlb	0	; () banked
 28083  015BAA  51B8               	movf	(reverse@length+1)& (0+255),w,b
 28084  015BAC  0100               	movlb	0	; () banked
 28085  015BAE  21B6               	addwfc	(reverse@input+1)& (0+255),w,b
 28086  015BB0  0100               	movlb	0	; () banked
 28087  015BB2  6FBB               	movwf	(reverse@iterator+1)& (0+255),b
 28088                           
 28089                           ;Types.c: 362: while ( --iterator > input )
 28090  015BB4  D01A               	goto	l921
 28091  015BB6                     
 28092                           ; BSR set to: 0
 28093                           ;Types.c: 363: {
 28094                           ;Types.c: 364: tempVar = *input;
 28095                           
 28096                           ; BSR set to: 0
 28097  015BB6  C0B5  FFD9         	movff	reverse@input,fsr2l
 28098  015BBA  C0B6  FFDA         	movff	reverse@input+1,fsr2h
 28099  015BBE  50DF               	movf	indf2,w,c
 28100  015BC0  0100               	movlb	0	; () banked
 28101  015BC2  6FB9               	movwf	reverse@tempVar& (0+255),b
 28102                           
 28103                           ; BSR set to: 0
 28104                           ;Types.c: 365: *input++=*iterator;
 28105  015BC4  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 28106  015BC8  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 28107  015BCC  C0B5  FFE1         	movff	reverse@input,fsr1l
 28108  015BD0  C0B6  FFE2         	movff	reverse@input+1,fsr1h
 28109  015BD4  CFDF FFE7          	movff	indf2,indf1
 28110                           
 28111                           ; BSR set to: 0
 28112  015BD8  0100               	movlb	0	; () banked
 28113  015BDA  4BB5               	infsnz	reverse@input& (0+255),f,b
 28114  015BDC  2BB6               	incf	(reverse@input+1)& (0+255),f,b
 28115                           
 28116                           ; BSR set to: 0
 28117                           ;Types.c: 366: *iterator=tempVar;
 28118  015BDE  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 28119  015BE2  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 28120  015BE6  C0B9  FFDF         	movff	reverse@tempVar,indf2
 28121  015BEA                     l921:
 28122                           
 28123                           ; BSR set to: 0
 28124                           
 28125                           ; BSR set to: 0
 28126  015BEA  0100               	movlb	0	; () banked
 28127  015BEC  07BA               	decf	reverse@iterator& (0+255),f,b
 28128  015BEE  A0D8               	btfss	status,0,c
 28129  015BF0  07BB               	decf	(reverse@iterator+1)& (0+255),f,b
 28130  015BF2  0100               	movlb	0	; () banked
 28131  015BF4  51BA               	movf	reverse@iterator& (0+255),w,b
 28132  015BF6  0100               	movlb	0	; () banked
 28133  015BF8  5DB5               	subwf	reverse@input& (0+255),w,b
 28134  015BFA  0100               	movlb	0	; () banked
 28135  015BFC  51BB               	movf	(reverse@iterator+1)& (0+255),w,b
 28136  015BFE  0100               	movlb	0	; () banked
 28137  015C00  59B6               	subwfb	(reverse@input+1)& (0+255),w,b
 28138  015C02  B0D8               	btfsc	status,0,c
 28139  015C04  0012               	return	
 28140  015C06  D7D7               	goto	l922
 28141  015C08                     __end_of_reverse:
 28142                           	opt stack 0
 28143                           tosu	equ	0xFFF
 28144                           tosh	equ	0xFFE
 28145                           tosl	equ	0xFFD
 28146                           pclath	equ	0xFFA
 28147                           tblptru	equ	0xFF8
 28148                           tblptrh	equ	0xFF7
 28149                           tblptrl	equ	0xFF6
 28150                           tablat	equ	0xFF5
 28151                           prodh	equ	0xFF4
 28152                           prodl	equ	0xFF3
 28153                           intcon	equ	0xFF2
 28154                           postinc0	equ	0xFEE
 28155                           wreg	equ	0xFE8
 28156                           indf1	equ	0xFE7
 28157                           postdec1	equ	0xFE5
 28158                           fsr1h	equ	0xFE2
 28159                           fsr1l	equ	0xFE1
 28160                           indf2	equ	0xFDF
 28161                           postinc2	equ	0xFDE
 28162                           postdec2	equ	0xFDD
 28163                           plusw2	equ	0xFDB
 28164                           fsr2h	equ	0xFDA
 28165                           fsr2l	equ	0xFD9
 28166                           status	equ	0xFD8
 28167                           
 28168 ;; *************** function ___lwmod *****************
 28169 ;; Defined at:
 28170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 28171 ;; Parameters:    Size  Location     Type
 28172 ;;  dividend        2    7[BANK0 ] unsigned int 
 28173 ;;  divisor         2    9[BANK0 ] unsigned int 
 28174 ;; Auto vars:     Size  Location     Type
 28175 ;;  counter         1   11[BANK0 ] unsigned char 
 28176 ;; Return value:  Size  Location     Type
 28177 ;;                  2    7[BANK0 ] unsigned int 
 28178 ;; Registers used:
 28179 ;;		wreg, status,2, status,0
 28180 ;; Tracked objects:
 28181 ;;		On entry : 0/0
 28182 ;;		On exit  : 0/0
 28183 ;;		Unchanged: 0/0
 28184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28188 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28189 ;;Total ram usage:        5 bytes
 28190 ;; Hardware stack levels used:    1
 28191 ;; Hardware stack levels required when called:    7
 28192 ;; This function calls:
 28193 ;;		Nothing
 28194 ;; This function is called by:
 28195 ;;		_itos
 28196 ;;		_printf
 28197 ;; This function uses a non-reentrant model
 28198 ;;
 28199                           
 28200                           	psect	text145
 28201  015ED8                     __ptext145:
 28202                           	opt stack 0
 28203  015ED8                     ___lwmod:
 28204                           	opt stack 22
 28205                           
 28206                           ; BSR set to: 0
 28207                           ;incstack = 0
 28208  015ED8  0100               	movlb	0	; () banked
 28209  015EDA  51BE               	movf	___lwmod@divisor& (0+255),w,b
 28210  015EDC  0100               	movlb	0	; () banked
 28211  015EDE  11BF               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 28212  015EE0  B4D8               	btfsc	status,2,c
 28213  015EE2  D026               	goto	l2917
 28214                           
 28215                           ; BSR set to: 0
 28216  015EE4  0E01               	movlw	1
 28217  015EE6  0100               	movlb	0	; () banked
 28218  015EE8  6FC0               	movwf	___lwmod@counter& (0+255),b
 28219  015EEA  D006               	goto	l2912
 28220  015EEC                     
 28221                           ; BSR set to: 0
 28222                           
 28223                           ; BSR set to: 0
 28224  015EEC  0100               	movlb	0	; () banked
 28225  015EEE  90D8               	bcf	status,0,c
 28226  015EF0  37BE               	rlcf	___lwmod@divisor& (0+255),f,b
 28227  015EF2  37BF               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 28228  015EF4  0100               	movlb	0	; () banked
 28229  015EF6  2BC0               	incf	___lwmod@counter& (0+255),f,b
 28230  015EF8                     l2912:
 28231                           
 28232                           ; BSR set to: 0
 28233                           
 28234                           ; BSR set to: 0
 28235  015EF8  0100               	movlb	0	; () banked
 28236  015EFA  AFBF               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 28237  015EFC  D7F7               	goto	l2913
 28238  015EFE                     u9340:
 28239                           
 28240                           ; BSR set to: 0
 28241                           
 28242                           ; BSR set to: 0
 28243                           
 28244                           ; BSR set to: 0
 28245  015EFE  0100               	movlb	0	; () banked
 28246  015F00  51BE               	movf	___lwmod@divisor& (0+255),w,b
 28247  015F02  0100               	movlb	0	; () banked
 28248  015F04  5DBC               	subwf	___lwmod@dividend& (0+255),w,b
 28249  015F06  0100               	movlb	0	; () banked
 28250  015F08  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28251  015F0A  0100               	movlb	0	; () banked
 28252  015F0C  59BD               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 28253  015F0E  A0D8               	btfss	status,0,c
 28254  015F10  D008               	goto	l2916
 28255                           
 28256                           ; BSR set to: 0
 28257  015F12  0100               	movlb	0	; () banked
 28258  015F14  51BE               	movf	___lwmod@divisor& (0+255),w,b
 28259  015F16  0100               	movlb	0	; () banked
 28260  015F18  5FBC               	subwf	___lwmod@dividend& (0+255),f,b
 28261  015F1A  0100               	movlb	0	; () banked
 28262  015F1C  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28263  015F1E  0100               	movlb	0	; () banked
 28264  015F20  5BBD               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 28265  015F22                     l2916:
 28266                           
 28267                           ; BSR set to: 0
 28268                           
 28269                           ; BSR set to: 0
 28270  015F22  0100               	movlb	0	; () banked
 28271  015F24  90D8               	bcf	status,0,c
 28272  015F26  33BF               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 28273  015F28  33BE               	rrcf	___lwmod@divisor& (0+255),f,b
 28274                           
 28275                           ; BSR set to: 0
 28276  015F2A  0100               	movlb	0	; () banked
 28277  015F2C  2FC0               	decfsz	___lwmod@counter& (0+255),f,b
 28278  015F2E  D7E7               	goto	u9340
 28279  015F30                     l2917:
 28280                           
 28281                           ; BSR set to: 0
 28282                           
 28283                           ; BSR set to: 0
 28284  015F30  C0BC  F0BC         	movff	___lwmod@dividend,?___lwmod
 28285  015F34  C0BD  F0BD         	movff	___lwmod@dividend+1,?___lwmod+1
 28286                           
 28287                           ; BSR set to: 0
 28288  015F38  0012               	return		;funcret
 28289  015F3A                     __end_of___lwmod:
 28290                           	opt stack 0
 28291                           tosu	equ	0xFFF
 28292                           tosh	equ	0xFFE
 28293                           tosl	equ	0xFFD
 28294                           pclath	equ	0xFFA
 28295                           tblptru	equ	0xFF8
 28296                           tblptrh	equ	0xFF7
 28297                           tblptrl	equ	0xFF6
 28298                           tablat	equ	0xFF5
 28299                           prodh	equ	0xFF4
 28300                           prodl	equ	0xFF3
 28301                           intcon	equ	0xFF2
 28302                           postinc0	equ	0xFEE
 28303                           wreg	equ	0xFE8
 28304                           indf1	equ	0xFE7
 28305                           postdec1	equ	0xFE5
 28306                           fsr1h	equ	0xFE2
 28307                           fsr1l	equ	0xFE1
 28308                           indf2	equ	0xFDF
 28309                           postinc2	equ	0xFDE
 28310                           postdec2	equ	0xFDD
 28311                           plusw2	equ	0xFDB
 28312                           fsr2h	equ	0xFDA
 28313                           fsr2l	equ	0xFD9
 28314                           status	equ	0xFD8
 28315                           
 28316 ;; *************** function ___lwdiv *****************
 28317 ;; Defined at:
 28318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 28319 ;; Parameters:    Size  Location     Type
 28320 ;;  dividend        2    0[BANK0 ] unsigned int 
 28321 ;;  divisor         2    2[BANK0 ] unsigned int 
 28322 ;; Auto vars:     Size  Location     Type
 28323 ;;  quotient        2    5[BANK0 ] unsigned int 
 28324 ;;  counter         1    4[BANK0 ] unsigned char 
 28325 ;; Return value:  Size  Location     Type
 28326 ;;                  2    0[BANK0 ] unsigned int 
 28327 ;; Registers used:
 28328 ;;		wreg, status,2, status,0
 28329 ;; Tracked objects:
 28330 ;;		On entry : 0/0
 28331 ;;		On exit  : 0/0
 28332 ;;		Unchanged: 0/0
 28333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28334 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28335 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28337 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28338 ;;Total ram usage:        7 bytes
 28339 ;; Hardware stack levels used:    1
 28340 ;; Hardware stack levels required when called:    7
 28341 ;; This function calls:
 28342 ;;		Nothing
 28343 ;; This function is called by:
 28344 ;;		_itos
 28345 ;;		_printf
 28346 ;; This function uses a non-reentrant model
 28347 ;;
 28348                           
 28349                           	psect	text146
 28350  015802                     __ptext146:
 28351                           	opt stack 0
 28352  015802                     ___lwdiv:
 28353                           	opt stack 22
 28354                           
 28355                           ; BSR set to: 0
 28356                           ;incstack = 0
 28357  015802  0E00               	movlw	0
 28358  015804  0100               	movlb	0	; () banked
 28359  015806  6FBB               	movwf	(___lwdiv@quotient+1)& (0+255),b
 28360  015808  0E00               	movlw	0
 28361  01580A  6FBA               	movwf	___lwdiv@quotient& (0+255),b
 28362                           
 28363                           ; BSR set to: 0
 28364  01580C  0100               	movlb	0	; () banked
 28365  01580E  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 28366  015810  0100               	movlb	0	; () banked
 28367  015812  11B8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 28368  015814  B4D8               	btfsc	status,2,c
 28369  015816  D02C               	goto	l2907
 28370                           
 28371                           ; BSR set to: 0
 28372  015818  0E01               	movlw	1
 28373  01581A  0100               	movlb	0	; () banked
 28374  01581C  6FB9               	movwf	___lwdiv@counter& (0+255),b
 28375  01581E  D006               	goto	l2902
 28376  015820                     
 28377                           ; BSR set to: 0
 28378                           
 28379                           ; BSR set to: 0
 28380  015820  0100               	movlb	0	; () banked
 28381  015822  90D8               	bcf	status,0,c
 28382  015824  37B7               	rlcf	___lwdiv@divisor& (0+255),f,b
 28383  015826  37B8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 28384  015828  0100               	movlb	0	; () banked
 28385  01582A  2BB9               	incf	___lwdiv@counter& (0+255),f,b
 28386  01582C                     l2902:
 28387                           
 28388                           ; BSR set to: 0
 28389                           
 28390                           ; BSR set to: 0
 28391  01582C  0100               	movlb	0	; () banked
 28392  01582E  AFB8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 28393  015830  D7F7               	goto	l2903
 28394  015832                     u9310:
 28395                           
 28396                           ; BSR set to: 0
 28397                           
 28398                           ; BSR set to: 0
 28399                           
 28400                           ; BSR set to: 0
 28401  015832  0100               	movlb	0	; () banked
 28402  015834  90D8               	bcf	status,0,c
 28403  015836  37BA               	rlcf	___lwdiv@quotient& (0+255),f,b
 28404  015838  37BB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 28405                           
 28406                           ; BSR set to: 0
 28407  01583A  0100               	movlb	0	; () banked
 28408  01583C  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 28409  01583E  0100               	movlb	0	; () banked
 28410  015840  5DB5               	subwf	___lwdiv@dividend& (0+255),w,b
 28411  015842  0100               	movlb	0	; () banked
 28412  015844  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28413  015846  0100               	movlb	0	; () banked
 28414  015848  59B6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 28415  01584A  A0D8               	btfss	status,0,c
 28416  01584C  D00A               	goto	l2906
 28417                           
 28418                           ; BSR set to: 0
 28419  01584E  0100               	movlb	0	; () banked
 28420  015850  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 28421  015852  0100               	movlb	0	; () banked
 28422  015854  5FB5               	subwf	___lwdiv@dividend& (0+255),f,b
 28423  015856  0100               	movlb	0	; () banked
 28424  015858  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28425  01585A  0100               	movlb	0	; () banked
 28426  01585C  5BB6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 28427                           
 28428                           ; BSR set to: 0
 28429  01585E  0100               	movlb	0	; () banked
 28430  015860  81BA               	bsf	___lwdiv@quotient& (0+255),0,b
 28431  015862                     l2906:
 28432                           
 28433                           ; BSR set to: 0
 28434                           
 28435                           ; BSR set to: 0
 28436  015862  0100               	movlb	0	; () banked
 28437  015864  90D8               	bcf	status,0,c
 28438  015866  33B8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 28439  015868  33B7               	rrcf	___lwdiv@divisor& (0+255),f,b
 28440                           
 28441                           ; BSR set to: 0
 28442  01586A  0100               	movlb	0	; () banked
 28443  01586C  2FB9               	decfsz	___lwdiv@counter& (0+255),f,b
 28444  01586E  D7E1               	goto	u9310
 28445  015870                     l2907:
 28446                           
 28447                           ; BSR set to: 0
 28448                           
 28449                           ; BSR set to: 0
 28450  015870  C0BA  F0B5         	movff	___lwdiv@quotient,?___lwdiv
 28451  015874  C0BB  F0B6         	movff	___lwdiv@quotient+1,?___lwdiv+1
 28452                           
 28453                           ; BSR set to: 0
 28454  015878  0012               	return		;funcret
 28455  01587A                     __end_of___lwdiv:
 28456                           	opt stack 0
 28457                           tosu	equ	0xFFF
 28458                           tosh	equ	0xFFE
 28459                           tosl	equ	0xFFD
 28460                           pclath	equ	0xFFA
 28461                           tblptru	equ	0xFF8
 28462                           tblptrh	equ	0xFF7
 28463                           tblptrl	equ	0xFF6
 28464                           tablat	equ	0xFF5
 28465                           prodh	equ	0xFF4
 28466                           prodl	equ	0xFF3
 28467                           intcon	equ	0xFF2
 28468                           postinc0	equ	0xFEE
 28469                           wreg	equ	0xFE8
 28470                           indf1	equ	0xFE7
 28471                           postdec1	equ	0xFE5
 28472                           fsr1h	equ	0xFE2
 28473                           fsr1l	equ	0xFE1
 28474                           indf2	equ	0xFDF
 28475                           postinc2	equ	0xFDE
 28476                           postdec2	equ	0xFDD
 28477                           plusw2	equ	0xFDB
 28478                           fsr2h	equ	0xFDA
 28479                           fsr2l	equ	0xFD9
 28480                           status	equ	0xFD8
 28481                           
 28482 ;; *************** function _HMI_SetSegments *****************
 28483 ;; Defined at:
 28484 ;;		line 226 in file "HMI.c"
 28485 ;; Parameters:    Size  Location     Type
 28486 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 28487 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28488 ;; Auto vars:     Size  Location     Type
 28489 ;;  in              2    4[BANK0 ] unsigned short 
 28490 ;; Return value:  Size  Location     Type
 28491 ;;                  1    wreg      void 
 28492 ;; Registers used:
 28493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28494 ;; Tracked objects:
 28495 ;;		On entry : 0/0
 28496 ;;		On exit  : 0/0
 28497 ;;		Unchanged: 0/0
 28498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28499 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28500 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28502 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28503 ;;Total ram usage:        5 bytes
 28504 ;; Hardware stack levels used:    1
 28505 ;; Hardware stack levels required when called:    8
 28506 ;; This function calls:
 28507 ;;		_ToSegment
 28508 ;; This function is called by:
 28509 ;;		_HMI_SetNumber
 28510 ;; This function uses a non-reentrant model
 28511 ;;
 28512                           
 28513                           	psect	text147
 28514  014976                     __ptext147:
 28515                           	opt stack 0
 28516  014976                     _HMI_SetSegments:
 28517                           	opt stack 16
 28518                           
 28519                           ;HMI.c: 228: UINT16 in=0;
 28520                           
 28521                           ; BSR set to: 0
 28522                           ;incstack = 0
 28523  014976  0E00               	movlw	0
 28524  014978  0100               	movlb	0	; () banked
 28525  01497A  6FBA               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 28526  01497C  0E00               	movlw	0
 28527  01497E  6FB9               	movwf	HMI_SetSegments@in& (0+255),b
 28528                           
 28529                           ;HMI.c: 229: while(*pString)
 28530  014980  D038               	goto	l1202
 28531  014982                     
 28532                           ; BSR set to: 0
 28533                           ;HMI.c: 230: {
 28534                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 28535                           
 28536                           ; BSR set to: 0
 28537  014982  0E3E               	movlw	low _HMIBoard
 28538  014984  0100               	movlb	0	; () banked
 28539  014986  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 28540  014988  6ED9               	movwf	fsr2l,c
 28541  01498A  0E03               	movlw	high _HMIBoard
 28542  01498C  0100               	movlb	0	; () banked
 28543  01498E  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28544  014990  6EDA               	movwf	fsr2h,c
 28545  014992  C0B6  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 28546  014996  C0B7  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 28547  01499A  50E7               	movf	indf1,w,c
 28548  01499C  ECD0  F08D         	call	_ToSegment
 28549  0149A0  6EDF               	movwf	indf2,c
 28550                           
 28551                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 28552  0149A2  0E3E               	movlw	low _HMIBoard
 28553  0149A4  0100               	movlb	0	; () banked
 28554  0149A6  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 28555  0149A8  6ED9               	movwf	fsr2l,c
 28556  0149AA  0E03               	movlw	high _HMIBoard
 28557  0149AC  0100               	movlb	0	; () banked
 28558  0149AE  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28559  0149B0  6EDA               	movwf	fsr2h,c
 28560  0149B2  0E80               	movlw	128
 28561  0149B4  18DE               	xorwf	postinc2,w,c
 28562  0149B6  A4D8               	btfss	status,2,c
 28563  0149B8  D00E               	goto	l1201
 28564                           
 28565                           ; BSR set to: 0
 28566                           ;HMI.c: 234: {
 28567                           ;HMI.c: 235: in--;
 28568  0149BA  0100               	movlb	0	; () banked
 28569  0149BC  07B9               	decf	HMI_SetSegments@in& (0+255),f,b
 28570  0149BE  A0D8               	btfss	status,0,c
 28571  0149C0  07BA               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 28572                           
 28573                           ; BSR set to: 0
 28574                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 28575  0149C2  0E3E               	movlw	low _HMIBoard
 28576  0149C4  0100               	movlb	0	; () banked
 28577  0149C6  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 28578  0149C8  6ED9               	movwf	fsr2l,c
 28579  0149CA  0E03               	movlw	high _HMIBoard
 28580  0149CC  0100               	movlb	0	; () banked
 28581  0149CE  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28582  0149D0  6EDA               	movwf	fsr2h,c
 28583  0149D2  0E00               	movlw	0
 28584  0149D4  8EDB               	bsf	plusw2,7,c
 28585  0149D6                     l1201:
 28586                           
 28587                           ; BSR set to: 0
 28588                           ;HMI.c: 237: }
 28589                           ;HMI.c: 239: pString++;
 28590                           
 28591                           ; BSR set to: 0
 28592  0149D6  0100               	movlb	0	; () banked
 28593  0149D8  4BB6               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 28594  0149DA  2BB7               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 28595                           
 28596                           ; BSR set to: 0
 28597                           ;HMI.c: 240: in++;
 28598  0149DC  0100               	movlb	0	; () banked
 28599  0149DE  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28600  0149E0  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28601                           
 28602                           ; BSR set to: 0
 28603                           ;HMI.c: 241: if (in>=6)
 28604  0149E2  0100               	movlb	0	; () banked
 28605  0149E4  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28606  0149E6  E11A               	bnz	l12764
 28607  0149E8  0E06               	movlw	6
 28608  0149EA  0100               	movlb	0	; () banked
 28609  0149EC  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 28610  0149EE  B0D8               	btfsc	status,0,c
 28611  0149F0  D015               	goto	l1204
 28612  0149F2                     l1202:
 28613                           
 28614                           ; BSR set to: 0
 28615                           
 28616                           ; BSR set to: 0
 28617                           
 28618                           ; BSR set to: 0
 28619  0149F2  C0B6  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 28620  0149F6  C0B7  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 28621  0149FA  50DF               	movf	indf2,w,c
 28622  0149FC  B4D8               	btfsc	status,2,c
 28623  0149FE  D00E               	goto	l1204
 28624  014A00  D7C0               	goto	l1200
 28625  014A02                     
 28626                           ; BSR set to: 0
 28627                           ;HMI.c: 245: {
 28628                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 28629                           
 28630                           ; BSR set to: 0
 28631  014A02  0E3E               	movlw	low _HMIBoard
 28632  014A04  0100               	movlb	0	; () banked
 28633  014A06  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 28634  014A08  6ED9               	movwf	fsr2l,c
 28635  014A0A  0E03               	movlw	high _HMIBoard
 28636  014A0C  0100               	movlb	0	; () banked
 28637  014A0E  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28638  014A10  6EDA               	movwf	fsr2h,c
 28639  014A12  0E00               	movlw	0
 28640  014A14  6EDF               	movwf	indf2,c
 28641                           
 28642                           ; BSR set to: 0
 28643                           ;HMI.c: 247: in++;
 28644  014A16  0100               	movlb	0	; () banked
 28645  014A18  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28646  014A1A  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28647  014A1C                     l1204:
 28648  014A1C                     l12764:
 28649                           
 28650                           ; BSR set to: 0
 28651  014A1C  0100               	movlb	0	; () banked
 28652  014A1E  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28653  014A20  E106               	bnz	l1207
 28654  014A22  0E06               	movlw	6
 28655  014A24  0100               	movlb	0	; () banked
 28656  014A26  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 28657  014A28  B0D8               	btfsc	status,0,c
 28658  014A2A  0012               	return	
 28659  014A2C  D7EA               	goto	l1205
 28660  014A2E                     l1207:
 28661                           
 28662                           ; BSR set to: 0
 28663  014A2E  0012               	return		;funcret
 28664  014A30                     __end_of_HMI_SetSegments:
 28665                           	opt stack 0
 28666                           tosu	equ	0xFFF
 28667                           tosh	equ	0xFFE
 28668                           tosl	equ	0xFFD
 28669                           pclath	equ	0xFFA
 28670                           tblptru	equ	0xFF8
 28671                           tblptrh	equ	0xFF7
 28672                           tblptrl	equ	0xFF6
 28673                           tablat	equ	0xFF5
 28674                           prodh	equ	0xFF4
 28675                           prodl	equ	0xFF3
 28676                           intcon	equ	0xFF2
 28677                           postinc0	equ	0xFEE
 28678                           wreg	equ	0xFE8
 28679                           indf1	equ	0xFE7
 28680                           postdec1	equ	0xFE5
 28681                           fsr1h	equ	0xFE2
 28682                           fsr1l	equ	0xFE1
 28683                           indf2	equ	0xFDF
 28684                           postinc2	equ	0xFDE
 28685                           postdec2	equ	0xFDD
 28686                           plusw2	equ	0xFDB
 28687                           fsr2h	equ	0xFDA
 28688                           fsr2l	equ	0xFD9
 28689                           status	equ	0xFD8
 28690                           
 28691 ;; *************** function _ToSegment *****************
 28692 ;; Defined at:
 28693 ;;		line 284 in file "Library/Types.c"
 28694 ;; Parameters:    Size  Location     Type
 28695 ;;  pCHR            1    wreg     unsigned char 
 28696 ;; Auto vars:     Size  Location     Type
 28697 ;;  pCHR            1    0[BANK0 ] unsigned char 
 28698 ;; Return value:  Size  Location     Type
 28699 ;;                  1    wreg      unsigned char 
 28700 ;; Registers used:
 28701 ;;		wreg, status,2, status,0
 28702 ;; Tracked objects:
 28703 ;;		On entry : 0/0
 28704 ;;		On exit  : 0/0
 28705 ;;		Unchanged: 0/0
 28706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28710 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28711 ;;Total ram usage:        1 bytes
 28712 ;; Hardware stack levels used:    1
 28713 ;; Hardware stack levels required when called:    7
 28714 ;; This function calls:
 28715 ;;		Nothing
 28716 ;; This function is called by:
 28717 ;;		_HMI_SetSegments
 28718 ;; This function uses a non-reentrant model
 28719 ;;
 28720                           
 28721                           	psect	text148
 28722  011BA0                     __ptext148:
 28723                           	opt stack 0
 28724  011BA0                     _ToSegment:
 28725                           	opt stack 16
 28726                           
 28727                           ; BSR set to: 0
 28728                           ;incstack = 0
 28729                           ;ToSegment@pCHR stored from wreg
 28730  011BA0  0100               	movlb	0	; () banked
 28731  011BA2  6FB5               	movwf	ToSegment@pCHR& (0+255),b
 28732                           
 28733                           ;Types.c: 286: switch(pCHR)
 28734  011BA4  D07E               	goto	l853
 28735  011BA6  0E3F               	movlw	63
 28736  011BA8  0012               	return	
 28737  011BAA  0E06               	movlw	6
 28738  011BAC  0012               	return	
 28739  011BAE  0E5B               	movlw	91
 28740  011BB0  0012               	return	
 28741  011BB2  0E4F               	movlw	79
 28742  011BB4  0012               	return	
 28743  011BB6  0E66               	movlw	102
 28744  011BB8  0012               	return	
 28745  011BBA  0E6D               	movlw	109
 28746  011BBC  0012               	return	
 28747  011BBE  0E7D               	movlw	125
 28748  011BC0  0012               	return	
 28749  011BC2  0E07               	movlw	7
 28750  011BC4  0012               	return	
 28751  011BC6  0E7F               	movlw	127
 28752  011BC8  0012               	return	
 28753  011BCA  0E6F               	movlw	111
 28754  011BCC  0012               	return	
 28755  011BCE  0E5F               	movlw	95
 28756  011BD0  0012               	return	
 28757  011BD2  0E7C               	movlw	124
 28758  011BD4  0012               	return	
 28759  011BD6  0E58               	movlw	88
 28760  011BD8  0012               	return	
 28761  011BDA  0E5E               	movlw	94
 28762  011BDC  0012               	return	
 28763  011BDE  0E7B               	movlw	123
 28764  011BE0  0012               	return	
 28765  011BE2  0E71               	movlw	113
 28766  011BE4  0012               	return	
 28767  011BE6  0E6F               	movlw	111
 28768  011BE8  0012               	return	
 28769  011BEA  0E74               	movlw	116
 28770  011BEC  0012               	return	
 28771  011BEE  0E04               	movlw	4
 28772  011BF0  0012               	return	
 28773  011BF2  0E0E               	movlw	14
 28774  011BF4  0012               	return	
 28775  011BF6  0E7A               	movlw	122
 28776  011BF8  0012               	return	
 28777  011BFA  0E06               	movlw	6
 28778  011BFC  0012               	return	
 28779  011BFE  0E14               	movlw	20
 28780  011C00  0012               	return	
 28781  011C02  0E54               	movlw	84
 28782  011C04  0012               	return	
 28783  011C06  0E5C               	movlw	92
 28784  011C08  0012               	return	
 28785  011C0A  0E73               	movlw	115
 28786  011C0C  0012               	return	
 28787  011C0E  0E67               	movlw	103
 28788  011C10  0012               	return	
 28789  011C12  0E50               	movlw	80
 28790  011C14  0012               	return	
 28791  011C16  0E6D               	movlw	109
 28792  011C18  0012               	return	
 28793  011C1A  0E78               	movlw	120
 28794  011C1C  0012               	return	
 28795  011C1E  0E1C               	movlw	28
 28796  011C20  0012               	return	
 28797  011C22  0E62               	movlw	98
 28798  011C24  0012               	return	
 28799  011C26  0E2A               	movlw	42
 28800  011C28  0012               	return	
 28801  011C2A  0E64               	movlw	100
 28802  011C2C  0012               	return	
 28803  011C2E  0E6E               	movlw	110
 28804  011C30  0012               	return	
 28805  011C32  0E5B               	movlw	91
 28806  011C34  0012               	return	
 28807  011C36  0E77               	movlw	119
 28808  011C38  0012               	return	
 28809  011C3A  0E7F               	movlw	127
 28810  011C3C  0012               	return	
 28811  011C3E  0E39               	movlw	57
 28812  011C40  0012               	return	
 28813  011C42  0E3F               	movlw	63
 28814  011C44  0012               	return	
 28815  011C46  0E79               	movlw	121
 28816  011C48  0012               	return	
 28817  011C4A  0E71               	movlw	113
 28818  011C4C  0012               	return	
 28819  011C4E  0E3D               	movlw	61
 28820  011C50  0012               	return	
 28821  011C52  0E76               	movlw	118
 28822  011C54  0012               	return	
 28823  011C56  0E06               	movlw	6
 28824  011C58  0012               	return	
 28825  011C5A  0E1E               	movlw	30
 28826  011C5C  0012               	return	
 28827  011C5E  0E57               	movlw	87
 28828  011C60  0012               	return	
 28829  011C62  0E38               	movlw	56
 28830  011C64  0012               	return	
 28831  011C66  0E76               	movlw	118
 28832  011C68  0012               	return	
 28833  011C6A  0E76               	movlw	118
 28834  011C6C  0012               	return	
 28835  011C6E  0E3F               	movlw	63
 28836  011C70  0012               	return	
 28837  011C72  0E73               	movlw	115
 28838  011C74  0012               	return	
 28839  011C76  0E3F               	movlw	63
 28840  011C78  0012               	return	
 28841  011C7A  0E77               	movlw	119
 28842  011C7C  0012               	return	
 28843  011C7E  0E6D               	movlw	109
 28844  011C80  0012               	return	
 28845  011C82  0E31               	movlw	49
 28846  011C84  0012               	return	
 28847  011C86  0E3E               	movlw	62
 28848  011C88  0012               	return	
 28849  011C8A  0E3E               	movlw	62
 28850  011C8C  0012               	return	
 28851  011C8E  0E7E               	movlw	126
 28852  011C90  0012               	return	
 28853  011C92  0E76               	movlw	118
 28854  011C94  0012               	return	
 28855  011C96  0E66               	movlw	102
 28856  011C98  0012               	return	
 28857  011C9A  0E5B               	movlw	91
 28858  011C9C  0012               	return	
 28859  011C9E  0E80               	movlw	128
 28860  011CA0  0012               	return	
 28861  011CA2                     l853:
 28862  011CA2  0100               	movlb	0	; () banked
 28863  011CA4  51B5               	movf	ToSegment@pCHR& (0+255),w,b
 28864                           
 28865                           ; Switch size 1, requested type "space"
 28866                           ; Number of cases is 63, Range of values is 46 to 122
 28867                           ; switch strategies available:
 28868                           ; Name         Instructions Cycles
 28869                           ; simple_byte          190    96 (average)
 28870                           ;	Chosen strategy is simple_byte
 28871  011CA6  0A2E               	xorlw	46	; case 46
 28872  011CA8  B4D8               	btfsc	status,2,c
 28873  011CAA  D7F9               	goto	l917
 28874  011CAC  0A1E               	xorlw	30	; case 48
 28875  011CAE  B4D8               	btfsc	status,2,c
 28876  011CB0  D77A               	goto	l854
 28877  011CB2  0A01               	xorlw	1	; case 49
 28878  011CB4  B4D8               	btfsc	status,2,c
 28879  011CB6  D779               	goto	l856
 28880  011CB8  0A03               	xorlw	3	; case 50
 28881  011CBA  B4D8               	btfsc	status,2,c
 28882  011CBC  D778               	goto	l857
 28883  011CBE  0A01               	xorlw	1	; case 51
 28884  011CC0  B4D8               	btfsc	status,2,c
 28885  011CC2  D777               	goto	l858
 28886  011CC4  0A07               	xorlw	7	; case 52
 28887  011CC6  B4D8               	btfsc	status,2,c
 28888  011CC8  D776               	goto	l859
 28889  011CCA  0A01               	xorlw	1	; case 53
 28890  011CCC  B4D8               	btfsc	status,2,c
 28891  011CCE  D775               	goto	l860
 28892  011CD0  0A03               	xorlw	3	; case 54
 28893  011CD2  B4D8               	btfsc	status,2,c
 28894  011CD4  D774               	goto	l861
 28895  011CD6  0A01               	xorlw	1	; case 55
 28896  011CD8  B4D8               	btfsc	status,2,c
 28897  011CDA  D773               	goto	l862
 28898  011CDC  0A0F               	xorlw	15	; case 56
 28899  011CDE  B4D8               	btfsc	status,2,c
 28900  011CE0  D772               	goto	l863
 28901  011CE2  0A01               	xorlw	1	; case 57
 28902  011CE4  B4D8               	btfsc	status,2,c
 28903  011CE6  D771               	goto	l864
 28904  011CE8  0A78               	xorlw	120	; case 65
 28905  011CEA  B4D8               	btfsc	status,2,c
 28906  011CEC  D7A4               	goto	l891
 28907  011CEE  0A03               	xorlw	3	; case 66
 28908  011CF0  B4D8               	btfsc	status,2,c
 28909  011CF2  D7A3               	goto	l892
 28910  011CF4  0A01               	xorlw	1	; case 67
 28911  011CF6  B4D8               	btfsc	status,2,c
 28912  011CF8  D7A2               	goto	l893
 28913  011CFA  0A07               	xorlw	7	; case 68
 28914  011CFC  B4D8               	btfsc	status,2,c
 28915  011CFE  D7A1               	goto	l894
 28916  011D00  0A01               	xorlw	1	; case 69
 28917  011D02  B4D8               	btfsc	status,2,c
 28918  011D04  D7A0               	goto	l895
 28919  011D06  0A03               	xorlw	3	; case 70
 28920  011D08  B4D8               	btfsc	status,2,c
 28921  011D0A  D79F               	goto	l896
 28922  011D0C  0A01               	xorlw	1	; case 71
 28923  011D0E  B4D8               	btfsc	status,2,c
 28924  011D10  D79E               	goto	l897
 28925  011D12  0A0F               	xorlw	15	; case 72
 28926  011D14  B4D8               	btfsc	status,2,c
 28927  011D16  D79D               	goto	l898
 28928  011D18  0A01               	xorlw	1	; case 73
 28929  011D1A  B4D8               	btfsc	status,2,c
 28930  011D1C  D79C               	goto	l899
 28931  011D1E  0A03               	xorlw	3	; case 74
 28932  011D20  B4D8               	btfsc	status,2,c
 28933  011D22  D79B               	goto	l900
 28934  011D24  0A01               	xorlw	1	; case 75
 28935  011D26  B4D8               	btfsc	status,2,c
 28936  011D28  D79A               	goto	l901
 28937  011D2A  0A07               	xorlw	7	; case 76
 28938  011D2C  B4D8               	btfsc	status,2,c
 28939  011D2E  D799               	goto	l902
 28940  011D30  0A01               	xorlw	1	; case 77
 28941  011D32  B4D8               	btfsc	status,2,c
 28942  011D34  D798               	goto	l903
 28943  011D36  0A03               	xorlw	3	; case 78
 28944  011D38  B4D8               	btfsc	status,2,c
 28945  011D3A  D797               	goto	l904
 28946  011D3C  0A01               	xorlw	1	; case 79
 28947  011D3E  B4D8               	btfsc	status,2,c
 28948  011D40  D796               	goto	l905
 28949  011D42  0A1F               	xorlw	31	; case 80
 28950  011D44  B4D8               	btfsc	status,2,c
 28951  011D46  D795               	goto	l906
 28952  011D48  0A01               	xorlw	1	; case 81
 28953  011D4A  B4D8               	btfsc	status,2,c
 28954  011D4C  D794               	goto	l907
 28955  011D4E  0A03               	xorlw	3	; case 82
 28956  011D50  B4D8               	btfsc	status,2,c
 28957  011D52  D793               	goto	l908
 28958  011D54  0A01               	xorlw	1	; case 83
 28959  011D56  B4D8               	btfsc	status,2,c
 28960  011D58  D792               	goto	l909
 28961  011D5A  0A07               	xorlw	7	; case 84
 28962  011D5C  B4D8               	btfsc	status,2,c
 28963  011D5E  D791               	goto	l910
 28964  011D60  0A01               	xorlw	1	; case 85
 28965  011D62  B4D8               	btfsc	status,2,c
 28966  011D64  D790               	goto	l911
 28967  011D66  0A03               	xorlw	3	; case 86
 28968  011D68  B4D8               	btfsc	status,2,c
 28969  011D6A  D78F               	goto	l912
 28970  011D6C  0A01               	xorlw	1	; case 87
 28971  011D6E  B4D8               	btfsc	status,2,c
 28972  011D70  D78E               	goto	l913
 28973  011D72  0A0F               	xorlw	15	; case 88
 28974  011D74  B4D8               	btfsc	status,2,c
 28975  011D76  D78D               	goto	l914
 28976  011D78  0A01               	xorlw	1	; case 89
 28977  011D7A  B4D8               	btfsc	status,2,c
 28978  011D7C  D78C               	goto	l915
 28979  011D7E  0A03               	xorlw	3	; case 90
 28980  011D80  B4D8               	btfsc	status,2,c
 28981  011D82  D78B               	goto	l916
 28982  011D84  0A3B               	xorlw	59	; case 97
 28983  011D86  B4D8               	btfsc	status,2,c
 28984  011D88  D722               	goto	l865
 28985  011D8A  0A03               	xorlw	3	; case 98
 28986  011D8C  B4D8               	btfsc	status,2,c
 28987  011D8E  D721               	goto	l866
 28988  011D90  0A01               	xorlw	1	; case 99
 28989  011D92  B4D8               	btfsc	status,2,c
 28990  011D94  D720               	goto	l867
 28991  011D96  0A07               	xorlw	7	; case 100
 28992  011D98  B4D8               	btfsc	status,2,c
 28993  011D9A  D71F               	goto	l868
 28994  011D9C  0A01               	xorlw	1	; case 101
 28995  011D9E  B4D8               	btfsc	status,2,c
 28996  011DA0  D71E               	goto	l869
 28997  011DA2  0A03               	xorlw	3	; case 102
 28998  011DA4  B4D8               	btfsc	status,2,c
 28999  011DA6  D71D               	goto	l870
 29000  011DA8  0A01               	xorlw	1	; case 103
 29001  011DAA  B4D8               	btfsc	status,2,c
 29002  011DAC  D71C               	goto	l871
 29003  011DAE  0A0F               	xorlw	15	; case 104
 29004  011DB0  B4D8               	btfsc	status,2,c
 29005  011DB2  D71B               	goto	l872
 29006  011DB4  0A01               	xorlw	1	; case 105
 29007  011DB6  B4D8               	btfsc	status,2,c
 29008  011DB8  D71A               	goto	l873
 29009  011DBA  0A03               	xorlw	3	; case 106
 29010  011DBC  B4D8               	btfsc	status,2,c
 29011  011DBE  D719               	goto	l874
 29012  011DC0  0A01               	xorlw	1	; case 107
 29013  011DC2  B4D8               	btfsc	status,2,c
 29014  011DC4  D718               	goto	l875
 29015  011DC6  0A07               	xorlw	7	; case 108
 29016  011DC8  B4D8               	btfsc	status,2,c
 29017  011DCA  D717               	goto	l876
 29018  011DCC  0A01               	xorlw	1	; case 109
 29019  011DCE  B4D8               	btfsc	status,2,c
 29020  011DD0  D716               	goto	l877
 29021  011DD2  0A03               	xorlw	3	; case 110
 29022  011DD4  B4D8               	btfsc	status,2,c
 29023  011DD6  D715               	goto	l878
 29024  011DD8  0A01               	xorlw	1	; case 111
 29025  011DDA  B4D8               	btfsc	status,2,c
 29026  011DDC  D714               	goto	l879
 29027  011DDE  0A1F               	xorlw	31	; case 112
 29028  011DE0  B4D8               	btfsc	status,2,c
 29029  011DE2  D713               	goto	l880
 29030  011DE4  0A01               	xorlw	1	; case 113
 29031  011DE6  B4D8               	btfsc	status,2,c
 29032  011DE8  D712               	goto	l881
 29033  011DEA  0A03               	xorlw	3	; case 114
 29034  011DEC  B4D8               	btfsc	status,2,c
 29035  011DEE  D711               	goto	l882
 29036  011DF0  0A01               	xorlw	1	; case 115
 29037  011DF2  B4D8               	btfsc	status,2,c
 29038  011DF4  D710               	goto	l883
 29039  011DF6  0A07               	xorlw	7	; case 116
 29040  011DF8  B4D8               	btfsc	status,2,c
 29041  011DFA  D70F               	goto	l884
 29042  011DFC  0A01               	xorlw	1	; case 117
 29043  011DFE  B4D8               	btfsc	status,2,c
 29044  011E00  D70E               	goto	l885
 29045  011E02  0A03               	xorlw	3	; case 118
 29046  011E04  B4D8               	btfsc	status,2,c
 29047  011E06  D70D               	goto	l886
 29048  011E08  0A01               	xorlw	1	; case 119
 29049  011E0A  B4D8               	btfsc	status,2,c
 29050  011E0C  D70C               	goto	l887
 29051  011E0E  0A0F               	xorlw	15	; case 120
 29052  011E10  B4D8               	btfsc	status,2,c
 29053  011E12  D70B               	goto	l888
 29054  011E14  0A01               	xorlw	1	; case 121
 29055  011E16  B4D8               	btfsc	status,2,c
 29056  011E18  D70A               	goto	l889
 29057  011E1A  0A03               	xorlw	3	; case 122
 29058  011E1C  B4D8               	btfsc	status,2,c
 29059  011E1E  D709               	goto	l890
 29060                           
 29061                           ;Types.c: 354: return 0;
 29062                           
 29063                           ; BSR set to: 0
 29064  011E20  0E00               	movlw	0
 29065  011E22  0012               	return	
 29066  011E24                     __end_of_ToSegment:
 29067                           	opt stack 0
 29068                           tosu	equ	0xFFF
 29069                           tosh	equ	0xFFE
 29070                           tosl	equ	0xFFD
 29071                           pclath	equ	0xFFA
 29072                           tblptru	equ	0xFF8
 29073                           tblptrh	equ	0xFF7
 29074                           tblptrl	equ	0xFF6
 29075                           tablat	equ	0xFF5
 29076                           prodh	equ	0xFF4
 29077                           prodl	equ	0xFF3
 29078                           intcon	equ	0xFF2
 29079                           postinc0	equ	0xFEE
 29080                           wreg	equ	0xFE8
 29081                           indf1	equ	0xFE7
 29082                           postdec1	equ	0xFE5
 29083                           fsr1h	equ	0xFE2
 29084                           fsr1l	equ	0xFE1
 29085                           indf2	equ	0xFDF
 29086                           postinc2	equ	0xFDE
 29087                           postdec2	equ	0xFDD
 29088                           plusw2	equ	0xFDB
 29089                           fsr2h	equ	0xFDA
 29090                           fsr2l	equ	0xFD9
 29091                           status	equ	0xFD8
 29092                           
 29093 ;; *************** function _HMI_SetButton *****************
 29094 ;; Defined at:
 29095 ;;		line 186 in file "HMI.c"
 29096 ;; Parameters:    Size  Location     Type
 29097 ;;  pValue          1    wreg     unsigned char 
 29098 ;; Auto vars:     Size  Location     Type
 29099 ;;  pValue          1    6[BANK0 ] unsigned char 
 29100 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 29101 ;;  v               1    7[BANK0 ] unsigned char 
 29102 ;; Return value:  Size  Location     Type
 29103 ;;                  1    wreg      void 
 29104 ;; Registers used:
 29105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29106 ;; Tracked objects:
 29107 ;;		On entry : 0/0
 29108 ;;		On exit  : 0/0
 29109 ;;		Unchanged: 0/0
 29110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29112 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29113 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29114 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29115 ;;Total ram usage:        8 bytes
 29116 ;; Hardware stack levels used:    1
 29117 ;; Hardware stack levels required when called:    7
 29118 ;; This function calls:
 29119 ;;		Nothing
 29120 ;; This function is called by:
 29121 ;;		_Event_TestButton
 29122 ;; This function uses a non-reentrant model
 29123 ;;
 29124                           
 29125                           	psect	text149
 29126  015348                     __ptext149:
 29127                           	opt stack 0
 29128  015348                     _HMI_SetButton:
 29129                           	opt stack 18
 29130                           
 29131                           ;incstack = 0
 29132                           ;HMI_SetButton@pValue stored from wreg
 29133  015348  0100               	movlb	0	; () banked
 29134  01534A  6FBB               	movwf	HMI_SetButton@pValue& (0+255),b
 29135                           
 29136                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 29137  01534C  0E64               	movlw	low HMI_SetButton@F7213
 29138  01534E  6EF6               	movwf	tblptrl,c
 29139  015350                     	if	1	;There is more than 1 active tblptr byte
 29140  015350  0EFD               	movlw	high HMI_SetButton@F7213
 29141  015352  6EF7               	movwf	tblptrh,c
 29142  015354                     	endif
 29143  015354                     	if	1	;There are 3 active tblptr bytes
 29144  015354  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 29145  015356  6EF8               	movwf	tblptru,c
 29146  015358                     	endif
 29147  015358  0009               	tblrd		*+
 29148  01535A  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex
 29149  01535E  0009               	tblrd		*+
 29150  015360  CFF5 F0B8          	movff	tablat,HMI_SetButton@reindex+1
 29151  015364  0009               	tblrd		*+
 29152  015366  CFF5 F0B9          	movff	tablat,HMI_SetButton@reindex+2
 29153  01536A  000A               	tblrd		*-
 29154  01536C  CFF5 F0BA          	movff	tablat,HMI_SetButton@reindex+3
 29155                           
 29156                           ;HMI.c: 189: UINT8 v = 0b00010001;
 29157  015370  0E11               	movlw	17
 29158  015372  0100               	movlb	0	; () banked
 29159  015374  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 29160                           
 29161                           ; BSR set to: 0
 29162                           ;HMI.c: 190: pValue &= 3;
 29163  015376  0E03               	movlw	3
 29164  015378  0100               	movlb	0	; () banked
 29165  01537A  17BB               	andwf	HMI_SetButton@pValue& (0+255),f,b
 29166                           
 29167                           ; BSR set to: 0
 29168                           ;HMI.c: 191: v = v << reindex[pValue];
 29169  01537C  0100               	movlb	0	; () banked
 29170  01537E  51BB               	movf	HMI_SetButton@pValue& (0+255),w,b
 29171  015380  0D01               	mullw	1
 29172  015382  0EB7               	movlw	low HMI_SetButton@reindex
 29173  015384  24F3               	addwf	prodl,w,c
 29174  015386  6ED9               	movwf	fsr2l,c
 29175  015388  0E00               	movlw	high HMI_SetButton@reindex
 29176  01538A  20F4               	addwfc	prodh,w,c
 29177  01538C  6EDA               	movwf	fsr2h,c
 29178  01538E  50DF               	movf	indf2,w,c
 29179  015390  0100               	movlb	0	; () banked
 29180  015392  6FB5               	movwf	??_HMI_SetButton& (0+255),b
 29181  015394  C0BC  F0B6         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 29182  015398  0100               	movlb	0	; () banked
 29183  01539A  2BB5               	incf	??_HMI_SetButton& (0+255),f,b
 29184  01539C  D003               	goto	u9694
 29185  01539E                     u9695:
 29186  01539E  0100               	movlb	0	; () banked
 29187  0153A0  90D8               	bcf	status,0,c
 29188  0153A2  37B6               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 29189  0153A4                     u9694:
 29190  0153A4  0100               	movlb	0	; () banked
 29191  0153A6  2FB5               	decfsz	??_HMI_SetButton& (0+255),f,b
 29192  0153A8  D7FA               	goto	u9695
 29193  0153AA  0100               	movlb	0	; () banked
 29194  0153AC  51B6               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 29195  0153AE  0100               	movlb	0	; () banked
 29196  0153B0  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 29197                           
 29198                           ; BSR set to: 0
 29199                           ;HMI.c: 192: v = v >> 4;
 29200  0153B2  0100               	movlb	0	; () banked
 29201  0153B4  39BC               	swapf	HMI_SetButton@v& (0+255),w,b
 29202  0153B6  0B0F               	andlw	15
 29203  0153B8  0100               	movlb	0	; () banked
 29204  0153BA  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 29205                           
 29206                           ; BSR set to: 0
 29207                           ;HMI.c: 193: v = v & 0x0F;
 29208  0153BC  0100               	movlb	0	; () banked
 29209  0153BE  51BC               	movf	HMI_SetButton@v& (0+255),w,b
 29210  0153C0  0B0F               	andlw	15
 29211  0153C2  0100               	movlb	0	; () banked
 29212  0153C4  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 29213                           
 29214                           ; BSR set to: 0
 29215                           ;HMI.c: 194: HMIBoard.pButton = v;
 29216  0153C6  0103               	movlb	3	; () banked
 29217  0153C8  5144               	movf	(_HMIBoard+6)& (0+255),w,b
 29218  0153CA  0100               	movlb	0	; () banked
 29219  0153CC  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 29220  0153CE  0BF0               	andlw	-16
 29221  0153D0  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 29222  0153D2  0103               	movlb	3	; () banked
 29223  0153D4  6F44               	movwf	(_HMIBoard+6)& (0+255),b
 29224                           
 29225                           ; BSR set to: 3
 29226  0153D6  0012               	return		;funcret
 29227  0153D8                     __end_of_HMI_SetButton:
 29228                           	opt stack 0
 29229                           tosu	equ	0xFFF
 29230                           tosh	equ	0xFFE
 29231                           tosl	equ	0xFFD
 29232                           pclath	equ	0xFFA
 29233                           tblptru	equ	0xFF8
 29234                           tblptrh	equ	0xFF7
 29235                           tblptrl	equ	0xFF6
 29236                           tablat	equ	0xFF5
 29237                           prodh	equ	0xFF4
 29238                           prodl	equ	0xFF3
 29239                           intcon	equ	0xFF2
 29240                           postinc0	equ	0xFEE
 29241                           wreg	equ	0xFE8
 29242                           indf1	equ	0xFE7
 29243                           postdec1	equ	0xFE5
 29244                           fsr1h	equ	0xFE2
 29245                           fsr1l	equ	0xFE1
 29246                           indf2	equ	0xFDF
 29247                           postinc2	equ	0xFDE
 29248                           postdec2	equ	0xFDD
 29249                           plusw2	equ	0xFDB
 29250                           fsr2h	equ	0xFDA
 29251                           fsr2l	equ	0xFD9
 29252                           status	equ	0xFD8
 29253                           
 29254 ;; *************** function _LED_Toggle *****************
 29255 ;; Defined at:
 29256 ;;		line 50 in file "Library/LED.c"
 29257 ;; Parameters:    Size  Location     Type
 29258 ;;  pLED            1    wreg     enum E6739
 29259 ;; Auto vars:     Size  Location     Type
 29260 ;;  pLED            1   24[BANK0 ] enum E6739
 29261 ;; Return value:  Size  Location     Type
 29262 ;;                  1    wreg      void 
 29263 ;; Registers used:
 29264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29265 ;; Tracked objects:
 29266 ;;		On entry : 0/0
 29267 ;;		On exit  : 0/0
 29268 ;;		Unchanged: 0/0
 29269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29274 ;;Total ram usage:        1 bytes
 29275 ;; Hardware stack levels used:    1
 29276 ;; Hardware stack levels required when called:   12
 29277 ;; This function calls:
 29278 ;;		_Port_TogglePin
 29279 ;; This function is called by:
 29280 ;;		_LCD_Reset
 29281 ;;		_Event_DIPSwitch
 29282 ;;		_Event_TestButton
 29283 ;;		_Event_ADCSequenceComplete
 29284 ;;		_Event_HMI_DIPSwitch
 29285 ;;		_Event_HMI_LeftButton
 29286 ;;		_Event_HMI_RightButton
 29287 ;;		_Event_HMI_UpButton
 29288 ;;		_Event_HMI_DownButton
 29289 ;; This function uses a non-reentrant model
 29290 ;;
 29291                           
 29292                           	psect	text150
 29293  016302                     __ptext150:
 29294                           	opt stack 0
 29295  016302                     _LED_Toggle:
 29296                           	opt stack 13
 29297                           
 29298                           ; BSR set to: 3
 29299                           ;incstack = 0
 29300                           ;LED_Toggle@pLED stored from wreg
 29301  016302  0100               	movlb	0	; () banked
 29302  016304  6FCD               	movwf	LED_Toggle@pLED& (0+255),b
 29303                           
 29304                           ;LED.c: 52: switch (pLED)
 29305  016306  D018               	goto	l234
 29306  016308                     
 29307                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 29308  016308  0EA0               	movlw	low _PortC
 29309  01630A  0100               	movlb	0	; () banked
 29310  01630C  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 29311  01630E  0E00               	movlw	high _PortC
 29312  016310  0100               	movlb	0	; () banked
 29313  016312  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29314  016314  0E00               	movlw	0
 29315  016316  0100               	movlb	0	; () banked
 29316  016318  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 29317  01631A  EC07  F0B4         	call	_Port_TogglePin	;wreg free
 29318                           
 29319                           ;LED.c: 56: break;
 29320  01631E  0012               	return	
 29321  016320                     
 29322                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 29323  016320  0EA0               	movlw	low _PortC
 29324  016322  0100               	movlb	0	; () banked
 29325  016324  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 29326  016326  0E00               	movlw	high _PortC
 29327  016328  0100               	movlb	0	; () banked
 29328  01632A  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29329  01632C  0E01               	movlw	1
 29330  01632E  0100               	movlb	0	; () banked
 29331  016330  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 29332  016332  EC07  F0B4         	call	_Port_TogglePin	;wreg free
 29333                           
 29334                           ;LED.c: 60: }
 29335                           
 29336                           ;LED.c: 59: break;
 29337  016336  0012               	return	
 29338  016338                     l234:
 29339  016338  0100               	movlb	0	; () banked
 29340  01633A  51CD               	movf	LED_Toggle@pLED& (0+255),w,b
 29341                           
 29342                           ; Switch size 1, requested type "space"
 29343                           ; Number of cases is 2, Range of values is 0 to 1
 29344                           ; switch strategies available:
 29345                           ; Name         Instructions Cycles
 29346                           ; simple_byte            7     4 (average)
 29347                           ;	Chosen strategy is simple_byte
 29348  01633C  0A00               	xorlw	0	; case 0
 29349  01633E  B4D8               	btfsc	status,2,c
 29350  016340  D7E3               	goto	l235
 29351  016342  0A01               	xorlw	1	; case 1
 29352  016344  A4D8               	btfss	status,2,c
 29353  016346  0012               	return	
 29354  016348  D7EB               	goto	l237
 29355  01634A                     __end_of_LED_Toggle:
 29356                           	opt stack 0
 29357                           tosu	equ	0xFFF
 29358                           tosh	equ	0xFFE
 29359                           tosl	equ	0xFFD
 29360                           pclath	equ	0xFFA
 29361                           tblptru	equ	0xFF8
 29362                           tblptrh	equ	0xFF7
 29363                           tblptrl	equ	0xFF6
 29364                           tablat	equ	0xFF5
 29365                           prodh	equ	0xFF4
 29366                           prodl	equ	0xFF3
 29367                           intcon	equ	0xFF2
 29368                           postinc0	equ	0xFEE
 29369                           wreg	equ	0xFE8
 29370                           indf1	equ	0xFE7
 29371                           postdec1	equ	0xFE5
 29372                           fsr1h	equ	0xFE2
 29373                           fsr1l	equ	0xFE1
 29374                           indf2	equ	0xFDF
 29375                           postinc2	equ	0xFDE
 29376                           postdec2	equ	0xFDD
 29377                           plusw2	equ	0xFDB
 29378                           fsr2h	equ	0xFDA
 29379                           fsr2l	equ	0xFD9
 29380                           status	equ	0xFD8
 29381                           
 29382 ;; *************** function _Port_TogglePin *****************
 29383 ;; Defined at:
 29384 ;;		line 278 in file "Library/Port.c"
 29385 ;; Parameters:    Size  Location     Type
 29386 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 29387 ;;		 -> PortC(10), 
 29388 ;;  pPin            1   22[BANK0 ] enum E6750
 29389 ;; Auto vars:     Size  Location     Type
 29390 ;;  Value           1   23[BANK0 ] unsigned char 
 29391 ;; Return value:  Size  Location     Type
 29392 ;;                  1    wreg      void 
 29393 ;; Registers used:
 29394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29395 ;; Tracked objects:
 29396 ;;		On entry : 0/0
 29397 ;;		On exit  : 0/0
 29398 ;;		Unchanged: 0/0
 29399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29400 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29403 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29404 ;;Total ram usage:        4 bytes
 29405 ;; Hardware stack levels used:    1
 29406 ;; Hardware stack levels required when called:   11
 29407 ;; This function calls:
 29408 ;;		_Port_GetPin
 29409 ;;		_Port_SetPin
 29410 ;; This function is called by:
 29411 ;;		_LED_Toggle
 29412 ;; This function uses a non-reentrant model
 29413 ;;
 29414                           
 29415                           	psect	text151
 29416  01680E                     __ptext151:
 29417                           	opt stack 0
 29418  01680E                     _Port_TogglePin:
 29419                           	opt stack 13
 29420                           
 29421                           ;Port.c: 280: UINT8 Value;
 29422                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 29423                           
 29424                           ;incstack = 0
 29425  01680E  C0C9  F0B5         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 29426  016812  C0CA  F0B6         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 29427  016816  C0CB  F0B7         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 29428  01681A  ECEB  F0B1         	call	_Port_GetPin	;wreg free
 29429  01681E  0100               	movlb	0	; () banked
 29430  016820  6FCC               	movwf	Port_TogglePin@Value& (0+255),b
 29431                           
 29432                           ; BSR set to: 0
 29433                           ;Port.c: 282: Value ^= 0x01;
 29434  016822  0E01               	movlw	1
 29435  016824  0100               	movlb	0	; () banked
 29436  016826  1BCC               	xorwf	Port_TogglePin@Value& (0+255),f,b
 29437                           
 29438                           ; BSR set to: 0
 29439                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 29440  016828  C0C9  F0C4         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 29441  01682C  C0CA  F0C5         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 29442  016830  C0CB  F0C6         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 29443  016834  C0CC  F0C7         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 29444  016838  ECDB  F0A2         	call	_Port_SetPin	;wreg free
 29445  01683C  0012               	return		;funcret
 29446  01683E                     __end_of_Port_TogglePin:
 29447                           	opt stack 0
 29448                           tosu	equ	0xFFF
 29449                           tosh	equ	0xFFE
 29450                           tosl	equ	0xFFD
 29451                           pclath	equ	0xFFA
 29452                           tblptru	equ	0xFF8
 29453                           tblptrh	equ	0xFF7
 29454                           tblptrl	equ	0xFF6
 29455                           tablat	equ	0xFF5
 29456                           prodh	equ	0xFF4
 29457                           prodl	equ	0xFF3
 29458                           intcon	equ	0xFF2
 29459                           postinc0	equ	0xFEE
 29460                           wreg	equ	0xFE8
 29461                           indf1	equ	0xFE7
 29462                           postdec1	equ	0xFE5
 29463                           fsr1h	equ	0xFE2
 29464                           fsr1l	equ	0xFE1
 29465                           indf2	equ	0xFDF
 29466                           postinc2	equ	0xFDE
 29467                           postdec2	equ	0xFDD
 29468                           plusw2	equ	0xFDB
 29469                           fsr2h	equ	0xFDA
 29470                           fsr2l	equ	0xFD9
 29471                           status	equ	0xFD8
 29472                           
 29473 ;; *************** function _Port_SetPin *****************
 29474 ;; Defined at:
 29475 ;;		line 247 in file "Library/Port.c"
 29476 ;; Parameters:    Size  Location     Type
 29477 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 29478 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29479 ;;  pPin            1   17[BANK0 ] enum E6750
 29480 ;;  pValue          1   18[BANK0 ] unsigned char 
 29481 ;; Auto vars:     Size  Location     Type
 29482 ;;  Type            1   19[BANK0 ] enum E6795
 29483 ;; Return value:  Size  Location     Type
 29484 ;;                  1    wreg      void 
 29485 ;; Registers used:
 29486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29487 ;; Tracked objects:
 29488 ;;		On entry : 0/0
 29489 ;;		On exit  : 0/0
 29490 ;;		Unchanged: 0/0
 29491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29495 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29496 ;;Total ram usage:        5 bytes
 29497 ;; Hardware stack levels used:    1
 29498 ;; Hardware stack levels required when called:   10
 29499 ;; This function calls:
 29500 ;;		_Byte_SetBit
 29501 ;;		_Word_GetPair
 29502 ;; This function is called by:
 29503 ;;		_Reset_Low
 29504 ;;		_Reset_High
 29505 ;;		_LED_Set
 29506 ;;		_Port_TogglePin
 29507 ;;		_Motor_Init
 29508 ;;		_Motor_Step
 29509 ;;		_MXK_Init
 29510 ;; This function uses a non-reentrant model
 29511 ;;
 29512                           
 29513                           	psect	text152
 29514  0145B6                     __ptext152:
 29515                           	opt stack 0
 29516  0145B6                     _Port_SetPin:
 29517                           	opt stack 13
 29518                           
 29519                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29520                           
 29521                           ;incstack = 0
 29522  0145B6  0E08               	movlw	8
 29523  0145B8  0100               	movlb	0	; () banked
 29524  0145BA  25C4               	addwf	Port_SetPin@pInput& (0+255),w,b
 29525  0145BC  0100               	movlb	0	; () banked
 29526  0145BE  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 29527  0145C0  0E00               	movlw	0
 29528  0145C2  0100               	movlb	0	; () banked
 29529  0145C4  21C5               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 29530  0145C6  0100               	movlb	0	; () banked
 29531  0145C8  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 29532  0145CA  C0C6  F0C3         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 29533  0145CE  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 29534  0145D2  0100               	movlb	0	; () banked
 29535  0145D4  6FC8               	movwf	Port_SetPin@Type& (0+255),b
 29536                           
 29537                           ;Port.c: 250: switch (Type)
 29538  0145D6  D042               	goto	l427
 29539  0145D8                     
 29540                           ; BSR set to: 0
 29541                           ;Port.c: 256: pValue &= 1;
 29542                           
 29543                           ; BSR set to: 0
 29544  0145D8  0E01               	movlw	1
 29545  0145DA  0100               	movlb	0	; () banked
 29546  0145DC  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 29547                           
 29548                           ; BSR set to: 0
 29549                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29550  0145DE  0100               	movlb	0	; () banked
 29551  0145E0  EE20 F002          	lfsr	2,2
 29552  0145E4  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 29553  0145E6  26D9               	addwf	fsr2l,f,c
 29554  0145E8  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29555  0145EA  22DA               	addwfc	fsr2h,f,c
 29556  0145EC  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 29557  0145F0  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 29558  0145F4  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29559  0145F8  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29560  0145FC  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 29561                           
 29562                           ;Port.c: 258: break;
 29563  014600  0012               	return	
 29564  014602                     
 29565                           ;Port.c: 261: pValue &= 1;
 29566  014602  0E01               	movlw	1
 29567  014604  0100               	movlb	0	; () banked
 29568  014606  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 29569                           
 29570                           ;Port.c: 262: pValue ^= 1;
 29571  014608  0E01               	movlw	1
 29572  01460A  0100               	movlb	0	; () banked
 29573  01460C  1BC7               	xorwf	Port_SetPin@pValue& (0+255),f,b
 29574                           
 29575                           ; BSR set to: 0
 29576                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29577  01460E  0100               	movlb	0	; () banked
 29578  014610  EE20 F002          	lfsr	2,2
 29579  014614  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 29580  014616  26D9               	addwf	fsr2l,f,c
 29581  014618  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29582  01461A  22DA               	addwfc	fsr2h,f,c
 29583  01461C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 29584  014620  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 29585  014624  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29586  014628  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29587  01462C  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 29588                           
 29589                           ;Port.c: 264: break;
 29590  014630  0012               	return	
 29591  014632                     
 29592                           ;Port.c: 266: pValue &= 1;
 29593  014632  0E01               	movlw	1
 29594  014634  0100               	movlb	0	; () banked
 29595  014636  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 29596                           
 29597                           ; BSR set to: 0
 29598                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29599  014638  0100               	movlb	0	; () banked
 29600  01463A  EE20 F004          	lfsr	2,4
 29601  01463E  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 29602  014640  26D9               	addwf	fsr2l,f,c
 29603  014642  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29604  014644  22DA               	addwfc	fsr2h,f,c
 29605  014646  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 29606  01464A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 29607  01464E  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29608  014652  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29609  014656  EC09  F0AF         	call	_Byte_SetBit	;wreg free
 29610                           
 29611                           ;Port.c: 269: }
 29612                           
 29613                           ;Port.c: 268: break;
 29614  01465A  0012               	return	
 29615  01465C                     l427:
 29616  01465C  0100               	movlb	0	; () banked
 29617  01465E  51C8               	movf	Port_SetPin@Type& (0+255),w,b
 29618                           
 29619                           ; Switch size 1, requested type "space"
 29620                           ; Number of cases is 4, Range of values is 0 to 3
 29621                           ; switch strategies available:
 29622                           ; Name         Instructions Cycles
 29623                           ; simple_byte           13     7 (average)
 29624                           ;	Chosen strategy is simple_byte
 29625  014660  0A00               	xorlw	0	; case 0
 29626  014662  B4D8               	btfsc	status,2,c
 29627  014664  0012               	return	
 29628  014666  0A01               	xorlw	1	; case 1
 29629  014668  B4D8               	btfsc	status,2,c
 29630  01466A  D7B6               	goto	l430
 29631  01466C  0A03               	xorlw	3	; case 2
 29632  01466E  B4D8               	btfsc	status,2,c
 29633  014670  D7C8               	goto	l432
 29634  014672  0A01               	xorlw	1	; case 3
 29635  014674  A4D8               	btfss	status,2,c
 29636  014676  0012               	return	
 29637  014678  D7DC               	goto	l433
 29638  01467A                     __end_of_Port_SetPin:
 29639                           	opt stack 0
 29640                           tosu	equ	0xFFF
 29641                           tosh	equ	0xFFE
 29642                           tosl	equ	0xFFD
 29643                           pclath	equ	0xFFA
 29644                           tblptru	equ	0xFF8
 29645                           tblptrh	equ	0xFF7
 29646                           tblptrl	equ	0xFF6
 29647                           tablat	equ	0xFF5
 29648                           prodh	equ	0xFF4
 29649                           prodl	equ	0xFF3
 29650                           intcon	equ	0xFF2
 29651                           postinc0	equ	0xFEE
 29652                           wreg	equ	0xFE8
 29653                           indf1	equ	0xFE7
 29654                           postdec1	equ	0xFE5
 29655                           fsr1h	equ	0xFE2
 29656                           fsr1l	equ	0xFE1
 29657                           indf2	equ	0xFDF
 29658                           postinc2	equ	0xFDE
 29659                           postdec2	equ	0xFDD
 29660                           plusw2	equ	0xFDB
 29661                           fsr2h	equ	0xFDA
 29662                           fsr2l	equ	0xFD9
 29663                           status	equ	0xFD8
 29664                           
 29665 ;; *************** function _Word_GetPair *****************
 29666 ;; Defined at:
 29667 ;;		line 156 in file "Library/Types.c"
 29668 ;; Parameters:    Size  Location     Type
 29669 ;;  pInput          2   12[BANK0 ] PTR struct Word
 29670 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29671 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29672 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29673 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29674 ;;  pPair           1   14[BANK0 ] unsigned char 
 29675 ;; Auto vars:     Size  Location     Type
 29676 ;;		None
 29677 ;; Return value:  Size  Location     Type
 29678 ;;                  1    wreg      unsigned char 
 29679 ;; Registers used:
 29680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29681 ;; Tracked objects:
 29682 ;;		On entry : 0/0
 29683 ;;		On exit  : 0/0
 29684 ;;		Unchanged: 0/0
 29685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29686 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29690 ;;Total ram usage:        3 bytes
 29691 ;; Hardware stack levels used:    1
 29692 ;; Hardware stack levels required when called:    9
 29693 ;; This function calls:
 29694 ;;		_Byte_GetPair
 29695 ;; This function is called by:
 29696 ;;		_Port_Init
 29697 ;;		_Port_SetPin
 29698 ;;		_Port_Set
 29699 ;;		_PortProperty_Valid
 29700 ;;		_Port_SetPair
 29701 ;;		_Port_SetQuad
 29702 ;; This function uses a non-reentrant model
 29703 ;;
 29704                           
 29705                           	psect	text153
 29706  01661E                     __ptext153:
 29707                           	opt stack 0
 29708  01661E                     _Word_GetPair:
 29709                           	opt stack 13
 29710                           
 29711                           ;Types.c: 158: if (pPair >= 4)
 29712                           
 29713                           ;incstack = 0
 29714  01661E  0E03               	movlw	3
 29715  016620  0100               	movlb	0	; () banked
 29716  016622  65C3               	cpfsgt	Word_GetPair@pPair& (0+255),b
 29717  016624  D012               	goto	l781
 29718                           
 29719                           ; BSR set to: 0
 29720                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29721  016626  0E01               	movlw	1
 29722  016628  0100               	movlb	0	; () banked
 29723  01662A  25C1               	addwf	Word_GetPair@pInput& (0+255),w,b
 29724  01662C  0100               	movlb	0	; () banked
 29725  01662E  6FBE               	movwf	Byte_GetPair@pInput& (0+255),b
 29726  016630  0E00               	movlw	0
 29727  016632  0100               	movlb	0	; () banked
 29728  016634  21C2               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 29729  016636  0100               	movlb	0	; () banked
 29730  016638  6FBF               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 29731  01663A  0100               	movlb	0	; () banked
 29732  01663C  51C3               	movf	Word_GetPair@pPair& (0+255),w,b
 29733  01663E  0FFC               	addlw	252
 29734  016640  0100               	movlb	0	; () banked
 29735  016642  6FC0               	movwf	Byte_GetPair@pPair& (0+255),b
 29736  016644  EC62  F0B5         	call	_Byte_GetPair	;wreg free
 29737  016648  0012               	return	
 29738  01664A                     l781:
 29739                           
 29740                           ;Types.c: 160: else
 29741                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29742  01664A  C0C1  F0BE         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 29743  01664E  C0C2  F0BF         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 29744  016652  C0C3  F0C0         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 29745  016656  EC62  F0B5         	call	_Byte_GetPair	;wreg free
 29746  01665A  0012               	return	
 29747  01665C                     __end_of_Word_GetPair:
 29748                           	opt stack 0
 29749                           tosu	equ	0xFFF
 29750                           tosh	equ	0xFFE
 29751                           tosl	equ	0xFFD
 29752                           pclath	equ	0xFFA
 29753                           tblptru	equ	0xFF8
 29754                           tblptrh	equ	0xFF7
 29755                           tblptrl	equ	0xFF6
 29756                           tablat	equ	0xFF5
 29757                           prodh	equ	0xFF4
 29758                           prodl	equ	0xFF3
 29759                           intcon	equ	0xFF2
 29760                           postinc0	equ	0xFEE
 29761                           wreg	equ	0xFE8
 29762                           indf1	equ	0xFE7
 29763                           postdec1	equ	0xFE5
 29764                           fsr1h	equ	0xFE2
 29765                           fsr1l	equ	0xFE1
 29766                           indf2	equ	0xFDF
 29767                           postinc2	equ	0xFDE
 29768                           postdec2	equ	0xFDD
 29769                           plusw2	equ	0xFDB
 29770                           fsr2h	equ	0xFDA
 29771                           fsr2l	equ	0xFD9
 29772                           status	equ	0xFD8
 29773                           
 29774 ;; *************** function _Byte_GetPair *****************
 29775 ;; Defined at:
 29776 ;;		line 87 in file "Library/Types.c"
 29777 ;; Parameters:    Size  Location     Type
 29778 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 29779 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29780 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29781 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29782 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29783 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29784 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29785 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29786 ;;		 -> NULL(0), 
 29787 ;;  pPair           1   11[BANK0 ] unsigned char 
 29788 ;; Auto vars:     Size  Location     Type
 29789 ;;		None
 29790 ;; Return value:  Size  Location     Type
 29791 ;;                  1    wreg      unsigned char 
 29792 ;; Registers used:
 29793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29794 ;; Tracked objects:
 29795 ;;		On entry : 0/0
 29796 ;;		On exit  : 0/0
 29797 ;;		Unchanged: 0/0
 29798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29799 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29803 ;;Total ram usage:        3 bytes
 29804 ;; Hardware stack levels used:    1
 29805 ;; Hardware stack levels required when called:    8
 29806 ;; This function calls:
 29807 ;;		_Byte_GetZone
 29808 ;; This function is called by:
 29809 ;;		_Word_GetPair
 29810 ;; This function uses a non-reentrant model
 29811 ;;
 29812                           
 29813                           	psect	text154
 29814  016AC4                     __ptext154:
 29815                           	opt stack 0
 29816  016AC4                     _Byte_GetPair:
 29817                           	opt stack 13
 29818                           
 29819                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29820                           
 29821                           ;incstack = 0
 29822  016AC4  C0BE  F0B5         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 29823  016AC8  C0BF  F0B6         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 29824  016ACC  0E04               	movlw	4
 29825  016ACE  0100               	movlb	0	; () banked
 29826  016AD0  6FB7               	movwf	Byte_GetZone@pMax& (0+255),b
 29827  016AD2  C0C0  F0B8         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 29828  016AD6  0E02               	movlw	2
 29829  016AD8  0100               	movlb	0	; () banked
 29830  016ADA  6FB9               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 29831  016ADC  EC0A  F0A9         	call	_Byte_GetZone	;wreg free
 29832  016AE0  0012               	return	
 29833  016AE2                     __end_of_Byte_GetPair:
 29834                           	opt stack 0
 29835                           tosu	equ	0xFFF
 29836                           tosh	equ	0xFFE
 29837                           tosl	equ	0xFFD
 29838                           pclath	equ	0xFFA
 29839                           tblptru	equ	0xFF8
 29840                           tblptrh	equ	0xFF7
 29841                           tblptrl	equ	0xFF6
 29842                           tablat	equ	0xFF5
 29843                           prodh	equ	0xFF4
 29844                           prodl	equ	0xFF3
 29845                           intcon	equ	0xFF2
 29846                           postinc0	equ	0xFEE
 29847                           wreg	equ	0xFE8
 29848                           indf1	equ	0xFE7
 29849                           postdec1	equ	0xFE5
 29850                           fsr1h	equ	0xFE2
 29851                           fsr1l	equ	0xFE1
 29852                           indf2	equ	0xFDF
 29853                           postinc2	equ	0xFDE
 29854                           postdec2	equ	0xFDD
 29855                           plusw2	equ	0xFDB
 29856                           fsr2h	equ	0xFDA
 29857                           fsr2l	equ	0xFD9
 29858                           status	equ	0xFD8
 29859                           
 29860 ;; *************** function _Byte_GetZone *****************
 29861 ;; Defined at:
 29862 ;;		line 64 in file "Library/Types.c"
 29863 ;; Parameters:    Size  Location     Type
 29864 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29865 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29866 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29867 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29868 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29869 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29870 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29871 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29872 ;;		 -> NULL(0), 
 29873 ;;  pMax            1    2[BANK0 ] unsigned char 
 29874 ;;  pChunk          1    3[BANK0 ] unsigned char 
 29875 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 29876 ;; Auto vars:     Size  Location     Type
 29877 ;;  Output          1    8[BANK0 ] unsigned char 
 29878 ;;  Offset          1    7[BANK0 ] unsigned char 
 29879 ;;  MASK            1    6[BANK0 ] unsigned char 
 29880 ;; Return value:  Size  Location     Type
 29881 ;;                  1    wreg      unsigned char 
 29882 ;; Registers used:
 29883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29884 ;; Tracked objects:
 29885 ;;		On entry : 0/0
 29886 ;;		On exit  : 0/0
 29887 ;;		Unchanged: 0/0
 29888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29889 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29890 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29892 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29893 ;;Total ram usage:        9 bytes
 29894 ;; Hardware stack levels used:    1
 29895 ;; Hardware stack levels required when called:    7
 29896 ;; This function calls:
 29897 ;;		Nothing
 29898 ;; This function is called by:
 29899 ;;		_Byte_GetPair
 29900 ;;		_Byte_GetTriple
 29901 ;;		_Byte_GetQuad
 29902 ;; This function uses a non-reentrant model
 29903 ;;
 29904                           
 29905                           	psect	text155
 29906  015214                     __ptext155:
 29907                           	opt stack 0
 29908  015214                     _Byte_GetZone:
 29909                           	opt stack 13
 29910                           
 29911                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29912                           
 29913                           ;incstack = 0
 29914  015214  C0B5  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 29915  015218  C0B6  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 29916  01521C  0E00               	movlw	low (__mediumconst shr (0+16))
 29917  01521E  6EF8               	movwf	tblptru,c
 29918  015220  0E0F               	movlw	(high __ramtop+-1)
 29919  015222  64F7               	cpfsgt	tblptrh,c
 29920  015224  D003               	bra	u9107
 29921  015226  0008               	tblrd		*
 29922  015228  50F5               	movf	tablat,w,c
 29923  01522A  D005               	bra	u9100
 29924  01522C                     u9107:
 29925  01522C  CFF6 FFE9          	movff	tblptrl,fsr0l
 29926  015230  CFF7 FFEA          	movff	tblptrh,fsr0h
 29927  015234  50EF               	movf	indf0,w,c
 29928  015236                     u9100:
 29929  015236  0100               	movlb	0	; () banked
 29930  015238  6FBD               	movwf	Byte_GetZone@Output& (0+255),b
 29931                           
 29932                           ; BSR set to: 0
 29933                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29934  01523A  0100               	movlb	0	; () banked
 29935  01523C  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29936  01523E  0D01               	mullw	1
 29937  015240  0E5B               	movlw	low _MASKS
 29938  015242  24F3               	addwf	prodl,w,c
 29939  015244  6EF6               	movwf	tblptrl,c
 29940  015246  0EFD               	movlw	high _MASKS
 29941  015248  20F4               	addwfc	prodh,w,c
 29942  01524A  6EF7               	movwf	tblptrh,c
 29943  01524C                     	if	1	;There are 3 active tblptr bytes
 29944  01524C  6AF8               	clrf	tblptru,c
 29945  01524E  0E00               	movlw	low (__mediumconst shr (0+16))
 29946  015250  22F8               	addwfc	tblptru,f,c
 29947  015252                     	endif
 29948  015252  0008               	tblrd		*
 29949  015254  CFF5 F0BB          	movff	tablat,Byte_GetZone@MASK
 29950                           
 29951                           ; BSR set to: 0
 29952                           ;Types.c: 68: UINT8 Offset = 0;
 29953  015258  0E00               	movlw	0
 29954  01525A  0100               	movlb	0	; () banked
 29955  01525C  6FBC               	movwf	Byte_GetZone@Offset& (0+255),b
 29956                           
 29957                           ;Types.c: 70: while (pChunk >= pMax)
 29958  01525E  D006               	goto	l732
 29959  015260                     
 29960                           ; BSR set to: 0
 29961                           ;Types.c: 71: {
 29962                           ;Types.c: 72: pChunk -= pMax;
 29963                           
 29964                           ; BSR set to: 0
 29965  015260  0100               	movlb	0	; () banked
 29966  015262  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 29967  015264  0100               	movlb	0	; () banked
 29968  015266  5FB8               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 29969                           
 29970                           ; BSR set to: 0
 29971                           ;Types.c: 73: Offset += 1;
 29972  015268  0100               	movlb	0	; () banked
 29973  01526A  2BBC               	incf	Byte_GetZone@Offset& (0+255),f,b
 29974  01526C                     l732:
 29975                           
 29976                           ; BSR set to: 0
 29977                           
 29978                           ; BSR set to: 0
 29979  01526C  0100               	movlb	0	; () banked
 29980  01526E  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 29981  015270  0100               	movlb	0	; () banked
 29982  015272  5DB8               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 29983  015274  B0D8               	btfsc	status,0,c
 29984  015276  D7F4               	goto	l733
 29985                           
 29986                           ; BSR set to: 0
 29987                           ;Types.c: 74: }
 29988                           ;Types.c: 75: pChunk *= pChunkSize;
 29989                           
 29990                           ; BSR set to: 0
 29991  015278  0100               	movlb	0	; () banked
 29992  01527A  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29993  01527C  0100               	movlb	0	; () banked
 29994  01527E  03B8               	mulwf	Byte_GetZone@pChunk& (0+255),b
 29995  015280  50F3               	movf	prodl,w,c
 29996  015282  6FB8               	movwf	Byte_GetZone@pChunk& (0+255),b
 29997                           
 29998                           ; BSR set to: 0
 29999                           ;Types.c: 76: pChunk += Offset;
 30000  015284  0100               	movlb	0	; () banked
 30001  015286  51BC               	movf	Byte_GetZone@Offset& (0+255),w,b
 30002  015288  0100               	movlb	0	; () banked
 30003  01528A  27B8               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 30004                           
 30005                           ; BSR set to: 0
 30006                           ;Types.c: 78: Output >>= pChunk;
 30007  01528C  0100               	movlb	0	; () banked
 30008  01528E  29B8               	incf	Byte_GetZone@pChunk& (0+255),w,b
 30009  015290  0100               	movlb	0	; () banked
 30010  015292  6FBA               	movwf	??_Byte_GetZone& (0+255),b
 30011  015294  D003               	goto	u9120
 30012  015296                     u9125:
 30013  015296  0100               	movlb	0	; () banked
 30014  015298  90D8               	bcf	status,0,c
 30015  01529A  33BD               	rrcf	Byte_GetZone@Output& (0+255),f,b
 30016  01529C                     u9120:
 30017  01529C  0100               	movlb	0	; () banked
 30018  01529E  2FBA               	decfsz	??_Byte_GetZone& (0+255),f,b
 30019  0152A0  D7FA               	goto	u9125
 30020                           
 30021                           ;Types.c: 79: Output &= MASK;
 30022  0152A2  0100               	movlb	0	; () banked
 30023  0152A4  51BB               	movf	Byte_GetZone@MASK& (0+255),w,b
 30024  0152A6  0100               	movlb	0	; () banked
 30025  0152A8  17BD               	andwf	Byte_GetZone@Output& (0+255),f,b
 30026                           
 30027                           ; BSR set to: 0
 30028                           ;Types.c: 80: return Output;
 30029  0152AA  0100               	movlb	0	; () banked
 30030  0152AC  51BD               	movf	Byte_GetZone@Output& (0+255),w,b
 30031  0152AE  0012               	return	
 30032  0152B0                     __end_of_Byte_GetZone:
 30033                           	opt stack 0
 30034                           tosu	equ	0xFFF
 30035                           tosh	equ	0xFFE
 30036                           tosl	equ	0xFFD
 30037                           pclath	equ	0xFFA
 30038                           tblptru	equ	0xFF8
 30039                           tblptrh	equ	0xFF7
 30040                           tblptrl	equ	0xFF6
 30041                           tablat	equ	0xFF5
 30042                           prodh	equ	0xFF4
 30043                           prodl	equ	0xFF3
 30044                           intcon	equ	0xFF2
 30045                           indf0	equ	0xFEF
 30046                           postinc0	equ	0xFEE
 30047                           fsr0h	equ	0xFEA
 30048                           fsr0l	equ	0xFE9
 30049                           wreg	equ	0xFE8
 30050                           indf1	equ	0xFE7
 30051                           postdec1	equ	0xFE5
 30052                           fsr1h	equ	0xFE2
 30053                           fsr1l	equ	0xFE1
 30054                           indf2	equ	0xFDF
 30055                           postinc2	equ	0xFDE
 30056                           postdec2	equ	0xFDD
 30057                           plusw2	equ	0xFDB
 30058                           fsr2h	equ	0xFDA
 30059                           fsr2l	equ	0xFD9
 30060                           status	equ	0xFD8
 30061                           
 30062 ;; *************** function _Byte_SetBit *****************
 30063 ;; Defined at:
 30064 ;;		line 32 in file "Library/Types.c"
 30065 ;; Parameters:    Size  Location     Type
 30066 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30067 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30068 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30069 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30070 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30071 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30072 ;;		 -> NULL(0), 
 30073 ;;  pBit            1    2[BANK0 ] unsigned char 
 30074 ;;  pValue          1    3[BANK0 ] unsigned char 
 30075 ;; Auto vars:     Size  Location     Type
 30076 ;;		None
 30077 ;; Return value:  Size  Location     Type
 30078 ;;                  1    wreg      void 
 30079 ;; Registers used:
 30080 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30081 ;; Tracked objects:
 30082 ;;		On entry : 0/0
 30083 ;;		On exit  : 0/0
 30084 ;;		Unchanged: 0/0
 30085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30086 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30088 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30089 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30090 ;;Total ram usage:        7 bytes
 30091 ;; Hardware stack levels used:    1
 30092 ;; Hardware stack levels required when called:    7
 30093 ;; This function calls:
 30094 ;;		Nothing
 30095 ;; This function is called by:
 30096 ;;		_Port_SetPinType
 30097 ;;		_Port_SetPin
 30098 ;;		_SPI_Init
 30099 ;;		_SPI_MinSpeed
 30100 ;;		_SPI_MaxSpeed
 30101 ;;		_Word_SetBit
 30102 ;;		_I2C_Init
 30103 ;; This function uses a non-reentrant model
 30104 ;;
 30105                           
 30106                           	psect	text156
 30107  015E12                     __ptext156:
 30108                           	opt stack 0
 30109  015E12                     _Byte_SetBit:
 30110                           	opt stack 15
 30111                           
 30112                           ;Types.c: 34: pValue &= 1;
 30113                           
 30114                           ; BSR set to: 0
 30115                           ;incstack = 0
 30116  015E12  0E01               	movlw	1
 30117  015E14  0100               	movlb	0	; () banked
 30118  015E16  17B8               	andwf	Byte_SetBit@pValue& (0+255),f,b
 30119                           
 30120                           ; BSR set to: 0
 30121                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30122  015E18  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30123  015E1C  0E01               	movlw	1
 30124  015E1E  0100               	movlb	0	; () banked
 30125  015E20  6FBA               	movwf	(??_Byte_SetBit+1)& (0+255),b
 30126  015E22  0100               	movlb	0	; () banked
 30127  015E24  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 30128  015E26  D003               	goto	u9144
 30129  015E28                     u9145:
 30130  015E28  0100               	movlb	0	; () banked
 30131  015E2A  90D8               	bcf	status,0,c
 30132  015E2C  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30133  015E2E                     u9144:
 30134  015E2E  0100               	movlb	0	; () banked
 30135  015E30  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 30136  015E32  D7FA               	goto	u9145
 30137  015E34  0100               	movlb	0	; () banked
 30138  015E36  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30139  015E38  0AFF               	xorlw	255
 30140  015E3A  0100               	movlb	0	; () banked
 30141  015E3C  6FBB               	movwf	(??_Byte_SetBit+2)& (0+255),b
 30142  015E3E  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30143  015E42  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30144  015E46  0100               	movlb	0	; () banked
 30145  015E48  51BB               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 30146  015E4A  16DF               	andwf	indf2,f,c
 30147                           
 30148                           ; BSR set to: 0
 30149                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30150  015E4C  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30151  015E50  C0B8  F0BA         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 30152  015E54  0100               	movlb	0	; () banked
 30153  015E56  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 30154  015E58  D003               	goto	u9154
 30155  015E5A                     u9155:
 30156  015E5A  0100               	movlb	0	; () banked
 30157  015E5C  90D8               	bcf	status,0,c
 30158  015E5E  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30159  015E60                     u9154:
 30160  015E60  0100               	movlb	0	; () banked
 30161  015E62  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 30162  015E64  D7FA               	goto	u9155
 30163  015E66  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30164  015E6A  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30165  015E6E  0100               	movlb	0	; () banked
 30166  015E70  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30167  015E72  12DF               	iorwf	indf2,f,c
 30168                           
 30169                           ; BSR set to: 0
 30170  015E74  0012               	return		;funcret
 30171  015E76                     __end_of_Byte_SetBit:
 30172                           	opt stack 0
 30173                           tosu	equ	0xFFF
 30174                           tosh	equ	0xFFE
 30175                           tosl	equ	0xFFD
 30176                           pclath	equ	0xFFA
 30177                           tblptru	equ	0xFF8
 30178                           tblptrh	equ	0xFF7
 30179                           tblptrl	equ	0xFF6
 30180                           tablat	equ	0xFF5
 30181                           prodh	equ	0xFF4
 30182                           prodl	equ	0xFF3
 30183                           intcon	equ	0xFF2
 30184                           indf0	equ	0xFEF
 30185                           postinc0	equ	0xFEE
 30186                           fsr0h	equ	0xFEA
 30187                           fsr0l	equ	0xFE9
 30188                           wreg	equ	0xFE8
 30189                           indf1	equ	0xFE7
 30190                           postdec1	equ	0xFE5
 30191                           fsr1h	equ	0xFE2
 30192                           fsr1l	equ	0xFE1
 30193                           indf2	equ	0xFDF
 30194                           postinc2	equ	0xFDE
 30195                           postdec2	equ	0xFDD
 30196                           plusw2	equ	0xFDB
 30197                           fsr2h	equ	0xFDA
 30198                           fsr2l	equ	0xFD9
 30199                           status	equ	0xFD8
 30200                           
 30201 ;; *************** function _Port_GetPin *****************
 30202 ;; Defined at:
 30203 ;;		line 271 in file "Library/Port.c"
 30204 ;; Parameters:    Size  Location     Type
 30205 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 30206 ;;		 -> PortB(10), PortE(10), PortC(10), 
 30207 ;;  pPin            1    2[BANK0 ] enum E6750
 30208 ;; Auto vars:     Size  Location     Type
 30209 ;;  Output          1    5[BANK0 ] unsigned char 
 30210 ;; Return value:  Size  Location     Type
 30211 ;;                  1    wreg      unsigned char 
 30212 ;; Registers used:
 30213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30214 ;; Tracked objects:
 30215 ;;		On entry : 0/0
 30216 ;;		On exit  : 0/0
 30217 ;;		Unchanged: 0/0
 30218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30219 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30222 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30223 ;;Total ram usage:        6 bytes
 30224 ;; Hardware stack levels used:    1
 30225 ;; Hardware stack levels required when called:    7
 30226 ;; This function calls:
 30227 ;;		Nothing
 30228 ;; This function is called by:
 30229 ;;		_Port_TogglePin
 30230 ;;		_HMI_LeftSwitch
 30231 ;;		_HMI_RightSwitch
 30232 ;;		_HMI_UpSwitch
 30233 ;;		_HMI_DownSwitch
 30234 ;;		_MXK_TestButton
 30235 ;; This function uses a non-reentrant model
 30236 ;;
 30237                           
 30238                           	psect	text157
 30239  0163D6                     __ptext157:
 30240                           	opt stack 0
 30241  0163D6                     _Port_GetPin:
 30242                           	opt stack 18
 30243                           
 30244                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 30245                           
 30246                           ; BSR set to: 0
 30247                           ;incstack = 0
 30248  0163D6  0100               	movlb	0	; () banked
 30249  0163D8  EE20 F006          	lfsr	2,6
 30250  0163DC  51B5               	movf	Port_GetPin@pInput& (0+255),w,b
 30251  0163DE  26D9               	addwf	fsr2l,f,c
 30252  0163E0  51B6               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 30253  0163E2  22DA               	addwfc	fsr2h,f,c
 30254  0163E4  CFDE F0B8          	movff	postinc2,??_Port_GetPin
 30255  0163E8  CFDD F0B9          	movff	postdec2,??_Port_GetPin+1
 30256  0163EC  C0B8  FFD9         	movff	??_Port_GetPin,fsr2l
 30257  0163F0  C0B9  FFDA         	movff	??_Port_GetPin+1,fsr2h
 30258  0163F4  50DF               	movf	indf2,w,c
 30259  0163F6  0100               	movlb	0	; () banked
 30260  0163F8  6FBA               	movwf	Port_GetPin@Output& (0+255),b
 30261                           
 30262                           ; BSR set to: 0
 30263                           ;Port.c: 274: Output >>= (UINT8)pPin;
 30264  0163FA  0100               	movlb	0	; () banked
 30265  0163FC  29B7               	incf	Port_GetPin@pPin& (0+255),w,b
 30266  0163FE  0100               	movlb	0	; () banked
 30267  016400  6FB8               	movwf	??_Port_GetPin& (0+255),b
 30268  016402  D003               	goto	u9190
 30269  016404                     u9195:
 30270  016404  0100               	movlb	0	; () banked
 30271  016406  90D8               	bcf	status,0,c
 30272  016408  33BA               	rrcf	Port_GetPin@Output& (0+255),f,b
 30273  01640A                     u9190:
 30274  01640A  0100               	movlb	0	; () banked
 30275  01640C  2FB8               	decfsz	??_Port_GetPin& (0+255),f,b
 30276  01640E  D7FA               	goto	u9195
 30277                           
 30278                           ;Port.c: 275: Output &= 1;
 30279  016410  0E01               	movlw	1
 30280  016412  0100               	movlb	0	; () banked
 30281  016414  17BA               	andwf	Port_GetPin@Output& (0+255),f,b
 30282                           
 30283                           ; BSR set to: 0
 30284                           ;Port.c: 276: return Output;
 30285  016416  0100               	movlb	0	; () banked
 30286  016418  51BA               	movf	Port_GetPin@Output& (0+255),w,b
 30287  01641A  0012               	return	
 30288  01641C                     __end_of_Port_GetPin:
 30289                           	opt stack 0
 30290                           tosu	equ	0xFFF
 30291                           tosh	equ	0xFFE
 30292                           tosl	equ	0xFFD
 30293                           pclath	equ	0xFFA
 30294                           tblptru	equ	0xFF8
 30295                           tblptrh	equ	0xFF7
 30296                           tblptrl	equ	0xFF6
 30297                           tablat	equ	0xFF5
 30298                           prodh	equ	0xFF4
 30299                           prodl	equ	0xFF3
 30300                           intcon	equ	0xFF2
 30301                           indf0	equ	0xFEF
 30302                           postinc0	equ	0xFEE
 30303                           fsr0h	equ	0xFEA
 30304                           fsr0l	equ	0xFE9
 30305                           wreg	equ	0xFE8
 30306                           indf1	equ	0xFE7
 30307                           postdec1	equ	0xFE5
 30308                           fsr1h	equ	0xFE2
 30309                           fsr1l	equ	0xFE1
 30310                           indf2	equ	0xFDF
 30311                           postinc2	equ	0xFDE
 30312                           postdec2	equ	0xFDD
 30313                           plusw2	equ	0xFDB
 30314                           fsr2h	equ	0xFDA
 30315                           fsr2l	equ	0xFD9
 30316                           status	equ	0xFD8
 30317                           
 30318 ;; *************** function _HMI_SetBar *****************
 30319 ;; Defined at:
 30320 ;;		line 205 in file "HMI.c"
 30321 ;; Parameters:    Size  Location     Type
 30322 ;;  pValue          1    wreg     unsigned char 
 30323 ;; Auto vars:     Size  Location     Type
 30324 ;;  pValue          1    0[BANK0 ] unsigned char 
 30325 ;; Return value:  Size  Location     Type
 30326 ;;                  1    wreg      void 
 30327 ;; Registers used:
 30328 ;;		wreg
 30329 ;; Tracked objects:
 30330 ;;		On entry : 0/0
 30331 ;;		On exit  : 0/0
 30332 ;;		Unchanged: 0/0
 30333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30338 ;;Total ram usage:        1 bytes
 30339 ;; Hardware stack levels used:    1
 30340 ;; Hardware stack levels required when called:    7
 30341 ;; This function calls:
 30342 ;;		Nothing
 30343 ;; This function is called by:
 30344 ;;		_Event_DIPSwitch
 30345 ;;		_Event_HMI_DIPSwitch
 30346 ;;		_Event_HMI_LeftButton
 30347 ;;		_Event_HMI_RightButton
 30348 ;; This function uses a non-reentrant model
 30349 ;;
 30350                           
 30351                           	psect	text158
 30352  016D08                     __ptext158:
 30353                           	opt stack 0
 30354  016D08                     _HMI_SetBar:
 30355                           	opt stack 18
 30356                           
 30357                           ; BSR set to: 0
 30358                           ;incstack = 0
 30359                           ;HMI_SetBar@pValue stored from wreg
 30360  016D08  0100               	movlb	0	; () banked
 30361  016D0A  6FB5               	movwf	HMI_SetBar@pValue& (0+255),b
 30362                           
 30363                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 30364  016D0C  C0B5  F345         	movff	HMI_SetBar@pValue,_HMIBoard+7
 30365  016D10  0012               	return		;funcret
 30366  016D12                     __end_of_HMI_SetBar:
 30367                           	opt stack 0
 30368                           tosu	equ	0xFFF
 30369                           tosh	equ	0xFFE
 30370                           tosl	equ	0xFFD
 30371                           pclath	equ	0xFFA
 30372                           tblptru	equ	0xFF8
 30373                           tblptrh	equ	0xFF7
 30374                           tblptrl	equ	0xFF6
 30375                           tablat	equ	0xFF5
 30376                           prodh	equ	0xFF4
 30377                           prodl	equ	0xFF3
 30378                           intcon	equ	0xFF2
 30379                           indf0	equ	0xFEF
 30380                           postinc0	equ	0xFEE
 30381                           fsr0h	equ	0xFEA
 30382                           fsr0l	equ	0xFE9
 30383                           wreg	equ	0xFE8
 30384                           indf1	equ	0xFE7
 30385                           postdec1	equ	0xFE5
 30386                           fsr1h	equ	0xFE2
 30387                           fsr1l	equ	0xFE1
 30388                           indf2	equ	0xFDF
 30389                           postinc2	equ	0xFDE
 30390                           postdec2	equ	0xFDD
 30391                           plusw2	equ	0xFDB
 30392                           fsr2h	equ	0xFDA
 30393                           fsr2l	equ	0xFD9
 30394                           status	equ	0xFD8
 30395                           
 30396 ;; *************** function _HMI_GetBar *****************
 30397 ;; Defined at:
 30398 ;;		line 209 in file "HMI.c"
 30399 ;; Parameters:    Size  Location     Type
 30400 ;;		None
 30401 ;; Auto vars:     Size  Location     Type
 30402 ;;		None
 30403 ;; Return value:  Size  Location     Type
 30404 ;;                  1    wreg      unsigned char 
 30405 ;; Registers used:
 30406 ;;		wreg, status,2
 30407 ;; Tracked objects:
 30408 ;;		On entry : 0/0
 30409 ;;		On exit  : 0/0
 30410 ;;		Unchanged: 0/0
 30411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30416 ;;Total ram usage:        0 bytes
 30417 ;; Hardware stack levels used:    1
 30418 ;; Hardware stack levels required when called:    7
 30419 ;; This function calls:
 30420 ;;		Nothing
 30421 ;; This function is called by:
 30422 ;;		_Event_DIPSwitch
 30423 ;;		_Event_HMI_DIPSwitch
 30424 ;; This function uses a non-reentrant model
 30425 ;;
 30426                           
 30427                           	psect	text159
 30428  016D44                     __ptext159:
 30429                           	opt stack 0
 30430  016D44                     _HMI_GetBar:
 30431                           	opt stack 18
 30432                           
 30433                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 30434                           
 30435                           ;incstack = 0
 30436  016D44  0103               	movlb	3	; () banked
 30437  016D46  5145               	movf	(_HMIBoard+7)& (0+255),w,b
 30438  016D48  0012               	return	
 30439  016D4A                     __end_of_HMI_GetBar:
 30440                           	opt stack 0
 30441                           tosu	equ	0xFFF
 30442                           tosh	equ	0xFFE
 30443                           tosl	equ	0xFFD
 30444                           pclath	equ	0xFFA
 30445                           tblptru	equ	0xFF8
 30446                           tblptrh	equ	0xFF7
 30447                           tblptrl	equ	0xFF6
 30448                           tablat	equ	0xFF5
 30449                           prodh	equ	0xFF4
 30450                           prodl	equ	0xFF3
 30451                           intcon	equ	0xFF2
 30452                           indf0	equ	0xFEF
 30453                           postinc0	equ	0xFEE
 30454                           fsr0h	equ	0xFEA
 30455                           fsr0l	equ	0xFE9
 30456                           wreg	equ	0xFE8
 30457                           indf1	equ	0xFE7
 30458                           postdec1	equ	0xFE5
 30459                           fsr1h	equ	0xFE2
 30460                           fsr1l	equ	0xFE1
 30461                           indf2	equ	0xFDF
 30462                           postinc2	equ	0xFDE
 30463                           postdec2	equ	0xFDD
 30464                           plusw2	equ	0xFDB
 30465                           fsr2h	equ	0xFDA
 30466                           fsr2l	equ	0xFD9
 30467                           status	equ	0xFD8
 30468                           
 30469 ;; *************** function _ISR_Function *****************
 30470 ;; Defined at:
 30471 ;;		line 38 in file "Library/ISR.c"
 30472 ;; Parameters:    Size  Location     Type
 30473 ;;		None
 30474 ;; Auto vars:     Size  Location     Type
 30475 ;;		None
 30476 ;; Return value:  Size  Location     Type
 30477 ;;                  1    wreg      void 
 30478 ;; Registers used:
 30479 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30480 ;; Tracked objects:
 30481 ;;		On entry : 0/0
 30482 ;;		On exit  : 0/0
 30483 ;;		Unchanged: 0/0
 30484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30487 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30488 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30489 ;;Total ram usage:       18 bytes
 30490 ;; Hardware stack levels used:    1
 30491 ;; Hardware stack levels required when called:    6
 30492 ;; This function calls:
 30493 ;;		_Timer0_ISR
 30494 ;; This function is called by:
 30495 ;;		Interrupt level 2
 30496 ;; This function uses a non-reentrant model
 30497 ;;
 30498                           
 30499                           	psect	intcode
 30500  001408                     __pintcode:
 30501                           	opt stack 0
 30502  001408                     _ISR_Function:
 30503                           	opt stack 13
 30504                           
 30505                           ; BSR set to: 3
 30506                           ;incstack = 0
 30507  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 30508  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 30509  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 30510  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 30511  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 30512  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 30513  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 30514  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 30515  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 30516  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 30517  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 30518  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 30519  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 30520  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 30521  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 30522  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 30523  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 30524  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 30525  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 30526                           
 30527                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 30528  001452  92F2               	bcf	intcon,1,c	;volatile
 30529                           
 30530                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 30531  001454  B4F2               	btfsc	intcon,2,c	;volatile
 30532  001456  AAF2               	btfss	intcon,5,c	;volatile
 30533  001458  D002               	goto	i2l1590
 30534                           
 30535                           ;ISR.c: 68: Timer0_ISR();
 30536  00145A  EC4E  F0B4         	call	_Timer0_ISR	;wreg free
 30537  00145E                     i2l1590:
 30538  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 30539  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 30540  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 30541  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 30542  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 30543  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 30544  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 30545  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 30546  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 30547  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 30548  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 30549  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 30550  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 30551  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 30552  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 30553  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 30554  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 30555  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 30556  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 30557  0014A8  0011               	retfie		f
 30558  0014AA                     __end_of_ISR_Function:
 30559                           	opt stack 0
 30560                           tosu	equ	0xFFF
 30561                           tosh	equ	0xFFE
 30562                           tosl	equ	0xFFD
 30563                           pclatu	equ	0xFFB
 30564                           pclath	equ	0xFFA
 30565                           tblptru	equ	0xFF8
 30566                           tblptrh	equ	0xFF7
 30567                           tblptrl	equ	0xFF6
 30568                           tablat	equ	0xFF5
 30569                           prodh	equ	0xFF4
 30570                           prodl	equ	0xFF3
 30571                           intcon	equ	0xFF2
 30572                           indf0	equ	0xFEF
 30573                           postinc0	equ	0xFEE
 30574                           fsr0h	equ	0xFEA
 30575                           fsr0l	equ	0xFE9
 30576                           wreg	equ	0xFE8
 30577                           indf1	equ	0xFE7
 30578                           postdec1	equ	0xFE5
 30579                           fsr1h	equ	0xFE2
 30580                           fsr1l	equ	0xFE1
 30581                           indf2	equ	0xFDF
 30582                           postinc2	equ	0xFDE
 30583                           postdec2	equ	0xFDD
 30584                           plusw2	equ	0xFDB
 30585                           fsr2h	equ	0xFDA
 30586                           fsr2l	equ	0xFD9
 30587                           status	equ	0xFD8
 30588                           
 30589 ;; *************** function _Timer0_ISR *****************
 30590 ;; Defined at:
 30591 ;;		line 94 in file "Library/Timer0.c"
 30592 ;; Parameters:    Size  Location     Type
 30593 ;;		None
 30594 ;; Auto vars:     Size  Location     Type
 30595 ;;		None
 30596 ;; Return value:  Size  Location     Type
 30597 ;;                  1    wreg      void 
 30598 ;; Registers used:
 30599 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30600 ;; Tracked objects:
 30601 ;;		On entry : 0/0
 30602 ;;		On exit  : 0/0
 30603 ;;		Unchanged: 0/0
 30604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30609 ;;Total ram usage:        0 bytes
 30610 ;; Hardware stack levels used:    1
 30611 ;; Hardware stack levels required when called:    5
 30612 ;; This function calls:
 30613 ;;		Absolute function
 30614 ;;		i2_Motor_Step
 30615 ;;		i2_Timer0_Stop
 30616 ;; This function is called by:
 30617 ;;		_ISR_Function
 30618 ;; This function uses a non-reentrant model
 30619 ;;
 30620                           
 30621                           	psect	text161
 30622  01689C                     __ptext161:
 30623                           	opt stack 0
 30624  01689C                     _Timer0_ISR:
 30625                           	opt stack 13
 30626                           
 30627                           ;Timer0.c: 96: Timer0_Stop();
 30628                           
 30629                           ;incstack = 0
 30630  01689C  ECA5  F0B6         	call	i2_Timer0_Stop	;wreg free
 30631                           
 30632                           ;Timer0.c: 99: if (gISR != 0)
 30633  0168A0  0100               	movlb	0	; () banked
 30634  0168A2  5160               	movf	_gISR& (0+255),w,b
 30635  0168A4  0100               	movlb	0	; () banked
 30636  0168A6  1161               	iorwf	(_gISR+1)& (0+255),w,b
 30637  0168A8  0100               	movlb	0	; () banked
 30638  0168AA  1162               	iorwf	(_gISR+2)& (0+255),w,b
 30639  0168AC  B4D8               	btfsc	status,2,c
 30640  0168AE  0012               	return	
 30641                           
 30642                           ; BSR set to: 0
 30643                           ;Timer0.c: 100: gISR();
 30644  0168B0  D801               	call	i2u1489_48
 30645  0168B2  0012               	return	
 30646  0168B4                     i2u1489_48:
 30647  0168B4  0005               	push	
 30648  0168B6  6EFA               	movwf	pclath,c
 30649  0168B8  0100               	movlb	0	; () banked
 30650  0168BA  5160               	movf	_gISR& (0+255),w,b
 30651  0168BC  6EFD               	movwf	tosl,c
 30652  0168BE  5161               	movf	(_gISR+1)& (0+255),w,b
 30653  0168C0  6EFE               	movwf	tosh,c
 30654  0168C2  5162               	movf	(_gISR+2)& (0+255),w,b
 30655  0168C4  6EFF               	movwf	tosu,c
 30656  0168C6  50FA               	movf	pclath,w,c
 30657  0168C8  0012               	return		;indir
 30658  0168CA                     __end_of_Timer0_ISR:
 30659                           	opt stack 0
 30660                           tosu	equ	0xFFF
 30661                           tosh	equ	0xFFE
 30662                           tosl	equ	0xFFD
 30663                           pclatu	equ	0xFFB
 30664                           pclath	equ	0xFFA
 30665                           tblptru	equ	0xFF8
 30666                           tblptrh	equ	0xFF7
 30667                           tblptrl	equ	0xFF6
 30668                           tablat	equ	0xFF5
 30669                           prodh	equ	0xFF4
 30670                           prodl	equ	0xFF3
 30671                           intcon	equ	0xFF2
 30672                           indf0	equ	0xFEF
 30673                           postinc0	equ	0xFEE
 30674                           fsr0h	equ	0xFEA
 30675                           fsr0l	equ	0xFE9
 30676                           wreg	equ	0xFE8
 30677                           indf1	equ	0xFE7
 30678                           postdec1	equ	0xFE5
 30679                           fsr1h	equ	0xFE2
 30680                           fsr1l	equ	0xFE1
 30681                           indf2	equ	0xFDF
 30682                           postinc2	equ	0xFDE
 30683                           postdec2	equ	0xFDD
 30684                           plusw2	equ	0xFDB
 30685                           fsr2h	equ	0xFDA
 30686                           fsr2l	equ	0xFD9
 30687                           status	equ	0xFD8
 30688                           
 30689 ;; *************** function i2_Motor_Step *****************
 30690 ;; Defined at:
 30691 ;;		line 75 in file "Library/Motor.c"
 30692 ;; Parameters:    Size  Location     Type
 30693 ;;		None
 30694 ;; Auto vars:     Size  Location     Type
 30695 ;;		None
 30696 ;; Return value:  Size  Location     Type
 30697 ;;                  1    wreg      void 
 30698 ;; Registers used:
 30699 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30700 ;; Tracked objects:
 30701 ;;		On entry : 0/0
 30702 ;;		On exit  : 0/0
 30703 ;;		Unchanged: 0/0
 30704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30709 ;;Total ram usage:        2 bytes
 30710 ;; Hardware stack levels used:    1
 30711 ;; Hardware stack levels required when called:    4
 30712 ;; This function calls:
 30713 ;;		i2_MXK_Queue
 30714 ;;		i2_MXK_Release
 30715 ;;		i2_MXK_SwitchTo
 30716 ;;		i2_Port_SetPin
 30717 ;;		i2_Timer0_Restart
 30718 ;;		i2_Timer0_Stop
 30719 ;; This function is called by:
 30720 ;; This function uses a non-reentrant model
 30721 ;;
 30722                           
 30723                           	psect	text162
 30724  013C0A                     __ptext162:
 30725                           	opt stack 0
 30726  013C0A                     i2_Motor_Step:
 30727                           	opt stack 13
 30728                           
 30729                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 30730                           
 30731                           ;incstack = 0
 30732  013C0A  0100               	movlb	0	; () banked
 30733  013C0C  EE20 F004          	lfsr	2,4
 30734  013C10  5183               	movf	_lMotor& (0+255),w,b
 30735  013C12  26D9               	addwf	fsr2l,f,c
 30736  013C14  5184               	movf	(_lMotor+1)& (0+255),w,b
 30737  013C16  22DA               	addwfc	fsr2h,f,c
 30738  013C18  50DF               	movf	indf2,w,c
 30739  013C1A  ECA1  F0B3         	call	i2_MXK_SwitchTo
 30740  013C1E  0900               	iorlw	0
 30741  013C20  B4D8               	btfsc	status,2,c
 30742  013C22  D06A               	goto	i2l1627
 30743                           
 30744                           ;Motor.c: 78: {
 30745                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 30746  013C24  C083  FFD9         	movff	_lMotor,fsr2l
 30747  013C28  C084  FFDA         	movff	_lMotor+1,fsr2h
 30748  013C2C  50DE               	movf	postinc2,w,c
 30749  013C2E  10DE               	iorwf	postinc2,w,c
 30750  013C30  B4D8               	btfsc	status,2,c
 30751  013C32  D05D               	goto	i2l1628
 30752                           
 30753                           ;Motor.c: 80: {
 30754                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 30755  013C34  C083  FFD9         	movff	_lMotor,fsr2l
 30756  013C38  C084  FFDA         	movff	_lMotor+1,fsr2h
 30757  013C3C  0E01               	movlw	1
 30758  013C3E  BEDB               	btfsc	plusw2,7,c
 30759  013C40  D022               	goto	i2l1629
 30760  013C42  0E01               	movlw	1
 30761  013C44  50DB               	movf	plusw2,w,c
 30762  013C46  E103               	bnz	i2u778_40
 30763  013C48  04DE               	decf	postinc2,w,c
 30764  013C4A  A0D8               	btfss	status,0,c
 30765  013C4C  D01C               	goto	i2l1629
 30766  013C4E                     i2u778_40:
 30767                           
 30768                           ;Motor.c: 83: {
 30769                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 30770  013C4E  C083  FFD9         	movff	_lMotor,fsr2l
 30771  013C52  C084  FFDA         	movff	_lMotor+1,fsr2h
 30772  013C56  28DE               	incf	postinc2,w,c
 30773  013C58  E104               	bnz	i2u779_40
 30774  013C5A  0E7F               	movlw	127
 30775  013C5C  18DE               	xorwf	postinc2,w,c
 30776  013C5E  B4D8               	btfsc	status,2,c
 30777  013C60  D007               	goto	i2l1630
 30778  013C62                     i2u779_40:
 30779                           
 30780                           ;Motor.c: 85: lMotor->mDelta --;
 30781  013C62  C083  FFD9         	movff	_lMotor,fsr2l
 30782  013C66  C084  FFDA         	movff	_lMotor+1,fsr2h
 30783  013C6A  06DE               	decf	postinc2,f,c
 30784  013C6C  0E00               	movlw	0
 30785  013C6E  5ADD               	subwfb	postdec2,f,c
 30786  013C70                     i2l1630:
 30787                           
 30788                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 30789  013C70  0EAC               	movlw	low _PortE
 30790  013C72  6E10               	movwf	i2Port_SetPin@pInput,c
 30791  013C74  0E03               	movlw	high _PortE
 30792  013C76  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30793  013C78  0E00               	movlw	0
 30794  013C7A  6E12               	movwf	i2Port_SetPin@pPin,c
 30795  013C7C  0E01               	movlw	1
 30796  013C7E  6E13               	movwf	i2Port_SetPin@pValue,c
 30797  013C80  EC77  F0A6         	call	i2_Port_SetPin	;wreg free
 30798                           
 30799                           ;Motor.c: 88: }
 30800  013C84  D01B               	goto	i2l1631
 30801  013C86                     i2l1629:
 30802                           
 30803                           ;Motor.c: 89: else
 30804                           ;Motor.c: 90: {
 30805                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 30806  013C86  C083  FFD9         	movff	_lMotor,fsr2l
 30807  013C8A  C084  FFDA         	movff	_lMotor+1,fsr2h
 30808  013C8E  04DE               	decf	postinc2,w,c
 30809  013C90  E104               	bnz	i2u780_40
 30810  013C92  0E80               	movlw	128
 30811  013C94  18DE               	xorwf	postinc2,w,c
 30812  013C96  B4D8               	btfsc	status,2,c
 30813  013C98  D007               	goto	i2l1632
 30814  013C9A                     i2u780_40:
 30815                           
 30816                           ;Motor.c: 92: lMotor->mDelta ++;
 30817  013C9A  C083  FFD9         	movff	_lMotor,fsr2l
 30818  013C9E  C084  FFDA         	movff	_lMotor+1,fsr2h
 30819  013CA2  2ADE               	incf	postinc2,f,c
 30820  013CA4  0E00               	movlw	0
 30821  013CA6  22DD               	addwfc	postdec2,f,c
 30822  013CA8                     i2l1632:
 30823                           
 30824                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 30825  013CA8  0EAC               	movlw	low _PortE
 30826  013CAA  6E10               	movwf	i2Port_SetPin@pInput,c
 30827  013CAC  0E03               	movlw	high _PortE
 30828  013CAE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30829  013CB0  0E00               	movlw	0
 30830  013CB2  6E12               	movwf	i2Port_SetPin@pPin,c
 30831  013CB4  0E00               	movlw	0
 30832  013CB6  6E13               	movwf	i2Port_SetPin@pValue,c
 30833  013CB8  EC77  F0A6         	call	i2_Port_SetPin	;wreg free
 30834  013CBC                     i2l1631:
 30835                           
 30836                           ;Motor.c: 95: }
 30837                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 30838  013CBC  0EAC               	movlw	low _PortE
 30839  013CBE  6E10               	movwf	i2Port_SetPin@pInput,c
 30840  013CC0  0E03               	movlw	high _PortE
 30841  013CC2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30842  013CC4  0E01               	movlw	1
 30843  013CC6  6E12               	movwf	i2Port_SetPin@pPin,c
 30844  013CC8  0E01               	movlw	1
 30845  013CCA  6E13               	movwf	i2Port_SetPin@pValue,c
 30846  013CCC  EC77  F0A6         	call	i2_Port_SetPin	;wreg free
 30847                           
 30848                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 30849  013CD0  0EAC               	movlw	low _PortE
 30850  013CD2  6E10               	movwf	i2Port_SetPin@pInput,c
 30851  013CD4  0E03               	movlw	high _PortE
 30852  013CD6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30853  013CD8  0E01               	movlw	1
 30854  013CDA  6E12               	movwf	i2Port_SetPin@pPin,c
 30855  013CDC  0E00               	movlw	0
 30856  013CDE  6E13               	movwf	i2Port_SetPin@pValue,c
 30857  013CE0  EC77  F0A6         	call	i2_Port_SetPin	;wreg free
 30858                           
 30859                           ;Motor.c: 101: MXK_Release();
 30860  013CE4  ECA8  F0B6         	call	i2_MXK_Release	;wreg free
 30861                           
 30862                           ;Motor.c: 102: Timer0_Restart();
 30863  013CE8  EC74  F0B6         	call	i2_Timer0_Restart	;wreg free
 30864                           
 30865                           ;Motor.c: 103: return;
 30866  013CEC  0012               	return	
 30867  013CEE                     i2l1628:
 30868                           
 30869                           ;Motor.c: 104: }
 30870                           ;Motor.c: 105: MXK_Release();
 30871  013CEE  ECA8  F0B6         	call	i2_MXK_Release	;wreg free
 30872                           
 30873                           ;Motor.c: 106: Timer0_Stop();
 30874  013CF2  ECA5  F0B6         	call	i2_Timer0_Stop	;wreg free
 30875                           
 30876                           ;Motor.c: 107: return;
 30877  013CF6  0012               	return	
 30878  013CF8                     i2l1627:
 30879                           
 30880                           ;Motor.c: 108: }
 30881                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 30882  013CF8  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 30883  013CFC  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 30884  013D00  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 30885  013D04  EC61  F0B6         	call	i2_MXK_Queue	;wreg free
 30886  013D08  0012               	return		;funcret
 30887  013D0A                     __end_ofi2_Motor_Step:
 30888                           	opt stack 0
 30889                           tosu	equ	0xFFF
 30890                           tosh	equ	0xFFE
 30891                           tosl	equ	0xFFD
 30892                           pclatu	equ	0xFFB
 30893                           pclath	equ	0xFFA
 30894                           tblptru	equ	0xFF8
 30895                           tblptrh	equ	0xFF7
 30896                           tblptrl	equ	0xFF6
 30897                           tablat	equ	0xFF5
 30898                           prodh	equ	0xFF4
 30899                           prodl	equ	0xFF3
 30900                           intcon	equ	0xFF2
 30901                           indf0	equ	0xFEF
 30902                           postinc0	equ	0xFEE
 30903                           fsr0h	equ	0xFEA
 30904                           fsr0l	equ	0xFE9
 30905                           wreg	equ	0xFE8
 30906                           indf1	equ	0xFE7
 30907                           postdec1	equ	0xFE5
 30908                           fsr1h	equ	0xFE2
 30909                           fsr1l	equ	0xFE1
 30910                           indf2	equ	0xFDF
 30911                           postinc2	equ	0xFDE
 30912                           postdec2	equ	0xFDD
 30913                           plusw2	equ	0xFDB
 30914                           fsr2h	equ	0xFDA
 30915                           fsr2l	equ	0xFD9
 30916                           status	equ	0xFD8
 30917                           
 30918 ;; *************** function i2_Timer0_Stop *****************
 30919 ;; Defined at:
 30920 ;;		line 89 in file "Library/Timer0.c"
 30921 ;; Parameters:    Size  Location     Type
 30922 ;;		None
 30923 ;; Auto vars:     Size  Location     Type
 30924 ;;		None
 30925 ;; Return value:  Size  Location     Type
 30926 ;;                  1    wreg      void 
 30927 ;; Registers used:
 30928 ;;		None
 30929 ;; Tracked objects:
 30930 ;;		On entry : 0/0
 30931 ;;		On exit  : 0/0
 30932 ;;		Unchanged: 0/0
 30933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30938 ;;Total ram usage:        0 bytes
 30939 ;; Hardware stack levels used:    1
 30940 ;; This function calls:
 30941 ;;		Nothing
 30942 ;; This function is called by:
 30943 ;;		_Timer0_ISR
 30944 ;;		i2_Motor_Step
 30945 ;; This function uses a non-reentrant model
 30946 ;;
 30947                           
 30948                           	psect	text163
 30949  016D4A                     __ptext163:
 30950                           	opt stack 0
 30951  016D4A                     i2_Timer0_Stop:
 30952                           	opt stack 17
 30953                           
 30954                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30955                           
 30956                           ;incstack = 0
 30957  016D4A  9AF2               	bcf	intcon,5,c	;volatile
 30958                           
 30959                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30960  016D4C  94F2               	bcf	intcon,2,c	;volatile
 30961  016D4E  0012               	return		;funcret
 30962  016D50                     __end_ofi2_Timer0_Stop:
 30963                           	opt stack 0
 30964                           tosu	equ	0xFFF
 30965                           tosh	equ	0xFFE
 30966                           tosl	equ	0xFFD
 30967                           pclatu	equ	0xFFB
 30968                           pclath	equ	0xFFA
 30969                           tblptru	equ	0xFF8
 30970                           tblptrh	equ	0xFF7
 30971                           tblptrl	equ	0xFF6
 30972                           tablat	equ	0xFF5
 30973                           prodh	equ	0xFF4
 30974                           prodl	equ	0xFF3
 30975                           intcon	equ	0xFF2
 30976                           indf0	equ	0xFEF
 30977                           postinc0	equ	0xFEE
 30978                           fsr0h	equ	0xFEA
 30979                           fsr0l	equ	0xFE9
 30980                           wreg	equ	0xFE8
 30981                           indf1	equ	0xFE7
 30982                           postdec1	equ	0xFE5
 30983                           fsr1h	equ	0xFE2
 30984                           fsr1l	equ	0xFE1
 30985                           indf2	equ	0xFDF
 30986                           postinc2	equ	0xFDE
 30987                           postdec2	equ	0xFDD
 30988                           plusw2	equ	0xFDB
 30989                           fsr2h	equ	0xFDA
 30990                           fsr2l	equ	0xFD9
 30991                           status	equ	0xFD8
 30992                           
 30993 ;; *************** function i2_Timer0_Restart *****************
 30994 ;; Defined at:
 30995 ;;		line 83 in file "Library/Timer0.c"
 30996 ;; Parameters:    Size  Location     Type
 30997 ;;		None
 30998 ;; Auto vars:     Size  Location     Type
 30999 ;;		None
 31000 ;; Return value:  Size  Location     Type
 31001 ;;                  1    wreg      void 
 31002 ;; Registers used:
 31003 ;;		None
 31004 ;; Tracked objects:
 31005 ;;		On entry : 0/0
 31006 ;;		On exit  : 0/0
 31007 ;;		Unchanged: 0/0
 31008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31013 ;;Total ram usage:        0 bytes
 31014 ;; Hardware stack levels used:    1
 31015 ;; This function calls:
 31016 ;;		Nothing
 31017 ;; This function is called by:
 31018 ;;		i2_Motor_Step
 31019 ;; This function uses a non-reentrant model
 31020 ;;
 31021                           
 31022                           	psect	text164
 31023  016CE8                     __ptext164:
 31024                           	opt stack 0
 31025  016CE8                     i2_Timer0_Restart:
 31026                           	opt stack 16
 31027                           
 31028                           ;Timer0.c: 85: TMR0 = COUNTER;
 31029                           
 31030                           ;incstack = 0
 31031  016CE8  C029  FFD6         	movff	_COUNTER,4054	;volatile
 31032  016CEC  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 31033                           
 31034                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 31035  016CF0  8AF2               	bsf	intcon,5,c	;volatile
 31036  016CF2  0012               	return		;funcret
 31037  016CF4                     __end_ofi2_Timer0_Restart:
 31038                           	opt stack 0
 31039                           tosu	equ	0xFFF
 31040                           tosh	equ	0xFFE
 31041                           tosl	equ	0xFFD
 31042                           pclatu	equ	0xFFB
 31043                           pclath	equ	0xFFA
 31044                           tblptru	equ	0xFF8
 31045                           tblptrh	equ	0xFF7
 31046                           tblptrl	equ	0xFF6
 31047                           tablat	equ	0xFF5
 31048                           prodh	equ	0xFF4
 31049                           prodl	equ	0xFF3
 31050                           intcon	equ	0xFF2
 31051                           indf0	equ	0xFEF
 31052                           postinc0	equ	0xFEE
 31053                           fsr0h	equ	0xFEA
 31054                           fsr0l	equ	0xFE9
 31055                           wreg	equ	0xFE8
 31056                           indf1	equ	0xFE7
 31057                           postdec1	equ	0xFE5
 31058                           fsr1h	equ	0xFE2
 31059                           fsr1l	equ	0xFE1
 31060                           indf2	equ	0xFDF
 31061                           postinc2	equ	0xFDE
 31062                           postdec2	equ	0xFDD
 31063                           plusw2	equ	0xFDB
 31064                           fsr2h	equ	0xFDA
 31065                           fsr2l	equ	0xFD9
 31066                           status	equ	0xFD8
 31067                           
 31068 ;; *************** function i2_Port_SetPin *****************
 31069 ;; Defined at:
 31070 ;;		line 247 in file "Library/Port.c"
 31071 ;; Parameters:    Size  Location     Type
 31072 ;;  pInput          2   15[COMRAM] const PTR struct Port
 31073 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 31074 ;;  pPin            1   17[COMRAM] enum E6750
 31075 ;;  pValue          1   18[COMRAM] unsigned char 
 31076 ;; Auto vars:     Size  Location     Type
 31077 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 31078 ;; Return value:  Size  Location     Type
 31079 ;;                  1    wreg      void 
 31080 ;; Registers used:
 31081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31082 ;; Tracked objects:
 31083 ;;		On entry : 0/0
 31084 ;;		On exit  : 0/0
 31085 ;;		Unchanged: 0/0
 31086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31090 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31091 ;;Total ram usage:        5 bytes
 31092 ;; Hardware stack levels used:    1
 31093 ;; Hardware stack levels required when called:    3
 31094 ;; This function calls:
 31095 ;;		i2_Byte_SetBit
 31096 ;;		i2_Word_GetPair
 31097 ;; This function is called by:
 31098 ;;		i2_Motor_Step
 31099 ;; This function uses a non-reentrant model
 31100 ;;
 31101                           
 31102                           	psect	text165
 31103  014CEE                     __ptext165:
 31104                           	opt stack 0
 31105  014CEE                     i2_Port_SetPin:
 31106                           	opt stack 13
 31107                           
 31108                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 31109                           
 31110                           ;incstack = 0
 31111  014CEE  0E08               	movlw	8
 31112  014CF0  2410               	addwf	i2Port_SetPin@pInput,w,c
 31113  014CF2  6E0D               	movwf	i2Word_GetPair@pInput,c
 31114  014CF4  0E00               	movlw	0
 31115  014CF6  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 31116  014CF8  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 31117  014CFA  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 31118  014CFE  EC1F  F0B4         	call	i2_Word_GetPair	;wreg free
 31119  014D02  6E14               	movwf	i2Port_SetPin@Type,c
 31120                           
 31121                           ;Port.c: 250: switch (Type)
 31122  014D04  D03B               	goto	i2l427
 31123  014D06                     
 31124                           ;Port.c: 256: pValue &= 1;
 31125  014D06  0E01               	movlw	1
 31126  014D08  1613               	andwf	i2Port_SetPin@pValue,f,c
 31127                           
 31128                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31129  014D0A  EE20 F002          	lfsr	2,2
 31130  014D0E  5010               	movf	i2Port_SetPin@pInput,w,c
 31131  014D10  26D9               	addwf	fsr2l,f,c
 31132  014D12  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31133  014D14  22DA               	addwfc	fsr2h,f,c
 31134  014D16  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31135  014D1A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31136  014D1E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31137  014D22  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31138  014D26  ECC9  F0B0         	call	i2_Byte_SetBit	;wreg free
 31139                           
 31140                           ;Port.c: 258: break;
 31141  014D2A  0012               	return	
 31142  014D2C                     
 31143                           ;Port.c: 261: pValue &= 1;
 31144  014D2C  0E01               	movlw	1
 31145  014D2E  1613               	andwf	i2Port_SetPin@pValue,f,c
 31146                           
 31147                           ;Port.c: 262: pValue ^= 1;
 31148  014D30  0E01               	movlw	1
 31149  014D32  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 31150                           
 31151                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31152  014D34  EE20 F002          	lfsr	2,2
 31153  014D38  5010               	movf	i2Port_SetPin@pInput,w,c
 31154  014D3A  26D9               	addwf	fsr2l,f,c
 31155  014D3C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31156  014D3E  22DA               	addwfc	fsr2h,f,c
 31157  014D40  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31158  014D44  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31159  014D48  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31160  014D4C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31161  014D50  ECC9  F0B0         	call	i2_Byte_SetBit	;wreg free
 31162                           
 31163                           ;Port.c: 264: break;
 31164  014D54  0012               	return	
 31165  014D56                     
 31166                           ;Port.c: 266: pValue &= 1;
 31167  014D56  0E01               	movlw	1
 31168  014D58  1613               	andwf	i2Port_SetPin@pValue,f,c
 31169                           
 31170                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 31171  014D5A  EE20 F004          	lfsr	2,4
 31172  014D5E  5010               	movf	i2Port_SetPin@pInput,w,c
 31173  014D60  26D9               	addwf	fsr2l,f,c
 31174  014D62  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31175  014D64  22DA               	addwfc	fsr2h,f,c
 31176  014D66  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31177  014D6A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31178  014D6E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31179  014D72  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31180  014D76  ECC9  F0B0         	call	i2_Byte_SetBit	;wreg free
 31181                           
 31182                           ;Port.c: 269: }
 31183                           
 31184                           ;Port.c: 268: break;
 31185  014D7A  0012               	return	
 31186  014D7C                     i2l427:
 31187  014D7C  5014               	movf	i2Port_SetPin@Type,w,c
 31188                           
 31189                           ; Switch size 1, requested type "space"
 31190                           ; Number of cases is 4, Range of values is 0 to 3
 31191                           ; switch strategies available:
 31192                           ; Name         Instructions Cycles
 31193                           ; simple_byte           13     7 (average)
 31194                           ;	Chosen strategy is simple_byte
 31195  014D7E  0A00               	xorlw	0	; case 0
 31196  014D80  B4D8               	btfsc	status,2,c
 31197  014D82  0012               	return	
 31198  014D84  0A01               	xorlw	1	; case 1
 31199  014D86  B4D8               	btfsc	status,2,c
 31200  014D88  D7BE               	goto	i2l430
 31201  014D8A  0A03               	xorlw	3	; case 2
 31202  014D8C  B4D8               	btfsc	status,2,c
 31203  014D8E  D7CE               	goto	i2l432
 31204  014D90  0A01               	xorlw	1	; case 3
 31205  014D92  A4D8               	btfss	status,2,c
 31206  014D94  0012               	return	
 31207  014D96  D7DF               	goto	i2l433
 31208  014D98                     __end_ofi2_Port_SetPin:
 31209                           	opt stack 0
 31210                           tosu	equ	0xFFF
 31211                           tosh	equ	0xFFE
 31212                           tosl	equ	0xFFD
 31213                           pclatu	equ	0xFFB
 31214                           pclath	equ	0xFFA
 31215                           tblptru	equ	0xFF8
 31216                           tblptrh	equ	0xFF7
 31217                           tblptrl	equ	0xFF6
 31218                           tablat	equ	0xFF5
 31219                           prodh	equ	0xFF4
 31220                           prodl	equ	0xFF3
 31221                           intcon	equ	0xFF2
 31222                           indf0	equ	0xFEF
 31223                           postinc0	equ	0xFEE
 31224                           fsr0h	equ	0xFEA
 31225                           fsr0l	equ	0xFE9
 31226                           wreg	equ	0xFE8
 31227                           indf1	equ	0xFE7
 31228                           postdec1	equ	0xFE5
 31229                           fsr1h	equ	0xFE2
 31230                           fsr1l	equ	0xFE1
 31231                           indf2	equ	0xFDF
 31232                           postinc2	equ	0xFDE
 31233                           postdec2	equ	0xFDD
 31234                           plusw2	equ	0xFDB
 31235                           fsr2h	equ	0xFDA
 31236                           fsr2l	equ	0xFD9
 31237                           status	equ	0xFD8
 31238                           
 31239 ;; *************** function i2_Word_GetPair *****************
 31240 ;; Defined at:
 31241 ;;		line 156 in file "Library/Types.c"
 31242 ;; Parameters:    Size  Location     Type
 31243 ;;  pInput          2   12[COMRAM] PTR struct Word
 31244 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 31245 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 31246 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 31247 ;;		 -> PortC(10), PortF(10), NULL(0), 
 31248 ;;  pPair           1   14[COMRAM] unsigned char 
 31249 ;; Auto vars:     Size  Location     Type
 31250 ;;		None
 31251 ;; Return value:  Size  Location     Type
 31252 ;;                  1    wreg      unsigned char 
 31253 ;; Registers used:
 31254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31255 ;; Tracked objects:
 31256 ;;		On entry : 0/0
 31257 ;;		On exit  : 0/0
 31258 ;;		Unchanged: 0/0
 31259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31260 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31264 ;;Total ram usage:        3 bytes
 31265 ;; Hardware stack levels used:    1
 31266 ;; Hardware stack levels required when called:    2
 31267 ;; This function calls:
 31268 ;;		i2_Byte_GetPair
 31269 ;; This function is called by:
 31270 ;;		i2_Port_SetPin
 31271 ;; This function uses a non-reentrant model
 31272 ;;
 31273                           
 31274                           	psect	text166
 31275  01683E                     __ptext166:
 31276                           	opt stack 0
 31277  01683E                     i2_Word_GetPair:
 31278                           	opt stack 13
 31279                           
 31280                           ;Types.c: 158: if (pPair >= 4)
 31281                           
 31282                           ;incstack = 0
 31283  01683E  0E03               	movlw	3
 31284  016840  640F               	cpfsgt	i2Word_GetPair@pPair,c
 31285  016842  D00C               	goto	i2l781
 31286                           
 31287                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 31288  016844  0E01               	movlw	1
 31289  016846  240D               	addwf	i2Word_GetPair@pInput,w,c
 31290  016848  6E0A               	movwf	i2Byte_GetPair@pInput,c
 31291  01684A  0E00               	movlw	0
 31292  01684C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 31293  01684E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 31294  016850  500F               	movf	i2Word_GetPair@pPair,w,c
 31295  016852  0FFC               	addlw	252
 31296  016854  6E0C               	movwf	i2Byte_GetPair@pPair,c
 31297  016856  EC9B  F0B5         	call	i2_Byte_GetPair	;wreg free
 31298  01685A  0012               	return	
 31299  01685C                     i2l781:
 31300                           
 31301                           ;Types.c: 160: else
 31302                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 31303  01685C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 31304  016860  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 31305  016864  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 31306  016868  EC9B  F0B5         	call	i2_Byte_GetPair	;wreg free
 31307  01686C  0012               	return	
 31308  01686E                     __end_ofi2_Word_GetPair:
 31309                           	opt stack 0
 31310                           tosu	equ	0xFFF
 31311                           tosh	equ	0xFFE
 31312                           tosl	equ	0xFFD
 31313                           pclatu	equ	0xFFB
 31314                           pclath	equ	0xFFA
 31315                           tblptru	equ	0xFF8
 31316                           tblptrh	equ	0xFF7
 31317                           tblptrl	equ	0xFF6
 31318                           tablat	equ	0xFF5
 31319                           prodh	equ	0xFF4
 31320                           prodl	equ	0xFF3
 31321                           intcon	equ	0xFF2
 31322                           indf0	equ	0xFEF
 31323                           postinc0	equ	0xFEE
 31324                           fsr0h	equ	0xFEA
 31325                           fsr0l	equ	0xFE9
 31326                           wreg	equ	0xFE8
 31327                           indf1	equ	0xFE7
 31328                           postdec1	equ	0xFE5
 31329                           fsr1h	equ	0xFE2
 31330                           fsr1l	equ	0xFE1
 31331                           indf2	equ	0xFDF
 31332                           postinc2	equ	0xFDE
 31333                           postdec2	equ	0xFDD
 31334                           plusw2	equ	0xFDB
 31335                           fsr2h	equ	0xFDA
 31336                           fsr2l	equ	0xFD9
 31337                           status	equ	0xFD8
 31338                           
 31339 ;; *************** function i2_Byte_GetPair *****************
 31340 ;; Defined at:
 31341 ;;		line 87 in file "Library/Types.c"
 31342 ;; Parameters:    Size  Location     Type
 31343 ;;  pInput          2    9[COMRAM] PTR struct Byte
 31344 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31345 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31346 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31347 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31348 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31349 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31350 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31351 ;;		 -> NULL(0), 
 31352 ;;  pPair           1   11[COMRAM] unsigned char 
 31353 ;; Auto vars:     Size  Location     Type
 31354 ;;		None
 31355 ;; Return value:  Size  Location     Type
 31356 ;;                  1    wreg      unsigned char 
 31357 ;; Registers used:
 31358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31359 ;; Tracked objects:
 31360 ;;		On entry : 0/0
 31361 ;;		On exit  : 0/0
 31362 ;;		Unchanged: 0/0
 31363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31364 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31368 ;;Total ram usage:        3 bytes
 31369 ;; Hardware stack levels used:    1
 31370 ;; Hardware stack levels required when called:    1
 31371 ;; This function calls:
 31372 ;;		i2_Byte_GetZone
 31373 ;; This function is called by:
 31374 ;;		i2_Word_GetPair
 31375 ;; This function uses a non-reentrant model
 31376 ;;
 31377                           
 31378                           	psect	text167
 31379  016B36                     __ptext167:
 31380                           	opt stack 0
 31381  016B36                     i2_Byte_GetPair:
 31382                           	opt stack 13
 31383                           
 31384                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 31385                           
 31386                           ;incstack = 0
 31387  016B36  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 31388  016B3A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 31389  016B3E  0E04               	movlw	4
 31390  016B40  6E03               	movwf	i2Byte_GetZone@pMax,c
 31391  016B42  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 31392  016B46  0E02               	movlw	2
 31393  016B48  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 31394  016B4A  EC3D  F0AC         	call	i2_Byte_GetZone	;wreg free
 31395  016B4E  0012               	return	
 31396  016B50                     __end_ofi2_Byte_GetPair:
 31397                           	opt stack 0
 31398                           tosu	equ	0xFFF
 31399                           tosh	equ	0xFFE
 31400                           tosl	equ	0xFFD
 31401                           pclatu	equ	0xFFB
 31402                           pclath	equ	0xFFA
 31403                           tblptru	equ	0xFF8
 31404                           tblptrh	equ	0xFF7
 31405                           tblptrl	equ	0xFF6
 31406                           tablat	equ	0xFF5
 31407                           prodh	equ	0xFF4
 31408                           prodl	equ	0xFF3
 31409                           intcon	equ	0xFF2
 31410                           indf0	equ	0xFEF
 31411                           postinc0	equ	0xFEE
 31412                           fsr0h	equ	0xFEA
 31413                           fsr0l	equ	0xFE9
 31414                           wreg	equ	0xFE8
 31415                           indf1	equ	0xFE7
 31416                           postdec1	equ	0xFE5
 31417                           fsr1h	equ	0xFE2
 31418                           fsr1l	equ	0xFE1
 31419                           indf2	equ	0xFDF
 31420                           postinc2	equ	0xFDE
 31421                           postdec2	equ	0xFDD
 31422                           plusw2	equ	0xFDB
 31423                           fsr2h	equ	0xFDA
 31424                           fsr2l	equ	0xFD9
 31425                           status	equ	0xFD8
 31426                           
 31427 ;; *************** function i2_Byte_GetZone *****************
 31428 ;; Defined at:
 31429 ;;		line 64 in file "Library/Types.c"
 31430 ;; Parameters:    Size  Location     Type
 31431 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31432 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31433 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31434 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31435 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31436 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31437 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31438 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31439 ;;		 -> NULL(0), 
 31440 ;;  pMax            1    2[COMRAM] unsigned char 
 31441 ;;  pChunk          1    3[COMRAM] unsigned char 
 31442 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 31443 ;; Auto vars:     Size  Location     Type
 31444 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 31445 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 31446 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 31447 ;; Return value:  Size  Location     Type
 31448 ;;                  1    wreg      unsigned char 
 31449 ;; Registers used:
 31450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31451 ;; Tracked objects:
 31452 ;;		On entry : 0/0
 31453 ;;		On exit  : 0/0
 31454 ;;		Unchanged: 0/0
 31455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31456 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31457 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31459 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31460 ;;Total ram usage:        9 bytes
 31461 ;; Hardware stack levels used:    1
 31462 ;; This function calls:
 31463 ;;		Nothing
 31464 ;; This function is called by:
 31465 ;;		i2_Byte_GetPair
 31466 ;; This function uses a non-reentrant model
 31467 ;;
 31468                           
 31469                           	psect	text168
 31470  01587A                     __ptext168:
 31471                           	opt stack 0
 31472  01587A                     i2_Byte_GetZone:
 31473                           	opt stack 13
 31474                           
 31475                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 31476                           
 31477                           ;incstack = 0
 31478  01587A  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 31479  01587E  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 31480  015882  0E00               	movlw	low (__mediumconst shr (0+16))
 31481  015884  6EF8               	movwf	tblptru,c
 31482  015886  0E0F               	movlw	(high __ramtop+-1)
 31483  015888  64F7               	cpfsgt	tblptrh,c
 31484  01588A  D003               	bra	i2u532_47
 31485  01588C  0008               	tblrd		*
 31486  01588E  50F5               	movf	tablat,w,c
 31487  015890  D005               	bra	i2u532_40
 31488  015892                     i2u532_47:
 31489  015892  CFF6 FFE9          	movff	tblptrl,fsr0l
 31490  015896  CFF7 FFEA          	movff	tblptrh,fsr0h
 31491  01589A  50EF               	movf	indf0,w,c
 31492  01589C                     i2u532_40:
 31493  01589C  6E09               	movwf	i2Byte_GetZone@Output,c
 31494                           
 31495                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 31496  01589E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31497  0158A0  0D01               	mullw	1
 31498  0158A2  0E5B               	movlw	low _MASKS
 31499  0158A4  24F3               	addwf	prodl,w,c
 31500  0158A6  6EF6               	movwf	tblptrl,c
 31501  0158A8  0EFD               	movlw	high _MASKS
 31502  0158AA  20F4               	addwfc	prodh,w,c
 31503  0158AC  6EF7               	movwf	tblptrh,c
 31504  0158AE                     	if	1	;There are 3 active tblptr bytes
 31505  0158AE  6AF8               	clrf	tblptru,c
 31506  0158B0  0E00               	movlw	low (__mediumconst shr (0+16))
 31507  0158B2  22F8               	addwfc	tblptru,f,c
 31508  0158B4                     	endif
 31509  0158B4  0008               	tblrd		*
 31510  0158B6  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 31511                           
 31512                           ;Types.c: 68: UINT8 Offset = 0;
 31513  0158BA  0E00               	movlw	0
 31514  0158BC  6E08               	movwf	i2Byte_GetZone@Offset,c
 31515                           
 31516                           ;Types.c: 70: while (pChunk >= pMax)
 31517  0158BE  D003               	goto	i2l732
 31518  0158C0                     
 31519                           ;Types.c: 71: {
 31520                           ;Types.c: 72: pChunk -= pMax;
 31521  0158C0  5003               	movf	i2Byte_GetZone@pMax,w,c
 31522  0158C2  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 31523                           
 31524                           ;Types.c: 73: Offset += 1;
 31525  0158C4  2A08               	incf	i2Byte_GetZone@Offset,f,c
 31526  0158C6                     i2l732:
 31527  0158C6  5003               	movf	i2Byte_GetZone@pMax,w,c
 31528  0158C8  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 31529  0158CA  B0D8               	btfsc	status,0,c
 31530  0158CC  D7F9               	goto	i2l733
 31531                           
 31532                           ;Types.c: 74: }
 31533                           ;Types.c: 75: pChunk *= pChunkSize;
 31534  0158CE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31535  0158D0  0204               	mulwf	i2Byte_GetZone@pChunk,c
 31536  0158D2  50F3               	movf	prodl,w,c
 31537  0158D4  6E04               	movwf	i2Byte_GetZone@pChunk,c
 31538                           
 31539                           ;Types.c: 76: pChunk += Offset;
 31540  0158D6  5008               	movf	i2Byte_GetZone@Offset,w,c
 31541  0158D8  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 31542                           
 31543                           ;Types.c: 78: Output >>= pChunk;
 31544  0158DA  2804               	incf	i2Byte_GetZone@pChunk,w,c
 31545  0158DC  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 31546  0158DE  D002               	goto	i2u534_40
 31547  0158E0                     i2u534_45:
 31548  0158E0  90D8               	bcf	status,0,c
 31549  0158E2  3209               	rrcf	i2Byte_GetZone@Output,f,c
 31550  0158E4                     i2u534_40:
 31551  0158E4  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 31552  0158E6  D7FC               	goto	i2u534_45
 31553                           
 31554                           ;Types.c: 79: Output &= MASK;
 31555  0158E8  5007               	movf	i2Byte_GetZone@MASK,w,c
 31556  0158EA  1609               	andwf	i2Byte_GetZone@Output,f,c
 31557                           
 31558                           ;Types.c: 80: return Output;
 31559  0158EC  5009               	movf	i2Byte_GetZone@Output,w,c
 31560  0158EE  0012               	return	
 31561  0158F0                     __end_ofi2_Byte_GetZone:
 31562                           	opt stack 0
 31563                           tosu	equ	0xFFF
 31564                           tosh	equ	0xFFE
 31565                           tosl	equ	0xFFD
 31566                           pclatu	equ	0xFFB
 31567                           pclath	equ	0xFFA
 31568                           tblptru	equ	0xFF8
 31569                           tblptrh	equ	0xFF7
 31570                           tblptrl	equ	0xFF6
 31571                           tablat	equ	0xFF5
 31572                           prodh	equ	0xFF4
 31573                           prodl	equ	0xFF3
 31574                           intcon	equ	0xFF2
 31575                           indf0	equ	0xFEF
 31576                           postinc0	equ	0xFEE
 31577                           fsr0h	equ	0xFEA
 31578                           fsr0l	equ	0xFE9
 31579                           wreg	equ	0xFE8
 31580                           indf1	equ	0xFE7
 31581                           postdec1	equ	0xFE5
 31582                           fsr1h	equ	0xFE2
 31583                           fsr1l	equ	0xFE1
 31584                           indf2	equ	0xFDF
 31585                           postinc2	equ	0xFDE
 31586                           postdec2	equ	0xFDD
 31587                           plusw2	equ	0xFDB
 31588                           fsr2h	equ	0xFDA
 31589                           fsr2l	equ	0xFD9
 31590                           status	equ	0xFD8
 31591                           
 31592 ;; *************** function i2_Byte_SetBit *****************
 31593 ;; Defined at:
 31594 ;;		line 32 in file "Library/Types.c"
 31595 ;; Parameters:    Size  Location     Type
 31596 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31597 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 31598 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 31599 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 31600 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 31601 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 31602 ;;		 -> NULL(0), 
 31603 ;;  pBit            1    2[COMRAM] unsigned char 
 31604 ;;  pValue          1    3[COMRAM] unsigned char 
 31605 ;; Auto vars:     Size  Location     Type
 31606 ;;		None
 31607 ;; Return value:  Size  Location     Type
 31608 ;;                  1    wreg      void 
 31609 ;; Registers used:
 31610 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 31611 ;; Tracked objects:
 31612 ;;		On entry : 0/0
 31613 ;;		On exit  : 0/0
 31614 ;;		Unchanged: 0/0
 31615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31619 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31620 ;;Total ram usage:        7 bytes
 31621 ;; Hardware stack levels used:    1
 31622 ;; This function calls:
 31623 ;;		Nothing
 31624 ;; This function is called by:
 31625 ;;		i2_Port_SetPin
 31626 ;; This function uses a non-reentrant model
 31627 ;;
 31628                           
 31629                           	psect	text169
 31630  016192                     __ptext169:
 31631                           	opt stack 0
 31632  016192                     i2_Byte_SetBit:
 31633                           	opt stack 15
 31634                           
 31635                           ;Types.c: 34: pValue &= 1;
 31636                           
 31637                           ;incstack = 0
 31638  016192  0E01               	movlw	1
 31639  016194  1604               	andwf	i2Byte_SetBit@pValue,f,c
 31640                           
 31641                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 31642  016196  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31643  01619A  0E01               	movlw	1
 31644  01619C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 31645  01619E  2A05               	incf	??i2_Byte_SetBit,f,c
 31646  0161A0  D002               	goto	i2u667_44
 31647  0161A2                     i2u667_45:
 31648  0161A2  90D8               	bcf	status,0,c
 31649  0161A4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31650  0161A6                     i2u667_44:
 31651  0161A6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31652  0161A8  D7FC               	goto	i2u667_45
 31653  0161AA  5006               	movf	??i2_Byte_SetBit+1,w,c
 31654  0161AC  0AFF               	xorlw	255
 31655  0161AE  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 31656  0161B0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31657  0161B4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31658  0161B8  5007               	movf	??i2_Byte_SetBit+2,w,c
 31659  0161BA  16DF               	andwf	indf2,f,c
 31660                           
 31661                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 31662  0161BC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31663  0161C0  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 31664  0161C4  2A05               	incf	??i2_Byte_SetBit,f,c
 31665  0161C6  D002               	goto	i2u668_44
 31666  0161C8                     i2u668_45:
 31667  0161C8  90D8               	bcf	status,0,c
 31668  0161CA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31669  0161CC                     i2u668_44:
 31670  0161CC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31671  0161CE  D7FC               	goto	i2u668_45
 31672  0161D0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31673  0161D4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31674  0161D8  5006               	movf	??i2_Byte_SetBit+1,w,c
 31675  0161DA  12DF               	iorwf	indf2,f,c
 31676  0161DC  0012               	return		;funcret
 31677  0161DE                     __end_ofi2_Byte_SetBit:
 31678                           	opt stack 0
 31679                           tosu	equ	0xFFF
 31680                           tosh	equ	0xFFE
 31681                           tosl	equ	0xFFD
 31682                           pclatu	equ	0xFFB
 31683                           pclath	equ	0xFFA
 31684                           tblptru	equ	0xFF8
 31685                           tblptrh	equ	0xFF7
 31686                           tblptrl	equ	0xFF6
 31687                           tablat	equ	0xFF5
 31688                           prodh	equ	0xFF4
 31689                           prodl	equ	0xFF3
 31690                           intcon	equ	0xFF2
 31691                           indf0	equ	0xFEF
 31692                           postinc0	equ	0xFEE
 31693                           fsr0h	equ	0xFEA
 31694                           fsr0l	equ	0xFE9
 31695                           wreg	equ	0xFE8
 31696                           indf1	equ	0xFE7
 31697                           postdec1	equ	0xFE5
 31698                           fsr1h	equ	0xFE2
 31699                           fsr1l	equ	0xFE1
 31700                           indf2	equ	0xFDF
 31701                           postinc2	equ	0xFDE
 31702                           postdec2	equ	0xFDD
 31703                           plusw2	equ	0xFDB
 31704                           fsr2h	equ	0xFDA
 31705                           fsr2l	equ	0xFD9
 31706                           status	equ	0xFD8
 31707                           
 31708 ;; *************** function i2_MXK_SwitchTo *****************
 31709 ;; Defined at:
 31710 ;;		line 105 in file "Library/MXK.c"
 31711 ;; Parameters:    Size  Location     Type
 31712 ;;  pModule         1    wreg     enum E6927
 31713 ;; Auto vars:     Size  Location     Type
 31714 ;;  pModule         1    7[COMRAM] enum E6927
 31715 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 31716 ;; Return value:  Size  Location     Type
 31717 ;;                  1    wreg      unsigned char 
 31718 ;; Registers used:
 31719 ;;		wreg, status,2, status,0, cstack
 31720 ;; Tracked objects:
 31721 ;;		On entry : 0/0
 31722 ;;		On exit  : 0/0
 31723 ;;		Unchanged: 0/0
 31724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31726 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31729 ;;Total ram usage:        2 bytes
 31730 ;; Hardware stack levels used:    1
 31731 ;; Hardware stack levels required when called:    1
 31732 ;; This function calls:
 31733 ;;		i2_delay_us
 31734 ;; This function is called by:
 31735 ;;		i2_Motor_Step
 31736 ;; This function uses a non-reentrant model
 31737 ;;
 31738                           
 31739                           	psect	text170
 31740  016742                     __ptext170:
 31741                           	opt stack 0
 31742  016742                     i2_MXK_SwitchTo:
 31743                           	opt stack 15
 31744                           
 31745                           ;incstack = 0
 31746                           ;i2MXK_SwitchTo@pModule stored from wreg
 31747  016742  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 31748                           
 31749                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 31750  016744  5086               	movf	3974,w,c	;volatile
 31751  016746  0B0F               	andlw	15
 31752  016748  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 31753                           
 31754                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 31755  01674A  504B               	movf	_Bus_State,w,c
 31756  01674C  A4D8               	btfss	status,2,c
 31757  01674E  D002               	goto	i2l1730
 31758                           
 31759                           ;MXK.c: 110: return 0;
 31760  016750  0E00               	movlw	0
 31761  016752  0012               	return	
 31762  016754                     i2l1730:
 31763                           
 31764                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 31765  016754  0E00               	movlw	0
 31766  016756  6E4B               	movwf	_Bus_State,c
 31767                           
 31768                           ;MXK.c: 114: if (CUR != pModule)
 31769  016758  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31770  01675A  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 31771  01675C  B4D8               	btfsc	status,2,c
 31772  01675E  D00A               	goto	i2l1732
 31773                           
 31774                           ;MXK.c: 115: {
 31775                           ;MXK.c: 116: PORTG &= ~(0xF);
 31776  016760  0EF0               	movlw	240
 31777  016762  1686               	andwf	3974,f,c	;volatile
 31778                           
 31779                           ;MXK.c: 117: PORTG |= pModule;
 31780  016764  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31781  016766  1286               	iorwf	3974,f,c	;volatile
 31782                           
 31783                           ;MXK.c: 120: delay_us(10);
 31784  016768  0E00               	movlw	0
 31785  01676A  6E02               	movwf	i2delay_us@us+1,c
 31786  01676C  0E0A               	movlw	10
 31787  01676E  6E01               	movwf	i2delay_us@us,c
 31788  016770  EC92  F0B2         	call	i2_delay_us	;wreg free
 31789  016774                     i2l1732:
 31790                           
 31791                           ;MXK.c: 121: }
 31792                           ;MXK.c: 122: return 1;
 31793  016774  0E01               	movlw	1
 31794  016776  0012               	return	
 31795  016778                     __end_ofi2_MXK_SwitchTo:
 31796                           	opt stack 0
 31797                           tosu	equ	0xFFF
 31798                           tosh	equ	0xFFE
 31799                           tosl	equ	0xFFD
 31800                           pclatu	equ	0xFFB
 31801                           pclath	equ	0xFFA
 31802                           tblptru	equ	0xFF8
 31803                           tblptrh	equ	0xFF7
 31804                           tblptrl	equ	0xFF6
 31805                           tablat	equ	0xFF5
 31806                           prodh	equ	0xFF4
 31807                           prodl	equ	0xFF3
 31808                           intcon	equ	0xFF2
 31809                           indf0	equ	0xFEF
 31810                           postinc0	equ	0xFEE
 31811                           fsr0h	equ	0xFEA
 31812                           fsr0l	equ	0xFE9
 31813                           wreg	equ	0xFE8
 31814                           indf1	equ	0xFE7
 31815                           postdec1	equ	0xFE5
 31816                           fsr1h	equ	0xFE2
 31817                           fsr1l	equ	0xFE1
 31818                           indf2	equ	0xFDF
 31819                           postinc2	equ	0xFDE
 31820                           postdec2	equ	0xFDD
 31821                           plusw2	equ	0xFDB
 31822                           fsr2h	equ	0xFDA
 31823                           fsr2l	equ	0xFD9
 31824                           status	equ	0xFD8
 31825                           
 31826 ;; *************** function i2_delay_us *****************
 31827 ;; Defined at:
 31828 ;;		line 255 in file "Library/Types.c"
 31829 ;; Parameters:    Size  Location     Type
 31830 ;;  us              2    0[COMRAM] unsigned short 
 31831 ;; Auto vars:     Size  Location     Type
 31832 ;;  delay_us        4    2[COMRAM] unsigned long 
 31833 ;; Return value:  Size  Location     Type
 31834 ;;                  1    wreg      void 
 31835 ;; Registers used:
 31836 ;;		wreg, status,2, status,0
 31837 ;; Tracked objects:
 31838 ;;		On entry : 0/0
 31839 ;;		On exit  : 0/0
 31840 ;;		Unchanged: 0/0
 31841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31843 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31845 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31846 ;;Total ram usage:        6 bytes
 31847 ;; Hardware stack levels used:    1
 31848 ;; This function calls:
 31849 ;;		Nothing
 31850 ;; This function is called by:
 31851 ;;		i2_MXK_SwitchTo
 31852 ;; This function uses a non-reentrant model
 31853 ;;
 31854                           
 31855                           	psect	text171
 31856  016524                     __ptext171:
 31857                           	opt stack 0
 31858  016524                     i2_delay_us:
 31859                           	opt stack 15
 31860                           
 31861                           ;Types.c: 256: unsigned long u;
 31862                           ;Types.c: 257: while (us--) {
 31863                           
 31864                           ;incstack = 0
 31865  016524  D016               	goto	i2u671_40
 31866  016526                     i2l9944:
 31867                           
 31868                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 31869  016526  0E00               	movlw	0
 31870  016528  6E03               	movwf	i2delay_us@u,c
 31871  01652A  0E00               	movlw	0
 31872  01652C  6E04               	movwf	i2delay_us@u+1,c
 31873  01652E  0E00               	movlw	0
 31874  016530  6E05               	movwf	i2delay_us@u+2,c
 31875  016532  0E00               	movlw	0
 31876  016534  6E06               	movwf	i2delay_us@u+3,c
 31877  016536                     i2l9946:
 31878  016536  5003               	movf	i2delay_us@u,w,c
 31879  016538  1004               	iorwf	i2delay_us@u+1,w,c
 31880  01653A  1005               	iorwf	i2delay_us@u+2,w,c
 31881  01653C  1006               	iorwf	i2delay_us@u+3,w,c
 31882  01653E  A4D8               	btfss	status,2,c
 31883  016540  D008               	goto	i2u671_40
 31884  016542  F000               	nop		; ;# 
 31885  016544  0E01               	movlw	1
 31886  016546  2603               	addwf	i2delay_us@u,f,c
 31887  016548  0E00               	movlw	0
 31888  01654A  2204               	addwfc	i2delay_us@u+1,f,c
 31889  01654C  2205               	addwfc	i2delay_us@u+2,f,c
 31890  01654E  2206               	addwfc	i2delay_us@u+3,f,c
 31891  016550  D7F2               	goto	i2l9946
 31892  016552                     i2u671_40:
 31893  016552  0601               	decf	i2delay_us@us,f,c
 31894  016554  A0D8               	btfss	status,0,c
 31895  016556  0602               	decf	i2delay_us@us+1,f,c
 31896  016558  2801               	incf	i2delay_us@us,w,c
 31897  01655A  E1E5               	bnz	i2l9944
 31898  01655C  2802               	incf	i2delay_us@us+1,w,c
 31899  01655E  B4D8               	btfsc	status,2,c
 31900  016560  0012               	return	
 31901  016562  D7E1               	goto	i2l832
 31902  016564                     __end_ofi2_delay_us:
 31903                           	opt stack 0
 31904                           tosu	equ	0xFFF
 31905                           tosh	equ	0xFFE
 31906                           tosl	equ	0xFFD
 31907                           pclatu	equ	0xFFB
 31908                           pclath	equ	0xFFA
 31909                           tblptru	equ	0xFF8
 31910                           tblptrh	equ	0xFF7
 31911                           tblptrl	equ	0xFF6
 31912                           tablat	equ	0xFF5
 31913                           prodh	equ	0xFF4
 31914                           prodl	equ	0xFF3
 31915                           intcon	equ	0xFF2
 31916                           indf0	equ	0xFEF
 31917                           postinc0	equ	0xFEE
 31918                           fsr0h	equ	0xFEA
 31919                           fsr0l	equ	0xFE9
 31920                           wreg	equ	0xFE8
 31921                           indf1	equ	0xFE7
 31922                           postdec1	equ	0xFE5
 31923                           fsr1h	equ	0xFE2
 31924                           fsr1l	equ	0xFE1
 31925                           indf2	equ	0xFDF
 31926                           postinc2	equ	0xFDE
 31927                           postdec2	equ	0xFDD
 31928                           plusw2	equ	0xFDB
 31929                           fsr2h	equ	0xFDA
 31930                           fsr2l	equ	0xFD9
 31931                           status	equ	0xFD8
 31932                           
 31933 ;; *************** function i2_MXK_Release *****************
 31934 ;; Defined at:
 31935 ;;		line 130 in file "Library/MXK.c"
 31936 ;; Parameters:    Size  Location     Type
 31937 ;;		None
 31938 ;; Auto vars:     Size  Location     Type
 31939 ;;		None
 31940 ;; Return value:  Size  Location     Type
 31941 ;;                  1    wreg      unsigned char 
 31942 ;; Registers used:
 31943 ;;		wreg, status,2, status,0
 31944 ;; Tracked objects:
 31945 ;;		On entry : 0/0
 31946 ;;		On exit  : 0/0
 31947 ;;		Unchanged: 0/0
 31948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31953 ;;Total ram usage:        0 bytes
 31954 ;; Hardware stack levels used:    1
 31955 ;; This function calls:
 31956 ;;		Nothing
 31957 ;; This function is called by:
 31958 ;;		i2_Motor_Step
 31959 ;; This function uses a non-reentrant model
 31960 ;;
 31961                           
 31962                           	psect	text172
 31963  016D50                     __ptext172:
 31964                           	opt stack 0
 31965  016D50                     i2_MXK_Release:
 31966                           	opt stack 16
 31967                           
 31968                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31969                           
 31970                           ;incstack = 0
 31971  016D50  0E01               	movlw	1
 31972  016D52  6E4B               	movwf	_Bus_State,c
 31973                           
 31974                           ;MXK.c: 135: return 1;
 31975                           ;	Return value of i2_MXK_Release is never used
 31976  016D54  0012               	return	
 31977  016D56                     __end_ofi2_MXK_Release:
 31978                           	opt stack 0
 31979                           tosu	equ	0xFFF
 31980                           tosh	equ	0xFFE
 31981                           tosl	equ	0xFFD
 31982                           pclatu	equ	0xFFB
 31983                           pclath	equ	0xFFA
 31984                           tblptru	equ	0xFF8
 31985                           tblptrh	equ	0xFF7
 31986                           tblptrl	equ	0xFF6
 31987                           tablat	equ	0xFF5
 31988                           prodh	equ	0xFF4
 31989                           prodl	equ	0xFF3
 31990                           intcon	equ	0xFF2
 31991                           indf0	equ	0xFEF
 31992                           postinc0	equ	0xFEE
 31993                           fsr0h	equ	0xFEA
 31994                           fsr0l	equ	0xFE9
 31995                           wreg	equ	0xFE8
 31996                           indf1	equ	0xFE7
 31997                           postdec1	equ	0xFE5
 31998                           fsr1h	equ	0xFE2
 31999                           fsr1l	equ	0xFE1
 32000                           indf2	equ	0xFDF
 32001                           postinc2	equ	0xFDE
 32002                           postdec2	equ	0xFDD
 32003                           plusw2	equ	0xFDB
 32004                           fsr2h	equ	0xFDA
 32005                           fsr2l	equ	0xFD9
 32006                           status	equ	0xFD8
 32007                           
 32008 ;; *************** function i2_MXK_Queue *****************
 32009 ;; Defined at:
 32010 ;;		line 144 in file "Library/MXK.c"
 32011 ;; Parameters:    Size  Location     Type
 32012 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 32013 ;;		 -> Absolute function(1), Motor_Step(1), 
 32014 ;; Auto vars:     Size  Location     Type
 32015 ;;		None
 32016 ;; Return value:  Size  Location     Type
 32017 ;;                  1    wreg      void 
 32018 ;; Registers used:
 32019 ;;		wreg, status,2, status,0
 32020 ;; Tracked objects:
 32021 ;;		On entry : 0/0
 32022 ;;		On exit  : 0/0
 32023 ;;		Unchanged: 0/0
 32024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32025 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32028 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32029 ;;Total ram usage:        3 bytes
 32030 ;; Hardware stack levels used:    1
 32031 ;; This function calls:
 32032 ;;		Nothing
 32033 ;; This function is called by:
 32034 ;;		i2_Motor_Step
 32035 ;; This function uses a non-reentrant model
 32036 ;;
 32037                           
 32038                           	psect	text173
 32039  016CC2                     __ptext173:
 32040                           	opt stack 0
 32041  016CC2                     i2_MXK_Queue:
 32042                           	opt stack 16
 32043                           
 32044                           ;MXK.c: 146: lQueue = pCallback;
 32045                           
 32046                           ;incstack = 0
 32047  016CC2  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 32048  016CC6  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 32049  016CCA  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 32050  016CCE  0012               	return		;funcret
 32051  016CD0                     __end_ofi2_MXK_Queue:
 32052                           	opt stack 0
 32053                           tosu	equ	0xFFF
 32054                           tosh	equ	0xFFE
 32055                           tosl	equ	0xFFD
 32056                           pclatu	equ	0xFFB
 32057                           pclath	equ	0xFFA
 32058                           tblptru	equ	0xFF8
 32059                           tblptrh	equ	0xFF7
 32060                           tblptrl	equ	0xFF6
 32061                           tablat	equ	0xFF5
 32062                           prodh	equ	0xFF4
 32063                           prodl	equ	0xFF3
 32064                           intcon	equ	0xFF2
 32065                           indf0	equ	0xFEF
 32066                           postinc0	equ	0xFEE
 32067                           fsr0h	equ	0xFEA
 32068                           fsr0l	equ	0xFE9
 32069                           wreg	equ	0xFE8
 32070                           indf1	equ	0xFE7
 32071                           postdec1	equ	0xFE5
 32072                           fsr1h	equ	0xFE2
 32073                           fsr1l	equ	0xFE1
 32074                           indf2	equ	0xFDF
 32075                           postinc2	equ	0xFDE
 32076                           postdec2	equ	0xFDD
 32077                           plusw2	equ	0xFDB
 32078                           fsr2h	equ	0xFDA
 32079                           fsr2l	equ	0xFD9
 32080                           status	equ	0xFD8
 32081                           tosu	equ	0xFFF
 32082                           tosh	equ	0xFFE
 32083                           tosl	equ	0xFFD
 32084                           pclatu	equ	0xFFB
 32085                           pclath	equ	0xFFA
 32086                           tblptru	equ	0xFF8
 32087                           tblptrh	equ	0xFF7
 32088                           tblptrl	equ	0xFF6
 32089                           tablat	equ	0xFF5
 32090                           prodh	equ	0xFF4
 32091                           prodl	equ	0xFF3
 32092                           intcon	equ	0xFF2
 32093                           indf0	equ	0xFEF
 32094                           postinc0	equ	0xFEE
 32095                           fsr0h	equ	0xFEA
 32096                           fsr0l	equ	0xFE9
 32097                           wreg	equ	0xFE8
 32098                           indf1	equ	0xFE7
 32099                           postdec1	equ	0xFE5
 32100                           fsr1h	equ	0xFE2
 32101                           fsr1l	equ	0xFE1
 32102                           indf2	equ	0xFDF
 32103                           postinc2	equ	0xFDE
 32104                           postdec2	equ	0xFDD
 32105                           plusw2	equ	0xFDB
 32106                           fsr2h	equ	0xFDA
 32107                           fsr2l	equ	0xFD9
 32108                           status	equ	0xFD8
 32109                           
 32110                           	psect	text174
 32111  000000                     __ptext174:
 32112                           	opt stack 0
 32113                           tosu	equ	0xFFF
 32114                           tosh	equ	0xFFE
 32115                           tosl	equ	0xFFD
 32116                           pclatu	equ	0xFFB
 32117                           pclath	equ	0xFFA
 32118                           tblptru	equ	0xFF8
 32119                           tblptrh	equ	0xFF7
 32120                           tblptrl	equ	0xFF6
 32121                           tablat	equ	0xFF5
 32122                           prodh	equ	0xFF4
 32123                           prodl	equ	0xFF3
 32124                           intcon	equ	0xFF2
 32125                           indf0	equ	0xFEF
 32126                           postinc0	equ	0xFEE
 32127                           fsr0h	equ	0xFEA
 32128                           fsr0l	equ	0xFE9
 32129                           wreg	equ	0xFE8
 32130                           indf1	equ	0xFE7
 32131                           postdec1	equ	0xFE5
 32132                           fsr1h	equ	0xFE2
 32133                           fsr1l	equ	0xFE1
 32134                           indf2	equ	0xFDF
 32135                           postinc2	equ	0xFDE
 32136                           postdec2	equ	0xFDD
 32137                           plusw2	equ	0xFDB
 32138                           fsr2h	equ	0xFDA
 32139                           fsr2l	equ	0xFD9
 32140                           status	equ	0xFD8
 32141                           
 32142                           	psect	rparam
 32143  0000                     tosu	equ	0xFFF
 32144                           tosh	equ	0xFFE
 32145                           tosl	equ	0xFFD
 32146                           pclatu	equ	0xFFB
 32147                           pclath	equ	0xFFA
 32148                           tblptru	equ	0xFF8
 32149                           tblptrh	equ	0xFF7
 32150                           tblptrl	equ	0xFF6
 32151                           tablat	equ	0xFF5
 32152                           prodh	equ	0xFF4
 32153                           prodl	equ	0xFF3
 32154                           intcon	equ	0xFF2
 32155                           indf0	equ	0xFEF
 32156                           postinc0	equ	0xFEE
 32157                           fsr0h	equ	0xFEA
 32158                           fsr0l	equ	0xFE9
 32159                           wreg	equ	0xFE8
 32160                           indf1	equ	0xFE7
 32161                           postdec1	equ	0xFE5
 32162                           fsr1h	equ	0xFE2
 32163                           fsr1l	equ	0xFE1
 32164                           indf2	equ	0xFDF
 32165                           postinc2	equ	0xFDE
 32166                           postdec2	equ	0xFDD
 32167                           plusw2	equ	0xFDB
 32168                           fsr2h	equ	0xFDA
 32169                           fsr2l	equ	0xFD9
 32170                           status	equ	0xFD8
 32171                           
 32172                           	psect	temp
 32173  000051                     btemp:
 32174                           	opt stack 0
 32175  000051                     	ds	1
 32176  0000                     int$flags	set	btemp
 32177  0000                     wtemp6	set	btemp+1
 32178                           tosu	equ	0xFFF
 32179                           tosh	equ	0xFFE
 32180                           tosl	equ	0xFFD
 32181                           pclatu	equ	0xFFB
 32182                           pclath	equ	0xFFA
 32183                           tblptru	equ	0xFF8
 32184                           tblptrh	equ	0xFF7
 32185                           tblptrl	equ	0xFF6
 32186                           tablat	equ	0xFF5
 32187                           prodh	equ	0xFF4
 32188                           prodl	equ	0xFF3
 32189                           intcon	equ	0xFF2
 32190                           indf0	equ	0xFEF
 32191                           postinc0	equ	0xFEE
 32192                           fsr0h	equ	0xFEA
 32193                           fsr0l	equ	0xFE9
 32194                           wreg	equ	0xFE8
 32195                           indf1	equ	0xFE7
 32196                           postdec1	equ	0xFE5
 32197                           fsr1h	equ	0xFE2
 32198                           fsr1l	equ	0xFE1
 32199                           indf2	equ	0xFDF
 32200                           postinc2	equ	0xFDE
 32201                           postdec2	equ	0xFDD
 32202                           plusw2	equ	0xFDB
 32203                           fsr2h	equ	0xFDA
 32204                           fsr2l	equ	0xFD9
 32205                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    730
    Data        31
    BSS         827
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     68     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      0     256
    BANK4           256     10     180
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_15(CODE[21]), 
		 -> STR_14(CODE[21]), STR_13(CODE[3]), STR_12(CODE[14]), STR_11(CODE[3]), 
		 -> STR_10(CODE[46]), STR_9(CODE[3]), STR_8(CODE[46]), STR_7(CODE[3]), 
		 -> STR_6(CODE[60]), STR_5(CODE[3]), STR_4(CODE[60]), STR_3(CODE[3]), 
		 -> STR_2(CODE[14]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _mode3->_move_and_rotate
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _measureAndDisplayDistance->___fltol
    ___fltol->_ADC_Voltage
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _correct_distance->_measureAndDisplayDistance
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_mode1
    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2402312
                                              8 BANK4      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
          _measureAndDisplayDistance
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  382999
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                   _correct_distance
                           _delay_ms
                    _findClosestWall
                   _irobot_song_play
                 _irobot_stop_motion
          _measureAndDisplayDistance
                           _safeToGo
              _update_bump_and_cliff
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     18    18      0  126338
                                              0 BANK4      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                           _delay_ms
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (2) _correct_distance                                     6     6      0   58761
                                              4 BANK1      6     6      0
                        _irobot_move
          _measureAndDisplayDistance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  218635
                   _irobot_song_play
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      1     1      0  123561
                                             67 BANK0      1     1      0
                     _Console_Render
                             ___wmul
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       11     7      4   12761
                                             29 BANK0     11     7      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                0     0      0  234116
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_move_straight                                 2     0      2    4726
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                                8     8      0  255129
                                              0 BANK4      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   95012
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    4422
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    4391
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    7099
                                             21 BANK0     18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _measureAndDisplayDistance                            4     4      0   54115
                                              0 BANK1      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            ___fldiv
                            ___fltol
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1553
                                             57 BANK0     10     6      4
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    9337
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     848
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3369
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    4007
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    5967
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    3043
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0 1000984
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  363224
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      4     1      3
                                              0 BANK1      2     2      0
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  292644
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262725
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   95349
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    2230
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1374
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96975
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85317
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85317
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37949
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4854
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _measureAndDisplayDistance
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _irobot_song_play
       _eusart_putch
     _move_and_rotate
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       ___wmul
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _correct_distance
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _delay_ms
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      A      B4      14       70.3%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4A4      12        0.0%
DATA                 0      0     5D0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Sep 18 10:30:40 2017

                                 _update_angle 6C4A                                  i2_Timer0_Stop 6D4A  
                             SPI_Init@pChannel 00E6                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3C0A                                              _A 004C  
                        __end_of_irobot_rotate 39FE                                              l8 4392  
                                 ___fldiv@aexp 00CD                                   ___fldiv@bexp 00CC  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6AE2                                   ___fldiv@sign 00C1  
                                           l11 3424                                             l12 340E  
                                           l90 335A                                             l85 3256  
                                           l87 32C4                                             l89 3330  
                                 ___awdiv@sign 00BA                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00B7                                  _HMI_DIPSwitch 6B80  
                           LCD_DrawField@pSize 00CD                             LCD_DrawField@count 00D3  
                   __end_of_irobot_stop_motion 6390                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6CE8                           ADC_ClockDivision@reg 00B6  
                                          l120 52E8                                            l121 52FE  
                                          l122 5314                                            l220 5EB8  
                                          l117 532A                                            l221 5E7C  
                                          l118 52D2                                            l230 6114  
                                          l222 5EC8                                            l223 5E9A  
                                  ?_LED_Toggle 0001                                            l234 6338  
                                          l235 6308                                            l227 6130  
                                          l403 2EE4                                            l412 2BC0  
                                          l228 60F8                                            l340 4EF8  
                                          l404 2E84                                            l237 6320  
                                          l421 2B54                                            l413 2A56  
                                          l341 4F06                                            l405 2F14  
                                ??_Console_Tab 00BD                                            l430 45D8  
                                          l414 2BDC                                            l350 5000  
                                          l342 4F14                                            l510 2082  
                                          l406 2E9C                                            l415 2A7C  
                                          l351 4F90                                            l343 4F22  
                                          l511 2192                                            l407 2EB4  
                                          l183 50B4                                            l432 4602  
                                          l600 0D66                                            l344 4F30  
                                          l512 20A4                                            l408 2ECC  
                                          l184 508E                                            l433 4632  
                                          l417 2AE8                                            l601 0EFA  
                                          l353 4F9E                                            l337 4F5A  
                                          l345 4F3E                                            l610 0F82  
                                          l602 0D98                                            l354 4FAC  
                                          l346 4F4C                                            l338 4EEA  
                                          l370 4E8A                                            l427 465C  
                                          l611 0FD0                                            l603 0F0C  
                                          l355 4FBA                                            l363 4EB4  
                                          l371 4E98                                            l531 188E  
                                  ?_HMI_GetBar 0001                                            l612 101E  
                                          l604 0E46                                            l356 4FC8  
                                          l372 4EA6                                            l364 4E44  
                                          l532 18B2                                            l516 20EC  
                                          l357 4FD6                                            l509 2176  
                                          l614 1100                                            l358 4FE4  
                                          l366 4E52                                            l526 18D2  
                                          l615 10F8                                            l607 106C  
                                          l359 4FF2                                            l367 4E60  
                                          l519 2134                                            l616 1112  
                                          l608 0F34                                            l368 4E6E  
                                          l528 18F0                                            l393 5FEA  
                                          l617 10FC                                            l609 108A  
                                          l369 4E7C                                            l529 186E  
                                          l483 1EE2                                            l732 526C  
                                          l900 1C5A                                            l476 1FBA  
                                          l733 5260                                            l901 1C5E  
                                          l389 5D40                                            l477 1E2C  
                                          l397 62B4                                            l910 1C82  
                                          l902 1C62                                            l726 4A62  
                                          l478 1FD6                                            l486 1F4E  
                                          l654 6928                                            l911 1C86  
                                          l903 1C66                                            l727 4A56  
                                          l479 1E76                                            l655 6920  
                                          l912 1C8A                                            l904 1C6A  
                                          l824 5C74                                            l832 60A2  
                                          l913 1C8E                                            l905 1C6E  
                                          l921 5BEA                                            l673 6800  
                                          l657 6924                                            l681 5B42  
                                          l914 1C92                                            l906 1C72  
                                          l922 5BB6                                            l930 41D0  
                                          l915 1C96                                            l907 1C76  
                                          l819 5784                                            l916 1C9A  
                                          l908 1C7A                                            l860 1BBA  
                                          l684 5B58                                            l781 664A  
                                          l853 1CA2                                            l917 1C9E  
                                          l909 1C7E                                            l861 1BBE  
                                          l597 0D74                                            l870 1BE2  
                                          l862 1BC2                                            l854 1BA6  
                                          l598 0D5C                                            l678 5B7E  
                                          l686 5B68                                            l871 1BE6  
                                          l863 1BC6                                            l599 0D84  
                                          l679 5B32                                            l880 1C0A  
                                          l872 1BEA                                            l864 1BCA  
                                          l856 1BAA                                            l928 4250  
                                          l776 63C0                                            l881 1C0E  
                                          l873 1BEE                                            l865 1BCE  
                                          l857 1BAE                                            l929 4220  
                                          l890 1C32                                            l882 1C12  
                                          l874 1BF2                                            l866 1BD2  
                                          l858 1BB2                                            l891 1C36  
                                          l883 1C16                                            l875 1BF6  
                                          l867 1BD6                                            l859 1BB6  
                                          l892 1C3A                                            l884 1C1A  
                                          l876 1BFA                                            l868 1BDA  
                                          l893 1C3E                                            l885 1C1E  
                                          l877 1BFE                                            l869 1BDE  
                                          l894 1C42                                            l886 1C22  
                                          l878 1C02                                            l990 53F4  
                                          l895 1C46                                            l887 1C26  
                                          l879 1C06                                            l983 5152  
                                          l896 1C4A                                            l888 1C2A  
                                          l976 550E                                            l992 5404  
                                          l984 50D6                                            l897 1C4E  
                                          l889 1C2E                                            l985 514E  
                                          l898 1C52                                            l978 551E  
                                          l899 1C56                                            l997 5F50  
                                          l999 5F74                                            _PR2 000FCB  
                                          _val 0081                                __end_of_ADC_Off 6D2A  
                                  ?_HMI_SetBar 0001                             ??_Event_TestButton 00CE  
                                 _Word_GetPair 661E                                            prod 000FF3  
                                  ?_HMI_Render 0001                            MXK_SwitchTo@pModule 00BC  
                   __end_of_ADC_ConversionTime 6302                                            tosl 000FFD  
                                          wreg 000FE8                             Console_MakeField@x 00C5  
                           Console_MakeField@y 00C6                                     _TXSTA1bits 000FAD  
                              _update_distance 6C38                                   Console_Tab@c 00C4  
                                 Console_Tab@i 00C3                            LCD_DrawField@pField 00C7  
                                 Console_Tab@t 00C2                     __size_of_ADC_ClockDivision 008A  
                                 ___flmul@aexp 00D0                                   ___flmul@bexp 00D5  
                                   i2_delay_us 6524                           Port_Set@TypeRequired 00D7  
                                 ___flmul@sign 00CF                                   ___flmul@temp 00DA  
                                 ___flmul@prod 00D6                              Console_FormFeed@x 00B7  
                            Console_FormFeed@y 00B8                            LCD_DrawField@pPoint 00C9  
                               ?_LCD_DrawField 00C7                          Port_SetPinType@Output 00DF  
                              Port_SetPin@Type 00C8                                Port_SetPin@pPin 00C6  
                         ?_irobot_led_power_on 0001                                  ?_Byte_GetPair 00BE  
                              __end_of_LED_Set 6142                        __size_ofi2_Word_GetPair 0030  
                                i2_Port_SetPin 4CEE                                   ___fltol@exp1 00F7  
                                 _Word_SetPair 6390                                           l1000 5F90  
                                         l1010 46CC                                           l1004 5DE0  
                                ?_Byte_GetZone 00B5                                           l1005 5E0E  
                                         l1200 4982                                           l1040 2C0A  
                                         l1201 49D6                                           l1009 46D8  
                                         l1041 2C10                                           l1202 49F2  
                                         l1042 2C16                                           l1043 2C1C  
                                         l1204 4A1C                                           l1300 55A0  
                                         l1036 2D66                                           l1044 2C22  
                                         l1205 4A02                                           l1301 55A4  
                                         l1045 2C28                                           l1037 2C04  
                                         l2021 5D70                                           l2101 30A6  
                                         l1302 55AE                                           l1062 243E  
                                         l2110 6456                                           l2030 5D68  
                                         l2022 5D4C                                           l2102 2FEA  
                                         l1207 4A2E                                           l1303 55BC  
                                         l1063 246C                                           l1047 2CCE  
                                         l2031 5D6C                                           l2103 3032  
                                         l1056 22CE                                           l3000 13A6  
                                         l2112 6442                                           l2024 5D50  
                                         l2040 3D26                                           l2104 2FF0  
                                         l1313 62E2                                           l1153 26AC  
                                         l1057 2494                                           l3001 1322  
                                         l2025 5D54                                           l2041 3D2C  
                                         l1082 4552                                           l1058 22D6  
                                         l3002 135A                                           l1146 56A6  
                                         l2114 644A                                           l2026 5D58  
                                         l2042 3D32                                           l1059 2300  
                                         l3003 134E                                           l2027 5D5C  
                                         l2035 3DBE                                           l2051 3D92  
                                         l2043 3D38                                           l1084 455A  
                                         l3020 1514                                           l3004 13A2  
                                         l2028 5D60                                           l2044 3D3E  
                                         l2036 3D10                                           l1077 4522  
                                         l2029 5D64                                           l1254 6C2C  
                                         l2118 5C5E                                           l3014 144C  
                                         l3030 0968                                           l1158 65A0  
                                         l2070 54CE                                           l2062 5488  
                                         l2046 3D52                                           l2038 3D1A  
                                         l2119 5C20                                           l1079 4532  
                                         l3007 13F2                                           l3031 0990  
                                         l3023 08D2                                           l2039 3D20  
                                         l1280 5622                                           l2144 6028  
                                         l2320 4DF6                                           l3016 149C  
                                         l3008 13C8                                           l3024 08FC  
                                         l3017 14CA                                           l3009 13DE  
                                         l3025 08F6                                           l2049 3D7E  
                                         l2401 3FB8                                           l3018 1500  
                                         l3042 0C72                                           l3026 090E  
                                         l2074 54EC                                           l2066 54A8  
                                         l2058 546E                                           l2410 19C2  
                                         l2162 3988                                           l1283 5684  
                                         l3019 1510                                           l3035 0C18  
                                         l3027 092C                                           l2139 4B6E  
                                         l2163 3974                                           l1276 560A  
                                         l3044 0CC2                                           l3036 0BEE  
                                         l3028 0956                                           l3060 2786  
                                         l3052 26F8                                           l2412 1A0E  
                                         l2156 3920                                           l2340 4472  
                                         l3045 0CE8                                           l3037 0C04  
                                         l3029 0950                                           l3053 2708  
                                         l2173 6374                                           l2333 6206  
                                         l2341 4424                                           l2326 4776  
                                         l1294 55C4                                           l1630 3838  
                                         l2318 4DC4                                           l3062 27F2  
                                         l3054 2730                                           l2422 1B84  
                                         l2414 1AD0                                           l2430 3E6A  
                                         l2166 39D6                                           l2158 3926  
                                         l2350 017C                                           l2327 47A2  
                                         l1295 558A                                           l1631 3894  
                                         l3047 0D16                                           l3063 27E2  
                                         l2095 2FA6                                           l2423 1B80  
                                         l2415 1A2E                                           l2407 1954  
                                         l2167 39B0                                           l2159 3948  
                                         l2328 47CE                                           l1296 55EE  
                                         l1632 3878                                           l3048 0D40  
                                         l3056 2748                                           l2096 2F60  
                                         l2336 6222                                           l2432 3EE0  
                                         l2360 0302                                           l2352 01C6  
                                         l2440 3B6C                                           l1297 5594  
                                         l3049 0D36                                           l3057 2738  
                                         l2417 1A66                                           l2409 1988  
                                         l2441 3B90                                           l1298 5598  
                                         l1730 64B8                                           l2098 2FD6  
                                         l2370 050E                                           l2362 0388  
                                         l2354 0288                                           l2442 3B88  
                                         l1299 559C                                           l1627 38E0  
                                         l3067 2818                                           l3059 27A4  
                                         l2099 2FBA                                           l2371 059A  
                                         l2363 03DE                                           l2355 01E6  
                                         l2347 004E                                           l1724 65EC  
                                         l1732 64E0                                           l1628 38D6  
                                         l3068 286A                                           l2364 0414  
                                         l2460 3FF6                                           l1629 3856  
                                         l2429 3EB8                                           l2365 0874  
                                         l2381 0720                                           l2373 05E4  
                                         l2357 021E                                           l2349 00F0  
                                         l2453 3FD8                                           l1726 661A  
                                         l2366 0424                                           l2454 4084  
                                         l1735 6B16                                           l2383 079C  
                                         l2375 06A6                                           l2447 3C02  
                                         l2455 3FDE                                           l2376 0604  
                                         l2368 046C                                           l2456 40B4  
                                         l2385 07DA                                           l2457 3FE4  
                                         l2730 3AA6                                           l2386 0830  
                                         l2378 063C                                           l2458 3FEA  
                                         l1827 36D8                                           l2731 3A92  
                                         l2483 290A                                           l2387 0866  
                                         l2459 3FF0                                           l1828 36F8  
                                         l2484 28A6                                           l2476 288A  
                                         l2493 29B2                                           l2485 28BE  
                                         l2477 289E                                           l2397 3F58  
                                         l2902 582C                                           l2670 484C  
                                         l2494 2A10                                           l2478 28CE  
                                         l2486 28C8                                           l2903 5820  
                                         l2495 29B8                                           l2487 2942  
                                         l2399 3F88                                           l2912 5EF8  
                                         l1784 3572                                           l2736 3AD2  
                                         l2728 3A24                                           l2913 5EEC  
                                         l1873 6690                                           l1785 3580  
                                         l2737 3AC2                                           l2673 488E  
                                         l2489 295C                                           l2906 5862  
                                         l2850 48E8                                           l2674 489C  
                                         l2666 4818                                           l2907 5870  
                                         l1787 358A                                           l2739 3AF8  
                                         l2675 48B0                                           l2667 482E  
                                         l2916 5F22                                           l2917 5F30  
                                         l2853 4952                                           l2669 4858  
                                         l2854 4964                                           l2849 48F8  
                                         l2990 11C4                                           l2991 11BA  
                                         l2993 11F4                                           l2994 1222  
                                         l2995 1218                                           l2997 1276  
                                         l2989 1196                                           l2999 12A4  
                               ??_Console_Init 00B5                          Port_SetPinType@pInput 00DB  
                                         STR_1 FFFB                                           STR_2 FFED  
                                         STR_3 FFFB                                           STR_4 FF59  
                                         STR_5 FFFB                                           STR_6 FF59  
                                         STR_7 FFFB                                           STR_8 FF95  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 5030  
                     __end_of_irobot_song_play 6C24                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9100 5236                                           u9120 529C  
                          __end_of_GetPortTRIS 4EE4                                           u9107 522C  
                                         u9125 5296                                           u9310 5832  
                                         u9214 4A9E                                           u9215 4A98  
                                         u9144 5E2E                                           u9224 4AD0  
                                         u9160 571E                                           u9145 5E28  
                                         u9225 4ACA                                           u9154 5E60  
                                         u9410 60DA                                           u9155 5E5A  
                                         u9340 5EFE                                           u9190 640A  
                                         u9280 5448                                           u9600 485E  
                                         u9450 423C                                           u9290 544E  
                                         u9195 6404                                           u9460 5DDC  
                                         u9365 6C6A                                           u9366 6C6C  
                                         u9470 5E06                                           u9650 6260  
                                         u9810 48FE                                           _SPI1 0378  
                                         _SPI2 0383                                           u9655 625A  
                                         u9780 6436                                           u9694 53A4  
                                         u9950 3744                                           u9870 5CB2  
                                         u9695 539E                                           u9935 3690  
                                         _TMR0 000FD6                                           u9970 679A  
                                         u9975 6794                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BA                                           _gISR 0060  
                           Event_DIPSwitch@Bar 00CF                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00B8                                  _iRVirtualWall 0030  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 00C4  
                                         _dist 006B                                  ?_Byte_SetByte 00B5  
                                ?_Byte_SetPair 00C0                                __end_of_SPI_DCS 680E  
                                         _main 3FD4                     irobot_leds@powerLuminosity 00C7  
                                         _init 4D98                                           _mode 0075  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C0  
                                         _itos 4192                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00B5                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 5802  
                                ??_Byte_SetBit 00B9                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 00BA  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 00C6  
                            Timer0_Init@DIVIDE 00CC                                ?_SPI_DisableISR 00B5  
                             Motor_Move@pMotor 00B8                            HMI_SetButton@pValue 00BB  
                   ?_measureAndDisplayDistance 0001                                  Console_Init@x 00B7  
                                Console_Init@y 00B8                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FF4B                           Set_Rotation@rotation 00BB  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 69D2  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 60A0  
                             __end_of_LCD_Init 33A6                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 5ED8  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F0  
                      GetPortProperties@pInput 00B7                                  ??_Button_Poll 00D3  
                             __end_of_HMI_Init 26AE                                          l13044 6C9C  
                                        l13136 5C74                                          l13144 5CB2  
                                        l13218 36D8                                          l13138 5C86  
                                        l12712 423C                                          l14224 3572  
                                        l14144 4528                                          l14138 4518  
                                        l13610 1500                                          l13338 569E  
                                        l14172 656E                                          l12572 53FA  
                                        l12566 53EA                                          l12680 60B4  
                                        l14432 2E7A                                          l12764 4A1C  
                                        l12678 60A2                                          l14622 3988  
                                        l14392 6070                                          l13912 5934  
                                        l14474 22F6                                          l14396 607E  
                                        l13916 5942                               __end_of_HMI_Poll 5AC0  
                                        l14734 32C4                                          l14744 3368  
                                        l17240 0604                                          l17152 01E6  
                                        l14762 5514                                          l17402 1A2E  
                                        l17170 0288                                          l14756 5504  
                                        l17420 1AD0                                          l14678 2962  
                                        l14784 2680                                          l17280 079C  
                                        l17258 06A6                                          l17194 03DE  
                                        l17436 1B80                                          l17286 0830  
                                        _I2C1T 0040                                          _I2C2T 03D4  
                                ___fltol@sign1 00F6                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 1538  
                              __end_of___awdiv 48BA                          irobot_rotate@isScript 00D8  
                                        ?_itos 00C1                                          STR_10 FF95  
                                        STR_11 FFFB                                          STR_12 FFED  
                                        STR_13 FFFB                                          STR_14 FFD8  
                                        STR_15 FFC3                                          STR_16 FFC3  
                                        STR_17 FFC3                                          STR_18 FFC3  
                              __end_of___flmul 0D5A                                __end_of___fltol 3B0A  
                              _Event_DIPSwitch 686E                                __end_of___lldiv 4976  
                                        u10040 56F4                                          u10035 56B6  
                                        u10070 3816                                          u10080 382A  
                                        u11040 35DE                                          u10090 386A  
                                        u10330 1446                                          u11130 3ADC  
                                        u11230 609A                                          u11208 43FE  
                                        u11320 247C                                          u10360 14B0  
                                        u10520 0C6C                                          u10370 14DE  
                                        u11090 3A44                        __size_of_HMI_LeftSwitch 0018  
                                        u11404 67C6                                          u11260 2F1A  
                                        u10460 097C                                ___awdiv@divisor 00B7  
                                        u11405 67C0                                          u10550 0CD6  
                                        u10470 0B90                                          u11095 3A38  
                                        u10560 0CFC                                          u10640 2800  
                                        u11440 3914                                          u11370 62DC  
                                        u11610 3254                                          u10475 0B84  
                                        u11550 299E                                          u11470 39A8  
                                        u10760 595E                                          u10825 1566  
                                        u10738 34F4                                          u12418 4752  
                                        u11650 3368                                          u11570 2A1C  
                                        u11490 39F6                                          u12419 4766  
                                        u10835 157E                                          u10940 459C  
                                        u15020 1AE4                                          u10845 1596  
                                        u12438 477E                                          u10950 45A8  
                                        u12439 4792                                          u10855 15B8  
                                        u10688 33B8                                          u11680 5576  
                                        u10689 33CC                                          u10865 1738  
                                        u12458 47AA                                          u11770 61FA  
                                        u12459 47BE                                          u10875 17B6  
                                        u11780 621C                                          u15060 1B98  
                                        u10885 17F8                                          u12478 47D6  
                                        u15150 3BB0                                          u12479 47EA  
                                        u10895 183A                                          u14508 65B6  
                                        u14620 029C                                          u14509 65CC  
                                        u14800 077E                                          u14810 0794  
                                        u14650 0316                                          u14651 0314  
                                        u14830 0816                                          u14670 03C4  
                                        u14760 06BA                                          u14790 0734  
                                        u14791 0732                                          _INDEX 0092  
                              __end_of___lwdiv 587A                                          _MASKS FD5B  
                              __end_of___lwmod 5F3A                                          i2l430 4D06  
                                        i2l432 4D2C                                          i2l433 4D56  
                                        i2l427 4D7C                                          i2l732 58C6  
                                        i2l733 58C0                                          i2l832 6526  
                                        i2l781 685C                                ___awdiv@counter 00B9  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CB                                __end_of_getMode 47FC  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03C0  
                                        _PortB 03B6                                          _PortC 00A0  
                                        _PortD 0096                                          _PortE 03AC  
                                        _PortF 03CA                                          _PortG 03A2  
                      __end_of_Port_SetPinType 2BFE                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C1                          ??_irobot_led_power_on 00C9  
                                        _angle 033C                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CA                                __end_of_dpowers FD5B  
                               ??_Byte_GetZone 00BA                      irobot_move@moveTurnRadius 00C7  
                                        _mode1 18F2                                          _mode2 3DFA  
                                        _mode3 6460                                          _mode4 3B0A  
                               Button_Poll@Pin 00D8                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 473C                               __end_of_MXK_Init 3234  
                     __size_of_sort_iRBumpDrop 008C                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 6C7C  
                             __end_of_SPI_Init 1178                               __end_of_SPI_Send 5B9C  
                        __end_ofi2_MXK_Release 6D56                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 5C08  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00B8  
                            __end_of_ADC_Start 568A                                 ??_Byte_SetPair 00C4  
                               ??_Byte_SetQuad 00C4                                          plusw2 000FDB  
                               ??_Byte_SetZone 00BB                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 5AC0                                _findClosestWall 0000  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 00B6                                 _LCD_Word_Write 6A2E  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 04B0  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00C5  
                                 ?_irobot_init 0001                                __initialization 4B96  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 00C5  
                          __end_of_Byte_GetBit 67AC                         irobot_leds@powerColour 00C6  
                                 __end_of_main 40BA                                   __end_of_init 4E3E  
             irobot_query_and_update@packetIDs 00CA                                   __end_of_itos 426A  
                         HMI_SetButton@reindex 00B7                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 5E76                               __end_of_InitList FD31  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6C6E  
                                    ??_ADC_Off 00B5                        __end_of_update_distance 6C4A  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 00BD  
                                       ??_main 04B2                                         ??_init 00F9  
                                       ??_itos 00C5                        _Console_MakeField$10974 00C3  
                                __activetblptr 000003                              Port_SetPin@pInput 00C4  
                            __end_of_LCD_Reset 6192                              Port_SetPin@pValue 00C7  
                                    ??_LED_Set 00CA                              _MXK_InitDIPSwitch 6A88  
                            GetPortPORT@pInput 00B7                         Port_CheckPairType@Pin1 00DF  
                       Port_CheckPairType@Pin2 00E0                              __end_of_LCD_Write 698E  
                                  _GetPortPORT 4F8A                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 4E3E                                ??_LCD_DrawField 00D1  
                   __end_of_PortProperty_Valid 5788                               __end_of_Port_Set 18F2  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 4414                            __end_of_Button_Poll 350C  
                            Word_GetPair@pPair 00C3                        LCD_FillRectangle@pPoint 00C0  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 5348  
                                    ??_SPI_DCS 00B7                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                             _angleToClosestWall 006D  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 6D3E                                  _HMI_SetNumber 68F4  
                       Port_SetQuadType@Output 00EF                                         _ANCON0 000FC1  
                             ___awdiv@dividend 00B5                                         ?_putch 0001  
                             ??_Console_Render 00D8                                  ToSegment@pCHR 00B5  
                             _Console_FormFeed 53D8                         Port_SetQuadType@pInput 00EB  
                                       i2l1630 3C70                                         i2l1631 3CBC  
                                       i2l1632 3CA8                                         i2l1730 6754  
                                       i2l1627 3CF8                                         i2l1732 6774  
                                       i2l1628 3CEE                                         i2l1629 3C86  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9944 6526  
                                       i2l9946 6536                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 6A4C  
                               _Timer0_Restart 6CDC                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F0                                         _TXREG1 000FAE  
                             __end_of___xxtofl 287C                                 i2_MXK_SwitchTo 6742  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 00B7  
                                   _Reset_High 6A6A                             Console_Render@temp 00DA  
                               ??_HMI_UpSwitch 00BB                              ?_correct_distance 0001  
                               OutSeg@pSegment 00B8                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00CC                         ADC_SetChannel@pChannel 00B6  
                             __end_of_delay_ms 5CDC                                   LED_Init@pLED 00E2  
                             __end_of_delay_us 60F2                                  ??_Timer0_Init 00C6  
                                ??_Timer2_Init 00C6                                  ??_Timer0_Stop 00B5  
                                   _Timer0_ISR 689C                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00CF                                 __CFG_XINST$OFF 000000  
                           ??_correct_distance 00F8                                         _TimerX 00F9  
                                       _OutSeg 568A                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 426A                     __end_of_load_iRScriptStack 5C72  
                                   _Motor_Move 66D2                                         _iRWall 0035  
                                ??_Motor_Speed 00D4                                     _Motor_Step 37CC  
                          rx_assign@byteNumber 00B7                        __end_of_Event_DIPSwitch 689C  
                                       ___wmul 670C                                ??_HMI_DIPSwitch 00BB  
                load_iRScriptStack@bytesToLoad 00C3                                      ??___fldiv 00BD  
                                    ??___awdiv 00B9                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 00CB  
                                       _lMotor 0083                                      ??___fltol 00F2  
                                    ??___lldiv 00BD                                         _lQueue 0063  
                                   _TestButton 0398                                      ??___lwdiv 00B9  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C0  
                     __end_of_Port_SetQuadType 207A                                         _corner 03FE  
                     i2Byte_GetZone@pChunkSize 0005                                         _dummy1 0069  
                             __end_of_safeToGo 6228                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 557C                              GetPortTRIS@pInput 00B7  
                           __size_of_Reset_Low 001E                                         clear_0 4BFE  
                                       clear_1 4C10                                         clear_2 4C1C  
                                       clear_3 4C28                                         clear_4 4C34  
                             ___awdiv@quotient 00BB                     irobot_stop_motion@isScript 00CE  
                                ?_eusart_getch 0001                                     Port_Init@i 00F8  
                                   _iRDistance 007D                              __end_of_MXK_Queue 6CC2  
                   __end_ofHMI_SetButton@F7213 FD68                                      ??_getMode 00D9  
                                   _iRBumpLeft 008C                                         _printf 287C  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 6AA6  
                                _ADC_Calibrate 6C24                                     _iRDropLeft 008A  
                               HMI_SetButton@v 00BC                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00B6                                    _Console_Tab 467A  
                          LCD_Word_Write@value 00BA                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00B8  
                     Port_CheckPortType@Output 00EE                                      ?_ADC_Init 00B9  
                           _twos_complement_of 641C                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC7E                    __end_ofTimer2_Init@PRESCALE FD6B  
                     Port_CheckPortType@pDrive 00ED                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00EB                                  ??_Port_SetPin 00C8  
                                    ??_reverse 00B9                                     _StepRotate 0073  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00DB  
                                       putch@c 00C9                              Motor_Speed@pMotor 00D0  
                               ?_HMI_SetNumber 00CB                                 i2_Word_GetPair 683E  
                      __end_of_Configure_GPIOs 5B30                            irobot_leds@isScript 00C8  
                      __end_of_findClosestWall 08B4                               ??_MXK_TestButton 00BB  
                       __end_of_Timer0_Restart 6CE8                                  Set_Rotation@m 00BA  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 00B5  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 6778                                   ___xxtofl@arg 00BF  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 00BE  
                                 ___xxtofl@val 00B5                          _update_bump_and_cliff 6698  
                              ?_LCD_Word_Write 00BA                                     __accesstop 0060  
                      __end_of__initialization 4C3A                                      ?_LCD_Fill 00BE  
        irobot_query_and_update@packetVariable 00CE                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00E7                                    _Byte_GetBit 6778  
                                   _Stepstomin 0071                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 6CF4                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00BD                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 00B5                                     ___fltol@f1 00EE  
                                  _Byte_SetBit 5E12                                  __end_of_MASKS FD64  
                               _PortA_Property FF57                                    ?_Event_NULL 0001  
                          correct_distance@_d1 0104                            correct_distance@_d2 0106  
                          correct_distance@_d3 0108                                      LCD_Fill@i 00C0  
                                    LCD_Fill@j 00C1                            load_iRScriptStack@i 00C4  
                                    LCD_Init@i 00EC                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF55                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 6D2A                                   __pidataBANK3 6C6E  
            irobot_move_straight@straightSpeed 00CE                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6AE2                                Console_Render@x 00DF  
                              Console_Render@y 00E0                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD31  
                         __end_of_Byte_GetZone 52B0                                  __end_of_mode1 1BA0  
                                __end_of_mode2 3EE8                                  __end_of_mode3 64A2  
                                __end_of_mode4 3C0A                           ??_twos_complement_of 00B7  
                            irobot_leds@LEDBit 00C5                                 _PortC_Property FF53  
                          __end_of_Timer0_Init 366C                                  __end_of_putch 6C8A  
                               ??_eusart_getch 00B5                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 37CC                            __end_of_Timer0_Stop 6D38  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E2  
                             ?_update_distance 0001                                      ?_SPI_Send 00B5  
                               ??_eusart_putch 00B5                                    _Button_Init 4340  
                            Port_SetType@pType 00F1                                    _Button_Poll 33A6  
                         __end_of_Byte_SetByte 6CB4                           __end_of_Byte_SetPair 69B0  
                               _HMI_LeftSwitch 6BE0                                 _PortD_Property FF51  
                         __end_of_Byte_SetQuad 69D2                                   ??_LED_Toggle 00CD  
                                 ??_HMI_GetBar 00B5                     eusart_putch@eusartSendChar 00B5  
                         __end_of_Byte_SetZone 4AE6                            __end_of_Motor_Speed 68F4  
                               _HMI_DownSwitch 6B98                                  SPI_Send@pData 00B7  
                        __end_of_MXK_DIPSwitch 6B80                                   ??_HMI_SetBar 00B5  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00BD  
                               _PortE_Property FF4F                                     ??_ADC_Init 00BC  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 686E  
                      irobot_rotate@angleTotal 00DB                                 _PortF_Property FF4D  
                      Port_CheckQuadType@Pair1 00E8                        Port_CheckQuadType@Pair2 00E9  
                     MXK_BlockSwitchTo@pModule 00BC                                        ??_mode1 04AA  
                                      ??_mode2 00F8                                        ??_mode3 00F9  
                                      ??_mode4 00F8                                        ?_ADC_On 0001  
                            _Console_Backspace 5F3A                                ?_Timer0_Restart 0001  
                                      ??_putch 00C9                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 64E4                              __end_of_ToSegment 1E24  
                               _PortG_Property FF4B                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 641C                             _irobot_stop_motion 634A  
                      Port_CheckQuadType@pQuad 00E6                                reverse@iterator 00BA  
                             ??_SPI_DisableISR 00B7                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 6A6A                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C0  
                                   ??_LCD_Init 00EA                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 467A                         __end_of_PortA_Property FF59  
             irobot_led_power_on@powerOnColour 00C9                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00B5                                     ??_LED_Init 00E2  
                     ADC_ClockDivision@pDivide 00B5                             Byte_SetByte@pValue 00B7  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 62BA                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F0                             ??_irobot_song_play 00B6  
                                   ??_HMI_Poll 00D9                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E2                         __end_of_PortB_Property FF57  
                                ?_Timer0_Start 00B5                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2F2E                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00DD                             __end_of_LED_Toggle 634A  
                           __end_of_HMI_GetBar 6D4A                       LCD_FillRectangle@pColour 00BE  
                                   _angleTotal 0077                            ??_Console_Backspace 00B7  
                            Set_Addr_Window@xe 00BB                              Set_Addr_Window@ye 00BC  
                            Set_Addr_Window@xs 00BD                              Set_Addr_Window@ys 00BA  
                  ??_measureAndDisplayDistance 00F8                                        ?_OutSeg 00B8  
                                  ?_Motor_Init 00E2                             Byte_SetPair@pInput 00C0  
                                  ?_Motor_Move 00B8                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C3                             __end_of_HMI_SetBar 6D12  
                       __end_of_PortC_Property FF55                             Word_GetPair@pInput 00C1  
                           __end_of_HMI_Render 65A2                                 ??_Set_Rotation 00BA  
                                    ?_Port_Set 00C4                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 00B5                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BA                                   ??_ISR_Enable 00B5  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 6BF8  
                       __end_of_PortD_Property FF53                                        _ADC_AN0 00B0  
                                      _ADC_AN1 03E5                                        _ADC_AN2 03E0  
                                      _ADC_AN3 03DB                                     ??_MXK_Init 00F9  
                            Port_GetPin@pInput 00B5                              _Console_MakeField 44E6  
                                      _ADC_Off 6D22                              ??_Console_NewLine 00B5  
                     ADC_ClockDivision@unfound 00B7                         __end_of_HMI_DownSwitch 6BB0  
                                   ??_SPI_Init 00E8                         Event_TestButton@pState 00CE  
                                   ??_SPI_Send 00B8                                        ?_printf 00CA  
                            ??_HMI_InitButtons 00B5                     __size_of_MXK_InitDIPSwitch 001E  
                     __size_of_move_and_rotate 00D2                         __end_of_PortE_Property FF51  
                          Console_Render@F6956 03F2                             ?_Console_MakeField 00BA  
                                      _COUNTER 0029                                ??_HMI_SetButton 00B5  
                         __end_of_HMI_UpSwitch 6BC8                           ??_irobot_stop_motion 00CE  
                                      _LED_Set 60F2                        _Console_IncrementCursor 5DAC  
                                    ?___xxtofl 00B5                         __end_of_PortF_Property FF4F  
                                  _gBackcolour 0087                                ??_HMI_SetNumber 00CD  
                                    _I2C1_Done 0337                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 0334                                      _I2C1_More 0331  
                                    _I2C2_More 032E                                      ?_delay_ms 00B5  
                    __end_of_Console_Backspace 5F96                                      ?_delay_us 00B5  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 6AC4  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 00B5                         __end_of_PortG_Property FF4D  
                          ??_Console_MakeField 00BC                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 006F                                        _SPI_DCS 67DE  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 00B5  
                             ?_Configure_GPIOs 0001                               ?_findClosestWall 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 010C                               ADC_Init@pChannel 00BB  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00E0  
                           __end_of_ISR_Enable 6D08                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 00B5  
                            Event_TestButton@j 008E                                      ?_safeToGo 0001  
                                   ??_Mode_Set 00B5                                 ??_Timer2_Clear 00B5  
                                      _Font5x7 FD6B                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 00B6                                        _MinDist 00FB  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 00B8  
                         SPI_DisableISR@pInput 00B5                                  ?_Port_GetQuad 00B5  
                              Byte_SetBit@pBit 00B7                           Port_TogglePin@pInput 00C9  
                        __end_ofi2_Byte_SetBit 61DE                                      _ADC_Start 5606  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00B7  
                                  _Timer0_Init 350C                                    _Timer2_Init 366C  
                                      __Lparam 0000                                    _Timer0_Stop 6D32  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FD51                                        _iRAngle 007B  
                                LCD_Write@mode 00B8                                __size_of_OutSeg 0082  
                                   ??_Port_Set 00C7                                        _iRValue 033A  
                    __end_of_Console_MakeField 45B6                              _Console_PrintChar 2BFE  
                                  _Motor_Speed 68CA                                        _Stepper 00AA  
                                ?_Port_SetType 00EF                                        _gCursor 0047  
                                      ___fldiv 1178                                        ___awdiv 47FC  
                        ??_Console_ClearCursor 00B5                                        ___flmul 08B4  
                                      ___fltol 39FE                                        _lBuffer 04B4  
                                      ___lldiv 48BA                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00B5                                        ___lwdiv 5802  
                                      ___lwmod 5ED8                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 5466                             ?_Console_PrintChar 0001  
                                      __pcinit 4B96                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 473C  
                                      __ptext0 3FD4                                        __ptext1 3B0A  
                                      __ptext2 0000                                        __ptext3 3EE8  
                                      __ptext4 6460                                        __ptext5 4414  
                                      __ptext6 38F2                                        __ptext7 3DFA  
                                      __ptext8 6B50                                        __ptext9 18F2  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6AFE                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD51                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00C9                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00CE                                     ??___xxtofl 00B9  
                                 ?_GetPortPORT 00B5                                   ?_GetPortTRIS 00B5  
                          ??_Console_PrintChar 00C5                                    _Port_GetPin 63D6  
                    _measureAndDisplayDistance 5176                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03EE                            LCD_DrawRectangle@p4 03EA  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00B7  
                                   ??_delay_us 00B7                                        _reverse 5B9C  
                                    _DIPSwitch 038E                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 45B6                                    _iRBumpRight 008D  
                               LCD_DrawField@i 00D7                                      _LCD_Reset 6142  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 696C  
                                  _iRDropRight 008B                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00B5                           end_of_initialization 4C3A  
                          ADC_SetupIO@pChannel 00B7                              ??_get_packet_size 00B5  
irobot_query_and_update@numberOfPacketRequests 00CD                                     delay_us@us 00B5  
                            ??_HMI_SetSegments 00B8                        Console_PrintChar@pInput 00C8  
                                 _Console_Init 54F2                           __end_of_eusart_getch 6D1A  
                      _irobot_query_and_update 2F2E                                     ??_safeToGo 00D9  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 5D46  
                         __end_of_eusart_putch 6CA6                                        itos@Out 00C9  
                               ??_Port_GetQuad 00B8                             _PortProperty_Valid 570C  
                           Byte_SetQuad@pInput 00C0                             SPI_MinSpeed@pInput 00C4  
                           Byte_SetQuad@pValue 00C3                            __end_of_ADC_SetupIO 67DE  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                                    i2u1489_48 68B4                                ___lldiv@divisor 00B9  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 00B7  
                            ??_HMI_RightSwitch 00BB                                ___lldiv@counter 00C1  
                    __end_of_Console_PrintChar 2D9C                            __end_of_ADC_Voltage 4192  
                               ??_Port_SetType 00F2                     __end_of_Port_CheckQuadType 5FF0  
                                      printf@c 00DB                                        printf@f 00CA  
                               Port_Init@pPort 00F7                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00BE  
                            __end_of_rx_assign 3DFA                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00C4  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 62BA  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 6564  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 38F2  
                        Timer0_Init@pFrequency 00C2                              ?_Port_SetQuadType 00EB  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 00B9  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                    __size_of_correct_distance 00EC                             ??_Port_SetQuadType 00EF  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BB  
                        Console_Render@lCursor 00DB                             _load_iRScriptStack 5C08  
                                    _MXK_Queue 6CB4                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00BD                               Byte_GetZone@pMax 00B7  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C1                                _Set_Addr_Window 4C44  
                               SPI_Init@pClock 00E2                               ??_LCD_Word_Write 00BC  
                              _sort_iRBumpDrop 5466                              ??_move_and_rotate 00F8  
                                  ___fldiv@grs 00C8                                    ___fldiv@rem 00C2  
                        __end_of_LCD_DrawField 50D4                                 Port_Set@pInput 00C4  
                               SPI_Init@pInput 00E8                           ??_PortProperty_Valid 00C8  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00C6  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 5348  
                                   ?_LCD_Write 00B8                                   _Byte_GetPair 6AC4  
                           HMI_SetButton@F7213 FD64                            ?_load_iRScriptStack 00B5  
                                 _Byte_GetZone 5214                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00D5                              LCD_DrawField@ymax 00D6  
                               __end_of_ADC_On 6D44                                 _Port_TogglePin 680E  
                             _Event_TestButton 665C                                    ___flmul@grs 00D1  
                         Port_SetPinType@Props 00E0                                   ?_Byte_GetBit 00B5  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6CA6  
                                 _Byte_SetPair 698E                                ADC_SetupIO@MASK 00B8  
                                 _Byte_SetQuad 69B0                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4A30                           Port_SetPinType@pType 00DE  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B5  
                                ?_SPI_MaxSpeed 00C4                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00B5                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C4  
                        __end_ofi2_Timer0_Stop 6D50                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D2  
                               __end_of_OutSeg 570C                           ??_load_iRScriptStack 00BF  
                 __end_of_irobot_move_straight 6B68                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 6742                          __end_of_HMI_DIPSwitch 6B98  
                                __pidataCOMRAM 6CF4                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D0                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 6CDC                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6D22                                 __end_of_printf 2A3E  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00B5  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C1  
                             ??_Timer0_Restart 00B5                           __end_of_Timer0_Start 696C  
                           Port_SetType@Output 00F4                            start_initialization 4B96  
                                   ?_MXK_Queue 00B5                       PortProperty_Valid@Errors 00CA  
                             ??i2_MXK_SwitchTo 0007                             _correctOrientation 0089  
                            _LCD_FillRectangle 58F0                             Port_SetType@pInput 00EF  
                               _ADC_SetChannel 6B1A                                     HMI_Init@in 00F0  
                          HMI_SetNumber@pInput 00CB                          __end_ofi2_Port_SetPin 4D98  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 00B6  
                       __end_of_Port_TogglePin 683E                                  ?_Word_SetPair 00C4  
                            Byte_SetBit@pInput 00B5                                       ??_ADC_On 00B5  
                               ??_MXK_SwitchTo 00BB                              Byte_SetBit@pValue 00B8  
                           ?_LCD_FillRectangle 00BE                      ??_irobot_query_and_update 00C5  
                          _Console_ResetCursor 69F2                    PortProperty_Valid@pPinDrive 00C6  
                                  _ADC_SetupIO 67AC                           MXK_BlockSwitchTo@CUR 00BB  
                     PortProperty_Valid@pInput 00C4                                  i2_MXK_Release 6D50  
                                  _ADC_Voltage 40BA                         LCD_FillRectangle@pSize 00C4  
                               SPI_Send@pInput 00B5                                   ??_Reset_High 00C9  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00C6  
                        Port_SetQuadType@pQuad 00ED                                      _ToSegment 1BA0  
                          ??_LCD_FillRectangle 00C8                          Port_SetQuadType@pType 00EE  
                              _Console_NewLine 50D4                                 ??_SPI_MinSpeed 00C6  
                                  ??_ADC_Start 00B9                                   _HMI_UpSwitch 6BB0  
                                    _Reset_Low 6A4C                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 6D38                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D2  
                               ADC_Init@pInput 00B9                                      _gCharSize 03FA  
                             Timer2_Init@INDEX 0090                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 00E6  
                                     ??_OutSeg 00B9                                      OutSeg@out 00BC  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 00BC  
                                 ??_Motor_Step 00C9                                      _iRAngleSS 031E  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 00BE                                       ??___wmul 00B9  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2D9C  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03F2  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00B8  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00B5                             Byte_SetZone@pValue 00BA  
                                Mode_Set@pMode 00B5                                       ??_printf 00D4  
                      __end_of_Set_Addr_Window 4CEE                       Port_CheckQuadType@Output 00EA  
                      __end_of_sort_iRBumpDrop 54F2                                      _gLineSize 03F6  
                     Port_CheckQuadType@pDrive 00E7                                 ??_Word_GetPair 00C4  
                     Port_CheckQuadType@pInput 00E4                           __end_of_Port_GetQuad 6272  
                                    ___fldiv@a 00B9                                      ___fldiv@b 00B5  
                    __end_of_LCD_FillRectangle 5964                                    __pbssBIGRAM 04B4  
                       __end_of_ADC_SetChannel 6B36                                       ?_LED_Set 00C9  
                                    ___flmul@a 00C7                                      ___flmul@b 00C3  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 00B7  
                           __end_of_Reset_High 6A88                                  __pcstackBANK0 00B5  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK4 04AA                        ??_update_bump_and_cliff 00D2  
                                   itos@Length 00C7                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 00C8                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 68CA  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 00CE  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 22A4  
                                     ?_SPI_DCS 00B5                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 00C9                                  ??_eusart_init 00B5  
                                  ??_LCD_Write 00B9                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 4340  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 670C  
                           __end_of_Motor_Step 38F2                          Timer2_Init@pFrequency 00C2  
                               ?i2_MXK_Release 0001             __size_of_measureAndDisplayDistance 009E  
                     Port_CheckPairType@Output 00E1              twos_complement_of@complementValue 00B5  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00DE  
                     Port_CheckPairType@pInput 00DB                                 reverse@tempVar 00B9  
                           _MXK_InitTestButton 6AA6                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C2  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C2  
                             ??_HMI_LeftSwitch 00BB                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00B5                                  ??_irobot_leds 00C8  
                                ??_irobot_init 00B6                                ??_irobot_rotate 00D6  
                                ??_irobot_move 00C9                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C2  
                             ??_HMI_DownSwitch 00BB                                      __pintcode 1408  
                                __pmediumconst FC7E                                   ?_Motor_Speed 00D0  
                        ??_Console_ResetCursor 00B5                                       ?___fldiv 00B5  
                                     ?___awdiv 00B5                                      __ptext100 366C  
                                    __ptext101 48BA                                      __ptext110 1E24  
                                    __ptext102 6D1A                                      __ptext111 6390  
                                    __ptext103 691E                                      __ptext120 5788  
                                    __ptext112 698E                                      __ptext104 67DE  
                                    __ptext121 67AC                                      __ptext113 5F96  
                                    __ptext105 4340                                      __ptext130 33A6  
                                    __ptext122 6B1A                                      __ptext114 5CDC  
                                    __ptext106 6A88                                      __ptext131 6B68  
                                    __ptext123 62BA                                      __ptext115 570C  
                                    __ptext107 6D38                                      __ptext140 1404  
                                    __ptext132 6B80                                      __ptext124 557C  
                                    __ptext116 69B0                                      __ptext108 6AA6  
                                    __ptext141 665C                                      __ptext133 6B98  
                                    __ptext125 6C24                                      __ptext117 4A30  
                                    __ptext109 2A3E                                      __ptext150 6302  
                                    __ptext142 68F4                                      __ptext134 6BB0  
                                    __ptext126 6D3E                                      __ptext118 54F2  
                                    __ptext151 680E                                      __ptext143 4192  
                                    __ptext135 6BC8                                      __ptext127 6D22  
                                    __ptext119 5606                                      __ptext152 45B6  
                                    __ptext144 5B9C                                      __ptext136 6BE0  
                                    __ptext128 473C                                      __ptext161 689C  
                                    __ptext153 661E                                      __ptext145 5ED8  
                                    __ptext137 6BF8                                      __ptext129 5A4C  
                                    __ptext170 6742                                      __ptext162 3C0A  
                                    __ptext154 6AC4                                      __ptext146 5802  
                                    __ptext138 6228                                      __ptext171 6524  
                                    __ptext163 6D4A                                      __ptext155 5214  
                                    __ptext147 4976                                      __ptext139 686E  
              __end_of_irobot_query_and_update 30B4                                      __ptext172 6D50  
                                    __ptext164 6CE8                                      __ptext156 5E12  
                                    __ptext148 1BA0                                      __ptext173 6CC2  
                                    __ptext165 4CEE                                      __ptext157 63D6  
                                    __ptext149 5348                                      __ptext174 0000  
                                    __ptext166 683E                                      __ptext158 6D08  
                                    _pShiftVal 007F                                      __ptext167 6B36  
                                    __ptext159 6D44                                      __ptext168 587A  
                                    __ptext169 6192                                       ?___flmul 00C3  
                                     ?___fltol 00EE                                       ?___lldiv 00B5  
                                   ?_Port_Init 00F5                           Timer0_Init@pCPUClock 00C8  
                                     ?___lwdiv 00B5                                       ?___lwmod 00BC  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 4EE4                                       ?_getMode 0001  
                                 _eusart_getch 6D12                               _correct_distance 3EE8  
                  __end_ofTimer0_Init@PRESCALE FD41                                _get_packet_size 5D46  
                                 _eusart_putch 6C98                             ??_Console_FormFeed 00B5  
                              _HMI_SetSegments 4976                             ?_GetPortProperties 00B5  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                ?_ADC_SetChannel 0001  
                                ??i2_MXK_Queue 0004                                    ??_MXK_Queue 00B8  
                  __size_of_irobot_stop_motion 0046                                   ?_Port_GetPin 00B5  
                                     _ADC_Init 5788                   irobot_rotate@rotateDirection 00D9  
                        __end_of_HMI_SetButton 53D8                           __size_of_Console_Tab 00C2  
                                     ?_reverse 00B5                           irobot_move@moveSpeed 00C5  
                                 ?_Port_SetPin 00C4                          __end_of_HMI_SetNumber 691E  
                             ___lwdiv@quotient 00BA                                _HMI_RightSwitch 6BC8  
                  __size_of_ADC_ConversionTime 0048                                 __size_of_mode1 02AE  
                               __size_of_mode2 00EE                                 __size_of_mode3 0042  
                               __size_of_mode4 0100                            ??_GetPortProperties 00B7  
                      __end_of_Console_NewLine 5176                           ??_MXK_InitTestButton 00E2  
                           Byte_GetPair@pInput 00BE                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 6D3E                              i2Port_SetPin@Type 0014  
                         _irobot_move_straight 6B50                              i2Port_SetPin@pPin 0012  
                               i2_Byte_GetPair 6B36                                       _LCD_Fill 6048  
                                     _LCD_Init 3234                                 ___wmul@product 00B9  
                                     _HMIBoard 033E                                 i2_Byte_GetZone 587A  
                                     _LED_Init 5E76                                      delay_ms@u 00B7  
                           Button_Poll@pButton 00D0                                      delay_us@u 00B7  
                                     _HMI_Init 24B4                                       _HMI_Poll 5A4C  
                           MXK_Queue@pCallback 00B5                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 6A2E                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 6524              __end_of_measureAndDisplayDistance 5214  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 08B4  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C2  
                                     _PIR1bits 000F9E                                       i2u532_40 589C  
                                     i2u532_47 5892                                       _PIR3bits 000FA4  
                                     i2u534_40 58E4                                       i2u534_45 58E0  
                                     i2u671_40 6552                                       i2u667_44 61A6  
                                     i2u667_45 61A2                                       i2u780_40 3C9A  
                                     i2u668_44 61CC                                       i2u668_45 61C8  
                         __size_of_Byte_SetBit 0064                                       i2u778_40 3C4E  
                                     i2u779_40 3C62                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                                    _mode1$15618 04AC  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00B6  
                             HMI_SetBar@pValue 00B5                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00DF                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4F8A  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 52B0  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 64E4  
                           _Port_CheckPairType 5CDC                                       _MXK_Init 30B4  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 4414  
                              MXK_SwitchTo@CUR 00BB                          __end_of_ADC_Calibrate 6C38  
                          __end_of_irobot_leds 6048                                       _SPI_Init 0D5A  
                          __end_of_irobot_init 6C98                       __end_of_Event_TestButton 6698  
                                     _SPI_Send 5B30                            __end_of_irobot_move 4B96  
                                    _rx_assign 3D0A                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BA                              ___wmul@multiplier 00B5  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00B9  
                                   printf@flag 00D6                           Timer2_Init@pCPUClock 00CB  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 59D8                                     printf@prec 00D5  
                        Motor_Speed@pFrequency 00D2                              Byte_GetBit@pInput 00B5  
                          Port_SetPinType@pPin 00DD                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 6B68                             _Port_CheckQuadType 5F96  
                          ?_Port_CheckPairType 00DB                           __end_of_SPI_MinSpeed 5A4C  
                                ??_MXK_Dequeue 00CB                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 6272  
                         __end_of_update_angle 6C5C                          Button_Poll@pIncrement 00D2  
                      PortProperty_Valid@F6830 FD41                           __end_ofi2_Motor_Step 3D0A  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 4BAA                                      copy_data1 4BCA  
                                    copy_data2 4BEA                                  ??_MXK_Release 00B5  
                       __end_ofi2_Byte_GetPair 6B50                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E4  
                        ?_irobot_move_straight 00CE                         __end_ofi2_Byte_GetZone 58F0  
                          __end_ofi2_MXK_Queue 6CD0                _measureAndDisplayDistance$15617 0100  
                          ?_Port_CheckPortType 00EB                                itos@destination 00C3  
                                     _InitList FC7F                     __end_of_irobot_init_song_0 69F2  
                         _Motor_Step$intlevel0 37D2                                       _Mode_Set 6C5C  
                           Port_GetQuad@Output 00BA                              ??_update_distance 00D2  
                                  ??_ToSegment 00B5                                   _ISR_Function 1408  
                                 _Timer0_Clear 6CD0                             Port_GetQuad@pInput 00B5  
                                 _Timer2_Clear 6D1A                           __end_of_Word_GetPair 665C  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00DF  
                                  ??_Reset_Low 00C9                                       __Hrparam 0000  
                                 _Timer0_Start 6946                                   OutSeg@pInput 00BB  
                               _Console_Render 22A4                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00C7                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00B9  
                                     _Port_Set 1538                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 63D6  
                      __end_of_get_packet_size 5DAC                                    ??_Port_Init 0100  
                      __end_of_HMI_SetSegments 4A30                           ??_Port_CheckQuadType 00E8  
                             __size_of___fldiv 03C0                               _irobot_song_play 6C10  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 65E0  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00EE  
                             __size_of___lwmod 0062                                       _lBufferX 0094  
                                     _lBufferY 0093                            Timer2_Init@PRESCALE FD68  
                        _findClosestWall$15616 04AC                                     ?_rx_assign 00B6  
                              LCD_Fill@pColour 00BE                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0085  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 6BE0  
                       Byte_GetZone@pChunkSize 00B9                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00B9                          __size_of_Port_SetType 022A  
                                reverse@length 00B7                                      itos@input 00C1  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 26AE  
                          irobot_move@isScript 00CD                             Motor_Init@pAddress 00E4  
                                     _delay_ms 5C72                                       _delay_us 60A0  
                                     _clearall 0095                                ___lwdiv@divisor 00B7  
                              ___lwdiv@counter 00B9                                Port_GetPin@pPin 00B7  
                                     __ptext10 61DE                                       __ptext11 6C38  
                                     __ptext20 4AE6                                       __ptext12 6698  
                                     __ptext21 641C                                       __ptext13 6C4A  
                                     __ptext30 53D8                                       __ptext22 6C10  
                                     __ptext14 2F2E                                       __ptext31 69F2  
                                     __ptext23 287C                                       __ptext15 3D0A  
                                     __ptext40 08B4                                       __ptext32 5F3A  
                                     __ptext24 6C7C                                       __ptext16 5466  
                                     __ptext41 1178                                       __ptext33 64E4  
                                     __ptext25 2BFE                                       __ptext17 5D46  
                                     __ptext50 6778                                       __ptext42 68CA  
                                     __ptext34 5176                                       __ptext26 467A  
                                     __ptext18 6D12                                       __ptext51 4D98  
                                     __ptext43 66D2                                       __ptext35 39FE  
                                     __ptext27 47FC                                       __ptext19 634A  
                                     __ptext60 350C                                       __ptext52 6AE2  
                                     __ptext44 6946                                       __ptext36 6564  
                                     __ptext28 5DAC                                       __ptext61 6CD0  
                                     __ptext53 5FF0                                       __ptext45 22A4  
                                     __ptext37 568A                                       __ptext29 50D4  
                                     __ptext70 4F8A                                       __ptext62 30B4  
                                     __ptext54 5C08                                       __ptext46 58F0  
                                     __ptext38 40BA                                       __ptext71 5E76  
                                     __ptext63 2D9C                                       __ptext55 69D2  
                                     __ptext47 5030                                       __ptext39 26AE  
                          ??_MXK_BlockSwitchTo 00BB                                       __ptext80 65E0  
                                     __ptext72 60F2                                       __ptext64 207A  
                                     __ptext56 6C8A                                       __ptext48 670C  
                                     __ptext81 60A0                                       __ptext73 65A2  
                                     __ptext65 6272                                       __ptext57 6C98  
                                     __ptext49 44E6                                       __ptext90 5AC0  
                                     __ptext82 3234                                       __ptext74 37CC  
                                     __ptext66 1538                                       __ptext58 6A10  
                                     __ptext91 5964                                       __ptext83 52B0  
                                     __ptext75 6D32                                       __ptext67 6CA6  
                                     __ptext59 426A                                       __ptext92 6142  
                                     __ptext84 6048                                       __ptext76 6CDC  
                                     __ptext68 4E3E                                       __ptext93 5C72  
                                     __ptext85 4C44                                       __ptext77 64A2  
                                     __ptext69 4EE4                                       __ptext94 6A4C  
                                     __ptext86 6A2E                                       __ptext78 6AFE  
                                     __ptext95 6A6A                                       __ptext87 696C  
                                     __ptext79 6CB4                                       __ptext96 6CFE  
                                     __ptext88 5B30                                       __ptext97 24B4  
                                     __ptext89 6C5C                                       __ptext98 59D8  
                                     __ptext99 0D5A                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 557C                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 6A10                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00CE  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00DC                            __end_of_MXK_Dequeue 65E0  
                            HMI_SetSegments@in 00B9                          Button_Init@pThreshold 0102  
                                     _safeToGo 61DE                                  __size_of_main 00E6  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C0                         __end_of_Console_Render 24B4  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 6228                            __end_of_MXK_Release 6B1A  
                               _MXK_TestButton 6BF8                                  i2_Byte_SetBit 6192  
                      __end_of_move_and_rotate 44E6                            ??_ADC_ClockDivision 00B5  
                                 _iRDistanceSS 0322                                    _irobot_leds 5FF0  
                                  _irobot_init 6C8A                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 4AE6                                 ADC_Voltage@max 00E2  
                               ADC_Voltage@ref 00E6                      __end_of_MXK_BlockSwitchTo 661E  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 207A  
                                 Port_Set@Type 00DB                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EA  
                            ??_findClosestWall 04AA                                      printf@val 00D9  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 0091  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 6302  
                                   _HMI_GetBar 6D44                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DA                               ??_Port_TogglePin 00CC  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00C7                                     _HMI_SetBar 6D08  
                                   _HMI_Render 6564                               Byte_SetZone@MASK 00BF  
                                  i2_MXK_Queue 6CC2                      __end_of_ADC_ClockDivision 5606  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008F  
                             Byte_SetZone@pMax 00B7                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D0  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00C5                  __end_of_update_bump_and_cliff 66D2  
                           LCD_FillRectangle@i 00CA                             LCD_FillRectangle@j 00CB  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00B5                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00BC                               ___lldiv@dividend 00B5  
                     __end_of_correct_distance 3FD4                         __end_of_MXK_TestButton 6C10  
                              ?_Console_Render 0001                                  _iRScriptIndex 0037  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D1                       irobot_query_and_update@j 00CF  
                               _SPI_DisableISR 691E                     __end_of_twos_complement_of 6460  
                     irobot_rotate@rotateAngle 00D2                                Port_Init@pInput 00F5  
                                     printf@ap 00D7                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 00D4  
                                   _ISR_Enable 6CFE                               ?_HMI_SetSegments 00B6  
                      Console_MakeField@Column 00C1                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 00B5                                  SPI_DCS@pInput 00B5  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00BB  
                                  ??_rx_assign 00B8                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                              ADC_Voltage@pInput 00DC  
                      Console_MakeField@pInput 00C0                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00BD                                  ??_GetPortPORT 00B7  
                              ___lwmod@divisor 00BE                                  ??_GetPortTRIS 00B7  
                        Timer0_Start@pFunction 00B5                             Word_SetPair@pInput 00C4  
                              ___lwmod@counter 00C0                             Word_SetPair@pValue 00C7  
                     ?_irobot_query_and_update 00BB                               Motor_Init@pMotor 00E2  
                                  _MXK_Dequeue 65A2                              ADC_Voltage@output 00EA  
                                _distanceTotal 0079                                 LED_Toggle@pLED 00CD  
                                _LCD_DrawField 5030                               _Port_SetQuadType 1E24  
                                  _MXK_Release 6AFE                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 64A2                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D0                             Byte_GetZone@Offset 00BC  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00C6  
                              _Port_SetPinType 2A3E                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00BD                             Byte_GetZone@pChunk 00B8  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 6A10  
                           Byte_GetZone@pInput 00B5                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 5E12                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 6946                                   _SPI_MaxSpeed 5964  
            irobot_query_and_update@streamSize 00CC                                   _SPI_MinSpeed 59D8  
                           Port_Set@TypeActual 00D9                               ?_move_and_rotate 0001  
