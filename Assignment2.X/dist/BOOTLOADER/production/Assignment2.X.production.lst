

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 16 22:26:35 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	text86,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1
   124                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text101,global,reloc=2,class=CODE,delta=1
   126                           	psect	text102,global,reloc=2,class=CODE,delta=1
   127                           	psect	text103,global,reloc=2,class=CODE,delta=1
   128                           	psect	text104,global,reloc=2,class=CODE,delta=1
   129                           	psect	text105,global,reloc=2,class=CODE,delta=1
   130                           	psect	text106,global,reloc=2,class=CODE,delta=1
   131                           	psect	text107,global,reloc=2,class=CODE,delta=1
   132                           	psect	text108,global,reloc=2,class=CODE,delta=1
   133                           	psect	text109,global,reloc=2,class=CODE,delta=1
   134                           	psect	text110,global,reloc=2,class=CODE,delta=1
   135                           	psect	text111,global,reloc=2,class=CODE,delta=1
   136                           	psect	text112,global,reloc=2,class=CODE,delta=1
   137                           	psect	text113,global,reloc=2,class=CODE,delta=1
   138                           	psect	text114,global,reloc=2,class=CODE,delta=1
   139                           	psect	text115,global,reloc=2,class=CODE,delta=1
   140                           	psect	text116,global,reloc=2,class=CODE,delta=1,inline
   141                           	psect	text117,global,reloc=2,class=CODE,delta=1
   142                           	psect	text118,global,reloc=2,class=CODE,delta=1
   143                           	psect	text119,global,reloc=2,class=CODE,delta=1
   144                           	psect	text120,global,reloc=2,class=CODE,delta=1
   145                           	psect	text121,global,reloc=2,class=CODE,delta=1
   146                           	psect	text122,global,reloc=2,class=CODE,delta=1
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	text124,global,reloc=2,class=CODE,delta=1
   149                           	psect	text125,global,reloc=2,class=CODE,delta=1
   150                           	psect	text126,global,reloc=2,class=CODE,delta=1
   151                           	psect	text127,global,reloc=2,class=CODE,delta=1
   152                           	psect	text128,global,reloc=2,class=CODE,delta=1
   153                           	psect	text129,global,reloc=2,class=CODE,delta=1
   154                           	psect	text130,global,reloc=2,class=CODE,delta=1
   155                           	psect	text131,global,reloc=2,class=CODE,delta=1
   156                           	psect	text132,global,reloc=2,class=CODE,delta=1
   157                           	psect	text133,global,reloc=2,class=CODE,delta=1
   158                           	psect	text134,global,reloc=2,class=CODE,delta=1
   159                           	psect	text135,global,reloc=2,class=CODE,delta=1
   160                           	psect	text136,global,reloc=2,class=CODE,delta=1
   161                           	psect	text137,global,reloc=2,class=CODE,delta=1
   162                           	psect	text138,global,reloc=2,class=CODE,delta=1
   163                           	psect	text139,global,reloc=2,class=CODE,delta=1
   164                           	psect	text140,global,reloc=2,class=CODE,delta=1
   165                           	psect	text141,global,reloc=2,class=CODE,delta=1
   166                           	psect	text142,global,reloc=2,class=CODE,delta=1
   167                           	psect	text143,global,reloc=2,class=CODE,delta=1
   168                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   169                           	psect	text145,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text146,global,reloc=2,class=CODE,delta=1
   171                           	psect	text147,global,reloc=2,class=CODE,delta=1
   172                           	psect	text148,global,reloc=2,class=CODE,delta=1
   173                           	psect	text149,global,reloc=2,class=CODE,delta=1
   174                           	psect	text150,global,reloc=2,class=CODE,delta=1
   175                           	psect	text151,global,reloc=2,class=CODE,delta=1
   176                           	psect	text152,global,reloc=2,class=CODE,delta=1
   177                           	psect	text153,global,reloc=2,class=CODE,delta=1
   178                           	psect	text154,global,reloc=2,class=CODE,delta=1,inline
   179                           	psect	text155,global,reloc=2,class=CODE,delta=1
   180                           	psect	text156,global,reloc=2,class=CODE,delta=1
   181                           	psect	text157,global,reloc=2,class=CODE,delta=1
   182                           	psect	text158,global,reloc=2,class=CODE,delta=1
   183                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   184                           	psect	text160,global,reloc=2,class=CODE,delta=1
   185                           	psect	text161,global,reloc=2,class=CODE,delta=1
   186                           	psect	text162,global,reloc=2,class=CODE,delta=1
   187                           	psect	text163,global,reloc=2,class=CODE,delta=1
   188                           	psect	text164,global,reloc=2,class=CODE,delta=1
   189                           	psect	text165,global,reloc=2,class=CODE,delta=1
   190                           	psect	text166,global,reloc=2,class=CODE,delta=1
   191                           	psect	text167,global,reloc=2,class=CODE,delta=1,inline
   192                           	psect	text168,global,reloc=2,class=CODE,delta=1
   193                           	psect	text169,global,reloc=2,class=CODE,delta=1
   194                           	psect	text170,global,reloc=2,class=CODE,delta=1
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   198                           	psect	text173,global,reloc=2,class=CODE,delta=1
   199                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   200                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   201  0000                     
   202                           ; Version 1.43
   203                           ; Generated 25/07/2017 GMT
   204                           ; 
   205                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   206                           ; All rights reserved.
   207                           ; 
   208                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   209                           ; 
   210                           ; Redistribution and use in source and binary forms, with or without modification, are
   211                           ; permitted provided that the following conditions are met:
   212                           ; 
   213                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   214                           ;        conditions and the following disclaimer.
   215                           ; 
   216                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   217                           ;        of conditions and the following disclaimer in the documentation and/or other
   218                           ;        materials provided with the distribution.
   219                           ; 
   220                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   221                           ;        software without specific prior written permission.
   222                           ; 
   223                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   224                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   225                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   226                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   227                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   228                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   229                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   230                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   231                           ; 
   232                           ; 
   233                           ; Code-generator required, PIC18F67J50 Definitions
   234                           ; 
   235                           ; SFR Addresses
   236  0000                     
   237                           	psect	idataCOMRAM
   238  01688C                     __pidataCOMRAM:
   239                           	opt stack 0
   240                           
   241                           ;initializer for _gCursor
   242  01688C  0006               	dw	6
   243  01688E  0006               	dw	6
   244                           
   245                           ;initializer for _Bus_State
   246  016890  01                 	db	1
   247                           
   248                           ;initializer for _A
   249  016891  41                 	db	65
   250                           
   251                           ;initializer for _a
   252  016892  61                 	db	97
   253                           
   254                           ;initializer for _zero
   255  016893  30                 	db	48
   256                           
   257                           ;initializer for _l
   258  016894  80                 	db	128
   259                           
   260                           ;initializer for _w
   261  016895  80                 	db	128
   262                           
   263                           	psect	idataBANK0
   264  0168C2                     __pidataBANK0:
   265                           	opt stack 0
   266                           
   267                           ;initializer for _TimerX
   268  0168C2  0008               	dw	8
   269                           
   270                           ;initializer for _MinDist
   271  0168C4  03E8               	dw	1000
   272                           
   273                           ;initializer for _gForecolour
   274  0168C6  FFFF               	dw	65535
   275                           
   276                           ;initializer for _change
   277  0168C8  01                 	db	1
   278                           
   279                           	psect	idataBANK3
   280  016806                     __pidataBANK3:
   281                           	opt stack 0
   282                           
   283                           ;initializer for Console_Render@F6956
   284  016806  0006               	dw	6
   285  016808  0006               	dw	6
   286                           
   287                           ;initializer for _gLineSize
   288  01680A  0080               	dw	128
   289  01680C  0007               	dw	7
   290                           
   291                           ;initializer for _gCharSize
   292  01680E  0005               	dw	5
   293  016810  0007               	dw	7
   294                           
   295                           ;initializer for _corner
   296  016812  0001               	dw	1
   297                           
   298                           	psect	mediumconst
   299  00FC32                     __pmediumconst:
   300                           	opt stack 0
   301  00FC32  00                 	db	0
   302  00FC33                     _InitList:
   303                           	opt stack 0
   304  00FC33  1100               	dw	4352
   305  00FC35  0080               	dw	128
   306  00FC37  012C               	dw	300
   307  00FC39  B100               	dw	45312
   308  00FC3B  0002               	dw	2
   309  00FC3D  0035               	dw	53
   310  00FC3F  0036               	dw	54
   311  00FC41  B200               	dw	45568
   312  00FC43  0002               	dw	2
   313  00FC45  0035               	dw	53
   314  00FC47  0036               	dw	54
   315  00FC49  B300               	dw	45824
   316  00FC4B  0002               	dw	2
   317  00FC4D  0035               	dw	53
   318  00FC4F  0036               	dw	54
   319  00FC51  0002               	dw	2
   320  00FC53  0035               	dw	53
   321  00FC55  0036               	dw	54
   322  00FC57  B400               	dw	46080
   323  00FC59  0000               	dw	0
   324  00FC5B  C000               	dw	49152
   325  00FC5D  00A2               	dw	162
   326  00FC5F  0002               	dw	2
   327  00FC61  0084               	dw	132
   328  00FC63  C100               	dw	49408
   329  00FC65  00C5               	dw	197
   330  00FC67  C200               	dw	49664
   331  00FC69  000D               	dw	13
   332  00FC6B  0000               	dw	0
   333  00FC6D  C300               	dw	49920
   334  00FC6F  008D               	dw	141
   335  00FC71  002A               	dw	42
   336  00FC73  C400               	dw	50176
   337  00FC75  008D               	dw	141
   338  00FC77  00EE               	dw	238
   339  00FC79  C500               	dw	50432
   340  00FC7B  000A               	dw	10
   341  00FC7D  3600               	dw	13824
   342  00FC7F  00C8               	dw	200
   343  00FC81  E000               	dw	57344
   344  00FC83  0012               	dw	18
   345  00FC85  001C               	dw	28
   346  00FC87  0010               	dw	16
   347  00FC89  0018               	dw	24
   348  00FC8B  0033               	dw	51
   349  00FC8D  002C               	dw	44
   350  00FC8F  0025               	dw	37
   351  00FC91  0028               	dw	40
   352  00FC93  0028               	dw	40
   353  00FC95  0027               	dw	39
   354  00FC97  002F               	dw	47
   355  00FC99  003C               	dw	60
   356  00FC9B  0000               	dw	0
   357  00FC9D  0003               	dw	3
   358  00FC9F  0003               	dw	3
   359  00FCA1  0010               	dw	16
   360  00FCA3  0080               	dw	128
   361  00FCA5  0078               	dw	120
   362  00FCA7  E100               	dw	57600
   363  00FCA9  0012               	dw	18
   364  00FCAB  001C               	dw	28
   365  00FCAD  0010               	dw	16
   366  00FCAF  0018               	dw	24
   367  00FCB1  002D               	dw	45
   368  00FCB3  0028               	dw	40
   369  00FCB5  0023               	dw	35
   370  00FCB7  0028               	dw	40
   371  00FCB9  0028               	dw	40
   372  00FCBB  0026               	dw	38
   373  00FCBD  002F               	dw	47
   374  00FCBF  003B               	dw	59
   375  00FCC1  0000               	dw	0
   376  00FCC3  0003               	dw	3
   377  00FCC5  0003               	dw	3
   378  00FCC7  0010               	dw	16
   379  00FCC9  3A00               	dw	14848
   380  00FCCB  0005               	dw	5
   381  00FCCD  2A00               	dw	10752
   382  00FCCF  0000               	dw	0
   383  00FCD1  0002               	dw	2
   384  00FCD3  0000               	dw	0
   385  00FCD5  0081               	dw	129
   386  00FCD7  2B00               	dw	11008
   387  00FCD9  0000               	dw	0
   388  00FCDB  0003               	dw	3
   389  00FCDD  0000               	dw	0
   390  00FCDF  00A2               	dw	162
   391  00FCE1  2900               	dw	10496
   392  00FCE3  2C00               	dw	11264
   393  00FCE5                     __end_of_InitList:
   394                           	opt stack 0
   395  00FCE5                     Timer0_Init@PRESCALE:
   396                           	opt stack 0
   397  00FCE5  0002               	dw	2
   398  00FCE7  0004               	dw	4
   399  00FCE9  0008               	dw	8
   400  00FCEB  0010               	dw	16
   401  00FCED  0020               	dw	32
   402  00FCEF  0040               	dw	64
   403  00FCF1  0080               	dw	128
   404  00FCF3  0100               	dw	256
   405  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   406                           	opt stack 0
   407  00FCF5                     PortProperty_Valid@F6830:
   408                           	opt stack 0
   409  00FCF5  00                 	db	0
   410  00FCF6  01                 	db	1
   411  00FCF7  02                 	db	2
   412  00FCF8  00                 	db	0
   413  00FCF9  01                 	db	1
   414  00FCFA  00                 	db	0
   415  00FCFB  01                 	db	1
   416  00FCFC  00                 	db	0
   417  00FCFD  02                 	db	2
   418  00FCFE  02                 	db	2
   419  00FCFF  00                 	db	0
   420  00FD00  00                 	db	0
   421  00FD01  03                 	db	3
   422  00FD02  03                 	db	3
   423  00FD03  03                 	db	3
   424  00FD04  00                 	db	0
   425  00FD05                     __end_ofPortProperty_Valid@F6830:
   426                           	opt stack 0
   427  00FD05                     _dpowers:
   428                           	opt stack 0
   429  00FD05  0001               	dw	1
   430  00FD07  000A               	dw	10
   431  00FD09  0064               	dw	100
   432  00FD0B  03E8               	dw	1000
   433  00FD0D  2710               	dw	10000
   434  00FD0F                     __end_of_dpowers:
   435                           	opt stack 0
   436  00FD0F                     _MASKS:
   437                           	opt stack 0
   438  00FD0F  00                 	db	0
   439  00FD10  01                 	db	1
   440  00FD11  03                 	db	3
   441  00FD12  07                 	db	7
   442  00FD13  0F                 	db	15
   443  00FD14  1F                 	db	31
   444  00FD15  3F                 	db	63
   445  00FD16  7F                 	db	127
   446  00FD17  FF                 	db	255
   447  00FD18                     __end_of_MASKS:
   448                           	opt stack 0
   449  00FD18                     HMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FD18  00                 	db	0
   452  00FD19  02                 	db	2
   453  00FD1A  01                 	db	1
   454  00FD1B  03                 	db	3
   455  00FD1C                     __end_ofHMI_SetButton@F7213:
   456                           	opt stack 0
   457  00FD1C                     Timer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1C  01                 	db	1
   460  00FD1D  04                 	db	4
   461  00FD1E  10                 	db	16
   462  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   463                           	opt stack 0
   464  00FD1F                     _Font5x7:
   465                           	opt stack 0
   466  00FD1F  00                 	db	0
   467  00FD20  00                 	db	0
   468  00FD21  00                 	db	0
   469  00FD22  00                 	db	0
   470  00FD23  00                 	db	0
   471  00FD24  00                 	db	0
   472  00FD25  00                 	db	0
   473  00FD26  5F                 	db	95
   474  00FD27  00                 	db	0
   475  00FD28  00                 	db	0
   476  00FD29  00                 	db	0
   477  00FD2A  07                 	db	7
   478  00FD2B  00                 	db	0
   479  00FD2C  07                 	db	7
   480  00FD2D  00                 	db	0
   481  00FD2E  14                 	db	20
   482  00FD2F  7F                 	db	127
   483  00FD30  14                 	db	20
   484  00FD31  7F                 	db	127
   485  00FD32  14                 	db	20
   486  00FD33  24                 	db	36
   487  00FD34  2A                 	db	42
   488  00FD35  7F                 	db	127
   489  00FD36  2A                 	db	42
   490  00FD37  12                 	db	18
   491  00FD38  23                 	db	35
   492  00FD39  13                 	db	19
   493  00FD3A  08                 	db	8
   494  00FD3B  64                 	db	100
   495  00FD3C  62                 	db	98
   496  00FD3D  36                 	db	54
   497  00FD3E  49                 	db	73
   498  00FD3F  55                 	db	85
   499  00FD40  22                 	db	34
   500  00FD41  50                 	db	80
   501  00FD42  00                 	db	0
   502  00FD43  05                 	db	5
   503  00FD44  03                 	db	3
   504  00FD45  00                 	db	0
   505  00FD46  00                 	db	0
   506  00FD47  00                 	db	0
   507  00FD48  1C                 	db	28
   508  00FD49  22                 	db	34
   509  00FD4A  41                 	db	65
   510  00FD4B  00                 	db	0
   511  00FD4C  00                 	db	0
   512  00FD4D  41                 	db	65
   513  00FD4E  22                 	db	34
   514  00FD4F  1C                 	db	28
   515  00FD50  00                 	db	0
   516  00FD51  08                 	db	8
   517  00FD52  2A                 	db	42
   518  00FD53  1C                 	db	28
   519  00FD54  2A                 	db	42
   520  00FD55  08                 	db	8
   521  00FD56  08                 	db	8
   522  00FD57  08                 	db	8
   523  00FD58  3E                 	db	62
   524  00FD59  08                 	db	8
   525  00FD5A  08                 	db	8
   526  00FD5B  00                 	db	0
   527  00FD5C  50                 	db	80
   528  00FD5D  30                 	db	48
   529  00FD5E  00                 	db	0
   530  00FD5F  00                 	db	0
   531  00FD60  08                 	db	8
   532  00FD61  08                 	db	8
   533  00FD62  08                 	db	8
   534  00FD63  08                 	db	8
   535  00FD64  08                 	db	8
   536  00FD65  00                 	db	0
   537  00FD66  60                 	db	96
   538  00FD67  60                 	db	96
   539  00FD68  00                 	db	0
   540  00FD69  00                 	db	0
   541  00FD6A  20                 	db	32
   542  00FD6B  10                 	db	16
   543  00FD6C  08                 	db	8
   544  00FD6D  04                 	db	4
   545  00FD6E  02                 	db	2
   546  00FD6F  3E                 	db	62
   547  00FD70  51                 	db	81
   548  00FD71  49                 	db	73
   549  00FD72  45                 	db	69
   550  00FD73  3E                 	db	62
   551  00FD74  00                 	db	0
   552  00FD75  42                 	db	66
   553  00FD76  7F                 	db	127
   554  00FD77  40                 	db	64
   555  00FD78  00                 	db	0
   556  00FD79  42                 	db	66
   557  00FD7A  61                 	db	97
   558  00FD7B  51                 	db	81
   559  00FD7C  49                 	db	73
   560  00FD7D  46                 	db	70
   561  00FD7E  21                 	db	33
   562  00FD7F  41                 	db	65
   563  00FD80  45                 	db	69
   564  00FD81  4B                 	db	75
   565  00FD82  31                 	db	49
   566  00FD83  18                 	db	24
   567  00FD84  14                 	db	20
   568  00FD85  12                 	db	18
   569  00FD86  7F                 	db	127
   570  00FD87  10                 	db	16
   571  00FD88  27                 	db	39
   572  00FD89  45                 	db	69
   573  00FD8A  45                 	db	69
   574  00FD8B  45                 	db	69
   575  00FD8C  39                 	db	57
   576  00FD8D  3C                 	db	60
   577  00FD8E  4A                 	db	74
   578  00FD8F  49                 	db	73
   579  00FD90  49                 	db	73
   580  00FD91  30                 	db	48
   581  00FD92  01                 	db	1
   582  00FD93  71                 	db	113
   583  00FD94  09                 	db	9
   584  00FD95  05                 	db	5
   585  00FD96  03                 	db	3
   586  00FD97  36                 	db	54
   587  00FD98  49                 	db	73
   588  00FD99  49                 	db	73
   589  00FD9A  49                 	db	73
   590  00FD9B  36                 	db	54
   591  00FD9C  06                 	db	6
   592  00FD9D  49                 	db	73
   593  00FD9E  49                 	db	73
   594  00FD9F  29                 	db	41
   595  00FDA0  1E                 	db	30
   596  00FDA1  00                 	db	0
   597  00FDA2  36                 	db	54
   598  00FDA3  36                 	db	54
   599  00FDA4  00                 	db	0
   600  00FDA5  00                 	db	0
   601  00FDA6  00                 	db	0
   602  00FDA7  56                 	db	86
   603  00FDA8  36                 	db	54
   604  00FDA9  00                 	db	0
   605  00FDAA  00                 	db	0
   606  00FDAB  00                 	db	0
   607  00FDAC  08                 	db	8
   608  00FDAD  14                 	db	20
   609  00FDAE  22                 	db	34
   610  00FDAF  41                 	db	65
   611  00FDB0  14                 	db	20
   612  00FDB1  14                 	db	20
   613  00FDB2  14                 	db	20
   614  00FDB3  14                 	db	20
   615  00FDB4  14                 	db	20
   616  00FDB5  41                 	db	65
   617  00FDB6  22                 	db	34
   618  00FDB7  14                 	db	20
   619  00FDB8  08                 	db	8
   620  00FDB9  00                 	db	0
   621  00FDBA  02                 	db	2
   622  00FDBB  01                 	db	1
   623  00FDBC  51                 	db	81
   624  00FDBD  09                 	db	9
   625  00FDBE  06                 	db	6
   626  00FDBF  32                 	db	50
   627  00FDC0  49                 	db	73
   628  00FDC1  79                 	db	121
   629  00FDC2  41                 	db	65
   630  00FDC3  3E                 	db	62
   631  00FDC4  7E                 	db	126
   632  00FDC5  11                 	db	17
   633  00FDC6  11                 	db	17
   634  00FDC7  11                 	db	17
   635  00FDC8  7E                 	db	126
   636  00FDC9  7F                 	db	127
   637  00FDCA  49                 	db	73
   638  00FDCB  49                 	db	73
   639  00FDCC  49                 	db	73
   640  00FDCD  36                 	db	54
   641  00FDCE  3E                 	db	62
   642  00FDCF  41                 	db	65
   643  00FDD0  41                 	db	65
   644  00FDD1  41                 	db	65
   645  00FDD2  22                 	db	34
   646  00FDD3  7F                 	db	127
   647  00FDD4  41                 	db	65
   648  00FDD5  41                 	db	65
   649  00FDD6  22                 	db	34
   650  00FDD7  1C                 	db	28
   651  00FDD8  7F                 	db	127
   652  00FDD9  49                 	db	73
   653  00FDDA  49                 	db	73
   654  00FDDB  49                 	db	73
   655  00FDDC  41                 	db	65
   656  00FDDD  7F                 	db	127
   657  00FDDE  09                 	db	9
   658  00FDDF  09                 	db	9
   659  00FDE0  01                 	db	1
   660  00FDE1  01                 	db	1
   661  00FDE2  3E                 	db	62
   662  00FDE3  41                 	db	65
   663  00FDE4  41                 	db	65
   664  00FDE5  51                 	db	81
   665  00FDE6  32                 	db	50
   666  00FDE7  7F                 	db	127
   667  00FDE8  08                 	db	8
   668  00FDE9  08                 	db	8
   669  00FDEA  08                 	db	8
   670  00FDEB  7F                 	db	127
   671  00FDEC  00                 	db	0
   672  00FDED  41                 	db	65
   673  00FDEE  7F                 	db	127
   674  00FDEF  41                 	db	65
   675  00FDF0  00                 	db	0
   676  00FDF1  20                 	db	32
   677  00FDF2  40                 	db	64
   678  00FDF3  41                 	db	65
   679  00FDF4  3F                 	db	63
   680  00FDF5  01                 	db	1
   681  00FDF6  7F                 	db	127
   682  00FDF7  08                 	db	8
   683  00FDF8  14                 	db	20
   684  00FDF9  22                 	db	34
   685  00FDFA  41                 	db	65
   686  00FDFB  7F                 	db	127
   687  00FDFC  40                 	db	64
   688  00FDFD  40                 	db	64
   689  00FDFE  40                 	db	64
   690  00FDFF  40                 	db	64
   691  00FE00  7F                 	db	127
   692  00FE01  02                 	db	2
   693  00FE02  04                 	db	4
   694  00FE03  02                 	db	2
   695  00FE04  7F                 	db	127
   696  00FE05  7F                 	db	127
   697  00FE06  04                 	db	4
   698  00FE07  08                 	db	8
   699  00FE08  10                 	db	16
   700  00FE09  7F                 	db	127
   701  00FE0A  3E                 	db	62
   702  00FE0B  41                 	db	65
   703  00FE0C  41                 	db	65
   704  00FE0D  41                 	db	65
   705  00FE0E  3E                 	db	62
   706  00FE0F  7F                 	db	127
   707  00FE10  09                 	db	9
   708  00FE11  09                 	db	9
   709  00FE12  09                 	db	9
   710  00FE13  06                 	db	6
   711  00FE14  3E                 	db	62
   712  00FE15  41                 	db	65
   713  00FE16  51                 	db	81
   714  00FE17  21                 	db	33
   715  00FE18  5E                 	db	94
   716  00FE19  7F                 	db	127
   717  00FE1A  09                 	db	9
   718  00FE1B  19                 	db	25
   719  00FE1C  29                 	db	41
   720  00FE1D  46                 	db	70
   721  00FE1E  46                 	db	70
   722  00FE1F  49                 	db	73
   723  00FE20  49                 	db	73
   724  00FE21  49                 	db	73
   725  00FE22  31                 	db	49
   726  00FE23  01                 	db	1
   727  00FE24  01                 	db	1
   728  00FE25  7F                 	db	127
   729  00FE26  01                 	db	1
   730  00FE27  01                 	db	1
   731  00FE28  3F                 	db	63
   732  00FE29  40                 	db	64
   733  00FE2A  40                 	db	64
   734  00FE2B  40                 	db	64
   735  00FE2C  3F                 	db	63
   736  00FE2D  1F                 	db	31
   737  00FE2E  20                 	db	32
   738  00FE2F  40                 	db	64
   739  00FE30  20                 	db	32
   740  00FE31  1F                 	db	31
   741  00FE32  7F                 	db	127
   742  00FE33  20                 	db	32
   743  00FE34  18                 	db	24
   744  00FE35  20                 	db	32
   745  00FE36  7F                 	db	127
   746  00FE37  63                 	db	99
   747  00FE38  14                 	db	20
   748  00FE39  08                 	db	8
   749  00FE3A  14                 	db	20
   750  00FE3B  63                 	db	99
   751  00FE3C  03                 	db	3
   752  00FE3D  04                 	db	4
   753  00FE3E  78                 	db	120
   754  00FE3F  04                 	db	4
   755  00FE40  03                 	db	3
   756  00FE41  61                 	db	97
   757  00FE42  51                 	db	81
   758  00FE43  49                 	db	73
   759  00FE44  45                 	db	69
   760  00FE45  43                 	db	67
   761  00FE46  00                 	db	0
   762  00FE47  00                 	db	0
   763  00FE48  7F                 	db	127
   764  00FE49  41                 	db	65
   765  00FE4A  41                 	db	65
   766  00FE4B  02                 	db	2
   767  00FE4C  04                 	db	4
   768  00FE4D  08                 	db	8
   769  00FE4E  10                 	db	16
   770  00FE4F  20                 	db	32
   771  00FE50  41                 	db	65
   772  00FE51  41                 	db	65
   773  00FE52  7F                 	db	127
   774  00FE53  00                 	db	0
   775  00FE54  00                 	db	0
   776  00FE55  04                 	db	4
   777  00FE56  02                 	db	2
   778  00FE57  01                 	db	1
   779  00FE58  02                 	db	2
   780  00FE59  04                 	db	4
   781  00FE5A  40                 	db	64
   782  00FE5B  40                 	db	64
   783  00FE5C  40                 	db	64
   784  00FE5D  40                 	db	64
   785  00FE5E  40                 	db	64
   786  00FE5F  00                 	db	0
   787  00FE60  01                 	db	1
   788  00FE61  02                 	db	2
   789  00FE62  04                 	db	4
   790  00FE63  00                 	db	0
   791  00FE64  20                 	db	32
   792  00FE65  54                 	db	84
   793  00FE66  54                 	db	84
   794  00FE67  54                 	db	84
   795  00FE68  78                 	db	120
   796  00FE69  7F                 	db	127
   797  00FE6A  48                 	db	72
   798  00FE6B  44                 	db	68
   799  00FE6C  44                 	db	68
   800  00FE6D  38                 	db	56
   801  00FE6E  38                 	db	56
   802  00FE6F  44                 	db	68
   803  00FE70  44                 	db	68
   804  00FE71  44                 	db	68
   805  00FE72  20                 	db	32
   806  00FE73  38                 	db	56
   807  00FE74  44                 	db	68
   808  00FE75  44                 	db	68
   809  00FE76  48                 	db	72
   810  00FE77  7F                 	db	127
   811  00FE78  38                 	db	56
   812  00FE79  54                 	db	84
   813  00FE7A  54                 	db	84
   814  00FE7B  54                 	db	84
   815  00FE7C  18                 	db	24
   816  00FE7D  08                 	db	8
   817  00FE7E  7E                 	db	126
   818  00FE7F  09                 	db	9
   819  00FE80  01                 	db	1
   820  00FE81  02                 	db	2
   821  00FE82  08                 	db	8
   822  00FE83  14                 	db	20
   823  00FE84  54                 	db	84
   824  00FE85  54                 	db	84
   825  00FE86  3C                 	db	60
   826  00FE87  7F                 	db	127
   827  00FE88  08                 	db	8
   828  00FE89  04                 	db	4
   829  00FE8A  04                 	db	4
   830  00FE8B  78                 	db	120
   831  00FE8C  00                 	db	0
   832  00FE8D  44                 	db	68
   833  00FE8E  7D                 	db	125
   834  00FE8F  40                 	db	64
   835  00FE90  00                 	db	0
   836  00FE91  20                 	db	32
   837  00FE92  40                 	db	64
   838  00FE93  44                 	db	68
   839  00FE94  3D                 	db	61
   840  00FE95  00                 	db	0
   841  00FE96  00                 	db	0
   842  00FE97  7F                 	db	127
   843  00FE98  10                 	db	16
   844  00FE99  28                 	db	40
   845  00FE9A  44                 	db	68
   846  00FE9B  00                 	db	0
   847  00FE9C  41                 	db	65
   848  00FE9D  7F                 	db	127
   849  00FE9E  40                 	db	64
   850  00FE9F  00                 	db	0
   851  00FEA0  7C                 	db	124
   852  00FEA1  04                 	db	4
   853  00FEA2  18                 	db	24
   854  00FEA3  04                 	db	4
   855  00FEA4  78                 	db	120
   856  00FEA5  7C                 	db	124
   857  00FEA6  08                 	db	8
   858  00FEA7  04                 	db	4
   859  00FEA8  04                 	db	4
   860  00FEA9  78                 	db	120
   861  00FEAA  38                 	db	56
   862  00FEAB  44                 	db	68
   863  00FEAC  44                 	db	68
   864  00FEAD  44                 	db	68
   865  00FEAE  38                 	db	56
   866  00FEAF  7C                 	db	124
   867  00FEB0  14                 	db	20
   868  00FEB1  14                 	db	20
   869  00FEB2  14                 	db	20
   870  00FEB3  08                 	db	8
   871  00FEB4  08                 	db	8
   872  00FEB5  14                 	db	20
   873  00FEB6  14                 	db	20
   874  00FEB7  18                 	db	24
   875  00FEB8  7C                 	db	124
   876  00FEB9  7C                 	db	124
   877  00FEBA  08                 	db	8
   878  00FEBB  04                 	db	4
   879  00FEBC  04                 	db	4
   880  00FEBD  08                 	db	8
   881  00FEBE  48                 	db	72
   882  00FEBF  54                 	db	84
   883  00FEC0  54                 	db	84
   884  00FEC1  54                 	db	84
   885  00FEC2  20                 	db	32
   886  00FEC3  04                 	db	4
   887  00FEC4  3F                 	db	63
   888  00FEC5  44                 	db	68
   889  00FEC6  40                 	db	64
   890  00FEC7  20                 	db	32
   891  00FEC8  3C                 	db	60
   892  00FEC9  40                 	db	64
   893  00FECA  40                 	db	64
   894  00FECB  20                 	db	32
   895  00FECC  7C                 	db	124
   896  00FECD  1C                 	db	28
   897  00FECE  20                 	db	32
   898  00FECF  40                 	db	64
   899  00FED0  20                 	db	32
   900  00FED1  1C                 	db	28
   901  00FED2  3C                 	db	60
   902  00FED3  40                 	db	64
   903  00FED4  30                 	db	48
   904  00FED5  40                 	db	64
   905  00FED6  3C                 	db	60
   906  00FED7  44                 	db	68
   907  00FED8  28                 	db	40
   908  00FED9  10                 	db	16
   909  00FEDA  28                 	db	40
   910  00FEDB  44                 	db	68
   911  00FEDC  0C                 	db	12
   912  00FEDD  50                 	db	80
   913  00FEDE  50                 	db	80
   914  00FEDF  50                 	db	80
   915  00FEE0  3C                 	db	60
   916  00FEE1  44                 	db	68
   917  00FEE2  64                 	db	100
   918  00FEE3  54                 	db	84
   919  00FEE4  4C                 	db	76
   920  00FEE5  44                 	db	68
   921  00FEE6  00                 	db	0
   922  00FEE7  08                 	db	8
   923  00FEE8  36                 	db	54
   924  00FEE9  41                 	db	65
   925  00FEEA  00                 	db	0
   926  00FEEB  00                 	db	0
   927  00FEEC  00                 	db	0
   928  00FEED  7F                 	db	127
   929  00FEEE  00                 	db	0
   930  00FEEF  00                 	db	0
   931  00FEF0  00                 	db	0
   932  00FEF1  41                 	db	65
   933  00FEF2  36                 	db	54
   934  00FEF3  08                 	db	8
   935  00FEF4  00                 	db	0
   936  00FEF5  08                 	db	8
   937  00FEF6  08                 	db	8
   938  00FEF7  2A                 	db	42
   939  00FEF8  1C                 	db	28
   940  00FEF9  08                 	db	8
   941  00FEFA  08                 	db	8
   942  00FEFB  1C                 	db	28
   943  00FEFC  2A                 	db	42
   944  00FEFD  08                 	db	8
   945  00FEFE  08                 	db	8
   946  00FEFF                     __end_of_Font5x7:
   947                           	opt stack 0
   948  00FEFF                     _PortG_Property:
   949                           	opt stack 0
   950  00FEFF  FC00               	dw	64512
   951  00FF01                     __end_of_PortG_Property:
   952                           	opt stack 0
   953  00FF01                     _PortF_Property:
   954                           	opt stack 0
   955  00FF01  0FFF               	dw	4095
   956  00FF03                     __end_of_PortF_Property:
   957                           	opt stack 0
   958  00FF03                     _PortE_Property:
   959                           	opt stack 0
   960  00FF03  0000               	dw	0
   961  00FF05                     __end_of_PortE_Property:
   962                           	opt stack 0
   963  00FF05                     _PortD_Property:
   964                           	opt stack 0
   965  00FF05  FFFF               	dw	65535
   966  00FF07                     __end_of_PortD_Property:
   967                           	opt stack 0
   968  00FF07                     _PortC_Property:
   969                           	opt stack 0
   970  00FF07  FFF0               	dw	65520
   971  00FF09                     __end_of_PortC_Property:
   972                           	opt stack 0
   973  00FF09                     _PortB_Property:
   974                           	opt stack 0
   975  00FF09  FF00               	dw	65280
   976  00FF0B                     __end_of_PortB_Property:
   977                           	opt stack 0
   978  00FF0B                     _PortA_Property:
   979                           	opt stack 0
   980  00FF0B  00FF               	dw	255
   981  00FF0D                     __end_of_PortA_Property:
   982                           	opt stack 0
   983  0000                     _TMR0	set	4054
   984  0000                     _RCREG1	set	4015
   985  0000                     _TXREG1	set	4014
   986  0000                     _SPBRG1	set	4016
   987  0000                     _TXSTA1bits	set	4013
   988  0000                     _BAUDCON1bits	set	3966
   989  0000                     _RCSTA1	set	4012
   990  0000                     _TXSTA1	set	4013
   991  0000                     _TRISCbits	set	3988
   992  0000                     _PR2	set	4043
   993  0000                     _T2CONbits	set	4042
   994  0000                     _T0CONbits	set	4053
   995  0000                     _RCONbits	set	4048
   996  0000                     _OSCTUNEbits	set	3995
   997  0000                     _PIR3	set	4004
   998  0000                     _PIR2	set	4001
   999  0000                     _PIR1	set	3998
  1000  0000                     _INTCONbits	set	4082
  1001  0000                     _SSP2CON2bits	set	3947
  1002  0000                     _SSP1CON2bits	set	4037
  1003  0000                     _SSP1ADD	set	4040
  1004  0000                     _ANCON0	set	4033
  1005  0000                     _ADRESL	set	4035
  1006  0000                     _ADRESH	set	4036
  1007  0000                     _ADCON1bits	set	4033
  1008  0000                     _ADCON0bits	set	4034
  1009  0000                     _SSP2CON1bits	set	3948
  1010  0000                     _SSP1CON1bits	set	4038
  1011  0000                     _SSP2STATbits	set	3949
  1012  0000                     _SSP1STATbits	set	4039
  1013  0000                     _PIE3bits	set	4003
  1014  0000                     _PIE1bits	set	3997
  1015  0000                     _PIR3bits	set	4004
  1016  0000                     _PIR1bits	set	3998
  1017  0000                     _IPR3bits	set	4005
  1018  0000                     _IPR1bits	set	3999
  1019  0000                     _PORTFbits	set	3973
  1020  0000                     _SSP2CON2	set	3947
  1021  0000                     _SSP1CON2	set	4037
  1022  0000                     _SSP2BUF	set	3951
  1023  0000                     _SSP2CON1	set	3948
  1024  0000                     _SSP2STAT	set	3949
  1025  0000                     _SSP1BUF	set	4041
  1026  0000                     _SSP1CON1	set	4038
  1027  0000                     _SSP1STAT	set	4039
  1028  0000                     _LATG	set	3983
  1029  0000                     _LATF	set	3982
  1030  0000                     _LATE	set	3981
  1031  0000                     _LATD	set	3980
  1032  0000                     _LATC	set	3979
  1033  0000                     _LATB	set	3978
  1034  0000                     _LATA	set	3977
  1035  0000                     _TRISG	set	3992
  1036  0000                     _TRISF	set	3991
  1037  0000                     _TRISE	set	3990
  1038  0000                     _TRISD	set	3989
  1039  0000                     _TRISC	set	3988
  1040  0000                     _TRISB	set	3987
  1041  0000                     _TRISA	set	3986
  1042  0000                     _PORTG	set	3974
  1043  0000                     _PORTF	set	3973
  1044  0000                     _PORTE	set	3972
  1045  0000                     _PORTD	set	3971
  1046  0000                     _PORTC	set	3970
  1047  0000                     _PORTB	set	3969
  1048  0000                     _PORTA	set	3968
  1049  00FF0D                     STR_12:
  1050  00FF0D  43                 	db	67	;'C'
  1051  00FF0E  6C                 	db	108	;'l'
  1052  00FF0F  6F                 	db	111	;'o'
  1053  00FF10  73                 	db	115	;'s'
  1054  00FF11  65                 	db	101	;'e'
  1055  00FF12  73                 	db	115	;'s'
  1056  00FF13  74                 	db	116	;'t'
  1057  00FF14  20                 	db	32
  1058  00FF15  57                 	db	87	;'W'
  1059  00FF16  61                 	db	97	;'a'
  1060  00FF17  6C                 	db	108	;'l'
  1061  00FF18  6C                 	db	108	;'l'
  1062  00FF19  3A                 	db	58	;':'
  1063  00FF1A  25                 	db	37
  1064  00FF1B  75                 	db	117	;'u'
  1065  00FF1C  0A                 	db	10
  1066  00FF1D  43                 	db	67	;'C'
  1067  00FF1E  6C                 	db	108	;'l'
  1068  00FF1F  6F                 	db	111	;'o'
  1069  00FF20  73                 	db	115	;'s'
  1070  00FF21  65                 	db	101	;'e'
  1071  00FF22  73                 	db	115	;'s'
  1072  00FF23  74                 	db	116	;'t'
  1073  00FF24  20                 	db	32
  1074  00FF25  41                 	db	65	;'A'
  1075  00FF26  6E                 	db	110	;'n'
  1076  00FF27  67                 	db	103	;'g'
  1077  00FF28  6C                 	db	108	;'l'
  1078  00FF29  65                 	db	101	;'e'
  1079  00FF2A  3A                 	db	58	;':'
  1080  00FF2B  25                 	db	37
  1081  00FF2C  64                 	db	100	;'d'
  1082  00FF2D  0A                 	db	10
  1083  00FF2E  4C                 	db	76	;'L'
  1084  00FF2F  65                 	db	101	;'e'
  1085  00FF30  66                 	db	102	;'f'
  1086  00FF31  74                 	db	116	;'t'
  1087  00FF32  20                 	db	32
  1088  00FF33  42                 	db	66	;'B'
  1089  00FF34  75                 	db	117	;'u'
  1090  00FF35  6D                 	db	109	;'m'
  1091  00FF36  70                 	db	112	;'p'
  1092  00FF37  3A                 	db	58	;':'
  1093  00FF38  25                 	db	37
  1094  00FF39  75                 	db	117	;'u'
  1095  00FF3A  0A                 	db	10
  1096  00FF3B  52                 	db	82	;'R'
  1097  00FF3C  69                 	db	105	;'i'
  1098  00FF3D  67                 	db	103	;'g'
  1099  00FF3E  68                 	db	104	;'h'
  1100  00FF3F  74                 	db	116	;'t'
  1101  00FF40  42                 	db	66	;'B'
  1102  00FF41  75                 	db	117	;'u'
  1103  00FF42  6D                 	db	109	;'m'
  1104  00FF43  70                 	db	112	;'p'
  1105  00FF44  3A                 	db	58	;':'
  1106  00FF45  25                 	db	37
  1107  00FF46  75                 	db	117	;'u'
  1108  00FF47  0A                 	db	10
  1109  00FF48  41                 	db	65	;'A'
  1110  00FF49  6E                 	db	110	;'n'
  1111  00FF4A  67                 	db	103	;'g'
  1112  00FF4B  6C                 	db	108	;'l'
  1113  00FF4C  65                 	db	101	;'e'
  1114  00FF4D  54                 	db	84	;'T'
  1115  00FF4E  6F                 	db	111	;'o'
  1116  00FF4F  54                 	db	84	;'T'
  1117  00FF50  75                 	db	117	;'u'
  1118  00FF51  72                 	db	114	;'r'
  1119  00FF52  6E                 	db	110	;'n'
  1120  00FF53  3A                 	db	58	;':'
  1121  00FF54  20                 	db	32
  1122  00FF55  25                 	db	37
  1123  00FF56  64                 	db	100	;'d'
  1124  00FF57  0A                 	db	10
  1125  00FF58  00                 	db	0
  1126  00FF59                     STR_4:
  1127  00FF59  43                 	db	67	;'C'
  1128  00FF5A  6C                 	db	108	;'l'
  1129  00FF5B  6F                 	db	111	;'o'
  1130  00FF5C  73                 	db	115	;'s'
  1131  00FF5D  65                 	db	101	;'e'
  1132  00FF5E  73                 	db	115	;'s'
  1133  00FF5F  74                 	db	116	;'t'
  1134  00FF60  20                 	db	32
  1135  00FF61  57                 	db	87	;'W'
  1136  00FF62  61                 	db	97	;'a'
  1137  00FF63  6C                 	db	108	;'l'
  1138  00FF64  6C                 	db	108	;'l'
  1139  00FF65  3A                 	db	58	;':'
  1140  00FF66  25                 	db	37
  1141  00FF67  75                 	db	117	;'u'
  1142  00FF68  0A                 	db	10
  1143  00FF69  43                 	db	67	;'C'
  1144  00FF6A  6C                 	db	108	;'l'
  1145  00FF6B  6F                 	db	111	;'o'
  1146  00FF6C  73                 	db	115	;'s'
  1147  00FF6D  65                 	db	101	;'e'
  1148  00FF6E  73                 	db	115	;'s'
  1149  00FF6F  74                 	db	116	;'t'
  1150  00FF70  20                 	db	32
  1151  00FF71  41                 	db	65	;'A'
  1152  00FF72  6E                 	db	110	;'n'
  1153  00FF73  67                 	db	103	;'g'
  1154  00FF74  6C                 	db	108	;'l'
  1155  00FF75  65                 	db	101	;'e'
  1156  00FF76  3A                 	db	58	;':'
  1157  00FF77  25                 	db	37
  1158  00FF78  64                 	db	100	;'d'
  1159  00FF79  0A                 	db	10
  1160  00FF7A  4C                 	db	76	;'L'
  1161  00FF7B  65                 	db	101	;'e'
  1162  00FF7C  66                 	db	102	;'f'
  1163  00FF7D  74                 	db	116	;'t'
  1164  00FF7E  20                 	db	32
  1165  00FF7F  42                 	db	66	;'B'
  1166  00FF80  75                 	db	117	;'u'
  1167  00FF81  6D                 	db	109	;'m'
  1168  00FF82  70                 	db	112	;'p'
  1169  00FF83  3A                 	db	58	;':'
  1170  00FF84  25                 	db	37
  1171  00FF85  75                 	db	117	;'u'
  1172  00FF86  0A                 	db	10
  1173  00FF87  52                 	db	82	;'R'
  1174  00FF88  69                 	db	105	;'i'
  1175  00FF89  67                 	db	103	;'g'
  1176  00FF8A  68                 	db	104	;'h'
  1177  00FF8B  74                 	db	116	;'t'
  1178  00FF8C  42                 	db	66	;'B'
  1179  00FF8D  75                 	db	117	;'u'
  1180  00FF8E  6D                 	db	109	;'m'
  1181  00FF8F  70                 	db	112	;'p'
  1182  00FF90  3A                 	db	58	;':'
  1183  00FF91  25                 	db	37
  1184  00FF92  75                 	db	117	;'u'
  1185  00FF93  0A                 	db	10
  1186  00FF94  00                 	db	0
  1187  00FF95                     STR_6:
  1188  00FF95  54                 	db	84	;'T'
  1189  00FF96  6F                 	db	111	;'o'
  1190  00FF97  74                 	db	116	;'t'
  1191  00FF98  61                 	db	97	;'a'
  1192  00FF99  6C                 	db	108	;'l'
  1193  00FF9A  20                 	db	32
  1194  00FF9B  44                 	db	68	;'D'
  1195  00FF9C  69                 	db	105	;'i'
  1196  00FF9D  73                 	db	115	;'s'
  1197  00FF9E  74                 	db	116	;'t'
  1198  00FF9F  61                 	db	97	;'a'
  1199  00FFA0  6E                 	db	110	;'n'
  1200  00FFA1  63                 	db	99	;'c'
  1201  00FFA2  65                 	db	101	;'e'
  1202  00FFA3  3A                 	db	58	;':'
  1203  00FFA4  25                 	db	37
  1204  00FFA5  75                 	db	117	;'u'
  1205  00FFA6  0A                 	db	10
  1206  00FFA7  4C                 	db	76	;'L'
  1207  00FFA8  65                 	db	101	;'e'
  1208  00FFA9  66                 	db	102	;'f'
  1209  00FFAA  74                 	db	116	;'t'
  1210  00FFAB  20                 	db	32
  1211  00FFAC  42                 	db	66	;'B'
  1212  00FFAD  75                 	db	117	;'u'
  1213  00FFAE  6D                 	db	109	;'m'
  1214  00FFAF  70                 	db	112	;'p'
  1215  00FFB0  3A                 	db	58	;':'
  1216  00FFB1  25                 	db	37
  1217  00FFB2  75                 	db	117	;'u'
  1218  00FFB3  0A                 	db	10
  1219  00FFB4  52                 	db	82	;'R'
  1220  00FFB5  69                 	db	105	;'i'
  1221  00FFB6  67                 	db	103	;'g'
  1222  00FFB7  68                 	db	104	;'h'
  1223  00FFB8  74                 	db	116	;'t'
  1224  00FFB9  20                 	db	32
  1225  00FFBA  42                 	db	66	;'B'
  1226  00FFBB  75                 	db	117	;'u'
  1227  00FFBC  6D                 	db	109	;'m'
  1228  00FFBD  70                 	db	112	;'p'
  1229  00FFBE  3A                 	db	58	;':'
  1230  00FFBF  25                 	db	37
  1231  00FFC0  75                 	db	117	;'u'
  1232  00FFC1  0A                 	db	10
  1233  00FFC2  00                 	db	0
  1234  00FFC3                     STR_15:
  1235  00FFC3  20                 	db	32
  1236  00FFC4  20                 	db	32
  1237  00FFC5  20                 	db	32
  1238  00FFC6  20                 	db	32
  1239  00FFC7  20                 	db	32
  1240  00FFC8  20                 	db	32
  1241  00FFC9  20                 	db	32
  1242  00FFCA  20                 	db	32
  1243  00FFCB  20                 	db	32
  1244  00FFCC  20                 	db	32
  1245  00FFCD  20                 	db	32
  1246  00FFCE  20                 	db	32
  1247  00FFCF  20                 	db	32
  1248  00FFD0  20                 	db	32
  1249  00FFD1  20                 	db	32
  1250  00FFD2  20                 	db	32
  1251  00FFD3  20                 	db	32
  1252  00FFD4  20                 	db	32
  1253  00FFD5  20                 	db	32
  1254  00FFD6  0A                 	db	10
  1255  00FFD7  00                 	db	0
  1256  00FFD8                     STR_14:
  1257  00FFD8  50                 	db	80	;'P'
  1258  00FFD9  6C                 	db	108	;'l'
  1259  00FFDA  65                 	db	101	;'e'
  1260  00FFDB  61                 	db	97	;'a'
  1261  00FFDC  73                 	db	115	;'s'
  1262  00FFDD  65                 	db	101	;'e'
  1263  00FFDE  20                 	db	32
  1264  00FFDF  73                 	db	115	;'s'
  1265  00FFE0  65                 	db	101	;'e'
  1266  00FFE1  6C                 	db	108	;'l'
  1267  00FFE2  65                 	db	101	;'e'
  1268  00FFE3  63                 	db	99	;'c'
  1269  00FFE4  74                 	db	116	;'t'
  1270  00FFE5  20                 	db	32
  1271  00FFE6  6D                 	db	109	;'m'
  1272  00FFE7  6F                 	db	111	;'o'
  1273  00FFE8  64                 	db	100	;'d'
  1274  00FFE9  65                 	db	101	;'e'
  1275  00FFEA  2E                 	db	46
  1276  00FFEB  0A                 	db	10
  1277  00FFEC  00                 	db	0
  1278  00FFED                     STR_2:
  1279  00FFED  44                 	db	68	;'D'
  1280  00FFEE  69                 	db	105	;'i'
  1281  00FFEF  73                 	db	115	;'s'
  1282  00FFF0  74                 	db	116	;'t'
  1283  00FFF1  61                 	db	97	;'a'
  1284  00FFF2  6E                 	db	110	;'n'
  1285  00FFF3  63                 	db	99	;'c'
  1286  00FFF4  65                 	db	101	;'e'
  1287  00FFF5  3A                 	db	58	;':'
  1288  00FFF6  20                 	db	32
  1289  00FFF7  25                 	db	37
  1290  00FFF8  64                 	db	100	;'d'
  1291  00FFF9  0A                 	db	10
  1292  00FFFA  00                 	db	0
  1293  00FFFB                     STR_1:
  1294  00FFFB  25                 	db	37
  1295  00FFFC  63                 	db	99	;'c'
  1296  00FFFD  00                 	db	0
  1297  0000                     
  1298                           ; #config settings
  1299  00FFFE  00                 	db	0	; dummy byte at the end
  1300  0000                     
  1301                           	psect	cinit
  1302  014734                     __pcinit:
  1303                           	opt stack 0
  1304  014734                     start_initialization:
  1305                           	opt stack 0
  1306  014734                     __initialization:
  1307                           	opt stack 0
  1308                           
  1309                           ; Initialize objects allocated to BANK3 (14 bytes)
  1310                           ; load TBLPTR registers with __pidataBANK3
  1311  014734  0E06               	movlw	low __pidataBANK3
  1312  014736  6EF6               	movwf	tblptrl,c
  1313  014738  0E68               	movlw	high __pidataBANK3
  1314  01473A  6EF7               	movwf	tblptrh,c
  1315  01473C  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1316  01473E  6EF8               	movwf	tblptru,c
  1317  014740  EE03  F0EA         	lfsr	0,__pdataBANK3
  1318  014744  EE10 F00E          	lfsr	1,14
  1319  014748                     copy_data0:
  1320  014748  0009               	tblrd		*+
  1321  01474A  CFF5 FFEE          	movff	tablat,postinc0
  1322  01474E  50E5               	movf	postdec1,w,c
  1323  014750  50E1               	movf	fsr1l,w,c
  1324  014752  E1FA               	bnz	copy_data0
  1325                           
  1326                           ; Initialize objects allocated to BANK0 (7 bytes)
  1327                           ; load TBLPTR registers with __pidataBANK0
  1328  014754  0EC2               	movlw	low __pidataBANK0
  1329  014756  6EF6               	movwf	tblptrl,c
  1330  014758  0E68               	movlw	high __pidataBANK0
  1331  01475A  6EF7               	movwf	tblptrh,c
  1332  01475C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1333  01475E  6EF8               	movwf	tblptru,c
  1334  014760  EE00  F0F9         	lfsr	0,__pdataBANK0
  1335  014764  EE10 F007          	lfsr	1,7
  1336  014768                     copy_data1:
  1337  014768  0009               	tblrd		*+
  1338  01476A  CFF5 FFEE          	movff	tablat,postinc0
  1339  01476E  50E5               	movf	postdec1,w,c
  1340  014770  50E1               	movf	fsr1l,w,c
  1341  014772  E1FA               	bnz	copy_data1
  1342                           
  1343                           ; Initialize objects allocated to COMRAM (10 bytes)
  1344                           ; load TBLPTR registers with __pidataCOMRAM
  1345  014774  0E8C               	movlw	low __pidataCOMRAM
  1346  014776  6EF6               	movwf	tblptrl,c
  1347  014778  0E68               	movlw	high __pidataCOMRAM
  1348  01477A  6EF7               	movwf	tblptrh,c
  1349  01477C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1350  01477E  6EF8               	movwf	tblptru,c
  1351  014780  EE00  F047         	lfsr	0,__pdataCOMRAM
  1352  014784  EE10 F00A          	lfsr	1,10
  1353  014788                     copy_data2:
  1354  014788  0009               	tblrd		*+
  1355  01478A  CFF5 FFEE          	movff	tablat,postinc0
  1356  01478E  50E5               	movf	postdec1,w,c
  1357  014790  50E1               	movf	fsr1l,w,c
  1358  014792  E1FA               	bnz	copy_data2
  1359                           
  1360                           ; Clear objects allocated to BIGRAM (300 bytes)
  1361  014794  EE04  F0AC         	lfsr	0,__pbssBIGRAM
  1362  014798  EE11 F02C          	lfsr	1,300
  1363  01479C                     clear_0:
  1364  01479C  6AEE               	clrf	postinc0,c
  1365  01479E  50E5               	movf	postdec1,w,c
  1366  0147A0  50E1               	movf	fsr1l,w,c
  1367  0147A2  E1FC               	bnz	clear_0
  1368  0147A4  50E2               	movf	fsr1h,w,c
  1369  0147A6  E1FA               	bnz	clear_0
  1370                           
  1371                           ; Clear objects allocated to BANK4 (170 bytes)
  1372  0147A8  EE04  F000         	lfsr	0,__pbssBANK4
  1373  0147AC  0EAA               	movlw	170
  1374  0147AE                     clear_1:
  1375  0147AE  6AEE               	clrf	postinc0,c
  1376  0147B0  06E8               	decf	wreg,f,c
  1377  0147B2  E1FD               	bnz	clear_1
  1378                           
  1379                           ; Clear objects allocated to BANK3 (234 bytes)
  1380  0147B4  EE03  F000         	lfsr	0,__pbssBANK3
  1381  0147B8  0EEA               	movlw	234
  1382  0147BA                     clear_2:
  1383  0147BA  6AEE               	clrf	postinc0,c
  1384  0147BC  06E8               	decf	wreg,f,c
  1385  0147BE  E1FD               	bnz	clear_2
  1386                           
  1387                           ; Clear objects allocated to BANK0 (90 bytes)
  1388  0147C0  EE00  F060         	lfsr	0,__pbssBANK0
  1389  0147C4  0E5A               	movlw	90
  1390  0147C6                     clear_3:
  1391  0147C6  6AEE               	clrf	postinc0,c
  1392  0147C8  06E8               	decf	wreg,f,c
  1393  0147CA  E1FD               	bnz	clear_3
  1394                           
  1395                           ; Clear objects allocated to COMRAM (30 bytes)
  1396  0147CC  EE00  F029         	lfsr	0,__pbssCOMRAM
  1397  0147D0  0E1E               	movlw	30
  1398  0147D2                     clear_4:
  1399  0147D2  6AEE               	clrf	postinc0,c
  1400  0147D4  06E8               	decf	wreg,f,c
  1401  0147D6  E1FD               	bnz	clear_4
  1402  0147D8                     end_of_initialization:
  1403                           	opt stack 0
  1404  0147D8                     __end_of__initialization:
  1405                           	opt stack 0
  1406  0147D8  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1407  0147DA  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1408  0147DC  0100               	movlb	0
  1409  0147DE  EFB9  F09D         	goto	_main	;jump to C main() function
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec1	equ	0xFE5
  1417                           fsr1h	equ	0xFE2
  1418                           fsr1l	equ	0xFE1
  1419                           
  1420                           	psect	bssCOMRAM
  1421  000029                     __pbssCOMRAM:
  1422                           	opt stack 0
  1423  000029                     _COUNTER:
  1424                           	opt stack 0
  1425  000029                     	ds	2
  1426  00002B                     HMI_GRender@a:
  1427                           	opt stack 0
  1428  00002B                     	ds	2
  1429  00002D                     SPI_Send9@dat:
  1430                           	opt stack 0
  1431  00002D                     	ds	2
  1432  00002F                     _iRDropCaster:
  1433                           	opt stack 0
  1434  00002F                     	ds	1
  1435  000030                     _iRVirtualWall:
  1436                           	opt stack 0
  1437  000030                     	ds	1
  1438  000031                     _iRCliffR:
  1439                           	opt stack 0
  1440  000031                     	ds	1
  1441  000032                     _iRCliffFR:
  1442                           	opt stack 0
  1443  000032                     	ds	1
  1444  000033                     _iRCliffFL:
  1445                           	opt stack 0
  1446  000033                     	ds	1
  1447  000034                     _iRCliffL:
  1448                           	opt stack 0
  1449  000034                     	ds	1
  1450  000035                     _iRWall:
  1451                           	opt stack 0
  1452  000035                     	ds	1
  1453  000036                     _iRBumpDrop:
  1454                           	opt stack 0
  1455  000036                     	ds	1
  1456  000037                     _iRScriptIndex:
  1457                           	opt stack 0
  1458  000037                     	ds	1
  1459  000038                     _u:
  1460                           	opt stack 0
  1461  000038                     	ds	1
  1462  000039                     _j:
  1463                           	opt stack 0
  1464  000039                     	ds	1
  1465  00003A                     _i:
  1466                           	opt stack 0
  1467  00003A                     	ds	1
  1468  00003B                     rand@screw:
  1469                           	opt stack 0
  1470  00003B                     	ds	1
  1471  00003C                     _ADC_Initialised:
  1472                           	opt stack 0
  1473  00003C                     	ds	1
  1474  00003D                     OutSeg@a:
  1475                           	opt stack 0
  1476  00003D                     	ds	1
  1477  00003E                     OutSeg@segset:
  1478                           	opt stack 0
  1479  00003E                     	ds	1
  1480  00003F                     OutSeg@cur:
  1481                           	opt stack 0
  1482  00003F                     	ds	1
  1483  000040                     _I2C1T:
  1484                           	opt stack 0
  1485  000040                     	ds	7
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1h	equ	0xFE2
  1494                           fsr1l	equ	0xFE1
  1495                           
  1496                           	psect	dataCOMRAM
  1497  000047                     __pdataCOMRAM:
  1498                           	opt stack 0
  1499  000047                     _gCursor:
  1500                           	opt stack 0
  1501  000047                     	ds	4
  1502  00004B                     _Bus_State:
  1503                           	opt stack 0
  1504  00004B                     	ds	1
  1505  00004C                     	ds	1
  1506  00004D                     	ds	1
  1507  00004E                     	ds	1
  1508  00004F                     _l:
  1509                           	opt stack 0
  1510  00004F                     	ds	1
  1511  000050                     _w:
  1512                           	opt stack 0
  1513  000050                     	ds	1
  1514                           tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           
  1524                           	psect	bssBANK0
  1525  000060                     __pbssBANK0:
  1526                           	opt stack 0
  1527  000060                     _gISR:
  1528                           	opt stack 0
  1529  000060                     	ds	3
  1530  000063                     _lQueue:
  1531                           	opt stack 0
  1532  000063                     	ds	3
  1533  000066                     _lStepFunction:
  1534                           	opt stack 0
  1535  000066                     	ds	3
  1536  000069                     _dist:
  1537                           	opt stack 0
  1538  000069                     	ds	2
  1539  00006B                     _angleToClosestWall:
  1540                           	opt stack 0
  1541  00006B                     	ds	2
  1542  00006D                     _IRValue:
  1543                           	opt stack 0
  1544  00006D                     	ds	2
  1545  00006F                     _Stepstomin:
  1546                           	opt stack 0
  1547  00006F                     	ds	2
  1548  000071                     _StepRotate:
  1549                           	opt stack 0
  1550  000071                     	ds	2
  1551  000073                     _angleTotal:
  1552                           	opt stack 0
  1553  000073                     	ds	2
  1554  000075                     _distanceTotal:
  1555                           	opt stack 0
  1556  000075                     	ds	2
  1557  000077                     _iRAngle:
  1558                           	opt stack 0
  1559  000077                     	ds	2
  1560  000079                     _iRDistance:
  1561                           	opt stack 0
  1562  000079                     	ds	2
  1563  00007B                     _pShiftVal:
  1564                           	opt stack 0
  1565  00007B                     	ds	2
  1566  00007D                     _val:
  1567                           	opt stack 0
  1568  00007D                     	ds	2
  1569  00007F                     _lMotor:
  1570                           	opt stack 0
  1571  00007F                     	ds	2
  1572  000081                     _lCurrent:
  1573                           	opt stack 0
  1574  000081                     	ds	2
  1575  000083                     _gBackcolour:
  1576                           	opt stack 0
  1577  000083                     	ds	2
  1578  000085                     _iRDropLeft:
  1579                           	opt stack 0
  1580  000085                     	ds	1
  1581  000086                     _iRDropRight:
  1582                           	opt stack 0
  1583  000086                     	ds	1
  1584  000087                     _iRBumpLeft:
  1585                           	opt stack 0
  1586  000087                     	ds	1
  1587  000088                     _iRBumpRight:
  1588                           	opt stack 0
  1589  000088                     	ds	1
  1590  000089                     Event_TestButton@j:
  1591                           	opt stack 0
  1592  000089                     	ds	1
  1593  00008A                     Timer2_Init@PRE:
  1594                           	opt stack 0
  1595  00008A                     	ds	1
  1596  00008B                     Timer2_Init@INDEX:
  1597                           	opt stack 0
  1598  00008B                     	ds	1
  1599  00008C                     Timer0_Init@PRE:
  1600                           	opt stack 0
  1601  00008C                     	ds	1
  1602  00008D                     _INDEX:
  1603                           	opt stack 0
  1604  00008D                     	ds	1
  1605  00008E                     _lBufferY:
  1606                           	opt stack 0
  1607  00008E                     	ds	1
  1608  00008F                     _lBufferX:
  1609                           	opt stack 0
  1610  00008F                     	ds	1
  1611  000090                     _clearall:
  1612                           	opt stack 0
  1613  000090                     	ds	1
  1614  000091                     _PortE:
  1615                           	opt stack 0
  1616  000091                     	ds	10
  1617  00009B                     _PortD:
  1618                           	opt stack 0
  1619  00009B                     	ds	10
  1620  0000A5                     _PortC:
  1621                           	opt stack 0
  1622  0000A5                     	ds	10
  1623  0000AF                     _Stepper:
  1624                           	opt stack 0
  1625  0000AF                     	ds	6
  1626  0000B5                     _ADC_AN0:
  1627                           	opt stack 0
  1628  0000B5                     	ds	5
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           postdec1	equ	0xFE5
  1636                           fsr1h	equ	0xFE2
  1637                           fsr1l	equ	0xFE1
  1638                           
  1639                           	psect	dataBANK0
  1640  0000F9                     __pdataBANK0:
  1641                           	opt stack 0
  1642  0000F9                     _TimerX:
  1643                           	opt stack 0
  1644  0000F9                     	ds	2
  1645  0000FB                     _MinDist:
  1646                           	opt stack 0
  1647  0000FB                     	ds	2
  1648  0000FD                     _gForecolour:
  1649                           	opt stack 0
  1650  0000FD                     	ds	2
  1651  0000FF                     _change:
  1652                           	opt stack 0
  1653  0000FF                     	ds	1
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postdec1	equ	0xFE5
  1661                           fsr1h	equ	0xFE2
  1662                           fsr1l	equ	0xFE1
  1663                           
  1664                           	psect	bssBANK3
  1665  000300                     __pbssBANK3:
  1666                           	opt stack 0
  1667  000300                     _lCBuffer:
  1668                           	opt stack 0
  1669  000300                     	ds	30
  1670  00031E                     _iRAngleSS:
  1671                           	opt stack 0
  1672  00031E                     	ds	4
  1673  000322                     _iRDistanceSS:
  1674                           	opt stack 0
  1675  000322                     	ds	4
  1676  000326                     Timer2_Init@DIV:
  1677                           	opt stack 0
  1678  000326                     	ds	4
  1679  00032A                     Timer0_Init@DIV:
  1680                           	opt stack 0
  1681  00032A                     	ds	4
  1682  00032E                     _I2C2_More:
  1683                           	opt stack 0
  1684  00032E                     	ds	3
  1685  000331                     _I2C1_More:
  1686                           	opt stack 0
  1687  000331                     	ds	3
  1688  000334                     _I2C2_Done:
  1689                           	opt stack 0
  1690  000334                     	ds	3
  1691  000337                     _I2C1_Done:
  1692                           	opt stack 0
  1693  000337                     	ds	3
  1694  00033A                     _angle:
  1695                           	opt stack 0
  1696  00033A                     	ds	2
  1697  00033C                     _mode:
  1698                           	opt stack 0
  1699  00033C                     	ds	2
  1700  00033E                     _dip:
  1701                           	opt stack 0
  1702  00033E                     	ds	2
  1703  000340                     _HMIBoard:
  1704                           	opt stack 0
  1705  000340                     	ds	58
  1706  00037A                     _SPI1:
  1707                           	opt stack 0
  1708  00037A                     	ds	11
  1709  000385                     _SPI2:
  1710                           	opt stack 0
  1711  000385                     	ds	11
  1712  000390                     _DIPSwitch:
  1713                           	opt stack 0
  1714  000390                     	ds	10
  1715  00039A                     _TestButton:
  1716                           	opt stack 0
  1717  00039A                     	ds	10
  1718  0003A4                     _PortG:
  1719                           	opt stack 0
  1720  0003A4                     	ds	10
  1721  0003AE                     _PortB:
  1722                           	opt stack 0
  1723  0003AE                     	ds	10
  1724  0003B8                     _PortA:
  1725                           	opt stack 0
  1726  0003B8                     	ds	10
  1727  0003C2                     _PortF:
  1728                           	opt stack 0
  1729  0003C2                     	ds	10
  1730  0003CC                     _I2C2T:
  1731                           	opt stack 0
  1732  0003CC                     	ds	7
  1733  0003D3                     _ADC_AN3:
  1734                           	opt stack 0
  1735  0003D3                     	ds	5
  1736  0003D8                     _ADC_AN2:
  1737                           	opt stack 0
  1738  0003D8                     	ds	5
  1739  0003DD                     _ADC_AN1:
  1740                           	opt stack 0
  1741  0003DD                     	ds	5
  1742  0003E2                     LCD_DrawRectangle@p4:
  1743                           	opt stack 0
  1744  0003E2                     	ds	4
  1745  0003E6                     LCD_DrawRectangle@p2:
  1746                           	opt stack 0
  1747  0003E6                     	ds	4
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           postdec1	equ	0xFE5
  1755                           fsr1h	equ	0xFE2
  1756                           fsr1l	equ	0xFE1
  1757                           
  1758                           	psect	dataBANK3
  1759  0003EA                     __pdataBANK3:
  1760                           	opt stack 0
  1761  0003EA                     Console_Render@F6956:
  1762                           	opt stack 0
  1763  0003EA                     	ds	4
  1764  0003EE                     _gLineSize:
  1765                           	opt stack 0
  1766  0003EE                     	ds	4
  1767  0003F2                     _gCharSize:
  1768                           	opt stack 0
  1769  0003F2                     	ds	4
  1770  0003F6                     _corner:
  1771                           	opt stack 0
  1772  0003F6                     	ds	2
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           
  1783                           	psect	bssBANK4
  1784  000400                     __pbssBANK4:
  1785                           	opt stack 0
  1786  000400                     _iRScriptStack:
  1787                           	opt stack 0
  1788  000400                     	ds	100
  1789  000464                     Console_MakeField@Fill:
  1790                           	opt stack 0
  1791  000464                     	ds	70
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1h	equ	0xFE2
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           	psect	bssBIGRAM
  1803  0004AC                     __pbssBIGRAM:
  1804                           	opt stack 0
  1805  0004AC                     _lBuffer:
  1806                           	opt stack 0
  1807  0004AC                     	ds	300
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK4
  1819  0004AA                     __pcstackBANK4:
  1820                           	opt stack 0
  1821  0004AA                     ??_main:
  1822                           
  1823                           ; 1 bytes @ 0x0
  1824  0004AA                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1h	equ	0xFE2
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835                           	psect	cstackBANK3
  1836  0003F8                     __pcstackBANK3:
  1837                           	opt stack 0
  1838  0003F8                     ??_move_and_rotate:
  1839  0003F8                     ??_findClosestWall:
  1840  0003F8                     ??_mode1:
  1841                           
  1842                           ; 1 bytes @ 0x0
  1843  0003F8                     	ds	2
  1844  0003FA                     mode1@moveto:
  1845                           	opt stack 0
  1846  0003FA                     _findClosestWall$15606:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0x2
  1850  0003FA                     	ds	2
  1851  0003FC                     _mode1$15608:
  1852                           	opt stack 0
  1853                           
  1854                           ; 4 bytes @ 0x4
  1855  0003FC                     	ds	4
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           postdec1	equ	0xFE5
  1863                           fsr1h	equ	0xFE2
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	cstackBANK2
  1867  000200                     __pcstackBANK2:
  1868                           	opt stack 0
  1869  000200                     irobot_query_and_update@TXArray:
  1870                           	opt stack 0
  1871                           
  1872                           ; 256 bytes @ 0x0
  1873  000200                     	ds	256
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1h	equ	0xFE2
  1882                           fsr1l	equ	0xFE1
  1883                           
  1884                           	psect	cstackBANK1
  1885  000100                     __pcstackBANK1:
  1886                           	opt stack 0
  1887  000100                     ??___fltol:
  1888  000100                     Port_SetType@Output:
  1889                           	opt stack 0
  1890  000100                     Button_Init@pInput:
  1891                           	opt stack 0
  1892  000100                     irobot_query_and_update@RXArray:
  1893                           	opt stack 0
  1894                           
  1895                           ; 256 bytes @ 0x0
  1896  000100                     	ds	1
  1897  000101                     Port_Init@pInput:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x1
  1901  000101                     	ds	1
  1902  000102                     Button_Init@pThreshold:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x2
  1906  000102                     	ds	1
  1907  000103                     Port_Init@pPort:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x3
  1911  000103                     	ds	1
  1912  000104                     ??_Port_Init:
  1913  000104                     Button_Init@pInitIO:
  1914                           	opt stack 0
  1915  000104                     _measureAndDisplayDistance$15607:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x4
  1919  000104                     	ds	2
  1920  000106                     Port_Init@i:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x6
  1924  000106                     	ds	1
  1925  000107                     Button_Init@pGetState:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x7
  1929  000107                     	ds	3
  1930  00010A                     Button_Init@pFunction:
  1931                           	opt stack 0
  1932                           
  1933                           ; 3 bytes @ 0xA
  1934  00010A                     	ds	246
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1h	equ	0xFE2
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	cstackBANK0
  1946  0000BA                     __pcstackBANK0:
  1947                           	opt stack 0
  1948  0000BA                     ??_Console_ClearCursor:
  1949  0000BA                     ??_ADC_SetChannel:
  1950  0000BA                     ??_ADC_ConversionTime:
  1951  0000BA                     ??_ADC_SetupIO:
  1952  0000BA                     ??_sort_iRBumpDrop:
  1953  0000BA                     ?_load_iRScriptStack:
  1954                           	opt stack 0
  1955  0000BA                     ??_Console_Init:
  1956  0000BA                     ??_Console_NewLine:
  1957  0000BA                     ??_Console_FormFeed:
  1958  0000BA                     ??_HMI_SetButton:
  1959  0000BA                     ?_GetPortProperties:
  1960                           	opt stack 0
  1961  0000BA                     ?_GetPortPORT:
  1962                           	opt stack 0
  1963  0000BA                     ?_GetPortTRIS:
  1964                           	opt stack 0
  1965  0000BA                     ?_twos_complement_of:
  1966                           	opt stack 0
  1967  0000BA                     ?___wmul:
  1968                           	opt stack 0
  1969  0000BA                     ?___awdiv:
  1970                           	opt stack 0
  1971  0000BA                     ?___lwdiv:
  1972                           	opt stack 0
  1973  0000BA                     ?___fldiv:
  1974                           	opt stack 0
  1975  0000BA                     ?___lldiv:
  1976                           	opt stack 0
  1977  0000BA                     ?___xxtofl:
  1978                           	opt stack 0
  1979  0000BA                     Mode_Set@pMode:
  1980                           	opt stack 0
  1981  0000BA                     ToSegment@pCHR:
  1982                           	opt stack 0
  1983  0000BA                     HMI_SetBar@pValue:
  1984                           	opt stack 0
  1985  0000BA                     ADC_ClockDivision@pDivide:
  1986                           	opt stack 0
  1987  0000BA                     get_packet_size@packetID:
  1988                           	opt stack 0
  1989  0000BA                     eusart_putch@eusartSendChar:
  1990                           	opt stack 0
  1991  0000BA                     Port_GetPin@pInput:
  1992                           	opt stack 0
  1993  0000BA                     Port_GetQuad@pInput:
  1994                           	opt stack 0
  1995  0000BA                     SPI_DisableISR@pInput:
  1996                           	opt stack 0
  1997  0000BA                     SPI_DCS@pInput:
  1998                           	opt stack 0
  1999  0000BA                     SPI_Send@pInput:
  2000                           	opt stack 0
  2001  0000BA                     Byte_SetBit@pInput:
  2002                           	opt stack 0
  2003  0000BA                     Byte_GetBit@pInput:
  2004                           	opt stack 0
  2005  0000BA                     Byte_SetZone@pInput:
  2006                           	opt stack 0
  2007  0000BA                     Byte_GetZone@pInput:
  2008                           	opt stack 0
  2009  0000BA                     Byte_SetByte@pInput:
  2010                           	opt stack 0
  2011  0000BA                     delay_ms@ms:
  2012                           	opt stack 0
  2013  0000BA                     delay_us@us:
  2014                           	opt stack 0
  2015  0000BA                     reverse@input:
  2016                           	opt stack 0
  2017  0000BA                     twos_complement_of@complementValue:
  2018                           	opt stack 0
  2019  0000BA                     ___wmul@multiplier:
  2020                           	opt stack 0
  2021  0000BA                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023  0000BA                     ___lwdiv@dividend:
  2024                           	opt stack 0
  2025  0000BA                     MXK_Queue@pCallback:
  2026                           	opt stack 0
  2027  0000BA                     Timer0_Start@pFunction:
  2028                           	opt stack 0
  2029  0000BA                     ___lldiv@dividend:
  2030                           	opt stack 0
  2031  0000BA                     ___fldiv@b:
  2032                           	opt stack 0
  2033  0000BA                     ___xxtofl@val:
  2034                           	opt stack 0
  2035                           
  2036                           ; 4 bytes @ 0x0
  2037  0000BA                     	ds	1
  2038  0000BB                     ADC_SetChannel@pChannel:
  2039                           	opt stack 0
  2040  0000BB                     ADC_ClockDivision@reg:
  2041                           	opt stack 0
  2042  0000BB                     ADC_ConversionTime@pCount:
  2043                           	opt stack 0
  2044  0000BB                     rx_assign@packetIDValue:
  2045                           	opt stack 0
  2046  0000BB                     irobot_song_play@songNumber:
  2047                           	opt stack 0
  2048  0000BB                     HMI_SetSegments@pString:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x1
  2052  0000BB                     	ds	1
  2053  0000BC                     GetPortProperties@pInput:
  2054                           	opt stack 0
  2055  0000BC                     GetPortPORT@pInput:
  2056                           	opt stack 0
  2057  0000BC                     GetPortTRIS@pInput:
  2058                           	opt stack 0
  2059  0000BC                     Port_GetPin@pPin:
  2060                           	opt stack 0
  2061  0000BC                     Port_GetQuad@pQuad:
  2062                           	opt stack 0
  2063  0000BC                     SPI_Send@pData:
  2064                           	opt stack 0
  2065  0000BC                     Byte_SetBit@pBit:
  2066                           	opt stack 0
  2067  0000BC                     Byte_GetBit@pBit:
  2068                           	opt stack 0
  2069  0000BC                     Byte_SetZone@pMax:
  2070                           	opt stack 0
  2071  0000BC                     Byte_GetZone@pMax:
  2072                           	opt stack 0
  2073  0000BC                     Byte_SetByte@pValue:
  2074                           	opt stack 0
  2075  0000BC                     Console_Init@x:
  2076                           	opt stack 0
  2077  0000BC                     Console_FormFeed@x:
  2078                           	opt stack 0
  2079  0000BC                     ADC_SetupIO@pChannel:
  2080                           	opt stack 0
  2081  0000BC                     ADC_ClockDivision@unfound:
  2082                           	opt stack 0
  2083  0000BC                     rx_assign@byteNumber:
  2084                           	opt stack 0
  2085  0000BC                     reverse@length:
  2086                           	opt stack 0
  2087  0000BC                     ADC_Start@pInput:
  2088                           	opt stack 0
  2089  0000BC                     ___wmul@multiplicand:
  2090                           	opt stack 0
  2091  0000BC                     ___awdiv@divisor:
  2092                           	opt stack 0
  2093  0000BC                     ___lwdiv@divisor:
  2094                           	opt stack 0
  2095  0000BC                     delay_ms@u:
  2096                           	opt stack 0
  2097  0000BC                     delay_us@u:
  2098                           	opt stack 0
  2099  0000BC                     HMI_SetButton@reindex:
  2100                           	opt stack 0
  2101                           
  2102                           ; 4 bytes @ 0x2
  2103  0000BC                     	ds	1
  2104  0000BD                     ??_Port_GetPin:
  2105  0000BD                     ??_Port_GetQuad:
  2106  0000BD                     ??_Byte_GetBit:
  2107  0000BD                     ??_rx_assign:
  2108  0000BD                     LCD_Write@mode:
  2109                           	opt stack 0
  2110  0000BD                     Byte_SetBit@pValue:
  2111                           	opt stack 0
  2112  0000BD                     Byte_SetZone@pChunk:
  2113                           	opt stack 0
  2114  0000BD                     Byte_GetZone@pChunk:
  2115                           	opt stack 0
  2116  0000BD                     Console_Init@y:
  2117                           	opt stack 0
  2118  0000BD                     Console_FormFeed@y:
  2119                           	opt stack 0
  2120  0000BD                     OutSeg@pSegment:
  2121                           	opt stack 0
  2122  0000BD                     ADC_SetupIO@MASK:
  2123                           	opt stack 0
  2124  0000BD                     Motor_Move@pMotor:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x3
  2128  0000BD                     	ds	1
  2129  0000BE                     ??_Byte_SetBit:
  2130  0000BE                     ??_Console_IncrementCursor:
  2131  0000BE                     ??_OutSeg:
  2132  0000BE                     ??_ADC_Start:
  2133  0000BE                     ??___xxtofl:
  2134  0000BE                     LCD_Write@value:
  2135                           	opt stack 0
  2136  0000BE                     Byte_GetBit@Output:
  2137                           	opt stack 0
  2138  0000BE                     Byte_SetZone@pChunkSize:
  2139                           	opt stack 0
  2140  0000BE                     Byte_GetZone@pChunkSize:
  2141                           	opt stack 0
  2142  0000BE                     reverse@tempVar:
  2143                           	opt stack 0
  2144  0000BE                     ___awdiv@counter:
  2145                           	opt stack 0
  2146  0000BE                     ___lwdiv@counter:
  2147                           	opt stack 0
  2148  0000BE                     HMI_SetSegments@in:
  2149                           	opt stack 0
  2150  0000BE                     ADC_Init@pInput:
  2151                           	opt stack 0
  2152  0000BE                     ___wmul@product:
  2153                           	opt stack 0
  2154  0000BE                     ___lldiv@divisor:
  2155                           	opt stack 0
  2156  0000BE                     ___fldiv@a:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0x4
  2160  0000BE                     	ds	1
  2161  0000BF                     ??_Byte_GetZone:
  2162  0000BF                     ?_Console_MakeField:
  2163                           	opt stack 0
  2164  0000BF                     Set_Addr_Window@ys:
  2165                           	opt stack 0
  2166  0000BF                     Set_Rotation@m:
  2167                           	opt stack 0
  2168  0000BF                     Port_GetPin@Output:
  2169                           	opt stack 0
  2170  0000BF                     Port_GetQuad@Output:
  2171                           	opt stack 0
  2172  0000BF                     Byte_SetZone@pValue:
  2173                           	opt stack 0
  2174  0000BF                     rx_assign@packetID:
  2175                           	opt stack 0
  2176  0000BF                     ___awdiv@sign:
  2177                           	opt stack 0
  2178  0000BF                     LCD_Word_Write@value:
  2179                           	opt stack 0
  2180  0000BF                     reverse@iterator:
  2181                           	opt stack 0
  2182  0000BF                     Motor_Move@pDelta:
  2183                           	opt stack 0
  2184  0000BF                     ___lwdiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x5
  2188  0000BF                     	ds	1
  2189  0000C0                     ?_irobot_query_and_update:
  2190                           	opt stack 0
  2191  0000C0                     ??_Byte_SetZone:
  2192  0000C0                     Set_Addr_Window@xe:
  2193                           	opt stack 0
  2194  0000C0                     Set_Rotation@rotation:
  2195                           	opt stack 0
  2196  0000C0                     Byte_GetZone@MASK:
  2197                           	opt stack 0
  2198  0000C0                     OutSeg@pInput:
  2199                           	opt stack 0
  2200  0000C0                     HMI_SetButton@pValue:
  2201                           	opt stack 0
  2202  0000C0                     ADC_Init@pChannel:
  2203                           	opt stack 0
  2204  0000C0                     MXK_BlockSwitchTo@CUR:
  2205                           	opt stack 0
  2206  0000C0                     MXK_SwitchTo@CUR:
  2207                           	opt stack 0
  2208  0000C0                     ___awdiv@quotient:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x6
  2212  0000C0                     	ds	1
  2213  0000C1                     ??_Console_MakeField:
  2214  0000C1                     ?___lwmod:
  2215                           	opt stack 0
  2216  0000C1                     Set_Addr_Window@ye:
  2217                           	opt stack 0
  2218  0000C1                     Byte_GetZone@Offset:
  2219                           	opt stack 0
  2220  0000C1                     OutSeg@out:
  2221                           	opt stack 0
  2222  0000C1                     HMI_SetButton@v:
  2223                           	opt stack 0
  2224  0000C1                     MXK_BlockSwitchTo@pModule:
  2225                           	opt stack 0
  2226  0000C1                     MXK_SwitchTo@pModule:
  2227                           	opt stack 0
  2228  0000C1                     ___lwmod@dividend:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x7
  2232  0000C1                     	ds	1
  2233  0000C2                     ??___fldiv:
  2234  0000C2                     ??_Console_Tab:
  2235  0000C2                     Set_Addr_Window@xs:
  2236                           	opt stack 0
  2237  0000C2                     Byte_GetZone@Output:
  2238                           	opt stack 0
  2239  0000C2                     ___xxtofl@sign:
  2240                           	opt stack 0
  2241  0000C2                     HMI_Render@a:
  2242                           	opt stack 0
  2243  0000C2                     ___lldiv@quotient:
  2244                           	opt stack 0
  2245                           
  2246                           ; 4 bytes @ 0x8
  2247  0000C2                     	ds	1
  2248  0000C3                     Byte_SetZone@Offset:
  2249                           	opt stack 0
  2250  0000C3                     ___xxtofl@exp:
  2251                           	opt stack 0
  2252  0000C3                     LCD_Fill@pColour:
  2253                           	opt stack 0
  2254  0000C3                     LCD_FillRectangle@pColour:
  2255                           	opt stack 0
  2256  0000C3                     Byte_GetPair@pInput:
  2257                           	opt stack 0
  2258  0000C3                     Console_MakeField@Index:
  2259                           	opt stack 0
  2260  0000C3                     ___lwmod@divisor:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x9
  2264  0000C3                     	ds	1
  2265  0000C4                     ??_load_iRScriptStack:
  2266  0000C4                     Byte_SetZone@MASK:
  2267                           	opt stack 0
  2268  0000C4                     ___xxtofl@arg:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0xA
  2272  0000C4                     	ds	1
  2273  0000C5                     LCD_Fill@i:
  2274                           	opt stack 0
  2275  0000C5                     Byte_GetPair@pPair:
  2276                           	opt stack 0
  2277  0000C5                     Console_MakeField@pInput:
  2278                           	opt stack 0
  2279  0000C5                     ___lwmod@counter:
  2280                           	opt stack 0
  2281  0000C5                     Byte_SetPair@pInput:
  2282                           	opt stack 0
  2283  0000C5                     Byte_SetQuad@pInput:
  2284                           	opt stack 0
  2285  0000C5                     LCD_FillRectangle@pPoint:
  2286                           	opt stack 0
  2287                           
  2288                           ; 4 bytes @ 0xB
  2289  0000C5                     	ds	1
  2290  0000C6                     LCD_Fill@j:
  2291                           	opt stack 0
  2292  0000C6                     ___lldiv@counter:
  2293                           	opt stack 0
  2294  0000C6                     ___fldiv@sign:
  2295                           	opt stack 0
  2296  0000C6                     Word_GetPair@pInput:
  2297                           	opt stack 0
  2298  0000C6                     itos@input:
  2299                           	opt stack 0
  2300  0000C6                     Console_MakeField@Column:
  2301                           	opt stack 0
  2302  0000C6                     load_iRScriptStack@loadByte:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0xC
  2306  0000C6                     	ds	1
  2307  0000C7                     Byte_SetPair@pPair:
  2308                           	opt stack 0
  2309  0000C7                     Byte_SetQuad@pQuad:
  2310                           	opt stack 0
  2311  0000C7                     Console_Tab@t:
  2312                           	opt stack 0
  2313  0000C7                     Timer0_Init@pFrequency:
  2314                           	opt stack 0
  2315  0000C7                     Timer2_Init@pFrequency:
  2316                           	opt stack 0
  2317  0000C7                     ___fldiv@rem:
  2318                           	opt stack 0
  2319                           
  2320                           ; 4 bytes @ 0xD
  2321  0000C7                     	ds	1
  2322  0000C8                     ?___flmul:
  2323                           	opt stack 0
  2324  0000C8                     Byte_SetPair@pValue:
  2325                           	opt stack 0
  2326  0000C8                     Byte_SetQuad@pValue:
  2327                           	opt stack 0
  2328  0000C8                     Word_GetPair@pPair:
  2329                           	opt stack 0
  2330  0000C8                     Console_Tab@i:
  2331                           	opt stack 0
  2332  0000C8                     load_iRScriptStack@bytesToLoad:
  2333                           	opt stack 0
  2334  0000C8                     itos@destination:
  2335                           	opt stack 0
  2336  0000C8                     _Console_MakeField$10974:
  2337                           	opt stack 0
  2338  0000C8                     ___flmul@b:
  2339                           	opt stack 0
  2340                           
  2341                           ; 4 bytes @ 0xE
  2342  0000C8                     	ds	1
  2343  0000C9                     Console_Tab@c:
  2344                           	opt stack 0
  2345  0000C9                     load_iRScriptStack@i:
  2346                           	opt stack 0
  2347  0000C9                     Port_SetPin@pInput:
  2348                           	opt stack 0
  2349  0000C9                     Port_Set@pInput:
  2350                           	opt stack 0
  2351  0000C9                     SPI_MinSpeed@pInput:
  2352                           	opt stack 0
  2353  0000C9                     SPI_MaxSpeed@pInput:
  2354                           	opt stack 0
  2355  0000C9                     Word_SetPair@pInput:
  2356                           	opt stack 0
  2357  0000C9                     PortProperty_Valid@pInput:
  2358                           	opt stack 0
  2359  0000C9                     LCD_FillRectangle@pSize:
  2360                           	opt stack 0
  2361                           
  2362                           ; 4 bytes @ 0xF
  2363  0000C9                     	ds	1
  2364  0000CA                     ??_irobot_query_and_update:
  2365  0000CA                     ??_Console_PrintChar:
  2366  0000CA                     Console_MakeField@x:
  2367                           	opt stack 0
  2368  0000CA                     irobot_leds@LEDBit:
  2369                           	opt stack 0
  2370  0000CA                     itos@Data:
  2371                           	opt stack 0
  2372  0000CA                     irobot_move@moveSpeed:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x10
  2376  0000CA                     	ds	1
  2377  0000CB                     ??_Timer2_Init:
  2378  0000CB                     ??_Timer0_Init:
  2379  0000CB                     Port_SetPin@pPin:
  2380                           	opt stack 0
  2381  0000CB                     Port_Set@pValue:
  2382                           	opt stack 0
  2383  0000CB                     Word_SetPair@pPair:
  2384                           	opt stack 0
  2385  0000CB                     PortProperty_Valid@pPinDrive:
  2386                           	opt stack 0
  2387  0000CB                     Console_MakeField@y:
  2388                           	opt stack 0
  2389  0000CB                     irobot_leds@powerColour:
  2390                           	opt stack 0
  2391  0000CB                     ___fldiv@new_exp:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x11
  2395  0000CB                     	ds	1
  2396  0000CC                     ??_Port_Set:
  2397  0000CC                     Port_SetPin@pValue:
  2398                           	opt stack 0
  2399  0000CC                     Word_SetPair@pValue:
  2400                           	opt stack 0
  2401  0000CC                     PortProperty_Valid@pPin:
  2402                           	opt stack 0
  2403  0000CC                     irobot_leds@powerLuminosity:
  2404                           	opt stack 0
  2405  0000CC                     LCD_DrawField@pField:
  2406                           	opt stack 0
  2407  0000CC                     itos@Length:
  2408                           	opt stack 0
  2409  0000CC                     irobot_move@moveTurnRadius:
  2410                           	opt stack 0
  2411  0000CC                     Timer2_Init@RDIV:
  2412                           	opt stack 0
  2413  0000CC                     ___flmul@a:
  2414                           	opt stack 0
  2415                           
  2416                           ; 4 bytes @ 0x12
  2417  0000CC                     	ds	1
  2418  0000CD                     ??_PortProperty_Valid:
  2419  0000CD                     ??_LCD_FillRectangle:
  2420  0000CD                     Port_SetPin@Type:
  2421                           	opt stack 0
  2422  0000CD                     Console_PrintChar@pInput:
  2423                           	opt stack 0
  2424  0000CD                     irobot_leds@isScript:
  2425                           	opt stack 0
  2426  0000CD                     Timer0_Init@pCPUClock:
  2427                           	opt stack 0
  2428  0000CD                     ___fldiv@grs:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x13
  2432  0000CD                     	ds	1
  2433  0000CE                     ??_irobot_move:
  2434  0000CE                     LED_Set@pValue:
  2435                           	opt stack 0
  2436  0000CE                     putch@c:
  2437                           	opt stack 0
  2438  0000CE                     irobot_led_power_on@powerOnColour:
  2439                           	opt stack 0
  2440  0000CE                     Port_TogglePin@pInput:
  2441                           	opt stack 0
  2442  0000CE                     itos@Out:
  2443                           	opt stack 0
  2444  0000CE                     LCD_DrawField@pPoint:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x14
  2448  0000CE                     	ds	1
  2449  0000CF                     ?_printf:
  2450                           	opt stack 0
  2451  0000CF                     LCD_FillRectangle@i:
  2452                           	opt stack 0
  2453  0000CF                     LED_Set@pLED:
  2454                           	opt stack 0
  2455  0000CF                     irobot_query_and_update@packetIDs:
  2456                           	opt stack 0
  2457  0000CF                     printf@f:
  2458                           	opt stack 0
  2459  0000CF                     PortProperty_Valid@Errors:
  2460                           	opt stack 0
  2461                           
  2462                           ; 16 bytes @ 0x15
  2463  0000CF                     	ds	1
  2464  0000D0                     ??___flmul:
  2465  0000D0                     LCD_FillRectangle@j:
  2466                           	opt stack 0
  2467  0000D0                     Port_TogglePin@pPin:
  2468                           	opt stack 0
  2469  0000D0                     HMI_SetNumber@pInput:
  2470                           	opt stack 0
  2471  0000D0                     Timer2_Init@pCPUClock:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x16
  2475  0000D0                     	ds	1
  2476  0000D1                     Port_TogglePin@Value:
  2477                           	opt stack 0
  2478  0000D1                     irobot_query_and_update@streamSize:
  2479                           	opt stack 0
  2480  0000D1                     ___fldiv@bexp:
  2481                           	opt stack 0
  2482  0000D1                     Timer0_Init@DIVIDE:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x17
  2486  0000D1                     	ds	1
  2487  0000D2                     LED_Toggle@pLED:
  2488                           	opt stack 0
  2489  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2490                           	opt stack 0
  2491  0000D2                     irobot_move@isScript:
  2492                           	opt stack 0
  2493  0000D2                     ___fldiv@aexp:
  2494                           	opt stack 0
  2495  0000D2                     LCD_DrawField@pSize:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x18
  2499  0000D2                     	ds	1
  2500  0000D3                     Event_DIPSwitch@pState:
  2501                           	opt stack 0
  2502  0000D3                     Event_TestButton@pState:
  2503                           	opt stack 0
  2504  0000D3                     irobot_query_and_update@packetVariable:
  2505                           	opt stack 0
  2506  0000D3                     irobot_stop_motion@isScript:
  2507                           	opt stack 0
  2508  0000D3                     irobot_move_straight@straightSpeed:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x19
  2512  0000D3                     	ds	1
  2513  0000D4                     Event_DIPSwitch@Bar:
  2514                           	opt stack 0
  2515  0000D4                     irobot_query_and_update@j:
  2516                           	opt stack 0
  2517  0000D4                     ___flmul@sign:
  2518                           	opt stack 0
  2519  0000D4                     Timer2_Init@DIVIDE:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x1A
  2523  0000D4                     	ds	1
  2524  0000D5                     irobot_query_and_update@startIndex:
  2525                           	opt stack 0
  2526  0000D5                     ___flmul@aexp:
  2527                           	opt stack 0
  2528  0000D5                     Button_Poll@pButton:
  2529                           	opt stack 0
  2530  0000D5                     Motor_Speed@pMotor:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1B
  2534  0000D5                     	ds	1
  2535  0000D6                     ??_LCD_DrawField:
  2536  0000D6                     irobot_query_and_update@i:
  2537                           	opt stack 0
  2538  0000D6                     ___flmul@grs:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x1C
  2542  0000D6                     	ds	1
  2543  0000D7                     Button_Poll@pIncrement:
  2544                           	opt stack 0
  2545  0000D7                     Motor_Speed@pFrequency:
  2546                           	opt stack 0
  2547  0000D7                     irobot_rotate@rotateAngle:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x1D
  2551  0000D7                     	ds	1
  2552  0000D8                     ??_Button_Poll:
  2553  0000D8                     LCD_DrawField@count:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x1E
  2557  0000D8                     	ds	1
  2558  0000D9                     irobot_rotate@rotateSpeed:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x1F
  2562  0000D9                     	ds	1
  2563  0000DA                     LCD_DrawField@xmax:
  2564                           	opt stack 0
  2565  0000DA                     ___flmul@bexp:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x20
  2569  0000DA                     	ds	1
  2570  0000DB                     ??_printf:
  2571  0000DB                     ??_irobot_rotate:
  2572  0000DB                     LCD_DrawField@ymax:
  2573                           	opt stack 0
  2574  0000DB                     ___flmul@prod:
  2575                           	opt stack 0
  2576                           
  2577                           ; 4 bytes @ 0x21
  2578  0000DB                     	ds	1
  2579  0000DC                     LCD_DrawField@i:
  2580                           	opt stack 0
  2581  0000DC                     printf@prec:
  2582                           	opt stack 0
  2583  0000DC                     Port_Set@TypeRequired:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x22
  2587  0000DC                     	ds	1
  2588  0000DD                     ??_Console_Render:
  2589  0000DD                     Button_Poll@Pin:
  2590                           	opt stack 0
  2591  0000DD                     irobot_rotate@isScript:
  2592                           	opt stack 0
  2593  0000DD                     printf@flag:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x23
  2597  0000DD                     	ds	1
  2598  0000DE                     Port_Set@TypeActual:
  2599                           	opt stack 0
  2600  0000DE                     irobot_rotate@rotateDirection:
  2601                           	opt stack 0
  2602  0000DE                     printf@ap:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x24
  2606  0000DE                     	ds	1
  2607  0000DF                     PortProperty_Valid@Pair:
  2608                           	opt stack 0
  2609  0000DF                     Console_Render@temp:
  2610                           	opt stack 0
  2611  0000DF                     ___flmul@temp:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x25
  2615  0000DF                     	ds	1
  2616  0000E0                     Port_Set@Type:
  2617                           	opt stack 0
  2618  0000E0                     Port_CheckPairType@pInput:
  2619                           	opt stack 0
  2620  0000E0                     Port_SetPinType@pInput:
  2621                           	opt stack 0
  2622  0000E0                     irobot_rotate@angleTotal:
  2623                           	opt stack 0
  2624  0000E0                     printf@val:
  2625                           	opt stack 0
  2626  0000E0                     Console_Render@lCursor:
  2627                           	opt stack 0
  2628                           
  2629                           ; 4 bytes @ 0x26
  2630  0000E0                     	ds	1
  2631  0000E1                     ?_ADC_Voltage:
  2632                           	opt stack 0
  2633  0000E1                     ADC_Voltage@pInput:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0x27
  2637  0000E1                     	ds	1
  2638  0000E2                     Port_CheckPairType@pPair:
  2639                           	opt stack 0
  2640  0000E2                     Port_SetPinType@pPin:
  2641                           	opt stack 0
  2642  0000E2                     printf@c:
  2643                           	opt stack 0
  2644                           
  2645                           ; 1 bytes @ 0x28
  2646  0000E2                     	ds	1
  2647  0000E3                     Port_CheckPairType@pDrive:
  2648                           	opt stack 0
  2649  0000E3                     Port_SetPinType@pType:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x29
  2653  0000E3                     	ds	1
  2654  0000E4                     Port_CheckPairType@Pin1:
  2655                           	opt stack 0
  2656  0000E4                     Port_SetPinType@Output:
  2657                           	opt stack 0
  2658  0000E4                     Console_Render@x:
  2659                           	opt stack 0
  2660                           
  2661                           ; 1 bytes @ 0x2A
  2662  0000E4                     	ds	1
  2663  0000E5                     ??_ADC_Voltage:
  2664  0000E5                     Port_CheckPairType@Pin2:
  2665                           	opt stack 0
  2666  0000E5                     Console_Render@y:
  2667                           	opt stack 0
  2668  0000E5                     Port_SetPinType@Props:
  2669                           	opt stack 0
  2670                           
  2671                           ; 2 bytes @ 0x2B
  2672  0000E5                     	ds	1
  2673  0000E6                     Port_CheckPairType@Output:
  2674                           	opt stack 0
  2675                           
  2676                           ; 1 bytes @ 0x2C
  2677  0000E6                     	ds	1
  2678  0000E7                     LED_Init@pLED:
  2679                           	opt stack 0
  2680  0000E7                     Port_CheckPairType@Props:
  2681                           	opt stack 0
  2682  0000E7                     Motor_Init@pMotor:
  2683                           	opt stack 0
  2684  0000E7                     SPI_Init@pClock:
  2685                           	opt stack 0
  2686  0000E7                     ADC_Voltage@max:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x2D
  2690  0000E7                     	ds	2
  2691  0000E9                     Port_CheckQuadType@pInput:
  2692                           	opt stack 0
  2693  0000E9                     Motor_Init@pAddress:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x2F
  2697  0000E9                     	ds	2
  2698  0000EB                     Port_CheckQuadType@pQuad:
  2699                           	opt stack 0
  2700  0000EB                     SPI_Init@pChannel:
  2701                           	opt stack 0
  2702  0000EB                     ADC_Voltage@ref:
  2703                           	opt stack 0
  2704                           
  2705                           ; 4 bytes @ 0x31
  2706  0000EB                     	ds	1
  2707  0000EC                     Port_CheckQuadType@pDrive:
  2708                           	opt stack 0
  2709  0000EC                     SPI_Init@pMode:
  2710                           	opt stack 0
  2711                           
  2712                           ; 1 bytes @ 0x32
  2713  0000EC                     	ds	1
  2714  0000ED                     Port_CheckQuadType@Pair1:
  2715                           	opt stack 0
  2716  0000ED                     SPI_Init@pInput:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x33
  2720  0000ED                     	ds	1
  2721  0000EE                     Port_CheckQuadType@Pair2:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x34
  2725  0000EE                     	ds	1
  2726  0000EF                     ??_LCD_Init:
  2727  0000EF                     Port_CheckQuadType@Output:
  2728                           	opt stack 0
  2729  0000EF                     ADC_Voltage@output:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x35
  2733  0000EF                     	ds	1
  2734  0000F0                     Port_CheckPortType@pInput:
  2735                           	opt stack 0
  2736  0000F0                     Port_SetQuadType@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x36
  2740  0000F0                     	ds	1
  2741  0000F1                     LCD_Init@i:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x37
  2745  0000F1                     	ds	1
  2746  0000F2                     Port_CheckPortType@pDrive:
  2747                           	opt stack 0
  2748  0000F2                     Port_SetQuadType@pQuad:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x38
  2752  0000F2                     	ds	1
  2753  0000F3                     ?___fltol:
  2754                           	opt stack 0
  2755  0000F3                     Port_CheckPortType@Output:
  2756                           	opt stack 0
  2757  0000F3                     Port_SetQuadType@pType:
  2758                           	opt stack 0
  2759  0000F3                     ___fltol@f1:
  2760                           	opt stack 0
  2761                           
  2762                           ; 4 bytes @ 0x39
  2763  0000F3                     	ds	1
  2764  0000F4                     Port_SetQuadType@Output:
  2765                           	opt stack 0
  2766  0000F4                     Port_SetType@pInput:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x3A
  2770  0000F4                     	ds	1
  2771  0000F5                     HMI_Init@in:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x3B
  2775  0000F5                     	ds	1
  2776  0000F6                     Port_SetType@pType:
  2777                           	opt stack 0
  2778                           
  2779                           ; 1 bytes @ 0x3C
  2780  0000F6                     	ds	1
  2781  0000F7                     ??_Port_SetType:
  2782  0000F7                     ___fltol@sign1:
  2783                           	opt stack 0
  2784                           
  2785                           ; 1 bytes @ 0x3D
  2786  0000F7                     	ds	1
  2787  0000F8                     ___fltol@exp1:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x3E
  2791  0000F8                     	ds	1
  2792  0000F9                     tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           postinc0	equ	0xFEE
  2797                           wreg	equ	0xFE8
  2798                           postdec1	equ	0xFE5
  2799                           fsr1h	equ	0xFE2
  2800                           fsr1l	equ	0xFE1
  2801                           
  2802                           ; 1 bytes @ 0x3F
  2803                           
  2804                           	psect	cstackCOMRAM
  2805  000001                     __pcstackCOMRAM:
  2806                           	opt stack 0
  2807  000001                     i2Byte_SetBit@pInput:
  2808                           	opt stack 0
  2809  000001                     i2Byte_GetZone@pInput:
  2810                           	opt stack 0
  2811  000001                     i2delay_us@us:
  2812                           	opt stack 0
  2813  000001                     i2MXK_Queue@pCallback:
  2814                           	opt stack 0
  2815                           
  2816                           ; 3 bytes @ 0x0
  2817  000001                     	ds	2
  2818  000003                     i2Byte_SetBit@pBit:
  2819                           	opt stack 0
  2820  000003                     i2Byte_GetZone@pMax:
  2821                           	opt stack 0
  2822  000003                     i2delay_us@u:
  2823                           	opt stack 0
  2824                           
  2825                           ; 4 bytes @ 0x2
  2826  000003                     	ds	1
  2827  000004                     i2Byte_SetBit@pValue:
  2828                           	opt stack 0
  2829  000004                     i2Byte_GetZone@pChunk:
  2830                           	opt stack 0
  2831                           
  2832                           ; 1 bytes @ 0x3
  2833  000004                     	ds	1
  2834  000005                     ??i2_Byte_SetBit:
  2835  000005                     i2Byte_GetZone@pChunkSize:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x4
  2839  000005                     	ds	1
  2840  000006                     ??i2_Byte_GetZone:
  2841                           
  2842                           ; 1 bytes @ 0x5
  2843  000006                     	ds	1
  2844  000007                     i2Byte_GetZone@MASK:
  2845                           	opt stack 0
  2846  000007                     i2MXK_SwitchTo@CUR:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0x6
  2850  000007                     	ds	1
  2851  000008                     i2Byte_GetZone@Offset:
  2852                           	opt stack 0
  2853  000008                     i2MXK_SwitchTo@pModule:
  2854                           	opt stack 0
  2855                           
  2856                           ; 1 bytes @ 0x7
  2857  000008                     	ds	1
  2858  000009                     i2Byte_GetZone@Output:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x8
  2862  000009                     	ds	1
  2863  00000A                     i2Byte_GetPair@pInput:
  2864                           	opt stack 0
  2865                           
  2866                           ; 2 bytes @ 0x9
  2867  00000A                     	ds	2
  2868  00000C                     i2Byte_GetPair@pPair:
  2869                           	opt stack 0
  2870                           
  2871                           ; 1 bytes @ 0xB
  2872  00000C                     	ds	1
  2873  00000D                     i2Word_GetPair@pInput:
  2874                           	opt stack 0
  2875                           
  2876                           ; 2 bytes @ 0xC
  2877  00000D                     	ds	2
  2878  00000F                     i2Word_GetPair@pPair:
  2879                           	opt stack 0
  2880                           
  2881                           ; 1 bytes @ 0xE
  2882  00000F                     	ds	1
  2883  000010                     i2Port_SetPin@pInput:
  2884                           	opt stack 0
  2885                           
  2886                           ; 2 bytes @ 0xF
  2887  000010                     	ds	2
  2888  000012                     i2Port_SetPin@pPin:
  2889                           	opt stack 0
  2890                           
  2891                           ; 1 bytes @ 0x11
  2892  000012                     	ds	1
  2893  000013                     i2Port_SetPin@pValue:
  2894                           	opt stack 0
  2895                           
  2896                           ; 1 bytes @ 0x12
  2897  000013                     	ds	1
  2898  000014                     i2Port_SetPin@Type:
  2899                           	opt stack 0
  2900                           
  2901                           ; 1 bytes @ 0x13
  2902  000014                     	ds	1
  2903  000015                     
  2904                           ; 1 bytes @ 0x14
  2905  000015                     	ds	2
  2906  000017                     ??_ISR_Function:
  2907                           
  2908                           ; 1 bytes @ 0x16
  2909  000017                     	ds	18
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           postdec1	equ	0xFE5
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           
  2920 ;;
  2921 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2922 ;;
  2923 ;; *************** function _main *****************
  2924 ;; Defined at:
  2925 ;;		line 371 in file "main.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        2 bytes
  2944 ;; Hardware stack levels required when called:   18
  2945 ;; This function calls:
  2946 ;;		_Console_Render
  2947 ;;		_HMI_Poll
  2948 ;;		_MXK_Dequeue
  2949 ;;		_MXK_Release
  2950 ;;		_MXK_SwitchTo
  2951 ;;		_getMode
  2952 ;;		_init
  2953 ;;		_measureAndDisplayDistance
  2954 ;;		_mode1
  2955 ;;		_mode2
  2956 ;;		_mode3
  2957 ;;		_mode4
  2958 ;;		_printf
  2959 ;; This function is called by:
  2960 ;;		Startup code after reset
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text0
  2965  013B72                     __ptext0:
  2966                           	opt stack 0
  2967  013B72                     _main:
  2968                           	opt stack 13
  2969                           
  2970                           ;main.c: 372: init();
  2971                           
  2972                           ;incstack = 0
  2973  013B72  EC9B  F0A4         	call	_init	;wreg free
  2974  013B76                     l2416:
  2975                           
  2976                           ;main.c: 374: getMode();
  2977  013B76  EC6D  F0A1         	call	_getMode	;wreg free
  2978                           
  2979                           ;main.c: 375: switch (mode) {
  2980  013B7A  D053               	goto	l2417
  2981  013B7C                     
  2982                           ;main.c: 377: mode1();
  2983  013B7C  EC6A  F086         	call	_mode1	;wreg free
  2984                           
  2985                           ;main.c: 378: break;
  2986  013B80  D068               	goto	l2419
  2987  013B82                     
  2988                           ;main.c: 380: mode2();
  2989  013B82  EC44  F09D         	call	_mode2	;wreg free
  2990                           
  2991                           ;main.c: 381: break;
  2992  013B86  D065               	goto	l2419
  2993  013B88                     
  2994                           ;main.c: 383: mode3();
  2995  013B88  ECDC  F0B0         	call	_mode3	;wreg free
  2996                           
  2997                           ;main.c: 384: break;
  2998  013B8C  D062               	goto	l2419
  2999  013B8E                     
  3000                           ;main.c: 386: mode4();
  3001  013B8E  ECBA  F09A         	call	_mode4	;wreg free
  3002                           
  3003                           ;main.c: 387: break;
  3004  013B92  D05F               	goto	l2419
  3005  013B94                     
  3006                           ;main.c: 389: if (MXK_SwitchTo(eMXK_HMI)) {
  3007  013B94  0E01               	movlw	1
  3008  013B96  ECFF  F0AF         	call	_MXK_SwitchTo
  3009  013B9A  0900               	iorlw	0
  3010  013B9C  B4D8               	btfsc	status,2,c
  3011  013B9E  D059               	goto	l2419
  3012                           
  3013                           ;main.c: 390: printf("%c", (char)35);
  3014  013BA0  0EFB               	movlw	low STR_1
  3015  013BA2  0100               	movlb	0	; () banked
  3016  013BA4  6FCF               	movwf	printf@f& (0+255),b
  3017  013BA6  0EFF               	movlw	high STR_1
  3018  013BA8  0100               	movlb	0	; () banked
  3019  013BAA  6FD0               	movwf	(printf@f+1)& (0+255),b
  3020  013BAC  0E00               	movlw	0
  3021  013BAE  0100               	movlb	0	; () banked
  3022  013BB0  6FD2               	movwf	(?_printf+3)& (0+255),b
  3023  013BB2  0E23               	movlw	35
  3024  013BB4  6FD1               	movwf	(?_printf+2)& (0+255),b
  3025  013BB6  EC7F  F092         	call	_printf	;wreg free
  3026                           
  3027                           ;main.c: 391: printf("Please select mode.\n");
  3028  013BBA  0ED8               	movlw	low STR_14
  3029  013BBC  0100               	movlb	0	; () banked
  3030  013BBE  6FCF               	movwf	printf@f& (0+255),b
  3031  013BC0  0EFF               	movlw	high STR_14
  3032  013BC2  0100               	movlb	0	; () banked
  3033  013BC4  6FD0               	movwf	(printf@f+1)& (0+255),b
  3034  013BC6  EC7F  F092         	call	_printf	;wreg free
  3035                           
  3036                           ;main.c: 392: printf("                   \n");
  3037  013BCA  0EC3               	movlw	low STR_15
  3038  013BCC  0100               	movlb	0	; () banked
  3039  013BCE  6FCF               	movwf	printf@f& (0+255),b
  3040  013BD0  0EFF               	movlw	high STR_15
  3041  013BD2  0100               	movlb	0	; () banked
  3042  013BD4  6FD0               	movwf	(printf@f+1)& (0+255),b
  3043  013BD6  EC7F  F092         	call	_printf	;wreg free
  3044                           
  3045                           ;main.c: 393: printf("                   \n");
  3046  013BDA  0EC3               	movlw	low STR_15
  3047  013BDC  0100               	movlb	0	; () banked
  3048  013BDE  6FCF               	movwf	printf@f& (0+255),b
  3049  013BE0  0EFF               	movlw	high STR_15
  3050  013BE2  0100               	movlb	0	; () banked
  3051  013BE4  6FD0               	movwf	(printf@f+1)& (0+255),b
  3052  013BE6  EC7F  F092         	call	_printf	;wreg free
  3053                           
  3054                           ;main.c: 394: printf("                   \n");
  3055  013BEA  0EC3               	movlw	low STR_15
  3056  013BEC  0100               	movlb	0	; () banked
  3057  013BEE  6FCF               	movwf	printf@f& (0+255),b
  3058  013BF0  0EFF               	movlw	high STR_15
  3059  013BF2  0100               	movlb	0	; () banked
  3060  013BF4  6FD0               	movwf	(printf@f+1)& (0+255),b
  3061  013BF6  EC7F  F092         	call	_printf	;wreg free
  3062                           
  3063                           ;main.c: 395: printf("                   \n");
  3064  013BFA  0EC3               	movlw	low STR_15
  3065  013BFC  0100               	movlb	0	; () banked
  3066  013BFE  6FCF               	movwf	printf@f& (0+255),b
  3067  013C00  0EFF               	movlw	high STR_15
  3068  013C02  0100               	movlb	0	; () banked
  3069  013C04  6FD0               	movwf	(printf@f+1)& (0+255),b
  3070  013C06  EC7F  F092         	call	_printf	;wreg free
  3071                           
  3072                           ;main.c: 396: Console_Render();
  3073  013C0A  EC93  F08F         	call	_Console_Render	;wreg free
  3074                           
  3075                           ;main.c: 397: HMI_Poll();
  3076  013C0E  ECF5  F0AA         	call	_HMI_Poll	;wreg free
  3077                           
  3078                           ;main.c: 398: if (MXK_Release())
  3079  013C12  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3080  013C16  0900               	iorlw	0
  3081  013C18  B4D8               	btfsc	status,2,c
  3082  013C1A  D01B               	goto	l2419
  3083                           
  3084                           ;main.c: 399: MXK_Dequeue();
  3085  013C1C  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3086                           
  3087                           ;main.c: 400: }
  3088                           ;main.c: 401: }
  3089  013C20  D018               	goto	l2419
  3090  013C22                     l2417:
  3091  013C22  C33C  F4AA         	movff	_mode,??_main
  3092  013C26  C33D  F4AB         	movff	_mode+1,??_main+1
  3093                           
  3094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3095                           ; Switch size 1, requested type "space"
  3096                           ; Number of cases is 1, Range of values is 0 to 0
  3097                           ; switch strategies available:
  3098                           ; Name         Instructions Cycles
  3099                           ; simple_byte            4     3 (average)
  3100                           ;	Chosen strategy is simple_byte
  3101  013C2A  0104               	movlb	4	; () banked
  3102  013C2C  51AB               	movf	(??_main+1)& (0+255),w,b
  3103  013C2E  0A00               	xorlw	0	; case 0
  3104  013C30  A4D8               	btfss	status,2,c
  3105  013C32  D7B0               	goto	l2423
  3106                           
  3107                           ; BSR set to: 4
  3108                           ; Switch size 1, requested type "space"
  3109                           ; Number of cases is 4, Range of values is 1 to 4
  3110                           ; switch strategies available:
  3111                           ; Name         Instructions Cycles
  3112                           ; simple_byte           13     7 (average)
  3113                           ;	Chosen strategy is simple_byte
  3114  013C34  0104               	movlb	4	; () banked
  3115  013C36  51AA               	movf	??_main& (0+255),w,b
  3116  013C38  0A01               	xorlw	1	; case 1
  3117  013C3A  B4D8               	btfsc	status,2,c
  3118  013C3C  D79F               	goto	l2418
  3119  013C3E  0A03               	xorlw	3	; case 2
  3120  013C40  B4D8               	btfsc	status,2,c
  3121  013C42  D79F               	goto	l2420
  3122  013C44  0A01               	xorlw	1	; case 3
  3123  013C46  B4D8               	btfsc	status,2,c
  3124  013C48  D79F               	goto	l2421
  3125  013C4A  0A07               	xorlw	7	; case 4
  3126  013C4C  B4D8               	btfsc	status,2,c
  3127  013C4E  D79F               	goto	l2422
  3128  013C50  D7A1               	goto	l2423
  3129  013C52                     l2419:
  3130                           
  3131                           ;main.c: 402: measureAndDisplayDistance();
  3132                           
  3133                           ; BSR set to: 4
  3134  013C52  EC8A  F0A6         	call	_measureAndDisplayDistance	;wreg free
  3135                           
  3136                           ;main.c: 403: }
  3137  013C56  D78F               	goto	l2416
  3138  013C58                     __end_of_main:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _mode4 *****************
  3152 ;; Defined at:
  3153 ;;		line 345 in file "main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:        0 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:   17
  3174 ;; This function calls:
  3175 ;;		_Console_Render
  3176 ;;		_MXK_Dequeue
  3177 ;;		_MXK_Release
  3178 ;;		_MXK_SwitchTo
  3179 ;;		_delay_ms
  3180 ;;		_findClosestWall
  3181 ;;		_irobot_move_straight
  3182 ;;		_irobot_song_play
  3183 ;;		_irobot_stop_motion
  3184 ;;		_printf
  3185 ;;		_safeToGo
  3186 ;;		_update_bump_and_cliff
  3187 ;;		_update_distance
  3188 ;; This function is called by:
  3189 ;;		_main
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text1
  3194  013574                     __ptext1:
  3195                           	opt stack 0
  3196  013574                     _mode4:
  3197                           	opt stack 13
  3198                           
  3199                           ;main.c: 346: safeToGo();
  3200                           
  3201                           ;incstack = 0
  3202  013574  ECBE  F0AE         	call	_safeToGo	;wreg free
  3203                           
  3204                           ;main.c: 347: findClosestWall();
  3205  013578  EC62  F084         	call	_findClosestWall	;wreg free
  3206                           
  3207                           ;main.c: 348: delay_ms(100);
  3208  01357C  0E00               	movlw	0
  3209  01357E  0100               	movlb	0	; () banked
  3210  013580  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3211  013582  0E64               	movlw	100
  3212  013584  6FBA               	movwf	delay_ms@ms& (0+255),b
  3213  013586  EC08  F0AC         	call	_delay_ms	;wreg free
  3214                           
  3215                           ;main.c: 349: irobot_move_straight(200);
  3216  01358A  0E00               	movlw	0
  3217  01358C  0100               	movlb	0	; () banked
  3218  01358E  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3219  013590  0EC8               	movlw	200
  3220  013592  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3221  013594  EC74  F0B3         	call	_irobot_move_straight	;wreg free
  3222                           
  3223                           ;main.c: 350: dist = 0;
  3224  013598  0E00               	movlw	0
  3225  01359A  0100               	movlb	0	; () banked
  3226  01359C  6F6A               	movwf	(_dist+1)& (0+255),b
  3227  01359E  0E00               	movlw	0
  3228  0135A0  6F69               	movwf	_dist& (0+255),b
  3229                           
  3230                           ;main.c: 351: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3231  0135A2  D00C               	goto	l2404
  3232  0135A4                     
  3233                           ; BSR set to: 0
  3234                           ;main.c: 352: update_distance();
  3235                           
  3236                           ; BSR set to: 0
  3237  0135A4  ECE8  F0B3         	call	_update_distance	;wreg free
  3238                           
  3239                           ;main.c: 353: dist += iRDistance;
  3240  0135A8  0100               	movlb	0	; () banked
  3241  0135AA  5179               	movf	_iRDistance& (0+255),w,b
  3242  0135AC  0100               	movlb	0	; () banked
  3243  0135AE  2769               	addwf	_dist& (0+255),f,b
  3244  0135B0  0100               	movlb	0	; () banked
  3245  0135B2  517A               	movf	(_iRDistance+1)& (0+255),w,b
  3246  0135B4  0100               	movlb	0	; () banked
  3247  0135B6  236A               	addwfc	(_dist+1)& (0+255),f,b
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 354: update_bump_and_cliff();
  3251  0135B8  EC18  F0B1         	call	_update_bump_and_cliff	;wreg free
  3252  0135BC                     l2404:
  3253  0135BC  0100               	movlb	0	; () banked
  3254  0135BE  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3255  0135C0  D008               	goto	u14090
  3256  0135C2  0E2C               	movlw	44
  3257  0135C4  0100               	movlb	0	; () banked
  3258  0135C6  5D69               	subwf	_dist& (0+255),w,b
  3259  0135C8  0E01               	movlw	1
  3260  0135CA  0100               	movlb	0	; () banked
  3261  0135CC  596A               	subwfb	(_dist+1)& (0+255),w,b
  3262  0135CE  B0D8               	btfsc	status,0,c
  3263  0135D0  D010               	goto	u14130
  3264  0135D2                     u14090:
  3265                           
  3266                           ; BSR set to: 0
  3267  0135D2  0100               	movlb	0	; () banked
  3268  0135D4  5187               	movf	_iRBumpLeft& (0+255),w,b
  3269  0135D6  A4D8               	btfss	status,2,c
  3270  0135D8  D00C               	goto	u14130
  3271                           
  3272                           ; BSR set to: 0
  3273  0135DA  0100               	movlb	0	; () banked
  3274  0135DC  5188               	movf	_iRBumpRight& (0+255),w,b
  3275  0135DE  A4D8               	btfss	status,2,c
  3276  0135E0  D008               	goto	u14130
  3277                           
  3278                           ; BSR set to: 0
  3279  0135E2  0100               	movlb	0	; () banked
  3280  0135E4  5186               	movf	_iRDropRight& (0+255),w,b
  3281  0135E6  A4D8               	btfss	status,2,c
  3282  0135E8  D004               	goto	u14130
  3283                           
  3284                           ; BSR set to: 0
  3285  0135EA  0100               	movlb	0	; () banked
  3286  0135EC  5185               	movf	_iRDropLeft& (0+255),w,b
  3287  0135EE  B4D8               	btfsc	status,2,c
  3288  0135F0  D7D9               	goto	l2405
  3289  0135F2                     u14130:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;main.c: 355: }
  3293                           ;main.c: 357: irobot_stop_motion(0);
  3294                           
  3295                           ; BSR set to: 0
  3296                           
  3297                           ; BSR set to: 0
  3298  0135F2  0E00               	movlw	0
  3299  0135F4  EC74  F0AF         	call	_irobot_stop_motion
  3300                           
  3301                           ;main.c: 358: if (MXK_SwitchTo(eMXK_HMI)) {
  3302  0135F8  0E01               	movlw	1
  3303  0135FA  ECFF  F0AF         	call	_MXK_SwitchTo
  3304  0135FE  0900               	iorlw	0
  3305  013600  B4D8               	btfsc	status,2,c
  3306  013602  D037               	goto	l2410
  3307                           
  3308                           ;main.c: 359: printf("%c", (char)35);
  3309  013604  0EFB               	movlw	low STR_1
  3310  013606  0100               	movlb	0	; () banked
  3311  013608  6FCF               	movwf	printf@f& (0+255),b
  3312  01360A  0EFF               	movlw	high STR_1
  3313  01360C  0100               	movlb	0	; () banked
  3314  01360E  6FD0               	movwf	(printf@f+1)& (0+255),b
  3315  013610  0E00               	movlw	0
  3316  013612  0100               	movlb	0	; () banked
  3317  013614  6FD2               	movwf	(?_printf+3)& (0+255),b
  3318  013616  0E23               	movlw	35
  3319  013618  6FD1               	movwf	(?_printf+2)& (0+255),b
  3320  01361A  EC7F  F092         	call	_printf	;wreg free
  3321                           
  3322                           ;main.c: 360: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3323  01361E  0E0D               	movlw	low STR_12
  3324  013620  0100               	movlb	0	; () banked
  3325  013622  6FCF               	movwf	printf@f& (0+255),b
  3326  013624  0EFF               	movlw	high STR_12
  3327  013626  0100               	movlb	0	; () banked
  3328  013628  6FD0               	movwf	(printf@f+1)& (0+255),b
  3329  01362A  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3330  01362E  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3331  013632  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3332  013636  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3333  01363A  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3334  01363E  0100               	movlb	0	; () banked
  3335  013640  6BD6               	clrf	(?_printf+7)& (0+255),b
  3336  013642  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3337  013646  0100               	movlb	0	; () banked
  3338  013648  6BD8               	clrf	(?_printf+9)& (0+255),b
  3339  01364A  0EBD               	movlw	189
  3340  01364C  0100               	movlb	0	; () banked
  3341  01364E  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3342  013650  0100               	movlb	0	; () banked
  3343  013652  6FD9               	movwf	(?_printf+10)& (0+255),b
  3344  013654  0EFF               	movlw	255
  3345  013656  0100               	movlb	0	; () banked
  3346  013658  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3347  01365A  0100               	movlb	0	; () banked
  3348  01365C  6FDA               	movwf	(?_printf+11)& (0+255),b
  3349  01365E  EC7F  F092         	call	_printf	;wreg free
  3350                           
  3351                           ;main.c: 361: Console_Render();
  3352  013662  EC93  F08F         	call	_Console_Render	;wreg free
  3353                           
  3354                           ;main.c: 362: if (MXK_Release())
  3355  013666  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3356  01366A  0900               	iorlw	0
  3357  01366C  A4D8               	btfss	status,2,c
  3358                           
  3359                           ;main.c: 363: MXK_Dequeue();
  3360  01366E  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3361  013672                     l2410:
  3362                           
  3363                           ;main.c: 364: }
  3364                           ;main.c: 366: irobot_song_play(0);
  3365  013672  0E00               	movlw	0
  3366  013674  ECD4  F0B3         	call	_irobot_song_play
  3367                           
  3368                           ;main.c: 367: irobot_stop_motion(0);
  3369  013678  0E00               	movlw	0
  3370  01367A  EC74  F0AF         	call	_irobot_stop_motion
  3371  01367E  0012               	return		;funcret
  3372  013680                     __end_of_mode4:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1h	equ	0xFE2
  3382                           fsr1l	equ	0xFE1
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _findClosestWall *****************
  3386 ;; Defined at:
  3387 ;;		line 157 in file "main.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      void 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;Total ram usage:        6 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:   13
  3408 ;; This function calls:
  3409 ;;		_ADC_Start
  3410 ;;		_ADC_Voltage
  3411 ;;		_Console_Render
  3412 ;;		_HMI_Render
  3413 ;;		_HMI_SetNumber
  3414 ;;		_MXK_Dequeue
  3415 ;;		_MXK_Release
  3416 ;;		_MXK_SwitchTo
  3417 ;;		_Motor_Move
  3418 ;;		_Motor_Speed
  3419 ;;		___fldiv
  3420 ;;		___flmul
  3421 ;;		___fltol
  3422 ;;		___xxtofl
  3423 ;;		_irobot_rotate
  3424 ;;		_printf
  3425 ;; This function is called by:
  3426 ;;		_mode4
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text2
  3431  0108C4                     __ptext2:
  3432                           	opt stack 0
  3433  0108C4                     _findClosestWall:
  3434                           	opt stack 16
  3435                           
  3436                           ;main.c: 158: StepRotate = 400;
  3437                           
  3438                           ;incstack = 0
  3439  0108C4  0E01               	movlw	1
  3440  0108C6  0100               	movlb	0	; () banked
  3441  0108C8  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3442  0108CA  0E90               	movlw	144
  3443  0108CC  6F71               	movwf	_StepRotate& (0+255),b
  3444                           
  3445                           ;main.c: 159: MinDist = 1000;
  3446  0108CE  0E03               	movlw	3
  3447  0108D0  0100               	movlb	0	; () banked
  3448  0108D2  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3449  0108D4  0EE8               	movlw	232
  3450  0108D6  6FFB               	movwf	_MinDist& (0+255),b
  3451                           
  3452                           ;main.c: 160: Stepstomin = 0;
  3453  0108D8  0E00               	movlw	0
  3454  0108DA  0100               	movlb	0	; () banked
  3455  0108DC  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3456  0108DE  0E00               	movlw	0
  3457  0108E0  6F6F               	movwf	_Stepstomin& (0+255),b
  3458                           
  3459                           ;main.c: 161: angleToClosestWall = 1000;
  3460  0108E2  0E03               	movlw	3
  3461  0108E4  0100               	movlb	0	; () banked
  3462  0108E6  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3463  0108E8  0EE8               	movlw	232
  3464  0108EA  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3465                           
  3466                           ;main.c: 162: IRValue = 0;
  3467  0108EC  0E00               	movlw	0
  3468  0108EE  0100               	movlb	0	; () banked
  3469  0108F0  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3470  0108F2  0E00               	movlw	0
  3471  0108F4  6F6D               	movwf	_IRValue& (0+255),b
  3472                           
  3473                           ;main.c: 163: TimerX = 8;
  3474  0108F6  0E00               	movlw	0
  3475  0108F8  0100               	movlb	0	; () banked
  3476  0108FA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3477  0108FC  0E08               	movlw	8
  3478  0108FE  6FF9               	movwf	_TimerX& (0+255),b
  3479                           
  3480                           ;main.c: 164: angle = 0;
  3481  010900  0E00               	movlw	0
  3482  010902  0103               	movlb	3	; () banked
  3483  010904  6F3B               	movwf	(_angle+1)& (0+255),b
  3484  010906  0E00               	movlw	0
  3485  010908  6F3A               	movwf	_angle& (0+255),b
  3486                           
  3487                           ;main.c: 165: while (StepRotate > 0) {
  3488  01090A  D15A               	goto	l2354
  3489  01090C                     
  3490                           ;main.c: 166: StepRotate--;
  3491                           
  3492                           ; BSR set to: 3
  3493  01090C  0100               	movlb	0	; () banked
  3494  01090E  0771               	decf	_StepRotate& (0+255),f,b
  3495  010910  A0D8               	btfss	status,0,c
  3496  010912  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 167: ADC_Start(&ADC_AN0);
  3500  010914  0EB5               	movlw	low _ADC_AN0
  3501  010916  0100               	movlb	0	; () banked
  3502  010918  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3503  01091A  0E00               	movlw	high _ADC_AN0
  3504  01091C  0100               	movlb	0	; () banked
  3505  01091E  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3506  010920  ECD2  F0A8         	call	_ADC_Start	;wreg free
  3507                           
  3508                           ;main.c: 168: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3509  010924  0EB5               	movlw	low _ADC_AN0
  3510  010926  0100               	movlb	0	; () banked
  3511  010928  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3512  01092A  0E00               	movlw	high _ADC_AN0
  3513  01092C  0100               	movlb	0	; () banked
  3514  01092E  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3515  010930  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  3516  010934  C0E1  F3FA         	movff	?_ADC_Voltage,_findClosestWall$15606
  3517  010938  C0E2  F3FB         	movff	?_ADC_Voltage+1,_findClosestWall$15606+1
  3518  01093C  C0E3  F3FC         	movff	?_ADC_Voltage+2,_findClosestWall$15606+2
  3519  010940  C0E4  F3FD         	movff	?_ADC_Voltage+3,_findClosestWall$15606+3
  3520                           
  3521                           ;main.c: 168: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3522  010944  C3FA  F0BE         	movff	_findClosestWall$15606,___fldiv@a
  3523  010948  C3FB  F0BF         	movff	_findClosestWall$15606+1,___fldiv@a+1
  3524  01094C  C3FC  F0C0         	movff	_findClosestWall$15606+2,___fldiv@a+2
  3525  010950  C3FD  F0C1         	movff	_findClosestWall$15606+3,___fldiv@a+3
  3526  010954  0E00               	movlw	0
  3527  010956  0100               	movlb	0	; () banked
  3528  010958  6FBA               	movwf	___fldiv@b& (0+255),b
  3529  01095A  0E00               	movlw	0
  3530  01095C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3531  01095E  0E6C               	movlw	108
  3532  010960  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3533  010962  0E42               	movlw	66
  3534  010964  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3535  010966  EC54  F088         	call	___fldiv	;wreg free
  3536  01096A  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3537  01096E  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3538  010972  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3539  010976  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3540  01097A  ECC6  F09B         	call	___fltol	;wreg free
  3541  01097E  C0F3  F06D         	movff	?___fltol,_IRValue
  3542  010982  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3543                           
  3544                           ;main.c: 169: if (MXK_SwitchTo(eMXK_HMI)) {
  3545  010986  0E01               	movlw	1
  3546  010988  ECFF  F0AF         	call	_MXK_SwitchTo
  3547  01098C  0900               	iorlw	0
  3548  01098E  B4D8               	btfsc	status,2,c
  3549  010990  D00E               	goto	l2343
  3550                           
  3551                           ;main.c: 170: HMI_SetNumber(IRValue);
  3552  010992  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3553  010996  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3554  01099A  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  3555                           
  3556                           ;main.c: 171: HMI_Render();
  3557  01099E  EC60  F0B0         	call	_HMI_Render	;wreg free
  3558                           
  3559                           ;main.c: 172: if (MXK_Release())
  3560  0109A2  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3561  0109A6  0900               	iorlw	0
  3562  0109A8  A4D8               	btfss	status,2,c
  3563                           
  3564                           ;main.c: 173: MXK_Dequeue();
  3565  0109AA  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3566  0109AE                     l2343:
  3567                           
  3568                           ;main.c: 174: }
  3569                           ;main.c: 175: if (IRValue < MinDist) {
  3570  0109AE  0100               	movlb	0	; () banked
  3571  0109B0  51FB               	movf	_MinDist& (0+255),w,b
  3572  0109B2  0100               	movlb	0	; () banked
  3573  0109B4  5D6D               	subwf	_IRValue& (0+255),w,b
  3574  0109B6  0100               	movlb	0	; () banked
  3575  0109B8  516E               	movf	(_IRValue+1)& (0+255),w,b
  3576  0109BA  0A80               	xorlw	128
  3577  0109BC  0103               	movlb	3	; () banked
  3578  0109BE  6FF8               	movwf	??_findClosestWall& (0+255),b
  3579  0109C0  0100               	movlb	0	; () banked
  3580  0109C2  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3581  0109C4  0A80               	xorlw	128
  3582  0109C6  0103               	movlb	3	; () banked
  3583  0109C8  59F8               	subwfb	??_findClosestWall& (0+255),w,b
  3584  0109CA  B0D8               	btfsc	status,0,c
  3585  0109CC  D036               	goto	l2344
  3586                           
  3587                           ; BSR set to: 3
  3588                           ;main.c: 176: MinDist = IRValue;
  3589  0109CE  C06D  F0FB         	movff	_IRValue,_MinDist
  3590  0109D2  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3591                           
  3592                           ;main.c: 177: Stepstomin = StepRotate;
  3593  0109D6  C071  F06F         	movff	_StepRotate,_Stepstomin
  3594  0109DA  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3595                           
  3596                           ; BSR set to: 3
  3597                           ;main.c: 178: angleToClosestWall = Stepstomin * 0.675;
  3598  0109DE  0ECD               	movlw	205
  3599  0109E0  0100               	movlb	0	; () banked
  3600  0109E2  6FCC               	movwf	___flmul@a& (0+255),b
  3601  0109E4  0ECC               	movlw	204
  3602  0109E6  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3603  0109E8  0E2C               	movlw	44
  3604  0109EA  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3605  0109EC  0E3F               	movlw	63
  3606  0109EE  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3607  0109F0  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3608  0109F4  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3609  0109F8  0100               	movlb	0	; () banked
  3610  0109FA  0E00               	movlw	0
  3611  0109FC  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3612  0109FE  0EFF               	movlw	-1
  3613  010A00  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3614  010A02  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3615  010A04  0E01               	movlw	1
  3616  010A06  EC98  F091         	call	___xxtofl
  3617  010A0A  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3618  010A0E  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3619  010A12  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3620  010A16  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3621  010A1A  EC00  F080         	call	___flmul	;wreg free
  3622  010A1E  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3623  010A22  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3624  010A26  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3625  010A2A  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3626  010A2E  ECC6  F09B         	call	___fltol	;wreg free
  3627  010A32  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3628  010A36  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3629  010A3A                     l2344:
  3630                           
  3631                           ;main.c: 179: }
  3632                           ;main.c: 180: if (MXK_SwitchTo(eMXK_Motor)) {
  3633  010A3A  0E08               	movlw	8
  3634  010A3C  ECFF  F0AF         	call	_MXK_SwitchTo
  3635  010A40  0900               	iorlw	0
  3636  010A42  B4D8               	btfsc	status,2,c
  3637  010A44  D01F               	goto	l2346
  3638                           
  3639                           ;main.c: 181: Motor_Speed(&Stepper, (100));
  3640  010A46  0EAF               	movlw	low _Stepper
  3641  010A48  0100               	movlb	0	; () banked
  3642  010A4A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3643  010A4C  0E00               	movlw	high _Stepper
  3644  010A4E  0100               	movlb	0	; () banked
  3645  010A50  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3646  010A52  0E00               	movlw	0
  3647  010A54  0100               	movlb	0	; () banked
  3648  010A56  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3649  010A58  0E64               	movlw	100
  3650  010A5A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3651  010A5C  EC31  F0B2         	call	_Motor_Speed	;wreg free
  3652                           
  3653                           ;main.c: 182: Motor_Move(&Stepper, -1);
  3654  010A60  0EAF               	movlw	low _Stepper
  3655  010A62  0100               	movlb	0	; () banked
  3656  010A64  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3657  010A66  0E00               	movlw	high _Stepper
  3658  010A68  0100               	movlb	0	; () banked
  3659  010A6A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3660  010A6C  0EFF               	movlw	255
  3661  010A6E  0100               	movlb	0	; () banked
  3662  010A70  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3663  010A72  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3664  010A74  EC35  F0B1         	call	_Motor_Move	;wreg free
  3665                           
  3666                           ;main.c: 183: if (MXK_Release())
  3667  010A78  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3668  010A7C  0900               	iorlw	0
  3669  010A7E  A4D8               	btfss	status,2,c
  3670                           
  3671                           ;main.c: 184: MXK_Dequeue();
  3672  010A80  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3673  010A84                     l2346:
  3674                           
  3675                           ;main.c: 185: }
  3676                           ;main.c: 186: TimerX = 10;
  3677  010A84  0E00               	movlw	0
  3678  010A86  0100               	movlb	0	; () banked
  3679  010A88  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3680  010A8A  0E0A               	movlw	10
  3681  010A8C  6FF9               	movwf	_TimerX& (0+255),b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;main.c: 187: if (TimerX > 0) {
  3685  010A8E  0100               	movlb	0	; () banked
  3686  010A90  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3687  010A92  D063               	goto	u13770
  3688  010A94  0100               	movlb	0	; () banked
  3689  010A96  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3690  010A98  E156               	bnz	l16603
  3691  010A9A  0100               	movlb	0	; () banked
  3692  010A9C  05F9               	decf	_TimerX& (0+255),w,b
  3693  010A9E  B0D8               	btfsc	status,0,c
  3694  010AA0  D052               	goto	l2348
  3695  010AA2  D05B               	goto	u13770
  3696  010AA4                     l16585:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;main.c: 189: ADC_Start(&ADC_AN0);
  3700  010AA4  0EB5               	movlw	low _ADC_AN0
  3701  010AA6  0100               	movlb	0	; () banked
  3702  010AA8  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3703  010AAA  0E00               	movlw	high _ADC_AN0
  3704  010AAC  0100               	movlb	0	; () banked
  3705  010AAE  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3706  010AB0  ECD2  F0A8         	call	_ADC_Start	;wreg free
  3707                           
  3708                           ;main.c: 190: if (MXK_SwitchTo(eMXK_HMI)) {
  3709  010AB4  0E01               	movlw	1
  3710  010AB6  ECFF  F0AF         	call	_MXK_SwitchTo
  3711  010ABA  0900               	iorlw	0
  3712  010ABC  B4D8               	btfsc	status,2,c
  3713  010ABE  D00E               	goto	l2351
  3714                           
  3715                           ;main.c: 191: HMI_SetNumber(IRValue);
  3716  010AC0  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3717  010AC4  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3718  010AC8  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  3719                           
  3720                           ;main.c: 192: HMI_Render();
  3721  010ACC  EC60  F0B0         	call	_HMI_Render	;wreg free
  3722                           
  3723                           ;main.c: 193: if (MXK_Release())
  3724  010AD0  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3725  010AD4  0900               	iorlw	0
  3726  010AD6  A4D8               	btfss	status,2,c
  3727                           
  3728                           ;main.c: 194: MXK_Dequeue();
  3729  010AD8  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3730  010ADC                     l2351:
  3731                           
  3732                           ;main.c: 195: }
  3733                           ;main.c: 196: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3734  010ADC  0EB5               	movlw	low _ADC_AN0
  3735  010ADE  0100               	movlb	0	; () banked
  3736  010AE0  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3737  010AE2  0E00               	movlw	high _ADC_AN0
  3738  010AE4  0100               	movlb	0	; () banked
  3739  010AE6  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3740  010AE8  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  3741  010AEC  C0E1  F3FA         	movff	?_ADC_Voltage,_findClosestWall$15606
  3742  010AF0  C0E2  F3FB         	movff	?_ADC_Voltage+1,_findClosestWall$15606+1
  3743  010AF4  C0E3  F3FC         	movff	?_ADC_Voltage+2,_findClosestWall$15606+2
  3744  010AF8  C0E4  F3FD         	movff	?_ADC_Voltage+3,_findClosestWall$15606+3
  3745                           
  3746                           ;main.c: 195: }
  3747                           ;main.c: 196: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3748  010AFC  C3FA  F0BE         	movff	_findClosestWall$15606,___fldiv@a
  3749  010B00  C3FB  F0BF         	movff	_findClosestWall$15606+1,___fldiv@a+1
  3750  010B04  C3FC  F0C0         	movff	_findClosestWall$15606+2,___fldiv@a+2
  3751  010B08  C3FD  F0C1         	movff	_findClosestWall$15606+3,___fldiv@a+3
  3752  010B0C  0E00               	movlw	0
  3753  010B0E  0100               	movlb	0	; () banked
  3754  010B10  6FBA               	movwf	___fldiv@b& (0+255),b
  3755  010B12  0E00               	movlw	0
  3756  010B14  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3757  010B16  0E6C               	movlw	108
  3758  010B18  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3759  010B1A  0E42               	movlw	66
  3760  010B1C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3761  010B1E  EC54  F088         	call	___fldiv	;wreg free
  3762  010B22  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3763  010B26  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3764  010B2A  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3765  010B2E  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3766  010B32  ECC6  F09B         	call	___fltol	;wreg free
  3767  010B36  C0F3  F06D         	movff	?___fltol,_IRValue
  3768  010B3A  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3769                           
  3770                           ;main.c: 197: TimerX--;
  3771  010B3E  0100               	movlb	0	; () banked
  3772  010B40  07F9               	decf	_TimerX& (0+255),f,b
  3773  010B42  A0D8               	btfss	status,0,c
  3774  010B44  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3775  010B46                     l2348:
  3776  010B46                     l16603:
  3777                           
  3778                           ; BSR set to: 0
  3779  010B46  0100               	movlb	0	; () banked
  3780  010B48  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3781  010B4A  D007               	goto	u13770
  3782  010B4C  0100               	movlb	0	; () banked
  3783  010B4E  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3784  010B50  E1A9               	bnz	l16585
  3785  010B52  0100               	movlb	0	; () banked
  3786  010B54  05F9               	decf	_TimerX& (0+255),w,b
  3787  010B56  B0D8               	btfsc	status,0,c
  3788  010B58  D7A5               	goto	l2349
  3789  010B5A                     u13770:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 198: }
  3793                           ;main.c: 199: }
  3794                           ;main.c: 200: if (MXK_SwitchTo(eMXK_HMI)) {
  3795                           
  3796                           ; BSR set to: 0
  3797                           
  3798                           ; BSR set to: 0
  3799  010B5A  0E01               	movlw	1
  3800  010B5C  ECFF  F0AF         	call	_MXK_SwitchTo
  3801  010B60  0900               	iorlw	0
  3802  010B62  B4D8               	btfsc	status,2,c
  3803  010B64  D02D               	goto	l2354
  3804                           
  3805                           ;main.c: 201: printf("%c", (char)35);
  3806  010B66  0EFB               	movlw	low STR_1
  3807  010B68  0100               	movlb	0	; () banked
  3808  010B6A  6FCF               	movwf	printf@f& (0+255),b
  3809  010B6C  0EFF               	movlw	high STR_1
  3810  010B6E  0100               	movlb	0	; () banked
  3811  010B70  6FD0               	movwf	(printf@f+1)& (0+255),b
  3812  010B72  0E00               	movlw	0
  3813  010B74  0100               	movlb	0	; () banked
  3814  010B76  6FD2               	movwf	(?_printf+3)& (0+255),b
  3815  010B78  0E23               	movlw	35
  3816  010B7A  6FD1               	movwf	(?_printf+2)& (0+255),b
  3817  010B7C  EC7F  F092         	call	_printf	;wreg free
  3818                           
  3819                           ;main.c: 202: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3820  010B80  0E59               	movlw	low STR_4
  3821  010B82  0100               	movlb	0	; () banked
  3822  010B84  6FCF               	movwf	printf@f& (0+255),b
  3823  010B86  0EFF               	movlw	high STR_4
  3824  010B88  0100               	movlb	0	; () banked
  3825  010B8A  6FD0               	movwf	(printf@f+1)& (0+255),b
  3826  010B8C  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3827  010B90  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3828  010B94  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3829  010B98  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3830  010B9C  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3831  010BA0  0100               	movlb	0	; () banked
  3832  010BA2  6BD6               	clrf	(?_printf+7)& (0+255),b
  3833  010BA4  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3834  010BA8  0100               	movlb	0	; () banked
  3835  010BAA  6BD8               	clrf	(?_printf+9)& (0+255),b
  3836  010BAC  EC7F  F092         	call	_printf	;wreg free
  3837                           
  3838                           ;main.c: 203: Console_Render();
  3839  010BB0  EC93  F08F         	call	_Console_Render	;wreg free
  3840                           
  3841                           ;main.c: 204: if (MXK_Release())
  3842  010BB4  EC4B  F0B3         	call	_MXK_Release	;wreg free
  3843  010BB8  0900               	iorlw	0
  3844  010BBA  A4D8               	btfss	status,2,c
  3845                           
  3846                           ;main.c: 205: MXK_Dequeue();
  3847  010BBC  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  3848  010BC0                     l2354:
  3849  010BC0  0100               	movlb	0	; () banked
  3850  010BC2  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3851  010BC4  D007               	goto	u13800
  3852  010BC6  0100               	movlb	0	; () banked
  3853  010BC8  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3854  010BCA  E103               	bnz	u13801
  3855  010BCC  0100               	movlb	0	; () banked
  3856  010BCE  0571               	decf	_StepRotate& (0+255),w,b
  3857  010BD0  B0D8               	btfsc	status,0,c
  3858  010BD2                     u13801:
  3859  010BD2  D69C               	goto	l2341
  3860  010BD4                     u13800:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 206: }
  3864                           ;main.c: 207: }
  3865                           ;main.c: 208: Motor_Speed(&Stepper, (400));
  3866                           
  3867                           ; BSR set to: 0
  3868  010BD4  0EAF               	movlw	low _Stepper
  3869  010BD6  0100               	movlb	0	; () banked
  3870  010BD8  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3871  010BDA  0E00               	movlw	high _Stepper
  3872  010BDC  0100               	movlb	0	; () banked
  3873  010BDE  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3874  010BE0  0E01               	movlw	1
  3875  010BE2  0100               	movlb	0	; () banked
  3876  010BE4  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3877  010BE6  0E90               	movlw	144
  3878  010BE8  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3879  010BEA  EC31  F0B2         	call	_Motor_Speed	;wreg free
  3880                           
  3881                           ;main.c: 209: Motor_Move(&Stepper, 300);
  3882  010BEE  0EAF               	movlw	low _Stepper
  3883  010BF0  0100               	movlb	0	; () banked
  3884  010BF2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3885  010BF4  0E00               	movlw	high _Stepper
  3886  010BF6  0100               	movlb	0	; () banked
  3887  010BF8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3888  010BFA  0E01               	movlw	1
  3889  010BFC  0100               	movlb	0	; () banked
  3890  010BFE  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3891  010C00  0E2C               	movlw	44
  3892  010C02  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3893  010C04  EC35  F0B1         	call	_Motor_Move	;wreg free
  3894                           
  3895                           ;main.c: 210: angleToClosestWall = angleToClosestWall + 67;
  3896  010C08  0E43               	movlw	67
  3897  010C0A  0100               	movlb	0	; () banked
  3898  010C0C  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3899  010C0E  0100               	movlb	0	; () banked
  3900  010C10  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3901  010C12  0E00               	movlw	0
  3902  010C14  0100               	movlb	0	; () banked
  3903  010C16  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3904  010C18  0100               	movlb	0	; () banked
  3905  010C1A  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;main.c: 211: if(angleToClosestWall > 270) {
  3909  010C1C  0100               	movlb	0	; () banked
  3910  010C1E  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3911  010C20  D012               	goto	l2356
  3912  010C22  0E0F               	movlw	15
  3913  010C24  0100               	movlb	0	; () banked
  3914  010C26  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3915  010C28  0E01               	movlw	1
  3916  010C2A  0100               	movlb	0	; () banked
  3917  010C2C  596C               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  3918  010C2E  A0D8               	btfss	status,0,c
  3919  010C30  D00A               	goto	l2356
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;main.c: 212: angleToClosestWall = angleToClosestWall - 270;
  3923  010C32  0EF2               	movlw	242
  3924  010C34  0100               	movlb	0	; () banked
  3925  010C36  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3926  010C38  0100               	movlb	0	; () banked
  3927  010C3A  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3928  010C3C  0EFE               	movlw	254
  3929  010C3E  0100               	movlb	0	; () banked
  3930  010C40  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3931  010C42  0100               	movlb	0	; () banked
  3932  010C44  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3933  010C46                     l2356:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;main.c: 213: }
  3937                           ;main.c: 214: angleToClosestWall = 270 - angleToClosestWall;
  3938  010C46  C06B  F3F8         	movff	_angleToClosestWall,??_findClosestWall
  3939  010C4A  C06C  F3F9         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3940  010C4E  0103               	movlb	3	; () banked
  3941  010C50  1FF8               	comf	??_findClosestWall& (0+255),f,b
  3942  010C52  1FF9               	comf	(??_findClosestWall+1)& (0+255),f,b
  3943  010C54  4BF8               	infsnz	??_findClosestWall& (0+255),f,b
  3944  010C56  2BF9               	incf	(??_findClosestWall+1)& (0+255),f,b
  3945  010C58  0E0E               	movlw	14
  3946  010C5A  0103               	movlb	3	; () banked
  3947  010C5C  25F8               	addwf	??_findClosestWall& (0+255),w,b
  3948  010C5E  0100               	movlb	0	; () banked
  3949  010C60  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3950  010C62  0E01               	movlw	1
  3951  010C64  0103               	movlb	3	; () banked
  3952  010C66  21F9               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3953  010C68  0100               	movlb	0	; () banked
  3954  010C6A  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3955                           
  3956                           ;main.c: 215: if(angleToClosestWall < 135) {
  3957  010C6C  0100               	movlb	0	; () banked
  3958  010C6E  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3959  010C70  D008               	goto	u13820
  3960  010C72  0100               	movlb	0	; () banked
  3961  010C74  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3962  010C76  E112               	bnz	l16627
  3963  010C78  0E87               	movlw	135
  3964  010C7A  0100               	movlb	0	; () banked
  3965  010C7C  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3966  010C7E  B0D8               	btfsc	status,0,c
  3967  010C80  D00D               	goto	l2357
  3968  010C82                     u13820:
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;main.c: 216: irobot_rotate(0, angleToClosestWall, 200);
  3972  010C82  C06B  F0D7         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  3973  010C86  C06C  F0D8         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  3974  010C8A  0E00               	movlw	0
  3975  010C8C  0100               	movlb	0	; () banked
  3976  010C8E  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3977  010C90  0EC8               	movlw	200
  3978  010C92  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3979  010C94  0E00               	movlw	0
  3980  010C96  EC40  F09B         	call	_irobot_rotate
  3981                           
  3982                           ;main.c: 217: }
  3983  010C9A  0012               	return	
  3984  010C9C                     l2357:
  3985  010C9C                     l16627:
  3986                           
  3987                           ;main.c: 218: else{
  3988                           ;main.c: 219: irobot_rotate(0, 270 - angleToClosestWall, -200);
  3989  010C9C  C06B  F3F8         	movff	_angleToClosestWall,??_findClosestWall
  3990  010CA0  C06C  F3F9         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3991  010CA4  0103               	movlb	3	; () banked
  3992  010CA6  1FF8               	comf	??_findClosestWall& (0+255),f,b
  3993  010CA8  1FF9               	comf	(??_findClosestWall+1)& (0+255),f,b
  3994  010CAA  4BF8               	infsnz	??_findClosestWall& (0+255),f,b
  3995  010CAC  2BF9               	incf	(??_findClosestWall+1)& (0+255),f,b
  3996  010CAE  0E0E               	movlw	14
  3997  010CB0  0103               	movlb	3	; () banked
  3998  010CB2  25F8               	addwf	??_findClosestWall& (0+255),w,b
  3999  010CB4  0100               	movlb	0	; () banked
  4000  010CB6  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4001  010CB8  0E01               	movlw	1
  4002  010CBA  0103               	movlb	3	; () banked
  4003  010CBC  21F9               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4004  010CBE  0100               	movlb	0	; () banked
  4005  010CC0  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4006  010CC2  0EFF               	movlw	255
  4007  010CC4  0100               	movlb	0	; () banked
  4008  010CC6  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4009  010CC8  0E38               	movlw	56
  4010  010CCA  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4011  010CCC  0E00               	movlw	0
  4012  010CCE  EC40  F09B         	call	_irobot_rotate
  4013  010CD2  0012               	return	
  4014  010CD4                     __end_of_findClosestWall:
  4015                           	opt stack 0
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           postdec1	equ	0xFE5
  4023                           fsr1h	equ	0xFE2
  4024                           fsr1l	equ	0xFE1
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _mode3 *****************
  4028 ;; Defined at:
  4029 ;;		line 331 in file "main.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:   17
  4050 ;; This function calls:
  4051 ;;		_move_and_rotate
  4052 ;;		_safeToGo
  4053 ;; This function is called by:
  4054 ;;		_main
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text3
  4059  0161B8                     __ptext3:
  4060                           	opt stack 0
  4061  0161B8                     _mode3:
  4062                           	opt stack 13
  4063                           
  4064                           ;main.c: 332: safeToGo();
  4065                           
  4066                           ;incstack = 0
  4067  0161B8  ECBE  F0AE         	call	_safeToGo	;wreg free
  4068                           
  4069                           ;main.c: 333: dist = 0;
  4070  0161BC  0E00               	movlw	0
  4071  0161BE  0100               	movlb	0	; () banked
  4072  0161C0  6F6A               	movwf	(_dist+1)& (0+255),b
  4073  0161C2  0E00               	movlw	0
  4074  0161C4  6F69               	movwf	_dist& (0+255),b
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;main.c: 334: corner = 1;
  4078  0161C6  0E00               	movlw	0
  4079  0161C8  0103               	movlb	3	; () banked
  4080  0161CA  6FF7               	movwf	(_corner+1)& (0+255),b
  4081  0161CC  0E01               	movlw	1
  4082  0161CE  6FF6               	movwf	_corner& (0+255),b
  4083                           
  4084                           ;main.c: 335: move_and_rotate();
  4085  0161D0  ECD9  F09F         	call	_move_and_rotate	;wreg free
  4086                           
  4087                           ;main.c: 336: corner++;
  4088  0161D4  0103               	movlb	3	; () banked
  4089  0161D6  4BF6               	infsnz	_corner& (0+255),f,b
  4090  0161D8  2BF7               	incf	(_corner+1)& (0+255),f,b
  4091                           
  4092                           ; BSR set to: 3
  4093                           ;main.c: 337: move_and_rotate();
  4094  0161DA  ECD9  F09F         	call	_move_and_rotate	;wreg free
  4095                           
  4096                           ;main.c: 338: corner++;
  4097  0161DE  0103               	movlb	3	; () banked
  4098  0161E0  4BF6               	infsnz	_corner& (0+255),f,b
  4099  0161E2  2BF7               	incf	(_corner+1)& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 3
  4102                           ;main.c: 339: move_and_rotate();
  4103  0161E4  ECD9  F09F         	call	_move_and_rotate	;wreg free
  4104                           
  4105                           ;main.c: 340: corner++;
  4106  0161E8  0103               	movlb	3	; () banked
  4107  0161EA  4BF6               	infsnz	_corner& (0+255),f,b
  4108  0161EC  2BF7               	incf	(_corner+1)& (0+255),f,b
  4109                           
  4110                           ;main.c: 341: move_and_rotate();
  4111  0161EE  ECD9  F09F         	call	_move_and_rotate	;wreg free
  4112  0161F2  0012               	return		;funcret
  4113  0161F4                     __end_of_mode3:
  4114                           	opt stack 0
  4115                           tblptru	equ	0xFF8
  4116                           tblptrh	equ	0xFF7
  4117                           tblptrl	equ	0xFF6
  4118                           tablat	equ	0xFF5
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _move_and_rotate *****************
  4127 ;; Defined at:
  4128 ;;		line 140 in file "main.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;Total ram usage:        1 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:   14
  4149 ;; This function calls:
  4150 ;;		_Console_Render
  4151 ;;		___wmul
  4152 ;;		_delay_ms
  4153 ;;		_irobot_move_straight
  4154 ;;		_irobot_rotate
  4155 ;;		_irobot_stop_motion
  4156 ;;		_measureAndDisplayDistance
  4157 ;;		_printf
  4158 ;;		_update_distance
  4159 ;; This function is called by:
  4160 ;;		_mode3
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text4
  4165  013FB2                     __ptext4:
  4166                           	opt stack 0
  4167  013FB2                     _move_and_rotate:
  4168                           	opt stack 15
  4169                           
  4170                           ;main.c: 141: irobot_move_straight(100);
  4171                           
  4172                           ;incstack = 0
  4173  013FB2  0E00               	movlw	0
  4174  013FB4  0100               	movlb	0	; () banked
  4175  013FB6  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4176  013FB8  0E64               	movlw	100
  4177  013FBA  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4178  013FBC  EC74  F0B3         	call	_irobot_move_straight	;wreg free
  4179                           
  4180                           ;main.c: 142: while (dist < (corner * 1000)) {
  4181  013FC0  D027               	goto	l2334
  4182  013FC2                     
  4183                           ;main.c: 143: update_distance();
  4184  013FC2  ECE8  F0B3         	call	_update_distance	;wreg free
  4185                           
  4186                           ;main.c: 144: dist += iRDistance;
  4187  013FC6  0100               	movlb	0	; () banked
  4188  013FC8  5179               	movf	_iRDistance& (0+255),w,b
  4189  013FCA  0100               	movlb	0	; () banked
  4190  013FCC  2769               	addwf	_dist& (0+255),f,b
  4191  013FCE  0100               	movlb	0	; () banked
  4192  013FD0  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4193  013FD2  0100               	movlb	0	; () banked
  4194  013FD4  236A               	addwfc	(_dist+1)& (0+255),f,b
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;main.c: 145: printf("%c", (char)35);
  4198  013FD6  0EFB               	movlw	low STR_1
  4199  013FD8  0100               	movlb	0	; () banked
  4200  013FDA  6FCF               	movwf	printf@f& (0+255),b
  4201  013FDC  0EFF               	movlw	high STR_1
  4202  013FDE  0100               	movlb	0	; () banked
  4203  013FE0  6FD0               	movwf	(printf@f+1)& (0+255),b
  4204  013FE2  0E00               	movlw	0
  4205  013FE4  0100               	movlb	0	; () banked
  4206  013FE6  6FD2               	movwf	(?_printf+3)& (0+255),b
  4207  013FE8  0E23               	movlw	35
  4208  013FEA  6FD1               	movwf	(?_printf+2)& (0+255),b
  4209  013FEC  EC7F  F092         	call	_printf	;wreg free
  4210                           
  4211                           ;main.c: 146: printf("Distance: %d\n", dist);
  4212  013FF0  0EED               	movlw	low STR_2
  4213  013FF2  0100               	movlb	0	; () banked
  4214  013FF4  6FCF               	movwf	printf@f& (0+255),b
  4215  013FF6  0EFF               	movlw	high STR_2
  4216  013FF8  0100               	movlb	0	; () banked
  4217  013FFA  6FD0               	movwf	(printf@f+1)& (0+255),b
  4218  013FFC  C069  F0D1         	movff	_dist,?_printf+2
  4219  014000  C06A  F0D2         	movff	_dist+1,?_printf+3
  4220  014004  EC7F  F092         	call	_printf	;wreg free
  4221                           
  4222                           ;main.c: 147: Console_Render();
  4223  014008  EC93  F08F         	call	_Console_Render	;wreg free
  4224                           
  4225                           ;main.c: 148: measureAndDisplayDistance();
  4226  01400C  EC8A  F0A6         	call	_measureAndDisplayDistance	;wreg free
  4227  014010                     l2334:
  4228  014010  C3F6  F0BA         	movff	_corner,___wmul@multiplier
  4229  014014  C3F7  F0BB         	movff	_corner+1,___wmul@multiplier+1
  4230  014018  0E03               	movlw	3
  4231  01401A  0100               	movlb	0	; () banked
  4232  01401C  6FBD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4233  01401E  0EE8               	movlw	232
  4234  014020  6FBC               	movwf	___wmul@multiplicand& (0+255),b
  4235  014022  EC52  F0B1         	call	___wmul	;wreg free
  4236  014026  0100               	movlb	0	; () banked
  4237  014028  51BA               	movf	?___wmul& (0+255),w,b
  4238  01402A  0100               	movlb	0	; () banked
  4239  01402C  5D69               	subwf	_dist& (0+255),w,b
  4240  01402E  0100               	movlb	0	; () banked
  4241  014030  516A               	movf	(_dist+1)& (0+255),w,b
  4242  014032  0A80               	xorlw	128
  4243  014034  0103               	movlb	3	; () banked
  4244  014036  6FF8               	movwf	??_move_and_rotate& (0+255),b
  4245  014038  0100               	movlb	0	; () banked
  4246  01403A  51BB               	movf	(?___wmul+1)& (0+255),w,b
  4247  01403C  0A80               	xorlw	128
  4248  01403E  0103               	movlb	3	; () banked
  4249  014040  59F8               	subwfb	??_move_and_rotate& (0+255),w,b
  4250  014042  A0D8               	btfss	status,0,c
  4251  014044  D7BE               	goto	l2335
  4252                           
  4253                           ; BSR set to: 3
  4254                           ;main.c: 149: }
  4255                           ;main.c: 150: irobot_stop_motion(0);
  4256                           
  4257                           ; BSR set to: 3
  4258  014046  0E00               	movlw	0
  4259  014048  EC74  F0AF         	call	_irobot_stop_motion
  4260                           
  4261                           ;main.c: 151: delay_ms(100);
  4262  01404C  0E00               	movlw	0
  4263  01404E  0100               	movlb	0	; () banked
  4264  014050  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4265  014052  0E64               	movlw	100
  4266  014054  6FBA               	movwf	delay_ms@ms& (0+255),b
  4267  014056  EC08  F0AC         	call	_delay_ms	;wreg free
  4268                           
  4269                           ;main.c: 152: irobot_rotate(0, 67, 200);
  4270  01405A  0E00               	movlw	0
  4271  01405C  0100               	movlb	0	; () banked
  4272  01405E  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4273  014060  0E43               	movlw	67
  4274  014062  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4275  014064  0E00               	movlw	0
  4276  014066  0100               	movlb	0	; () banked
  4277  014068  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4278  01406A  0EC8               	movlw	200
  4279  01406C  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4280  01406E  0E00               	movlw	0
  4281  014070  EC40  F09B         	call	_irobot_rotate
  4282                           
  4283                           ;main.c: 153: delay_ms(100);
  4284  014074  0E00               	movlw	0
  4285  014076  0100               	movlb	0	; () banked
  4286  014078  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4287  01407A  0E64               	movlw	100
  4288  01407C  6FBA               	movwf	delay_ms@ms& (0+255),b
  4289  01407E  EC08  F0AC         	call	_delay_ms	;wreg free
  4290  014082  0012               	return		;funcret
  4291  014084                     __end_of_move_and_rotate:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           fsr1h	equ	0xFE2
  4301                           fsr1l	equ	0xFE1
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _irobot_rotate *****************
  4305 ;; Defined at:
  4306 ;;		line 301 in file "Library/iRobotSerial.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  isScript        1    wreg     unsigned char 
  4309 ;;  rotateAngle     2   29[BANK0 ] short 
  4310 ;;  rotateSpeed     2   31[BANK0 ] short 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  isScript        1   35[BANK0 ] unsigned char 
  4313 ;;  angleTotal      2   38[BANK0 ] short 
  4314 ;;  rotateDirect    2   36[BANK0 ] short 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      void 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:       11 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:   11
  4331 ;; This function calls:
  4332 ;;		_irobot_move
  4333 ;;		_irobot_stop_motion
  4334 ;;		_update_angle
  4335 ;; This function is called by:
  4336 ;;		_move_and_rotate
  4337 ;;		_findClosestWall
  4338 ;;		_irobot_rotate_to
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text5
  4343  013680                     __ptext5:
  4344                           	opt stack 0
  4345  013680                     _irobot_rotate:
  4346                           	opt stack 17
  4347                           
  4348                           ;incstack = 0
  4349                           ;irobot_rotate@isScript stored from wreg
  4350  013680  0100               	movlb	0	; () banked
  4351  013682  6FDD               	movwf	irobot_rotate@isScript& (0+255),b
  4352                           
  4353                           ;iRobotSerial.c: 302: INT16 angleTotal = 0;
  4354  013684  0E00               	movlw	0
  4355  013686  0100               	movlb	0	; () banked
  4356  013688  6FE1               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4357  01368A  0E00               	movlw	0
  4358  01368C  6FE0               	movwf	irobot_rotate@angleTotal& (0+255),b
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;iRobotSerial.c: 303: INT16 rotateDirection;
  4362                           ;iRobotSerial.c: 305: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  4363  01368E  0100               	movlb	0	; () banked
  4364  013690  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4365  013692  D00D               	goto	l2156
  4366  013694  0100               	movlb	0	; () banked
  4367  013696  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4368  013698  E104               	bnz	u11100
  4369  01369A  0100               	movlb	0	; () banked
  4370  01369C  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4371  01369E  A0D8               	btfss	status,0,c
  4372  0136A0  D006               	goto	l2156
  4373  0136A2                     u11100:
  4374                           
  4375                           ; BSR set to: 0
  4376  0136A2  0E00               	movlw	0
  4377  0136A4  0100               	movlb	0	; () banked
  4378  0136A6  6FDF               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4379  0136A8  0E01               	movlw	1
  4380  0136AA  6FDE               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4381  0136AC  D003               	goto	l2158
  4382  0136AE                     l2156:
  4383                           
  4384                           ; BSR set to: 0
  4385  0136AE  0100               	movlb	0	; () banked
  4386  0136B0  69D7               	setf	irobot_rotate@rotateAngle& (0+255),b
  4387  0136B2  69D8               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4388  0136B4                     l2158:
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;iRobotSerial.c: 306: if (isScript) {
  4392                           
  4393                           ; BSR set to: 0
  4394  0136B4  0100               	movlb	0	; () banked
  4395  0136B6  51DD               	movf	irobot_rotate@isScript& (0+255),w,b
  4396  0136B8  0100               	movlb	0	; () banked
  4397  0136BA  B4D8               	btfsc	status,2,c
  4398  0136BC  D00C               	goto	l2159
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;iRobotSerial.c: 307: irobot_move(1, rotateSpeed, rotateDirection);
  4402  0136BE  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4403  0136C2  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4404  0136C6  C0DE  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4405  0136CA  C0DF  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4406  0136CE  0E01               	movlw	1
  4407  0136D0  EC42  F0A3         	call	_irobot_move
  4408                           
  4409                           ;iRobotSerial.c: 308: } else {
  4410  0136D4  0012               	return	
  4411  0136D6                     l2159:
  4412                           
  4413                           ;iRobotSerial.c: 309: irobot_move(0, rotateSpeed, rotateDirection);
  4414  0136D6  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4415  0136DA  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4416  0136DE  C0DE  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4417  0136E2  C0DF  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4418  0136E6  0E00               	movlw	0
  4419  0136E8  EC42  F0A3         	call	_irobot_move
  4420                           
  4421                           ;iRobotSerial.c: 310: if (rotateSpeed > 0) {
  4422  0136EC  0100               	movlb	0	; () banked
  4423  0136EE  BFDA               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  4424  0136F0  D022               	goto	u11130
  4425  0136F2  0100               	movlb	0	; () banked
  4426  0136F4  51DA               	movf	(irobot_rotate@rotateSpeed+1)& (0+255),w,b
  4427  0136F6  E10F               	bnz	l14373
  4428  0136F8  0100               	movlb	0	; () banked
  4429  0136FA  05D9               	decf	irobot_rotate@rotateSpeed& (0+255),w,b
  4430  0136FC  B0D8               	btfsc	status,0,c
  4431  0136FE  D00B               	goto	l2162
  4432  013700  D01A               	goto	u11130
  4433  013702                     
  4434                           ; BSR set to: 0
  4435                           ;iRobotSerial.c: 312: update_angle();
  4436                           
  4437                           ; BSR set to: 0
  4438  013702  ECF1  F0B3         	call	_update_angle	;wreg free
  4439                           
  4440                           ;iRobotSerial.c: 313: angleTotal += iRAngle;
  4441  013706  0100               	movlb	0	; () banked
  4442  013708  5177               	movf	_iRAngle& (0+255),w,b
  4443  01370A  0100               	movlb	0	; () banked
  4444  01370C  27E0               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4445  01370E  0100               	movlb	0	; () banked
  4446  013710  5178               	movf	(_iRAngle+1)& (0+255),w,b
  4447  013712  0100               	movlb	0	; () banked
  4448  013714  23E1               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4449  013716                     l2162:
  4450  013716                     l14373:
  4451                           
  4452                           ; BSR set to: 0
  4453  013716  0100               	movlb	0	; () banked
  4454  013718  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4455  01371A  0100               	movlb	0	; () banked
  4456  01371C  5DE0               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4457  01371E  0100               	movlb	0	; () banked
  4458  013720  51E1               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4459  013722  0A80               	xorlw	128
  4460  013724  0100               	movlb	0	; () banked
  4461  013726  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4462  013728  0100               	movlb	0	; () banked
  4463  01372A  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4464  01372C  0A80               	xorlw	128
  4465  01372E  0100               	movlb	0	; () banked
  4466  013730  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4467  013732  A0D8               	btfss	status,0,c
  4468  013734  D7E6               	goto	l2163
  4469  013736                     u11130:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;iRobotSerial.c: 314: }
  4473                           ;iRobotSerial.c: 315: }
  4474                           ;iRobotSerial.c: 316: if (rotateSpeed < 0) {
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ; BSR set to: 0
  4479  013736  0100               	movlb	0	; () banked
  4480  013738  BFDA               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  4481  01373A  D014               	goto	l2166
  4482  01373C  D023               	goto	u11150
  4483  01373E                     
  4484                           ; BSR set to: 0
  4485                           ;iRobotSerial.c: 318: update_angle();
  4486                           
  4487                           ; BSR set to: 0
  4488  01373E  ECF1  F0B3         	call	_update_angle	;wreg free
  4489                           
  4490                           ;iRobotSerial.c: 319: angleTotal += -iRAngle;
  4491  013742  C077  F0DB         	movff	_iRAngle,??_irobot_rotate
  4492  013746  C078  F0DC         	movff	_iRAngle+1,??_irobot_rotate+1
  4493  01374A  0100               	movlb	0	; () banked
  4494  01374C  1FDB               	comf	??_irobot_rotate& (0+255),f,b
  4495  01374E  1FDC               	comf	(??_irobot_rotate+1)& (0+255),f,b
  4496  013750  4BDB               	infsnz	??_irobot_rotate& (0+255),f,b
  4497  013752  2BDC               	incf	(??_irobot_rotate+1)& (0+255),f,b
  4498  013754  0100               	movlb	0	; () banked
  4499  013756  51DB               	movf	??_irobot_rotate& (0+255),w,b
  4500  013758  0100               	movlb	0	; () banked
  4501  01375A  27E0               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4502  01375C  0100               	movlb	0	; () banked
  4503  01375E  51DC               	movf	(??_irobot_rotate+1)& (0+255),w,b
  4504  013760  0100               	movlb	0	; () banked
  4505  013762  23E1               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4506  013764                     l2166:
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511  013764  0100               	movlb	0	; () banked
  4512  013766  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4513  013768  0100               	movlb	0	; () banked
  4514  01376A  5DE0               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4515  01376C  0100               	movlb	0	; () banked
  4516  01376E  51E1               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4517  013770  0A80               	xorlw	128
  4518  013772  0100               	movlb	0	; () banked
  4519  013774  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4520  013776  0100               	movlb	0	; () banked
  4521  013778  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4522  01377A  0A80               	xorlw	128
  4523  01377C  0100               	movlb	0	; () banked
  4524  01377E  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4525  013780  A0D8               	btfss	status,0,c
  4526  013782  D7DD               	goto	l2167
  4527  013784                     u11150:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;iRobotSerial.c: 320: }
  4531                           ;iRobotSerial.c: 321: }
  4532                           ;iRobotSerial.c: 322: irobot_stop_motion(0);
  4533                           
  4534                           ; BSR set to: 0
  4535                           
  4536                           ; BSR set to: 0
  4537  013784  0E00               	movlw	0
  4538  013786  EC74  F0AF         	call	_irobot_stop_motion
  4539  01378A  0012               	return	
  4540  01378C                     __end_of_irobot_rotate:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1h	equ	0xFE2
  4550                           fsr1l	equ	0xFE1
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _mode2 *****************
  4554 ;; Defined at:
  4555 ;;		line 306 in file "main.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:   17
  4576 ;; This function calls:
  4577 ;;		_Console_Render
  4578 ;;		_MXK_Dequeue
  4579 ;;		_MXK_Release
  4580 ;;		_MXK_SwitchTo
  4581 ;;		_irobot_move_straight
  4582 ;;		_irobot_stop_motion
  4583 ;;		_measureAndDisplayDistance
  4584 ;;		_printf
  4585 ;;		_safeToGo
  4586 ;;		_update_distance
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text6
  4593  013A88                     __ptext6:
  4594                           	opt stack 0
  4595  013A88                     _mode2:
  4596                           	opt stack 13
  4597                           
  4598                           ;main.c: 307: safeToGo();
  4599                           
  4600                           ;incstack = 0
  4601  013A88  ECBE  F0AE         	call	_safeToGo	;wreg free
  4602                           
  4603                           ;main.c: 308: if (MXK_SwitchTo(eMXK_HMI)) {
  4604  013A8C  0E01               	movlw	1
  4605  013A8E  ECFF  F0AF         	call	_MXK_SwitchTo
  4606  013A92  0900               	iorlw	0
  4607  013A94  B4D8               	btfsc	status,2,c
  4608  013A96  0012               	return	
  4609                           
  4610                           ;main.c: 309: printf("%c", (char)35);
  4611  013A98  0EFB               	movlw	low STR_1
  4612  013A9A  0100               	movlb	0	; () banked
  4613  013A9C  6FCF               	movwf	printf@f& (0+255),b
  4614  013A9E  0EFF               	movlw	high STR_1
  4615  013AA0  0100               	movlb	0	; () banked
  4616  013AA2  6FD0               	movwf	(printf@f+1)& (0+255),b
  4617  013AA4  0E00               	movlw	0
  4618  013AA6  0100               	movlb	0	; () banked
  4619  013AA8  6FD2               	movwf	(?_printf+3)& (0+255),b
  4620  013AAA  0E23               	movlw	35
  4621  013AAC  6FD1               	movwf	(?_printf+2)& (0+255),b
  4622  013AAE  EC7F  F092         	call	_printf	;wreg free
  4623                           
  4624                           ;main.c: 310: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4625  013AB2  0E95               	movlw	low STR_6
  4626  013AB4  0100               	movlb	0	; () banked
  4627  013AB6  6FCF               	movwf	printf@f& (0+255),b
  4628  013AB8  0EFF               	movlw	high STR_6
  4629  013ABA  0100               	movlb	0	; () banked
  4630  013ABC  6FD0               	movwf	(printf@f+1)& (0+255),b
  4631  013ABE  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4632  013AC2  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4633  013AC6  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4634  013ACA  0100               	movlb	0	; () banked
  4635  013ACC  6BD4               	clrf	(?_printf+5)& (0+255),b
  4636  013ACE  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4637  013AD2  0100               	movlb	0	; () banked
  4638  013AD4  6BD6               	clrf	(?_printf+7)& (0+255),b
  4639  013AD6  EC7F  F092         	call	_printf	;wreg free
  4640                           
  4641                           ;main.c: 311: Console_Render();
  4642  013ADA  EC93  F08F         	call	_Console_Render	;wreg free
  4643                           
  4644                           ;main.c: 313: dist = 0;
  4645  013ADE  0E00               	movlw	0
  4646  013AE0  0100               	movlb	0	; () banked
  4647  013AE2  6F6A               	movwf	(_dist+1)& (0+255),b
  4648  013AE4  0E00               	movlw	0
  4649  013AE6  6F69               	movwf	_dist& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;main.c: 314: irobot_move_straight(200);
  4653  013AE8  0E00               	movlw	0
  4654  013AEA  0100               	movlb	0	; () banked
  4655  013AEC  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4656  013AEE  0EC8               	movlw	200
  4657  013AF0  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4658  013AF2  EC74  F0B3         	call	_irobot_move_straight	;wreg free
  4659                           
  4660                           ;main.c: 315: while (dist < 5000) {
  4661  013AF6  D027               	goto	l2394
  4662  013AF8                     
  4663                           ;main.c: 316: update_distance();
  4664  013AF8  ECE8  F0B3         	call	_update_distance	;wreg free
  4665                           
  4666                           ;main.c: 317: dist += iRDistance;
  4667  013AFC  0100               	movlb	0	; () banked
  4668  013AFE  5179               	movf	_iRDistance& (0+255),w,b
  4669  013B00  0100               	movlb	0	; () banked
  4670  013B02  2769               	addwf	_dist& (0+255),f,b
  4671  013B04  0100               	movlb	0	; () banked
  4672  013B06  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4673  013B08  0100               	movlb	0	; () banked
  4674  013B0A  236A               	addwfc	(_dist+1)& (0+255),f,b
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;main.c: 318: printf("%c", (char)35);
  4678  013B0C  0EFB               	movlw	low STR_1
  4679  013B0E  0100               	movlb	0	; () banked
  4680  013B10  6FCF               	movwf	printf@f& (0+255),b
  4681  013B12  0EFF               	movlw	high STR_1
  4682  013B14  0100               	movlb	0	; () banked
  4683  013B16  6FD0               	movwf	(printf@f+1)& (0+255),b
  4684  013B18  0E00               	movlw	0
  4685  013B1A  0100               	movlb	0	; () banked
  4686  013B1C  6FD2               	movwf	(?_printf+3)& (0+255),b
  4687  013B1E  0E23               	movlw	35
  4688  013B20  6FD1               	movwf	(?_printf+2)& (0+255),b
  4689  013B22  EC7F  F092         	call	_printf	;wreg free
  4690                           
  4691                           ;main.c: 319: printf("Distance: %d\n", dist);
  4692  013B26  0EED               	movlw	low STR_2
  4693  013B28  0100               	movlb	0	; () banked
  4694  013B2A  6FCF               	movwf	printf@f& (0+255),b
  4695  013B2C  0EFF               	movlw	high STR_2
  4696  013B2E  0100               	movlb	0	; () banked
  4697  013B30  6FD0               	movwf	(printf@f+1)& (0+255),b
  4698  013B32  C069  F0D1         	movff	_dist,?_printf+2
  4699  013B36  C06A  F0D2         	movff	_dist+1,?_printf+3
  4700  013B3A  EC7F  F092         	call	_printf	;wreg free
  4701                           
  4702                           ;main.c: 320: Console_Render();
  4703  013B3E  EC93  F08F         	call	_Console_Render	;wreg free
  4704                           
  4705                           ;main.c: 321: measureAndDisplayDistance();
  4706  013B42  EC8A  F0A6         	call	_measureAndDisplayDistance	;wreg free
  4707  013B46                     l2394:
  4708  013B46  0100               	movlb	0	; () banked
  4709  013B48  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4710  013B4A  D7D6               	goto	l2395
  4711  013B4C  0E88               	movlw	136
  4712  013B4E  0100               	movlb	0	; () banked
  4713  013B50  5D69               	subwf	_dist& (0+255),w,b
  4714  013B52  0E13               	movlw	19
  4715  013B54  0100               	movlb	0	; () banked
  4716  013B56  596A               	subwfb	(_dist+1)& (0+255),w,b
  4717  013B58  A0D8               	btfss	status,0,c
  4718  013B5A  D7CE               	goto	l2395
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;main.c: 322: }
  4722                           ;main.c: 323: irobot_stop_motion(0);
  4723                           
  4724                           ; BSR set to: 0
  4725  013B5C  0E00               	movlw	0
  4726  013B5E  EC74  F0AF         	call	_irobot_stop_motion
  4727                           
  4728                           ;main.c: 325: if (MXK_Release())
  4729  013B62  EC4B  F0B3         	call	_MXK_Release	;wreg free
  4730  013B66  0900               	iorlw	0
  4731  013B68  B4D8               	btfsc	status,2,c
  4732  013B6A  0012               	return	
  4733                           
  4734                           ;main.c: 326: MXK_Dequeue();
  4735  013B6C  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  4736  013B70  0012               	return	
  4737  013B72                     __end_of_mode2:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           postdec1	equ	0xFE5
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _measureAndDisplayDistance *****************
  4751 ;; Defined at:
  4752 ;;		line 224 in file "main.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;Total ram usage:        4 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:   13
  4773 ;; This function calls:
  4774 ;;		_ADC_Start
  4775 ;;		_ADC_Voltage
  4776 ;;		_HMI_Render
  4777 ;;		_HMI_SetNumber
  4778 ;;		_MXK_Dequeue
  4779 ;;		_MXK_Release
  4780 ;;		_MXK_SwitchTo
  4781 ;;		___fldiv
  4782 ;;		___fltol
  4783 ;; This function is called by:
  4784 ;;		_move_and_rotate
  4785 ;;		_mode2
  4786 ;;		_main
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text7
  4791  014D14                     __ptext7:
  4792                           	opt stack 0
  4793  014D14                     _measureAndDisplayDistance:
  4794                           	opt stack 15
  4795                           
  4796                           ;main.c: 225: ADC_Start(&ADC_AN0);
  4797                           
  4798                           ;incstack = 0
  4799  014D14  0EB5               	movlw	low _ADC_AN0
  4800  014D16  0100               	movlb	0	; () banked
  4801  014D18  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4802  014D1A  0E00               	movlw	high _ADC_AN0
  4803  014D1C  0100               	movlb	0	; () banked
  4804  014D1E  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4805  014D20  ECD2  F0A8         	call	_ADC_Start	;wreg free
  4806                           
  4807                           ;main.c: 226: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4808  014D24  0EB5               	movlw	low _ADC_AN0
  4809  014D26  0100               	movlb	0	; () banked
  4810  014D28  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4811  014D2A  0E00               	movlw	high _ADC_AN0
  4812  014D2C  0100               	movlb	0	; () banked
  4813  014D2E  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4814  014D30  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  4815  014D34  C0E1  F104         	movff	?_ADC_Voltage,_measureAndDisplayDistance$15607
  4816  014D38  C0E2  F105         	movff	?_ADC_Voltage+1,_measureAndDisplayDistance$15607+1
  4817  014D3C  C0E3  F106         	movff	?_ADC_Voltage+2,_measureAndDisplayDistance$15607+2
  4818  014D40  C0E4  F107         	movff	?_ADC_Voltage+3,_measureAndDisplayDistance$15607+3
  4819                           
  4820                           ;main.c: 226: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4821  014D44  C104  F0BE         	movff	_measureAndDisplayDistance$15607,___fldiv@a
  4822  014D48  C105  F0BF         	movff	_measureAndDisplayDistance$15607+1,___fldiv@a+1
  4823  014D4C  C106  F0C0         	movff	_measureAndDisplayDistance$15607+2,___fldiv@a+2
  4824  014D50  C107  F0C1         	movff	_measureAndDisplayDistance$15607+3,___fldiv@a+3
  4825  014D54  0E00               	movlw	0
  4826  014D56  0100               	movlb	0	; () banked
  4827  014D58  6FBA               	movwf	___fldiv@b& (0+255),b
  4828  014D5A  0E00               	movlw	0
  4829  014D5C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4830  014D5E  0E6C               	movlw	108
  4831  014D60  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4832  014D62  0E42               	movlw	66
  4833  014D64  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4834  014D66  EC54  F088         	call	___fldiv	;wreg free
  4835  014D6A  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4836  014D6E  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4837  014D72  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4838  014D76  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4839  014D7A  ECC6  F09B         	call	___fltol	;wreg free
  4840  014D7E  C0F3  F06D         	movff	?___fltol,_IRValue
  4841  014D82  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4842                           
  4843                           ;main.c: 227: if (MXK_SwitchTo(eMXK_HMI)) {
  4844  014D86  0E01               	movlw	1
  4845  014D88  ECFF  F0AF         	call	_MXK_SwitchTo
  4846  014D8C  0900               	iorlw	0
  4847  014D8E  B4D8               	btfsc	status,2,c
  4848  014D90  0012               	return	
  4849                           
  4850                           ;main.c: 228: HMI_SetNumber(IRValue);
  4851  014D92  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4852  014D96  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4853  014D9A  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  4854                           
  4855                           ;main.c: 229: HMI_Render();
  4856  014D9E  EC60  F0B0         	call	_HMI_Render	;wreg free
  4857                           
  4858                           ;main.c: 230: if (MXK_Release())
  4859  014DA2  EC4B  F0B3         	call	_MXK_Release	;wreg free
  4860  014DA6  0900               	iorlw	0
  4861  014DA8  B4D8               	btfsc	status,2,c
  4862  014DAA  0012               	return	
  4863                           
  4864                           ;main.c: 231: MXK_Dequeue();
  4865  014DAC  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  4866  014DB0  0012               	return	
  4867  014DB2                     __end_of_measureAndDisplayDistance:
  4868                           	opt stack 0
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           postinc0	equ	0xFEE
  4874                           wreg	equ	0xFE8
  4875                           postdec1	equ	0xFE5
  4876                           fsr1h	equ	0xFE2
  4877                           fsr1l	equ	0xFE1
  4878                           status	equ	0xFD8
  4879                           
  4880 ;; *************** function _irobot_move_straight *****************
  4881 ;; Defined at:
  4882 ;;		line 346 in file "Library/iRobotSerial.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  straightSpee    2   25[BANK0 ] short 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:        2 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    9
  4903 ;; This function calls:
  4904 ;;		_irobot_move
  4905 ;; This function is called by:
  4906 ;;		_move_and_rotate
  4907 ;;		_mode2
  4908 ;;		_mode4
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text8
  4913  0166E8                     __ptext8:
  4914                           	opt stack 0
  4915  0166E8                     _irobot_move_straight:
  4916                           	opt stack 20
  4917                           
  4918                           ;iRobotSerial.c: 347: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4919                           
  4920                           ;incstack = 0
  4921  0166E8  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4922  0166EC  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4923  0166F0  0E7F               	movlw	127
  4924  0166F2  0100               	movlb	0	; () banked
  4925  0166F4  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4926  0166F6  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4927  0166F8  0E00               	movlw	0
  4928  0166FA  EC42  F0A3         	call	_irobot_move
  4929  0166FE  0012               	return		;funcret
  4930  016700                     __end_of_irobot_move_straight:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           postdec1	equ	0xFE5
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _mode1 *****************
  4944 ;; Defined at:
  4945 ;;		line 236 in file "main.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  moveto          2    2[BANK3 ] int 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;Total ram usage:        8 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:   17
  4966 ;; This function calls:
  4967 ;;		_ADC_Start
  4968 ;;		_ADC_Voltage
  4969 ;;		_Console_Render
  4970 ;;		_HMI_Render
  4971 ;;		_HMI_SetNumber
  4972 ;;		_MXK_Dequeue
  4973 ;;		_MXK_Release
  4974 ;;		_MXK_SwitchTo
  4975 ;;		_Motor_Move
  4976 ;;		_Motor_Speed
  4977 ;;		___fldiv
  4978 ;;		___fltol
  4979 ;;		_printf
  4980 ;;		_safeToGo
  4981 ;; This function is called by:
  4982 ;;		_main
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text9
  4987  010CD4                     __ptext9:
  4988                           	opt stack 0
  4989  010CD4                     _mode1:
  4990                           	opt stack 13
  4991                           
  4992                           ;main.c: 237: safeToGo();
  4993                           
  4994                           ;incstack = 0
  4995  010CD4  ECBE  F0AE         	call	_safeToGo	;wreg free
  4996                           
  4997                           ;main.c: 238: if (MXK_SwitchTo(eMXK_HMI)) {
  4998  010CD8  0E01               	movlw	1
  4999  010CDA  ECFF  F0AF         	call	_MXK_SwitchTo
  5000  010CDE  0900               	iorlw	0
  5001  010CE0  B4D8               	btfsc	status,2,c
  5002  010CE2  D029               	goto	l2368
  5003                           
  5004                           ;main.c: 239: printf("%c", (char)35);
  5005  010CE4  0EFB               	movlw	low STR_1
  5006  010CE6  0100               	movlb	0	; () banked
  5007  010CE8  6FCF               	movwf	printf@f& (0+255),b
  5008  010CEA  0EFF               	movlw	high STR_1
  5009  010CEC  0100               	movlb	0	; () banked
  5010  010CEE  6FD0               	movwf	(printf@f+1)& (0+255),b
  5011  010CF0  0E00               	movlw	0
  5012  010CF2  0100               	movlb	0	; () banked
  5013  010CF4  6FD2               	movwf	(?_printf+3)& (0+255),b
  5014  010CF6  0E23               	movlw	35
  5015  010CF8  6FD1               	movwf	(?_printf+2)& (0+255),b
  5016  010CFA  EC7F  F092         	call	_printf	;wreg free
  5017                           
  5018                           ;main.c: 240: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5019  010CFE  0E95               	movlw	low STR_6
  5020  010D00  0100               	movlb	0	; () banked
  5021  010D02  6FCF               	movwf	printf@f& (0+255),b
  5022  010D04  0EFF               	movlw	high STR_6
  5023  010D06  0100               	movlb	0	; () banked
  5024  010D08  6FD0               	movwf	(printf@f+1)& (0+255),b
  5025  010D0A  C075  F0D1         	movff	_distanceTotal,?_printf+2
  5026  010D0E  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  5027  010D12  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  5028  010D16  0100               	movlb	0	; () banked
  5029  010D18  6BD4               	clrf	(?_printf+5)& (0+255),b
  5030  010D1A  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  5031  010D1E  0100               	movlb	0	; () banked
  5032  010D20  6BD6               	clrf	(?_printf+7)& (0+255),b
  5033  010D22  EC7F  F092         	call	_printf	;wreg free
  5034                           
  5035                           ;main.c: 241: Console_Render();
  5036  010D26  EC93  F08F         	call	_Console_Render	;wreg free
  5037                           
  5038                           ;main.c: 242: if (MXK_Release())
  5039  010D2A  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5040  010D2E  0900               	iorlw	0
  5041  010D30  A4D8               	btfss	status,2,c
  5042                           
  5043                           ;main.c: 243: MXK_Dequeue();
  5044  010D32  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5045  010D36                     l2368:
  5046                           
  5047                           ;main.c: 244: }
  5048                           ;main.c: 245: StepRotate = 0;
  5049  010D36  0E00               	movlw	0
  5050  010D38  0100               	movlb	0	; () banked
  5051  010D3A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  5052  010D3C  0E00               	movlw	0
  5053  010D3E  6F71               	movwf	_StepRotate& (0+255),b
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;main.c: 246: MinDist = 1000;
  5057  010D40  0E03               	movlw	3
  5058  010D42  0100               	movlb	0	; () banked
  5059  010D44  6FFC               	movwf	(_MinDist+1)& (0+255),b
  5060  010D46  0EE8               	movlw	232
  5061  010D48  6FFB               	movwf	_MinDist& (0+255),b
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;main.c: 247: Stepstomin = 0;
  5065  010D4A  0E00               	movlw	0
  5066  010D4C  0100               	movlb	0	; () banked
  5067  010D4E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  5068  010D50  0E00               	movlw	0
  5069  010D52  6F6F               	movwf	_Stepstomin& (0+255),b
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;main.c: 248: IRValue = 0;
  5073  010D54  0E00               	movlw	0
  5074  010D56  0100               	movlb	0	; () banked
  5075  010D58  6F6E               	movwf	(_IRValue+1)& (0+255),b
  5076  010D5A  0E00               	movlw	0
  5077  010D5C  6F6D               	movwf	_IRValue& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;main.c: 249: TimerX = 8;
  5081  010D5E  0E00               	movlw	0
  5082  010D60  0100               	movlb	0	; () banked
  5083  010D62  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5084  010D64  0E08               	movlw	8
  5085  010D66  6FF9               	movwf	_TimerX& (0+255),b
  5086                           
  5087                           ;main.c: 250: while (StepRotate < 400) {
  5088  010D68  D0F9               	goto	u13990
  5089  010D6A                     
  5090                           ; BSR set to: 0
  5091                           ;main.c: 251: StepRotate++;
  5092                           
  5093                           ; BSR set to: 0
  5094  010D6A  0100               	movlb	0	; () banked
  5095  010D6C  4B71               	infsnz	_StepRotate& (0+255),f,b
  5096  010D6E  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;main.c: 252: ADC_Start(&ADC_AN0);
  5100  010D70  0EB5               	movlw	low _ADC_AN0
  5101  010D72  0100               	movlb	0	; () banked
  5102  010D74  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5103  010D76  0E00               	movlw	high _ADC_AN0
  5104  010D78  0100               	movlb	0	; () banked
  5105  010D7A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5106  010D7C  ECD2  F0A8         	call	_ADC_Start	;wreg free
  5107                           
  5108                           ;main.c: 253: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5109  010D80  0EB5               	movlw	low _ADC_AN0
  5110  010D82  0100               	movlb	0	; () banked
  5111  010D84  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5112  010D86  0E00               	movlw	high _ADC_AN0
  5113  010D88  0100               	movlb	0	; () banked
  5114  010D8A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5115  010D8C  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  5116  010D90  C0E1  F3FC         	movff	?_ADC_Voltage,_mode1$15608
  5117  010D94  C0E2  F3FD         	movff	?_ADC_Voltage+1,_mode1$15608+1
  5118  010D98  C0E3  F3FE         	movff	?_ADC_Voltage+2,_mode1$15608+2
  5119  010D9C  C0E4  F3FF         	movff	?_ADC_Voltage+3,_mode1$15608+3
  5120                           
  5121                           ;main.c: 253: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5122  010DA0  C3FC  F0BE         	movff	_mode1$15608,___fldiv@a
  5123  010DA4  C3FD  F0BF         	movff	_mode1$15608+1,___fldiv@a+1
  5124  010DA8  C3FE  F0C0         	movff	_mode1$15608+2,___fldiv@a+2
  5125  010DAC  C3FF  F0C1         	movff	_mode1$15608+3,___fldiv@a+3
  5126  010DB0  0E00               	movlw	0
  5127  010DB2  0100               	movlb	0	; () banked
  5128  010DB4  6FBA               	movwf	___fldiv@b& (0+255),b
  5129  010DB6  0E00               	movlw	0
  5130  010DB8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5131  010DBA  0E6C               	movlw	108
  5132  010DBC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5133  010DBE  0E42               	movlw	66
  5134  010DC0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5135  010DC2  EC54  F088         	call	___fldiv	;wreg free
  5136  010DC6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5137  010DCA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5138  010DCE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5139  010DD2  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5140  010DD6  ECC6  F09B         	call	___fltol	;wreg free
  5141  010DDA  C0F3  F06D         	movff	?___fltol,_IRValue
  5142  010DDE  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5143                           
  5144                           ;main.c: 254: if (MXK_SwitchTo(eMXK_HMI)) {
  5145  010DE2  0E01               	movlw	1
  5146  010DE4  ECFF  F0AF         	call	_MXK_SwitchTo
  5147  010DE8  0900               	iorlw	0
  5148  010DEA  B4D8               	btfsc	status,2,c
  5149  010DEC  D00E               	goto	l2372
  5150                           
  5151                           ;main.c: 255: HMI_SetNumber(IRValue);
  5152  010DEE  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5153  010DF2  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5154  010DF6  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  5155                           
  5156                           ;main.c: 256: HMI_Render();
  5157  010DFA  EC60  F0B0         	call	_HMI_Render	;wreg free
  5158                           
  5159                           ;main.c: 257: if (MXK_Release())
  5160  010DFE  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5161  010E02  0900               	iorlw	0
  5162  010E04  A4D8               	btfss	status,2,c
  5163                           
  5164                           ;main.c: 258: MXK_Dequeue();
  5165  010E06  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5166  010E0A                     l2372:
  5167                           
  5168                           ;main.c: 259: }
  5169                           ;main.c: 260: if (IRValue < MinDist) {
  5170  010E0A  0100               	movlb	0	; () banked
  5171  010E0C  51FB               	movf	_MinDist& (0+255),w,b
  5172  010E0E  0100               	movlb	0	; () banked
  5173  010E10  5D6D               	subwf	_IRValue& (0+255),w,b
  5174  010E12  0100               	movlb	0	; () banked
  5175  010E14  516E               	movf	(_IRValue+1)& (0+255),w,b
  5176  010E16  0A80               	xorlw	128
  5177  010E18  0103               	movlb	3	; () banked
  5178  010E1A  6FF8               	movwf	??_mode1& (0+255),b
  5179  010E1C  0100               	movlb	0	; () banked
  5180  010E1E  51FC               	movf	(_MinDist+1)& (0+255),w,b
  5181  010E20  0A80               	xorlw	128
  5182  010E22  0103               	movlb	3	; () banked
  5183  010E24  59F8               	subwfb	??_mode1& (0+255),w,b
  5184  010E26  B0D8               	btfsc	status,0,c
  5185  010E28  D008               	goto	l2373
  5186                           
  5187                           ; BSR set to: 3
  5188                           ;main.c: 261: MinDist = IRValue;
  5189  010E2A  C06D  F0FB         	movff	_IRValue,_MinDist
  5190  010E2E  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  5191                           
  5192                           ;main.c: 262: Stepstomin = StepRotate;
  5193  010E32  C071  F06F         	movff	_StepRotate,_Stepstomin
  5194  010E36  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  5195  010E3A                     l2373:
  5196                           
  5197                           ; BSR set to: 3
  5198                           ;main.c: 263: }
  5199                           ;main.c: 264: if (MXK_SwitchTo(eMXK_Motor)) {
  5200                           
  5201                           ; BSR set to: 3
  5202  010E3A  0E08               	movlw	8
  5203  010E3C  ECFF  F0AF         	call	_MXK_SwitchTo
  5204  010E40  0900               	iorlw	0
  5205  010E42  B4D8               	btfsc	status,2,c
  5206  010E44  D020               	goto	l2375
  5207                           
  5208                           ;main.c: 265: Motor_Speed(&Stepper, (50));
  5209  010E46  0EAF               	movlw	low _Stepper
  5210  010E48  0100               	movlb	0	; () banked
  5211  010E4A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5212  010E4C  0E00               	movlw	high _Stepper
  5213  010E4E  0100               	movlb	0	; () banked
  5214  010E50  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5215  010E52  0E00               	movlw	0
  5216  010E54  0100               	movlb	0	; () banked
  5217  010E56  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5218  010E58  0E32               	movlw	50
  5219  010E5A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5220  010E5C  EC31  F0B2         	call	_Motor_Speed	;wreg free
  5221                           
  5222                           ;main.c: 266: Motor_Move(&Stepper, 1);
  5223  010E60  0EAF               	movlw	low _Stepper
  5224  010E62  0100               	movlb	0	; () banked
  5225  010E64  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5226  010E66  0E00               	movlw	high _Stepper
  5227  010E68  0100               	movlb	0	; () banked
  5228  010E6A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5229  010E6C  0E00               	movlw	0
  5230  010E6E  0100               	movlb	0	; () banked
  5231  010E70  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  5232  010E72  0E01               	movlw	1
  5233  010E74  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  5234  010E76  EC35  F0B1         	call	_Motor_Move	;wreg free
  5235                           
  5236                           ;main.c: 267: if (MXK_Release())
  5237  010E7A  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5238  010E7E  0900               	iorlw	0
  5239  010E80  A4D8               	btfss	status,2,c
  5240                           
  5241                           ;main.c: 268: MXK_Dequeue();
  5242  010E82  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5243  010E86                     l2375:
  5244                           
  5245                           ;main.c: 269: }
  5246                           ;main.c: 270: TimerX = 10;
  5247  010E86  0E00               	movlw	0
  5248  010E88  0100               	movlb	0	; () banked
  5249  010E8A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5250  010E8C  0E0A               	movlw	10
  5251  010E8E  6FF9               	movwf	_TimerX& (0+255),b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;main.c: 271: if (TimerX > 0) {
  5255  010E90  0100               	movlb	0	; () banked
  5256  010E92  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5257  010E94  D063               	goto	u13990
  5258  010E96  0100               	movlb	0	; () banked
  5259  010E98  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5260  010E9A  E156               	bnz	l16749
  5261  010E9C  0100               	movlb	0	; () banked
  5262  010E9E  05F9               	decf	_TimerX& (0+255),w,b
  5263  010EA0  B0D8               	btfsc	status,0,c
  5264  010EA2  D052               	goto	l2377
  5265  010EA4  D05B               	goto	u13990
  5266  010EA6                     l16731:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;main.c: 273: ADC_Start(&ADC_AN0);
  5270  010EA6  0EB5               	movlw	low _ADC_AN0
  5271  010EA8  0100               	movlb	0	; () banked
  5272  010EAA  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5273  010EAC  0E00               	movlw	high _ADC_AN0
  5274  010EAE  0100               	movlb	0	; () banked
  5275  010EB0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5276  010EB2  ECD2  F0A8         	call	_ADC_Start	;wreg free
  5277                           
  5278                           ;main.c: 274: if (MXK_SwitchTo(eMXK_HMI)) {
  5279  010EB6  0E01               	movlw	1
  5280  010EB8  ECFF  F0AF         	call	_MXK_SwitchTo
  5281  010EBC  0900               	iorlw	0
  5282  010EBE  B4D8               	btfsc	status,2,c
  5283  010EC0  D00E               	goto	l2380
  5284                           
  5285                           ;main.c: 275: HMI_SetNumber(IRValue);
  5286  010EC2  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5287  010EC6  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5288  010ECA  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  5289                           
  5290                           ;main.c: 276: HMI_Render();
  5291  010ECE  EC60  F0B0         	call	_HMI_Render	;wreg free
  5292                           
  5293                           ;main.c: 277: if (MXK_Release())
  5294  010ED2  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5295  010ED6  0900               	iorlw	0
  5296  010ED8  A4D8               	btfss	status,2,c
  5297                           
  5298                           ;main.c: 278: MXK_Dequeue();
  5299  010EDA  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5300  010EDE                     l2380:
  5301                           
  5302                           ;main.c: 279: }
  5303                           ;main.c: 280: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5304  010EDE  0EB5               	movlw	low _ADC_AN0
  5305  010EE0  0100               	movlb	0	; () banked
  5306  010EE2  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5307  010EE4  0E00               	movlw	high _ADC_AN0
  5308  010EE6  0100               	movlb	0	; () banked
  5309  010EE8  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5310  010EEA  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  5311  010EEE  C0E1  F3FC         	movff	?_ADC_Voltage,_mode1$15608
  5312  010EF2  C0E2  F3FD         	movff	?_ADC_Voltage+1,_mode1$15608+1
  5313  010EF6  C0E3  F3FE         	movff	?_ADC_Voltage+2,_mode1$15608+2
  5314  010EFA  C0E4  F3FF         	movff	?_ADC_Voltage+3,_mode1$15608+3
  5315                           
  5316                           ;main.c: 279: }
  5317                           ;main.c: 280: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5318  010EFE  C3FC  F0BE         	movff	_mode1$15608,___fldiv@a
  5319  010F02  C3FD  F0BF         	movff	_mode1$15608+1,___fldiv@a+1
  5320  010F06  C3FE  F0C0         	movff	_mode1$15608+2,___fldiv@a+2
  5321  010F0A  C3FF  F0C1         	movff	_mode1$15608+3,___fldiv@a+3
  5322  010F0E  0E00               	movlw	0
  5323  010F10  0100               	movlb	0	; () banked
  5324  010F12  6FBA               	movwf	___fldiv@b& (0+255),b
  5325  010F14  0E00               	movlw	0
  5326  010F16  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5327  010F18  0E6C               	movlw	108
  5328  010F1A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5329  010F1C  0E42               	movlw	66
  5330  010F1E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5331  010F20  EC54  F088         	call	___fldiv	;wreg free
  5332  010F24  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5333  010F28  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5334  010F2C  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5335  010F30  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5336  010F34  ECC6  F09B         	call	___fltol	;wreg free
  5337  010F38  C0F3  F06D         	movff	?___fltol,_IRValue
  5338  010F3C  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5339                           
  5340                           ;main.c: 281: TimerX--;
  5341  010F40  0100               	movlb	0	; () banked
  5342  010F42  07F9               	decf	_TimerX& (0+255),f,b
  5343  010F44  A0D8               	btfss	status,0,c
  5344  010F46  07FA               	decf	(_TimerX+1)& (0+255),f,b
  5345  010F48                     l2377:
  5346  010F48                     l16749:
  5347                           
  5348                           ; BSR set to: 0
  5349  010F48  0100               	movlb	0	; () banked
  5350  010F4A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5351  010F4C  D007               	goto	u13990
  5352  010F4E  0100               	movlb	0	; () banked
  5353  010F50  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5354  010F52  E1A9               	bnz	l16731
  5355  010F54  0100               	movlb	0	; () banked
  5356  010F56  05F9               	decf	_TimerX& (0+255),w,b
  5357  010F58  B0D8               	btfsc	status,0,c
  5358  010F5A  D7A5               	goto	l2378
  5359  010F5C                     u13990:
  5360                           
  5361                           ; BSR set to: 0
  5362                           
  5363                           ; BSR set to: 0
  5364                           
  5365                           ; BSR set to: 0
  5366                           
  5367                           ; BSR set to: 0
  5368  010F5C  0100               	movlb	0	; () banked
  5369  010F5E  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  5370  010F60  D704               	goto	l2370
  5371  010F62  0E90               	movlw	144
  5372  010F64  0100               	movlb	0	; () banked
  5373  010F66  5D71               	subwf	_StepRotate& (0+255),w,b
  5374  010F68  0E01               	movlw	1
  5375  010F6A  0100               	movlb	0	; () banked
  5376  010F6C  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  5377  010F6E  A0D8               	btfss	status,0,c
  5378  010F70  D6FC               	goto	l2370
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;main.c: 282: }
  5382                           ;main.c: 283: }
  5383                           ;main.c: 284: }
  5384                           ;main.c: 285: if (MXK_SwitchTo(eMXK_Motor)) {
  5385                           
  5386                           ; BSR set to: 0
  5387  010F72  0E08               	movlw	8
  5388  010F74  ECFF  F0AF         	call	_MXK_SwitchTo
  5389  010F78  0900               	iorlw	0
  5390  010F7A  B4D8               	btfsc	status,2,c
  5391  010F7C  D08A               	goto	l2385
  5392                           
  5393                           ;main.c: 286: Motor_Speed(&Stepper, (50));
  5394  010F7E  0EAF               	movlw	low _Stepper
  5395  010F80  0100               	movlb	0	; () banked
  5396  010F82  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5397  010F84  0E00               	movlw	high _Stepper
  5398  010F86  0100               	movlb	0	; () banked
  5399  010F88  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5400  010F8A  0E00               	movlw	0
  5401  010F8C  0100               	movlb	0	; () banked
  5402  010F8E  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5403  010F90  0E32               	movlw	50
  5404  010F92  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5405  010F94  EC31  F0B2         	call	_Motor_Speed	;wreg free
  5406                           
  5407                           ;main.c: 287: int moveto = 400 - Stepstomin;
  5408  010F98  C06F  F3F8         	movff	_Stepstomin,??_mode1
  5409  010F9C  C070  F3F9         	movff	_Stepstomin+1,??_mode1+1
  5410  010FA0  0103               	movlb	3	; () banked
  5411  010FA2  1FF8               	comf	??_mode1& (0+255),f,b
  5412  010FA4  1FF9               	comf	(??_mode1+1)& (0+255),f,b
  5413  010FA6  4BF8               	infsnz	??_mode1& (0+255),f,b
  5414  010FA8  2BF9               	incf	(??_mode1+1)& (0+255),f,b
  5415  010FAA  0E90               	movlw	144
  5416  010FAC  0103               	movlb	3	; () banked
  5417  010FAE  25F8               	addwf	??_mode1& (0+255),w,b
  5418  010FB0  0103               	movlb	3	; () banked
  5419  010FB2  6FFA               	movwf	mode1@moveto& (0+255),b
  5420  010FB4  0E01               	movlw	1
  5421  010FB6  0103               	movlb	3	; () banked
  5422  010FB8  21F9               	addwfc	(??_mode1+1)& (0+255),w,b
  5423  010FBA  0103               	movlb	3	; () banked
  5424  010FBC  6FFB               	movwf	(mode1@moveto+1)& (0+255),b
  5425                           
  5426                           ; BSR set to: 3
  5427                           ;main.c: 289: Motor_Move(&Stepper, (-moveto));
  5428  010FBE  0EAF               	movlw	low _Stepper
  5429  010FC0  0100               	movlb	0	; () banked
  5430  010FC2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5431  010FC4  0E00               	movlw	high _Stepper
  5432  010FC6  0100               	movlb	0	; () banked
  5433  010FC8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5434  010FCA  C3FA  F3F8         	movff	mode1@moveto,??_mode1
  5435  010FCE  C3FB  F3F9         	movff	mode1@moveto+1,??_mode1+1
  5436  010FD2  0103               	movlb	3	; () banked
  5437  010FD4  1FF8               	comf	??_mode1& (0+255),f,b
  5438  010FD6  1FF9               	comf	(??_mode1+1)& (0+255),f,b
  5439  010FD8  4BF8               	infsnz	??_mode1& (0+255),f,b
  5440  010FDA  2BF9               	incf	(??_mode1+1)& (0+255),f,b
  5441  010FDC  C3F8  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5442  010FE0  C3F9  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5443  010FE4  EC35  F0B1         	call	_Motor_Move	;wreg free
  5444                           
  5445                           ;main.c: 290: if (MXK_Release())
  5446  010FE8  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5447  010FEC  0900               	iorlw	0
  5448  010FEE  B4D8               	btfsc	status,2,c
  5449  010FF0  D050               	goto	l2385
  5450                           
  5451                           ;main.c: 291: MXK_Dequeue();
  5452  010FF2  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5453                           
  5454                           ;main.c: 292: }
  5455                           ;main.c: 293: while (Stepper.mDelta > 0) {
  5456  010FF6  D04D               	goto	l2385
  5457  010FF8                     l16765:
  5458                           
  5459                           ;main.c: 294: ADC_Start(&ADC_AN0);
  5460  010FF8  0EB5               	movlw	low _ADC_AN0
  5461  010FFA  0100               	movlb	0	; () banked
  5462  010FFC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5463  010FFE  0E00               	movlw	high _ADC_AN0
  5464  011000  0100               	movlb	0	; () banked
  5465  011002  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5466  011004  ECD2  F0A8         	call	_ADC_Start	;wreg free
  5467                           
  5468                           ;main.c: 295: if (MXK_SwitchTo(eMXK_HMI)) {
  5469  011008  0E01               	movlw	1
  5470  01100A  ECFF  F0AF         	call	_MXK_SwitchTo
  5471  01100E  0900               	iorlw	0
  5472  011010  B4D8               	btfsc	status,2,c
  5473  011012  D00E               	goto	l2388
  5474                           
  5475                           ;main.c: 296: HMI_SetNumber(IRValue);
  5476  011014  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5477  011018  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5478  01101C  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
  5479                           
  5480                           ;main.c: 297: HMI_Render();
  5481  011020  EC60  F0B0         	call	_HMI_Render	;wreg free
  5482                           
  5483                           ;main.c: 298: if (MXK_Release())
  5484  011024  EC4B  F0B3         	call	_MXK_Release	;wreg free
  5485  011028  0900               	iorlw	0
  5486  01102A  A4D8               	btfss	status,2,c
  5487                           
  5488                           ;main.c: 299: MXK_Dequeue();
  5489  01102C  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
  5490  011030                     l2388:
  5491                           
  5492                           ;main.c: 300: }
  5493                           ;main.c: 301: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5494  011030  0EB5               	movlw	low _ADC_AN0
  5495  011032  0100               	movlb	0	; () banked
  5496  011034  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5497  011036  0E00               	movlw	high _ADC_AN0
  5498  011038  0100               	movlb	0	; () banked
  5499  01103A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5500  01103C  EC2C  F09E         	call	_ADC_Voltage	;wreg free
  5501  011040  C0E1  F3FC         	movff	?_ADC_Voltage,_mode1$15608
  5502  011044  C0E2  F3FD         	movff	?_ADC_Voltage+1,_mode1$15608+1
  5503  011048  C0E3  F3FE         	movff	?_ADC_Voltage+2,_mode1$15608+2
  5504  01104C  C0E4  F3FF         	movff	?_ADC_Voltage+3,_mode1$15608+3
  5505                           
  5506                           ;main.c: 300: }
  5507                           ;main.c: 301: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5508  011050  C3FC  F0BE         	movff	_mode1$15608,___fldiv@a
  5509  011054  C3FD  F0BF         	movff	_mode1$15608+1,___fldiv@a+1
  5510  011058  C3FE  F0C0         	movff	_mode1$15608+2,___fldiv@a+2
  5511  01105C  C3FF  F0C1         	movff	_mode1$15608+3,___fldiv@a+3
  5512  011060  0E00               	movlw	0
  5513  011062  0100               	movlb	0	; () banked
  5514  011064  6FBA               	movwf	___fldiv@b& (0+255),b
  5515  011066  0E00               	movlw	0
  5516  011068  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5517  01106A  0E6C               	movlw	108
  5518  01106C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5519  01106E  0E42               	movlw	66
  5520  011070  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5521  011072  EC54  F088         	call	___fldiv	;wreg free
  5522  011076  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5523  01107A  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5524  01107E  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5525  011082  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5526  011086  ECC6  F09B         	call	___fltol	;wreg free
  5527  01108A  C0F3  F06D         	movff	?___fltol,_IRValue
  5528  01108E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5529  011092                     l2385:
  5530  011092  0100               	movlb	0	; () banked
  5531  011094  BFB0               	btfsc	(_Stepper+1)& (0+255),7,b
  5532  011096  0012               	return	
  5533  011098  0100               	movlb	0	; () banked
  5534  01109A  51B0               	movf	(_Stepper+1)& (0+255),w,b
  5535  01109C  E1AD               	bnz	l16765
  5536  01109E  0100               	movlb	0	; () banked
  5537  0110A0  05AF               	decf	_Stepper& (0+255),w,b
  5538  0110A2  A0D8               	btfss	status,0,c
  5539  0110A4  0012               	return	
  5540  0110A6  D7A8               	goto	l2386
  5541  0110A8                     __end_of_mode1:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1h	equ	0xFE2
  5551                           fsr1l	equ	0xFE1
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _safeToGo *****************
  5555 ;; Defined at:
  5556 ;;		line 125 in file "main.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:   16
  5577 ;; This function calls:
  5578 ;;		_HMI_Poll
  5579 ;;		_irobot_song_play
  5580 ;;		_irobot_stop_motion
  5581 ;;		_update_angle
  5582 ;;		_update_bump_and_cliff
  5583 ;;		_update_distance
  5584 ;; This function is called by:
  5585 ;;		_mode1
  5586 ;;		_mode2
  5587 ;;		_mode3
  5588 ;;		_mode4
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text10
  5593  015D7C                     __ptext10:
  5594                           	opt stack 0
  5595  015D7C                     _safeToGo:
  5596                           	opt stack 13
  5597                           
  5598                           ;main.c: 126: update_bump_and_cliff();
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;incstack = 0
  5602  015D7C  EC18  F0B1         	call	_update_bump_and_cliff	;wreg free
  5603                           
  5604                           ;main.c: 127: update_distance();
  5605  015D80  ECE8  F0B3         	call	_update_distance	;wreg free
  5606                           
  5607                           ;main.c: 128: update_angle();
  5608  015D84  ECF1  F0B3         	call	_update_angle	;wreg free
  5609                           
  5610                           ;main.c: 129: if (iRBumpLeft || iRBumpRight) {
  5611  015D88  0100               	movlb	0	; () banked
  5612  015D8A  5187               	movf	_iRBumpLeft& (0+255),w,b
  5613  015D8C  A4D8               	btfss	status,2,c
  5614  015D8E  D004               	goto	u11430
  5615                           
  5616                           ; BSR set to: 0
  5617  015D90  0100               	movlb	0	; () banked
  5618  015D92  5188               	movf	_iRBumpRight& (0+255),w,b
  5619  015D94  B4D8               	btfsc	status,2,c
  5620  015D96  D006               	goto	l2327
  5621  015D98                     u11430:
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;main.c: 130: irobot_song_play(0);
  5625                           
  5626                           ; BSR set to: 0
  5627  015D98  0E00               	movlw	0
  5628  015D9A  ECD4  F0B3         	call	_irobot_song_play
  5629                           
  5630                           ;main.c: 131: irobot_stop_motion(0);
  5631  015D9E  0E00               	movlw	0
  5632  015DA0  EC74  F0AF         	call	_irobot_stop_motion
  5633  015DA4                     l2327:
  5634                           
  5635                           ;main.c: 132: }
  5636                           ;main.c: 133: if (angleTotal > 83) {
  5637  015DA4  0100               	movlb	0	; () banked
  5638  015DA6  BF74               	btfsc	(_angleTotal+1)& (0+255),7,b
  5639  015DA8  D00B               	goto	l2330
  5640  015DAA  0100               	movlb	0	; () banked
  5641  015DAC  5174               	movf	(_angleTotal+1)& (0+255),w,b
  5642  015DAE  E105               	bnz	u11440
  5643  015DB0  0E54               	movlw	84
  5644  015DB2  0100               	movlb	0	; () banked
  5645  015DB4  5D73               	subwf	_angleTotal& (0+255),w,b
  5646  015DB6  A0D8               	btfss	status,0,c
  5647  015DB8  D003               	goto	l2330
  5648  015DBA                     u11440:
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;main.c: 134: irobot_stop_motion(0);
  5652  015DBA  0E00               	movlw	0
  5653  015DBC  EC74  F0AF         	call	_irobot_stop_motion
  5654  015DC0                     l2330:
  5655                           
  5656                           ;main.c: 135: }
  5657                           ;main.c: 136: HMI_Poll();
  5658  015DC0  ECF5  F0AA         	call	_HMI_Poll	;wreg free
  5659  015DC4  0012               	return		;funcret
  5660  015DC6                     __end_of_safeToGo:
  5661                           	opt stack 0
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           postdec1	equ	0xFE5
  5669                           fsr1h	equ	0xFE2
  5670                           fsr1l	equ	0xFE1
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _update_distance *****************
  5674 ;; Defined at:
  5675 ;;		line 360 in file "Library/iRobotSerial.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:   10
  5696 ;; This function calls:
  5697 ;;		_irobot_query_and_update
  5698 ;; This function is called by:
  5699 ;;		_safeToGo
  5700 ;;		_move_and_rotate
  5701 ;;		_mode2
  5702 ;;		_mode4
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text11
  5707  0167D0                     __ptext11:
  5708                           	opt stack 0
  5709  0167D0                     _update_distance:
  5710                           	opt stack 19
  5711                           
  5712                           ;iRobotSerial.c: 361: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5713                           
  5714                           ;incstack = 0
  5715  0167D0  0E00               	movlw	0
  5716  0167D2  0100               	movlb	0	; () banked
  5717  0167D4  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5718  0167D6  0E13               	movlw	19
  5719  0167D8  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5720  0167DA  0E01               	movlw	1
  5721  0167DC  ECD8  F095         	call	_irobot_query_and_update
  5722  0167E0  0012               	return		;funcret
  5723  0167E2                     __end_of_update_distance:
  5724                           	opt stack 0
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1h	equ	0xFE2
  5733                           fsr1l	equ	0xFE1
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _update_bump_and_cliff *****************
  5737 ;; Defined at:
  5738 ;;		line 352 in file "Library/iRobotSerial.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:   10
  5759 ;; This function calls:
  5760 ;;		_irobot_query_and_update
  5761 ;; This function is called by:
  5762 ;;		_safeToGo
  5763 ;;		_mode4
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text12
  5768  016230                     __ptext12:
  5769                           	opt stack 0
  5770  016230                     _update_bump_and_cliff:
  5771                           	opt stack 19
  5772                           
  5773                           ;iRobotSerial.c: 353: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5774                           ;iRobotSerial.c: 354: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5775                           ;iRobotSerial.c: 355: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5776                           
  5777                           ;incstack = 0
  5778  016230  0E00               	movlw	0
  5779  016232  0100               	movlb	0	; () banked
  5780  016234  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5781  016236  0E07               	movlw	7
  5782  016238  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5783  01623A  0E00               	movlw	0
  5784  01623C  0100               	movlb	0	; () banked
  5785  01623E  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5786  016240  0E09               	movlw	9
  5787  016242  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5788  016244  0E00               	movlw	0
  5789  016246  0100               	movlb	0	; () banked
  5790  016248  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5791  01624A  0E0A               	movlw	10
  5792  01624C  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5793  01624E  0E00               	movlw	0
  5794  016250  0100               	movlb	0	; () banked
  5795  016252  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5796  016254  0E0B               	movlw	11
  5797  016256  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5798  016258  0E00               	movlw	0
  5799  01625A  0100               	movlb	0	; () banked
  5800  01625C  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5801  01625E  0E0C               	movlw	12
  5802  016260  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5803  016262  0E05               	movlw	5
  5804  016264  ECD8  F095         	call	_irobot_query_and_update
  5805  016268  0012               	return		;funcret
  5806  01626A                     __end_of_update_bump_and_cliff:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           postinc0	equ	0xFEE
  5813                           wreg	equ	0xFE8
  5814                           postdec1	equ	0xFE5
  5815                           fsr1h	equ	0xFE2
  5816                           fsr1l	equ	0xFE1
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _update_angle *****************
  5820 ;; Defined at:
  5821 ;;		line 366 in file "Library/iRobotSerial.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:   10
  5842 ;; This function calls:
  5843 ;;		_irobot_query_and_update
  5844 ;; This function is called by:
  5845 ;;		_irobot_rotate
  5846 ;;		_safeToGo
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text13
  5851  0167E2                     __ptext13:
  5852                           	opt stack 0
  5853  0167E2                     _update_angle:
  5854                           	opt stack 18
  5855                           
  5856                           ;iRobotSerial.c: 367: irobot_query_and_update(1, iR_PKT_ANGLE);
  5857                           
  5858                           ;incstack = 0
  5859  0167E2  0E00               	movlw	0
  5860  0167E4  0100               	movlb	0	; () banked
  5861  0167E6  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5862  0167E8  0E14               	movlw	20
  5863  0167EA  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5864  0167EC  0E01               	movlw	1
  5865  0167EE  ECD8  F095         	call	_irobot_query_and_update
  5866  0167F2  0012               	return		;funcret
  5867  0167F4                     __end_of_update_angle:
  5868                           	opt stack 0
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _irobot_query_and_update *****************
  5881 ;; Defined at:
  5882 ;;		line 142 in file "Library/iRobotSerial.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  numberOfPack    1    wreg     unsigned char 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5887 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5888 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5889 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5890 ;;		 -> ?_irobot_query_and_update(1), 
  5891 ;;  i               1   28[BANK0 ] unsigned char 
  5892 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5893 ;;  j               1   26[BANK0 ] unsigned char 
  5894 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5895 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5905 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;Total ram usage:      535 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    9
  5912 ;; This function calls:
  5913 ;;		_eusart_getch
  5914 ;;		_eusart_putch
  5915 ;;		_get_packet_size
  5916 ;;		_rx_assign
  5917 ;; This function is called by:
  5918 ;;		_update_bump_and_cliff
  5919 ;;		_update_distance
  5920 ;;		_update_angle
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text14
  5925  012BB0                     __ptext14:
  5926                           	opt stack 0
  5927  012BB0                     _irobot_query_and_update:
  5928                           	opt stack 19
  5929                           
  5930                           ;incstack = 0
  5931                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5932  012BB0  0100               	movlb	0	; () banked
  5933  012BB2  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5934                           
  5935                           ;iRobotSerial.c: 143: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5936  012BB4  0E00               	movlw	0
  5937  012BB6  0100               	movlb	0	; () banked
  5938  012BB8  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5939  012BBA  0E00               	movlw	0
  5940  012BBC  0100               	movlb	0	; () banked
  5941  012BBE  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5942                           
  5943                           ;iRobotSerial.c: 145: va_list packetIDs;
  5944                           ;iRobotSerial.c: 146: *packetIDs = __va_start();
  5945  012BC0  0EC0               	movlw	low ?_irobot_query_and_update
  5946  012BC2  0100               	movlb	0	; () banked
  5947  012BC4  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5948  012BC6  0E00               	movlw	high ?_irobot_query_and_update
  5949  012BC8  0100               	movlb	0	; () banked
  5950  012BCA  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;iRobotSerial.c: 147: eusart_putch(iR_QUERY_LIST);
  5954  012BCC  0E95               	movlw	149
  5955  012BCE  EC18  F0B4         	call	_eusart_putch
  5956                           
  5957                           ;iRobotSerial.c: 148: eusart_putch(numberOfPacketRequests);
  5958  012BD2  0100               	movlb	0	; () banked
  5959  012BD4  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5960  012BD6  EC18  F0B4         	call	_eusart_putch
  5961                           
  5962                           ;iRobotSerial.c: 149: for (i = 0; i < numberOfPacketRequests; i++) {
  5963  012BDA  0E00               	movlw	0
  5964  012BDC  0100               	movlb	0	; () banked
  5965  012BDE  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5966  012BE0  D023               	goto	l2095
  5967  012BE2                     
  5968                           ; BSR set to: 0
  5969                           ;iRobotSerial.c: 150: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5970                           
  5971                           ; BSR set to: 0
  5972  012BE2  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5973  012BE6  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5974  012BEA  50DF               	movf	indf2,w,c
  5975  012BEC  0100               	movlb	0	; () banked
  5976  012BEE  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979  012BF0  0E02               	movlw	2
  5980  012BF2  0100               	movlb	0	; () banked
  5981  012BF4  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5982  012BF6  0E00               	movlw	0
  5983  012BF8  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;iRobotSerial.c: 151: streamSize += get_packet_size(packetVariable);
  5987  012BFA  0100               	movlb	0	; () banked
  5988  012BFC  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5989  012BFE  EC72  F0AC         	call	_get_packet_size
  5990  012C02  0100               	movlb	0	; () banked
  5991  012C04  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;iRobotSerial.c: 152: TXArray[i] = packetVariable;
  5995  012C06  0100               	movlb	0	; () banked
  5996  012C08  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5997  012C0A  0D01               	mullw	1
  5998  012C0C  0E00               	movlw	low irobot_query_and_update@TXArray
  5999  012C0E  24F3               	addwf	prodl,w,c
  6000  012C10  6ED9               	movwf	fsr2l,c
  6001  012C12  0E02               	movlw	high irobot_query_and_update@TXArray
  6002  012C14  20F4               	addwfc	prodh,w,c
  6003  012C16  6EDA               	movwf	fsr2h,c
  6004  012C18  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;iRobotSerial.c: 153: eusart_putch(packetVariable);
  6008  012C1C  0100               	movlb	0	; () banked
  6009  012C1E  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6010  012C20  EC18  F0B4         	call	_eusart_putch
  6011  012C24  0100               	movlb	0	; () banked
  6012  012C26  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  6013  012C28                     l2095:
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018  012C28  0100               	movlb	0	; () banked
  6019  012C2A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6020  012C2C  0100               	movlb	0	; () banked
  6021  012C2E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  6022  012C30  A0D8               	btfss	status,0,c
  6023  012C32  D7D7               	goto	l2096
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;iRobotSerial.c: 154: }
  6027                           ;iRobotSerial.c: 155: ;
  6028                           ;iRobotSerial.c: 157: for (i = 0; i < streamSize; i++) {
  6029                           
  6030                           ; BSR set to: 0
  6031  012C34  0E00               	movlw	0
  6032  012C36  0100               	movlb	0	; () banked
  6033  012C38  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  6034  012C3A  D00E               	goto	l2098
  6035  012C3C                     
  6036                           ; BSR set to: 0
  6037                           ;iRobotSerial.c: 158: RXArray[i] = eusart_getch();
  6038                           
  6039                           ; BSR set to: 0
  6040  012C3C  0100               	movlb	0	; () banked
  6041  012C3E  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  6042  012C40  0D01               	mullw	1
  6043  012C42  0E00               	movlw	low irobot_query_and_update@RXArray
  6044  012C44  24F3               	addwf	prodl,w,c
  6045  012C46  6ED9               	movwf	fsr2l,c
  6046  012C48  0E01               	movlw	high irobot_query_and_update@RXArray
  6047  012C4A  20F4               	addwfc	prodh,w,c
  6048  012C4C  6EDA               	movwf	fsr2h,c
  6049  012C4E  EC55  F0B4         	call	_eusart_getch	;wreg free
  6050  012C52  6EDF               	movwf	indf2,c
  6051  012C54  0100               	movlb	0	; () banked
  6052  012C56  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  6053  012C58                     l2098:
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058  012C58  0100               	movlb	0	; () banked
  6059  012C5A  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  6060  012C5C  0100               	movlb	0	; () banked
  6061  012C5E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  6062  012C60  A0D8               	btfss	status,0,c
  6063  012C62  D7EC               	goto	l2099
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;iRobotSerial.c: 159: }
  6067                           ;iRobotSerial.c: 161: for (i = 0; i < numberOfPacketRequests; i++) {
  6068                           
  6069                           ; BSR set to: 0
  6070  012C64  0E00               	movlw	0
  6071  012C66  0100               	movlb	0	; () banked
  6072  012C68  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  6073  012C6A  D05E               	goto	l2101
  6074  012C6C                     l2102:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;iRobotSerial.c: 162: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  6078  012C6C  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  6079  012C70  D021               	goto	l2103
  6080  012C72                     
  6081                           ; BSR set to: 0
  6082                           ;iRobotSerial.c: 163: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  6083                           
  6084                           ; BSR set to: 0
  6085  012C72  0100               	movlb	0	; () banked
  6086  012C74  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  6087  012C76  0D01               	mullw	1
  6088  012C78  0E00               	movlw	low irobot_query_and_update@RXArray
  6089  012C7A  24F3               	addwf	prodl,w,c
  6090  012C7C  6ED9               	movwf	fsr2l,c
  6091  012C7E  0E01               	movlw	high irobot_query_and_update@RXArray
  6092  012C80  20F4               	addwfc	prodh,w,c
  6093  012C82  6EDA               	movwf	fsr2h,c
  6094  012C84  50DF               	movf	indf2,w,c
  6095  012C86  0100               	movlb	0	; () banked
  6096  012C88  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  6097  012C8A  0100               	movlb	0	; () banked
  6098  012C8C  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6099  012C8E  0800               	sublw	0
  6100  012C90  0100               	movlb	0	; () banked
  6101  012C92  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  6102  012C94  0100               	movlb	0	; () banked
  6103  012C96  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  6104  012C98  0100               	movlb	0	; () banked
  6105  012C9A  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  6106  012C9C  0D01               	mullw	1
  6107  012C9E  0E00               	movlw	low irobot_query_and_update@TXArray
  6108  012CA0  24F3               	addwf	prodl,w,c
  6109  012CA2  6ED9               	movwf	fsr2l,c
  6110  012CA4  0E02               	movlw	high irobot_query_and_update@TXArray
  6111  012CA6  20F4               	addwfc	prodh,w,c
  6112  012CA8  6EDA               	movwf	fsr2h,c
  6113  012CAA  50DF               	movf	indf2,w,c
  6114  012CAC  ECCC  F09C         	call	_rx_assign
  6115  012CB0  0100               	movlb	0	; () banked
  6116  012CB2  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  6117  012CB4                     l2103:
  6118                           
  6119                           ; BSR set to: 0
  6120                           
  6121                           ; BSR set to: 0
  6122  012CB4  0100               	movlb	0	; () banked
  6123  012CB6  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  6124  012CB8  0D01               	mullw	1
  6125  012CBA  0E00               	movlw	low irobot_query_and_update@TXArray
  6126  012CBC  24F3               	addwf	prodl,w,c
  6127  012CBE  6ED9               	movwf	fsr2l,c
  6128  012CC0  0E02               	movlw	high irobot_query_and_update@TXArray
  6129  012CC2  20F4               	addwfc	prodh,w,c
  6130  012CC4  6EDA               	movwf	fsr2h,c
  6131  012CC6  50DF               	movf	indf2,w,c
  6132  012CC8  EC72  F0AC         	call	_get_packet_size
  6133  012CCC  0100               	movlb	0	; () banked
  6134  012CCE  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  6135  012CD0  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  6136  012CD2  0100               	movlb	0	; () banked
  6137  012CD4  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6138  012CD6  0100               	movlb	0	; () banked
  6139  012CD8  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  6140  012CDA  0E00               	movlw	0
  6141  012CDC  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  6142  012CDE  0100               	movlb	0	; () banked
  6143  012CE0  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  6144  012CE2  0100               	movlb	0	; () banked
  6145  012CE4  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  6146  012CE6  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  6147  012CE8  0100               	movlb	0	; () banked
  6148  012CEA  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  6149  012CEC  0100               	movlb	0	; () banked
  6150  012CEE  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  6151  012CF0  0100               	movlb	0	; () banked
  6152  012CF2  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  6153  012CF4  0A80               	xorlw	128
  6154  012CF6  0100               	movlb	0	; () banked
  6155  012CF8  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  6156  012CFA  0100               	movlb	0	; () banked
  6157  012CFC  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  6158  012CFE  0A80               	xorlw	128
  6159  012D00  0100               	movlb	0	; () banked
  6160  012D02  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  6161  012D04  A0D8               	btfss	status,0,c
  6162  012D06  D7B5               	goto	l2104
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;iRobotSerial.c: 164: }
  6166                           ;iRobotSerial.c: 165: startIndex += get_packet_size(TXArray[i]);
  6167                           
  6168                           ; BSR set to: 0
  6169  012D08  0100               	movlb	0	; () banked
  6170  012D0A  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  6171  012D0C  0D01               	mullw	1
  6172  012D0E  0E00               	movlw	low irobot_query_and_update@TXArray
  6173  012D10  24F3               	addwf	prodl,w,c
  6174  012D12  6ED9               	movwf	fsr2l,c
  6175  012D14  0E02               	movlw	high irobot_query_and_update@TXArray
  6176  012D16  20F4               	addwfc	prodh,w,c
  6177  012D18  6EDA               	movwf	fsr2h,c
  6178  012D1A  50DF               	movf	indf2,w,c
  6179  012D1C  EC72  F0AC         	call	_get_packet_size
  6180  012D20  0100               	movlb	0	; () banked
  6181  012D22  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 0
  6184  012D24  0100               	movlb	0	; () banked
  6185  012D26  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  6186  012D28                     l2101:
  6187                           
  6188                           ; BSR set to: 0
  6189                           
  6190                           ; BSR set to: 0
  6191  012D28  0100               	movlb	0	; () banked
  6192  012D2A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6193  012D2C  0100               	movlb	0	; () banked
  6194  012D2E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  6195  012D30  B0D8               	btfsc	status,0,c
  6196  012D32  0012               	return	
  6197  012D34  D79B               	goto	l2102
  6198  012D36                     __end_of_irobot_query_and_update:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           postinc0	equ	0xFEE
  6207                           wreg	equ	0xFE8
  6208                           postdec1	equ	0xFE5
  6209                           fsr1h	equ	0xFE2
  6210                           fsr1l	equ	0xFE1
  6211                           indf2	equ	0xFDF
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function _rx_assign *****************
  6217 ;; Defined at:
  6218 ;;		line 74 in file "Library/iRobotSerial.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  packetID        1    wreg     unsigned char 
  6221 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  6222 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  packetID        1    5[BANK0 ] unsigned char 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:        5 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    8
  6241 ;; This function calls:
  6242 ;;		_sort_iRBumpDrop
  6243 ;; This function is called by:
  6244 ;;		_irobot_query_and_update
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text15
  6249  013998                     __ptext15:
  6250                           	opt stack 0
  6251  013998                     _rx_assign:
  6252                           	opt stack 19
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;incstack = 0
  6256                           ;rx_assign@packetID stored from wreg
  6257  013998  0100               	movlb	0	; () banked
  6258  01399A  6FBF               	movwf	rx_assign@packetID& (0+255),b
  6259                           
  6260                           ;iRobotSerial.c: 75: switch (packetID) {
  6261  01399C  D057               	goto	l2035
  6262  01399E                     l2036:
  6263                           
  6264                           ; BSR set to: 0
  6265  01399E  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;iRobotSerial.c: 77: sort_iRBumpDrop();
  6269  0139A2  EC02  F0A8         	call	_sort_iRBumpDrop	;wreg free
  6270                           
  6271                           ;iRobotSerial.c: 78: break;
  6272  0139A6  0012               	return	
  6273  0139A8                     l2038:
  6274                           
  6275                           ; BSR set to: 0
  6276  0139A8  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  6277                           
  6278                           ;iRobotSerial.c: 80: break;
  6279  0139AC  0012               	return	
  6280  0139AE                     l2039:
  6281                           
  6282                           ; BSR set to: 0
  6283  0139AE  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  6284                           
  6285                           ;iRobotSerial.c: 82: break;
  6286  0139B2  0012               	return	
  6287  0139B4                     l2040:
  6288                           
  6289                           ; BSR set to: 0
  6290  0139B4  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  6291                           
  6292                           ;iRobotSerial.c: 84: break;
  6293  0139B8  0012               	return	
  6294  0139BA                     l2041:
  6295                           
  6296                           ; BSR set to: 0
  6297  0139BA  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  6298                           
  6299                           ;iRobotSerial.c: 86: break;
  6300  0139BE  0012               	return	
  6301  0139C0                     l2042:
  6302                           
  6303                           ; BSR set to: 0
  6304  0139C0  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  6305                           
  6306                           ;iRobotSerial.c: 88: break;
  6307  0139C4  0012               	return	
  6308  0139C6                     l2043:
  6309                           
  6310                           ; BSR set to: 0
  6311  0139C6  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  6312                           
  6313                           ;iRobotSerial.c: 90: break;
  6314  0139CA  0012               	return	
  6315  0139CC                     
  6316                           ; BSR set to: 0
  6317                           ;iRobotSerial.c: 92: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  6318                           ;iRobotSerial.c: 93: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB);
  6319                           
  6320                           ; BSR set to: 0
  6321  0139CC  0100               	movlb	0	; () banked
  6322  0139CE  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6323  0139D0  0100               	movlb	0	; () banked
  6324  0139D2  A4D8               	btfss	status,2,c
  6325  0139D4  D005               	goto	l2046
  6326                           
  6327                           ; BSR set to: 0
  6328  0139D6  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  6329  0139DA  0103               	movlb	3	; () banked
  6330  0139DC  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  6331  0139DE  0012               	return	
  6332  0139E0                     l2046:
  6333                           
  6334                           ; BSR set to: 0
  6335  0139E0  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  6336  0139E4  0103               	movlb	3	; () banked
  6337  0139E6  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  6338                           
  6339                           ; BSR set to: 3
  6340  0139E8  0103               	movlb	3	; () banked
  6341  0139EA  5122               	movf	_iRDistanceSS& (0+255),w,b
  6342  0139EC  0100               	movlb	0	; () banked
  6343  0139EE  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6344  0139F0  6BBD               	clrf	??_rx_assign& (0+255),b
  6345  0139F2  0103               	movlb	3	; () banked
  6346  0139F4  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  6347  0139F6  0100               	movlb	0	; () banked
  6348  0139F8  25BD               	addwf	??_rx_assign& (0+255),w,b
  6349  0139FA  0100               	movlb	0	; () banked
  6350  0139FC  6F79               	movwf	_iRDistance& (0+255),b
  6351  0139FE  0103               	movlb	3	; () banked
  6352  013A00  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  6353  013A02  0100               	movlb	0	; () banked
  6354  013A04  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6355  013A06  0100               	movlb	0	; () banked
  6356  013A08  6F7A               	movwf	(_iRDistance+1)& (0+255),b
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;iRobotSerial.c: 94: break;
  6360  013A0A  0012               	return	
  6361  013A0C                     
  6362                           ; BSR set to: 0
  6363                           ;iRobotSerial.c: 96: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  6364                           ;iRobotSerial.c: 97: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB);
  6365                           
  6366                           ; BSR set to: 0
  6367  013A0C  0100               	movlb	0	; () banked
  6368  013A0E  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6369  013A10  0100               	movlb	0	; () banked
  6370  013A12  A4D8               	btfss	status,2,c
  6371  013A14  D005               	goto	l2051
  6372                           
  6373                           ; BSR set to: 0
  6374  013A16  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6375  013A1A  0103               	movlb	3	; () banked
  6376  013A1C  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6377  013A1E  0012               	return	
  6378  013A20                     l2051:
  6379                           
  6380                           ; BSR set to: 0
  6381  013A20  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6382  013A24  0103               	movlb	3	; () banked
  6383  013A26  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6384                           
  6385                           ; BSR set to: 3
  6386  013A28  0103               	movlb	3	; () banked
  6387  013A2A  511E               	movf	_iRAngleSS& (0+255),w,b
  6388  013A2C  0100               	movlb	0	; () banked
  6389  013A2E  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6390  013A30  6BBD               	clrf	??_rx_assign& (0+255),b
  6391  013A32  0103               	movlb	3	; () banked
  6392  013A34  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6393  013A36  0100               	movlb	0	; () banked
  6394  013A38  25BD               	addwf	??_rx_assign& (0+255),w,b
  6395  013A3A  0100               	movlb	0	; () banked
  6396  013A3C  6F77               	movwf	_iRAngle& (0+255),b
  6397  013A3E  0103               	movlb	3	; () banked
  6398  013A40  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6399  013A42  0100               	movlb	0	; () banked
  6400  013A44  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6401  013A46  0100               	movlb	0	; () banked
  6402  013A48  6F78               	movwf	(_iRAngle+1)& (0+255),b
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;iRobotSerial.c: 99: }
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;iRobotSerial.c: 98: break;
  6409  013A4A  0012               	return	
  6410  013A4C                     l2035:
  6411                           
  6412                           ; BSR set to: 0
  6413  013A4C  0100               	movlb	0	; () banked
  6414  013A4E  51BF               	movf	rx_assign@packetID& (0+255),w,b
  6415                           
  6416                           ; Switch size 1, requested type "space"
  6417                           ; Number of cases is 9, Range of values is 7 to 20
  6418                           ; switch strategies available:
  6419                           ; Name         Instructions Cycles
  6420                           ; simple_byte           28    15 (average)
  6421                           ;	Chosen strategy is simple_byte
  6422  013A50  0A07               	xorlw	7	; case 7
  6423  013A52  B4D8               	btfsc	status,2,c
  6424  013A54  D7A4               	goto	l2036
  6425  013A56  0A0F               	xorlw	15	; case 8
  6426  013A58  B4D8               	btfsc	status,2,c
  6427  013A5A  D7A6               	goto	l2038
  6428  013A5C  0A01               	xorlw	1	; case 9
  6429  013A5E  B4D8               	btfsc	status,2,c
  6430  013A60  D7A6               	goto	l2039
  6431  013A62  0A03               	xorlw	3	; case 10
  6432  013A64  B4D8               	btfsc	status,2,c
  6433  013A66  D7A6               	goto	l2040
  6434  013A68  0A01               	xorlw	1	; case 11
  6435  013A6A  B4D8               	btfsc	status,2,c
  6436  013A6C  D7A6               	goto	l2041
  6437  013A6E  0A07               	xorlw	7	; case 12
  6438  013A70  B4D8               	btfsc	status,2,c
  6439  013A72  D7A6               	goto	l2042
  6440  013A74  0A01               	xorlw	1	; case 13
  6441  013A76  B4D8               	btfsc	status,2,c
  6442  013A78  D7A6               	goto	l2043
  6443  013A7A  0A1E               	xorlw	30	; case 19
  6444  013A7C  B4D8               	btfsc	status,2,c
  6445  013A7E  D7A6               	goto	l2044
  6446  013A80  0A07               	xorlw	7	; case 20
  6447  013A82  A4D8               	btfss	status,2,c
  6448  013A84  0012               	return	
  6449  013A86  D7C2               	goto	l2049
  6450  013A88                     __end_of_rx_assign:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function _sort_iRBumpDrop *****************
  6469 ;; Defined at:
  6470 ;;		line 102 in file "Library/iRobotSerial.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;Total ram usage:        1 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    7
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_rx_assign
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text16
  6499  015004                     __ptext16:
  6500                           	opt stack 0
  6501  015004                     _sort_iRBumpDrop:
  6502                           	opt stack 19
  6503                           
  6504                           ;iRobotSerial.c: 103: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6505                           
  6506                           ;incstack = 0
  6507  015004  A036               	btfss	_iRBumpDrop,0,c
  6508  015006  D002               	goto	l2058
  6509  015008  0E01               	movlw	1
  6510  01500A  D001               	goto	L1
  6511  01500C                     l2058:
  6512                           
  6513                           ; BSR set to: 0
  6514  01500C  0E00               	movlw	0
  6515  01500E                     L1:
  6516  01500E  0100               	movlb	0	; () banked
  6517  015010  6F88               	movwf	_iRBumpRight& (0+255),b
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;iRobotSerial.c: 104: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0
      +                          );
  6521                           
  6522                           ; BSR set to: 0
  6523  015012  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6524  015016  0100               	movlb	0	; () banked
  6525  015018  90D8               	bcf	status,0,c
  6526  01501A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6527  01501C  0100               	movlb	0	; () banked
  6528  01501E  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6529  015020  D002               	goto	l2062
  6530                           
  6531                           ; BSR set to: 0
  6532  015022  0E01               	movlw	1
  6533  015024  D001               	goto	L2
  6534  015026                     l2062:
  6535                           
  6536                           ; BSR set to: 0
  6537                           
  6538                           ; BSR set to: 0
  6539  015026  0E00               	movlw	0
  6540  015028                     L2:
  6541  015028  0100               	movlb	0	; () banked
  6542  01502A  6F87               	movwf	_iRBumpLeft& (0+255),b
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;iRobotSerial.c: 105: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight =
      +                           0);
  6546                           
  6547                           ; BSR set to: 0
  6548  01502C  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6549  015030  0100               	movlb	0	; () banked
  6550  015032  90D8               	bcf	status,0,c
  6551  015034  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6552  015036  0100               	movlb	0	; () banked
  6553  015038  90D8               	bcf	status,0,c
  6554  01503A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6555  01503C  0100               	movlb	0	; () banked
  6556  01503E  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6557  015040  D002               	goto	l2066
  6558                           
  6559                           ; BSR set to: 0
  6560  015042  0E01               	movlw	1
  6561  015044  D001               	goto	L3
  6562  015046                     l2066:
  6563                           
  6564                           ; BSR set to: 0
  6565                           
  6566                           ; BSR set to: 0
  6567  015046  0E00               	movlw	0
  6568  015048                     L3:
  6569  015048  0100               	movlb	0	; () banked
  6570  01504A  6F86               	movwf	_iRDropRight& (0+255),b
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;iRobotSerial.c: 106: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0
      +                          );
  6574                           
  6575                           ; BSR set to: 0
  6576  01504C  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6577  015050  0100               	movlb	0	; () banked
  6578  015052  90D8               	bcf	status,0,c
  6579  015054  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6580  015056  0100               	movlb	0	; () banked
  6581  015058  90D8               	bcf	status,0,c
  6582  01505A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6583  01505C  0100               	movlb	0	; () banked
  6584  01505E  90D8               	bcf	status,0,c
  6585  015060  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6586  015062  0100               	movlb	0	; () banked
  6587  015064  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6588  015066  D002               	goto	l2070
  6589                           
  6590                           ; BSR set to: 0
  6591  015068  0E01               	movlw	1
  6592  01506A  D001               	goto	L4
  6593  01506C                     l2070:
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  01506C  0E00               	movlw	0
  6599  01506E                     L4:
  6600  01506E  0100               	movlb	0	; () banked
  6601  015070  6F85               	movwf	_iRDropLeft& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;iRobotSerial.c: 107: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster
      +                           = 0);
  6605                           
  6606                           ; BSR set to: 0
  6607  015072  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6608  015076  0100               	movlb	0	; () banked
  6609  015078  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6610  01507A  0E0F               	movlw	15
  6611  01507C  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6612  01507E  0100               	movlb	0	; () banked
  6613  015080  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6614  015082  D003               	goto	l2074
  6615                           
  6616                           ; BSR set to: 0
  6617  015084  0E01               	movlw	1
  6618  015086  6E2F               	movwf	_iRDropCaster,c
  6619  015088  0012               	return	
  6620  01508A                     l2074:
  6621                           
  6622                           ; BSR set to: 0
  6623                           
  6624                           ; BSR set to: 0
  6625  01508A  0E00               	movlw	0
  6626  01508C  6E2F               	movwf	_iRDropCaster,c
  6627  01508E  0012               	return	
  6628  015090                     __end_of_sort_iRBumpDrop:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           postinc0	equ	0xFEE
  6637                           wreg	equ	0xFE8
  6638                           postdec1	equ	0xFE5
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _get_packet_size *****************
  6647 ;; Defined at:
  6648 ;;		line 60 in file "Library/iRobotSerial.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  packetID        1    wreg     unsigned char 
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  packetID        1    0[BANK0 ] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      unsigned char 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:        1 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    7
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_irobot_query_and_update
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text17
  6677  0158E4                     __ptext17:
  6678                           	opt stack 0
  6679  0158E4                     _get_packet_size:
  6680                           	opt stack 20
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;incstack = 0
  6684                           ;get_packet_size@packetID stored from wreg
  6685  0158E4  0100               	movlb	0	; () banked
  6686  0158E6  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6687                           
  6688                           ;iRobotSerial.c: 61: switch (packetID) {
  6689  0158E8  D012               	goto	l2021
  6690  0158EA  0E01               	movlw	1
  6691  0158EC  0012               	return	
  6692  0158EE  0E01               	movlw	1
  6693  0158F0  0012               	return	
  6694  0158F2  0E01               	movlw	1
  6695  0158F4  0012               	return	
  6696  0158F6  0E01               	movlw	1
  6697  0158F8  0012               	return	
  6698  0158FA  0E01               	movlw	1
  6699  0158FC  0012               	return	
  6700  0158FE  0E01               	movlw	1
  6701  015900  0012               	return	
  6702  015902  0E01               	movlw	1
  6703  015904  0012               	return	
  6704  015906  0E02               	movlw	2
  6705  015908  0012               	return	
  6706  01590A  0E02               	movlw	2
  6707                           
  6708                           ;iRobotSerial.c: 71: }
  6709  01590C  0012               	return	
  6710  01590E                     l2021:
  6711  01590E  0100               	movlb	0	; () banked
  6712  015910  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6713                           
  6714                           ; Switch size 1, requested type "space"
  6715                           ; Number of cases is 9, Range of values is 7 to 20
  6716                           ; switch strategies available:
  6717                           ; Name         Instructions Cycles
  6718                           ; simple_byte           28    15 (average)
  6719                           ;	Chosen strategy is simple_byte
  6720  015912  0A07               	xorlw	7	; case 7
  6721  015914  B4D8               	btfsc	status,2,c
  6722  015916  D7E9               	goto	l2022
  6723  015918  0A0F               	xorlw	15	; case 8
  6724  01591A  B4D8               	btfsc	status,2,c
  6725  01591C  D7E8               	goto	l2024
  6726  01591E  0A01               	xorlw	1	; case 9
  6727  015920  B4D8               	btfsc	status,2,c
  6728  015922  D7E7               	goto	l2025
  6729  015924  0A03               	xorlw	3	; case 10
  6730  015926  B4D8               	btfsc	status,2,c
  6731  015928  D7E6               	goto	l2026
  6732  01592A  0A01               	xorlw	1	; case 11
  6733  01592C  B4D8               	btfsc	status,2,c
  6734  01592E  D7E5               	goto	l2027
  6735  015930  0A07               	xorlw	7	; case 12
  6736  015932  B4D8               	btfsc	status,2,c
  6737  015934  D7E4               	goto	l2028
  6738  015936  0A01               	xorlw	1	; case 13
  6739  015938  B4D8               	btfsc	status,2,c
  6740  01593A  D7E3               	goto	l2029
  6741  01593C  0A1E               	xorlw	30	; case 19
  6742  01593E  B4D8               	btfsc	status,2,c
  6743  015940  D7E2               	goto	l2030
  6744  015942  0A07               	xorlw	7	; case 20
  6745  015944  A4D8               	btfss	status,2,c
  6746  015946  0012               	return	
  6747  015948  D7E0               	goto	l2031
  6748  01594A                     __end_of_get_packet_size:
  6749                           	opt stack 0
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           postdec1	equ	0xFE5
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766 ;; *************** function _eusart_getch *****************
  6767 ;; Defined at:
  6768 ;;		line 136 in file "Library/iRobotSerial.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  1    wreg      unsigned char 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;Total ram usage:        0 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    7
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_irobot_query_and_update
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text18
  6797  0168AA                     __ptext18:
  6798                           	opt stack 0
  6799  0168AA                     _eusart_getch:
  6800                           	opt stack 20
  6801                           
  6802                           ;iRobotSerial.c: 137: while (!PIR1bits.RC1IF) {
  6803                           
  6804                           ;incstack = 0
  6805  0168AA  AA9E               	btfss	3998,5,c	;volatile
  6806  0168AC  D7FE               	goto	_eusart_getch
  6807                           
  6808                           ;iRobotSerial.c: 138: };
  6809                           ;iRobotSerial.c: 139: return RCREG1;
  6810  0168AE  50AF               	movf	4015,w,c	;volatile
  6811  0168B0  0012               	return	
  6812  0168B2                     __end_of_eusart_getch:
  6813                           	opt stack 0
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           fsr2h	equ	0xFDA
  6827                           fsr2l	equ	0xFD9
  6828                           status	equ	0xFD8
  6829                           
  6830 ;; *************** function _irobot_stop_motion *****************
  6831 ;; Defined at:
  6832 ;;		line 328 in file "Library/iRobotSerial.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  isScript        1    wreg     unsigned char 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  isScript        1   25[BANK0 ] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;Total ram usage:        1 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    9
  6853 ;; This function calls:
  6854 ;;		_irobot_move
  6855 ;; This function is called by:
  6856 ;;		_irobot_rotate
  6857 ;;		_safeToGo
  6858 ;;		_move_and_rotate
  6859 ;;		_mode2
  6860 ;;		_mode4
  6861 ;;		_irobot_move_to_simple
  6862 ;;		_irobot_rotate_to
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text19
  6867  015EE8                     __ptext19:
  6868                           	opt stack 0
  6869  015EE8                     _irobot_stop_motion:
  6870                           	opt stack 19
  6871                           
  6872                           ;incstack = 0
  6873                           ;irobot_stop_motion@isScript stored from wreg
  6874  015EE8  0100               	movlb	0	; () banked
  6875  015EEA  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6876                           
  6877                           ;iRobotSerial.c: 329: (isScript) ? irobot_move(1, 0, 0) : irobot_move(0, 0, 0);
  6878  015EEC  0100               	movlb	0	; () banked
  6879  015EEE  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6880  015EF0  0100               	movlb	0	; () banked
  6881  015EF2  B4D8               	btfsc	status,2,c
  6882  015EF4  D00E               	goto	l2173
  6883                           
  6884                           ; BSR set to: 0
  6885  015EF6  0E00               	movlw	0
  6886  015EF8  0100               	movlb	0	; () banked
  6887  015EFA  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6888  015EFC  0E00               	movlw	0
  6889  015EFE  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6890  015F00  0E00               	movlw	0
  6891  015F02  0100               	movlb	0	; () banked
  6892  015F04  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6893  015F06  0E00               	movlw	0
  6894  015F08  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6895  015F0A  0E01               	movlw	1
  6896  015F0C  EC42  F0A3         	call	_irobot_move
  6897  015F10  0012               	return	
  6898  015F12                     l2173:
  6899  015F12  0E00               	movlw	0
  6900  015F14  0100               	movlb	0	; () banked
  6901  015F16  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6902  015F18  0E00               	movlw	0
  6903  015F1A  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6904  015F1C  0E00               	movlw	0
  6905  015F1E  0100               	movlb	0	; () banked
  6906  015F20  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6907  015F22  0E00               	movlw	0
  6908  015F24  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6909  015F26  0E00               	movlw	0
  6910  015F28  EC42  F0A3         	call	_irobot_move
  6911  015F2C  0012               	return	
  6912  015F2E                     __end_of_irobot_stop_motion:
  6913                           	opt stack 0
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           postinc0	equ	0xFEE
  6921                           wreg	equ	0xFE8
  6922                           postdec1	equ	0xFE5
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _irobot_move *****************
  6931 ;; Defined at:
  6932 ;;		line 240 in file "Library/iRobotSerial.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  isScript        1    wreg     unsigned char 
  6935 ;;  moveSpeed       2   16[BANK0 ] short 
  6936 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;  isScript        1   24[BANK0 ] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;Total ram usage:        9 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    8
  6955 ;; This function calls:
  6956 ;;		_eusart_putch
  6957 ;;		_load_iRScriptStack
  6958 ;;		_twos_complement_of
  6959 ;; This function is called by:
  6960 ;;		_irobot_rotate
  6961 ;;		_irobot_stop_motion
  6962 ;;		_irobot_move_straight
  6963 ;;		_irobot_move_to_simple
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text20
  6968  014684                     __ptext20:
  6969                           	opt stack 0
  6970  014684                     _irobot_move:
  6971                           	opt stack 19
  6972                           
  6973                           ;incstack = 0
  6974                           ;irobot_move@isScript stored from wreg
  6975  014684  0100               	movlb	0	; () banked
  6976  014686  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6977                           
  6978                           ;iRobotSerial.c: 241: moveSpeed = twos_complement_of(moveSpeed);
  6979  014688  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6980  01468C  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6981  014690  ECDD  F0AF         	call	_twos_complement_of	;wreg free
  6982  014694  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6983  014698  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6984                           
  6985                           ;iRobotSerial.c: 242: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6986  01469C  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6987  0146A0  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6988  0146A4  ECDD  F0AF         	call	_twos_complement_of	;wreg free
  6989  0146A8  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6990  0146AC  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6991                           
  6992                           ;iRobotSerial.c: 244: if (isScript) {
  6993  0146B0  0100               	movlb	0	; () banked
  6994  0146B2  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6995  0146B4  0100               	movlb	0	; () banked
  6996  0146B6  B4D8               	btfsc	status,2,c
  6997  0146B8  D029               	goto	l2139
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;iRobotSerial.c: 245: load_iRScriptStack(5, iR_DRIVE,
  7001                           ;iRobotSerial.c: 246: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  7002                           ;iRobotSerial.c: 247: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  7003  0146BA  0E00               	movlw	0
  7004  0146BC  0100               	movlb	0	; () banked
  7005  0146BE  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  7006  0146C0  0E89               	movlw	137
  7007  0146C2  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  7008  0146C4  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  7009  0146C8  0100               	movlb	0	; () banked
  7010  0146CA  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  7011  0146CC  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  7012  0146CE  69CF               	setf	(??_irobot_move+1)& (0+255),b
  7013  0146D0  0100               	movlb	0	; () banked
  7014  0146D2  51CE               	movf	??_irobot_move& (0+255),w,b
  7015  0146D4  0100               	movlb	0	; () banked
  7016  0146D6  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  7017  0146D8  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  7018  0146DA  0100               	movlb	0	; () banked
  7019  0146DC  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  7020  0146DE  0100               	movlb	0	; () banked
  7021  0146E0  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  7022  0146E2  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  7023  0146E4  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  7024  0146E8  0100               	movlb	0	; () banked
  7025  0146EA  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  7026  0146EC  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  7027  0146EE  69D1               	setf	(??_irobot_move+3)& (0+255),b
  7028  0146F0  0100               	movlb	0	; () banked
  7029  0146F2  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  7030  0146F4  0100               	movlb	0	; () banked
  7031  0146F6  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  7032  0146F8  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  7033  0146FA  0100               	movlb	0	; () banked
  7034  0146FC  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7035  0146FE  0100               	movlb	0	; () banked
  7036  014700  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  7037  014702  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  7038  014704  0E05               	movlw	5
  7039  014706  ECD3  F0AB         	call	_load_iRScriptStack
  7040                           
  7041                           ;iRobotSerial.c: 248: } else {
  7042  01470A  0012               	return	
  7043  01470C                     l2139:
  7044                           
  7045                           ;iRobotSerial.c: 249: eusart_putch(iR_DRIVE);
  7046  01470C  0E89               	movlw	137
  7047  01470E  EC18  F0B4         	call	_eusart_putch
  7048                           
  7049                           ;iRobotSerial.c: 250: eusart_putch((((moveSpeed)>>8) & 0xFF));
  7050  014712  0100               	movlb	0	; () banked
  7051  014714  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  7052  014716  EC18  F0B4         	call	_eusart_putch
  7053                           
  7054                           ;iRobotSerial.c: 251: eusart_putch(((moveSpeed) & 0xFF));
  7055  01471A  0100               	movlb	0	; () banked
  7056  01471C  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  7057  01471E  EC18  F0B4         	call	_eusart_putch
  7058                           
  7059                           ;iRobotSerial.c: 252: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  7060  014722  0100               	movlb	0	; () banked
  7061  014724  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  7062  014726  EC18  F0B4         	call	_eusart_putch
  7063                           
  7064                           ;iRobotSerial.c: 253: eusart_putch(((moveTurnRadius) & 0xFF));
  7065  01472A  0100               	movlb	0	; () banked
  7066  01472C  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7067  01472E  EC18  F0B4         	call	_eusart_putch
  7068  014732  0012               	return	
  7069  014734                     __end_of_irobot_move:
  7070                           	opt stack 0
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           postinc0	equ	0xFEE
  7078                           wreg	equ	0xFE8
  7079                           postdec1	equ	0xFE5
  7080                           fsr1h	equ	0xFE2
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function _twos_complement_of *****************
  7088 ;; Defined at:
  7089 ;;		line 181 in file "Library/iRobotSerial.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  complementVa    2    0[BANK0 ] short 
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;		None
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  2    0[BANK0 ] unsigned short 
  7096 ;; Registers used:
  7097 ;;		wreg, status,2, status,0
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;Total ram usage:        2 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    7
  7110 ;; This function calls:
  7111 ;;		Nothing
  7112 ;; This function is called by:
  7113 ;;		_irobot_move
  7114 ;;		_irobot_angle_wait
  7115 ;;		_irobot_distance_wait
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text21
  7120  015FBA                     __ptext21:
  7121                           	opt stack 0
  7122  015FBA                     _twos_complement_of:
  7123                           	opt stack 19
  7124                           
  7125                           ;iRobotSerial.c: 182: if (complementValue < 0) {
  7126                           
  7127                           ;incstack = 0
  7128  015FBA  0100               	movlb	0	; () banked
  7129  015FBC  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  7130  015FBE  D01A               	goto	l2110
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;iRobotSerial.c: 183: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  7134  015FC0  0100               	movlb	0	; () banked
  7135  015FC2  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  7136  015FC4  D007               	goto	u9440
  7137  015FC6  0100               	movlb	0	; () banked
  7138  015FC8  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  7139  015FCA  E10A               	bnz	l2112
  7140  015FCC  0100               	movlb	0	; () banked
  7141  015FCE  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  7142  015FD0  B0D8               	btfsc	status,0,c
  7143  015FD2  D006               	goto	l2112
  7144  015FD4                     u9440:
  7145                           
  7146                           ; BSR set to: 0
  7147  015FD4  0100               	movlb	0	; () banked
  7148  015FD6  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  7149  015FD8  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7150  015FDA  B0D8               	btfsc	status,0,c
  7151  015FDC  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7152  015FDE  D004               	goto	l2114
  7153  015FE0                     l2112:
  7154                           
  7155                           ; BSR set to: 0
  7156  015FE0  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  7157  015FE4  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  7158  015FE8                     l2114:
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;iRobotSerial.c: 184: complementValue = ~complementValue;
  7162                           
  7163                           ; BSR set to: 0
  7164  015FE8  0100               	movlb	0	; () banked
  7165  015FEA  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  7166  015FEC  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7167                           
  7168                           ;iRobotSerial.c: 185: complementValue += 1;
  7169  015FEE  0100               	movlb	0	; () banked
  7170  015FF0  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  7171  015FF2  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7172  015FF4                     l2110:
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;iRobotSerial.c: 186: }
  7176                           ;iRobotSerial.c: 187: return complementValue;
  7177                           
  7178                           ; BSR set to: 0
  7179  015FF4  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  7180  015FF8  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  7181  015FFC  0012               	return	
  7182  015FFE                     __end_of_twos_complement_of:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           postdec1	equ	0xFE5
  7193                           fsr1h	equ	0xFE2
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _irobot_song_play *****************
  7201 ;; Defined at:
  7202 ;;		line 294 in file "Library/iRobotSerial.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  songNumber      1    wreg     unsigned char 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  songNumber      1    1[BANK0 ] unsigned char 
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  1    wreg      void 
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, cstack
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;Total ram usage:        1 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    8
  7223 ;; This function calls:
  7224 ;;		_eusart_putch
  7225 ;; This function is called by:
  7226 ;;		_safeToGo
  7227 ;;		_mode4
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text22
  7232  0167A8                     __ptext22:
  7233                           	opt stack 0
  7234  0167A8                     _irobot_song_play:
  7235                           	opt stack 20
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;incstack = 0
  7239                           ;irobot_song_play@songNumber stored from wreg
  7240  0167A8  0100               	movlb	0	; () banked
  7241  0167AA  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  7242                           
  7243                           ;iRobotSerial.c: 295: eusart_putch(iR_SONG_PLAY);
  7244  0167AC  0E8D               	movlw	141
  7245  0167AE  EC18  F0B4         	call	_eusart_putch
  7246                           
  7247                           ;iRobotSerial.c: 296: eusart_putch(songNumber);
  7248  0167B2  0100               	movlb	0	; () banked
  7249  0167B4  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  7250  0167B6  EC18  F0B4         	call	_eusart_putch
  7251  0167BA  0012               	return		;funcret
  7252  0167BC                     __end_of_irobot_song_play:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           postinc0	equ	0xFEE
  7261                           wreg	equ	0xFE8
  7262                           postdec1	equ	0xFE5
  7263                           fsr1h	equ	0xFE2
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           fsr2h	equ	0xFDA
  7267                           fsr2l	equ	0xFD9
  7268                           status	equ	0xFD8
  7269                           
  7270 ;; *************** function _printf *****************
  7271 ;; Defined at:
  7272 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  7275 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_15(21), 
  7276 ;;		 -> STR_14(21), STR_13(3), STR_12(76), STR_11(3), 
  7277 ;;		 -> STR_10(14), STR_9(3), STR_8(46), STR_7(3), 
  7278 ;;		 -> STR_6(46), STR_5(3), STR_4(60), STR_3(3), 
  7279 ;;		 -> STR_2(14), STR_1(3), 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  tmpval          4    0        struct .
  7282 ;;  cp              3    0        PTR const unsigned char 
  7283 ;;  val             2   38[BANK0 ] unsigned int 
  7284 ;;  ap              2   36[BANK0 ] PTR void [1]
  7285 ;;		 -> ?_printf(2), 
  7286 ;;  len             2    0        unsigned int 
  7287 ;;  c               1   40[BANK0 ] char 
  7288 ;;  flag            1   35[BANK0 ] unsigned char 
  7289 ;;  prec            1   34[BANK0 ] char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  2   21[BANK0 ] int 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7299 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;Total ram usage:       20 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:   12
  7306 ;; This function calls:
  7307 ;;		___lwdiv
  7308 ;;		___lwmod
  7309 ;;		_putch
  7310 ;; This function is called by:
  7311 ;;		_move_and_rotate
  7312 ;;		_findClosestWall
  7313 ;;		_mode1
  7314 ;;		_mode2
  7315 ;;		_mode4
  7316 ;;		_main
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text23
  7321  0124FE                     __ptext23:
  7322                           	opt stack 0
  7323  0124FE                     _printf:
  7324                           	opt stack 18
  7325                           
  7326                           ;doprnt.c: 466: va_list ap;
  7327                           ;doprnt.c: 499: signed char c;
  7328                           ;doprnt.c: 506: signed char prec;
  7329                           ;doprnt.c: 508: unsigned char flag;
  7330                           ;doprnt.c: 523: union {
  7331                           ;doprnt.c: 524: unsigned long vd;
  7332                           ;doprnt.c: 525: double integ;
  7333                           ;doprnt.c: 526: } tmpval;
  7334                           ;doprnt.c: 528: unsigned int val;
  7335                           ;doprnt.c: 529: unsigned len;
  7336                           ;doprnt.c: 530: const char * cp;
  7337                           ;doprnt.c: 533: *ap = __va_start();
  7338                           
  7339                           ;incstack = 0
  7340  0124FE  0ED1               	movlw	low (?_printf+2)
  7341  012500  0100               	movlb	0	; () banked
  7342  012502  6FDE               	movwf	printf@ap& (0+255),b
  7343  012504  0E00               	movlw	high (?_printf+2)
  7344  012506  0100               	movlb	0	; () banked
  7345  012508  6FDF               	movwf	(printf@ap+1)& (0+255),b
  7346                           
  7347                           ;doprnt.c: 536: while(c = *f++) {
  7348  01250A  D0C9               	goto	u11230
  7349  01250C                     
  7350                           ; BSR set to: 0
  7351                           ;doprnt.c: 538: if(c != '%')
  7352                           
  7353                           ; BSR set to: 0
  7354  01250C  0E25               	movlw	37
  7355  01250E  0100               	movlb	0	; () banked
  7356  012510  19E2               	xorwf	printf@c& (0+255),w,b
  7357  012512  B4D8               	btfsc	status,2,c
  7358  012514  D005               	goto	l2440
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;doprnt.c: 540: {
  7362                           ;doprnt.c: 541: (putch(c) );
  7363  012516  0100               	movlb	0	; () banked
  7364  012518  51E2               	movf	printf@c& (0+255),w,b
  7365  01251A  EC0A  F0B4         	call	_putch
  7366                           
  7367                           ;doprnt.c: 542: continue;
  7368  01251E  D0BF               	goto	u11230
  7369  012520                     l2440:
  7370                           
  7371                           ;doprnt.c: 543: }
  7372                           ;doprnt.c: 548: flag = 0;
  7373  012520  0E00               	movlw	0
  7374  012522  0100               	movlb	0	; () banked
  7375  012524  6FDD               	movwf	printf@flag& (0+255),b
  7376                           
  7377                           ;doprnt.c: 635: switch(c = *f++) {
  7378  012526  D014               	goto	l2441
  7379  012528                     
  7380                           ; BSR set to: 0
  7381                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7382                           
  7383                           ; BSR set to: 0
  7384  012528  C0DE  FFD9         	movff	printf@ap,fsr2l
  7385  01252C  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7386  012530  50DF               	movf	indf2,w,c
  7387  012532  0100               	movlb	0	; () banked
  7388  012534  6FE2               	movwf	printf@c& (0+255),b
  7389                           
  7390                           ; BSR set to: 0
  7391  012536  0E02               	movlw	2
  7392  012538  0100               	movlb	0	; () banked
  7393  01253A  27DE               	addwf	printf@ap& (0+255),f,b
  7394  01253C  0E00               	movlw	0
  7395  01253E  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7396  012540                     
  7397                           ; BSR set to: 0
  7398                           ;doprnt.c: 809: (putch(c) );
  7399                           
  7400                           ; BSR set to: 0
  7401  012540  0100               	movlb	0	; () banked
  7402  012542  51E2               	movf	printf@c& (0+255),w,b
  7403  012544  EC0A  F0B4         	call	_putch
  7404                           
  7405                           ;doprnt.c: 810: continue;
  7406  012548  D0AA               	goto	u11230
  7407  01254A                     
  7408                           ;doprnt.c: 818: flag |= 0x40;
  7409  01254A  0100               	movlb	0	; () banked
  7410  01254C  8DDD               	bsf	printf@flag& (0+255),6,b
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 822: }
  7414                           
  7415                           ;doprnt.c: 819: break;
  7416  01254E  D01E               	goto	l2446
  7417  012550                     l2441:
  7418                           
  7419                           ; BSR set to: 0
  7420                           
  7421                           ; BSR set to: 0
  7422  012550  C0CF  FFF6         	movff	printf@f,tblptrl
  7423  012554  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7424  012558  0100               	movlb	0	; () banked
  7425  01255A  4BCF               	infsnz	printf@f& (0+255),f,b
  7426  01255C  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7427  01255E                     	if	0	;tblptru may be non-zero
  7428  01255E                     	endif
  7429  01255E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7430  01255E  0E00               	movlw	low (__mediumconst shr (0+16))
  7431  012560  6EF8               	movwf	tblptru,c
  7432  012562                     	endif
  7433  012562  0008               	tblrd		*
  7434  012564  CFF5 F0E2          	movff	tablat,printf@c
  7435  012568  0100               	movlb	0	; () banked
  7436  01256A  51E2               	movf	printf@c& (0+255),w,b
  7437                           
  7438                           ; Switch size 1, requested type "space"
  7439                           ; Number of cases is 5, Range of values is 0 to 117
  7440                           ; switch strategies available:
  7441                           ; Name         Instructions Cycles
  7442                           ; simple_byte           16     9 (average)
  7443                           ;	Chosen strategy is simple_byte
  7444  01256C  0A00               	xorlw	0	; case 0
  7445  01256E  B4D8               	btfsc	status,2,c
  7446  012570  0012               	return	
  7447  012572  0A63               	xorlw	99	; case 99
  7448  012574  B4D8               	btfsc	status,2,c
  7449  012576  D7D8               	goto	l2447
  7450  012578  0A07               	xorlw	7	; case 100
  7451  01257A  B4D8               	btfsc	status,2,c
  7452  01257C  D007               	goto	l2446
  7453  01257E  0A0D               	xorlw	13	; case 105
  7454  012580  B4D8               	btfsc	status,2,c
  7455  012582  D004               	goto	l2446
  7456  012584  0A1C               	xorlw	28	; case 117
  7457  012586  B4D8               	btfsc	status,2,c
  7458  012588  D7E0               	goto	l2449
  7459  01258A  D7DA               	goto	l2448
  7460  01258C                     l2446:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7464  01258C  0100               	movlb	0	; () banked
  7465  01258E  BDDD               	btfsc	printf@flag& (0+255),6,b
  7466  012590  D019               	goto	l2450
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;doprnt.c: 1253: {
  7470                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7471  012592  C0DE  FFD9         	movff	printf@ap,fsr2l
  7472  012596  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7473  01259A  CFDE F0E0          	movff	postinc2,printf@val
  7474  01259E  CFDD F0E1          	movff	postdec2,printf@val+1
  7475                           
  7476                           ; BSR set to: 0
  7477  0125A2  0E02               	movlw	2
  7478  0125A4  0100               	movlb	0	; () banked
  7479  0125A6  27DE               	addwf	printf@ap& (0+255),f,b
  7480  0125A8  0E00               	movlw	0
  7481  0125AA  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;doprnt.c: 1261: if((int)val < 0) {
  7485  0125AC  0100               	movlb	0	; () banked
  7486  0125AE  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7487  0125B0  D016               	goto	l2452
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;doprnt.c: 1262: flag |= 0x03;
  7491  0125B2  0E03               	movlw	3
  7492  0125B4  0100               	movlb	0	; () banked
  7493  0125B6  13DD               	iorwf	printf@flag& (0+255),f,b
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;doprnt.c: 1263: val = -val;
  7497  0125B8  0100               	movlb	0	; () banked
  7498  0125BA  6DE0               	negf	printf@val& (0+255),b
  7499  0125BC  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7500  0125BE  B0D8               	btfsc	status,0,c
  7501  0125C0  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;doprnt.c: 1264: }
  7505                           ;doprnt.c: 1266: }
  7506  0125C2  D00D               	goto	l2452
  7507  0125C4                     l2450:
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;doprnt.c: 1268: else
  7511                           ;doprnt.c: 1273: {
  7512                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7513                           
  7514                           ; BSR set to: 0
  7515  0125C4  C0DE  FFD9         	movff	printf@ap,fsr2l
  7516  0125C8  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7517  0125CC  CFDE F0E0          	movff	postinc2,printf@val
  7518  0125D0  CFDD F0E1          	movff	postdec2,printf@val+1
  7519                           
  7520                           ; BSR set to: 0
  7521  0125D4  0E02               	movlw	2
  7522  0125D6  0100               	movlb	0	; () banked
  7523  0125D8  27DE               	addwf	printf@ap& (0+255),f,b
  7524  0125DA  0E00               	movlw	0
  7525  0125DC  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7526  0125DE                     l2452:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;doprnt.c: 1287: }
  7530                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7531                           
  7532                           ; BSR set to: 0
  7533  0125DE  0E01               	movlw	1
  7534  0125E0  0100               	movlb	0	; () banked
  7535  0125E2  6FE2               	movwf	printf@c& (0+255),b
  7536  0125E4                     l14429:
  7537                           
  7538                           ; BSR set to: 0
  7539  0125E4  0E05               	movlw	5
  7540  0125E6  0100               	movlb	0	; () banked
  7541  0125E8  19E2               	xorwf	printf@c& (0+255),w,b
  7542  0125EA  B4D8               	btfsc	status,2,c
  7543  0125EC  D019               	goto	u11210
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;doprnt.c: 1306: if(val < dpowers[c])
  7547                           
  7548                           ; BSR set to: 0
  7549                           
  7550                           ; BSR set to: 0
  7551  0125EE  0100               	movlb	0	; () banked
  7552  0125F0  51E2               	movf	printf@c& (0+255),w,b
  7553  0125F2  0D02               	mullw	2
  7554  0125F4  0E05               	movlw	low _dpowers
  7555  0125F6  24F3               	addwf	prodl,w,c
  7556  0125F8  6EF6               	movwf	tblptrl,c
  7557  0125FA  0EFD               	movlw	high _dpowers
  7558  0125FC  20F4               	addwfc	prodh,w,c
  7559  0125FE  6EF7               	movwf	tblptrh,c
  7560  012600                     	if	1	;There are 3 active tblptr bytes
  7561  012600  6AF8               	clrf	tblptru,c
  7562  012602  0E00               	movlw	low (__mediumconst shr (0+16))
  7563  012604  22F8               	addwfc	tblptru,f,c
  7564  012606                     	endif
  7565  012606  0009               	tblrd		*+
  7566  012608  50F5               	movf	tablat,w,c
  7567  01260A  0100               	movlb	0	; () banked
  7568  01260C  5DE0               	subwf	printf@val& (0+255),w,b
  7569  01260E  0009               	tblrd		*+
  7570  012610  50F5               	movf	tablat,w,c
  7571  012612  0100               	movlb	0	; () banked
  7572  012614  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7573  012616  A0D8               	btfss	status,0,c
  7574  012618  D003               	goto	u11210
  7575                           
  7576                           ; BSR set to: 0
  7577                           
  7578                           ; BSR set to: 0
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;doprnt.c: 1307: break;
  7582  01261A  0100               	movlb	0	; () banked
  7583  01261C  2BE2               	incf	printf@c& (0+255),f,b
  7584  01261E  D7E2               	goto	l14429
  7585  012620                     u11210:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;doprnt.c: 1422: {
  7589                           ;doprnt.c: 1438: if(flag & 0x03)
  7590                           
  7591                           ; BSR set to: 0
  7592  012620  C0DD  F0DB         	movff	printf@flag,??_printf
  7593  012624  0E03               	movlw	3
  7594  012626  0100               	movlb	0	; () banked
  7595  012628  17DB               	andwf	??_printf& (0+255),f,b
  7596  01262A  B4D8               	btfsc	status,2,c
  7597  01262C  D003               	goto	l2456
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;doprnt.c: 1439: (putch('-') );
  7601  01262E  0E2D               	movlw	45
  7602  012630  EC0A  F0B4         	call	_putch
  7603  012634                     l2456:
  7604                           
  7605                           ;doprnt.c: 1469: }
  7606                           ;doprnt.c: 1472: prec = c;
  7607  012634  C0E2  F0DC         	movff	printf@c,printf@prec
  7608                           
  7609                           ;doprnt.c: 1474: while(prec--) {
  7610  012638  D02C               	goto	l2457
  7611  01263A                     
  7612                           ;doprnt.c: 1478: {
  7613                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7614  01263A  0100               	movlb	0	; () banked
  7615  01263C  51DC               	movf	printf@prec& (0+255),w,b
  7616  01263E  0D02               	mullw	2
  7617  012640  0E05               	movlw	low _dpowers
  7618  012642  24F3               	addwf	prodl,w,c
  7619  012644  6EF6               	movwf	tblptrl,c
  7620  012646  0EFD               	movlw	high _dpowers
  7621  012648  20F4               	addwfc	prodh,w,c
  7622  01264A  6EF7               	movwf	tblptrh,c
  7623  01264C                     	if	1	;There are 3 active tblptr bytes
  7624  01264C  6AF8               	clrf	tblptru,c
  7625  01264E  0E00               	movlw	low (__mediumconst shr (0+16))
  7626  012650  22F8               	addwfc	tblptru,f,c
  7627  012652                     	endif
  7628  012652  0009               	tblrd		*+
  7629  012654  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7630  012658  000A               	tblrd		*-
  7631  01265A  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7632  01265E  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7633  012662  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7634  012666  ECD0  F0A9         	call	___lwdiv	;wreg free
  7635  01266A  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7636  01266E  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7637  012672  0E00               	movlw	0
  7638  012674  0100               	movlb	0	; () banked
  7639  012676  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7640  012678  0E0A               	movlw	10
  7641  01267A  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7642  01267C  EC3B  F0AD         	call	___lwmod	;wreg free
  7643  012680  0100               	movlb	0	; () banked
  7644  012682  51C1               	movf	?___lwmod& (0+255),w,b
  7645  012684  0F30               	addlw	48
  7646  012686  0100               	movlb	0	; () banked
  7647  012688  6FE2               	movwf	printf@c& (0+255),b
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;doprnt.c: 1523: }
  7651                           ;doprnt.c: 1524: (putch(c) );
  7652  01268A  0100               	movlb	0	; () banked
  7653  01268C  51E2               	movf	printf@c& (0+255),w,b
  7654  01268E  EC0A  F0B4         	call	_putch
  7655  012692                     l2457:
  7656  012692  0100               	movlb	0	; () banked
  7657  012694  07DC               	decf	printf@prec& (0+255),f,b
  7658  012696  0100               	movlb	0	; () banked
  7659  012698  29DC               	incf	printf@prec& (0+255),w,b
  7660  01269A  A4D8               	btfss	status,2,c
  7661  01269C  D7CE               	goto	l2458
  7662  01269E                     u11230:
  7663                           
  7664                           ; BSR set to: 0
  7665                           
  7666                           ; BSR set to: 0
  7667  01269E  C0CF  FFF6         	movff	printf@f,tblptrl
  7668  0126A2  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7669  0126A6  0100               	movlb	0	; () banked
  7670  0126A8  4BCF               	infsnz	printf@f& (0+255),f,b
  7671  0126AA  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7672  0126AC                     	if	0	;tblptru may be non-zero
  7673  0126AC                     	endif
  7674  0126AC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7675  0126AC  0E00               	movlw	low (__mediumconst shr (0+16))
  7676  0126AE  6EF8               	movwf	tblptru,c
  7677  0126B0                     	endif
  7678  0126B0  0008               	tblrd		*
  7679  0126B2  CFF5 F0E2          	movff	tablat,printf@c
  7680  0126B6  0100               	movlb	0	; () banked
  7681  0126B8  51E2               	movf	printf@c& (0+255),w,b
  7682  0126BA  B4D8               	btfsc	status,2,c
  7683  0126BC  0012               	return	
  7684  0126BE  D726               	goto	l2439
  7685  0126C0                     __end_of_printf:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           postinc0	equ	0xFEE
  7694                           wreg	equ	0xFE8
  7695                           postdec1	equ	0xFE5
  7696                           fsr1h	equ	0xFE2
  7697                           fsr1l	equ	0xFE1
  7698                           indf2	equ	0xFDF
  7699                           postinc2	equ	0xFDE
  7700                           postdec2	equ	0xFDD
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function _putch *****************
  7706 ;; Defined at:
  7707 ;;		line 454 in file "Library/Console.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  c               1    wreg     unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  c               1   20[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      void 
  7714 ;; Registers used:
  7715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7725 ;;Total ram usage:        1 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:   11
  7728 ;; This function calls:
  7729 ;;		_Console_PrintChar
  7730 ;; This function is called by:
  7731 ;;		_printf
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text24
  7736  016814                     __ptext24:
  7737                           	opt stack 0
  7738  016814                     _putch:
  7739                           	opt stack 18
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;incstack = 0
  7743                           ;putch@c stored from wreg
  7744  016814  0100               	movlb	0	; () banked
  7745  016816  6FCE               	movwf	putch@c& (0+255),b
  7746                           
  7747                           ;Console.c: 456: Console_PrintChar(c);
  7748  016818  0100               	movlb	0	; () banked
  7749  01681A  51CE               	movf	putch@c& (0+255),w,b
  7750  01681C  EC40  F094         	call	_Console_PrintChar
  7751  016820  0012               	return		;funcret
  7752  016822                     __end_of_putch:
  7753                           	opt stack 0
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           postinc0	equ	0xFEE
  7761                           wreg	equ	0xFE8
  7762                           postdec1	equ	0xFE5
  7763                           fsr1h	equ	0xFE2
  7764                           fsr1l	equ	0xFE1
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           postdec2	equ	0xFDD
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _Console_PrintChar *****************
  7773 ;; Defined at:
  7774 ;;		line 322 in file "Library/Console.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  pInput          1    wreg     unsigned char 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  pInput          1   19[BANK0 ] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;Total ram usage:        4 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:   10
  7795 ;; This function calls:
  7796 ;;		_Console_Backspace
  7797 ;;		_Console_FormFeed
  7798 ;;		_Console_IncrementCursor
  7799 ;;		_Console_NewLine
  7800 ;;		_Console_ResetCursor
  7801 ;;		_Console_Tab
  7802 ;; This function is called by:
  7803 ;;		_putch
  7804 ;;		_Console_PrintString
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text25
  7809  012880                     __ptext25:
  7810                           	opt stack 0
  7811  012880                     _Console_PrintChar:
  7812                           	opt stack 18
  7813                           
  7814                           ;incstack = 0
  7815                           ;Console_PrintChar@pInput stored from wreg
  7816  012880  0100               	movlb	0	; () banked
  7817  012882  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7818                           
  7819                           ;Console.c: 324: switch(pInput)
  7820  012884  D0B1               	goto	l1036
  7821  012886                     
  7822                           ;Console.c: 327: case '\n':
  7823                           ;Console.c: 328: Console_NewLine();
  7824  012886  EC39  F0A6         	call	_Console_NewLine	;wreg free
  7825                           
  7826                           ;Console.c: 329: return;
  7827  01288A  0012               	return	
  7828  01288C                     
  7829                           ;Console.c: 331: Console_Backspace();
  7830  01288C  EC6C  F0AD         	call	_Console_Backspace	;wreg free
  7831                           
  7832                           ;Console.c: 332: return;
  7833  012890  0012               	return	
  7834  012892                     
  7835                           ;Console.c: 334: Console_FormFeed();
  7836  012892  ECBB  F0A7         	call	_Console_FormFeed	;wreg free
  7837                           
  7838                           ;Console.c: 335: return;
  7839  012896  0012               	return	
  7840  012898                     
  7841                           ;Console.c: 337: Console_Tab();
  7842  012898  EC0C  F0A1         	call	_Console_Tab	;wreg free
  7843                           
  7844                           ;Console.c: 338: return;
  7845  01289C  0012               	return	
  7846  01289E                     
  7847                           ;Console.c: 340: Console_IncrementCursor();
  7848  01289E  ECA5  F0AC         	call	_Console_IncrementCursor	;wreg free
  7849                           
  7850                           ;Console.c: 341: return;
  7851  0128A2  0012               	return	
  7852  0128A4                     
  7853                           ;Console.c: 343: Console_ResetCursor();
  7854  0128A4  ECC5  F0B2         	call	_Console_ResetCursor	;wreg free
  7855                           
  7856                           ;Console.c: 344: return;
  7857  0128A8  0012               	return	
  7858  0128AA                     
  7859                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7860                           
  7861                           ;Console.c: 349: default:
  7862  0128AA  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7863  0128AE  0E7F               	movlw	127
  7864  0128B0  0100               	movlb	0	; () banked
  7865  0128B2  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7866  0128B4  0100               	movlb	0	; () banked
  7867  0128B6  518E               	movf	_lBufferY& (0+255),w,b
  7868  0128B8  0D14               	mullw	20
  7869  0128BA  0EAC               	movlw	low _lBuffer
  7870  0128BC  0100               	movlb	0	; () banked
  7871  0128BE  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7872  0128C0  0E04               	movlw	high _lBuffer
  7873  0128C2  0100               	movlb	0	; () banked
  7874  0128C4  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7875  0128C6  50F3               	movf	prodl,w,c
  7876  0128C8  0100               	movlb	0	; () banked
  7877  0128CA  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7878  0128CC  50F4               	movf	prodh,w,c
  7879  0128CE  0100               	movlb	0	; () banked
  7880  0128D0  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7881  0128D2  0100               	movlb	0	; () banked
  7882  0128D4  518F               	movf	_lBufferX& (0+255),w,b
  7883  0128D6  0D01               	mullw	1
  7884  0128D8  50F3               	movf	prodl,w,c
  7885  0128DA  0100               	movlb	0	; () banked
  7886  0128DC  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7887  0128DE  6ED9               	movwf	fsr2l,c
  7888  0128E0  50F4               	movf	prodh,w,c
  7889  0128E2  0100               	movlb	0	; () banked
  7890  0128E4  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7891  0128E6  6EDA               	movwf	fsr2h,c
  7892  0128E8  50DF               	movf	indf2,w,c
  7893  0128EA  0B7F               	andlw	127
  7894  0128EC  0100               	movlb	0	; () banked
  7895  0128EE  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7896  0128F0  B4D8               	btfsc	status,2,c
  7897  0128F2  D02E               	goto	l1047
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;Console.c: 351: {
  7901                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7902  0128F4  0E01               	movlw	1
  7903  0128F6  0100               	movlb	0	; () banked
  7904  0128F8  6FFF               	movwf	_change& (0+255),b
  7905                           
  7906                           ; BSR set to: 0
  7907  0128FA  0100               	movlb	0	; () banked
  7908  0128FC  518E               	movf	_lBufferY& (0+255),w,b
  7909  0128FE  0D14               	mullw	20
  7910  012900  0EAC               	movlw	low _lBuffer
  7911  012902  0100               	movlb	0	; () banked
  7912  012904  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7913  012906  0E04               	movlw	high _lBuffer
  7914  012908  0100               	movlb	0	; () banked
  7915  01290A  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7916  01290C  50F3               	movf	prodl,w,c
  7917  01290E  0100               	movlb	0	; () banked
  7918  012910  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7919  012912  50F4               	movf	prodh,w,c
  7920  012914  0100               	movlb	0	; () banked
  7921  012916  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7922  012918  0100               	movlb	0	; () banked
  7923  01291A  518F               	movf	_lBufferX& (0+255),w,b
  7924  01291C  0D01               	mullw	1
  7925  01291E  50F3               	movf	prodl,w,c
  7926  012920  0100               	movlb	0	; () banked
  7927  012922  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7928  012924  6ED9               	movwf	fsr2l,c
  7929  012926  50F4               	movf	prodh,w,c
  7930  012928  0100               	movlb	0	; () banked
  7931  01292A  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7932  01292C  6EDA               	movwf	fsr2h,c
  7933  01292E  0100               	movlb	0	; () banked
  7934  012930  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7935  012932  0980               	iorlw	128
  7936  012934  6EDF               	movwf	indf2,c
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7940  012936  0100               	movlb	0	; () banked
  7941  012938  518E               	movf	_lBufferY& (0+255),w,b
  7942  01293A  0D02               	mullw	2
  7943  01293C  0E00               	movlw	low _lCBuffer
  7944  01293E  24F3               	addwf	prodl,w,c
  7945  012940  6ED9               	movwf	fsr2l,c
  7946  012942  0E03               	movlw	high _lCBuffer
  7947  012944  20F4               	addwfc	prodh,w,c
  7948  012946  6EDA               	movwf	fsr2h,c
  7949  012948  C0FD  FFDE         	movff	_gForecolour,postinc2
  7950  01294C  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7951  012950                     l1047:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;Console.c: 354: }
  7955                           ;Console.c: 368: if(Console_IncrementCursor())
  7956                           
  7957                           ; BSR set to: 0
  7958  012950  ECA5  F0AC         	call	_Console_IncrementCursor	;wreg free
  7959  012954  0900               	iorlw	0
  7960  012956  B4D8               	btfsc	status,2,c
  7961  012958  0012               	return	
  7962                           
  7963                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7964  01295A  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7965  01295E  0E7F               	movlw	127
  7966  012960  0100               	movlb	0	; () banked
  7967  012962  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7968  012964  0100               	movlb	0	; () banked
  7969  012966  518E               	movf	_lBufferY& (0+255),w,b
  7970  012968  0D14               	mullw	20
  7971  01296A  0EAC               	movlw	low _lBuffer
  7972  01296C  0100               	movlb	0	; () banked
  7973  01296E  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7974  012970  0E04               	movlw	high _lBuffer
  7975  012972  0100               	movlb	0	; () banked
  7976  012974  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7977  012976  50F3               	movf	prodl,w,c
  7978  012978  0100               	movlb	0	; () banked
  7979  01297A  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7980  01297C  50F4               	movf	prodh,w,c
  7981  01297E  0100               	movlb	0	; () banked
  7982  012980  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7983  012982  0100               	movlb	0	; () banked
  7984  012984  518F               	movf	_lBufferX& (0+255),w,b
  7985  012986  0D01               	mullw	1
  7986  012988  50F3               	movf	prodl,w,c
  7987  01298A  0100               	movlb	0	; () banked
  7988  01298C  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7989  01298E  6ED9               	movwf	fsr2l,c
  7990  012990  50F4               	movf	prodh,w,c
  7991  012992  0100               	movlb	0	; () banked
  7992  012994  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7993  012996  6EDA               	movwf	fsr2h,c
  7994  012998  50DF               	movf	indf2,w,c
  7995  01299A  0B7F               	andlw	127
  7996  01299C  0100               	movlb	0	; () banked
  7997  01299E  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7998  0129A0  B4D8               	btfsc	status,2,c
  7999  0129A2  0012               	return	
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8003  0129A4  0E01               	movlw	1
  8004  0129A6  0100               	movlb	0	; () banked
  8005  0129A8  6FFF               	movwf	_change& (0+255),b
  8006                           
  8007                           ; BSR set to: 0
  8008  0129AA  0100               	movlb	0	; () banked
  8009  0129AC  518E               	movf	_lBufferY& (0+255),w,b
  8010  0129AE  0D14               	mullw	20
  8011  0129B0  0EAC               	movlw	low _lBuffer
  8012  0129B2  0100               	movlb	0	; () banked
  8013  0129B4  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  8014  0129B6  0E04               	movlw	high _lBuffer
  8015  0129B8  0100               	movlb	0	; () banked
  8016  0129BA  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8017  0129BC  50F3               	movf	prodl,w,c
  8018  0129BE  0100               	movlb	0	; () banked
  8019  0129C0  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  8020  0129C2  50F4               	movf	prodh,w,c
  8021  0129C4  0100               	movlb	0	; () banked
  8022  0129C6  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8023  0129C8  0100               	movlb	0	; () banked
  8024  0129CA  518F               	movf	_lBufferX& (0+255),w,b
  8025  0129CC  0D01               	mullw	1
  8026  0129CE  50F3               	movf	prodl,w,c
  8027  0129D0  0100               	movlb	0	; () banked
  8028  0129D2  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  8029  0129D4  6ED9               	movwf	fsr2l,c
  8030  0129D6  50F4               	movf	prodh,w,c
  8031  0129D8  0100               	movlb	0	; () banked
  8032  0129DA  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8033  0129DC  6EDA               	movwf	fsr2h,c
  8034  0129DE  0100               	movlb	0	; () banked
  8035  0129E0  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  8036  0129E2  0980               	iorlw	128
  8037  0129E4  6EDF               	movwf	indf2,c
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;Console.c: 372: };
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;Console.c: 371: return;
  8044                           
  8045                           ; BSR set to: 0
  8046                           
  8047                           ; BSR set to: 0
  8048  0129E6  0012               	return	
  8049  0129E8                     l1036:
  8050                           
  8051                           ; BSR set to: 0
  8052  0129E8  0100               	movlb	0	; () banked
  8053  0129EA  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  8054                           
  8055                           ; Switch size 1, requested type "space"
  8056                           ; Number of cases is 8, Range of values is 7 to 35
  8057                           ; switch strategies available:
  8058                           ; Name         Instructions Cycles
  8059                           ; simple_byte           25    13 (average)
  8060                           ;	Chosen strategy is simple_byte
  8061  0129EC  0A07               	xorlw	7	; case 7
  8062  0129EE  B4D8               	btfsc	status,2,c
  8063  0129F0  D756               	goto	l1043
  8064  0129F2  0A0F               	xorlw	15	; case 8
  8065  0129F4  B4D8               	btfsc	status,2,c
  8066  0129F6  D74A               	goto	l1040
  8067  0129F8  0A01               	xorlw	1	; case 9
  8068  0129FA  B4D8               	btfsc	status,2,c
  8069  0129FC  D74D               	goto	l1042
  8070  0129FE  0A03               	xorlw	3	; case 10
  8071  012A00  B4D8               	btfsc	status,2,c
  8072  012A02  D741               	goto	l1037
  8073  012A04  0A06               	xorlw	6	; case 12
  8074  012A06  B4D8               	btfsc	status,2,c
  8075  012A08  D744               	goto	l1041
  8076  012A0A  0A01               	xorlw	1	; case 13
  8077  012A0C  B4D8               	btfsc	status,2,c
  8078  012A0E  D73B               	goto	l1037
  8079  012A10  0A2D               	xorlw	45	; case 32
  8080  012A12  B4D8               	btfsc	status,2,c
  8081  012A14  D74A               	goto	l1045
  8082  012A16  0A03               	xorlw	3	; case 35
  8083  012A18  B4D8               	btfsc	status,2,c
  8084  012A1A  D744               	goto	l1044
  8085  012A1C  D746               	goto	l1045
  8086  012A1E                     __end_of_Console_PrintChar:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodh	equ	0xFF4
  8093                           prodl	equ	0xFF3
  8094                           postinc0	equ	0xFEE
  8095                           wreg	equ	0xFE8
  8096                           postdec1	equ	0xFE5
  8097                           fsr1h	equ	0xFE2
  8098                           fsr1l	equ	0xFE1
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _Console_Tab *****************
  8107 ;; Defined at:
  8108 ;;		line 260 in file "Library/Console.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  c               1   15[BANK0 ] unsigned char 
  8113 ;;  i               1   14[BANK0 ] unsigned char 
  8114 ;;  t               1   13[BANK0 ] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        8 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    9
  8131 ;; This function calls:
  8132 ;;		_Console_ClearCursor
  8133 ;;		_Console_IncrementCursor
  8134 ;;		___awdiv
  8135 ;; This function is called by:
  8136 ;;		_Console_PrintChar
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text26
  8141  014218                     __ptext26:
  8142                           	opt stack 0
  8143  014218                     _Console_Tab:
  8144                           	opt stack 18
  8145                           
  8146                           ;Console.c: 262: UINT8 i = 0;
  8147                           
  8148                           ;incstack = 0
  8149  014218  0E00               	movlw	0
  8150  01421A  0100               	movlb	0	; () banked
  8151  01421C  6FC8               	movwf	Console_Tab@i& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  8155  01421E  0EFA               	movlw	250
  8156  014220  2447               	addwf	_gCursor,w,c
  8157  014222  0100               	movlb	0	; () banked
  8158  014224  6FBA               	movwf	___awdiv@dividend& (0+255),b
  8159  014226  0EFF               	movlw	255
  8160  014228  2048               	addwfc	_gCursor+1,w,c
  8161  01422A  0100               	movlb	0	; () banked
  8162  01422C  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  8163  01422E  0E00               	movlw	0
  8164  014230  0100               	movlb	0	; () banked
  8165  014232  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  8166  014234  0E06               	movlw	6
  8167  014236  6FBC               	movwf	___awdiv@divisor& (0+255),b
  8168  014238  ECCD  F0A1         	call	___awdiv	;wreg free
  8169  01423C  0100               	movlb	0	; () banked
  8170  01423E  51BA               	movf	?___awdiv& (0+255),w,b
  8171  014240  0100               	movlb	0	; () banked
  8172  014242  6FC9               	movwf	Console_Tab@c& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;Console.c: 264: UINT8 t = c/4;
  8176  014244  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  8177  014248  0100               	movlb	0	; () banked
  8178  01424A  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  8179  01424C  0E00               	movlw	0
  8180  01424E  0100               	movlb	0	; () banked
  8181  014250  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  8182  014252  0E04               	movlw	4
  8183  014254  6FBC               	movwf	___awdiv@divisor& (0+255),b
  8184  014256  ECCD  F0A1         	call	___awdiv	;wreg free
  8185  01425A  0100               	movlb	0	; () banked
  8186  01425C  51BA               	movf	?___awdiv& (0+255),w,b
  8187  01425E  0100               	movlb	0	; () banked
  8188  014260  6FC7               	movwf	Console_Tab@t& (0+255),b
  8189                           
  8190                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  8191  014262  0E00               	movlw	0
  8192  014264  0100               	movlb	0	; () banked
  8193  014266  6FC8               	movwf	Console_Tab@i& (0+255),b
  8194  014268  D006               	goto	l1009
  8195  01426A                     
  8196                           ; BSR set to: 0
  8197                           ;Console.c: 266: {
  8198                           ;Console.c: 267: Console_ClearCursor();
  8199                           
  8200                           ; BSR set to: 0
  8201  01426A  EC20  F0B0         	call	_Console_ClearCursor	;wreg free
  8202                           
  8203                           ;Console.c: 268: Console_IncrementCursor();
  8204  01426E  ECA5  F0AC         	call	_Console_IncrementCursor	;wreg free
  8205  014272  0100               	movlb	0	; () banked
  8206  014274  2BC8               	incf	Console_Tab@i& (0+255),f,b
  8207  014276                     l1009:
  8208                           
  8209                           ; BSR set to: 0
  8210                           
  8211                           ; BSR set to: 0
  8212  014276  0100               	movlb	0	; () banked
  8213  014278  51C7               	movf	Console_Tab@t& (0+255),w,b
  8214  01427A  0D04               	mullw	4
  8215  01427C  1EF3               	comf	prodl,f,c
  8216  01427E  1EF4               	comf	prodh,f,c
  8217  014280  4AF3               	infsnz	prodl,f,c
  8218  014282  2AF4               	incf	prodh,f,c
  8219  014284  0100               	movlb	0	; () banked
  8220  014286  51C9               	movf	Console_Tab@c& (0+255),w,b
  8221  014288  0100               	movlb	0	; () banked
  8222  01428A  6FC2               	movwf	??_Console_Tab& (0+255),b
  8223  01428C  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  8224  01428E  50F3               	movf	prodl,w,c
  8225  014290  0100               	movlb	0	; () banked
  8226  014292  27C2               	addwf	??_Console_Tab& (0+255),f,b
  8227  014294  50F4               	movf	prodh,w,c
  8228  014296  0100               	movlb	0	; () banked
  8229  014298  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8230  01429A  0100               	movlb	0	; () banked
  8231  01429C  1FC2               	comf	??_Console_Tab& (0+255),f,b
  8232  01429E  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  8233  0142A0  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  8234  0142A2  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  8235  0142A4  0E04               	movlw	4
  8236  0142A6  0100               	movlb	0	; () banked
  8237  0142A8  27C2               	addwf	??_Console_Tab& (0+255),f,b
  8238  0142AA  0E00               	movlw	0
  8239  0142AC  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8240  0142AE  0100               	movlb	0	; () banked
  8241  0142B0  51C8               	movf	Console_Tab@i& (0+255),w,b
  8242  0142B2  0100               	movlb	0	; () banked
  8243  0142B4  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  8244  0142B6  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  8245  0142B8  0100               	movlb	0	; () banked
  8246  0142BA  51C2               	movf	??_Console_Tab& (0+255),w,b
  8247  0142BC  0100               	movlb	0	; () banked
  8248  0142BE  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  8249  0142C0  0100               	movlb	0	; () banked
  8250  0142C2  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  8251  0142C4  0A80               	xorlw	128
  8252  0142C6  0100               	movlb	0	; () banked
  8253  0142C8  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  8254  0142CA  0100               	movlb	0	; () banked
  8255  0142CC  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  8256  0142CE  0A80               	xorlw	128
  8257  0142D0  0100               	movlb	0	; () banked
  8258  0142D2  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  8259  0142D4  B0D8               	btfsc	status,0,c
  8260  0142D6  0012               	return	
  8261  0142D8  D7C8               	goto	l1010
  8262  0142DA                     __end_of_Console_Tab:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec1	equ	0xFE5
  8273                           fsr1h	equ	0xFE2
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           fsr2h	equ	0xFDA
  8279                           fsr2l	equ	0xFD9
  8280                           status	equ	0xFD8
  8281                           
  8282 ;; *************** function ___awdiv *****************
  8283 ;; Defined at:
  8284 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;  dividend        2    0[BANK0 ] int 
  8287 ;;  divisor         2    2[BANK0 ] int 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  quotient        2    6[BANK0 ] int 
  8290 ;;  sign            1    5[BANK0 ] unsigned char 
  8291 ;;  counter         1    4[BANK0 ] unsigned char 
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  2    0[BANK0 ] int 
  8294 ;; Registers used:
  8295 ;;		wreg, status,2, status,0
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;Total ram usage:        8 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    7
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		_Console_Tab
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text27
  8316  01439A                     __ptext27:
  8317                           	opt stack 0
  8318  01439A                     ___awdiv:
  8319                           	opt stack 19
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;incstack = 0
  8323  01439A  0E00               	movlw	0
  8324  01439C  0100               	movlb	0	; () banked
  8325  01439E  6FBF               	movwf	___awdiv@sign& (0+255),b
  8326                           
  8327                           ; BSR set to: 0
  8328  0143A0  0100               	movlb	0	; () banked
  8329  0143A2  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8330  0143A4  D008               	goto	l2629
  8331                           
  8332                           ; BSR set to: 0
  8333  0143A6  0100               	movlb	0	; () banked
  8334  0143A8  6DBC               	negf	___awdiv@divisor& (0+255),b
  8335  0143AA  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8336  0143AC  B0D8               	btfsc	status,0,c
  8337  0143AE  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8338                           
  8339                           ; BSR set to: 0
  8340  0143B0  0E01               	movlw	1
  8341  0143B2  0100               	movlb	0	; () banked
  8342  0143B4  6FBF               	movwf	___awdiv@sign& (0+255),b
  8343  0143B6                     l2629:
  8344                           
  8345                           ; BSR set to: 0
  8346                           
  8347                           ; BSR set to: 0
  8348  0143B6  0100               	movlb	0	; () banked
  8349  0143B8  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8350  0143BA  D008               	goto	l2630
  8351                           
  8352                           ; BSR set to: 0
  8353  0143BC  0100               	movlb	0	; () banked
  8354  0143BE  6DBA               	negf	___awdiv@dividend& (0+255),b
  8355  0143C0  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8356  0143C2  B0D8               	btfsc	status,0,c
  8357  0143C4  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8358                           
  8359                           ; BSR set to: 0
  8360  0143C6  0E01               	movlw	1
  8361  0143C8  0100               	movlb	0	; () banked
  8362  0143CA  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  8363  0143CC                     l2630:
  8364                           
  8365                           ; BSR set to: 0
  8366                           
  8367                           ; BSR set to: 0
  8368  0143CC  0E00               	movlw	0
  8369  0143CE  0100               	movlb	0	; () banked
  8370  0143D0  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  8371  0143D2  0E00               	movlw	0
  8372  0143D4  6FC0               	movwf	___awdiv@quotient& (0+255),b
  8373                           
  8374                           ; BSR set to: 0
  8375  0143D6  0100               	movlb	0	; () banked
  8376  0143D8  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8377  0143DA  0100               	movlb	0	; () banked
  8378  0143DC  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8379  0143DE  B4D8               	btfsc	status,2,c
  8380  0143E0  D02C               	goto	l2637
  8381                           
  8382                           ; BSR set to: 0
  8383  0143E2  0E01               	movlw	1
  8384  0143E4  0100               	movlb	0	; () banked
  8385  0143E6  6FBE               	movwf	___awdiv@counter& (0+255),b
  8386  0143E8  D006               	goto	l2632
  8387  0143EA                     
  8388                           ; BSR set to: 0
  8389                           
  8390                           ; BSR set to: 0
  8391  0143EA  0100               	movlb	0	; () banked
  8392  0143EC  90D8               	bcf	status,0,c
  8393  0143EE  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  8394  0143F0  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8395  0143F2  0100               	movlb	0	; () banked
  8396  0143F4  2BBE               	incf	___awdiv@counter& (0+255),f,b
  8397  0143F6                     l2632:
  8398                           
  8399                           ; BSR set to: 0
  8400                           
  8401                           ; BSR set to: 0
  8402  0143F6  0100               	movlb	0	; () banked
  8403  0143F8  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8404  0143FA  D7F7               	goto	l2633
  8405  0143FC                     u9260:
  8406                           
  8407                           ; BSR set to: 0
  8408                           
  8409                           ; BSR set to: 0
  8410                           
  8411                           ; BSR set to: 0
  8412  0143FC  0100               	movlb	0	; () banked
  8413  0143FE  90D8               	bcf	status,0,c
  8414  014400  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  8415  014402  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 0
  8418  014404  0100               	movlb	0	; () banked
  8419  014406  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8420  014408  0100               	movlb	0	; () banked
  8421  01440A  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  8422  01440C  0100               	movlb	0	; () banked
  8423  01440E  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8424  014410  0100               	movlb	0	; () banked
  8425  014412  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8426  014414  A0D8               	btfss	status,0,c
  8427  014416  D00A               	goto	l2636
  8428                           
  8429                           ; BSR set to: 0
  8430  014418  0100               	movlb	0	; () banked
  8431  01441A  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8432  01441C  0100               	movlb	0	; () banked
  8433  01441E  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  8434  014420  0100               	movlb	0	; () banked
  8435  014422  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8436  014424  0100               	movlb	0	; () banked
  8437  014426  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8438                           
  8439                           ; BSR set to: 0
  8440  014428  0100               	movlb	0	; () banked
  8441  01442A  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  8442  01442C                     l2636:
  8443                           
  8444                           ; BSR set to: 0
  8445                           
  8446                           ; BSR set to: 0
  8447  01442C  0100               	movlb	0	; () banked
  8448  01442E  90D8               	bcf	status,0,c
  8449  014430  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8450  014432  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  8451                           
  8452                           ; BSR set to: 0
  8453  014434  0100               	movlb	0	; () banked
  8454  014436  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8455  014438  D7E1               	goto	u9260
  8456  01443A                     l2637:
  8457                           
  8458                           ; BSR set to: 0
  8459                           
  8460                           ; BSR set to: 0
  8461                           
  8462                           ; BSR set to: 0
  8463  01443A  0100               	movlb	0	; () banked
  8464  01443C  51BF               	movf	___awdiv@sign& (0+255),w,b
  8465  01443E  0100               	movlb	0	; () banked
  8466  014440  B4D8               	btfsc	status,2,c
  8467  014442  D005               	goto	l2638
  8468                           
  8469                           ; BSR set to: 0
  8470  014444  0100               	movlb	0	; () banked
  8471  014446  6DC0               	negf	___awdiv@quotient& (0+255),b
  8472  014448  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8473  01444A  B0D8               	btfsc	status,0,c
  8474  01444C  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8475  01444E                     l2638:
  8476                           
  8477                           ; BSR set to: 0
  8478                           
  8479                           ; BSR set to: 0
  8480  01444E  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8481  014452  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8482  014456  0012               	return	
  8483  014458                     __end_of___awdiv:
  8484                           	opt stack 0
  8485                           tblptru	equ	0xFF8
  8486                           tblptrh	equ	0xFF7
  8487                           tblptrl	equ	0xFF6
  8488                           tablat	equ	0xFF5
  8489                           prodh	equ	0xFF4
  8490                           prodl	equ	0xFF3
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           postdec1	equ	0xFE5
  8494                           fsr1h	equ	0xFE2
  8495                           fsr1l	equ	0xFE1
  8496                           indf2	equ	0xFDF
  8497                           postinc2	equ	0xFDE
  8498                           postdec2	equ	0xFDD
  8499                           fsr2h	equ	0xFDA
  8500                           fsr2l	equ	0xFD9
  8501                           status	equ	0xFD8
  8502                           
  8503 ;; *************** function _Console_IncrementCursor *****************
  8504 ;; Defined at:
  8505 ;;		line 243 in file "Library/Console.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      unsigned char 
  8512 ;; Registers used:
  8513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;Total ram usage:        2 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    8
  8526 ;; This function calls:
  8527 ;;		_Console_FormFeed
  8528 ;;		_Console_NewLine
  8529 ;; This function is called by:
  8530 ;;		_Console_Tab
  8531 ;;		_Console_PrintChar
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text28
  8536  01594A                     __ptext28:
  8537                           	opt stack 0
  8538  01594A                     _Console_IncrementCursor:
  8539                           	opt stack 18
  8540                           
  8541                           ;Console.c: 246: lBufferX += 1;
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;incstack = 0
  8545  01594A  0100               	movlb	0	; () banked
  8546  01594C  2B8F               	incf	_lBufferX& (0+255),f,b
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;Console.c: 248: gCursor.x += 6;
  8550  01594E  0E06               	movlw	6
  8551  015950  2647               	addwf	_gCursor,f,c
  8552  015952  0E00               	movlw	0
  8553  015954  2248               	addwfc	_gCursor+1,f,c
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8557  015956  0E06               	movlw	6
  8558  015958  2447               	addwf	_gCursor,w,c
  8559  01595A  0100               	movlb	0	; () banked
  8560  01595C  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8561  01595E  0E00               	movlw	0
  8562  015960  2048               	addwfc	_gCursor+1,w,c
  8563  015962  0100               	movlb	0	; () banked
  8564  015964  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8565  015966  0100               	movlb	0	; () banked
  8566  015968  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8567  01596A  D009               	goto	l1004
  8568  01596C  0100               	movlb	0	; () banked
  8569  01596E  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8570  015970  E104               	bnz	u9120
  8571  015972  0E80               	movlw	128
  8572  015974  0100               	movlb	0	; () banked
  8573  015976  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8574  015978  B0D8               	btfsc	status,0,c
  8575  01597A                     u9120:
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;Console.c: 250: Console_NewLine();
  8579  01597A  EC39  F0A6         	call	_Console_NewLine	;wreg free
  8580  01597E                     l1004:
  8581                           
  8582                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8583  01597E  0E08               	movlw	8
  8584  015980  2449               	addwf	_gCursor+2,w,c
  8585  015982  0100               	movlb	0	; () banked
  8586  015984  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8587  015986  0E00               	movlw	0
  8588  015988  204A               	addwfc	_gCursor+3,w,c
  8589  01598A  0100               	movlb	0	; () banked
  8590  01598C  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8591  01598E  0100               	movlb	0	; () banked
  8592  015990  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8593  015992  D00C               	goto	l1005
  8594  015994  0100               	movlb	0	; () banked
  8595  015996  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8596  015998  E105               	bnz	u9130
  8597  01599A  0E80               	movlw	128
  8598  01599C  0100               	movlb	0	; () banked
  8599  01599E  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8600  0159A0  A0D8               	btfss	status,0,c
  8601  0159A2  D004               	goto	l1005
  8602  0159A4                     u9130:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;Console.c: 252: {
  8606                           ;Console.c: 253: Console_FormFeed();
  8607  0159A4  ECBB  F0A7         	call	_Console_FormFeed	;wreg free
  8608                           
  8609                           ;Console.c: 254: return 1;
  8610  0159A8  0E01               	movlw	1
  8611  0159AA  0012               	return	
  8612  0159AC                     l1005:
  8613                           
  8614                           ;Console.c: 255: }
  8615                           ;Console.c: 257: return 0;
  8616  0159AC  0E00               	movlw	0
  8617  0159AE  0012               	return	
  8618  0159B0                     __end_of_Console_IncrementCursor:
  8619                           	opt stack 0
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           postinc0	equ	0xFEE
  8627                           wreg	equ	0xFE8
  8628                           postdec1	equ	0xFE5
  8629                           fsr1h	equ	0xFE2
  8630                           fsr1l	equ	0xFE1
  8631                           indf2	equ	0xFDF
  8632                           postinc2	equ	0xFDE
  8633                           postdec2	equ	0xFDD
  8634                           fsr2h	equ	0xFDA
  8635                           fsr2l	equ	0xFD9
  8636                           status	equ	0xFD8
  8637                           
  8638 ;; *************** function _Console_NewLine *****************
  8639 ;; Defined at:
  8640 ;;		line 175 in file "Library/Console.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      void 
  8647 ;; Registers used:
  8648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8658 ;;Total ram usage:        2 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    7
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_Console_IncrementCursor
  8665 ;;		_Console_PrintChar
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           	psect	text29
  8670  014C72                     __ptext29:
  8671                           	opt stack 0
  8672  014C72                     _Console_NewLine:
  8673                           	opt stack 18
  8674                           
  8675                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8676                           
  8677                           ;incstack = 0
  8678  014C72  D03E               	goto	l983
  8679  014C74                     
  8680                           ;Console.c: 179: {
  8681                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8682  014C74  0100               	movlb	0	; () banked
  8683  014C76  518E               	movf	_lBufferY& (0+255),w,b
  8684  014C78  0D14               	mullw	20
  8685  014C7A  0EAC               	movlw	low _lBuffer
  8686  014C7C  0100               	movlb	0	; () banked
  8687  014C7E  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8688  014C80  0E04               	movlw	high _lBuffer
  8689  014C82  0100               	movlb	0	; () banked
  8690  014C84  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8691  014C86  50F3               	movf	prodl,w,c
  8692  014C88  0100               	movlb	0	; () banked
  8693  014C8A  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8694  014C8C  50F4               	movf	prodh,w,c
  8695  014C8E  0100               	movlb	0	; () banked
  8696  014C90  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8697  014C92  0100               	movlb	0	; () banked
  8698  014C94  518F               	movf	_lBufferX& (0+255),w,b
  8699  014C96  0D01               	mullw	1
  8700  014C98  50F3               	movf	prodl,w,c
  8701  014C9A  0100               	movlb	0	; () banked
  8702  014C9C  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8703  014C9E  6ED9               	movwf	fsr2l,c
  8704  014CA0  50F4               	movf	prodh,w,c
  8705  014CA2  0100               	movlb	0	; () banked
  8706  014CA4  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8707  014CA6  6EDA               	movwf	fsr2h,c
  8708  014CA8  50DF               	movf	indf2,w,c
  8709  014CAA  B4D8               	btfsc	status,2,c
  8710  014CAC  D01F               	goto	l985
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8714  014CAE  0E01               	movlw	1
  8715  014CB0  0100               	movlb	0	; () banked
  8716  014CB2  6FFF               	movwf	_change& (0+255),b
  8717                           
  8718                           ; BSR set to: 0
  8719  014CB4  0100               	movlb	0	; () banked
  8720  014CB6  518E               	movf	_lBufferY& (0+255),w,b
  8721  014CB8  0D14               	mullw	20
  8722  014CBA  0EAC               	movlw	low _lBuffer
  8723  014CBC  0100               	movlb	0	; () banked
  8724  014CBE  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8725  014CC0  0E04               	movlw	high _lBuffer
  8726  014CC2  0100               	movlb	0	; () banked
  8727  014CC4  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8728  014CC6  50F3               	movf	prodl,w,c
  8729  014CC8  0100               	movlb	0	; () banked
  8730  014CCA  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8731  014CCC  50F4               	movf	prodh,w,c
  8732  014CCE  0100               	movlb	0	; () banked
  8733  014CD0  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8734  014CD2  0100               	movlb	0	; () banked
  8735  014CD4  518F               	movf	_lBufferX& (0+255),w,b
  8736  014CD6  0D01               	mullw	1
  8737  014CD8  50F3               	movf	prodl,w,c
  8738  014CDA  0100               	movlb	0	; () banked
  8739  014CDC  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8740  014CDE  6ED9               	movwf	fsr2l,c
  8741  014CE0  50F4               	movf	prodh,w,c
  8742  014CE2  0100               	movlb	0	; () banked
  8743  014CE4  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8744  014CE6  6EDA               	movwf	fsr2h,c
  8745  014CE8  0E80               	movlw	128
  8746  014CEA  6EDF               	movwf	indf2,c
  8747  014CEC                     l985:
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;Console.c: 182: lBufferX ++;
  8751                           
  8752                           ; BSR set to: 0
  8753  014CEC  0100               	movlb	0	; () banked
  8754  014CEE  2B8F               	incf	_lBufferX& (0+255),f,b
  8755  014CF0                     l983:
  8756                           
  8757                           ; BSR set to: 0
  8758  014CF0  0E13               	movlw	19
  8759  014CF2  0100               	movlb	0	; () banked
  8760  014CF4  658F               	cpfsgt	_lBufferX& (0+255),b
  8761  014CF6  D7BE               	goto	l984
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;Console.c: 183: }
  8765                           ;Console.c: 185: lBufferX = 0;
  8766                           
  8767                           ; BSR set to: 0
  8768  014CF8  0E00               	movlw	0
  8769  014CFA  0100               	movlb	0	; () banked
  8770  014CFC  6F8F               	movwf	_lBufferX& (0+255),b
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;Console.c: 186: lBufferY ++;
  8774  014CFE  0100               	movlb	0	; () banked
  8775  014D00  2B8E               	incf	_lBufferY& (0+255),f,b
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;Console.c: 188: gCursor.y += 8;
  8779  014D02  0E08               	movlw	8
  8780  014D04  2649               	addwf	_gCursor+2,f,c
  8781  014D06  0E00               	movlw	0
  8782  014D08  224A               	addwfc	_gCursor+3,f,c
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;Console.c: 189: gCursor.x = 6;
  8786  014D0A  0E00               	movlw	0
  8787  014D0C  6E48               	movwf	_gCursor+1,c
  8788  014D0E  0E06               	movlw	6
  8789  014D10  6E47               	movwf	_gCursor,c
  8790                           
  8791                           ; BSR set to: 0
  8792  014D12  0012               	return		;funcret
  8793  014D14                     __end_of_Console_NewLine:
  8794                           	opt stack 0
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           postinc0	equ	0xFEE
  8802                           wreg	equ	0xFE8
  8803                           postdec1	equ	0xFE5
  8804                           fsr1h	equ	0xFE2
  8805                           fsr1l	equ	0xFE1
  8806                           indf2	equ	0xFDF
  8807                           postinc2	equ	0xFDE
  8808                           postdec2	equ	0xFDD
  8809                           fsr2h	equ	0xFDA
  8810                           fsr2l	equ	0xFD9
  8811                           status	equ	0xFD8
  8812                           
  8813 ;; *************** function _Console_FormFeed *****************
  8814 ;; Defined at:
  8815 ;;		line 192 in file "Library/Console.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;		None
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  y               1    3[BANK0 ] unsigned char 
  8820 ;;  x               1    2[BANK0 ] unsigned char 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  1    wreg      void 
  8823 ;; Registers used:
  8824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;Total ram usage:        4 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    7
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		_Console_IncrementCursor
  8841 ;;		_Console_PrintChar
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text30
  8846  014F76                     __ptext30:
  8847                           	opt stack 0
  8848  014F76                     _Console_FormFeed:
  8849                           	opt stack 18
  8850                           
  8851                           ;Console.c: 195: lBufferX = 0;
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;incstack = 0
  8855  014F76  0E00               	movlw	0
  8856  014F78  0100               	movlb	0	; () banked
  8857  014F7A  6F8F               	movwf	_lBufferX& (0+255),b
  8858                           
  8859                           ;Console.c: 196: lBufferY = 0;
  8860  014F7C  0E00               	movlw	0
  8861  014F7E  0100               	movlb	0	; () banked
  8862  014F80  6F8E               	movwf	_lBufferY& (0+255),b
  8863                           
  8864                           ;Console.c: 197: UINT8 x, y;
  8865                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8866  014F82  0E00               	movlw	0
  8867  014F84  0100               	movlb	0	; () banked
  8868  014F86  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8869  014F88                     l12317:
  8870                           
  8871                           ; BSR set to: 0
  8872  014F88  0E0E               	movlw	14
  8873  014F8A  0100               	movlb	0	; () banked
  8874  014F8C  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8875  014F8E  D001               	goto	l990
  8876  014F90  D02D               	goto	u8950
  8877  014F92                     l990:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8881                           
  8882                           ; BSR set to: 0
  8883  014F92  0E00               	movlw	0
  8884  014F94  0100               	movlb	0	; () banked
  8885  014F96  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8886  014F98                     l12323:
  8887                           
  8888                           ; BSR set to: 0
  8889  014F98  0E13               	movlw	19
  8890  014F9A  0100               	movlb	0	; () banked
  8891  014F9C  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8892  014F9E  D001               	goto	l992
  8893  014FA0  D022               	goto	u8940
  8894  014FA2                     l992:
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8898                           
  8899                           ; BSR set to: 0
  8900  014FA2  0E01               	movlw	1
  8901  014FA4  0100               	movlb	0	; () banked
  8902  014FA6  6FFF               	movwf	_change& (0+255),b
  8903                           
  8904                           ; BSR set to: 0
  8905  014FA8  0100               	movlb	0	; () banked
  8906  014FAA  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8907  014FAC  0D14               	mullw	20
  8908  014FAE  0EAC               	movlw	low _lBuffer
  8909  014FB0  0100               	movlb	0	; () banked
  8910  014FB2  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8911  014FB4  0E04               	movlw	high _lBuffer
  8912  014FB6  0100               	movlb	0	; () banked
  8913  014FB8  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8914  014FBA  50F3               	movf	prodl,w,c
  8915  014FBC  0100               	movlb	0	; () banked
  8916  014FBE  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8917  014FC0  50F4               	movf	prodh,w,c
  8918  014FC2  0100               	movlb	0	; () banked
  8919  014FC4  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8920  014FC6  0100               	movlb	0	; () banked
  8921  014FC8  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8922  014FCA  0D01               	mullw	1
  8923  014FCC  50F3               	movf	prodl,w,c
  8924  014FCE  0100               	movlb	0	; () banked
  8925  014FD0  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8926  014FD2  6ED9               	movwf	fsr2l,c
  8927  014FD4  50F4               	movf	prodh,w,c
  8928  014FD6  0100               	movlb	0	; () banked
  8929  014FD8  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8930  014FDA  6EDA               	movwf	fsr2h,c
  8931  014FDC  0E80               	movlw	128
  8932  014FDE  6EDF               	movwf	indf2,c
  8933                           
  8934                           ; BSR set to: 0
  8935  014FE0  0100               	movlb	0	; () banked
  8936  014FE2  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8937  014FE4  D7D9               	goto	l12323
  8938  014FE6                     u8940:
  8939                           
  8940                           ; BSR set to: 0
  8941                           
  8942                           ; BSR set to: 0
  8943  014FE6  0100               	movlb	0	; () banked
  8944  014FE8  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8945  014FEA  D7CE               	goto	l12317
  8946  014FEC                     u8950:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;Console.c: 204: clearall = 1;
  8950                           
  8951                           ; BSR set to: 0
  8952  014FEC  0E01               	movlw	1
  8953  014FEE  0100               	movlb	0	; () banked
  8954  014FF0  6F90               	movwf	_clearall& (0+255),b
  8955                           
  8956                           ;Console.c: 205: gCursor.x = 6;
  8957  014FF2  0E00               	movlw	0
  8958  014FF4  6E48               	movwf	_gCursor+1,c
  8959  014FF6  0E06               	movlw	6
  8960  014FF8  6E47               	movwf	_gCursor,c
  8961                           
  8962                           ;Console.c: 206: gCursor.y = 6;
  8963  014FFA  0E00               	movlw	0
  8964  014FFC  6E4A               	movwf	_gCursor+3,c
  8965  014FFE  0E06               	movlw	6
  8966  015000  6E49               	movwf	_gCursor+2,c
  8967                           
  8968                           ; BSR set to: 0
  8969  015002  0012               	return		;funcret
  8970  015004                     __end_of_Console_FormFeed:
  8971                           	opt stack 0
  8972                           tblptru	equ	0xFF8
  8973                           tblptrh	equ	0xFF7
  8974                           tblptrl	equ	0xFF6
  8975                           tablat	equ	0xFF5
  8976                           prodh	equ	0xFF4
  8977                           prodl	equ	0xFF3
  8978                           postinc0	equ	0xFEE
  8979                           wreg	equ	0xFE8
  8980                           postdec1	equ	0xFE5
  8981                           fsr1h	equ	0xFE2
  8982                           fsr1l	equ	0xFE1
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function _Console_ResetCursor *****************
  8991 ;; Defined at:
  8992 ;;		line 297 in file "Library/Console.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;		None
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg, status,2
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;Total ram usage:        0 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    7
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_Console_PrintChar
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text31
  9021  01658A                     __ptext31:
  9022                           	opt stack 0
  9023  01658A                     _Console_ResetCursor:
  9024                           	opt stack 20
  9025                           
  9026                           ;Console.c: 299: gCursor.x = 6;
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;incstack = 0
  9030  01658A  0E00               	movlw	0
  9031  01658C  6E48               	movwf	_gCursor+1,c
  9032  01658E  0E06               	movlw	6
  9033  016590  6E47               	movwf	_gCursor,c
  9034                           
  9035                           ;Console.c: 300: gCursor.y = 6;
  9036  016592  0E00               	movlw	0
  9037  016594  6E4A               	movwf	_gCursor+3,c
  9038  016596  0E06               	movlw	6
  9039  016598  6E49               	movwf	_gCursor+2,c
  9040                           
  9041                           ;Console.c: 303: lBufferX = 0;
  9042  01659A  0E00               	movlw	0
  9043  01659C  0100               	movlb	0	; () banked
  9044  01659E  6F8F               	movwf	_lBufferX& (0+255),b
  9045                           
  9046                           ;Console.c: 304: lBufferY = 0;
  9047  0165A0  0E00               	movlw	0
  9048  0165A2  0100               	movlb	0	; () banked
  9049  0165A4  6F8E               	movwf	_lBufferY& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052  0165A6  0012               	return		;funcret
  9053  0165A8                     __end_of_Console_ResetCursor:
  9054                           	opt stack 0
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodh	equ	0xFF4
  9060                           prodl	equ	0xFF3
  9061                           postinc0	equ	0xFEE
  9062                           wreg	equ	0xFE8
  9063                           postdec1	equ	0xFE5
  9064                           fsr1h	equ	0xFE2
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           fsr2h	equ	0xFDA
  9070                           fsr2l	equ	0xFD9
  9071                           status	equ	0xFD8
  9072                           
  9073 ;; *************** function _Console_Backspace *****************
  9074 ;; Defined at:
  9075 ;;		line 209 in file "Library/Console.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;		None
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;		None
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  1    wreg      void 
  9082 ;; Registers used:
  9083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;Total ram usage:        0 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; Hardware stack levels required when called:    8
  9096 ;; This function calls:
  9097 ;;		_Console_ClearCursor
  9098 ;; This function is called by:
  9099 ;;		_Console_PrintChar
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           	psect	text32
  9104  015AD8                     __ptext32:
  9105                           	opt stack 0
  9106  015AD8                     _Console_Backspace:
  9107                           	opt stack 19
  9108                           
  9109                           ;Console.c: 211: if (lBufferX > 0)
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;incstack = 0
  9113  015AD8  0100               	movlb	0	; () banked
  9114  015ADA  518F               	movf	_lBufferX& (0+255),w,b
  9115  015ADC  B4D8               	btfsc	status,2,c
  9116  015ADE  D007               	goto	l997
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;Console.c: 212: {
  9120                           ;Console.c: 213: gCursor.x -= 6;
  9121  015AE0  0EFA               	movlw	250
  9122  015AE2  2647               	addwf	_gCursor,f,c
  9123  015AE4  0EFF               	movlw	255
  9124  015AE6  2248               	addwfc	_gCursor+1,f,c
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;Console.c: 216: lBufferX --;
  9128  015AE8  0100               	movlb	0	; () banked
  9129  015AEA  078F               	decf	_lBufferX& (0+255),f,b
  9130                           
  9131                           ;Console.c: 218: }
  9132  015AEC  D020               	goto	l1000
  9133  015AEE                     l997:
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;Console.c: 219: else if (lBufferY > 0)
  9137                           
  9138                           ; BSR set to: 0
  9139  015AEE  0100               	movlb	0	; () banked
  9140  015AF0  518E               	movf	_lBufferY& (0+255),w,b
  9141  015AF2  B4D8               	btfsc	status,2,c
  9142  015AF4  D00E               	goto	l999
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;Console.c: 220: {
  9146                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  9147  015AF6  0E00               	movlw	0
  9148  015AF8  6E48               	movwf	_gCursor+1,c
  9149  015AFA  0E72               	movlw	114
  9150  015AFC  6E47               	movwf	_gCursor,c
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;Console.c: 222: gCursor.y -= 8;
  9154  015AFE  0EF8               	movlw	248
  9155  015B00  2649               	addwf	_gCursor+2,f,c
  9156  015B02  0EFF               	movlw	255
  9157  015B04  224A               	addwfc	_gCursor+3,f,c
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  9161  015B06  0E13               	movlw	19
  9162  015B08  0100               	movlb	0	; () banked
  9163  015B0A  6F8F               	movwf	_lBufferX& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;Console.c: 226: lBufferY --;
  9167  015B0C  0100               	movlb	0	; () banked
  9168  015B0E  078E               	decf	_lBufferY& (0+255),f,b
  9169                           
  9170                           ;Console.c: 228: }
  9171  015B10  D00E               	goto	l1000
  9172  015B12                     l999:
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;Console.c: 229: else
  9176                           ;Console.c: 230: {
  9177                           ;Console.c: 231: gCursor.x = 6;
  9178                           
  9179                           ; BSR set to: 0
  9180  015B12  0E00               	movlw	0
  9181  015B14  6E48               	movwf	_gCursor+1,c
  9182  015B16  0E06               	movlw	6
  9183  015B18  6E47               	movwf	_gCursor,c
  9184                           
  9185                           ;Console.c: 232: gCursor.y = 6;
  9186  015B1A  0E00               	movlw	0
  9187  015B1C  6E4A               	movwf	_gCursor+3,c
  9188  015B1E  0E06               	movlw	6
  9189  015B20  6E49               	movwf	_gCursor+2,c
  9190                           
  9191                           ;Console.c: 235: lBufferX = 0;
  9192  015B22  0E00               	movlw	0
  9193  015B24  0100               	movlb	0	; () banked
  9194  015B26  6F8F               	movwf	_lBufferX& (0+255),b
  9195                           
  9196                           ;Console.c: 236: lBufferY = 0;
  9197  015B28  0E00               	movlw	0
  9198  015B2A  0100               	movlb	0	; () banked
  9199  015B2C  6F8E               	movwf	_lBufferY& (0+255),b
  9200  015B2E                     l1000:
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;Console.c: 238: }
  9204                           ;Console.c: 240: Console_ClearCursor();
  9205                           
  9206                           ; BSR set to: 0
  9207                           
  9208                           ; BSR set to: 0
  9209  015B2E  EC20  F0B0         	call	_Console_ClearCursor	;wreg free
  9210  015B32  0012               	return		;funcret
  9211  015B34                     __end_of_Console_Backspace:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _Console_ClearCursor *****************
  9232 ;; Defined at:
  9233 ;;		line 308 in file "Library/Console.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;Total ram usage:        2 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    7
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		_Console_Backspace
  9258 ;;		_Console_Tab
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text33
  9263  016040                     __ptext33:
  9264                           	opt stack 0
  9265  016040                     _Console_ClearCursor:
  9266                           	opt stack 19
  9267                           
  9268                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9269                           
  9270                           ;incstack = 0
  9271  016040  0E01               	movlw	1
  9272  016042  0100               	movlb	0	; () banked
  9273  016044  6FFF               	movwf	_change& (0+255),b
  9274                           
  9275                           ; BSR set to: 0
  9276  016046  0100               	movlb	0	; () banked
  9277  016048  518E               	movf	_lBufferY& (0+255),w,b
  9278  01604A  0D14               	mullw	20
  9279  01604C  0EAC               	movlw	low _lBuffer
  9280  01604E  0100               	movlb	0	; () banked
  9281  016050  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  9282  016052  0E04               	movlw	high _lBuffer
  9283  016054  0100               	movlb	0	; () banked
  9284  016056  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9285  016058  50F3               	movf	prodl,w,c
  9286  01605A  0100               	movlb	0	; () banked
  9287  01605C  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  9288  01605E  50F4               	movf	prodh,w,c
  9289  016060  0100               	movlb	0	; () banked
  9290  016062  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9291  016064  0100               	movlb	0	; () banked
  9292  016066  518F               	movf	_lBufferX& (0+255),w,b
  9293  016068  0D01               	mullw	1
  9294  01606A  50F3               	movf	prodl,w,c
  9295  01606C  0100               	movlb	0	; () banked
  9296  01606E  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  9297  016070  6ED9               	movwf	fsr2l,c
  9298  016072  50F4               	movf	prodh,w,c
  9299  016074  0100               	movlb	0	; () banked
  9300  016076  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9301  016078  6EDA               	movwf	fsr2h,c
  9302  01607A  0E80               	movlw	128
  9303  01607C  6EDF               	movwf	indf2,c
  9304                           
  9305                           ; BSR set to: 0
  9306  01607E  0012               	return		;funcret
  9307  016080                     __end_of_Console_ClearCursor:
  9308                           	opt stack 0
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           postinc0	equ	0xFEE
  9316                           wreg	equ	0xFE8
  9317                           postdec1	equ	0xFE5
  9318                           fsr1h	equ	0xFE2
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function ___fltol *****************
  9328 ;; Defined at:
  9329 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  f1              4   57[BANK0 ] void 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  exp1            1   62[BANK0 ] unsigned char 
  9334 ;;  sign1           1   61[BANK0 ] unsigned char 
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  4   57[BANK0 ] long 
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9344 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;Total ram usage:       10 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    7
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_findClosestWall
  9355 ;;		_measureAndDisplayDistance
  9356 ;;		_mode1
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text34
  9361  01378C                     __ptext34:
  9362                           	opt stack 0
  9363  01378C                     ___fltol:
  9364                           	opt stack 21
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;incstack = 0
  9368  01378C  0100               	movlb	0	; () banked
  9369  01378E  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9370  013790  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9371  013792  0100               	movlb	0	; () banked
  9372  013794  6FF8               	movwf	___fltol@exp1& (0+255),b
  9373  013796  0100               	movlb	0	; () banked
  9374  013798  51F8               	movf	___fltol@exp1& (0+255),w,b
  9375  01379A  A4D8               	btfss	status,2,c
  9376  01379C  D00A               	goto	l2691
  9377                           
  9378                           ; BSR set to: 0
  9379  01379E  0E00               	movlw	0
  9380  0137A0  0100               	movlb	0	; () banked
  9381  0137A2  6FF3               	movwf	?___fltol& (0+255),b
  9382  0137A4  0E00               	movlw	0
  9383  0137A6  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9384  0137A8  0E00               	movlw	0
  9385  0137AA  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9386  0137AC  0E00               	movlw	0
  9387  0137AE  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9388                           
  9389                           ; BSR set to: 0
  9390  0137B0  0012               	return	
  9391  0137B2                     l2691:
  9392                           
  9393                           ; BSR set to: 0
  9394                           
  9395                           ; BSR set to: 0
  9396  0137B2  C0F3  F100         	movff	___fltol@f1,??___fltol
  9397  0137B6  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  9398  0137BA  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  9399  0137BE  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  9400  0137C2  0E20               	movlw	32
  9401  0137C4  D006               	goto	u10750
  9402  0137C6                     u10755:
  9403  0137C6  0101               	movlb	1	; () banked
  9404  0137C8  90D8               	bcf	status,0,c
  9405  0137CA  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  9406  0137CC  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  9407  0137CE  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  9408  0137D0  3300               	rrcf	??___fltol& (0+255),f,b
  9409  0137D2                     u10750:
  9410  0137D2  2EE8               	decfsz	wreg,f,c
  9411  0137D4  D7F8               	goto	u10755
  9412  0137D6  0101               	movlb	1	; () banked
  9413  0137D8  5100               	movf	??___fltol& (0+255),w,b
  9414  0137DA  0100               	movlb	0	; () banked
  9415  0137DC  6FF7               	movwf	___fltol@sign1& (0+255),b
  9416                           
  9417                           ; BSR set to: 0
  9418  0137DE  0100               	movlb	0	; () banked
  9419  0137E0  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  9420                           
  9421                           ; BSR set to: 0
  9422  0137E2  0EFF               	movlw	255
  9423  0137E4  0100               	movlb	0	; () banked
  9424  0137E6  17F3               	andwf	___fltol@f1& (0+255),f,b
  9425  0137E8  0EFF               	movlw	255
  9426  0137EA  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  9427  0137EC  0EFF               	movlw	255
  9428  0137EE  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  9429  0137F0  0E00               	movlw	0
  9430  0137F2  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  9431                           
  9432                           ; BSR set to: 0
  9433  0137F4  0E96               	movlw	150
  9434  0137F6  0100               	movlb	0	; () banked
  9435  0137F8  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  9436                           
  9437                           ; BSR set to: 0
  9438  0137FA  0100               	movlb	0	; () banked
  9439  0137FC  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  9440  0137FE  D01A               	goto	l2693
  9441                           
  9442                           ; BSR set to: 0
  9443  013800  0100               	movlb	0	; () banked
  9444  013802  51F8               	movf	___fltol@exp1& (0+255),w,b
  9445  013804  0A80               	xorlw	128
  9446  013806  0F97               	addlw	151
  9447  013808  B0D8               	btfsc	status,0,c
  9448  01380A  D00A               	goto	l2694
  9449                           
  9450                           ; BSR set to: 0
  9451  01380C  0E00               	movlw	0
  9452  01380E  0100               	movlb	0	; () banked
  9453  013810  6FF3               	movwf	?___fltol& (0+255),b
  9454  013812  0E00               	movlw	0
  9455  013814  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9456  013816  0E00               	movlw	0
  9457  013818  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9458  01381A  0E00               	movlw	0
  9459  01381C  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9460                           
  9461                           ; BSR set to: 0
  9462  01381E  0012               	return	
  9463  013820                     l2694:
  9464                           
  9465                           ; BSR set to: 0
  9466                           
  9467                           ; BSR set to: 0
  9468                           
  9469                           ; BSR set to: 0
  9470  013820  0100               	movlb	0	; () banked
  9471  013822  90D8               	bcf	status,0,c
  9472  013824  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9473  013826  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9474  013828  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9475  01382A  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9476                           
  9477                           ; BSR set to: 0
  9478  01382C  0100               	movlb	0	; () banked
  9479  01382E  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9480  013830  D7F7               	goto	l2694
  9481                           
  9482                           ; BSR set to: 0
  9483  013832  D01B               	goto	u10790
  9484  013834                     l2693:
  9485                           
  9486                           ; BSR set to: 0
  9487                           
  9488                           ; BSR set to: 0
  9489  013834  0E1F               	movlw	31
  9490  013836  0100               	movlb	0	; () banked
  9491  013838  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9492  01383A  D012               	goto	l2699
  9493                           
  9494                           ; BSR set to: 0
  9495  01383C  0E00               	movlw	0
  9496  01383E  0100               	movlb	0	; () banked
  9497  013840  6FF3               	movwf	?___fltol& (0+255),b
  9498  013842  0E00               	movlw	0
  9499  013844  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9500  013846  0E00               	movlw	0
  9501  013848  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9502  01384A  0E00               	movlw	0
  9503  01384C  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9504                           
  9505                           ; BSR set to: 0
  9506  01384E  0012               	return	
  9507  013850                     
  9508                           ; BSR set to: 0
  9509                           
  9510                           ; BSR set to: 0
  9511  013850  0100               	movlb	0	; () banked
  9512  013852  90D8               	bcf	status,0,c
  9513  013854  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9514  013856  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9515  013858  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9516  01385A  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9517  01385C  0100               	movlb	0	; () banked
  9518  01385E  07F8               	decf	___fltol@exp1& (0+255),f,b
  9519  013860                     l2699:
  9520                           
  9521                           ; BSR set to: 0
  9522                           
  9523                           ; BSR set to: 0
  9524  013860  0100               	movlb	0	; () banked
  9525  013862  51F8               	movf	___fltol@exp1& (0+255),w,b
  9526  013864  0100               	movlb	0	; () banked
  9527  013866  A4D8               	btfss	status,2,c
  9528  013868  D7F3               	goto	l2700
  9529  01386A                     u10790:
  9530                           
  9531                           ; BSR set to: 0
  9532                           
  9533                           ; BSR set to: 0
  9534                           
  9535                           ; BSR set to: 0
  9536  01386A  0100               	movlb	0	; () banked
  9537  01386C  51F7               	movf	___fltol@sign1& (0+255),w,b
  9538  01386E  0100               	movlb	0	; () banked
  9539  013870  B4D8               	btfsc	status,2,c
  9540  013872  D009               	goto	l2702
  9541                           
  9542                           ; BSR set to: 0
  9543  013874  0100               	movlb	0	; () banked
  9544  013876  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9545  013878  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9546  01387A  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9547  01387C  6DF3               	negf	___fltol@f1& (0+255),b
  9548  01387E  0E00               	movlw	0
  9549  013880  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9550  013882  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9551  013884  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9552  013886                     l2702:
  9553                           
  9554                           ; BSR set to: 0
  9555                           
  9556                           ; BSR set to: 0
  9557  013886  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9558  01388A  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9559  01388E  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9560  013892  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9561  013896  0012               	return	
  9562  013898                     __end_of___fltol:
  9563                           	opt stack 0
  9564                           tblptru	equ	0xFF8
  9565                           tblptrh	equ	0xFF7
  9566                           tblptrl	equ	0xFF6
  9567                           tablat	equ	0xFF5
  9568                           prodh	equ	0xFF4
  9569                           prodl	equ	0xFF3
  9570                           postinc0	equ	0xFEE
  9571                           wreg	equ	0xFE8
  9572                           postdec1	equ	0xFE5
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _Motor_Speed *****************
  9583 ;; Defined at:
  9584 ;;		line 117 in file "Library/Motor.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9587 ;;		 -> Stepper(6), 
  9588 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  1    wreg      unsigned char 
  9593 ;; Registers used:
  9594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9600 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;Total ram usage:        4 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    9
  9607 ;; This function calls:
  9608 ;;		_Timer0_Init
  9609 ;; This function is called by:
  9610 ;;		_findClosestWall
  9611 ;;		_mode1
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           	psect	text35
  9616  016462                     __ptext35:
  9617                           	opt stack 0
  9618  016462                     _Motor_Speed:
  9619                           	opt stack 19
  9620                           
  9621                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;incstack = 0
  9625  016462  0100               	movlb	0	; () banked
  9626  016464  EE20 F002          	lfsr	2,2
  9627  016468  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9628  01646A  26D9               	addwf	fsr2l,f,c
  9629  01646C  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9630  01646E  22DA               	addwfc	fsr2h,f,c
  9631  016470  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9632  016474  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9633                           
  9634                           ; BSR set to: 0
  9635                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9636  016478  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9637  01647C  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9638  016480  0100               	movlb	0	; () banked
  9639  016482  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9640  016484  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9641  016486  ECC7  F098         	call	_Timer0_Init	;wreg free
  9642  01648A  0012               	return	
  9643  01648C                     __end_of_Motor_Speed:
  9644                           	opt stack 0
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           postinc0	equ	0xFEE
  9652                           wreg	equ	0xFE8
  9653                           postdec1	equ	0xFE5
  9654                           fsr1h	equ	0xFE2
  9655                           fsr1l	equ	0xFE1
  9656                           indf2	equ	0xFDF
  9657                           postinc2	equ	0xFDE
  9658                           postdec2	equ	0xFDD
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _Motor_Move *****************
  9664 ;; Defined at:
  9665 ;;		line 51 in file "Library/Motor.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9668 ;;		 -> Stepper(6), 
  9669 ;;  pDelta          2    5[BANK0 ] short 
  9670 ;; Auto vars:     Size  Location     Type
  9671 ;;		None
  9672 ;; Return value:  Size  Location     Type
  9673 ;;                  1    wreg      unsigned char 
  9674 ;; Registers used:
  9675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9681 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;Total ram usage:        6 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:    8
  9688 ;; This function calls:
  9689 ;;		_Timer0_Start
  9690 ;; This function is called by:
  9691 ;;		_findClosestWall
  9692 ;;		_mode1
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           	psect	text36
  9697  01626A                     __ptext36:
  9698                           	opt stack 0
  9699  01626A                     _Motor_Move:
  9700                           	opt stack 20
  9701                           
  9702                           ;Motor.c: 54: lMotor = pMotor;
  9703                           
  9704                           ;incstack = 0
  9705  01626A  C0BD  F07F         	movff	Motor_Move@pMotor,_lMotor
  9706  01626E  C0BE  F080         	movff	Motor_Move@pMotor+1,_lMotor+1
  9707                           
  9708                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9709  016272  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9710  016276  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9711  01627A  50DE               	movf	postinc2,w,c
  9712  01627C  10DE               	iorwf	postinc2,w,c
  9713  01627E  A4D8               	btfss	status,2,c
  9714  016280  0012               	return	
  9715                           
  9716                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9717                           
  9718                           ;Motor.c: 59: return 0;
  9719                           ;	Return value of _Motor_Move is never used
  9720  016282  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9721  016286  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9722  01628A  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9723  01628E  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9724                           
  9725                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9726  016292  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9727  016296  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9728  01629A  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9729  01629E  EC6F  F0B2         	call	_Timer0_Start	;wreg free
  9730  0162A2  0012               	return	
  9731  0162A4                     __end_of_Motor_Move:
  9732                           	opt stack 0
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           postinc0	equ	0xFEE
  9740                           wreg	equ	0xFE8
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function _Timer0_Start *****************
  9752 ;; Defined at:
  9753 ;;		line 75 in file "Library/Timer0.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9756 ;;		 -> Absolute function(1), Motor_Step(1), 
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      void 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9768 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;Total ram usage:        3 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    7
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_Motor_Move
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text37
  9783  0164DE                     __ptext37:
  9784                           	opt stack 0
  9785  0164DE                     _Timer0_Start:
  9786                           	opt stack 20
  9787                           
  9788                           ;Timer0.c: 77: gISR = pFunction;
  9789                           
  9790                           ;incstack = 0
  9791  0164DE  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9792  0164E2  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9793  0164E6  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9794                           
  9795                           ;Timer0.c: 78: TMR0 = COUNTER;
  9796  0164EA  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9797  0164EE  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9798                           
  9799                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9800  0164F2  50D5               	movf	4053,w,c	;volatile
  9801  0164F4  0100               	movlb	0	; () banked
  9802  0164F6  198D               	xorwf	_INDEX& (0+255),w,b
  9803  0164F8  0BF8               	andlw	-8
  9804  0164FA  198D               	xorwf	_INDEX& (0+255),w,b
  9805  0164FC  6ED5               	movwf	4053,c	;volatile
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9809  0164FE  94F2               	bcf	intcon,2,c	;volatile
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9813  016500  8AF2               	bsf	intcon,5,c	;volatile
  9814                           
  9815                           ; BSR set to: 0
  9816  016502  0012               	return		;funcret
  9817  016504                     __end_of_Timer0_Start:
  9818                           	opt stack 0
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function _HMI_Render *****************
  9839 ;; Defined at:
  9840 ;;		line 138 in file "HMI.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;		None
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;  a               2    8[BANK0 ] unsigned short 
  9845 ;; Return value:  Size  Location     Type
  9846 ;;                  1    wreg      void 
  9847 ;; Registers used:
  9848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;Total ram usage:        2 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; Hardware stack levels required when called:    9
  9861 ;; This function calls:
  9862 ;;		_OutSeg
  9863 ;; This function is called by:
  9864 ;;		_findClosestWall
  9865 ;;		_measureAndDisplayDistance
  9866 ;;		_mode1
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           	psect	text38
  9871  0160C0                     __ptext38:
  9872                           	opt stack 0
  9873  0160C0                     _HMI_Render:
  9874                           	opt stack 19
  9875                           
  9876                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;incstack = 0
  9880  0160C0  0E00               	movlw	0
  9881  0160C2  0100               	movlb	0	; () banked
  9882  0160C4  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9883  0160C6  0E00               	movlw	0
  9884  0160C8  6FC2               	movwf	HMI_Render@a& (0+255),b
  9885  0160CA                     l13923:
  9886                           
  9887                           ; BSR set to: 0
  9888  0160CA  0100               	movlb	0	; () banked
  9889  0160CC  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9890  0160CE  E116               	bnz	l1158
  9891  0160D0  0E08               	movlw	8
  9892  0160D2  0100               	movlb	0	; () banked
  9893  0160D4  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9894  0160D6  B0D8               	btfsc	status,0,c
  9895  0160D8  0012               	return	
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9899                           
  9900                           ; BSR set to: 0
  9901                           
  9902                           ; BSR set to: 0
  9903  0160DA  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9904  0160DE  0E40               	movlw	low _HMIBoard
  9905  0160E0  0100               	movlb	0	; () banked
  9906  0160E2  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9907  0160E4  6ED9               	movwf	fsr2l,c
  9908  0160E6  0E03               	movlw	high _HMIBoard
  9909  0160E8  0100               	movlb	0	; () banked
  9910  0160EA  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9911  0160EC  6EDA               	movwf	fsr2h,c
  9912  0160EE  50DF               	movf	indf2,w,c
  9913  0160F0  EC14  F0A9         	call	_OutSeg
  9914  0160F4  0100               	movlb	0	; () banked
  9915  0160F6  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9916  0160F8  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9917  0160FA  D7E7               	goto	l13923
  9918  0160FC                     l1158:
  9919                           
  9920                           ; BSR set to: 0
  9921  0160FC  0012               	return		;funcret
  9922  0160FE                     __end_of_HMI_Render:
  9923                           	opt stack 0
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           postdec1	equ	0xFE5
  9934                           fsr1h	equ	0xFE2
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _OutSeg *****************
  9944 ;; Defined at:
  9945 ;;		line 54 in file "HMI.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  pInput          1    wreg     unsigned char 
  9948 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  pInput          1    6[BANK0 ] unsigned char 
  9951 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  1    wreg      void 
  9954 ;; Registers used:
  9955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9961 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;Total ram usage:        5 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    8
  9968 ;; This function calls:
  9969 ;;		_SPI_Send
  9970 ;; This function is called by:
  9971 ;;		_HMI_Render
  9972 ;;		_HMI_GRender
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           	psect	text39
  9977  015228                     __ptext39:
  9978                           	opt stack 0
  9979  015228                     _OutSeg:
  9980                           	opt stack 19
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;incstack = 0
  9984                           ;OutSeg@pInput stored from wreg
  9985  015228  0100               	movlb	0	; () banked
  9986  01522A  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9987                           
  9988                           ;HMI.c: 58: static UINT8 cur;
  9989                           ;HMI.c: 59: volatile UINT8 out;
  9990                           ;HMI.c: 60: static UINT8 segset;
  9991                           ;HMI.c: 61: static UINT8 a;
  9992                           ;HMI.c: 83: if (pSegment <= 8)
  9993  01522C  0E09               	movlw	9
  9994  01522E  0100               	movlb	0	; () banked
  9995  015230  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9996  015232  0012               	return	
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;HMI.c: 84: {
 10000                           ;HMI.c: 85: cur = pInput;
 10001  015234  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10005  015238  0E00               	movlw	0
 10006  01523A  6E3D               	movwf	OutSeg@a,c
 10007  01523C                     l13089:
 10008                           
 10009                           ; BSR set to: 0
 10010  01523C  0E07               	movlw	7
 10011  01523E  643D               	cpfsgt	OutSeg@a,c
 10012  015240  D001               	goto	l1146
 10013  015242  D027               	goto	u9700
 10014  015244                     l1146:
 10015                           
 10016                           ;HMI.c: 87: {
 10017                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10018                           
 10019                           ; BSR set to: 0
 10020  015244  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
 10021  015248  0E01               	movlw	1
 10022  01524A  0100               	movlb	0	; () banked
 10023  01524C  17BE               	andwf	??_OutSeg& (0+255),f,b
 10024  01524E  0E06               	movlw	6
 10025  015250  0100               	movlb	0	; () banked
 10026  015252  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
 10027  015254                     u9695:
 10028  015254  0100               	movlb	0	; () banked
 10029  015256  90D8               	bcf	status,0,c
 10030  015258  37BE               	rlcf	??_OutSeg& (0+255),f,b
 10031  01525A  0100               	movlb	0	; () banked
 10032  01525C  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10033  01525E  D7FA               	goto	u9695
 10034  015260  0100               	movlb	0	; () banked
 10035  015262  51BE               	movf	??_OutSeg& (0+255),w,b
 10036  015264  6E3E               	movwf	OutSeg@segset,c
 10037                           
 10038                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10039  015266  0100               	movlb	0	; () banked
 10040  015268  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
 10041  01526A  42E8               	rrncf	wreg,f,c
 10042  01526C  0BF8               	andlw	248
 10043  01526E  103D               	iorwf	OutSeg@a,w,c
 10044  015270  103E               	iorwf	OutSeg@segset,w,c
 10045  015272  0100               	movlb	0	; () banked
 10046  015274  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
 10047                           
 10048                           ;HMI.c: 90: cur >>= 1;
 10049  015276  90D8               	bcf	status,0,c
 10050  015278  323F               	rrcf	OutSeg@cur,f,c
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10054  01527A  0E7A               	movlw	low _SPI1
 10055  01527C  0100               	movlb	0	; () banked
 10056  01527E  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 10057  015280  0E03               	movlw	high _SPI1
 10058  015282  0100               	movlb	0	; () banked
 10059  015284  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10060  015286  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10061  01528A  EC67  F0AB         	call	_SPI_Send	;wreg free
 10062  01528E  2A3D               	incf	OutSeg@a,f,c
 10063  015290  D7D5               	goto	l13089
 10064  015292                     u9700:
 10065                           
 10066                           ;HMI.c: 96: }
 10067                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10068  015292  0E7A               	movlw	low _SPI1
 10069  015294  0100               	movlb	0	; () banked
 10070  015296  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 10071  015298  0E03               	movlw	high _SPI1
 10072  01529A  0100               	movlb	0	; () banked
 10073  01529C  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10074  01529E  0E00               	movlw	0
 10075  0152A0  0100               	movlb	0	; () banked
 10076  0152A2  6FBC               	movwf	SPI_Send@pData& (0+255),b
 10077  0152A4  EC67  F0AB         	call	_SPI_Send	;wreg free
 10078  0152A8  0012               	return	
 10079  0152AA                     __end_of_OutSeg:
 10080                           	opt stack 0
 10081                           tblptru	equ	0xFF8
 10082                           tblptrh	equ	0xFF7
 10083                           tblptrl	equ	0xFF6
 10084                           tablat	equ	0xFF5
 10085                           prodh	equ	0xFF4
 10086                           prodl	equ	0xFF3
 10087                           intcon	equ	0xFF2
 10088                           postinc0	equ	0xFEE
 10089                           wreg	equ	0xFE8
 10090                           postdec1	equ	0xFE5
 10091                           fsr1h	equ	0xFE2
 10092                           fsr1l	equ	0xFE1
 10093                           indf2	equ	0xFDF
 10094                           postinc2	equ	0xFDE
 10095                           postdec2	equ	0xFDD
 10096                           fsr2h	equ	0xFDA
 10097                           fsr2l	equ	0xFD9
 10098                           status	equ	0xFD8
 10099                           
 10100 ;; *************** function _Console_Render *****************
 10101 ;; Defined at:
 10102 ;;		line 377 in file "Library/Console.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  lCursor         4   38[BANK0 ] struct Point
 10107 ;;  y               1   43[BANK0 ] unsigned char 
 10108 ;;  x               1   42[BANK0 ] unsigned char 
 10109 ;;  temp            1   37[BANK0 ] unsigned char 
 10110 ;;  Temp            2    0        unsigned short 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      void 
 10113 ;; Registers used:
 10114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10121 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;Total ram usage:        9 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:   11
 10127 ;; This function calls:
 10128 ;;		_Console_MakeField
 10129 ;;		_LCD_DrawField
 10130 ;;		_LCD_FillRectangle
 10131 ;; This function is called by:
 10132 ;;		_move_and_rotate
 10133 ;;		_findClosestWall
 10134 ;;		_mode1
 10135 ;;		_mode2
 10136 ;;		_mode4
 10137 ;;		_main
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text40
 10142  011F26                     __ptext40:
 10143                           	opt stack 0
 10144  011F26                     _Console_Render:
 10145                           	opt stack 17
 10146                           
 10147                           ;Console.c: 379: Colour Temp;
 10148                           ;Console.c: 380: if (change)
 10149                           
 10150                           ;incstack = 0
 10151  011F26  0100               	movlb	0	; () banked
 10152  011F28  51FF               	movf	_change& (0+255),w,b
 10153  011F2A  B4D8               	btfsc	status,2,c
 10154  011F2C  0012               	return	
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;Console.c: 381: {
 10158                           ;Console.c: 382: UINT8 x, y, temp;
 10159                           ;Console.c: 383: Point lCursor = {6,6};
 10160  011F2E  C3EA  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
 10161  011F32  C3EB  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10162  011F36  C3EC  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10163  011F3A  C3ED  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;Console.c: 385: if (clearall)
 10167  011F3E  0100               	movlb	0	; () banked
 10168  011F40  5190               	movf	_clearall& (0+255),w,b
 10169  011F42  B4D8               	btfsc	status,2,c
 10170  011F44  D005               	goto	l1056
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;Console.c: 386: {
 10174                           ;Console.c: 389: temp = lBufferY;
 10175  011F46  C08E  F0DF         	movff	_lBufferY,Console_Render@temp
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10179  011F4A  0E0F               	movlw	15
 10180  011F4C  0100               	movlb	0	; () banked
 10181  011F4E  6F8E               	movwf	_lBufferY& (0+255),b
 10182  011F50                     l1056:
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;Console.c: 391: }
 10186                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10187  011F50  0E00               	movlw	0
 10188  011F52  0100               	movlb	0	; () banked
 10189  011F54  6FE5               	movwf	Console_Render@y& (0+255),b
 10190  011F56  D0DF               	goto	l1057
 10191  011F58                     
 10192                           ; BSR set to: 0
 10193                           ;Console.c: 394: {
 10194                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10195                           
 10196                           ; BSR set to: 0
 10197  011F58  0100               	movlb	0	; () banked
 10198  011F5A  51E5               	movf	Console_Render@y& (0+255),w,b
 10199  011F5C  0D02               	mullw	2
 10200  011F5E  0E00               	movlw	low _lCBuffer
 10201  011F60  24F3               	addwf	prodl,w,c
 10202  011F62  6ED9               	movwf	fsr2l,c
 10203  011F64  0E03               	movlw	high _lCBuffer
 10204  011F66  20F4               	addwfc	prodh,w,c
 10205  011F68  6EDA               	movwf	fsr2h,c
 10206  011F6A  CFDE F0FD          	movff	postinc2,_gForecolour
 10207  011F6E  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10211  011F72  0E00               	movlw	0
 10212  011F74  0100               	movlb	0	; () banked
 10213  011F76  6FE4               	movwf	Console_Render@x& (0+255),b
 10214  011F78                     l14225:
 10215                           
 10216                           ; BSR set to: 0
 10217  011F78  0E13               	movlw	19
 10218  011F7A  0100               	movlb	0	; () banked
 10219  011F7C  65E4               	cpfsgt	Console_Render@x& (0+255),b
 10220  011F7E  D001               	goto	l1059
 10221  011F80  D0BE               	goto	u10980
 10222  011F82                     l1059:
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;Console.c: 397: {
 10226                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10227                           
 10228                           ; BSR set to: 0
 10229  011F82  0100               	movlb	0	; () banked
 10230  011F84  51E5               	movf	Console_Render@y& (0+255),w,b
 10231  011F86  0D14               	mullw	20
 10232  011F88  0EAC               	movlw	low _lBuffer
 10233  011F8A  0100               	movlb	0	; () banked
 10234  011F8C  6FDD               	movwf	??_Console_Render& (0+255),b
 10235  011F8E  0E04               	movlw	high _lBuffer
 10236  011F90  0100               	movlb	0	; () banked
 10237  011F92  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10238  011F94  50F3               	movf	prodl,w,c
 10239  011F96  0100               	movlb	0	; () banked
 10240  011F98  27DD               	addwf	??_Console_Render& (0+255),f,b
 10241  011F9A  50F4               	movf	prodh,w,c
 10242  011F9C  0100               	movlb	0	; () banked
 10243  011F9E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10244  011FA0  0100               	movlb	0	; () banked
 10245  011FA2  51E4               	movf	Console_Render@x& (0+255),w,b
 10246  011FA4  0D01               	mullw	1
 10247  011FA6  50F3               	movf	prodl,w,c
 10248  011FA8  0100               	movlb	0	; () banked
 10249  011FAA  25DD               	addwf	??_Console_Render& (0+255),w,b
 10250  011FAC  6ED9               	movwf	fsr2l,c
 10251  011FAE  50F4               	movf	prodh,w,c
 10252  011FB0  0100               	movlb	0	; () banked
 10253  011FB2  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10254  011FB4  6EDA               	movwf	fsr2h,c
 10255  011FB6  AEDF               	btfss	indf2,7,c
 10256  011FB8  D09A               	goto	l1063
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;Console.c: 399: {
 10260                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10261  011FBA  0100               	movlb	0	; () banked
 10262  011FBC  51E5               	movf	Console_Render@y& (0+255),w,b
 10263  011FBE  0D14               	mullw	20
 10264  011FC0  0EAC               	movlw	low _lBuffer
 10265  011FC2  0100               	movlb	0	; () banked
 10266  011FC4  6FDD               	movwf	??_Console_Render& (0+255),b
 10267  011FC6  0E04               	movlw	high _lBuffer
 10268  011FC8  0100               	movlb	0	; () banked
 10269  011FCA  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10270  011FCC  50F3               	movf	prodl,w,c
 10271  011FCE  0100               	movlb	0	; () banked
 10272  011FD0  27DD               	addwf	??_Console_Render& (0+255),f,b
 10273  011FD2  50F4               	movf	prodh,w,c
 10274  011FD4  0100               	movlb	0	; () banked
 10275  011FD6  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10276  011FD8  0100               	movlb	0	; () banked
 10277  011FDA  51E4               	movf	Console_Render@x& (0+255),w,b
 10278  011FDC  0D01               	mullw	1
 10279  011FDE  50F3               	movf	prodl,w,c
 10280  011FE0  0100               	movlb	0	; () banked
 10281  011FE2  25DD               	addwf	??_Console_Render& (0+255),w,b
 10282  011FE4  6ED9               	movwf	fsr2l,c
 10283  011FE6  50F4               	movf	prodh,w,c
 10284  011FE8  0100               	movlb	0	; () banked
 10285  011FEA  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10286  011FEC  6EDA               	movwf	fsr2h,c
 10287  011FEE  0E7F               	movlw	127
 10288  011FF0  16DF               	andwf	indf2,f,c
 10289                           
 10290                           ;Console.c: 401: if (lBuffer[y][x])
 10291  011FF2  0100               	movlb	0	; () banked
 10292  011FF4  51E5               	movf	Console_Render@y& (0+255),w,b
 10293  011FF6  0D14               	mullw	20
 10294  011FF8  0EAC               	movlw	low _lBuffer
 10295  011FFA  0100               	movlb	0	; () banked
 10296  011FFC  6FDD               	movwf	??_Console_Render& (0+255),b
 10297  011FFE  0E04               	movlw	high _lBuffer
 10298  012000  0100               	movlb	0	; () banked
 10299  012002  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10300  012004  50F3               	movf	prodl,w,c
 10301  012006  0100               	movlb	0	; () banked
 10302  012008  27DD               	addwf	??_Console_Render& (0+255),f,b
 10303  01200A  50F4               	movf	prodh,w,c
 10304  01200C  0100               	movlb	0	; () banked
 10305  01200E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10306  012010  0100               	movlb	0	; () banked
 10307  012012  51E4               	movf	Console_Render@x& (0+255),w,b
 10308  012014  0D01               	mullw	1
 10309  012016  50F3               	movf	prodl,w,c
 10310  012018  0100               	movlb	0	; () banked
 10311  01201A  25DD               	addwf	??_Console_Render& (0+255),w,b
 10312  01201C  6ED9               	movwf	fsr2l,c
 10313  01201E  50F4               	movf	prodh,w,c
 10314  012020  0100               	movlb	0	; () banked
 10315  012022  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10316  012024  6EDA               	movwf	fsr2h,c
 10317  012026  50DF               	movf	indf2,w,c
 10318  012028  B4D8               	btfsc	status,2,c
 10319  01202A  D04A               	goto	l1062
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;Console.c: 402: {
 10323                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10324  01202C  C083  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10325  012030  C084  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10326  012034  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10327  012038  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10328  01203C  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10329  012040  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10330  012044  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10331  012048  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10332  01204C  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10333  012050  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10334  012054  EC47  F0AA         	call	_LCD_FillRectangle	;wreg free
 10335                           
 10336                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10337  012058  0100               	movlb	0	; () banked
 10338  01205A  51E5               	movf	Console_Render@y& (0+255),w,b
 10339  01205C  0D14               	mullw	20
 10340  01205E  0EAC               	movlw	low _lBuffer
 10341  012060  0100               	movlb	0	; () banked
 10342  012062  6FDD               	movwf	??_Console_Render& (0+255),b
 10343  012064  0E04               	movlw	high _lBuffer
 10344  012066  0100               	movlb	0	; () banked
 10345  012068  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10346  01206A  50F3               	movf	prodl,w,c
 10347  01206C  0100               	movlb	0	; () banked
 10348  01206E  27DD               	addwf	??_Console_Render& (0+255),f,b
 10349  012070  50F4               	movf	prodh,w,c
 10350  012072  0100               	movlb	0	; () banked
 10351  012074  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10352  012076  0100               	movlb	0	; () banked
 10353  012078  51E4               	movf	Console_Render@x& (0+255),w,b
 10354  01207A  0D01               	mullw	1
 10355  01207C  50F3               	movf	prodl,w,c
 10356  01207E  0100               	movlb	0	; () banked
 10357  012080  25DD               	addwf	??_Console_Render& (0+255),w,b
 10358  012082  6ED9               	movwf	fsr2l,c
 10359  012084  50F4               	movf	prodh,w,c
 10360  012086  0100               	movlb	0	; () banked
 10361  012088  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10362  01208A  6EDA               	movwf	fsr2h,c
 10363  01208C  50DF               	movf	indf2,w,c
 10364  01208E  EC42  F0A0         	call	_Console_MakeField
 10365  012092  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
 10366  012096  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10367  01209A  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10368  01209E  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10369  0120A2  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10370  0120A6  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10371  0120AA  C3F2  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 10372  0120AE  C3F3  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10373  0120B2  C3F4  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10374  0120B6  C3F5  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10375  0120BA  ECE7  F0A5         	call	_LCD_DrawField	;wreg free
 10376                           
 10377                           ;Console.c: 405: }
 10378  0120BE  D017               	goto	l1063
 10379  0120C0                     l1062:
 10380                           
 10381                           ;Console.c: 406: else
 10382                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10383  0120C0  0E00               	movlw	0
 10384  0120C2  0100               	movlb	0	; () banked
 10385  0120C4  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10386  0120C6  0E00               	movlw	0
 10387  0120C8  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10388  0120CA  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10389  0120CE  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10390  0120D2  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10391  0120D6  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10392  0120DA  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10393  0120DE  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10394  0120E2  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10395  0120E6  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10396  0120EA  EC47  F0AA         	call	_LCD_FillRectangle	;wreg free
 10397  0120EE                     l1063:
 10398                           
 10399                           ;Console.c: 408: }
 10400                           ;Console.c: 409: lCursor.x += (5 + 1);
 10401  0120EE  0E06               	movlw	6
 10402  0120F0  0100               	movlb	0	; () banked
 10403  0120F2  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 10404  0120F4  0E00               	movlw	0
 10405  0120F6  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10406                           
 10407                           ; BSR set to: 0
 10408  0120F8  0100               	movlb	0	; () banked
 10409  0120FA  2BE4               	incf	Console_Render@x& (0+255),f,b
 10410  0120FC  D73D               	goto	l14225
 10411  0120FE                     u10980:
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;Console.c: 410: }
 10415                           ;Console.c: 411: lCursor.y += (7 + 1);
 10416                           
 10417                           ; BSR set to: 0
 10418  0120FE  0E08               	movlw	8
 10419  012100  0100               	movlb	0	; () banked
 10420  012102  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10421  012104  0E00               	movlw	0
 10422  012106  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;Console.c: 412: lCursor.x = 6;
 10426  012108  0E00               	movlw	0
 10427  01210A  0100               	movlb	0	; () banked
 10428  01210C  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10429  01210E  0E06               	movlw	6
 10430  012110  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 10431                           
 10432                           ; BSR set to: 0
 10433  012112  0100               	movlb	0	; () banked
 10434  012114  2BE5               	incf	Console_Render@y& (0+255),f,b
 10435  012116                     l1057:
 10436                           
 10437                           ; BSR set to: 0
 10438                           
 10439                           ; BSR set to: 0
 10440  012116  0100               	movlb	0	; () banked
 10441  012118  51E5               	movf	Console_Render@y& (0+255),w,b
 10442  01211A  0100               	movlb	0	; () banked
 10443  01211C  5D8E               	subwf	_lBufferY& (0+255),w,b
 10444  01211E  B0D8               	btfsc	status,0,c
 10445  012120  D71B               	goto	l1058
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;Console.c: 413: }
 10449                           ;Console.c: 415: if (clearall)
 10450                           
 10451                           ; BSR set to: 0
 10452  012122  0100               	movlb	0	; () banked
 10453  012124  5190               	movf	_clearall& (0+255),w,b
 10454  012126  B4D8               	btfsc	status,2,c
 10455  012128  0012               	return	
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;Console.c: 416: {
 10459                           ;Console.c: 417: clearall = 0;
 10460  01212A  0E00               	movlw	0
 10461  01212C  0100               	movlb	0	; () banked
 10462  01212E  6F90               	movwf	_clearall& (0+255),b
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;Console.c: 418: lBufferY = temp;
 10466  012130  C0DF  F08E         	movff	Console_Render@temp,_lBufferY
 10467                           
 10468                           ; BSR set to: 0
 10469  012134  0012               	return	
 10470  012136                     __end_of_Console_Render:
 10471                           	opt stack 0
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           intcon	equ	0xFF2
 10479                           postinc0	equ	0xFEE
 10480                           wreg	equ	0xFE8
 10481                           postdec1	equ	0xFE5
 10482                           fsr1h	equ	0xFE2
 10483                           fsr1l	equ	0xFE1
 10484                           indf2	equ	0xFDF
 10485                           postinc2	equ	0xFDE
 10486                           postdec2	equ	0xFDD
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function _LCD_FillRectangle *****************
 10492 ;; Defined at:
 10493 ;;		line 318 in file "Library/LCD.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;  pColour         2    9[BANK0 ] unsigned short 
 10496 ;;  pPoint          4   11[BANK0 ] struct Point
 10497 ;;  pSize           4   15[BANK0 ] struct Point
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  j               1   22[BANK0 ] unsigned char 
 10500 ;;  i               1   21[BANK0 ] unsigned char 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:       14 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:   10
 10517 ;; This function calls:
 10518 ;;		_LCD_Word_Write
 10519 ;;		_Set_Addr_Window
 10520 ;; This function is called by:
 10521 ;;		_Console_Render
 10522 ;;		_Console_ClearLine
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text41
 10527  01548E                     __ptext41:
 10528                           	opt stack 0
 10529  01548E                     _LCD_FillRectangle:
 10530                           	opt stack 17
 10531                           
 10532                           ;LCD.c: 320: UINT8 i = 0x00;
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;incstack = 0
 10536  01548E  0E00               	movlw	0
 10537  015490  0100               	movlb	0	; () banked
 10538  015492  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10539                           
 10540                           ;LCD.c: 321: UINT8 j = 0x00;
 10541  015494  0E00               	movlw	0
 10542  015496  0100               	movlb	0	; () banked
 10543  015498  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10547  01549A  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10548  01549E  0100               	movlb	0	; () banked
 10549  0154A0  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10550  0154A2  0100               	movlb	0	; () banked
 10551  0154A4  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10552  0154A6  0100               	movlb	0	; () banked
 10553  0154A8  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10554  0154AA  0100               	movlb	0	; () banked
 10555  0154AC  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10556  0154AE  0100               	movlb	0	; () banked
 10557  0154B0  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10558  0154B2  0100               	movlb	0	; () banked
 10559  0154B4  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10560  0154B6  0100               	movlb	0	; () banked
 10561  0154B8  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10562  0154BA  0100               	movlb	0	; () banked
 10563  0154BC  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10564  0154BE  0100               	movlb	0	; () banked
 10565  0154C0  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10566  0154C2  0100               	movlb	0	; () banked
 10567  0154C4  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10568  0154C6  0100               	movlb	0	; () banked
 10569  0154C8  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10570  0154CA  ECF1  F0A3         	call	_Set_Addr_Window
 10571                           
 10572                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10573  0154CE  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10574  0154D2                     l13663:
 10575  0154D2  0100               	movlb	0	; () banked
 10576  0154D4  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10577  0154D6  0100               	movlb	0	; () banked
 10578  0154D8  B4D8               	btfsc	status,2,c
 10579  0154DA  0012               	return	
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10583                           
 10584                           ; BSR set to: 0
 10585  0154DC  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10586  0154E0                     l13667:
 10587                           
 10588                           ; BSR set to: 0
 10589  0154E0  0100               	movlb	0	; () banked
 10590  0154E2  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10591  0154E4  0100               	movlb	0	; () banked
 10592  0154E6  B4D8               	btfsc	status,2,c
 10593  0154E8  D009               	goto	u10420
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10597                           
 10598                           ; BSR set to: 0
 10599                           
 10600                           ; BSR set to: 0
 10601  0154EA  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10602  0154EE  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10603  0154F2  ECE3  F0B2         	call	_LCD_Word_Write	;wreg free
 10604  0154F6  0100               	movlb	0	; () banked
 10605  0154F8  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10606  0154FA  D7F2               	goto	l13667
 10607  0154FC                     u10420:
 10608                           
 10609                           ; BSR set to: 0
 10610                           
 10611                           ; BSR set to: 0
 10612  0154FC  0100               	movlb	0	; () banked
 10613  0154FE  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10614  015500  D7E8               	goto	l13663
 10615  015502                     __end_of_LCD_FillRectangle:
 10616                           	opt stack 0
 10617                           tblptru	equ	0xFF8
 10618                           tblptrh	equ	0xFF7
 10619                           tblptrl	equ	0xFF6
 10620                           tablat	equ	0xFF5
 10621                           prodh	equ	0xFF4
 10622                           prodl	equ	0xFF3
 10623                           intcon	equ	0xFF2
 10624                           postinc0	equ	0xFEE
 10625                           wreg	equ	0xFE8
 10626                           postdec1	equ	0xFE5
 10627                           fsr1h	equ	0xFE2
 10628                           fsr1l	equ	0xFE1
 10629                           indf2	equ	0xFDF
 10630                           postinc2	equ	0xFDE
 10631                           postdec2	equ	0xFDD
 10632                           fsr2h	equ	0xFDA
 10633                           fsr2l	equ	0xFD9
 10634                           status	equ	0xFD8
 10635                           
 10636 ;; *************** function _LCD_DrawField *****************
 10637 ;; Defined at:
 10638 ;;		line 393 in file "Library/LCD.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10641 ;;		 -> Console_MakeField@Fill(70), 
 10642 ;;  pPoint          4   20[BANK0 ] struct Point
 10643 ;;  pSize           4   24[BANK0 ] struct Point
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  count           2   30[BANK0 ] unsigned short 
 10646 ;;  i               1   34[BANK0 ] unsigned char 
 10647 ;;  ymax            1   33[BANK0 ] unsigned char 
 10648 ;;  xmax            1   32[BANK0 ] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10658 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;Total ram usage:       17 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:   10
 10665 ;; This function calls:
 10666 ;;		_LCD_Word_Write
 10667 ;;		_Set_Addr_Window
 10668 ;;		___wmul
 10669 ;; This function is called by:
 10670 ;;		_Console_Render
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text42
 10675  014BCE                     __ptext42:
 10676                           	opt stack 0
 10677  014BCE                     _LCD_DrawField:
 10678                           	opt stack 17
 10679                           
 10680                           ;LCD.c: 396: UINT8 i = 0x00;
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;incstack = 0
 10684  014BCE  0E00               	movlw	0
 10685  014BD0  0100               	movlb	0	; () banked
 10686  014BD2  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10690  014BD4  0100               	movlb	0	; () banked
 10691  014BD6  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10692  014BD8  0100               	movlb	0	; () banked
 10693  014BDA  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10694  014BDC  0100               	movlb	0	; () banked
 10695  014BDE  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10699  014BE0  0100               	movlb	0	; () banked
 10700  014BE2  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10701  014BE4  0100               	movlb	0	; () banked
 10702  014BE6  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10703  014BE8  0100               	movlb	0	; () banked
 10704  014BEA  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10708  014BEC  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10709  014BF0  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10710  014BF4  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10711  014BF8  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10712  014BFC  EC52  F0B1         	call	___wmul	;wreg free
 10713  014C00  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10714  014C04  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10715                           
 10716                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10717  014C08  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10718  014C0C  0100               	movlb	0	; () banked
 10719  014C0E  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10720  014C10  0100               	movlb	0	; () banked
 10721  014C12  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10722  014C14  0100               	movlb	0	; () banked
 10723  014C16  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10724  014C18  0100               	movlb	0	; () banked
 10725  014C1A  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10726  014C1C  0100               	movlb	0	; () banked
 10727  014C1E  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10728  014C20  ECF1  F0A3         	call	_Set_Addr_Window
 10729                           
 10730                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10731  014C24  0E00               	movlw	0
 10732  014C26  0100               	movlb	0	; () banked
 10733  014C28  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10734  014C2A  D013               	goto	l183
 10735  014C2C                     
 10736                           ; BSR set to: 0
 10737                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10738                           
 10739                           ; BSR set to: 0
 10740  014C2C  0100               	movlb	0	; () banked
 10741  014C2E  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10742  014C30  0D02               	mullw	2
 10743  014C32  50F3               	movf	prodl,w,c
 10744  014C34  0100               	movlb	0	; () banked
 10745  014C36  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10746  014C38  6ED9               	movwf	fsr2l,c
 10747  014C3A  50F4               	movf	prodh,w,c
 10748  014C3C  0100               	movlb	0	; () banked
 10749  014C3E  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10750  014C40  6EDA               	movwf	fsr2h,c
 10751  014C42  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10752  014C46  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10753  014C4A  ECE3  F0B2         	call	_LCD_Word_Write	;wreg free
 10754  014C4E  0100               	movlb	0	; () banked
 10755  014C50  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10756  014C52                     l183:
 10757                           
 10758                           ; BSR set to: 0
 10759                           
 10760                           ; BSR set to: 0
 10761  014C52  0100               	movlb	0	; () banked
 10762  014C54  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10763  014C56  0100               	movlb	0	; () banked
 10764  014C58  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10765  014C5A  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10766  014C5C  0100               	movlb	0	; () banked
 10767  014C5E  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10768  014C60  0100               	movlb	0	; () banked
 10769  014C62  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10770  014C64  0100               	movlb	0	; () banked
 10771  014C66  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10772  014C68  0100               	movlb	0	; () banked
 10773  014C6A  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10774  014C6C  B0D8               	btfsc	status,0,c
 10775  014C6E  0012               	return	
 10776  014C70  D7DD               	goto	l184
 10777  014C72                     __end_of_LCD_DrawField:
 10778                           	opt stack 0
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           postinc0	equ	0xFEE
 10787                           wreg	equ	0xFE8
 10788                           postdec1	equ	0xFE5
 10789                           fsr1h	equ	0xFE2
 10790                           fsr1l	equ	0xFE1
 10791                           indf2	equ	0xFDF
 10792                           postinc2	equ	0xFDE
 10793                           postdec2	equ	0xFDD
 10794                           fsr2h	equ	0xFDA
 10795                           fsr2l	equ	0xFD9
 10796                           status	equ	0xFD8
 10797                           
 10798 ;; *************** function ___wmul *****************
 10799 ;; Defined at:
 10800 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10803 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;  product         2    4[BANK0 ] unsigned int 
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  2    0[BANK0 ] unsigned int 
 10808 ;; Registers used:
 10809 ;;		wreg, status,2, status,0, prodl, prodh
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;Total ram usage:        6 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    7
 10822 ;; This function calls:
 10823 ;;		Nothing
 10824 ;; This function is called by:
 10825 ;;		_LCD_DrawField
 10826 ;;		_move_and_rotate
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           	psect	text43
 10831  0162A4                     __ptext43:
 10832                           	opt stack 0
 10833  0162A4                     ___wmul:
 10834                           	opt stack 19
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;incstack = 0
 10838  0162A4  0100               	movlb	0	; () banked
 10839  0162A6  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10840  0162A8  0100               	movlb	0	; () banked
 10841  0162AA  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10842  0162AC  CFF3 F0BE          	movff	prodl,___wmul@product
 10843  0162B0  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10844  0162B4  0100               	movlb	0	; () banked
 10845  0162B6  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10846  0162B8  0100               	movlb	0	; () banked
 10847  0162BA  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10848  0162BC  50F3               	movf	prodl,w,c
 10849  0162BE  0100               	movlb	0	; () banked
 10850  0162C0  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10851  0162C2  0100               	movlb	0	; () banked
 10852  0162C4  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10853  0162C6  0100               	movlb	0	; () banked
 10854  0162C8  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10855  0162CA  50F3               	movf	prodl,w,c
 10856  0162CC  0100               	movlb	0	; () banked
 10857  0162CE  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10858                           
 10859                           ; BSR set to: 0
 10860  0162D0  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10861  0162D4  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10862  0162D8  0012               	return	
 10863  0162DA                     __end_of___wmul:
 10864                           	opt stack 0
 10865                           tblptru	equ	0xFF8
 10866                           tblptrh	equ	0xFF7
 10867                           tblptrl	equ	0xFF6
 10868                           tablat	equ	0xFF5
 10869                           prodh	equ	0xFF4
 10870                           prodl	equ	0xFF3
 10871                           intcon	equ	0xFF2
 10872                           postinc0	equ	0xFEE
 10873                           wreg	equ	0xFE8
 10874                           postdec1	equ	0xFE5
 10875                           fsr1h	equ	0xFE2
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           postdec2	equ	0xFDD
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _Console_MakeField *****************
 10885 ;; Defined at:
 10886 ;;		line 435 in file "Library/Console.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;  pInput          1    wreg     unsigned char 
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;  pInput          1   11[BANK0 ] unsigned char 
 10891 ;;  y               1   17[BANK0 ] unsigned char 
 10892 ;;  x               1   16[BANK0 ] unsigned char 
 10893 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10894 ;;		 -> Font5x7(480), 
 10895 ;;  Index           2    9[BANK0 ] unsigned short 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  2    5[BANK0 ] PTR unsigned short 
 10898 ;; Registers used:
 10899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;Total ram usage:       13 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    8
 10912 ;; This function calls:
 10913 ;;		_Byte_GetBit
 10914 ;; This function is called by:
 10915 ;;		_Console_Render
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           	psect	text44
 10920  014084                     __ptext44:
 10921                           	opt stack 0
 10922  014084                     _Console_MakeField:
 10923                           	opt stack 19
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;incstack = 0
 10927                           ;Console_MakeField@pInput stored from wreg
 10928  014084  0100               	movlb	0	; () banked
 10929  014086  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10930                           
 10931                           ;Console.c: 437: static Colour Fill[7][5];
 10932                           ;Console.c: 438: pInput -= 32;
 10933  014088  0E20               	movlw	32
 10934  01408A  0100               	movlb	0	; () banked
 10935  01408C  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10939  01408E  0100               	movlb	0	; () banked
 10940  014090  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10941  014092  0D05               	mullw	5
 10942  014094  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10943  014098  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10947  01409C  0E1F               	movlw	low _Font5x7
 10948  01409E  0100               	movlb	0	; () banked
 10949  0140A0  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10950  0140A2  0100               	movlb	0	; () banked
 10951  0140A4  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10952  0140A6  0EFD               	movlw	high _Font5x7
 10953  0140A8  0100               	movlb	0	; () banked
 10954  0140AA  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10955  0140AC  0100               	movlb	0	; () banked
 10956  0140AE  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10960  0140B0  0E00               	movlw	0
 10961  0140B2  0100               	movlb	0	; () banked
 10962  0140B4  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10963  0140B6                     l13889:
 10964                           
 10965                           ; BSR set to: 0
 10966  0140B6  0E04               	movlw	4
 10967  0140B8  0100               	movlb	0	; () banked
 10968  0140BA  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10969  0140BC  D001               	goto	l1077
 10970  0140BE  D043               	goto	u10610
 10971  0140C0                     l1077:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Console.c: 444: {
 10975                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10976                           
 10977                           ; BSR set to: 0
 10978  0140C0  0E00               	movlw	0
 10979  0140C2  0100               	movlb	0	; () banked
 10980  0140C4  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10981  0140C6                     l13895:
 10982                           
 10983                           ; BSR set to: 0
 10984  0140C6  0E06               	movlw	6
 10985  0140C8  0100               	movlb	0	; () banked
 10986  0140CA  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10987  0140CC  D001               	goto	l1079
 10988  0140CE  D035               	goto	u10600
 10989  0140D0                     l1079:
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10993                           
 10994                           ; BSR set to: 0
 10995  0140D0  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10996  0140D4  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10997  0140D8  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10998  0140DC  EC88  F0B1         	call	_Byte_GetBit	;wreg free
 10999  0140E0  0900               	iorlw	0
 11000  0140E2  A4D8               	btfss	status,2,c
 11001  0140E4  D005               	goto	l1082
 11002  0140E6  C083  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 11003  0140EA  C084  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11004  0140EE  D004               	goto	l1084
 11005  0140F0                     l1082:
 11006  0140F0  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 11007  0140F4  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11008  0140F8                     l1084:
 11009  0140F8  0100               	movlb	0	; () banked
 11010  0140FA  51CB               	movf	Console_MakeField@y& (0+255),w,b
 11011  0140FC  0D0A               	mullw	10
 11012  0140FE  0E64               	movlw	low Console_MakeField@Fill
 11013  014100  0100               	movlb	0	; () banked
 11014  014102  6FC1               	movwf	??_Console_MakeField& (0+255),b
 11015  014104  0E04               	movlw	high Console_MakeField@Fill
 11016  014106  0100               	movlb	0	; () banked
 11017  014108  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 11018  01410A  50F3               	movf	prodl,w,c
 11019  01410C  0100               	movlb	0	; () banked
 11020  01410E  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 11021  014110  50F4               	movf	prodh,w,c
 11022  014112  0100               	movlb	0	; () banked
 11023  014114  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11024  014116  0100               	movlb	0	; () banked
 11025  014118  51CA               	movf	Console_MakeField@x& (0+255),w,b
 11026  01411A  0D02               	mullw	2
 11027  01411C  50F3               	movf	prodl,w,c
 11028  01411E  0100               	movlb	0	; () banked
 11029  014120  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 11030  014122  6ED9               	movwf	fsr2l,c
 11031  014124  50F4               	movf	prodh,w,c
 11032  014126  0100               	movlb	0	; () banked
 11033  014128  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11034  01412A  6EDA               	movwf	fsr2h,c
 11035  01412C  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 11036  014130  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11037                           
 11038                           ; BSR set to: 0
 11039  014134  0100               	movlb	0	; () banked
 11040  014136  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 11041  014138  D7C6               	goto	l13895
 11042  01413A                     u10600:
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;Console.c: 447: Column += 1;
 11046                           
 11047                           ; BSR set to: 0
 11048  01413A  0100               	movlb	0	; () banked
 11049  01413C  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 11050  01413E  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11051  014140  0100               	movlb	0	; () banked
 11052  014142  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 11053  014144  D7B8               	goto	l13889
 11054  014146                     u10610:
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;Console.c: 448: }
 11058                           ;Console.c: 449: return (ColourPtr)Fill;
 11059                           
 11060                           ; BSR set to: 0
 11061  014146  0E64               	movlw	low Console_MakeField@Fill
 11062  014148  0100               	movlb	0	; () banked
 11063  01414A  6FBF               	movwf	?_Console_MakeField& (0+255),b
 11064  01414C  0E04               	movlw	high Console_MakeField@Fill
 11065  01414E  0100               	movlb	0	; () banked
 11066  014150  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 11067  014152  0012               	return	
 11068  014154                     __end_of_Console_MakeField:
 11069                           	opt stack 0
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           postinc0	equ	0xFEE
 11078                           wreg	equ	0xFE8
 11079                           postdec1	equ	0xFE5
 11080                           fsr1h	equ	0xFE2
 11081                           fsr1l	equ	0xFE1
 11082                           indf2	equ	0xFDF
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           fsr2h	equ	0xFDA
 11086                           fsr2l	equ	0xFD9
 11087                           status	equ	0xFD8
 11088                           
 11089 ;; *************** function _Byte_GetBit *****************
 11090 ;; Defined at:
 11091 ;;		line 38 in file "Library/Types.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11094 ;;		 -> Font5x7(480), 
 11095 ;;  pBit            1    2[BANK0 ] unsigned char 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  Output          1    4[BANK0 ] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      unsigned char 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;Total ram usage:        5 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    7
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_Console_MakeField
 11118 ;;		_Word_GetBit
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           	psect	text45
 11123  016310                     __ptext45:
 11124                           	opt stack 0
 11125  016310                     _Byte_GetBit:
 11126                           	opt stack 19
 11127                           
 11128                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;incstack = 0
 11132  016310  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11133  016314  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11134  016318                     	if	0	;tblptru may be non-zero
 11135  016318                     	endif
 11136  016318                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11137  016318  0E00               	movlw	low (__mediumconst shr (0+16))
 11138  01631A  6EF8               	movwf	tblptru,c
 11139  01631C                     	endif
 11140  01631C  0008               	tblrd		*
 11141  01631E  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 11142                           
 11143                           ;Types.c: 42: Output >>= pBit;
 11144  016322  0100               	movlb	0	; () banked
 11145  016324  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 11146  016326  0100               	movlb	0	; () banked
 11147  016328  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 11148  01632A  D003               	goto	u9630
 11149  01632C                     u9635:
 11150  01632C  0100               	movlb	0	; () banked
 11151  01632E  90D8               	bcf	status,0,c
 11152  016330  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11153  016332                     u9630:
 11154  016332  0100               	movlb	0	; () banked
 11155  016334  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 11156  016336  D7FA               	goto	u9635
 11157                           
 11158                           ;Types.c: 43: Output &= 1;
 11159  016338  0E01               	movlw	1
 11160  01633A  0100               	movlb	0	; () banked
 11161  01633C  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;Types.c: 44: return Output;
 11165  01633E  0100               	movlb	0	; () banked
 11166  016340  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 11167  016342  0012               	return	
 11168  016344                     __end_of_Byte_GetBit:
 11169                           	opt stack 0
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           postdec1	equ	0xFE5
 11180                           fsr1h	equ	0xFE2
 11181                           fsr1l	equ	0xFE1
 11182                           indf2	equ	0xFDF
 11183                           postinc2	equ	0xFDE
 11184                           postdec2	equ	0xFDD
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _ADC_Voltage *****************
 11190 ;; Defined at:
 11191 ;;		line 259 in file "Library/ADC.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 11194 ;;		 -> ADC_AN0(5), 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;  output          4   53[BANK0 ] float 
 11197 ;;  ref             4   49[BANK0 ] const float 
 11198 ;;  max             4   45[BANK0 ] const float 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  4   39[BANK0 ] float 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11208 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;Total ram usage:       18 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    8
 11215 ;; This function calls:
 11216 ;;		___fldiv
 11217 ;;		___flmul
 11218 ;;		___xxtofl
 11219 ;; This function is called by:
 11220 ;;		_findClosestWall
 11221 ;;		_measureAndDisplayDistance
 11222 ;;		_mode1
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text46
 11227  013C58                     __ptext46:
 11228                           	opt stack 0
 11229  013C58                     _ADC_Voltage:
 11230                           	opt stack 20
 11231                           
 11232                           ;ADC.c: 261: const float max = 1024;
 11233                           
 11234                           ; BSR set to: 0
 11235                           ;incstack = 0
 11236  013C58  0E00               	movlw	0
 11237  013C5A  0100               	movlb	0	; () banked
 11238  013C5C  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 11239  013C5E  0E00               	movlw	0
 11240  013C60  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 11241  013C62  0E80               	movlw	128
 11242  013C64  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 11243  013C66  0E44               	movlw	68
 11244  013C68  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 11245                           
 11246                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 11247  013C6A  0E33               	movlw	51
 11248  013C6C  0100               	movlb	0	; () banked
 11249  013C6E  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 11250  013C70  0E33               	movlw	51
 11251  013C72  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 11252  013C74  0E53               	movlw	83
 11253  013C76  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 11254  013C78  0E40               	movlw	64
 11255  013C7A  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;ADC.c: 263: float output = pInput->mValue;
 11259  013C7C  0100               	movlb	0	; () banked
 11260  013C7E  EE20 F001          	lfsr	2,1
 11261  013C82  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 11262  013C84  26D9               	addwf	fsr2l,f,c
 11263  013C86  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 11264  013C88  22DA               	addwfc	fsr2h,f,c
 11265  013C8A  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 11266  013C8E  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 11267  013C92  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 11268  013C96  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 11269  013C9A  0100               	movlb	0	; () banked
 11270  013C9C  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 11271  013C9E  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 11272  013CA0  0E00               	movlw	0
 11273  013CA2  EC98  F091         	call	___xxtofl
 11274  013CA6  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 11275  013CAA  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 11276  013CAE  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 11277  013CB2  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 11278                           
 11279                           ;ADC.c: 265: output /= max;
 11280  013CB6  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 11281  013CBA  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 11282  013CBE  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 11283  013CC2  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 11284  013CC6  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 11285  013CCA  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 11286  013CCE  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 11287  013CD2  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 11288  013CD6  EC54  F088         	call	___fldiv	;wreg free
 11289  013CDA  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 11290  013CDE  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 11291  013CE2  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 11292  013CE6  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 11293                           
 11294                           ;ADC.c: 266: output *= ref;
 11295  013CEA  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 11296  013CEE  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 11297  013CF2  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 11298  013CF6  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 11299  013CFA  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 11300  013CFE  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 11301  013D02  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 11302  013D06  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 11303  013D0A  EC00  F080         	call	___flmul	;wreg free
 11304  013D0E  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 11305  013D12  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 11306  013D16  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 11307  013D1A  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 11308                           
 11309                           ;ADC.c: 268: return output + (float)0.000;
 11310  013D1E  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 11311  013D22  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 11312  013D26  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 11313  013D2A  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 11314  013D2E  0012               	return	
 11315  013D30                     __end_of_ADC_Voltage:
 11316                           	opt stack 0
 11317                           tblptru	equ	0xFF8
 11318                           tblptrh	equ	0xFF7
 11319                           tblptrl	equ	0xFF6
 11320                           tablat	equ	0xFF5
 11321                           prodh	equ	0xFF4
 11322                           prodl	equ	0xFF3
 11323                           intcon	equ	0xFF2
 11324                           postinc0	equ	0xFEE
 11325                           wreg	equ	0xFE8
 11326                           postdec1	equ	0xFE5
 11327                           fsr1h	equ	0xFE2
 11328                           fsr1l	equ	0xFE1
 11329                           indf2	equ	0xFDF
 11330                           postinc2	equ	0xFDE
 11331                           postdec2	equ	0xFDD
 11332                           fsr2h	equ	0xFDA
 11333                           fsr2l	equ	0xFD9
 11334                           status	equ	0xFD8
 11335                           
 11336 ;; *************** function ___xxtofl *****************
 11337 ;; Defined at:
 11338 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;  sign            1    wreg     unsigned char 
 11341 ;;  val             4    0[BANK0 ] long 
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;  sign            1    8[BANK0 ] unsigned char 
 11344 ;;  arg             4   10[BANK0 ] unsigned long 
 11345 ;;  exp             1    9[BANK0 ] unsigned char 
 11346 ;; Return value:  Size  Location     Type
 11347 ;;                  4    0[BANK0 ] unsigned char 
 11348 ;; Registers used:
 11349 ;;		wreg, status,2, status,0
 11350 ;; Tracked objects:
 11351 ;;		On entry : 0/0
 11352 ;;		On exit  : 0/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11355 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11356 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;Total ram usage:       14 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; Hardware stack levels required when called:    7
 11362 ;; This function calls:
 11363 ;;		Nothing
 11364 ;; This function is called by:
 11365 ;;		_ADC_Voltage
 11366 ;;		_findClosestWall
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text47
 11371  012330                     __ptext47:
 11372                           	opt stack 0
 11373  012330                     ___xxtofl:
 11374                           	opt stack 21
 11375                           
 11376                           ;incstack = 0
 11377                           ;___xxtofl@sign stored from wreg
 11378  012330  0100               	movlb	0	; () banked
 11379  012332  6FC2               	movwf	___xxtofl@sign& (0+255),b
 11380  012334  0100               	movlb	0	; () banked
 11381  012336  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11382  012338  0100               	movlb	0	; () banked
 11383  01233A  B4D8               	btfsc	status,2,c
 11384  01233C  D01E               	goto	l3015
 11385                           
 11386                           ; BSR set to: 0
 11387  01233E  0100               	movlb	0	; () banked
 11388  012340  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11389  012342  D01B               	goto	l3015
 11390                           
 11391                           ; BSR set to: 0
 11392  012344  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 11393  012348  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 11394  01234C  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 11395  012350  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 11396  012354  0100               	movlb	0	; () banked
 11397  012356  1FBE               	comf	??___xxtofl& (0+255),f,b
 11398  012358  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 11399  01235A  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 11400  01235C  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 11401  01235E  2BBE               	incf	??___xxtofl& (0+255),f,b
 11402  012360  0E00               	movlw	0
 11403  012362  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 11404  012364  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 11405  012366  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 11406  012368  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 11407  01236C  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 11408  012370  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 11409  012374  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 11410  012378  D008               	goto	l3016
 11411  01237A                     l3015:
 11412                           
 11413                           ; BSR set to: 0
 11414  01237A  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 11415  01237E  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 11416  012382  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 11417  012386  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 11418  01238A                     l3016:
 11419                           
 11420                           ; BSR set to: 0
 11421                           
 11422                           ; BSR set to: 0
 11423  01238A  0100               	movlb	0	; () banked
 11424  01238C  51BA               	movf	___xxtofl@val& (0+255),w,b
 11425  01238E  0100               	movlb	0	; () banked
 11426  012390  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 11427  012392  0100               	movlb	0	; () banked
 11428  012394  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 11429  012396  0100               	movlb	0	; () banked
 11430  012398  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 11431  01239A  A4D8               	btfss	status,2,c
 11432  01239C  D00A               	goto	l3017
 11433                           
 11434                           ; BSR set to: 0
 11435  01239E  0E00               	movlw	0
 11436  0123A0  0100               	movlb	0	; () banked
 11437  0123A2  6FBA               	movwf	?___xxtofl& (0+255),b
 11438  0123A4  0E00               	movlw	0
 11439  0123A6  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 11440  0123A8  0E00               	movlw	0
 11441  0123AA  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 11442  0123AC  0E00               	movlw	0
 11443  0123AE  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 11444                           
 11445                           ; BSR set to: 0
 11446  0123B0  0012               	return	
 11447  0123B2                     l3017:
 11448                           
 11449                           ; BSR set to: 0
 11450                           
 11451                           ; BSR set to: 0
 11452  0123B2  0E96               	movlw	150
 11453  0123B4  0100               	movlb	0	; () banked
 11454  0123B6  6FC3               	movwf	___xxtofl@exp& (0+255),b
 11455  0123B8  D008               	goto	l3019
 11456  0123BA                     
 11457                           ; BSR set to: 0
 11458                           
 11459                           ; BSR set to: 0
 11460  0123BA  0100               	movlb	0	; () banked
 11461  0123BC  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11462  0123BE  0100               	movlb	0	; () banked
 11463  0123C0  90D8               	bcf	status,0,c
 11464  0123C2  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11465  0123C4  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11466  0123C6  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11467  0123C8  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11468  0123CA                     l3019:
 11469                           
 11470                           ; BSR set to: 0
 11471                           
 11472                           ; BSR set to: 0
 11473  0123CA  0E00               	movlw	0
 11474  0123CC  0100               	movlb	0	; () banked
 11475  0123CE  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11476  0123D0  0100               	movlb	0	; () banked
 11477  0123D2  6FBE               	movwf	??___xxtofl& (0+255),b
 11478  0123D4  0E00               	movlw	0
 11479  0123D6  0100               	movlb	0	; () banked
 11480  0123D8  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11481  0123DA  0100               	movlb	0	; () banked
 11482  0123DC  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11483  0123DE  0E00               	movlw	0
 11484  0123E0  0100               	movlb	0	; () banked
 11485  0123E2  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11486  0123E4  0100               	movlb	0	; () banked
 11487  0123E6  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11488  0123E8  0EFE               	movlw	254
 11489  0123EA  0100               	movlb	0	; () banked
 11490  0123EC  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11491  0123EE  0100               	movlb	0	; () banked
 11492  0123F0  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11493  0123F2  0100               	movlb	0	; () banked
 11494  0123F4  51BE               	movf	??___xxtofl& (0+255),w,b
 11495  0123F6  0100               	movlb	0	; () banked
 11496  0123F8  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11497  0123FA  0100               	movlb	0	; () banked
 11498  0123FC  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11499  0123FE  0100               	movlb	0	; () banked
 11500  012400  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11501  012402  B4D8               	btfsc	status,2,c
 11502  012404  D010               	goto	l3022
 11503  012406  D7D9               	goto	l3020
 11504  012408                     
 11505                           ; BSR set to: 0
 11506                           
 11507                           ; BSR set to: 0
 11508  012408  0100               	movlb	0	; () banked
 11509  01240A  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11510                           
 11511                           ; BSR set to: 0
 11512  01240C  0E01               	movlw	1
 11513  01240E  0100               	movlb	0	; () banked
 11514  012410  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11515  012412  0E00               	movlw	0
 11516  012414  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11517  012416  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11518  012418  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11519                           
 11520                           ; BSR set to: 0
 11521  01241A  0100               	movlb	0	; () banked
 11522  01241C  90D8               	bcf	status,0,c
 11523  01241E  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11524  012420  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11525  012422  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11526  012424  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11527  012426                     l3022:
 11528                           
 11529                           ; BSR set to: 0
 11530  012426  0E00               	movlw	0
 11531  012428  0100               	movlb	0	; () banked
 11532  01242A  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11533  01242C  0100               	movlb	0	; () banked
 11534  01242E  6FBE               	movwf	??___xxtofl& (0+255),b
 11535  012430  0E00               	movlw	0
 11536  012432  0100               	movlb	0	; () banked
 11537  012434  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11538  012436  0100               	movlb	0	; () banked
 11539  012438  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11540  01243A  0E00               	movlw	0
 11541  01243C  0100               	movlb	0	; () banked
 11542  01243E  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11543  012440  0100               	movlb	0	; () banked
 11544  012442  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11545  012444  0EFF               	movlw	255
 11546  012446  0100               	movlb	0	; () banked
 11547  012448  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11548  01244A  0100               	movlb	0	; () banked
 11549  01244C  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11550  01244E  0100               	movlb	0	; () banked
 11551  012450  51BE               	movf	??___xxtofl& (0+255),w,b
 11552  012452  0100               	movlb	0	; () banked
 11553  012454  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11554  012456  0100               	movlb	0	; () banked
 11555  012458  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11556  01245A  0100               	movlb	0	; () banked
 11557  01245C  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11558  01245E  B4D8               	btfsc	status,2,c
 11559  012460  D009               	goto	l3025
 11560  012462  D7D2               	goto	l3023
 11561  012464                     
 11562                           ; BSR set to: 0
 11563                           
 11564                           ; BSR set to: 0
 11565  012464  0100               	movlb	0	; () banked
 11566  012466  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11567  012468  0100               	movlb	0	; () banked
 11568  01246A  90D8               	bcf	status,0,c
 11569  01246C  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11570  01246E  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11571  012470  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11572  012472  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11573  012474                     l3025:
 11574                           
 11575                           ; BSR set to: 0
 11576                           
 11577                           ; BSR set to: 0
 11578  012474  0100               	movlb	0	; () banked
 11579  012476  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11580  012478  D004               	goto	u10300
 11581                           
 11582                           ; BSR set to: 0
 11583  01247A  0E02               	movlw	2
 11584  01247C  0100               	movlb	0	; () banked
 11585  01247E  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11586  012480  D7F1               	goto	l3026
 11587  012482                     u10300:
 11588                           
 11589                           ; BSR set to: 0
 11590                           
 11591                           ; BSR set to: 0
 11592  012482  0100               	movlb	0	; () banked
 11593  012484  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11594  012486  D009               	goto	l3030
 11595                           
 11596                           ; BSR set to: 0
 11597  012488  0EFF               	movlw	255
 11598  01248A  0100               	movlb	0	; () banked
 11599  01248C  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11600  01248E  0EFF               	movlw	255
 11601  012490  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11602  012492  0E7F               	movlw	127
 11603  012494  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11604  012496  0EFF               	movlw	255
 11605  012498  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11606  01249A                     l3030:
 11607                           
 11608                           ; BSR set to: 0
 11609  01249A  0100               	movlb	0	; () banked
 11610  01249C  90D8               	bcf	status,0,c
 11611  01249E  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11612  0124A0  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11613  0124A4  0100               	movlb	0	; () banked
 11614  0124A6  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11615  0124A8  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11616  0124AA  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11617  0124AC  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11618  0124B0  0100               	movlb	0	; () banked
 11619  0124B2  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11620  0124B4  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11621  0124B6  6BBE               	clrf	??___xxtofl& (0+255),b
 11622  0124B8  0100               	movlb	0	; () banked
 11623  0124BA  51BE               	movf	??___xxtofl& (0+255),w,b
 11624  0124BC  0100               	movlb	0	; () banked
 11625  0124BE  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11626  0124C0  0100               	movlb	0	; () banked
 11627  0124C2  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11628  0124C4  0100               	movlb	0	; () banked
 11629  0124C6  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11630  0124C8  0100               	movlb	0	; () banked
 11631  0124CA  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11632  0124CC  0100               	movlb	0	; () banked
 11633  0124CE  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11634  0124D0  0100               	movlb	0	; () banked
 11635  0124D2  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11636  0124D4  0100               	movlb	0	; () banked
 11637  0124D6  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11638                           
 11639                           ; BSR set to: 0
 11640  0124D8  0100               	movlb	0	; () banked
 11641  0124DA  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11642  0124DC  0100               	movlb	0	; () banked
 11643  0124DE  B4D8               	btfsc	status,2,c
 11644  0124E0  D005               	goto	l3031
 11645                           
 11646                           ; BSR set to: 0
 11647  0124E2  0100               	movlb	0	; () banked
 11648  0124E4  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11649  0124E6  D002               	goto	l3031
 11650                           
 11651                           ; BSR set to: 0
 11652  0124E8  0100               	movlb	0	; () banked
 11653  0124EA  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11654  0124EC                     l3031:
 11655                           
 11656                           ; BSR set to: 0
 11657                           
 11658                           ; BSR set to: 0
 11659  0124EC  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11660  0124F0  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11661  0124F4  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11662  0124F8  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11663  0124FC  0012               	return	
 11664  0124FE                     __end_of___xxtofl:
 11665                           	opt stack 0
 11666                           tblptru	equ	0xFF8
 11667                           tblptrh	equ	0xFF7
 11668                           tblptrl	equ	0xFF6
 11669                           tablat	equ	0xFF5
 11670                           prodh	equ	0xFF4
 11671                           prodl	equ	0xFF3
 11672                           intcon	equ	0xFF2
 11673                           postinc0	equ	0xFEE
 11674                           wreg	equ	0xFE8
 11675                           postdec1	equ	0xFE5
 11676                           fsr1h	equ	0xFE2
 11677                           fsr1l	equ	0xFE1
 11678                           indf2	equ	0xFDF
 11679                           postinc2	equ	0xFDE
 11680                           postdec2	equ	0xFDD
 11681                           fsr2h	equ	0xFDA
 11682                           fsr2l	equ	0xFD9
 11683                           status	equ	0xFD8
 11684                           
 11685 ;; *************** function ___flmul *****************
 11686 ;; Defined at:
 11687 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11688 ;; Parameters:    Size  Location     Type
 11689 ;;  b               4   14[BANK0 ] unsigned char 
 11690 ;;  a               4   18[BANK0 ] unsigned char 
 11691 ;; Auto vars:     Size  Location     Type
 11692 ;;  prod            4   33[BANK0 ] struct .
 11693 ;;  grs             4   28[BANK0 ] unsigned long 
 11694 ;;  temp            2   37[BANK0 ] struct .
 11695 ;;  bexp            1   32[BANK0 ] unsigned char 
 11696 ;;  aexp            1   27[BANK0 ] unsigned char 
 11697 ;;  sign            1   26[BANK0 ] unsigned char 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  4   14[BANK0 ] unsigned char 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0, prodl, prodh
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11707 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;Total ram usage:       25 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    7
 11714 ;; This function calls:
 11715 ;;		Nothing
 11716 ;; This function is called by:
 11717 ;;		_ADC_Voltage
 11718 ;;		_findClosestWall
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           	psect	text48
 11723  010000                     __ptext48:
 11724                           	opt stack 0
 11725  010000                     ___flmul:
 11726                           	opt stack 21
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;incstack = 0
 11730  010000  0100               	movlb	0	; () banked
 11731  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11732  010004  0B80               	andlw	128
 11733  010006  0100               	movlb	0	; () banked
 11734  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11735  01000A  0100               	movlb	0	; () banked
 11736  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11737  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11738  010010  0100               	movlb	0	; () banked
 11739  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11740                           
 11741                           ; BSR set to: 0
 11742  010014  0100               	movlb	0	; () banked
 11743  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11744  010018  D002               	goto	l2986
 11745                           
 11746                           ; BSR set to: 0
 11747  01001A  0100               	movlb	0	; () banked
 11748  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11749  01001E                     l2986:
 11750                           
 11751                           ; BSR set to: 0
 11752                           
 11753                           ; BSR set to: 0
 11754  01001E  0100               	movlb	0	; () banked
 11755  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11756  010022  0100               	movlb	0	; () banked
 11757  010024  B4D8               	btfsc	status,2,c
 11758  010026  D010               	goto	l2987
 11759                           
 11760                           ; BSR set to: 0
 11761  010028  0100               	movlb	0	; () banked
 11762  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11763  01002C  A4D8               	btfss	status,2,c
 11764  01002E  D009               	goto	l2988
 11765                           
 11766                           ; BSR set to: 0
 11767  010030  0E00               	movlw	0
 11768  010032  0100               	movlb	0	; () banked
 11769  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11770  010036  0E00               	movlw	0
 11771  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11772  01003A  0E00               	movlw	0
 11773  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11774  01003E  0E00               	movlw	0
 11775  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11776  010042                     l2988:
 11777                           
 11778                           ; BSR set to: 0
 11779                           
 11780                           ; BSR set to: 0
 11781  010042  0100               	movlb	0	; () banked
 11782  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11783  010046  D009               	goto	l2989
 11784  010048                     l2987:
 11785                           
 11786                           ; BSR set to: 0
 11787                           
 11788                           ; BSR set to: 0
 11789  010048  0E00               	movlw	0
 11790  01004A  0100               	movlb	0	; () banked
 11791  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11792  01004E  0E00               	movlw	0
 11793  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11794  010052  0E00               	movlw	0
 11795  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11796  010056  0E00               	movlw	0
 11797  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11798  01005A                     l2989:
 11799                           
 11800                           ; BSR set to: 0
 11801                           
 11802                           ; BSR set to: 0
 11803  01005A  0100               	movlb	0	; () banked
 11804  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11805  01005E  0B80               	andlw	128
 11806  010060  0100               	movlb	0	; () banked
 11807  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11808                           
 11809                           ; BSR set to: 0
 11810  010064  0100               	movlb	0	; () banked
 11811  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11812  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11813  01006A  0100               	movlb	0	; () banked
 11814  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817  01006E  0100               	movlb	0	; () banked
 11818  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11819  010072  D002               	goto	l2990
 11820                           
 11821                           ; BSR set to: 0
 11822  010074  0100               	movlb	0	; () banked
 11823  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11824  010078                     l2990:
 11825                           
 11826                           ; BSR set to: 0
 11827                           
 11828                           ; BSR set to: 0
 11829  010078  0100               	movlb	0	; () banked
 11830  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11831  01007C  0100               	movlb	0	; () banked
 11832  01007E  B4D8               	btfsc	status,2,c
 11833  010080  D010               	goto	l2991
 11834                           
 11835                           ; BSR set to: 0
 11836  010082  0100               	movlb	0	; () banked
 11837  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11838  010086  A4D8               	btfss	status,2,c
 11839  010088  D009               	goto	l2992
 11840                           
 11841                           ; BSR set to: 0
 11842  01008A  0E00               	movlw	0
 11843  01008C  0100               	movlb	0	; () banked
 11844  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11845  010090  0E00               	movlw	0
 11846  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11847  010094  0E00               	movlw	0
 11848  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11849  010098  0E00               	movlw	0
 11850  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11851  01009C                     l2992:
 11852                           
 11853                           ; BSR set to: 0
 11854                           
 11855                           ; BSR set to: 0
 11856  01009C  0100               	movlb	0	; () banked
 11857  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11858  0100A0  D009               	goto	l2993
 11859  0100A2                     l2991:
 11860                           
 11861                           ; BSR set to: 0
 11862                           
 11863                           ; BSR set to: 0
 11864  0100A2  0E00               	movlw	0
 11865  0100A4  0100               	movlb	0	; () banked
 11866  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11867  0100A8  0E00               	movlw	0
 11868  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11869  0100AC  0E00               	movlw	0
 11870  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11871  0100B0  0E00               	movlw	0
 11872  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11873  0100B4                     l2993:
 11874                           
 11875                           ; BSR set to: 0
 11876  0100B4  0100               	movlb	0	; () banked
 11877  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11878  0100B8  0100               	movlb	0	; () banked
 11879  0100BA  B4D8               	btfsc	status,2,c
 11880  0100BC  D005               	goto	u10120
 11881                           
 11882                           ; BSR set to: 0
 11883  0100BE  0100               	movlb	0	; () banked
 11884  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11885  0100C2  0100               	movlb	0	; () banked
 11886  0100C4  A4D8               	btfss	status,2,c
 11887  0100C6  D00A               	goto	l2994
 11888  0100C8                     u10120:
 11889                           
 11890                           ; BSR set to: 0
 11891                           
 11892                           ; BSR set to: 0
 11893  0100C8  0E00               	movlw	0
 11894  0100CA  0100               	movlb	0	; () banked
 11895  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11896  0100CE  0E00               	movlw	0
 11897  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11898  0100D2  0E00               	movlw	0
 11899  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11900  0100D6  0E00               	movlw	0
 11901  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11902                           
 11903                           ; BSR set to: 0
 11904  0100DA  0012               	return	
 11905  0100DC                     l2994:
 11906                           
 11907                           ; BSR set to: 0
 11908                           
 11909                           ; BSR set to: 0
 11910  0100DC  0100               	movlb	0	; () banked
 11911  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11912  0100E0  0100               	movlb	0	; () banked
 11913  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11914  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11915  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11916                           
 11917                           ; BSR set to: 0
 11918  0100EC  0100               	movlb	0	; () banked
 11919  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11920  0100F0  0100               	movlb	0	; () banked
 11921  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11922  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11923  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11924  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11925                           
 11926                           ; BSR set to: 0
 11927  0100FA  0100               	movlb	0	; () banked
 11928  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11929  0100FE  0100               	movlb	0	; () banked
 11930  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11931  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11932  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11933  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11934  010108  0100               	movlb	0	; () banked
 11935  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11936  01010C  0100               	movlb	0	; () banked
 11937  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11938  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11939  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11940                           
 11941                           ; BSR set to: 0
 11942  010118  0100               	movlb	0	; () banked
 11943  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11944  01011C  0100               	movlb	0	; () banked
 11945  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11946  010120  0E00               	movlw	0
 11947  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11948  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11949  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11950                           
 11951                           ; BSR set to: 0
 11952  010128  0100               	movlb	0	; () banked
 11953  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11954  01012C  0100               	movlb	0	; () banked
 11955  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11956  010130  0E00               	movlw	0
 11957  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11958  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11959  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11960  010138  0100               	movlb	0	; () banked
 11961  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11962  01013C  0100               	movlb	0	; () banked
 11963  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11964  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11965  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11966                           
 11967                           ; BSR set to: 0
 11968  010148  0100               	movlb	0	; () banked
 11969  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11970  01014C  0100               	movlb	0	; () banked
 11971  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11972  010150  0E00               	movlw	0
 11973  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11974  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11975  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11976                           
 11977                           ; BSR set to: 0
 11978  010158  0100               	movlb	0	; () banked
 11979  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11980  01015C  0100               	movlb	0	; () banked
 11981  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11982  010160  0E00               	movlw	0
 11983  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11984  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11985  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11986                           
 11987                           ; BSR set to: 0
 11988  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11989  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11990  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11991  010174  0100               	movlb	0	; () banked
 11992  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11993                           
 11994                           ; BSR set to: 0
 11995  010178  0100               	movlb	0	; () banked
 11996  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11997  01017C  0100               	movlb	0	; () banked
 11998  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11999  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 12000  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12001                           
 12002                           ; BSR set to: 0
 12003  010188  0100               	movlb	0	; () banked
 12004  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 12005  01018C  0100               	movlb	0	; () banked
 12006  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 12007  010190  0100               	movlb	0	; () banked
 12008  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12009  010194  0100               	movlb	0	; () banked
 12010  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12011  010198  0E00               	movlw	0
 12012  01019A  0100               	movlb	0	; () banked
 12013  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12014  01019E  0E00               	movlw	0
 12015  0101A0  0100               	movlb	0	; () banked
 12016  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12017                           
 12018                           ; BSR set to: 0
 12019  0101A4  0100               	movlb	0	; () banked
 12020  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 12021  0101A8  0100               	movlb	0	; () banked
 12022  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 12023  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 12024  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12025                           
 12026                           ; BSR set to: 0
 12027  0101B4  0100               	movlb	0	; () banked
 12028  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 12029  0101B8  0100               	movlb	0	; () banked
 12030  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 12031  0101BC  0100               	movlb	0	; () banked
 12032  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12033  0101C0  0100               	movlb	0	; () banked
 12034  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12035  0101C4  0E00               	movlw	0
 12036  0101C6  0100               	movlb	0	; () banked
 12037  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12038  0101CA  0E00               	movlw	0
 12039  0101CC  0100               	movlb	0	; () banked
 12040  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12041                           
 12042                           ; BSR set to: 0
 12043  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 12044  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 12045  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 12046  0101DC  0100               	movlb	0	; () banked
 12047  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 12048  0101E0  0100               	movlb	0	; () banked
 12049  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 12050  0101E4  0100               	movlb	0	; () banked
 12051  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 12052  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 12053  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12054                           
 12055                           ; BSR set to: 0
 12056  0101F0  0100               	movlb	0	; () banked
 12057  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 12058  0101F4  0100               	movlb	0	; () banked
 12059  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 12060  0101F8  0100               	movlb	0	; () banked
 12061  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12062  0101FC  0100               	movlb	0	; () banked
 12063  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12064  010200  0E00               	movlw	0
 12065  010202  0100               	movlb	0	; () banked
 12066  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12067  010206  0E00               	movlw	0
 12068  010208  0100               	movlb	0	; () banked
 12069  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12070                           
 12071                           ; BSR set to: 0
 12072  01020C  0100               	movlb	0	; () banked
 12073  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 12074  010210  0100               	movlb	0	; () banked
 12075  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 12076  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 12077  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12078  01021C  0100               	movlb	0	; () banked
 12079  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 12080  010220  0100               	movlb	0	; () banked
 12081  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 12082  010224  0100               	movlb	0	; () banked
 12083  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12084  010228  0100               	movlb	0	; () banked
 12085  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12086  01022C  0E00               	movlw	0
 12087  01022E  0100               	movlb	0	; () banked
 12088  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12089  010232  0E00               	movlw	0
 12090  010234  0100               	movlb	0	; () banked
 12091  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12092                           
 12093                           ; BSR set to: 0
 12094  010238  0100               	movlb	0	; () banked
 12095  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 12096  01023C  0100               	movlb	0	; () banked
 12097  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 12098  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 12099  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12100                           
 12101                           ; BSR set to: 0
 12102  010248  0100               	movlb	0	; () banked
 12103  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 12104  01024C  0100               	movlb	0	; () banked
 12105  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 12106  010250  0100               	movlb	0	; () banked
 12107  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12108  010254  0100               	movlb	0	; () banked
 12109  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12110  010258  0E00               	movlw	0
 12111  01025A  0100               	movlb	0	; () banked
 12112  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12113  01025E  0E00               	movlw	0
 12114  010260  0100               	movlb	0	; () banked
 12115  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12116  010264  0100               	movlb	0	; () banked
 12117  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 12118  010268  0100               	movlb	0	; () banked
 12119  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 12120  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 12121  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 12122                           
 12123                           ; BSR set to: 0
 12124  010274  0100               	movlb	0	; () banked
 12125  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 12126  010278  0100               	movlb	0	; () banked
 12127  01027A  6FD0               	movwf	??___flmul& (0+255),b
 12128  01027C  0100               	movlb	0	; () banked
 12129  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12130  010280  0100               	movlb	0	; () banked
 12131  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 12132  010284  0100               	movlb	0	; () banked
 12133  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 12134  010288  0100               	movlb	0	; () banked
 12135  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 12136  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 12137  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 12138  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 12139  010298  0100               	movlb	0	; () banked
 12140  01029A  6BD0               	clrf	??___flmul& (0+255),b
 12141  01029C  0100               	movlb	0	; () banked
 12142  01029E  51D0               	movf	??___flmul& (0+255),w,b
 12143  0102A0  0100               	movlb	0	; () banked
 12144  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 12145  0102A4  0100               	movlb	0	; () banked
 12146  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 12147  0102A8  0100               	movlb	0	; () banked
 12148  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12149  0102AC  0100               	movlb	0	; () banked
 12150  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 12151  0102B0  0100               	movlb	0	; () banked
 12152  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12153  0102B4  0100               	movlb	0	; () banked
 12154  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 12155  0102B8  0100               	movlb	0	; () banked
 12156  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12157                           
 12158                           ; BSR set to: 0
 12159  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 12160  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 12161  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 12162  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 12163  0102CC  0E19               	movlw	25
 12164  0102CE  D006               	goto	u10130
 12165  0102D0                     u10135:
 12166  0102D0  0100               	movlb	0	; () banked
 12167  0102D2  90D8               	bcf	status,0,c
 12168  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 12169  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 12170  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 12171  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 12172  0102DC                     u10130:
 12173  0102DC  2EE8               	decfsz	wreg,f,c
 12174  0102DE  D7F8               	goto	u10135
 12175  0102E0  0100               	movlb	0	; () banked
 12176  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 12177  0102E4  0100               	movlb	0	; () banked
 12178  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 12179  0102E8  0100               	movlb	0	; () banked
 12180  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 12181  0102EC  0100               	movlb	0	; () banked
 12182  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12183  0102F0  0100               	movlb	0	; () banked
 12184  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 12185  0102F4  0100               	movlb	0	; () banked
 12186  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12187  0102F8  0100               	movlb	0	; () banked
 12188  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 12189  0102FC  0100               	movlb	0	; () banked
 12190  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12191                           
 12192                           ; BSR set to: 0
 12193  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 12194  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 12195  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 12196  01030C  0100               	movlb	0	; () banked
 12197  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 12198                           
 12199                           ; BSR set to: 0
 12200  010310  0100               	movlb	0	; () banked
 12201  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 12202  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 12203  010318  0100               	movlb	0	; () banked
 12204  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 12205  01031C  0100               	movlb	0	; () banked
 12206  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 12207  010320  0E00               	movlw	0
 12208  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 12209  010324  0E82               	movlw	130
 12210  010326  0100               	movlb	0	; () banked
 12211  010328  25D0               	addwf	??___flmul& (0+255),w,b
 12212  01032A  0100               	movlb	0	; () banked
 12213  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 12214  01032E  0EFF               	movlw	255
 12215  010330  0100               	movlb	0	; () banked
 12216  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 12217  010334  0100               	movlb	0	; () banked
 12218  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 12219  010338  D015               	goto	l2998
 12220  01033A                     
 12221                           ; BSR set to: 0
 12222                           
 12223                           ; BSR set to: 0
 12224  01033A  0100               	movlb	0	; () banked
 12225  01033C  90D8               	bcf	status,0,c
 12226  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 12227  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 12228  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 12229  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 12230                           
 12231                           ; BSR set to: 0
 12232  010346  0100               	movlb	0	; () banked
 12233  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 12234  01034A  D002               	goto	l3000
 12235                           
 12236                           ; BSR set to: 0
 12237  01034C  0100               	movlb	0	; () banked
 12238  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 12239  010350                     l3000:
 12240                           
 12241                           ; BSR set to: 0
 12242  010350  0100               	movlb	0	; () banked
 12243  010352  90D8               	bcf	status,0,c
 12244  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 12245  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 12246  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 12247  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 12248  01035C  0100               	movlb	0	; () banked
 12249  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 12250  010360  A0D8               	btfss	status,0,c
 12251  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 12252  010364                     l2998:
 12253                           
 12254                           ; BSR set to: 0
 12255                           
 12256                           ; BSR set to: 0
 12257  010364  0100               	movlb	0	; () banked
 12258  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 12259  010368  D7E8               	goto	l2999
 12260                           
 12261                           ; BSR set to: 0
 12262                           
 12263                           ; BSR set to: 0
 12264  01036A  0E00               	movlw	0
 12265  01036C  0100               	movlb	0	; () banked
 12266  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 12267                           
 12268                           ; BSR set to: 0
 12269  010370  0100               	movlb	0	; () banked
 12270  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 12271  010374  D024               	goto	l3005
 12272                           
 12273                           ; BSR set to: 0
 12274  010376  0EFF               	movlw	255
 12275  010378  0100               	movlb	0	; () banked
 12276  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 12277  01037C  0100               	movlb	0	; () banked
 12278  01037E  6FD0               	movwf	??___flmul& (0+255),b
 12279  010380  0EFF               	movlw	255
 12280  010382  0100               	movlb	0	; () banked
 12281  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 12282  010386  0100               	movlb	0	; () banked
 12283  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 12284  01038A  0EFF               	movlw	255
 12285  01038C  0100               	movlb	0	; () banked
 12286  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 12287  010390  0100               	movlb	0	; () banked
 12288  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 12289  010394  0E7F               	movlw	127
 12290  010396  0100               	movlb	0	; () banked
 12291  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 12292  01039A  0100               	movlb	0	; () banked
 12293  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 12294  01039E  0100               	movlb	0	; () banked
 12295  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 12296  0103A2  0100               	movlb	0	; () banked
 12297  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 12298  0103A6  0100               	movlb	0	; () banked
 12299  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 12300  0103AA  0100               	movlb	0	; () banked
 12301  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 12302  0103AE  A4D8               	btfss	status,2,c
 12303  0103B0  D003               	goto	u10180
 12304                           
 12305                           ; BSR set to: 0
 12306                           
 12307                           ; BSR set to: 0
 12308  0103B2  0100               	movlb	0	; () banked
 12309  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 12310  0103B6  D003               	goto	l3005
 12311  0103B8                     u10180:
 12312                           
 12313                           ; BSR set to: 0
 12314  0103B8  0E01               	movlw	1
 12315  0103BA  0100               	movlb	0	; () banked
 12316  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 12317  0103BE                     l3005:
 12318                           
 12319                           ; BSR set to: 0
 12320                           
 12321                           ; BSR set to: 0
 12322                           
 12323                           ; BSR set to: 0
 12324  0103BE  0100               	movlb	0	; () banked
 12325  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 12326  0103C2  0100               	movlb	0	; () banked
 12327  0103C4  B4D8               	btfsc	status,2,c
 12328  0103C6  D023               	goto	l3007
 12329                           
 12330                           ; BSR set to: 0
 12331  0103C8  0E01               	movlw	1
 12332  0103CA  0100               	movlb	0	; () banked
 12333  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 12334  0103CE  0E00               	movlw	0
 12335  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12336  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12337  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12338                           
 12339                           ; BSR set to: 0
 12340  0103D6  0100               	movlb	0	; () banked
 12341  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 12342  0103DA  D019               	goto	l3007
 12343                           
 12344                           ; BSR set to: 0
 12345  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 12346  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 12347  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 12348  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 12349  0103EC  0100               	movlb	0	; () banked
 12350  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 12351  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 12352  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 12353  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 12354  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 12355  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 12356  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 12357  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 12358  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 12359                           
 12360                           ; BSR set to: 0
 12361  010408  0100               	movlb	0	; () banked
 12362  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 12363  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 12364  01040E                     l3007:
 12365                           
 12366                           ; BSR set to: 0
 12367                           
 12368                           ; BSR set to: 0
 12369                           
 12370                           ; BSR set to: 0
 12371  01040E  0100               	movlb	0	; () banked
 12372  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12373  010412  D010               	goto	l3008
 12374  010414  0100               	movlb	0	; () banked
 12375  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12376  010418  E104               	bnz	u10210
 12377  01041A  0100               	movlb	0	; () banked
 12378  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 12379  01041E  A0D8               	btfss	status,0,c
 12380  010420  D009               	goto	l3008
 12381  010422                     u10210:
 12382                           
 12383                           ; BSR set to: 0
 12384  010422  0E00               	movlw	0
 12385  010424  0100               	movlb	0	; () banked
 12386  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 12387  010428  0E00               	movlw	0
 12388  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12389  01042C  0E80               	movlw	128
 12390  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12391  010430  0E7F               	movlw	127
 12392  010432  D02B               	goto	L5
 12393  010434                     l3008:
 12394                           
 12395                           ; BSR set to: 0
 12396                           
 12397                           ; BSR set to: 0
 12398  010434  0100               	movlb	0	; () banked
 12399  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12400  010438  D007               	goto	u10220
 12401  01043A  0100               	movlb	0	; () banked
 12402  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12403  01043E  E111               	bnz	l3010
 12404  010440  0100               	movlb	0	; () banked
 12405  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 12406  010444  B0D8               	btfsc	status,0,c
 12407  010446  D00D               	goto	l3010
 12408  010448                     u10220:
 12409                           
 12410                           ; BSR set to: 0
 12411  010448  0E00               	movlw	0
 12412  01044A  0100               	movlb	0	; () banked
 12413  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 12414  01044E  0E00               	movlw	0
 12415  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12416  010452  0E00               	movlw	0
 12417  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12418  010456  0E00               	movlw	0
 12419  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12420  01045A  0E00               	movlw	0
 12421  01045C  0100               	movlb	0	; () banked
 12422  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 12423  010460  D015               	goto	l3011
 12424  010462                     l3010:
 12425                           
 12426                           ; BSR set to: 0
 12427  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 12428                           
 12429                           ; BSR set to: 0
 12430  010466  0EFF               	movlw	255
 12431  010468  0100               	movlb	0	; () banked
 12432  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 12433  01046C  0EFF               	movlw	255
 12434  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 12435  010470  0E7F               	movlw	127
 12436  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 12437  010474  0E00               	movlw	0
 12438  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 12439                           
 12440                           ; BSR set to: 0
 12441  010478  0100               	movlb	0	; () banked
 12442  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 12443  01047C  D002               	goto	l3012
 12444                           
 12445                           ; BSR set to: 0
 12446  01047E  0100               	movlb	0	; () banked
 12447  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 12448  010482                     l3012:
 12449                           
 12450                           ; BSR set to: 0
 12451                           
 12452                           ; BSR set to: 0
 12453  010482  0100               	movlb	0	; () banked
 12454  010484  90D8               	bcf	status,0,c
 12455  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 12456  010488  0100               	movlb	0	; () banked
 12457  01048A                     L5:
 12458  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12459  01048C                     l3011:
 12460                           
 12461                           ; BSR set to: 0
 12462                           
 12463                           ; BSR set to: 0
 12464                           
 12465                           ; BSR set to: 0
 12466  01048C  0100               	movlb	0	; () banked
 12467  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12468  010490  0100               	movlb	0	; () banked
 12469  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12470                           
 12471                           ; BSR set to: 0
 12472  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12473  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12474  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12475  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12476  0104A4  0012               	return	
 12477  0104A6                     __end_of___flmul:
 12478                           	opt stack 0
 12479                           tblptru	equ	0xFF8
 12480                           tblptrh	equ	0xFF7
 12481                           tblptrl	equ	0xFF6
 12482                           tablat	equ	0xFF5
 12483                           prodh	equ	0xFF4
 12484                           prodl	equ	0xFF3
 12485                           intcon	equ	0xFF2
 12486                           postinc0	equ	0xFEE
 12487                           wreg	equ	0xFE8
 12488                           postdec1	equ	0xFE5
 12489                           fsr1h	equ	0xFE2
 12490                           fsr1l	equ	0xFE1
 12491                           indf2	equ	0xFDF
 12492                           postinc2	equ	0xFDE
 12493                           postdec2	equ	0xFDD
 12494                           fsr2h	equ	0xFDA
 12495                           fsr2l	equ	0xFD9
 12496                           status	equ	0xFD8
 12497                           
 12498 ;; *************** function ___fldiv *****************
 12499 ;; Defined at:
 12500 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  b               4    0[BANK0 ] unsigned char 
 12503 ;;  a               4    4[BANK0 ] unsigned char 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;  grs             4   19[BANK0 ] unsigned long 
 12506 ;;  rem             4   13[BANK0 ] unsigned long 
 12507 ;;  new_exp         2   17[BANK0 ] int 
 12508 ;;  aexp            1   24[BANK0 ] unsigned char 
 12509 ;;  bexp            1   23[BANK0 ] unsigned char 
 12510 ;;  sign            1   12[BANK0 ] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  4    0[BANK0 ] unsigned char 
 12513 ;; Registers used:
 12514 ;;		wreg, status,2, status,0
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12520 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12524 ;;Total ram usage:       25 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    7
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_ADC_Voltage
 12531 ;;		_findClosestWall
 12532 ;;		_measureAndDisplayDistance
 12533 ;;		_mode1
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           	psect	text49
 12538  0110A8                     __ptext49:
 12539                           	opt stack 0
 12540  0110A8                     ___fldiv:
 12541                           	opt stack 21
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;incstack = 0
 12545  0110A8  0100               	movlb	0	; () banked
 12546  0110AA  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12547  0110AC  0B80               	andlw	128
 12548  0110AE  0100               	movlb	0	; () banked
 12549  0110B0  6FC6               	movwf	___fldiv@sign& (0+255),b
 12550  0110B2  0100               	movlb	0	; () banked
 12551  0110B4  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12552  0110B6  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12553  0110B8  0100               	movlb	0	; () banked
 12554  0110BA  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12555                           
 12556                           ; BSR set to: 0
 12557  0110BC  0100               	movlb	0	; () banked
 12558  0110BE  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12559  0110C0  D002               	goto	l2952
 12560                           
 12561                           ; BSR set to: 0
 12562  0110C2  0100               	movlb	0	; () banked
 12563  0110C4  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12564  0110C6                     l2952:
 12565                           
 12566                           ; BSR set to: 0
 12567                           
 12568                           ; BSR set to: 0
 12569  0110C6  0100               	movlb	0	; () banked
 12570  0110C8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12571  0110CA  0100               	movlb	0	; () banked
 12572  0110CC  B4D8               	btfsc	status,2,c
 12573  0110CE  D012               	goto	l2953
 12574                           
 12575                           ; BSR set to: 0
 12576  0110D0  0100               	movlb	0	; () banked
 12577  0110D2  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12578  0110D4  A4D8               	btfss	status,2,c
 12579  0110D6  D009               	goto	l2954
 12580                           
 12581                           ; BSR set to: 0
 12582  0110D8  0E00               	movlw	0
 12583  0110DA  0100               	movlb	0	; () banked
 12584  0110DC  6FBA               	movwf	___fldiv@b& (0+255),b
 12585  0110DE  0E00               	movlw	0
 12586  0110E0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12587  0110E2  0E00               	movlw	0
 12588  0110E4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12589  0110E6  0E00               	movlw	0
 12590  0110E8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12591  0110EA                     l2954:
 12592                           
 12593                           ; BSR set to: 0
 12594                           
 12595                           ; BSR set to: 0
 12596  0110EA  0100               	movlb	0	; () banked
 12597  0110EC  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12598                           
 12599                           ; BSR set to: 0
 12600  0110EE  0E00               	movlw	0
 12601  0110F0  0100               	movlb	0	; () banked
 12602  0110F2  D008               	goto	L6
 12603  0110F4                     l2953:
 12604                           
 12605                           ; BSR set to: 0
 12606                           
 12607                           ; BSR set to: 0
 12608  0110F4  0E00               	movlw	0
 12609  0110F6  0100               	movlb	0	; () banked
 12610  0110F8  6FBA               	movwf	___fldiv@b& (0+255),b
 12611  0110FA  0E00               	movlw	0
 12612  0110FC  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12613  0110FE  0E00               	movlw	0
 12614  011100  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12615  011102  0E00               	movlw	0
 12616  011104                     L6:
 12617  011104  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12618                           
 12619                           ; BSR set to: 0
 12620                           
 12621                           ; BSR set to: 0
 12622  011106  0100               	movlb	0	; () banked
 12623  011108  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12624  01110A  0B80               	andlw	128
 12625  01110C  0100               	movlb	0	; () banked
 12626  01110E  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12627                           
 12628                           ; BSR set to: 0
 12629  011110  0100               	movlb	0	; () banked
 12630  011112  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12631  011114  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12632  011116  0100               	movlb	0	; () banked
 12633  011118  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12634                           
 12635                           ; BSR set to: 0
 12636  01111A  0100               	movlb	0	; () banked
 12637  01111C  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12638  01111E  D002               	goto	l2956
 12639                           
 12640                           ; BSR set to: 0
 12641  011120  0100               	movlb	0	; () banked
 12642  011122  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12643  011124                     l2956:
 12644                           
 12645                           ; BSR set to: 0
 12646                           
 12647                           ; BSR set to: 0
 12648  011124  0100               	movlb	0	; () banked
 12649  011126  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12650  011128  0100               	movlb	0	; () banked
 12651  01112A  B4D8               	btfsc	status,2,c
 12652  01112C  D012               	goto	l2957
 12653                           
 12654                           ; BSR set to: 0
 12655  01112E  0100               	movlb	0	; () banked
 12656  011130  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12657  011132  A4D8               	btfss	status,2,c
 12658  011134  D009               	goto	l2958
 12659                           
 12660                           ; BSR set to: 0
 12661  011136  0E00               	movlw	0
 12662  011138  0100               	movlb	0	; () banked
 12663  01113A  6FBE               	movwf	___fldiv@a& (0+255),b
 12664  01113C  0E00               	movlw	0
 12665  01113E  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12666  011140  0E00               	movlw	0
 12667  011142  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12668  011144  0E00               	movlw	0
 12669  011146  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12670  011148                     l2958:
 12671                           
 12672                           ; BSR set to: 0
 12673                           
 12674                           ; BSR set to: 0
 12675  011148  0100               	movlb	0	; () banked
 12676  01114A  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12677                           
 12678                           ; BSR set to: 0
 12679  01114C  0E00               	movlw	0
 12680  01114E  0100               	movlb	0	; () banked
 12681  011150  D008               	goto	L7
 12682  011152                     l2957:
 12683                           
 12684                           ; BSR set to: 0
 12685                           
 12686                           ; BSR set to: 0
 12687  011152  0E00               	movlw	0
 12688  011154  0100               	movlb	0	; () banked
 12689  011156  6FBE               	movwf	___fldiv@a& (0+255),b
 12690  011158  0E00               	movlw	0
 12691  01115A  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12692  01115C  0E00               	movlw	0
 12693  01115E  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12694  011160  0E00               	movlw	0
 12695  011162                     L7:
 12696  011162  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12697                           
 12698                           ; BSR set to: 0
 12699                           
 12700                           ; BSR set to: 0
 12701  011164  0100               	movlb	0	; () banked
 12702  011166  51BE               	movf	___fldiv@a& (0+255),w,b
 12703  011168  0100               	movlb	0	; () banked
 12704  01116A  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12705  01116C  0100               	movlb	0	; () banked
 12706  01116E  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12707  011170  0100               	movlb	0	; () banked
 12708  011172  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12709  011174  A4D8               	btfss	status,2,c
 12710  011176  D017               	goto	l2960
 12711                           
 12712                           ; BSR set to: 0
 12713  011178  0E00               	movlw	0
 12714  01117A  0100               	movlb	0	; () banked
 12715  01117C  6FBA               	movwf	___fldiv@b& (0+255),b
 12716  01117E  0E00               	movlw	0
 12717  011180  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12718  011182  0E00               	movlw	0
 12719  011184  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12720  011186  0E00               	movlw	0
 12721  011188  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724  01118A  0100               	movlb	0	; () banked
 12725  01118C  0E80               	movlw	128
 12726  01118E  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12727  011190  0E7F               	movlw	127
 12728  011192  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12729                           
 12730                           ; BSR set to: 0
 12731  011194  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12732  011198  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12733  01119C  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12734  0111A0  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12735                           
 12736                           ; BSR set to: 0
 12737  0111A4  0012               	return	
 12738  0111A6                     l2960:
 12739                           
 12740                           ; BSR set to: 0
 12741                           
 12742                           ; BSR set to: 0
 12743  0111A6  0100               	movlb	0	; () banked
 12744  0111A8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12745  0111AA  0100               	movlb	0	; () banked
 12746  0111AC  A4D8               	btfss	status,2,c
 12747  0111AE  D012               	goto	l2962
 12748                           
 12749                           ; BSR set to: 0
 12750  0111B0  0E00               	movlw	0
 12751  0111B2  0100               	movlb	0	; () banked
 12752  0111B4  6FBA               	movwf	___fldiv@b& (0+255),b
 12753  0111B6  0E00               	movlw	0
 12754  0111B8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12755  0111BA  0E00               	movlw	0
 12756  0111BC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12757  0111BE  0E00               	movlw	0
 12758  0111C0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12759                           
 12760                           ; BSR set to: 0
 12761  0111C2  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12762  0111C6  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12763  0111CA  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12764  0111CE  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12765                           
 12766                           ; BSR set to: 0
 12767  0111D2  0012               	return	
 12768  0111D4                     l2962:
 12769                           
 12770                           ; BSR set to: 0
 12771                           
 12772                           ; BSR set to: 0
 12773  0111D4  0100               	movlb	0	; () banked
 12774  0111D6  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12775  0111D8  0100               	movlb	0	; () banked
 12776  0111DA  6FC2               	movwf	??___fldiv& (0+255),b
 12777  0111DC  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12778  0111DE  0100               	movlb	0	; () banked
 12779  0111E0  1FC2               	comf	??___fldiv& (0+255),f,b
 12780  0111E2  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12781  0111E4  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12782  0111E6  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12783  0111E8  0100               	movlb	0	; () banked
 12784  0111EA  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12785  0111EC  0100               	movlb	0	; () banked
 12786  0111EE  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12787  0111F0  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12788  0111F2  0100               	movlb	0	; () banked
 12789  0111F4  51C2               	movf	??___fldiv& (0+255),w,b
 12790  0111F6  0100               	movlb	0	; () banked
 12791  0111F8  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12792  0111FA  0100               	movlb	0	; () banked
 12793  0111FC  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12794  0111FE  0100               	movlb	0	; () banked
 12795  011200  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12796  011202  0E7F               	movlw	127
 12797  011204  0100               	movlb	0	; () banked
 12798  011206  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12799  011208  0100               	movlb	0	; () banked
 12800  01120A  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12801  01120C  0E00               	movlw	0
 12802  01120E  0100               	movlb	0	; () banked
 12803  011210  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12804  011212  0100               	movlb	0	; () banked
 12805  011214  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12806                           
 12807                           ; BSR set to: 0
 12808  011216  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12809  01121A  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12810  01121E  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12811  011222  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12812                           
 12813                           ; BSR set to: 0
 12814  011226  0E00               	movlw	0
 12815  011228  0100               	movlb	0	; () banked
 12816  01122A  6FBA               	movwf	___fldiv@b& (0+255),b
 12817  01122C  0E00               	movlw	0
 12818  01122E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12819  011230  0E00               	movlw	0
 12820  011232  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12821  011234  0E00               	movlw	0
 12822  011236  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12823                           
 12824                           ; BSR set to: 0
 12825  011238  0E00               	movlw	0
 12826  01123A  0100               	movlb	0	; () banked
 12827  01123C  6FCD               	movwf	___fldiv@grs& (0+255),b
 12828  01123E  0E00               	movlw	0
 12829  011240  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12830  011242  0E00               	movlw	0
 12831  011244  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12832  011246  0E00               	movlw	0
 12833  011248  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12834                           
 12835                           ; BSR set to: 0
 12836  01124A  0E00               	movlw	0
 12837  01124C  0100               	movlb	0	; () banked
 12838  01124E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12839  011250  D042               	goto	l2963
 12840  011252                     
 12841                           ; BSR set to: 0
 12842                           
 12843                           ; BSR set to: 0
 12844  011252  0100               	movlb	0	; () banked
 12845  011254  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12846  011256  0100               	movlb	0	; () banked
 12847  011258  B4D8               	btfsc	status,2,c
 12848  01125A  D017               	goto	l2965
 12849                           
 12850                           ; BSR set to: 0
 12851  01125C  0100               	movlb	0	; () banked
 12852  01125E  90D8               	bcf	status,0,c
 12853  011260  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12854  011262  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12855  011264  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12856  011266  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12857  011268  0100               	movlb	0	; () banked
 12858  01126A  90D8               	bcf	status,0,c
 12859  01126C  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12860  01126E  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12861  011270  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12862  011272  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12863                           
 12864                           ; BSR set to: 0
 12865  011274  0100               	movlb	0	; () banked
 12866  011276  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12867  011278  D002               	goto	l2966
 12868                           
 12869                           ; BSR set to: 0
 12870  01127A  0100               	movlb	0	; () banked
 12871  01127C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12872  01127E                     l2966:
 12873                           
 12874                           ; BSR set to: 0
 12875  01127E  0100               	movlb	0	; () banked
 12876  011280  90D8               	bcf	status,0,c
 12877  011282  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12878  011284  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12879  011286  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12880  011288  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12881  01128A                     l2965:
 12882                           
 12883                           ; BSR set to: 0
 12884                           
 12885                           ; BSR set to: 0
 12886  01128A  0100               	movlb	0	; () banked
 12887  01128C  51BE               	movf	___fldiv@a& (0+255),w,b
 12888  01128E  0100               	movlb	0	; () banked
 12889  011290  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12890  011292  0100               	movlb	0	; () banked
 12891  011294  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12892  011296  0100               	movlb	0	; () banked
 12893  011298  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12894  01129A  0100               	movlb	0	; () banked
 12895  01129C  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12896  01129E  0100               	movlb	0	; () banked
 12897  0112A0  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12898  0112A2  0100               	movlb	0	; () banked
 12899  0112A4  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12900  0112A6  0100               	movlb	0	; () banked
 12901  0112A8  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12902  0112AA  A0D8               	btfss	status,0,c
 12903  0112AC  D012               	goto	l2967
 12904                           
 12905                           ; BSR set to: 0
 12906  0112AE  0100               	movlb	0	; () banked
 12907  0112B0  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12908                           
 12909                           ; BSR set to: 0
 12910  0112B2  0100               	movlb	0	; () banked
 12911  0112B4  51BE               	movf	___fldiv@a& (0+255),w,b
 12912  0112B6  0100               	movlb	0	; () banked
 12913  0112B8  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12914  0112BA  0100               	movlb	0	; () banked
 12915  0112BC  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12916  0112BE  0100               	movlb	0	; () banked
 12917  0112C0  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12918  0112C2  0100               	movlb	0	; () banked
 12919  0112C4  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12920  0112C6  0100               	movlb	0	; () banked
 12921  0112C8  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12922  0112CA  0100               	movlb	0	; () banked
 12923  0112CC  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12924  0112CE  0100               	movlb	0	; () banked
 12925  0112D0  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12926  0112D2                     l2967:
 12927                           
 12928                           ; BSR set to: 0
 12929                           
 12930                           ; BSR set to: 0
 12931  0112D2  0100               	movlb	0	; () banked
 12932  0112D4  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12933  0112D6                     l2963:
 12934                           
 12935                           ; BSR set to: 0
 12936  0112D6  0E19               	movlw	25
 12937  0112D8  0100               	movlb	0	; () banked
 12938  0112DA  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12939  0112DC  D7BA               	goto	l2964
 12940                           
 12941                           ; BSR set to: 0
 12942                           
 12943                           ; BSR set to: 0
 12944  0112DE  0100               	movlb	0	; () banked
 12945  0112E0  51C7               	movf	___fldiv@rem& (0+255),w,b
 12946  0112E2  0100               	movlb	0	; () banked
 12947  0112E4  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12948  0112E6  0100               	movlb	0	; () banked
 12949  0112E8  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12950  0112EA  0100               	movlb	0	; () banked
 12951  0112EC  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12952  0112EE  B4D8               	btfsc	status,2,c
 12953  0112F0  D018               	goto	l2970
 12954                           
 12955                           ; BSR set to: 0
 12956  0112F2  0100               	movlb	0	; () banked
 12957  0112F4  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12958                           
 12959                           ; BSR set to: 0
 12960  0112F6  D015               	goto	l2970
 12961  0112F8                     
 12962                           ; BSR set to: 0
 12963                           
 12964                           ; BSR set to: 0
 12965  0112F8  0100               	movlb	0	; () banked
 12966  0112FA  90D8               	bcf	status,0,c
 12967  0112FC  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12968  0112FE  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12969  011300  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12970  011302  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12971                           
 12972                           ; BSR set to: 0
 12973  011304  0100               	movlb	0	; () banked
 12974  011306  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12975  011308  D002               	goto	l2972
 12976                           
 12977                           ; BSR set to: 0
 12978  01130A  0100               	movlb	0	; () banked
 12979  01130C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12980  01130E                     l2972:
 12981                           
 12982                           ; BSR set to: 0
 12983  01130E  0100               	movlb	0	; () banked
 12984  011310  90D8               	bcf	status,0,c
 12985  011312  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12986  011314  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12987  011316  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12988  011318  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12989  01131A  0100               	movlb	0	; () banked
 12990  01131C  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12991  01131E  A0D8               	btfss	status,0,c
 12992  011320  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12993  011322                     l2970:
 12994                           
 12995                           ; BSR set to: 0
 12996                           
 12997                           ; BSR set to: 0
 12998  011322  0100               	movlb	0	; () banked
 12999  011324  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 13000  011326  D7E8               	goto	l2971
 13001                           
 13002                           ; BSR set to: 0
 13003                           
 13004                           ; BSR set to: 0
 13005  011328  0E00               	movlw	0
 13006  01132A  0100               	movlb	0	; () banked
 13007  01132C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13008                           
 13009                           ; BSR set to: 0
 13010  01132E  0100               	movlb	0	; () banked
 13011  011330  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13012  011332  D024               	goto	l2977
 13013                           
 13014                           ; BSR set to: 0
 13015  011334  0EFF               	movlw	255
 13016  011336  0100               	movlb	0	; () banked
 13017  011338  15CD               	andwf	___fldiv@grs& (0+255),w,b
 13018  01133A  0100               	movlb	0	; () banked
 13019  01133C  6FC2               	movwf	??___fldiv& (0+255),b
 13020  01133E  0EFF               	movlw	255
 13021  011340  0100               	movlb	0	; () banked
 13022  011342  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 13023  011344  0100               	movlb	0	; () banked
 13024  011346  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 13025  011348  0EFF               	movlw	255
 13026  01134A  0100               	movlb	0	; () banked
 13027  01134C  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 13028  01134E  0100               	movlb	0	; () banked
 13029  011350  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 13030  011352  0E7F               	movlw	127
 13031  011354  0100               	movlb	0	; () banked
 13032  011356  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 13033  011358  0100               	movlb	0	; () banked
 13034  01135A  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 13035  01135C  0100               	movlb	0	; () banked
 13036  01135E  51C2               	movf	??___fldiv& (0+255),w,b
 13037  011360  0100               	movlb	0	; () banked
 13038  011362  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 13039  011364  0100               	movlb	0	; () banked
 13040  011366  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 13041  011368  0100               	movlb	0	; () banked
 13042  01136A  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 13043  01136C  A4D8               	btfss	status,2,c
 13044  01136E  D003               	goto	u9990
 13045                           
 13046                           ; BSR set to: 0
 13047                           
 13048                           ; BSR set to: 0
 13049  011370  0100               	movlb	0	; () banked
 13050  011372  A1BA               	btfss	___fldiv@b& (0+255),0,b
 13051  011374  D003               	goto	l2977
 13052  011376                     u9990:
 13053                           
 13054                           ; BSR set to: 0
 13055  011376  0E01               	movlw	1
 13056  011378  0100               	movlb	0	; () banked
 13057  01137A  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13058  01137C                     l2977:
 13059                           
 13060                           ; BSR set to: 0
 13061                           
 13062                           ; BSR set to: 0
 13063                           
 13064                           ; BSR set to: 0
 13065  01137C  0100               	movlb	0	; () banked
 13066  01137E  51D2               	movf	___fldiv@aexp& (0+255),w,b
 13067  011380  0100               	movlb	0	; () banked
 13068  011382  B4D8               	btfsc	status,2,c
 13069  011384  D023               	goto	l2979
 13070                           
 13071                           ; BSR set to: 0
 13072  011386  0E01               	movlw	1
 13073  011388  0100               	movlb	0	; () banked
 13074  01138A  27BA               	addwf	___fldiv@b& (0+255),f,b
 13075  01138C  0E00               	movlw	0
 13076  01138E  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 13077  011390  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 13078  011392  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 13079                           
 13080                           ; BSR set to: 0
 13081  011394  0100               	movlb	0	; () banked
 13082  011396  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 13083  011398  D019               	goto	l2979
 13084                           
 13085                           ; BSR set to: 0
 13086  01139A  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 13087  01139E  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 13088  0113A2  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 13089  0113A6  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 13090  0113AA  0100               	movlb	0	; () banked
 13091  0113AC  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 13092  0113AE  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 13093  0113B0  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 13094  0113B2  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 13095  0113B4  33C2               	rrcf	??___fldiv& (0+255),f,b
 13096  0113B6  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 13097  0113BA  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 13098  0113BE  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 13099  0113C2  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 13100                           
 13101                           ; BSR set to: 0
 13102  0113C6  0100               	movlb	0	; () banked
 13103  0113C8  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 13104  0113CA  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 13105  0113CC                     l2979:
 13106                           
 13107                           ; BSR set to: 0
 13108                           
 13109                           ; BSR set to: 0
 13110                           
 13111                           ; BSR set to: 0
 13112  0113CC  0100               	movlb	0	; () banked
 13113  0113CE  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13114  0113D0  D014               	goto	l2980
 13115  0113D2  0100               	movlb	0	; () banked
 13116  0113D4  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13117  0113D6  E104               	bnz	u10020
 13118  0113D8  0100               	movlb	0	; () banked
 13119  0113DA  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 13120  0113DC  A0D8               	btfss	status,0,c
 13121  0113DE  D00D               	goto	l2980
 13122  0113E0                     u10020:
 13123                           
 13124                           ; BSR set to: 0
 13125  0113E0  0E00               	movlw	0
 13126  0113E2  0100               	movlb	0	; () banked
 13127  0113E4  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13128  0113E6  69CB               	setf	___fldiv@new_exp& (0+255),b
 13129  0113E8  0E00               	movlw	0
 13130  0113EA  0100               	movlb	0	; () banked
 13131  0113EC  6FBA               	movwf	___fldiv@b& (0+255),b
 13132  0113EE  0E00               	movlw	0
 13133  0113F0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13134  0113F2  0E00               	movlw	0
 13135  0113F4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13136  0113F6  0E00               	movlw	0
 13137  0113F8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13138  0113FA                     l2980:
 13139                           
 13140                           ; BSR set to: 0
 13141                           
 13142                           ; BSR set to: 0
 13143  0113FA  0100               	movlb	0	; () banked
 13144  0113FC  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13145  0113FE  D007               	goto	u10030
 13146  011400  0100               	movlb	0	; () banked
 13147  011402  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13148  011404  E115               	bnz	l13361
 13149  011406  0100               	movlb	0	; () banked
 13150  011408  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 13151  01140A  B0D8               	btfsc	status,0,c
 13152  01140C  D011               	goto	l2981
 13153  01140E                     u10030:
 13154                           
 13155                           ; BSR set to: 0
 13156  01140E  0E00               	movlw	0
 13157  011410  0100               	movlb	0	; () banked
 13158  011412  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13159  011414  0E00               	movlw	0
 13160  011416  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 13161  011418  0E00               	movlw	0
 13162  01141A  0100               	movlb	0	; () banked
 13163  01141C  6FBA               	movwf	___fldiv@b& (0+255),b
 13164  01141E  0E00               	movlw	0
 13165  011420  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13166  011422  0E00               	movlw	0
 13167  011424  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13168  011426  0E00               	movlw	0
 13169  011428  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13170  01142A  0E00               	movlw	0
 13171  01142C  0100               	movlb	0	; () banked
 13172  01142E  6FC6               	movwf	___fldiv@sign& (0+255),b
 13173  011430                     l2981:
 13174  011430                     l13361:
 13175                           
 13176                           ; BSR set to: 0
 13177  011430  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 13178                           
 13179                           ; BSR set to: 0
 13180  011434  0100               	movlb	0	; () banked
 13181  011436  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 13182  011438  D003               	goto	l2982
 13183                           
 13184                           ; BSR set to: 0
 13185  01143A  0100               	movlb	0	; () banked
 13186  01143C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 13187  01143E  D002               	goto	l2983
 13188  011440                     l2982:
 13189                           
 13190                           ; BSR set to: 0
 13191                           
 13192                           ; BSR set to: 0
 13193  011440  0100               	movlb	0	; () banked
 13194  011442  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 13195  011444                     l2983:
 13196                           
 13197                           ; BSR set to: 0
 13198                           
 13199                           ; BSR set to: 0
 13200  011444  0100               	movlb	0	; () banked
 13201  011446  90D8               	bcf	status,0,c
 13202  011448  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 13203  01144A  0100               	movlb	0	; () banked
 13204  01144C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13205                           
 13206                           ; BSR set to: 0
 13207  01144E  0100               	movlb	0	; () banked
 13208  011450  51C6               	movf	___fldiv@sign& (0+255),w,b
 13209  011452  0100               	movlb	0	; () banked
 13210  011454  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 13211                           
 13212                           ; BSR set to: 0
 13213  011456  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 13214  01145A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 13215  01145E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 13216  011462  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 13217  011466  0012               	return	
 13218  011468                     __end_of___fldiv:
 13219                           	opt stack 0
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           postdec1	equ	0xFE5
 13230                           fsr1h	equ	0xFE2
 13231                           fsr1l	equ	0xFE1
 13232                           indf2	equ	0xFDF
 13233                           postinc2	equ	0xFDE
 13234                           postdec2	equ	0xFDD
 13235                           fsr2h	equ	0xFDA
 13236                           fsr2l	equ	0xFD9
 13237                           status	equ	0xFD8
 13238                           
 13239 ;; *************** function _init *****************
 13240 ;; Defined at:
 13241 ;;		line 68 in file "main.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;		None
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;		None
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      void 
 13248 ;; Registers used:
 13249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;Total ram usage:        0 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:   17
 13262 ;; This function calls:
 13263 ;;		_ADC_Init
 13264 ;;		_ADC_Start
 13265 ;;		_Console_Init
 13266 ;;		_HMI_Init
 13267 ;;		_ISR_Enable
 13268 ;;		_LCD_Init
 13269 ;;		_MXK_BlockSwitchTo
 13270 ;;		_MXK_Dequeue
 13271 ;;		_MXK_Init
 13272 ;;		_MXK_Release
 13273 ;;		_Motor_Init
 13274 ;;		_delay_ms
 13275 ;;		_eusart_init
 13276 ;;		_irobot_init
 13277 ;;		_irobot_init_song_0
 13278 ;;		_irobot_led_power_on
 13279 ;; This function is called by:
 13280 ;;		_main
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           	psect	text50
 13285  014936                     __ptext50:
 13286                           	opt stack 0
 13287  014936                     _init:
 13288                           	opt stack 13
 13289                           
 13290                           ;main.c: 70: MXK_Init();
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;incstack = 0
 13294  014936  EC9B  F096         	call	_MXK_Init	;wreg free
 13295                           
 13296                           ;main.c: 73: ISR_Enable();
 13297  01493A  EC4B  F0B4         	call	_ISR_Enable	;wreg free
 13298                           
 13299                           ;main.c: 76: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 13300  01493E  0E01               	movlw	1
 13301  014940  EC9E  F0B0         	call	_MXK_BlockSwitchTo
 13302  014944  0900               	iorlw	0
 13303  014946  B4D8               	btfsc	status,2,c
 13304  014948  D00C               	goto	l2312
 13305                           
 13306                           ;main.c: 77: Console_Init();
 13307  01494A  EC48  F0A8         	call	_Console_Init	;wreg free
 13308                           
 13309                           ;main.c: 78: HMI_Init();
 13310  01494E  EC9B  F090         	call	_HMI_Init	;wreg free
 13311                           
 13312                           ;main.c: 79: LCD_Init();
 13313  014952  EC5B  F097         	call	_LCD_Init	;wreg free
 13314                           
 13315                           ;main.c: 80: if (MXK_Release())
 13316  014956  EC4B  F0B3         	call	_MXK_Release	;wreg free
 13317  01495A  0900               	iorlw	0
 13318  01495C  A4D8               	btfss	status,2,c
 13319                           
 13320                           ;main.c: 81: MXK_Dequeue();
 13321  01495E  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
 13322  014962                     l2312:
 13323                           
 13324                           ;main.c: 82: }
 13325                           ;main.c: 85: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 13326  014962  0E08               	movlw	8
 13327  014964  EC9E  F0B0         	call	_MXK_BlockSwitchTo
 13328  014968  0900               	iorlw	0
 13329  01496A  B4D8               	btfsc	status,2,c
 13330  01496C  D013               	goto	l2314
 13331                           
 13332                           ;main.c: 86: Motor_Init(&Stepper, 0b1000);
 13333  01496E  0EAF               	movlw	low _Stepper
 13334  014970  0100               	movlb	0	; () banked
 13335  014972  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 13336  014974  0E00               	movlw	high _Stepper
 13337  014976  0100               	movlb	0	; () banked
 13338  014978  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 13339  01497A  0E00               	movlw	0
 13340  01497C  0100               	movlb	0	; () banked
 13341  01497E  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 13342  014980  0E08               	movlw	8
 13343  014982  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 13344  014984  EC04  F09F         	call	_Motor_Init	;wreg free
 13345                           
 13346                           ;main.c: 87: if (MXK_Release())
 13347  014988  EC4B  F0B3         	call	_MXK_Release	;wreg free
 13348  01498C  0900               	iorlw	0
 13349  01498E  A4D8               	btfss	status,2,c
 13350                           
 13351                           ;main.c: 88: MXK_Dequeue();
 13352  014990  EC7F  F0B0         	call	_MXK_Dequeue	;wreg free
 13353  014994                     l2314:
 13354                           
 13355                           ;main.c: 89: }
 13356                           ;main.c: 92: ADC_Init(&ADC_AN0, eADC_Ch0);
 13357  014994  0EB5               	movlw	low _ADC_AN0
 13358  014996  0100               	movlb	0	; () banked
 13359  014998  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 13360  01499A  0E00               	movlw	high _ADC_AN0
 13361  01499C  0100               	movlb	0	; () banked
 13362  01499E  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 13363  0149A0  0E00               	movlw	0
 13364  0149A2  0100               	movlb	0	; () banked
 13365  0149A4  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 13366  0149A6  EC93  F0A9         	call	_ADC_Init	;wreg free
 13367                           
 13368                           ;main.c: 93: float ADC_Voltage(ADCPtr plnput);
 13369                           ;main.c: 94: ADC_Start(&ADC_AN0);
 13370  0149AA  0EB5               	movlw	low _ADC_AN0
 13371  0149AC  0100               	movlb	0	; () banked
 13372  0149AE  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 13373  0149B0  0E00               	movlw	high _ADC_AN0
 13374  0149B2  0100               	movlb	0	; () banked
 13375  0149B4  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 13376  0149B6  ECD2  F0A8         	call	_ADC_Start	;wreg free
 13377                           
 13378                           ;main.c: 96: eusart_init();
 13379  0149BA  ECD4  F0B2         	call	_eusart_init	;wreg free
 13380                           
 13381                           ;main.c: 97: irobot_init();
 13382  0149BE  EC11  F0B4         	call	_irobot_init	;wreg free
 13383                           
 13384                           ;main.c: 99: irobot_led_power_on(0xA);
 13385  0149C2  0E0A               	movlw	10
 13386  0149C4  EC3D  F0B3         	call	_irobot_led_power_on
 13387                           
 13388                           ;main.c: 100: irobot_init_song_0();
 13389  0149C8  ECB5  F0B2         	call	_irobot_init_song_0	;wreg free
 13390                           
 13391                           ;main.c: 101: delay_ms(20);
 13392  0149CC  0E00               	movlw	0
 13393  0149CE  0100               	movlb	0	; () banked
 13394  0149D0  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 13395  0149D2  0E14               	movlw	20
 13396  0149D4  6FBA               	movwf	delay_ms@ms& (0+255),b
 13397  0149D6  EC08  F0AC         	call	_delay_ms	;wreg free
 13398  0149DA  0012               	return		;funcret
 13399  0149DC                     __end_of_init:
 13400                           	opt stack 0
 13401                           tblptru	equ	0xFF8
 13402                           tblptrh	equ	0xFF7
 13403                           tblptrl	equ	0xFF6
 13404                           tablat	equ	0xFF5
 13405                           prodh	equ	0xFF4
 13406                           prodl	equ	0xFF3
 13407                           intcon	equ	0xFF2
 13408                           postinc0	equ	0xFEE
 13409                           wreg	equ	0xFE8
 13410                           postdec1	equ	0xFE5
 13411                           fsr1h	equ	0xFE2
 13412                           fsr1l	equ	0xFE1
 13413                           indf2	equ	0xFDF
 13414                           postinc2	equ	0xFDE
 13415                           postdec2	equ	0xFDD
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _irobot_led_power_on *****************
 13421 ;; Defined at:
 13422 ;;		line 334 in file "Library/iRobotSerial.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;  powerOnColou    1    wreg     unsigned char 
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  1    wreg      void 
 13429 ;; Registers used:
 13430 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;Total ram usage:        1 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    9
 13443 ;; This function calls:
 13444 ;;		_irobot_leds
 13445 ;; This function is called by:
 13446 ;;		_init
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           	psect	text51
 13451  01667A                     __ptext51:
 13452                           	opt stack 0
 13453  01667A                     _irobot_led_power_on:
 13454                           	opt stack 20
 13455                           
 13456                           ;incstack = 0
 13457                           ;irobot_led_power_on@powerOnColour stored from wreg
 13458  01667A  0100               	movlb	0	; () banked
 13459  01667C  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13460                           
 13461                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13462  01667E  0E00               	movlw	0
 13463  016680  0100               	movlb	0	; () banked
 13464  016682  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13465  016684  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13466  016688  0EFF               	movlw	255
 13467  01668A  0100               	movlb	0	; () banked
 13468  01668C  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13469  01668E  0E00               	movlw	0
 13470  016690  ECC7  F0AD         	call	_irobot_leds
 13471  016694  0012               	return		;funcret
 13472  016696                     __end_of_irobot_led_power_on:
 13473                           	opt stack 0
 13474                           tblptru	equ	0xFF8
 13475                           tblptrh	equ	0xFF7
 13476                           tblptrl	equ	0xFF6
 13477                           tablat	equ	0xFF5
 13478                           prodh	equ	0xFF4
 13479                           prodl	equ	0xFF3
 13480                           intcon	equ	0xFF2
 13481                           postinc0	equ	0xFEE
 13482                           wreg	equ	0xFE8
 13483                           postdec1	equ	0xFE5
 13484                           fsr1h	equ	0xFE2
 13485                           fsr1l	equ	0xFE1
 13486                           indf2	equ	0xFDF
 13487                           postinc2	equ	0xFDE
 13488                           postdec2	equ	0xFDD
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function _irobot_leds *****************
 13494 ;; Defined at:
 13495 ;;		line 259 in file "Library/iRobotSerial.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  isScript        1    wreg     unsigned char 
 13498 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13499 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13500 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;  isScript        1   19[BANK0 ] unsigned char 
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  1    wreg      void 
 13505 ;; Registers used:
 13506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13512 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;Total ram usage:        4 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; Hardware stack levels required when called:    8
 13519 ;; This function calls:
 13520 ;;		_eusart_putch
 13521 ;;		_load_iRScriptStack
 13522 ;; This function is called by:
 13523 ;;		_irobot_led_power_on
 13524 ;;		_irobot_led_power_off
 13525 ;; This function uses a non-reentrant model
 13526 ;;
 13527                           
 13528                           	psect	text52
 13529  015B8E                     __ptext52:
 13530                           	opt stack 0
 13531  015B8E                     _irobot_leds:
 13532                           	opt stack 20
 13533                           
 13534                           ;incstack = 0
 13535                           ;irobot_leds@isScript stored from wreg
 13536  015B8E  0100               	movlb	0	; () banked
 13537  015B90  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13538                           
 13539                           ;iRobotSerial.c: 260: if (isScript) {
 13540  015B92  0100               	movlb	0	; () banked
 13541  015B94  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13542  015B96  0100               	movlb	0	; () banked
 13543  015B98  B4D8               	btfsc	status,2,c
 13544  015B9A  D015               	goto	l2144
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
 13548                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
 13549  015B9C  0E00               	movlw	0
 13550  015B9E  0100               	movlb	0	; () banked
 13551  015BA0  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13552  015BA2  0E8B               	movlw	139
 13553  015BA4  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13554  015BA6  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13555  015BAA  0100               	movlb	0	; () banked
 13556  015BAC  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13557  015BAE  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13558  015BB2  0100               	movlb	0	; () banked
 13559  015BB4  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13560  015BB6  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13561  015BBA  0100               	movlb	0	; () banked
 13562  015BBC  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13563  015BBE  0E04               	movlw	4
 13564  015BC0  ECD3  F0AB         	call	_load_iRScriptStack
 13565                           
 13566                           ;iRobotSerial.c: 263: } else {
 13567  015BC4  0012               	return	
 13568  015BC6                     l2144:
 13569                           
 13570                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
 13571  015BC6  0E8B               	movlw	139
 13572  015BC8  EC18  F0B4         	call	_eusart_putch
 13573                           
 13574                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
 13575  015BCC  0100               	movlb	0	; () banked
 13576  015BCE  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13577  015BD0  EC18  F0B4         	call	_eusart_putch
 13578                           
 13579                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
 13580  015BD4  0100               	movlb	0	; () banked
 13581  015BD6  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13582  015BD8  EC18  F0B4         	call	_eusart_putch
 13583                           
 13584                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
 13585  015BDC  0100               	movlb	0	; () banked
 13586  015BDE  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13587  015BE0  EC18  F0B4         	call	_eusart_putch
 13588  015BE4  0012               	return	
 13589  015BE6                     __end_of_irobot_leds:
 13590                           	opt stack 0
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           intcon	equ	0xFF2
 13598                           postinc0	equ	0xFEE
 13599                           wreg	equ	0xFE8
 13600                           postdec1	equ	0xFE5
 13601                           fsr1h	equ	0xFE2
 13602                           fsr1l	equ	0xFE1
 13603                           indf2	equ	0xFDF
 13604                           postinc2	equ	0xFDE
 13605                           postdec2	equ	0xFDD
 13606                           fsr2h	equ	0xFDA
 13607                           fsr2l	equ	0xFD9
 13608                           status	equ	0xFD8
 13609                           
 13610 ;; *************** function _load_iRScriptStack *****************
 13611 ;; Defined at:
 13612 ;;		line 190 in file "Library/iRobotSerial.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  bytesToLoad     1    wreg     unsigned char 
 13615 ;; Auto vars:     Size  Location     Type
 13616 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13617 ;;  i               1   15[BANK0 ] unsigned char 
 13618 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13619 ;;		 -> ?_load_iRScriptStack(1), 
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      void 
 13622 ;; Registers used:
 13623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13629 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13630 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;Total ram usage:       16 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    7
 13636 ;; This function calls:
 13637 ;;		Nothing
 13638 ;; This function is called by:
 13639 ;;		_irobot_move
 13640 ;;		_irobot_leds
 13641 ;;		_irobot_angle_wait
 13642 ;;		_irobot_distance_wait
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           	psect	text53
 13647  0157A6                     __ptext53:
 13648                           	opt stack 0
 13649  0157A6                     _load_iRScriptStack:
 13650                           	opt stack 19
 13651                           
 13652                           ;incstack = 0
 13653                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13654  0157A6  0100               	movlb	0	; () banked
 13655  0157A8  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13656                           
 13657                           ;iRobotSerial.c: 191: va_list loadByte;
 13658                           ;iRobotSerial.c: 192: *loadByte = __va_start();
 13659  0157AA  0EBA               	movlw	low ?_load_iRScriptStack
 13660  0157AC  0100               	movlb	0	; () banked
 13661  0157AE  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13662  0157B0  0E00               	movlw	high ?_load_iRScriptStack
 13663  0157B2  0100               	movlb	0	; () banked
 13664  0157B4  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13665                           
 13666                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13667  0157B6  0E00               	movlw	0
 13668  0157B8  0100               	movlb	0	; () banked
 13669  0157BA  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13670  0157BC  D01F               	goto	l2118
 13671  0157BE                     
 13672                           ; BSR set to: 0
 13673                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13674                           
 13675                           ; BSR set to: 0
 13676  0157BE  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13677  0157C2  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13678  0157C6  0100               	movlb	0	; () banked
 13679  0157C8  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13680  0157CA  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13681  0157CE  0100               	movlb	0	; () banked
 13682  0157D0  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13683  0157D2  0100               	movlb	0	; () banked
 13684  0157D4  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13685  0157D6  0E00               	movlw	0
 13686  0157D8  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13687  0157DA  0E00               	movlw	low _iRScriptStack
 13688  0157DC  0100               	movlb	0	; () banked
 13689  0157DE  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13690  0157E0  6EE1               	movwf	fsr1l,c
 13691  0157E2  0E04               	movlw	high _iRScriptStack
 13692  0157E4  0100               	movlb	0	; () banked
 13693  0157E6  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13694  0157E8  6EE2               	movwf	fsr1h,c
 13695  0157EA  CFDF FFE7          	movff	indf2,indf1
 13696                           
 13697                           ; BSR set to: 0
 13698  0157EE  0E02               	movlw	2
 13699  0157F0  0100               	movlb	0	; () banked
 13700  0157F2  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13701  0157F4  0E00               	movlw	0
 13702  0157F6  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13703                           
 13704                           ; BSR set to: 0
 13705  0157F8  0100               	movlb	0	; () banked
 13706  0157FA  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13707  0157FC                     l2118:
 13708                           
 13709                           ; BSR set to: 0
 13710                           
 13711                           ; BSR set to: 0
 13712  0157FC  0100               	movlb	0	; () banked
 13713  0157FE  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13714  015800  0100               	movlb	0	; () banked
 13715  015802  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13716  015804  A0D8               	btfss	status,0,c
 13717  015806  D7DB               	goto	l2119
 13718                           
 13719                           ; BSR set to: 0
 13720                           ;iRobotSerial.c: 195: }
 13721                           ;iRobotSerial.c: 196: ;
 13722                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
 13723                           
 13724                           ; BSR set to: 0
 13725  015808  0100               	movlb	0	; () banked
 13726  01580A  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13727  01580C  2637               	addwf	_iRScriptIndex,f,c
 13728                           
 13729                           ; BSR set to: 0
 13730  01580E  0012               	return		;funcret
 13731  015810                     __end_of_load_iRScriptStack:
 13732                           	opt stack 0
 13733                           tblptru	equ	0xFF8
 13734                           tblptrh	equ	0xFF7
 13735                           tblptrl	equ	0xFF6
 13736                           tablat	equ	0xFF5
 13737                           prodh	equ	0xFF4
 13738                           prodl	equ	0xFF3
 13739                           intcon	equ	0xFF2
 13740                           postinc0	equ	0xFEE
 13741                           wreg	equ	0xFE8
 13742                           indf1	equ	0xFE7
 13743                           postdec1	equ	0xFE5
 13744                           fsr1h	equ	0xFE2
 13745                           fsr1l	equ	0xFE1
 13746                           indf2	equ	0xFDF
 13747                           postinc2	equ	0xFDE
 13748                           postdec2	equ	0xFDD
 13749                           fsr2h	equ	0xFDA
 13750                           fsr2l	equ	0xFD9
 13751                           status	equ	0xFD8
 13752                           
 13753 ;; *************** function _irobot_init_song_0 *****************
 13754 ;; Defined at:
 13755 ;;		line 271 in file "Library/iRobotSerial.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;		None
 13758 ;; Auto vars:     Size  Location     Type
 13759 ;;		None
 13760 ;; Return value:  Size  Location     Type
 13761 ;;                  1    wreg      void 
 13762 ;; Registers used:
 13763 ;;		wreg, cstack
 13764 ;; Tracked objects:
 13765 ;;		On entry : 0/0
 13766 ;;		On exit  : 0/0
 13767 ;;		Unchanged: 0/0
 13768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;Total ram usage:        0 bytes
 13774 ;; Hardware stack levels used:    1
 13775 ;; Hardware stack levels required when called:    8
 13776 ;; This function calls:
 13777 ;;		_eusart_putch
 13778 ;; This function is called by:
 13779 ;;		_init
 13780 ;; This function uses a non-reentrant model
 13781 ;;
 13782                           
 13783                           	psect	text54
 13784  01656A                     __ptext54:
 13785                           	opt stack 0
 13786  01656A                     _irobot_init_song_0:
 13787                           	opt stack 21
 13788                           
 13789                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
 13790                           
 13791                           ; BSR set to: 0
 13792                           ;incstack = 0
 13793  01656A  0E8C               	movlw	140
 13794  01656C  EC18  F0B4         	call	_eusart_putch
 13795                           
 13796                           ;iRobotSerial.c: 273: eusart_putch(0);
 13797  016570  0E00               	movlw	0
 13798  016572  EC18  F0B4         	call	_eusart_putch
 13799                           
 13800                           ;iRobotSerial.c: 274: eusart_putch(1);
 13801  016576  0E01               	movlw	1
 13802  016578  EC18  F0B4         	call	_eusart_putch
 13803                           
 13804                           ;iRobotSerial.c: 275: eusart_putch(60);
 13805  01657C  0E3C               	movlw	60
 13806  01657E  EC18  F0B4         	call	_eusart_putch
 13807                           
 13808                           ;iRobotSerial.c: 276: eusart_putch(4);
 13809  016582  0E04               	movlw	4
 13810  016584  EC18  F0B4         	call	_eusart_putch
 13811  016588  0012               	return		;funcret
 13812  01658A                     __end_of_irobot_init_song_0:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           postinc0	equ	0xFEE
 13822                           wreg	equ	0xFE8
 13823                           indf1	equ	0xFE7
 13824                           postdec1	equ	0xFE5
 13825                           fsr1h	equ	0xFE2
 13826                           fsr1l	equ	0xFE1
 13827                           indf2	equ	0xFDF
 13828                           postinc2	equ	0xFDE
 13829                           postdec2	equ	0xFDD
 13830                           fsr2h	equ	0xFDA
 13831                           fsr2l	equ	0xFD9
 13832                           status	equ	0xFD8
 13833                           
 13834 ;; *************** function _irobot_init *****************
 13835 ;; Defined at:
 13836 ;;		line 215 in file "Library/iRobotSerial.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;		None
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;		None
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;Total ram usage:        0 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    8
 13857 ;; This function calls:
 13858 ;;		_eusart_putch
 13859 ;; This function is called by:
 13860 ;;		_init
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           	psect	text55
 13865  016822                     __ptext55:
 13866                           	opt stack 0
 13867  016822                     _irobot_init:
 13868                           	opt stack 21
 13869                           
 13870                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
 13871                           
 13872                           ;incstack = 0
 13873  016822  0E80               	movlw	128
 13874  016824  EC18  F0B4         	call	_eusart_putch
 13875                           
 13876                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
 13877  016828  0E84               	movlw	132
 13878  01682A  EC18  F0B4         	call	_eusart_putch
 13879  01682E  0012               	return		;funcret
 13880  016830                     __end_of_irobot_init:
 13881                           	opt stack 0
 13882                           tblptru	equ	0xFF8
 13883                           tblptrh	equ	0xFF7
 13884                           tblptrl	equ	0xFF6
 13885                           tablat	equ	0xFF5
 13886                           prodh	equ	0xFF4
 13887                           prodl	equ	0xFF3
 13888                           intcon	equ	0xFF2
 13889                           postinc0	equ	0xFEE
 13890                           wreg	equ	0xFE8
 13891                           indf1	equ	0xFE7
 13892                           postdec1	equ	0xFE5
 13893                           fsr1h	equ	0xFE2
 13894                           fsr1l	equ	0xFE1
 13895                           indf2	equ	0xFDF
 13896                           postinc2	equ	0xFDE
 13897                           postdec2	equ	0xFDD
 13898                           fsr2h	equ	0xFDA
 13899                           fsr2l	equ	0xFD9
 13900                           status	equ	0xFD8
 13901                           
 13902 ;; *************** function _eusart_putch *****************
 13903 ;; Defined at:
 13904 ;;		line 130 in file "Library/iRobotSerial.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  eusartSendCh    1    wreg     unsigned char 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13909 ;; Return value:  Size  Location     Type
 13910 ;;                  1    wreg      void 
 13911 ;; Registers used:
 13912 ;;		wreg
 13913 ;; Tracked objects:
 13914 ;;		On entry : 0/0
 13915 ;;		On exit  : 0/0
 13916 ;;		Unchanged: 0/0
 13917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13922 ;;Total ram usage:        1 bytes
 13923 ;; Hardware stack levels used:    1
 13924 ;; Hardware stack levels required when called:    7
 13925 ;; This function calls:
 13926 ;;		Nothing
 13927 ;; This function is called by:
 13928 ;;		_irobot_query_and_update
 13929 ;;		_irobot_init
 13930 ;;		_irobot_move
 13931 ;;		_irobot_leds
 13932 ;;		_irobot_init_song_0
 13933 ;;		_irobot_song_play
 13934 ;;		_irobot_script_play
 13935 ;; This function uses a non-reentrant model
 13936 ;;
 13937                           
 13938                           	psect	text56
 13939  016830                     __ptext56:
 13940                           	opt stack 0
 13941  016830                     _eusart_putch:
 13942                           	opt stack 20
 13943                           
 13944                           ;incstack = 0
 13945                           ;eusart_putch@eusartSendChar stored from wreg
 13946  016830  0100               	movlb	0	; () banked
 13947  016832  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13948  016834                     
 13949                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
 13950  016834  A2AD               	btfss	4013,1,c	;volatile
 13951  016836  D7FE               	goto	l12795
 13952                           
 13953                           ;iRobotSerial.c: 132: };
 13954                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
 13955  016838  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13956  01683C  0012               	return		;funcret
 13957  01683E                     __end_of_eusart_putch:
 13958                           	opt stack 0
 13959                           tblptru	equ	0xFF8
 13960                           tblptrh	equ	0xFF7
 13961                           tblptrl	equ	0xFF6
 13962                           tablat	equ	0xFF5
 13963                           prodh	equ	0xFF4
 13964                           prodl	equ	0xFF3
 13965                           intcon	equ	0xFF2
 13966                           postinc0	equ	0xFEE
 13967                           wreg	equ	0xFE8
 13968                           indf1	equ	0xFE7
 13969                           postdec1	equ	0xFE5
 13970                           fsr1h	equ	0xFE2
 13971                           fsr1l	equ	0xFE1
 13972                           indf2	equ	0xFDF
 13973                           postinc2	equ	0xFDE
 13974                           postdec2	equ	0xFDD
 13975                           fsr2h	equ	0xFDA
 13976                           fsr2l	equ	0xFD9
 13977                           status	equ	0xFD8
 13978                           
 13979 ;; *************** function _eusart_init *****************
 13980 ;; Defined at:
 13981 ;;		line 113 in file "Library/iRobotSerial.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;		None
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;		None
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  1    wreg      void 
 13988 ;; Registers used:
 13989 ;;		wreg, status,2
 13990 ;; Tracked objects:
 13991 ;;		On entry : 0/0
 13992 ;;		On exit  : 0/0
 13993 ;;		Unchanged: 0/0
 13994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;Total ram usage:        0 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; Hardware stack levels required when called:    7
 14002 ;; This function calls:
 14003 ;;		Nothing
 14004 ;; This function is called by:
 14005 ;;		_init
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text57
 14010  0165A8                     __ptext57:
 14011                           	opt stack 0
 14012  0165A8                     _eusart_init:
 14013                           	opt stack 22
 14014                           
 14015                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
 14016                           
 14017                           ;incstack = 0
 14018  0165A8  9C94               	bcf	3988,6,c	;volatile
 14019                           
 14020                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
 14021  0165AA  8E94               	bsf	3988,7,c	;volatile
 14022                           
 14023                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
 14024  0165AC  0E24               	movlw	36
 14025  0165AE  6EAD               	movwf	4013,c	;volatile
 14026                           
 14027                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
 14028  0165B0  0E98               	movlw	152
 14029  0165B2  6EAC               	movwf	4012,c	;volatile
 14030                           
 14031                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
 14032  0165B4  9A7E               	bcf	3966,5,c	;volatile
 14033                           
 14034                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
 14035  0165B6  987E               	bcf	3966,4,c	;volatile
 14036                           
 14037                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
 14038  0165B8  927E               	bcf	3966,1,c	;volatile
 14039                           
 14040                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
 14041  0165BA  907E               	bcf	3966,0,c	;volatile
 14042                           
 14043                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
 14044  0165BC  84AD               	bsf	4013,2,c	;volatile
 14045                           
 14046                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
 14047  0165BE  967E               	bcf	3966,3,c	;volatile
 14048                           
 14049                           ;iRobotSerial.c: 127: SPBRG1 = 51;
 14050  0165C0  0E33               	movlw	51
 14051  0165C2  6EB0               	movwf	4016,c	;volatile
 14052  0165C4  0012               	return		;funcret
 14053  0165C6                     __end_of_eusart_init:
 14054                           	opt stack 0
 14055                           tblptru	equ	0xFF8
 14056                           tblptrh	equ	0xFF7
 14057                           tblptrl	equ	0xFF6
 14058                           tablat	equ	0xFF5
 14059                           prodh	equ	0xFF4
 14060                           prodl	equ	0xFF3
 14061                           intcon	equ	0xFF2
 14062                           postinc0	equ	0xFEE
 14063                           wreg	equ	0xFE8
 14064                           indf1	equ	0xFE7
 14065                           postdec1	equ	0xFE5
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function _Motor_Init *****************
 14076 ;; Defined at:
 14077 ;;		line 26 in file "Library/Motor.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 14080 ;;		 -> Stepper(6), 
 14081 ;;  pAddress        2   47[BANK0 ] unsigned short 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;		None
 14084 ;; Return value:  Size  Location     Type
 14085 ;;                  1    wreg      void 
 14086 ;; Registers used:
 14087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14093 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14096 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14097 ;;Total ram usage:        4 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:   12
 14100 ;; This function calls:
 14101 ;;		_Port_SetPin
 14102 ;;		_Port_SetPinType
 14103 ;;		_Timer0_Init
 14104 ;; This function is called by:
 14105 ;;		_init
 14106 ;; This function uses a non-reentrant model
 14107 ;;
 14108                           
 14109                           	psect	text58
 14110  013E08                     __ptext58:
 14111                           	opt stack 0
 14112  013E08                     _Motor_Init:
 14113                           	opt stack 17
 14114                           
 14115                           ;Motor.c: 28: pMotor->mDelta = 0;
 14116                           
 14117                           ;incstack = 0
 14118  013E08  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 14119  013E0C  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 14120  013E10  0E00               	movlw	0
 14121  013E12  6EDE               	movwf	postinc2,c
 14122  013E14  0E00               	movlw	0
 14123  013E16  6EDD               	movwf	postdec2,c
 14124                           
 14125                           ;Motor.c: 29: pMotor->mFrequency = 0;
 14126  013E18  0100               	movlb	0	; () banked
 14127  013E1A  EE20 F002          	lfsr	2,2
 14128  013E1E  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 14129  013E20  26D9               	addwf	fsr2l,f,c
 14130  013E22  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14131  013E24  22DA               	addwfc	fsr2h,f,c
 14132  013E26  0E00               	movlw	0
 14133  013E28  6EDE               	movwf	postinc2,c
 14134  013E2A  0E00               	movlw	0
 14135  013E2C  6EDD               	movwf	postdec2,c
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 14139  013E2E  0100               	movlb	0	; () banked
 14140  013E30  EE20 F004          	lfsr	2,4
 14141  013E34  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 14142  013E36  26D9               	addwf	fsr2l,f,c
 14143  013E38  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14144  013E3A  22DA               	addwfc	fsr2h,f,c
 14145  013E3C  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 14146  013E40  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 14150  013E44  0E91               	movlw	low _PortE
 14151  013E46  0100               	movlb	0	; () banked
 14152  013E48  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14153  013E4A  0E00               	movlw	high _PortE
 14154  013E4C  0100               	movlb	0	; () banked
 14155  013E4E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14156  013E50  0E00               	movlw	0
 14157  013E52  0100               	movlb	0	; () banked
 14158  013E54  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14159  013E56  0E03               	movlw	3
 14160  013E58  0100               	movlb	0	; () banked
 14161  013E5A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14162  013E5C  EC60  F093         	call	_Port_SetPinType	;wreg free
 14163                           
 14164                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 14165  013E60  0E91               	movlw	low _PortE
 14166  013E62  0100               	movlb	0	; () banked
 14167  013E64  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14168  013E66  0E00               	movlw	high _PortE
 14169  013E68  0100               	movlb	0	; () banked
 14170  013E6A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14171  013E6C  0E01               	movlw	1
 14172  013E6E  0100               	movlb	0	; () banked
 14173  013E70  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14174  013E72  0E03               	movlw	3
 14175  013E74  0100               	movlb	0	; () banked
 14176  013E76  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14177  013E78  EC60  F093         	call	_Port_SetPinType	;wreg free
 14178                           
 14179                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 14180  013E7C  0E91               	movlw	low _PortE
 14181  013E7E  0100               	movlb	0	; () banked
 14182  013E80  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14183  013E82  0E00               	movlw	high _PortE
 14184  013E84  0100               	movlb	0	; () banked
 14185  013E86  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14186  013E88  0E00               	movlw	0
 14187  013E8A  0100               	movlb	0	; () banked
 14188  013E8C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14189  013E8E  0E00               	movlw	0
 14190  013E90  0100               	movlb	0	; () banked
 14191  013E92  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14192  013E94  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 14193                           
 14194                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 14195  013E98  0E91               	movlw	low _PortE
 14196  013E9A  0100               	movlb	0	; () banked
 14197  013E9C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14198  013E9E  0E00               	movlw	high _PortE
 14199  013EA0  0100               	movlb	0	; () banked
 14200  013EA2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14201  013EA4  0E01               	movlw	1
 14202  013EA6  0100               	movlb	0	; () banked
 14203  013EA8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14204  013EAA  0E00               	movlw	0
 14205  013EAC  0100               	movlb	0	; () banked
 14206  013EAE  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14207  013EB0  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 14208                           
 14209                           ;Motor.c: 38: lStepFunction = Motor_Step;
 14210  013EB4  0E4E               	movlw	low _Motor_Step
 14211  013EB6  0100               	movlb	0	; () banked
 14212  013EB8  6F66               	movwf	_lStepFunction& (0+255),b
 14213  013EBA  0E34               	movlw	high _Motor_Step
 14214  013EBC  0100               	movlb	0	; () banked
 14215  013EBE  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 14216  013EC0  0E01               	movlw	low (_Motor_Step shr (0+16))
 14217  013EC2  0100               	movlb	0	; () banked
 14218  013EC4  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;Motor.c: 39: Timer0_Init(1000);
 14222  013EC6  0EE8               	movlw	232
 14223  013EC8  0100               	movlb	0	; () banked
 14224  013ECA  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 14225  013ECC  0E03               	movlw	3
 14226  013ECE  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 14227  013ED0  0E00               	movlw	0
 14228  013ED2  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 14229  013ED4  0E00               	movlw	0
 14230  013ED6  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 14231  013ED8  ECC7  F098         	call	_Timer0_Init	;wreg free
 14232  013EDC  0012               	return		;funcret
 14233  013EDE                     __end_of_Motor_Init:
 14234                           	opt stack 0
 14235                           tblptru	equ	0xFF8
 14236                           tblptrh	equ	0xFF7
 14237                           tblptrl	equ	0xFF6
 14238                           tablat	equ	0xFF5
 14239                           prodh	equ	0xFF4
 14240                           prodl	equ	0xFF3
 14241                           intcon	equ	0xFF2
 14242                           postinc0	equ	0xFEE
 14243                           wreg	equ	0xFE8
 14244                           indf1	equ	0xFE7
 14245                           postdec1	equ	0xFE5
 14246                           fsr1h	equ	0xFE2
 14247                           fsr1l	equ	0xFE1
 14248                           indf2	equ	0xFDF
 14249                           postinc2	equ	0xFDE
 14250                           postdec2	equ	0xFDD
 14251                           fsr2h	equ	0xFDA
 14252                           fsr2l	equ	0xFD9
 14253                           status	equ	0xFD8
 14254                           
 14255 ;; *************** function _Timer0_Init *****************
 14256 ;; Defined at:
 14257 ;;		line 25 in file "Library/Timer0.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14260 ;; Auto vars:     Size  Location     Type
 14261 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 14262 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  1    wreg      void 
 14265 ;; Registers used:
 14266 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14272 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14273 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14275 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;Total ram usage:       14 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    8
 14279 ;; This function calls:
 14280 ;;		_Timer0_Clear
 14281 ;;		___lldiv
 14282 ;; This function is called by:
 14283 ;;		_Motor_Init
 14284 ;;		_Motor_Speed
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           	psect	text59
 14289  01318E                     __ptext59:
 14290                           	opt stack 0
 14291  01318E                     _Timer0_Init:
 14292                           	opt stack 19
 14293                           
 14294                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 14295                           
 14296                           ;incstack = 0
 14297  01318E  0E80               	movlw	128
 14298  013190  0100               	movlb	0	; () banked
 14299  013192  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 14300  013194  0E8D               	movlw	141
 14301  013196  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 14302  013198  0E5B               	movlw	91
 14303  01319A  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 14304  01319C  0E00               	movlw	0
 14305  01319E  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 14309                           ;Timer0.c: 31: static UINT8 PRE = 0;
 14310                           ;Timer0.c: 32: static UINT32 DIV = 0;
 14311                           ;Timer0.c: 34: UINT32 DIVIDE;
 14312                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 14313  0131A0  9ED5               	bcf	4053,7,c	;volatile
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;Timer0.c: 38: if (pFrequency == 0)
 14317  0131A2  0100               	movlb	0	; () banked
 14318  0131A4  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 14319  0131A6  0100               	movlb	0	; () banked
 14320  0131A8  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 14321  0131AA  0100               	movlb	0	; () banked
 14322  0131AC  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 14323  0131AE  0100               	movlb	0	; () banked
 14324  0131B0  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 14325  0131B2  B4D8               	btfsc	status,2,c
 14326  0131B4  0012               	return	
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;Timer0.c: 39: return;
 14333  0131B6  96D5               	bcf	4053,3,c	;volatile
 14334                           
 14335                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 14336  0131B8  9CD5               	bcf	4053,6,c	;volatile
 14337                           
 14338                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 14339  0131BA  9AD5               	bcf	4053,5,c	;volatile
 14340                           
 14341                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 14342  0131BC  98D5               	bcf	4053,4,c	;volatile
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 14346  0131BE  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 14347  0131C2  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 14348  0131C6  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 14349  0131CA  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 14350  0131CE  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 14351  0131D2  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 14352  0131D6  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 14353  0131DA  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 14354  0131DE  EC2C  F0A2         	call	___lldiv	;wreg free
 14355  0131E2  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 14356  0131E6  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 14357  0131EA  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 14358  0131EE  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 14359                           
 14360                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 14361  0131F2  D00C               	goto	l1787
 14362  0131F4                     l13975:
 14363                           
 14364                           ;Timer0.c: 50: {
 14365                           ;Timer0.c: 51: INDEX ++;
 14366  0131F4  0100               	movlb	0	; () banked
 14367  0131F6  2B8D               	incf	_INDEX& (0+255),f,b
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;Timer0.c: 52: if (INDEX >= 3)
 14371  0131F8  0E02               	movlw	2
 14372  0131FA  0100               	movlb	0	; () banked
 14373  0131FC  658D               	cpfsgt	_INDEX& (0+255),b
 14374  0131FE  D001               	goto	l1785
 14375  013200  D02F               	goto	u10700
 14376  013202                     l1785:
 14377                           
 14378                           ; BSR set to: 0
 14379                           ;Timer0.c: 56: if (INDEX >= 8)
 14380                           
 14381                           ; BSR set to: 0
 14382  013202  0E07               	movlw	7
 14383  013204  0100               	movlb	0	; () banked
 14384  013206  658D               	cpfsgt	_INDEX& (0+255),b
 14385  013208  D001               	goto	l1787
 14386  01320A  0012               	return	
 14387  01320C                     l1787:
 14388                           
 14389                           ; BSR set to: 0
 14390                           
 14391                           ; BSR set to: 0
 14392  01320C  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 14393  013210  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 14394  013214  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 14395  013218  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 14396  01321C  0100               	movlb	0	; () banked
 14397  01321E  518D               	movf	_INDEX& (0+255),w,b
 14398  013220  0D02               	mullw	2
 14399  013222  0EE5               	movlw	low Timer0_Init@PRESCALE
 14400  013224  24F3               	addwf	prodl,w,c
 14401  013226  6EF6               	movwf	tblptrl,c
 14402  013228  0EFC               	movlw	high Timer0_Init@PRESCALE
 14403  01322A  20F4               	addwfc	prodh,w,c
 14404  01322C  6EF7               	movwf	tblptrh,c
 14405  01322E                     	if	1	;There are 3 active tblptr bytes
 14406  01322E  6AF8               	clrf	tblptru,c
 14407  013230  0E00               	movlw	low (__mediumconst shr (0+16))
 14408  013232  22F8               	addwfc	tblptru,f,c
 14409  013234                     	endif
 14410  013234  0009               	tblrd		*+
 14411  013236  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 14412  01323A  0009               	tblrd		*+
 14413  01323C  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 14414  013240  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 14415  013244  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 14416  013248  0100               	movlb	0	; () banked
 14417  01324A  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14418  01324C  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14419  01324E  EC2C  F0A2         	call	___lldiv	;wreg free
 14420  013252  0100               	movlb	0	; () banked
 14421  013254  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 14422  013256  E1CE               	bnz	l13975
 14423  013258  0100               	movlb	0	; () banked
 14424  01325A  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 14425  01325C  B0D8               	btfsc	status,0,c
 14426  01325E  D7CA               	goto	l1784
 14427  013260                     u10700:
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;Timer0.c: 58: }
 14431                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 14432                           
 14433                           ; BSR set to: 0
 14434  013260  0100               	movlb	0	; () banked
 14435  013262  518D               	movf	_INDEX& (0+255),w,b
 14436  013264  0D02               	mullw	2
 14437  013266  0EE5               	movlw	low Timer0_Init@PRESCALE
 14438  013268  24F3               	addwf	prodl,w,c
 14439  01326A  6EF6               	movwf	tblptrl,c
 14440  01326C  0EFC               	movlw	high Timer0_Init@PRESCALE
 14441  01326E  20F4               	addwfc	prodh,w,c
 14442  013270  6EF7               	movwf	tblptrh,c
 14443  013272                     	if	1	;There are 3 active tblptr bytes
 14444  013272  6AF8               	clrf	tblptru,c
 14445  013274  0E00               	movlw	low (__mediumconst shr (0+16))
 14446  013276  22F8               	addwfc	tblptru,f,c
 14447  013278                     	endif
 14448  013278  0008               	tblrd		*
 14449  01327A  CFF5 F08C          	movff	tablat,Timer0_Init@PRE
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 14453  01327E  0EFF               	movlw	255
 14454  013280  0100               	movlb	0	; () banked
 14455  013282  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 14456  013284  0103               	movlb	3	; () banked
 14457  013286  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 14458  013288  0EFF               	movlw	255
 14459  01328A  0100               	movlb	0	; () banked
 14460  01328C  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14461  01328E  0103               	movlb	3	; () banked
 14462  013290  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14463  013292  0EFF               	movlw	255
 14464  013294  0100               	movlb	0	; () banked
 14465  013296  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14466  013298  0103               	movlb	3	; () banked
 14467  01329A  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14468  01329C  0EFF               	movlw	255
 14469  01329E  0100               	movlb	0	; () banked
 14470  0132A0  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14471  0132A2  0103               	movlb	3	; () banked
 14472  0132A4  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14473                           
 14474                           ; BSR set to: 3
 14475                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14476  0132A6  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14477  0132AA  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14478  0132AE  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14479  0132B2  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14480  0132B6  0100               	movlb	0	; () banked
 14481  0132B8  518C               	movf	Timer0_Init@PRE& (0+255),w,b
 14482  0132BA  0100               	movlb	0	; () banked
 14483  0132BC  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14484  0132BE  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14485  0132C0  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14486  0132C2  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14487  0132C4  EC2C  F0A2         	call	___lldiv	;wreg free
 14488  0132C8  0100               	movlb	0	; () banked
 14489  0132CA  1FBA               	comf	?___lldiv& (0+255),f,b
 14490  0132CC  0100               	movlb	0	; () banked
 14491  0132CE  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14492  0132D0  0100               	movlb	0	; () banked
 14493  0132D2  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14494  0132D4  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14495  0132D6  0EFF               	movlw	255
 14496  0132D8  0100               	movlb	0	; () banked
 14497  0132DA  25BA               	addwf	?___lldiv& (0+255),w,b
 14498  0132DC  6E29               	movwf	_COUNTER,c
 14499  0132DE  0EFF               	movlw	255
 14500  0132E0  0100               	movlb	0	; () banked
 14501  0132E2  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14502  0132E4  6E2A               	movwf	_COUNTER+1,c
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;Timer0.c: 68: Timer0_Clear();
 14506  0132E6  EC34  F0B4         	call	_Timer0_Clear	;wreg free
 14507                           
 14508                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14509  0132EA  8ED5               	bsf	4053,7,c	;volatile
 14510  0132EC  0012               	return		;funcret
 14511  0132EE                     __end_of_Timer0_Init:
 14512                           	opt stack 0
 14513                           tblptru	equ	0xFF8
 14514                           tblptrh	equ	0xFF7
 14515                           tblptrl	equ	0xFF6
 14516                           tablat	equ	0xFF5
 14517                           prodh	equ	0xFF4
 14518                           prodl	equ	0xFF3
 14519                           intcon	equ	0xFF2
 14520                           postinc0	equ	0xFEE
 14521                           wreg	equ	0xFE8
 14522                           indf1	equ	0xFE7
 14523                           postdec1	equ	0xFE5
 14524                           fsr1h	equ	0xFE2
 14525                           fsr1l	equ	0xFE1
 14526                           indf2	equ	0xFDF
 14527                           postinc2	equ	0xFDE
 14528                           postdec2	equ	0xFDD
 14529                           fsr2h	equ	0xFDA
 14530                           fsr2l	equ	0xFD9
 14531                           status	equ	0xFD8
 14532                           
 14533 ;; *************** function _Timer0_Clear *****************
 14534 ;; Defined at:
 14535 ;;		line 20 in file "Library/Timer0.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;		None
 14538 ;; Auto vars:     Size  Location     Type
 14539 ;;		None
 14540 ;; Return value:  Size  Location     Type
 14541 ;;                  1    wreg      void 
 14542 ;; Registers used:
 14543 ;;		None
 14544 ;; Tracked objects:
 14545 ;;		On entry : 0/0
 14546 ;;		On exit  : 0/0
 14547 ;;		Unchanged: 0/0
 14548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14553 ;;Total ram usage:        0 bytes
 14554 ;; Hardware stack levels used:    1
 14555 ;; Hardware stack levels required when called:    7
 14556 ;; This function calls:
 14557 ;;		Nothing
 14558 ;; This function is called by:
 14559 ;;		_Timer0_Init
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           	psect	text60
 14564  016868                     __ptext60:
 14565                           	opt stack 0
 14566  016868                     _Timer0_Clear:
 14567                           	opt stack 19
 14568                           
 14569                           ;Timer0.c: 22: TMR0 = COUNTER;
 14570                           
 14571                           ;incstack = 0
 14572  016868  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14573  01686C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14574                           
 14575                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14576  016870  94F2               	bcf	intcon,2,c	;volatile
 14577  016872  0012               	return		;funcret
 14578  016874                     __end_of_Timer0_Clear:
 14579                           	opt stack 0
 14580                           tblptru	equ	0xFF8
 14581                           tblptrh	equ	0xFF7
 14582                           tblptrl	equ	0xFF6
 14583                           tablat	equ	0xFF5
 14584                           prodh	equ	0xFF4
 14585                           prodl	equ	0xFF3
 14586                           intcon	equ	0xFF2
 14587                           postinc0	equ	0xFEE
 14588                           wreg	equ	0xFE8
 14589                           indf1	equ	0xFE7
 14590                           postdec1	equ	0xFE5
 14591                           fsr1h	equ	0xFE2
 14592                           fsr1l	equ	0xFE1
 14593                           indf2	equ	0xFDF
 14594                           postinc2	equ	0xFDE
 14595                           postdec2	equ	0xFDD
 14596                           fsr2h	equ	0xFDA
 14597                           fsr2l	equ	0xFD9
 14598                           status	equ	0xFD8
 14599                           
 14600 ;; *************** function _MXK_Init *****************
 14601 ;; Defined at:
 14602 ;;		line 33 in file "Library/MXK.c"
 14603 ;; Parameters:    Size  Location     Type
 14604 ;;		None
 14605 ;; Auto vars:     Size  Location     Type
 14606 ;;		None
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  1    wreg      void 
 14609 ;; Registers used:
 14610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;Total ram usage:        0 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; Hardware stack levels required when called:   16
 14623 ;; This function calls:
 14624 ;;		_LED_Init
 14625 ;;		_Port_Init
 14626 ;;		_Port_SetPin
 14627 ;;		_Port_SetPinType
 14628 ;;		_Port_SetQuadType
 14629 ;;		_Port_SetType
 14630 ;;		_delay_ms
 14631 ;; This function is called by:
 14632 ;;		_init
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text61
 14637  012D36                     __ptext61:
 14638                           	opt stack 0
 14639  012D36                     _MXK_Init:
 14640                           	opt stack 13
 14641                           
 14642                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14643                           
 14644                           ;incstack = 0
 14645  012D36  0E01               	movlw	1
 14646  012D38  6E4B               	movwf	_Bus_State,c
 14647                           
 14648                           ;MXK.c: 36: lQueue = (Function)0;
 14649  012D3A  0E00               	movlw	0
 14650  012D3C  0100               	movlb	0	; () banked
 14651  012D3E  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14652  012D40  0E00               	movlw	0
 14653  012D42  0100               	movlb	0	; () banked
 14654  012D44  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14655  012D46  0E00               	movlw	0
 14656  012D48  0100               	movlb	0	; () banked
 14657  012D4A  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14661  012D4C  0EB8               	movlw	low _PortA
 14662  012D4E  0101               	movlb	1	; () banked
 14663  012D50  6F01               	movwf	Port_Init@pInput& (0+255),b
 14664  012D52  0E03               	movlw	high _PortA
 14665  012D54  0101               	movlb	1	; () banked
 14666  012D56  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14667  012D58  0E00               	movlw	0
 14668  012D5A  0101               	movlb	1	; () banked
 14669  012D5C  6F03               	movwf	Port_Init@pPort& (0+255),b
 14670  012D5E  EC0F  F095         	call	_Port_Init	;wreg free
 14671                           
 14672                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14673  012D62  0EAE               	movlw	low _PortB
 14674  012D64  0101               	movlb	1	; () banked
 14675  012D66  6F01               	movwf	Port_Init@pInput& (0+255),b
 14676  012D68  0E03               	movlw	high _PortB
 14677  012D6A  0101               	movlb	1	; () banked
 14678  012D6C  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14679  012D6E  0E01               	movlw	1
 14680  012D70  0101               	movlb	1	; () banked
 14681  012D72  6F03               	movwf	Port_Init@pPort& (0+255),b
 14682  012D74  EC0F  F095         	call	_Port_Init	;wreg free
 14683                           
 14684                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14685  012D78  0EA5               	movlw	low _PortC
 14686  012D7A  0101               	movlb	1	; () banked
 14687  012D7C  6F01               	movwf	Port_Init@pInput& (0+255),b
 14688  012D7E  0E00               	movlw	high _PortC
 14689  012D80  0101               	movlb	1	; () banked
 14690  012D82  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14691  012D84  0E02               	movlw	2
 14692  012D86  0101               	movlb	1	; () banked
 14693  012D88  6F03               	movwf	Port_Init@pPort& (0+255),b
 14694  012D8A  EC0F  F095         	call	_Port_Init	;wreg free
 14695                           
 14696                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14697  012D8E  0E9B               	movlw	low _PortD
 14698  012D90  0101               	movlb	1	; () banked
 14699  012D92  6F01               	movwf	Port_Init@pInput& (0+255),b
 14700  012D94  0E00               	movlw	high _PortD
 14701  012D96  0101               	movlb	1	; () banked
 14702  012D98  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14703  012D9A  0E03               	movlw	3
 14704  012D9C  0101               	movlb	1	; () banked
 14705  012D9E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14706  012DA0  EC0F  F095         	call	_Port_Init	;wreg free
 14707                           
 14708                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14709  012DA4  0E91               	movlw	low _PortE
 14710  012DA6  0101               	movlb	1	; () banked
 14711  012DA8  6F01               	movwf	Port_Init@pInput& (0+255),b
 14712  012DAA  0E00               	movlw	high _PortE
 14713  012DAC  0101               	movlb	1	; () banked
 14714  012DAE  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14715  012DB0  0E04               	movlw	4
 14716  012DB2  0101               	movlb	1	; () banked
 14717  012DB4  6F03               	movwf	Port_Init@pPort& (0+255),b
 14718  012DB6  EC0F  F095         	call	_Port_Init	;wreg free
 14719                           
 14720                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14721  012DBA  0EC2               	movlw	low _PortF
 14722  012DBC  0101               	movlb	1	; () banked
 14723  012DBE  6F01               	movwf	Port_Init@pInput& (0+255),b
 14724  012DC0  0E03               	movlw	high _PortF
 14725  012DC2  0101               	movlb	1	; () banked
 14726  012DC4  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14727  012DC6  0E05               	movlw	5
 14728  012DC8  0101               	movlb	1	; () banked
 14729  012DCA  6F03               	movwf	Port_Init@pPort& (0+255),b
 14730  012DCC  EC0F  F095         	call	_Port_Init	;wreg free
 14731                           
 14732                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14733  012DD0  0EA4               	movlw	low _PortG
 14734  012DD2  0101               	movlb	1	; () banked
 14735  012DD4  6F01               	movwf	Port_Init@pInput& (0+255),b
 14736  012DD6  0E03               	movlw	high _PortG
 14737  012DD8  0101               	movlb	1	; () banked
 14738  012DDA  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14739  012DDC  0E06               	movlw	6
 14740  012DDE  0101               	movlb	1	; () banked
 14741  012DE0  6F03               	movwf	Port_Init@pPort& (0+255),b
 14742  012DE2  EC0F  F095         	call	_Port_Init	;wreg free
 14743                           
 14744                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14745  012DE6  0EC2               	movlw	low _PortF
 14746  012DE8  0100               	movlb	0	; () banked
 14747  012DEA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14748  012DEC  0E03               	movlw	high _PortF
 14749  012DEE  0100               	movlb	0	; () banked
 14750  012DF0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14751  012DF2  0E05               	movlw	5
 14752  012DF4  0100               	movlb	0	; () banked
 14753  012DF6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14754  012DF8  0E00               	movlw	0
 14755  012DFA  0100               	movlb	0	; () banked
 14756  012DFC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14757  012DFE  EC60  F093         	call	_Port_SetPinType	;wreg free
 14758                           
 14759                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14760  012E02  0EAE               	movlw	low _PortB
 14761  012E04  0100               	movlb	0	; () banked
 14762  012E06  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14763  012E08  0E03               	movlw	high _PortB
 14764  012E0A  0100               	movlb	0	; () banked
 14765  012E0C  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14766  012E0E  0E00               	movlw	0
 14767  012E10  0100               	movlb	0	; () banked
 14768  012E12  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14769  012E14  0E00               	movlw	0
 14770  012E16  0100               	movlb	0	; () banked
 14771  012E18  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14772  012E1A  EC53  F08D         	call	_Port_SetQuadType	;wreg free
 14773                           
 14774                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14775  012E1E  0EC2               	movlw	low _PortF
 14776  012E20  0100               	movlb	0	; () banked
 14777  012E22  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14778  012E24  0E03               	movlw	high _PortF
 14779  012E26  0100               	movlb	0	; () banked
 14780  012E28  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14781  012E2A  0E06               	movlw	6
 14782  012E2C  0100               	movlb	0	; () banked
 14783  012E2E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14784  012E30  0E03               	movlw	3
 14785  012E32  0100               	movlb	0	; () banked
 14786  012E34  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14787  012E36  EC60  F093         	call	_Port_SetPinType	;wreg free
 14788                           
 14789                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14790  012E3A  0EA4               	movlw	low _PortG
 14791  012E3C  0100               	movlb	0	; () banked
 14792  012E3E  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14793  012E40  0E03               	movlw	high _PortG
 14794  012E42  0100               	movlb	0	; () banked
 14795  012E44  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14796  012E46  0E03               	movlw	3
 14797  012E48  0100               	movlb	0	; () banked
 14798  012E4A  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14799  012E4C  EC7E  F08E         	call	_Port_SetType	;wreg free
 14800                           
 14801                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14802  012E50  0EA4               	movlw	low _PortG
 14803  012E52  0100               	movlb	0	; () banked
 14804  012E54  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14805  012E56  0E03               	movlw	high _PortG
 14806  012E58  0100               	movlb	0	; () banked
 14807  012E5A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14808  012E5C  0E04               	movlw	4
 14809  012E5E  0100               	movlb	0	; () banked
 14810  012E60  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14811  012E62  0E00               	movlw	0
 14812  012E64  0100               	movlb	0	; () banked
 14813  012E66  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14814  012E68  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 14815                           
 14816                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14817  012E6C  0EC2               	movlw	low _PortF
 14818  012E6E  0100               	movlb	0	; () banked
 14819  012E70  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14820  012E72  0E03               	movlw	high _PortF
 14821  012E74  0100               	movlb	0	; () banked
 14822  012E76  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14823  012E78  0E06               	movlw	6
 14824  012E7A  0100               	movlb	0	; () banked
 14825  012E7C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14826  012E7E  0E01               	movlw	1
 14827  012E80  0100               	movlb	0	; () banked
 14828  012E82  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14829  012E84  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 14830                           
 14831                           ;MXK.c: 55: LED_Init(eLED1);
 14832  012E88  0E00               	movlw	0
 14833  012E8A  EC0A  F0AD         	call	_LED_Init
 14834                           
 14835                           ;MXK.c: 56: LED_Init(eLED2);
 14836  012E8E  0E01               	movlw	1
 14837  012E90  EC0A  F0AD         	call	_LED_Init
 14838                           
 14839                           ;MXK.c: 58: PIR1 = 0;
 14840  012E94  0E00               	movlw	0
 14841  012E96  6E9E               	movwf	3998,c	;volatile
 14842                           
 14843                           ;MXK.c: 59: PIR2 = 0;
 14844  012E98  0E00               	movlw	0
 14845  012E9A  6EA1               	movwf	4001,c	;volatile
 14846                           
 14847                           ;MXK.c: 60: PIR3 = 0;
 14848  012E9C  0E00               	movlw	0
 14849  012E9E  6EA4               	movwf	4004,c	;volatile
 14850                           
 14851                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14852  012EA0  8E9B               	bsf	3995,7,c	;volatile
 14853                           
 14854                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14855  012EA2  8C9B               	bsf	3995,6,c	;volatile
 14856                           
 14857                           ;MXK.c: 66: delay_ms(100);
 14858  012EA4  0E00               	movlw	0
 14859  012EA6  0100               	movlb	0	; () banked
 14860  012EA8  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14861  012EAA  0E64               	movlw	100
 14862  012EAC  6FBA               	movwf	delay_ms@ms& (0+255),b
 14863  012EAE  EC08  F0AC         	call	_delay_ms	;wreg free
 14864                           
 14865                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14866  012EB2  8ED0               	bsf	4048,7,c	;volatile
 14867  012EB4  0012               	return		;funcret
 14868  012EB6                     __end_of_MXK_Init:
 14869                           	opt stack 0
 14870                           tblptru	equ	0xFF8
 14871                           tblptrh	equ	0xFF7
 14872                           tblptrl	equ	0xFF6
 14873                           tablat	equ	0xFF5
 14874                           prodh	equ	0xFF4
 14875                           prodl	equ	0xFF3
 14876                           intcon	equ	0xFF2
 14877                           postinc0	equ	0xFEE
 14878                           wreg	equ	0xFE8
 14879                           indf1	equ	0xFE7
 14880                           postdec1	equ	0xFE5
 14881                           fsr1h	equ	0xFE2
 14882                           fsr1l	equ	0xFE1
 14883                           indf2	equ	0xFDF
 14884                           postinc2	equ	0xFDE
 14885                           postdec2	equ	0xFDD
 14886                           fsr2h	equ	0xFDA
 14887                           fsr2l	equ	0xFD9
 14888                           status	equ	0xFD8
 14889                           
 14890 ;; *************** function _Port_Init *****************
 14891 ;; Defined at:
 14892 ;;		line 150 in file "Library/Port.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14895 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14896 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14897 ;;  pPort           1    3[BANK1 ] enum E6786
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;  i               1    6[BANK1 ] unsigned char 
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  1    wreg      void 
 14902 ;; Registers used:
 14903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14909 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14913 ;;Total ram usage:        6 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:   15
 14916 ;; This function calls:
 14917 ;;		_GetPortPORT
 14918 ;;		_GetPortProperties
 14919 ;;		_GetPortTRIS
 14920 ;;		_Port_Set
 14921 ;;		_Port_SetPinType
 14922 ;;		_Port_SetType
 14923 ;;		_Word_GetPair
 14924 ;; This function is called by:
 14925 ;;		_MXK_Init
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text62
 14930  012A1E                     __ptext62:
 14931                           	opt stack 0
 14932  012A1E                     _Port_Init:
 14933                           	opt stack 13
 14934                           
 14935                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14936                           
 14937                           ;incstack = 0
 14938  012A1E  0101               	movlb	1	; () banked
 14939  012A20  5103               	movf	Port_Init@pPort& (0+255),w,b
 14940  012A22  EC41  F0A5         	call	_GetPortProperties
 14941  012A26  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14942  012A2A  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14943  012A2E  0100               	movlb	0	; () banked
 14944  012A30  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14945  012A34  0100               	movlb	0	; () banked
 14946  012A36  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14947                           
 14948                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14949  012A3A  0101               	movlb	1	; () banked
 14950  012A3C  5103               	movf	Port_Init@pPort& (0+255),w,b
 14951  012A3E  EC94  F0A5         	call	_GetPortPORT
 14952  012A42  0101               	movlb	1	; () banked
 14953  012A44  EE20 F006          	lfsr	2,6
 14954  012A48  5101               	movf	Port_Init@pInput& (0+255),w,b
 14955  012A4A  26D9               	addwf	fsr2l,f,c
 14956  012A4C  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14957  012A4E  22DA               	addwfc	fsr2h,f,c
 14958  012A50  0100               	movlb	0	; () banked
 14959  012A52  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14960  012A56  0100               	movlb	0	; () banked
 14961  012A58  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14962                           
 14963                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14964  012A5C  0101               	movlb	1	; () banked
 14965  012A5E  5103               	movf	Port_Init@pPort& (0+255),w,b
 14966  012A60  EC94  F0A5         	call	_GetPortPORT
 14967  012A64  0101               	movlb	1	; () banked
 14968  012A66  EE20 F004          	lfsr	2,4
 14969  012A6A  5101               	movf	Port_Init@pInput& (0+255),w,b
 14970  012A6C  26D9               	addwf	fsr2l,f,c
 14971  012A6E  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14972  012A70  22DA               	addwfc	fsr2h,f,c
 14973  012A72  0100               	movlb	0	; () banked
 14974  012A74  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14975  012A78  0100               	movlb	0	; () banked
 14976  012A7A  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14977                           
 14978                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14979  012A7E  0101               	movlb	1	; () banked
 14980  012A80  5103               	movf	Port_Init@pPort& (0+255),w,b
 14981  012A82  ECEE  F0A4         	call	_GetPortTRIS
 14982  012A86  0101               	movlb	1	; () banked
 14983  012A88  EE20 F002          	lfsr	2,2
 14984  012A8C  5101               	movf	Port_Init@pInput& (0+255),w,b
 14985  012A8E  26D9               	addwf	fsr2l,f,c
 14986  012A90  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14987  012A92  22DA               	addwfc	fsr2h,f,c
 14988  012A94  0100               	movlb	0	; () banked
 14989  012A96  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14990  012A9A  0100               	movlb	0	; () banked
 14991  012A9C  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14995  012AA0  0101               	movlb	1	; () banked
 14996  012AA2  EE20 F004          	lfsr	2,4
 14997  012AA6  5101               	movf	Port_Init@pInput& (0+255),w,b
 14998  012AA8  26D9               	addwf	fsr2l,f,c
 14999  012AAA  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15000  012AAC  22DA               	addwfc	fsr2h,f,c
 15001  012AAE  CFDE F104          	movff	postinc2,??_Port_Init
 15002  012AB2  CFDD F105          	movff	postdec2,??_Port_Init+1
 15003  012AB6  C104  FFD9         	movff	??_Port_Init,fsr2l
 15004  012ABA  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 15005  012ABE  0E00               	movlw	0
 15006  012AC0  6EDF               	movwf	indf2,c
 15007                           
 15008                           ; BSR set to: 1
 15009                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 15010  012AC2  0101               	movlb	1	; () banked
 15011  012AC4  EE20 F002          	lfsr	2,2
 15012  012AC8  5101               	movf	Port_Init@pInput& (0+255),w,b
 15013  012ACA  26D9               	addwf	fsr2l,f,c
 15014  012ACC  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15015  012ACE  22DA               	addwfc	fsr2h,f,c
 15016  012AD0  CFDE F104          	movff	postinc2,??_Port_Init
 15017  012AD4  CFDD F105          	movff	postdec2,??_Port_Init+1
 15018  012AD8  C104  FFD9         	movff	??_Port_Init,fsr2l
 15019  012ADC  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 15020  012AE0  0EFF               	movlw	255
 15021  012AE2  6EDF               	movwf	indf2,c
 15022                           
 15023                           ; BSR set to: 1
 15024                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 15025  012AE4  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 15026  012AE8  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 15027  012AEC  0E00               	movlw	0
 15028  012AEE  0100               	movlb	0	; () banked
 15029  012AF0  6FF6               	movwf	Port_SetType@pType& (0+255),b
 15030  012AF2  EC7E  F08E         	call	_Port_SetType	;wreg free
 15031                           
 15032                           ;Port.c: 166: UINT8 i;
 15033                           ;Port.c: 167: for (i=0; i<8; i++)
 15034  012AF6  0E00               	movlw	0
 15035  012AF8  0101               	movlb	1	; () banked
 15036  012AFA  6F06               	movwf	Port_Init@i& (0+255),b
 15037  012AFC                     l14183:
 15038                           
 15039                           ; BSR set to: 1
 15040  012AFC  0E07               	movlw	7
 15041  012AFE  0101               	movlb	1	; () banked
 15042  012B00  6506               	cpfsgt	Port_Init@i& (0+255),b
 15043  012B02  D031               	goto	l403
 15044  012B04  D04B               	goto	u10920
 15045  012B06                     
 15046                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 15047                           
 15048                           ; BSR set to: 1
 15049  012B06  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15050  012B0A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15051  012B0E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15052  012B12  0E03               	movlw	3
 15053  012B14  0100               	movlb	0	; () banked
 15054  012B16  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15055  012B18  EC60  F093         	call	_Port_SetPinType	;wreg free
 15056                           
 15057                           ;Port.c: 173: break;
 15058  012B1C  D03C               	goto	l405
 15059  012B1E                     
 15060                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 15061  012B1E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15062  012B22  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15063  012B26  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15064  012B2A  0E02               	movlw	2
 15065  012B2C  0100               	movlb	0	; () banked
 15066  012B2E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15067  012B30  EC60  F093         	call	_Port_SetPinType	;wreg free
 15068                           
 15069                           ;Port.c: 176: break;
 15070  012B34  D030               	goto	l405
 15071  012B36                     
 15072                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 15073  012B36  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15074  012B3A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15075  012B3E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15076  012B42  0E01               	movlw	1
 15077  012B44  0100               	movlb	0	; () banked
 15078  012B46  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15079  012B48  EC60  F093         	call	_Port_SetPinType	;wreg free
 15080                           
 15081                           ;Port.c: 179: break;
 15082  012B4C  D024               	goto	l405
 15083  012B4E                     
 15084                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 15085  012B4E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15086  012B52  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15087  012B56  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15088  012B5A  0E00               	movlw	0
 15089  012B5C  0100               	movlb	0	; () banked
 15090  012B5E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15091  012B60  EC60  F093         	call	_Port_SetPinType	;wreg free
 15092                           
 15093                           ;Port.c: 183: }
 15094                           
 15095                           ;Port.c: 182: break;
 15096  012B64  D018               	goto	l405
 15097  012B66                     l403:
 15098  012B66  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 15099  012B6A  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15100  012B6E  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 15101  012B72  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 15102  012B76  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 15103  012B7A  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15104                           
 15105                           ; Switch size 1, requested type "space"
 15106                           ; Number of cases is 4, Range of values is 0 to 3
 15107                           ; switch strategies available:
 15108                           ; Name         Instructions Cycles
 15109                           ; simple_byte           13     7 (average)
 15110                           ;	Chosen strategy is simple_byte
 15111  012B7E  0A00               	xorlw	0	; case 0
 15112  012B80  B4D8               	btfsc	status,2,c
 15113  012B82  D7C1               	goto	l404
 15114  012B84  0A01               	xorlw	1	; case 1
 15115  012B86  B4D8               	btfsc	status,2,c
 15116  012B88  D7D6               	goto	l407
 15117  012B8A  0A03               	xorlw	3	; case 2
 15118  012B8C  B4D8               	btfsc	status,2,c
 15119  012B8E  D7C7               	goto	l406
 15120  012B90  0A01               	xorlw	1	; case 3
 15121  012B92  B4D8               	btfsc	status,2,c
 15122  012B94  D7DC               	goto	l408
 15123  012B96                     l405:
 15124  012B96  0101               	movlb	1	; () banked
 15125  012B98  2B06               	incf	Port_Init@i& (0+255),f,b
 15126  012B9A  D7B0               	goto	l14183
 15127  012B9C                     u10920:
 15128                           
 15129                           ; BSR set to: 1
 15130                           ;Port.c: 184: }
 15131                           ;Port.c: 185: Port_Set(pInput, 0x00);
 15132                           
 15133                           ; BSR set to: 1
 15134  012B9C  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 15135  012BA0  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 15136  012BA4  0E00               	movlw	0
 15137  012BA6  0100               	movlb	0	; () banked
 15138  012BA8  6FCB               	movwf	Port_Set@pValue& (0+255),b
 15139  012BAA  EC34  F08A         	call	_Port_Set	;wreg free
 15140  012BAE  0012               	return		;funcret
 15141  012BB0                     __end_of_Port_Init:
 15142                           	opt stack 0
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           intcon	equ	0xFF2
 15150                           postinc0	equ	0xFEE
 15151                           wreg	equ	0xFE8
 15152                           indf1	equ	0xFE7
 15153                           postdec1	equ	0xFE5
 15154                           fsr1h	equ	0xFE2
 15155                           fsr1l	equ	0xFE1
 15156                           indf2	equ	0xFDF
 15157                           postinc2	equ	0xFDE
 15158                           postdec2	equ	0xFDD
 15159                           fsr2h	equ	0xFDA
 15160                           fsr2l	equ	0xFD9
 15161                           status	equ	0xFD8
 15162                           
 15163 ;; *************** function _Port_SetType *****************
 15164 ;; Defined at:
 15165 ;;		line 513 in file "Library/Port.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 15168 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15169 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15170 ;;  pType           1   60[BANK0 ] enum E6795
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;  Output          1    0[BANK1 ] enum E6475
 15173 ;; Return value:  Size  Location     Type
 15174 ;;                  1    wreg      enum E6475
 15175 ;; Registers used:
 15176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15182 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;Total ram usage:        6 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; Hardware stack levels required when called:   14
 15189 ;; This function calls:
 15190 ;;		_Port_CheckPortType
 15191 ;;		_Word_SetPair
 15192 ;; This function is called by:
 15193 ;;		_Port_Init
 15194 ;;		_MXK_Init
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           	psect	text63
 15199  011CFC                     __ptext63:
 15200                           	opt stack 0
 15201  011CFC                     _Port_SetType:
 15202                           	opt stack 14
 15203                           
 15204                           ;Port.c: 515: ePinError Output = ePinErrorState;
 15205                           
 15206                           ;incstack = 0
 15207  011CFC  0E05               	movlw	5
 15208  011CFE  0101               	movlb	1	; () banked
 15209  011D00  6F00               	movwf	Port_SetType@Output& (0+255),b
 15210                           
 15211                           ;Port.c: 517: switch (pType)
 15212  011D02  D07A               	goto	l509
 15213  011D04                     
 15214                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 15215                           
 15216                           ; BSR set to: 1
 15217  011D04  0100               	movlb	0	; () banked
 15218  011D06  EE20 F002          	lfsr	2,2
 15219  011D0A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15220  011D0C  26D9               	addwf	fsr2l,f,c
 15221  011D0E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15222  011D10  22DA               	addwfc	fsr2h,f,c
 15223  011D12  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15224  011D16  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15225  011D1A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15226  011D1E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15227  011D22  0EFF               	movlw	255
 15228  011D24  D067               	goto	L10
 15229  011D26                     
 15230                           ; BSR set to: 0
 15231                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 15232                           
 15233                           ; BSR set to: 0
 15234  011D26  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15235  011D2A  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15236  011D2E  0E01               	movlw	1
 15237  011D30  0100               	movlb	0	; () banked
 15238  011D32  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15239  011D34  EC08  F0AF         	call	_Port_CheckPortType	;wreg free
 15240  011D38  0101               	movlb	1	; () banked
 15241  011D3A  6F00               	movwf	Port_SetType@Output& (0+255),b
 15242  011D3C  0101               	movlb	1	; () banked
 15243  011D3E  5100               	movf	Port_SetType@Output& (0+255),w,b
 15244  011D40  A4D8               	btfss	status,2,c
 15245  011D42  0012               	return	
 15246                           
 15247                           ; BSR set to: 1
 15248                           ;Port.c: 527: {
 15249                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 15250  011D44  0100               	movlb	0	; () banked
 15251  011D46  EE20 F002          	lfsr	2,2
 15252  011D4A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15253  011D4C  26D9               	addwf	fsr2l,f,c
 15254  011D4E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15255  011D50  22DA               	addwfc	fsr2h,f,c
 15256  011D52  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15257  011D56  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15258  011D5A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15259  011D5E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15260  011D62  0E00               	movlw	0
 15261  011D64  6EDF               	movwf	indf2,c
 15262                           
 15263                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 15264  011D66  0100               	movlb	0	; () banked
 15265  011D68  EE20 F004          	lfsr	2,4
 15266  011D6C  D036               	goto	L21
 15267  011D6E                     
 15268                           ; BSR set to: 0
 15269                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 15270                           
 15271                           ; BSR set to: 0
 15272  011D6E  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15273  011D72  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15274  011D76  0E02               	movlw	2
 15275  011D78  0100               	movlb	0	; () banked
 15276  011D7A  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15277  011D7C  EC08  F0AF         	call	_Port_CheckPortType	;wreg free
 15278  011D80  0101               	movlb	1	; () banked
 15279  011D82  6F00               	movwf	Port_SetType@Output& (0+255),b
 15280  011D84  0101               	movlb	1	; () banked
 15281  011D86  5100               	movf	Port_SetType@Output& (0+255),w,b
 15282  011D88  A4D8               	btfss	status,2,c
 15283  011D8A  0012               	return	
 15284                           
 15285                           ; BSR set to: 1
 15286                           ;Port.c: 538: {
 15287                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 15288  011D8C  0100               	movlb	0	; () banked
 15289  011D8E  EE20 F002          	lfsr	2,2
 15290  011D92  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15291  011D94  26D9               	addwf	fsr2l,f,c
 15292  011D96  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15293  011D98  22DA               	addwfc	fsr2h,f,c
 15294  011D9A  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15295  011D9E  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15296  011DA2  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15297  011DA6  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15298  011DAA  0EFF               	movlw	255
 15299  011DAC  6EDF               	movwf	indf2,c
 15300                           
 15301                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 15302  011DAE  0100               	movlb	0	; () banked
 15303  011DB0  EE20 F004          	lfsr	2,4
 15304  011DB4  D7AA               	goto	L11
 15305  011DB6                     
 15306                           ; BSR set to: 0
 15307                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 15308                           
 15309                           ; BSR set to: 0
 15310  011DB6  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15311  011DBA  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15312  011DBE  0E00               	movlw	0
 15313  011DC0  0100               	movlb	0	; () banked
 15314  011DC2  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15315  011DC4  EC08  F0AF         	call	_Port_CheckPortType	;wreg free
 15316  011DC8  0101               	movlb	1	; () banked
 15317  011DCA  6F00               	movwf	Port_SetType@Output& (0+255),b
 15318  011DCC  0101               	movlb	1	; () banked
 15319  011DCE  5100               	movf	Port_SetType@Output& (0+255),w,b
 15320  011DD0  A4D8               	btfss	status,2,c
 15321  011DD2  0012               	return	
 15322                           
 15323                           ; BSR set to: 1
 15324                           ;Port.c: 549: {
 15325                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 15326  011DD4  0100               	movlb	0	; () banked
 15327  011DD6  EE20 F002          	lfsr	2,2
 15328  011DDA                     L21:
 15329  011DDA  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15330  011DDC  26D9               	addwf	fsr2l,f,c
 15331  011DDE  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15332  011DE0  22DA               	addwfc	fsr2h,f,c
 15333  011DE2  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15334  011DE6  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15335  011DEA  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15336  011DEE  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15337  011DF2  0E00               	movlw	0
 15338  011DF4                     L10:
 15339  011DF4  6EDF               	movwf	indf2,c
 15340                           
 15341                           ;Port.c: 552: }
 15342  011DF6  D00E               	goto	l511
 15343  011DF8                     l509:
 15344                           
 15345                           ; BSR set to: 0
 15346  011DF8  0100               	movlb	0	; () banked
 15347  011DFA  51F6               	movf	Port_SetType@pType& (0+255),w,b
 15348                           
 15349                           ; Switch size 1, requested type "space"
 15350                           ; Number of cases is 4, Range of values is 0 to 3
 15351                           ; switch strategies available:
 15352                           ; Name         Instructions Cycles
 15353                           ; simple_byte           13     7 (average)
 15354                           ;	Chosen strategy is simple_byte
 15355  011DFC  0A00               	xorlw	0	; case 0
 15356  011DFE  B4D8               	btfsc	status,2,c
 15357  011E00  D781               	goto	l510
 15358  011E02  0A01               	xorlw	1	; case 1
 15359  011E04  B4D8               	btfsc	status,2,c
 15360  011E06  D78F               	goto	l512
 15361  011E08  0A03               	xorlw	3	; case 2
 15362  011E0A  B4D8               	btfsc	status,2,c
 15363  011E0C  D7B0               	goto	l516
 15364  011E0E  0A01               	xorlw	1	; case 3
 15365  011E10  B4D8               	btfsc	status,2,c
 15366  011E12  D7D1               	goto	l519
 15367  011E14                     l511:
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 15371                           
 15372                           ; BSR set to: 0
 15373  011E14  0E08               	movlw	8
 15374  011E16  0100               	movlb	0	; () banked
 15375  011E18  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15376  011E1A  0100               	movlb	0	; () banked
 15377  011E1C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15378  011E1E  0E00               	movlw	0
 15379  011E20  0100               	movlb	0	; () banked
 15380  011E22  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15381  011E24  0100               	movlb	0	; () banked
 15382  011E26  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15383  011E28  0E00               	movlw	0
 15384  011E2A  0100               	movlb	0	; () banked
 15385  011E2C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15386  011E2E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15387  011E32  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15388                           
 15389                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 15390  011E36  0E08               	movlw	8
 15391  011E38  0100               	movlb	0	; () banked
 15392  011E3A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15393  011E3C  0100               	movlb	0	; () banked
 15394  011E3E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15395  011E40  0E00               	movlw	0
 15396  011E42  0100               	movlb	0	; () banked
 15397  011E44  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15398  011E46  0100               	movlb	0	; () banked
 15399  011E48  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15400  011E4A  0E01               	movlw	1
 15401  011E4C  0100               	movlb	0	; () banked
 15402  011E4E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15403  011E50  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15404  011E54  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15405                           
 15406                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 15407  011E58  0E08               	movlw	8
 15408  011E5A  0100               	movlb	0	; () banked
 15409  011E5C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15410  011E5E  0100               	movlb	0	; () banked
 15411  011E60  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15412  011E62  0E00               	movlw	0
 15413  011E64  0100               	movlb	0	; () banked
 15414  011E66  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15415  011E68  0100               	movlb	0	; () banked
 15416  011E6A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15417  011E6C  0E02               	movlw	2
 15418  011E6E  0100               	movlb	0	; () banked
 15419  011E70  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15420  011E72  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15421  011E76  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15422                           
 15423                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 15424  011E7A  0E08               	movlw	8
 15425  011E7C  0100               	movlb	0	; () banked
 15426  011E7E  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15427  011E80  0100               	movlb	0	; () banked
 15428  011E82  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15429  011E84  0E00               	movlw	0
 15430  011E86  0100               	movlb	0	; () banked
 15431  011E88  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15432  011E8A  0100               	movlb	0	; () banked
 15433  011E8C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15434  011E8E  0E03               	movlw	3
 15435  011E90  0100               	movlb	0	; () banked
 15436  011E92  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15437  011E94  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15438  011E98  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15439                           
 15440                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 15441  011E9C  0E08               	movlw	8
 15442  011E9E  0100               	movlb	0	; () banked
 15443  011EA0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15444  011EA2  0100               	movlb	0	; () banked
 15445  011EA4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15446  011EA6  0E00               	movlw	0
 15447  011EA8  0100               	movlb	0	; () banked
 15448  011EAA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15449  011EAC  0100               	movlb	0	; () banked
 15450  011EAE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15451  011EB0  0E04               	movlw	4
 15452  011EB2  0100               	movlb	0	; () banked
 15453  011EB4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15454  011EB6  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15455  011EBA  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15456                           
 15457                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 15458  011EBE  0E08               	movlw	8
 15459  011EC0  0100               	movlb	0	; () banked
 15460  011EC2  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15461  011EC4  0100               	movlb	0	; () banked
 15462  011EC6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15463  011EC8  0E00               	movlw	0
 15464  011ECA  0100               	movlb	0	; () banked
 15465  011ECC  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15466  011ECE  0100               	movlb	0	; () banked
 15467  011ED0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15468  011ED2  0E05               	movlw	5
 15469  011ED4  0100               	movlb	0	; () banked
 15470  011ED6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15471  011ED8  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15472  011EDC  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15473                           
 15474                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15475  011EE0  0E08               	movlw	8
 15476  011EE2  0100               	movlb	0	; () banked
 15477  011EE4  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15478  011EE6  0100               	movlb	0	; () banked
 15479  011EE8  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15480  011EEA  0E00               	movlw	0
 15481  011EEC  0100               	movlb	0	; () banked
 15482  011EEE  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15483  011EF0  0100               	movlb	0	; () banked
 15484  011EF2  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15485  011EF4  0E06               	movlw	6
 15486  011EF6  0100               	movlb	0	; () banked
 15487  011EF8  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15488  011EFA  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15489  011EFE  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15490                           
 15491                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15492  011F02  0E08               	movlw	8
 15493  011F04  0100               	movlb	0	; () banked
 15494  011F06  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15495  011F08  0100               	movlb	0	; () banked
 15496  011F0A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15497  011F0C  0E00               	movlw	0
 15498  011F0E  0100               	movlb	0	; () banked
 15499  011F10  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15500  011F12  0100               	movlb	0	; () banked
 15501  011F14  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15502  011F16  0E07               	movlw	7
 15503  011F18  0100               	movlb	0	; () banked
 15504  011F1A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15505  011F1C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15506  011F20  EC97  F0AF         	call	_Word_SetPair	;wreg free
 15507  011F24  0012               	return	
 15508  011F26                     __end_of_Port_SetType:
 15509                           	opt stack 0
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           postinc0	equ	0xFEE
 15518                           wreg	equ	0xFE8
 15519                           indf1	equ	0xFE7
 15520                           postdec1	equ	0xFE5
 15521                           fsr1h	equ	0xFE2
 15522                           fsr1l	equ	0xFE1
 15523                           indf2	equ	0xFDF
 15524                           postinc2	equ	0xFDE
 15525                           postdec2	equ	0xFDD
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function _Port_CheckPortType *****************
 15531 ;; Defined at:
 15532 ;;		line 138 in file "Library/Port.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15535 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15536 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15537 ;;  pDrive          1   56[BANK0 ] enum E6469
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;  Output          1   57[BANK0 ] enum E6475
 15540 ;; Return value:  Size  Location     Type
 15541 ;;                  1    wreg      enum E6475
 15542 ;; Registers used:
 15543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15553 ;;Total ram usage:        4 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:   13
 15556 ;; This function calls:
 15557 ;;		_Port_CheckQuadType
 15558 ;; This function is called by:
 15559 ;;		_Port_SetType
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           	psect	text64
 15564  015E10                     __ptext64:
 15565                           	opt stack 0
 15566  015E10                     _Port_CheckPortType:
 15567                           	opt stack 14
 15568                           
 15569                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15570                           
 15571                           ;incstack = 0
 15572  015E10  0E05               	movlw	5
 15573  015E12  0100               	movlb	0	; () banked
 15574  015E14  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15578  015E16  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15579  015E1A  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15580  015E1E  0E00               	movlw	0
 15581  015E20  0100               	movlb	0	; () banked
 15582  015E22  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15583  015E24  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15584  015E28  EC9A  F0AD         	call	_Port_CheckQuadType	;wreg free
 15585  015E2C  0100               	movlb	0	; () banked
 15586  015E2E  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15587  015E30  0100               	movlb	0	; () banked
 15588  015E32  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15589  015E34  A4D8               	btfss	status,2,c
 15590  015E36  D00D               	goto	l397
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15594  015E38  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15595  015E3C  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15596  015E40  0E01               	movlw	1
 15597  015E42  0100               	movlb	0	; () banked
 15598  015E44  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15599  015E46  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15600  015E4A  EC9A  F0AD         	call	_Port_CheckQuadType	;wreg free
 15601  015E4E  0100               	movlb	0	; () banked
 15602  015E50  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15603  015E52                     l397:
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;Port.c: 146: return Output;
 15607                           
 15608                           ; BSR set to: 0
 15609  015E52  0100               	movlb	0	; () banked
 15610  015E54  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15611  015E56  0012               	return	
 15612  015E58                     __end_of_Port_CheckPortType:
 15613                           	opt stack 0
 15614                           tblptru	equ	0xFF8
 15615                           tblptrh	equ	0xFF7
 15616                           tblptrl	equ	0xFF6
 15617                           tablat	equ	0xFF5
 15618                           prodh	equ	0xFF4
 15619                           prodl	equ	0xFF3
 15620                           intcon	equ	0xFF2
 15621                           postinc0	equ	0xFEE
 15622                           wreg	equ	0xFE8
 15623                           indf1	equ	0xFE7
 15624                           postdec1	equ	0xFE5
 15625                           fsr1h	equ	0xFE2
 15626                           fsr1l	equ	0xFE1
 15627                           indf2	equ	0xFDF
 15628                           postinc2	equ	0xFDE
 15629                           postdec2	equ	0xFDD
 15630                           fsr2h	equ	0xFDA
 15631                           fsr2l	equ	0xFD9
 15632                           status	equ	0xFD8
 15633                           
 15634 ;; *************** function _Port_Set *****************
 15635 ;; Defined at:
 15636 ;;		line 570 in file "Library/Port.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15639 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15640 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15641 ;;  pValue          1   17[BANK0 ] unsigned char 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15644 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15645 ;;  Type            1   38[BANK0 ] enum E6795
 15646 ;; Return value:  Size  Location     Type
 15647 ;;                  1    wreg      void 
 15648 ;; Registers used:
 15649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15650 ;; Tracked objects:
 15651 ;;		On entry : 0/0
 15652 ;;		On exit  : 0/0
 15653 ;;		Unchanged: 0/0
 15654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15655 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15657 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15658 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15659 ;;Total ram usage:       24 bytes
 15660 ;; Hardware stack levels used:    1
 15661 ;; Hardware stack levels required when called:   10
 15662 ;; This function calls:
 15663 ;;		_Byte_SetByte
 15664 ;;		_Word_GetPair
 15665 ;; This function is called by:
 15666 ;;		_Port_Init
 15667 ;;		_Port_Toggle
 15668 ;; This function uses a non-reentrant model
 15669 ;;
 15670                           
 15671                           	psect	text65
 15672  011468                     __ptext65:
 15673                           	opt stack 0
 15674  011468                     _Port_Set:
 15675                           	opt stack 17
 15676                           
 15677                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15678                           
 15679                           ; BSR set to: 0
 15680                           ;incstack = 0
 15681  011468  0E08               	movlw	8
 15682  01146A  0100               	movlb	0	; () banked
 15683  01146C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15684  01146E  0100               	movlb	0	; () banked
 15685  011470  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15686  011472  0E00               	movlw	0
 15687  011474  0100               	movlb	0	; () banked
 15688  011476  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15689  011478  0100               	movlb	0	; () banked
 15690  01147A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15691  01147C  0E00               	movlw	0
 15692  01147E  0100               	movlb	0	; () banked
 15693  011480  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15694  011482  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15695  011486  0100               	movlb	0	; () banked
 15696  011488  6FE0               	movwf	Port_Set@Type& (0+255),b
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15700  01148A  0100               	movlb	0	; () banked
 15701  01148C  51E0               	movf	Port_Set@Type& (0+255),w,b
 15702  01148E  0100               	movlb	0	; () banked
 15703  011490  6FCC               	movwf	??_Port_Set& (0+255),b
 15704  011492  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15705  011494  0E0E               	movlw	14
 15706  011496                     u10485:
 15707  011496  90D8               	bcf	status,0,c
 15708  011498  0100               	movlb	0	; () banked
 15709  01149A  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15710  01149C  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15711  01149E  2EE8               	decfsz	wreg,f,c
 15712  0114A0  D7FA               	goto	u10485
 15713  0114A2  0100               	movlb	0	; () banked
 15714  0114A4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15715  0114A6  0100               	movlb	0	; () banked
 15716  0114A8  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15717  0114AA  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15718  0114AC  0E0C               	movlw	12
 15719  0114AE                     u10495:
 15720  0114AE  90D8               	bcf	status,0,c
 15721  0114B0  0100               	movlb	0	; () banked
 15722  0114B2  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15723  0114B4  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15724  0114B6  2EE8               	decfsz	wreg,f,c
 15725  0114B8  D7FA               	goto	u10495
 15726  0114BA  0100               	movlb	0	; () banked
 15727  0114BC  51E0               	movf	Port_Set@Type& (0+255),w,b
 15728  0114BE  0100               	movlb	0	; () banked
 15729  0114C0  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15730  0114C2  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15731  0114C4  0E0A               	movlw	10
 15732  0114C6                     u10505:
 15733  0114C6  90D8               	bcf	status,0,c
 15734  0114C8  0100               	movlb	0	; () banked
 15735  0114CA  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15736  0114CC  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15737  0114CE  2EE8               	decfsz	wreg,f,c
 15738  0114D0  D7FA               	goto	u10505
 15739  0114D2  0100               	movlb	0	; () banked
 15740  0114D4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15741  0114D6  0100               	movlb	0	; () banked
 15742  0114D8  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15743  0114DA  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15744  0114DC  0100               	movlb	0	; () banked
 15745  0114DE  51E0               	movf	Port_Set@Type& (0+255),w,b
 15746  0114E0  0100               	movlb	0	; () banked
 15747  0114E2  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15748  0114E4  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15749  0114E6  0E06               	movlw	6
 15750  0114E8                     u10515:
 15751  0114E8  90D8               	bcf	status,0,c
 15752  0114EA  0100               	movlb	0	; () banked
 15753  0114EC  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15754  0114EE  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15755  0114F0  2EE8               	decfsz	wreg,f,c
 15756  0114F2  D7FA               	goto	u10515
 15757  0114F4  0100               	movlb	0	; () banked
 15758  0114F6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15759  0114F8  0100               	movlb	0	; () banked
 15760  0114FA  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15761  0114FC  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15762  0114FE  0100               	movlb	0	; () banked
 15763  011500  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15764  011502  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15765  011504  0EF0               	movlw	240
 15766  011506  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15767  011508  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15768  01150A  0B0F               	andlw	15
 15769  01150C  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15770  01150E  0EF0               	movlw	240
 15771  011510  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15772  011512  0100               	movlb	0	; () banked
 15773  011514  51E0               	movf	Port_Set@Type& (0+255),w,b
 15774  011516  0100               	movlb	0	; () banked
 15775  011518  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15776  01151A  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15777  01151C  0100               	movlb	0	; () banked
 15778  01151E  90D8               	bcf	status,0,c
 15779  011520  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15780  011522  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15781  011524  0100               	movlb	0	; () banked
 15782  011526  90D8               	bcf	status,0,c
 15783  011528  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15784  01152A  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15785  01152C  0100               	movlb	0	; () banked
 15786  01152E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15787  011530  0100               	movlb	0	; () banked
 15788  011532  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15789  011534  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15790  011536  0100               	movlb	0	; () banked
 15791  011538  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15792  01153A  0100               	movlb	0	; () banked
 15793  01153C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15794  01153E  0100               	movlb	0	; () banked
 15795  011540  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15796  011542  0100               	movlb	0	; () banked
 15797  011544  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15798  011546  0100               	movlb	0	; () banked
 15799  011548  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15800  01154A  0100               	movlb	0	; () banked
 15801  01154C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15802  01154E  0100               	movlb	0	; () banked
 15803  011550  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15804  011552  0100               	movlb	0	; () banked
 15805  011554  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15806  011556  0100               	movlb	0	; () banked
 15807  011558  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15808  01155A  0100               	movlb	0	; () banked
 15809  01155C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15810  01155E  0100               	movlb	0	; () banked
 15811  011560  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15812  011562  0100               	movlb	0	; () banked
 15813  011564  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15814  011566  0100               	movlb	0	; () banked
 15815  011568  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15816  01156A  0100               	movlb	0	; () banked
 15817  01156C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15818  01156E  0100               	movlb	0	; () banked
 15819  011570  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15820  011572  0100               	movlb	0	; () banked
 15821  011574  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15822  011576  0100               	movlb	0	; () banked
 15823  011578  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15824  01157A  0100               	movlb	0	; () banked
 15825  01157C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15826  01157E  0100               	movlb	0	; () banked
 15827  011580  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15828  011582  0100               	movlb	0	; () banked
 15829  011584  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15830  011586  0100               	movlb	0	; () banked
 15831  011588  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15832  01158A  0100               	movlb	0	; () banked
 15833  01158C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15834  01158E  0100               	movlb	0	; () banked
 15835  011590  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15836  011592  0100               	movlb	0	; () banked
 15837  011594  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15838  011596  0100               	movlb	0	; () banked
 15839  011598  51CC               	movf	??_Port_Set& (0+255),w,b
 15840  01159A  0100               	movlb	0	; () banked
 15841  01159C  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15842  01159E  0100               	movlb	0	; () banked
 15843  0115A0  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15844  0115A2  0100               	movlb	0	; () banked
 15845  0115A4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15846  0115A6  0100               	movlb	0	; () banked
 15847  0115A8  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15848  0115AA  0100               	movlb	0	; () banked
 15849  0115AC  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15850                           
 15851                           ; BSR set to: 0
 15852                           ;Port.c: 574: UINT16 TypeActual = Type;
 15853  0115AE  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15854  0115B2  0100               	movlb	0	; () banked
 15855  0115B4  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15859  0115B6  0E08               	movlw	8
 15860  0115B8  0100               	movlb	0	; () banked
 15861  0115BA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15862  0115BC  0100               	movlb	0	; () banked
 15863  0115BE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15864  0115C0  0E00               	movlw	0
 15865  0115C2  0100               	movlb	0	; () banked
 15866  0115C4  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15867  0115C6  0100               	movlb	0	; () banked
 15868  0115C8  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15869  0115CA  0E01               	movlw	1
 15870  0115CC  0100               	movlb	0	; () banked
 15871  0115CE  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15872  0115D0  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15873  0115D4  0100               	movlb	0	; () banked
 15874  0115D6  6FCC               	movwf	??_Port_Set& (0+255),b
 15875  0115D8  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15876  0115DA  0100               	movlb	0	; () banked
 15877  0115DC  90D8               	bcf	status,0,c
 15878  0115DE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15879  0115E0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15880  0115E2  0100               	movlb	0	; () banked
 15881  0115E4  90D8               	bcf	status,0,c
 15882  0115E6  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15883  0115E8  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15884  0115EA  0100               	movlb	0	; () banked
 15885  0115EC  51CC               	movf	??_Port_Set& (0+255),w,b
 15886  0115EE  0100               	movlb	0	; () banked
 15887  0115F0  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15888  0115F2  0100               	movlb	0	; () banked
 15889  0115F4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15890  0115F6  0100               	movlb	0	; () banked
 15891  0115F8  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15895  0115FA  0E08               	movlw	8
 15896  0115FC  0100               	movlb	0	; () banked
 15897  0115FE  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15898  011600  0100               	movlb	0	; () banked
 15899  011602  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15900  011604  0E00               	movlw	0
 15901  011606  0100               	movlb	0	; () banked
 15902  011608  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15903  01160A  0100               	movlb	0	; () banked
 15904  01160C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15905  01160E  0E02               	movlw	2
 15906  011610  0100               	movlb	0	; () banked
 15907  011612  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15908  011614  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15909  011618  0100               	movlb	0	; () banked
 15910  01161A  6FCC               	movwf	??_Port_Set& (0+255),b
 15911  01161C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15912  01161E  0100               	movlb	0	; () banked
 15913  011620  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15914  011622  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15915  011624  0EF0               	movlw	240
 15916  011626  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15917  011628  51CC               	movf	??_Port_Set& (0+255),w,b
 15918  01162A  0B0F               	andlw	15
 15919  01162C  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15920  01162E  0EF0               	movlw	240
 15921  011630  17CC               	andwf	??_Port_Set& (0+255),f,b
 15922  011632  0100               	movlb	0	; () banked
 15923  011634  51CC               	movf	??_Port_Set& (0+255),w,b
 15924  011636  0100               	movlb	0	; () banked
 15925  011638  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15926  01163A  0100               	movlb	0	; () banked
 15927  01163C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15928  01163E  0100               	movlb	0	; () banked
 15929  011640  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15933  011642  0E08               	movlw	8
 15934  011644  0100               	movlb	0	; () banked
 15935  011646  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15936  011648  0100               	movlb	0	; () banked
 15937  01164A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15938  01164C  0E00               	movlw	0
 15939  01164E  0100               	movlb	0	; () banked
 15940  011650  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15941  011652  0100               	movlb	0	; () banked
 15942  011654  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15943  011656  0E03               	movlw	3
 15944  011658  0100               	movlb	0	; () banked
 15945  01165A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15946  01165C  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15947  011660  0100               	movlb	0	; () banked
 15948  011662  6FCC               	movwf	??_Port_Set& (0+255),b
 15949  011664  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15950  011666  0E06               	movlw	6
 15951  011668                     u10525:
 15952  011668  90D8               	bcf	status,0,c
 15953  01166A  0100               	movlb	0	; () banked
 15954  01166C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15955  01166E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15956  011670  2EE8               	decfsz	wreg,f,c
 15957  011672  D7FA               	goto	u10525
 15958  011674  0100               	movlb	0	; () banked
 15959  011676  51CC               	movf	??_Port_Set& (0+255),w,b
 15960  011678  0100               	movlb	0	; () banked
 15961  01167A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15962  01167C  0100               	movlb	0	; () banked
 15963  01167E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15964  011680  0100               	movlb	0	; () banked
 15965  011682  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15969  011684  0E08               	movlw	8
 15970  011686  0100               	movlb	0	; () banked
 15971  011688  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15972  01168A  0100               	movlb	0	; () banked
 15973  01168C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15974  01168E  0E00               	movlw	0
 15975  011690  0100               	movlb	0	; () banked
 15976  011692  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15977  011694  0100               	movlb	0	; () banked
 15978  011696  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15979  011698  0E04               	movlw	4
 15980  01169A  0100               	movlb	0	; () banked
 15981  01169C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15982  01169E  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 15983  0116A2  0100               	movlb	0	; () banked
 15984  0116A4  6FCC               	movwf	??_Port_Set& (0+255),b
 15985  0116A6  0100               	movlb	0	; () banked
 15986  0116A8  51CC               	movf	??_Port_Set& (0+255),w,b
 15987  0116AA  0100               	movlb	0	; () banked
 15988  0116AC  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15989  0116AE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15990  0116B0  0100               	movlb	0	; () banked
 15991  0116B2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15992  0116B4  0100               	movlb	0	; () banked
 15993  0116B6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15994  0116B8  0100               	movlb	0	; () banked
 15995  0116BA  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15996  0116BC  0100               	movlb	0	; () banked
 15997  0116BE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 16001  0116C0  0E08               	movlw	8
 16002  0116C2  0100               	movlb	0	; () banked
 16003  0116C4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16004  0116C6  0100               	movlb	0	; () banked
 16005  0116C8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16006  0116CA  0E00               	movlw	0
 16007  0116CC  0100               	movlb	0	; () banked
 16008  0116CE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16009  0116D0  0100               	movlb	0	; () banked
 16010  0116D2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16011  0116D4  0E05               	movlw	5
 16012  0116D6  0100               	movlb	0	; () banked
 16013  0116D8  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16014  0116DA  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 16015  0116DE  0100               	movlb	0	; () banked
 16016  0116E0  6FCC               	movwf	??_Port_Set& (0+255),b
 16017  0116E2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16018  0116E4  0E0A               	movlw	10
 16019  0116E6                     u10535:
 16020  0116E6  90D8               	bcf	status,0,c
 16021  0116E8  0100               	movlb	0	; () banked
 16022  0116EA  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16023  0116EC  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16024  0116EE  2EE8               	decfsz	wreg,f,c
 16025  0116F0  D7FA               	goto	u10535
 16026  0116F2  0100               	movlb	0	; () banked
 16027  0116F4  51CC               	movf	??_Port_Set& (0+255),w,b
 16028  0116F6  0100               	movlb	0	; () banked
 16029  0116F8  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16030  0116FA  0100               	movlb	0	; () banked
 16031  0116FC  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16032  0116FE  0100               	movlb	0	; () banked
 16033  011700  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 16037  011702  0E08               	movlw	8
 16038  011704  0100               	movlb	0	; () banked
 16039  011706  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16040  011708  0100               	movlb	0	; () banked
 16041  01170A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16042  01170C  0E00               	movlw	0
 16043  01170E  0100               	movlb	0	; () banked
 16044  011710  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16045  011712  0100               	movlb	0	; () banked
 16046  011714  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16047  011716  0E06               	movlw	6
 16048  011718  0100               	movlb	0	; () banked
 16049  01171A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16050  01171C  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 16051  011720  0100               	movlb	0	; () banked
 16052  011722  6FCC               	movwf	??_Port_Set& (0+255),b
 16053  011724  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16054  011726  0E0C               	movlw	12
 16055  011728                     u10545:
 16056  011728  90D8               	bcf	status,0,c
 16057  01172A  0100               	movlb	0	; () banked
 16058  01172C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16059  01172E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16060  011730  2EE8               	decfsz	wreg,f,c
 16061  011732  D7FA               	goto	u10545
 16062  011734  0100               	movlb	0	; () banked
 16063  011736  51CC               	movf	??_Port_Set& (0+255),w,b
 16064  011738  0100               	movlb	0	; () banked
 16065  01173A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16066  01173C  0100               	movlb	0	; () banked
 16067  01173E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16068  011740  0100               	movlb	0	; () banked
 16069  011742  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16070                           
 16071                           ; BSR set to: 0
 16072                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 16073  011744  0E08               	movlw	8
 16074  011746  0100               	movlb	0	; () banked
 16075  011748  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16076  01174A  0100               	movlb	0	; () banked
 16077  01174C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16078  01174E  0E00               	movlw	0
 16079  011750  0100               	movlb	0	; () banked
 16080  011752  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16081  011754  0100               	movlb	0	; () banked
 16082  011756  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16083  011758  0E07               	movlw	7
 16084  01175A  0100               	movlb	0	; () banked
 16085  01175C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16086  01175E  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 16087  011762  0100               	movlb	0	; () banked
 16088  011764  6FCC               	movwf	??_Port_Set& (0+255),b
 16089  011766  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16090  011768  0E0E               	movlw	14
 16091  01176A                     u10555:
 16092  01176A  90D8               	bcf	status,0,c
 16093  01176C  0100               	movlb	0	; () banked
 16094  01176E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16095  011770  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16096  011772  2EE8               	decfsz	wreg,f,c
 16097  011774  D7FA               	goto	u10555
 16098  011776  0100               	movlb	0	; () banked
 16099  011778  51CC               	movf	??_Port_Set& (0+255),w,b
 16100  01177A  0100               	movlb	0	; () banked
 16101  01177C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16102  01177E  0100               	movlb	0	; () banked
 16103  011780  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16104  011782  0100               	movlb	0	; () banked
 16105  011784  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16106                           
 16107                           ;Port.c: 584: if (TypeRequired == TypeActual)
 16108  011786  0100               	movlb	0	; () banked
 16109  011788  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 16110  01178A  0100               	movlb	0	; () banked
 16111  01178C  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 16112  01178E  E148               	bnz	l528
 16113  011790  0100               	movlb	0	; () banked
 16114  011792  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 16115  011794  0100               	movlb	0	; () banked
 16116  011796  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 16117  011798  A4D8               	btfss	status,2,c
 16118  01179A  0012               	return	
 16119  01179C  D032               	goto	l526
 16120  01179E                     
 16121                           ; BSR set to: 0
 16122                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 16123                           
 16124                           ; BSR set to: 0
 16125  01179E  0100               	movlb	0	; () banked
 16126  0117A0  EE20 F002          	lfsr	2,2
 16127  0117A4  51C9               	movf	Port_Set@pInput& (0+255),w,b
 16128  0117A6  26D9               	addwf	fsr2l,f,c
 16129  0117A8  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16130  0117AA  22DA               	addwfc	fsr2h,f,c
 16131  0117AC  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 16132  0117B0  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 16133  0117B4  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16134  0117B8  EC1F  F0B4         	call	_Byte_SetByte	;wreg free
 16135                           
 16136                           ;Port.c: 594: break;
 16137  0117BC  0012               	return	
 16138  0117BE                     
 16139                           ;Port.c: 597: pValue = ~pValue;
 16140  0117BE  0100               	movlb	0	; () banked
 16141  0117C0  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 16145  0117C2  0100               	movlb	0	; () banked
 16146  0117C4  EE20 F002          	lfsr	2,2
 16147  0117C8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 16148  0117CA  26D9               	addwf	fsr2l,f,c
 16149  0117CC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16150  0117CE  22DA               	addwfc	fsr2h,f,c
 16151  0117D0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 16152  0117D4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 16153  0117D8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16154  0117DC  EC1F  F0B4         	call	_Byte_SetByte	;wreg free
 16155                           
 16156                           ;Port.c: 599: break;
 16157  0117E0  0012               	return	
 16158  0117E2                     
 16159                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 16160  0117E2  0100               	movlb	0	; () banked
 16161  0117E4  EE20 F004          	lfsr	2,4
 16162  0117E8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 16163  0117EA  26D9               	addwf	fsr2l,f,c
 16164  0117EC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16165  0117EE  22DA               	addwfc	fsr2h,f,c
 16166  0117F0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 16167  0117F4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 16168  0117F8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16169  0117FC  EC1F  F0B4         	call	_Byte_SetByte	;wreg free
 16170                           
 16171                           ;Port.c: 606: }
 16172                           
 16173                           ;Port.c: 605: break;
 16174                           
 16175                           ;Port.c: 604: default:
 16176                           
 16177                           ;Port.c: 603: break;
 16178  011800  0012               	return	
 16179  011802                     l526:
 16180  011802  0100               	movlb	0	; () banked
 16181  011804  51E0               	movf	Port_Set@Type& (0+255),w,b
 16182                           
 16183                           ; Switch size 1, requested type "space"
 16184                           ; Number of cases is 4, Range of values is 0 to 3
 16185                           ; switch strategies available:
 16186                           ; Name         Instructions Cycles
 16187                           ; simple_byte           13     7 (average)
 16188                           ;	Chosen strategy is simple_byte
 16189  011806  0A00               	xorlw	0	; case 0
 16190  011808  B4D8               	btfsc	status,2,c
 16191  01180A  0012               	return	
 16192  01180C  0A01               	xorlw	1	; case 1
 16193  01180E  B4D8               	btfsc	status,2,c
 16194  011810  D7C6               	goto	l529
 16195  011812  0A03               	xorlw	3	; case 2
 16196  011814  B4D8               	btfsc	status,2,c
 16197  011816  D7D3               	goto	l531
 16198  011818  0A01               	xorlw	1	; case 3
 16199  01181A  A4D8               	btfss	status,2,c
 16200                           
 16201                           ; BSR set to: 0
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;Port.c: 607: }
 16205  01181C  0012               	return	
 16206  01181E  D7E1               	goto	l532
 16207  011820                     l528:
 16208  011820  0012               	return		;funcret
 16209  011822                     __end_of_Port_Set:
 16210                           	opt stack 0
 16211                           tblptru	equ	0xFF8
 16212                           tblptrh	equ	0xFF7
 16213                           tblptrl	equ	0xFF6
 16214                           tablat	equ	0xFF5
 16215                           prodh	equ	0xFF4
 16216                           prodl	equ	0xFF3
 16217                           intcon	equ	0xFF2
 16218                           postinc0	equ	0xFEE
 16219                           wreg	equ	0xFE8
 16220                           indf1	equ	0xFE7
 16221                           postdec1	equ	0xFE5
 16222                           fsr1h	equ	0xFE2
 16223                           fsr1l	equ	0xFE1
 16224                           indf2	equ	0xFDF
 16225                           postinc2	equ	0xFDE
 16226                           postdec2	equ	0xFDD
 16227                           fsr2h	equ	0xFDA
 16228                           fsr2l	equ	0xFD9
 16229                           status	equ	0xFD8
 16230                           
 16231 ;; *************** function _Byte_SetByte *****************
 16232 ;; Defined at:
 16233 ;;		line 110 in file "Library/Types.c"
 16234 ;; Parameters:    Size  Location     Type
 16235 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16236 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 16237 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16238 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16239 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16240 ;;		 -> NULL(0), 
 16241 ;;  pValue          1    2[BANK0 ] unsigned char 
 16242 ;; Auto vars:     Size  Location     Type
 16243 ;;		None
 16244 ;; Return value:  Size  Location     Type
 16245 ;;                  1    wreg      void 
 16246 ;; Registers used:
 16247 ;;		fsr2l, fsr2h
 16248 ;; Tracked objects:
 16249 ;;		On entry : 0/0
 16250 ;;		On exit  : 0/0
 16251 ;;		Unchanged: 0/0
 16252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16253 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16256 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16257 ;;Total ram usage:        3 bytes
 16258 ;; Hardware stack levels used:    1
 16259 ;; Hardware stack levels required when called:    7
 16260 ;; This function calls:
 16261 ;;		Nothing
 16262 ;; This function is called by:
 16263 ;;		_Port_Set
 16264 ;;		_I2C_Init
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           	psect	text66
 16269  01683E                     __ptext66:
 16270                           	opt stack 0
 16271  01683E                     _Byte_SetByte:
 16272                           	opt stack 19
 16273                           
 16274                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 16275                           
 16276                           ;incstack = 0
 16277  01683E  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 16278  016842  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 16279  016846  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 16280  01684A  0012               	return		;funcret
 16281  01684C                     __end_of_Byte_SetByte:
 16282                           	opt stack 0
 16283                           tblptru	equ	0xFF8
 16284                           tblptrh	equ	0xFF7
 16285                           tblptrl	equ	0xFF6
 16286                           tablat	equ	0xFF5
 16287                           prodh	equ	0xFF4
 16288                           prodl	equ	0xFF3
 16289                           intcon	equ	0xFF2
 16290                           postinc0	equ	0xFEE
 16291                           wreg	equ	0xFE8
 16292                           indf1	equ	0xFE7
 16293                           postdec1	equ	0xFE5
 16294                           fsr1h	equ	0xFE2
 16295                           fsr1l	equ	0xFE1
 16296                           indf2	equ	0xFDF
 16297                           postinc2	equ	0xFDE
 16298                           postdec2	equ	0xFDD
 16299                           fsr2h	equ	0xFDA
 16300                           fsr2l	equ	0xFD9
 16301                           status	equ	0xFD8
 16302                           
 16303 ;; *************** function _GetPortTRIS *****************
 16304 ;; Defined at:
 16305 ;;		line 67 in file "Library/Port.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;  pInput          1    wreg     enum E6786
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;  pInput          1    2[BANK0 ] enum E6786
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  2    0[BANK0 ] PTR struct Byte
 16312 ;; Registers used:
 16313 ;;		wreg, status,2, status,0
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16319 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16322 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16323 ;;Total ram usage:        3 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    7
 16326 ;; This function calls:
 16327 ;;		Nothing
 16328 ;; This function is called by:
 16329 ;;		_Port_Init
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333                           	psect	text67
 16334  0149DC                     __ptext67:
 16335                           	opt stack 0
 16336  0149DC                     _GetPortTRIS:
 16337                           	opt stack 20
 16338                           
 16339                           ;incstack = 0
 16340                           ;GetPortTRIS@pInput stored from wreg
 16341  0149DC  0100               	movlb	0	; () banked
 16342  0149DE  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 16343                           
 16344                           ;Port.c: 69: switch (pInput)
 16345  0149E0  D038               	goto	l363
 16346  0149E2                     
 16347                           ;Port.c: 72: return (BytePtr)&TRISA;
 16348  0149E2  0E92               	movlw	146
 16349  0149E4  0100               	movlb	0	; () banked
 16350  0149E6  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16351  0149E8  0E0F               	movlw	15
 16352  0149EA  0100               	movlb	0	; () banked
 16353  0149EC  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16354                           
 16355                           ; BSR set to: 0
 16356  0149EE  0012               	return	
 16357  0149F0                     
 16358                           ; BSR set to: 0
 16359                           ;Port.c: 74: return (BytePtr)&TRISB;
 16360                           
 16361                           ; BSR set to: 0
 16362  0149F0  0E93               	movlw	147
 16363  0149F2  0100               	movlb	0	; () banked
 16364  0149F4  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16365  0149F6  0E0F               	movlw	15
 16366  0149F8  0100               	movlb	0	; () banked
 16367  0149FA  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16368                           
 16369                           ; BSR set to: 0
 16370  0149FC  0012               	return	
 16371  0149FE                     
 16372                           ; BSR set to: 0
 16373                           ;Port.c: 76: return (BytePtr)&TRISC;
 16374                           
 16375                           ; BSR set to: 0
 16376  0149FE  0E94               	movlw	148
 16377  014A00  0100               	movlb	0	; () banked
 16378  014A02  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16379  014A04  0E0F               	movlw	15
 16380  014A06  0100               	movlb	0	; () banked
 16381  014A08  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16382                           
 16383                           ; BSR set to: 0
 16384  014A0A  0012               	return	
 16385  014A0C                     
 16386                           ; BSR set to: 0
 16387                           ;Port.c: 78: return (BytePtr)&TRISD;
 16388                           
 16389                           ; BSR set to: 0
 16390  014A0C  0E95               	movlw	149
 16391  014A0E  0100               	movlb	0	; () banked
 16392  014A10  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16393  014A12  0E0F               	movlw	15
 16394  014A14  0100               	movlb	0	; () banked
 16395  014A16  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16396                           
 16397                           ; BSR set to: 0
 16398  014A18  0012               	return	
 16399  014A1A                     
 16400                           ; BSR set to: 0
 16401                           ;Port.c: 80: return (BytePtr)&TRISE;
 16402                           
 16403                           ; BSR set to: 0
 16404  014A1A  0E96               	movlw	150
 16405  014A1C  0100               	movlb	0	; () banked
 16406  014A1E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16407  014A20  0E0F               	movlw	15
 16408  014A22  0100               	movlb	0	; () banked
 16409  014A24  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16410                           
 16411                           ; BSR set to: 0
 16412  014A26  0012               	return	
 16413  014A28                     
 16414                           ; BSR set to: 0
 16415                           ;Port.c: 82: return (BytePtr)&TRISF;
 16416                           
 16417                           ; BSR set to: 0
 16418  014A28  0E97               	movlw	151
 16419  014A2A  0100               	movlb	0	; () banked
 16420  014A2C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16421  014A2E  0E0F               	movlw	15
 16422  014A30  0100               	movlb	0	; () banked
 16423  014A32  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16424                           
 16425                           ; BSR set to: 0
 16426  014A34  0012               	return	
 16427  014A36                     
 16428                           ; BSR set to: 0
 16429                           ;Port.c: 84: return (BytePtr)&TRISG;
 16430                           
 16431                           ; BSR set to: 0
 16432  014A36  0E98               	movlw	152
 16433  014A38  0100               	movlb	0	; () banked
 16434  014A3A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16435  014A3C  0E0F               	movlw	15
 16436  014A3E  0100               	movlb	0	; () banked
 16437  014A40  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16438                           
 16439                           ; BSR set to: 0
 16440  014A42  0012               	return	
 16441  014A44                     
 16442                           ; BSR set to: 0
 16443                           ;Port.c: 86: return (void*)0;
 16444                           
 16445                           ; BSR set to: 0
 16446  014A44  0E00               	movlw	0
 16447  014A46  0100               	movlb	0	; () banked
 16448  014A48  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16449  014A4A  0E00               	movlw	0
 16450  014A4C  0100               	movlb	0	; () banked
 16451  014A4E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;Port.c: 87: }
 16455                           
 16456                           ; BSR set to: 0
 16457  014A50  0012               	return	
 16458  014A52                     l363:
 16459                           
 16460                           ; BSR set to: 0
 16461  014A52  0100               	movlb	0	; () banked
 16462  014A54  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16463                           
 16464                           ; Switch size 1, requested type "space"
 16465                           ; Number of cases is 7, Range of values is 0 to 6
 16466                           ; switch strategies available:
 16467                           ; Name         Instructions Cycles
 16468                           ; simple_byte           22    12 (average)
 16469                           ;	Chosen strategy is simple_byte
 16470  014A56  0A00               	xorlw	0	; case 0
 16471  014A58  B4D8               	btfsc	status,2,c
 16472  014A5A  D7C3               	goto	l364
 16473  014A5C  0A01               	xorlw	1	; case 1
 16474  014A5E  B4D8               	btfsc	status,2,c
 16475  014A60  D7C7               	goto	l366
 16476  014A62  0A03               	xorlw	3	; case 2
 16477  014A64  B4D8               	btfsc	status,2,c
 16478  014A66  D7CB               	goto	l367
 16479  014A68  0A01               	xorlw	1	; case 3
 16480  014A6A  B4D8               	btfsc	status,2,c
 16481  014A6C  D7CF               	goto	l368
 16482  014A6E  0A07               	xorlw	7	; case 4
 16483  014A70  B4D8               	btfsc	status,2,c
 16484  014A72  D7D3               	goto	l369
 16485  014A74  0A01               	xorlw	1	; case 5
 16486  014A76  B4D8               	btfsc	status,2,c
 16487  014A78  D7D7               	goto	l370
 16488  014A7A  0A03               	xorlw	3	; case 6
 16489  014A7C  B4D8               	btfsc	status,2,c
 16490  014A7E  D7DB               	goto	l371
 16491  014A80  D7E1               	goto	l372
 16492  014A82                     __end_of_GetPortTRIS:
 16493                           	opt stack 0
 16494                           tblptru	equ	0xFF8
 16495                           tblptrh	equ	0xFF7
 16496                           tblptrl	equ	0xFF6
 16497                           tablat	equ	0xFF5
 16498                           prodh	equ	0xFF4
 16499                           prodl	equ	0xFF3
 16500                           intcon	equ	0xFF2
 16501                           postinc0	equ	0xFEE
 16502                           wreg	equ	0xFE8
 16503                           indf1	equ	0xFE7
 16504                           postdec1	equ	0xFE5
 16505                           fsr1h	equ	0xFE2
 16506                           fsr1l	equ	0xFE1
 16507                           indf2	equ	0xFDF
 16508                           postinc2	equ	0xFDE
 16509                           postdec2	equ	0xFDD
 16510                           fsr2h	equ	0xFDA
 16511                           fsr2l	equ	0xFD9
 16512                           status	equ	0xFD8
 16513                           
 16514 ;; *************** function _GetPortProperties *****************
 16515 ;; Defined at:
 16516 ;;		line 21 in file "Library/Port.c"
 16517 ;; Parameters:    Size  Location     Type
 16518 ;;  pInput          1    wreg     enum E6786
 16519 ;; Auto vars:     Size  Location     Type
 16520 ;;  pInput          1    2[BANK0 ] enum E6786
 16521 ;; Return value:  Size  Location     Type
 16522 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16523 ;; Registers used:
 16524 ;;		wreg, status,2, status,0
 16525 ;; Tracked objects:
 16526 ;;		On entry : 0/0
 16527 ;;		On exit  : 0/0
 16528 ;;		Unchanged: 0/0
 16529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16530 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16534 ;;Total ram usage:        3 bytes
 16535 ;; Hardware stack levels used:    1
 16536 ;; Hardware stack levels required when called:    7
 16537 ;; This function calls:
 16538 ;;		Nothing
 16539 ;; This function is called by:
 16540 ;;		_Port_Init
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           	psect	text68
 16545  014A82                     __ptext68:
 16546                           	opt stack 0
 16547  014A82                     _GetPortProperties:
 16548                           	opt stack 20
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;incstack = 0
 16552                           ;GetPortProperties@pInput stored from wreg
 16553  014A82  0100               	movlb	0	; () banked
 16554  014A84  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16555                           
 16556                           ;Port.c: 23: switch (pInput)
 16557  014A86  D038               	goto	l337
 16558  014A88                     
 16559                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16560  014A88  0E0B               	movlw	low _PortA_Property
 16561  014A8A  0100               	movlb	0	; () banked
 16562  014A8C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16563  014A8E  0EFF               	movlw	high _PortA_Property
 16564  014A90  0100               	movlb	0	; () banked
 16565  014A92  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16566                           
 16567                           ; BSR set to: 0
 16568  014A94  0012               	return	
 16569  014A96                     
 16570                           ; BSR set to: 0
 16571                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16572                           
 16573                           ; BSR set to: 0
 16574  014A96  0E09               	movlw	low _PortB_Property
 16575  014A98  0100               	movlb	0	; () banked
 16576  014A9A  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16577  014A9C  0EFF               	movlw	high _PortB_Property
 16578  014A9E  0100               	movlb	0	; () banked
 16579  014AA0  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16580                           
 16581                           ; BSR set to: 0
 16582  014AA2  0012               	return	
 16583  014AA4                     
 16584                           ; BSR set to: 0
 16585                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16586                           
 16587                           ; BSR set to: 0
 16588  014AA4  0E07               	movlw	low _PortC_Property
 16589  014AA6  0100               	movlb	0	; () banked
 16590  014AA8  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16591  014AAA  0EFF               	movlw	high _PortC_Property
 16592  014AAC  0100               	movlb	0	; () banked
 16593  014AAE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16594                           
 16595                           ; BSR set to: 0
 16596  014AB0  0012               	return	
 16597  014AB2                     
 16598                           ; BSR set to: 0
 16599                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16600                           
 16601                           ; BSR set to: 0
 16602  014AB2  0E05               	movlw	low _PortD_Property
 16603  014AB4  0100               	movlb	0	; () banked
 16604  014AB6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16605  014AB8  0EFF               	movlw	high _PortD_Property
 16606  014ABA  0100               	movlb	0	; () banked
 16607  014ABC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16608                           
 16609                           ; BSR set to: 0
 16610  014ABE  0012               	return	
 16611  014AC0                     
 16612                           ; BSR set to: 0
 16613                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16614                           
 16615                           ; BSR set to: 0
 16616  014AC0  0E03               	movlw	low _PortE_Property
 16617  014AC2  0100               	movlb	0	; () banked
 16618  014AC4  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16619  014AC6  0EFF               	movlw	high _PortE_Property
 16620  014AC8  0100               	movlb	0	; () banked
 16621  014ACA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16622                           
 16623                           ; BSR set to: 0
 16624  014ACC  0012               	return	
 16625  014ACE                     
 16626                           ; BSR set to: 0
 16627                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16628                           
 16629                           ; BSR set to: 0
 16630  014ACE  0E01               	movlw	low _PortF_Property
 16631  014AD0  0100               	movlb	0	; () banked
 16632  014AD2  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16633  014AD4  0EFF               	movlw	high _PortF_Property
 16634  014AD6  0100               	movlb	0	; () banked
 16635  014AD8  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16636                           
 16637                           ; BSR set to: 0
 16638  014ADA  0012               	return	
 16639  014ADC                     
 16640                           ; BSR set to: 0
 16641                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16642                           
 16643                           ; BSR set to: 0
 16644  014ADC  0EFF               	movlw	low _PortG_Property
 16645  014ADE  0100               	movlb	0	; () banked
 16646  014AE0  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16647  014AE2  0EFE               	movlw	high _PortG_Property
 16648  014AE4  0100               	movlb	0	; () banked
 16649  014AE6  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16650                           
 16651                           ; BSR set to: 0
 16652  014AE8  0012               	return	
 16653  014AEA                     
 16654                           ; BSR set to: 0
 16655                           ;Port.c: 40: return (void*)0;
 16656                           
 16657                           ; BSR set to: 0
 16658  014AEA  0E00               	movlw	0
 16659  014AEC  0100               	movlb	0	; () banked
 16660  014AEE  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16661  014AF0  0E00               	movlw	0
 16662  014AF2  0100               	movlb	0	; () banked
 16663  014AF4  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;Port.c: 41: }
 16667                           
 16668                           ; BSR set to: 0
 16669  014AF6  0012               	return	
 16670  014AF8                     l337:
 16671                           
 16672                           ; BSR set to: 0
 16673  014AF8  0100               	movlb	0	; () banked
 16674  014AFA  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16675                           
 16676                           ; Switch size 1, requested type "space"
 16677                           ; Number of cases is 7, Range of values is 0 to 6
 16678                           ; switch strategies available:
 16679                           ; Name         Instructions Cycles
 16680                           ; simple_byte           22    12 (average)
 16681                           ;	Chosen strategy is simple_byte
 16682  014AFC  0A00               	xorlw	0	; case 0
 16683  014AFE  B4D8               	btfsc	status,2,c
 16684  014B00  D7C3               	goto	l338
 16685  014B02  0A01               	xorlw	1	; case 1
 16686  014B04  B4D8               	btfsc	status,2,c
 16687  014B06  D7C7               	goto	l340
 16688  014B08  0A03               	xorlw	3	; case 2
 16689  014B0A  B4D8               	btfsc	status,2,c
 16690  014B0C  D7CB               	goto	l341
 16691  014B0E  0A01               	xorlw	1	; case 3
 16692  014B10  B4D8               	btfsc	status,2,c
 16693  014B12  D7CF               	goto	l342
 16694  014B14  0A07               	xorlw	7	; case 4
 16695  014B16  B4D8               	btfsc	status,2,c
 16696  014B18  D7D3               	goto	l343
 16697  014B1A  0A01               	xorlw	1	; case 5
 16698  014B1C  B4D8               	btfsc	status,2,c
 16699  014B1E  D7D7               	goto	l344
 16700  014B20  0A03               	xorlw	3	; case 6
 16701  014B22  B4D8               	btfsc	status,2,c
 16702  014B24  D7DB               	goto	l345
 16703  014B26  D7E1               	goto	l346
 16704  014B28                     __end_of_GetPortProperties:
 16705                           	opt stack 0
 16706                           tblptru	equ	0xFF8
 16707                           tblptrh	equ	0xFF7
 16708                           tblptrl	equ	0xFF6
 16709                           tablat	equ	0xFF5
 16710                           prodh	equ	0xFF4
 16711                           prodl	equ	0xFF3
 16712                           intcon	equ	0xFF2
 16713                           postinc0	equ	0xFEE
 16714                           wreg	equ	0xFE8
 16715                           indf1	equ	0xFE7
 16716                           postdec1	equ	0xFE5
 16717                           fsr1h	equ	0xFE2
 16718                           fsr1l	equ	0xFE1
 16719                           indf2	equ	0xFDF
 16720                           postinc2	equ	0xFDE
 16721                           postdec2	equ	0xFDD
 16722                           fsr2h	equ	0xFDA
 16723                           fsr2l	equ	0xFD9
 16724                           status	equ	0xFD8
 16725                           
 16726 ;; *************** function _GetPortPORT *****************
 16727 ;; Defined at:
 16728 ;;		line 44 in file "Library/Port.c"
 16729 ;; Parameters:    Size  Location     Type
 16730 ;;  pInput          1    wreg     enum E6786
 16731 ;; Auto vars:     Size  Location     Type
 16732 ;;  pInput          1    2[BANK0 ] enum E6786
 16733 ;; Return value:  Size  Location     Type
 16734 ;;                  2    0[BANK0 ] PTR struct Byte
 16735 ;; Registers used:
 16736 ;;		wreg, status,2, status,0
 16737 ;; Tracked objects:
 16738 ;;		On entry : 0/0
 16739 ;;		On exit  : 0/0
 16740 ;;		Unchanged: 0/0
 16741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16742 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16743 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16745 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16746 ;;Total ram usage:        3 bytes
 16747 ;; Hardware stack levels used:    1
 16748 ;; Hardware stack levels required when called:    7
 16749 ;; This function calls:
 16750 ;;		Nothing
 16751 ;; This function is called by:
 16752 ;;		_Port_Init
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           	psect	text69
 16757  014B28                     __ptext69:
 16758                           	opt stack 0
 16759  014B28                     _GetPortPORT:
 16760                           	opt stack 20
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;incstack = 0
 16764                           ;GetPortPORT@pInput stored from wreg
 16765  014B28  0100               	movlb	0	; () banked
 16766  014B2A  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16767                           
 16768                           ;Port.c: 46: switch (pInput)
 16769  014B2C  D038               	goto	l350
 16770  014B2E                     
 16771                           ;Port.c: 49: return (BytePtr)&PORTA;
 16772  014B2E  0E80               	movlw	128
 16773  014B30  0100               	movlb	0	; () banked
 16774  014B32  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16775  014B34  0E0F               	movlw	15
 16776  014B36  0100               	movlb	0	; () banked
 16777  014B38  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16778                           
 16779                           ; BSR set to: 0
 16780  014B3A  0012               	return	
 16781  014B3C                     
 16782                           ; BSR set to: 0
 16783                           ;Port.c: 51: return (BytePtr)&PORTB;
 16784                           
 16785                           ; BSR set to: 0
 16786  014B3C  0E81               	movlw	129
 16787  014B3E  0100               	movlb	0	; () banked
 16788  014B40  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16789  014B42  0E0F               	movlw	15
 16790  014B44  0100               	movlb	0	; () banked
 16791  014B46  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16792                           
 16793                           ; BSR set to: 0
 16794  014B48  0012               	return	
 16795  014B4A                     
 16796                           ; BSR set to: 0
 16797                           ;Port.c: 53: return (BytePtr)&PORTC;
 16798                           
 16799                           ; BSR set to: 0
 16800  014B4A  0E82               	movlw	130
 16801  014B4C  0100               	movlb	0	; () banked
 16802  014B4E  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16803  014B50  0E0F               	movlw	15
 16804  014B52  0100               	movlb	0	; () banked
 16805  014B54  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16806                           
 16807                           ; BSR set to: 0
 16808  014B56  0012               	return	
 16809  014B58                     
 16810                           ; BSR set to: 0
 16811                           ;Port.c: 55: return (BytePtr)&PORTD;
 16812                           
 16813                           ; BSR set to: 0
 16814  014B58  0E83               	movlw	131
 16815  014B5A  0100               	movlb	0	; () banked
 16816  014B5C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16817  014B5E  0E0F               	movlw	15
 16818  014B60  0100               	movlb	0	; () banked
 16819  014B62  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16820                           
 16821                           ; BSR set to: 0
 16822  014B64  0012               	return	
 16823  014B66                     
 16824                           ; BSR set to: 0
 16825                           ;Port.c: 57: return (BytePtr)&PORTE;
 16826                           
 16827                           ; BSR set to: 0
 16828  014B66  0E84               	movlw	132
 16829  014B68  0100               	movlb	0	; () banked
 16830  014B6A  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16831  014B6C  0E0F               	movlw	15
 16832  014B6E  0100               	movlb	0	; () banked
 16833  014B70  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16834                           
 16835                           ; BSR set to: 0
 16836  014B72  0012               	return	
 16837  014B74                     
 16838                           ; BSR set to: 0
 16839                           ;Port.c: 59: return (BytePtr)&PORTF;
 16840                           
 16841                           ; BSR set to: 0
 16842  014B74  0E85               	movlw	133
 16843  014B76  0100               	movlb	0	; () banked
 16844  014B78  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16845  014B7A  0E0F               	movlw	15
 16846  014B7C  0100               	movlb	0	; () banked
 16847  014B7E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16848                           
 16849                           ; BSR set to: 0
 16850  014B80  0012               	return	
 16851  014B82                     
 16852                           ; BSR set to: 0
 16853                           ;Port.c: 61: return (BytePtr)&PORTG;
 16854                           
 16855                           ; BSR set to: 0
 16856  014B82  0E86               	movlw	134
 16857  014B84  0100               	movlb	0	; () banked
 16858  014B86  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16859  014B88  0E0F               	movlw	15
 16860  014B8A  0100               	movlb	0	; () banked
 16861  014B8C  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16862                           
 16863                           ; BSR set to: 0
 16864  014B8E  0012               	return	
 16865  014B90                     
 16866                           ; BSR set to: 0
 16867                           ;Port.c: 63: return (void*)0;
 16868                           
 16869                           ; BSR set to: 0
 16870  014B90  0E00               	movlw	0
 16871  014B92  0100               	movlb	0	; () banked
 16872  014B94  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16873  014B96  0E00               	movlw	0
 16874  014B98  0100               	movlb	0	; () banked
 16875  014B9A  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16876                           
 16877                           ; BSR set to: 0
 16878                           ;Port.c: 64: }
 16879                           
 16880                           ; BSR set to: 0
 16881  014B9C  0012               	return	
 16882  014B9E                     l350:
 16883                           
 16884                           ; BSR set to: 0
 16885  014B9E  0100               	movlb	0	; () banked
 16886  014BA0  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16887                           
 16888                           ; Switch size 1, requested type "space"
 16889                           ; Number of cases is 7, Range of values is 0 to 6
 16890                           ; switch strategies available:
 16891                           ; Name         Instructions Cycles
 16892                           ; simple_byte           22    12 (average)
 16893                           ;	Chosen strategy is simple_byte
 16894  014BA2  0A00               	xorlw	0	; case 0
 16895  014BA4  B4D8               	btfsc	status,2,c
 16896  014BA6  D7C3               	goto	l351
 16897  014BA8  0A01               	xorlw	1	; case 1
 16898  014BAA  B4D8               	btfsc	status,2,c
 16899  014BAC  D7C7               	goto	l353
 16900  014BAE  0A03               	xorlw	3	; case 2
 16901  014BB0  B4D8               	btfsc	status,2,c
 16902  014BB2  D7CB               	goto	l354
 16903  014BB4  0A01               	xorlw	1	; case 3
 16904  014BB6  B4D8               	btfsc	status,2,c
 16905  014BB8  D7CF               	goto	l355
 16906  014BBA  0A07               	xorlw	7	; case 4
 16907  014BBC  B4D8               	btfsc	status,2,c
 16908  014BBE  D7D3               	goto	l356
 16909  014BC0  0A01               	xorlw	1	; case 5
 16910  014BC2  B4D8               	btfsc	status,2,c
 16911  014BC4  D7D7               	goto	l357
 16912  014BC6  0A03               	xorlw	3	; case 6
 16913  014BC8  B4D8               	btfsc	status,2,c
 16914  014BCA  D7DB               	goto	l358
 16915  014BCC  D7E1               	goto	l359
 16916  014BCE                     __end_of_GetPortPORT:
 16917                           	opt stack 0
 16918                           tblptru	equ	0xFF8
 16919                           tblptrh	equ	0xFF7
 16920                           tblptrl	equ	0xFF6
 16921                           tablat	equ	0xFF5
 16922                           prodh	equ	0xFF4
 16923                           prodl	equ	0xFF3
 16924                           intcon	equ	0xFF2
 16925                           postinc0	equ	0xFEE
 16926                           wreg	equ	0xFE8
 16927                           indf1	equ	0xFE7
 16928                           postdec1	equ	0xFE5
 16929                           fsr1h	equ	0xFE2
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           fsr2h	equ	0xFDA
 16935                           fsr2l	equ	0xFD9
 16936                           status	equ	0xFD8
 16937                           
 16938 ;; *************** function _LED_Init *****************
 16939 ;; Defined at:
 16940 ;;		line 15 in file "Library/LED.c"
 16941 ;; Parameters:    Size  Location     Type
 16942 ;;  pLED            1    wreg     enum E6739
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;  pLED            1   45[BANK0 ] enum E6739
 16945 ;; Return value:  Size  Location     Type
 16946 ;;                  1    wreg      void 
 16947 ;; Registers used:
 16948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16949 ;; Tracked objects:
 16950 ;;		On entry : 0/0
 16951 ;;		On exit  : 0/0
 16952 ;;		Unchanged: 0/0
 16953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;Total ram usage:        1 bytes
 16959 ;; Hardware stack levels used:    1
 16960 ;; Hardware stack levels required when called:   12
 16961 ;; This function calls:
 16962 ;;		_LED_Set
 16963 ;;		_Port_SetPinType
 16964 ;; This function is called by:
 16965 ;;		_MXK_Init
 16966 ;; This function uses a non-reentrant model
 16967 ;;
 16968                           
 16969                           	psect	text70
 16970  015A14                     __ptext70:
 16971                           	opt stack 0
 16972  015A14                     _LED_Init:
 16973                           	opt stack 16
 16974                           
 16975                           ; BSR set to: 0
 16976                           ;incstack = 0
 16977                           ;LED_Init@pLED stored from wreg
 16978  015A14  0100               	movlb	0	; () banked
 16979  015A16  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16980                           
 16981                           ;LED.c: 17: switch (pLED)
 16982  015A18  D01E               	goto	l220
 16983  015A1A                     
 16984                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16985  015A1A  0EA5               	movlw	low _PortC
 16986  015A1C  0100               	movlb	0	; () banked
 16987  015A1E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16988  015A20  0E00               	movlw	high _PortC
 16989  015A22  0100               	movlb	0	; () banked
 16990  015A24  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16991  015A26  0E00               	movlw	0
 16992  015A28  0100               	movlb	0	; () banked
 16993  015A2A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16994  015A2C  0E03               	movlw	3
 16995  015A2E  0100               	movlb	0	; () banked
 16996  015A30  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16997  015A32  EC60  F093         	call	_Port_SetPinType	;wreg free
 16998                           
 16999                           ;LED.c: 21: break;
 17000  015A36  D017               	goto	l222
 17001  015A38                     
 17002                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 17003  015A38  0EA5               	movlw	low _PortC
 17004  015A3A  0100               	movlb	0	; () banked
 17005  015A3C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 17006  015A3E  0E00               	movlw	high _PortC
 17007  015A40  0100               	movlb	0	; () banked
 17008  015A42  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17009  015A44  0E01               	movlw	1
 17010  015A46  0100               	movlb	0	; () banked
 17011  015A48  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 17012  015A4A  0E03               	movlw	3
 17013  015A4C  0100               	movlb	0	; () banked
 17014  015A4E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 17015  015A50  EC60  F093         	call	_Port_SetPinType	;wreg free
 17016                           
 17017                           ;LED.c: 25: }
 17018                           
 17019                           ;LED.c: 24: break;
 17020  015A54  D008               	goto	l222
 17021  015A56                     l220:
 17022  015A56  0100               	movlb	0	; () banked
 17023  015A58  51E7               	movf	LED_Init@pLED& (0+255),w,b
 17024                           
 17025                           ; Switch size 1, requested type "space"
 17026                           ; Number of cases is 2, Range of values is 0 to 1
 17027                           ; switch strategies available:
 17028                           ; Name         Instructions Cycles
 17029                           ; simple_byte            7     4 (average)
 17030                           ;	Chosen strategy is simple_byte
 17031  015A5A  0A00               	xorlw	0	; case 0
 17032  015A5C  B4D8               	btfsc	status,2,c
 17033  015A5E  D7DD               	goto	l221
 17034  015A60  0A01               	xorlw	1	; case 1
 17035  015A62  B4D8               	btfsc	status,2,c
 17036  015A64  D7E9               	goto	l223
 17037  015A66                     l222:
 17038                           
 17039                           ;LED.c: 26: LED_Set(pLED, 0);
 17040                           
 17041                           ; BSR set to: 0
 17042  015A66  0E00               	movlw	0
 17043  015A68  0100               	movlb	0	; () banked
 17044  015A6A  6FCE               	movwf	LED_Set@pValue& (0+255),b
 17045  015A6C  0100               	movlb	0	; () banked
 17046  015A6E  51E7               	movf	LED_Init@pLED& (0+255),w,b
 17047  015A70  EC48  F0AE         	call	_LED_Set
 17048  015A74  0012               	return		;funcret
 17049  015A76                     __end_of_LED_Init:
 17050                           	opt stack 0
 17051                           tblptru	equ	0xFF8
 17052                           tblptrh	equ	0xFF7
 17053                           tblptrl	equ	0xFF6
 17054                           tablat	equ	0xFF5
 17055                           prodh	equ	0xFF4
 17056                           prodl	equ	0xFF3
 17057                           intcon	equ	0xFF2
 17058                           postinc0	equ	0xFEE
 17059                           wreg	equ	0xFE8
 17060                           indf1	equ	0xFE7
 17061                           postdec1	equ	0xFE5
 17062                           fsr1h	equ	0xFE2
 17063                           fsr1l	equ	0xFE1
 17064                           indf2	equ	0xFDF
 17065                           postinc2	equ	0xFDE
 17066                           postdec2	equ	0xFDD
 17067                           fsr2h	equ	0xFDA
 17068                           fsr2l	equ	0xFD9
 17069                           status	equ	0xFD8
 17070                           
 17071 ;; *************** function _LED_Set *****************
 17072 ;; Defined at:
 17073 ;;		line 33 in file "Library/LED.c"
 17074 ;; Parameters:    Size  Location     Type
 17075 ;;  pLED            1    wreg     enum E6739
 17076 ;;  pValue          1   20[BANK0 ] unsigned char 
 17077 ;; Auto vars:     Size  Location     Type
 17078 ;;  pLED            1   21[BANK0 ] enum E6739
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  1    wreg      void 
 17081 ;; Registers used:
 17082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17083 ;; Tracked objects:
 17084 ;;		On entry : 0/0
 17085 ;;		On exit  : 0/0
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;Total ram usage:        2 bytes
 17093 ;; Hardware stack levels used:    1
 17094 ;; Hardware stack levels required when called:   11
 17095 ;; This function calls:
 17096 ;;		_Port_SetPin
 17097 ;; This function is called by:
 17098 ;;		_LED_Init
 17099 ;;		_SYSTEM_Initialize
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           	psect	text71
 17104  015C90                     __ptext71:
 17105                           	opt stack 0
 17106  015C90                     _LED_Set:
 17107                           	opt stack 16
 17108                           
 17109                           ;incstack = 0
 17110                           ;LED_Set@pLED stored from wreg
 17111  015C90  0100               	movlb	0	; () banked
 17112  015C92  6FCF               	movwf	LED_Set@pLED& (0+255),b
 17113                           
 17114                           ;LED.c: 35: switch (pLED)
 17115  015C94  D01C               	goto	l227
 17116  015C96                     
 17117                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 17118  015C96  0EA5               	movlw	low _PortC
 17119  015C98  0100               	movlb	0	; () banked
 17120  015C9A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17121  015C9C  0E00               	movlw	high _PortC
 17122  015C9E  0100               	movlb	0	; () banked
 17123  015CA0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17124  015CA2  0E00               	movlw	0
 17125  015CA4  0100               	movlb	0	; () banked
 17126  015CA6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17127  015CA8  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 17128  015CAC  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17129                           
 17130                           ;LED.c: 39: break;
 17131  015CB0  0012               	return	
 17132  015CB2                     
 17133                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 17134  015CB2  0EA5               	movlw	low _PortC
 17135  015CB4  0100               	movlb	0	; () banked
 17136  015CB6  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17137  015CB8  0E00               	movlw	high _PortC
 17138  015CBA  0100               	movlb	0	; () banked
 17139  015CBC  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17140  015CBE  0E01               	movlw	1
 17141  015CC0  0100               	movlb	0	; () banked
 17142  015CC2  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17143  015CC4  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 17144  015CC8  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17145                           
 17146                           ;LED.c: 43: }
 17147                           
 17148                           ;LED.c: 42: break;
 17149  015CCC  0012               	return	
 17150  015CCE                     l227:
 17151  015CCE  0100               	movlb	0	; () banked
 17152  015CD0  51CF               	movf	LED_Set@pLED& (0+255),w,b
 17153                           
 17154                           ; Switch size 1, requested type "space"
 17155                           ; Number of cases is 2, Range of values is 0 to 1
 17156                           ; switch strategies available:
 17157                           ; Name         Instructions Cycles
 17158                           ; simple_byte            7     4 (average)
 17159                           ;	Chosen strategy is simple_byte
 17160  015CD2  0A00               	xorlw	0	; case 0
 17161  015CD4  B4D8               	btfsc	status,2,c
 17162  015CD6  D7DF               	goto	l228
 17163  015CD8  0A01               	xorlw	1	; case 1
 17164  015CDA  A4D8               	btfss	status,2,c
 17165  015CDC  0012               	return	
 17166  015CDE  D7E9               	goto	l230
 17167  015CE0                     __end_of_LED_Set:
 17168                           	opt stack 0
 17169                           tblptru	equ	0xFF8
 17170                           tblptrh	equ	0xFF7
 17171                           tblptrl	equ	0xFF6
 17172                           tablat	equ	0xFF5
 17173                           prodh	equ	0xFF4
 17174                           prodl	equ	0xFF3
 17175                           intcon	equ	0xFF2
 17176                           postinc0	equ	0xFEE
 17177                           wreg	equ	0xFE8
 17178                           indf1	equ	0xFE7
 17179                           postdec1	equ	0xFE5
 17180                           fsr1h	equ	0xFE2
 17181                           fsr1l	equ	0xFE1
 17182                           indf2	equ	0xFDF
 17183                           postinc2	equ	0xFDE
 17184                           postdec2	equ	0xFDD
 17185                           fsr2h	equ	0xFDA
 17186                           fsr2l	equ	0xFD9
 17187                           status	equ	0xFD8
 17188                           
 17189 ;; *************** function _MXK_Dequeue *****************
 17190 ;; Defined at:
 17191 ;;		line 153 in file "Library/MXK.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;		None
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;		None
 17196 ;; Return value:  Size  Location     Type
 17197 ;;                  1    wreg      void 
 17198 ;; Registers used:
 17199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17209 ;;Total ram usage:        0 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:   12
 17212 ;; This function calls:
 17213 ;;		Absolute function
 17214 ;;		_Motor_Step
 17215 ;; This function is called by:
 17216 ;;		_init
 17217 ;;		_findClosestWall
 17218 ;;		_measureAndDisplayDistance
 17219 ;;		_mode1
 17220 ;;		_mode2
 17221 ;;		_mode4
 17222 ;;		_main
 17223 ;; This function uses a non-reentrant model
 17224 ;;
 17225                           
 17226                           	psect	text72
 17227  0160FE                     __ptext72:
 17228                           	opt stack 0
 17229  0160FE                     _MXK_Dequeue:
 17230                           	opt stack 16
 17231                           
 17232                           ;MXK.c: 155: if (lQueue)
 17233                           
 17234                           ;incstack = 0
 17235  0160FE  0100               	movlb	0	; () banked
 17236  016100  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17237  016102  0100               	movlb	0	; () banked
 17238  016104  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17239  016106  0100               	movlb	0	; () banked
 17240  016108  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17241  01610A  B4D8               	btfsc	status,2,c
 17242  01610C  D00D               	goto	u13659
 17243                           
 17244                           ; BSR set to: 0
 17245                           ;MXK.c: 156: lQueue();
 17246  01610E  D801               	call	u13658
 17247  016110  D00B               	goto	u13659
 17248  016112                     u13658:
 17249  016112  0005               	push	
 17250  016114  6EFA               	movwf	pclath,c
 17251  016116  0100               	movlb	0	; () banked
 17252  016118  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17253  01611A  6EFD               	movwf	tosl,c
 17254  01611C  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 17255  01611E  6EFE               	movwf	tosh,c
 17256  016120  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 17257  016122  6EFF               	movwf	tosu,c
 17258  016124  50FA               	movf	pclath,w,c
 17259  016126  0012               	return		;indir
 17260  016128                     u13659:
 17261                           
 17262                           ;MXK.c: 157: lQueue = 0;
 17263  016128  0E00               	movlw	0
 17264  01612A  0100               	movlb	0	; () banked
 17265  01612C  6F63               	movwf	_lQueue& (0+255),b	;volatile
 17266  01612E  0E00               	movlw	0
 17267  016130  0100               	movlb	0	; () banked
 17268  016132  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 17269  016134  0E00               	movlw	0
 17270  016136  0100               	movlb	0	; () banked
 17271  016138  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 17272                           
 17273                           ; BSR set to: 0
 17274  01613A  0012               	return		;funcret
 17275  01613C                     __end_of_MXK_Dequeue:
 17276                           	opt stack 0
 17277                           tosu	equ	0xFFF
 17278                           tosh	equ	0xFFE
 17279                           tosl	equ	0xFFD
 17280                           pclath	equ	0xFFA
 17281                           tblptru	equ	0xFF8
 17282                           tblptrh	equ	0xFF7
 17283                           tblptrl	equ	0xFF6
 17284                           tablat	equ	0xFF5
 17285                           prodh	equ	0xFF4
 17286                           prodl	equ	0xFF3
 17287                           intcon	equ	0xFF2
 17288                           postinc0	equ	0xFEE
 17289                           wreg	equ	0xFE8
 17290                           indf1	equ	0xFE7
 17291                           postdec1	equ	0xFE5
 17292                           fsr1h	equ	0xFE2
 17293                           fsr1l	equ	0xFE1
 17294                           indf2	equ	0xFDF
 17295                           postinc2	equ	0xFDE
 17296                           postdec2	equ	0xFDD
 17297                           fsr2h	equ	0xFDA
 17298                           fsr2l	equ	0xFD9
 17299                           status	equ	0xFD8
 17300                           
 17301 ;; *************** function _Motor_Step *****************
 17302 ;; Defined at:
 17303 ;;		line 75 in file "Library/Motor.c"
 17304 ;; Parameters:    Size  Location     Type
 17305 ;;		None
 17306 ;; Auto vars:     Size  Location     Type
 17307 ;;		None
 17308 ;; Return value:  Size  Location     Type
 17309 ;;                  1    wreg      void 
 17310 ;; Registers used:
 17311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17312 ;; Tracked objects:
 17313 ;;		On entry : 0/0
 17314 ;;		On exit  : 0/0
 17315 ;;		Unchanged: 0/0
 17316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;Total ram usage:        2 bytes
 17322 ;; Hardware stack levels used:    1
 17323 ;; Hardware stack levels required when called:   11
 17324 ;; This function calls:
 17325 ;;		_MXK_Queue
 17326 ;;		_MXK_Release
 17327 ;;		_MXK_SwitchTo
 17328 ;;		_Port_SetPin
 17329 ;;		_Timer0_Restart
 17330 ;;		_Timer0_Stop
 17331 ;; This function is called by:
 17332 ;;		_Motor_Init
 17333 ;;		_MXK_Dequeue
 17334 ;;		_Timer0_ISR
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           	psect	text73
 17339  01344E                     __ptext73:
 17340                           	opt stack 0
 17341  01344E                     _Motor_Step:
 17342                           	opt stack 0
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;Skip over the trampoline to the duplicate function for level 2
 17346  01344E  B251               	btfsc	btemp,1,c
 17347  013450  EF4C  F09C         	goto	i2_Motor_Step
 17348  013454                     _Motor_Step$intlevel0:
 17349                           	opt stack 16
 17350                           
 17351                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 17352                           
 17353                           ;incstack = 0
 17354  013454  0100               	movlb	0	; () banked
 17355  013456  EE20 F004          	lfsr	2,4
 17356  01345A  517F               	movf	_lMotor& (0+255),w,b
 17357  01345C  26D9               	addwf	fsr2l,f,c
 17358  01345E  5180               	movf	(_lMotor+1)& (0+255),w,b
 17359  013460  22DA               	addwfc	fsr2h,f,c
 17360  013462  50DF               	movf	indf2,w,c
 17361  013464  ECFF  F0AF         	call	_MXK_SwitchTo
 17362  013468  0900               	iorlw	0
 17363  01346A  B4D8               	btfsc	status,2,c
 17364  01346C  D07A               	goto	l1627
 17365                           
 17366                           ;Motor.c: 78: {
 17367                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 17368  01346E  C07F  FFD9         	movff	_lMotor,fsr2l
 17369  013472  C080  FFDA         	movff	_lMotor+1,fsr2h
 17370  013476  50DE               	movf	postinc2,w,c
 17371  013478  10DE               	iorwf	postinc2,w,c
 17372  01347A  B4D8               	btfsc	status,2,c
 17373  01347C  D06D               	goto	l1628
 17374                           
 17375                           ;Motor.c: 80: {
 17376                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 17377  01347E  C07F  FFD9         	movff	_lMotor,fsr2l
 17378  013482  C080  FFDA         	movff	_lMotor+1,fsr2h
 17379  013486  0E01               	movlw	1
 17380  013488  BEDB               	btfsc	plusw2,7,c
 17381  01348A  D026               	goto	l1629
 17382  01348C  0E01               	movlw	1
 17383  01348E  50DB               	movf	plusw2,w,c
 17384  013490  E103               	bnz	u9730
 17385  013492  04DE               	decf	postinc2,w,c
 17386  013494  A0D8               	btfss	status,0,c
 17387  013496  D020               	goto	l1629
 17388  013498                     u9730:
 17389                           
 17390                           ;Motor.c: 83: {
 17391                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17392  013498  C07F  FFD9         	movff	_lMotor,fsr2l
 17393  01349C  C080  FFDA         	movff	_lMotor+1,fsr2h
 17394  0134A0  28DE               	incf	postinc2,w,c
 17395  0134A2  E104               	bnz	u9740
 17396  0134A4  0E7F               	movlw	127
 17397  0134A6  18DE               	xorwf	postinc2,w,c
 17398  0134A8  B4D8               	btfsc	status,2,c
 17399  0134AA  D007               	goto	l1630
 17400  0134AC                     u9740:
 17401                           
 17402                           ;Motor.c: 85: lMotor->mDelta --;
 17403  0134AC  C07F  FFD9         	movff	_lMotor,fsr2l
 17404  0134B0  C080  FFDA         	movff	_lMotor+1,fsr2h
 17405  0134B4  06DE               	decf	postinc2,f,c
 17406  0134B6  0E00               	movlw	0
 17407  0134B8  5ADD               	subwfb	postdec2,f,c
 17408  0134BA                     l1630:
 17409                           
 17410                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 17411  0134BA  0E91               	movlw	low _PortE
 17412  0134BC  0100               	movlb	0	; () banked
 17413  0134BE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17414  0134C0  0E00               	movlw	high _PortE
 17415  0134C2  0100               	movlb	0	; () banked
 17416  0134C4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17417  0134C6  0E00               	movlw	0
 17418  0134C8  0100               	movlb	0	; () banked
 17419  0134CA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17420  0134CC  0E01               	movlw	1
 17421  0134CE  0100               	movlb	0	; () banked
 17422  0134D0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17423  0134D2  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17424                           
 17425                           ;Motor.c: 88: }
 17426  0134D6  D01F               	goto	l1631
 17427  0134D8                     l1629:
 17428                           
 17429                           ;Motor.c: 89: else
 17430                           ;Motor.c: 90: {
 17431                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 17432  0134D8  C07F  FFD9         	movff	_lMotor,fsr2l
 17433  0134DC  C080  FFDA         	movff	_lMotor+1,fsr2h
 17434  0134E0  04DE               	decf	postinc2,w,c
 17435  0134E2  E104               	bnz	u9750
 17436  0134E4  0E80               	movlw	128
 17437  0134E6  18DE               	xorwf	postinc2,w,c
 17438  0134E8  B4D8               	btfsc	status,2,c
 17439  0134EA  D007               	goto	l1632
 17440  0134EC                     u9750:
 17441                           
 17442                           ;Motor.c: 92: lMotor->mDelta ++;
 17443  0134EC  C07F  FFD9         	movff	_lMotor,fsr2l
 17444  0134F0  C080  FFDA         	movff	_lMotor+1,fsr2h
 17445  0134F4  2ADE               	incf	postinc2,f,c
 17446  0134F6  0E00               	movlw	0
 17447  0134F8  22DD               	addwfc	postdec2,f,c
 17448  0134FA                     l1632:
 17449                           
 17450                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 17451  0134FA  0E91               	movlw	low _PortE
 17452  0134FC  0100               	movlb	0	; () banked
 17453  0134FE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17454  013500  0E00               	movlw	high _PortE
 17455  013502  0100               	movlb	0	; () banked
 17456  013504  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17457  013506  0E00               	movlw	0
 17458  013508  0100               	movlb	0	; () banked
 17459  01350A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17460  01350C  0E00               	movlw	0
 17461  01350E  0100               	movlb	0	; () banked
 17462  013510  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17463  013512  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17464  013516                     l1631:
 17465                           
 17466                           ;Motor.c: 95: }
 17467                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17468  013516  0E91               	movlw	low _PortE
 17469  013518  0100               	movlb	0	; () banked
 17470  01351A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17471  01351C  0E00               	movlw	high _PortE
 17472  01351E  0100               	movlb	0	; () banked
 17473  013520  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17474  013522  0E01               	movlw	1
 17475  013524  0100               	movlb	0	; () banked
 17476  013526  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17477  013528  0E01               	movlw	1
 17478  01352A  0100               	movlb	0	; () banked
 17479  01352C  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17480  01352E  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17481                           
 17482                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17483  013532  0E91               	movlw	low _PortE
 17484  013534  0100               	movlb	0	; () banked
 17485  013536  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17486  013538  0E00               	movlw	high _PortE
 17487  01353A  0100               	movlb	0	; () banked
 17488  01353C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17489  01353E  0E01               	movlw	1
 17490  013540  0100               	movlb	0	; () banked
 17491  013542  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17492  013544  0E00               	movlw	0
 17493  013546  0100               	movlb	0	; () banked
 17494  013548  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17495  01354A  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 17496                           
 17497                           ;Motor.c: 101: MXK_Release();
 17498  01354E  EC4B  F0B3         	call	_MXK_Release	;wreg free
 17499                           
 17500                           ;Motor.c: 102: Timer0_Restart();
 17501  013552  EC3A  F0B4         	call	_Timer0_Restart	;wreg free
 17502                           
 17503                           ;Motor.c: 103: return;
 17504  013556  0012               	return	
 17505  013558                     l1628:
 17506                           
 17507                           ;Motor.c: 104: }
 17508                           ;Motor.c: 105: MXK_Release();
 17509  013558  EC4B  F0B3         	call	_MXK_Release	;wreg free
 17510                           
 17511                           ;Motor.c: 106: Timer0_Stop();
 17512  01355C  EC65  F0B4         	call	_Timer0_Stop	;wreg free
 17513                           
 17514                           ;Motor.c: 107: return;
 17515  013560  0012               	return	
 17516  013562                     l1627:
 17517                           
 17518                           ;Motor.c: 108: }
 17519                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17520  013562  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17521  013566  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17522  01356A  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17523  01356E  EC26  F0B4         	call	_MXK_Queue	;wreg free
 17524  013572  0012               	return		;funcret
 17525  013574                     __end_of_Motor_Step:
 17526                           	opt stack 0
 17527                           tosu	equ	0xFFF
 17528                           tosh	equ	0xFFE
 17529                           tosl	equ	0xFFD
 17530                           pclath	equ	0xFFA
 17531                           tblptru	equ	0xFF8
 17532                           tblptrh	equ	0xFF7
 17533                           tblptrl	equ	0xFF6
 17534                           tablat	equ	0xFF5
 17535                           prodh	equ	0xFF4
 17536                           prodl	equ	0xFF3
 17537                           intcon	equ	0xFF2
 17538                           postinc0	equ	0xFEE
 17539                           wreg	equ	0xFE8
 17540                           indf1	equ	0xFE7
 17541                           postdec1	equ	0xFE5
 17542                           fsr1h	equ	0xFE2
 17543                           fsr1l	equ	0xFE1
 17544                           indf2	equ	0xFDF
 17545                           postinc2	equ	0xFDE
 17546                           postdec2	equ	0xFDD
 17547                           plusw2	equ	0xFDB
 17548                           fsr2h	equ	0xFDA
 17549                           fsr2l	equ	0xFD9
 17550                           status	equ	0xFD8
 17551                           
 17552 ;; *************** function _Timer0_Stop *****************
 17553 ;; Defined at:
 17554 ;;		line 89 in file "Library/Timer0.c"
 17555 ;; Parameters:    Size  Location     Type
 17556 ;;		None
 17557 ;; Auto vars:     Size  Location     Type
 17558 ;;		None
 17559 ;; Return value:  Size  Location     Type
 17560 ;;                  1    wreg      void 
 17561 ;; Registers used:
 17562 ;;		None
 17563 ;; Tracked objects:
 17564 ;;		On entry : 0/0
 17565 ;;		On exit  : 0/0
 17566 ;;		Unchanged: 0/0
 17567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17572 ;;Total ram usage:        0 bytes
 17573 ;; Hardware stack levels used:    1
 17574 ;; Hardware stack levels required when called:    7
 17575 ;; This function calls:
 17576 ;;		Nothing
 17577 ;; This function is called by:
 17578 ;;		_Motor_Step
 17579 ;; This function uses a non-reentrant model
 17580 ;;
 17581                           
 17582                           	psect	text74
 17583  0168CA                     __ptext74:
 17584                           	opt stack 0
 17585  0168CA                     _Timer0_Stop:
 17586                           	opt stack 19
 17587                           
 17588                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17589                           
 17590                           ;incstack = 0
 17591  0168CA  9AF2               	bcf	intcon,5,c	;volatile
 17592                           
 17593                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17594  0168CC  94F2               	bcf	intcon,2,c	;volatile
 17595  0168CE  0012               	return		;funcret
 17596  0168D0                     __end_of_Timer0_Stop:
 17597                           	opt stack 0
 17598                           tosu	equ	0xFFF
 17599                           tosh	equ	0xFFE
 17600                           tosl	equ	0xFFD
 17601                           pclath	equ	0xFFA
 17602                           tblptru	equ	0xFF8
 17603                           tblptrh	equ	0xFF7
 17604                           tblptrl	equ	0xFF6
 17605                           tablat	equ	0xFF5
 17606                           prodh	equ	0xFF4
 17607                           prodl	equ	0xFF3
 17608                           intcon	equ	0xFF2
 17609                           postinc0	equ	0xFEE
 17610                           wreg	equ	0xFE8
 17611                           indf1	equ	0xFE7
 17612                           postdec1	equ	0xFE5
 17613                           fsr1h	equ	0xFE2
 17614                           fsr1l	equ	0xFE1
 17615                           indf2	equ	0xFDF
 17616                           postinc2	equ	0xFDE
 17617                           postdec2	equ	0xFDD
 17618                           plusw2	equ	0xFDB
 17619                           fsr2h	equ	0xFDA
 17620                           fsr2l	equ	0xFD9
 17621                           status	equ	0xFD8
 17622                           
 17623 ;; *************** function _Timer0_Restart *****************
 17624 ;; Defined at:
 17625 ;;		line 83 in file "Library/Timer0.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;		None
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;		None
 17630 ;; Return value:  Size  Location     Type
 17631 ;;                  1    wreg      void 
 17632 ;; Registers used:
 17633 ;;		None
 17634 ;; Tracked objects:
 17635 ;;		On entry : 0/0
 17636 ;;		On exit  : 0/0
 17637 ;;		Unchanged: 0/0
 17638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;Total ram usage:        0 bytes
 17644 ;; Hardware stack levels used:    1
 17645 ;; Hardware stack levels required when called:    7
 17646 ;; This function calls:
 17647 ;;		Nothing
 17648 ;; This function is called by:
 17649 ;;		_Motor_Step
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           	psect	text75
 17654  016874                     __ptext75:
 17655                           	opt stack 0
 17656  016874                     _Timer0_Restart:
 17657                           	opt stack 19
 17658                           
 17659                           ;Timer0.c: 85: TMR0 = COUNTER;
 17660                           
 17661                           ;incstack = 0
 17662  016874  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17663  016878  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17664                           
 17665                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17666  01687C  8AF2               	bsf	intcon,5,c	;volatile
 17667  01687E  0012               	return		;funcret
 17668  016880                     __end_of_Timer0_Restart:
 17669                           	opt stack 0
 17670                           tosu	equ	0xFFF
 17671                           tosh	equ	0xFFE
 17672                           tosl	equ	0xFFD
 17673                           pclath	equ	0xFFA
 17674                           tblptru	equ	0xFF8
 17675                           tblptrh	equ	0xFF7
 17676                           tblptrl	equ	0xFF6
 17677                           tablat	equ	0xFF5
 17678                           prodh	equ	0xFF4
 17679                           prodl	equ	0xFF3
 17680                           intcon	equ	0xFF2
 17681                           postinc0	equ	0xFEE
 17682                           wreg	equ	0xFE8
 17683                           indf1	equ	0xFE7
 17684                           postdec1	equ	0xFE5
 17685                           fsr1h	equ	0xFE2
 17686                           fsr1l	equ	0xFE1
 17687                           indf2	equ	0xFDF
 17688                           postinc2	equ	0xFDE
 17689                           postdec2	equ	0xFDD
 17690                           plusw2	equ	0xFDB
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _MXK_SwitchTo *****************
 17696 ;; Defined at:
 17697 ;;		line 105 in file "Library/MXK.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  pModule         1    wreg     enum E6927
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;  pModule         1    7[BANK0 ] enum E6927
 17702 ;;  CUR             1    6[BANK0 ] unsigned char 
 17703 ;; Return value:  Size  Location     Type
 17704 ;;                  1    wreg      unsigned char 
 17705 ;; Registers used:
 17706 ;;		wreg, status,2, status,0, cstack
 17707 ;; Tracked objects:
 17708 ;;		On entry : 0/0
 17709 ;;		On exit  : 0/0
 17710 ;;		Unchanged: 0/0
 17711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17716 ;;Total ram usage:        2 bytes
 17717 ;; Hardware stack levels used:    1
 17718 ;; Hardware stack levels required when called:    8
 17719 ;; This function calls:
 17720 ;;		_delay_us
 17721 ;; This function is called by:
 17722 ;;		_Motor_Step
 17723 ;;		_findClosestWall
 17724 ;;		_measureAndDisplayDistance
 17725 ;;		_mode1
 17726 ;;		_mode2
 17727 ;;		_mode4
 17728 ;;		_main
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text76
 17733  015FFE                     __ptext76:
 17734                           	opt stack 0
 17735  015FFE                     _MXK_SwitchTo:
 17736                           	opt stack 20
 17737                           
 17738                           ;incstack = 0
 17739                           ;MXK_SwitchTo@pModule stored from wreg
 17740  015FFE  0100               	movlb	0	; () banked
 17741  016000  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17742                           
 17743                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17744  016002  5086               	movf	3974,w,c	;volatile
 17745  016004  0B0F               	andlw	15
 17746  016006  0100               	movlb	0	; () banked
 17747  016008  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17751  01600A  504B               	movf	_Bus_State,w,c
 17752  01600C  A4D8               	btfss	status,2,c
 17753  01600E  D002               	goto	l1730
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;MXK.c: 110: return 0;
 17757  016010  0E00               	movlw	0
 17758                           
 17759                           ; BSR set to: 0
 17760  016012  0012               	return	
 17761  016014                     l1730:
 17762                           
 17763                           ; BSR set to: 0
 17764                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17765                           
 17766                           ; BSR set to: 0
 17767  016014  0E00               	movlw	0
 17768  016016  6E4B               	movwf	_Bus_State,c
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;MXK.c: 114: if (CUR != pModule)
 17772  016018  0100               	movlb	0	; () banked
 17773  01601A  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17774  01601C  0100               	movlb	0	; () banked
 17775  01601E  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17776  016020  B4D8               	btfsc	status,2,c
 17777  016022  D00C               	goto	l1732
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;MXK.c: 115: {
 17781                           ;MXK.c: 116: PORTG &= ~(0xF);
 17782  016024  0EF0               	movlw	240
 17783  016026  1686               	andwf	3974,f,c	;volatile
 17784                           
 17785                           ;MXK.c: 117: PORTG |= pModule;
 17786  016028  0100               	movlb	0	; () banked
 17787  01602A  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17788  01602C  1286               	iorwf	3974,f,c	;volatile
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;MXK.c: 120: delay_us(10);
 17792  01602E  0E00               	movlw	0
 17793  016030  0100               	movlb	0	; () banked
 17794  016032  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17795  016034  0E0A               	movlw	10
 17796  016036  6FBA               	movwf	delay_us@us& (0+255),b
 17797  016038  EC1F  F0AE         	call	_delay_us	;wreg free
 17798  01603C                     l1732:
 17799                           
 17800                           ;MXK.c: 121: }
 17801                           ;MXK.c: 122: return 1;
 17802  01603C  0E01               	movlw	1
 17803  01603E  0012               	return	
 17804  016040                     __end_of_MXK_SwitchTo:
 17805                           	opt stack 0
 17806                           tosu	equ	0xFFF
 17807                           tosh	equ	0xFFE
 17808                           tosl	equ	0xFFD
 17809                           pclath	equ	0xFFA
 17810                           tblptru	equ	0xFF8
 17811                           tblptrh	equ	0xFF7
 17812                           tblptrl	equ	0xFF6
 17813                           tablat	equ	0xFF5
 17814                           prodh	equ	0xFF4
 17815                           prodl	equ	0xFF3
 17816                           intcon	equ	0xFF2
 17817                           postinc0	equ	0xFEE
 17818                           wreg	equ	0xFE8
 17819                           indf1	equ	0xFE7
 17820                           postdec1	equ	0xFE5
 17821                           fsr1h	equ	0xFE2
 17822                           fsr1l	equ	0xFE1
 17823                           indf2	equ	0xFDF
 17824                           postinc2	equ	0xFDE
 17825                           postdec2	equ	0xFDD
 17826                           plusw2	equ	0xFDB
 17827                           fsr2h	equ	0xFDA
 17828                           fsr2l	equ	0xFD9
 17829                           status	equ	0xFD8
 17830                           
 17831 ;; *************** function _MXK_Release *****************
 17832 ;; Defined at:
 17833 ;;		line 130 in file "Library/MXK.c"
 17834 ;; Parameters:    Size  Location     Type
 17835 ;;		None
 17836 ;; Auto vars:     Size  Location     Type
 17837 ;;		None
 17838 ;; Return value:  Size  Location     Type
 17839 ;;                  1    wreg      unsigned char 
 17840 ;; Registers used:
 17841 ;;		wreg, status,2, status,0
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17851 ;;Total ram usage:        0 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; Hardware stack levels required when called:    7
 17854 ;; This function calls:
 17855 ;;		Nothing
 17856 ;; This function is called by:
 17857 ;;		_Motor_Step
 17858 ;;		_init
 17859 ;;		_findClosestWall
 17860 ;;		_measureAndDisplayDistance
 17861 ;;		_mode1
 17862 ;;		_mode2
 17863 ;;		_mode4
 17864 ;;		_main
 17865 ;; This function uses a non-reentrant model
 17866 ;;
 17867                           
 17868                           	psect	text77
 17869  016696                     __ptext77:
 17870                           	opt stack 0
 17871  016696                     _MXK_Release:
 17872                           	opt stack 21
 17873                           
 17874                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17875                           
 17876                           ;incstack = 0
 17877  016696  0E01               	movlw	1
 17878  016698  6E4B               	movwf	_Bus_State,c
 17879                           
 17880                           ;MXK.c: 134: if (lQueue != 0)
 17881  01669A  0100               	movlb	0	; () banked
 17882  01669C  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17883  01669E  0100               	movlb	0	; () banked
 17884  0166A0  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17885  0166A2  0100               	movlb	0	; () banked
 17886  0166A4  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17887  0166A6  B4D8               	btfsc	status,2,c
 17888  0166A8  D002               	goto	l1735
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;MXK.c: 135: return 1;
 17892  0166AA  0E01               	movlw	1
 17893                           
 17894                           ; BSR set to: 0
 17895  0166AC  0012               	return	
 17896  0166AE                     l1735:
 17897                           
 17898                           ; BSR set to: 0
 17899                           ;MXK.c: 137: return 0;
 17900                           
 17901                           ; BSR set to: 0
 17902  0166AE  0E00               	movlw	0
 17903  0166B0  0012               	return	
 17904  0166B2                     __end_of_MXK_Release:
 17905                           	opt stack 0
 17906                           tosu	equ	0xFFF
 17907                           tosh	equ	0xFFE
 17908                           tosl	equ	0xFFD
 17909                           pclath	equ	0xFFA
 17910                           tblptru	equ	0xFF8
 17911                           tblptrh	equ	0xFF7
 17912                           tblptrl	equ	0xFF6
 17913                           tablat	equ	0xFF5
 17914                           prodh	equ	0xFF4
 17915                           prodl	equ	0xFF3
 17916                           intcon	equ	0xFF2
 17917                           postinc0	equ	0xFEE
 17918                           wreg	equ	0xFE8
 17919                           indf1	equ	0xFE7
 17920                           postdec1	equ	0xFE5
 17921                           fsr1h	equ	0xFE2
 17922                           fsr1l	equ	0xFE1
 17923                           indf2	equ	0xFDF
 17924                           postinc2	equ	0xFDE
 17925                           postdec2	equ	0xFDD
 17926                           plusw2	equ	0xFDB
 17927                           fsr2h	equ	0xFDA
 17928                           fsr2l	equ	0xFD9
 17929                           status	equ	0xFD8
 17930                           
 17931 ;; *************** function _MXK_Queue *****************
 17932 ;; Defined at:
 17933 ;;		line 144 in file "Library/MXK.c"
 17934 ;; Parameters:    Size  Location     Type
 17935 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17936 ;;		 -> Absolute function(1), Motor_Step(1), 
 17937 ;; Auto vars:     Size  Location     Type
 17938 ;;		None
 17939 ;; Return value:  Size  Location     Type
 17940 ;;                  1    wreg      void 
 17941 ;; Registers used:
 17942 ;;		wreg, status,2, status,0
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17948 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;Total ram usage:        3 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    7
 17955 ;; This function calls:
 17956 ;;		Nothing
 17957 ;; This function is called by:
 17958 ;;		_Motor_Step
 17959 ;; This function uses a non-reentrant model
 17960 ;;
 17961                           
 17962                           	psect	text78
 17963  01684C                     __ptext78:
 17964                           	opt stack 0
 17965  01684C                     _MXK_Queue:
 17966                           	opt stack 19
 17967                           
 17968                           ;MXK.c: 146: lQueue = pCallback;
 17969                           
 17970                           ; BSR set to: 0
 17971                           ;incstack = 0
 17972  01684C  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17973  016850  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17974  016854  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17975  016858  0012               	return		;funcret
 17976  01685A                     __end_of_MXK_Queue:
 17977                           	opt stack 0
 17978                           tosu	equ	0xFFF
 17979                           tosh	equ	0xFFE
 17980                           tosl	equ	0xFFD
 17981                           pclath	equ	0xFFA
 17982                           tblptru	equ	0xFF8
 17983                           tblptrh	equ	0xFF7
 17984                           tblptrl	equ	0xFF6
 17985                           tablat	equ	0xFF5
 17986                           prodh	equ	0xFF4
 17987                           prodl	equ	0xFF3
 17988                           intcon	equ	0xFF2
 17989                           postinc0	equ	0xFEE
 17990                           wreg	equ	0xFE8
 17991                           indf1	equ	0xFE7
 17992                           postdec1	equ	0xFE5
 17993                           fsr1h	equ	0xFE2
 17994                           fsr1l	equ	0xFE1
 17995                           indf2	equ	0xFDF
 17996                           postinc2	equ	0xFDE
 17997                           postdec2	equ	0xFDD
 17998                           plusw2	equ	0xFDB
 17999                           fsr2h	equ	0xFDA
 18000                           fsr2l	equ	0xFD9
 18001                           status	equ	0xFD8
 18002                           
 18003 ;; *************** function _MXK_BlockSwitchTo *****************
 18004 ;; Defined at:
 18005 ;;		line 82 in file "Library/MXK.c"
 18006 ;; Parameters:    Size  Location     Type
 18007 ;;  pModule         1    wreg     enum E6927
 18008 ;; Auto vars:     Size  Location     Type
 18009 ;;  pModule         1    7[BANK0 ] enum E6927
 18010 ;;  CUR             1    6[BANK0 ] unsigned char 
 18011 ;; Return value:  Size  Location     Type
 18012 ;;                  1    wreg      unsigned char 
 18013 ;; Registers used:
 18014 ;;		wreg, status,2, status,0, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;Total ram usage:        2 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    8
 18027 ;; This function calls:
 18028 ;;		_delay_us
 18029 ;; This function is called by:
 18030 ;;		_init
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	text79
 18035  01613C                     __ptext79:
 18036                           	opt stack 0
 18037  01613C                     _MXK_BlockSwitchTo:
 18038                           	opt stack 21
 18039                           
 18040                           ;incstack = 0
 18041                           ;MXK_BlockSwitchTo@pModule stored from wreg
 18042  01613C  0100               	movlb	0	; () banked
 18043  01613E  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 18044                           
 18045                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 18046  016140  5086               	movf	3974,w,c	;volatile
 18047  016142  0B0F               	andlw	15
 18048  016144  0100               	movlb	0	; () banked
 18049  016146  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 18050  016148                     
 18051                           ; BSR set to: 0
 18052                           
 18053                           ; BSR set to: 0
 18054  016148  504B               	movf	_Bus_State,w,c
 18055  01614A  B4D8               	btfsc	status,2,c
 18056  01614C  D7FD               	goto	l1724
 18057                           
 18058                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 18059  01614E  0E00               	movlw	0
 18060  016150  6E4B               	movwf	_Bus_State,c
 18061                           
 18062                           ;MXK.c: 90: if (CUR != pModule)
 18063  016152  0100               	movlb	0	; () banked
 18064  016154  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18065  016156  0100               	movlb	0	; () banked
 18066  016158  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 18067  01615A  B4D8               	btfsc	status,2,c
 18068  01615C  D00C               	goto	l1726
 18069                           
 18070                           ; BSR set to: 0
 18071                           ;MXK.c: 91: {
 18072                           ;MXK.c: 92: PORTG &= ~(0xF);
 18073  01615E  0EF0               	movlw	240
 18074  016160  1686               	andwf	3974,f,c	;volatile
 18075                           
 18076                           ;MXK.c: 93: PORTG |= pModule;
 18077  016162  0100               	movlb	0	; () banked
 18078  016164  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18079  016166  1286               	iorwf	3974,f,c	;volatile
 18080                           
 18081                           ; BSR set to: 0
 18082                           ;MXK.c: 96: delay_us(10);
 18083  016168  0E00               	movlw	0
 18084  01616A  0100               	movlb	0	; () banked
 18085  01616C  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 18086  01616E  0E0A               	movlw	10
 18087  016170  6FBA               	movwf	delay_us@us& (0+255),b
 18088  016172  EC1F  F0AE         	call	_delay_us	;wreg free
 18089  016176                     l1726:
 18090                           
 18091                           ;MXK.c: 97: }
 18092                           ;MXK.c: 98: return 1;
 18093  016176  0E01               	movlw	1
 18094  016178  0012               	return	
 18095  01617A                     __end_of_MXK_BlockSwitchTo:
 18096                           	opt stack 0
 18097                           tosu	equ	0xFFF
 18098                           tosh	equ	0xFFE
 18099                           tosl	equ	0xFFD
 18100                           pclath	equ	0xFFA
 18101                           tblptru	equ	0xFF8
 18102                           tblptrh	equ	0xFF7
 18103                           tblptrl	equ	0xFF6
 18104                           tablat	equ	0xFF5
 18105                           prodh	equ	0xFF4
 18106                           prodl	equ	0xFF3
 18107                           intcon	equ	0xFF2
 18108                           postinc0	equ	0xFEE
 18109                           wreg	equ	0xFE8
 18110                           indf1	equ	0xFE7
 18111                           postdec1	equ	0xFE5
 18112                           fsr1h	equ	0xFE2
 18113                           fsr1l	equ	0xFE1
 18114                           indf2	equ	0xFDF
 18115                           postinc2	equ	0xFDE
 18116                           postdec2	equ	0xFDD
 18117                           plusw2	equ	0xFDB
 18118                           fsr2h	equ	0xFDA
 18119                           fsr2l	equ	0xFD9
 18120                           status	equ	0xFD8
 18121                           
 18122 ;; *************** function _delay_us *****************
 18123 ;; Defined at:
 18124 ;;		line 255 in file "Library/Types.c"
 18125 ;; Parameters:    Size  Location     Type
 18126 ;;  us              2    0[BANK0 ] unsigned short 
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;  u               4    2[BANK0 ] unsigned long 
 18129 ;; Return value:  Size  Location     Type
 18130 ;;                  1    wreg      void 
 18131 ;; Registers used:
 18132 ;;		wreg, status,2, status,0
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18139 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18141 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18142 ;;Total ram usage:        6 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    7
 18145 ;; This function calls:
 18146 ;;		Nothing
 18147 ;; This function is called by:
 18148 ;;		_MXK_BlockSwitchTo
 18149 ;;		_MXK_SwitchTo
 18150 ;; This function uses a non-reentrant model
 18151 ;;
 18152                           
 18153                           	psect	text80
 18154  015C3E                     __ptext80:
 18155                           	opt stack 0
 18156  015C3E                     _delay_us:
 18157                           	opt stack 20
 18158                           
 18159                           ;Types.c: 256: unsigned long u;
 18160                           ;Types.c: 257: while (us--) {
 18161                           
 18162                           ;incstack = 0
 18163  015C3E  D01C               	goto	u9070
 18164  015C40                     l12429:
 18165                           
 18166                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 18167  015C40  0E00               	movlw	0
 18168  015C42  0100               	movlb	0	; () banked
 18169  015C44  6FBC               	movwf	delay_us@u& (0+255),b
 18170  015C46  0E00               	movlw	0
 18171  015C48  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 18172  015C4A  0E00               	movlw	0
 18173  015C4C  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 18174  015C4E  0E00               	movlw	0
 18175  015C50  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 18176  015C52                     l12431:
 18177                           
 18178                           ; BSR set to: 0
 18179  015C52  0100               	movlb	0	; () banked
 18180  015C54  51BC               	movf	delay_us@u& (0+255),w,b
 18181  015C56  0100               	movlb	0	; () banked
 18182  015C58  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 18183  015C5A  0100               	movlb	0	; () banked
 18184  015C5C  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 18185  015C5E  0100               	movlb	0	; () banked
 18186  015C60  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 18187  015C62  A4D8               	btfss	status,2,c
 18188  015C64  D009               	goto	u9070
 18189                           
 18190                           ; BSR set to: 0
 18191                           
 18192                           ; BSR set to: 0
 18193  015C66  F000               	nop		; ;# 
 18194  015C68  0E01               	movlw	1
 18195  015C6A  0100               	movlb	0	; () banked
 18196  015C6C  27BC               	addwf	delay_us@u& (0+255),f,b
 18197  015C6E  0E00               	movlw	0
 18198  015C70  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 18199  015C72  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 18200  015C74  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 18201  015C76  D7ED               	goto	l12431
 18202  015C78                     u9070:
 18203                           
 18204                           ; BSR set to: 0
 18205                           
 18206                           ; BSR set to: 0
 18207  015C78  0100               	movlb	0	; () banked
 18208  015C7A  07BA               	decf	delay_us@us& (0+255),f,b
 18209  015C7C  A0D8               	btfss	status,0,c
 18210  015C7E  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 18211  015C80  0100               	movlb	0	; () banked
 18212  015C82  29BA               	incf	delay_us@us& (0+255),w,b
 18213  015C84  E1DD               	bnz	l12429
 18214  015C86  0100               	movlb	0	; () banked
 18215  015C88  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 18216  015C8A  B4D8               	btfsc	status,2,c
 18217  015C8C  0012               	return	
 18218  015C8E  D7D8               	goto	l832
 18219  015C90                     __end_of_delay_us:
 18220                           	opt stack 0
 18221                           tosu	equ	0xFFF
 18222                           tosh	equ	0xFFE
 18223                           tosl	equ	0xFFD
 18224                           pclath	equ	0xFFA
 18225                           tblptru	equ	0xFF8
 18226                           tblptrh	equ	0xFF7
 18227                           tblptrl	equ	0xFF6
 18228                           tablat	equ	0xFF5
 18229                           prodh	equ	0xFF4
 18230                           prodl	equ	0xFF3
 18231                           intcon	equ	0xFF2
 18232                           postinc0	equ	0xFEE
 18233                           wreg	equ	0xFE8
 18234                           indf1	equ	0xFE7
 18235                           postdec1	equ	0xFE5
 18236                           fsr1h	equ	0xFE2
 18237                           fsr1l	equ	0xFE1
 18238                           indf2	equ	0xFDF
 18239                           postinc2	equ	0xFDE
 18240                           postdec2	equ	0xFDD
 18241                           plusw2	equ	0xFDB
 18242                           fsr2h	equ	0xFDA
 18243                           fsr2l	equ	0xFD9
 18244                           status	equ	0xFD8
 18245                           
 18246 ;; *************** function _LCD_Init *****************
 18247 ;; Defined at:
 18248 ;;		line 172 in file "Library/LCD.c"
 18249 ;; Parameters:    Size  Location     Type
 18250 ;;		None
 18251 ;; Auto vars:     Size  Location     Type
 18252 ;;  i               2   55[BANK0 ] unsigned short 
 18253 ;; Return value:  Size  Location     Type
 18254 ;;                  1    wreg      void 
 18255 ;; Registers used:
 18256 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18257 ;; Tracked objects:
 18258 ;;		On entry : 0/0
 18259 ;;		On exit  : 0/0
 18260 ;;		Unchanged: 0/0
 18261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18266 ;;Total ram usage:        4 bytes
 18267 ;; Hardware stack levels used:    1
 18268 ;; Hardware stack levels required when called:   15
 18269 ;; This function calls:
 18270 ;;		_Configure_GPIOs
 18271 ;;		_LCD_Fill
 18272 ;;		_LCD_Write
 18273 ;;		_Set_Rotation
 18274 ;;		_delay_ms
 18275 ;; This function is called by:
 18276 ;;		_init
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           	psect	text81
 18281  012EB6                     __ptext81:
 18282                           	opt stack 0
 18283  012EB6                     _LCD_Init:
 18284                           	opt stack 14
 18285                           
 18286                           ;LCD.c: 174: UINT16 i;
 18287                           ;LCD.c: 175: Configure_GPIOs();
 18288                           
 18289                           ; BSR set to: 0
 18290                           ;incstack = 0
 18291  012EB6  EC2F  F0AB         	call	_Configure_GPIOs	;wreg free
 18292                           
 18293                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 18294  012EBA  0E00               	movlw	0
 18295  012EBC  0100               	movlb	0	; () banked
 18296  012EBE  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 18297  012EC0  0E00               	movlw	0
 18298  012EC2  6FF1               	movwf	LCD_Init@i& (0+255),b
 18299                           
 18300                           ; BSR set to: 0
 18301  012EC4  0100               	movlb	0	; () banked
 18302  012EC6  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18303  012EC8  E106               	bnz	u11270
 18304  012ECA  0E59               	movlw	89
 18305  012ECC  0100               	movlb	0	; () banked
 18306  012ECE  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18307  012ED0  B0D8               	btfsc	status,0,c
 18308  012ED2  D08B               	goto	u11310
 18309  012ED4  D001               	goto	l85
 18310  012ED6                     u11270:
 18311                           
 18312                           ; BSR set to: 0
 18313  012ED6  D089               	goto	u11310
 18314  012ED8                     l85:
 18315                           
 18316                           ; BSR set to: 0
 18317                           ;LCD.c: 178: {
 18318                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 18319                           
 18320                           ; BSR set to: 0
 18321  012ED8  90D8               	bcf	status,0,c
 18322  012EDA  0100               	movlb	0	; () banked
 18323  012EDC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18324  012EDE  6EF6               	movwf	tblptrl,c
 18325  012EE0  0100               	movlb	0	; () banked
 18326  012EE2  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18327  012EE4  6EF7               	movwf	tblptrh,c
 18328  012EE6  0E33               	movlw	low _InitList
 18329  012EE8  26F6               	addwf	tblptrl,f,c
 18330  012EEA  0EFC               	movlw	high _InitList
 18331  012EEC  22F7               	addwfc	tblptrh,f,c
 18332  012EEE                     	if	1	;There are 3 active tblptr bytes
 18333  012EEE  6AF8               	clrf	tblptru,c
 18334  012EF0  0E00               	movlw	low (__mediumconst shr (0+16))
 18335  012EF2  22F8               	addwfc	tblptru,f,c
 18336  012EF4                     	endif
 18337  012EF4  0009               	tblrd		*+
 18338  012EF6  0E80               	movlw	128
 18339  012EF8  18F5               	xorwf	tablat,w,c
 18340  012EFA  0009               	tblrd		*+
 18341  012EFC  10F5               	iorwf	tablat,w,c
 18342  012EFE  A4D8               	btfss	status,2,c
 18343  012F00  D022               	goto	l87
 18344                           
 18345                           ; BSR set to: 0
 18346  012F02  0100               	movlb	0	; () banked
 18347  012F04  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18348  012F06  E11F               	bnz	l14485
 18349  012F08  0E58               	movlw	88
 18350  012F0A  0100               	movlb	0	; () banked
 18351  012F0C  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18352  012F0E  B0D8               	btfsc	status,0,c
 18353  012F10  D01A               	goto	l87
 18354                           
 18355                           ; BSR set to: 0
 18356                           ;LCD.c: 180: delay_ms(InitList[++i]);
 18357  012F12  0100               	movlb	0	; () banked
 18358  012F14  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18359  012F16  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18360  012F18  90D8               	bcf	status,0,c
 18361  012F1A  0100               	movlb	0	; () banked
 18362  012F1C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18363  012F1E  6EF6               	movwf	tblptrl,c
 18364  012F20  0100               	movlb	0	; () banked
 18365  012F22  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18366  012F24  6EF7               	movwf	tblptrh,c
 18367  012F26  0E33               	movlw	low _InitList
 18368  012F28  26F6               	addwf	tblptrl,f,c
 18369  012F2A  0EFC               	movlw	high _InitList
 18370  012F2C  22F7               	addwfc	tblptrh,f,c
 18371  012F2E                     	if	1	;There are 3 active tblptr bytes
 18372  012F2E  6AF8               	clrf	tblptru,c
 18373  012F30  0E00               	movlw	low (__mediumconst shr (0+16))
 18374  012F32  22F8               	addwfc	tblptru,f,c
 18375  012F34                     	endif
 18376  012F34  0009               	tblrd		*+
 18377  012F36  CFF5 F0BA          	movff	tablat,delay_ms@ms
 18378  012F3A  000A               	tblrd		*-
 18379  012F3C  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 18380  012F40  EC08  F0AC         	call	_delay_ms	;wreg free
 18381  012F44  D04B               	goto	l90
 18382  012F46                     l87:
 18383  012F46                     l14485:
 18384                           
 18385                           ;LCD.c: 181: else
 18386                           ;LCD.c: 182: {
 18387                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 18388  012F46  90D8               	bcf	status,0,c
 18389  012F48  0100               	movlb	0	; () banked
 18390  012F4A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18391  012F4C  6EF6               	movwf	tblptrl,c
 18392  012F4E  0100               	movlb	0	; () banked
 18393  012F50  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18394  012F52  6EF7               	movwf	tblptrh,c
 18395  012F54  0E33               	movlw	low _InitList
 18396  012F56  26F6               	addwf	tblptrl,f,c
 18397  012F58  0EFC               	movlw	high _InitList
 18398  012F5A  22F7               	addwfc	tblptrh,f,c
 18399  012F5C                     	if	1	;There are 3 active tblptr bytes
 18400  012F5C  6AF8               	clrf	tblptru,c
 18401  012F5E  0E00               	movlw	low (__mediumconst shr (0+16))
 18402  012F60  22F8               	addwfc	tblptru,f,c
 18403  012F62                     	endif
 18404  012F62  0009               	tblrd		*+
 18405  012F64  0E00               	movlw	0
 18406  012F66  5EF5               	subwf	tablat,f,c
 18407  012F68  0009               	tblrd		*+
 18408  012F6A  0E01               	movlw	1
 18409  012F6C  5AF5               	subwfb	tablat,f,c
 18410  012F6E  A0D8               	btfss	status,0,c
 18411  012F70  D020               	goto	l89
 18412                           
 18413                           ; BSR set to: 0
 18414  012F72  0E00               	movlw	0
 18415  012F74  0100               	movlb	0	; () banked
 18416  012F76  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18417  012F78  90D8               	bcf	status,0,c
 18418  012F7A  0100               	movlb	0	; () banked
 18419  012F7C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18420  012F7E  6EF6               	movwf	tblptrl,c
 18421  012F80  0100               	movlb	0	; () banked
 18422  012F82  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18423  012F84  6EF7               	movwf	tblptrh,c
 18424  012F86  0E33               	movlw	low _InitList
 18425  012F88  26F6               	addwf	tblptrl,f,c
 18426  012F8A  0EFC               	movlw	high _InitList
 18427  012F8C  22F7               	addwfc	tblptrh,f,c
 18428  012F8E                     	if	1	;There are 3 active tblptr bytes
 18429  012F8E  6AF8               	clrf	tblptru,c
 18430  012F90  0E00               	movlw	low (__mediumconst shr (0+16))
 18431  012F92  22F8               	addwfc	tblptru,f,c
 18432  012F94                     	endif
 18433  012F94  0009               	tblrd		*+
 18434  012F96  CFF5 F0EF          	movff	tablat,??_LCD_Init
 18435  012F9A  0009               	tblrd		*+
 18436  012F9C  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 18437  012FA0  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 18438  012FA4  0100               	movlb	0	; () banked
 18439  012FA6  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 18440  012FA8  0100               	movlb	0	; () banked
 18441  012FAA  51EF               	movf	??_LCD_Init& (0+255),w,b
 18442  012FAC  EC82  F0B2         	call	_LCD_Write
 18443  012FB0  D015               	goto	l90
 18444  012FB2                     l89:
 18445                           
 18446                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 18447  012FB2  0E01               	movlw	1
 18448  012FB4  0100               	movlb	0	; () banked
 18449  012FB6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18450  012FB8  90D8               	bcf	status,0,c
 18451  012FBA  0100               	movlb	0	; () banked
 18452  012FBC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18453  012FBE  6EF6               	movwf	tblptrl,c
 18454  012FC0  0100               	movlb	0	; () banked
 18455  012FC2  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18456  012FC4  6EF7               	movwf	tblptrh,c
 18457  012FC6  0E33               	movlw	low _InitList
 18458  012FC8  26F6               	addwf	tblptrl,f,c
 18459  012FCA  0EFC               	movlw	high _InitList
 18460  012FCC  22F7               	addwfc	tblptrh,f,c
 18461  012FCE                     	if	1	;There are 3 active tblptr bytes
 18462  012FCE  6AF8               	clrf	tblptru,c
 18463  012FD0  0E00               	movlw	low (__mediumconst shr (0+16))
 18464  012FD2  22F8               	addwfc	tblptru,f,c
 18465  012FD4                     	endif
 18466  012FD4  0008               	tblrd		*
 18467  012FD6  50F5               	movf	tablat,w,c
 18468  012FD8  EC82  F0B2         	call	_LCD_Write
 18469  012FDC                     l90:
 18470  012FDC  0100               	movlb	0	; () banked
 18471  012FDE  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18472  012FE0  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18473                           
 18474                           ; BSR set to: 0
 18475  012FE2  0100               	movlb	0	; () banked
 18476  012FE4  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18477  012FE6  E101               	bnz	l14495
 18478  012FE8  D770               	goto	L12
 18479  012FEA                     u11310:
 18480  012FEA                     l14495:
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;LCD.c: 185: }
 18484                           ;LCD.c: 186: }
 18485                           ;LCD.c: 187: delay_ms(100);
 18486  012FEA  0E00               	movlw	0
 18487  012FEC  0100               	movlb	0	; () banked
 18488  012FEE  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18489  012FF0  0E64               	movlw	100
 18490  012FF2  6FBA               	movwf	delay_ms@ms& (0+255),b
 18491  012FF4  EC08  F0AC         	call	_delay_ms	;wreg free
 18492                           
 18493                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18494  012FF8  0E00               	movlw	0
 18495  012FFA  0100               	movlb	0	; () banked
 18496  012FFC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18497  012FFE  0E29               	movlw	41
 18498  013000  EC82  F0B2         	call	_LCD_Write
 18499                           
 18500                           ;LCD.c: 189: Set_Rotation(1);
 18501  013004  0E01               	movlw	1
 18502  013006  EC27  F0A7         	call	_Set_Rotation
 18503                           
 18504                           ;LCD.c: 191: delay_ms(100);
 18505  01300A  0E00               	movlw	0
 18506  01300C  0100               	movlb	0	; () banked
 18507  01300E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18508  013010  0E64               	movlw	100
 18509  013012  6FBA               	movwf	delay_ms@ms& (0+255),b
 18510  013014  EC08  F0AC         	call	_delay_ms	;wreg free
 18511                           
 18512                           ;LCD.c: 192: LCD_Fill(0x0000);
 18513  013018  0E00               	movlw	0
 18514  01301A  0100               	movlb	0	; () banked
 18515  01301C  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18516  01301E  0E00               	movlw	0
 18517  013020  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18518  013022  ECF3  F0AD         	call	_LCD_Fill	;wreg free
 18519  013026  0012               	return		;funcret
 18520  013028                     __end_of_LCD_Init:
 18521                           	opt stack 0
 18522                           tosu	equ	0xFFF
 18523                           tosh	equ	0xFFE
 18524                           tosl	equ	0xFFD
 18525                           pclath	equ	0xFFA
 18526                           tblptru	equ	0xFF8
 18527                           tblptrh	equ	0xFF7
 18528                           tblptrl	equ	0xFF6
 18529                           tablat	equ	0xFF5
 18530                           prodh	equ	0xFF4
 18531                           prodl	equ	0xFF3
 18532                           intcon	equ	0xFF2
 18533                           postinc0	equ	0xFEE
 18534                           wreg	equ	0xFE8
 18535                           indf1	equ	0xFE7
 18536                           postdec1	equ	0xFE5
 18537                           fsr1h	equ	0xFE2
 18538                           fsr1l	equ	0xFE1
 18539                           indf2	equ	0xFDF
 18540                           postinc2	equ	0xFDE
 18541                           postdec2	equ	0xFDD
 18542                           plusw2	equ	0xFDB
 18543                           fsr2h	equ	0xFDA
 18544                           fsr2l	equ	0xFD9
 18545                           status	equ	0xFD8
 18546                           
 18547 ;; *************** function _Set_Rotation *****************
 18548 ;; Defined at:
 18549 ;;		line 248 in file "Library/LCD.c"
 18550 ;; Parameters:    Size  Location     Type
 18551 ;;  m               1    wreg     unsigned char 
 18552 ;; Auto vars:     Size  Location     Type
 18553 ;;  m               1    5[BANK0 ] unsigned char 
 18554 ;;  rotation        1    6[BANK0 ] unsigned char 
 18555 ;; Return value:  Size  Location     Type
 18556 ;;                  1    wreg      void 
 18557 ;; Registers used:
 18558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;Total ram usage:        2 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; Hardware stack levels required when called:    9
 18571 ;; This function calls:
 18572 ;;		_LCD_Write
 18573 ;; This function is called by:
 18574 ;;		_LCD_Init
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           	psect	text82
 18579  014E4E                     __ptext82:
 18580                           	opt stack 0
 18581  014E4E                     _Set_Rotation:
 18582                           	opt stack 19
 18583                           
 18584                           ;incstack = 0
 18585                           ;Set_Rotation@m stored from wreg
 18586  014E4E  0100               	movlb	0	; () banked
 18587  014E50  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18588                           
 18589                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18590  014E52  0E00               	movlw	0
 18591  014E54  0100               	movlb	0	; () banked
 18592  014E56  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18596  014E58  0E00               	movlw	0
 18597  014E5A  0100               	movlb	0	; () banked
 18598  014E5C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18599  014E5E  0E36               	movlw	54
 18600  014E60  EC82  F0B2         	call	_LCD_Write
 18601                           
 18602                           ;LCD.c: 253: rotation = (m % 4);
 18603  014E64  0100               	movlb	0	; () banked
 18604  014E66  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18605  014E68  0B03               	andlw	3
 18606  014E6A  0100               	movlb	0	; () banked
 18607  014E6C  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18608                           
 18609                           ;LCD.c: 255: switch(rotation)
 18610  014E6E  D02C               	goto	l117
 18611  014E70                     
 18612                           ; BSR set to: 0
 18613                           ;LCD.c: 258: {
 18614                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18615                           
 18616                           ; BSR set to: 0
 18617  014E70  0E01               	movlw	1
 18618  014E72  0100               	movlb	0	; () banked
 18619  014E74  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18620  014E76  0EC8               	movlw	200
 18621  014E78  EC82  F0B2         	call	_LCD_Write
 18622                           
 18623                           ;LCD.c: 260: w = 128;
 18624  014E7C  0E80               	movlw	128
 18625  014E7E  6E50               	movwf	_w,c
 18626                           
 18627                           ;LCD.c: 261: l = 128;
 18628  014E80  0E80               	movlw	128
 18629  014E82  6E4F               	movwf	_l,c
 18630                           
 18631                           ;LCD.c: 262: break;
 18632  014E84  0012               	return	
 18633  014E86                     
 18634                           ;LCD.c: 265: {
 18635                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18636  014E86  0E01               	movlw	1
 18637  014E88  0100               	movlb	0	; () banked
 18638  014E8A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18639  014E8C  0EA8               	movlw	168
 18640  014E8E  EC82  F0B2         	call	_LCD_Write
 18641                           
 18642                           ;LCD.c: 267: w = 128;
 18643  014E92  0E80               	movlw	128
 18644  014E94  6E50               	movwf	_w,c
 18645                           
 18646                           ;LCD.c: 268: l = 128;
 18647  014E96  0E80               	movlw	128
 18648  014E98  6E4F               	movwf	_l,c
 18649                           
 18650                           ;LCD.c: 269: break;
 18651  014E9A  0012               	return	
 18652  014E9C                     
 18653                           ;LCD.c: 272: {
 18654                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18655  014E9C  0E01               	movlw	1
 18656  014E9E  0100               	movlb	0	; () banked
 18657  014EA0  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18658  014EA2  0E08               	movlw	8
 18659  014EA4  EC82  F0B2         	call	_LCD_Write
 18660                           
 18661                           ;LCD.c: 274: w = 128;
 18662  014EA8  0E80               	movlw	128
 18663  014EAA  6E50               	movwf	_w,c
 18664                           
 18665                           ;LCD.c: 275: l = 128;
 18666  014EAC  0E80               	movlw	128
 18667  014EAE  6E4F               	movwf	_l,c
 18668                           
 18669                           ;LCD.c: 276: break;
 18670  014EB0  0012               	return	
 18671  014EB2                     
 18672                           ;LCD.c: 279: {
 18673                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18674  014EB2  0E01               	movlw	1
 18675  014EB4  0100               	movlb	0	; () banked
 18676  014EB6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18677  014EB8  0E68               	movlw	104
 18678  014EBA  EC82  F0B2         	call	_LCD_Write
 18679                           
 18680                           ;LCD.c: 281: w = 128;
 18681  014EBE  0E80               	movlw	128
 18682  014EC0  6E50               	movwf	_w,c
 18683                           
 18684                           ;LCD.c: 282: l = 128;
 18685  014EC2  0E80               	movlw	128
 18686  014EC4  6E4F               	movwf	_l,c
 18687                           
 18688                           ;LCD.c: 284: }
 18689                           ;LCD.c: 285: }
 18690                           
 18691                           ;LCD.c: 283: break;
 18692  014EC6  0012               	return	
 18693  014EC8                     l117:
 18694  014EC8  0100               	movlb	0	; () banked
 18695  014ECA  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18696                           
 18697                           ; Switch size 1, requested type "space"
 18698                           ; Number of cases is 4, Range of values is 0 to 3
 18699                           ; switch strategies available:
 18700                           ; Name         Instructions Cycles
 18701                           ; simple_byte           13     7 (average)
 18702                           ;	Chosen strategy is simple_byte
 18703  014ECC  0A00               	xorlw	0	; case 0
 18704  014ECE  B4D8               	btfsc	status,2,c
 18705  014ED0  D7CF               	goto	l118
 18706  014ED2  0A01               	xorlw	1	; case 1
 18707  014ED4  B4D8               	btfsc	status,2,c
 18708  014ED6  D7D7               	goto	l120
 18709  014ED8  0A03               	xorlw	3	; case 2
 18710  014EDA  B4D8               	btfsc	status,2,c
 18711  014EDC  D7DF               	goto	l121
 18712  014EDE  0A01               	xorlw	1	; case 3
 18713  014EE0  A4D8               	btfss	status,2,c
 18714  014EE2  0012               	return	
 18715  014EE4  D7E6               	goto	l122
 18716  014EE6                     __end_of_Set_Rotation:
 18717                           	opt stack 0
 18718                           tosu	equ	0xFFF
 18719                           tosh	equ	0xFFE
 18720                           tosl	equ	0xFFD
 18721                           pclath	equ	0xFFA
 18722                           tblptru	equ	0xFF8
 18723                           tblptrh	equ	0xFF7
 18724                           tblptrl	equ	0xFF6
 18725                           tablat	equ	0xFF5
 18726                           prodh	equ	0xFF4
 18727                           prodl	equ	0xFF3
 18728                           intcon	equ	0xFF2
 18729                           postinc0	equ	0xFEE
 18730                           wreg	equ	0xFE8
 18731                           indf1	equ	0xFE7
 18732                           postdec1	equ	0xFE5
 18733                           fsr1h	equ	0xFE2
 18734                           fsr1l	equ	0xFE1
 18735                           indf2	equ	0xFDF
 18736                           postinc2	equ	0xFDE
 18737                           postdec2	equ	0xFDD
 18738                           plusw2	equ	0xFDB
 18739                           fsr2h	equ	0xFDA
 18740                           fsr2l	equ	0xFD9
 18741                           status	equ	0xFD8
 18742                           
 18743 ;; *************** function _LCD_Fill *****************
 18744 ;; Defined at:
 18745 ;;		line 287 in file "Library/LCD.c"
 18746 ;; Parameters:    Size  Location     Type
 18747 ;;  pColour         2    9[BANK0 ] unsigned short 
 18748 ;; Auto vars:     Size  Location     Type
 18749 ;;  j               1   12[BANK0 ] unsigned char 
 18750 ;;  i               1   11[BANK0 ] unsigned char 
 18751 ;; Return value:  Size  Location     Type
 18752 ;;                  1    wreg      void 
 18753 ;; Registers used:
 18754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18755 ;; Tracked objects:
 18756 ;;		On entry : 0/0
 18757 ;;		On exit  : 0/0
 18758 ;;		Unchanged: 0/0
 18759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18760 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18764 ;;Total ram usage:        4 bytes
 18765 ;; Hardware stack levels used:    1
 18766 ;; Hardware stack levels required when called:   10
 18767 ;; This function calls:
 18768 ;;		_LCD_Word_Write
 18769 ;;		_Set_Addr_Window
 18770 ;; This function is called by:
 18771 ;;		_LCD_Init
 18772 ;; This function uses a non-reentrant model
 18773 ;;
 18774                           
 18775                           	psect	text83
 18776  015BE6                     __ptext83:
 18777                           	opt stack 0
 18778  015BE6                     _LCD_Fill:
 18779                           	opt stack 18
 18780                           
 18781                           ;LCD.c: 296: UINT8 i = 0x00;
 18782                           
 18783                           ;incstack = 0
 18784  015BE6  0E00               	movlw	0
 18785  015BE8  0100               	movlb	0	; () banked
 18786  015BEA  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18787                           
 18788                           ;LCD.c: 297: UINT8 j = 0x00;
 18789  015BEC  0E00               	movlw	0
 18790  015BEE  0100               	movlb	0	; () banked
 18791  015BF0  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18795  015BF2  0E00               	movlw	0
 18796  015BF4  0100               	movlb	0	; () banked
 18797  015BF6  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18798  015BF8  0450               	decf	_w,w,c
 18799  015BFA  0100               	movlb	0	; () banked
 18800  015BFC  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18801  015BFE  044F               	decf	_l,w,c
 18802  015C00  0100               	movlb	0	; () banked
 18803  015C02  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18804  015C04  0E00               	movlw	0
 18805  015C06  ECF1  F0A3         	call	_Set_Addr_Window
 18806                           
 18807                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18808  015C0A  C04F  F0C6         	movff	_l,LCD_Fill@j
 18809  015C0E                     l14143:
 18810  015C0E  0100               	movlb	0	; () banked
 18811  015C10  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18812  015C12  0100               	movlb	0	; () banked
 18813  015C14  B4D8               	btfsc	status,2,c
 18814  015C16  0012               	return	
 18815                           
 18816                           ; BSR set to: 0
 18817                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18818                           
 18819                           ; BSR set to: 0
 18820  015C18  C050  F0C5         	movff	_w,LCD_Fill@i
 18821  015C1C                     l14147:
 18822                           
 18823                           ; BSR set to: 0
 18824  015C1C  0100               	movlb	0	; () banked
 18825  015C1E  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18826  015C20  0100               	movlb	0	; () banked
 18827  015C22  B4D8               	btfsc	status,2,c
 18828  015C24  D009               	goto	u10890
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18832                           
 18833                           ; BSR set to: 0
 18834                           
 18835                           ; BSR set to: 0
 18836  015C26  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18837  015C2A  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18838  015C2E  ECE3  F0B2         	call	_LCD_Word_Write	;wreg free
 18839  015C32  0100               	movlb	0	; () banked
 18840  015C34  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18841  015C36  D7F2               	goto	l14147
 18842  015C38                     u10890:
 18843                           
 18844                           ; BSR set to: 0
 18845                           
 18846                           ; BSR set to: 0
 18847  015C38  0100               	movlb	0	; () banked
 18848  015C3A  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18849  015C3C  D7E8               	goto	l14143
 18850  015C3E                     __end_of_LCD_Fill:
 18851                           	opt stack 0
 18852                           tosu	equ	0xFFF
 18853                           tosh	equ	0xFFE
 18854                           tosl	equ	0xFFD
 18855                           pclath	equ	0xFFA
 18856                           tblptru	equ	0xFF8
 18857                           tblptrh	equ	0xFF7
 18858                           tblptrl	equ	0xFF6
 18859                           tablat	equ	0xFF5
 18860                           prodh	equ	0xFF4
 18861                           prodl	equ	0xFF3
 18862                           intcon	equ	0xFF2
 18863                           postinc0	equ	0xFEE
 18864                           wreg	equ	0xFE8
 18865                           indf1	equ	0xFE7
 18866                           postdec1	equ	0xFE5
 18867                           fsr1h	equ	0xFE2
 18868                           fsr1l	equ	0xFE1
 18869                           indf2	equ	0xFDF
 18870                           postinc2	equ	0xFDE
 18871                           postdec2	equ	0xFDD
 18872                           plusw2	equ	0xFDB
 18873                           fsr2h	equ	0xFDA
 18874                           fsr2l	equ	0xFD9
 18875                           status	equ	0xFD8
 18876                           
 18877 ;; *************** function _Set_Addr_Window *****************
 18878 ;; Defined at:
 18879 ;;		line 214 in file "Library/LCD.c"
 18880 ;; Parameters:    Size  Location     Type
 18881 ;;  xs              1    wreg     unsigned char 
 18882 ;;  ys              1    5[BANK0 ] unsigned char 
 18883 ;;  xe              1    6[BANK0 ] unsigned char 
 18884 ;;  ye              1    7[BANK0 ] unsigned char 
 18885 ;; Auto vars:     Size  Location     Type
 18886 ;;  xs              1    8[BANK0 ] unsigned char 
 18887 ;; Return value:  Size  Location     Type
 18888 ;;                  1    wreg      void 
 18889 ;; Registers used:
 18890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18891 ;; Tracked objects:
 18892 ;;		On entry : 0/0
 18893 ;;		On exit  : 0/0
 18894 ;;		Unchanged: 0/0
 18895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18896 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18899 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18900 ;;Total ram usage:        4 bytes
 18901 ;; Hardware stack levels used:    1
 18902 ;; Hardware stack levels required when called:    9
 18903 ;; This function calls:
 18904 ;;		_LCD_Write
 18905 ;; This function is called by:
 18906 ;;		_LCD_Fill
 18907 ;;		_LCD_FillRectangle
 18908 ;;		_LCD_DrawField
 18909 ;;		_RAM_Address_Set
 18910 ;;		_LCD_DrawPixel
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           	psect	text84
 18915  0147E2                     __ptext84:
 18916                           	opt stack 0
 18917  0147E2                     _Set_Addr_Window:
 18918                           	opt stack 17
 18919                           
 18920                           ; BSR set to: 0
 18921                           ;incstack = 0
 18922                           ;Set_Addr_Window@xs stored from wreg
 18923  0147E2  0100               	movlb	0	; () banked
 18924  0147E4  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18925                           
 18926                           ;LCD.c: 216: ys+=2;
 18927  0147E6  0E02               	movlw	2
 18928  0147E8  0100               	movlb	0	; () banked
 18929  0147EA  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18930                           
 18931                           ;LCD.c: 217: ye+=2;
 18932  0147EC  0E02               	movlw	2
 18933  0147EE  0100               	movlb	0	; () banked
 18934  0147F0  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18935                           
 18936                           ;LCD.c: 218: xs+=3;
 18937  0147F2  0E03               	movlw	3
 18938  0147F4  0100               	movlb	0	; () banked
 18939  0147F6  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18940                           
 18941                           ;LCD.c: 219: xe+=3;
 18942  0147F8  0E03               	movlw	3
 18943  0147FA  0100               	movlb	0	; () banked
 18944  0147FC  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18945                           
 18946                           ; BSR set to: 0
 18947                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18948  0147FE  0E00               	movlw	0
 18949  014800  0100               	movlb	0	; () banked
 18950  014802  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18951  014804  0E2A               	movlw	42
 18952  014806  EC82  F0B2         	call	_LCD_Write
 18953                           
 18954                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18955  01480A  0E01               	movlw	1
 18956  01480C  0100               	movlb	0	; () banked
 18957  01480E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18958  014810  0E00               	movlw	0
 18959  014812  EC82  F0B2         	call	_LCD_Write
 18960                           
 18961                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18962  014816  0E01               	movlw	1
 18963  014818  0100               	movlb	0	; () banked
 18964  01481A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18965  01481C  0100               	movlb	0	; () banked
 18966  01481E  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18967  014820  EC82  F0B2         	call	_LCD_Write
 18968                           
 18969                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18970  014824  0E01               	movlw	1
 18971  014826  0100               	movlb	0	; () banked
 18972  014828  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18973  01482A  0E00               	movlw	0
 18974  01482C  EC82  F0B2         	call	_LCD_Write
 18975                           
 18976                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18977  014830  0E01               	movlw	1
 18978  014832  0100               	movlb	0	; () banked
 18979  014834  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18980  014836  0100               	movlb	0	; () banked
 18981  014838  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18982  01483A  EC82  F0B2         	call	_LCD_Write
 18983                           
 18984                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18985  01483E  0E00               	movlw	0
 18986  014840  0100               	movlb	0	; () banked
 18987  014842  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18988  014844  0E2B               	movlw	43
 18989  014846  EC82  F0B2         	call	_LCD_Write
 18990                           
 18991                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18992  01484A  0E01               	movlw	1
 18993  01484C  0100               	movlb	0	; () banked
 18994  01484E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18995  014850  0E00               	movlw	0
 18996  014852  EC82  F0B2         	call	_LCD_Write
 18997                           
 18998                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18999  014856  0E01               	movlw	1
 19000  014858  0100               	movlb	0	; () banked
 19001  01485A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19002  01485C  0100               	movlb	0	; () banked
 19003  01485E  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 19004  014860  EC82  F0B2         	call	_LCD_Write
 19005                           
 19006                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19007  014864  0E01               	movlw	1
 19008  014866  0100               	movlb	0	; () banked
 19009  014868  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19010  01486A  0E00               	movlw	0
 19011  01486C  EC82  F0B2         	call	_LCD_Write
 19012                           
 19013                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19014  014870  0E01               	movlw	1
 19015  014872  0100               	movlb	0	; () banked
 19016  014874  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19017  014876  0100               	movlb	0	; () banked
 19018  014878  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 19019  01487A  EC82  F0B2         	call	_LCD_Write
 19020                           
 19021                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19022  01487E  0E00               	movlw	0
 19023  014880  0100               	movlb	0	; () banked
 19024  014882  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19025  014884  0E2C               	movlw	44
 19026  014886  EC82  F0B2         	call	_LCD_Write
 19027  01488A  0012               	return		;funcret
 19028  01488C                     __end_of_Set_Addr_Window:
 19029                           	opt stack 0
 19030                           tosu	equ	0xFFF
 19031                           tosh	equ	0xFFE
 19032                           tosl	equ	0xFFD
 19033                           pclath	equ	0xFFA
 19034                           tblptru	equ	0xFF8
 19035                           tblptrh	equ	0xFF7
 19036                           tblptrl	equ	0xFF6
 19037                           tablat	equ	0xFF5
 19038                           prodh	equ	0xFF4
 19039                           prodl	equ	0xFF3
 19040                           intcon	equ	0xFF2
 19041                           postinc0	equ	0xFEE
 19042                           wreg	equ	0xFE8
 19043                           indf1	equ	0xFE7
 19044                           postdec1	equ	0xFE5
 19045                           fsr1h	equ	0xFE2
 19046                           fsr1l	equ	0xFE1
 19047                           indf2	equ	0xFDF
 19048                           postinc2	equ	0xFDE
 19049                           postdec2	equ	0xFDD
 19050                           plusw2	equ	0xFDB
 19051                           fsr2h	equ	0xFDA
 19052                           fsr2l	equ	0xFD9
 19053                           status	equ	0xFD8
 19054                           
 19055 ;; *************** function _LCD_Word_Write *****************
 19056 ;; Defined at:
 19057 ;;		line 198 in file "Library/LCD.c"
 19058 ;; Parameters:    Size  Location     Type
 19059 ;;  value           2    5[BANK0 ] unsigned short 
 19060 ;; Auto vars:     Size  Location     Type
 19061 ;;		None
 19062 ;; Return value:  Size  Location     Type
 19063 ;;                  1    wreg      void 
 19064 ;; Registers used:
 19065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19066 ;; Tracked objects:
 19067 ;;		On entry : 0/0
 19068 ;;		On exit  : 0/0
 19069 ;;		Unchanged: 0/0
 19070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19075 ;;Total ram usage:        2 bytes
 19076 ;; Hardware stack levels used:    1
 19077 ;; Hardware stack levels required when called:    9
 19078 ;; This function calls:
 19079 ;;		_LCD_Write
 19080 ;; This function is called by:
 19081 ;;		_LCD_Fill
 19082 ;;		_LCD_FillRectangle
 19083 ;;		_LCD_DrawField
 19084 ;;		_LCD_DrawPixel
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           	psect	text85
 19089  0165C6                     __ptext85:
 19090                           	opt stack 0
 19091  0165C6                     _LCD_Word_Write:
 19092                           	opt stack 17
 19093                           
 19094                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 19095                           
 19096                           ;incstack = 0
 19097  0165C6  0E01               	movlw	1
 19098  0165C8  0100               	movlb	0	; () banked
 19099  0165CA  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19100  0165CC  0100               	movlb	0	; () banked
 19101  0165CE  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 19102  0165D0  EC82  F0B2         	call	_LCD_Write
 19103                           
 19104                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 19105  0165D4  0E01               	movlw	1
 19106  0165D6  0100               	movlb	0	; () banked
 19107  0165D8  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19108  0165DA  0100               	movlb	0	; () banked
 19109  0165DC  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 19110  0165DE  EC82  F0B2         	call	_LCD_Write
 19111  0165E2  0012               	return		;funcret
 19112  0165E4                     __end_of_LCD_Word_Write:
 19113                           	opt stack 0
 19114                           tosu	equ	0xFFF
 19115                           tosh	equ	0xFFE
 19116                           tosl	equ	0xFFD
 19117                           pclath	equ	0xFFA
 19118                           tblptru	equ	0xFF8
 19119                           tblptrh	equ	0xFF7
 19120                           tblptrl	equ	0xFF6
 19121                           tablat	equ	0xFF5
 19122                           prodh	equ	0xFF4
 19123                           prodl	equ	0xFF3
 19124                           intcon	equ	0xFF2
 19125                           postinc0	equ	0xFEE
 19126                           wreg	equ	0xFE8
 19127                           indf1	equ	0xFE7
 19128                           postdec1	equ	0xFE5
 19129                           fsr1h	equ	0xFE2
 19130                           fsr1l	equ	0xFE1
 19131                           indf2	equ	0xFDF
 19132                           postinc2	equ	0xFDE
 19133                           postdec2	equ	0xFDD
 19134                           plusw2	equ	0xFDB
 19135                           fsr2h	equ	0xFDA
 19136                           fsr2l	equ	0xFD9
 19137                           status	equ	0xFD8
 19138                           
 19139 ;; *************** function _LCD_Write *****************
 19140 ;; Defined at:
 19141 ;;		line 67 in file "Library/LCD.c"
 19142 ;; Parameters:    Size  Location     Type
 19143 ;;  value           1    wreg     unsigned char 
 19144 ;;  mode            1    3[BANK0 ] enum E6761
 19145 ;; Auto vars:     Size  Location     Type
 19146 ;;  value           1    4[BANK0 ] unsigned char 
 19147 ;; Return value:  Size  Location     Type
 19148 ;;                  1    wreg      void 
 19149 ;; Registers used:
 19150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19151 ;; Tracked objects:
 19152 ;;		On entry : 0/0
 19153 ;;		On exit  : 0/0
 19154 ;;		Unchanged: 0/0
 19155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19156 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19160 ;;Total ram usage:        2 bytes
 19161 ;; Hardware stack levels used:    1
 19162 ;; Hardware stack levels required when called:    8
 19163 ;; This function calls:
 19164 ;;		_Mode_Set
 19165 ;;		_SPI_Send
 19166 ;; This function is called by:
 19167 ;;		_LCD_Init
 19168 ;;		_LCD_Word_Write
 19169 ;;		_Set_Addr_Window
 19170 ;;		_Set_Rotation
 19171 ;;		_LCD_WriteCMD
 19172 ;;		_LCD_WriteData
 19173 ;;		_LCD_Data_Write
 19174 ;;		_LCD_Data_Write_4k
 19175 ;;		_Invert_Display
 19176 ;; This function uses a non-reentrant model
 19177 ;;
 19178                           
 19179                           	psect	text86
 19180  016504                     __ptext86:
 19181                           	opt stack 0
 19182  016504                     _LCD_Write:
 19183                           	opt stack 17
 19184                           
 19185                           ;incstack = 0
 19186                           ;LCD_Write@value stored from wreg
 19187  016504  0100               	movlb	0	; () banked
 19188  016506  6FBE               	movwf	LCD_Write@value& (0+255),b
 19189                           
 19190                           ;LCD.c: 89: Mode_Set(mode);
 19191  016508  0100               	movlb	0	; () banked
 19192  01650A  51BD               	movf	LCD_Write@mode& (0+255),w,b
 19193  01650C  ECFA  F0B3         	call	_Mode_Set
 19194                           
 19195                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19196  016510  0E85               	movlw	low _SPI2
 19197  016512  0100               	movlb	0	; () banked
 19198  016514  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 19199  016516  0E03               	movlw	high _SPI2
 19200  016518  0100               	movlb	0	; () banked
 19201  01651A  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19202  01651C  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 19203  016520  EC67  F0AB         	call	_SPI_Send	;wreg free
 19204  016524  0012               	return		;funcret
 19205  016526                     __end_of_LCD_Write:
 19206                           	opt stack 0
 19207                           tosu	equ	0xFFF
 19208                           tosh	equ	0xFFE
 19209                           tosl	equ	0xFFD
 19210                           pclath	equ	0xFFA
 19211                           tblptru	equ	0xFF8
 19212                           tblptrh	equ	0xFF7
 19213                           tblptrl	equ	0xFF6
 19214                           tablat	equ	0xFF5
 19215                           prodh	equ	0xFF4
 19216                           prodl	equ	0xFF3
 19217                           intcon	equ	0xFF2
 19218                           postinc0	equ	0xFEE
 19219                           wreg	equ	0xFE8
 19220                           indf1	equ	0xFE7
 19221                           postdec1	equ	0xFE5
 19222                           fsr1h	equ	0xFE2
 19223                           fsr1l	equ	0xFE1
 19224                           indf2	equ	0xFDF
 19225                           postinc2	equ	0xFDE
 19226                           postdec2	equ	0xFDD
 19227                           plusw2	equ	0xFDB
 19228                           fsr2h	equ	0xFDA
 19229                           fsr2l	equ	0xFD9
 19230                           status	equ	0xFD8
 19231                           
 19232 ;; *************** function _SPI_Send *****************
 19233 ;; Defined at:
 19234 ;;		line 226 in file "Library/SPI.c"
 19235 ;; Parameters:    Size  Location     Type
 19236 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19237 ;;		 -> SPI1(11), SPI2(11), 
 19238 ;;  pData           1    2[BANK0 ] unsigned char 
 19239 ;; Auto vars:     Size  Location     Type
 19240 ;;		None
 19241 ;; Return value:  Size  Location     Type
 19242 ;;                  1    wreg      unsigned char 
 19243 ;; Registers used:
 19244 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19245 ;; Tracked objects:
 19246 ;;		On entry : 0/0
 19247 ;;		On exit  : 0/0
 19248 ;;		Unchanged: 0/0
 19249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19254 ;;Total ram usage:        3 bytes
 19255 ;; Hardware stack levels used:    1
 19256 ;; Hardware stack levels required when called:    7
 19257 ;; This function calls:
 19258 ;;		Nothing
 19259 ;; This function is called by:
 19260 ;;		_LCD_Write
 19261 ;;		_OutSeg
 19262 ;; This function uses a non-reentrant model
 19263 ;;
 19264                           
 19265                           	psect	text87
 19266  0156CE                     __ptext87:
 19267                           	opt stack 0
 19268  0156CE                     _SPI_Send:
 19269                           	opt stack 19
 19270                           
 19271                           ;SPI.c: 253: switch (pInput->mChannel)
 19272                           
 19273                           ;incstack = 0
 19274  0156CE  D026               	goto	l678
 19275  0156D0                     
 19276                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19277  0156D0  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19278  0156D4  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19279  0156D8  0100               	movlb	0	; () banked
 19280  0156DA  94DF               	bcf	indf2,2,c
 19281                           
 19282                           ; BSR set to: 0
 19283                           ;SPI.c: 257: SSP1BUF = pData;
 19284  0156DC  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19285  0156E0                     
 19286                           ; BSR set to: 0
 19287  0156E0  A0C7               	btfss	4039,0,c	;volatile
 19288  0156E2  D7FE               	goto	l681
 19289                           
 19290                           ;SPI.c: 259: pData = SSP1BUF;
 19291  0156E4  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 19292                           
 19293                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19294  0156E8  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19295  0156EC  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19296  0156F0  0100               	movlb	0	; () banked
 19297  0156F2  84DF               	bsf	indf2,2,c
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;SPI.c: 261: return pData;
 19301                           ;	Return value of _SPI_Send is never used
 19302  0156F4  0012               	return	
 19303  0156F6                     
 19304                           ; BSR set to: 0
 19305                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19306                           
 19307                           ; BSR set to: 0
 19308  0156F6  C09F  FFD9         	movff	_PortD+4,fsr2l
 19309  0156FA  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19310  0156FE  0100               	movlb	0	; () banked
 19311  015700  9EDF               	bcf	indf2,7,c
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;SPI.c: 264: SSP2BUF = pData;
 19315  015702  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19316  015706                     
 19317                           ; BSR set to: 0
 19318  015706  A06D               	btfss	3949,0,c	;volatile
 19319  015708  D7FE               	goto	l686
 19320                           
 19321                           ;SPI.c: 266: pData = SSP2BUF;
 19322  01570A  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 19323                           
 19324                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19325  01570E  C09F  FFD9         	movff	_PortD+4,fsr2l
 19326  015712  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19327  015716  0100               	movlb	0	; () banked
 19328  015718  8EDF               	bsf	indf2,7,c
 19329                           
 19330                           ; BSR set to: 0
 19331                           ;SPI.c: 269: };
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;SPI.c: 268: return pData;
 19335                           ;	Return value of _SPI_Send is never used
 19336  01571A  0012               	return	
 19337  01571C                     l678:
 19338                           
 19339                           ; BSR set to: 0
 19340  01571C  0100               	movlb	0	; () banked
 19341  01571E  EE20 F002          	lfsr	2,2
 19342  015722  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 19343  015724  26D9               	addwf	fsr2l,f,c
 19344  015726  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19345  015728  22DA               	addwfc	fsr2h,f,c
 19346  01572A  50DF               	movf	indf2,w,c
 19347                           
 19348                           ; Switch size 1, requested type "space"
 19349                           ; Number of cases is 2, Range of values is 0 to 1
 19350                           ; switch strategies available:
 19351                           ; Name         Instructions Cycles
 19352                           ; simple_byte            7     4 (average)
 19353                           ;	Chosen strategy is simple_byte
 19354  01572C  0A00               	xorlw	0	; case 0
 19355  01572E  B4D8               	btfsc	status,2,c
 19356  015730  D7CF               	goto	l679
 19357  015732  0A01               	xorlw	1	; case 1
 19358  015734  A4D8               	btfss	status,2,c
 19359  015736  0012               	return	
 19360  015738  D7DE               	goto	l684
 19361  01573A                     __end_of_SPI_Send:
 19362                           	opt stack 0
 19363                           tosu	equ	0xFFF
 19364                           tosh	equ	0xFFE
 19365                           tosl	equ	0xFFD
 19366                           pclath	equ	0xFFA
 19367                           tblptru	equ	0xFF8
 19368                           tblptrh	equ	0xFF7
 19369                           tblptrl	equ	0xFF6
 19370                           tablat	equ	0xFF5
 19371                           prodh	equ	0xFF4
 19372                           prodl	equ	0xFF3
 19373                           intcon	equ	0xFF2
 19374                           postinc0	equ	0xFEE
 19375                           wreg	equ	0xFE8
 19376                           indf1	equ	0xFE7
 19377                           postdec1	equ	0xFE5
 19378                           fsr1h	equ	0xFE2
 19379                           fsr1l	equ	0xFE1
 19380                           indf2	equ	0xFDF
 19381                           postinc2	equ	0xFDE
 19382                           postdec2	equ	0xFDD
 19383                           plusw2	equ	0xFDB
 19384                           fsr2h	equ	0xFDA
 19385                           fsr2l	equ	0xFD9
 19386                           status	equ	0xFD8
 19387                           
 19388 ;; *************** function _Mode_Set *****************
 19389 ;; Defined at:
 19390 ;;		line 40 in file "Library/LCD.c"
 19391 ;; Parameters:    Size  Location     Type
 19392 ;;  pMode           1    wreg     enum E6761
 19393 ;; Auto vars:     Size  Location     Type
 19394 ;;  pMode           1    0[BANK0 ] enum E6761
 19395 ;; Return value:  Size  Location     Type
 19396 ;;                  1    wreg      void 
 19397 ;; Registers used:
 19398 ;;		wreg
 19399 ;; Tracked objects:
 19400 ;;		On entry : 0/0
 19401 ;;		On exit  : 0/0
 19402 ;;		Unchanged: 0/0
 19403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19407 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19408 ;;Total ram usage:        1 bytes
 19409 ;; Hardware stack levels used:    1
 19410 ;; Hardware stack levels required when called:    7
 19411 ;; This function calls:
 19412 ;;		Nothing
 19413 ;; This function is called by:
 19414 ;;		_LCD_Write
 19415 ;; This function uses a non-reentrant model
 19416 ;;
 19417                           
 19418                           	psect	text88
 19419  0167F4                     __ptext88:
 19420                           	opt stack 0
 19421  0167F4                     _Mode_Set:
 19422                           	opt stack 17
 19423                           
 19424                           ; BSR set to: 0
 19425                           ;incstack = 0
 19426                           ;Mode_Set@pMode stored from wreg
 19427  0167F4  0100               	movlb	0	; () banked
 19428  0167F6  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 19429                           
 19430                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19431  0167F8  0100               	movlb	0	; () banked
 19432  0167FA  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 19433  0167FC  D002               	bra	u9025
 19434  0167FE  9E85               	bcf	3973,7,c	;volatile
 19435  016800  D001               	bra	u9026
 19436  016802                     u9025:
 19437  016802  8E85               	bsf	3973,7,c	;volatile
 19438  016804                     u9026:
 19439  016804  0012               	return		;funcret
 19440  016806                     __end_of_Mode_Set:
 19441                           	opt stack 0
 19442                           tosu	equ	0xFFF
 19443                           tosh	equ	0xFFE
 19444                           tosl	equ	0xFFD
 19445                           pclath	equ	0xFFA
 19446                           tblptru	equ	0xFF8
 19447                           tblptrh	equ	0xFF7
 19448                           tblptrl	equ	0xFF6
 19449                           tablat	equ	0xFF5
 19450                           prodh	equ	0xFF4
 19451                           prodl	equ	0xFF3
 19452                           intcon	equ	0xFF2
 19453                           postinc0	equ	0xFEE
 19454                           wreg	equ	0xFE8
 19455                           indf1	equ	0xFE7
 19456                           postdec1	equ	0xFE5
 19457                           fsr1h	equ	0xFE2
 19458                           fsr1l	equ	0xFE1
 19459                           indf2	equ	0xFDF
 19460                           postinc2	equ	0xFDE
 19461                           postdec2	equ	0xFDD
 19462                           plusw2	equ	0xFDB
 19463                           fsr2h	equ	0xFDA
 19464                           fsr2l	equ	0xFD9
 19465                           status	equ	0xFD8
 19466                           
 19467 ;; *************** function _Configure_GPIOs *****************
 19468 ;; Defined at:
 19469 ;;		line 46 in file "Library/LCD.c"
 19470 ;; Parameters:    Size  Location     Type
 19471 ;;		None
 19472 ;; Auto vars:     Size  Location     Type
 19473 ;;		None
 19474 ;; Return value:  Size  Location     Type
 19475 ;;                  1    wreg      void 
 19476 ;; Registers used:
 19477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19478 ;; Tracked objects:
 19479 ;;		On entry : 0/0
 19480 ;;		On exit  : 0/0
 19481 ;;		Unchanged: 0/0
 19482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19487 ;;Total ram usage:        0 bytes
 19488 ;; Hardware stack levels used:    1
 19489 ;; Hardware stack levels required when called:   14
 19490 ;; This function calls:
 19491 ;;		_LCD_Reset
 19492 ;;		_Port_SetPinType
 19493 ;;		_SPI_Init
 19494 ;;		_SPI_MaxSpeed
 19495 ;; This function is called by:
 19496 ;;		_LCD_Init
 19497 ;; This function uses a non-reentrant model
 19498 ;;
 19499                           
 19500                           	psect	text89
 19501  01565E                     __ptext89:
 19502                           	opt stack 0
 19503  01565E                     _Configure_GPIOs:
 19504                           	opt stack 14
 19505                           
 19506                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19507                           
 19508                           ;incstack = 0
 19509  01565E  0EC2               	movlw	low _PortF
 19510  015660  0100               	movlb	0	; () banked
 19511  015662  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19512  015664  0E03               	movlw	high _PortF
 19513  015666  0100               	movlb	0	; () banked
 19514  015668  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19515  01566A  0E07               	movlw	7
 19516  01566C  0100               	movlb	0	; () banked
 19517  01566E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19518  015670  0E03               	movlw	3
 19519  015672  0100               	movlb	0	; () banked
 19520  015674  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19521  015676  EC60  F093         	call	_Port_SetPinType	;wreg free
 19522                           
 19523                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19524  01567A  0EC2               	movlw	low _PortF
 19525  01567C  0100               	movlb	0	; () banked
 19526  01567E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19527  015680  0E03               	movlw	high _PortF
 19528  015682  0100               	movlb	0	; () banked
 19529  015684  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19530  015686  0E06               	movlw	6
 19531  015688  0100               	movlb	0	; () banked
 19532  01568A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19533  01568C  0E03               	movlw	3
 19534  01568E  0100               	movlb	0	; () banked
 19535  015690  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19536  015692  EC60  F093         	call	_Port_SetPinType	;wreg free
 19537                           
 19538                           ;LCD.c: 55: LCD_Reset();
 19539  015696  EC70  F0AE         	call	_LCD_Reset	;wreg free
 19540                           
 19541                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19542  01569A  0EC0               	movlw	192
 19543  01569C  0100               	movlb	0	; () banked
 19544  01569E  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19545  0156A0  0EC6               	movlw	198
 19546  0156A2  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19547  0156A4  0E2D               	movlw	45
 19548  0156A6  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19549  0156A8  0E00               	movlw	0
 19550  0156AA  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19551  0156AC  0E01               	movlw	1
 19552  0156AE  0100               	movlb	0	; () banked
 19553  0156B0  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19554  0156B2  0E01               	movlw	1
 19555  0156B4  0100               	movlb	0	; () banked
 19556  0156B6  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19557  0156B8  EC53  F082         	call	_SPI_Init	;wreg free
 19558                           
 19559                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19560  0156BC  0E85               	movlw	low _SPI2
 19561  0156BE  0100               	movlb	0	; () banked
 19562  0156C0  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19563  0156C2  0E03               	movlw	high _SPI2
 19564  0156C4  0100               	movlb	0	; () banked
 19565  0156C6  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19566  0156C8  EC81  F0AA         	call	_SPI_MaxSpeed	;wreg free
 19567  0156CC  0012               	return		;funcret
 19568  0156CE                     __end_of_Configure_GPIOs:
 19569                           	opt stack 0
 19570                           tosu	equ	0xFFF
 19571                           tosh	equ	0xFFE
 19572                           tosl	equ	0xFFD
 19573                           pclath	equ	0xFFA
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           postinc0	equ	0xFEE
 19582                           wreg	equ	0xFE8
 19583                           indf1	equ	0xFE7
 19584                           postdec1	equ	0xFE5
 19585                           fsr1h	equ	0xFE2
 19586                           fsr1l	equ	0xFE1
 19587                           indf2	equ	0xFDF
 19588                           postinc2	equ	0xFDE
 19589                           postdec2	equ	0xFDD
 19590                           plusw2	equ	0xFDB
 19591                           fsr2h	equ	0xFDA
 19592                           fsr2l	equ	0xFD9
 19593                           status	equ	0xFD8
 19594                           
 19595 ;; *************** function _SPI_MaxSpeed *****************
 19596 ;; Defined at:
 19597 ;;		line 201 in file "Library/SPI.c"
 19598 ;; Parameters:    Size  Location     Type
 19599 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19600 ;;		 -> SPI2(11), 
 19601 ;; Auto vars:     Size  Location     Type
 19602 ;;		None
 19603 ;; Return value:  Size  Location     Type
 19604 ;;                  1    wreg      void 
 19605 ;; Registers used:
 19606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19607 ;; Tracked objects:
 19608 ;;		On entry : 0/0
 19609 ;;		On exit  : 0/0
 19610 ;;		Unchanged: 0/0
 19611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;Total ram usage:        2 bytes
 19617 ;; Hardware stack levels used:    1
 19618 ;; Hardware stack levels required when called:    9
 19619 ;; This function calls:
 19620 ;;		_Byte_SetBit
 19621 ;;		_Byte_SetQuad
 19622 ;; This function is called by:
 19623 ;;		_Configure_GPIOs
 19624 ;; This function uses a non-reentrant model
 19625 ;;
 19626                           
 19627                           	psect	text90
 19628  015502                     __ptext90:
 19629                           	opt stack 0
 19630  015502                     _SPI_MaxSpeed:
 19631                           	opt stack 18
 19632                           
 19633                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19634                           
 19635                           ;incstack = 0
 19636  015502  0100               	movlb	0	; () banked
 19637  015504  EE20 F006          	lfsr	2,6
 19638  015508  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19639  01550A  26D9               	addwf	fsr2l,f,c
 19640  01550C  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19641  01550E  22DA               	addwfc	fsr2h,f,c
 19642  015510  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19643  015514  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19644  015518  0E05               	movlw	5
 19645  01551A  0100               	movlb	0	; () banked
 19646  01551C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19647  01551E  0E00               	movlw	0
 19648  015520  0100               	movlb	0	; () banked
 19649  015522  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19650  015524  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 19651                           
 19652                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19653  015528  0100               	movlb	0	; () banked
 19654  01552A  EE20 F006          	lfsr	2,6
 19655  01552E  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19656  015530  26D9               	addwf	fsr2l,f,c
 19657  015532  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19658  015534  22DA               	addwfc	fsr2h,f,c
 19659  015536  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19660  01553A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19661  01553E  0E00               	movlw	0
 19662  015540  0100               	movlb	0	; () banked
 19663  015542  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19664  015544  0E00               	movlw	0
 19665  015546  0100               	movlb	0	; () banked
 19666  015548  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19667  01554A  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 19668                           
 19669                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19670  01554E  0100               	movlb	0	; () banked
 19671  015550  EE20 F006          	lfsr	2,6
 19672  015554  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19673  015556  26D9               	addwf	fsr2l,f,c
 19674  015558  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19675  01555A  22DA               	addwfc	fsr2h,f,c
 19676  01555C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19677  015560  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19678  015564  0E05               	movlw	5
 19679  015566  0100               	movlb	0	; () banked
 19680  015568  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19681  01556A  0E01               	movlw	1
 19682  01556C  0100               	movlb	0	; () banked
 19683  01556E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19684  015570  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 19685  015574  0012               	return		;funcret
 19686  015576                     __end_of_SPI_MaxSpeed:
 19687                           	opt stack 0
 19688                           tosu	equ	0xFFF
 19689                           tosh	equ	0xFFE
 19690                           tosl	equ	0xFFD
 19691                           pclath	equ	0xFFA
 19692                           tblptru	equ	0xFF8
 19693                           tblptrh	equ	0xFF7
 19694                           tblptrl	equ	0xFF6
 19695                           tablat	equ	0xFF5
 19696                           prodh	equ	0xFF4
 19697                           prodl	equ	0xFF3
 19698                           intcon	equ	0xFF2
 19699                           postinc0	equ	0xFEE
 19700                           wreg	equ	0xFE8
 19701                           indf1	equ	0xFE7
 19702                           postdec1	equ	0xFE5
 19703                           fsr1h	equ	0xFE2
 19704                           fsr1l	equ	0xFE1
 19705                           indf2	equ	0xFDF
 19706                           postinc2	equ	0xFDE
 19707                           postdec2	equ	0xFDD
 19708                           plusw2	equ	0xFDB
 19709                           fsr2h	equ	0xFDA
 19710                           fsr2l	equ	0xFD9
 19711                           status	equ	0xFD8
 19712                           
 19713 ;; *************** function _LCD_Reset *****************
 19714 ;; Defined at:
 19715 ;;		line 95 in file "Library/LCD.c"
 19716 ;; Parameters:    Size  Location     Type
 19717 ;;		None
 19718 ;; Auto vars:     Size  Location     Type
 19719 ;;		None
 19720 ;; Return value:  Size  Location     Type
 19721 ;;                  1    wreg      void 
 19722 ;; Registers used:
 19723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19724 ;; Tracked objects:
 19725 ;;		On entry : 0/0
 19726 ;;		On exit  : 0/0
 19727 ;;		Unchanged: 0/0
 19728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19733 ;;Total ram usage:        0 bytes
 19734 ;; Hardware stack levels used:    1
 19735 ;; Hardware stack levels required when called:   13
 19736 ;; This function calls:
 19737 ;;		_LED_Toggle
 19738 ;;		_Reset_High
 19739 ;;		_Reset_Low
 19740 ;;		_delay_ms
 19741 ;; This function is called by:
 19742 ;;		_Configure_GPIOs
 19743 ;; This function uses a non-reentrant model
 19744 ;;
 19745                           
 19746                           	psect	text91
 19747  015CE0                     __ptext91:
 19748                           	opt stack 0
 19749  015CE0                     _LCD_Reset:
 19750                           	opt stack 14
 19751                           
 19752                           ;LCD.c: 97: Reset_High();
 19753                           
 19754                           ;incstack = 0
 19755  015CE0  EC01  F0B3         	call	_Reset_High	;wreg free
 19756                           
 19757                           ;LCD.c: 98: LED_Toggle(eLED2);
 19758  015CE4  0E01               	movlw	1
 19759  015CE6  EC50  F0AF         	call	_LED_Toggle
 19760                           
 19761                           ;LCD.c: 99: delay_ms(0x80);
 19762  015CEA  0E00               	movlw	0
 19763  015CEC  0100               	movlb	0	; () banked
 19764  015CEE  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19765  015CF0  0E80               	movlw	128
 19766  015CF2  6FBA               	movwf	delay_ms@ms& (0+255),b
 19767  015CF4  EC08  F0AC         	call	_delay_ms	;wreg free
 19768                           
 19769                           ;LCD.c: 100: LED_Toggle(eLED2);
 19770  015CF8  0E01               	movlw	1
 19771  015CFA  EC50  F0AF         	call	_LED_Toggle
 19772                           
 19773                           ;LCD.c: 101: Reset_Low();
 19774  015CFE  ECF2  F0B2         	call	_Reset_Low	;wreg free
 19775                           
 19776                           ;LCD.c: 102: delay_ms(0x80);
 19777  015D02  0E00               	movlw	0
 19778  015D04  0100               	movlb	0	; () banked
 19779  015D06  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19780  015D08  0E80               	movlw	128
 19781  015D0A  6FBA               	movwf	delay_ms@ms& (0+255),b
 19782  015D0C  EC08  F0AC         	call	_delay_ms	;wreg free
 19783                           
 19784                           ;LCD.c: 103: LED_Toggle(eLED2);
 19785  015D10  0E01               	movlw	1
 19786  015D12  EC50  F0AF         	call	_LED_Toggle
 19787                           
 19788                           ;LCD.c: 104: Reset_High();
 19789  015D16  EC01  F0B3         	call	_Reset_High	;wreg free
 19790                           
 19791                           ;LCD.c: 105: delay_ms(0x80);
 19792  015D1A  0E00               	movlw	0
 19793  015D1C  0100               	movlb	0	; () banked
 19794  015D1E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19795  015D20  0E80               	movlw	128
 19796  015D22  6FBA               	movwf	delay_ms@ms& (0+255),b
 19797  015D24  EC08  F0AC         	call	_delay_ms	;wreg free
 19798                           
 19799                           ;LCD.c: 106: LED_Toggle(eLED2);
 19800  015D28  0E01               	movlw	1
 19801  015D2A  EC50  F0AF         	call	_LED_Toggle
 19802  015D2E  0012               	return		;funcret
 19803  015D30                     __end_of_LCD_Reset:
 19804                           	opt stack 0
 19805                           tosu	equ	0xFFF
 19806                           tosh	equ	0xFFE
 19807                           tosl	equ	0xFFD
 19808                           pclath	equ	0xFFA
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           postinc0	equ	0xFEE
 19817                           wreg	equ	0xFE8
 19818                           indf1	equ	0xFE7
 19819                           postdec1	equ	0xFE5
 19820                           fsr1h	equ	0xFE2
 19821                           fsr1l	equ	0xFE1
 19822                           indf2	equ	0xFDF
 19823                           postinc2	equ	0xFDE
 19824                           postdec2	equ	0xFDD
 19825                           plusw2	equ	0xFDB
 19826                           fsr2h	equ	0xFDA
 19827                           fsr2l	equ	0xFD9
 19828                           status	equ	0xFD8
 19829                           
 19830 ;; *************** function _delay_ms *****************
 19831 ;; Defined at:
 19832 ;;		line 240 in file "Library/Types.c"
 19833 ;; Parameters:    Size  Location     Type
 19834 ;;  ms              2    0[BANK0 ] unsigned short 
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  1    wreg      void 
 19839 ;; Registers used:
 19840 ;;		wreg, status,2, status,0
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;Total ram usage:        6 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    7
 19853 ;; This function calls:
 19854 ;;		Nothing
 19855 ;; This function is called by:
 19856 ;;		_LCD_Reset
 19857 ;;		_LCD_Init
 19858 ;;		_MXK_Init
 19859 ;;		_init
 19860 ;;		_move_and_rotate
 19861 ;;		_mode4
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text92
 19866  015810                     __ptext92:
 19867                           	opt stack 0
 19868  015810                     _delay_ms:
 19869                           	opt stack 22
 19870                           
 19871                           ;Types.c: 242: volatile unsigned long u;
 19872                           ;Types.c: 243: while (ms--)
 19873                           
 19874                           ;incstack = 0
 19875  015810  D01F               	goto	u9530
 19876  015812                     l12887:
 19877                           
 19878                           ;Types.c: 244: {
 19879                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19880  015812  0E00               	movlw	0
 19881  015814  0100               	movlb	0	; () banked
 19882  015816  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19883  015818  0E00               	movlw	0
 19884  01581A  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19885  01581C  0E00               	movlw	0
 19886  01581E  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19887  015820  0E00               	movlw	0
 19888  015822  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19889  015824                     l12889:
 19890                           
 19891                           ; BSR set to: 0
 19892  015824  0100               	movlb	0	; () banked
 19893  015826  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19894  015828  0100               	movlb	0	; () banked
 19895  01582A  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19896  01582C  E111               	bnz	l12895
 19897  01582E  0EB0               	movlw	176
 19898  015830  0100               	movlb	0	; () banked
 19899  015832  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19900  015834  0E04               	movlw	4
 19901  015836  0100               	movlb	0	; () banked
 19902  015838  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19903  01583A  B0D8               	btfsc	status,0,c
 19904  01583C  D009               	goto	u9530
 19905                           
 19906                           ; BSR set to: 0
 19907                           
 19908                           ; BSR set to: 0
 19909  01583E  F000               	nop		; ;# 
 19910  015840  0E01               	movlw	1
 19911  015842  0100               	movlb	0	; () banked
 19912  015844  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19913  015846  0E00               	movlw	0
 19914  015848  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19915  01584A  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19916  01584C  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19917  01584E  D7EA               	goto	l12889
 19918  015850                     u9530:
 19919  015850                     l12895:
 19920  015850  0100               	movlb	0	; () banked
 19921  015852  07BA               	decf	delay_ms@ms& (0+255),f,b
 19922  015854  A0D8               	btfss	status,0,c
 19923  015856  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19924  015858  0100               	movlb	0	; () banked
 19925  01585A  29BA               	incf	delay_ms@ms& (0+255),w,b
 19926  01585C  E1DA               	bnz	l12887
 19927  01585E  0100               	movlb	0	; () banked
 19928  015860  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19929  015862  A4D8               	btfss	status,2,c
 19930  015864  D7D6               	goto	l824
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;Types.c: 251: }
 19934                           ;Types.c: 252: }
 19935                           ;Types.c: 253: u = 0x8008;
 19936                           
 19937                           ; BSR set to: 0
 19938  015866  0E08               	movlw	8
 19939  015868  0100               	movlb	0	; () banked
 19940  01586A  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19941  01586C  0E80               	movlw	128
 19942  01586E  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19943  015870  0E00               	movlw	0
 19944  015872  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19945  015874  0E00               	movlw	0
 19946  015876  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19947                           
 19948                           ; BSR set to: 0
 19949  015878  0012               	return		;funcret
 19950  01587A                     __end_of_delay_ms:
 19951                           	opt stack 0
 19952                           tosu	equ	0xFFF
 19953                           tosh	equ	0xFFE
 19954                           tosl	equ	0xFFD
 19955                           pclath	equ	0xFFA
 19956                           tblptru	equ	0xFF8
 19957                           tblptrh	equ	0xFF7
 19958                           tblptrl	equ	0xFF6
 19959                           tablat	equ	0xFF5
 19960                           prodh	equ	0xFF4
 19961                           prodl	equ	0xFF3
 19962                           intcon	equ	0xFF2
 19963                           postinc0	equ	0xFEE
 19964                           wreg	equ	0xFE8
 19965                           indf1	equ	0xFE7
 19966                           postdec1	equ	0xFE5
 19967                           fsr1h	equ	0xFE2
 19968                           fsr1l	equ	0xFE1
 19969                           indf2	equ	0xFDF
 19970                           postinc2	equ	0xFDE
 19971                           postdec2	equ	0xFDD
 19972                           plusw2	equ	0xFDB
 19973                           fsr2h	equ	0xFDA
 19974                           fsr2l	equ	0xFD9
 19975                           status	equ	0xFD8
 19976                           
 19977 ;; *************** function _Reset_Low *****************
 19978 ;; Defined at:
 19979 ;;		line 32 in file "Library/LCD.c"
 19980 ;; Parameters:    Size  Location     Type
 19981 ;;		None
 19982 ;; Auto vars:     Size  Location     Type
 19983 ;;		None
 19984 ;; Return value:  Size  Location     Type
 19985 ;;                  1    wreg      void 
 19986 ;; Registers used:
 19987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19988 ;; Tracked objects:
 19989 ;;		On entry : 0/0
 19990 ;;		On exit  : 0/0
 19991 ;;		Unchanged: 0/0
 19992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19997 ;;Total ram usage:        0 bytes
 19998 ;; Hardware stack levels used:    1
 19999 ;; Hardware stack levels required when called:   11
 20000 ;; This function calls:
 20001 ;;		_Port_SetPin
 20002 ;; This function is called by:
 20003 ;;		_LCD_Reset
 20004 ;; This function uses a non-reentrant model
 20005 ;;
 20006                           
 20007                           	psect	text93
 20008  0165E4                     __ptext93:
 20009                           	opt stack 0
 20010  0165E4                     _Reset_Low:
 20011                           	opt stack 15
 20012                           
 20013                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 20014                           
 20015                           ; BSR set to: 0
 20016                           ;incstack = 0
 20017  0165E4  0EC2               	movlw	low _PortF
 20018  0165E6  0100               	movlb	0	; () banked
 20019  0165E8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 20020  0165EA  0E03               	movlw	high _PortF
 20021  0165EC  0100               	movlb	0	; () banked
 20022  0165EE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20023  0165F0  0E06               	movlw	6
 20024  0165F2  0100               	movlb	0	; () banked
 20025  0165F4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 20026  0165F6  0E01               	movlw	1
 20027  0165F8  0100               	movlb	0	; () banked
 20028  0165FA  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 20029  0165FC  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 20030  016600  0012               	return		;funcret
 20031  016602                     __end_of_Reset_Low:
 20032                           	opt stack 0
 20033                           tosu	equ	0xFFF
 20034                           tosh	equ	0xFFE
 20035                           tosl	equ	0xFFD
 20036                           pclath	equ	0xFFA
 20037                           tblptru	equ	0xFF8
 20038                           tblptrh	equ	0xFF7
 20039                           tblptrl	equ	0xFF6
 20040                           tablat	equ	0xFF5
 20041                           prodh	equ	0xFF4
 20042                           prodl	equ	0xFF3
 20043                           intcon	equ	0xFF2
 20044                           postinc0	equ	0xFEE
 20045                           wreg	equ	0xFE8
 20046                           indf1	equ	0xFE7
 20047                           postdec1	equ	0xFE5
 20048                           fsr1h	equ	0xFE2
 20049                           fsr1l	equ	0xFE1
 20050                           indf2	equ	0xFDF
 20051                           postinc2	equ	0xFDE
 20052                           postdec2	equ	0xFDD
 20053                           plusw2	equ	0xFDB
 20054                           fsr2h	equ	0xFDA
 20055                           fsr2l	equ	0xFD9
 20056                           status	equ	0xFD8
 20057                           
 20058 ;; *************** function _Reset_High *****************
 20059 ;; Defined at:
 20060 ;;		line 36 in file "Library/LCD.c"
 20061 ;; Parameters:    Size  Location     Type
 20062 ;;		None
 20063 ;; Auto vars:     Size  Location     Type
 20064 ;;		None
 20065 ;; Return value:  Size  Location     Type
 20066 ;;                  1    wreg      void 
 20067 ;; Registers used:
 20068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20069 ;; Tracked objects:
 20070 ;;		On entry : 0/0
 20071 ;;		On exit  : 0/0
 20072 ;;		Unchanged: 0/0
 20073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20078 ;;Total ram usage:        0 bytes
 20079 ;; Hardware stack levels used:    1
 20080 ;; Hardware stack levels required when called:   11
 20081 ;; This function calls:
 20082 ;;		_Port_SetPin
 20083 ;; This function is called by:
 20084 ;;		_LCD_Reset
 20085 ;; This function uses a non-reentrant model
 20086 ;;
 20087                           
 20088                           	psect	text94
 20089  016602                     __ptext94:
 20090                           	opt stack 0
 20091  016602                     _Reset_High:
 20092                           	opt stack 15
 20093                           
 20094                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 20095                           
 20096                           ;incstack = 0
 20097  016602  0EC2               	movlw	low _PortF
 20098  016604  0100               	movlb	0	; () banked
 20099  016606  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 20100  016608  0E03               	movlw	high _PortF
 20101  01660A  0100               	movlb	0	; () banked
 20102  01660C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20103  01660E  0E06               	movlw	6
 20104  016610  0100               	movlb	0	; () banked
 20105  016612  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 20106  016614  0E00               	movlw	0
 20107  016616  0100               	movlb	0	; () banked
 20108  016618  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 20109  01661A  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 20110  01661E  0012               	return		;funcret
 20111  016620                     __end_of_Reset_High:
 20112                           	opt stack 0
 20113                           tosu	equ	0xFFF
 20114                           tosh	equ	0xFFE
 20115                           tosl	equ	0xFFD
 20116                           pclath	equ	0xFFA
 20117                           tblptru	equ	0xFF8
 20118                           tblptrh	equ	0xFF7
 20119                           tblptrl	equ	0xFF6
 20120                           tablat	equ	0xFF5
 20121                           prodh	equ	0xFF4
 20122                           prodl	equ	0xFF3
 20123                           intcon	equ	0xFF2
 20124                           postinc0	equ	0xFEE
 20125                           wreg	equ	0xFE8
 20126                           indf1	equ	0xFE7
 20127                           postdec1	equ	0xFE5
 20128                           fsr1h	equ	0xFE2
 20129                           fsr1l	equ	0xFE1
 20130                           indf2	equ	0xFDF
 20131                           postinc2	equ	0xFDE
 20132                           postdec2	equ	0xFDD
 20133                           plusw2	equ	0xFDB
 20134                           fsr2h	equ	0xFDA
 20135                           fsr2l	equ	0xFD9
 20136                           status	equ	0xFD8
 20137                           
 20138 ;; *************** function _ISR_Enable *****************
 20139 ;; Defined at:
 20140 ;;		line 27 in file "Library/ISR.c"
 20141 ;; Parameters:    Size  Location     Type
 20142 ;;		None
 20143 ;; Auto vars:     Size  Location     Type
 20144 ;;		None
 20145 ;; Return value:  Size  Location     Type
 20146 ;;                  1    wreg      void 
 20147 ;; Registers used:
 20148 ;;		None
 20149 ;; Tracked objects:
 20150 ;;		On entry : 0/0
 20151 ;;		On exit  : 0/0
 20152 ;;		Unchanged: 0/0
 20153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20158 ;;Total ram usage:        0 bytes
 20159 ;; Hardware stack levels used:    1
 20160 ;; Hardware stack levels required when called:    7
 20161 ;; This function calls:
 20162 ;;		Nothing
 20163 ;; This function is called by:
 20164 ;;		_init
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text95
 20169  016896                     __ptext95:
 20170                           	opt stack 0
 20171  016896                     _ISR_Enable:
 20172                           	opt stack 22
 20173                           
 20174                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 20175                           
 20176                           ;incstack = 0
 20177  016896  8CF2               	bsf	intcon,6,c	;volatile
 20178                           
 20179                           ;ISR.c: 30: INTCONbits.GIE = 1;
 20180  016898  8EF2               	bsf	intcon,7,c	;volatile
 20181                           
 20182                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 20183  01689A  88F2               	bsf	intcon,4,c	;volatile
 20184                           
 20185                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 20186  01689C  92F2               	bcf	intcon,1,c	;volatile
 20187  01689E  0012               	return		;funcret
 20188  0168A0                     __end_of_ISR_Enable:
 20189                           	opt stack 0
 20190                           tosu	equ	0xFFF
 20191                           tosh	equ	0xFFE
 20192                           tosl	equ	0xFFD
 20193                           pclath	equ	0xFFA
 20194                           tblptru	equ	0xFF8
 20195                           tblptrh	equ	0xFF7
 20196                           tblptrl	equ	0xFF6
 20197                           tablat	equ	0xFF5
 20198                           prodh	equ	0xFF4
 20199                           prodl	equ	0xFF3
 20200                           intcon	equ	0xFF2
 20201                           postinc0	equ	0xFEE
 20202                           wreg	equ	0xFE8
 20203                           indf1	equ	0xFE7
 20204                           postdec1	equ	0xFE5
 20205                           fsr1h	equ	0xFE2
 20206                           fsr1l	equ	0xFE1
 20207                           indf2	equ	0xFDF
 20208                           postinc2	equ	0xFDE
 20209                           postdec2	equ	0xFDD
 20210                           plusw2	equ	0xFDB
 20211                           fsr2h	equ	0xFDA
 20212                           fsr2l	equ	0xFD9
 20213                           status	equ	0xFD8
 20214                           
 20215 ;; *************** function _HMI_Init *****************
 20216 ;; Defined at:
 20217 ;;		line 104 in file "HMI.c"
 20218 ;; Parameters:    Size  Location     Type
 20219 ;;		None
 20220 ;; Auto vars:     Size  Location     Type
 20221 ;;  in              2   59[BANK0 ] unsigned short 
 20222 ;; Return value:  Size  Location     Type
 20223 ;;                  1    wreg      void 
 20224 ;; Registers used:
 20225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20226 ;; Tracked objects:
 20227 ;;		On entry : 0/0
 20228 ;;		On exit  : 0/0
 20229 ;;		Unchanged: 0/0
 20230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20235 ;;Total ram usage:        2 bytes
 20236 ;; Hardware stack levels used:    1
 20237 ;; Hardware stack levels required when called:   16
 20238 ;; This function calls:
 20239 ;;		_Button_Init
 20240 ;;		_SPI_Init
 20241 ;;		_SPI_MinSpeed
 20242 ;; This function is called by:
 20243 ;;		_init
 20244 ;; This function uses a non-reentrant model
 20245 ;;
 20246                           
 20247                           	psect	text96
 20248  012136                     __ptext96:
 20249                           	opt stack 0
 20250  012136                     _HMI_Init:
 20251                           	opt stack 13
 20252                           
 20253                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 20254                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 20255                           
 20256                           ;incstack = 0
 20257  012136  0E70               	movlw	low (_HMIBoard+48)
 20258  012138  0101               	movlb	1	; () banked
 20259  01213A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20260  01213C  0E03               	movlw	high (_HMIBoard+48)
 20261  01213E  0101               	movlb	1	; () banked
 20262  012140  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20263  012142  0E00               	movlw	0
 20264  012144  0101               	movlb	1	; () banked
 20265  012146  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20266  012148  0E02               	movlw	2
 20267  01214A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20268  01214C  0ED0               	movlw	low _HMI_InitButtons
 20269  01214E  0101               	movlb	1	; () banked
 20270  012150  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20271  012152  0E68               	movlw	high _HMI_InitButtons
 20272  012154  0101               	movlb	1	; () banked
 20273  012156  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20274  012158  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20275  01215A  0101               	movlb	1	; () banked
 20276  01215C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20277  01215E  0E18               	movlw	low _HMI_DIPSwitch
 20278  012160  0101               	movlb	1	; () banked
 20279  012162  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20280  012164  0E67               	movlw	high _HMI_DIPSwitch
 20281  012166  0101               	movlb	1	; () banked
 20282  012168  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20283  01216A  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 20284  01216C  0101               	movlb	1	; () banked
 20285  01216E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20286  012170  0E04               	movlw	low _Event_NULL
 20287  012172  0101               	movlb	1	; () banked
 20288  012174  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20289  012176  0E14               	movlw	high _Event_NULL
 20290  012178  0101               	movlb	1	; () banked
 20291  01217A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20292  01217C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20293  01217E  0101               	movlb	1	; () banked
 20294  012180  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20295  012182  EC6F  F09F         	call	_Button_Init	;wreg free
 20296                           
 20297                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 20298                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 20299  012186  0E52               	movlw	low (_HMIBoard+18)
 20300  012188  0101               	movlb	1	; () banked
 20301  01218A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20302  01218C  0E03               	movlw	high (_HMIBoard+18)
 20303  01218E  0101               	movlb	1	; () banked
 20304  012190  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20305  012192  0E00               	movlw	0
 20306  012194  0101               	movlb	1	; () banked
 20307  012196  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20308  012198  0E02               	movlw	2
 20309  01219A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20310  01219C  0ED0               	movlw	low _HMI_InitButtons
 20311  01219E  0101               	movlb	1	; () banked
 20312  0121A0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20313  0121A2  0E68               	movlw	high _HMI_InitButtons
 20314  0121A4  0101               	movlb	1	; () banked
 20315  0121A6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20316  0121A8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20317  0121AA  0101               	movlb	1	; () banked
 20318  0121AC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20319  0121AE  0E78               	movlw	low _HMI_LeftSwitch
 20320  0121B0  0101               	movlb	1	; () banked
 20321  0121B2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20322  0121B4  0E67               	movlw	high _HMI_LeftSwitch
 20323  0121B6  0101               	movlb	1	; () banked
 20324  0121B8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20325  0121BA  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 20326  0121BC  0101               	movlb	1	; () banked
 20327  0121BE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20328  0121C0  0E04               	movlw	low _Event_NULL
 20329  0121C2  0101               	movlb	1	; () banked
 20330  0121C4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20331  0121C6  0E14               	movlw	high _Event_NULL
 20332  0121C8  0101               	movlb	1	; () banked
 20333  0121CA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20334  0121CC  0E00               	movlw	low (_Event_NULL shr (0+16))
 20335  0121CE  0101               	movlb	1	; () banked
 20336  0121D0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20337  0121D2  EC6F  F09F         	call	_Button_Init	;wreg free
 20338                           
 20339                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 20340                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 20341  0121D6  0E48               	movlw	low (_HMIBoard+8)
 20342  0121D8  0101               	movlb	1	; () banked
 20343  0121DA  6F00               	movwf	Button_Init@pInput& (0+255),b
 20344  0121DC  0E03               	movlw	high (_HMIBoard+8)
 20345  0121DE  0101               	movlb	1	; () banked
 20346  0121E0  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20347  0121E2  0E00               	movlw	0
 20348  0121E4  0101               	movlb	1	; () banked
 20349  0121E6  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20350  0121E8  0E02               	movlw	2
 20351  0121EA  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20352  0121EC  0ED0               	movlw	low _HMI_InitButtons
 20353  0121EE  0101               	movlb	1	; () banked
 20354  0121F0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20355  0121F2  0E68               	movlw	high _HMI_InitButtons
 20356  0121F4  0101               	movlb	1	; () banked
 20357  0121F6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20358  0121F8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20359  0121FA  0101               	movlb	1	; () banked
 20360  0121FC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20361  0121FE  0E60               	movlw	low _HMI_RightSwitch
 20362  012200  0101               	movlb	1	; () banked
 20363  012202  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20364  012204  0E67               	movlw	high _HMI_RightSwitch
 20365  012206  0101               	movlb	1	; () banked
 20366  012208  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20367  01220A  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 20368  01220C  0101               	movlb	1	; () banked
 20369  01220E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20370  012210  0E04               	movlw	low _Event_NULL
 20371  012212  0101               	movlb	1	; () banked
 20372  012214  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20373  012216  0E14               	movlw	high _Event_NULL
 20374  012218  0101               	movlb	1	; () banked
 20375  01221A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20376  01221C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20377  01221E  0101               	movlb	1	; () banked
 20378  012220  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20379  012222  EC6F  F09F         	call	_Button_Init	;wreg free
 20380                           
 20381                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 20382                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 20383  012226  0E5C               	movlw	low (_HMIBoard+28)
 20384  012228  0101               	movlb	1	; () banked
 20385  01222A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20386  01222C  0E03               	movlw	high (_HMIBoard+28)
 20387  01222E  0101               	movlb	1	; () banked
 20388  012230  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20389  012232  0E00               	movlw	0
 20390  012234  0101               	movlb	1	; () banked
 20391  012236  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20392  012238  0E02               	movlw	2
 20393  01223A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20394  01223C  0ED0               	movlw	low _HMI_InitButtons
 20395  01223E  0101               	movlb	1	; () banked
 20396  012240  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20397  012242  0E68               	movlw	high _HMI_InitButtons
 20398  012244  0101               	movlb	1	; () banked
 20399  012246  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20400  012248  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20401  01224A  0101               	movlb	1	; () banked
 20402  01224C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20403  01224E  0E48               	movlw	low _HMI_UpSwitch
 20404  012250  0101               	movlb	1	; () banked
 20405  012252  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20406  012254  0E67               	movlw	high _HMI_UpSwitch
 20407  012256  0101               	movlb	1	; () banked
 20408  012258  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20409  01225A  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 20410  01225C  0101               	movlb	1	; () banked
 20411  01225E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20412  012260  0E04               	movlw	low _Event_NULL
 20413  012262  0101               	movlb	1	; () banked
 20414  012264  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20415  012266  0E14               	movlw	high _Event_NULL
 20416  012268  0101               	movlb	1	; () banked
 20417  01226A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20418  01226C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20419  01226E  0101               	movlb	1	; () banked
 20420  012270  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20421  012272  EC6F  F09F         	call	_Button_Init	;wreg free
 20422                           
 20423                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 20424                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 20425  012276  0E66               	movlw	low (_HMIBoard+38)
 20426  012278  0101               	movlb	1	; () banked
 20427  01227A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20428  01227C  0E03               	movlw	high (_HMIBoard+38)
 20429  01227E  0101               	movlb	1	; () banked
 20430  012280  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20431  012282  0E00               	movlw	0
 20432  012284  0101               	movlb	1	; () banked
 20433  012286  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20434  012288  0E02               	movlw	2
 20435  01228A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20436  01228C  0ED0               	movlw	low _HMI_InitButtons
 20437  01228E  0101               	movlb	1	; () banked
 20438  012290  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20439  012292  0E68               	movlw	high _HMI_InitButtons
 20440  012294  0101               	movlb	1	; () banked
 20441  012296  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20442  012298  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20443  01229A  0101               	movlb	1	; () banked
 20444  01229C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20445  01229E  0E30               	movlw	low _HMI_DownSwitch
 20446  0122A0  0101               	movlb	1	; () banked
 20447  0122A2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20448  0122A4  0E67               	movlw	high _HMI_DownSwitch
 20449  0122A6  0101               	movlb	1	; () banked
 20450  0122A8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20451  0122AA  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 20452  0122AC  0101               	movlb	1	; () banked
 20453  0122AE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20454  0122B0  0E04               	movlw	low _Event_NULL
 20455  0122B2  0101               	movlb	1	; () banked
 20456  0122B4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20457  0122B6  0E14               	movlw	high _Event_NULL
 20458  0122B8  0101               	movlb	1	; () banked
 20459  0122BA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20460  0122BC  0E00               	movlw	low (_Event_NULL shr (0+16))
 20461  0122BE  0101               	movlb	1	; () banked
 20462  0122C0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20463  0122C2  EC6F  F09F         	call	_Button_Init	;wreg free
 20464                           
 20465                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20466  0122C6  0EA0               	movlw	160
 20467  0122C8  0100               	movlb	0	; () banked
 20468  0122CA  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20469  0122CC  0E86               	movlw	134
 20470  0122CE  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20471  0122D0  0E01               	movlw	1
 20472  0122D2  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20473  0122D4  0E00               	movlw	0
 20474  0122D6  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20475  0122D8  0E00               	movlw	0
 20476  0122DA  0100               	movlb	0	; () banked
 20477  0122DC  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20478  0122DE  0E02               	movlw	2
 20479  0122E0  0100               	movlb	0	; () banked
 20480  0122E2  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20481  0122E4  EC53  F082         	call	_SPI_Init	;wreg free
 20482                           
 20483                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20484  0122E8  0E7A               	movlw	low _SPI1
 20485  0122EA  0100               	movlb	0	; () banked
 20486  0122EC  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20487  0122EE  0E03               	movlw	high _SPI1
 20488  0122F0  0100               	movlb	0	; () banked
 20489  0122F2  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20490  0122F4  ECBB  F0AA         	call	_SPI_MinSpeed	;wreg free
 20491                           
 20492                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20493  0122F8  0E00               	movlw	0
 20494  0122FA  0100               	movlb	0	; () banked
 20495  0122FC  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20496  0122FE  0E00               	movlw	0
 20497  012300  6FF5               	movwf	HMI_Init@in& (0+255),b
 20498  012302                     l14535:
 20499                           
 20500                           ; BSR set to: 0
 20501  012302  0100               	movlb	0	; () banked
 20502  012304  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20503  012306  E113               	bnz	l1153
 20504  012308  0E08               	movlw	8
 20505  01230A  0100               	movlb	0	; () banked
 20506  01230C  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20507  01230E  B0D8               	btfsc	status,0,c
 20508  012310  0012               	return	
 20509                           
 20510                           ; BSR set to: 0
 20511                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20512                           
 20513                           ; BSR set to: 0
 20514                           
 20515                           ; BSR set to: 0
 20516  012312  0E40               	movlw	low _HMIBoard
 20517  012314  0100               	movlb	0	; () banked
 20518  012316  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20519  012318  6ED9               	movwf	fsr2l,c
 20520  01231A  0E03               	movlw	high _HMIBoard
 20521  01231C  0100               	movlb	0	; () banked
 20522  01231E  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20523  012320  6EDA               	movwf	fsr2h,c
 20524  012322  0E00               	movlw	0
 20525  012324  6EDF               	movwf	indf2,c
 20526                           
 20527                           ; BSR set to: 0
 20528  012326  0100               	movlb	0	; () banked
 20529  012328  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20530  01232A  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20531  01232C  D7EA               	goto	l14535
 20532  01232E                     l1153:
 20533                           
 20534                           ; BSR set to: 0
 20535  01232E  0012               	return		;funcret
 20536  012330                     __end_of_HMI_Init:
 20537                           	opt stack 0
 20538                           tosu	equ	0xFFF
 20539                           tosh	equ	0xFFE
 20540                           tosl	equ	0xFFD
 20541                           pclath	equ	0xFFA
 20542                           tblptru	equ	0xFF8
 20543                           tblptrh	equ	0xFF7
 20544                           tblptrl	equ	0xFF6
 20545                           tablat	equ	0xFF5
 20546                           prodh	equ	0xFF4
 20547                           prodl	equ	0xFF3
 20548                           intcon	equ	0xFF2
 20549                           postinc0	equ	0xFEE
 20550                           wreg	equ	0xFE8
 20551                           indf1	equ	0xFE7
 20552                           postdec1	equ	0xFE5
 20553                           fsr1h	equ	0xFE2
 20554                           fsr1l	equ	0xFE1
 20555                           indf2	equ	0xFDF
 20556                           postinc2	equ	0xFDE
 20557                           postdec2	equ	0xFDD
 20558                           plusw2	equ	0xFDB
 20559                           fsr2h	equ	0xFDA
 20560                           fsr2l	equ	0xFD9
 20561                           status	equ	0xFD8
 20562                           
 20563 ;; *************** function _SPI_MinSpeed *****************
 20564 ;; Defined at:
 20565 ;;		line 190 in file "Library/SPI.c"
 20566 ;; Parameters:    Size  Location     Type
 20567 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20568 ;;		 -> SPI1(11), 
 20569 ;; Auto vars:     Size  Location     Type
 20570 ;;		None
 20571 ;; Return value:  Size  Location     Type
 20572 ;;                  1    wreg      void 
 20573 ;; Registers used:
 20574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20575 ;; Tracked objects:
 20576 ;;		On entry : 0/0
 20577 ;;		On exit  : 0/0
 20578 ;;		Unchanged: 0/0
 20579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20580 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20584 ;;Total ram usage:        2 bytes
 20585 ;; Hardware stack levels used:    1
 20586 ;; Hardware stack levels required when called:    9
 20587 ;; This function calls:
 20588 ;;		_Byte_SetBit
 20589 ;;		_Byte_SetQuad
 20590 ;; This function is called by:
 20591 ;;		_HMI_Init
 20592 ;; This function uses a non-reentrant model
 20593 ;;
 20594                           
 20595                           	psect	text97
 20596  015576                     __ptext97:
 20597                           	opt stack 0
 20598  015576                     _SPI_MinSpeed:
 20599                           	opt stack 19
 20600                           
 20601                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20602                           
 20603                           ; BSR set to: 0
 20604                           ;incstack = 0
 20605  015576  0100               	movlb	0	; () banked
 20606  015578  EE20 F006          	lfsr	2,6
 20607  01557C  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20608  01557E  26D9               	addwf	fsr2l,f,c
 20609  015580  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20610  015582  22DA               	addwfc	fsr2h,f,c
 20611  015584  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20612  015588  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20613  01558C  0E05               	movlw	5
 20614  01558E  0100               	movlb	0	; () banked
 20615  015590  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20616  015592  0E00               	movlw	0
 20617  015594  0100               	movlb	0	; () banked
 20618  015596  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20619  015598  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 20620                           
 20621                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20622  01559C  0100               	movlb	0	; () banked
 20623  01559E  EE20 F006          	lfsr	2,6
 20624  0155A2  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20625  0155A4  26D9               	addwf	fsr2l,f,c
 20626  0155A6  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20627  0155A8  22DA               	addwfc	fsr2h,f,c
 20628  0155AA  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20629  0155AE  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20630  0155B2  0E00               	movlw	0
 20631  0155B4  0100               	movlb	0	; () banked
 20632  0155B6  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20633  0155B8  0E02               	movlw	2
 20634  0155BA  0100               	movlb	0	; () banked
 20635  0155BC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20636  0155BE  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 20637                           
 20638                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20639  0155C2  0100               	movlb	0	; () banked
 20640  0155C4  EE20 F006          	lfsr	2,6
 20641  0155C8  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20642  0155CA  26D9               	addwf	fsr2l,f,c
 20643  0155CC  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20644  0155CE  22DA               	addwfc	fsr2h,f,c
 20645  0155D0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20646  0155D4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20647  0155D8  0E05               	movlw	5
 20648  0155DA  0100               	movlb	0	; () banked
 20649  0155DC  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20650  0155DE  0E01               	movlw	1
 20651  0155E0  0100               	movlb	0	; () banked
 20652  0155E2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20653  0155E4  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 20654  0155E8  0012               	return		;funcret
 20655  0155EA                     __end_of_SPI_MinSpeed:
 20656                           	opt stack 0
 20657                           tosu	equ	0xFFF
 20658                           tosh	equ	0xFFE
 20659                           tosl	equ	0xFFD
 20660                           pclath	equ	0xFFA
 20661                           tblptru	equ	0xFF8
 20662                           tblptrh	equ	0xFF7
 20663                           tblptrl	equ	0xFF6
 20664                           tablat	equ	0xFF5
 20665                           prodh	equ	0xFF4
 20666                           prodl	equ	0xFF3
 20667                           intcon	equ	0xFF2
 20668                           postinc0	equ	0xFEE
 20669                           wreg	equ	0xFE8
 20670                           indf1	equ	0xFE7
 20671                           postdec1	equ	0xFE5
 20672                           fsr1h	equ	0xFE2
 20673                           fsr1l	equ	0xFE1
 20674                           indf2	equ	0xFDF
 20675                           postinc2	equ	0xFDE
 20676                           postdec2	equ	0xFDD
 20677                           plusw2	equ	0xFDB
 20678                           fsr2h	equ	0xFDA
 20679                           fsr2l	equ	0xFD9
 20680                           status	equ	0xFD8
 20681                           
 20682 ;; *************** function _SPI_Init *****************
 20683 ;; Defined at:
 20684 ;;		line 12 in file "Library/SPI.c"
 20685 ;; Parameters:    Size  Location     Type
 20686 ;;  pClock          4   45[BANK0 ] unsigned long 
 20687 ;;  pChannel        1   49[BANK0 ] enum E6744
 20688 ;;  pMode           1   50[BANK0 ] enum E6748
 20689 ;; Auto vars:     Size  Location     Type
 20690 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20691 ;;		 -> SPI1(11), SPI2(11), 
 20692 ;; Return value:  Size  Location     Type
 20693 ;;                  1    wreg      void 
 20694 ;; Registers used:
 20695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20696 ;; Tracked objects:
 20697 ;;		On entry : 0/0
 20698 ;;		On exit  : 0/0
 20699 ;;		Unchanged: 0/0
 20700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20701 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20704 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20705 ;;Total ram usage:        8 bytes
 20706 ;; Hardware stack levels used:    1
 20707 ;; Hardware stack levels required when called:   12
 20708 ;; This function calls:
 20709 ;;		_Byte_SetBit
 20710 ;;		_Byte_SetQuad
 20711 ;;		_Port_SetPinType
 20712 ;;		_SPI_DCS
 20713 ;;		_SPI_DisableISR
 20714 ;;		_Timer2_Init
 20715 ;; This function is called by:
 20716 ;;		_Configure_GPIOs
 20717 ;;		_HMI_Init
 20718 ;; This function uses a non-reentrant model
 20719 ;;
 20720                           
 20721                           	psect	text98
 20722  0104A6                     __ptext98:
 20723                           	opt stack 0
 20724  0104A6                     _SPI_Init:
 20725                           	opt stack 15
 20726                           
 20727                           ;SPI.c: 14: SPIPtr pInput;
 20728                           ;SPI.c: 16: switch (pChannel)
 20729                           
 20730                           ;incstack = 0
 20731  0104A6  D00C               	goto	l597
 20732  0104A8                     
 20733                           ;SPI.c: 19: pInput = &SPI1;
 20734  0104A8  0E7A               	movlw	low _SPI1
 20735  0104AA  0100               	movlb	0	; () banked
 20736  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20737  0104AE  0E03               	movlw	high _SPI1
 20738  0104B0  D004               	goto	L13
 20739  0104B2                     
 20740                           ; BSR set to: 0
 20741                           ;SPI.c: 22: pInput = &SPI2;
 20742                           
 20743                           ; BSR set to: 0
 20744  0104B2  0E85               	movlw	low _SPI2
 20745  0104B4  0100               	movlb	0	; () banked
 20746  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20747  0104B8  0E03               	movlw	high _SPI2
 20748  0104BA                     L13:
 20749  0104BA  0100               	movlb	0	; () banked
 20750  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20751                           
 20752                           ; BSR set to: 0
 20753                           ;SPI.c: 24: };
 20754                           
 20755                           ;SPI.c: 23: break;
 20756  0104BE  D008               	goto	l599
 20757  0104C0                     l597:
 20758                           
 20759                           ; BSR set to: 0
 20760  0104C0  0100               	movlb	0	; () banked
 20761  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20762                           
 20763                           ; Switch size 1, requested type "space"
 20764                           ; Number of cases is 2, Range of values is 0 to 1
 20765                           ; switch strategies available:
 20766                           ; Name         Instructions Cycles
 20767                           ; simple_byte            7     4 (average)
 20768                           ;	Chosen strategy is simple_byte
 20769  0104C4  0A00               	xorlw	0	; case 0
 20770  0104C6  B4D8               	btfsc	status,2,c
 20771  0104C8  D7EF               	goto	l598
 20772  0104CA  0A01               	xorlw	1	; case 1
 20773  0104CC  B4D8               	btfsc	status,2,c
 20774  0104CE  D7F1               	goto	l600
 20775  0104D0                     l599:
 20776                           
 20777                           ; BSR set to: 0
 20778                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20779                           
 20780                           ; BSR set to: 0
 20781  0104D0  0100               	movlb	0	; () banked
 20782  0104D2  EE20 F002          	lfsr	2,2
 20783  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20784  0104D8  26D9               	addwf	fsr2l,f,c
 20785  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20786  0104DC  22DA               	addwfc	fsr2h,f,c
 20787  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20788                           
 20789                           ;SPI.c: 35: switch (pChannel)
 20790  0104E2  D0B1               	goto	l601
 20791  0104E4                     
 20792                           ; BSR set to: 0
 20793                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20794                           
 20795                           ; BSR set to: 0
 20796  0104E4  0EA5               	movlw	low _PortC
 20797  0104E6  0100               	movlb	0	; () banked
 20798  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20799  0104EA  0E00               	movlw	high _PortC
 20800  0104EC  0100               	movlb	0	; () banked
 20801  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20802  0104F0  0E02               	movlw	2
 20803  0104F2  0100               	movlb	0	; () banked
 20804  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20805  0104F6  0E03               	movlw	3
 20806  0104F8  0100               	movlb	0	; () banked
 20807  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20808  0104FC  EC60  F093         	call	_Port_SetPinType	;wreg free
 20809                           
 20810                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20811  010500  0EA5               	movlw	low _PortC
 20812  010502  0100               	movlb	0	; () banked
 20813  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20814  010506  0E00               	movlw	high _PortC
 20815  010508  0100               	movlb	0	; () banked
 20816  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20817  01050C  0E03               	movlw	3
 20818  01050E  0100               	movlb	0	; () banked
 20819  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20820  010512  0E03               	movlw	3
 20821  010514  0100               	movlb	0	; () banked
 20822  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20823  010518  EC60  F093         	call	_Port_SetPinType	;wreg free
 20824                           
 20825                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20826  01051C  0EA5               	movlw	low _PortC
 20827  01051E  0100               	movlb	0	; () banked
 20828  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20829  010522  0E00               	movlw	high _PortC
 20830  010524  0100               	movlb	0	; () banked
 20831  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20832  010528  0E05               	movlw	5
 20833  01052A  0100               	movlb	0	; () banked
 20834  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20835  01052E  0E03               	movlw	3
 20836  010530  0100               	movlb	0	; () banked
 20837  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20838  010534  EC60  F093         	call	_Port_SetPinType	;wreg free
 20839                           
 20840                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20841  010538  0EA5               	movlw	low _PortC
 20842  01053A  0100               	movlb	0	; () banked
 20843  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20844  01053E  0E00               	movlw	high _PortC
 20845  010540  0100               	movlb	0	; () banked
 20846  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20847  010544  0E04               	movlw	4
 20848  010546  0100               	movlb	0	; () banked
 20849  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20850  01054A  0E00               	movlw	0
 20851  01054C  0100               	movlb	0	; () banked
 20852  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20853  010550  EC60  F093         	call	_Port_SetPinType	;wreg free
 20854                           
 20855                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20856  010554  0100               	movlb	0	; () banked
 20857  010556  EE20 F003          	lfsr	2,3
 20858  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20859  01055C  26D9               	addwf	fsr2l,f,c
 20860  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20861  010560  22DA               	addwfc	fsr2h,f,c
 20862  010562  0EC7               	movlw	199
 20863  010564  6EDE               	movwf	postinc2,c
 20864  010566  0E0F               	movlw	15
 20865  010568  6EDD               	movwf	postdec2,c
 20866                           
 20867                           ; BSR set to: 0
 20868                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20869  01056A  0100               	movlb	0	; () banked
 20870  01056C  EE20 F006          	lfsr	2,6
 20871  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20872  010572  26D9               	addwf	fsr2l,f,c
 20873  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20874  010576  22DA               	addwfc	fsr2h,f,c
 20875  010578  0EC6               	movlw	198
 20876  01057A  6EDE               	movwf	postinc2,c
 20877  01057C  0E0F               	movlw	15
 20878  01057E  6EDD               	movwf	postdec2,c
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20882  010580  0100               	movlb	0	; () banked
 20883  010582  EE20 F009          	lfsr	2,9
 20884  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20885  010588  26D9               	addwf	fsr2l,f,c
 20886  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20887  01058C  22DA               	addwfc	fsr2h,f,c
 20888  01058E  0EC9               	movlw	201
 20889  010590  D056               	goto	L14
 20890  010592                     
 20891                           ; BSR set to: 0
 20892                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20893                           
 20894                           ; BSR set to: 0
 20895  010592  0E9B               	movlw	low _PortD
 20896  010594  0100               	movlb	0	; () banked
 20897  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20898  010598  0E00               	movlw	high _PortD
 20899  01059A  0100               	movlb	0	; () banked
 20900  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20901  01059E  0E07               	movlw	7
 20902  0105A0  0100               	movlb	0	; () banked
 20903  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20904  0105A4  0E03               	movlw	3
 20905  0105A6  0100               	movlb	0	; () banked
 20906  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20907  0105AA  EC60  F093         	call	_Port_SetPinType	;wreg free
 20908                           
 20909                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20910  0105AE  0E9B               	movlw	low _PortD
 20911  0105B0  0100               	movlb	0	; () banked
 20912  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20913  0105B4  0E00               	movlw	high _PortD
 20914  0105B6  0100               	movlb	0	; () banked
 20915  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20916  0105BA  0E06               	movlw	6
 20917  0105BC  0100               	movlb	0	; () banked
 20918  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20919  0105C0  0E03               	movlw	3
 20920  0105C2  0100               	movlb	0	; () banked
 20921  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20922  0105C6  EC60  F093         	call	_Port_SetPinType	;wreg free
 20923                           
 20924                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20925  0105CA  0E9B               	movlw	low _PortD
 20926  0105CC  0100               	movlb	0	; () banked
 20927  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20928  0105D0  0E00               	movlw	high _PortD
 20929  0105D2  0100               	movlb	0	; () banked
 20930  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20931  0105D6  0E04               	movlw	4
 20932  0105D8  0100               	movlb	0	; () banked
 20933  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20934  0105DC  0E03               	movlw	3
 20935  0105DE  0100               	movlb	0	; () banked
 20936  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20937  0105E2  EC60  F093         	call	_Port_SetPinType	;wreg free
 20938                           
 20939                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20940  0105E6  0E9B               	movlw	low _PortD
 20941  0105E8  0100               	movlb	0	; () banked
 20942  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20943  0105EC  0E00               	movlw	high _PortD
 20944  0105EE  0100               	movlb	0	; () banked
 20945  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20946  0105F2  0E05               	movlw	5
 20947  0105F4  0100               	movlb	0	; () banked
 20948  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20949  0105F8  0E00               	movlw	0
 20950  0105FA  0100               	movlb	0	; () banked
 20951  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20952  0105FE  EC60  F093         	call	_Port_SetPinType	;wreg free
 20953                           
 20954                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20955  010602  0100               	movlb	0	; () banked
 20956  010604  EE20 F003          	lfsr	2,3
 20957  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20958  01060A  26D9               	addwf	fsr2l,f,c
 20959  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20960  01060E  22DA               	addwfc	fsr2h,f,c
 20961  010610  0E6D               	movlw	109
 20962  010612  6EDE               	movwf	postinc2,c
 20963  010614  0E0F               	movlw	15
 20964  010616  6EDD               	movwf	postdec2,c
 20965                           
 20966                           ; BSR set to: 0
 20967                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20968  010618  0100               	movlb	0	; () banked
 20969  01061A  EE20 F006          	lfsr	2,6
 20970  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20971  010620  26D9               	addwf	fsr2l,f,c
 20972  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20973  010624  22DA               	addwfc	fsr2h,f,c
 20974  010626  0E6C               	movlw	108
 20975  010628  6EDE               	movwf	postinc2,c
 20976  01062A  0E0F               	movlw	15
 20977  01062C  6EDD               	movwf	postdec2,c
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20981  01062E  0100               	movlb	0	; () banked
 20982  010630  EE20 F009          	lfsr	2,9
 20983  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20984  010636  26D9               	addwf	fsr2l,f,c
 20985  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20986  01063A  22DA               	addwfc	fsr2h,f,c
 20987  01063C  0E6F               	movlw	111
 20988  01063E                     L14:
 20989  01063E  6EDE               	movwf	postinc2,c
 20990  010640  0E0F               	movlw	15
 20991  010642  6EDD               	movwf	postdec2,c
 20992                           
 20993                           ;SPI.c: 68: break;
 20994  010644  D009               	goto	l603
 20995  010646                     l601:
 20996                           
 20997                           ; BSR set to: 0
 20998                           
 20999                           ; BSR set to: 0
 21000  010646  0100               	movlb	0	; () banked
 21001  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 21002                           
 21003                           ; Switch size 1, requested type "space"
 21004                           ; Number of cases is 2, Range of values is 0 to 1
 21005                           ; switch strategies available:
 21006                           ; Name         Instructions Cycles
 21007                           ; simple_byte            7     4 (average)
 21008                           ;	Chosen strategy is simple_byte
 21009  01064A  0A00               	xorlw	0	; case 0
 21010  01064C  B4D8               	btfsc	status,2,c
 21011  01064E  D74A               	goto	l602
 21012  010650  0A01               	xorlw	1	; case 1
 21013  010652  A4D8               	btfss	status,2,c
 21014  010654  0012               	return	
 21015  010656  D79D               	goto	l604
 21016  010658                     l603:
 21017                           
 21018                           ; BSR set to: 0
 21019                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21020                           
 21021                           ; BSR set to: 0
 21022  010658  0100               	movlb	0	; () banked
 21023  01065A  EE20 F006          	lfsr	2,6
 21024  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21025  010660  26D9               	addwf	fsr2l,f,c
 21026  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21027  010664  22DA               	addwfc	fsr2h,f,c
 21028  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21029  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21030  01066E  0E05               	movlw	5
 21031  010670  0100               	movlb	0	; () banked
 21032  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21033  010674  0E00               	movlw	0
 21034  010676  0100               	movlb	0	; () banked
 21035  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21036  01067A  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21037                           
 21038                           ;SPI.c: 77: switch(pMode)
 21039  01067E  D09C               	goto	l607
 21040  010680                     
 21041                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21042  010680  0100               	movlb	0	; () banked
 21043  010682  EE20 F006          	lfsr	2,6
 21044  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21045  010688  26D9               	addwf	fsr2l,f,c
 21046  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21047  01068C  22DA               	addwfc	fsr2h,f,c
 21048  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21049  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21050  010696  0E04               	movlw	4
 21051  010698  0100               	movlb	0	; () banked
 21052  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21053  01069C  0E00               	movlw	0
 21054  01069E  0100               	movlb	0	; () banked
 21055  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21056  0106A2  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21057                           
 21058                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21059  0106A6  0100               	movlb	0	; () banked
 21060  0106A8  EE20 F003          	lfsr	2,3
 21061  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21062  0106AE  26D9               	addwf	fsr2l,f,c
 21063  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21064  0106B2  22DA               	addwfc	fsr2h,f,c
 21065  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21066  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21067  0106BC  0E06               	movlw	6
 21068  0106BE  0100               	movlb	0	; () banked
 21069  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21070  0106C2  0E00               	movlw	0
 21071  0106C4  0100               	movlb	0	; () banked
 21072  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21073  0106C8  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21074                           
 21075                           ;SPI.c: 82: break;
 21076  0106CC  D084               	goto	l609
 21077  0106CE                     
 21078                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21079  0106CE  0100               	movlb	0	; () banked
 21080  0106D0  EE20 F006          	lfsr	2,6
 21081  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21082  0106D6  26D9               	addwf	fsr2l,f,c
 21083  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21084  0106DA  22DA               	addwfc	fsr2h,f,c
 21085  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21086  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21087  0106E4  0E04               	movlw	4
 21088  0106E6  0100               	movlb	0	; () banked
 21089  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21090  0106EA  0E00               	movlw	0
 21091  0106EC  0100               	movlb	0	; () banked
 21092  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21093  0106F0  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21094                           
 21095                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21096  0106F4  0100               	movlb	0	; () banked
 21097  0106F6  EE20 F003          	lfsr	2,3
 21098  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21099  0106FC  26D9               	addwf	fsr2l,f,c
 21100  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21101  010700  22DA               	addwfc	fsr2h,f,c
 21102  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21103  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21104  01070A  0E06               	movlw	6
 21105  01070C  0100               	movlb	0	; () banked
 21106  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21107  010710  0E01               	movlw	1
 21108  010712  0100               	movlb	0	; () banked
 21109  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21110  010716  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21111                           
 21112                           ;SPI.c: 86: break;
 21113  01071A  D05D               	goto	l609
 21114  01071C                     
 21115                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21116  01071C  0100               	movlb	0	; () banked
 21117  01071E  EE20 F006          	lfsr	2,6
 21118  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21119  010724  26D9               	addwf	fsr2l,f,c
 21120  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21121  010728  22DA               	addwfc	fsr2h,f,c
 21122  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21123  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21124  010732  0E04               	movlw	4
 21125  010734  0100               	movlb	0	; () banked
 21126  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21127  010738  0E01               	movlw	1
 21128  01073A  0100               	movlb	0	; () banked
 21129  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21130  01073E  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21131                           
 21132                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21133  010742  0100               	movlb	0	; () banked
 21134  010744  EE20 F003          	lfsr	2,3
 21135  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21136  01074A  26D9               	addwf	fsr2l,f,c
 21137  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21138  01074E  22DA               	addwfc	fsr2h,f,c
 21139  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21140  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21141  010758  0E06               	movlw	6
 21142  01075A  0100               	movlb	0	; () banked
 21143  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21144  01075E  0E00               	movlw	0
 21145  010760  0100               	movlb	0	; () banked
 21146  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21147  010764  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21148                           
 21149                           ;SPI.c: 90: break;
 21150  010768  D036               	goto	l609
 21151  01076A                     
 21152                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21153  01076A  0100               	movlb	0	; () banked
 21154  01076C  EE20 F006          	lfsr	2,6
 21155  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21156  010772  26D9               	addwf	fsr2l,f,c
 21157  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21158  010776  22DA               	addwfc	fsr2h,f,c
 21159  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21160  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21161  010780  0E04               	movlw	4
 21162  010782  0100               	movlb	0	; () banked
 21163  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21164  010786  0E01               	movlw	1
 21165  010788  0100               	movlb	0	; () banked
 21166  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21167  01078C  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21168                           
 21169                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21170  010790  0100               	movlb	0	; () banked
 21171  010792  EE20 F003          	lfsr	2,3
 21172  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21173  010798  26D9               	addwf	fsr2l,f,c
 21174  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21175  01079C  22DA               	addwfc	fsr2h,f,c
 21176  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21177  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21178  0107A6  0E06               	movlw	6
 21179  0107A8  0100               	movlb	0	; () banked
 21180  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21181  0107AC  0E01               	movlw	1
 21182  0107AE  0100               	movlb	0	; () banked
 21183  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21184  0107B2  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21185                           
 21186                           ;SPI.c: 94: break;
 21187  0107B6  D00F               	goto	l609
 21188  0107B8                     l607:
 21189  0107B8  0100               	movlb	0	; () banked
 21190  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 21191                           
 21192                           ; Switch size 1, requested type "space"
 21193                           ; Number of cases is 4, Range of values is 0 to 3
 21194                           ; switch strategies available:
 21195                           ; Name         Instructions Cycles
 21196                           ; simple_byte           13     7 (average)
 21197                           ;	Chosen strategy is simple_byte
 21198  0107BC  0A00               	xorlw	0	; case 0
 21199  0107BE  B4D8               	btfsc	status,2,c
 21200  0107C0  D75F               	goto	l608
 21201  0107C2  0A01               	xorlw	1	; case 1
 21202  0107C4  B4D8               	btfsc	status,2,c
 21203  0107C6  D783               	goto	l610
 21204  0107C8  0A03               	xorlw	3	; case 2
 21205  0107CA  B4D8               	btfsc	status,2,c
 21206  0107CC  D7A7               	goto	l611
 21207  0107CE  0A01               	xorlw	1	; case 3
 21208  0107D0  A4D8               	btfss	status,2,c
 21209  0107D2  0012               	return	
 21210  0107D4  D7CA               	goto	l612
 21211  0107D6                     l609:
 21212                           
 21213                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 21214                           
 21215                           ; BSR set to: 0
 21216  0107D6  0100               	movlb	0	; () banked
 21217  0107D8  EE20 F006          	lfsr	2,6
 21218  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21219  0107DE  26D9               	addwf	fsr2l,f,c
 21220  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21221  0107E2  22DA               	addwfc	fsr2h,f,c
 21222  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21223  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21224  0107EC  0E07               	movlw	7
 21225  0107EE  0100               	movlb	0	; () banked
 21226  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21227  0107F2  0E00               	movlw	0
 21228  0107F4  0100               	movlb	0	; () banked
 21229  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21230  0107F8  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21231                           
 21232                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 21233  0107FC  0100               	movlb	0	; () banked
 21234  0107FE  EE20 F006          	lfsr	2,6
 21235  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21236  010804  26D9               	addwf	fsr2l,f,c
 21237  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21238  010808  22DA               	addwfc	fsr2h,f,c
 21239  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21240  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21241  010812  0E06               	movlw	6
 21242  010814  0100               	movlb	0	; () banked
 21243  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21244  010818  0E00               	movlw	0
 21245  01081A  0100               	movlb	0	; () banked
 21246  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21247  01081E  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21248                           
 21249                           ;SPI.c: 106: Timer2_Init(pClock);
 21250  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 21251  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 21252  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 21253  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 21254  010832  EC77  F099         	call	_Timer2_Init	;wreg free
 21255                           
 21256                           ;SPI.c: 112: SPI_DisableISR(pInput);
 21257  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 21258  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 21259  01083E  EC5B  F0B2         	call	_SPI_DisableISR	;wreg free
 21260                           
 21261                           ;SPI.c: 116: switch (pChannel)
 21262  010842  D004               	goto	l614
 21263  010844                     l615:
 21264                           
 21265                           ; BSR set to: 0
 21266  010844  869F               	bsf	3999,3,c	;volatile
 21267  010846  D00B               	goto	l616
 21268  010848                     l617:
 21269                           
 21270                           ; BSR set to: 0
 21271  010848  8EA5               	bsf	4005,7,c	;volatile
 21272  01084A  D009               	goto	l616
 21273  01084C                     l614:
 21274                           
 21275                           ; BSR set to: 0
 21276  01084C  0100               	movlb	0	; () banked
 21277  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 21278                           
 21279                           ; Switch size 1, requested type "space"
 21280                           ; Number of cases is 2, Range of values is 0 to 1
 21281                           ; switch strategies available:
 21282                           ; Name         Instructions Cycles
 21283                           ; simple_byte            7     4 (average)
 21284                           ;	Chosen strategy is simple_byte
 21285  010850  0A00               	xorlw	0	; case 0
 21286  010852  B4D8               	btfsc	status,2,c
 21287  010854  D7F7               	goto	l615
 21288  010856  0A01               	xorlw	1	; case 1
 21289  010858  A4D8               	btfss	status,2,c
 21290  01085A  0012               	return	
 21291  01085C  D7F5               	goto	l617
 21292  01085E                     l616:
 21293                           
 21294                           ; BSR set to: 0
 21295                           ;SPI.c: 124: SPI_DCS(pInput);
 21296                           
 21297                           ; BSR set to: 0
 21298  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 21299  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 21300  010866  ECBB  F0B1         	call	_SPI_DCS	;wreg free
 21301                           
 21302                           ;SPI.c: 126: pInput->mBusy = 0;
 21303  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 21304  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 21305  010872  0E00               	movlw	0
 21306  010874  6EDF               	movwf	indf2,c
 21307                           
 21308                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 21309  010876  0100               	movlb	0	; () banked
 21310  010878  EE20 F006          	lfsr	2,6
 21311  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21312  01087E  26D9               	addwf	fsr2l,f,c
 21313  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21314  010882  22DA               	addwfc	fsr2h,f,c
 21315  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 21316  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 21317  01088C  0E00               	movlw	0
 21318  01088E  0100               	movlb	0	; () banked
 21319  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21320  010892  0E03               	movlw	3
 21321  010894  0100               	movlb	0	; () banked
 21322  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 21323  010898  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 21324                           
 21325                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21326  01089C  0100               	movlb	0	; () banked
 21327  01089E  EE20 F006          	lfsr	2,6
 21328  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21329  0108A4  26D9               	addwf	fsr2l,f,c
 21330  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21331  0108A8  22DA               	addwfc	fsr2h,f,c
 21332  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21333  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21334  0108B2  0E05               	movlw	5
 21335  0108B4  0100               	movlb	0	; () banked
 21336  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21337  0108B8  0E01               	movlw	1
 21338  0108BA  0100               	movlb	0	; () banked
 21339  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21340  0108BE  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 21341  0108C2  0012               	return		;funcret
 21342  0108C4                     __end_of_SPI_Init:
 21343                           	opt stack 0
 21344                           tosu	equ	0xFFF
 21345                           tosh	equ	0xFFE
 21346                           tosl	equ	0xFFD
 21347                           pclath	equ	0xFFA
 21348                           tblptru	equ	0xFF8
 21349                           tblptrh	equ	0xFF7
 21350                           tblptrl	equ	0xFF6
 21351                           tablat	equ	0xFF5
 21352                           prodh	equ	0xFF4
 21353                           prodl	equ	0xFF3
 21354                           intcon	equ	0xFF2
 21355                           postinc0	equ	0xFEE
 21356                           wreg	equ	0xFE8
 21357                           indf1	equ	0xFE7
 21358                           postdec1	equ	0xFE5
 21359                           fsr1h	equ	0xFE2
 21360                           fsr1l	equ	0xFE1
 21361                           indf2	equ	0xFDF
 21362                           postinc2	equ	0xFDE
 21363                           postdec2	equ	0xFDD
 21364                           plusw2	equ	0xFDB
 21365                           fsr2h	equ	0xFDA
 21366                           fsr2l	equ	0xFD9
 21367                           status	equ	0xFD8
 21368                           
 21369 ;; *************** function _Timer2_Init *****************
 21370 ;; Defined at:
 21371 ;;		line 10 in file "Library/Timer2.c"
 21372 ;; Parameters:    Size  Location     Type
 21373 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 21374 ;; Auto vars:     Size  Location     Type
 21375 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 21376 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 21377 ;;  RDIV            4   18[BANK0 ] unsigned long 
 21378 ;; Return value:  Size  Location     Type
 21379 ;;                  1    wreg      void 
 21380 ;; Registers used:
 21381 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21382 ;; Tracked objects:
 21383 ;;		On entry : 0/0
 21384 ;;		On exit  : 0/0
 21385 ;;		Unchanged: 0/0
 21386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21388 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;Total ram usage:       17 bytes
 21392 ;; Hardware stack levels used:    1
 21393 ;; Hardware stack levels required when called:    8
 21394 ;; This function calls:
 21395 ;;		_Timer2_Clear
 21396 ;;		___lldiv
 21397 ;; This function is called by:
 21398 ;;		_SPI_Init
 21399 ;; This function uses a non-reentrant model
 21400 ;;
 21401                           
 21402                           	psect	text99
 21403  0132EE                     __ptext99:
 21404                           	opt stack 0
 21405  0132EE                     _Timer2_Init:
 21406                           	opt stack 18
 21407                           
 21408                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 21409                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 21410                           ;Timer2.c: 14: static UINT8 PRE = 0;
 21411                           ;Timer2.c: 15: static UINT32 DIV = 0;
 21412                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 21413                           
 21414                           ;incstack = 0
 21415  0132EE  0E00               	movlw	0
 21416  0132F0  0100               	movlb	0	; () banked
 21417  0132F2  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 21418  0132F4  0E6C               	movlw	108
 21419  0132F6  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 21420  0132F8  0EDC               	movlw	220
 21421  0132FA  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 21422  0132FC  0E02               	movlw	2
 21423  0132FE  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 21424                           
 21425                           ; BSR set to: 0
 21426                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 21427                           ;Timer2.c: 20: pFrequency *= 2;
 21428  013300  0100               	movlb	0	; () banked
 21429  013302  90D8               	bcf	status,0,c
 21430  013304  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 21431  013306  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 21432  013308  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 21433  01330A  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;Timer2.c: 23: pCPUClock /= 4;
 21437  01330C  0E02               	movlw	2
 21438  01330E  0100               	movlb	0	; () banked
 21439  013310  6FCB               	movwf	??_Timer2_Init& (0+255),b
 21440  013312                     u9595:
 21441  013312  90D8               	bcf	status,0,c
 21442  013314  0100               	movlb	0	; () banked
 21443  013316  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 21444  013318  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 21445  01331A  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 21446  01331C  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 21447  01331E  0100               	movlb	0	; () banked
 21448  013320  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 21449  013322  D7F7               	goto	u9595
 21450                           
 21451                           ; BSR set to: 0
 21452                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 21453  013324  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 21454  013328  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 21455  01332C  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 21456  013330  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 21457  013334  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 21458  013338  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 21459  01333C  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 21460  013340  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 21461  013344  EC2C  F0A2         	call	___lldiv	;wreg free
 21462  013348  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 21463  01334C  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21464  013350  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21465  013354  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21466                           
 21467                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21468  013358  D010               	goto	l1828
 21469  01335A                     l12969:
 21470                           
 21471                           ;Timer2.c: 28: {
 21472                           ;Timer2.c: 29: RDIV = 0;
 21473  01335A  0E00               	movlw	0
 21474  01335C  0100               	movlb	0	; () banked
 21475  01335E  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21476  013360  0E00               	movlw	0
 21477  013362  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21478  013364  0E00               	movlw	0
 21479  013366  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21480  013368  0E00               	movlw	0
 21481  01336A  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21482                           
 21483                           ; BSR set to: 0
 21484                           ;Timer2.c: 30: INDEX ++;
 21485  01336C  0100               	movlb	0	; () banked
 21486  01336E  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 21487                           
 21488                           ; BSR set to: 0
 21489                           ;Timer2.c: 31: if (INDEX >= 3)
 21490  013370  0E02               	movlw	2
 21491  013372  0100               	movlb	0	; () banked
 21492  013374  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21493  013376  D001               	goto	l1828
 21494  013378  D026               	goto	u9610
 21495  01337A                     l1828:
 21496                           
 21497                           ; BSR set to: 0
 21498                           
 21499                           ; BSR set to: 0
 21500  01337A  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21501  01337E  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21502  013382  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21503  013386  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21504  01338A  0100               	movlb	0	; () banked
 21505  01338C  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21506  01338E  0D01               	mullw	1
 21507  013390  0E1C               	movlw	low Timer2_Init@PRESCALE
 21508  013392  24F3               	addwf	prodl,w,c
 21509  013394  6EF6               	movwf	tblptrl,c
 21510  013396  0EFD               	movlw	high Timer2_Init@PRESCALE
 21511  013398  20F4               	addwfc	prodh,w,c
 21512  01339A  6EF7               	movwf	tblptrh,c
 21513  01339C                     	if	1	;There are 3 active tblptr bytes
 21514  01339C  6AF8               	clrf	tblptru,c
 21515  01339E  0E00               	movlw	low (__mediumconst shr (0+16))
 21516  0133A0  22F8               	addwfc	tblptru,f,c
 21517  0133A2                     	endif
 21518  0133A2  0008               	tblrd		*
 21519  0133A4  50F5               	movf	tablat,w,c
 21520  0133A6  0100               	movlb	0	; () banked
 21521  0133A8  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21522  0133AA  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21523  0133AC  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21524  0133AE  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21525  0133B0  EC2C  F0A2         	call	___lldiv	;wreg free
 21526  0133B4  0100               	movlb	0	; () banked
 21527  0133B6  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21528  0133B8  0100               	movlb	0	; () banked
 21529  0133BA  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21530  0133BC  E1CE               	bnz	l12969
 21531  0133BE  0100               	movlb	0	; () banked
 21532  0133C0  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21533  0133C2  B0D8               	btfsc	status,0,c
 21534  0133C4  D7CA               	goto	l1827
 21535  0133C6                     u9610:
 21536                           
 21537                           ; BSR set to: 0
 21538                           ;Timer2.c: 33: }
 21539                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21540                           
 21541                           ; BSR set to: 0
 21542  0133C6  50CA               	movf	4042,w,c	;volatile
 21543  0133C8  0100               	movlb	0	; () banked
 21544  0133CA  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21545  0133CC  0BFC               	andlw	-4
 21546  0133CE  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21547  0133D0  6ECA               	movwf	4042,c	;volatile
 21548                           
 21549                           ; BSR set to: 0
 21550                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21551  0133D2  84CA               	bsf	4042,2,c	;volatile
 21552                           
 21553                           ; BSR set to: 0
 21554                           ;Timer2.c: 44: Timer2_Clear();
 21555  0133D4  EC59  F0B4         	call	_Timer2_Clear	;wreg free
 21556                           
 21557                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21558  0133D8  0100               	movlb	0	; () banked
 21559  0133DA  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21560  0133DC  0D01               	mullw	1
 21561  0133DE  0E1C               	movlw	low Timer2_Init@PRESCALE
 21562  0133E0  24F3               	addwf	prodl,w,c
 21563  0133E2  6EF6               	movwf	tblptrl,c
 21564  0133E4  0EFD               	movlw	high Timer2_Init@PRESCALE
 21565  0133E6  20F4               	addwfc	prodh,w,c
 21566  0133E8  6EF7               	movwf	tblptrh,c
 21567  0133EA                     	if	1	;There are 3 active tblptr bytes
 21568  0133EA  6AF8               	clrf	tblptru,c
 21569  0133EC  0E00               	movlw	low (__mediumconst shr (0+16))
 21570  0133EE  22F8               	addwfc	tblptru,f,c
 21571  0133F0                     	endif
 21572  0133F0  0008               	tblrd		*
 21573  0133F2  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 21574                           
 21575                           ; BSR set to: 0
 21576                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21577  0133F6  0EFF               	movlw	255
 21578  0133F8  0100               	movlb	0	; () banked
 21579  0133FA  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21580  0133FC  0103               	movlb	3	; () banked
 21581  0133FE  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21582  013400  0EFF               	movlw	255
 21583  013402  0100               	movlb	0	; () banked
 21584  013404  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21585  013406  0103               	movlb	3	; () banked
 21586  013408  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21587  01340A  0EFF               	movlw	255
 21588  01340C  0100               	movlb	0	; () banked
 21589  01340E  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21590  013410  0103               	movlb	3	; () banked
 21591  013412  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21592  013414  0EFF               	movlw	255
 21593  013416  0100               	movlb	0	; () banked
 21594  013418  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21595  01341A  0103               	movlb	3	; () banked
 21596  01341C  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21597                           
 21598                           ; BSR set to: 3
 21599                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21600  01341E  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21601  013422  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21602  013426  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21603  01342A  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21604  01342E  0100               	movlb	0	; () banked
 21605  013430  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 21606  013432  0100               	movlb	0	; () banked
 21607  013434  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21608  013436  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21609  013438  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21610  01343A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21611  01343C  EC2C  F0A2         	call	___lldiv	;wreg free
 21612  013440  0100               	movlb	0	; () banked
 21613  013442  51BA               	movf	?___lldiv& (0+255),w,b
 21614  013444  0100               	movlb	0	; () banked
 21615  013446  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 21616                           
 21617                           ; BSR set to: 0
 21618                           ;Timer2.c: 49: PR2 = INDEX;
 21619  013448  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21620                           
 21621                           ; BSR set to: 0
 21622  01344C  0012               	return		;funcret
 21623  01344E                     __end_of_Timer2_Init:
 21624                           	opt stack 0
 21625                           tosu	equ	0xFFF
 21626                           tosh	equ	0xFFE
 21627                           tosl	equ	0xFFD
 21628                           pclath	equ	0xFFA
 21629                           tblptru	equ	0xFF8
 21630                           tblptrh	equ	0xFF7
 21631                           tblptrl	equ	0xFF6
 21632                           tablat	equ	0xFF5
 21633                           prodh	equ	0xFF4
 21634                           prodl	equ	0xFF3
 21635                           intcon	equ	0xFF2
 21636                           postinc0	equ	0xFEE
 21637                           wreg	equ	0xFE8
 21638                           indf1	equ	0xFE7
 21639                           postdec1	equ	0xFE5
 21640                           fsr1h	equ	0xFE2
 21641                           fsr1l	equ	0xFE1
 21642                           indf2	equ	0xFDF
 21643                           postinc2	equ	0xFDE
 21644                           postdec2	equ	0xFDD
 21645                           plusw2	equ	0xFDB
 21646                           fsr2h	equ	0xFDA
 21647                           fsr2l	equ	0xFD9
 21648                           status	equ	0xFD8
 21649                           
 21650 ;; *************** function ___lldiv *****************
 21651 ;; Defined at:
 21652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21653 ;; Parameters:    Size  Location     Type
 21654 ;;  dividend        4    0[BANK0 ] unsigned long 
 21655 ;;  divisor         4    4[BANK0 ] unsigned long 
 21656 ;; Auto vars:     Size  Location     Type
 21657 ;;  quotient        4    8[BANK0 ] unsigned long 
 21658 ;;  counter         1   12[BANK0 ] unsigned char 
 21659 ;; Return value:  Size  Location     Type
 21660 ;;                  4    0[BANK0 ] unsigned long 
 21661 ;; Registers used:
 21662 ;;		wreg, status,2, status,0
 21663 ;; Tracked objects:
 21664 ;;		On entry : 0/0
 21665 ;;		On exit  : 0/0
 21666 ;;		Unchanged: 0/0
 21667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21668 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21672 ;;Total ram usage:       13 bytes
 21673 ;; Hardware stack levels used:    1
 21674 ;; Hardware stack levels required when called:    7
 21675 ;; This function calls:
 21676 ;;		Nothing
 21677 ;; This function is called by:
 21678 ;;		_Timer0_Init
 21679 ;;		_Timer2_Init
 21680 ;;		_rand_between
 21681 ;;		_I2C_Init
 21682 ;; This function uses a non-reentrant model
 21683 ;;
 21684                           
 21685                           	psect	text100
 21686  014458                     __ptext100:
 21687                           	opt stack 0
 21688  014458                     ___lldiv:
 21689                           	opt stack 19
 21690                           
 21691                           ; BSR set to: 0
 21692                           ;incstack = 0
 21693  014458  0E00               	movlw	0
 21694  01445A  0100               	movlb	0	; () banked
 21695  01445C  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21696  01445E  0E00               	movlw	0
 21697  014460  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21698  014462  0E00               	movlw	0
 21699  014464  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21700  014466  0E00               	movlw	0
 21701  014468  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21702                           
 21703                           ; BSR set to: 0
 21704  01446A  0100               	movlb	0	; () banked
 21705  01446C  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21706  01446E  0100               	movlb	0	; () banked
 21707  014470  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21708  014472  0100               	movlb	0	; () banked
 21709  014474  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21710  014476  0100               	movlb	0	; () banked
 21711  014478  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21712  01447A  B4D8               	btfsc	status,2,c
 21713  01447C  D042               	goto	l2817
 21714                           
 21715                           ; BSR set to: 0
 21716  01447E  0E01               	movlw	1
 21717  014480  0100               	movlb	0	; () banked
 21718  014482  6FC6               	movwf	___lldiv@counter& (0+255),b
 21719  014484  D008               	goto	l2812
 21720  014486                     
 21721                           ; BSR set to: 0
 21722                           
 21723                           ; BSR set to: 0
 21724  014486  0100               	movlb	0	; () banked
 21725  014488  90D8               	bcf	status,0,c
 21726  01448A  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21727  01448C  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21728  01448E  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21729  014490  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21730  014492  0100               	movlb	0	; () banked
 21731  014494  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21732  014496                     l2812:
 21733                           
 21734                           ; BSR set to: 0
 21735                           
 21736                           ; BSR set to: 0
 21737  014496  0100               	movlb	0	; () banked
 21738  014498  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21739  01449A  D7F5               	goto	l2813
 21740  01449C                     u9470:
 21741                           
 21742                           ; BSR set to: 0
 21743                           
 21744                           ; BSR set to: 0
 21745                           
 21746                           ; BSR set to: 0
 21747  01449C  0100               	movlb	0	; () banked
 21748  01449E  90D8               	bcf	status,0,c
 21749  0144A0  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21750  0144A2  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21751  0144A4  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21752  0144A6  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21753                           
 21754                           ; BSR set to: 0
 21755  0144A8  0100               	movlb	0	; () banked
 21756  0144AA  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21757  0144AC  0100               	movlb	0	; () banked
 21758  0144AE  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21759  0144B0  0100               	movlb	0	; () banked
 21760  0144B2  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21761  0144B4  0100               	movlb	0	; () banked
 21762  0144B6  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21763  0144B8  0100               	movlb	0	; () banked
 21764  0144BA  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21765  0144BC  0100               	movlb	0	; () banked
 21766  0144BE  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21767  0144C0  0100               	movlb	0	; () banked
 21768  0144C2  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21769  0144C4  0100               	movlb	0	; () banked
 21770  0144C6  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21771  0144C8  A0D8               	btfss	status,0,c
 21772  0144CA  D012               	goto	l2816
 21773                           
 21774                           ; BSR set to: 0
 21775  0144CC  0100               	movlb	0	; () banked
 21776  0144CE  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21777  0144D0  0100               	movlb	0	; () banked
 21778  0144D2  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21779  0144D4  0100               	movlb	0	; () banked
 21780  0144D6  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21781  0144D8  0100               	movlb	0	; () banked
 21782  0144DA  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21783  0144DC  0100               	movlb	0	; () banked
 21784  0144DE  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21785  0144E0  0100               	movlb	0	; () banked
 21786  0144E2  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21787  0144E4  0100               	movlb	0	; () banked
 21788  0144E6  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21789  0144E8  0100               	movlb	0	; () banked
 21790  0144EA  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21791                           
 21792                           ; BSR set to: 0
 21793  0144EC  0100               	movlb	0	; () banked
 21794  0144EE  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21795  0144F0                     l2816:
 21796                           
 21797                           ; BSR set to: 0
 21798                           
 21799                           ; BSR set to: 0
 21800  0144F0  0100               	movlb	0	; () banked
 21801  0144F2  90D8               	bcf	status,0,c
 21802  0144F4  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21803  0144F6  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21804  0144F8  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21805  0144FA  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21806                           
 21807                           ; BSR set to: 0
 21808  0144FC  0100               	movlb	0	; () banked
 21809  0144FE  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21810  014500  D7CD               	goto	u9470
 21811  014502                     l2817:
 21812                           
 21813                           ; BSR set to: 0
 21814                           
 21815                           ; BSR set to: 0
 21816  014502  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21817  014506  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21818  01450A  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21819  01450E  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21820                           
 21821                           ; BSR set to: 0
 21822  014512  0012               	return		;funcret
 21823  014514                     __end_of___lldiv:
 21824                           	opt stack 0
 21825                           tosu	equ	0xFFF
 21826                           tosh	equ	0xFFE
 21827                           tosl	equ	0xFFD
 21828                           pclath	equ	0xFFA
 21829                           tblptru	equ	0xFF8
 21830                           tblptrh	equ	0xFF7
 21831                           tblptrl	equ	0xFF6
 21832                           tablat	equ	0xFF5
 21833                           prodh	equ	0xFF4
 21834                           prodl	equ	0xFF3
 21835                           intcon	equ	0xFF2
 21836                           postinc0	equ	0xFEE
 21837                           wreg	equ	0xFE8
 21838                           indf1	equ	0xFE7
 21839                           postdec1	equ	0xFE5
 21840                           fsr1h	equ	0xFE2
 21841                           fsr1l	equ	0xFE1
 21842                           indf2	equ	0xFDF
 21843                           postinc2	equ	0xFDE
 21844                           postdec2	equ	0xFDD
 21845                           plusw2	equ	0xFDB
 21846                           fsr2h	equ	0xFDA
 21847                           fsr2l	equ	0xFD9
 21848                           status	equ	0xFD8
 21849                           
 21850 ;; *************** function _Timer2_Clear *****************
 21851 ;; Defined at:
 21852 ;;		line 3 in file "Library/Timer2.c"
 21853 ;; Parameters:    Size  Location     Type
 21854 ;;		None
 21855 ;; Auto vars:     Size  Location     Type
 21856 ;;		None
 21857 ;; Return value:  Size  Location     Type
 21858 ;;                  1    wreg      void 
 21859 ;; Registers used:
 21860 ;;		None
 21861 ;; Tracked objects:
 21862 ;;		On entry : 0/0
 21863 ;;		On exit  : 0/0
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21870 ;;Total ram usage:        0 bytes
 21871 ;; Hardware stack levels used:    1
 21872 ;; Hardware stack levels required when called:    7
 21873 ;; This function calls:
 21874 ;;		Nothing
 21875 ;; This function is called by:
 21876 ;;		_Timer2_Init
 21877 ;; This function uses a non-reentrant model
 21878 ;;
 21879                           
 21880                           	psect	text101
 21881  0168B2                     __ptext101:
 21882                           	opt stack 0
 21883  0168B2                     _Timer2_Clear:
 21884                           	opt stack 18
 21885                           
 21886                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21887                           
 21888                           ; BSR set to: 0
 21889                           ;incstack = 0
 21890  0168B2  929E               	bcf	3998,1,c	;volatile
 21891                           
 21892                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21893  0168B4  929D               	bcf	3997,1,c	;volatile
 21894                           
 21895                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21896  0168B6  929F               	bcf	3999,1,c	;volatile
 21897  0168B8  0012               	return		;funcret
 21898  0168BA                     __end_of_Timer2_Clear:
 21899                           	opt stack 0
 21900                           tosu	equ	0xFFF
 21901                           tosh	equ	0xFFE
 21902                           tosl	equ	0xFFD
 21903                           pclath	equ	0xFFA
 21904                           tblptru	equ	0xFF8
 21905                           tblptrh	equ	0xFF7
 21906                           tblptrl	equ	0xFF6
 21907                           tablat	equ	0xFF5
 21908                           prodh	equ	0xFF4
 21909                           prodl	equ	0xFF3
 21910                           intcon	equ	0xFF2
 21911                           postinc0	equ	0xFEE
 21912                           wreg	equ	0xFE8
 21913                           indf1	equ	0xFE7
 21914                           postdec1	equ	0xFE5
 21915                           fsr1h	equ	0xFE2
 21916                           fsr1l	equ	0xFE1
 21917                           indf2	equ	0xFDF
 21918                           postinc2	equ	0xFDE
 21919                           postdec2	equ	0xFDD
 21920                           plusw2	equ	0xFDB
 21921                           fsr2h	equ	0xFDA
 21922                           fsr2l	equ	0xFD9
 21923                           status	equ	0xFD8
 21924                           
 21925 ;; *************** function _SPI_DisableISR *****************
 21926 ;; Defined at:
 21927 ;;		line 181 in file "Library/SPI.c"
 21928 ;; Parameters:    Size  Location     Type
 21929 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21930 ;;		 -> SPI1(11), SPI2(11), 
 21931 ;; Auto vars:     Size  Location     Type
 21932 ;;		None
 21933 ;; Return value:  Size  Location     Type
 21934 ;;                  1    wreg      void 
 21935 ;; Registers used:
 21936 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21937 ;; Tracked objects:
 21938 ;;		On entry : 0/0
 21939 ;;		On exit  : 0/0
 21940 ;;		Unchanged: 0/0
 21941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;Total ram usage:        2 bytes
 21947 ;; Hardware stack levels used:    1
 21948 ;; Hardware stack levels required when called:    7
 21949 ;; This function calls:
 21950 ;;		Nothing
 21951 ;; This function is called by:
 21952 ;;		_SPI_Init
 21953 ;; This function uses a non-reentrant model
 21954 ;;
 21955                           
 21956                           	psect	text102
 21957  0164B6                     __ptext102:
 21958                           	opt stack 0
 21959  0164B6                     _SPI_DisableISR:
 21960                           	opt stack 19
 21961                           
 21962                           ;SPI.c: 183: switch (pInput->mChannel)
 21963                           
 21964                           ;incstack = 0
 21965  0164B6  D004               	goto	l654
 21966  0164B8                     l655:
 21967                           
 21968                           ; BSR set to: 0
 21969  0164B8  969D               	bcf	3997,3,c	;volatile
 21970  0164BA  0012               	return	
 21971  0164BC                     l657:
 21972                           
 21973                           ; BSR set to: 0
 21974  0164BC  9EA3               	bcf	4003,7,c	;volatile
 21975                           
 21976                           ; BSR set to: 0
 21977                           ;SPI.c: 188: };
 21978                           
 21979                           ; BSR set to: 0
 21980                           
 21981                           ;SPI.c: 187: default: return;
 21982  0164BE  0012               	return	
 21983  0164C0                     l654:
 21984                           
 21985                           ; BSR set to: 0
 21986  0164C0  0100               	movlb	0	; () banked
 21987  0164C2  EE20 F002          	lfsr	2,2
 21988  0164C6  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21989  0164C8  26D9               	addwf	fsr2l,f,c
 21990  0164CA  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21991  0164CC  22DA               	addwfc	fsr2h,f,c
 21992  0164CE  50DF               	movf	indf2,w,c
 21993                           
 21994                           ; Switch size 1, requested type "space"
 21995                           ; Number of cases is 2, Range of values is 0 to 1
 21996                           ; switch strategies available:
 21997                           ; Name         Instructions Cycles
 21998                           ; simple_byte            7     4 (average)
 21999                           ;	Chosen strategy is simple_byte
 22000  0164D0  0A00               	xorlw	0	; case 0
 22001  0164D2  B4D8               	btfsc	status,2,c
 22002  0164D4  D7F1               	goto	l655
 22003  0164D6  0A01               	xorlw	1	; case 1
 22004  0164D8  A4D8               	btfss	status,2,c
 22005  0164DA  0012               	return	
 22006  0164DC  D7EF               	goto	l657
 22007  0164DE                     __end_of_SPI_DisableISR:
 22008                           	opt stack 0
 22009                           tosu	equ	0xFFF
 22010                           tosh	equ	0xFFE
 22011                           tosl	equ	0xFFD
 22012                           pclath	equ	0xFFA
 22013                           tblptru	equ	0xFF8
 22014                           tblptrh	equ	0xFF7
 22015                           tblptrl	equ	0xFF6
 22016                           tablat	equ	0xFF5
 22017                           prodh	equ	0xFF4
 22018                           prodl	equ	0xFF3
 22019                           intcon	equ	0xFF2
 22020                           postinc0	equ	0xFEE
 22021                           wreg	equ	0xFE8
 22022                           indf1	equ	0xFE7
 22023                           postdec1	equ	0xFE5
 22024                           fsr1h	equ	0xFE2
 22025                           fsr1l	equ	0xFE1
 22026                           indf2	equ	0xFDF
 22027                           postinc2	equ	0xFDE
 22028                           postdec2	equ	0xFDD
 22029                           plusw2	equ	0xFDB
 22030                           fsr2h	equ	0xFDA
 22031                           fsr2l	equ	0xFD9
 22032                           status	equ	0xFD8
 22033                           
 22034 ;; *************** function _SPI_DCS *****************
 22035 ;; Defined at:
 22036 ;;		line 219 in file "Library/SPI.c"
 22037 ;; Parameters:    Size  Location     Type
 22038 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22039 ;;		 -> SPI1(11), SPI2(11), 
 22040 ;; Auto vars:     Size  Location     Type
 22041 ;;		None
 22042 ;; Return value:  Size  Location     Type
 22043 ;;                  1    wreg      void 
 22044 ;; Registers used:
 22045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22046 ;; Tracked objects:
 22047 ;;		On entry : 0/0
 22048 ;;		On exit  : 0/0
 22049 ;;		Unchanged: 0/0
 22050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22055 ;;Total ram usage:        2 bytes
 22056 ;; Hardware stack levels used:    1
 22057 ;; Hardware stack levels required when called:    7
 22058 ;; This function calls:
 22059 ;;		Nothing
 22060 ;; This function is called by:
 22061 ;;		_SPI_Init
 22062 ;; This function uses a non-reentrant model
 22063 ;;
 22064                           
 22065                           	psect	text103
 22066  016376                     __ptext103:
 22067                           	opt stack 0
 22068  016376                     _SPI_DCS:
 22069                           	opt stack 19
 22070                           
 22071                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 22072                           
 22073                           ; BSR set to: 0
 22074                           ;incstack = 0
 22075  016376  0100               	movlb	0	; () banked
 22076  016378  EE20 F002          	lfsr	2,2
 22077  01637C  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 22078  01637E  26D9               	addwf	fsr2l,f,c
 22079  016380  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 22080  016382  22DA               	addwfc	fsr2h,f,c
 22081  016384  50DF               	movf	indf2,w,c
 22082  016386  A4D8               	btfss	status,2,c
 22083  016388  D007               	goto	l673
 22084                           
 22085                           ; BSR set to: 0
 22086                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 22087  01638A  C0A9  FFD9         	movff	_PortC+4,fsr2l
 22088  01638E  C0AA  FFDA         	movff	_PortC+5,fsr2h
 22089  016392  0100               	movlb	0	; () banked
 22090  016394  84DF               	bsf	indf2,2,c
 22091  016396  0012               	return	
 22092  016398                     l673:
 22093                           
 22094                           ; BSR set to: 0
 22095                           ;SPI.c: 223: else
 22096                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 22097                           
 22098                           ; BSR set to: 0
 22099  016398  C09F  FFD9         	movff	_PortD+4,fsr2l
 22100  01639C  C0A0  FFDA         	movff	_PortD+5,fsr2h
 22101  0163A0  0100               	movlb	0	; () banked
 22102  0163A2  8EDF               	bsf	indf2,7,c
 22103  0163A4  0012               	return	
 22104  0163A6                     __end_of_SPI_DCS:
 22105                           	opt stack 0
 22106                           tosu	equ	0xFFF
 22107                           tosh	equ	0xFFE
 22108                           tosl	equ	0xFFD
 22109                           pclath	equ	0xFFA
 22110                           tblptru	equ	0xFF8
 22111                           tblptrh	equ	0xFF7
 22112                           tblptrl	equ	0xFF6
 22113                           tablat	equ	0xFF5
 22114                           prodh	equ	0xFF4
 22115                           prodl	equ	0xFF3
 22116                           intcon	equ	0xFF2
 22117                           postinc0	equ	0xFEE
 22118                           wreg	equ	0xFE8
 22119                           indf1	equ	0xFE7
 22120                           postdec1	equ	0xFE5
 22121                           fsr1h	equ	0xFE2
 22122                           fsr1l	equ	0xFE1
 22123                           indf2	equ	0xFDF
 22124                           postinc2	equ	0xFDE
 22125                           postdec2	equ	0xFDD
 22126                           plusw2	equ	0xFDB
 22127                           fsr2h	equ	0xFDA
 22128                           fsr2l	equ	0xFD9
 22129                           status	equ	0xFD8
 22130                           
 22131 ;; *************** function _Button_Init *****************
 22132 ;; Defined at:
 22133 ;;		line 18 in file "Library/Button.c"
 22134 ;; Parameters:    Size  Location     Type
 22135 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 22136 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 22137 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 22138 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 22139 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 22140 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 22141 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 22142 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 22143 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 22144 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 22145 ;; Auto vars:     Size  Location     Type
 22146 ;;		None
 22147 ;; Return value:  Size  Location     Type
 22148 ;;                  1    wreg      void 
 22149 ;; Registers used:
 22150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22151 ;; Tracked objects:
 22152 ;;		On entry : 0/0
 22153 ;;		On exit  : 0/0
 22154 ;;		Unchanged: 0/0
 22155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22156 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22159 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22160 ;;Total ram usage:       13 bytes
 22161 ;; Hardware stack levels used:    1
 22162 ;; Hardware stack levels required when called:   15
 22163 ;; This function calls:
 22164 ;;		_HMI_InitButtons
 22165 ;;		_MXK_InitDIPSwitch
 22166 ;;		_MXK_InitTestButton
 22167 ;; This function is called by:
 22168 ;;		_HMI_Init
 22169 ;;		_FunctInitButton
 22170 ;; This function uses a non-reentrant model
 22171 ;;
 22172                           
 22173                           	psect	text104
 22174  013EDE                     __ptext104:
 22175                           	opt stack 0
 22176  013EDE                     _Button_Init:
 22177                           	opt stack 13
 22178                           
 22179                           ;Button.c: 21: if(pInput==(void*)0)
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;incstack = 0
 22183  013EDE  0101               	movlb	1	; () banked
 22184  013EE0  5100               	movf	Button_Init@pInput& (0+255),w,b
 22185  013EE2  0101               	movlb	1	; () banked
 22186  013EE4  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 22187  013EE6  B4D8               	btfsc	status,2,c
 22188  013EE8  0012               	return	
 22189                           
 22190                           ; BSR set to: 1
 22191                           ;Button.c: 23: if(pInitIO==(void*)0)
 22192                           
 22193                           ; BSR set to: 1
 22194                           
 22195                           ; BSR set to: 1
 22196                           ;Button.c: 22: return;
 22197  013EEA  0101               	movlb	1	; () banked
 22198  013EEC  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22199  013EEE  0101               	movlb	1	; () banked
 22200  013EF0  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 22201  013EF2  0101               	movlb	1	; () banked
 22202  013EF4  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 22203  013EF6  B4D8               	btfsc	status,2,c
 22204  013EF8  0012               	return	
 22205                           
 22206                           ; BSR set to: 1
 22207                           ;Button.c: 25: if(pGetState==(void*)0)
 22208                           
 22209                           ; BSR set to: 1
 22210                           
 22211                           ; BSR set to: 1
 22212                           ;Button.c: 24: return;
 22213  013EFA  0101               	movlb	1	; () banked
 22214  013EFC  5107               	movf	Button_Init@pGetState& (0+255),w,b
 22215  013EFE  0101               	movlb	1	; () banked
 22216  013F00  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 22217  013F02  0101               	movlb	1	; () banked
 22218  013F04  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 22219  013F06  B4D8               	btfsc	status,2,c
 22220  013F08  0012               	return	
 22221                           
 22222                           ; BSR set to: 1
 22223                           ;Button.c: 27: if(pFunction==(void*)0)
 22224                           
 22225                           ; BSR set to: 1
 22226                           
 22227                           ; BSR set to: 1
 22228                           ;Button.c: 26: return;
 22229  013F0A  0101               	movlb	1	; () banked
 22230  013F0C  510A               	movf	Button_Init@pFunction& (0+255),w,b
 22231  013F0E  0101               	movlb	1	; () banked
 22232  013F10  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 22233  013F12  0101               	movlb	1	; () banked
 22234  013F14  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 22235  013F16  B4D8               	btfsc	status,2,c
 22236  013F18  0012               	return	
 22237                           
 22238                           ; BSR set to: 1
 22239                           ;Button.c: 30: if(pThreshold == 0)
 22240                           
 22241                           ; BSR set to: 1
 22242                           
 22243                           ; BSR set to: 1
 22244                           ;Button.c: 28: return;
 22245  013F1A  0101               	movlb	1	; () banked
 22246  013F1C  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 22247  013F1E  0101               	movlb	1	; () banked
 22248  013F20  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 22249  013F22  A4D8               	btfss	status,2,c
 22250  013F24  D005               	goto	l8
 22251                           
 22252                           ; BSR set to: 1
 22253                           ;Button.c: 31: pThreshold = 1;
 22254  013F26  0E00               	movlw	0
 22255  013F28  0101               	movlb	1	; () banked
 22256  013F2A  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22257  013F2C  0E01               	movlw	1
 22258  013F2E  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 22259  013F30                     l8:
 22260                           
 22261                           ; BSR set to: 1
 22262                           ;Button.c: 34: pInput->mState = 0;
 22263                           
 22264                           ; BSR set to: 1
 22265  013F30  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 22266  013F34  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 22267  013F38  0E00               	movlw	0
 22268  013F3A  6EDF               	movwf	indf2,c
 22269                           
 22270                           ; BSR set to: 1
 22271                           ;Button.c: 35: pInput->mCount = 0;
 22272  013F3C  0101               	movlb	1	; () banked
 22273  013F3E  EE20 F001          	lfsr	2,1
 22274  013F42  5100               	movf	Button_Init@pInput& (0+255),w,b
 22275  013F44  26D9               	addwf	fsr2l,f,c
 22276  013F46  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22277  013F48  22DA               	addwfc	fsr2h,f,c
 22278  013F4A  0E00               	movlw	0
 22279  013F4C  6EDF               	movwf	indf2,c
 22280                           
 22281                           ; BSR set to: 1
 22282                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 22283  013F4E  0101               	movlb	1	; () banked
 22284  013F50  EE20 F002          	lfsr	2,2
 22285  013F54  5100               	movf	Button_Init@pInput& (0+255),w,b
 22286  013F56  26D9               	addwf	fsr2l,f,c
 22287  013F58  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22288  013F5A  22DA               	addwfc	fsr2h,f,c
 22289  013F5C  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 22290  013F60  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 22291                           
 22292                           ; BSR set to: 1
 22293                           ;Button.c: 37: pInput->mFunction = pFunction;
 22294  013F64  0101               	movlb	1	; () banked
 22295  013F66  EE20 F004          	lfsr	2,4
 22296  013F6A  5100               	movf	Button_Init@pInput& (0+255),w,b
 22297  013F6C  26D9               	addwf	fsr2l,f,c
 22298  013F6E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22299  013F70  22DA               	addwfc	fsr2h,f,c
 22300  013F72  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 22301  013F76  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 22302  013F7A  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 22303                           
 22304                           ; BSR set to: 1
 22305                           ;Button.c: 38: pInput->mGetState = pGetState;
 22306  013F7E  0101               	movlb	1	; () banked
 22307  013F80  EE20 F007          	lfsr	2,7
 22308  013F84  5100               	movf	Button_Init@pInput& (0+255),w,b
 22309  013F86  26D9               	addwf	fsr2l,f,c
 22310  013F88  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22311  013F8A  22DA               	addwfc	fsr2h,f,c
 22312  013F8C  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 22313  013F90  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 22314  013F94  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 22315                           
 22316                           ; BSR set to: 1
 22317                           ;Button.c: 41: pInitIO();
 22318  013F98  D801               	call	u10868
 22319  013F9A  0012               	return	
 22320  013F9C                     u10868:
 22321  013F9C  0005               	push	
 22322  013F9E  6EFA               	movwf	pclath,c
 22323  013FA0  0101               	movlb	1	; () banked
 22324  013FA2  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22325  013FA4  6EFD               	movwf	tosl,c
 22326  013FA6  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 22327  013FA8  6EFE               	movwf	tosh,c
 22328  013FAA  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 22329  013FAC  6EFF               	movwf	tosu,c
 22330  013FAE  50FA               	movf	pclath,w,c
 22331  013FB0  0012               	return		;indir
 22332  013FB2                     __end_of_Button_Init:
 22333                           	opt stack 0
 22334                           tosu	equ	0xFFF
 22335                           tosh	equ	0xFFE
 22336                           tosl	equ	0xFFD
 22337                           pclath	equ	0xFFA
 22338                           tblptru	equ	0xFF8
 22339                           tblptrh	equ	0xFF7
 22340                           tblptrl	equ	0xFF6
 22341                           tablat	equ	0xFF5
 22342                           prodh	equ	0xFF4
 22343                           prodl	equ	0xFF3
 22344                           intcon	equ	0xFF2
 22345                           postinc0	equ	0xFEE
 22346                           wreg	equ	0xFE8
 22347                           indf1	equ	0xFE7
 22348                           postdec1	equ	0xFE5
 22349                           fsr1h	equ	0xFE2
 22350                           fsr1l	equ	0xFE1
 22351                           indf2	equ	0xFDF
 22352                           postinc2	equ	0xFDE
 22353                           postdec2	equ	0xFDD
 22354                           plusw2	equ	0xFDB
 22355                           fsr2h	equ	0xFDA
 22356                           fsr2l	equ	0xFD9
 22357                           status	equ	0xFD8
 22358                           
 22359 ;; *************** function _MXK_InitDIPSwitch *****************
 22360 ;; Defined at:
 22361 ;;		line 20 in file "Library/MXK.c"
 22362 ;; Parameters:    Size  Location     Type
 22363 ;;		None
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;		None
 22366 ;; Return value:  Size  Location     Type
 22367 ;;                  1    wreg      void 
 22368 ;; Registers used:
 22369 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22370 ;; Tracked objects:
 22371 ;;		On entry : 0/0
 22372 ;;		On exit  : 0/0
 22373 ;;		Unchanged: 0/0
 22374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;Total ram usage:        0 bytes
 22380 ;; Hardware stack levels used:    1
 22381 ;; Hardware stack levels required when called:   14
 22382 ;; This function calls:
 22383 ;;		_Port_SetQuadType
 22384 ;; This function is called by:
 22385 ;;		_FunctInitButton
 22386 ;;		_Button_Init
 22387 ;; This function uses a non-reentrant model
 22388 ;;
 22389                           
 22390                           	psect	text105
 22391  016620                     __ptext105:
 22392                           	opt stack 0
 22393  016620                     _MXK_InitDIPSwitch:
 22394                           	opt stack 13
 22395                           
 22396                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 22397                           
 22398                           ;incstack = 0
 22399  016620  0E9B               	movlw	low _PortD
 22400  016622  0100               	movlb	0	; () banked
 22401  016624  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 22402  016626  0E00               	movlw	high _PortD
 22403  016628  0100               	movlb	0	; () banked
 22404  01662A  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 22405  01662C  0E00               	movlw	0
 22406  01662E  0100               	movlb	0	; () banked
 22407  016630  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 22408  016632  0E00               	movlw	0
 22409  016634  0100               	movlb	0	; () banked
 22410  016636  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 22411  016638  EC53  F08D         	call	_Port_SetQuadType	;wreg free
 22412  01663C  0012               	return		;funcret
 22413  01663E                     __end_of_MXK_InitDIPSwitch:
 22414                           	opt stack 0
 22415                           tosu	equ	0xFFF
 22416                           tosh	equ	0xFFE
 22417                           tosl	equ	0xFFD
 22418                           pclath	equ	0xFFA
 22419                           tblptru	equ	0xFF8
 22420                           tblptrh	equ	0xFF7
 22421                           tblptrl	equ	0xFF6
 22422                           tablat	equ	0xFF5
 22423                           prodh	equ	0xFF4
 22424                           prodl	equ	0xFF3
 22425                           intcon	equ	0xFF2
 22426                           postinc0	equ	0xFEE
 22427                           wreg	equ	0xFE8
 22428                           indf1	equ	0xFE7
 22429                           postdec1	equ	0xFE5
 22430                           fsr1h	equ	0xFE2
 22431                           fsr1l	equ	0xFE1
 22432                           indf2	equ	0xFDF
 22433                           postinc2	equ	0xFDE
 22434                           postdec2	equ	0xFDD
 22435                           plusw2	equ	0xFDB
 22436                           fsr2h	equ	0xFDA
 22437                           fsr2l	equ	0xFD9
 22438                           status	equ	0xFD8
 22439                           
 22440 ;; *************** function _HMI_InitButtons *****************
 22441 ;; Defined at:
 22442 ;;		line 21 in file "HMI.c"
 22443 ;; Parameters:    Size  Location     Type
 22444 ;;		None
 22445 ;; Auto vars:     Size  Location     Type
 22446 ;;		None
 22447 ;; Return value:  Size  Location     Type
 22448 ;;                  1    wreg      void 
 22449 ;; Registers used:
 22450 ;;		wreg, status,2
 22451 ;; Tracked objects:
 22452 ;;		On entry : 0/0
 22453 ;;		On exit  : 0/0
 22454 ;;		Unchanged: 0/0
 22455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22460 ;;Total ram usage:        0 bytes
 22461 ;; Hardware stack levels used:    1
 22462 ;; Hardware stack levels required when called:    7
 22463 ;; This function calls:
 22464 ;;		Nothing
 22465 ;; This function is called by:
 22466 ;;		_HMI_Init
 22467 ;;		_Button_Init
 22468 ;; This function uses a non-reentrant model
 22469 ;;
 22470                           
 22471                           	psect	text106
 22472  0168D0                     __ptext106:
 22473                           	opt stack 0
 22474  0168D0                     _HMI_InitButtons:
 22475                           	opt stack 20
 22476                           
 22477                           ;HMI.c: 23: TRISE = 0xFC;
 22478                           
 22479                           ;incstack = 0
 22480  0168D0  0EFC               	movlw	252
 22481  0168D2  6E96               	movwf	3990,c	;volatile
 22482  0168D4  0012               	return		;funcret
 22483  0168D6                     __end_of_HMI_InitButtons:
 22484                           	opt stack 0
 22485                           tosu	equ	0xFFF
 22486                           tosh	equ	0xFFE
 22487                           tosl	equ	0xFFD
 22488                           pclath	equ	0xFFA
 22489                           tblptru	equ	0xFF8
 22490                           tblptrh	equ	0xFF7
 22491                           tblptrl	equ	0xFF6
 22492                           tablat	equ	0xFF5
 22493                           prodh	equ	0xFF4
 22494                           prodl	equ	0xFF3
 22495                           intcon	equ	0xFF2
 22496                           postinc0	equ	0xFEE
 22497                           wreg	equ	0xFE8
 22498                           indf1	equ	0xFE7
 22499                           postdec1	equ	0xFE5
 22500                           fsr1h	equ	0xFE2
 22501                           fsr1l	equ	0xFE1
 22502                           indf2	equ	0xFDF
 22503                           postinc2	equ	0xFDE
 22504                           postdec2	equ	0xFDD
 22505                           plusw2	equ	0xFDB
 22506                           fsr2h	equ	0xFDA
 22507                           fsr2l	equ	0xFD9
 22508                           status	equ	0xFD8
 22509                           
 22510 ;; *************** function _MXK_InitTestButton *****************
 22511 ;; Defined at:
 22512 ;;		line 10 in file "Library/MXK.c"
 22513 ;; Parameters:    Size  Location     Type
 22514 ;;		None
 22515 ;; Auto vars:     Size  Location     Type
 22516 ;;		None
 22517 ;; Return value:  Size  Location     Type
 22518 ;;                  1    wreg      void 
 22519 ;; Registers used:
 22520 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22521 ;; Tracked objects:
 22522 ;;		On entry : 0/0
 22523 ;;		On exit  : 0/0
 22524 ;;		Unchanged: 0/0
 22525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22530 ;;Total ram usage:        0 bytes
 22531 ;; Hardware stack levels used:    1
 22532 ;; Hardware stack levels required when called:   12
 22533 ;; This function calls:
 22534 ;;		_Port_SetPinType
 22535 ;; This function is called by:
 22536 ;;		_FunctInitButton
 22537 ;;		_Button_Init
 22538 ;; This function uses a non-reentrant model
 22539 ;;
 22540                           
 22541                           	psect	text107
 22542  01663E                     __ptext107:
 22543                           	opt stack 0
 22544  01663E                     _MXK_InitTestButton:
 22545                           	opt stack 15
 22546                           
 22547                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22548                           
 22549                           ;incstack = 0
 22550  01663E  0EAE               	movlw	low _PortB
 22551  016640  0100               	movlb	0	; () banked
 22552  016642  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22553  016644  0E03               	movlw	high _PortB
 22554  016646  0100               	movlb	0	; () banked
 22555  016648  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22556  01664A  0E04               	movlw	4
 22557  01664C  0100               	movlb	0	; () banked
 22558  01664E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22559  016650  0E00               	movlw	0
 22560  016652  0100               	movlb	0	; () banked
 22561  016654  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22562  016656  EC60  F093         	call	_Port_SetPinType	;wreg free
 22563  01665A  0012               	return		;funcret
 22564  01665C                     __end_of_MXK_InitTestButton:
 22565                           	opt stack 0
 22566                           tosu	equ	0xFFF
 22567                           tosh	equ	0xFFE
 22568                           tosl	equ	0xFFD
 22569                           pclath	equ	0xFFA
 22570                           tblptru	equ	0xFF8
 22571                           tblptrh	equ	0xFF7
 22572                           tblptrl	equ	0xFF6
 22573                           tablat	equ	0xFF5
 22574                           prodh	equ	0xFF4
 22575                           prodl	equ	0xFF3
 22576                           intcon	equ	0xFF2
 22577                           postinc0	equ	0xFEE
 22578                           wreg	equ	0xFE8
 22579                           indf1	equ	0xFE7
 22580                           postdec1	equ	0xFE5
 22581                           fsr1h	equ	0xFE2
 22582                           fsr1l	equ	0xFE1
 22583                           indf2	equ	0xFDF
 22584                           postinc2	equ	0xFDE
 22585                           postdec2	equ	0xFDD
 22586                           plusw2	equ	0xFDB
 22587                           fsr2h	equ	0xFDA
 22588                           fsr2l	equ	0xFD9
 22589                           status	equ	0xFD8
 22590                           
 22591 ;; *************** function _Port_SetPinType *****************
 22592 ;; Defined at:
 22593 ;;		line 189 in file "Library/Port.c"
 22594 ;; Parameters:    Size  Location     Type
 22595 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22596 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22597 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22598 ;;  pPin            1   40[BANK0 ] enum E6750
 22599 ;;  pType           1   41[BANK0 ] enum E6795
 22600 ;; Auto vars:     Size  Location     Type
 22601 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22602 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22603 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22604 ;;  Output          1   42[BANK0 ] enum E6475
 22605 ;; Return value:  Size  Location     Type
 22606 ;;                  1    wreg      enum E6475
 22607 ;; Registers used:
 22608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22609 ;; Tracked objects:
 22610 ;;		On entry : 0/0
 22611 ;;		On exit  : 0/0
 22612 ;;		Unchanged: 0/0
 22613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22614 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22615 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22617 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22618 ;;Total ram usage:        7 bytes
 22619 ;; Hardware stack levels used:    1
 22620 ;; Hardware stack levels required when called:   11
 22621 ;; This function calls:
 22622 ;;		_Byte_SetBit
 22623 ;;		_PortProperty_Valid
 22624 ;;		_Word_SetPair
 22625 ;; This function is called by:
 22626 ;;		_Configure_GPIOs
 22627 ;;		_LED_Init
 22628 ;;		_Port_Init
 22629 ;;		_SPI_Init
 22630 ;;		_Motor_Init
 22631 ;;		_MXK_InitTestButton
 22632 ;;		_MXK_Init
 22633 ;;		_I2C_Init
 22634 ;; This function uses a non-reentrant model
 22635 ;;
 22636                           
 22637                           	psect	text108
 22638  0126C0                     __ptext108:
 22639                           	opt stack 0
 22640  0126C0                     _Port_SetPinType:
 22641                           	opt stack 17
 22642                           
 22643                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22644                           
 22645                           ;incstack = 0
 22646  0126C0  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22647  0126C4  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22648  0126C8  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22649  0126CC  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22650                           
 22651                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22652  0126D0  0E05               	movlw	5
 22653  0126D2  0100               	movlb	0	; () banked
 22654  0126D4  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22655                           
 22656                           ;Port.c: 193: switch (pType)
 22657  0126D6  D0B5               	goto	l412
 22658  0126D8                     
 22659                           ; BSR set to: 0
 22660                           ;Port.c: 197: {
 22661                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22662                           
 22663                           ; BSR set to: 0
 22664  0126D8  0100               	movlb	0	; () banked
 22665  0126DA  EE20 F002          	lfsr	2,2
 22666  0126DE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22667  0126E0  26D9               	addwf	fsr2l,f,c
 22668  0126E2  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22669  0126E4  22DA               	addwfc	fsr2h,f,c
 22670  0126E6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22671  0126EA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22672  0126EE  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22673  0126F2  0E01               	movlw	1
 22674  0126F4  0100               	movlb	0	; () banked
 22675  0126F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22676  0126F8  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22677                           
 22678                           ;Port.c: 203: break;
 22679  0126FC  D0B0               	goto	l414
 22680  0126FE                     
 22681                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22682  0126FE  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22683  012702  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22684  012706  0E01               	movlw	1
 22685  012708  0100               	movlb	0	; () banked
 22686  01270A  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22687  01270C  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22688  012710  EC55  F0A9         	call	_PortProperty_Valid	;wreg free
 22689  012714  0100               	movlb	0	; () banked
 22690  012716  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22691  012718  0100               	movlb	0	; () banked
 22692  01271A  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22693  01271C  A4D8               	btfss	status,2,c
 22694  01271E  0012               	return	
 22695                           
 22696                           ; BSR set to: 0
 22697                           ;Port.c: 208: {
 22698                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22699  012720  0100               	movlb	0	; () banked
 22700  012722  EE20 F002          	lfsr	2,2
 22701  012726  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22702  012728  26D9               	addwf	fsr2l,f,c
 22703  01272A  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22704  01272C  22DA               	addwfc	fsr2h,f,c
 22705  01272E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22706  012732  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22707  012736  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22708  01273A  0E00               	movlw	0
 22709  01273C  0100               	movlb	0	; () banked
 22710  01273E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22711  012740  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22712                           
 22713                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22714  012744  0100               	movlb	0	; () banked
 22715  012746  EE20 F004          	lfsr	2,4
 22716  01274A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22717  01274C  26D9               	addwf	fsr2l,f,c
 22718  01274E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22719  012750  22DA               	addwfc	fsr2h,f,c
 22720  012752  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22721  012756  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22722  01275A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22723  01275E  0E00               	movlw	0
 22724  012760  0100               	movlb	0	; () banked
 22725  012762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22726  012764  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22727                           
 22728                           ;Port.c: 214: break;
 22729  012768  D07A               	goto	l414
 22730  01276A                     
 22731                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22732                           
 22733                           ;Port.c: 218: case eTypeOutputOpenSource:
 22734  01276A  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22735  01276E  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22736  012772  0E02               	movlw	2
 22737  012774  0100               	movlb	0	; () banked
 22738  012776  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22739  012778  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22740  01277C  EC55  F0A9         	call	_PortProperty_Valid	;wreg free
 22741  012780  0100               	movlb	0	; () banked
 22742  012782  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22743  012784  0100               	movlb	0	; () banked
 22744  012786  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22745  012788  A4D8               	btfss	status,2,c
 22746  01278A  0012               	return	
 22747                           
 22748                           ; BSR set to: 0
 22749                           ;Port.c: 220: {
 22750                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22751  01278C  0100               	movlb	0	; () banked
 22752  01278E  EE20 F002          	lfsr	2,2
 22753  012792  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22754  012794  26D9               	addwf	fsr2l,f,c
 22755  012796  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22756  012798  22DA               	addwfc	fsr2h,f,c
 22757  01279A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22758  01279E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22759  0127A2  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22760  0127A6  0E01               	movlw	1
 22761  0127A8  0100               	movlb	0	; () banked
 22762  0127AA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22763  0127AC  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22764                           
 22765                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22766  0127B0  0100               	movlb	0	; () banked
 22767  0127B2  EE20 F004          	lfsr	2,4
 22768  0127B6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22769  0127B8  26D9               	addwf	fsr2l,f,c
 22770  0127BA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22771  0127BC  22DA               	addwfc	fsr2h,f,c
 22772  0127BE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22773  0127C2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22774  0127C6  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22775  0127CA  0E01               	movlw	1
 22776  0127CC  0100               	movlb	0	; () banked
 22777  0127CE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22778  0127D0  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22779                           
 22780                           ;Port.c: 226: break;
 22781  0127D4  D044               	goto	l414
 22782  0127D6                     
 22783                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22784                           
 22785                           ;Port.c: 230: case eTypeOutputPushPull:
 22786  0127D6  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22787  0127DA  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22788  0127DE  0E00               	movlw	0
 22789  0127E0  0100               	movlb	0	; () banked
 22790  0127E2  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22791  0127E4  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22792  0127E8  EC55  F0A9         	call	_PortProperty_Valid	;wreg free
 22793  0127EC  0100               	movlb	0	; () banked
 22794  0127EE  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22795  0127F0  0100               	movlb	0	; () banked
 22796  0127F2  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22797  0127F4  A4D8               	btfss	status,2,c
 22798  0127F6  0012               	return	
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;Port.c: 232: {
 22802                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22803  0127F8  0100               	movlb	0	; () banked
 22804  0127FA  EE20 F002          	lfsr	2,2
 22805  0127FE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22806  012800  26D9               	addwf	fsr2l,f,c
 22807  012802  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22808  012804  22DA               	addwfc	fsr2h,f,c
 22809  012806  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22810  01280A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22811  01280E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22812  012812  0E00               	movlw	0
 22813  012814  0100               	movlb	0	; () banked
 22814  012816  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22815  012818  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22816                           
 22817                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22818  01281C  0100               	movlb	0	; () banked
 22819  01281E  EE20 F004          	lfsr	2,4
 22820  012822  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22821  012824  26D9               	addwf	fsr2l,f,c
 22822  012826  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22823  012828  22DA               	addwfc	fsr2h,f,c
 22824  01282A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22825  01282E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22826  012832  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22827  012836  0E00               	movlw	0
 22828  012838  0100               	movlb	0	; () banked
 22829  01283A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22830  01283C  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 22831                           
 22832                           ;Port.c: 239: }
 22833                           
 22834                           ;Port.c: 238: break;
 22835  012840  D00E               	goto	l414
 22836  012842                     l412:
 22837  012842  0100               	movlb	0	; () banked
 22838  012844  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22839                           
 22840                           ; Switch size 1, requested type "space"
 22841                           ; Number of cases is 4, Range of values is 0 to 3
 22842                           ; switch strategies available:
 22843                           ; Name         Instructions Cycles
 22844                           ; simple_byte           13     7 (average)
 22845                           ;	Chosen strategy is simple_byte
 22846  012846  0A00               	xorlw	0	; case 0
 22847  012848  B4D8               	btfsc	status,2,c
 22848  01284A  D746               	goto	l413
 22849  01284C  0A01               	xorlw	1	; case 1
 22850  01284E  B4D8               	btfsc	status,2,c
 22851  012850  D756               	goto	l415
 22852  012852  0A03               	xorlw	3	; case 2
 22853  012854  B4D8               	btfsc	status,2,c
 22854  012856  D789               	goto	l417
 22855  012858  0A01               	xorlw	1	; case 3
 22856  01285A  B4D8               	btfsc	status,2,c
 22857  01285C  D7BC               	goto	l421
 22858  01285E                     l414:
 22859                           
 22860                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22861                           
 22862                           ; BSR set to: 0
 22863  01285E  0E08               	movlw	8
 22864  012860  0100               	movlb	0	; () banked
 22865  012862  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22866  012864  0100               	movlb	0	; () banked
 22867  012866  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22868  012868  0E00               	movlw	0
 22869  01286A  0100               	movlb	0	; () banked
 22870  01286C  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22871  01286E  0100               	movlb	0	; () banked
 22872  012870  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22873  012872  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22874  012876  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22875  01287A  EC97  F0AF         	call	_Word_SetPair	;wreg free
 22876  01287E  0012               	return	
 22877  012880                     __end_of_Port_SetPinType:
 22878                           	opt stack 0
 22879                           tosu	equ	0xFFF
 22880                           tosh	equ	0xFFE
 22881                           tosl	equ	0xFFD
 22882                           pclath	equ	0xFFA
 22883                           tblptru	equ	0xFF8
 22884                           tblptrh	equ	0xFF7
 22885                           tblptrl	equ	0xFF6
 22886                           tablat	equ	0xFF5
 22887                           prodh	equ	0xFF4
 22888                           prodl	equ	0xFF3
 22889                           intcon	equ	0xFF2
 22890                           postinc0	equ	0xFEE
 22891                           wreg	equ	0xFE8
 22892                           indf1	equ	0xFE7
 22893                           postdec1	equ	0xFE5
 22894                           fsr1h	equ	0xFE2
 22895                           fsr1l	equ	0xFE1
 22896                           indf2	equ	0xFDF
 22897                           postinc2	equ	0xFDE
 22898                           postdec2	equ	0xFDD
 22899                           plusw2	equ	0xFDB
 22900                           fsr2h	equ	0xFDA
 22901                           fsr2l	equ	0xFD9
 22902                           status	equ	0xFD8
 22903                           
 22904 ;; *************** function _Port_SetQuadType *****************
 22905 ;; Defined at:
 22906 ;;		line 399 in file "Library/Port.c"
 22907 ;; Parameters:    Size  Location     Type
 22908 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22909 ;;		 -> PortB(10), PortD(10), 
 22910 ;;  pQuad           1   56[BANK0 ] enum E6776
 22911 ;;  pType           1   57[BANK0 ] enum E6795
 22912 ;; Auto vars:     Size  Location     Type
 22913 ;;  Output          1   58[BANK0 ] enum E6475
 22914 ;; Return value:  Size  Location     Type
 22915 ;;                  1    wreg      enum E6475
 22916 ;; Registers used:
 22917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22918 ;; Tracked objects:
 22919 ;;		On entry : 0/0
 22920 ;;		On exit  : 0/0
 22921 ;;		Unchanged: 0/0
 22922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22926 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22927 ;;Total ram usage:        5 bytes
 22928 ;; Hardware stack levels used:    1
 22929 ;; Hardware stack levels required when called:   13
 22930 ;; This function calls:
 22931 ;;		_Byte_SetQuad
 22932 ;;		_Port_CheckQuadType
 22933 ;;		_Word_SetPair
 22934 ;; This function is called by:
 22935 ;;		_MXK_InitDIPSwitch
 22936 ;;		_MXK_Init
 22937 ;; This function uses a non-reentrant model
 22938 ;;
 22939                           
 22940                           	psect	text109
 22941  011AA6                     __ptext109:
 22942                           	opt stack 0
 22943  011AA6                     _Port_SetQuadType:
 22944                           	opt stack 15
 22945                           
 22946                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22947                           
 22948                           ;incstack = 0
 22949  011AA6  0E05               	movlw	5
 22950  011AA8  0100               	movlb	0	; () banked
 22951  011AAA  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22952                           
 22953                           ;Port.c: 403: switch (pType)
 22954  011AAC  D0C7               	goto	l476
 22955  011AAE                     
 22956                           ; BSR set to: 0
 22957                           ;Port.c: 407: {
 22958                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22959                           
 22960                           ; BSR set to: 0
 22961  011AAE  0100               	movlb	0	; () banked
 22962  011AB0  EE20 F002          	lfsr	2,2
 22963  011AB4  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22964  011AB6  26D9               	addwf	fsr2l,f,c
 22965  011AB8  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22966  011ABA  22DA               	addwfc	fsr2h,f,c
 22967  011ABC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22968  011AC0  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22969  011AC4  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22970  011AC8  0E0F               	movlw	15
 22971  011ACA  0100               	movlb	0	; () banked
 22972  011ACC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22973  011ACE  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 22974                           
 22975                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22976  011AD2  0100               	movlb	0	; () banked
 22977  011AD4  EE20 F004          	lfsr	2,4
 22978  011AD8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22979  011ADA  26D9               	addwf	fsr2l,f,c
 22980  011ADC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22981  011ADE  22DA               	addwfc	fsr2h,f,c
 22982  011AE0  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22983  011AE4  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22984  011AE8  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22985  011AEC  0E00               	movlw	0
 22986  011AEE  0100               	movlb	0	; () banked
 22987  011AF0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22988  011AF2  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 22989                           
 22990                           ;Port.c: 413: }
 22991                           ;Port.c: 415: break;
 22992  011AF6  D0B0               	goto	l478
 22993  011AF8                     
 22994                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22995  011AF8  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22996  011AFC  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22997  011B00  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22998  011B04  0E03               	movlw	3
 22999  011B06  0100               	movlb	0	; () banked
 23000  011B08  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23001  011B0A  EC9A  F0AD         	call	_Port_CheckQuadType	;wreg free
 23002  011B0E  0100               	movlb	0	; () banked
 23003  011B10  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 23004  011B12  0100               	movlb	0	; () banked
 23005  011B14  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 23006  011B16  A4D8               	btfss	status,2,c
 23007  011B18  0012               	return	
 23008                           
 23009                           ; BSR set to: 0
 23010                           ;Port.c: 418: {
 23011                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23012  011B1A  0100               	movlb	0	; () banked
 23013  011B1C  EE20 F002          	lfsr	2,2
 23014  011B20  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23015  011B22  26D9               	addwf	fsr2l,f,c
 23016  011B24  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23017  011B26  22DA               	addwfc	fsr2h,f,c
 23018  011B28  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23019  011B2C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23020  011B30  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23021  011B34  0E00               	movlw	0
 23022  011B36  0100               	movlb	0	; () banked
 23023  011B38  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23024  011B3A  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23025                           
 23026                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23027  011B3E  0100               	movlb	0	; () banked
 23028  011B40  EE20 F004          	lfsr	2,4
 23029  011B44  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23030  011B46  26D9               	addwf	fsr2l,f,c
 23031  011B48  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23032  011B4A  22DA               	addwfc	fsr2h,f,c
 23033  011B4C  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23034  011B50  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23035  011B54  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23036  011B58  0E00               	movlw	0
 23037  011B5A  0100               	movlb	0	; () banked
 23038  011B5C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23039  011B5E  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23040                           
 23041                           ;Port.c: 424: }
 23042  011B62  D07A               	goto	l478
 23043  011B64                     
 23044                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23045  011B64  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23046  011B68  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23047  011B6C  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23048  011B70  0E03               	movlw	3
 23049  011B72  0100               	movlb	0	; () banked
 23050  011B74  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23051  011B76  EC9A  F0AD         	call	_Port_CheckQuadType	;wreg free
 23052  011B7A  0100               	movlb	0	; () banked
 23053  011B7C  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 23054  011B7E  0100               	movlb	0	; () banked
 23055  011B80  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 23056  011B82  A4D8               	btfss	status,2,c
 23057  011B84  0012               	return	
 23058                           
 23059                           ; BSR set to: 0
 23060                           ;Port.c: 429: {
 23061                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23062  011B86  0100               	movlb	0	; () banked
 23063  011B88  EE20 F002          	lfsr	2,2
 23064  011B8C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23065  011B8E  26D9               	addwf	fsr2l,f,c
 23066  011B90  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23067  011B92  22DA               	addwfc	fsr2h,f,c
 23068  011B94  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23069  011B98  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23070  011B9C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23071  011BA0  0E0F               	movlw	15
 23072  011BA2  0100               	movlb	0	; () banked
 23073  011BA4  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23074  011BA6  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23075                           
 23076                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 23077  011BAA  0100               	movlb	0	; () banked
 23078  011BAC  EE20 F004          	lfsr	2,4
 23079  011BB0  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23080  011BB2  26D9               	addwf	fsr2l,f,c
 23081  011BB4  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23082  011BB6  22DA               	addwfc	fsr2h,f,c
 23083  011BB8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23084  011BBC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23085  011BC0  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23086  011BC4  0E0F               	movlw	15
 23087  011BC6  0100               	movlb	0	; () banked
 23088  011BC8  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23089  011BCA  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23090                           
 23091                           ;Port.c: 435: }
 23092  011BCE  D044               	goto	l478
 23093  011BD0                     
 23094                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23095  011BD0  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23096  011BD4  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23097  011BD8  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23098  011BDC  0E03               	movlw	3
 23099  011BDE  0100               	movlb	0	; () banked
 23100  011BE0  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23101  011BE2  EC9A  F0AD         	call	_Port_CheckQuadType	;wreg free
 23102  011BE6  0100               	movlb	0	; () banked
 23103  011BE8  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 23104  011BEA  0100               	movlb	0	; () banked
 23105  011BEC  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 23106  011BEE  A4D8               	btfss	status,2,c
 23107  011BF0  0012               	return	
 23108                           
 23109                           ; BSR set to: 0
 23110                           ;Port.c: 440: {
 23111                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23112  011BF2  0100               	movlb	0	; () banked
 23113  011BF4  EE20 F002          	lfsr	2,2
 23114  011BF8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23115  011BFA  26D9               	addwf	fsr2l,f,c
 23116  011BFC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23117  011BFE  22DA               	addwfc	fsr2h,f,c
 23118  011C00  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23119  011C04  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23120  011C08  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23121  011C0C  0E00               	movlw	0
 23122  011C0E  0100               	movlb	0	; () banked
 23123  011C10  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23124  011C12  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23125                           
 23126                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23127  011C16  0100               	movlb	0	; () banked
 23128  011C18  EE20 F004          	lfsr	2,4
 23129  011C1C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23130  011C1E  26D9               	addwf	fsr2l,f,c
 23131  011C20  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23132  011C22  22DA               	addwfc	fsr2h,f,c
 23133  011C24  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 23134  011C28  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 23135  011C2C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23136  011C30  0E00               	movlw	0
 23137  011C32  0100               	movlb	0	; () banked
 23138  011C34  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 23139  011C36  ECA4  F0B2         	call	_Byte_SetQuad	;wreg free
 23140                           
 23141                           ;Port.c: 446: }
 23142  011C3A  D00E               	goto	l478
 23143  011C3C                     l476:
 23144  011C3C  0100               	movlb	0	; () banked
 23145  011C3E  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 23146                           
 23147                           ; Switch size 1, requested type "space"
 23148                           ; Number of cases is 4, Range of values is 0 to 3
 23149                           ; switch strategies available:
 23150                           ; Name         Instructions Cycles
 23151                           ; simple_byte           13     7 (average)
 23152                           ;	Chosen strategy is simple_byte
 23153  011C40  0A00               	xorlw	0	; case 0
 23154  011C42  B4D8               	btfsc	status,2,c
 23155  011C44  D734               	goto	l477
 23156  011C46  0A01               	xorlw	1	; case 1
 23157  011C48  B4D8               	btfsc	status,2,c
 23158  011C4A  D756               	goto	l479
 23159  011C4C  0A03               	xorlw	3	; case 2
 23160  011C4E  B4D8               	btfsc	status,2,c
 23161  011C50  D789               	goto	l483
 23162  011C52  0A01               	xorlw	1	; case 3
 23163  011C54  B4D8               	btfsc	status,2,c
 23164  011C56  D7BC               	goto	l486
 23165  011C58                     l478:
 23166                           
 23167                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 23168                           
 23169                           ; BSR set to: 0
 23170  011C58  0E08               	movlw	8
 23171  011C5A  0100               	movlb	0	; () banked
 23172  011C5C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23173  011C5E  0100               	movlb	0	; () banked
 23174  011C60  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 23175  011C62  0E00               	movlw	0
 23176  011C64  0100               	movlb	0	; () banked
 23177  011C66  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23178  011C68  0100               	movlb	0	; () banked
 23179  011C6A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23180  011C6C  0100               	movlb	0	; () banked
 23181  011C6E  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23182  011C70  0D04               	mullw	4
 23183  011C72  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 23184  011C76  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23185  011C7A  EC97  F0AF         	call	_Word_SetPair	;wreg free
 23186                           
 23187                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 23188  011C7E  0E08               	movlw	8
 23189  011C80  0100               	movlb	0	; () banked
 23190  011C82  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23191  011C84  0100               	movlb	0	; () banked
 23192  011C86  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 23193  011C88  0E00               	movlw	0
 23194  011C8A  0100               	movlb	0	; () banked
 23195  011C8C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23196  011C8E  0100               	movlb	0	; () banked
 23197  011C90  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23198  011C92  0100               	movlb	0	; () banked
 23199  011C94  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23200  011C96  0D04               	mullw	4
 23201  011C98  28F3               	incf	prodl,w,c
 23202  011C9A  0100               	movlb	0	; () banked
 23203  011C9C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 23204  011C9E  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23205  011CA2  EC97  F0AF         	call	_Word_SetPair	;wreg free
 23206                           
 23207                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 23208  011CA6  0E08               	movlw	8
 23209  011CA8  0100               	movlb	0	; () banked
 23210  011CAA  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23211  011CAC  0100               	movlb	0	; () banked
 23212  011CAE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 23213  011CB0  0E00               	movlw	0
 23214  011CB2  0100               	movlb	0	; () banked
 23215  011CB4  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23216  011CB6  0100               	movlb	0	; () banked
 23217  011CB8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23218  011CBA  0100               	movlb	0	; () banked
 23219  011CBC  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23220  011CBE  0D04               	mullw	4
 23221  011CC0  50F3               	movf	prodl,w,c
 23222  011CC2  0F02               	addlw	2
 23223  011CC4  0100               	movlb	0	; () banked
 23224  011CC6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 23225  011CC8  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23226  011CCC  EC97  F0AF         	call	_Word_SetPair	;wreg free
 23227                           
 23228                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 23229  011CD0  0E08               	movlw	8
 23230  011CD2  0100               	movlb	0	; () banked
 23231  011CD4  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23232  011CD6  0100               	movlb	0	; () banked
 23233  011CD8  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 23234  011CDA  0E00               	movlw	0
 23235  011CDC  0100               	movlb	0	; () banked
 23236  011CDE  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23237  011CE0  0100               	movlb	0	; () banked
 23238  011CE2  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23239  011CE4  0100               	movlb	0	; () banked
 23240  011CE6  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23241  011CE8  0D04               	mullw	4
 23242  011CEA  50F3               	movf	prodl,w,c
 23243  011CEC  0F03               	addlw	3
 23244  011CEE  0100               	movlb	0	; () banked
 23245  011CF0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 23246  011CF2  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23247  011CF6  EC97  F0AF         	call	_Word_SetPair	;wreg free
 23248  011CFA  0012               	return	
 23249  011CFC                     __end_of_Port_SetQuadType:
 23250                           	opt stack 0
 23251                           tosu	equ	0xFFF
 23252                           tosh	equ	0xFFE
 23253                           tosl	equ	0xFFD
 23254                           pclath	equ	0xFFA
 23255                           tblptru	equ	0xFF8
 23256                           tblptrh	equ	0xFF7
 23257                           tblptrl	equ	0xFF6
 23258                           tablat	equ	0xFF5
 23259                           prodh	equ	0xFF4
 23260                           prodl	equ	0xFF3
 23261                           intcon	equ	0xFF2
 23262                           postinc0	equ	0xFEE
 23263                           wreg	equ	0xFE8
 23264                           indf1	equ	0xFE7
 23265                           postdec1	equ	0xFE5
 23266                           fsr1h	equ	0xFE2
 23267                           fsr1l	equ	0xFE1
 23268                           indf2	equ	0xFDF
 23269                           postinc2	equ	0xFDE
 23270                           postdec2	equ	0xFDD
 23271                           plusw2	equ	0xFDB
 23272                           fsr2h	equ	0xFDA
 23273                           fsr2l	equ	0xFD9
 23274                           status	equ	0xFD8
 23275                           
 23276 ;; *************** function _Word_SetPair *****************
 23277 ;; Defined at:
 23278 ;;		line 149 in file "Library/Types.c"
 23279 ;; Parameters:    Size  Location     Type
 23280 ;;  pInput          2   15[BANK0 ] PTR struct Word
 23281 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23282 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23283 ;;  pPair           1   17[BANK0 ] unsigned char 
 23284 ;;  pValue          1   18[BANK0 ] unsigned char 
 23285 ;; Auto vars:     Size  Location     Type
 23286 ;;		None
 23287 ;; Return value:  Size  Location     Type
 23288 ;;                  1    wreg      void 
 23289 ;; Registers used:
 23290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23291 ;; Tracked objects:
 23292 ;;		On entry : 0/0
 23293 ;;		On exit  : 0/0
 23294 ;;		Unchanged: 0/0
 23295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23299 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23300 ;;Total ram usage:        4 bytes
 23301 ;; Hardware stack levels used:    1
 23302 ;; Hardware stack levels required when called:    9
 23303 ;; This function calls:
 23304 ;;		_Byte_SetPair
 23305 ;; This function is called by:
 23306 ;;		_Port_SetPinType
 23307 ;;		_Port_SetQuadType
 23308 ;;		_Port_SetType
 23309 ;;		_Port_SetPairType
 23310 ;;		_PortProperty_Init
 23311 ;; This function uses a non-reentrant model
 23312 ;;
 23313                           
 23314                           	psect	text110
 23315  015F2E                     __ptext110:
 23316                           	opt stack 0
 23317  015F2E                     _Word_SetPair:
 23318                           	opt stack 18
 23319                           
 23320                           ;Types.c: 151: if (pPair >= 4)
 23321                           
 23322                           ;incstack = 0
 23323  015F2E  0E03               	movlw	3
 23324  015F30  0100               	movlb	0	; () banked
 23325  015F32  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 23326  015F34  D014               	goto	l776
 23327                           
 23328                           ; BSR set to: 0
 23329                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 23330  015F36  0E01               	movlw	1
 23331  015F38  0100               	movlb	0	; () banked
 23332  015F3A  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 23333  015F3C  0100               	movlb	0	; () banked
 23334  015F3E  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 23335  015F40  0E00               	movlw	0
 23336  015F42  0100               	movlb	0	; () banked
 23337  015F44  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 23338  015F46  0100               	movlb	0	; () banked
 23339  015F48  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 23340  015F4A  0100               	movlb	0	; () banked
 23341  015F4C  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 23342  015F4E  0FFC               	addlw	252
 23343  015F50  0100               	movlb	0	; () banked
 23344  015F52  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 23345  015F54  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23346  015F58  EC93  F0B2         	call	_Byte_SetPair	;wreg free
 23347  015F5C  0012               	return	
 23348  015F5E                     l776:
 23349                           
 23350                           ;Types.c: 153: else
 23351                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 23352  015F5E  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 23353  015F62  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 23354  015F66  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 23355  015F6A  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23356  015F6E  EC93  F0B2         	call	_Byte_SetPair	;wreg free
 23357  015F72  0012               	return	
 23358  015F74                     __end_of_Word_SetPair:
 23359                           	opt stack 0
 23360                           tosu	equ	0xFFF
 23361                           tosh	equ	0xFFE
 23362                           tosl	equ	0xFFD
 23363                           pclath	equ	0xFFA
 23364                           tblptru	equ	0xFF8
 23365                           tblptrh	equ	0xFF7
 23366                           tblptrl	equ	0xFF6
 23367                           tablat	equ	0xFF5
 23368                           prodh	equ	0xFF4
 23369                           prodl	equ	0xFF3
 23370                           intcon	equ	0xFF2
 23371                           postinc0	equ	0xFEE
 23372                           wreg	equ	0xFE8
 23373                           indf1	equ	0xFE7
 23374                           postdec1	equ	0xFE5
 23375                           fsr1h	equ	0xFE2
 23376                           fsr1l	equ	0xFE1
 23377                           indf2	equ	0xFDF
 23378                           postinc2	equ	0xFDE
 23379                           postdec2	equ	0xFDD
 23380                           plusw2	equ	0xFDB
 23381                           fsr2h	equ	0xFDA
 23382                           fsr2l	equ	0xFD9
 23383                           status	equ	0xFD8
 23384                           
 23385 ;; *************** function _Byte_SetPair *****************
 23386 ;; Defined at:
 23387 ;;		line 83 in file "Library/Types.c"
 23388 ;; Parameters:    Size  Location     Type
 23389 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23390 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23391 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23392 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 23393 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 23394 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 23395 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 23396 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 23397 ;;		 -> NULL(0), 
 23398 ;;  pPair           1   13[BANK0 ] unsigned char 
 23399 ;;  pValue          1   14[BANK0 ] unsigned char 
 23400 ;; Auto vars:     Size  Location     Type
 23401 ;;		None
 23402 ;; Return value:  Size  Location     Type
 23403 ;;                  1    wreg      void 
 23404 ;; Registers used:
 23405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23406 ;; Tracked objects:
 23407 ;;		On entry : 0/0
 23408 ;;		On exit  : 0/0
 23409 ;;		Unchanged: 0/0
 23410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23411 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23414 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23415 ;;Total ram usage:        4 bytes
 23416 ;; Hardware stack levels used:    1
 23417 ;; Hardware stack levels required when called:    8
 23418 ;; This function calls:
 23419 ;;		_Byte_SetZone
 23420 ;; This function is called by:
 23421 ;;		_Word_SetPair
 23422 ;;		_Port_SetPairType
 23423 ;;		_Port_SetPair
 23424 ;; This function uses a non-reentrant model
 23425 ;;
 23426                           
 23427                           	psect	text111
 23428  016526                     __ptext111:
 23429                           	opt stack 0
 23430  016526                     _Byte_SetPair:
 23431                           	opt stack 18
 23432                           
 23433                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 23434                           
 23435                           ;incstack = 0
 23436  016526  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 23437  01652A  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 23438  01652E  0E04               	movlw	4
 23439  016530  0100               	movlb	0	; () banked
 23440  016532  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23441  016534  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 23442  016538  0E02               	movlw	2
 23443  01653A  0100               	movlb	0	; () banked
 23444  01653C  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23445  01653E  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 23446  016542  ECE7  F0A2         	call	_Byte_SetZone	;wreg free
 23447  016546  0012               	return		;funcret
 23448  016548                     __end_of_Byte_SetPair:
 23449                           	opt stack 0
 23450                           tosu	equ	0xFFF
 23451                           tosh	equ	0xFFE
 23452                           tosl	equ	0xFFD
 23453                           pclath	equ	0xFFA
 23454                           tblptru	equ	0xFF8
 23455                           tblptrh	equ	0xFF7
 23456                           tblptrl	equ	0xFF6
 23457                           tablat	equ	0xFF5
 23458                           prodh	equ	0xFF4
 23459                           prodl	equ	0xFF3
 23460                           intcon	equ	0xFF2
 23461                           postinc0	equ	0xFEE
 23462                           wreg	equ	0xFE8
 23463                           indf1	equ	0xFE7
 23464                           postdec1	equ	0xFE5
 23465                           fsr1h	equ	0xFE2
 23466                           fsr1l	equ	0xFE1
 23467                           indf2	equ	0xFDF
 23468                           postinc2	equ	0xFDE
 23469                           postdec2	equ	0xFDD
 23470                           plusw2	equ	0xFDB
 23471                           fsr2h	equ	0xFDA
 23472                           fsr2l	equ	0xFD9
 23473                           status	equ	0xFD8
 23474                           
 23475 ;; *************** function _Port_CheckQuadType *****************
 23476 ;; Defined at:
 23477 ;;		line 126 in file "Library/Port.c"
 23478 ;; Parameters:    Size  Location     Type
 23479 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23480 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23481 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23482 ;;  pQuad           1   49[BANK0 ] enum E6776
 23483 ;;  pDrive          1   50[BANK0 ] enum E6469
 23484 ;; Auto vars:     Size  Location     Type
 23485 ;;  Output          1   53[BANK0 ] enum E6475
 23486 ;;  Pair2           1   52[BANK0 ] enum E6760
 23487 ;;  Pair1           1   51[BANK0 ] enum E6760
 23488 ;; Return value:  Size  Location     Type
 23489 ;;                  1    wreg      enum E6475
 23490 ;; Registers used:
 23491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23492 ;; Tracked objects:
 23493 ;;		On entry : 0/0
 23494 ;;		On exit  : 0/0
 23495 ;;		Unchanged: 0/0
 23496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23498 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23500 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;Total ram usage:        7 bytes
 23502 ;; Hardware stack levels used:    1
 23503 ;; Hardware stack levels required when called:   12
 23504 ;; This function calls:
 23505 ;;		_Port_CheckPairType
 23506 ;; This function is called by:
 23507 ;;		_Port_CheckPortType
 23508 ;;		_Port_SetQuadType
 23509 ;; This function uses a non-reentrant model
 23510 ;;
 23511                           
 23512                           	psect	text112
 23513  015B34                     __ptext112:
 23514                           	opt stack 0
 23515  015B34                     _Port_CheckQuadType:
 23516                           	opt stack 14
 23517                           
 23518                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23519                           
 23520                           ;incstack = 0
 23521  015B34  0E05               	movlw	5
 23522  015B36  0100               	movlb	0	; () banked
 23523  015B38  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23524                           
 23525                           ; BSR set to: 0
 23526                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23527  015B3A  0100               	movlb	0	; () banked
 23528  015B3C  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23529  015B3E  0D02               	mullw	2
 23530  015B40  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23534  015B44  0100               	movlb	0	; () banked
 23535  015B46  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23536  015B48  0D02               	mullw	2
 23537  015B4A  28F3               	incf	prodl,w,c
 23538  015B4C  0100               	movlb	0	; () banked
 23539  015B4E  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23540                           
 23541                           ; BSR set to: 0
 23542                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23543  015B50  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23544  015B54  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23545  015B58  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23546  015B5C  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23547  015B60  EC3D  F0AC         	call	_Port_CheckPairType	;wreg free
 23548  015B64  0100               	movlb	0	; () banked
 23549  015B66  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23550  015B68  0100               	movlb	0	; () banked
 23551  015B6A  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23552  015B6C  A4D8               	btfss	status,2,c
 23553  015B6E  D00C               	goto	l393
 23554                           
 23555                           ; BSR set to: 0
 23556                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23557  015B70  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23558  015B74  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23559  015B78  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23560  015B7C  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23561  015B80  EC3D  F0AC         	call	_Port_CheckPairType	;wreg free
 23562  015B84  0100               	movlb	0	; () banked
 23563  015B86  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23564  015B88                     l393:
 23565                           
 23566                           ; BSR set to: 0
 23567                           ;Port.c: 136: return Output;
 23568                           
 23569                           ; BSR set to: 0
 23570  015B88  0100               	movlb	0	; () banked
 23571  015B8A  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23572  015B8C  0012               	return	
 23573  015B8E                     __end_of_Port_CheckQuadType:
 23574                           	opt stack 0
 23575                           tosu	equ	0xFFF
 23576                           tosh	equ	0xFFE
 23577                           tosl	equ	0xFFD
 23578                           pclath	equ	0xFFA
 23579                           tblptru	equ	0xFF8
 23580                           tblptrh	equ	0xFF7
 23581                           tblptrl	equ	0xFF6
 23582                           tablat	equ	0xFF5
 23583                           prodh	equ	0xFF4
 23584                           prodl	equ	0xFF3
 23585                           intcon	equ	0xFF2
 23586                           postinc0	equ	0xFEE
 23587                           wreg	equ	0xFE8
 23588                           indf1	equ	0xFE7
 23589                           postdec1	equ	0xFE5
 23590                           fsr1h	equ	0xFE2
 23591                           fsr1l	equ	0xFE1
 23592                           indf2	equ	0xFDF
 23593                           postinc2	equ	0xFDE
 23594                           postdec2	equ	0xFDD
 23595                           plusw2	equ	0xFDB
 23596                           fsr2h	equ	0xFDA
 23597                           fsr2l	equ	0xFD9
 23598                           status	equ	0xFD8
 23599                           
 23600 ;; *************** function _Port_CheckPairType *****************
 23601 ;; Defined at:
 23602 ;;		line 112 in file "Library/Port.c"
 23603 ;; Parameters:    Size  Location     Type
 23604 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23605 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23606 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23607 ;;  pPair           1   40[BANK0 ] enum E6760
 23608 ;;  pDrive          1   41[BANK0 ] enum E6469
 23609 ;; Auto vars:     Size  Location     Type
 23610 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23611 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23612 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23613 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23614 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23615 ;;  Output          1   44[BANK0 ] enum E6475
 23616 ;;  Pin2            1   43[BANK0 ] enum E6750
 23617 ;;  Pin1            1   42[BANK0 ] enum E6750
 23618 ;; Return value:  Size  Location     Type
 23619 ;;                  1    wreg      enum E6475
 23620 ;; Registers used:
 23621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23622 ;; Tracked objects:
 23623 ;;		On entry : 0/0
 23624 ;;		On exit  : 0/0
 23625 ;;		Unchanged: 0/0
 23626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23628 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23630 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23631 ;;Total ram usage:        9 bytes
 23632 ;; Hardware stack levels used:    1
 23633 ;; Hardware stack levels required when called:   11
 23634 ;; This function calls:
 23635 ;;		_PortProperty_Valid
 23636 ;; This function is called by:
 23637 ;;		_Port_CheckQuadType
 23638 ;;		_Port_SetPairType
 23639 ;; This function uses a non-reentrant model
 23640 ;;
 23641                           
 23642                           	psect	text113
 23643  01587A                     __ptext113:
 23644                           	opt stack 0
 23645  01587A                     _Port_CheckPairType:
 23646                           	opt stack 14
 23647                           
 23648                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23649                           
 23650                           ; BSR set to: 0
 23651                           ;incstack = 0
 23652  01587A  0E05               	movlw	5
 23653  01587C  0100               	movlb	0	; () banked
 23654  01587E  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23655                           
 23656                           ; BSR set to: 0
 23657                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23658  015880  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23659  015884  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23660  015888  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23661  01588C  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23662                           
 23663                           ; BSR set to: 0
 23664                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23665  015890  0100               	movlb	0	; () banked
 23666  015892  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23667  015894  0D02               	mullw	2
 23668  015896  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23669                           
 23670                           ; BSR set to: 0
 23671                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23672  01589A  0100               	movlb	0	; () banked
 23673  01589C  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23674  01589E  0D02               	mullw	2
 23675  0158A0  28F3               	incf	prodl,w,c
 23676  0158A2  0100               	movlb	0	; () banked
 23677  0158A4  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23678                           
 23679                           ; BSR set to: 0
 23680                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23681  0158A6  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23682  0158AA  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23683  0158AE  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23684  0158B2  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23685  0158B6  EC55  F0A9         	call	_PortProperty_Valid	;wreg free
 23686  0158BA  0100               	movlb	0	; () banked
 23687  0158BC  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23688  0158BE  0100               	movlb	0	; () banked
 23689  0158C0  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23690  0158C2  A4D8               	btfss	status,2,c
 23691  0158C4  D00C               	goto	l389
 23692                           
 23693                           ; BSR set to: 0
 23694                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23695  0158C6  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23696  0158CA  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23697  0158CE  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23698  0158D2  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23699  0158D6  EC55  F0A9         	call	_PortProperty_Valid	;wreg free
 23700  0158DA  0100               	movlb	0	; () banked
 23701  0158DC  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23702  0158DE                     l389:
 23703                           
 23704                           ; BSR set to: 0
 23705                           ;Port.c: 124: return Output;
 23706                           
 23707                           ; BSR set to: 0
 23708  0158DE  0100               	movlb	0	; () banked
 23709  0158E0  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23710  0158E2  0012               	return	
 23711  0158E4                     __end_of_Port_CheckPairType:
 23712                           	opt stack 0
 23713                           tosu	equ	0xFFF
 23714                           tosh	equ	0xFFE
 23715                           tosl	equ	0xFFD
 23716                           pclath	equ	0xFFA
 23717                           tblptru	equ	0xFF8
 23718                           tblptrh	equ	0xFF7
 23719                           tblptrl	equ	0xFF6
 23720                           tablat	equ	0xFF5
 23721                           prodh	equ	0xFF4
 23722                           prodl	equ	0xFF3
 23723                           intcon	equ	0xFF2
 23724                           postinc0	equ	0xFEE
 23725                           wreg	equ	0xFE8
 23726                           indf1	equ	0xFE7
 23727                           postdec1	equ	0xFE5
 23728                           fsr1h	equ	0xFE2
 23729                           fsr1l	equ	0xFE1
 23730                           indf2	equ	0xFDF
 23731                           postinc2	equ	0xFDE
 23732                           postdec2	equ	0xFDD
 23733                           plusw2	equ	0xFDB
 23734                           fsr2h	equ	0xFDA
 23735                           fsr2l	equ	0xFD9
 23736                           status	equ	0xFD8
 23737                           
 23738 ;; *************** function _PortProperty_Valid *****************
 23739 ;; Defined at:
 23740 ;;		line 220 in file "Library/Types.c"
 23741 ;; Parameters:    Size  Location     Type
 23742 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23743 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23744 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23745 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23746 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23747 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23748 ;;  pPin            1   18[BANK0 ] unsigned char 
 23749 ;; Auto vars:     Size  Location     Type
 23750 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23751 ;;  Pair            1   37[BANK0 ] enum E6469
 23752 ;; Return value:  Size  Location     Type
 23753 ;;                  1    wreg      enum E6475
 23754 ;; Registers used:
 23755 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23756 ;; Tracked objects:
 23757 ;;		On entry : 0/0
 23758 ;;		On exit  : 0/0
 23759 ;;		Unchanged: 0/0
 23760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23762 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23764 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23765 ;;Total ram usage:       23 bytes
 23766 ;; Hardware stack levels used:    1
 23767 ;; Hardware stack levels required when called:   10
 23768 ;; This function calls:
 23769 ;;		_Word_GetPair
 23770 ;; This function is called by:
 23771 ;;		_Port_CheckPairType
 23772 ;;		_Port_SetPinType
 23773 ;; This function uses a non-reentrant model
 23774 ;;
 23775                           
 23776                           	psect	text114
 23777  0152AA                     __ptext114:
 23778                           	opt stack 0
 23779  0152AA                     _PortProperty_Valid:
 23780                           	opt stack 17
 23781                           
 23782                           ;Types.c: 222: ePinDrive Pair;
 23783                           ;Types.c: 223: const ePinError Errors[4][4] =
 23784                           ;Types.c: 224: {
 23785                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23786                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23787                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23788                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23789                           ;Types.c: 230: };
 23790                           
 23791                           ; BSR set to: 0
 23792                           ;incstack = 0
 23793  0152AA  0EF5               	movlw	low PortProperty_Valid@F6830
 23794  0152AC  6EF6               	movwf	tblptrl,c
 23795  0152AE                     	if	1	;There is more than 1 active tblptr byte
 23796  0152AE  0EFC               	movlw	high PortProperty_Valid@F6830
 23797  0152B0  6EF7               	movwf	tblptrh,c
 23798  0152B2                     	endif
 23799  0152B2                     	if	1	;There are 3 active tblptr bytes
 23800  0152B2  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23801  0152B4  6EF8               	movwf	tblptru,c
 23802  0152B6                     	endif
 23803  0152B6  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23804  0152BA  0E0F               	movlw	15
 23805  0152BC                     u8820:
 23806  0152BC  0009               	tblrd		*+
 23807  0152BE  CFF5 FFDE          	movff	tablat,postinc2
 23808  0152C2  06E8               	decf	wreg,f,c
 23809  0152C4  E2FB               	bc	u8820
 23810                           
 23811                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23812  0152C6  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23813  0152CA  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23814  0152CE  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23815  0152D2  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 23816  0152D6  0100               	movlb	0	; () banked
 23817  0152D8  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23818                           
 23819                           ; BSR set to: 0
 23820                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23821  0152DA  0E04               	movlw	4
 23822  0152DC  0100               	movlb	0	; () banked
 23823  0152DE  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23824  0152E0  D020               	goto	l819
 23825                           
 23826                           ; BSR set to: 0
 23827  0152E2  0E04               	movlw	4
 23828  0152E4  0100               	movlb	0	; () banked
 23829  0152E6  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23830  0152E8  D01C               	goto	l819
 23831                           
 23832                           ; BSR set to: 0
 23833                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23834  0152EA  0100               	movlb	0	; () banked
 23835  0152EC  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23836  0152EE  0D04               	mullw	4
 23837  0152F0  0ECF               	movlw	low PortProperty_Valid@Errors
 23838  0152F2  0100               	movlb	0	; () banked
 23839  0152F4  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23840  0152F6  0E00               	movlw	high PortProperty_Valid@Errors
 23841  0152F8  0100               	movlb	0	; () banked
 23842  0152FA  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23843  0152FC  50F3               	movf	prodl,w,c
 23844  0152FE  0100               	movlb	0	; () banked
 23845  015300  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23846  015302  50F4               	movf	prodh,w,c
 23847  015304  0100               	movlb	0	; () banked
 23848  015306  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23849  015308  0100               	movlb	0	; () banked
 23850  01530A  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23851  01530C  0D01               	mullw	1
 23852  01530E  50F3               	movf	prodl,w,c
 23853  015310  0100               	movlb	0	; () banked
 23854  015312  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23855  015314  6ED9               	movwf	fsr2l,c
 23856  015316  50F4               	movf	prodh,w,c
 23857  015318  0100               	movlb	0	; () banked
 23858  01531A  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23859  01531C  6EDA               	movwf	fsr2h,c
 23860  01531E  50DF               	movf	indf2,w,c
 23861                           
 23862                           ; BSR set to: 0
 23863  015320  0012               	return	
 23864  015322                     l819:
 23865                           
 23866                           ; BSR set to: 0
 23867                           ;Types.c: 237: return ePinErrorState;
 23868                           
 23869                           ; BSR set to: 0
 23870  015322  0E05               	movlw	5
 23871  015324  0012               	return	
 23872  015326                     __end_of_PortProperty_Valid:
 23873                           	opt stack 0
 23874                           tosu	equ	0xFFF
 23875                           tosh	equ	0xFFE
 23876                           tosl	equ	0xFFD
 23877                           pclath	equ	0xFFA
 23878                           tblptru	equ	0xFF8
 23879                           tblptrh	equ	0xFF7
 23880                           tblptrl	equ	0xFF6
 23881                           tablat	equ	0xFF5
 23882                           prodh	equ	0xFF4
 23883                           prodl	equ	0xFF3
 23884                           intcon	equ	0xFF2
 23885                           postinc0	equ	0xFEE
 23886                           wreg	equ	0xFE8
 23887                           indf1	equ	0xFE7
 23888                           postdec1	equ	0xFE5
 23889                           fsr1h	equ	0xFE2
 23890                           fsr1l	equ	0xFE1
 23891                           indf2	equ	0xFDF
 23892                           postinc2	equ	0xFDE
 23893                           postdec2	equ	0xFDD
 23894                           plusw2	equ	0xFDB
 23895                           fsr2h	equ	0xFDA
 23896                           fsr2l	equ	0xFD9
 23897                           status	equ	0xFD8
 23898                           
 23899 ;; *************** function _Byte_SetQuad *****************
 23900 ;; Defined at:
 23901 ;;		line 101 in file "Library/Types.c"
 23902 ;; Parameters:    Size  Location     Type
 23903 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23904 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23905 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23906 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23907 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23908 ;;		 -> NULL(0), 
 23909 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23910 ;;  pValue          1   14[BANK0 ] unsigned char 
 23911 ;; Auto vars:     Size  Location     Type
 23912 ;;		None
 23913 ;; Return value:  Size  Location     Type
 23914 ;;                  1    wreg      void 
 23915 ;; Registers used:
 23916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23917 ;; Tracked objects:
 23918 ;;		On entry : 0/0
 23919 ;;		On exit  : 0/0
 23920 ;;		Unchanged: 0/0
 23921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23922 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23925 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23926 ;;Total ram usage:        4 bytes
 23927 ;; Hardware stack levels used:    1
 23928 ;; Hardware stack levels required when called:    8
 23929 ;; This function calls:
 23930 ;;		_Byte_SetZone
 23931 ;; This function is called by:
 23932 ;;		_Port_SetQuadType
 23933 ;;		_SPI_Init
 23934 ;;		_SPI_MinSpeed
 23935 ;;		_SPI_MaxSpeed
 23936 ;;		_Port_SetQuad
 23937 ;;		_Word_SetQuad
 23938 ;;		_I2C_Init
 23939 ;; This function uses a non-reentrant model
 23940 ;;
 23941                           
 23942                           	psect	text115
 23943  016548                     __ptext115:
 23944                           	opt stack 0
 23945  016548                     _Byte_SetQuad:
 23946                           	opt stack 19
 23947                           
 23948                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23949                           
 23950                           ; BSR set to: 0
 23951                           ;incstack = 0
 23952  016548  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23953  01654C  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23954  016550  0E02               	movlw	2
 23955  016552  0100               	movlb	0	; () banked
 23956  016554  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23957  016556  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23958  01655A  0E04               	movlw	4
 23959  01655C  0100               	movlb	0	; () banked
 23960  01655E  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23961  016560  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23962  016564  ECE7  F0A2         	call	_Byte_SetZone	;wreg free
 23963  016568  0012               	return		;funcret
 23964  01656A                     __end_of_Byte_SetQuad:
 23965                           	opt stack 0
 23966                           tosu	equ	0xFFF
 23967                           tosh	equ	0xFFE
 23968                           tosl	equ	0xFFD
 23969                           pclath	equ	0xFFA
 23970                           tblptru	equ	0xFF8
 23971                           tblptrh	equ	0xFF7
 23972                           tblptrl	equ	0xFF6
 23973                           tablat	equ	0xFF5
 23974                           prodh	equ	0xFF4
 23975                           prodl	equ	0xFF3
 23976                           intcon	equ	0xFF2
 23977                           postinc0	equ	0xFEE
 23978                           wreg	equ	0xFE8
 23979                           indf1	equ	0xFE7
 23980                           postdec1	equ	0xFE5
 23981                           fsr1h	equ	0xFE2
 23982                           fsr1l	equ	0xFE1
 23983                           indf2	equ	0xFDF
 23984                           postinc2	equ	0xFDE
 23985                           postdec2	equ	0xFDD
 23986                           plusw2	equ	0xFDB
 23987                           fsr2h	equ	0xFDA
 23988                           fsr2l	equ	0xFD9
 23989                           status	equ	0xFD8
 23990                           
 23991 ;; *************** function _Byte_SetZone *****************
 23992 ;; Defined at:
 23993 ;;		line 47 in file "Library/Types.c"
 23994 ;; Parameters:    Size  Location     Type
 23995 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23996 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23997 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23998 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23999 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 24000 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24001 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24002 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24003 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24004 ;;  pMax            1    2[BANK0 ] unsigned char 
 24005 ;;  pChunk          1    3[BANK0 ] unsigned char 
 24006 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 24007 ;;  pValue          1    5[BANK0 ] unsigned char 
 24008 ;; Auto vars:     Size  Location     Type
 24009 ;;  MASK            1   10[BANK0 ] unsigned char 
 24010 ;;  Offset          1    9[BANK0 ] unsigned char 
 24011 ;; Return value:  Size  Location     Type
 24012 ;;                  1    wreg      void 
 24013 ;; Registers used:
 24014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 24015 ;; Tracked objects:
 24016 ;;		On entry : 0/0
 24017 ;;		On exit  : 0/0
 24018 ;;		Unchanged: 0/0
 24019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24020 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24022 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24023 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24024 ;;Total ram usage:       11 bytes
 24025 ;; Hardware stack levels used:    1
 24026 ;; Hardware stack levels required when called:    7
 24027 ;; This function calls:
 24028 ;;		Nothing
 24029 ;; This function is called by:
 24030 ;;		_Byte_SetPair
 24031 ;;		_Byte_SetQuad
 24032 ;;		_Byte_SetTriple
 24033 ;; This function uses a non-reentrant model
 24034 ;;
 24035                           
 24036                           	psect	text116
 24037  0145CE                     __ptext116:
 24038                           	opt stack 0
 24039  0145CE                     _Byte_SetZone:
 24040                           	opt stack 18
 24041                           
 24042                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 24043                           
 24044                           ;incstack = 0
 24045  0145CE  0100               	movlb	0	; () banked
 24046  0145D0  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24047  0145D2  0D01               	mullw	1
 24048  0145D4  0E0F               	movlw	low _MASKS
 24049  0145D6  24F3               	addwf	prodl,w,c
 24050  0145D8  6EF6               	movwf	tblptrl,c
 24051  0145DA  0EFD               	movlw	high _MASKS
 24052  0145DC  20F4               	addwfc	prodh,w,c
 24053  0145DE  6EF7               	movwf	tblptrh,c
 24054  0145E0                     	if	1	;There are 3 active tblptr bytes
 24055  0145E0  6AF8               	clrf	tblptru,c
 24056  0145E2  0E00               	movlw	low (__mediumconst shr (0+16))
 24057  0145E4  22F8               	addwfc	tblptru,f,c
 24058  0145E6                     	endif
 24059  0145E6  0008               	tblrd		*
 24060  0145E8  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 24061                           
 24062                           ; BSR set to: 0
 24063                           ;Types.c: 50: UINT8 Offset = 0;
 24064  0145EC  0E00               	movlw	0
 24065  0145EE  0100               	movlb	0	; () banked
 24066  0145F0  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 24067                           
 24068                           ;Types.c: 52: while (pChunk >= pMax)
 24069  0145F2  D006               	goto	l726
 24070  0145F4                     
 24071                           ; BSR set to: 0
 24072                           ;Types.c: 53: {
 24073                           ;Types.c: 54: pChunk -= pMax;
 24074                           
 24075                           ; BSR set to: 0
 24076  0145F4  0100               	movlb	0	; () banked
 24077  0145F6  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 24078  0145F8  0100               	movlb	0	; () banked
 24079  0145FA  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 24080                           
 24081                           ; BSR set to: 0
 24082                           ;Types.c: 55: Offset += 1;
 24083  0145FC  0100               	movlb	0	; () banked
 24084  0145FE  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 24085  014600                     l726:
 24086                           
 24087                           ; BSR set to: 0
 24088                           
 24089                           ; BSR set to: 0
 24090  014600  0100               	movlb	0	; () banked
 24091  014602  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 24092  014604  0100               	movlb	0	; () banked
 24093  014606  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 24094  014608  B0D8               	btfsc	status,0,c
 24095  01460A  D7F4               	goto	l727
 24096                           
 24097                           ; BSR set to: 0
 24098                           ;Types.c: 56: }
 24099                           ;Types.c: 57: pChunk *= pChunkSize;
 24100                           
 24101                           ; BSR set to: 0
 24102  01460C  0100               	movlb	0	; () banked
 24103  01460E  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24104  014610  0100               	movlb	0	; () banked
 24105  014612  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 24106  014614  50F3               	movf	prodl,w,c
 24107  014616  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 24108                           
 24109                           ; BSR set to: 0
 24110                           ;Types.c: 58: pChunk += Offset;
 24111  014618  0100               	movlb	0	; () banked
 24112  01461A  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 24113  01461C  0100               	movlb	0	; () banked
 24114  01461E  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 24115                           
 24116                           ; BSR set to: 0
 24117                           ;Types.c: 60: pValue &= MASK;
 24118  014620  0100               	movlb	0	; () banked
 24119  014622  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 24120  014624  0100               	movlb	0	; () banked
 24121  014626  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 24122                           
 24123                           ; BSR set to: 0
 24124                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 24125  014628  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24126  01462C  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 24127  014630  0100               	movlb	0	; () banked
 24128  014632  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 24129  014634  D003               	goto	u8874
 24130  014636                     u8875:
 24131  014636  0100               	movlb	0	; () banked
 24132  014638  90D8               	bcf	status,0,c
 24133  01463A  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24134  01463C                     u8874:
 24135  01463C  0100               	movlb	0	; () banked
 24136  01463E  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 24137  014640  D7FA               	goto	u8875
 24138  014642  0100               	movlb	0	; () banked
 24139  014644  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24140  014646  0AFF               	xorlw	255
 24141  014648  0100               	movlb	0	; () banked
 24142  01464A  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 24143  01464C  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24144  014650  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24145  014654  0100               	movlb	0	; () banked
 24146  014656  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 24147  014658  16DF               	andwf	indf2,f,c
 24148                           
 24149                           ; BSR set to: 0
 24150                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 24151  01465A  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24152  01465E  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 24153  014662  0100               	movlb	0	; () banked
 24154  014664  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 24155  014666  D003               	goto	u8884
 24156  014668                     u8885:
 24157  014668  0100               	movlb	0	; () banked
 24158  01466A  90D8               	bcf	status,0,c
 24159  01466C  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24160  01466E                     u8884:
 24161  01466E  0100               	movlb	0	; () banked
 24162  014670  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 24163  014672  D7FA               	goto	u8885
 24164  014674  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24165  014678  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24166  01467C  0100               	movlb	0	; () banked
 24167  01467E  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24168  014680  12DF               	iorwf	indf2,f,c
 24169                           
 24170                           ; BSR set to: 0
 24171  014682  0012               	return		;funcret
 24172  014684                     __end_of_Byte_SetZone:
 24173                           	opt stack 0
 24174                           tosu	equ	0xFFF
 24175                           tosh	equ	0xFFE
 24176                           tosl	equ	0xFFD
 24177                           pclath	equ	0xFFA
 24178                           tblptru	equ	0xFF8
 24179                           tblptrh	equ	0xFF7
 24180                           tblptrl	equ	0xFF6
 24181                           tablat	equ	0xFF5
 24182                           prodh	equ	0xFF4
 24183                           prodl	equ	0xFF3
 24184                           intcon	equ	0xFF2
 24185                           postinc0	equ	0xFEE
 24186                           wreg	equ	0xFE8
 24187                           indf1	equ	0xFE7
 24188                           postdec1	equ	0xFE5
 24189                           fsr1h	equ	0xFE2
 24190                           fsr1l	equ	0xFE1
 24191                           indf2	equ	0xFDF
 24192                           postinc2	equ	0xFDE
 24193                           postdec2	equ	0xFDD
 24194                           plusw2	equ	0xFDB
 24195                           fsr2h	equ	0xFDA
 24196                           fsr2l	equ	0xFD9
 24197                           status	equ	0xFD8
 24198                           
 24199 ;; *************** function _Console_Init *****************
 24200 ;; Defined at:
 24201 ;;		line 157 in file "Library/Console.c"
 24202 ;; Parameters:    Size  Location     Type
 24203 ;;		None
 24204 ;; Auto vars:     Size  Location     Type
 24205 ;;  y               1    3[BANK0 ] unsigned char 
 24206 ;;  x               1    2[BANK0 ] unsigned char 
 24207 ;; Return value:  Size  Location     Type
 24208 ;;                  1    wreg      void 
 24209 ;; Registers used:
 24210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24211 ;; Tracked objects:
 24212 ;;		On entry : 0/0
 24213 ;;		On exit  : 0/0
 24214 ;;		Unchanged: 0/0
 24215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24219 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24220 ;;Total ram usage:        4 bytes
 24221 ;; Hardware stack levels used:    1
 24222 ;; Hardware stack levels required when called:    7
 24223 ;; This function calls:
 24224 ;;		Nothing
 24225 ;; This function is called by:
 24226 ;;		_init
 24227 ;; This function uses a non-reentrant model
 24228 ;;
 24229                           
 24230                           	psect	text117
 24231  015090                     __ptext117:
 24232                           	opt stack 0
 24233  015090                     _Console_Init:
 24234                           	opt stack 22
 24235                           
 24236                           ;Console.c: 160: lBufferX = 0;
 24237                           
 24238                           ; BSR set to: 0
 24239                           ;incstack = 0
 24240  015090  0E00               	movlw	0
 24241  015092  0100               	movlb	0	; () banked
 24242  015094  6F8F               	movwf	_lBufferX& (0+255),b
 24243                           
 24244                           ;Console.c: 161: lBufferY = 0;
 24245  015096  0E00               	movlw	0
 24246  015098  0100               	movlb	0	; () banked
 24247  01509A  6F8E               	movwf	_lBufferY& (0+255),b
 24248                           
 24249                           ;Console.c: 163: UINT8 x, y;
 24250                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24251  01509C  0E00               	movlw	0
 24252  01509E  0100               	movlb	0	; () banked
 24253  0150A0  6FBC               	movwf	Console_Init@x& (0+255),b
 24254  0150A2                     l14507:
 24255                           
 24256                           ; BSR set to: 0
 24257  0150A2  0E13               	movlw	19
 24258  0150A4  0100               	movlb	0	; () banked
 24259  0150A6  65BC               	cpfsgt	Console_Init@x& (0+255),b
 24260  0150A8  D001               	goto	l976
 24261  0150AA  0012               	return	
 24262  0150AC                     l976:
 24263                           
 24264                           ; BSR set to: 0
 24265                           ;Console.c: 165: {
 24266                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24267                           
 24268                           ; BSR set to: 0
 24269  0150AC  0E00               	movlw	0
 24270  0150AE  0100               	movlb	0	; () banked
 24271  0150B0  6FBD               	movwf	Console_Init@y& (0+255),b
 24272  0150B2                     l14513:
 24273                           
 24274                           ; BSR set to: 0
 24275  0150B2  0E0E               	movlw	14
 24276  0150B4  0100               	movlb	0	; () banked
 24277  0150B6  65BD               	cpfsgt	Console_Init@y& (0+255),b
 24278  0150B8  D001               	goto	l978
 24279  0150BA  D02C               	goto	u11340
 24280  0150BC                     l978:
 24281                           
 24282                           ; BSR set to: 0
 24283                           ;Console.c: 167: {
 24284                           ;Console.c: 168: lBuffer[y][x] = '\0';
 24285                           
 24286                           ; BSR set to: 0
 24287  0150BC  0100               	movlb	0	; () banked
 24288  0150BE  51BD               	movf	Console_Init@y& (0+255),w,b
 24289  0150C0  0D14               	mullw	20
 24290  0150C2  0EAC               	movlw	low _lBuffer
 24291  0150C4  0100               	movlb	0	; () banked
 24292  0150C6  6FBA               	movwf	??_Console_Init& (0+255),b
 24293  0150C8  0E04               	movlw	high _lBuffer
 24294  0150CA  0100               	movlb	0	; () banked
 24295  0150CC  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 24296  0150CE  50F3               	movf	prodl,w,c
 24297  0150D0  0100               	movlb	0	; () banked
 24298  0150D2  27BA               	addwf	??_Console_Init& (0+255),f,b
 24299  0150D4  50F4               	movf	prodh,w,c
 24300  0150D6  0100               	movlb	0	; () banked
 24301  0150D8  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 24302  0150DA  0100               	movlb	0	; () banked
 24303  0150DC  51BC               	movf	Console_Init@x& (0+255),w,b
 24304  0150DE  0D01               	mullw	1
 24305  0150E0  50F3               	movf	prodl,w,c
 24306  0150E2  0100               	movlb	0	; () banked
 24307  0150E4  25BA               	addwf	??_Console_Init& (0+255),w,b
 24308  0150E6  6ED9               	movwf	fsr2l,c
 24309  0150E8  50F4               	movf	prodh,w,c
 24310  0150EA  0100               	movlb	0	; () banked
 24311  0150EC  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 24312  0150EE  6EDA               	movwf	fsr2h,c
 24313  0150F0  0E00               	movlw	0
 24314  0150F2  6EDF               	movwf	indf2,c
 24315                           
 24316                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 24317  0150F4  0100               	movlb	0	; () banked
 24318  0150F6  51BD               	movf	Console_Init@y& (0+255),w,b
 24319  0150F8  0D02               	mullw	2
 24320  0150FA  0E00               	movlw	low _lCBuffer
 24321  0150FC  24F3               	addwf	prodl,w,c
 24322  0150FE  6ED9               	movwf	fsr2l,c
 24323  015100  0E03               	movlw	high _lCBuffer
 24324  015102  20F4               	addwfc	prodh,w,c
 24325  015104  6EDA               	movwf	fsr2h,c
 24326  015106  0EFF               	movlw	255
 24327  015108  6EDE               	movwf	postinc2,c
 24328  01510A  0EFF               	movlw	255
 24329  01510C  6EDD               	movwf	postdec2,c
 24330                           
 24331                           ; BSR set to: 0
 24332  01510E  0100               	movlb	0	; () banked
 24333  015110  2BBD               	incf	Console_Init@y& (0+255),f,b
 24334  015112  D7CF               	goto	l14513
 24335  015114                     u11340:
 24336                           
 24337                           ; BSR set to: 0
 24338                           
 24339                           ; BSR set to: 0
 24340  015114  0100               	movlb	0	; () banked
 24341  015116  2BBC               	incf	Console_Init@x& (0+255),f,b
 24342  015118  D7C4               	goto	l14507
 24343  01511A                     __end_of_Console_Init:
 24344                           	opt stack 0
 24345                           tosu	equ	0xFFF
 24346                           tosh	equ	0xFFE
 24347                           tosl	equ	0xFFD
 24348                           pclath	equ	0xFFA
 24349                           tblptru	equ	0xFF8
 24350                           tblptrh	equ	0xFF7
 24351                           tblptrl	equ	0xFF6
 24352                           tablat	equ	0xFF5
 24353                           prodh	equ	0xFF4
 24354                           prodl	equ	0xFF3
 24355                           intcon	equ	0xFF2
 24356                           postinc0	equ	0xFEE
 24357                           wreg	equ	0xFE8
 24358                           indf1	equ	0xFE7
 24359                           postdec1	equ	0xFE5
 24360                           fsr1h	equ	0xFE2
 24361                           fsr1l	equ	0xFE1
 24362                           indf2	equ	0xFDF
 24363                           postinc2	equ	0xFDE
 24364                           postdec2	equ	0xFDD
 24365                           plusw2	equ	0xFDB
 24366                           fsr2h	equ	0xFDA
 24367                           fsr2l	equ	0xFD9
 24368                           status	equ	0xFD8
 24369                           
 24370 ;; *************** function _ADC_Start *****************
 24371 ;; Defined at:
 24372 ;;		line 114 in file "Library/ADC.c"
 24373 ;; Parameters:    Size  Location     Type
 24374 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 24375 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24376 ;;		 -> NULL(0), 
 24377 ;; Auto vars:     Size  Location     Type
 24378 ;;		None
 24379 ;; Return value:  Size  Location     Type
 24380 ;;                  1    wreg      void 
 24381 ;; Registers used:
 24382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24383 ;; Tracked objects:
 24384 ;;		On entry : 0/0
 24385 ;;		On exit  : 0/0
 24386 ;;		Unchanged: 0/0
 24387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24388 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24392 ;;Total ram usage:        4 bytes
 24393 ;; Hardware stack levels used:    1
 24394 ;; Hardware stack levels required when called:    8
 24395 ;; This function calls:
 24396 ;;		_ADC_Off
 24397 ;;		_ADC_On
 24398 ;;		_ADC_SetChannel
 24399 ;; This function is called by:
 24400 ;;		_init
 24401 ;;		_findClosestWall
 24402 ;;		_measureAndDisplayDistance
 24403 ;;		_mode1
 24404 ;;		_FunctADC
 24405 ;; This function uses a non-reentrant model
 24406 ;;
 24407                           
 24408                           	psect	text118
 24409  0151A4                     __ptext118:
 24410                           	opt stack 0
 24411  0151A4                     _ADC_Start:
 24412                           	opt stack 20
 24413                           
 24414                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;incstack = 0
 24418  0151A4  B2C2               	btfsc	4034,1,c	;volatile
 24419  0151A6  0012               	return	
 24420  0151A8                     
 24421                           ;ADC.c: 128: {
 24422                           ;ADC.c: 129: ADC_Off();
 24423                           
 24424                           ;ADC.c: 127: for(;;)
 24425  0151A8  EC5D  F0B4         	call	_ADC_Off	;wreg free
 24426                           
 24427                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24428  0151AC  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 24429  0151B0  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24430  0151B4  50DF               	movf	indf2,w,c
 24431  0151B6  EC59  F0B3         	call	_ADC_SetChannel
 24432                           
 24433                           ;ADC.c: 131: ADC_On();
 24434  0151BA  EC6B  F0B4         	call	_ADC_On	;wreg free
 24435                           
 24436                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24437  0151BE  82C2               	bsf	4034,1,c	;volatile
 24438  0151C0  B2C2               	btfsc	4034,1,c	;volatile
 24439  0151C2  D7FE               	goto	l1280
 24440                           
 24441                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24442  0151C4  50C3               	movf	4035,w,c	;volatile
 24443  0151C6  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 24444  0151CA  0100               	movlb	0	; () banked
 24445  0151CC  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 24446  0151CE  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 24447  0151D2  0100               	movlb	0	; () banked
 24448  0151D4  6BBE               	clrf	??_ADC_Start& (0+255),b
 24449  0151D6  0100               	movlb	0	; () banked
 24450  0151D8  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 24451  0151DA  0E00               	movlw	0
 24452  0151DC  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24453  0151DE  0100               	movlb	0	; () banked
 24454  0151E0  EE20 F001          	lfsr	2,1
 24455  0151E4  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24456  0151E6  26D9               	addwf	fsr2l,f,c
 24457  0151E8  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24458  0151EA  22DA               	addwfc	fsr2h,f,c
 24459  0151EC  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 24460  0151F0  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 24461                           
 24462                           ;ADC.c: 141: if (pInput->mNext == 0)
 24463  0151F4  0100               	movlb	0	; () banked
 24464  0151F6  EE20 F003          	lfsr	2,3
 24465  0151FA  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24466  0151FC  26D9               	addwf	fsr2l,f,c
 24467  0151FE  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24468  015200  22DA               	addwfc	fsr2h,f,c
 24469  015202  50DE               	movf	postinc2,w,c
 24470  015204  10DE               	iorwf	postinc2,w,c
 24471  015206  B4D8               	btfsc	status,2,c
 24472  015208  D00C               	goto	l1283
 24473                           
 24474                           ; BSR set to: 0
 24475                           ;ADC.c: 145: pInput = pInput->mNext;
 24476                           
 24477                           ; BSR set to: 0
 24478                           
 24479                           ; BSR set to: 0
 24480                           ;ADC.c: 142: break;
 24481  01520A  0100               	movlb	0	; () banked
 24482  01520C  EE20 F003          	lfsr	2,3
 24483  015210  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24484  015212  26D9               	addwf	fsr2l,f,c
 24485  015214  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24486  015216  22DA               	addwfc	fsr2h,f,c
 24487  015218  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24488  01521C  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24489                           
 24490                           ;ADC.c: 146: }
 24491  015220  D7C3               	goto	l1276
 24492  015222                     l1283:
 24493                           
 24494                           ; BSR set to: 0
 24495                           ;ADC.c: 147: ADC_Off();
 24496                           
 24497                           ; BSR set to: 0
 24498  015222  EC5D  F0B4         	call	_ADC_Off	;wreg free
 24499  015226  0012               	return		;funcret
 24500  015228                     __end_of_ADC_Start:
 24501                           	opt stack 0
 24502                           tosu	equ	0xFFF
 24503                           tosh	equ	0xFFE
 24504                           tosl	equ	0xFFD
 24505                           pclath	equ	0xFFA
 24506                           tblptru	equ	0xFF8
 24507                           tblptrh	equ	0xFF7
 24508                           tblptrl	equ	0xFF6
 24509                           tablat	equ	0xFF5
 24510                           prodh	equ	0xFF4
 24511                           prodl	equ	0xFF3
 24512                           intcon	equ	0xFF2
 24513                           postinc0	equ	0xFEE
 24514                           wreg	equ	0xFE8
 24515                           indf1	equ	0xFE7
 24516                           postdec1	equ	0xFE5
 24517                           fsr1h	equ	0xFE2
 24518                           fsr1l	equ	0xFE1
 24519                           indf2	equ	0xFDF
 24520                           postinc2	equ	0xFDE
 24521                           postdec2	equ	0xFDD
 24522                           plusw2	equ	0xFDB
 24523                           fsr2h	equ	0xFDA
 24524                           fsr2l	equ	0xFD9
 24525                           status	equ	0xFD8
 24526                           
 24527 ;; *************** function _ADC_Init *****************
 24528 ;; Defined at:
 24529 ;;		line 19 in file "Library/ADC.c"
 24530 ;; Parameters:    Size  Location     Type
 24531 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24532 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24533 ;;  pChannel        1    6[BANK0 ] enum E6742
 24534 ;; Auto vars:     Size  Location     Type
 24535 ;;		None
 24536 ;; Return value:  Size  Location     Type
 24537 ;;                  1    wreg      void 
 24538 ;; Registers used:
 24539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24540 ;; Tracked objects:
 24541 ;;		On entry : 0/0
 24542 ;;		On exit  : 0/0
 24543 ;;		Unchanged: 0/0
 24544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24545 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24549 ;;Total ram usage:        3 bytes
 24550 ;; Hardware stack levels used:    1
 24551 ;; Hardware stack levels required when called:    9
 24552 ;; This function calls:
 24553 ;;		_ADC_Calibrate
 24554 ;;		_ADC_ClockDivision
 24555 ;;		_ADC_ConversionTime
 24556 ;;		_ADC_SetChannel
 24557 ;;		_ADC_SetupIO
 24558 ;; This function is called by:
 24559 ;;		_init
 24560 ;;		_FunctInitADC
 24561 ;; This function uses a non-reentrant model
 24562 ;;
 24563                           
 24564                           	psect	text119
 24565  015326                     __ptext119:
 24566                           	opt stack 0
 24567  015326                     _ADC_Init:
 24568                           	opt stack 20
 24569                           
 24570                           ;ADC.c: 21: if(pInput==(void*)0)
 24571                           
 24572                           ;incstack = 0
 24573  015326  0100               	movlb	0	; () banked
 24574  015328  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24575  01532A  0100               	movlb	0	; () banked
 24576  01532C  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24577  01532E  B4D8               	btfsc	status,2,c
 24578  015330  0012               	return	
 24579                           
 24580                           ; BSR set to: 0
 24581                           ;ADC.c: 25: lCurrent = pInput;
 24582                           
 24583                           ; BSR set to: 0
 24584                           
 24585                           ; BSR set to: 0
 24586                           ;ADC.c: 22: return;
 24587  015332  C0BE  F081         	movff	ADC_Init@pInput,_lCurrent
 24588  015336  C0BF  F082         	movff	ADC_Init@pInput+1,_lCurrent+1
 24589                           
 24590                           ; BSR set to: 0
 24591                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24592  01533A  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24593  01533E  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24594  015342  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24595                           
 24596                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24597  015346  0100               	movlb	0	; () banked
 24598  015348  EE20 F003          	lfsr	2,3
 24599  01534C  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24600  01534E  26D9               	addwf	fsr2l,f,c
 24601  015350  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24602  015352  22DA               	addwfc	fsr2h,f,c
 24603  015354  0E00               	movlw	0
 24604  015356  6EDE               	movwf	postinc2,c
 24605  015358  0E00               	movlw	0
 24606  01535A  6EDD               	movwf	postdec2,c
 24607                           
 24608                           ;ADC.c: 29: pInput->mValue = 0;
 24609  01535C  0100               	movlb	0	; () banked
 24610  01535E  EE20 F001          	lfsr	2,1
 24611  015362  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24612  015364  26D9               	addwf	fsr2l,f,c
 24613  015366  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24614  015368  22DA               	addwfc	fsr2h,f,c
 24615  01536A  0E00               	movlw	0
 24616  01536C  6EDE               	movwf	postinc2,c
 24617  01536E  0E00               	movlw	0
 24618  015370  6EDD               	movwf	postdec2,c
 24619                           
 24620                           ; BSR set to: 0
 24621                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24622  015372  0100               	movlb	0	; () banked
 24623  015374  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24624  015376  EC59  F0B3         	call	_ADC_SetChannel
 24625                           
 24626                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24627  01537A  9EC2               	bcf	4034,7,c	;volatile
 24628                           
 24629                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24630  01537C  9CC2               	bcf	4034,6,c	;volatile
 24631                           
 24632                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24633  01537E  8EC1               	bsf	4033,7,c	;volatile
 24634                           
 24635                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24636  015380  8CC1               	bsf	4033,6,c	;volatile
 24637                           
 24638                           ;ADC.c: 43: ADC_ConversionTime(12);
 24639  015382  0E0C               	movlw	12
 24640  015384  EC2C  F0AF         	call	_ADC_ConversionTime
 24641                           
 24642                           ;ADC.c: 47: ADC_ClockDivision(16);
 24643  015388  0E10               	movlw	16
 24644  01538A  EC8D  F0A8         	call	_ADC_ClockDivision
 24645                           
 24646                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24647  01538E  0100               	movlb	0	; () banked
 24648  015390  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24649  015392  ECA2  F0B1         	call	_ADC_SetupIO
 24650                           
 24651                           ;ADC.c: 58: ADC_Initialised = 1;
 24652  015396  0E01               	movlw	1
 24653  015398  6E3C               	movwf	_ADC_Initialised,c
 24654                           
 24655                           ;ADC.c: 61: ADC_Calibrate();
 24656  01539A  ECDE  F0B3         	call	_ADC_Calibrate	;wreg free
 24657  01539E  0012               	return		;funcret
 24658  0153A0                     __end_of_ADC_Init:
 24659                           	opt stack 0
 24660                           tosu	equ	0xFFF
 24661                           tosh	equ	0xFFE
 24662                           tosl	equ	0xFFD
 24663                           pclath	equ	0xFFA
 24664                           tblptru	equ	0xFF8
 24665                           tblptrh	equ	0xFF7
 24666                           tblptrl	equ	0xFF6
 24667                           tablat	equ	0xFF5
 24668                           prodh	equ	0xFF4
 24669                           prodl	equ	0xFF3
 24670                           intcon	equ	0xFF2
 24671                           postinc0	equ	0xFEE
 24672                           wreg	equ	0xFE8
 24673                           indf1	equ	0xFE7
 24674                           postdec1	equ	0xFE5
 24675                           fsr1h	equ	0xFE2
 24676                           fsr1l	equ	0xFE1
 24677                           indf2	equ	0xFDF
 24678                           postinc2	equ	0xFDE
 24679                           postdec2	equ	0xFDD
 24680                           plusw2	equ	0xFDB
 24681                           fsr2h	equ	0xFDA
 24682                           fsr2l	equ	0xFD9
 24683                           status	equ	0xFD8
 24684                           
 24685 ;; *************** function _ADC_SetupIO *****************
 24686 ;; Defined at:
 24687 ;;		line 150 in file "Library/ADC.c"
 24688 ;; Parameters:    Size  Location     Type
 24689 ;;  pChannel        1    wreg     enum E6742
 24690 ;; Auto vars:     Size  Location     Type
 24691 ;;  pChannel        1    2[BANK0 ] enum E6742
 24692 ;;  MASK            1    3[BANK0 ] unsigned char 
 24693 ;; Return value:  Size  Location     Type
 24694 ;;                  1    wreg      void 
 24695 ;; Registers used:
 24696 ;;		wreg, status,2, status,0
 24697 ;; Tracked objects:
 24698 ;;		On entry : 0/0
 24699 ;;		On exit  : 0/0
 24700 ;;		Unchanged: 0/0
 24701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24704 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24705 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24706 ;;Total ram usage:        4 bytes
 24707 ;; Hardware stack levels used:    1
 24708 ;; Hardware stack levels required when called:    7
 24709 ;; This function calls:
 24710 ;;		Nothing
 24711 ;; This function is called by:
 24712 ;;		_ADC_Init
 24713 ;; This function uses a non-reentrant model
 24714 ;;
 24715                           
 24716                           	psect	text120
 24717  016344                     __ptext120:
 24718                           	opt stack 0
 24719  016344                     _ADC_SetupIO:
 24720                           	opt stack 21
 24721                           
 24722                           ;incstack = 0
 24723                           ;ADC_SetupIO@pChannel stored from wreg
 24724  016344  0100               	movlb	0	; () banked
 24725  016346  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24726                           
 24727                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24728  016348  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24729  01634C  0E01               	movlw	1
 24730  01634E  0100               	movlb	0	; () banked
 24731  016350  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24732  016352  0100               	movlb	0	; () banked
 24733  016354  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24734  016356  D003               	goto	u11064
 24735  016358                     u11065:
 24736  016358  0100               	movlb	0	; () banked
 24737  01635A  90D8               	bcf	status,0,c
 24738  01635C  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24739  01635E                     u11064:
 24740  01635E  0100               	movlb	0	; () banked
 24741  016360  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24742  016362  D7FA               	goto	u11065
 24743  016364  0100               	movlb	0	; () banked
 24744  016366  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24745  016368  0AFF               	xorlw	255
 24746  01636A  0100               	movlb	0	; () banked
 24747  01636C  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24748                           
 24749                           ;ADC.c: 153: ANCON0 &= MASK;
 24750  01636E  0100               	movlb	0	; () banked
 24751  016370  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24752  016372  16C1               	andwf	4033,f,c	;volatile
 24753                           
 24754                           ; BSR set to: 0
 24755  016374  0012               	return		;funcret
 24756  016376                     __end_of_ADC_SetupIO:
 24757                           	opt stack 0
 24758                           tosu	equ	0xFFF
 24759                           tosh	equ	0xFFE
 24760                           tosl	equ	0xFFD
 24761                           pclath	equ	0xFFA
 24762                           tblptru	equ	0xFF8
 24763                           tblptrh	equ	0xFF7
 24764                           tblptrl	equ	0xFF6
 24765                           tablat	equ	0xFF5
 24766                           prodh	equ	0xFF4
 24767                           prodl	equ	0xFF3
 24768                           intcon	equ	0xFF2
 24769                           postinc0	equ	0xFEE
 24770                           wreg	equ	0xFE8
 24771                           indf1	equ	0xFE7
 24772                           postdec1	equ	0xFE5
 24773                           fsr1h	equ	0xFE2
 24774                           fsr1l	equ	0xFE1
 24775                           indf2	equ	0xFDF
 24776                           postinc2	equ	0xFDE
 24777                           postdec2	equ	0xFDD
 24778                           plusw2	equ	0xFDB
 24779                           fsr2h	equ	0xFDA
 24780                           fsr2l	equ	0xFD9
 24781                           status	equ	0xFD8
 24782                           
 24783 ;; *************** function _ADC_SetChannel *****************
 24784 ;; Defined at:
 24785 ;;		line 155 in file "Library/ADC.c"
 24786 ;; Parameters:    Size  Location     Type
 24787 ;;  pChannel        1    wreg     enum E6742
 24788 ;; Auto vars:     Size  Location     Type
 24789 ;;  pChannel        1    1[BANK0 ] enum E6742
 24790 ;; Return value:  Size  Location     Type
 24791 ;;                  1    wreg      void 
 24792 ;; Registers used:
 24793 ;;		wreg, status,2, status,0
 24794 ;; Tracked objects:
 24795 ;;		On entry : 0/0
 24796 ;;		On exit  : 0/0
 24797 ;;		Unchanged: 0/0
 24798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24803 ;;Total ram usage:        2 bytes
 24804 ;; Hardware stack levels used:    1
 24805 ;; Hardware stack levels required when called:    7
 24806 ;; This function calls:
 24807 ;;		Nothing
 24808 ;; This function is called by:
 24809 ;;		_ADC_Init
 24810 ;;		_ADC_Start
 24811 ;;		_ADC_ISR
 24812 ;;		_ADC_Sample
 24813 ;; This function uses a non-reentrant model
 24814 ;;
 24815                           
 24816                           	psect	text121
 24817  0166B2                     __ptext121:
 24818                           	opt stack 0
 24819  0166B2                     _ADC_SetChannel:
 24820                           	opt stack 20
 24821                           
 24822                           ; BSR set to: 0
 24823                           ;incstack = 0
 24824                           ;ADC_SetChannel@pChannel stored from wreg
 24825  0166B2  0100               	movlb	0	; () banked
 24826  0166B4  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24827                           
 24828                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24829  0166B6  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24830  0166BA  0100               	movlb	0	; () banked
 24831  0166BC  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24832  0166BE  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24833  0166C0  50C2               	movf	4034,w,c	;volatile
 24834  0166C2  0100               	movlb	0	; () banked
 24835  0166C4  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24836  0166C6  0BC3               	andlw	-61
 24837  0166C8  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24838  0166CA  6EC2               	movwf	4034,c	;volatile
 24839                           
 24840                           ; BSR set to: 0
 24841  0166CC  0012               	return		;funcret
 24842  0166CE                     __end_of_ADC_SetChannel:
 24843                           	opt stack 0
 24844                           tosu	equ	0xFFF
 24845                           tosh	equ	0xFFE
 24846                           tosl	equ	0xFFD
 24847                           pclath	equ	0xFFA
 24848                           tblptru	equ	0xFF8
 24849                           tblptrh	equ	0xFF7
 24850                           tblptrl	equ	0xFF6
 24851                           tablat	equ	0xFF5
 24852                           prodh	equ	0xFF4
 24853                           prodl	equ	0xFF3
 24854                           intcon	equ	0xFF2
 24855                           postinc0	equ	0xFEE
 24856                           wreg	equ	0xFE8
 24857                           indf1	equ	0xFE7
 24858                           postdec1	equ	0xFE5
 24859                           fsr1h	equ	0xFE2
 24860                           fsr1l	equ	0xFE1
 24861                           indf2	equ	0xFDF
 24862                           postinc2	equ	0xFDE
 24863                           postdec2	equ	0xFDD
 24864                           plusw2	equ	0xFDB
 24865                           fsr2h	equ	0xFDA
 24866                           fsr2l	equ	0xFD9
 24867                           status	equ	0xFD8
 24868                           
 24869 ;; *************** function _ADC_ConversionTime *****************
 24870 ;; Defined at:
 24871 ;;		line 199 in file "Library/ADC.c"
 24872 ;; Parameters:    Size  Location     Type
 24873 ;;  pCount          1    wreg     unsigned char 
 24874 ;; Auto vars:     Size  Location     Type
 24875 ;;  pCount          1    1[BANK0 ] unsigned char 
 24876 ;; Return value:  Size  Location     Type
 24877 ;;                  1    wreg      void 
 24878 ;; Registers used:
 24879 ;;		wreg, status,2, status,0
 24880 ;; Tracked objects:
 24881 ;;		On entry : 0/0
 24882 ;;		On exit  : 0/0
 24883 ;;		Unchanged: 0/0
 24884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24889 ;;Total ram usage:        2 bytes
 24890 ;; Hardware stack levels used:    1
 24891 ;; Hardware stack levels required when called:    7
 24892 ;; This function calls:
 24893 ;;		Nothing
 24894 ;; This function is called by:
 24895 ;;		_ADC_Init
 24896 ;; This function uses a non-reentrant model
 24897 ;;
 24898                           
 24899                           	psect	text122
 24900  015E58                     __ptext122:
 24901                           	opt stack 0
 24902  015E58                     _ADC_ConversionTime:
 24903                           	opt stack 21
 24904                           
 24905                           ; BSR set to: 0
 24906                           ;incstack = 0
 24907                           ;ADC_ConversionTime@pCount stored from wreg
 24908  015E58  0100               	movlb	0	; () banked
 24909  015E5A  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24910                           
 24911                           ;ADC.c: 201: if (pCount == 10)
 24912  015E5C  0E0A               	movlw	10
 24913  015E5E  0100               	movlb	0	; () banked
 24914  015E60  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24915  015E62  B4D8               	btfsc	status,2,c
 24916  015E64  D00A               	goto	u11030
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;ADC.c: 203: else if (pCount == 14)
 24920                           
 24921                           ; BSR set to: 0
 24922                           
 24923                           ; BSR set to: 0
 24924                           ;ADC.c: 202: pCount -= 2;
 24925  015E66  0E0E               	movlw	14
 24926  015E68  0100               	movlb	0	; () banked
 24927  015E6A  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24928  015E6C  B4D8               	btfsc	status,2,c
 24929  015E6E  D005               	goto	u11030
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;ADC.c: 205: else if (pCount == 18)
 24933                           
 24934                           ; BSR set to: 0
 24935                           
 24936                           ; BSR set to: 0
 24937                           ;ADC.c: 204: pCount -= 2;
 24938  015E70  0E12               	movlw	18
 24939  015E72  0100               	movlb	0	; () banked
 24940  015E74  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24941  015E76  A4D8               	btfss	status,2,c
 24942  015E78  D003               	goto	l1313
 24943  015E7A                     u11030:
 24944                           
 24945                           ; BSR set to: 0
 24946                           ;ADC.c: 206: pCount -= 2;
 24947  015E7A  0E02               	movlw	2
 24948  015E7C  0100               	movlb	0	; () banked
 24949  015E7E  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24950  015E80                     l1313:
 24951                           
 24952                           ; BSR set to: 0
 24953                           ;ADC.c: 208: pCount <<= 1;
 24954                           
 24955                           ; BSR set to: 0
 24956                           
 24957                           ; BSR set to: 0
 24958  015E80  0100               	movlb	0	; () banked
 24959  015E82  90D8               	bcf	status,0,c
 24960  015E84  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24961                           
 24962                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24963  015E86  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24964  015E8A  0100               	movlb	0	; () banked
 24965  015E8C  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24966  015E8E  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24967  015E90  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24968  015E92  50C1               	movf	4033,w,c	;volatile
 24969  015E94  0100               	movlb	0	; () banked
 24970  015E96  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24971  015E98  0BC7               	andlw	-57
 24972  015E9A  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24973  015E9C  6EC1               	movwf	4033,c	;volatile
 24974                           
 24975                           ; BSR set to: 0
 24976  015E9E  0012               	return		;funcret
 24977  015EA0                     __end_of_ADC_ConversionTime:
 24978                           	opt stack 0
 24979                           tosu	equ	0xFFF
 24980                           tosh	equ	0xFFE
 24981                           tosl	equ	0xFFD
 24982                           pclath	equ	0xFFA
 24983                           tblptru	equ	0xFF8
 24984                           tblptrh	equ	0xFF7
 24985                           tblptrl	equ	0xFF6
 24986                           tablat	equ	0xFF5
 24987                           prodh	equ	0xFF4
 24988                           prodl	equ	0xFF3
 24989                           intcon	equ	0xFF2
 24990                           postinc0	equ	0xFEE
 24991                           wreg	equ	0xFE8
 24992                           indf1	equ	0xFE7
 24993                           postdec1	equ	0xFE5
 24994                           fsr1h	equ	0xFE2
 24995                           fsr1l	equ	0xFE1
 24996                           indf2	equ	0xFDF
 24997                           postinc2	equ	0xFDE
 24998                           postdec2	equ	0xFDD
 24999                           plusw2	equ	0xFDB
 25000                           fsr2h	equ	0xFDA
 25001                           fsr2l	equ	0xFD9
 25002                           status	equ	0xFD8
 25003                           
 25004 ;; *************** function _ADC_ClockDivision *****************
 25005 ;; Defined at:
 25006 ;;		line 159 in file "Library/ADC.c"
 25007 ;; Parameters:    Size  Location     Type
 25008 ;;  pDivide         1    wreg     unsigned char 
 25009 ;; Auto vars:     Size  Location     Type
 25010 ;;  pDivide         1    0[BANK0 ] unsigned char 
 25011 ;;  unfound         1    2[BANK0 ] unsigned char 
 25012 ;;  reg             1    1[BANK0 ] unsigned char 
 25013 ;; Return value:  Size  Location     Type
 25014 ;;                  1    wreg      void 
 25015 ;; Registers used:
 25016 ;;		wreg, status,2, status,0
 25017 ;; Tracked objects:
 25018 ;;		On entry : 0/0
 25019 ;;		On exit  : 0/0
 25020 ;;		Unchanged: 0/0
 25021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25023 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25026 ;;Total ram usage:        3 bytes
 25027 ;; Hardware stack levels used:    1
 25028 ;; Hardware stack levels required when called:    7
 25029 ;; This function calls:
 25030 ;;		Nothing
 25031 ;; This function is called by:
 25032 ;;		_ADC_Init
 25033 ;; This function uses a non-reentrant model
 25034 ;;
 25035                           
 25036                           	psect	text123
 25037  01511A                     __ptext123:
 25038                           	opt stack 0
 25039  01511A                     _ADC_ClockDivision:
 25040                           	opt stack 21
 25041                           
 25042                           ; BSR set to: 0
 25043                           ;incstack = 0
 25044                           ;ADC_ClockDivision@pDivide stored from wreg
 25045  01511A  0100               	movlb	0	; () banked
 25046  01511C  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25047                           
 25048                           ;ADC.c: 161: UINT8 reg = 0;
 25049  01511E  0E00               	movlw	0
 25050  015120  0100               	movlb	0	; () banked
 25051  015122  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 25052                           
 25053                           ;ADC.c: 162: bool unfound = 1;
 25054  015124  0E01               	movlw	1
 25055  015126  D002               	goto	L15
 25056  015128                     
 25057                           ; BSR set to: 0
 25058                           ;ADC.c: 167: reg = 0;
 25059                           
 25060                           ; BSR set to: 0
 25061  015128  0E00               	movlw	0
 25062  01512A  D00C               	goto	L20
 25063  01512C                     L15:
 25064  01512C  0100               	movlb	0	; () banked
 25065  01512E  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 25066                           
 25067                           ;ADC.c: 169: break;
 25068  015130  D02D               	goto	l1296
 25069  015132                     
 25070                           ; BSR set to: 0
 25071                           ;ADC.c: 171: reg = 0b100;
 25072                           
 25073                           ; BSR set to: 0
 25074  015132  0E04               	movlw	4
 25075  015134  D007               	goto	L20
 25076  015136                     
 25077                           ; BSR set to: 0
 25078                           ;ADC.c: 175: reg = 0b001;
 25079                           
 25080                           ; BSR set to: 0
 25081  015136  0E01               	movlw	1
 25082  015138  D005               	goto	L20
 25083  01513A                     
 25084                           ; BSR set to: 0
 25085                           ;ADC.c: 179: reg = 0b101;
 25086                           
 25087                           ; BSR set to: 0
 25088  01513A  0E05               	movlw	5
 25089  01513C  D003               	goto	L20
 25090  01513E                     
 25091                           ; BSR set to: 0
 25092                           ;ADC.c: 183: reg = 0b010;
 25093                           
 25094                           ; BSR set to: 0
 25095  01513E  0E02               	movlw	2
 25096  015140  D001               	goto	L20
 25097  015142                     
 25098                           ; BSR set to: 0
 25099                           ;ADC.c: 187: reg = 0b110;
 25100                           
 25101                           ; BSR set to: 0
 25102  015142  0E06               	movlw	6
 25103  015144                     L20:
 25104  015144  0100               	movlb	0	; () banked
 25105  015146  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 25106                           
 25107                           ;ADC.c: 188: unfound = 0;
 25108  015148  0E00               	movlw	0
 25109  01514A  D7F0               	goto	L15
 25110  01514C                     
 25111                           ; BSR set to: 0
 25112                           ;ADC.c: 191: if (pDivide > 2)
 25113                           
 25114                           ; BSR set to: 0
 25115  01514C  0E02               	movlw	2
 25116  01514E  0100               	movlb	0	; () banked
 25117  015150  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 25118  015152  D003               	goto	l1303
 25119                           
 25120                           ; BSR set to: 0
 25121                           ;ADC.c: 192: pDivide--;
 25122  015154  0100               	movlb	0	; () banked
 25123  015156  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 25124  015158  D019               	goto	l1296
 25125  01515A                     l1303:
 25126                           
 25127                           ; BSR set to: 0
 25128                           ;ADC.c: 193: else
 25129                           ;ADC.c: 194: pDivide = 2;
 25130                           
 25131                           ; BSR set to: 0
 25132  01515A  0E02               	movlw	2
 25133  01515C  0100               	movlb	0	; () banked
 25134  01515E  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25135                           
 25136                           ; BSR set to: 0
 25137                           ;ADC.c: 195: };
 25138  015160  D015               	goto	l1296
 25139  015162                     
 25140                           ; BSR set to: 0
 25141                           
 25142                           ; BSR set to: 0
 25143  015162  0100               	movlb	0	; () banked
 25144  015164  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 25145                           
 25146                           ; Switch size 1, requested type "space"
 25147                           ; Number of cases is 6, Range of values is 2 to 64
 25148                           ; switch strategies available:
 25149                           ; Name         Instructions Cycles
 25150                           ; simple_byte           19    10 (average)
 25151                           ;	Chosen strategy is simple_byte
 25152  015166  0A02               	xorlw	2	; case 2
 25153  015168  B4D8               	btfsc	status,2,c
 25154  01516A  D7DE               	goto	l1295
 25155  01516C  0A06               	xorlw	6	; case 4
 25156  01516E  B4D8               	btfsc	status,2,c
 25157  015170  D7E0               	goto	l1297
 25158  015172  0A0C               	xorlw	12	; case 8
 25159  015174  B4D8               	btfsc	status,2,c
 25160  015176  D7DF               	goto	l1298
 25161  015178  0A18               	xorlw	24	; case 16
 25162  01517A  B4D8               	btfsc	status,2,c
 25163  01517C  D7DE               	goto	l1299
 25164  01517E  0A30               	xorlw	48	; case 32
 25165  015180  B4D8               	btfsc	status,2,c
 25166  015182  D7DD               	goto	l1300
 25167  015184  0A60               	xorlw	96	; case 64
 25168  015186  B4D8               	btfsc	status,2,c
 25169  015188  D7DC               	goto	l1301
 25170  01518A  D7E0               	goto	l1302
 25171  01518C                     l1296:
 25172                           
 25173                           ; BSR set to: 0
 25174                           
 25175                           ; BSR set to: 0
 25176                           
 25177                           ; BSR set to: 0
 25178  01518C  0100               	movlb	0	; () banked
 25179  01518E  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 25180  015190  0100               	movlb	0	; () banked
 25181  015192  A4D8               	btfss	status,2,c
 25182  015194  D7E6               	goto	l1294
 25183                           
 25184                           ; BSR set to: 0
 25185                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 25186                           
 25187                           ; BSR set to: 0
 25188  015196  50C1               	movf	4033,w,c	;volatile
 25189  015198  0100               	movlb	0	; () banked
 25190  01519A  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25191  01519C  0BF8               	andlw	-8
 25192  01519E  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25193  0151A0  6EC1               	movwf	4033,c	;volatile
 25194                           
 25195                           ; BSR set to: 0
 25196  0151A2  0012               	return		;funcret
 25197  0151A4                     __end_of_ADC_ClockDivision:
 25198                           	opt stack 0
 25199                           tosu	equ	0xFFF
 25200                           tosh	equ	0xFFE
 25201                           tosl	equ	0xFFD
 25202                           pclath	equ	0xFFA
 25203                           tblptru	equ	0xFF8
 25204                           tblptrh	equ	0xFF7
 25205                           tblptrl	equ	0xFF6
 25206                           tablat	equ	0xFF5
 25207                           prodh	equ	0xFF4
 25208                           prodl	equ	0xFF3
 25209                           intcon	equ	0xFF2
 25210                           postinc0	equ	0xFEE
 25211                           wreg	equ	0xFE8
 25212                           indf1	equ	0xFE7
 25213                           postdec1	equ	0xFE5
 25214                           fsr1h	equ	0xFE2
 25215                           fsr1l	equ	0xFE1
 25216                           indf2	equ	0xFDF
 25217                           postinc2	equ	0xFDE
 25218                           postdec2	equ	0xFDD
 25219                           plusw2	equ	0xFDB
 25220                           fsr2h	equ	0xFDA
 25221                           fsr2l	equ	0xFD9
 25222                           status	equ	0xFD8
 25223                           
 25224 ;; *************** function _ADC_Calibrate *****************
 25225 ;; Defined at:
 25226 ;;		line 63 in file "Library/ADC.c"
 25227 ;; Parameters:    Size  Location     Type
 25228 ;;		None
 25229 ;; Auto vars:     Size  Location     Type
 25230 ;;		None
 25231 ;; Return value:  Size  Location     Type
 25232 ;;                  1    wreg      void 
 25233 ;; Registers used:
 25234 ;;		cstack
 25235 ;; Tracked objects:
 25236 ;;		On entry : 0/0
 25237 ;;		On exit  : 0/0
 25238 ;;		Unchanged: 0/0
 25239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25244 ;;Total ram usage:        0 bytes
 25245 ;; Hardware stack levels used:    1
 25246 ;; Hardware stack levels required when called:    8
 25247 ;; This function calls:
 25248 ;;		_ADC_Off
 25249 ;;		_ADC_On
 25250 ;; This function is called by:
 25251 ;;		_ADC_Init
 25252 ;; This function uses a non-reentrant model
 25253 ;;
 25254                           
 25255                           	psect	text124
 25256  0167BC                     __ptext124:
 25257                           	opt stack 0
 25258  0167BC                     _ADC_Calibrate:
 25259                           	opt stack 20
 25260                           
 25261                           ;ADC.c: 65: ADC_On();
 25262                           
 25263                           ; BSR set to: 0
 25264                           ;incstack = 0
 25265  0167BC  EC6B  F0B4         	call	_ADC_On	;wreg free
 25266                           
 25267                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 25268  0167C0  8CC1               	bsf	4033,6,c	;volatile
 25269                           
 25270                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 25271  0167C2  82C2               	bsf	4034,1,c	;volatile
 25272  0167C4  B2C2               	btfsc	4034,1,c	;volatile
 25273  0167C6  D7FE               	goto	l1254
 25274                           
 25275                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 25276  0167C8  9CC1               	bcf	4033,6,c	;volatile
 25277                           
 25278                           ;ADC.c: 73: ADC_Off();
 25279  0167CA  EC5D  F0B4         	call	_ADC_Off	;wreg free
 25280  0167CE  0012               	return		;funcret
 25281  0167D0                     __end_of_ADC_Calibrate:
 25282                           	opt stack 0
 25283                           tosu	equ	0xFFF
 25284                           tosh	equ	0xFFE
 25285                           tosl	equ	0xFFD
 25286                           pclath	equ	0xFFA
 25287                           tblptru	equ	0xFF8
 25288                           tblptrh	equ	0xFF7
 25289                           tblptrl	equ	0xFF6
 25290                           tablat	equ	0xFF5
 25291                           prodh	equ	0xFF4
 25292                           prodl	equ	0xFF3
 25293                           intcon	equ	0xFF2
 25294                           postinc0	equ	0xFEE
 25295                           wreg	equ	0xFE8
 25296                           indf1	equ	0xFE7
 25297                           postdec1	equ	0xFE5
 25298                           fsr1h	equ	0xFE2
 25299                           fsr1l	equ	0xFE1
 25300                           indf2	equ	0xFDF
 25301                           postinc2	equ	0xFDE
 25302                           postdec2	equ	0xFDD
 25303                           plusw2	equ	0xFDB
 25304                           fsr2h	equ	0xFDA
 25305                           fsr2l	equ	0xFD9
 25306                           status	equ	0xFD8
 25307                           
 25308 ;; *************** function _ADC_On *****************
 25309 ;; Defined at:
 25310 ;;		line 85 in file "Library/ADC.c"
 25311 ;; Parameters:    Size  Location     Type
 25312 ;;		None
 25313 ;; Auto vars:     Size  Location     Type
 25314 ;;		None
 25315 ;; Return value:  Size  Location     Type
 25316 ;;                  1    wreg      void 
 25317 ;; Registers used:
 25318 ;;		None
 25319 ;; Tracked objects:
 25320 ;;		On entry : 0/0
 25321 ;;		On exit  : 0/0
 25322 ;;		Unchanged: 0/0
 25323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25328 ;;Total ram usage:        0 bytes
 25329 ;; Hardware stack levels used:    1
 25330 ;; Hardware stack levels required when called:    7
 25331 ;; This function calls:
 25332 ;;		Nothing
 25333 ;; This function is called by:
 25334 ;;		_ADC_Calibrate
 25335 ;;		_ADC_Start
 25336 ;;		_ADC_ISR
 25337 ;;		_ADC_Sample
 25338 ;; This function uses a non-reentrant model
 25339 ;;
 25340                           
 25341                           	psect	text125
 25342  0168D6                     __ptext125:
 25343                           	opt stack 0
 25344  0168D6                     _ADC_On:
 25345                           	opt stack 20
 25346                           
 25347                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 25348                           
 25349                           ;incstack = 0
 25350  0168D6  80C2               	bsf	4034,0,c	;volatile
 25351                           
 25352                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 25353  0168D8  9C9E               	bcf	3998,6,c	;volatile
 25354  0168DA  0012               	return		;funcret
 25355  0168DC                     __end_of_ADC_On:
 25356                           	opt stack 0
 25357                           tosu	equ	0xFFF
 25358                           tosh	equ	0xFFE
 25359                           tosl	equ	0xFFD
 25360                           pclath	equ	0xFFA
 25361                           tblptru	equ	0xFF8
 25362                           tblptrh	equ	0xFF7
 25363                           tblptrl	equ	0xFF6
 25364                           tablat	equ	0xFF5
 25365                           prodh	equ	0xFF4
 25366                           prodl	equ	0xFF3
 25367                           intcon	equ	0xFF2
 25368                           postinc0	equ	0xFEE
 25369                           wreg	equ	0xFE8
 25370                           indf1	equ	0xFE7
 25371                           postdec1	equ	0xFE5
 25372                           fsr1h	equ	0xFE2
 25373                           fsr1l	equ	0xFE1
 25374                           indf2	equ	0xFDF
 25375                           postinc2	equ	0xFDE
 25376                           postdec2	equ	0xFDD
 25377                           plusw2	equ	0xFDB
 25378                           fsr2h	equ	0xFDA
 25379                           fsr2l	equ	0xFD9
 25380                           status	equ	0xFD8
 25381                           
 25382 ;; *************** function _ADC_Off *****************
 25383 ;; Defined at:
 25384 ;;		line 94 in file "Library/ADC.c"
 25385 ;; Parameters:    Size  Location     Type
 25386 ;;		None
 25387 ;; Auto vars:     Size  Location     Type
 25388 ;;		None
 25389 ;; Return value:  Size  Location     Type
 25390 ;;                  1    wreg      void 
 25391 ;; Registers used:
 25392 ;;		None
 25393 ;; Tracked objects:
 25394 ;;		On entry : 0/0
 25395 ;;		On exit  : 0/0
 25396 ;;		Unchanged: 0/0
 25397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25402 ;;Total ram usage:        0 bytes
 25403 ;; Hardware stack levels used:    1
 25404 ;; Hardware stack levels required when called:    7
 25405 ;; This function calls:
 25406 ;;		Nothing
 25407 ;; This function is called by:
 25408 ;;		_ADC_Calibrate
 25409 ;;		_ADC_Start
 25410 ;;		_ADC_ISR
 25411 ;;		_ADC_Sample
 25412 ;; This function uses a non-reentrant model
 25413 ;;
 25414                           
 25415                           	psect	text126
 25416  0168BA                     __ptext126:
 25417                           	opt stack 0
 25418  0168BA                     _ADC_Off:
 25419                           	opt stack 20
 25420                           
 25421                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 25422                           
 25423                           ;incstack = 0
 25424  0168BA  90C2               	bcf	4034,0,c	;volatile
 25425                           
 25426                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 25427  0168BC  9C9E               	bcf	3998,6,c	;volatile
 25428                           
 25429                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 25430  0168BE  9C9D               	bcf	3997,6,c	;volatile
 25431  0168C0  0012               	return		;funcret
 25432  0168C2                     __end_of_ADC_Off:
 25433                           	opt stack 0
 25434                           tosu	equ	0xFFF
 25435                           tosh	equ	0xFFE
 25436                           tosl	equ	0xFFD
 25437                           pclath	equ	0xFFA
 25438                           tblptru	equ	0xFF8
 25439                           tblptrh	equ	0xFF7
 25440                           tblptrl	equ	0xFF6
 25441                           tablat	equ	0xFF5
 25442                           prodh	equ	0xFF4
 25443                           prodl	equ	0xFF3
 25444                           intcon	equ	0xFF2
 25445                           postinc0	equ	0xFEE
 25446                           wreg	equ	0xFE8
 25447                           indf1	equ	0xFE7
 25448                           postdec1	equ	0xFE5
 25449                           fsr1h	equ	0xFE2
 25450                           fsr1l	equ	0xFE1
 25451                           indf2	equ	0xFDF
 25452                           postinc2	equ	0xFDE
 25453                           postdec2	equ	0xFDD
 25454                           plusw2	equ	0xFDB
 25455                           fsr2h	equ	0xFDA
 25456                           fsr2l	equ	0xFD9
 25457                           status	equ	0xFD8
 25458                           
 25459 ;; *************** function _getMode *****************
 25460 ;; Defined at:
 25461 ;;		line 108 in file "main.c"
 25462 ;; Parameters:    Size  Location     Type
 25463 ;;		None
 25464 ;; Auto vars:     Size  Location     Type
 25465 ;;		None
 25466 ;; Return value:  Size  Location     Type
 25467 ;;                  1    wreg      void 
 25468 ;; Registers used:
 25469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25470 ;; Tracked objects:
 25471 ;;		On entry : 0/0
 25472 ;;		On exit  : 0/0
 25473 ;;		Unchanged: 0/0
 25474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25479 ;;Total ram usage:        0 bytes
 25480 ;; Hardware stack levels used:    1
 25481 ;; Hardware stack levels required when called:   16
 25482 ;; This function calls:
 25483 ;;		_HMI_DIPSwitch
 25484 ;;		_HMI_DownSwitch
 25485 ;;		_HMI_LeftSwitch
 25486 ;;		_HMI_Poll
 25487 ;;		_HMI_RightSwitch
 25488 ;;		_HMI_UpSwitch
 25489 ;;		_MXK_DIPSwitch
 25490 ;;		_MXK_TestButton
 25491 ;; This function is called by:
 25492 ;;		_main
 25493 ;; This function uses a non-reentrant model
 25494 ;;
 25495                           
 25496                           	psect	text127
 25497  0142DA                     __ptext127:
 25498                           	opt stack 0
 25499  0142DA                     _getMode:
 25500                           	opt stack 14
 25501                           
 25502                           ;main.c: 109: HMI_Poll();
 25503                           
 25504                           ;incstack = 0
 25505  0142DA  ECF5  F0AA         	call	_HMI_Poll	;wreg free
 25506                           
 25507                           ;main.c: 110: mode = 0;
 25508  0142DE  0E00               	movlw	0
 25509  0142E0  0103               	movlb	3	; () banked
 25510  0142E2  6F3D               	movwf	(_mode+1)& (0+255),b
 25511  0142E4  0E00               	movlw	0
 25512  0142E6  6F3C               	movwf	_mode& (0+255),b
 25513                           
 25514                           ; BSR set to: 3
 25515                           ;main.c: 111: if (HMIBoard.mUp.mGetState()) {
 25516  0142E8  EE23  F063         	lfsr	2,_HMIBoard+35
 25517  0142EC  D801               	call	u11878
 25518  0142EE  D00A               	goto	u11879
 25519  0142F0                     u11878:
 25520  0142F0  0005               	push	
 25521  0142F2  6EFA               	movwf	pclath,c
 25522  0142F4  50DE               	movf	postinc2,w,c
 25523  0142F6  6EFD               	movwf	tosl,c
 25524  0142F8  50DE               	movf	postinc2,w,c
 25525  0142FA  6EFE               	movwf	tosh,c
 25526  0142FC  50DE               	movf	postinc2,w,c
 25527  0142FE  6EFF               	movwf	tosu,c
 25528  014300  50FA               	movf	pclath,w,c
 25529  014302  0012               	return		;indir
 25530  014304                     u11879:
 25531  014304  0900               	iorlw	0
 25532  014306  B4D8               	btfsc	status,2,c
 25533  014308  D005               	goto	l2320
 25534                           
 25535                           ;main.c: 112: mode = 1;
 25536  01430A  0E00               	movlw	0
 25537  01430C  0103               	movlb	3	; () banked
 25538  01430E  6F3D               	movwf	(_mode+1)& (0+255),b
 25539  014310  0E01               	movlw	1
 25540  014312  6F3C               	movwf	_mode& (0+255),b
 25541  014314                     l2320:
 25542                           
 25543                           ;main.c: 113: }
 25544                           ;main.c: 114: if (HMIBoard.mRight.mGetState()) {
 25545                           
 25546                           ; BSR set to: 3
 25547  014314  EE23  F04F         	lfsr	2,_HMIBoard+15
 25548  014318  D801               	call	u11898
 25549  01431A  D00A               	goto	u11899
 25550  01431C                     u11898:
 25551  01431C  0005               	push	
 25552  01431E  6EFA               	movwf	pclath,c
 25553  014320  50DE               	movf	postinc2,w,c
 25554  014322  6EFD               	movwf	tosl,c
 25555  014324  50DE               	movf	postinc2,w,c
 25556  014326  6EFE               	movwf	tosh,c
 25557  014328  50DE               	movf	postinc2,w,c
 25558  01432A  6EFF               	movwf	tosu,c
 25559  01432C  50FA               	movf	pclath,w,c
 25560  01432E  0012               	return		;indir
 25561  014330                     u11899:
 25562  014330  0900               	iorlw	0
 25563  014332  B4D8               	btfsc	status,2,c
 25564  014334  D005               	goto	l2321
 25565                           
 25566                           ;main.c: 115: mode = 2;
 25567  014336  0E00               	movlw	0
 25568  014338  0103               	movlb	3	; () banked
 25569  01433A  6F3D               	movwf	(_mode+1)& (0+255),b
 25570  01433C  0E02               	movlw	2
 25571  01433E  6F3C               	movwf	_mode& (0+255),b
 25572  014340                     l2321:
 25573                           
 25574                           ;main.c: 116: }
 25575                           ;main.c: 117: if (HMIBoard.mDown.mGetState()) {
 25576                           
 25577                           ; BSR set to: 3
 25578  014340  EE23  F06D         	lfsr	2,_HMIBoard+45
 25579  014344  D801               	call	u11918
 25580  014346  D00A               	goto	u11919
 25581  014348                     u11918:
 25582  014348  0005               	push	
 25583  01434A  6EFA               	movwf	pclath,c
 25584  01434C  50DE               	movf	postinc2,w,c
 25585  01434E  6EFD               	movwf	tosl,c
 25586  014350  50DE               	movf	postinc2,w,c
 25587  014352  6EFE               	movwf	tosh,c
 25588  014354  50DE               	movf	postinc2,w,c
 25589  014356  6EFF               	movwf	tosu,c
 25590  014358  50FA               	movf	pclath,w,c
 25591  01435A  0012               	return		;indir
 25592  01435C                     u11919:
 25593  01435C  0900               	iorlw	0
 25594  01435E  B4D8               	btfsc	status,2,c
 25595  014360  D005               	goto	l2322
 25596                           
 25597                           ;main.c: 118: mode = 3;
 25598  014362  0E00               	movlw	0
 25599  014364  0103               	movlb	3	; () banked
 25600  014366  6F3D               	movwf	(_mode+1)& (0+255),b
 25601  014368  0E03               	movlw	3
 25602  01436A  6F3C               	movwf	_mode& (0+255),b
 25603  01436C                     l2322:
 25604                           
 25605                           ;main.c: 119: }
 25606                           ;main.c: 120: if (HMIBoard.mLeft.mGetState()) {
 25607                           
 25608                           ; BSR set to: 3
 25609  01436C  EE23  F059         	lfsr	2,_HMIBoard+25
 25610  014370  D801               	call	u11938
 25611  014372  D00A               	goto	u11939
 25612  014374                     u11938:
 25613  014374  0005               	push	
 25614  014376  6EFA               	movwf	pclath,c
 25615  014378  50DE               	movf	postinc2,w,c
 25616  01437A  6EFD               	movwf	tosl,c
 25617  01437C  50DE               	movf	postinc2,w,c
 25618  01437E  6EFE               	movwf	tosh,c
 25619  014380  50DE               	movf	postinc2,w,c
 25620  014382  6EFF               	movwf	tosu,c
 25621  014384  50FA               	movf	pclath,w,c
 25622  014386  0012               	return		;indir
 25623  014388                     u11939:
 25624  014388  0900               	iorlw	0
 25625  01438A  B4D8               	btfsc	status,2,c
 25626  01438C  0012               	return	
 25627                           
 25628                           ;main.c: 121: mode = 4;
 25629  01438E  0E00               	movlw	0
 25630  014390  0103               	movlb	3	; () banked
 25631  014392  6F3D               	movwf	(_mode+1)& (0+255),b
 25632  014394  0E04               	movlw	4
 25633  014396  6F3C               	movwf	_mode& (0+255),b
 25634  014398  0012               	return	
 25635  01439A                     __end_of_getMode:
 25636                           	opt stack 0
 25637                           tosu	equ	0xFFF
 25638                           tosh	equ	0xFFE
 25639                           tosl	equ	0xFFD
 25640                           pclath	equ	0xFFA
 25641                           tblptru	equ	0xFF8
 25642                           tblptrh	equ	0xFF7
 25643                           tblptrl	equ	0xFF6
 25644                           tablat	equ	0xFF5
 25645                           prodh	equ	0xFF4
 25646                           prodl	equ	0xFF3
 25647                           intcon	equ	0xFF2
 25648                           postinc0	equ	0xFEE
 25649                           wreg	equ	0xFE8
 25650                           indf1	equ	0xFE7
 25651                           postdec1	equ	0xFE5
 25652                           fsr1h	equ	0xFE2
 25653                           fsr1l	equ	0xFE1
 25654                           indf2	equ	0xFDF
 25655                           postinc2	equ	0xFDE
 25656                           postdec2	equ	0xFDD
 25657                           plusw2	equ	0xFDB
 25658                           fsr2h	equ	0xFDA
 25659                           fsr2l	equ	0xFD9
 25660                           status	equ	0xFD8
 25661                           
 25662 ;; *************** function _HMI_Poll *****************
 25663 ;; Defined at:
 25664 ;;		line 252 in file "HMI.c"
 25665 ;; Parameters:    Size  Location     Type
 25666 ;;		None
 25667 ;; Auto vars:     Size  Location     Type
 25668 ;;		None
 25669 ;; Return value:  Size  Location     Type
 25670 ;;                  1    wreg      void 
 25671 ;; Registers used:
 25672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25673 ;; Tracked objects:
 25674 ;;		On entry : 0/0
 25675 ;;		On exit  : 0/0
 25676 ;;		Unchanged: 0/0
 25677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25682 ;;Total ram usage:        0 bytes
 25683 ;; Hardware stack levels used:    1
 25684 ;; Hardware stack levels required when called:   15
 25685 ;; This function calls:
 25686 ;;		_Button_Poll
 25687 ;; This function is called by:
 25688 ;;		_getMode
 25689 ;;		_safeToGo
 25690 ;;		_main
 25691 ;; This function uses a non-reentrant model
 25692 ;;
 25693                           
 25694                           	psect	text128
 25695  0155EA                     __ptext128:
 25696                           	opt stack 0
 25697  0155EA                     _HMI_Poll:
 25698                           	opt stack 13
 25699                           
 25700                           ;HMI.c: 254: TRISE = 0xFC;
 25701                           
 25702                           ;incstack = 0
 25703  0155EA  0EFC               	movlw	252
 25704  0155EC  6E96               	movwf	3990,c	;volatile
 25705                           
 25706                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25707  0155EE  0E70               	movlw	low (_HMIBoard+48)
 25708  0155F0  0100               	movlb	0	; () banked
 25709  0155F2  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25710  0155F4  0E03               	movlw	high (_HMIBoard+48)
 25711  0155F6  0100               	movlb	0	; () banked
 25712  0155F8  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25713  0155FA  0E01               	movlw	1
 25714  0155FC  0100               	movlb	0	; () banked
 25715  0155FE  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25716  015600  EC14  F098         	call	_Button_Poll	;wreg free
 25717                           
 25718                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25719  015604  0E52               	movlw	low (_HMIBoard+18)
 25720  015606  0100               	movlb	0	; () banked
 25721  015608  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25722  01560A  0E03               	movlw	high (_HMIBoard+18)
 25723  01560C  0100               	movlb	0	; () banked
 25724  01560E  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25725  015610  0E01               	movlw	1
 25726  015612  0100               	movlb	0	; () banked
 25727  015614  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25728  015616  EC14  F098         	call	_Button_Poll	;wreg free
 25729                           
 25730                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25731  01561A  0E48               	movlw	low (_HMIBoard+8)
 25732  01561C  0100               	movlb	0	; () banked
 25733  01561E  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25734  015620  0E03               	movlw	high (_HMIBoard+8)
 25735  015622  0100               	movlb	0	; () banked
 25736  015624  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25737  015626  0E01               	movlw	1
 25738  015628  0100               	movlb	0	; () banked
 25739  01562A  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25740  01562C  EC14  F098         	call	_Button_Poll	;wreg free
 25741                           
 25742                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25743  015630  0E5C               	movlw	low (_HMIBoard+28)
 25744  015632  0100               	movlb	0	; () banked
 25745  015634  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25746  015636  0E03               	movlw	high (_HMIBoard+28)
 25747  015638  0100               	movlb	0	; () banked
 25748  01563A  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25749  01563C  0E01               	movlw	1
 25750  01563E  0100               	movlb	0	; () banked
 25751  015640  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25752  015642  EC14  F098         	call	_Button_Poll	;wreg free
 25753                           
 25754                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25755  015646  0E66               	movlw	low (_HMIBoard+38)
 25756  015648  0100               	movlb	0	; () banked
 25757  01564A  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25758  01564C  0E03               	movlw	high (_HMIBoard+38)
 25759  01564E  0100               	movlb	0	; () banked
 25760  015650  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25761  015652  0E01               	movlw	1
 25762  015654  0100               	movlb	0	; () banked
 25763  015656  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25764  015658  EC14  F098         	call	_Button_Poll	;wreg free
 25765  01565C  0012               	return		;funcret
 25766  01565E                     __end_of_HMI_Poll:
 25767                           	opt stack 0
 25768                           tosu	equ	0xFFF
 25769                           tosh	equ	0xFFE
 25770                           tosl	equ	0xFFD
 25771                           pclath	equ	0xFFA
 25772                           tblptru	equ	0xFF8
 25773                           tblptrh	equ	0xFF7
 25774                           tblptrl	equ	0xFF6
 25775                           tablat	equ	0xFF5
 25776                           prodh	equ	0xFF4
 25777                           prodl	equ	0xFF3
 25778                           intcon	equ	0xFF2
 25779                           postinc0	equ	0xFEE
 25780                           wreg	equ	0xFE8
 25781                           indf1	equ	0xFE7
 25782                           postdec1	equ	0xFE5
 25783                           fsr1h	equ	0xFE2
 25784                           fsr1l	equ	0xFE1
 25785                           indf2	equ	0xFDF
 25786                           postinc2	equ	0xFDE
 25787                           postdec2	equ	0xFDD
 25788                           plusw2	equ	0xFDB
 25789                           fsr2h	equ	0xFDA
 25790                           fsr2l	equ	0xFD9
 25791                           status	equ	0xFD8
 25792                           
 25793 ;; *************** function _Button_Poll *****************
 25794 ;; Defined at:
 25795 ;;		line 57 in file "Library/Button.c"
 25796 ;; Parameters:    Size  Location     Type
 25797 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25798 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25799 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25800 ;; Auto vars:     Size  Location     Type
 25801 ;;  Pin             1   35[BANK0 ] unsigned char 
 25802 ;; Return value:  Size  Location     Type
 25803 ;;                  1    wreg      unsigned char 
 25804 ;; Registers used:
 25805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25806 ;; Tracked objects:
 25807 ;;		On entry : 0/0
 25808 ;;		On exit  : 0/0
 25809 ;;		Unchanged: 0/0
 25810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25811 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25813 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25814 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25815 ;;Total ram usage:        9 bytes
 25816 ;; Hardware stack levels used:    1
 25817 ;; Hardware stack levels required when called:   14
 25818 ;; This function calls:
 25819 ;;		_Event_DIPSwitch
 25820 ;;		_Event_NULL
 25821 ;;		_Event_TestButton
 25822 ;;		_HMI_DIPSwitch
 25823 ;;		_HMI_DownSwitch
 25824 ;;		_HMI_LeftSwitch
 25825 ;;		_HMI_RightSwitch
 25826 ;;		_HMI_UpSwitch
 25827 ;;		_MXK_DIPSwitch
 25828 ;;		_MXK_TestButton
 25829 ;; This function is called by:
 25830 ;;		_HMI_Poll
 25831 ;;		_MXK_Poll
 25832 ;; This function uses a non-reentrant model
 25833 ;;
 25834                           
 25835                           	psect	text129
 25836  013028                     __ptext129:
 25837                           	opt stack 0
 25838  013028                     _Button_Poll:
 25839                           	opt stack 13
 25840                           
 25841                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25842                           
 25843                           ;incstack = 0
 25844  013028  0100               	movlb	0	; () banked
 25845  01302A  EE20 F007          	lfsr	2,7
 25846  01302E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25847  013030  26D9               	addwf	fsr2l,f,c
 25848  013032  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25849  013034  22DA               	addwfc	fsr2h,f,c
 25850  013036  D801               	call	u10348
 25851  013038  D00A               	goto	u10349
 25852  01303A                     u10348:
 25853  01303A  0005               	push	
 25854  01303C  6EFA               	movwf	pclath,c
 25855  01303E  50DE               	movf	postinc2,w,c
 25856  013040  6EFD               	movwf	tosl,c
 25857  013042  50DE               	movf	postinc2,w,c
 25858  013044  6EFE               	movwf	tosh,c
 25859  013046  50DE               	movf	postinc2,w,c
 25860  013048  6EFF               	movwf	tosu,c
 25861  01304A  50FA               	movf	pclath,w,c
 25862  01304C  0012               	return		;indir
 25863  01304E                     u10349:
 25864  01304E  0100               	movlb	0	; () banked
 25865  013050  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;Button.c: 61: if (pButton->mState == Pin)
 25869  013052  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25870  013056  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25871  01305A  0100               	movlb	0	; () banked
 25872  01305C  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25873  01305E  18DE               	xorwf	postinc2,w,c
 25874  013060  A4D8               	btfss	status,2,c
 25875  013062  D021               	goto	l11
 25876                           
 25877                           ; BSR set to: 0
 25878                           ;Button.c: 62: {
 25879                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25880  013064  0100               	movlb	0	; () banked
 25881  013066  EE20 F001          	lfsr	2,1
 25882  01306A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25883  01306C  26D9               	addwf	fsr2l,f,c
 25884  01306E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25885  013070  22DA               	addwfc	fsr2h,f,c
 25886  013072  0100               	movlb	0	; () banked
 25887  013074  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25888  013076  5CDE               	subwf	postinc2,w,c
 25889  013078  B0D8               	btfsc	status,0,c
 25890  01307A  D00A               	goto	l12
 25891                           
 25892                           ; BSR set to: 0
 25893                           ;Button.c: 66: pButton->mCount = 0;
 25894  01307C  0100               	movlb	0	; () banked
 25895  01307E  EE20 F001          	lfsr	2,1
 25896  013082  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25897  013084  26D9               	addwf	fsr2l,f,c
 25898  013086  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25899  013088  22DA               	addwfc	fsr2h,f,c
 25900  01308A  0E00               	movlw	0
 25901  01308C  6EDF               	movwf	indf2,c
 25902  01308E  0012               	return	
 25903  013090                     l12:
 25904                           
 25905                           ; BSR set to: 0
 25906                           ;Button.c: 67: else
 25907                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25908                           
 25909                           ; BSR set to: 0
 25910  013090  0100               	movlb	0	; () banked
 25911  013092  EE20 F001          	lfsr	2,1
 25912  013096  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25913  013098  26D9               	addwf	fsr2l,f,c
 25914  01309A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25915  01309C  22DA               	addwfc	fsr2h,f,c
 25916  01309E  0100               	movlb	0	; () banked
 25917  0130A0  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25918  0130A2  5EDF               	subwf	indf2,f,c
 25919                           
 25920                           ; BSR set to: 0
 25921                           ;Button.c: 69: }
 25922  0130A4  0012               	return	
 25923  0130A6                     l11:
 25924                           
 25925                           ; BSR set to: 0
 25926                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25927                           
 25928                           ; BSR set to: 0
 25929  0130A6  0100               	movlb	0	; () banked
 25930  0130A8  EE20 F001          	lfsr	2,1
 25931  0130AC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25932  0130AE  26D9               	addwf	fsr2l,f,c
 25933  0130B0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25934  0130B2  22DA               	addwfc	fsr2h,f,c
 25935  0130B4  50DF               	movf	indf2,w,c
 25936  0130B6  0100               	movlb	0	; () banked
 25937  0130B8  6FD8               	movwf	??_Button_Poll& (0+255),b
 25938  0130BA  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25939  0130BC  0100               	movlb	0	; () banked
 25940  0130BE  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25941  0130C0  0100               	movlb	0	; () banked
 25942  0130C2  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25943  0130C4  0E00               	movlw	0
 25944  0130C6  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25945  0130C8  0100               	movlb	0	; () banked
 25946  0130CA  EE20 F001          	lfsr	2,1
 25947  0130CE  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25948  0130D0  26D9               	addwf	fsr2l,f,c
 25949  0130D2  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25950  0130D4  22DA               	addwfc	fsr2h,f,c
 25951  0130D6  50DF               	movf	indf2,w,c
 25952  0130D8  0100               	movlb	0	; () banked
 25953  0130DA  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25954  0130DC  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25955  0130DE  0100               	movlb	0	; () banked
 25956  0130E0  51D8               	movf	??_Button_Poll& (0+255),w,b
 25957  0130E2  0100               	movlb	0	; () banked
 25958  0130E4  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25959  0130E6  0100               	movlb	0	; () banked
 25960  0130E8  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25961  0130EA  0A80               	xorlw	128
 25962  0130EC  0100               	movlb	0	; () banked
 25963  0130EE  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25964  0130F0  0100               	movlb	0	; () banked
 25965  0130F2  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25966  0130F4  0A80               	xorlw	128
 25967  0130F6  0100               	movlb	0	; () banked
 25968  0130F8  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25969  0130FA  B0D8               	btfsc	status,0,c
 25970  0130FC  0012               	return	
 25971                           
 25972                           ; BSR set to: 0
 25973                           ;Button.c: 73: {
 25974                           ;Button.c: 75: pButton->mCount += pIncrement;
 25975  0130FE  0100               	movlb	0	; () banked
 25976  013100  EE20 F001          	lfsr	2,1
 25977  013104  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25978  013106  26D9               	addwf	fsr2l,f,c
 25979  013108  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25980  01310A  22DA               	addwfc	fsr2h,f,c
 25981  01310C  0100               	movlb	0	; () banked
 25982  01310E  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25983  013110  26DF               	addwf	indf2,f,c
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25987  013112  0100               	movlb	0	; () banked
 25988  013114  EE20 F002          	lfsr	2,2
 25989  013118  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25990  01311A  26D9               	addwf	fsr2l,f,c
 25991  01311C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25992  01311E  22DA               	addwfc	fsr2h,f,c
 25993  013120  0100               	movlb	0	; () banked
 25994  013122  EE10 F001          	lfsr	1,1
 25995  013126  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25996  013128  26E1               	addwf	fsr1l,f,c
 25997  01312A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25998  01312C  22E2               	addwfc	fsr1h,f,c
 25999  01312E  50E7               	movf	indf1,w,c
 26000  013130  0100               	movlb	0	; () banked
 26001  013132  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 26002  013134  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 26003  013136  50DE               	movf	postinc2,w,c
 26004  013138  0100               	movlb	0	; () banked
 26005  01313A  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26006  01313C  50DE               	movf	postinc2,w,c
 26007  01313E  0100               	movlb	0	; () banked
 26008  013140  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 26009  013142  A0D8               	btfss	status,0,c
 26010  013144  0012               	return	
 26011                           
 26012                           ; BSR set to: 0
 26013                           ;Button.c: 77: {
 26014                           ;Button.c: 79: pButton->mState = Pin;
 26015  013146  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 26016  01314A  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26017  01314E  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 26018                           
 26019                           ; BSR set to: 0
 26020                           ;Button.c: 80: pButton->mCount = 0;
 26021  013152  0100               	movlb	0	; () banked
 26022  013154  EE20 F001          	lfsr	2,1
 26023  013158  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 26024  01315A  26D9               	addwf	fsr2l,f,c
 26025  01315C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26026  01315E  22DA               	addwfc	fsr2h,f,c
 26027  013160  0E00               	movlw	0
 26028  013162  6EDF               	movwf	indf2,c
 26029                           
 26030                           ; BSR set to: 0
 26031                           ;Button.c: 83: pButton->mFunction(Pin);
 26032  013164  0100               	movlb	0	; () banked
 26033  013166  EE20 F004          	lfsr	2,4
 26034  01316A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 26035  01316C  26D9               	addwf	fsr2l,f,c
 26036  01316E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26037  013170  22DA               	addwfc	fsr2h,f,c
 26038  013172  D801               	call	u10398
 26039  013174  0012               	return	
 26040  013176                     u10398:
 26041  013176  0005               	push	
 26042  013178  6EFA               	movwf	pclath,c
 26043  01317A  50DE               	movf	postinc2,w,c
 26044  01317C  6EFD               	movwf	tosl,c
 26045  01317E  50DE               	movf	postinc2,w,c
 26046  013180  6EFE               	movwf	tosh,c
 26047  013182  50DE               	movf	postinc2,w,c
 26048  013184  6EFF               	movwf	tosu,c
 26049  013186  50FA               	movf	pclath,w,c
 26050  013188  0100               	movlb	0	; () banked
 26051  01318A  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 26052  01318C  0012               	return		;indir
 26053  01318E                     __end_of_Button_Poll:
 26054                           	opt stack 0
 26055                           tosu	equ	0xFFF
 26056                           tosh	equ	0xFFE
 26057                           tosl	equ	0xFFD
 26058                           pclath	equ	0xFFA
 26059                           tblptru	equ	0xFF8
 26060                           tblptrh	equ	0xFF7
 26061                           tblptrl	equ	0xFF6
 26062                           tablat	equ	0xFF5
 26063                           prodh	equ	0xFF4
 26064                           prodl	equ	0xFF3
 26065                           intcon	equ	0xFF2
 26066                           postinc0	equ	0xFEE
 26067                           wreg	equ	0xFE8
 26068                           indf1	equ	0xFE7
 26069                           postdec1	equ	0xFE5
 26070                           fsr1h	equ	0xFE2
 26071                           fsr1l	equ	0xFE1
 26072                           indf2	equ	0xFDF
 26073                           postinc2	equ	0xFDE
 26074                           postdec2	equ	0xFDD
 26075                           plusw2	equ	0xFDB
 26076                           fsr2h	equ	0xFDA
 26077                           fsr2l	equ	0xFD9
 26078                           status	equ	0xFD8
 26079                           
 26080 ;; *************** function _MXK_DIPSwitch *****************
 26081 ;; Defined at:
 26082 ;;		line 24 in file "Library/MXK.c"
 26083 ;; Parameters:    Size  Location     Type
 26084 ;;		None
 26085 ;; Auto vars:     Size  Location     Type
 26086 ;;		None
 26087 ;; Return value:  Size  Location     Type
 26088 ;;                  1    wreg      unsigned char 
 26089 ;; Registers used:
 26090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26091 ;; Tracked objects:
 26092 ;;		On entry : 0/0
 26093 ;;		On exit  : 0/0
 26094 ;;		Unchanged: 0/0
 26095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26100 ;;Total ram usage:        0 bytes
 26101 ;; Hardware stack levels used:    1
 26102 ;; Hardware stack levels required when called:    8
 26103 ;; This function calls:
 26104 ;;		_Port_GetQuad
 26105 ;; This function is called by:
 26106 ;;		_FunctInitButton
 26107 ;;		_Button_Poll
 26108 ;;		_getMode
 26109 ;; This function uses a non-reentrant model
 26110 ;;
 26111                           
 26112                           	psect	text130
 26113  016700                     __ptext130:
 26114                           	opt stack 0
 26115  016700                     _MXK_DIPSwitch:
 26116                           	opt stack 18
 26117                           
 26118                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 26119                           
 26120                           ;incstack = 0
 26121  016700  0E9B               	movlw	low _PortD
 26122  016702  0100               	movlb	0	; () banked
 26123  016704  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 26124  016706  0E00               	movlw	high _PortD
 26125  016708  0100               	movlb	0	; () banked
 26126  01670A  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26127  01670C  0E00               	movlw	0
 26128  01670E  0100               	movlb	0	; () banked
 26129  016710  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 26130  016712  ECE3  F0AE         	call	_Port_GetQuad
 26131  016716  0012               	return	
 26132  016718                     __end_of_MXK_DIPSwitch:
 26133                           	opt stack 0
 26134                           tosu	equ	0xFFF
 26135                           tosh	equ	0xFFE
 26136                           tosl	equ	0xFFD
 26137                           pclath	equ	0xFFA
 26138                           tblptru	equ	0xFF8
 26139                           tblptrh	equ	0xFF7
 26140                           tblptrl	equ	0xFF6
 26141                           tablat	equ	0xFF5
 26142                           prodh	equ	0xFF4
 26143                           prodl	equ	0xFF3
 26144                           intcon	equ	0xFF2
 26145                           postinc0	equ	0xFEE
 26146                           wreg	equ	0xFE8
 26147                           indf1	equ	0xFE7
 26148                           postdec1	equ	0xFE5
 26149                           fsr1h	equ	0xFE2
 26150                           fsr1l	equ	0xFE1
 26151                           indf2	equ	0xFDF
 26152                           postinc2	equ	0xFDE
 26153                           postdec2	equ	0xFDD
 26154                           plusw2	equ	0xFDB
 26155                           fsr2h	equ	0xFDA
 26156                           fsr2l	equ	0xFD9
 26157                           status	equ	0xFD8
 26158                           
 26159 ;; *************** function _HMI_DIPSwitch *****************
 26160 ;; Defined at:
 26161 ;;		line 47 in file "HMI.c"
 26162 ;; Parameters:    Size  Location     Type
 26163 ;;		None
 26164 ;; Auto vars:     Size  Location     Type
 26165 ;;		None
 26166 ;; Return value:  Size  Location     Type
 26167 ;;                  1    wreg      unsigned char 
 26168 ;; Registers used:
 26169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26170 ;; Tracked objects:
 26171 ;;		On entry : 0/0
 26172 ;;		On exit  : 0/0
 26173 ;;		Unchanged: 0/0
 26174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26179 ;;Total ram usage:        0 bytes
 26180 ;; Hardware stack levels used:    1
 26181 ;; Hardware stack levels required when called:    8
 26182 ;; This function calls:
 26183 ;;		_Port_GetQuad
 26184 ;; This function is called by:
 26185 ;;		_HMI_Init
 26186 ;;		_Button_Poll
 26187 ;;		_getMode
 26188 ;; This function uses a non-reentrant model
 26189 ;;
 26190                           
 26191                           	psect	text131
 26192  016718                     __ptext131:
 26193                           	opt stack 0
 26194  016718                     _HMI_DIPSwitch:
 26195                           	opt stack 18
 26196                           
 26197                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 26198                           
 26199                           ;incstack = 0
 26200  016718  0E91               	movlw	low _PortE
 26201  01671A  0100               	movlb	0	; () banked
 26202  01671C  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 26203  01671E  0E00               	movlw	high _PortE
 26204  016720  0100               	movlb	0	; () banked
 26205  016722  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26206  016724  0E00               	movlw	0
 26207  016726  0100               	movlb	0	; () banked
 26208  016728  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 26209  01672A  ECE3  F0AE         	call	_Port_GetQuad	;wreg free
 26210  01672E  0012               	return	
 26211  016730                     __end_of_HMI_DIPSwitch:
 26212                           	opt stack 0
 26213                           tosu	equ	0xFFF
 26214                           tosh	equ	0xFFE
 26215                           tosl	equ	0xFFD
 26216                           pclath	equ	0xFFA
 26217                           tblptru	equ	0xFF8
 26218                           tblptrh	equ	0xFF7
 26219                           tblptrl	equ	0xFF6
 26220                           tablat	equ	0xFF5
 26221                           prodh	equ	0xFF4
 26222                           prodl	equ	0xFF3
 26223                           intcon	equ	0xFF2
 26224                           postinc0	equ	0xFEE
 26225                           wreg	equ	0xFE8
 26226                           indf1	equ	0xFE7
 26227                           postdec1	equ	0xFE5
 26228                           fsr1h	equ	0xFE2
 26229                           fsr1l	equ	0xFE1
 26230                           indf2	equ	0xFDF
 26231                           postinc2	equ	0xFDE
 26232                           postdec2	equ	0xFDD
 26233                           plusw2	equ	0xFDB
 26234                           fsr2h	equ	0xFDA
 26235                           fsr2l	equ	0xFD9
 26236                           status	equ	0xFD8
 26237                           
 26238 ;; *************** function _HMI_DownSwitch *****************
 26239 ;; Defined at:
 26240 ;;		line 42 in file "HMI.c"
 26241 ;; Parameters:    Size  Location     Type
 26242 ;;		None
 26243 ;; Auto vars:     Size  Location     Type
 26244 ;;		None
 26245 ;; Return value:  Size  Location     Type
 26246 ;;                  1    wreg      unsigned char 
 26247 ;; Registers used:
 26248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26249 ;; Tracked objects:
 26250 ;;		On entry : 0/0
 26251 ;;		On exit  : 0/0
 26252 ;;		Unchanged: 0/0
 26253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26258 ;;Total ram usage:        0 bytes
 26259 ;; Hardware stack levels used:    1
 26260 ;; Hardware stack levels required when called:    8
 26261 ;; This function calls:
 26262 ;;		_Port_GetPin
 26263 ;; This function is called by:
 26264 ;;		_HMI_Init
 26265 ;;		_Button_Poll
 26266 ;;		_getMode
 26267 ;; This function uses a non-reentrant model
 26268 ;;
 26269                           
 26270                           	psect	text132
 26271  016730                     __ptext132:
 26272                           	opt stack 0
 26273  016730                     _HMI_DownSwitch:
 26274                           	opt stack 18
 26275                           
 26276                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 26277                           
 26278                           ;incstack = 0
 26279  016730  0E91               	movlw	low _PortE
 26280  016732  0100               	movlb	0	; () banked
 26281  016734  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26282  016736  0E00               	movlw	high _PortE
 26283  016738  0100               	movlb	0	; () banked
 26284  01673A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26285  01673C  0E06               	movlw	6
 26286  01673E  0100               	movlb	0	; () banked
 26287  016740  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26288  016742  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 26289  016746  0012               	return	
 26290  016748                     __end_of_HMI_DownSwitch:
 26291                           	opt stack 0
 26292                           tosu	equ	0xFFF
 26293                           tosh	equ	0xFFE
 26294                           tosl	equ	0xFFD
 26295                           pclath	equ	0xFFA
 26296                           tblptru	equ	0xFF8
 26297                           tblptrh	equ	0xFF7
 26298                           tblptrl	equ	0xFF6
 26299                           tablat	equ	0xFF5
 26300                           prodh	equ	0xFF4
 26301                           prodl	equ	0xFF3
 26302                           intcon	equ	0xFF2
 26303                           postinc0	equ	0xFEE
 26304                           wreg	equ	0xFE8
 26305                           indf1	equ	0xFE7
 26306                           postdec1	equ	0xFE5
 26307                           fsr1h	equ	0xFE2
 26308                           fsr1l	equ	0xFE1
 26309                           indf2	equ	0xFDF
 26310                           postinc2	equ	0xFDE
 26311                           postdec2	equ	0xFDD
 26312                           plusw2	equ	0xFDB
 26313                           fsr2h	equ	0xFDA
 26314                           fsr2l	equ	0xFD9
 26315                           status	equ	0xFD8
 26316                           
 26317 ;; *************** function _HMI_UpSwitch *****************
 26318 ;; Defined at:
 26319 ;;		line 37 in file "HMI.c"
 26320 ;; Parameters:    Size  Location     Type
 26321 ;;		None
 26322 ;; Auto vars:     Size  Location     Type
 26323 ;;		None
 26324 ;; Return value:  Size  Location     Type
 26325 ;;                  1    wreg      unsigned char 
 26326 ;; Registers used:
 26327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26328 ;; Tracked objects:
 26329 ;;		On entry : 0/0
 26330 ;;		On exit  : 0/0
 26331 ;;		Unchanged: 0/0
 26332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26337 ;;Total ram usage:        0 bytes
 26338 ;; Hardware stack levels used:    1
 26339 ;; Hardware stack levels required when called:    8
 26340 ;; This function calls:
 26341 ;;		_Port_GetPin
 26342 ;; This function is called by:
 26343 ;;		_HMI_Init
 26344 ;;		_Button_Poll
 26345 ;;		_getMode
 26346 ;; This function uses a non-reentrant model
 26347 ;;
 26348                           
 26349                           	psect	text133
 26350  016748                     __ptext133:
 26351                           	opt stack 0
 26352  016748                     _HMI_UpSwitch:
 26353                           	opt stack 18
 26354                           
 26355                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 26356                           
 26357                           ;incstack = 0
 26358  016748  0E91               	movlw	low _PortE
 26359  01674A  0100               	movlb	0	; () banked
 26360  01674C  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26361  01674E  0E00               	movlw	high _PortE
 26362  016750  0100               	movlb	0	; () banked
 26363  016752  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26364  016754  0E07               	movlw	7
 26365  016756  0100               	movlb	0	; () banked
 26366  016758  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26367  01675A  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 26368  01675E  0012               	return	
 26369  016760                     __end_of_HMI_UpSwitch:
 26370                           	opt stack 0
 26371                           tosu	equ	0xFFF
 26372                           tosh	equ	0xFFE
 26373                           tosl	equ	0xFFD
 26374                           pclath	equ	0xFFA
 26375                           tblptru	equ	0xFF8
 26376                           tblptrh	equ	0xFF7
 26377                           tblptrl	equ	0xFF6
 26378                           tablat	equ	0xFF5
 26379                           prodh	equ	0xFF4
 26380                           prodl	equ	0xFF3
 26381                           intcon	equ	0xFF2
 26382                           postinc0	equ	0xFEE
 26383                           wreg	equ	0xFE8
 26384                           indf1	equ	0xFE7
 26385                           postdec1	equ	0xFE5
 26386                           fsr1h	equ	0xFE2
 26387                           fsr1l	equ	0xFE1
 26388                           indf2	equ	0xFDF
 26389                           postinc2	equ	0xFDE
 26390                           postdec2	equ	0xFDD
 26391                           plusw2	equ	0xFDB
 26392                           fsr2h	equ	0xFDA
 26393                           fsr2l	equ	0xFD9
 26394                           status	equ	0xFD8
 26395                           
 26396 ;; *************** function _HMI_RightSwitch *****************
 26397 ;; Defined at:
 26398 ;;		line 32 in file "HMI.c"
 26399 ;; Parameters:    Size  Location     Type
 26400 ;;		None
 26401 ;; Auto vars:     Size  Location     Type
 26402 ;;		None
 26403 ;; Return value:  Size  Location     Type
 26404 ;;                  1    wreg      unsigned char 
 26405 ;; Registers used:
 26406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26407 ;; Tracked objects:
 26408 ;;		On entry : 0/0
 26409 ;;		On exit  : 0/0
 26410 ;;		Unchanged: 0/0
 26411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26416 ;;Total ram usage:        0 bytes
 26417 ;; Hardware stack levels used:    1
 26418 ;; Hardware stack levels required when called:    8
 26419 ;; This function calls:
 26420 ;;		_Port_GetPin
 26421 ;; This function is called by:
 26422 ;;		_HMI_Init
 26423 ;;		_Button_Poll
 26424 ;;		_getMode
 26425 ;; This function uses a non-reentrant model
 26426 ;;
 26427                           
 26428                           	psect	text134
 26429  016760                     __ptext134:
 26430                           	opt stack 0
 26431  016760                     _HMI_RightSwitch:
 26432                           	opt stack 18
 26433                           
 26434                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 26435                           
 26436                           ;incstack = 0
 26437  016760  0E91               	movlw	low _PortE
 26438  016762  0100               	movlb	0	; () banked
 26439  016764  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26440  016766  0E00               	movlw	high _PortE
 26441  016768  0100               	movlb	0	; () banked
 26442  01676A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26443  01676C  0E04               	movlw	4
 26444  01676E  0100               	movlb	0	; () banked
 26445  016770  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26446  016772  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 26447  016776  0012               	return	
 26448  016778                     __end_of_HMI_RightSwitch:
 26449                           	opt stack 0
 26450                           tosu	equ	0xFFF
 26451                           tosh	equ	0xFFE
 26452                           tosl	equ	0xFFD
 26453                           pclath	equ	0xFFA
 26454                           tblptru	equ	0xFF8
 26455                           tblptrh	equ	0xFF7
 26456                           tblptrl	equ	0xFF6
 26457                           tablat	equ	0xFF5
 26458                           prodh	equ	0xFF4
 26459                           prodl	equ	0xFF3
 26460                           intcon	equ	0xFF2
 26461                           postinc0	equ	0xFEE
 26462                           wreg	equ	0xFE8
 26463                           indf1	equ	0xFE7
 26464                           postdec1	equ	0xFE5
 26465                           fsr1h	equ	0xFE2
 26466                           fsr1l	equ	0xFE1
 26467                           indf2	equ	0xFDF
 26468                           postinc2	equ	0xFDE
 26469                           postdec2	equ	0xFDD
 26470                           plusw2	equ	0xFDB
 26471                           fsr2h	equ	0xFDA
 26472                           fsr2l	equ	0xFD9
 26473                           status	equ	0xFD8
 26474                           
 26475 ;; *************** function _HMI_LeftSwitch *****************
 26476 ;; Defined at:
 26477 ;;		line 27 in file "HMI.c"
 26478 ;; Parameters:    Size  Location     Type
 26479 ;;		None
 26480 ;; Auto vars:     Size  Location     Type
 26481 ;;		None
 26482 ;; Return value:  Size  Location     Type
 26483 ;;                  1    wreg      unsigned char 
 26484 ;; Registers used:
 26485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26486 ;; Tracked objects:
 26487 ;;		On entry : 0/0
 26488 ;;		On exit  : 0/0
 26489 ;;		Unchanged: 0/0
 26490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26495 ;;Total ram usage:        0 bytes
 26496 ;; Hardware stack levels used:    1
 26497 ;; Hardware stack levels required when called:    8
 26498 ;; This function calls:
 26499 ;;		_Port_GetPin
 26500 ;; This function is called by:
 26501 ;;		_HMI_Init
 26502 ;;		_Button_Poll
 26503 ;;		_getMode
 26504 ;; This function uses a non-reentrant model
 26505 ;;
 26506                           
 26507                           	psect	text135
 26508  016778                     __ptext135:
 26509                           	opt stack 0
 26510  016778                     _HMI_LeftSwitch:
 26511                           	opt stack 18
 26512                           
 26513                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26514                           
 26515                           ;incstack = 0
 26516  016778  0E91               	movlw	low _PortE
 26517  01677A  0100               	movlb	0	; () banked
 26518  01677C  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26519  01677E  0E00               	movlw	high _PortE
 26520  016780  0100               	movlb	0	; () banked
 26521  016782  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26522  016784  0E05               	movlw	5
 26523  016786  0100               	movlb	0	; () banked
 26524  016788  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26525  01678A  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 26526  01678E  0012               	return	
 26527  016790                     __end_of_HMI_LeftSwitch:
 26528                           	opt stack 0
 26529                           tosu	equ	0xFFF
 26530                           tosh	equ	0xFFE
 26531                           tosl	equ	0xFFD
 26532                           pclath	equ	0xFFA
 26533                           tblptru	equ	0xFF8
 26534                           tblptrh	equ	0xFF7
 26535                           tblptrl	equ	0xFF6
 26536                           tablat	equ	0xFF5
 26537                           prodh	equ	0xFF4
 26538                           prodl	equ	0xFF3
 26539                           intcon	equ	0xFF2
 26540                           postinc0	equ	0xFEE
 26541                           wreg	equ	0xFE8
 26542                           indf1	equ	0xFE7
 26543                           postdec1	equ	0xFE5
 26544                           fsr1h	equ	0xFE2
 26545                           fsr1l	equ	0xFE1
 26546                           indf2	equ	0xFDF
 26547                           postinc2	equ	0xFDE
 26548                           postdec2	equ	0xFDD
 26549                           plusw2	equ	0xFDB
 26550                           fsr2h	equ	0xFDA
 26551                           fsr2l	equ	0xFD9
 26552                           status	equ	0xFD8
 26553                           
 26554 ;; *************** function _MXK_TestButton *****************
 26555 ;; Defined at:
 26556 ;;		line 14 in file "Library/MXK.c"
 26557 ;; Parameters:    Size  Location     Type
 26558 ;;		None
 26559 ;; Auto vars:     Size  Location     Type
 26560 ;;		None
 26561 ;; Return value:  Size  Location     Type
 26562 ;;                  1    wreg      unsigned char 
 26563 ;; Registers used:
 26564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26565 ;; Tracked objects:
 26566 ;;		On entry : 0/0
 26567 ;;		On exit  : 0/0
 26568 ;;		Unchanged: 0/0
 26569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26574 ;;Total ram usage:        0 bytes
 26575 ;; Hardware stack levels used:    1
 26576 ;; Hardware stack levels required when called:    8
 26577 ;; This function calls:
 26578 ;;		_Port_GetPin
 26579 ;; This function is called by:
 26580 ;;		_FunctInitButton
 26581 ;;		_Button_Poll
 26582 ;;		_getMode
 26583 ;; This function uses a non-reentrant model
 26584 ;;
 26585                           
 26586                           	psect	text136
 26587  016790                     __ptext136:
 26588                           	opt stack 0
 26589  016790                     _MXK_TestButton:
 26590                           	opt stack 18
 26591                           
 26592                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26593                           
 26594                           ;incstack = 0
 26595  016790  0EAE               	movlw	low _PortB
 26596  016792  0100               	movlb	0	; () banked
 26597  016794  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26598  016796  0E03               	movlw	high _PortB
 26599  016798  0100               	movlb	0	; () banked
 26600  01679A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26601  01679C  0E04               	movlw	4
 26602  01679E  0100               	movlb	0	; () banked
 26603  0167A0  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26604  0167A2  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 26605  0167A6  0012               	return	
 26606  0167A8                     __end_of_MXK_TestButton:
 26607                           	opt stack 0
 26608                           tosu	equ	0xFFF
 26609                           tosh	equ	0xFFE
 26610                           tosl	equ	0xFFD
 26611                           pclath	equ	0xFFA
 26612                           tblptru	equ	0xFF8
 26613                           tblptrh	equ	0xFF7
 26614                           tblptrl	equ	0xFF6
 26615                           tablat	equ	0xFF5
 26616                           prodh	equ	0xFF4
 26617                           prodl	equ	0xFF3
 26618                           intcon	equ	0xFF2
 26619                           postinc0	equ	0xFEE
 26620                           wreg	equ	0xFE8
 26621                           indf1	equ	0xFE7
 26622                           postdec1	equ	0xFE5
 26623                           fsr1h	equ	0xFE2
 26624                           fsr1l	equ	0xFE1
 26625                           indf2	equ	0xFDF
 26626                           postinc2	equ	0xFDE
 26627                           postdec2	equ	0xFDD
 26628                           plusw2	equ	0xFDB
 26629                           fsr2h	equ	0xFDA
 26630                           fsr2l	equ	0xFD9
 26631                           status	equ	0xFD8
 26632                           
 26633 ;; *************** function _Port_GetQuad *****************
 26634 ;; Defined at:
 26635 ;;		line 498 in file "Library/Port.c"
 26636 ;; Parameters:    Size  Location     Type
 26637 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26638 ;;		 -> PortE(10), PortD(10), 
 26639 ;;  pQuad           1    2[BANK0 ] enum E6776
 26640 ;; Auto vars:     Size  Location     Type
 26641 ;;  Output          1    5[BANK0 ] unsigned char 
 26642 ;; Return value:  Size  Location     Type
 26643 ;;                  1    wreg      unsigned char 
 26644 ;; Registers used:
 26645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26646 ;; Tracked objects:
 26647 ;;		On entry : 0/0
 26648 ;;		On exit  : 0/0
 26649 ;;		Unchanged: 0/0
 26650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26651 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26654 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26655 ;;Total ram usage:        6 bytes
 26656 ;; Hardware stack levels used:    1
 26657 ;; Hardware stack levels required when called:    7
 26658 ;; This function calls:
 26659 ;;		Nothing
 26660 ;; This function is called by:
 26661 ;;		_HMI_DIPSwitch
 26662 ;;		_MXK_DIPSwitch
 26663 ;;		_Port_ToggleQuad
 26664 ;; This function uses a non-reentrant model
 26665 ;;
 26666                           
 26667                           	psect	text137
 26668  015DC6                     __ptext137:
 26669                           	opt stack 0
 26670  015DC6                     _Port_GetQuad:
 26671                           	opt stack 18
 26672                           
 26673                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26674                           
 26675                           ;incstack = 0
 26676  015DC6  0100               	movlb	0	; () banked
 26677  015DC8  EE20 F006          	lfsr	2,6
 26678  015DCC  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26679  015DCE  26D9               	addwf	fsr2l,f,c
 26680  015DD0  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26681  015DD2  22DA               	addwfc	fsr2h,f,c
 26682  015DD4  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26683  015DD8  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26684  015DDC  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26685  015DE0  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26686  015DE4  50DF               	movf	indf2,w,c
 26687  015DE6  0100               	movlb	0	; () banked
 26688  015DE8  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26689                           
 26690                           ; BSR set to: 0
 26691                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26692  015DEA  0100               	movlb	0	; () banked
 26693  015DEC  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26694  015DEE  0D04               	mullw	4
 26695  015DF0  28F3               	incf	prodl,w,c
 26696  015DF2  0100               	movlb	0	; () banked
 26697  015DF4  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26698  015DF6  D003               	goto	u9310
 26699  015DF8                     u9315:
 26700  015DF8  0100               	movlb	0	; () banked
 26701  015DFA  90D8               	bcf	status,0,c
 26702  015DFC  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26703  015DFE                     u9310:
 26704  015DFE  0100               	movlb	0	; () banked
 26705  015E00  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26706  015E02  D7FA               	goto	u9315
 26707                           
 26708                           ;Port.c: 502: Output &= 0xF;
 26709  015E04  0E0F               	movlw	15
 26710  015E06  0100               	movlb	0	; () banked
 26711  015E08  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;Port.c: 503: return Output;
 26715  015E0A  0100               	movlb	0	; () banked
 26716  015E0C  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26717  015E0E  0012               	return	
 26718  015E10                     __end_of_Port_GetQuad:
 26719                           	opt stack 0
 26720                           tosu	equ	0xFFF
 26721                           tosh	equ	0xFFE
 26722                           tosl	equ	0xFFD
 26723                           pclath	equ	0xFFA
 26724                           tblptru	equ	0xFF8
 26725                           tblptrh	equ	0xFF7
 26726                           tblptrl	equ	0xFF6
 26727                           tablat	equ	0xFF5
 26728                           prodh	equ	0xFF4
 26729                           prodl	equ	0xFF3
 26730                           intcon	equ	0xFF2
 26731                           postinc0	equ	0xFEE
 26732                           wreg	equ	0xFE8
 26733                           indf1	equ	0xFE7
 26734                           postdec1	equ	0xFE5
 26735                           fsr1h	equ	0xFE2
 26736                           fsr1l	equ	0xFE1
 26737                           indf2	equ	0xFDF
 26738                           postinc2	equ	0xFDE
 26739                           postdec2	equ	0xFDD
 26740                           plusw2	equ	0xFDB
 26741                           fsr2h	equ	0xFDA
 26742                           fsr2l	equ	0xFD9
 26743                           status	equ	0xFD8
 26744                           
 26745 ;; *************** function _Event_DIPSwitch *****************
 26746 ;; Defined at:
 26747 ;;		line 22 in file "Events.c"
 26748 ;; Parameters:    Size  Location     Type
 26749 ;;  pState          1    wreg     unsigned char 
 26750 ;; Auto vars:     Size  Location     Type
 26751 ;;  pState          1   25[BANK0 ] unsigned char 
 26752 ;;  Bar             1   26[BANK0 ] unsigned char 
 26753 ;; Return value:  Size  Location     Type
 26754 ;;                  1    wreg      void 
 26755 ;; Registers used:
 26756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26757 ;; Tracked objects:
 26758 ;;		On entry : 0/0
 26759 ;;		On exit  : 0/0
 26760 ;;		Unchanged: 0/0
 26761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26766 ;;Total ram usage:        2 bytes
 26767 ;; Hardware stack levels used:    1
 26768 ;; Hardware stack levels required when called:   13
 26769 ;; This function calls:
 26770 ;;		_HMI_GetBar
 26771 ;;		_HMI_SetBar
 26772 ;;		_LED_Toggle
 26773 ;; This function is called by:
 26774 ;;		_FunctInitButton
 26775 ;;		_Button_Poll
 26776 ;; This function uses a non-reentrant model
 26777 ;;
 26778                           
 26779                           	psect	text138
 26780  016406                     __ptext138:
 26781                           	opt stack 0
 26782  016406                     _Event_DIPSwitch:
 26783                           	opt stack 13
 26784                           
 26785                           ; BSR set to: 0
 26786                           ;incstack = 0
 26787                           ;Event_DIPSwitch@pState stored from wreg
 26788  016406  0100               	movlb	0	; () banked
 26789  016408  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26790                           
 26791                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26792  01640A  EC6E  F0B4         	call	_HMI_GetBar	;wreg free
 26793  01640E  0100               	movlb	0	; () banked
 26794  016410  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26795                           
 26796                           ; BSR set to: 0
 26797                           ;Events.c: 25: Bar &= 0x0F;
 26798  016412  0E0F               	movlw	15
 26799  016414  0100               	movlb	0	; () banked
 26800  016416  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26801                           
 26802                           ; BSR set to: 0
 26803                           ;Events.c: 26: pState <<= 4;
 26804  016418  0100               	movlb	0	; () banked
 26805  01641A  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26806  01641C  0EF0               	movlw	240
 26807  01641E  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26808                           
 26809                           ; BSR set to: 0
 26810                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26811  016420  0100               	movlb	0	; () banked
 26812  016422  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26813  016424  0100               	movlb	0	; () banked
 26814  016426  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26815  016428  EC50  F0B4         	call	_HMI_SetBar
 26816                           
 26817                           ;Events.c: 32: LED_Toggle(eLED1);
 26818  01642C  0E00               	movlw	0
 26819  01642E  EC50  F0AF         	call	_LED_Toggle
 26820  016432  0012               	return		;funcret
 26821  016434                     __end_of_Event_DIPSwitch:
 26822                           	opt stack 0
 26823                           tosu	equ	0xFFF
 26824                           tosh	equ	0xFFE
 26825                           tosl	equ	0xFFD
 26826                           pclath	equ	0xFFA
 26827                           tblptru	equ	0xFF8
 26828                           tblptrh	equ	0xFF7
 26829                           tblptrl	equ	0xFF6
 26830                           tablat	equ	0xFF5
 26831                           prodh	equ	0xFF4
 26832                           prodl	equ	0xFF3
 26833                           intcon	equ	0xFF2
 26834                           postinc0	equ	0xFEE
 26835                           wreg	equ	0xFE8
 26836                           indf1	equ	0xFE7
 26837                           postdec1	equ	0xFE5
 26838                           fsr1h	equ	0xFE2
 26839                           fsr1l	equ	0xFE1
 26840                           indf2	equ	0xFDF
 26841                           postinc2	equ	0xFDE
 26842                           postdec2	equ	0xFDD
 26843                           plusw2	equ	0xFDB
 26844                           fsr2h	equ	0xFDA
 26845                           fsr2l	equ	0xFD9
 26846                           status	equ	0xFD8
 26847                           
 26848 ;; *************** function _Event_NULL *****************
 26849 ;; Defined at:
 26850 ;;		line 9 in file "Events.c"
 26851 ;; Parameters:    Size  Location     Type
 26852 ;;  pState          1    wreg     unsigned char 
 26853 ;; Auto vars:     Size  Location     Type
 26854 ;;  pState          1    0[COMRAM] unsigned char 
 26855 ;; Return value:  Size  Location     Type
 26856 ;;                  1    wreg      void 
 26857 ;; Registers used:
 26858 ;;		wreg
 26859 ;; Tracked objects:
 26860 ;;		On entry : 0/0
 26861 ;;		On exit  : 0/0
 26862 ;;		Unchanged: 0/0
 26863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26868 ;;Total ram usage:        0 bytes
 26869 ;; Hardware stack levels used:    1
 26870 ;; Hardware stack levels required when called:    7
 26871 ;; This function calls:
 26872 ;;		Nothing
 26873 ;; This function is called by:
 26874 ;;		_HMI_Init
 26875 ;;		_Button_Poll
 26876 ;; This function uses a non-reentrant model
 26877 ;;
 26878                           
 26879                           	psect	text139
 26880  001404                     __ptext139:
 26881                           	opt stack 0
 26882  001404                     _Event_NULL:
 26883                           	opt stack 19
 26884                           
 26885                           ;incstack = 0
 26886  001404  0012               	return		;funcret
 26887  001406                     __end_of_Event_NULL:
 26888                           	opt stack 0
 26889                           tosu	equ	0xFFF
 26890                           tosh	equ	0xFFE
 26891                           tosl	equ	0xFFD
 26892                           pclath	equ	0xFFA
 26893                           tblptru	equ	0xFF8
 26894                           tblptrh	equ	0xFF7
 26895                           tblptrl	equ	0xFF6
 26896                           tablat	equ	0xFF5
 26897                           prodh	equ	0xFF4
 26898                           prodl	equ	0xFF3
 26899                           intcon	equ	0xFF2
 26900                           postinc0	equ	0xFEE
 26901                           wreg	equ	0xFE8
 26902                           indf1	equ	0xFE7
 26903                           postdec1	equ	0xFE5
 26904                           fsr1h	equ	0xFE2
 26905                           fsr1l	equ	0xFE1
 26906                           indf2	equ	0xFDF
 26907                           postinc2	equ	0xFDE
 26908                           postdec2	equ	0xFDD
 26909                           plusw2	equ	0xFDB
 26910                           fsr2h	equ	0xFDA
 26911                           fsr2l	equ	0xFD9
 26912                           status	equ	0xFD8
 26913                           
 26914 ;; *************** function _Event_TestButton *****************
 26915 ;; Defined at:
 26916 ;;		line 52 in file "Events.c"
 26917 ;; Parameters:    Size  Location     Type
 26918 ;;  pState          1    wreg     unsigned char 
 26919 ;; Auto vars:     Size  Location     Type
 26920 ;;  pState          1   25[BANK0 ] unsigned char 
 26921 ;; Return value:  Size  Location     Type
 26922 ;;                  1    wreg      void 
 26923 ;; Registers used:
 26924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26925 ;; Tracked objects:
 26926 ;;		On entry : 0/0
 26927 ;;		On exit  : 0/0
 26928 ;;		Unchanged: 0/0
 26929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26934 ;;Total ram usage:        1 bytes
 26935 ;; Hardware stack levels used:    1
 26936 ;; Hardware stack levels required when called:   13
 26937 ;; This function calls:
 26938 ;;		_HMI_SetButton
 26939 ;;		_HMI_SetNumber
 26940 ;;		_LED_Toggle
 26941 ;; This function is called by:
 26942 ;;		_FunctInitButton
 26943 ;;		_Button_Poll
 26944 ;; This function uses a non-reentrant model
 26945 ;;
 26946                           
 26947                           	psect	text140
 26948  0161F4                     __ptext140:
 26949                           	opt stack 0
 26950  0161F4                     _Event_TestButton:
 26951                           	opt stack 13
 26952                           
 26953                           ;incstack = 0
 26954                           ;Event_TestButton@pState stored from wreg
 26955  0161F4  0100               	movlb	0	; () banked
 26956  0161F6  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26957                           
 26958                           ;Events.c: 56: static UINT8 j = 0;
 26959                           ;Events.c: 60: if (pState == 0)
 26960  0161F8  0100               	movlb	0	; () banked
 26961  0161FA  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26962  0161FC  0100               	movlb	0	; () banked
 26963  0161FE  A4D8               	btfss	status,2,c
 26964  016200  D013               	goto	l1873
 26965                           
 26966                           ; BSR set to: 0
 26967                           ;Events.c: 61: {
 26968                           ;Events.c: 62: j++;
 26969  016202  0100               	movlb	0	; () banked
 26970  016204  2B89               	incf	Event_TestButton@j& (0+255),f,b
 26971                           
 26972                           ; BSR set to: 0
 26973                           ;Events.c: 63: val += j;
 26974  016206  0100               	movlb	0	; () banked
 26975  016208  5189               	movf	Event_TestButton@j& (0+255),w,b
 26976  01620A  0100               	movlb	0	; () banked
 26977  01620C  277D               	addwf	_val& (0+255),f,b
 26978  01620E  0E00               	movlw	0
 26979  016210  237E               	addwfc	(_val+1)& (0+255),f,b
 26980                           
 26981                           ; BSR set to: 0
 26982                           ;Events.c: 64: HMI_SetNumber( val );
 26983  016212  C07D  F0D0         	movff	_val,HMI_SetNumber@pInput
 26984  016216  C07E  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26985  01621A  EC46  F0B2         	call	_HMI_SetNumber	;wreg free
 26986                           
 26987                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26988  01621E  0100               	movlb	0	; () banked
 26989  016220  5189               	movf	Event_TestButton@j& (0+255),w,b
 26990  016222  0B03               	andlw	3
 26991  016224  EC73  F0A7         	call	_HMI_SetButton
 26992  016228                     l1873:
 26993                           
 26994                           ;Events.c: 68: }
 26995                           ;Events.c: 72: LED_Toggle(eLED1);
 26996  016228  0E00               	movlw	0
 26997  01622A  EC50  F0AF         	call	_LED_Toggle
 26998  01622E  0012               	return		;funcret
 26999  016230                     __end_of_Event_TestButton:
 27000                           	opt stack 0
 27001                           tosu	equ	0xFFF
 27002                           tosh	equ	0xFFE
 27003                           tosl	equ	0xFFD
 27004                           pclath	equ	0xFFA
 27005                           tblptru	equ	0xFF8
 27006                           tblptrh	equ	0xFF7
 27007                           tblptrl	equ	0xFF6
 27008                           tablat	equ	0xFF5
 27009                           prodh	equ	0xFF4
 27010                           prodl	equ	0xFF3
 27011                           intcon	equ	0xFF2
 27012                           postinc0	equ	0xFEE
 27013                           wreg	equ	0xFE8
 27014                           indf1	equ	0xFE7
 27015                           postdec1	equ	0xFE5
 27016                           fsr1h	equ	0xFE2
 27017                           fsr1l	equ	0xFE1
 27018                           indf2	equ	0xFDF
 27019                           postinc2	equ	0xFDE
 27020                           postdec2	equ	0xFDD
 27021                           plusw2	equ	0xFDB
 27022                           fsr2h	equ	0xFDA
 27023                           fsr2l	equ	0xFD9
 27024                           status	equ	0xFD8
 27025                           
 27026 ;; *************** function _HMI_SetNumber *****************
 27027 ;; Defined at:
 27028 ;;		line 221 in file "HMI.c"
 27029 ;; Parameters:    Size  Location     Type
 27030 ;;  pInput          2   22[BANK0 ] int 
 27031 ;; Auto vars:     Size  Location     Type
 27032 ;;		None
 27033 ;; Return value:  Size  Location     Type
 27034 ;;                  1    wreg      void 
 27035 ;; Registers used:
 27036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27037 ;; Tracked objects:
 27038 ;;		On entry : 0/0
 27039 ;;		On exit  : 0/0
 27040 ;;		Unchanged: 0/0
 27041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27042 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27046 ;;Total ram usage:        2 bytes
 27047 ;; Hardware stack levels used:    1
 27048 ;; Hardware stack levels required when called:    9
 27049 ;; This function calls:
 27050 ;;		_HMI_SetSegments
 27051 ;;		_itos
 27052 ;; This function is called by:
 27053 ;;		_Event_TestButton
 27054 ;;		_findClosestWall
 27055 ;;		_measureAndDisplayDistance
 27056 ;;		_mode1
 27057 ;;		_Event_HMI_UpButton
 27058 ;;		_Event_HMI_DownButton
 27059 ;; This function uses a non-reentrant model
 27060 ;;
 27061                           
 27062                           	psect	text141
 27063  01648C                     __ptext141:
 27064                           	opt stack 0
 27065  01648C                     _HMI_SetNumber:
 27066                           	opt stack 16
 27067                           
 27068                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 27069                           
 27070                           ;incstack = 0
 27071  01648C  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 27072  016490  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 27073  016494  0E40               	movlw	low _HMIBoard
 27074  016496  0100               	movlb	0	; () banked
 27075  016498  6FC8               	movwf	itos@destination& (0+255),b
 27076  01649A  0E03               	movlw	high _HMIBoard
 27077  01649C  0100               	movlb	0	; () banked
 27078  01649E  6FC9               	movwf	(itos@destination+1)& (0+255),b
 27079  0164A0  EC98  F09E         	call	_itos	;wreg free
 27080                           
 27081                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 27082  0164A4  0E40               	movlw	low _HMIBoard
 27083  0164A6  0100               	movlb	0	; () banked
 27084  0164A8  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 27085  0164AA  0E03               	movlw	high _HMIBoard
 27086  0164AC  0100               	movlb	0	; () banked
 27087  0164AE  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 27088  0164B0  EC8A  F0A2         	call	_HMI_SetSegments	;wreg free
 27089  0164B4  0012               	return		;funcret
 27090  0164B6                     __end_of_HMI_SetNumber:
 27091                           	opt stack 0
 27092                           tosu	equ	0xFFF
 27093                           tosh	equ	0xFFE
 27094                           tosl	equ	0xFFD
 27095                           pclath	equ	0xFFA
 27096                           tblptru	equ	0xFF8
 27097                           tblptrh	equ	0xFF7
 27098                           tblptrl	equ	0xFF6
 27099                           tablat	equ	0xFF5
 27100                           prodh	equ	0xFF4
 27101                           prodl	equ	0xFF3
 27102                           intcon	equ	0xFF2
 27103                           postinc0	equ	0xFEE
 27104                           wreg	equ	0xFE8
 27105                           indf1	equ	0xFE7
 27106                           postdec1	equ	0xFE5
 27107                           fsr1h	equ	0xFE2
 27108                           fsr1l	equ	0xFE1
 27109                           indf2	equ	0xFDF
 27110                           postinc2	equ	0xFDE
 27111                           postdec2	equ	0xFDD
 27112                           plusw2	equ	0xFDB
 27113                           fsr2h	equ	0xFDA
 27114                           fsr2l	equ	0xFD9
 27115                           status	equ	0xFD8
 27116                           
 27117 ;; *************** function _itos *****************
 27118 ;; Defined at:
 27119 ;;		line 369 in file "Library/Types.c"
 27120 ;; Parameters:    Size  Location     Type
 27121 ;;  input           2   12[BANK0 ] unsigned short 
 27122 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 27123 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27124 ;; Auto vars:     Size  Location     Type
 27125 ;;  Out             2   20[BANK0 ] unsigned short 
 27126 ;;  Length          2   18[BANK0 ] unsigned short 
 27127 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 27128 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27129 ;; Return value:  Size  Location     Type
 27130 ;;                  1    wreg      void 
 27131 ;; Registers used:
 27132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27133 ;; Tracked objects:
 27134 ;;		On entry : 0/0
 27135 ;;		On exit  : 0/0
 27136 ;;		Unchanged: 0/0
 27137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27139 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27141 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27142 ;;Total ram usage:       10 bytes
 27143 ;; Hardware stack levels used:    1
 27144 ;; Hardware stack levels required when called:    8
 27145 ;; This function calls:
 27146 ;;		___lwdiv
 27147 ;;		___lwmod
 27148 ;;		_reverse
 27149 ;; This function is called by:
 27150 ;;		_HMI_SetNumber
 27151 ;; This function uses a non-reentrant model
 27152 ;;
 27153                           
 27154                           	psect	text142
 27155  013D30                     __ptext142:
 27156                           	opt stack 0
 27157  013D30                     _itos:
 27158                           	opt stack 16
 27159                           
 27160                           ;Types.c: 371: UINT16 Out = input;
 27161                           
 27162                           ;incstack = 0
 27163  013D30  C0C6  F0CE         	movff	itos@input,itos@Out
 27164  013D34  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 27165                           
 27166                           ;Types.c: 372: UINT16 Length = 0;
 27167  013D38  0E00               	movlw	0
 27168  013D3A  0100               	movlb	0	; () banked
 27169  013D3C  6FCD               	movwf	(itos@Length+1)& (0+255),b
 27170  013D3E  0E00               	movlw	0
 27171  013D40  6FCC               	movwf	itos@Length& (0+255),b
 27172                           
 27173                           ; BSR set to: 0
 27174                           ;Types.c: 373: char *Data = destination;
 27175  013D42  C0C8  F0CA         	movff	itos@destination,itos@Data
 27176  013D46  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 27177                           
 27178                           ; BSR set to: 0
 27179                           ;Types.c: 374: if(Out == 0)
 27180  013D4A  0100               	movlb	0	; () banked
 27181  013D4C  51CE               	movf	itos@Out& (0+255),w,b
 27182  013D4E  0100               	movlb	0	; () banked
 27183  013D50  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 27184  013D52  A4D8               	btfss	status,2,c
 27185  013D54  D034               	goto	l929
 27186                           
 27187                           ; BSR set to: 0
 27188                           ;Types.c: 375: {
 27189                           ;Types.c: 376: Data[0] = (UINT16)'0';
 27190  013D56  C0CA  FFD9         	movff	itos@Data,fsr2l
 27191  013D5A  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 27192  013D5E  0E30               	movlw	48
 27193  013D60  6EDF               	movwf	indf2,c
 27194                           
 27195                           ; BSR set to: 0
 27196                           ;Types.c: 377: Length = 1;
 27197  013D62  0E00               	movlw	0
 27198  013D64  0100               	movlb	0	; () banked
 27199  013D66  6FCD               	movwf	(itos@Length+1)& (0+255),b
 27200  013D68  0E01               	movlw	1
 27201  013D6A  6FCC               	movwf	itos@Length& (0+255),b
 27202                           
 27203                           ;Types.c: 378: }
 27204  013D6C  D040               	goto	l928
 27205  013D6E                     
 27206                           ; BSR set to: 0
 27207                           ;Types.c: 382: {
 27208                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 27209                           
 27210                           ; BSR set to: 0
 27211  013D6E  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 27212  013D72  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 27213  013D76  0E00               	movlw	0
 27214  013D78  0100               	movlb	0	; () banked
 27215  013D7A  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 27216  013D7C  0E0A               	movlw	10
 27217  013D7E  6FC3               	movwf	___lwmod@divisor& (0+255),b
 27218  013D80  EC3B  F0AD         	call	___lwmod	;wreg free
 27219  013D84  0100               	movlb	0	; () banked
 27220  013D86  51C1               	movf	?___lwmod& (0+255),w,b
 27221  013D88  0F30               	addlw	48
 27222  013D8A  C0CA  FFD9         	movff	itos@Data,fsr2l
 27223  013D8E  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 27224  013D92  6EDF               	movwf	indf2,c
 27225                           
 27226                           ; BSR set to: 0
 27227                           ;Types.c: 384: Out /= 10;
 27228  013D94  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 27229  013D98  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 27230  013D9C  0E00               	movlw	0
 27231  013D9E  0100               	movlb	0	; () banked
 27232  013DA0  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 27233  013DA2  0E0A               	movlw	10
 27234  013DA4  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 27235  013DA6  ECD0  F0A9         	call	___lwdiv	;wreg free
 27236  013DAA  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 27237  013DAE  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 27238                           
 27239                           ;Types.c: 385: Length ++;
 27240  013DB2  0100               	movlb	0	; () banked
 27241  013DB4  4BCC               	infsnz	itos@Length& (0+255),f,b
 27242  013DB6  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 27243                           
 27244                           ; BSR set to: 0
 27245                           ;Types.c: 386: Data++;
 27246  013DB8  0100               	movlb	0	; () banked
 27247  013DBA  4BCA               	infsnz	itos@Data& (0+255),f,b
 27248  013DBC  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 27249  013DBE                     l929:
 27250                           
 27251                           ; BSR set to: 0
 27252                           
 27253                           ; BSR set to: 0
 27254  013DBE  0100               	movlb	0	; () banked
 27255  013DC0  51CE               	movf	itos@Out& (0+255),w,b
 27256  013DC2  0100               	movlb	0	; () banked
 27257  013DC4  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 27258  013DC6  B4D8               	btfsc	status,2,c
 27259  013DC8  D008               	goto	u9110
 27260                           
 27261                           ; BSR set to: 0
 27262  013DCA  0100               	movlb	0	; () banked
 27263  013DCC  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27264  013DCE  E105               	bnz	l12463
 27265  013DD0  0E06               	movlw	6
 27266  013DD2  0100               	movlb	0	; () banked
 27267  013DD4  5DCC               	subwf	itos@Length& (0+255),w,b
 27268  013DD6  A0D8               	btfss	status,0,c
 27269  013DD8  D7CA               	goto	l930
 27270  013DDA                     u9110:
 27271  013DDA                     l12463:
 27272                           
 27273                           ; BSR set to: 0
 27274                           ;Types.c: 387: }
 27275                           ;Types.c: 388: reverse(destination, Length);
 27276  013DDA  C0C8  F0BA         	movff	itos@destination,reverse@input
 27277  013DDE  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 27278  013DE2  C0CC  F0BC         	movff	itos@Length,reverse@length
 27279  013DE6  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 27280  013DEA  EC9D  F0AB         	call	_reverse	;wreg free
 27281  013DEE                     l928:
 27282                           
 27283                           ;Types.c: 389: }
 27284                           ;Types.c: 390: destination[Length] = '\0';
 27285  013DEE  0100               	movlb	0	; () banked
 27286  013DF0  51CC               	movf	itos@Length& (0+255),w,b
 27287  013DF2  0100               	movlb	0	; () banked
 27288  013DF4  25C8               	addwf	itos@destination& (0+255),w,b
 27289  013DF6  6ED9               	movwf	fsr2l,c
 27290  013DF8  0100               	movlb	0	; () banked
 27291  013DFA  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27292  013DFC  0100               	movlb	0	; () banked
 27293  013DFE  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 27294  013E00  6EDA               	movwf	fsr2h,c
 27295  013E02  0E00               	movlw	0
 27296  013E04  6EDF               	movwf	indf2,c
 27297                           
 27298                           ; BSR set to: 0
 27299  013E06  0012               	return		;funcret
 27300  013E08                     __end_of_itos:
 27301                           	opt stack 0
 27302                           tosu	equ	0xFFF
 27303                           tosh	equ	0xFFE
 27304                           tosl	equ	0xFFD
 27305                           pclath	equ	0xFFA
 27306                           tblptru	equ	0xFF8
 27307                           tblptrh	equ	0xFF7
 27308                           tblptrl	equ	0xFF6
 27309                           tablat	equ	0xFF5
 27310                           prodh	equ	0xFF4
 27311                           prodl	equ	0xFF3
 27312                           intcon	equ	0xFF2
 27313                           postinc0	equ	0xFEE
 27314                           wreg	equ	0xFE8
 27315                           indf1	equ	0xFE7
 27316                           postdec1	equ	0xFE5
 27317                           fsr1h	equ	0xFE2
 27318                           fsr1l	equ	0xFE1
 27319                           indf2	equ	0xFDF
 27320                           postinc2	equ	0xFDE
 27321                           postdec2	equ	0xFDD
 27322                           plusw2	equ	0xFDB
 27323                           fsr2h	equ	0xFDA
 27324                           fsr2l	equ	0xFD9
 27325                           status	equ	0xFD8
 27326                           
 27327 ;; *************** function _reverse *****************
 27328 ;; Defined at:
 27329 ;;		line 357 in file "Library/Types.c"
 27330 ;; Parameters:    Size  Location     Type
 27331 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27332 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27333 ;;  length          2    2[BANK0 ] unsigned short 
 27334 ;; Auto vars:     Size  Location     Type
 27335 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27336 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27337 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27338 ;; Return value:  Size  Location     Type
 27339 ;;                  1    wreg      void 
 27340 ;; Registers used:
 27341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27342 ;; Tracked objects:
 27343 ;;		On entry : 0/0
 27344 ;;		On exit  : 0/0
 27345 ;;		Unchanged: 0/0
 27346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27347 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27348 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27350 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27351 ;;Total ram usage:        7 bytes
 27352 ;; Hardware stack levels used:    1
 27353 ;; Hardware stack levels required when called:    7
 27354 ;; This function calls:
 27355 ;;		Nothing
 27356 ;; This function is called by:
 27357 ;;		_itos
 27358 ;; This function uses a non-reentrant model
 27359 ;;
 27360                           
 27361                           	psect	text143
 27362  01573A                     __ptext143:
 27363                           	opt stack 0
 27364  01573A                     _reverse:
 27365                           	opt stack 16
 27366                           
 27367                           ;Types.c: 359: char tempVar,
 27368                           ;Types.c: 360: *iterator = input + length;
 27369                           
 27370                           ; BSR set to: 0
 27371                           ;incstack = 0
 27372  01573A  0100               	movlb	0	; () banked
 27373  01573C  51BC               	movf	reverse@length& (0+255),w,b
 27374  01573E  0100               	movlb	0	; () banked
 27375  015740  25BA               	addwf	reverse@input& (0+255),w,b
 27376  015742  0100               	movlb	0	; () banked
 27377  015744  6FBF               	movwf	reverse@iterator& (0+255),b
 27378  015746  0100               	movlb	0	; () banked
 27379  015748  51BD               	movf	(reverse@length+1)& (0+255),w,b
 27380  01574A  0100               	movlb	0	; () banked
 27381  01574C  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 27382  01574E  0100               	movlb	0	; () banked
 27383  015750  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 27384                           
 27385                           ;Types.c: 362: while ( --iterator > input )
 27386  015752  D01A               	goto	l921
 27387  015754                     
 27388                           ; BSR set to: 0
 27389                           ;Types.c: 363: {
 27390                           ;Types.c: 364: tempVar = *input;
 27391                           
 27392                           ; BSR set to: 0
 27393  015754  C0BA  FFD9         	movff	reverse@input,fsr2l
 27394  015758  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 27395  01575C  50DF               	movf	indf2,w,c
 27396  01575E  0100               	movlb	0	; () banked
 27397  015760  6FBE               	movwf	reverse@tempVar& (0+255),b
 27398                           
 27399                           ; BSR set to: 0
 27400                           ;Types.c: 365: *input++=*iterator;
 27401  015762  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27402  015766  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27403  01576A  C0BA  FFE1         	movff	reverse@input,fsr1l
 27404  01576E  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 27405  015772  CFDF FFE7          	movff	indf2,indf1
 27406                           
 27407                           ; BSR set to: 0
 27408  015776  0100               	movlb	0	; () banked
 27409  015778  4BBA               	infsnz	reverse@input& (0+255),f,b
 27410  01577A  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 27411                           
 27412                           ; BSR set to: 0
 27413                           ;Types.c: 366: *iterator=tempVar;
 27414  01577C  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27415  015780  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27416  015784  C0BE  FFDF         	movff	reverse@tempVar,indf2
 27417  015788                     l921:
 27418                           
 27419                           ; BSR set to: 0
 27420                           
 27421                           ; BSR set to: 0
 27422  015788  0100               	movlb	0	; () banked
 27423  01578A  07BF               	decf	reverse@iterator& (0+255),f,b
 27424  01578C  A0D8               	btfss	status,0,c
 27425  01578E  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 27426  015790  0100               	movlb	0	; () banked
 27427  015792  51BF               	movf	reverse@iterator& (0+255),w,b
 27428  015794  0100               	movlb	0	; () banked
 27429  015796  5DBA               	subwf	reverse@input& (0+255),w,b
 27430  015798  0100               	movlb	0	; () banked
 27431  01579A  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 27432  01579C  0100               	movlb	0	; () banked
 27433  01579E  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 27434  0157A0  B0D8               	btfsc	status,0,c
 27435  0157A2  0012               	return	
 27436  0157A4  D7D7               	goto	l922
 27437  0157A6                     __end_of_reverse:
 27438                           	opt stack 0
 27439                           tosu	equ	0xFFF
 27440                           tosh	equ	0xFFE
 27441                           tosl	equ	0xFFD
 27442                           pclath	equ	0xFFA
 27443                           tblptru	equ	0xFF8
 27444                           tblptrh	equ	0xFF7
 27445                           tblptrl	equ	0xFF6
 27446                           tablat	equ	0xFF5
 27447                           prodh	equ	0xFF4
 27448                           prodl	equ	0xFF3
 27449                           intcon	equ	0xFF2
 27450                           postinc0	equ	0xFEE
 27451                           wreg	equ	0xFE8
 27452                           indf1	equ	0xFE7
 27453                           postdec1	equ	0xFE5
 27454                           fsr1h	equ	0xFE2
 27455                           fsr1l	equ	0xFE1
 27456                           indf2	equ	0xFDF
 27457                           postinc2	equ	0xFDE
 27458                           postdec2	equ	0xFDD
 27459                           plusw2	equ	0xFDB
 27460                           fsr2h	equ	0xFDA
 27461                           fsr2l	equ	0xFD9
 27462                           status	equ	0xFD8
 27463                           
 27464 ;; *************** function ___lwmod *****************
 27465 ;; Defined at:
 27466 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27467 ;; Parameters:    Size  Location     Type
 27468 ;;  dividend        2    7[BANK0 ] unsigned int 
 27469 ;;  divisor         2    9[BANK0 ] unsigned int 
 27470 ;; Auto vars:     Size  Location     Type
 27471 ;;  counter         1   11[BANK0 ] unsigned char 
 27472 ;; Return value:  Size  Location     Type
 27473 ;;                  2    7[BANK0 ] unsigned int 
 27474 ;; Registers used:
 27475 ;;		wreg, status,2, status,0
 27476 ;; Tracked objects:
 27477 ;;		On entry : 0/0
 27478 ;;		On exit  : 0/0
 27479 ;;		Unchanged: 0/0
 27480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27481 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27484 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27485 ;;Total ram usage:        5 bytes
 27486 ;; Hardware stack levels used:    1
 27487 ;; Hardware stack levels required when called:    7
 27488 ;; This function calls:
 27489 ;;		Nothing
 27490 ;; This function is called by:
 27491 ;;		_itos
 27492 ;;		_printf
 27493 ;; This function uses a non-reentrant model
 27494 ;;
 27495                           
 27496                           	psect	text144
 27497  015A76                     __ptext144:
 27498                           	opt stack 0
 27499  015A76                     ___lwmod:
 27500                           	opt stack 22
 27501                           
 27502                           ; BSR set to: 0
 27503                           ;incstack = 0
 27504  015A76  0100               	movlb	0	; () banked
 27505  015A78  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27506  015A7A  0100               	movlb	0	; () banked
 27507  015A7C  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27508  015A7E  B4D8               	btfsc	status,2,c
 27509  015A80  D026               	goto	l2880
 27510                           
 27511                           ; BSR set to: 0
 27512  015A82  0E01               	movlw	1
 27513  015A84  0100               	movlb	0	; () banked
 27514  015A86  6FC5               	movwf	___lwmod@counter& (0+255),b
 27515  015A88  D006               	goto	l2875
 27516  015A8A                     
 27517                           ; BSR set to: 0
 27518                           
 27519                           ; BSR set to: 0
 27520  015A8A  0100               	movlb	0	; () banked
 27521  015A8C  90D8               	bcf	status,0,c
 27522  015A8E  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27523  015A90  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27524  015A92  0100               	movlb	0	; () banked
 27525  015A94  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27526  015A96                     l2875:
 27527                           
 27528                           ; BSR set to: 0
 27529                           
 27530                           ; BSR set to: 0
 27531  015A96  0100               	movlb	0	; () banked
 27532  015A98  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27533  015A9A  D7F7               	goto	l2876
 27534  015A9C                     u9000:
 27535                           
 27536                           ; BSR set to: 0
 27537                           
 27538                           ; BSR set to: 0
 27539                           
 27540                           ; BSR set to: 0
 27541  015A9C  0100               	movlb	0	; () banked
 27542  015A9E  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27543  015AA0  0100               	movlb	0	; () banked
 27544  015AA2  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27545  015AA4  0100               	movlb	0	; () banked
 27546  015AA6  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27547  015AA8  0100               	movlb	0	; () banked
 27548  015AAA  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27549  015AAC  A0D8               	btfss	status,0,c
 27550  015AAE  D008               	goto	l2879
 27551                           
 27552                           ; BSR set to: 0
 27553  015AB0  0100               	movlb	0	; () banked
 27554  015AB2  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27555  015AB4  0100               	movlb	0	; () banked
 27556  015AB6  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27557  015AB8  0100               	movlb	0	; () banked
 27558  015ABA  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27559  015ABC  0100               	movlb	0	; () banked
 27560  015ABE  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27561  015AC0                     l2879:
 27562                           
 27563                           ; BSR set to: 0
 27564                           
 27565                           ; BSR set to: 0
 27566  015AC0  0100               	movlb	0	; () banked
 27567  015AC2  90D8               	bcf	status,0,c
 27568  015AC4  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27569  015AC6  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27570                           
 27571                           ; BSR set to: 0
 27572  015AC8  0100               	movlb	0	; () banked
 27573  015ACA  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27574  015ACC  D7E7               	goto	u9000
 27575  015ACE                     l2880:
 27576                           
 27577                           ; BSR set to: 0
 27578                           
 27579                           ; BSR set to: 0
 27580  015ACE  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27581  015AD2  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27582                           
 27583                           ; BSR set to: 0
 27584  015AD6  0012               	return		;funcret
 27585  015AD8                     __end_of___lwmod:
 27586                           	opt stack 0
 27587                           tosu	equ	0xFFF
 27588                           tosh	equ	0xFFE
 27589                           tosl	equ	0xFFD
 27590                           pclath	equ	0xFFA
 27591                           tblptru	equ	0xFF8
 27592                           tblptrh	equ	0xFF7
 27593                           tblptrl	equ	0xFF6
 27594                           tablat	equ	0xFF5
 27595                           prodh	equ	0xFF4
 27596                           prodl	equ	0xFF3
 27597                           intcon	equ	0xFF2
 27598                           postinc0	equ	0xFEE
 27599                           wreg	equ	0xFE8
 27600                           indf1	equ	0xFE7
 27601                           postdec1	equ	0xFE5
 27602                           fsr1h	equ	0xFE2
 27603                           fsr1l	equ	0xFE1
 27604                           indf2	equ	0xFDF
 27605                           postinc2	equ	0xFDE
 27606                           postdec2	equ	0xFDD
 27607                           plusw2	equ	0xFDB
 27608                           fsr2h	equ	0xFDA
 27609                           fsr2l	equ	0xFD9
 27610                           status	equ	0xFD8
 27611                           
 27612 ;; *************** function ___lwdiv *****************
 27613 ;; Defined at:
 27614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27615 ;; Parameters:    Size  Location     Type
 27616 ;;  dividend        2    0[BANK0 ] unsigned int 
 27617 ;;  divisor         2    2[BANK0 ] unsigned int 
 27618 ;; Auto vars:     Size  Location     Type
 27619 ;;  quotient        2    5[BANK0 ] unsigned int 
 27620 ;;  counter         1    4[BANK0 ] unsigned char 
 27621 ;; Return value:  Size  Location     Type
 27622 ;;                  2    0[BANK0 ] unsigned int 
 27623 ;; Registers used:
 27624 ;;		wreg, status,2, status,0
 27625 ;; Tracked objects:
 27626 ;;		On entry : 0/0
 27627 ;;		On exit  : 0/0
 27628 ;;		Unchanged: 0/0
 27629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27630 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27631 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27633 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27634 ;;Total ram usage:        7 bytes
 27635 ;; Hardware stack levels used:    1
 27636 ;; Hardware stack levels required when called:    7
 27637 ;; This function calls:
 27638 ;;		Nothing
 27639 ;; This function is called by:
 27640 ;;		_itos
 27641 ;;		_printf
 27642 ;; This function uses a non-reentrant model
 27643 ;;
 27644                           
 27645                           	psect	text145
 27646  0153A0                     __ptext145:
 27647                           	opt stack 0
 27648  0153A0                     ___lwdiv:
 27649                           	opt stack 22
 27650                           
 27651                           ; BSR set to: 0
 27652                           ;incstack = 0
 27653  0153A0  0E00               	movlw	0
 27654  0153A2  0100               	movlb	0	; () banked
 27655  0153A4  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27656  0153A6  0E00               	movlw	0
 27657  0153A8  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27658                           
 27659                           ; BSR set to: 0
 27660  0153AA  0100               	movlb	0	; () banked
 27661  0153AC  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27662  0153AE  0100               	movlb	0	; () banked
 27663  0153B0  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27664  0153B2  B4D8               	btfsc	status,2,c
 27665  0153B4  D02C               	goto	l2870
 27666                           
 27667                           ; BSR set to: 0
 27668  0153B6  0E01               	movlw	1
 27669  0153B8  0100               	movlb	0	; () banked
 27670  0153BA  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27671  0153BC  D006               	goto	l2865
 27672  0153BE                     
 27673                           ; BSR set to: 0
 27674                           
 27675                           ; BSR set to: 0
 27676  0153BE  0100               	movlb	0	; () banked
 27677  0153C0  90D8               	bcf	status,0,c
 27678  0153C2  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27679  0153C4  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27680  0153C6  0100               	movlb	0	; () banked
 27681  0153C8  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27682  0153CA                     l2865:
 27683                           
 27684                           ; BSR set to: 0
 27685                           
 27686                           ; BSR set to: 0
 27687  0153CA  0100               	movlb	0	; () banked
 27688  0153CC  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27689  0153CE  D7F7               	goto	l2866
 27690  0153D0                     u8970:
 27691                           
 27692                           ; BSR set to: 0
 27693                           
 27694                           ; BSR set to: 0
 27695                           
 27696                           ; BSR set to: 0
 27697  0153D0  0100               	movlb	0	; () banked
 27698  0153D2  90D8               	bcf	status,0,c
 27699  0153D4  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27700  0153D6  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27701                           
 27702                           ; BSR set to: 0
 27703  0153D8  0100               	movlb	0	; () banked
 27704  0153DA  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27705  0153DC  0100               	movlb	0	; () banked
 27706  0153DE  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27707  0153E0  0100               	movlb	0	; () banked
 27708  0153E2  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27709  0153E4  0100               	movlb	0	; () banked
 27710  0153E6  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27711  0153E8  A0D8               	btfss	status,0,c
 27712  0153EA  D00A               	goto	l2869
 27713                           
 27714                           ; BSR set to: 0
 27715  0153EC  0100               	movlb	0	; () banked
 27716  0153EE  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27717  0153F0  0100               	movlb	0	; () banked
 27718  0153F2  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27719  0153F4  0100               	movlb	0	; () banked
 27720  0153F6  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27721  0153F8  0100               	movlb	0	; () banked
 27722  0153FA  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27723                           
 27724                           ; BSR set to: 0
 27725  0153FC  0100               	movlb	0	; () banked
 27726  0153FE  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27727  015400                     l2869:
 27728                           
 27729                           ; BSR set to: 0
 27730                           
 27731                           ; BSR set to: 0
 27732  015400  0100               	movlb	0	; () banked
 27733  015402  90D8               	bcf	status,0,c
 27734  015404  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27735  015406  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27736                           
 27737                           ; BSR set to: 0
 27738  015408  0100               	movlb	0	; () banked
 27739  01540A  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27740  01540C  D7E1               	goto	u8970
 27741  01540E                     l2870:
 27742                           
 27743                           ; BSR set to: 0
 27744                           
 27745                           ; BSR set to: 0
 27746  01540E  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27747  015412  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27748                           
 27749                           ; BSR set to: 0
 27750  015416  0012               	return		;funcret
 27751  015418                     __end_of___lwdiv:
 27752                           	opt stack 0
 27753                           tosu	equ	0xFFF
 27754                           tosh	equ	0xFFE
 27755                           tosl	equ	0xFFD
 27756                           pclath	equ	0xFFA
 27757                           tblptru	equ	0xFF8
 27758                           tblptrh	equ	0xFF7
 27759                           tblptrl	equ	0xFF6
 27760                           tablat	equ	0xFF5
 27761                           prodh	equ	0xFF4
 27762                           prodl	equ	0xFF3
 27763                           intcon	equ	0xFF2
 27764                           postinc0	equ	0xFEE
 27765                           wreg	equ	0xFE8
 27766                           indf1	equ	0xFE7
 27767                           postdec1	equ	0xFE5
 27768                           fsr1h	equ	0xFE2
 27769                           fsr1l	equ	0xFE1
 27770                           indf2	equ	0xFDF
 27771                           postinc2	equ	0xFDE
 27772                           postdec2	equ	0xFDD
 27773                           plusw2	equ	0xFDB
 27774                           fsr2h	equ	0xFDA
 27775                           fsr2l	equ	0xFD9
 27776                           status	equ	0xFD8
 27777                           
 27778 ;; *************** function _HMI_SetSegments *****************
 27779 ;; Defined at:
 27780 ;;		line 226 in file "HMI.c"
 27781 ;; Parameters:    Size  Location     Type
 27782 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27783 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27784 ;; Auto vars:     Size  Location     Type
 27785 ;;  in              2    4[BANK0 ] unsigned short 
 27786 ;; Return value:  Size  Location     Type
 27787 ;;                  1    wreg      void 
 27788 ;; Registers used:
 27789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27790 ;; Tracked objects:
 27791 ;;		On entry : 0/0
 27792 ;;		On exit  : 0/0
 27793 ;;		Unchanged: 0/0
 27794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27795 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27796 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27798 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27799 ;;Total ram usage:        5 bytes
 27800 ;; Hardware stack levels used:    1
 27801 ;; Hardware stack levels required when called:    8
 27802 ;; This function calls:
 27803 ;;		_ToSegment
 27804 ;; This function is called by:
 27805 ;;		_HMI_SetNumber
 27806 ;; This function uses a non-reentrant model
 27807 ;;
 27808                           
 27809                           	psect	text146
 27810  014514                     __ptext146:
 27811                           	opt stack 0
 27812  014514                     _HMI_SetSegments:
 27813                           	opt stack 16
 27814                           
 27815                           ;HMI.c: 228: UINT16 in=0;
 27816                           
 27817                           ; BSR set to: 0
 27818                           ;incstack = 0
 27819  014514  0E00               	movlw	0
 27820  014516  0100               	movlb	0	; () banked
 27821  014518  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27822  01451A  0E00               	movlw	0
 27823  01451C  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27824                           
 27825                           ;HMI.c: 229: while(*pString)
 27826  01451E  D038               	goto	l1202
 27827  014520                     
 27828                           ; BSR set to: 0
 27829                           ;HMI.c: 230: {
 27830                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27831                           
 27832                           ; BSR set to: 0
 27833  014520  0E40               	movlw	low _HMIBoard
 27834  014522  0100               	movlb	0	; () banked
 27835  014524  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27836  014526  6ED9               	movwf	fsr2l,c
 27837  014528  0E03               	movlw	high _HMIBoard
 27838  01452A  0100               	movlb	0	; () banked
 27839  01452C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27840  01452E  6EDA               	movwf	fsr2h,c
 27841  014530  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27842  014534  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27843  014538  50E7               	movf	indf1,w,c
 27844  01453A  EC11  F08C         	call	_ToSegment
 27845  01453E  6EDF               	movwf	indf2,c
 27846                           
 27847                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27848  014540  0E40               	movlw	low _HMIBoard
 27849  014542  0100               	movlb	0	; () banked
 27850  014544  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27851  014546  6ED9               	movwf	fsr2l,c
 27852  014548  0E03               	movlw	high _HMIBoard
 27853  01454A  0100               	movlb	0	; () banked
 27854  01454C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27855  01454E  6EDA               	movwf	fsr2h,c
 27856  014550  0E80               	movlw	128
 27857  014552  18DE               	xorwf	postinc2,w,c
 27858  014554  A4D8               	btfss	status,2,c
 27859  014556  D00E               	goto	l1201
 27860                           
 27861                           ; BSR set to: 0
 27862                           ;HMI.c: 234: {
 27863                           ;HMI.c: 235: in--;
 27864  014558  0100               	movlb	0	; () banked
 27865  01455A  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27866  01455C  A0D8               	btfss	status,0,c
 27867  01455E  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27868                           
 27869                           ; BSR set to: 0
 27870                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27871  014560  0E40               	movlw	low _HMIBoard
 27872  014562  0100               	movlb	0	; () banked
 27873  014564  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27874  014566  6ED9               	movwf	fsr2l,c
 27875  014568  0E03               	movlw	high _HMIBoard
 27876  01456A  0100               	movlb	0	; () banked
 27877  01456C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27878  01456E  6EDA               	movwf	fsr2h,c
 27879  014570  0E00               	movlw	0
 27880  014572  8EDB               	bsf	plusw2,7,c
 27881  014574                     l1201:
 27882                           
 27883                           ; BSR set to: 0
 27884                           ;HMI.c: 237: }
 27885                           ;HMI.c: 239: pString++;
 27886                           
 27887                           ; BSR set to: 0
 27888  014574  0100               	movlb	0	; () banked
 27889  014576  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27890  014578  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27891                           
 27892                           ; BSR set to: 0
 27893                           ;HMI.c: 240: in++;
 27894  01457A  0100               	movlb	0	; () banked
 27895  01457C  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27896  01457E  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27897                           
 27898                           ; BSR set to: 0
 27899                           ;HMI.c: 241: if (in>=6)
 27900  014580  0100               	movlb	0	; () banked
 27901  014582  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27902  014584  E11A               	bnz	l12515
 27903  014586  0E06               	movlw	6
 27904  014588  0100               	movlb	0	; () banked
 27905  01458A  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27906  01458C  B0D8               	btfsc	status,0,c
 27907  01458E  D015               	goto	l1204
 27908  014590                     l1202:
 27909                           
 27910                           ; BSR set to: 0
 27911                           
 27912                           ; BSR set to: 0
 27913                           
 27914                           ; BSR set to: 0
 27915  014590  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27916  014594  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27917  014598  50DF               	movf	indf2,w,c
 27918  01459A  B4D8               	btfsc	status,2,c
 27919  01459C  D00E               	goto	l1204
 27920  01459E  D7C0               	goto	l1200
 27921  0145A0                     
 27922                           ; BSR set to: 0
 27923                           ;HMI.c: 245: {
 27924                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27925                           
 27926                           ; BSR set to: 0
 27927  0145A0  0E40               	movlw	low _HMIBoard
 27928  0145A2  0100               	movlb	0	; () banked
 27929  0145A4  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27930  0145A6  6ED9               	movwf	fsr2l,c
 27931  0145A8  0E03               	movlw	high _HMIBoard
 27932  0145AA  0100               	movlb	0	; () banked
 27933  0145AC  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27934  0145AE  6EDA               	movwf	fsr2h,c
 27935  0145B0  0E00               	movlw	0
 27936  0145B2  6EDF               	movwf	indf2,c
 27937                           
 27938                           ; BSR set to: 0
 27939                           ;HMI.c: 247: in++;
 27940  0145B4  0100               	movlb	0	; () banked
 27941  0145B6  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27942  0145B8  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27943  0145BA                     l1204:
 27944  0145BA                     l12515:
 27945                           
 27946                           ; BSR set to: 0
 27947  0145BA  0100               	movlb	0	; () banked
 27948  0145BC  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27949  0145BE  E106               	bnz	l1207
 27950  0145C0  0E06               	movlw	6
 27951  0145C2  0100               	movlb	0	; () banked
 27952  0145C4  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27953  0145C6  B0D8               	btfsc	status,0,c
 27954  0145C8  0012               	return	
 27955  0145CA  D7EA               	goto	l1205
 27956  0145CC                     l1207:
 27957                           
 27958                           ; BSR set to: 0
 27959  0145CC  0012               	return		;funcret
 27960  0145CE                     __end_of_HMI_SetSegments:
 27961                           	opt stack 0
 27962                           tosu	equ	0xFFF
 27963                           tosh	equ	0xFFE
 27964                           tosl	equ	0xFFD
 27965                           pclath	equ	0xFFA
 27966                           tblptru	equ	0xFF8
 27967                           tblptrh	equ	0xFF7
 27968                           tblptrl	equ	0xFF6
 27969                           tablat	equ	0xFF5
 27970                           prodh	equ	0xFF4
 27971                           prodl	equ	0xFF3
 27972                           intcon	equ	0xFF2
 27973                           postinc0	equ	0xFEE
 27974                           wreg	equ	0xFE8
 27975                           indf1	equ	0xFE7
 27976                           postdec1	equ	0xFE5
 27977                           fsr1h	equ	0xFE2
 27978                           fsr1l	equ	0xFE1
 27979                           indf2	equ	0xFDF
 27980                           postinc2	equ	0xFDE
 27981                           postdec2	equ	0xFDD
 27982                           plusw2	equ	0xFDB
 27983                           fsr2h	equ	0xFDA
 27984                           fsr2l	equ	0xFD9
 27985                           status	equ	0xFD8
 27986                           
 27987 ;; *************** function _ToSegment *****************
 27988 ;; Defined at:
 27989 ;;		line 284 in file "Library/Types.c"
 27990 ;; Parameters:    Size  Location     Type
 27991 ;;  pCHR            1    wreg     unsigned char 
 27992 ;; Auto vars:     Size  Location     Type
 27993 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27994 ;; Return value:  Size  Location     Type
 27995 ;;                  1    wreg      unsigned char 
 27996 ;; Registers used:
 27997 ;;		wreg, status,2, status,0
 27998 ;; Tracked objects:
 27999 ;;		On entry : 0/0
 28000 ;;		On exit  : 0/0
 28001 ;;		Unchanged: 0/0
 28002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28006 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28007 ;;Total ram usage:        1 bytes
 28008 ;; Hardware stack levels used:    1
 28009 ;; Hardware stack levels required when called:    7
 28010 ;; This function calls:
 28011 ;;		Nothing
 28012 ;; This function is called by:
 28013 ;;		_HMI_SetSegments
 28014 ;; This function uses a non-reentrant model
 28015 ;;
 28016                           
 28017                           	psect	text147
 28018  011822                     __ptext147:
 28019                           	opt stack 0
 28020  011822                     _ToSegment:
 28021                           	opt stack 16
 28022                           
 28023                           ; BSR set to: 0
 28024                           ;incstack = 0
 28025                           ;ToSegment@pCHR stored from wreg
 28026  011822  0100               	movlb	0	; () banked
 28027  011824  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 28028                           
 28029                           ;Types.c: 286: switch(pCHR)
 28030  011826  D07E               	goto	l853
 28031  011828  0E3F               	movlw	63
 28032  01182A  0012               	return	
 28033  01182C  0E06               	movlw	6
 28034  01182E  0012               	return	
 28035  011830  0E5B               	movlw	91
 28036  011832  0012               	return	
 28037  011834  0E4F               	movlw	79
 28038  011836  0012               	return	
 28039  011838  0E66               	movlw	102
 28040  01183A  0012               	return	
 28041  01183C  0E6D               	movlw	109
 28042  01183E  0012               	return	
 28043  011840  0E7D               	movlw	125
 28044  011842  0012               	return	
 28045  011844  0E07               	movlw	7
 28046  011846  0012               	return	
 28047  011848  0E7F               	movlw	127
 28048  01184A  0012               	return	
 28049  01184C  0E6F               	movlw	111
 28050  01184E  0012               	return	
 28051  011850  0E5F               	movlw	95
 28052  011852  0012               	return	
 28053  011854  0E7C               	movlw	124
 28054  011856  0012               	return	
 28055  011858  0E58               	movlw	88
 28056  01185A  0012               	return	
 28057  01185C  0E5E               	movlw	94
 28058  01185E  0012               	return	
 28059  011860  0E7B               	movlw	123
 28060  011862  0012               	return	
 28061  011864  0E71               	movlw	113
 28062  011866  0012               	return	
 28063  011868  0E6F               	movlw	111
 28064  01186A  0012               	return	
 28065  01186C  0E74               	movlw	116
 28066  01186E  0012               	return	
 28067  011870  0E04               	movlw	4
 28068  011872  0012               	return	
 28069  011874  0E0E               	movlw	14
 28070  011876  0012               	return	
 28071  011878  0E7A               	movlw	122
 28072  01187A  0012               	return	
 28073  01187C  0E06               	movlw	6
 28074  01187E  0012               	return	
 28075  011880  0E14               	movlw	20
 28076  011882  0012               	return	
 28077  011884  0E54               	movlw	84
 28078  011886  0012               	return	
 28079  011888  0E5C               	movlw	92
 28080  01188A  0012               	return	
 28081  01188C  0E73               	movlw	115
 28082  01188E  0012               	return	
 28083  011890  0E67               	movlw	103
 28084  011892  0012               	return	
 28085  011894  0E50               	movlw	80
 28086  011896  0012               	return	
 28087  011898  0E6D               	movlw	109
 28088  01189A  0012               	return	
 28089  01189C  0E78               	movlw	120
 28090  01189E  0012               	return	
 28091  0118A0  0E1C               	movlw	28
 28092  0118A2  0012               	return	
 28093  0118A4  0E62               	movlw	98
 28094  0118A6  0012               	return	
 28095  0118A8  0E2A               	movlw	42
 28096  0118AA  0012               	return	
 28097  0118AC  0E64               	movlw	100
 28098  0118AE  0012               	return	
 28099  0118B0  0E6E               	movlw	110
 28100  0118B2  0012               	return	
 28101  0118B4  0E5B               	movlw	91
 28102  0118B6  0012               	return	
 28103  0118B8  0E77               	movlw	119
 28104  0118BA  0012               	return	
 28105  0118BC  0E7F               	movlw	127
 28106  0118BE  0012               	return	
 28107  0118C0  0E39               	movlw	57
 28108  0118C2  0012               	return	
 28109  0118C4  0E3F               	movlw	63
 28110  0118C6  0012               	return	
 28111  0118C8  0E79               	movlw	121
 28112  0118CA  0012               	return	
 28113  0118CC  0E71               	movlw	113
 28114  0118CE  0012               	return	
 28115  0118D0  0E3D               	movlw	61
 28116  0118D2  0012               	return	
 28117  0118D4  0E76               	movlw	118
 28118  0118D6  0012               	return	
 28119  0118D8  0E06               	movlw	6
 28120  0118DA  0012               	return	
 28121  0118DC  0E1E               	movlw	30
 28122  0118DE  0012               	return	
 28123  0118E0  0E57               	movlw	87
 28124  0118E2  0012               	return	
 28125  0118E4  0E38               	movlw	56
 28126  0118E6  0012               	return	
 28127  0118E8  0E76               	movlw	118
 28128  0118EA  0012               	return	
 28129  0118EC  0E76               	movlw	118
 28130  0118EE  0012               	return	
 28131  0118F0  0E3F               	movlw	63
 28132  0118F2  0012               	return	
 28133  0118F4  0E73               	movlw	115
 28134  0118F6  0012               	return	
 28135  0118F8  0E3F               	movlw	63
 28136  0118FA  0012               	return	
 28137  0118FC  0E77               	movlw	119
 28138  0118FE  0012               	return	
 28139  011900  0E6D               	movlw	109
 28140  011902  0012               	return	
 28141  011904  0E31               	movlw	49
 28142  011906  0012               	return	
 28143  011908  0E3E               	movlw	62
 28144  01190A  0012               	return	
 28145  01190C  0E3E               	movlw	62
 28146  01190E  0012               	return	
 28147  011910  0E7E               	movlw	126
 28148  011912  0012               	return	
 28149  011914  0E76               	movlw	118
 28150  011916  0012               	return	
 28151  011918  0E66               	movlw	102
 28152  01191A  0012               	return	
 28153  01191C  0E5B               	movlw	91
 28154  01191E  0012               	return	
 28155  011920  0E80               	movlw	128
 28156  011922  0012               	return	
 28157  011924                     l853:
 28158  011924  0100               	movlb	0	; () banked
 28159  011926  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 28160                           
 28161                           ; Switch size 1, requested type "space"
 28162                           ; Number of cases is 63, Range of values is 46 to 122
 28163                           ; switch strategies available:
 28164                           ; Name         Instructions Cycles
 28165                           ; simple_byte          190    96 (average)
 28166                           ;	Chosen strategy is simple_byte
 28167  011928  0A2E               	xorlw	46	; case 46
 28168  01192A  B4D8               	btfsc	status,2,c
 28169  01192C  D7F9               	goto	l917
 28170  01192E  0A1E               	xorlw	30	; case 48
 28171  011930  B4D8               	btfsc	status,2,c
 28172  011932  D77A               	goto	l854
 28173  011934  0A01               	xorlw	1	; case 49
 28174  011936  B4D8               	btfsc	status,2,c
 28175  011938  D779               	goto	l856
 28176  01193A  0A03               	xorlw	3	; case 50
 28177  01193C  B4D8               	btfsc	status,2,c
 28178  01193E  D778               	goto	l857
 28179  011940  0A01               	xorlw	1	; case 51
 28180  011942  B4D8               	btfsc	status,2,c
 28181  011944  D777               	goto	l858
 28182  011946  0A07               	xorlw	7	; case 52
 28183  011948  B4D8               	btfsc	status,2,c
 28184  01194A  D776               	goto	l859
 28185  01194C  0A01               	xorlw	1	; case 53
 28186  01194E  B4D8               	btfsc	status,2,c
 28187  011950  D775               	goto	l860
 28188  011952  0A03               	xorlw	3	; case 54
 28189  011954  B4D8               	btfsc	status,2,c
 28190  011956  D774               	goto	l861
 28191  011958  0A01               	xorlw	1	; case 55
 28192  01195A  B4D8               	btfsc	status,2,c
 28193  01195C  D773               	goto	l862
 28194  01195E  0A0F               	xorlw	15	; case 56
 28195  011960  B4D8               	btfsc	status,2,c
 28196  011962  D772               	goto	l863
 28197  011964  0A01               	xorlw	1	; case 57
 28198  011966  B4D8               	btfsc	status,2,c
 28199  011968  D771               	goto	l864
 28200  01196A  0A78               	xorlw	120	; case 65
 28201  01196C  B4D8               	btfsc	status,2,c
 28202  01196E  D7A4               	goto	l891
 28203  011970  0A03               	xorlw	3	; case 66
 28204  011972  B4D8               	btfsc	status,2,c
 28205  011974  D7A3               	goto	l892
 28206  011976  0A01               	xorlw	1	; case 67
 28207  011978  B4D8               	btfsc	status,2,c
 28208  01197A  D7A2               	goto	l893
 28209  01197C  0A07               	xorlw	7	; case 68
 28210  01197E  B4D8               	btfsc	status,2,c
 28211  011980  D7A1               	goto	l894
 28212  011982  0A01               	xorlw	1	; case 69
 28213  011984  B4D8               	btfsc	status,2,c
 28214  011986  D7A0               	goto	l895
 28215  011988  0A03               	xorlw	3	; case 70
 28216  01198A  B4D8               	btfsc	status,2,c
 28217  01198C  D79F               	goto	l896
 28218  01198E  0A01               	xorlw	1	; case 71
 28219  011990  B4D8               	btfsc	status,2,c
 28220  011992  D79E               	goto	l897
 28221  011994  0A0F               	xorlw	15	; case 72
 28222  011996  B4D8               	btfsc	status,2,c
 28223  011998  D79D               	goto	l898
 28224  01199A  0A01               	xorlw	1	; case 73
 28225  01199C  B4D8               	btfsc	status,2,c
 28226  01199E  D79C               	goto	l899
 28227  0119A0  0A03               	xorlw	3	; case 74
 28228  0119A2  B4D8               	btfsc	status,2,c
 28229  0119A4  D79B               	goto	l900
 28230  0119A6  0A01               	xorlw	1	; case 75
 28231  0119A8  B4D8               	btfsc	status,2,c
 28232  0119AA  D79A               	goto	l901
 28233  0119AC  0A07               	xorlw	7	; case 76
 28234  0119AE  B4D8               	btfsc	status,2,c
 28235  0119B0  D799               	goto	l902
 28236  0119B2  0A01               	xorlw	1	; case 77
 28237  0119B4  B4D8               	btfsc	status,2,c
 28238  0119B6  D798               	goto	l903
 28239  0119B8  0A03               	xorlw	3	; case 78
 28240  0119BA  B4D8               	btfsc	status,2,c
 28241  0119BC  D797               	goto	l904
 28242  0119BE  0A01               	xorlw	1	; case 79
 28243  0119C0  B4D8               	btfsc	status,2,c
 28244  0119C2  D796               	goto	l905
 28245  0119C4  0A1F               	xorlw	31	; case 80
 28246  0119C6  B4D8               	btfsc	status,2,c
 28247  0119C8  D795               	goto	l906
 28248  0119CA  0A01               	xorlw	1	; case 81
 28249  0119CC  B4D8               	btfsc	status,2,c
 28250  0119CE  D794               	goto	l907
 28251  0119D0  0A03               	xorlw	3	; case 82
 28252  0119D2  B4D8               	btfsc	status,2,c
 28253  0119D4  D793               	goto	l908
 28254  0119D6  0A01               	xorlw	1	; case 83
 28255  0119D8  B4D8               	btfsc	status,2,c
 28256  0119DA  D792               	goto	l909
 28257  0119DC  0A07               	xorlw	7	; case 84
 28258  0119DE  B4D8               	btfsc	status,2,c
 28259  0119E0  D791               	goto	l910
 28260  0119E2  0A01               	xorlw	1	; case 85
 28261  0119E4  B4D8               	btfsc	status,2,c
 28262  0119E6  D790               	goto	l911
 28263  0119E8  0A03               	xorlw	3	; case 86
 28264  0119EA  B4D8               	btfsc	status,2,c
 28265  0119EC  D78F               	goto	l912
 28266  0119EE  0A01               	xorlw	1	; case 87
 28267  0119F0  B4D8               	btfsc	status,2,c
 28268  0119F2  D78E               	goto	l913
 28269  0119F4  0A0F               	xorlw	15	; case 88
 28270  0119F6  B4D8               	btfsc	status,2,c
 28271  0119F8  D78D               	goto	l914
 28272  0119FA  0A01               	xorlw	1	; case 89
 28273  0119FC  B4D8               	btfsc	status,2,c
 28274  0119FE  D78C               	goto	l915
 28275  011A00  0A03               	xorlw	3	; case 90
 28276  011A02  B4D8               	btfsc	status,2,c
 28277  011A04  D78B               	goto	l916
 28278  011A06  0A3B               	xorlw	59	; case 97
 28279  011A08  B4D8               	btfsc	status,2,c
 28280  011A0A  D722               	goto	l865
 28281  011A0C  0A03               	xorlw	3	; case 98
 28282  011A0E  B4D8               	btfsc	status,2,c
 28283  011A10  D721               	goto	l866
 28284  011A12  0A01               	xorlw	1	; case 99
 28285  011A14  B4D8               	btfsc	status,2,c
 28286  011A16  D720               	goto	l867
 28287  011A18  0A07               	xorlw	7	; case 100
 28288  011A1A  B4D8               	btfsc	status,2,c
 28289  011A1C  D71F               	goto	l868
 28290  011A1E  0A01               	xorlw	1	; case 101
 28291  011A20  B4D8               	btfsc	status,2,c
 28292  011A22  D71E               	goto	l869
 28293  011A24  0A03               	xorlw	3	; case 102
 28294  011A26  B4D8               	btfsc	status,2,c
 28295  011A28  D71D               	goto	l870
 28296  011A2A  0A01               	xorlw	1	; case 103
 28297  011A2C  B4D8               	btfsc	status,2,c
 28298  011A2E  D71C               	goto	l871
 28299  011A30  0A0F               	xorlw	15	; case 104
 28300  011A32  B4D8               	btfsc	status,2,c
 28301  011A34  D71B               	goto	l872
 28302  011A36  0A01               	xorlw	1	; case 105
 28303  011A38  B4D8               	btfsc	status,2,c
 28304  011A3A  D71A               	goto	l873
 28305  011A3C  0A03               	xorlw	3	; case 106
 28306  011A3E  B4D8               	btfsc	status,2,c
 28307  011A40  D719               	goto	l874
 28308  011A42  0A01               	xorlw	1	; case 107
 28309  011A44  B4D8               	btfsc	status,2,c
 28310  011A46  D718               	goto	l875
 28311  011A48  0A07               	xorlw	7	; case 108
 28312  011A4A  B4D8               	btfsc	status,2,c
 28313  011A4C  D717               	goto	l876
 28314  011A4E  0A01               	xorlw	1	; case 109
 28315  011A50  B4D8               	btfsc	status,2,c
 28316  011A52  D716               	goto	l877
 28317  011A54  0A03               	xorlw	3	; case 110
 28318  011A56  B4D8               	btfsc	status,2,c
 28319  011A58  D715               	goto	l878
 28320  011A5A  0A01               	xorlw	1	; case 111
 28321  011A5C  B4D8               	btfsc	status,2,c
 28322  011A5E  D714               	goto	l879
 28323  011A60  0A1F               	xorlw	31	; case 112
 28324  011A62  B4D8               	btfsc	status,2,c
 28325  011A64  D713               	goto	l880
 28326  011A66  0A01               	xorlw	1	; case 113
 28327  011A68  B4D8               	btfsc	status,2,c
 28328  011A6A  D712               	goto	l881
 28329  011A6C  0A03               	xorlw	3	; case 114
 28330  011A6E  B4D8               	btfsc	status,2,c
 28331  011A70  D711               	goto	l882
 28332  011A72  0A01               	xorlw	1	; case 115
 28333  011A74  B4D8               	btfsc	status,2,c
 28334  011A76  D710               	goto	l883
 28335  011A78  0A07               	xorlw	7	; case 116
 28336  011A7A  B4D8               	btfsc	status,2,c
 28337  011A7C  D70F               	goto	l884
 28338  011A7E  0A01               	xorlw	1	; case 117
 28339  011A80  B4D8               	btfsc	status,2,c
 28340  011A82  D70E               	goto	l885
 28341  011A84  0A03               	xorlw	3	; case 118
 28342  011A86  B4D8               	btfsc	status,2,c
 28343  011A88  D70D               	goto	l886
 28344  011A8A  0A01               	xorlw	1	; case 119
 28345  011A8C  B4D8               	btfsc	status,2,c
 28346  011A8E  D70C               	goto	l887
 28347  011A90  0A0F               	xorlw	15	; case 120
 28348  011A92  B4D8               	btfsc	status,2,c
 28349  011A94  D70B               	goto	l888
 28350  011A96  0A01               	xorlw	1	; case 121
 28351  011A98  B4D8               	btfsc	status,2,c
 28352  011A9A  D70A               	goto	l889
 28353  011A9C  0A03               	xorlw	3	; case 122
 28354  011A9E  B4D8               	btfsc	status,2,c
 28355  011AA0  D709               	goto	l890
 28356                           
 28357                           ;Types.c: 354: return 0;
 28358                           
 28359                           ; BSR set to: 0
 28360  011AA2  0E00               	movlw	0
 28361  011AA4  0012               	return	
 28362  011AA6                     __end_of_ToSegment:
 28363                           	opt stack 0
 28364                           tosu	equ	0xFFF
 28365                           tosh	equ	0xFFE
 28366                           tosl	equ	0xFFD
 28367                           pclath	equ	0xFFA
 28368                           tblptru	equ	0xFF8
 28369                           tblptrh	equ	0xFF7
 28370                           tblptrl	equ	0xFF6
 28371                           tablat	equ	0xFF5
 28372                           prodh	equ	0xFF4
 28373                           prodl	equ	0xFF3
 28374                           intcon	equ	0xFF2
 28375                           postinc0	equ	0xFEE
 28376                           wreg	equ	0xFE8
 28377                           indf1	equ	0xFE7
 28378                           postdec1	equ	0xFE5
 28379                           fsr1h	equ	0xFE2
 28380                           fsr1l	equ	0xFE1
 28381                           indf2	equ	0xFDF
 28382                           postinc2	equ	0xFDE
 28383                           postdec2	equ	0xFDD
 28384                           plusw2	equ	0xFDB
 28385                           fsr2h	equ	0xFDA
 28386                           fsr2l	equ	0xFD9
 28387                           status	equ	0xFD8
 28388                           
 28389 ;; *************** function _HMI_SetButton *****************
 28390 ;; Defined at:
 28391 ;;		line 186 in file "HMI.c"
 28392 ;; Parameters:    Size  Location     Type
 28393 ;;  pValue          1    wreg     unsigned char 
 28394 ;; Auto vars:     Size  Location     Type
 28395 ;;  pValue          1    6[BANK0 ] unsigned char 
 28396 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 28397 ;;  v               1    7[BANK0 ] unsigned char 
 28398 ;; Return value:  Size  Location     Type
 28399 ;;                  1    wreg      void 
 28400 ;; Registers used:
 28401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28402 ;; Tracked objects:
 28403 ;;		On entry : 0/0
 28404 ;;		On exit  : 0/0
 28405 ;;		Unchanged: 0/0
 28406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28408 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28410 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28411 ;;Total ram usage:        8 bytes
 28412 ;; Hardware stack levels used:    1
 28413 ;; Hardware stack levels required when called:    7
 28414 ;; This function calls:
 28415 ;;		Nothing
 28416 ;; This function is called by:
 28417 ;;		_Event_TestButton
 28418 ;; This function uses a non-reentrant model
 28419 ;;
 28420                           
 28421                           	psect	text148
 28422  014EE6                     __ptext148:
 28423                           	opt stack 0
 28424  014EE6                     _HMI_SetButton:
 28425                           	opt stack 18
 28426                           
 28427                           ;incstack = 0
 28428                           ;HMI_SetButton@pValue stored from wreg
 28429  014EE6  0100               	movlb	0	; () banked
 28430  014EE8  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 28431                           
 28432                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 28433  014EEA  0E18               	movlw	low HMI_SetButton@F7213
 28434  014EEC  6EF6               	movwf	tblptrl,c
 28435  014EEE                     	if	1	;There is more than 1 active tblptr byte
 28436  014EEE  0EFD               	movlw	high HMI_SetButton@F7213
 28437  014EF0  6EF7               	movwf	tblptrh,c
 28438  014EF2                     	endif
 28439  014EF2                     	if	1	;There are 3 active tblptr bytes
 28440  014EF2  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 28441  014EF4  6EF8               	movwf	tblptru,c
 28442  014EF6                     	endif
 28443  014EF6  0009               	tblrd		*+
 28444  014EF8  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 28445  014EFC  0009               	tblrd		*+
 28446  014EFE  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 28447  014F02  0009               	tblrd		*+
 28448  014F04  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 28449  014F08  000A               	tblrd		*-
 28450  014F0A  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 28451                           
 28452                           ;HMI.c: 189: UINT8 v = 0b00010001;
 28453  014F0E  0E11               	movlw	17
 28454  014F10  0100               	movlb	0	; () banked
 28455  014F12  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28456                           
 28457                           ; BSR set to: 0
 28458                           ;HMI.c: 190: pValue &= 3;
 28459  014F14  0E03               	movlw	3
 28460  014F16  0100               	movlb	0	; () banked
 28461  014F18  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 28462                           
 28463                           ; BSR set to: 0
 28464                           ;HMI.c: 191: v = v << reindex[pValue];
 28465  014F1A  0100               	movlb	0	; () banked
 28466  014F1C  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28467  014F1E  0D01               	mullw	1
 28468  014F20  0EBC               	movlw	low HMI_SetButton@reindex
 28469  014F22  24F3               	addwf	prodl,w,c
 28470  014F24  6ED9               	movwf	fsr2l,c
 28471  014F26  0E00               	movlw	high HMI_SetButton@reindex
 28472  014F28  20F4               	addwfc	prodh,w,c
 28473  014F2A  6EDA               	movwf	fsr2h,c
 28474  014F2C  50DF               	movf	indf2,w,c
 28475  014F2E  0100               	movlb	0	; () banked
 28476  014F30  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28477  014F32  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28478  014F36  0100               	movlb	0	; () banked
 28479  014F38  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28480  014F3A  D003               	goto	u9354
 28481  014F3C                     u9355:
 28482  014F3C  0100               	movlb	0	; () banked
 28483  014F3E  90D8               	bcf	status,0,c
 28484  014F40  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28485  014F42                     u9354:
 28486  014F42  0100               	movlb	0	; () banked
 28487  014F44  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28488  014F46  D7FA               	goto	u9355
 28489  014F48  0100               	movlb	0	; () banked
 28490  014F4A  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28491  014F4C  0100               	movlb	0	; () banked
 28492  014F4E  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28493                           
 28494                           ; BSR set to: 0
 28495                           ;HMI.c: 192: v = v >> 4;
 28496  014F50  0100               	movlb	0	; () banked
 28497  014F52  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28498  014F54  0B0F               	andlw	15
 28499  014F56  0100               	movlb	0	; () banked
 28500  014F58  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28501                           
 28502                           ; BSR set to: 0
 28503                           ;HMI.c: 193: v = v & 0x0F;
 28504  014F5A  0100               	movlb	0	; () banked
 28505  014F5C  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28506  014F5E  0B0F               	andlw	15
 28507  014F60  0100               	movlb	0	; () banked
 28508  014F62  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28509                           
 28510                           ; BSR set to: 0
 28511                           ;HMI.c: 194: HMIBoard.pButton = v;
 28512  014F64  0103               	movlb	3	; () banked
 28513  014F66  5146               	movf	(_HMIBoard+6)& (0+255),w,b
 28514  014F68  0100               	movlb	0	; () banked
 28515  014F6A  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28516  014F6C  0BF0               	andlw	-16
 28517  014F6E  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28518  014F70  0103               	movlb	3	; () banked
 28519  014F72  6F46               	movwf	(_HMIBoard+6)& (0+255),b
 28520                           
 28521                           ; BSR set to: 3
 28522  014F74  0012               	return		;funcret
 28523  014F76                     __end_of_HMI_SetButton:
 28524                           	opt stack 0
 28525                           tosu	equ	0xFFF
 28526                           tosh	equ	0xFFE
 28527                           tosl	equ	0xFFD
 28528                           pclath	equ	0xFFA
 28529                           tblptru	equ	0xFF8
 28530                           tblptrh	equ	0xFF7
 28531                           tblptrl	equ	0xFF6
 28532                           tablat	equ	0xFF5
 28533                           prodh	equ	0xFF4
 28534                           prodl	equ	0xFF3
 28535                           intcon	equ	0xFF2
 28536                           postinc0	equ	0xFEE
 28537                           wreg	equ	0xFE8
 28538                           indf1	equ	0xFE7
 28539                           postdec1	equ	0xFE5
 28540                           fsr1h	equ	0xFE2
 28541                           fsr1l	equ	0xFE1
 28542                           indf2	equ	0xFDF
 28543                           postinc2	equ	0xFDE
 28544                           postdec2	equ	0xFDD
 28545                           plusw2	equ	0xFDB
 28546                           fsr2h	equ	0xFDA
 28547                           fsr2l	equ	0xFD9
 28548                           status	equ	0xFD8
 28549                           
 28550 ;; *************** function _LED_Toggle *****************
 28551 ;; Defined at:
 28552 ;;		line 50 in file "Library/LED.c"
 28553 ;; Parameters:    Size  Location     Type
 28554 ;;  pLED            1    wreg     enum E6739
 28555 ;; Auto vars:     Size  Location     Type
 28556 ;;  pLED            1   24[BANK0 ] enum E6739
 28557 ;; Return value:  Size  Location     Type
 28558 ;;                  1    wreg      void 
 28559 ;; Registers used:
 28560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28561 ;; Tracked objects:
 28562 ;;		On entry : 0/0
 28563 ;;		On exit  : 0/0
 28564 ;;		Unchanged: 0/0
 28565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28570 ;;Total ram usage:        1 bytes
 28571 ;; Hardware stack levels used:    1
 28572 ;; Hardware stack levels required when called:   12
 28573 ;; This function calls:
 28574 ;;		_Port_TogglePin
 28575 ;; This function is called by:
 28576 ;;		_LCD_Reset
 28577 ;;		_Event_DIPSwitch
 28578 ;;		_Event_TestButton
 28579 ;;		_Event_ADCSequenceComplete
 28580 ;;		_Event_HMI_DIPSwitch
 28581 ;;		_Event_HMI_LeftButton
 28582 ;;		_Event_HMI_RightButton
 28583 ;;		_Event_HMI_UpButton
 28584 ;;		_Event_HMI_DownButton
 28585 ;; This function uses a non-reentrant model
 28586 ;;
 28587                           
 28588                           	psect	text149
 28589  015EA0                     __ptext149:
 28590                           	opt stack 0
 28591  015EA0                     _LED_Toggle:
 28592                           	opt stack 13
 28593                           
 28594                           ; BSR set to: 3
 28595                           ;incstack = 0
 28596                           ;LED_Toggle@pLED stored from wreg
 28597  015EA0  0100               	movlb	0	; () banked
 28598  015EA2  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28599                           
 28600                           ;LED.c: 52: switch (pLED)
 28601  015EA4  D018               	goto	l234
 28602  015EA6                     
 28603                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28604  015EA6  0EA5               	movlw	low _PortC
 28605  015EA8  0100               	movlb	0	; () banked
 28606  015EAA  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28607  015EAC  0E00               	movlw	high _PortC
 28608  015EAE  0100               	movlb	0	; () banked
 28609  015EB0  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28610  015EB2  0E00               	movlw	0
 28611  015EB4  0100               	movlb	0	; () banked
 28612  015EB6  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28613  015EB8  ECD3  F0B1         	call	_Port_TogglePin	;wreg free
 28614                           
 28615                           ;LED.c: 56: break;
 28616  015EBC  0012               	return	
 28617  015EBE                     
 28618                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28619  015EBE  0EA5               	movlw	low _PortC
 28620  015EC0  0100               	movlb	0	; () banked
 28621  015EC2  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28622  015EC4  0E00               	movlw	high _PortC
 28623  015EC6  0100               	movlb	0	; () banked
 28624  015EC8  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28625  015ECA  0E01               	movlw	1
 28626  015ECC  0100               	movlb	0	; () banked
 28627  015ECE  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28628  015ED0  ECD3  F0B1         	call	_Port_TogglePin	;wreg free
 28629                           
 28630                           ;LED.c: 60: }
 28631                           
 28632                           ;LED.c: 59: break;
 28633  015ED4  0012               	return	
 28634  015ED6                     l234:
 28635  015ED6  0100               	movlb	0	; () banked
 28636  015ED8  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28637                           
 28638                           ; Switch size 1, requested type "space"
 28639                           ; Number of cases is 2, Range of values is 0 to 1
 28640                           ; switch strategies available:
 28641                           ; Name         Instructions Cycles
 28642                           ; simple_byte            7     4 (average)
 28643                           ;	Chosen strategy is simple_byte
 28644  015EDA  0A00               	xorlw	0	; case 0
 28645  015EDC  B4D8               	btfsc	status,2,c
 28646  015EDE  D7E3               	goto	l235
 28647  015EE0  0A01               	xorlw	1	; case 1
 28648  015EE2  A4D8               	btfss	status,2,c
 28649  015EE4  0012               	return	
 28650  015EE6  D7EB               	goto	l237
 28651  015EE8                     __end_of_LED_Toggle:
 28652                           	opt stack 0
 28653                           tosu	equ	0xFFF
 28654                           tosh	equ	0xFFE
 28655                           tosl	equ	0xFFD
 28656                           pclath	equ	0xFFA
 28657                           tblptru	equ	0xFF8
 28658                           tblptrh	equ	0xFF7
 28659                           tblptrl	equ	0xFF6
 28660                           tablat	equ	0xFF5
 28661                           prodh	equ	0xFF4
 28662                           prodl	equ	0xFF3
 28663                           intcon	equ	0xFF2
 28664                           postinc0	equ	0xFEE
 28665                           wreg	equ	0xFE8
 28666                           indf1	equ	0xFE7
 28667                           postdec1	equ	0xFE5
 28668                           fsr1h	equ	0xFE2
 28669                           fsr1l	equ	0xFE1
 28670                           indf2	equ	0xFDF
 28671                           postinc2	equ	0xFDE
 28672                           postdec2	equ	0xFDD
 28673                           plusw2	equ	0xFDB
 28674                           fsr2h	equ	0xFDA
 28675                           fsr2l	equ	0xFD9
 28676                           status	equ	0xFD8
 28677                           
 28678 ;; *************** function _Port_TogglePin *****************
 28679 ;; Defined at:
 28680 ;;		line 278 in file "Library/Port.c"
 28681 ;; Parameters:    Size  Location     Type
 28682 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28683 ;;		 -> PortC(10), 
 28684 ;;  pPin            1   22[BANK0 ] enum E6750
 28685 ;; Auto vars:     Size  Location     Type
 28686 ;;  Value           1   23[BANK0 ] unsigned char 
 28687 ;; Return value:  Size  Location     Type
 28688 ;;                  1    wreg      void 
 28689 ;; Registers used:
 28690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28691 ;; Tracked objects:
 28692 ;;		On entry : 0/0
 28693 ;;		On exit  : 0/0
 28694 ;;		Unchanged: 0/0
 28695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28699 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28700 ;;Total ram usage:        4 bytes
 28701 ;; Hardware stack levels used:    1
 28702 ;; Hardware stack levels required when called:   11
 28703 ;; This function calls:
 28704 ;;		_Port_GetPin
 28705 ;;		_Port_SetPin
 28706 ;; This function is called by:
 28707 ;;		_LED_Toggle
 28708 ;; This function uses a non-reentrant model
 28709 ;;
 28710                           
 28711                           	psect	text150
 28712  0163A6                     __ptext150:
 28713                           	opt stack 0
 28714  0163A6                     _Port_TogglePin:
 28715                           	opt stack 13
 28716                           
 28717                           ;Port.c: 280: UINT8 Value;
 28718                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28719                           
 28720                           ;incstack = 0
 28721  0163A6  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28722  0163AA  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28723  0163AE  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28724  0163B2  ECBA  F0AF         	call	_Port_GetPin	;wreg free
 28725  0163B6  0100               	movlb	0	; () banked
 28726  0163B8  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28727                           
 28728                           ; BSR set to: 0
 28729                           ;Port.c: 282: Value ^= 0x01;
 28730  0163BA  0E01               	movlw	1
 28731  0163BC  0100               	movlb	0	; () banked
 28732  0163BE  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28733                           
 28734                           ; BSR set to: 0
 28735                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28736  0163C0  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28737  0163C4  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28738  0163C8  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28739  0163CC  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28740  0163D0  ECAA  F0A0         	call	_Port_SetPin	;wreg free
 28741  0163D4  0012               	return		;funcret
 28742  0163D6                     __end_of_Port_TogglePin:
 28743                           	opt stack 0
 28744                           tosu	equ	0xFFF
 28745                           tosh	equ	0xFFE
 28746                           tosl	equ	0xFFD
 28747                           pclath	equ	0xFFA
 28748                           tblptru	equ	0xFF8
 28749                           tblptrh	equ	0xFF7
 28750                           tblptrl	equ	0xFF6
 28751                           tablat	equ	0xFF5
 28752                           prodh	equ	0xFF4
 28753                           prodl	equ	0xFF3
 28754                           intcon	equ	0xFF2
 28755                           postinc0	equ	0xFEE
 28756                           wreg	equ	0xFE8
 28757                           indf1	equ	0xFE7
 28758                           postdec1	equ	0xFE5
 28759                           fsr1h	equ	0xFE2
 28760                           fsr1l	equ	0xFE1
 28761                           indf2	equ	0xFDF
 28762                           postinc2	equ	0xFDE
 28763                           postdec2	equ	0xFDD
 28764                           plusw2	equ	0xFDB
 28765                           fsr2h	equ	0xFDA
 28766                           fsr2l	equ	0xFD9
 28767                           status	equ	0xFD8
 28768                           
 28769 ;; *************** function _Port_SetPin *****************
 28770 ;; Defined at:
 28771 ;;		line 247 in file "Library/Port.c"
 28772 ;; Parameters:    Size  Location     Type
 28773 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28774 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28775 ;;  pPin            1   17[BANK0 ] enum E6750
 28776 ;;  pValue          1   18[BANK0 ] unsigned char 
 28777 ;; Auto vars:     Size  Location     Type
 28778 ;;  Type            1   19[BANK0 ] enum E6795
 28779 ;; Return value:  Size  Location     Type
 28780 ;;                  1    wreg      void 
 28781 ;; Registers used:
 28782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28783 ;; Tracked objects:
 28784 ;;		On entry : 0/0
 28785 ;;		On exit  : 0/0
 28786 ;;		Unchanged: 0/0
 28787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28791 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28792 ;;Total ram usage:        5 bytes
 28793 ;; Hardware stack levels used:    1
 28794 ;; Hardware stack levels required when called:   10
 28795 ;; This function calls:
 28796 ;;		_Byte_SetBit
 28797 ;;		_Word_GetPair
 28798 ;; This function is called by:
 28799 ;;		_Reset_Low
 28800 ;;		_Reset_High
 28801 ;;		_LED_Set
 28802 ;;		_Port_TogglePin
 28803 ;;		_Motor_Init
 28804 ;;		_Motor_Step
 28805 ;;		_MXK_Init
 28806 ;; This function uses a non-reentrant model
 28807 ;;
 28808                           
 28809                           	psect	text151
 28810  014154                     __ptext151:
 28811                           	opt stack 0
 28812  014154                     _Port_SetPin:
 28813                           	opt stack 13
 28814                           
 28815                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28816                           
 28817                           ;incstack = 0
 28818  014154  0E08               	movlw	8
 28819  014156  0100               	movlb	0	; () banked
 28820  014158  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28821  01415A  0100               	movlb	0	; () banked
 28822  01415C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28823  01415E  0E00               	movlw	0
 28824  014160  0100               	movlb	0	; () banked
 28825  014162  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28826  014164  0100               	movlb	0	; () banked
 28827  014166  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28828  014168  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28829  01416C  ECBD  F0B0         	call	_Word_GetPair	;wreg free
 28830  014170  0100               	movlb	0	; () banked
 28831  014172  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28832                           
 28833                           ;Port.c: 250: switch (Type)
 28834  014174  D042               	goto	l427
 28835  014176                     
 28836                           ; BSR set to: 0
 28837                           ;Port.c: 256: pValue &= 1;
 28838                           
 28839                           ; BSR set to: 0
 28840  014176  0E01               	movlw	1
 28841  014178  0100               	movlb	0	; () banked
 28842  01417A  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28843                           
 28844                           ; BSR set to: 0
 28845                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28846  01417C  0100               	movlb	0	; () banked
 28847  01417E  EE20 F002          	lfsr	2,2
 28848  014182  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28849  014184  26D9               	addwf	fsr2l,f,c
 28850  014186  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28851  014188  22DA               	addwfc	fsr2h,f,c
 28852  01418A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28853  01418E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28854  014192  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28855  014196  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28856  01419A  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 28857                           
 28858                           ;Port.c: 258: break;
 28859  01419E  0012               	return	
 28860  0141A0                     
 28861                           ;Port.c: 261: pValue &= 1;
 28862  0141A0  0E01               	movlw	1
 28863  0141A2  0100               	movlb	0	; () banked
 28864  0141A4  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28865                           
 28866                           ;Port.c: 262: pValue ^= 1;
 28867  0141A6  0E01               	movlw	1
 28868  0141A8  0100               	movlb	0	; () banked
 28869  0141AA  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28870                           
 28871                           ; BSR set to: 0
 28872                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28873  0141AC  0100               	movlb	0	; () banked
 28874  0141AE  EE20 F002          	lfsr	2,2
 28875  0141B2  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28876  0141B4  26D9               	addwf	fsr2l,f,c
 28877  0141B6  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28878  0141B8  22DA               	addwfc	fsr2h,f,c
 28879  0141BA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28880  0141BE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28881  0141C2  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28882  0141C6  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28883  0141CA  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 28884                           
 28885                           ;Port.c: 264: break;
 28886  0141CE  0012               	return	
 28887  0141D0                     
 28888                           ;Port.c: 266: pValue &= 1;
 28889  0141D0  0E01               	movlw	1
 28890  0141D2  0100               	movlb	0	; () banked
 28891  0141D4  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28892                           
 28893                           ; BSR set to: 0
 28894                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28895  0141D6  0100               	movlb	0	; () banked
 28896  0141D8  EE20 F004          	lfsr	2,4
 28897  0141DC  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28898  0141DE  26D9               	addwf	fsr2l,f,c
 28899  0141E0  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28900  0141E2  22DA               	addwfc	fsr2h,f,c
 28901  0141E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28902  0141E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28903  0141EC  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28904  0141F0  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28905  0141F4  ECD8  F0AC         	call	_Byte_SetBit	;wreg free
 28906                           
 28907                           ;Port.c: 269: }
 28908                           
 28909                           ;Port.c: 268: break;
 28910  0141F8  0012               	return	
 28911  0141FA                     l427:
 28912  0141FA  0100               	movlb	0	; () banked
 28913  0141FC  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28914                           
 28915                           ; Switch size 1, requested type "space"
 28916                           ; Number of cases is 4, Range of values is 0 to 3
 28917                           ; switch strategies available:
 28918                           ; Name         Instructions Cycles
 28919                           ; simple_byte           13     7 (average)
 28920                           ;	Chosen strategy is simple_byte
 28921  0141FE  0A00               	xorlw	0	; case 0
 28922  014200  B4D8               	btfsc	status,2,c
 28923  014202  0012               	return	
 28924  014204  0A01               	xorlw	1	; case 1
 28925  014206  B4D8               	btfsc	status,2,c
 28926  014208  D7B6               	goto	l430
 28927  01420A  0A03               	xorlw	3	; case 2
 28928  01420C  B4D8               	btfsc	status,2,c
 28929  01420E  D7C8               	goto	l432
 28930  014210  0A01               	xorlw	1	; case 3
 28931  014212  A4D8               	btfss	status,2,c
 28932  014214  0012               	return	
 28933  014216  D7DC               	goto	l433
 28934  014218                     __end_of_Port_SetPin:
 28935                           	opt stack 0
 28936                           tosu	equ	0xFFF
 28937                           tosh	equ	0xFFE
 28938                           tosl	equ	0xFFD
 28939                           pclath	equ	0xFFA
 28940                           tblptru	equ	0xFF8
 28941                           tblptrh	equ	0xFF7
 28942                           tblptrl	equ	0xFF6
 28943                           tablat	equ	0xFF5
 28944                           prodh	equ	0xFF4
 28945                           prodl	equ	0xFF3
 28946                           intcon	equ	0xFF2
 28947                           postinc0	equ	0xFEE
 28948                           wreg	equ	0xFE8
 28949                           indf1	equ	0xFE7
 28950                           postdec1	equ	0xFE5
 28951                           fsr1h	equ	0xFE2
 28952                           fsr1l	equ	0xFE1
 28953                           indf2	equ	0xFDF
 28954                           postinc2	equ	0xFDE
 28955                           postdec2	equ	0xFDD
 28956                           plusw2	equ	0xFDB
 28957                           fsr2h	equ	0xFDA
 28958                           fsr2l	equ	0xFD9
 28959                           status	equ	0xFD8
 28960                           
 28961 ;; *************** function _Word_GetPair *****************
 28962 ;; Defined at:
 28963 ;;		line 156 in file "Library/Types.c"
 28964 ;; Parameters:    Size  Location     Type
 28965 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28966 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28967 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28968 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28969 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28970 ;;  pPair           1   14[BANK0 ] unsigned char 
 28971 ;; Auto vars:     Size  Location     Type
 28972 ;;		None
 28973 ;; Return value:  Size  Location     Type
 28974 ;;                  1    wreg      unsigned char 
 28975 ;; Registers used:
 28976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28977 ;; Tracked objects:
 28978 ;;		On entry : 0/0
 28979 ;;		On exit  : 0/0
 28980 ;;		Unchanged: 0/0
 28981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28982 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28985 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28986 ;;Total ram usage:        3 bytes
 28987 ;; Hardware stack levels used:    1
 28988 ;; Hardware stack levels required when called:    9
 28989 ;; This function calls:
 28990 ;;		_Byte_GetPair
 28991 ;; This function is called by:
 28992 ;;		_Port_Init
 28993 ;;		_Port_SetPin
 28994 ;;		_Port_Set
 28995 ;;		_PortProperty_Valid
 28996 ;;		_Port_SetPair
 28997 ;;		_Port_SetQuad
 28998 ;; This function uses a non-reentrant model
 28999 ;;
 29000                           
 29001                           	psect	text152
 29002  01617A                     __ptext152:
 29003                           	opt stack 0
 29004  01617A                     _Word_GetPair:
 29005                           	opt stack 13
 29006                           
 29007                           ;Types.c: 158: if (pPair >= 4)
 29008                           
 29009                           ;incstack = 0
 29010  01617A  0E03               	movlw	3
 29011  01617C  0100               	movlb	0	; () banked
 29012  01617E  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 29013  016180  D012               	goto	l781
 29014                           
 29015                           ; BSR set to: 0
 29016                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29017  016182  0E01               	movlw	1
 29018  016184  0100               	movlb	0	; () banked
 29019  016186  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 29020  016188  0100               	movlb	0	; () banked
 29021  01618A  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 29022  01618C  0E00               	movlw	0
 29023  01618E  0100               	movlb	0	; () banked
 29024  016190  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 29025  016192  0100               	movlb	0	; () banked
 29026  016194  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 29027  016196  0100               	movlb	0	; () banked
 29028  016198  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 29029  01619A  0FFC               	addlw	252
 29030  01619C  0100               	movlb	0	; () banked
 29031  01619E  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 29032  0161A0  EC2E  F0B3         	call	_Byte_GetPair	;wreg free
 29033  0161A4  0012               	return	
 29034  0161A6                     l781:
 29035                           
 29036                           ;Types.c: 160: else
 29037                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29038  0161A6  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 29039  0161AA  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 29040  0161AE  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 29041  0161B2  EC2E  F0B3         	call	_Byte_GetPair	;wreg free
 29042  0161B6  0012               	return	
 29043  0161B8                     __end_of_Word_GetPair:
 29044                           	opt stack 0
 29045                           tosu	equ	0xFFF
 29046                           tosh	equ	0xFFE
 29047                           tosl	equ	0xFFD
 29048                           pclath	equ	0xFFA
 29049                           tblptru	equ	0xFF8
 29050                           tblptrh	equ	0xFF7
 29051                           tblptrl	equ	0xFF6
 29052                           tablat	equ	0xFF5
 29053                           prodh	equ	0xFF4
 29054                           prodl	equ	0xFF3
 29055                           intcon	equ	0xFF2
 29056                           postinc0	equ	0xFEE
 29057                           wreg	equ	0xFE8
 29058                           indf1	equ	0xFE7
 29059                           postdec1	equ	0xFE5
 29060                           fsr1h	equ	0xFE2
 29061                           fsr1l	equ	0xFE1
 29062                           indf2	equ	0xFDF
 29063                           postinc2	equ	0xFDE
 29064                           postdec2	equ	0xFDD
 29065                           plusw2	equ	0xFDB
 29066                           fsr2h	equ	0xFDA
 29067                           fsr2l	equ	0xFD9
 29068                           status	equ	0xFD8
 29069                           
 29070 ;; *************** function _Byte_GetPair *****************
 29071 ;; Defined at:
 29072 ;;		line 87 in file "Library/Types.c"
 29073 ;; Parameters:    Size  Location     Type
 29074 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 29075 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29076 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29077 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29078 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29079 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29080 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29081 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29082 ;;		 -> NULL(0), 
 29083 ;;  pPair           1   11[BANK0 ] unsigned char 
 29084 ;; Auto vars:     Size  Location     Type
 29085 ;;		None
 29086 ;; Return value:  Size  Location     Type
 29087 ;;                  1    wreg      unsigned char 
 29088 ;; Registers used:
 29089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29090 ;; Tracked objects:
 29091 ;;		On entry : 0/0
 29092 ;;		On exit  : 0/0
 29093 ;;		Unchanged: 0/0
 29094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29095 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29098 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29099 ;;Total ram usage:        3 bytes
 29100 ;; Hardware stack levels used:    1
 29101 ;; Hardware stack levels required when called:    8
 29102 ;; This function calls:
 29103 ;;		_Byte_GetZone
 29104 ;; This function is called by:
 29105 ;;		_Word_GetPair
 29106 ;; This function uses a non-reentrant model
 29107 ;;
 29108                           
 29109                           	psect	text153
 29110  01665C                     __ptext153:
 29111                           	opt stack 0
 29112  01665C                     _Byte_GetPair:
 29113                           	opt stack 13
 29114                           
 29115                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29116                           
 29117                           ;incstack = 0
 29118  01665C  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 29119  016660  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 29120  016664  0E04               	movlw	4
 29121  016666  0100               	movlb	0	; () banked
 29122  016668  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 29123  01666A  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 29124  01666E  0E02               	movlw	2
 29125  016670  0100               	movlb	0	; () banked
 29126  016672  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 29127  016674  ECD9  F0A6         	call	_Byte_GetZone	;wreg free
 29128  016678  0012               	return	
 29129  01667A                     __end_of_Byte_GetPair:
 29130                           	opt stack 0
 29131                           tosu	equ	0xFFF
 29132                           tosh	equ	0xFFE
 29133                           tosl	equ	0xFFD
 29134                           pclath	equ	0xFFA
 29135                           tblptru	equ	0xFF8
 29136                           tblptrh	equ	0xFF7
 29137                           tblptrl	equ	0xFF6
 29138                           tablat	equ	0xFF5
 29139                           prodh	equ	0xFF4
 29140                           prodl	equ	0xFF3
 29141                           intcon	equ	0xFF2
 29142                           postinc0	equ	0xFEE
 29143                           wreg	equ	0xFE8
 29144                           indf1	equ	0xFE7
 29145                           postdec1	equ	0xFE5
 29146                           fsr1h	equ	0xFE2
 29147                           fsr1l	equ	0xFE1
 29148                           indf2	equ	0xFDF
 29149                           postinc2	equ	0xFDE
 29150                           postdec2	equ	0xFDD
 29151                           plusw2	equ	0xFDB
 29152                           fsr2h	equ	0xFDA
 29153                           fsr2l	equ	0xFD9
 29154                           status	equ	0xFD8
 29155                           
 29156 ;; *************** function _Byte_GetZone *****************
 29157 ;; Defined at:
 29158 ;;		line 64 in file "Library/Types.c"
 29159 ;; Parameters:    Size  Location     Type
 29160 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29161 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29162 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29163 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29164 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29165 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29166 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29167 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29168 ;;		 -> NULL(0), 
 29169 ;;  pMax            1    2[BANK0 ] unsigned char 
 29170 ;;  pChunk          1    3[BANK0 ] unsigned char 
 29171 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 29172 ;; Auto vars:     Size  Location     Type
 29173 ;;  Output          1    8[BANK0 ] unsigned char 
 29174 ;;  Offset          1    7[BANK0 ] unsigned char 
 29175 ;;  MASK            1    6[BANK0 ] unsigned char 
 29176 ;; Return value:  Size  Location     Type
 29177 ;;                  1    wreg      unsigned char 
 29178 ;; Registers used:
 29179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29180 ;; Tracked objects:
 29181 ;;		On entry : 0/0
 29182 ;;		On exit  : 0/0
 29183 ;;		Unchanged: 0/0
 29184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29185 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29186 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29188 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29189 ;;Total ram usage:        9 bytes
 29190 ;; Hardware stack levels used:    1
 29191 ;; Hardware stack levels required when called:    7
 29192 ;; This function calls:
 29193 ;;		Nothing
 29194 ;; This function is called by:
 29195 ;;		_Byte_GetPair
 29196 ;;		_Byte_GetTriple
 29197 ;;		_Byte_GetQuad
 29198 ;; This function uses a non-reentrant model
 29199 ;;
 29200                           
 29201                           	psect	text154
 29202  014DB2                     __ptext154:
 29203                           	opt stack 0
 29204  014DB2                     _Byte_GetZone:
 29205                           	opt stack 13
 29206                           
 29207                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29208                           
 29209                           ;incstack = 0
 29210  014DB2  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 29211  014DB6  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 29212  014DBA  0E00               	movlw	low (__mediumconst shr (0+16))
 29213  014DBC  6EF8               	movwf	tblptru,c
 29214  014DBE  0E0F               	movlw	(high __ramtop+-1)
 29215  014DC0  64F7               	cpfsgt	tblptrh,c
 29216  014DC2  D003               	bra	u8767
 29217  014DC4  0008               	tblrd		*
 29218  014DC6  50F5               	movf	tablat,w,c
 29219  014DC8  D005               	bra	u8760
 29220  014DCA                     u8767:
 29221  014DCA  CFF6 FFE9          	movff	tblptrl,fsr0l
 29222  014DCE  CFF7 FFEA          	movff	tblptrh,fsr0h
 29223  014DD2  50EF               	movf	indf0,w,c
 29224  014DD4                     u8760:
 29225  014DD4  0100               	movlb	0	; () banked
 29226  014DD6  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 29227                           
 29228                           ; BSR set to: 0
 29229                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29230  014DD8  0100               	movlb	0	; () banked
 29231  014DDA  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29232  014DDC  0D01               	mullw	1
 29233  014DDE  0E0F               	movlw	low _MASKS
 29234  014DE0  24F3               	addwf	prodl,w,c
 29235  014DE2  6EF6               	movwf	tblptrl,c
 29236  014DE4  0EFD               	movlw	high _MASKS
 29237  014DE6  20F4               	addwfc	prodh,w,c
 29238  014DE8  6EF7               	movwf	tblptrh,c
 29239  014DEA                     	if	1	;There are 3 active tblptr bytes
 29240  014DEA  6AF8               	clrf	tblptru,c
 29241  014DEC  0E00               	movlw	low (__mediumconst shr (0+16))
 29242  014DEE  22F8               	addwfc	tblptru,f,c
 29243  014DF0                     	endif
 29244  014DF0  0008               	tblrd		*
 29245  014DF2  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 29246                           
 29247                           ; BSR set to: 0
 29248                           ;Types.c: 68: UINT8 Offset = 0;
 29249  014DF6  0E00               	movlw	0
 29250  014DF8  0100               	movlb	0	; () banked
 29251  014DFA  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 29252                           
 29253                           ;Types.c: 70: while (pChunk >= pMax)
 29254  014DFC  D006               	goto	l732
 29255  014DFE                     
 29256                           ; BSR set to: 0
 29257                           ;Types.c: 71: {
 29258                           ;Types.c: 72: pChunk -= pMax;
 29259                           
 29260                           ; BSR set to: 0
 29261  014DFE  0100               	movlb	0	; () banked
 29262  014E00  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29263  014E02  0100               	movlb	0	; () banked
 29264  014E04  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 29265                           
 29266                           ; BSR set to: 0
 29267                           ;Types.c: 73: Offset += 1;
 29268  014E06  0100               	movlb	0	; () banked
 29269  014E08  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 29270  014E0A                     l732:
 29271                           
 29272                           ; BSR set to: 0
 29273                           
 29274                           ; BSR set to: 0
 29275  014E0A  0100               	movlb	0	; () banked
 29276  014E0C  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29277  014E0E  0100               	movlb	0	; () banked
 29278  014E10  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 29279  014E12  B0D8               	btfsc	status,0,c
 29280  014E14  D7F4               	goto	l733
 29281                           
 29282                           ; BSR set to: 0
 29283                           ;Types.c: 74: }
 29284                           ;Types.c: 75: pChunk *= pChunkSize;
 29285                           
 29286                           ; BSR set to: 0
 29287  014E16  0100               	movlb	0	; () banked
 29288  014E18  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29289  014E1A  0100               	movlb	0	; () banked
 29290  014E1C  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 29291  014E1E  50F3               	movf	prodl,w,c
 29292  014E20  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 29293                           
 29294                           ; BSR set to: 0
 29295                           ;Types.c: 76: pChunk += Offset;
 29296  014E22  0100               	movlb	0	; () banked
 29297  014E24  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 29298  014E26  0100               	movlb	0	; () banked
 29299  014E28  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 29300                           
 29301                           ; BSR set to: 0
 29302                           ;Types.c: 78: Output >>= pChunk;
 29303  014E2A  0100               	movlb	0	; () banked
 29304  014E2C  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 29305  014E2E  0100               	movlb	0	; () banked
 29306  014E30  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 29307  014E32  D003               	goto	u8780
 29308  014E34                     u8785:
 29309  014E34  0100               	movlb	0	; () banked
 29310  014E36  90D8               	bcf	status,0,c
 29311  014E38  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 29312  014E3A                     u8780:
 29313  014E3A  0100               	movlb	0	; () banked
 29314  014E3C  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 29315  014E3E  D7FA               	goto	u8785
 29316                           
 29317                           ;Types.c: 79: Output &= MASK;
 29318  014E40  0100               	movlb	0	; () banked
 29319  014E42  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 29320  014E44  0100               	movlb	0	; () banked
 29321  014E46  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 29322                           
 29323                           ; BSR set to: 0
 29324                           ;Types.c: 80: return Output;
 29325  014E48  0100               	movlb	0	; () banked
 29326  014E4A  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 29327  014E4C  0012               	return	
 29328  014E4E                     __end_of_Byte_GetZone:
 29329                           	opt stack 0
 29330                           tosu	equ	0xFFF
 29331                           tosh	equ	0xFFE
 29332                           tosl	equ	0xFFD
 29333                           pclath	equ	0xFFA
 29334                           tblptru	equ	0xFF8
 29335                           tblptrh	equ	0xFF7
 29336                           tblptrl	equ	0xFF6
 29337                           tablat	equ	0xFF5
 29338                           prodh	equ	0xFF4
 29339                           prodl	equ	0xFF3
 29340                           intcon	equ	0xFF2
 29341                           indf0	equ	0xFEF
 29342                           postinc0	equ	0xFEE
 29343                           fsr0h	equ	0xFEA
 29344                           fsr0l	equ	0xFE9
 29345                           wreg	equ	0xFE8
 29346                           indf1	equ	0xFE7
 29347                           postdec1	equ	0xFE5
 29348                           fsr1h	equ	0xFE2
 29349                           fsr1l	equ	0xFE1
 29350                           indf2	equ	0xFDF
 29351                           postinc2	equ	0xFDE
 29352                           postdec2	equ	0xFDD
 29353                           plusw2	equ	0xFDB
 29354                           fsr2h	equ	0xFDA
 29355                           fsr2l	equ	0xFD9
 29356                           status	equ	0xFD8
 29357                           
 29358 ;; *************** function _Byte_SetBit *****************
 29359 ;; Defined at:
 29360 ;;		line 32 in file "Library/Types.c"
 29361 ;; Parameters:    Size  Location     Type
 29362 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29363 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29364 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29365 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29366 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29367 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29368 ;;		 -> NULL(0), 
 29369 ;;  pBit            1    2[BANK0 ] unsigned char 
 29370 ;;  pValue          1    3[BANK0 ] unsigned char 
 29371 ;; Auto vars:     Size  Location     Type
 29372 ;;		None
 29373 ;; Return value:  Size  Location     Type
 29374 ;;                  1    wreg      void 
 29375 ;; Registers used:
 29376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29377 ;; Tracked objects:
 29378 ;;		On entry : 0/0
 29379 ;;		On exit  : 0/0
 29380 ;;		Unchanged: 0/0
 29381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29384 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29385 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29386 ;;Total ram usage:        7 bytes
 29387 ;; Hardware stack levels used:    1
 29388 ;; Hardware stack levels required when called:    7
 29389 ;; This function calls:
 29390 ;;		Nothing
 29391 ;; This function is called by:
 29392 ;;		_Port_SetPinType
 29393 ;;		_Port_SetPin
 29394 ;;		_SPI_Init
 29395 ;;		_SPI_MinSpeed
 29396 ;;		_SPI_MaxSpeed
 29397 ;;		_Word_SetBit
 29398 ;;		_I2C_Init
 29399 ;; This function uses a non-reentrant model
 29400 ;;
 29401                           
 29402                           	psect	text155
 29403  0159B0                     __ptext155:
 29404                           	opt stack 0
 29405  0159B0                     _Byte_SetBit:
 29406                           	opt stack 15
 29407                           
 29408                           ;Types.c: 34: pValue &= 1;
 29409                           
 29410                           ; BSR set to: 0
 29411                           ;incstack = 0
 29412  0159B0  0E01               	movlw	1
 29413  0159B2  0100               	movlb	0	; () banked
 29414  0159B4  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 29415                           
 29416                           ; BSR set to: 0
 29417                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29418  0159B6  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29419  0159BA  0E01               	movlw	1
 29420  0159BC  0100               	movlb	0	; () banked
 29421  0159BE  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 29422  0159C0  0100               	movlb	0	; () banked
 29423  0159C2  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29424  0159C4  D003               	goto	u8804
 29425  0159C6                     u8805:
 29426  0159C6  0100               	movlb	0	; () banked
 29427  0159C8  90D8               	bcf	status,0,c
 29428  0159CA  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29429  0159CC                     u8804:
 29430  0159CC  0100               	movlb	0	; () banked
 29431  0159CE  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29432  0159D0  D7FA               	goto	u8805
 29433  0159D2  0100               	movlb	0	; () banked
 29434  0159D4  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29435  0159D6  0AFF               	xorlw	255
 29436  0159D8  0100               	movlb	0	; () banked
 29437  0159DA  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 29438  0159DC  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29439  0159E0  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29440  0159E4  0100               	movlb	0	; () banked
 29441  0159E6  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 29442  0159E8  16DF               	andwf	indf2,f,c
 29443                           
 29444                           ; BSR set to: 0
 29445                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29446  0159EA  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29447  0159EE  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 29448  0159F2  0100               	movlb	0	; () banked
 29449  0159F4  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29450  0159F6  D003               	goto	u8814
 29451  0159F8                     u8815:
 29452  0159F8  0100               	movlb	0	; () banked
 29453  0159FA  90D8               	bcf	status,0,c
 29454  0159FC  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29455  0159FE                     u8814:
 29456  0159FE  0100               	movlb	0	; () banked
 29457  015A00  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29458  015A02  D7FA               	goto	u8815
 29459  015A04  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29460  015A08  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29461  015A0C  0100               	movlb	0	; () banked
 29462  015A0E  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29463  015A10  12DF               	iorwf	indf2,f,c
 29464                           
 29465                           ; BSR set to: 0
 29466  015A12  0012               	return		;funcret
 29467  015A14                     __end_of_Byte_SetBit:
 29468                           	opt stack 0
 29469                           tosu	equ	0xFFF
 29470                           tosh	equ	0xFFE
 29471                           tosl	equ	0xFFD
 29472                           pclath	equ	0xFFA
 29473                           tblptru	equ	0xFF8
 29474                           tblptrh	equ	0xFF7
 29475                           tblptrl	equ	0xFF6
 29476                           tablat	equ	0xFF5
 29477                           prodh	equ	0xFF4
 29478                           prodl	equ	0xFF3
 29479                           intcon	equ	0xFF2
 29480                           indf0	equ	0xFEF
 29481                           postinc0	equ	0xFEE
 29482                           fsr0h	equ	0xFEA
 29483                           fsr0l	equ	0xFE9
 29484                           wreg	equ	0xFE8
 29485                           indf1	equ	0xFE7
 29486                           postdec1	equ	0xFE5
 29487                           fsr1h	equ	0xFE2
 29488                           fsr1l	equ	0xFE1
 29489                           indf2	equ	0xFDF
 29490                           postinc2	equ	0xFDE
 29491                           postdec2	equ	0xFDD
 29492                           plusw2	equ	0xFDB
 29493                           fsr2h	equ	0xFDA
 29494                           fsr2l	equ	0xFD9
 29495                           status	equ	0xFD8
 29496                           
 29497 ;; *************** function _Port_GetPin *****************
 29498 ;; Defined at:
 29499 ;;		line 271 in file "Library/Port.c"
 29500 ;; Parameters:    Size  Location     Type
 29501 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29502 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29503 ;;  pPin            1    2[BANK0 ] enum E6750
 29504 ;; Auto vars:     Size  Location     Type
 29505 ;;  Output          1    5[BANK0 ] unsigned char 
 29506 ;; Return value:  Size  Location     Type
 29507 ;;                  1    wreg      unsigned char 
 29508 ;; Registers used:
 29509 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29510 ;; Tracked objects:
 29511 ;;		On entry : 0/0
 29512 ;;		On exit  : 0/0
 29513 ;;		Unchanged: 0/0
 29514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29515 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29519 ;;Total ram usage:        6 bytes
 29520 ;; Hardware stack levels used:    1
 29521 ;; Hardware stack levels required when called:    7
 29522 ;; This function calls:
 29523 ;;		Nothing
 29524 ;; This function is called by:
 29525 ;;		_Port_TogglePin
 29526 ;;		_HMI_LeftSwitch
 29527 ;;		_HMI_RightSwitch
 29528 ;;		_HMI_UpSwitch
 29529 ;;		_HMI_DownSwitch
 29530 ;;		_MXK_TestButton
 29531 ;; This function uses a non-reentrant model
 29532 ;;
 29533                           
 29534                           	psect	text156
 29535  015F74                     __ptext156:
 29536                           	opt stack 0
 29537  015F74                     _Port_GetPin:
 29538                           	opt stack 18
 29539                           
 29540                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29541                           
 29542                           ; BSR set to: 0
 29543                           ;incstack = 0
 29544  015F74  0100               	movlb	0	; () banked
 29545  015F76  EE20 F006          	lfsr	2,6
 29546  015F7A  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29547  015F7C  26D9               	addwf	fsr2l,f,c
 29548  015F7E  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29549  015F80  22DA               	addwfc	fsr2h,f,c
 29550  015F82  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29551  015F86  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29552  015F8A  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29553  015F8E  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29554  015F92  50DF               	movf	indf2,w,c
 29555  015F94  0100               	movlb	0	; () banked
 29556  015F96  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29557                           
 29558                           ; BSR set to: 0
 29559                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29560  015F98  0100               	movlb	0	; () banked
 29561  015F9A  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29562  015F9C  0100               	movlb	0	; () banked
 29563  015F9E  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29564  015FA0  D003               	goto	u8850
 29565  015FA2                     u8855:
 29566  015FA2  0100               	movlb	0	; () banked
 29567  015FA4  90D8               	bcf	status,0,c
 29568  015FA6  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29569  015FA8                     u8850:
 29570  015FA8  0100               	movlb	0	; () banked
 29571  015FAA  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29572  015FAC  D7FA               	goto	u8855
 29573                           
 29574                           ;Port.c: 275: Output &= 1;
 29575  015FAE  0E01               	movlw	1
 29576  015FB0  0100               	movlb	0	; () banked
 29577  015FB2  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29578                           
 29579                           ; BSR set to: 0
 29580                           ;Port.c: 276: return Output;
 29581  015FB4  0100               	movlb	0	; () banked
 29582  015FB6  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29583  015FB8  0012               	return	
 29584  015FBA                     __end_of_Port_GetPin:
 29585                           	opt stack 0
 29586                           tosu	equ	0xFFF
 29587                           tosh	equ	0xFFE
 29588                           tosl	equ	0xFFD
 29589                           pclath	equ	0xFFA
 29590                           tblptru	equ	0xFF8
 29591                           tblptrh	equ	0xFF7
 29592                           tblptrl	equ	0xFF6
 29593                           tablat	equ	0xFF5
 29594                           prodh	equ	0xFF4
 29595                           prodl	equ	0xFF3
 29596                           intcon	equ	0xFF2
 29597                           indf0	equ	0xFEF
 29598                           postinc0	equ	0xFEE
 29599                           fsr0h	equ	0xFEA
 29600                           fsr0l	equ	0xFE9
 29601                           wreg	equ	0xFE8
 29602                           indf1	equ	0xFE7
 29603                           postdec1	equ	0xFE5
 29604                           fsr1h	equ	0xFE2
 29605                           fsr1l	equ	0xFE1
 29606                           indf2	equ	0xFDF
 29607                           postinc2	equ	0xFDE
 29608                           postdec2	equ	0xFDD
 29609                           plusw2	equ	0xFDB
 29610                           fsr2h	equ	0xFDA
 29611                           fsr2l	equ	0xFD9
 29612                           status	equ	0xFD8
 29613                           
 29614 ;; *************** function _HMI_SetBar *****************
 29615 ;; Defined at:
 29616 ;;		line 205 in file "HMI.c"
 29617 ;; Parameters:    Size  Location     Type
 29618 ;;  pValue          1    wreg     unsigned char 
 29619 ;; Auto vars:     Size  Location     Type
 29620 ;;  pValue          1    0[BANK0 ] unsigned char 
 29621 ;; Return value:  Size  Location     Type
 29622 ;;                  1    wreg      void 
 29623 ;; Registers used:
 29624 ;;		wreg
 29625 ;; Tracked objects:
 29626 ;;		On entry : 0/0
 29627 ;;		On exit  : 0/0
 29628 ;;		Unchanged: 0/0
 29629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29634 ;;Total ram usage:        1 bytes
 29635 ;; Hardware stack levels used:    1
 29636 ;; Hardware stack levels required when called:    7
 29637 ;; This function calls:
 29638 ;;		Nothing
 29639 ;; This function is called by:
 29640 ;;		_Event_DIPSwitch
 29641 ;;		_Event_HMI_DIPSwitch
 29642 ;;		_Event_HMI_LeftButton
 29643 ;;		_Event_HMI_RightButton
 29644 ;; This function uses a non-reentrant model
 29645 ;;
 29646                           
 29647                           	psect	text157
 29648  0168A0                     __ptext157:
 29649                           	opt stack 0
 29650  0168A0                     _HMI_SetBar:
 29651                           	opt stack 18
 29652                           
 29653                           ; BSR set to: 0
 29654                           ;incstack = 0
 29655                           ;HMI_SetBar@pValue stored from wreg
 29656  0168A0  0100               	movlb	0	; () banked
 29657  0168A2  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29658                           
 29659                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29660  0168A4  C0BA  F347         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29661  0168A8  0012               	return		;funcret
 29662  0168AA                     __end_of_HMI_SetBar:
 29663                           	opt stack 0
 29664                           tosu	equ	0xFFF
 29665                           tosh	equ	0xFFE
 29666                           tosl	equ	0xFFD
 29667                           pclath	equ	0xFFA
 29668                           tblptru	equ	0xFF8
 29669                           tblptrh	equ	0xFF7
 29670                           tblptrl	equ	0xFF6
 29671                           tablat	equ	0xFF5
 29672                           prodh	equ	0xFF4
 29673                           prodl	equ	0xFF3
 29674                           intcon	equ	0xFF2
 29675                           indf0	equ	0xFEF
 29676                           postinc0	equ	0xFEE
 29677                           fsr0h	equ	0xFEA
 29678                           fsr0l	equ	0xFE9
 29679                           wreg	equ	0xFE8
 29680                           indf1	equ	0xFE7
 29681                           postdec1	equ	0xFE5
 29682                           fsr1h	equ	0xFE2
 29683                           fsr1l	equ	0xFE1
 29684                           indf2	equ	0xFDF
 29685                           postinc2	equ	0xFDE
 29686                           postdec2	equ	0xFDD
 29687                           plusw2	equ	0xFDB
 29688                           fsr2h	equ	0xFDA
 29689                           fsr2l	equ	0xFD9
 29690                           status	equ	0xFD8
 29691                           
 29692 ;; *************** function _HMI_GetBar *****************
 29693 ;; Defined at:
 29694 ;;		line 209 in file "HMI.c"
 29695 ;; Parameters:    Size  Location     Type
 29696 ;;		None
 29697 ;; Auto vars:     Size  Location     Type
 29698 ;;		None
 29699 ;; Return value:  Size  Location     Type
 29700 ;;                  1    wreg      unsigned char 
 29701 ;; Registers used:
 29702 ;;		wreg, status,2
 29703 ;; Tracked objects:
 29704 ;;		On entry : 0/0
 29705 ;;		On exit  : 0/0
 29706 ;;		Unchanged: 0/0
 29707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29712 ;;Total ram usage:        0 bytes
 29713 ;; Hardware stack levels used:    1
 29714 ;; Hardware stack levels required when called:    7
 29715 ;; This function calls:
 29716 ;;		Nothing
 29717 ;; This function is called by:
 29718 ;;		_Event_DIPSwitch
 29719 ;;		_Event_HMI_DIPSwitch
 29720 ;; This function uses a non-reentrant model
 29721 ;;
 29722                           
 29723                           	psect	text158
 29724  0168DC                     __ptext158:
 29725                           	opt stack 0
 29726  0168DC                     _HMI_GetBar:
 29727                           	opt stack 18
 29728                           
 29729                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29730                           
 29731                           ;incstack = 0
 29732  0168DC  0103               	movlb	3	; () banked
 29733  0168DE  5147               	movf	(_HMIBoard+7)& (0+255),w,b
 29734  0168E0  0012               	return	
 29735  0168E2                     __end_of_HMI_GetBar:
 29736                           	opt stack 0
 29737                           tosu	equ	0xFFF
 29738                           tosh	equ	0xFFE
 29739                           tosl	equ	0xFFD
 29740                           pclath	equ	0xFFA
 29741                           tblptru	equ	0xFF8
 29742                           tblptrh	equ	0xFF7
 29743                           tblptrl	equ	0xFF6
 29744                           tablat	equ	0xFF5
 29745                           prodh	equ	0xFF4
 29746                           prodl	equ	0xFF3
 29747                           intcon	equ	0xFF2
 29748                           indf0	equ	0xFEF
 29749                           postinc0	equ	0xFEE
 29750                           fsr0h	equ	0xFEA
 29751                           fsr0l	equ	0xFE9
 29752                           wreg	equ	0xFE8
 29753                           indf1	equ	0xFE7
 29754                           postdec1	equ	0xFE5
 29755                           fsr1h	equ	0xFE2
 29756                           fsr1l	equ	0xFE1
 29757                           indf2	equ	0xFDF
 29758                           postinc2	equ	0xFDE
 29759                           postdec2	equ	0xFDD
 29760                           plusw2	equ	0xFDB
 29761                           fsr2h	equ	0xFDA
 29762                           fsr2l	equ	0xFD9
 29763                           status	equ	0xFD8
 29764                           
 29765 ;; *************** function _ISR_Function *****************
 29766 ;; Defined at:
 29767 ;;		line 38 in file "Library/ISR.c"
 29768 ;; Parameters:    Size  Location     Type
 29769 ;;		None
 29770 ;; Auto vars:     Size  Location     Type
 29771 ;;		None
 29772 ;; Return value:  Size  Location     Type
 29773 ;;                  1    wreg      void 
 29774 ;; Registers used:
 29775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29776 ;; Tracked objects:
 29777 ;;		On entry : 0/0
 29778 ;;		On exit  : 0/0
 29779 ;;		Unchanged: 0/0
 29780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29783 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29784 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29785 ;;Total ram usage:       18 bytes
 29786 ;; Hardware stack levels used:    1
 29787 ;; Hardware stack levels required when called:    6
 29788 ;; This function calls:
 29789 ;;		_Timer0_ISR
 29790 ;; This function is called by:
 29791 ;;		Interrupt level 2
 29792 ;; This function uses a non-reentrant model
 29793 ;;
 29794                           
 29795                           	psect	intcode
 29796  001408                     __pintcode:
 29797                           	opt stack 0
 29798  001408                     _ISR_Function:
 29799                           	opt stack 13
 29800                           
 29801                           ; BSR set to: 3
 29802                           ;incstack = 0
 29803  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29804  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29805  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29806  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29807  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29808  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29809  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29810  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29811  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29812  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29813  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29814  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29815  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29816  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29817  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29818  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29819  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29820  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29821  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29822                           
 29823                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29824  001452  92F2               	bcf	intcon,1,c	;volatile
 29825                           
 29826                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29827  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29828  001456  AAF2               	btfss	intcon,5,c	;volatile
 29829  001458  D002               	goto	i2l1590
 29830                           
 29831                           ;ISR.c: 68: Timer0_ISR();
 29832  00145A  EC1A  F0B2         	call	_Timer0_ISR	;wreg free
 29833  00145E                     i2l1590:
 29834  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29835  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29836  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29837  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29838  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29839  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29840  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29841  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29842  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29843  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29844  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29845  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29846  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29847  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29848  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29849  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29850  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29851  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29852  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29853  0014A8  0011               	retfie		f
 29854  0014AA                     __end_of_ISR_Function:
 29855                           	opt stack 0
 29856                           tosu	equ	0xFFF
 29857                           tosh	equ	0xFFE
 29858                           tosl	equ	0xFFD
 29859                           pclatu	equ	0xFFB
 29860                           pclath	equ	0xFFA
 29861                           tblptru	equ	0xFF8
 29862                           tblptrh	equ	0xFF7
 29863                           tblptrl	equ	0xFF6
 29864                           tablat	equ	0xFF5
 29865                           prodh	equ	0xFF4
 29866                           prodl	equ	0xFF3
 29867                           intcon	equ	0xFF2
 29868                           indf0	equ	0xFEF
 29869                           postinc0	equ	0xFEE
 29870                           fsr0h	equ	0xFEA
 29871                           fsr0l	equ	0xFE9
 29872                           wreg	equ	0xFE8
 29873                           indf1	equ	0xFE7
 29874                           postdec1	equ	0xFE5
 29875                           fsr1h	equ	0xFE2
 29876                           fsr1l	equ	0xFE1
 29877                           indf2	equ	0xFDF
 29878                           postinc2	equ	0xFDE
 29879                           postdec2	equ	0xFDD
 29880                           plusw2	equ	0xFDB
 29881                           fsr2h	equ	0xFDA
 29882                           fsr2l	equ	0xFD9
 29883                           status	equ	0xFD8
 29884                           
 29885 ;; *************** function _Timer0_ISR *****************
 29886 ;; Defined at:
 29887 ;;		line 94 in file "Library/Timer0.c"
 29888 ;; Parameters:    Size  Location     Type
 29889 ;;		None
 29890 ;; Auto vars:     Size  Location     Type
 29891 ;;		None
 29892 ;; Return value:  Size  Location     Type
 29893 ;;                  1    wreg      void 
 29894 ;; Registers used:
 29895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29896 ;; Tracked objects:
 29897 ;;		On entry : 0/0
 29898 ;;		On exit  : 0/0
 29899 ;;		Unchanged: 0/0
 29900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29905 ;;Total ram usage:        0 bytes
 29906 ;; Hardware stack levels used:    1
 29907 ;; Hardware stack levels required when called:    5
 29908 ;; This function calls:
 29909 ;;		Absolute function
 29910 ;;		i2_Motor_Step
 29911 ;;		i2_Timer0_Stop
 29912 ;; This function is called by:
 29913 ;;		_ISR_Function
 29914 ;; This function uses a non-reentrant model
 29915 ;;
 29916                           
 29917                           	psect	text160
 29918  016434                     __ptext160:
 29919                           	opt stack 0
 29920  016434                     _Timer0_ISR:
 29921                           	opt stack 13
 29922                           
 29923                           ;Timer0.c: 96: Timer0_Stop();
 29924                           
 29925                           ;incstack = 0
 29926  016434  EC71  F0B4         	call	i2_Timer0_Stop	;wreg free
 29927                           
 29928                           ;Timer0.c: 99: if (gISR != 0)
 29929  016438  0100               	movlb	0	; () banked
 29930  01643A  5160               	movf	_gISR& (0+255),w,b
 29931  01643C  0100               	movlb	0	; () banked
 29932  01643E  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29933  016440  0100               	movlb	0	; () banked
 29934  016442  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29935  016444  B4D8               	btfsc	status,2,c
 29936  016446  0012               	return	
 29937                           
 29938                           ; BSR set to: 0
 29939                           ;Timer0.c: 100: gISR();
 29940  016448  D801               	call	i2u1384_48
 29941  01644A  0012               	return	
 29942  01644C                     i2u1384_48:
 29943  01644C  0005               	push	
 29944  01644E  6EFA               	movwf	pclath,c
 29945  016450  0100               	movlb	0	; () banked
 29946  016452  5160               	movf	_gISR& (0+255),w,b
 29947  016454  6EFD               	movwf	tosl,c
 29948  016456  5161               	movf	(_gISR+1)& (0+255),w,b
 29949  016458  6EFE               	movwf	tosh,c
 29950  01645A  5162               	movf	(_gISR+2)& (0+255),w,b
 29951  01645C  6EFF               	movwf	tosu,c
 29952  01645E  50FA               	movf	pclath,w,c
 29953  016460  0012               	return		;indir
 29954  016462                     __end_of_Timer0_ISR:
 29955                           	opt stack 0
 29956                           tosu	equ	0xFFF
 29957                           tosh	equ	0xFFE
 29958                           tosl	equ	0xFFD
 29959                           pclatu	equ	0xFFB
 29960                           pclath	equ	0xFFA
 29961                           tblptru	equ	0xFF8
 29962                           tblptrh	equ	0xFF7
 29963                           tblptrl	equ	0xFF6
 29964                           tablat	equ	0xFF5
 29965                           prodh	equ	0xFF4
 29966                           prodl	equ	0xFF3
 29967                           intcon	equ	0xFF2
 29968                           indf0	equ	0xFEF
 29969                           postinc0	equ	0xFEE
 29970                           fsr0h	equ	0xFEA
 29971                           fsr0l	equ	0xFE9
 29972                           wreg	equ	0xFE8
 29973                           indf1	equ	0xFE7
 29974                           postdec1	equ	0xFE5
 29975                           fsr1h	equ	0xFE2
 29976                           fsr1l	equ	0xFE1
 29977                           indf2	equ	0xFDF
 29978                           postinc2	equ	0xFDE
 29979                           postdec2	equ	0xFDD
 29980                           plusw2	equ	0xFDB
 29981                           fsr2h	equ	0xFDA
 29982                           fsr2l	equ	0xFD9
 29983                           status	equ	0xFD8
 29984                           
 29985 ;; *************** function i2_Motor_Step *****************
 29986 ;; Defined at:
 29987 ;;		line 75 in file "Library/Motor.c"
 29988 ;; Parameters:    Size  Location     Type
 29989 ;;		None
 29990 ;; Auto vars:     Size  Location     Type
 29991 ;;		None
 29992 ;; Return value:  Size  Location     Type
 29993 ;;                  1    wreg      void 
 29994 ;; Registers used:
 29995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29996 ;; Tracked objects:
 29997 ;;		On entry : 0/0
 29998 ;;		On exit  : 0/0
 29999 ;;		Unchanged: 0/0
 30000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30003 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30004 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30005 ;;Total ram usage:        2 bytes
 30006 ;; Hardware stack levels used:    1
 30007 ;; Hardware stack levels required when called:    4
 30008 ;; This function calls:
 30009 ;;		i2_MXK_Queue
 30010 ;;		i2_MXK_Release
 30011 ;;		i2_MXK_SwitchTo
 30012 ;;		i2_Port_SetPin
 30013 ;;		i2_Timer0_Restart
 30014 ;;		i2_Timer0_Stop
 30015 ;; This function is called by:
 30016 ;; This function uses a non-reentrant model
 30017 ;;
 30018                           
 30019                           	psect	text161
 30020  013898                     __ptext161:
 30021                           	opt stack 0
 30022  013898                     i2_Motor_Step:
 30023                           	opt stack 13
 30024                           
 30025                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 30026                           
 30027                           ;incstack = 0
 30028  013898  0100               	movlb	0	; () banked
 30029  01389A  EE20 F004          	lfsr	2,4
 30030  01389E  517F               	movf	_lMotor& (0+255),w,b
 30031  0138A0  26D9               	addwf	fsr2l,f,c
 30032  0138A2  5180               	movf	(_lMotor+1)& (0+255),w,b
 30033  0138A4  22DA               	addwfc	fsr2h,f,c
 30034  0138A6  50DF               	movf	indf2,w,c
 30035  0138A8  EC6D  F0B1         	call	i2_MXK_SwitchTo
 30036  0138AC  0900               	iorlw	0
 30037  0138AE  B4D8               	btfsc	status,2,c
 30038  0138B0  D06A               	goto	i2l1627
 30039                           
 30040                           ;Motor.c: 78: {
 30041                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 30042  0138B2  C07F  FFD9         	movff	_lMotor,fsr2l
 30043  0138B6  C080  FFDA         	movff	_lMotor+1,fsr2h
 30044  0138BA  50DE               	movf	postinc2,w,c
 30045  0138BC  10DE               	iorwf	postinc2,w,c
 30046  0138BE  B4D8               	btfsc	status,2,c
 30047  0138C0  D05D               	goto	i2l1628
 30048                           
 30049                           ;Motor.c: 80: {
 30050                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 30051  0138C2  C07F  FFD9         	movff	_lMotor,fsr2l
 30052  0138C6  C080  FFDA         	movff	_lMotor+1,fsr2h
 30053  0138CA  0E01               	movlw	1
 30054  0138CC  BEDB               	btfsc	plusw2,7,c
 30055  0138CE  D022               	goto	i2l1629
 30056  0138D0  0E01               	movlw	1
 30057  0138D2  50DB               	movf	plusw2,w,c
 30058  0138D4  E103               	bnz	i2u741_40
 30059  0138D6  04DE               	decf	postinc2,w,c
 30060  0138D8  A0D8               	btfss	status,0,c
 30061  0138DA  D01C               	goto	i2l1629
 30062  0138DC                     i2u741_40:
 30063                           
 30064                           ;Motor.c: 83: {
 30065                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 30066  0138DC  C07F  FFD9         	movff	_lMotor,fsr2l
 30067  0138E0  C080  FFDA         	movff	_lMotor+1,fsr2h
 30068  0138E4  28DE               	incf	postinc2,w,c
 30069  0138E6  E104               	bnz	i2u742_40
 30070  0138E8  0E7F               	movlw	127
 30071  0138EA  18DE               	xorwf	postinc2,w,c
 30072  0138EC  B4D8               	btfsc	status,2,c
 30073  0138EE  D007               	goto	i2l1630
 30074  0138F0                     i2u742_40:
 30075                           
 30076                           ;Motor.c: 85: lMotor->mDelta --;
 30077  0138F0  C07F  FFD9         	movff	_lMotor,fsr2l
 30078  0138F4  C080  FFDA         	movff	_lMotor+1,fsr2h
 30079  0138F8  06DE               	decf	postinc2,f,c
 30080  0138FA  0E00               	movlw	0
 30081  0138FC  5ADD               	subwfb	postdec2,f,c
 30082  0138FE                     i2l1630:
 30083                           
 30084                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 30085  0138FE  0E91               	movlw	low _PortE
 30086  013900  6E10               	movwf	i2Port_SetPin@pInput,c
 30087  013902  0E00               	movlw	high _PortE
 30088  013904  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30089  013906  0E00               	movlw	0
 30090  013908  6E12               	movwf	i2Port_SetPin@pPin,c
 30091  01390A  0E01               	movlw	1
 30092  01390C  6E13               	movwf	i2Port_SetPin@pValue,c
 30093  01390E  EC46  F0A4         	call	i2_Port_SetPin	;wreg free
 30094                           
 30095                           ;Motor.c: 88: }
 30096  013912  D01B               	goto	i2l1631
 30097  013914                     i2l1629:
 30098                           
 30099                           ;Motor.c: 89: else
 30100                           ;Motor.c: 90: {
 30101                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 30102  013914  C07F  FFD9         	movff	_lMotor,fsr2l
 30103  013918  C080  FFDA         	movff	_lMotor+1,fsr2h
 30104  01391C  04DE               	decf	postinc2,w,c
 30105  01391E  E104               	bnz	i2u743_40
 30106  013920  0E80               	movlw	128
 30107  013922  18DE               	xorwf	postinc2,w,c
 30108  013924  B4D8               	btfsc	status,2,c
 30109  013926  D007               	goto	i2l1632
 30110  013928                     i2u743_40:
 30111                           
 30112                           ;Motor.c: 92: lMotor->mDelta ++;
 30113  013928  C07F  FFD9         	movff	_lMotor,fsr2l
 30114  01392C  C080  FFDA         	movff	_lMotor+1,fsr2h
 30115  013930  2ADE               	incf	postinc2,f,c
 30116  013932  0E00               	movlw	0
 30117  013934  22DD               	addwfc	postdec2,f,c
 30118  013936                     i2l1632:
 30119                           
 30120                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 30121  013936  0E91               	movlw	low _PortE
 30122  013938  6E10               	movwf	i2Port_SetPin@pInput,c
 30123  01393A  0E00               	movlw	high _PortE
 30124  01393C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30125  01393E  0E00               	movlw	0
 30126  013940  6E12               	movwf	i2Port_SetPin@pPin,c
 30127  013942  0E00               	movlw	0
 30128  013944  6E13               	movwf	i2Port_SetPin@pValue,c
 30129  013946  EC46  F0A4         	call	i2_Port_SetPin	;wreg free
 30130  01394A                     i2l1631:
 30131                           
 30132                           ;Motor.c: 95: }
 30133                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 30134  01394A  0E91               	movlw	low _PortE
 30135  01394C  6E10               	movwf	i2Port_SetPin@pInput,c
 30136  01394E  0E00               	movlw	high _PortE
 30137  013950  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30138  013952  0E01               	movlw	1
 30139  013954  6E12               	movwf	i2Port_SetPin@pPin,c
 30140  013956  0E01               	movlw	1
 30141  013958  6E13               	movwf	i2Port_SetPin@pValue,c
 30142  01395A  EC46  F0A4         	call	i2_Port_SetPin	;wreg free
 30143                           
 30144                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 30145  01395E  0E91               	movlw	low _PortE
 30146  013960  6E10               	movwf	i2Port_SetPin@pInput,c
 30147  013962  0E00               	movlw	high _PortE
 30148  013964  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30149  013966  0E01               	movlw	1
 30150  013968  6E12               	movwf	i2Port_SetPin@pPin,c
 30151  01396A  0E00               	movlw	0
 30152  01396C  6E13               	movwf	i2Port_SetPin@pValue,c
 30153  01396E  EC46  F0A4         	call	i2_Port_SetPin	;wreg free
 30154                           
 30155                           ;Motor.c: 101: MXK_Release();
 30156  013972  EC74  F0B4         	call	i2_MXK_Release	;wreg free
 30157                           
 30158                           ;Motor.c: 102: Timer0_Restart();
 30159  013976  EC40  F0B4         	call	i2_Timer0_Restart	;wreg free
 30160                           
 30161                           ;Motor.c: 103: return;
 30162  01397A  0012               	return	
 30163  01397C                     i2l1628:
 30164                           
 30165                           ;Motor.c: 104: }
 30166                           ;Motor.c: 105: MXK_Release();
 30167  01397C  EC74  F0B4         	call	i2_MXK_Release	;wreg free
 30168                           
 30169                           ;Motor.c: 106: Timer0_Stop();
 30170  013980  EC71  F0B4         	call	i2_Timer0_Stop	;wreg free
 30171                           
 30172                           ;Motor.c: 107: return;
 30173  013984  0012               	return	
 30174  013986                     i2l1627:
 30175                           
 30176                           ;Motor.c: 108: }
 30177                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 30178  013986  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 30179  01398A  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 30180  01398E  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 30181  013992  EC2D  F0B4         	call	i2_MXK_Queue	;wreg free
 30182  013996  0012               	return		;funcret
 30183  013998                     __end_ofi2_Motor_Step:
 30184                           	opt stack 0
 30185                           tosu	equ	0xFFF
 30186                           tosh	equ	0xFFE
 30187                           tosl	equ	0xFFD
 30188                           pclatu	equ	0xFFB
 30189                           pclath	equ	0xFFA
 30190                           tblptru	equ	0xFF8
 30191                           tblptrh	equ	0xFF7
 30192                           tblptrl	equ	0xFF6
 30193                           tablat	equ	0xFF5
 30194                           prodh	equ	0xFF4
 30195                           prodl	equ	0xFF3
 30196                           intcon	equ	0xFF2
 30197                           indf0	equ	0xFEF
 30198                           postinc0	equ	0xFEE
 30199                           fsr0h	equ	0xFEA
 30200                           fsr0l	equ	0xFE9
 30201                           wreg	equ	0xFE8
 30202                           indf1	equ	0xFE7
 30203                           postdec1	equ	0xFE5
 30204                           fsr1h	equ	0xFE2
 30205                           fsr1l	equ	0xFE1
 30206                           indf2	equ	0xFDF
 30207                           postinc2	equ	0xFDE
 30208                           postdec2	equ	0xFDD
 30209                           plusw2	equ	0xFDB
 30210                           fsr2h	equ	0xFDA
 30211                           fsr2l	equ	0xFD9
 30212                           status	equ	0xFD8
 30213                           
 30214 ;; *************** function i2_Timer0_Stop *****************
 30215 ;; Defined at:
 30216 ;;		line 89 in file "Library/Timer0.c"
 30217 ;; Parameters:    Size  Location     Type
 30218 ;;		None
 30219 ;; Auto vars:     Size  Location     Type
 30220 ;;		None
 30221 ;; Return value:  Size  Location     Type
 30222 ;;                  1    wreg      void 
 30223 ;; Registers used:
 30224 ;;		None
 30225 ;; Tracked objects:
 30226 ;;		On entry : 0/0
 30227 ;;		On exit  : 0/0
 30228 ;;		Unchanged: 0/0
 30229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30234 ;;Total ram usage:        0 bytes
 30235 ;; Hardware stack levels used:    1
 30236 ;; This function calls:
 30237 ;;		Nothing
 30238 ;; This function is called by:
 30239 ;;		_Timer0_ISR
 30240 ;;		i2_Motor_Step
 30241 ;; This function uses a non-reentrant model
 30242 ;;
 30243                           
 30244                           	psect	text162
 30245  0168E2                     __ptext162:
 30246                           	opt stack 0
 30247  0168E2                     i2_Timer0_Stop:
 30248                           	opt stack 17
 30249                           
 30250                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30251                           
 30252                           ;incstack = 0
 30253  0168E2  9AF2               	bcf	intcon,5,c	;volatile
 30254                           
 30255                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30256  0168E4  94F2               	bcf	intcon,2,c	;volatile
 30257  0168E6  0012               	return		;funcret
 30258  0168E8                     __end_ofi2_Timer0_Stop:
 30259                           	opt stack 0
 30260                           tosu	equ	0xFFF
 30261                           tosh	equ	0xFFE
 30262                           tosl	equ	0xFFD
 30263                           pclatu	equ	0xFFB
 30264                           pclath	equ	0xFFA
 30265                           tblptru	equ	0xFF8
 30266                           tblptrh	equ	0xFF7
 30267                           tblptrl	equ	0xFF6
 30268                           tablat	equ	0xFF5
 30269                           prodh	equ	0xFF4
 30270                           prodl	equ	0xFF3
 30271                           intcon	equ	0xFF2
 30272                           indf0	equ	0xFEF
 30273                           postinc0	equ	0xFEE
 30274                           fsr0h	equ	0xFEA
 30275                           fsr0l	equ	0xFE9
 30276                           wreg	equ	0xFE8
 30277                           indf1	equ	0xFE7
 30278                           postdec1	equ	0xFE5
 30279                           fsr1h	equ	0xFE2
 30280                           fsr1l	equ	0xFE1
 30281                           indf2	equ	0xFDF
 30282                           postinc2	equ	0xFDE
 30283                           postdec2	equ	0xFDD
 30284                           plusw2	equ	0xFDB
 30285                           fsr2h	equ	0xFDA
 30286                           fsr2l	equ	0xFD9
 30287                           status	equ	0xFD8
 30288                           
 30289 ;; *************** function i2_Timer0_Restart *****************
 30290 ;; Defined at:
 30291 ;;		line 83 in file "Library/Timer0.c"
 30292 ;; Parameters:    Size  Location     Type
 30293 ;;		None
 30294 ;; Auto vars:     Size  Location     Type
 30295 ;;		None
 30296 ;; Return value:  Size  Location     Type
 30297 ;;                  1    wreg      void 
 30298 ;; Registers used:
 30299 ;;		None
 30300 ;; Tracked objects:
 30301 ;;		On entry : 0/0
 30302 ;;		On exit  : 0/0
 30303 ;;		Unchanged: 0/0
 30304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30309 ;;Total ram usage:        0 bytes
 30310 ;; Hardware stack levels used:    1
 30311 ;; This function calls:
 30312 ;;		Nothing
 30313 ;; This function is called by:
 30314 ;;		i2_Motor_Step
 30315 ;; This function uses a non-reentrant model
 30316 ;;
 30317                           
 30318                           	psect	text163
 30319  016880                     __ptext163:
 30320                           	opt stack 0
 30321  016880                     i2_Timer0_Restart:
 30322                           	opt stack 16
 30323                           
 30324                           ;Timer0.c: 85: TMR0 = COUNTER;
 30325                           
 30326                           ;incstack = 0
 30327  016880  C029  FFD6         	movff	_COUNTER,4054	;volatile
 30328  016884  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 30329                           
 30330                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 30331  016888  8AF2               	bsf	intcon,5,c	;volatile
 30332  01688A  0012               	return		;funcret
 30333  01688C                     __end_ofi2_Timer0_Restart:
 30334                           	opt stack 0
 30335                           tosu	equ	0xFFF
 30336                           tosh	equ	0xFFE
 30337                           tosl	equ	0xFFD
 30338                           pclatu	equ	0xFFB
 30339                           pclath	equ	0xFFA
 30340                           tblptru	equ	0xFF8
 30341                           tblptrh	equ	0xFF7
 30342                           tblptrl	equ	0xFF6
 30343                           tablat	equ	0xFF5
 30344                           prodh	equ	0xFF4
 30345                           prodl	equ	0xFF3
 30346                           intcon	equ	0xFF2
 30347                           indf0	equ	0xFEF
 30348                           postinc0	equ	0xFEE
 30349                           fsr0h	equ	0xFEA
 30350                           fsr0l	equ	0xFE9
 30351                           wreg	equ	0xFE8
 30352                           indf1	equ	0xFE7
 30353                           postdec1	equ	0xFE5
 30354                           fsr1h	equ	0xFE2
 30355                           fsr1l	equ	0xFE1
 30356                           indf2	equ	0xFDF
 30357                           postinc2	equ	0xFDE
 30358                           postdec2	equ	0xFDD
 30359                           plusw2	equ	0xFDB
 30360                           fsr2h	equ	0xFDA
 30361                           fsr2l	equ	0xFD9
 30362                           status	equ	0xFD8
 30363                           
 30364 ;; *************** function i2_Port_SetPin *****************
 30365 ;; Defined at:
 30366 ;;		line 247 in file "Library/Port.c"
 30367 ;; Parameters:    Size  Location     Type
 30368 ;;  pInput          2   15[COMRAM] const PTR struct Port
 30369 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 30370 ;;  pPin            1   17[COMRAM] enum E6750
 30371 ;;  pValue          1   18[COMRAM] unsigned char 
 30372 ;; Auto vars:     Size  Location     Type
 30373 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 30374 ;; Return value:  Size  Location     Type
 30375 ;;                  1    wreg      void 
 30376 ;; Registers used:
 30377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30378 ;; Tracked objects:
 30379 ;;		On entry : 0/0
 30380 ;;		On exit  : 0/0
 30381 ;;		Unchanged: 0/0
 30382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30386 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30387 ;;Total ram usage:        5 bytes
 30388 ;; Hardware stack levels used:    1
 30389 ;; Hardware stack levels required when called:    3
 30390 ;; This function calls:
 30391 ;;		i2_Byte_SetBit
 30392 ;;		i2_Word_GetPair
 30393 ;; This function is called by:
 30394 ;;		i2_Motor_Step
 30395 ;; This function uses a non-reentrant model
 30396 ;;
 30397                           
 30398                           	psect	text164
 30399  01488C                     __ptext164:
 30400                           	opt stack 0
 30401  01488C                     i2_Port_SetPin:
 30402                           	opt stack 13
 30403                           
 30404                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30405                           
 30406                           ;incstack = 0
 30407  01488C  0E08               	movlw	8
 30408  01488E  2410               	addwf	i2Port_SetPin@pInput,w,c
 30409  014890  6E0D               	movwf	i2Word_GetPair@pInput,c
 30410  014892  0E00               	movlw	0
 30411  014894  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30412  014896  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30413  014898  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30414  01489C  ECEB  F0B1         	call	i2_Word_GetPair	;wreg free
 30415  0148A0  6E14               	movwf	i2Port_SetPin@Type,c
 30416                           
 30417                           ;Port.c: 250: switch (Type)
 30418  0148A2  D03B               	goto	i2l427
 30419  0148A4                     
 30420                           ;Port.c: 256: pValue &= 1;
 30421  0148A4  0E01               	movlw	1
 30422  0148A6  1613               	andwf	i2Port_SetPin@pValue,f,c
 30423                           
 30424                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30425  0148A8  EE20 F002          	lfsr	2,2
 30426  0148AC  5010               	movf	i2Port_SetPin@pInput,w,c
 30427  0148AE  26D9               	addwf	fsr2l,f,c
 30428  0148B0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30429  0148B2  22DA               	addwfc	fsr2h,f,c
 30430  0148B4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30431  0148B8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30432  0148BC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30433  0148C0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30434  0148C4  EC98  F0AE         	call	i2_Byte_SetBit	;wreg free
 30435                           
 30436                           ;Port.c: 258: break;
 30437  0148C8  0012               	return	
 30438  0148CA                     
 30439                           ;Port.c: 261: pValue &= 1;
 30440  0148CA  0E01               	movlw	1
 30441  0148CC  1613               	andwf	i2Port_SetPin@pValue,f,c
 30442                           
 30443                           ;Port.c: 262: pValue ^= 1;
 30444  0148CE  0E01               	movlw	1
 30445  0148D0  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30446                           
 30447                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30448  0148D2  EE20 F002          	lfsr	2,2
 30449  0148D6  5010               	movf	i2Port_SetPin@pInput,w,c
 30450  0148D8  26D9               	addwf	fsr2l,f,c
 30451  0148DA  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30452  0148DC  22DA               	addwfc	fsr2h,f,c
 30453  0148DE  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30454  0148E2  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30455  0148E6  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30456  0148EA  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30457  0148EE  EC98  F0AE         	call	i2_Byte_SetBit	;wreg free
 30458                           
 30459                           ;Port.c: 264: break;
 30460  0148F2  0012               	return	
 30461  0148F4                     
 30462                           ;Port.c: 266: pValue &= 1;
 30463  0148F4  0E01               	movlw	1
 30464  0148F6  1613               	andwf	i2Port_SetPin@pValue,f,c
 30465                           
 30466                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30467  0148F8  EE20 F004          	lfsr	2,4
 30468  0148FC  5010               	movf	i2Port_SetPin@pInput,w,c
 30469  0148FE  26D9               	addwf	fsr2l,f,c
 30470  014900  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30471  014902  22DA               	addwfc	fsr2h,f,c
 30472  014904  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30473  014908  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30474  01490C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30475  014910  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30476  014914  EC98  F0AE         	call	i2_Byte_SetBit	;wreg free
 30477                           
 30478                           ;Port.c: 269: }
 30479                           
 30480                           ;Port.c: 268: break;
 30481  014918  0012               	return	
 30482  01491A                     i2l427:
 30483  01491A  5014               	movf	i2Port_SetPin@Type,w,c
 30484                           
 30485                           ; Switch size 1, requested type "space"
 30486                           ; Number of cases is 4, Range of values is 0 to 3
 30487                           ; switch strategies available:
 30488                           ; Name         Instructions Cycles
 30489                           ; simple_byte           13     7 (average)
 30490                           ;	Chosen strategy is simple_byte
 30491  01491C  0A00               	xorlw	0	; case 0
 30492  01491E  B4D8               	btfsc	status,2,c
 30493  014920  0012               	return	
 30494  014922  0A01               	xorlw	1	; case 1
 30495  014924  B4D8               	btfsc	status,2,c
 30496  014926  D7BE               	goto	i2l430
 30497  014928  0A03               	xorlw	3	; case 2
 30498  01492A  B4D8               	btfsc	status,2,c
 30499  01492C  D7CE               	goto	i2l432
 30500  01492E  0A01               	xorlw	1	; case 3
 30501  014930  A4D8               	btfss	status,2,c
 30502  014932  0012               	return	
 30503  014934  D7DF               	goto	i2l433
 30504  014936                     __end_ofi2_Port_SetPin:
 30505                           	opt stack 0
 30506                           tosu	equ	0xFFF
 30507                           tosh	equ	0xFFE
 30508                           tosl	equ	0xFFD
 30509                           pclatu	equ	0xFFB
 30510                           pclath	equ	0xFFA
 30511                           tblptru	equ	0xFF8
 30512                           tblptrh	equ	0xFF7
 30513                           tblptrl	equ	0xFF6
 30514                           tablat	equ	0xFF5
 30515                           prodh	equ	0xFF4
 30516                           prodl	equ	0xFF3
 30517                           intcon	equ	0xFF2
 30518                           indf0	equ	0xFEF
 30519                           postinc0	equ	0xFEE
 30520                           fsr0h	equ	0xFEA
 30521                           fsr0l	equ	0xFE9
 30522                           wreg	equ	0xFE8
 30523                           indf1	equ	0xFE7
 30524                           postdec1	equ	0xFE5
 30525                           fsr1h	equ	0xFE2
 30526                           fsr1l	equ	0xFE1
 30527                           indf2	equ	0xFDF
 30528                           postinc2	equ	0xFDE
 30529                           postdec2	equ	0xFDD
 30530                           plusw2	equ	0xFDB
 30531                           fsr2h	equ	0xFDA
 30532                           fsr2l	equ	0xFD9
 30533                           status	equ	0xFD8
 30534                           
 30535 ;; *************** function i2_Word_GetPair *****************
 30536 ;; Defined at:
 30537 ;;		line 156 in file "Library/Types.c"
 30538 ;; Parameters:    Size  Location     Type
 30539 ;;  pInput          2   12[COMRAM] PTR struct Word
 30540 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30541 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30542 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30543 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30544 ;;  pPair           1   14[COMRAM] unsigned char 
 30545 ;; Auto vars:     Size  Location     Type
 30546 ;;		None
 30547 ;; Return value:  Size  Location     Type
 30548 ;;                  1    wreg      unsigned char 
 30549 ;; Registers used:
 30550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30551 ;; Tracked objects:
 30552 ;;		On entry : 0/0
 30553 ;;		On exit  : 0/0
 30554 ;;		Unchanged: 0/0
 30555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30556 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30559 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30560 ;;Total ram usage:        3 bytes
 30561 ;; Hardware stack levels used:    1
 30562 ;; Hardware stack levels required when called:    2
 30563 ;; This function calls:
 30564 ;;		i2_Byte_GetPair
 30565 ;; This function is called by:
 30566 ;;		i2_Port_SetPin
 30567 ;; This function uses a non-reentrant model
 30568 ;;
 30569                           
 30570                           	psect	text165
 30571  0163D6                     __ptext165:
 30572                           	opt stack 0
 30573  0163D6                     i2_Word_GetPair:
 30574                           	opt stack 13
 30575                           
 30576                           ;Types.c: 158: if (pPair >= 4)
 30577                           
 30578                           ;incstack = 0
 30579  0163D6  0E03               	movlw	3
 30580  0163D8  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30581  0163DA  D00C               	goto	i2l781
 30582                           
 30583                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30584  0163DC  0E01               	movlw	1
 30585  0163DE  240D               	addwf	i2Word_GetPair@pInput,w,c
 30586  0163E0  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30587  0163E2  0E00               	movlw	0
 30588  0163E4  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30589  0163E6  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30590  0163E8  500F               	movf	i2Word_GetPair@pPair,w,c
 30591  0163EA  0FFC               	addlw	252
 30592  0163EC  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30593  0163EE  EC67  F0B3         	call	i2_Byte_GetPair	;wreg free
 30594  0163F2  0012               	return	
 30595  0163F4                     i2l781:
 30596                           
 30597                           ;Types.c: 160: else
 30598                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30599  0163F4  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30600  0163F8  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30601  0163FC  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30602  016400  EC67  F0B3         	call	i2_Byte_GetPair	;wreg free
 30603  016404  0012               	return	
 30604  016406                     __end_ofi2_Word_GetPair:
 30605                           	opt stack 0
 30606                           tosu	equ	0xFFF
 30607                           tosh	equ	0xFFE
 30608                           tosl	equ	0xFFD
 30609                           pclatu	equ	0xFFB
 30610                           pclath	equ	0xFFA
 30611                           tblptru	equ	0xFF8
 30612                           tblptrh	equ	0xFF7
 30613                           tblptrl	equ	0xFF6
 30614                           tablat	equ	0xFF5
 30615                           prodh	equ	0xFF4
 30616                           prodl	equ	0xFF3
 30617                           intcon	equ	0xFF2
 30618                           indf0	equ	0xFEF
 30619                           postinc0	equ	0xFEE
 30620                           fsr0h	equ	0xFEA
 30621                           fsr0l	equ	0xFE9
 30622                           wreg	equ	0xFE8
 30623                           indf1	equ	0xFE7
 30624                           postdec1	equ	0xFE5
 30625                           fsr1h	equ	0xFE2
 30626                           fsr1l	equ	0xFE1
 30627                           indf2	equ	0xFDF
 30628                           postinc2	equ	0xFDE
 30629                           postdec2	equ	0xFDD
 30630                           plusw2	equ	0xFDB
 30631                           fsr2h	equ	0xFDA
 30632                           fsr2l	equ	0xFD9
 30633                           status	equ	0xFD8
 30634                           
 30635 ;; *************** function i2_Byte_GetPair *****************
 30636 ;; Defined at:
 30637 ;;		line 87 in file "Library/Types.c"
 30638 ;; Parameters:    Size  Location     Type
 30639 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30640 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30641 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30642 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30643 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30644 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30645 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30646 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30647 ;;		 -> NULL(0), 
 30648 ;;  pPair           1   11[COMRAM] unsigned char 
 30649 ;; Auto vars:     Size  Location     Type
 30650 ;;		None
 30651 ;; Return value:  Size  Location     Type
 30652 ;;                  1    wreg      unsigned char 
 30653 ;; Registers used:
 30654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30655 ;; Tracked objects:
 30656 ;;		On entry : 0/0
 30657 ;;		On exit  : 0/0
 30658 ;;		Unchanged: 0/0
 30659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30660 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30663 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30664 ;;Total ram usage:        3 bytes
 30665 ;; Hardware stack levels used:    1
 30666 ;; Hardware stack levels required when called:    1
 30667 ;; This function calls:
 30668 ;;		i2_Byte_GetZone
 30669 ;; This function is called by:
 30670 ;;		i2_Word_GetPair
 30671 ;; This function uses a non-reentrant model
 30672 ;;
 30673                           
 30674                           	psect	text166
 30675  0166CE                     __ptext166:
 30676                           	opt stack 0
 30677  0166CE                     i2_Byte_GetPair:
 30678                           	opt stack 13
 30679                           
 30680                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30681                           
 30682                           ;incstack = 0
 30683  0166CE  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30684  0166D2  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30685  0166D6  0E04               	movlw	4
 30686  0166D8  6E03               	movwf	i2Byte_GetZone@pMax,c
 30687  0166DA  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30688  0166DE  0E02               	movlw	2
 30689  0166E0  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30690  0166E2  EC0C  F0AA         	call	i2_Byte_GetZone	;wreg free
 30691  0166E6  0012               	return	
 30692  0166E8                     __end_ofi2_Byte_GetPair:
 30693                           	opt stack 0
 30694                           tosu	equ	0xFFF
 30695                           tosh	equ	0xFFE
 30696                           tosl	equ	0xFFD
 30697                           pclatu	equ	0xFFB
 30698                           pclath	equ	0xFFA
 30699                           tblptru	equ	0xFF8
 30700                           tblptrh	equ	0xFF7
 30701                           tblptrl	equ	0xFF6
 30702                           tablat	equ	0xFF5
 30703                           prodh	equ	0xFF4
 30704                           prodl	equ	0xFF3
 30705                           intcon	equ	0xFF2
 30706                           indf0	equ	0xFEF
 30707                           postinc0	equ	0xFEE
 30708                           fsr0h	equ	0xFEA
 30709                           fsr0l	equ	0xFE9
 30710                           wreg	equ	0xFE8
 30711                           indf1	equ	0xFE7
 30712                           postdec1	equ	0xFE5
 30713                           fsr1h	equ	0xFE2
 30714                           fsr1l	equ	0xFE1
 30715                           indf2	equ	0xFDF
 30716                           postinc2	equ	0xFDE
 30717                           postdec2	equ	0xFDD
 30718                           plusw2	equ	0xFDB
 30719                           fsr2h	equ	0xFDA
 30720                           fsr2l	equ	0xFD9
 30721                           status	equ	0xFD8
 30722                           
 30723 ;; *************** function i2_Byte_GetZone *****************
 30724 ;; Defined at:
 30725 ;;		line 64 in file "Library/Types.c"
 30726 ;; Parameters:    Size  Location     Type
 30727 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30728 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30729 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30730 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30731 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30732 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30733 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30734 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30735 ;;		 -> NULL(0), 
 30736 ;;  pMax            1    2[COMRAM] unsigned char 
 30737 ;;  pChunk          1    3[COMRAM] unsigned char 
 30738 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30739 ;; Auto vars:     Size  Location     Type
 30740 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30741 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30742 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30743 ;; Return value:  Size  Location     Type
 30744 ;;                  1    wreg      unsigned char 
 30745 ;; Registers used:
 30746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30747 ;; Tracked objects:
 30748 ;;		On entry : 0/0
 30749 ;;		On exit  : 0/0
 30750 ;;		Unchanged: 0/0
 30751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30752 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30753 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30755 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30756 ;;Total ram usage:        9 bytes
 30757 ;; Hardware stack levels used:    1
 30758 ;; This function calls:
 30759 ;;		Nothing
 30760 ;; This function is called by:
 30761 ;;		i2_Byte_GetPair
 30762 ;; This function uses a non-reentrant model
 30763 ;;
 30764                           
 30765                           	psect	text167
 30766  015418                     __ptext167:
 30767                           	opt stack 0
 30768  015418                     i2_Byte_GetZone:
 30769                           	opt stack 13
 30770                           
 30771                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30772                           
 30773                           ;incstack = 0
 30774  015418  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30775  01541C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30776  015420  0E00               	movlw	low (__mediumconst shr (0+16))
 30777  015422  6EF8               	movwf	tblptru,c
 30778  015424  0E0F               	movlw	(high __ramtop+-1)
 30779  015426  64F7               	cpfsgt	tblptrh,c
 30780  015428  D003               	bra	i2u515_47
 30781  01542A  0008               	tblrd		*
 30782  01542C  50F5               	movf	tablat,w,c
 30783  01542E  D005               	bra	i2u515_40
 30784  015430                     i2u515_47:
 30785  015430  CFF6 FFE9          	movff	tblptrl,fsr0l
 30786  015434  CFF7 FFEA          	movff	tblptrh,fsr0h
 30787  015438  50EF               	movf	indf0,w,c
 30788  01543A                     i2u515_40:
 30789  01543A  6E09               	movwf	i2Byte_GetZone@Output,c
 30790                           
 30791                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30792  01543C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30793  01543E  0D01               	mullw	1
 30794  015440  0E0F               	movlw	low _MASKS
 30795  015442  24F3               	addwf	prodl,w,c
 30796  015444  6EF6               	movwf	tblptrl,c
 30797  015446  0EFD               	movlw	high _MASKS
 30798  015448  20F4               	addwfc	prodh,w,c
 30799  01544A  6EF7               	movwf	tblptrh,c
 30800  01544C                     	if	1	;There are 3 active tblptr bytes
 30801  01544C  6AF8               	clrf	tblptru,c
 30802  01544E  0E00               	movlw	low (__mediumconst shr (0+16))
 30803  015450  22F8               	addwfc	tblptru,f,c
 30804  015452                     	endif
 30805  015452  0008               	tblrd		*
 30806  015454  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30807                           
 30808                           ;Types.c: 68: UINT8 Offset = 0;
 30809  015458  0E00               	movlw	0
 30810  01545A  6E08               	movwf	i2Byte_GetZone@Offset,c
 30811                           
 30812                           ;Types.c: 70: while (pChunk >= pMax)
 30813  01545C  D003               	goto	i2l732
 30814  01545E                     
 30815                           ;Types.c: 71: {
 30816                           ;Types.c: 72: pChunk -= pMax;
 30817  01545E  5003               	movf	i2Byte_GetZone@pMax,w,c
 30818  015460  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30819                           
 30820                           ;Types.c: 73: Offset += 1;
 30821  015462  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30822  015464                     i2l732:
 30823  015464  5003               	movf	i2Byte_GetZone@pMax,w,c
 30824  015466  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30825  015468  B0D8               	btfsc	status,0,c
 30826  01546A  D7F9               	goto	i2l733
 30827                           
 30828                           ;Types.c: 74: }
 30829                           ;Types.c: 75: pChunk *= pChunkSize;
 30830  01546C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30831  01546E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30832  015470  50F3               	movf	prodl,w,c
 30833  015472  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30834                           
 30835                           ;Types.c: 76: pChunk += Offset;
 30836  015474  5008               	movf	i2Byte_GetZone@Offset,w,c
 30837  015476  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30838                           
 30839                           ;Types.c: 78: Output >>= pChunk;
 30840  015478  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30841  01547A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30842  01547C  D002               	goto	i2u517_40
 30843  01547E                     i2u517_45:
 30844  01547E  90D8               	bcf	status,0,c
 30845  015480  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30846  015482                     i2u517_40:
 30847  015482  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30848  015484  D7FC               	goto	i2u517_45
 30849                           
 30850                           ;Types.c: 79: Output &= MASK;
 30851  015486  5007               	movf	i2Byte_GetZone@MASK,w,c
 30852  015488  1609               	andwf	i2Byte_GetZone@Output,f,c
 30853                           
 30854                           ;Types.c: 80: return Output;
 30855  01548A  5009               	movf	i2Byte_GetZone@Output,w,c
 30856  01548C  0012               	return	
 30857  01548E                     __end_ofi2_Byte_GetZone:
 30858                           	opt stack 0
 30859                           tosu	equ	0xFFF
 30860                           tosh	equ	0xFFE
 30861                           tosl	equ	0xFFD
 30862                           pclatu	equ	0xFFB
 30863                           pclath	equ	0xFFA
 30864                           tblptru	equ	0xFF8
 30865                           tblptrh	equ	0xFF7
 30866                           tblptrl	equ	0xFF6
 30867                           tablat	equ	0xFF5
 30868                           prodh	equ	0xFF4
 30869                           prodl	equ	0xFF3
 30870                           intcon	equ	0xFF2
 30871                           indf0	equ	0xFEF
 30872                           postinc0	equ	0xFEE
 30873                           fsr0h	equ	0xFEA
 30874                           fsr0l	equ	0xFE9
 30875                           wreg	equ	0xFE8
 30876                           indf1	equ	0xFE7
 30877                           postdec1	equ	0xFE5
 30878                           fsr1h	equ	0xFE2
 30879                           fsr1l	equ	0xFE1
 30880                           indf2	equ	0xFDF
 30881                           postinc2	equ	0xFDE
 30882                           postdec2	equ	0xFDD
 30883                           plusw2	equ	0xFDB
 30884                           fsr2h	equ	0xFDA
 30885                           fsr2l	equ	0xFD9
 30886                           status	equ	0xFD8
 30887                           
 30888 ;; *************** function i2_Byte_SetBit *****************
 30889 ;; Defined at:
 30890 ;;		line 32 in file "Library/Types.c"
 30891 ;; Parameters:    Size  Location     Type
 30892 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30893 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30894 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30895 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30896 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30897 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30898 ;;		 -> NULL(0), 
 30899 ;;  pBit            1    2[COMRAM] unsigned char 
 30900 ;;  pValue          1    3[COMRAM] unsigned char 
 30901 ;; Auto vars:     Size  Location     Type
 30902 ;;		None
 30903 ;; Return value:  Size  Location     Type
 30904 ;;                  1    wreg      void 
 30905 ;; Registers used:
 30906 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30907 ;; Tracked objects:
 30908 ;;		On entry : 0/0
 30909 ;;		On exit  : 0/0
 30910 ;;		Unchanged: 0/0
 30911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30914 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30915 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30916 ;;Total ram usage:        7 bytes
 30917 ;; Hardware stack levels used:    1
 30918 ;; This function calls:
 30919 ;;		Nothing
 30920 ;; This function is called by:
 30921 ;;		i2_Port_SetPin
 30922 ;; This function uses a non-reentrant model
 30923 ;;
 30924                           
 30925                           	psect	text168
 30926  015D30                     __ptext168:
 30927                           	opt stack 0
 30928  015D30                     i2_Byte_SetBit:
 30929                           	opt stack 15
 30930                           
 30931                           ;Types.c: 34: pValue &= 1;
 30932                           
 30933                           ;incstack = 0
 30934  015D30  0E01               	movlw	1
 30935  015D32  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30936                           
 30937                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30938  015D34  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30939  015D38  0E01               	movlw	1
 30940  015D3A  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30941  015D3C  2A05               	incf	??i2_Byte_SetBit,f,c
 30942  015D3E  D002               	goto	i2u650_44
 30943  015D40                     i2u650_45:
 30944  015D40  90D8               	bcf	status,0,c
 30945  015D42  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30946  015D44                     i2u650_44:
 30947  015D44  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30948  015D46  D7FC               	goto	i2u650_45
 30949  015D48  5006               	movf	??i2_Byte_SetBit+1,w,c
 30950  015D4A  0AFF               	xorlw	255
 30951  015D4C  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30952  015D4E  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30953  015D52  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30954  015D56  5007               	movf	??i2_Byte_SetBit+2,w,c
 30955  015D58  16DF               	andwf	indf2,f,c
 30956                           
 30957                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30958  015D5A  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30959  015D5E  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30960  015D62  2A05               	incf	??i2_Byte_SetBit,f,c
 30961  015D64  D002               	goto	i2u651_44
 30962  015D66                     i2u651_45:
 30963  015D66  90D8               	bcf	status,0,c
 30964  015D68  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30965  015D6A                     i2u651_44:
 30966  015D6A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30967  015D6C  D7FC               	goto	i2u651_45
 30968  015D6E  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30969  015D72  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30970  015D76  5006               	movf	??i2_Byte_SetBit+1,w,c
 30971  015D78  12DF               	iorwf	indf2,f,c
 30972  015D7A  0012               	return		;funcret
 30973  015D7C                     __end_ofi2_Byte_SetBit:
 30974                           	opt stack 0
 30975                           tosu	equ	0xFFF
 30976                           tosh	equ	0xFFE
 30977                           tosl	equ	0xFFD
 30978                           pclatu	equ	0xFFB
 30979                           pclath	equ	0xFFA
 30980                           tblptru	equ	0xFF8
 30981                           tblptrh	equ	0xFF7
 30982                           tblptrl	equ	0xFF6
 30983                           tablat	equ	0xFF5
 30984                           prodh	equ	0xFF4
 30985                           prodl	equ	0xFF3
 30986                           intcon	equ	0xFF2
 30987                           indf0	equ	0xFEF
 30988                           postinc0	equ	0xFEE
 30989                           fsr0h	equ	0xFEA
 30990                           fsr0l	equ	0xFE9
 30991                           wreg	equ	0xFE8
 30992                           indf1	equ	0xFE7
 30993                           postdec1	equ	0xFE5
 30994                           fsr1h	equ	0xFE2
 30995                           fsr1l	equ	0xFE1
 30996                           indf2	equ	0xFDF
 30997                           postinc2	equ	0xFDE
 30998                           postdec2	equ	0xFDD
 30999                           plusw2	equ	0xFDB
 31000                           fsr2h	equ	0xFDA
 31001                           fsr2l	equ	0xFD9
 31002                           status	equ	0xFD8
 31003                           
 31004 ;; *************** function i2_MXK_SwitchTo *****************
 31005 ;; Defined at:
 31006 ;;		line 105 in file "Library/MXK.c"
 31007 ;; Parameters:    Size  Location     Type
 31008 ;;  pModule         1    wreg     enum E6927
 31009 ;; Auto vars:     Size  Location     Type
 31010 ;;  pModule         1    7[COMRAM] enum E6927
 31011 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 31012 ;; Return value:  Size  Location     Type
 31013 ;;                  1    wreg      unsigned char 
 31014 ;; Registers used:
 31015 ;;		wreg, status,2, status,0, cstack
 31016 ;; Tracked objects:
 31017 ;;		On entry : 0/0
 31018 ;;		On exit  : 0/0
 31019 ;;		Unchanged: 0/0
 31020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31025 ;;Total ram usage:        2 bytes
 31026 ;; Hardware stack levels used:    1
 31027 ;; Hardware stack levels required when called:    1
 31028 ;; This function calls:
 31029 ;;		i2_delay_us
 31030 ;; This function is called by:
 31031 ;;		i2_Motor_Step
 31032 ;; This function uses a non-reentrant model
 31033 ;;
 31034                           
 31035                           	psect	text169
 31036  0162DA                     __ptext169:
 31037                           	opt stack 0
 31038  0162DA                     i2_MXK_SwitchTo:
 31039                           	opt stack 15
 31040                           
 31041                           ;incstack = 0
 31042                           ;i2MXK_SwitchTo@pModule stored from wreg
 31043  0162DA  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 31044                           
 31045                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 31046  0162DC  5086               	movf	3974,w,c	;volatile
 31047  0162DE  0B0F               	andlw	15
 31048  0162E0  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 31049                           
 31050                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 31051  0162E2  504B               	movf	_Bus_State,w,c
 31052  0162E4  A4D8               	btfss	status,2,c
 31053  0162E6  D002               	goto	i2l1730
 31054                           
 31055                           ;MXK.c: 110: return 0;
 31056  0162E8  0E00               	movlw	0
 31057  0162EA  0012               	return	
 31058  0162EC                     i2l1730:
 31059                           
 31060                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 31061  0162EC  0E00               	movlw	0
 31062  0162EE  6E4B               	movwf	_Bus_State,c
 31063                           
 31064                           ;MXK.c: 114: if (CUR != pModule)
 31065  0162F0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31066  0162F2  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 31067  0162F4  B4D8               	btfsc	status,2,c
 31068  0162F6  D00A               	goto	i2l1732
 31069                           
 31070                           ;MXK.c: 115: {
 31071                           ;MXK.c: 116: PORTG &= ~(0xF);
 31072  0162F8  0EF0               	movlw	240
 31073  0162FA  1686               	andwf	3974,f,c	;volatile
 31074                           
 31075                           ;MXK.c: 117: PORTG |= pModule;
 31076  0162FC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31077  0162FE  1286               	iorwf	3974,f,c	;volatile
 31078                           
 31079                           ;MXK.c: 120: delay_us(10);
 31080  016300  0E00               	movlw	0
 31081  016302  6E02               	movwf	i2delay_us@us+1,c
 31082  016304  0E0A               	movlw	10
 31083  016306  6E01               	movwf	i2delay_us@us,c
 31084  016308  EC40  F0B0         	call	i2_delay_us	;wreg free
 31085  01630C                     i2l1732:
 31086                           
 31087                           ;MXK.c: 121: }
 31088                           ;MXK.c: 122: return 1;
 31089  01630C  0E01               	movlw	1
 31090  01630E  0012               	return	
 31091  016310                     __end_ofi2_MXK_SwitchTo:
 31092                           	opt stack 0
 31093                           tosu	equ	0xFFF
 31094                           tosh	equ	0xFFE
 31095                           tosl	equ	0xFFD
 31096                           pclatu	equ	0xFFB
 31097                           pclath	equ	0xFFA
 31098                           tblptru	equ	0xFF8
 31099                           tblptrh	equ	0xFF7
 31100                           tblptrl	equ	0xFF6
 31101                           tablat	equ	0xFF5
 31102                           prodh	equ	0xFF4
 31103                           prodl	equ	0xFF3
 31104                           intcon	equ	0xFF2
 31105                           indf0	equ	0xFEF
 31106                           postinc0	equ	0xFEE
 31107                           fsr0h	equ	0xFEA
 31108                           fsr0l	equ	0xFE9
 31109                           wreg	equ	0xFE8
 31110                           indf1	equ	0xFE7
 31111                           postdec1	equ	0xFE5
 31112                           fsr1h	equ	0xFE2
 31113                           fsr1l	equ	0xFE1
 31114                           indf2	equ	0xFDF
 31115                           postinc2	equ	0xFDE
 31116                           postdec2	equ	0xFDD
 31117                           plusw2	equ	0xFDB
 31118                           fsr2h	equ	0xFDA
 31119                           fsr2l	equ	0xFD9
 31120                           status	equ	0xFD8
 31121                           
 31122 ;; *************** function i2_delay_us *****************
 31123 ;; Defined at:
 31124 ;;		line 255 in file "Library/Types.c"
 31125 ;; Parameters:    Size  Location     Type
 31126 ;;  us              2    0[COMRAM] unsigned short 
 31127 ;; Auto vars:     Size  Location     Type
 31128 ;;  delay_us        4    2[COMRAM] unsigned long 
 31129 ;; Return value:  Size  Location     Type
 31130 ;;                  1    wreg      void 
 31131 ;; Registers used:
 31132 ;;		wreg, status,2, status,0
 31133 ;; Tracked objects:
 31134 ;;		On entry : 0/0
 31135 ;;		On exit  : 0/0
 31136 ;;		Unchanged: 0/0
 31137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31139 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31141 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31142 ;;Total ram usage:        6 bytes
 31143 ;; Hardware stack levels used:    1
 31144 ;; This function calls:
 31145 ;;		Nothing
 31146 ;; This function is called by:
 31147 ;;		i2_MXK_SwitchTo
 31148 ;; This function uses a non-reentrant model
 31149 ;;
 31150                           
 31151                           	psect	text170
 31152  016080                     __ptext170:
 31153                           	opt stack 0
 31154  016080                     i2_delay_us:
 31155                           	opt stack 15
 31156                           
 31157                           ;Types.c: 256: unsigned long u;
 31158                           ;Types.c: 257: while (us--) {
 31159                           
 31160                           ;incstack = 0
 31161  016080  D016               	goto	i2u654_40
 31162  016082                     i2l9801:
 31163                           
 31164                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 31165  016082  0E00               	movlw	0
 31166  016084  6E03               	movwf	i2delay_us@u,c
 31167  016086  0E00               	movlw	0
 31168  016088  6E04               	movwf	i2delay_us@u+1,c
 31169  01608A  0E00               	movlw	0
 31170  01608C  6E05               	movwf	i2delay_us@u+2,c
 31171  01608E  0E00               	movlw	0
 31172  016090  6E06               	movwf	i2delay_us@u+3,c
 31173  016092                     i2l9803:
 31174  016092  5003               	movf	i2delay_us@u,w,c
 31175  016094  1004               	iorwf	i2delay_us@u+1,w,c
 31176  016096  1005               	iorwf	i2delay_us@u+2,w,c
 31177  016098  1006               	iorwf	i2delay_us@u+3,w,c
 31178  01609A  A4D8               	btfss	status,2,c
 31179  01609C  D008               	goto	i2u654_40
 31180  01609E  F000               	nop		; ;# 
 31181  0160A0  0E01               	movlw	1
 31182  0160A2  2603               	addwf	i2delay_us@u,f,c
 31183  0160A4  0E00               	movlw	0
 31184  0160A6  2204               	addwfc	i2delay_us@u+1,f,c
 31185  0160A8  2205               	addwfc	i2delay_us@u+2,f,c
 31186  0160AA  2206               	addwfc	i2delay_us@u+3,f,c
 31187  0160AC  D7F2               	goto	i2l9803
 31188  0160AE                     i2u654_40:
 31189  0160AE  0601               	decf	i2delay_us@us,f,c
 31190  0160B0  A0D8               	btfss	status,0,c
 31191  0160B2  0602               	decf	i2delay_us@us+1,f,c
 31192  0160B4  2801               	incf	i2delay_us@us,w,c
 31193  0160B6  E1E5               	bnz	i2l9801
 31194  0160B8  2802               	incf	i2delay_us@us+1,w,c
 31195  0160BA  B4D8               	btfsc	status,2,c
 31196  0160BC  0012               	return	
 31197  0160BE  D7E1               	goto	i2l832
 31198  0160C0                     __end_ofi2_delay_us:
 31199                           	opt stack 0
 31200                           tosu	equ	0xFFF
 31201                           tosh	equ	0xFFE
 31202                           tosl	equ	0xFFD
 31203                           pclatu	equ	0xFFB
 31204                           pclath	equ	0xFFA
 31205                           tblptru	equ	0xFF8
 31206                           tblptrh	equ	0xFF7
 31207                           tblptrl	equ	0xFF6
 31208                           tablat	equ	0xFF5
 31209                           prodh	equ	0xFF4
 31210                           prodl	equ	0xFF3
 31211                           intcon	equ	0xFF2
 31212                           indf0	equ	0xFEF
 31213                           postinc0	equ	0xFEE
 31214                           fsr0h	equ	0xFEA
 31215                           fsr0l	equ	0xFE9
 31216                           wreg	equ	0xFE8
 31217                           indf1	equ	0xFE7
 31218                           postdec1	equ	0xFE5
 31219                           fsr1h	equ	0xFE2
 31220                           fsr1l	equ	0xFE1
 31221                           indf2	equ	0xFDF
 31222                           postinc2	equ	0xFDE
 31223                           postdec2	equ	0xFDD
 31224                           plusw2	equ	0xFDB
 31225                           fsr2h	equ	0xFDA
 31226                           fsr2l	equ	0xFD9
 31227                           status	equ	0xFD8
 31228                           
 31229 ;; *************** function i2_MXK_Release *****************
 31230 ;; Defined at:
 31231 ;;		line 130 in file "Library/MXK.c"
 31232 ;; Parameters:    Size  Location     Type
 31233 ;;		None
 31234 ;; Auto vars:     Size  Location     Type
 31235 ;;		None
 31236 ;; Return value:  Size  Location     Type
 31237 ;;                  1    wreg      unsigned char 
 31238 ;; Registers used:
 31239 ;;		wreg, status,2, status,0
 31240 ;; Tracked objects:
 31241 ;;		On entry : 0/0
 31242 ;;		On exit  : 0/0
 31243 ;;		Unchanged: 0/0
 31244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31249 ;;Total ram usage:        0 bytes
 31250 ;; Hardware stack levels used:    1
 31251 ;; This function calls:
 31252 ;;		Nothing
 31253 ;; This function is called by:
 31254 ;;		i2_Motor_Step
 31255 ;; This function uses a non-reentrant model
 31256 ;;
 31257                           
 31258                           	psect	text171
 31259  0168E8                     __ptext171:
 31260                           	opt stack 0
 31261  0168E8                     i2_MXK_Release:
 31262                           	opt stack 16
 31263                           
 31264                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31265                           
 31266                           ;incstack = 0
 31267  0168E8  0E01               	movlw	1
 31268  0168EA  6E4B               	movwf	_Bus_State,c
 31269                           
 31270                           ;MXK.c: 135: return 1;
 31271                           ;	Return value of i2_MXK_Release is never used
 31272  0168EC  0012               	return	
 31273  0168EE                     __end_ofi2_MXK_Release:
 31274                           	opt stack 0
 31275                           tosu	equ	0xFFF
 31276                           tosh	equ	0xFFE
 31277                           tosl	equ	0xFFD
 31278                           pclatu	equ	0xFFB
 31279                           pclath	equ	0xFFA
 31280                           tblptru	equ	0xFF8
 31281                           tblptrh	equ	0xFF7
 31282                           tblptrl	equ	0xFF6
 31283                           tablat	equ	0xFF5
 31284                           prodh	equ	0xFF4
 31285                           prodl	equ	0xFF3
 31286                           intcon	equ	0xFF2
 31287                           indf0	equ	0xFEF
 31288                           postinc0	equ	0xFEE
 31289                           fsr0h	equ	0xFEA
 31290                           fsr0l	equ	0xFE9
 31291                           wreg	equ	0xFE8
 31292                           indf1	equ	0xFE7
 31293                           postdec1	equ	0xFE5
 31294                           fsr1h	equ	0xFE2
 31295                           fsr1l	equ	0xFE1
 31296                           indf2	equ	0xFDF
 31297                           postinc2	equ	0xFDE
 31298                           postdec2	equ	0xFDD
 31299                           plusw2	equ	0xFDB
 31300                           fsr2h	equ	0xFDA
 31301                           fsr2l	equ	0xFD9
 31302                           status	equ	0xFD8
 31303                           
 31304 ;; *************** function i2_MXK_Queue *****************
 31305 ;; Defined at:
 31306 ;;		line 144 in file "Library/MXK.c"
 31307 ;; Parameters:    Size  Location     Type
 31308 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 31309 ;;		 -> Absolute function(1), Motor_Step(1), 
 31310 ;; Auto vars:     Size  Location     Type
 31311 ;;		None
 31312 ;; Return value:  Size  Location     Type
 31313 ;;                  1    wreg      void 
 31314 ;; Registers used:
 31315 ;;		wreg, status,2, status,0
 31316 ;; Tracked objects:
 31317 ;;		On entry : 0/0
 31318 ;;		On exit  : 0/0
 31319 ;;		Unchanged: 0/0
 31320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31321 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31324 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31325 ;;Total ram usage:        3 bytes
 31326 ;; Hardware stack levels used:    1
 31327 ;; This function calls:
 31328 ;;		Nothing
 31329 ;; This function is called by:
 31330 ;;		i2_Motor_Step
 31331 ;; This function uses a non-reentrant model
 31332 ;;
 31333                           
 31334                           	psect	text172
 31335  01685A                     __ptext172:
 31336                           	opt stack 0
 31337  01685A                     i2_MXK_Queue:
 31338                           	opt stack 16
 31339                           
 31340                           ;MXK.c: 146: lQueue = pCallback;
 31341                           
 31342                           ;incstack = 0
 31343  01685A  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 31344  01685E  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 31345  016862  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 31346  016866  0012               	return		;funcret
 31347  016868                     __end_ofi2_MXK_Queue:
 31348                           	opt stack 0
 31349                           tosu	equ	0xFFF
 31350                           tosh	equ	0xFFE
 31351                           tosl	equ	0xFFD
 31352                           pclatu	equ	0xFFB
 31353                           pclath	equ	0xFFA
 31354                           tblptru	equ	0xFF8
 31355                           tblptrh	equ	0xFF7
 31356                           tblptrl	equ	0xFF6
 31357                           tablat	equ	0xFF5
 31358                           prodh	equ	0xFF4
 31359                           prodl	equ	0xFF3
 31360                           intcon	equ	0xFF2
 31361                           indf0	equ	0xFEF
 31362                           postinc0	equ	0xFEE
 31363                           fsr0h	equ	0xFEA
 31364                           fsr0l	equ	0xFE9
 31365                           wreg	equ	0xFE8
 31366                           indf1	equ	0xFE7
 31367                           postdec1	equ	0xFE5
 31368                           fsr1h	equ	0xFE2
 31369                           fsr1l	equ	0xFE1
 31370                           indf2	equ	0xFDF
 31371                           postinc2	equ	0xFDE
 31372                           postdec2	equ	0xFDD
 31373                           plusw2	equ	0xFDB
 31374                           fsr2h	equ	0xFDA
 31375                           fsr2l	equ	0xFD9
 31376                           status	equ	0xFD8
 31377                           tosu	equ	0xFFF
 31378                           tosh	equ	0xFFE
 31379                           tosl	equ	0xFFD
 31380                           pclatu	equ	0xFFB
 31381                           pclath	equ	0xFFA
 31382                           tblptru	equ	0xFF8
 31383                           tblptrh	equ	0xFF7
 31384                           tblptrl	equ	0xFF6
 31385                           tablat	equ	0xFF5
 31386                           prodh	equ	0xFF4
 31387                           prodl	equ	0xFF3
 31388                           intcon	equ	0xFF2
 31389                           indf0	equ	0xFEF
 31390                           postinc0	equ	0xFEE
 31391                           fsr0h	equ	0xFEA
 31392                           fsr0l	equ	0xFE9
 31393                           wreg	equ	0xFE8
 31394                           indf1	equ	0xFE7
 31395                           postdec1	equ	0xFE5
 31396                           fsr1h	equ	0xFE2
 31397                           fsr1l	equ	0xFE1
 31398                           indf2	equ	0xFDF
 31399                           postinc2	equ	0xFDE
 31400                           postdec2	equ	0xFDD
 31401                           plusw2	equ	0xFDB
 31402                           fsr2h	equ	0xFDA
 31403                           fsr2l	equ	0xFD9
 31404                           status	equ	0xFD8
 31405                           
 31406                           	psect	text173
 31407  000000                     __ptext173:
 31408                           	opt stack 0
 31409                           tosu	equ	0xFFF
 31410                           tosh	equ	0xFFE
 31411                           tosl	equ	0xFFD
 31412                           pclatu	equ	0xFFB
 31413                           pclath	equ	0xFFA
 31414                           tblptru	equ	0xFF8
 31415                           tblptrh	equ	0xFF7
 31416                           tblptrl	equ	0xFF6
 31417                           tablat	equ	0xFF5
 31418                           prodh	equ	0xFF4
 31419                           prodl	equ	0xFF3
 31420                           intcon	equ	0xFF2
 31421                           indf0	equ	0xFEF
 31422                           postinc0	equ	0xFEE
 31423                           fsr0h	equ	0xFEA
 31424                           fsr0l	equ	0xFE9
 31425                           wreg	equ	0xFE8
 31426                           indf1	equ	0xFE7
 31427                           postdec1	equ	0xFE5
 31428                           fsr1h	equ	0xFE2
 31429                           fsr1l	equ	0xFE1
 31430                           indf2	equ	0xFDF
 31431                           postinc2	equ	0xFDE
 31432                           postdec2	equ	0xFDD
 31433                           plusw2	equ	0xFDB
 31434                           fsr2h	equ	0xFDA
 31435                           fsr2l	equ	0xFD9
 31436                           status	equ	0xFD8
 31437                           
 31438                           	psect	rparam
 31439  0000                     tosu	equ	0xFFF
 31440                           tosh	equ	0xFFE
 31441                           tosl	equ	0xFFD
 31442                           pclatu	equ	0xFFB
 31443                           pclath	equ	0xFFA
 31444                           tblptru	equ	0xFF8
 31445                           tblptrh	equ	0xFF7
 31446                           tblptrl	equ	0xFF6
 31447                           tablat	equ	0xFF5
 31448                           prodh	equ	0xFF4
 31449                           prodl	equ	0xFF3
 31450                           intcon	equ	0xFF2
 31451                           indf0	equ	0xFEF
 31452                           postinc0	equ	0xFEE
 31453                           fsr0h	equ	0xFEA
 31454                           fsr0l	equ	0xFE9
 31455                           wreg	equ	0xFE8
 31456                           indf1	equ	0xFE7
 31457                           postdec1	equ	0xFE5
 31458                           fsr1h	equ	0xFE2
 31459                           fsr1l	equ	0xFE1
 31460                           indf2	equ	0xFDF
 31461                           postinc2	equ	0xFDE
 31462                           postdec2	equ	0xFDD
 31463                           plusw2	equ	0xFDB
 31464                           fsr2h	equ	0xFDA
 31465                           fsr2l	equ	0xFD9
 31466                           status	equ	0xFD8
 31467                           
 31468                           	psect	temp
 31469  000051                     btemp:
 31470                           	opt stack 0
 31471  000051                     	ds	1
 31472  0000                     int$flags	set	btemp
 31473  0000                     wtemp6	set	btemp+1
 31474                           tosu	equ	0xFFF
 31475                           tosh	equ	0xFFE
 31476                           tosl	equ	0xFFD
 31477                           pclatu	equ	0xFFB
 31478                           pclath	equ	0xFFA
 31479                           tblptru	equ	0xFF8
 31480                           tblptrh	equ	0xFF7
 31481                           tblptrl	equ	0xFF6
 31482                           tablat	equ	0xFF5
 31483                           prodh	equ	0xFF4
 31484                           prodl	equ	0xFF3
 31485                           intcon	equ	0xFF2
 31486                           indf0	equ	0xFEF
 31487                           postinc0	equ	0xFEE
 31488                           fsr0h	equ	0xFEA
 31489                           fsr0l	equ	0xFE9
 31490                           wreg	equ	0xFE8
 31491                           indf1	equ	0xFE7
 31492                           postdec1	equ	0xFE5
 31493                           fsr1h	equ	0xFE2
 31494                           fsr1l	equ	0xFE1
 31495                           indf2	equ	0xFDF
 31496                           postinc2	equ	0xFDE
 31497                           postdec2	equ	0xFDD
 31498                           plusw2	equ	0xFDB
 31499                           fsr2h	equ	0xFDA
 31500                           fsr2l	equ	0xFD9
 31501                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        31
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      8     256
    BANK4           256      2     172
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_15(CODE[21]), 
		 -> STR_14(CODE[21]), STR_13(CODE[3]), STR_12(CODE[76]), STR_11(CODE[3]), 
		 -> STR_10(CODE[14]), STR_9(CODE[3]), STR_8(CODE[46]), STR_7(CODE[3]), 
		 -> STR_6(CODE[46]), STR_5(CODE[3]), STR_4(CODE[60]), STR_3(CODE[3]), 
		 -> STR_2(CODE[14]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _measureAndDisplayDistance->___fltol
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _measureAndDisplayDistance->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1
    _mode4->_findClosestWall
    _mode3->_move_and_rotate

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2242652
                                              0 BANK4      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
          _measureAndDisplayDistance
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  295960
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     10    10      0  115944
                                              0 BANK3      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  210973
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      1     1      0  117177
                                              0 BANK3      1     1      0
                     _Console_Render
                             ___wmul
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       11     7      4    9721
                                             29 BANK0     11     7      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                0     0      0  229950
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _measureAndDisplayDistance                            4     4      0   53507
                                              4 BANK1      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            ___fldiv
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  196768
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93796
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    7099
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1401
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4447
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8881
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    4007
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  999160
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362768
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291732
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262269
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94893
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1774
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1374
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96975
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85317
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85317
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37949
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4854
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _measureAndDisplayDistance
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       ___wmul
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      2      AC      14       67.2%
BITBANK3           100      0       0      10        0.0%
BANK3              100      8     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     49C      12        0.0%
DATA                 0      0     5C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 16 22:26:35 2017

                                 _update_angle 67E2                                  i2_Timer0_Stop 68E2  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3898                                              _A 004C  
                        __end_of_irobot_rotate 378C                                              l8 3F30  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 667A                                   ___fldiv@sign 00C6  
                                           l11 30A6                                             l12 3090  
                                           l90 2FDC                                             l85 2ED8  
                                           l87 2F46                                             l89 2FB2  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 6718  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5F2E                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6880                           ADC_ClockDivision@reg 00BB  
                                          l120 4E86                                            l121 4E9C  
                                          l122 4EB2                                            l220 5A56  
                                          l117 4EC8                                            l221 5A1A  
                                          l118 4E70                                            l230 5CB2  
                                          l222 5A66                                            l223 5A38  
                                  ?_LED_Toggle 0001                                            l234 5ED6  
                                          l235 5EA6                                            l227 5CCE  
                                          l403 2B66                                            l412 2842  
                                          l228 5C96                                            l340 4A96  
                                          l404 2B06                                            l237 5EBE  
                                          l421 27D6                                            l413 26D8  
                                          l341 4AA4                                            l405 2B96  
                                ??_Console_Tab 00C2                                            l430 4176  
                                          l414 285E                                            l350 4B9E  
                                          l342 4AB2                                            l510 1D04  
                                          l406 2B1E                                            l415 26FE  
                                          l351 4B2E                                            l343 4AC0  
                                          l511 1E14                                            l407 2B36  
                                          l183 4C52                                            l432 41A0  
                                          l600 04B2                                            l344 4ACE  
                                          l512 1D26                                            l408 2B4E  
                                          l184 4C2C                                            l433 41D0  
                                          l417 276A                                            l601 0646  
                                          l353 4B3C                                            l337 4AF8  
                                          l345 4ADC                                            l610 06CE  
                                          l602 04E4                                            l354 4B4A  
                                          l346 4AEA                                            l338 4A88  
                                          l370 4A28                                            l427 41FA  
                                          l611 071C                                            l603 0658  
                                          l355 4B58                                            l363 4A52  
                                          l371 4A36                                            l531 17BE  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 4B66  
                                          l372 4A44                                            l364 49E2  
                                          l532 17E2                                            l516 1D6E  
                                          l357 4B74                                            l509 1DF8  
                                          l614 084C                                            l358 4B82  
                                          l366 49F0                                            l526 1802  
                                          l615 0844                                            l607 07B8  
                                          l359 4B90                                            l367 49FE  
                                          l519 1DB6                                            l616 085E  
                                          l608 0680                                            l368 4A0C  
                                          l528 1820                                            l393 5B88  
                                          l617 0848                                            l609 07D6  
                                          l369 4A1A                                            l529 179E  
                                          l483 1B64                                            l732 4E0A  
                                          l900 18DC                                            l476 1C3C  
                                          l733 4DFE                                            l901 18E0  
                                          l389 58DE                                            l477 1AAE  
                                          l397 5E52                                            l910 1904  
                                          l902 18E4                                            l726 4600  
                                          l478 1C58                                            l486 1BD0  
                                          l654 64C0                                            l911 1908  
                                          l903 18E8                                            l727 45F4  
                                          l479 1AF8                                            l655 64B8  
                                          l912 190C                                            l904 18EC  
                                          l824 5812                                            l832 5C40  
                                          l913 1910                                            l905 18F0  
                                          l921 5788                                            l673 6398  
                                          l657 64BC                                            l681 56E0  
                                          l914 1914                                            l906 18F4  
                                          l922 5754                                            l930 3D6E  
                                          l915 1918                                            l907 18F8  
                                          l819 5322                                            l916 191C  
                                          l908 18FC                                            l860 183C  
                                          l684 56F6                                            l781 61A6  
                                          l853 1924                                            l917 1920  
                                          l909 1900                                            l861 1840  
                                          l597 04C0                                            l870 1864  
                                          l862 1844                                            l854 1828  
                                          l598 04A8                                            l678 571C  
                                          l686 5706                                            l871 1868  
                                          l863 1848                                            l599 04D0  
                                          l679 56D0                                            l880 188C  
                                          l872 186C                                            l864 184C  
                                          l856 182C                                            l928 3DEE  
                                          l776 5F5E                                            l881 1890  
                                          l873 1870                                            l865 1850  
                                          l857 1830                                            l929 3DBE  
                                          l890 18B4                                            l882 1894  
                                          l874 1874                                            l866 1854  
                                          l858 1834                                            l891 18B8  
                                          l883 1898                                            l875 1878  
                                          l867 1858                                            l859 1838  
                                          l892 18BC                                            l884 189C  
                                          l876 187C                                            l868 185C  
                                          l893 18C0                                            l885 18A0  
                                          l877 1880                                            l869 1860  
                                          l894 18C4                                            l886 18A4  
                                          l878 1884                                            l990 4F92  
                                          l895 18C8                                            l887 18A8  
                                          l879 1888                                            l983 4CF0  
                                          l896 18CC                                            l888 18AC  
                                          l976 50AC                                            l992 4FA2  
                                          l984 4C74                                            l897 18D0  
                                          l889 18B0                                            l985 4CEC  
                                          l898 18D4                                            l978 50BC  
                                          l899 18D8                                            l997 5AEE  
                                          l999 5B12                                            _PR2 000FCB  
                                          _dip 033E                                            _val 007D  
                              __end_of_ADC_Off 68C2                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 617A  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5EA0  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 67D0  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 6080  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5CE0  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 488C  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5F2E  
                                         l1000 5B2E                                           l1010 426A  
                                         l1004 597E                                  ?_Byte_GetZone 00BA  
                                         l1005 59AC                                           l1200 4520  
                                         l1040 288C                                           l1201 4574  
                                         l1009 4276                                           l1041 2892  
                                         l1202 4590                                           l1042 2898  
                                         l1043 289E                                           l1204 45BA  
                                         l1300 513E                                           l1036 29E8  
                                         l1044 28A4                                           l1205 45A0  
                                         l1301 5142                                           l1045 28AA  
                                         l1037 2886                                           l2021 590E  
                                         l2101 2D28                                           l1302 514C  
                                         l1062 20C0                                           l2110 5FF4  
                                         l2030 5906                                           l2022 58EA  
                                         l2102 2C6C                                           l1207 45CC  
                                         l1303 515A                                           l1063 20EE  
                                         l1047 2950                                           l2031 590A  
                                         l2103 2CB4                                           l3000 0350  
                                         l1056 1F50                                           l2112 5FE0  
                                         l2024 58EE                                           l2040 39B4  
                                         l2104 2C72                                           l1313 5E80  
                                         l1153 232E                                           l1057 2116  
                                         l2025 58F2                                           l2041 39BA  
                                         l3010 0462                                           l1082 40F0  
                                         l1058 1F58                                           l1146 5244  
                                         l2114 5FE8                                           l2026 58F6  
                                         l2042 39C0                                           l3011 048C  
                                         l1059 1F82                                           l2027 58FA  
                                         l2035 3A4C                                           l2051 3A20  
                                         l2043 39C6                                           l3012 0482  
                                         l3020 23BA                                           l1084 40F8  
                                         l2028 58FE                                           l2044 39CC  
                                         l2036 399E                                           l3005 03BE  
                                         l1077 40C0                                           l2029 5902  
                                         l1254 67C4                                           l2118 57FC  
                                         l3030 249A                                           l3022 2426  
                                         l1158 60FC                                           l2070 506C  
                                         l2062 5026                                           l2046 39E0  
                                         l2038 39A8                                           l2119 57BE  
                                         l3007 040E                                           l3031 24EC  
                                         l3023 2408                                           l3015 237A  
                                         l1079 40D0                                           l2039 39AE  
                                         l2320 4314                                           l1280 51C0  
                                         l2144 5BC6                                           l2312 4962  
                                         l3008 0434                                           l3016 238A  
                                         l2321 4340                                           l3025 2474  
                                         l3017 23B2                                           l2049 3A0C  
                                         l2322 436C                                           l2314 4994  
                                         l3026 2464                                           l2074 508A  
                                         l2066 5046                                           l2058 500C  
                                         l2330 5DC0                                           l2162 3716  
                                         l2410 3672                                           l1283 5222  
                                         l3019 23CA                                           l2139 470C  
                                         l2163 3702                                           l1276 51A8  
                                         l2156 36AE                                           l2404 35BC  
                                         l2420 3B82                                           l2173 5F12  
                                         l2341 090C                                           l2405 35A4  
                                         l2421 3B88                                           l1294 5162  
                                         l1630 34BA                                           l2166 3764  
                                         l2158 36B4                                           l2334 4010  
                                         l2422 3B8E                                           l1295 5128  
                                         l1631 3516                                           l2095 2C28  
                                         l2327 5DA4                                           l2167 373E  
                                         l2159 36D6                                           l2335 3FC2  
                                         l2351 0ADC                                           l2343 09AE  
                                         l2423 3B94                                           l1296 518C  
                                         l1632 34FA                                           l2440 2520  
                                         l2096 2BE2                                           l2344 0A3A  
                                         l2416 3B76                                           l1297 5132  
                                         l2441 2550                                           l2417 3C22  
                                         l1298 5136                                           l1730 6014  
                                         l2450 25C4                                           l2098 2C58  
                                         l2370 0D6A                                           l2354 0BC0  
                                         l2346 0A84                                           l2418 3B7C  
                                         l1299 513A                                           l1627 3562  
                                         l2099 2C3C                                           l2419 3C52  
                                         l1724 6148                                           l1732 603C  
                                         l1628 3558                                           l2700 3850  
                                         l2452 25DE                                           l2380 0EDE  
                                         l2372 0E0A                                           l2356 0C46  
                                         l2348 0B46                                           l1629 34D8  
                                         l2373 0E3A                                           l2357 0C9C  
                                         l2349 0AA4                                           l1726 6176  
                                         l2702 3886                                           l2630 43CC  
                                         l2446 258C                                           l1735 66AE  
                                         l2447 2528                                           l2439 250C  
                                         l2375 0E86                                           l2632 43F6  
                                         l2456 2634                                           l2448 2540  
                                         l2368 0D36                                           l2633 43EA  
                                         l2457 2692                                           l2449 254A  
                                         l2385 1092                                           l2377 0F48  
                                         l2458 263A                                           l2386 0FF8  
                                         l2378 0EA6                                           l2394 3B46  
                                         l1827 335A                                           l2395 3AF8  
                                         l2812 4496                                           l1828 337A  
                                         l2636 442C                                           l2388 1030  
                                         l2813 4486                                           l2637 443A  
                                         l2629 43B6                                           l2638 444E  
                                         l2816 44F0                                           l1784 31F4  
                                         l1873 6228                                           l2817 4502  
                                         l1785 3202                                           l1787 320C  
                                         l2691 37B2                                           l2693 3834  
                                         l2870 540E                                           l2694 3820  
                                         l2880 5ACE                                           l2960 11A6  
                                         l2952 10C6                                           l2865 53CA  
                                         l2953 10F4                                           l2866 53BE  
                                         l2970 1322                                           l2962 11D4  
                                         l2954 10EA                                           l2875 5A96  
                                         l2971 12F8                                           l2963 12D6  
                                         l2699 3860                                           l2876 5A8A  
                                         l2980 13FA                                           l2972 130E  
                                         l2964 1252                                           l2956 1124  
                                         l2869 5400                                           l2981 1430  
                                         l2965 128A                                           l2957 1152  
                                         l2982 1440                                           l2966 127E  
                                         l2958 1148                                           l2990 0078  
                                         l2879 5AC0                                           l2983 1444  
                                         l2967 12D2                                           l2991 00A2  
                                         l2992 009C                                           l2977 137C  
                                         l2993 00B4                                           l2994 00DC  
                                         l2986 001E                                           l2979 13CC  
                                         l2987 0048                                           l2988 0042  
                                         l2989 005A                                           l2998 0364  
                                         l2999 033A                                 ??_Console_Init 00BA  
                        Port_SetPinType@pInput 00E0                                           STR_1 FFFB  
                                         STR_2 FFED                                           STR_3 FFFB  
                                         STR_4 FF59                                           STR_5 FFFB  
                                         STR_6 FF95                                           STR_7 FFFB  
                                         STR_8 FF95                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 4BCE                       __end_of_irobot_song_play 67BC  
                                         u9000 5A9C                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9110 3DDA                            __end_of_GetPortTRIS 4A82  
                                         u9120 597A                                           u9025 6802  
                                         u9026 6804                                           u9130 59A4  
                                         u9310 5DFE                                           u9070 5C78  
                                         u9315 5DF8                                           u9260 43FC  
                                         u9440 5FD4                                           u9354 4F42  
                                         u9610 33C6                                           u9530 5850  
                                         u9355 4F3C                                           u8804 59CC  
                                         u8820 52BC                                           u9700 5292  
                                         u8805 59C6                                           u8814 59FE  
                                         u9470 449C                                           u9630 6332  
                                         u8815 59F8                                           u8760 4DD4  
                                         u8850 5FA8                                           u9730 3498  
                                         u9635 632C                                           _SPI1 037A  
                                         u8780 4E3A                                           u9740 34AC  
                                         u8940 4FE6                                           _SPI2 0385  
                                         u9750 34EC                                           u8950 4FEC  
                                         u8855 5FA2                                           u8767 4DCA  
                                         u8785 4E34                                           u8970 53D0  
                                         u8874 463C                                           u8875 4636  
                                         u9595 3312                                           u8884 466E  
                                         u8885 4668                                           u9695 5254  
                                         _TMR0 000FD6                                           u9990 1376  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 63A6                                           _main 3B72  
                   irobot_leds@powerLuminosity 00CC                                           _init 4936  
                                         _mode 033C                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3D30  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 53A0                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                     ?_measureAndDisplayDistance 0001  
                                Console_Init@x 00BC                                  Console_Init@y 00BD  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FEFF  
                         Set_Rotation@rotation 00C0                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 656A                   __size_of_Console_ClearCursor 0040  
                             __end_of_LCD_Fill 5C3E                               __end_of_LCD_Init 3028  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 5A76                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00F5                        GetPortProperties@pInput 00BC  
                                ??_Button_Poll 00D8                               __end_of_HMI_Init 2330  
                                        l12323 4F98                                          l12317 4F88  
                                        l12431 5C52                                          l12515 45BA  
                                        l12429 5C40                                          l12463 3DDA  
                                        l14143 5C0E                                          l13361 1430  
                                        l14225 1F78                                          l13089 523C  
                                        l14147 5C1C                                          l14183 2AFC  
                                        l14513 50B2                                          l14507 50A2  
                                        l14429 25E4                                          l14373 3716  
                                        l14535 2302                                          l13663 54D2  
                                        l12795 6834                                          l13667 54E0  
                                        l13923 60CA                                          l14485 2F46  
                             __end_of_HMI_Poll 565E                                          l12887 5812  
                                        l12895 5850                                          l14495 2FEA  
                                        l12969 335A                                          l12889 5824  
                                        l16603 0B46                                          l13975 31F4  
                                        l13895 40C6                                          l13889 40B6  
                                        l16731 0EA6                                          l16627 0C9C  
                                        l16585 0AA4                                          l16765 0FF8  
                                        l16749 0F48                                          _I2C1T 0040  
                                        _I2C2T 03CC                                  ___fltol@sign1 00F7  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 1468                                __end_of___awdiv 4458  
                        irobot_rotate@isScript 00DD                                          ?_itos 00C6  
                                        STR_10 FFED                                          STR_11 FFFB  
                                        STR_12 FF0D                                          STR_13 FFFB  
                                        STR_14 FFD8                                          STR_15 FFC3  
                                        STR_16 FFC3                                          STR_17 FFC3  
                                        STR_18 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 3898                                _Event_DIPSwitch 6406  
                              __end_of___lldiv 4514                                          u10020 13E0  
                                        u10030 140E                                          u10120 00C8  
                                        u10210 0422                                          u10130 02DC  
                                        u10220 0448                                          u10300 2482  
                                        u11100 36A2                                          u11030 5E7A  
                                        u10135 02D0                                          u11210 2620  
                                        u11130 3736                                          u10180 03B8  
                                        u10420 54FC                                          u11310 2FEA  
                                        u11230 269E                                          u11150 3784  
                                        u11064 635E                                          u10600 413A  
                                        u11065 6358                                          u10505 14C6  
                                        u10610 4146                                          u10515 14E8  
                      __size_of_HMI_LeftSwitch 0018                                          u10348 303A  
                                        u11340 5114                                          u10700 3260  
                              ___awdiv@divisor 00BC                                          u10349 304E  
                                        u10525 1668                                          u11270 2ED6  
                                        u11430 5D98                                          u10535 16E6  
                                        u11440 5DBA                                          u10545 1728  
                                        u10555 176A                                          u10485 1496  
                                        u10398 3176                                          u10750 37D2  
                                        u10495 14AE                                          u10920 2B9C  
                                        u14130 35F2                                          u10755 37C6  
                                        u10790 386A                                          u10890 5C38  
                                        u14090 35D2                                          u10868 3F9C  
                                        u10980 20FE                                          u11918 4348  
                                        u11919 435C                                          u13800 0BD4  
                                        u13801 0BD2                                          u11938 4374  
                                        u11939 4388                                          u13820 0C82  
                                        u11878 42F0                                          u11879 4304  
                                        u11898 431C                                          u13658 6112  
                                        u13770 0B5A                                          u11899 4330  
                                        u13659 6128                                          u13990 0F5C  
                                        _INDEX 008D                                __end_of___lwdiv 5418  
                                        _MASKS FD0F                                __end_of___lwmod 5AD8  
                                        i2l430 48A4                                          i2l432 48CA  
                                        i2l433 48F4                                          i2l427 491A  
                                        i2l732 5464                                          i2l733 545E  
                                        i2l832 6082                                          i2l781 63F4  
                              ___awdiv@counter 00BE                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 00D0  
                              __end_of_getMode 439A                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B8                                          _PortB 03AE  
                                        _PortC 00A5                                          _PortD 009B  
                                        _PortE 0091                                          _PortF 03C2  
                                        _PortG 03A4                        __end_of_Port_SetPinType 2880  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C6  
                        ??_irobot_led_power_on 00CE                                          _angle 033A  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD0F                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 0CD4  
                                        _mode2 3A88                                          _mode3 61B8  
                                        _mode4 3574                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 42DA  
                             __end_of_MXK_Init 2EB6                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 6814                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 573A                          __end_ofi2_MXK_Release 68EE  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 57A6                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 5228  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 565E  
                              _findClosestWall 08C4                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 65C6                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03FA                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 4734                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 6344  
                       irobot_leds@powerColour 00CB                                   __end_of_main 3C58  
                                 __end_of_init 49DC               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3E08                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 5A14  
                             __end_of_InitList FCE5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 6806                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 67E2                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 04AA  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5D30  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 6620                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 6526                                    _GetPortPORT 4B28  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 49DC  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 5326  
                             __end_of_Port_Set 1822                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3FB2  
                          __end_of_Button_Poll 318E                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4EE6                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 68D6  
                                _HMI_SetNumber 648C                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4F76  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 38FE  
                                       i2l1631 394A                                         i2l1632 3936  
                                       i2l1730 62EC                                         i2l1627 3986  
                                       i2l1732 630C                                         i2l1628 397C  
                                       i2l1629 3914                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9801 6082                                         i2l9803 6092  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 65E4                                 _Timer0_Restart 6874  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 24FE  
                               i2_MXK_SwitchTo 62DA                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 6602  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 587A                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5C90                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 6434                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 5228  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3E08  
                   __end_of_load_iRScriptStack 5810                                     _Motor_Move 626A  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 344E                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 6434                                         ___wmul 62A4  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 007F  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 039A  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1CFC  
                                       _corner 03F6                       i2Byte_GetZone@pChunkSize 0005  
                             __end_of_safeToGo 5DC6                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 511A                              GetPortTRIS@pInput 00BC  
                           __size_of_Reset_Low 001E                                         clear_0 479C  
                                       clear_1 47AE                                         clear_2 47BA  
                                       clear_3 47C6                                         clear_4 47D2  
                             ___awdiv@quotient 00C0                     irobot_stop_motion@isScript 00D3  
                                ?_eusart_getch 0001                                     Port_Init@i 0106  
                                   _iRDistance 0079                              __end_of_MXK_Queue 685A  
                   __end_ofHMI_SetButton@F7213 FD1C                                      ??_getMode 00DE  
                                   _iRBumpLeft 0087                                         _printf 24FE  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 663E  
                                _ADC_Calibrate 67BC                                     _iRDropLeft 0085  
                               HMI_SetButton@v 00C1                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00BB                                    _Console_Tab 4218  
                          LCD_Word_Write@value 00BF                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00BD  
                     Port_CheckPortType@Output 00F3                                      ?_ADC_Init 00BE  
                           _twos_complement_of 5FBA                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC32                    __end_ofTimer2_Init@PRESCALE FD1F  
                     Port_CheckPortType@pDrive 00F2                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00F0                                  ??_Port_SetPin 00CD  
                                    ??_reverse 00BE                                     _StepRotate 0071  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00E0  
                                       putch@c 00CE                              Motor_Speed@pMotor 00D5  
                               ?_HMI_SetNumber 00D0                                 i2_Word_GetPair 63D6  
                      __end_of_Configure_GPIOs 56CE                            irobot_leds@isScript 00CD  
                      __end_of_findClosestWall 0CD4                               ??_MXK_TestButton 00C0  
                       __end_of_Timer0_Restart 6880                                  Set_Rotation@m 00BF  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 00BA  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 6310                                   ___xxtofl@arg 00C4  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 00C3  
                                 ___xxtofl@val 00BA                          _update_bump_and_cliff 6230  
                              ?_LCD_Word_Write 00BF                                     __accesstop 0060  
                      __end_of__initialization 47D8                                      ?_LCD_Fill 00C3  
        irobot_query_and_update@packetVariable 00D3                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00EC                                    _Byte_GetBit 6310  
                                   _Stepstomin 006F                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 688C                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00C2                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 00BA                                     ___fltol@f1 00F3  
                                  _Byte_SetBit 59B0                                  __end_of_MASKS FD18  
                               _PortA_Property FF0B                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 00C5                                      LCD_Fill@j 00C6  
                          load_iRScriptStack@i 00C9                                      LCD_Init@i 00F1  
                               __pcstackCOMRAM 0001                                 _PortB_Property FF09  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 68C2  
                                 __pidataBANK3 6806              irobot_move_straight@straightSpeed 00D3  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 667A  
                              Console_Render@x 00E4                                Console_Render@y 00E5  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FCE5                           __end_of_Byte_GetZone 4E4E  
                                __end_of_mode1 10A8                                  __end_of_mode2 3B72  
                                __end_of_mode3 61F4                                  __end_of_mode4 3680  
                         ??_twos_complement_of 00BC                              irobot_leds@LEDBit 00CA  
                               _PortC_Property FF07                            __end_of_Timer0_Init 32EE  
                                __end_of_putch 6822                                 ??_eusart_getch 00BA  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 344E  
                          __end_of_Timer0_Stop 68D0                                 ?_ADC_Calibrate 0001  
                                    ?_SPI_Init 00E7                               ?_update_distance 0001  
                                    ?_SPI_Send 00BA                                 ??_eusart_putch 00BA  
                                  _Button_Init 3EDE                              Port_SetType@pType 00F6  
                                  _Button_Poll 3028                           __end_of_Byte_SetByte 684C  
                         __end_of_Byte_SetPair 6548                                 _HMI_LeftSwitch 6778  
                               _PortD_Property FF05                           __end_of_Byte_SetQuad 656A  
                                 ??_LED_Toggle 00D2                                   ??_HMI_GetBar 00BA  
                   eusart_putch@eusartSendChar 00BA                           __end_of_Byte_SetZone 4684  
                          __end_of_Motor_Speed 648C                                 _HMI_DownSwitch 6730  
                                SPI_Send@pData 00BC                          __end_of_MXK_DIPSwitch 6718  
                                 ??_HMI_SetBar 00BA                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 00C2                                 _PortE_Property FF03  
                                   ??_ADC_Init 00C1                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 6406                        irobot_rotate@angleTotal 00E0  
                               _PortF_Property FF01                        Port_CheckQuadType@Pair1 00ED  
                      Port_CheckQuadType@Pair2 00EE                       MXK_BlockSwitchTo@pModule 00C1  
                                      ??_mode1 03F8                                        ??_mode2 00F9  
                                      ??_mode3 00F9                                        ??_mode4 00F9  
                                      ?_ADC_On 0001                              _Console_Backspace 5AD8  
                              ?_Timer0_Restart 0001                                        ??_putch 00CE  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 6040  
                            __end_of_ToSegment 1AA6                                 _PortG_Property FEFF  
                                   __pbssBANK0 0060                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 5FBA  
                           _irobot_stop_motion 5EE8                        Port_CheckQuadType@pQuad 00EB  
                              reverse@iterator 00BF                               ??_SPI_DisableISR 00BC  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 6602  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 00C5                                     ??_LCD_Init 00EF  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 4218  
                       __end_of_PortA_Property FF0D               irobot_led_power_on@powerOnColour 00CE  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 00BA  
                                   ??_LED_Init 00E7                       ADC_ClockDivision@pDivide 00BA  
                           Byte_SetByte@pValue 00BC                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 5E58  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00F5  
                           ??_irobot_song_play 00BB                                     ??_HMI_Poll 00DE  
                                ?_Timer2_Clear 0001                        Port_CheckPairType@Props 00E7  
                       __end_of_PortB_Property FF0B                                  ?_Timer0_Start 00BA  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 2BB0  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 00E2  
                           __end_of_LED_Toggle 5EE8                             __end_of_HMI_GetBar 68E2  
                     LCD_FillRectangle@pColour 00C3                                     _angleTotal 0073  
                          ??_Console_Backspace 00BC                              Set_Addr_Window@xe 00C0  
                            Set_Addr_Window@ye 00C1                              Set_Addr_Window@xs 00C2  
                            Set_Addr_Window@ys 00BF                    ??_measureAndDisplayDistance 00F9  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 68AA                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 60FE  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 6790                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B5                                        _ADC_AN1 03DD  
                                      _ADC_AN2 03D8                                        _ADC_AN3 03D3  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 4084                                        _ADC_Off 68BA  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 6748                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 00D2  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03EA  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 6760  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5C90  
                      _Console_IncrementCursor 594A                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0083  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 5B34  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 665C                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 6376                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 010C  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 68A0  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 0089  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5D7C  
                                    _ADC_Start 51A4                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 318E  
                                  _Timer2_Init 32EE                                        __Lparam 0000  
                                  _Timer0_Stop 68CA                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 0077                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 4154                              _Console_PrintChar 2880  
                                  _Motor_Speed 6462                                        _Stepper 00AF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 10A8                                        ___awdiv 439A  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 378C                                        _lBuffer 04AC  
                                      ___lldiv 4458                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 53A0  
                                      ___lwmod 5A76                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 5004                             ?_Console_PrintChar 0001  
                                      __pcinit 4734                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 42DA  
                                      __ptext0 3B72                                        __ptext1 3574  
                                      __ptext2 08C4                                        __ptext3 61B8  
                                      __ptext4 3FB2                                        __ptext5 3680  
                                      __ptext6 3A88                                        __ptext7 4D14  
                                      __ptext8 66E8                                        __ptext9 0CD4  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6696                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5F74  
                    _measureAndDisplayDistance 4D14                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03E6                            LCD_DrawRectangle@p4 03E2  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00BC  
                                   ??_delay_us 00BC                                        _reverse 573A  
                                    _DIPSwitch 0390                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 4154                                    _iRBumpRight 0088  
                               LCD_DrawField@i 00DC                                      _LCD_Reset 5CE0  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 6504  
                                  _iRDropRight 0086                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00BA                           end_of_initialization 47D8  
                          ADC_SetupIO@pChannel 00BC                              ??_get_packet_size 00BA  
irobot_query_and_update@numberOfPacketRequests 00D2                                     delay_us@us 00BA  
                            ??_HMI_SetSegments 00BD                        Console_PrintChar@pInput 00CD  
                                 _Console_Init 5090                           __end_of_eusart_getch 68B2  
                      _irobot_query_and_update 2BB0                                     ??_safeToGo 00DE  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 58E4  
                         __end_of_eusart_putch 683E                                        itos@Out 00CE  
                               ??_Port_GetQuad 00BD                             _PortProperty_Valid 52AA  
                           Byte_SetQuad@pInput 00C5                             SPI_MinSpeed@pInput 00C9  
                                    i2u1384_48 644C                             Byte_SetQuad@pValue 00C8  
                          __end_of_ADC_SetupIO 6376                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 00BE  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 00BC  
                            ??_HMI_RightSwitch 00C0                                ___lldiv@counter 00C6  
                    __end_of_Console_PrintChar 2A1E                            __end_of_ADC_Voltage 3D30  
                               ??_Port_SetType 00F7                     __end_of_Port_CheckQuadType 5B8E  
                                      printf@c 00E2                                        printf@f 00CF  
                               Port_Init@pPort 0103                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00C3  
                            __end_of_rx_assign 3A88                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00C9  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5E58  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 60C0  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 3680  
                        Timer0_Init@pFrequency 00C7                              ?_Port_SetQuadType 00F0  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 00BE  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 00F4                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 00C0                          Console_Render@lCursor 00E0  
                           _load_iRScriptStack 57A6                                      _MXK_Queue 684C  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 00C2  
                             Byte_GetZone@pMax 00BC                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C6  
                              _Set_Addr_Window 47E2                                 SPI_Init@pClock 00E7  
                             ??_LCD_Word_Write 00C1                                _sort_iRBumpDrop 5004  
                            ??_move_and_rotate 03F8                                    ___fldiv@grs 00CD  
                                  ___fldiv@rem 00C7                          __end_of_LCD_DrawField 4C72  
                               Port_Set@pInput 00C9                                 SPI_Init@pInput 00ED  
                         ??_PortProperty_Valid 00CD                              __size_of_ADC_Init 007A  
                               Port_Set@pValue 00CB                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 4EE6                                     ?_LCD_Write 00BD  
                                 _Byte_GetPair 665C                             HMI_SetButton@F7213 FD18  
                          ?_load_iRScriptStack 00BA                                   _Byte_GetZone 4DB2  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 00DA  
                            LCD_DrawField@ymax 00DB                                 __end_of_ADC_On 68DC  
                               _Port_TogglePin 63A6                               _Event_TestButton 61F4  
                                  ___flmul@grs 00D6                           Port_SetPinType@Props 00E5  
                                 ?_Byte_GetBit 00BA                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 683E                                   _Byte_SetPair 6526  
                              ADC_SetupIO@MASK 00BD                                   _Byte_SetQuad 6548  
                      __size_ofi2_Byte_GetZone 0076                                   _Byte_SetZone 45CE  
                         Port_SetPinType@pType 00E3                              ?i2_Timer0_Restart 0001  
                                 ?_Byte_SetBit 00BA                                  ?_SPI_MaxSpeed 00C9  
                            __size_of_LCD_Fill 0058                                   ??_Event_NULL 00BA  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 00C9                          __end_ofi2_Timer0_Stop 68E8  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               ?_irobot_rotate 00D7                                 __end_of_OutSeg 52AA  
                         ??_load_iRScriptStack 00C4                   __end_of_irobot_move_straight 6700  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 62DA  
                        __end_of_HMI_DIPSwitch 6730                                  __pidataCOMRAM 688C  
                                 ?_Button_Init 0100                                   ?_Button_Poll 00D5  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 6874  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 68BA  
                               __end_of_printf 26C0                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 00BA                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 00C6                               ??_Timer0_Restart 00BA  
                         __end_of_Timer0_Start 6504                             Port_SetType@Output 0100  
                          start_initialization 4734                                     ?_MXK_Queue 00BA  
                     PortProperty_Valid@Errors 00CF                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 548E                             Port_SetType@pInput 00F4  
                               _ADC_SetChannel 66B2                                     HMI_Init@in 00F5  
                          HMI_SetNumber@pInput 00D0                          __end_ofi2_Port_SetPin 4936  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 00BB  
                       __end_of_Port_TogglePin 63D6                                  ?_Word_SetPair 00C9  
                            Byte_SetBit@pInput 00BA                                       ??_ADC_On 00BA  
                               ??_MXK_SwitchTo 00C0                              Byte_SetBit@pValue 00BD  
                           ?_LCD_FillRectangle 00C3                      ??_irobot_query_and_update 00CA  
                          _Console_ResetCursor 658A                    PortProperty_Valid@pPinDrive 00CB  
                                  _ADC_SetupIO 6344                           MXK_BlockSwitchTo@CUR 00C0  
                     PortProperty_Valid@pInput 00C9                                  i2_MXK_Release 68E8  
                                  _ADC_Voltage 3C58                         LCD_FillRectangle@pSize 00C9  
                               SPI_Send@pInput 00BA                                   ??_Reset_High 00CE  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00CB  
                        Port_SetQuadType@pQuad 00F2                                      _ToSegment 1822  
                          ??_LCD_FillRectangle 00CD                          Port_SetQuadType@pType 00F3  
                              _Console_NewLine 4C72                                 ??_SPI_MinSpeed 00CB  
                                  ??_ADC_Start 00BE                                   _HMI_UpSwitch 6748  
                                    _Reset_Low 65E4                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 68D0                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D7  
                               ADC_Init@pInput 00BE                                      _gCharSize 03F2  
                             Timer2_Init@INDEX 008B                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 00EB  
                                     ??_OutSeg 00BE                                      OutSeg@out 00C1  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 00C1  
                                 ??_Motor_Step 00CE                                      _iRAngleSS 031E  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 00C3                                       ??___wmul 00BE  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2A1E  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03EA  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00BD  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00BA                             Byte_SetZone@pValue 00BF  
                                Mode_Set@pMode 00BA                                       ??_printf 00DB  
                      __end_of_Set_Addr_Window 488C                       Port_CheckQuadType@Output 00EF  
                      __end_of_sort_iRBumpDrop 5090                                      _gLineSize 03EE  
                     Port_CheckQuadType@pDrive 00EC                                 ??_Word_GetPair 00C9  
                     Port_CheckQuadType@pInput 00E9                           __end_of_Port_GetQuad 5E10  
                                    ___fldiv@a 00BE                                      ___fldiv@b 00BA  
                    __end_of_LCD_FillRectangle 5502                                    __pbssBIGRAM 04AC  
                       __end_of_ADC_SetChannel 66CE                                       ?_LED_Set 00CE  
                                    ___flmul@a 00CC                                      ___flmul@b 00C8  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 00BC  
                           __end_of_Reset_High 6620                                  __pcstackBANK0 00BA  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03F8                                  __pcstackBANK4 04AA  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6462                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F26                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3EDE                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 62A4                             __end_of_Motor_Step 3574  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
           __size_of_measureAndDisplayDistance 009E                       Port_CheckPairType@Output 00E6  
            twos_complement_of@complementValue 00BA                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00E3                       Port_CheckPairType@pInput 00E0  
                               reverse@tempVar 00BE                             _MXK_InitTestButton 663E  
                                   ?_Reset_Low 0001                              __size_of_safeToGo 004A  
                                 ?_Timer0_Init 00C7                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C7                               ??_HMI_LeftSwitch 00C0  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00BA  
                                ??_irobot_leds 00CD                                  ??_irobot_init 00BB  
                              ??_irobot_rotate 00DB                                  ??_irobot_move 00CE  
                                _lStepFunction 0066                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C7                               ??_HMI_DownSwitch 00C0  
                                    __pintcode 1408                                  __pmediumconst FC32  
                                 ?_Motor_Speed 00D5                          ??_Console_ResetCursor 00BA  
                                     ?___fldiv 00BA                                       ?___awdiv 00BA  
                                    __ptext100 4458                                      __ptext101 68B2  
                                    __ptext110 5F2E                                      __ptext102 64B6  
                                    __ptext111 6526                                      __ptext103 6376  
                                    __ptext120 6344                                      __ptext112 5B34  
                                    __ptext104 3EDE                                      __ptext121 66B2  
                                    __ptext113 587A                                      __ptext105 6620  
                                    __ptext130 6700                                      __ptext122 5E58  
                                    __ptext114 52AA                                      __ptext106 68D0  
                                    __ptext131 6718                                      __ptext123 511A  
                                    __ptext115 6548                                      __ptext107 663E  
                                    __ptext140 61F4                                      __ptext132 6730  
                                    __ptext124 67BC                                      __ptext116 45CE  
                                    __ptext108 26C0                                      __ptext141 648C  
                                    __ptext133 6748                                      __ptext125 68D6  
                                    __ptext117 5090                                      __ptext109 1AA6  
                                    __ptext150 63A6                                      __ptext142 3D30  
                                    __ptext134 6760                                      __ptext126 68BA  
                                    __ptext118 51A4                                      __ptext151 4154  
                                    __ptext143 573A                                      __ptext135 6778  
                                    __ptext127 42DA                                      __ptext119 5326  
                                    __ptext160 6434                                      __ptext152 617A  
                                    __ptext144 5A76                                      __ptext136 6790  
                                    __ptext128 55EA                                      __ptext161 3898  
                                    __ptext153 665C                                      __ptext145 53A0  
                                    __ptext137 5DC6                                      __ptext129 3028  
                                    __ptext170 6080                                      __ptext162 68E2  
                                    __ptext154 4DB2                                      __ptext146 4514  
                                    __ptext138 6406                                      __ptext171 68E8  
                                    __ptext163 6880                                      __ptext155 59B0  
                                    __ptext147 1822                                      __ptext139 1404  
              __end_of_irobot_query_and_update 2D36                                      __ptext172 685A  
                                    __ptext164 488C                                      __ptext156 5F74  
                                    __ptext148 4EE6                                      __ptext173 0000  
                                    __ptext165 63D6                                      __ptext157 68A0  
                                    __ptext149 5EA0                                      __ptext166 66CE  
                                    __ptext158 68DC                                      _pShiftVal 007B  
                                    __ptext167 5418                                      __ptext168 5D30  
                                    __ptext169 62DA                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 4A82                                       ?_getMode 0001  
                                 _eusart_getch 68AA                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 58E4                                   _eusart_putch 6830  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 4514  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 5326  
                 irobot_rotate@rotateDirection 00DE                          __end_of_HMI_SetButton 4F76  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 64B6                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 6760                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00EA  
                               __size_of_mode3 003C                                 __size_of_mode4 010C  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4D14  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 68D6  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 66E8  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 66CE  
                                     _LCD_Fill 5BE6                                       _LCD_Init 2EB6  
                               ___wmul@product 00BE                                       _HMIBoard 0340  
                               i2_Byte_GetZone 5418                                       _LED_Init 5A14  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 2136  
                                     _HMI_Poll 55EA                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 65C6  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 6080  
            __end_of_measureAndDisplayDistance 4DB2                       __size_of_Configure_GPIOs 0070  
                     __size_of_findClosestWall 0410                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C7                                       _PIR1bits 000F9E  
                                     i2u515_40 543A                                       i2u515_47 5430  
                                     i2u517_40 5482                                       _PIR3bits 000FA4  
                                     i2u517_45 547E                                       i2u650_44 5D44  
                                     i2u650_45 5D40                                       i2u651_44 5D6A  
                                     i2u651_45 5D66                                       i2u741_40 38DC  
                                     i2u654_40 60AE                                       i2u742_40 38F0  
                                     i2u743_40 3928                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15608 03FC                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00BB                               HMI_SetBar@pValue 00BA  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E4  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 4B28                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 4E4E                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 6040                             _Port_CheckPairType 587A  
                                     _MXK_Init 2D36                          __size_of_Timer0_Start 0026  
                              _move_and_rotate 3FB2                                MXK_SwitchTo@CUR 00C0  
                        __end_of_ADC_Calibrate 67D0                            __end_of_irobot_leds 5BE6  
                                     _SPI_Init 04A6                            __end_of_irobot_init 6830  
                     __end_of_Event_TestButton 6230                                       _SPI_Send 56CE  
                          __end_of_irobot_move 4734                                      _rx_assign 3998  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 00BF  
                            ___wmul@multiplier 00BA                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 00BE                                     printf@flag 00DD  
                         Timer2_Init@pCPUClock 00D0                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 5576  
                                   printf@prec 00DC                          Motor_Speed@pFrequency 00D7  
                            Byte_GetBit@pInput 00BA                            Port_SetPinType@pPin 00E2  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 6700  
                           _Port_CheckQuadType 5B34                            ?_Port_CheckPairType 00E0  
                         __end_of_SPI_MinSpeed 55EA                                  ??_MXK_Dequeue 00D0  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 5E10                           __end_of_update_angle 67F4  
                        Button_Poll@pIncrement 00D7                        PortProperty_Valid@F6830 FCF5  
                         __end_ofi2_Motor_Step 3998                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4748  
                                    copy_data1 4768                                      copy_data2 4788  
                                ??_MXK_Release 00BA                         __end_ofi2_Byte_GetPair 66E8  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E9                          ?_irobot_move_straight 00D3  
                       __end_ofi2_Byte_GetZone 548E                            __end_ofi2_MXK_Queue 6868  
              _measureAndDisplayDistance$15607 0104                            ?_Port_CheckPortType 00F0  
                              itos@destination 00C8                                       _InitList FC33  
                   __end_of_irobot_init_song_0 658A                           _Motor_Step$intlevel0 3454  
                                     _Mode_Set 67F4                             Port_GetQuad@Output 00BF  
                            ??_update_distance 00D7                                    ??_ToSegment 00BA  
                                 _ISR_Function 1408                                   _Timer0_Clear 6868  
                           Port_GetQuad@pInput 00BA                                   _Timer2_Clear 68B2  
                         __end_of_Word_GetPair 61B8                                       _lCBuffer 0300  
                         ??_Port_CheckPairType 00E4                                    ??_Reset_Low 00CE  
                                     __Hrparam 0000                                   _Timer0_Start 64DE  
                                 OutSeg@pInput 00C0                                 _Console_Render 1F26  
                                     __Lrparam 0000                                Timer2_Init@RDIV 00CC  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                               LCD_Write@value 00BE                                       _Port_Set 1468  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 5F74                        __end_of_get_packet_size 594A  
                                  ??_Port_Init 0104                        __end_of_HMI_SetSegments 45CE  
                         ??_Port_CheckQuadType 00ED                               __size_of___fldiv 03C0  
                             _irobot_song_play 67A8                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 613C                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00F3                               __size_of___lwmod 0062  
                                     _lBufferX 008F                                       _lBufferY 008E  
                          Timer2_Init@PRESCALE FD1C                          _findClosestWall$15606 03FA  
                                   ?_rx_assign 00BB                                LCD_Fill@pColour 00C3  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 0081                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 6778                         Byte_GetZone@pChunkSize 00BE  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BE  
                        __size_of_Port_SetType 022A                                  reverse@length 00BC  
                                    itos@input 00C6                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 2330                            irobot_move@isScript 00D2  
                           Motor_Init@pAddress 00E9                                       _delay_ms 5810  
                                     _delay_us 5C3E                                       _clearall 0090  
                              ___lwdiv@divisor 00BC                                ___lwdiv@counter 00BE  
                              Port_GetPin@pPin 00BC                                       __ptext10 5D7C  
                                     __ptext11 67D0                                       __ptext20 4684  
                                     __ptext12 6230                                       __ptext21 5FBA  
                                     __ptext13 67E2                                       __ptext30 4F76  
                                     __ptext22 67A8                                       __ptext14 2BB0  
                                     __ptext31 658A                                       __ptext23 24FE  
                                     __ptext15 3998                                       __ptext40 1F26  
                                     __ptext32 5AD8                                       __ptext24 6814  
                                     __ptext16 5004                                       __ptext41 548E  
                                     __ptext33 6040                                       __ptext25 2880  
                                     __ptext17 58E4                                       __ptext50 4936  
                                     __ptext42 4BCE                                       __ptext34 378C  
                                     __ptext26 4218                                       __ptext18 68AA  
                                     __ptext51 667A                                       __ptext43 62A4  
                                     __ptext35 6462                                       __ptext27 439A  
                                     __ptext19 5EE8                                       __ptext60 6868  
                                     __ptext52 5B8E                                       __ptext44 4084  
                                     __ptext36 626A                                       __ptext28 594A  
                                     __ptext61 2D36                                       __ptext53 57A6  
                                     __ptext45 6310                                       __ptext37 64DE  
                                     __ptext29 4C72                                       __ptext70 5A14  
                                     __ptext62 2A1E                                       __ptext54 656A  
                                     __ptext46 3C58                                       __ptext38 60C0  
                                     __ptext71 5C90                                       __ptext63 1CFC  
                                     __ptext55 6822                                       __ptext47 2330  
                                     __ptext39 5228                            ??_MXK_BlockSwitchTo 00C0  
                                     __ptext80 5C3E                                       __ptext72 60FE  
                                     __ptext64 5E10                                       __ptext56 6830  
                                     __ptext48 0000                                       __ptext81 2EB6  
                                     __ptext73 344E                                       __ptext65 1468  
                                     __ptext57 65A8                                       __ptext49 10A8  
                                     __ptext90 5502                                       __ptext82 4E4E  
                                     __ptext74 68CA                                       __ptext66 683E  
                                     __ptext58 3E08                                       __ptext91 5CE0  
                                     __ptext83 5BE6                                       __ptext75 6874  
                                     __ptext67 49DC                                       __ptext59 318E  
                                     __ptext92 5810                                       __ptext84 47E2  
                                     __ptext76 5FFE                                       __ptext68 4A82  
                                     __ptext93 65E4                                       __ptext85 65C6  
                                     __ptext77 6696                                       __ptext69 4B28  
                                     __ptext94 6602                                       __ptext86 6504  
                                     __ptext78 684C                                       __ptext95 6896  
                                     __ptext87 56CE                                       __ptext79 613C  
                                     __ptext96 2136                                       __ptext88 67F4  
                                     __ptext97 5576                                       __ptext89 565E  
                                     __ptext98 04A6                                       __ptext99 32EE  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 511A  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 65A8  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D3                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00E1  
                          __end_of_MXK_Dequeue 613C                              HMI_SetSegments@in 00BE  
                        Button_Init@pThreshold 0102                                       _safeToGo 5D7C  
                                __size_of_main 00E6                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 00C5  
                       __end_of_Console_Render 2136                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 5DC6  
                          __end_of_MXK_Release 66B2                                 _MXK_TestButton 6790  
                                i2_Byte_SetBit 5D30                        __end_of_move_and_rotate 4084  
                          ??_ADC_ClockDivision 00BA                                   _iRDistanceSS 0322  
                                  _irobot_leds 5B8E                                    _irobot_init 6822  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 4684  
                               ADC_Voltage@max 00E7                                 ADC_Voltage@ref 00EB  
                    __end_of_MXK_BlockSwitchTo 617A                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CFC                                   Port_Set@Type 00E0  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EF                              ??_findClosestWall 03F8  
                                    printf@val 00E0                                   _SSP1STATbits 000FC7  
                         __size_of_Motor_Speed 002A                                 Timer0_Init@DIV 032A  
                               Timer0_Init@PRE 008C                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 5EA0                                     _HMI_GetBar 68DC  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00DF  
                             ??_Port_TogglePin 00D1                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00CC  
                                   _HMI_SetBar 68A0                                     _HMI_Render 60C0  
                             Byte_SetZone@MASK 00C4                                    i2_MXK_Queue 685A  
                    __end_of_ADC_ClockDivision 51A4                                 Timer2_Init@DIV 0326  
                               Timer2_Init@PRE 008A                               Byte_SetZone@pMax 00BC  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D5                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00CA  
                __end_of_update_bump_and_cliff 626A                             LCD_FillRectangle@i 00CF  
                           LCD_FillRectangle@j 00D0                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00BA  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00C1  
                             ___lldiv@dividend 00BA                         __end_of_MXK_TestButton 67A8  
                              ?_Console_Render 0001                                  _iRScriptIndex 0037  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D6                       irobot_query_and_update@j 00D4  
                               _SPI_DisableISR 64B6                     __end_of_twos_complement_of 5FFE  
                     irobot_rotate@rotateAngle 00D7                                Port_Init@pInput 0101  
                                     printf@ap 00DE                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 00D9  
                                   _ISR_Enable 6896                               ?_HMI_SetSegments 00BB  
                      Console_MakeField@Column 00C6                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 00BA                                  SPI_DCS@pInput 00BA  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00C0  
                                  ??_rx_assign 00BD                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                              ADC_Voltage@pInput 00E1  
                      Console_MakeField@pInput 00C5                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00C2                                  ??_GetPortPORT 00BC  
                              ___lwmod@divisor 00C3                                  ??_GetPortTRIS 00BC  
                        Timer0_Start@pFunction 00BA                             Word_SetPair@pInput 00C9  
                              ___lwmod@counter 00C5                             Word_SetPair@pValue 00CC  
                     ?_irobot_query_and_update 00C0                               Motor_Init@pMotor 00E7  
                                  _MXK_Dequeue 60FE                              ADC_Voltage@output 00EF  
                                _distanceTotal 0075                                 LED_Toggle@pLED 00D2  
                                _LCD_DrawField 4BCE                               _Port_SetQuadType 1AA6  
                                  _MXK_Release 6696                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 5FFE                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D5                             Byte_GetZone@Offset 00C1  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00CB  
                              _Port_SetPinType 26C0                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00C2                             Byte_GetZone@pChunk 00BD  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 65A8  
                           Byte_GetZone@pInput 00BA                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 59B0                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 64DE                                   _SPI_MaxSpeed 5502  
            irobot_query_and_update@streamSize 00D1                                   _SPI_MinSpeed 5576  
                           Port_Set@TypeActual 00DE                               ?_move_and_rotate 0001  
