

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 08 19:56:40 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1,inline
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1,inline
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1,inline
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   169                           	psect	text145,global,reloc=2,class=CODE,delta=1
   170                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   171                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   172  0000                     
   173                           ; Version 1.43
   174                           ; Generated 25/07/2017 GMT
   175                           ; 
   176                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   177                           ; All rights reserved.
   178                           ; 
   179                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   180                           ; 
   181                           ; Redistribution and use in source and binary forms, with or without modification, are
   182                           ; permitted provided that the following conditions are met:
   183                           ; 
   184                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   185                           ;        conditions and the following disclaimer.
   186                           ; 
   187                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   188                           ;        of conditions and the following disclaimer in the documentation and/or other
   189                           ;        materials provided with the distribution.
   190                           ; 
   191                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   192                           ;        software without specific prior written permission.
   193                           ; 
   194                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   195                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   196                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   197                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   198                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   199                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   200                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   201                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   202                           ; 
   203                           ; 
   204                           ; Code-generator required, PIC18F67J50 Definitions
   205                           ; 
   206                           ; SFR Addresses
   207  0000                     
   208                           	psect	idataCOMRAM
   209  014A06                     __pidataCOMRAM:
   210                           	opt stack 0
   211                           
   212                           ;initializer for _gCursor
   213  014A06  0006               	dw	6
   214  014A08  0006               	dw	6
   215                           
   216                           ;initializer for _Bus_State
   217  014A0A  01                 	db	1
   218                           
   219                           ;initializer for _A
   220  014A0B  41                 	db	65
   221                           
   222                           ;initializer for _a
   223  014A0C  61                 	db	97
   224                           
   225                           ;initializer for _zero
   226  014A0D  30                 	db	48
   227                           
   228                           ;initializer for _l
   229  014A0E  80                 	db	128
   230                           
   231                           ;initializer for _w
   232  014A0F  80                 	db	128
   233                           
   234                           	psect	idataBANK0
   235  014A32                     __pidataBANK0:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCharSize
   239  014A32  0005               	dw	5
   240  014A34  0007               	dw	7
   241                           
   242                           ;initializer for _gForecolour
   243  014A36  FFFF               	dw	65535
   244                           
   245                           ;initializer for _change
   246  014A38  01                 	db	1
   247                           
   248                           	psect	idataBANK3
   249  014A1A                     __pidataBANK3:
   250                           	opt stack 0
   251                           
   252                           ;initializer for Console_Render@F6956
   253  014A1A  0006               	dw	6
   254  014A1C  0006               	dw	6
   255                           
   256                           ;initializer for _gLineSize
   257  014A1E  0080               	dw	128
   258  014A20  0007               	dw	7
   259                           
   260                           	psect	mediumconst
   261  00FCE4                     __pmediumconst:
   262                           	opt stack 0
   263  00FCE4  00                 	db	0
   264  00FCE5                     _InitList:
   265                           	opt stack 0
   266  00FCE5  1100               	dw	4352
   267  00FCE7  0080               	dw	128
   268  00FCE9  012C               	dw	300
   269  00FCEB  B100               	dw	45312
   270  00FCED  0002               	dw	2
   271  00FCEF  0035               	dw	53
   272  00FCF1  0036               	dw	54
   273  00FCF3  B200               	dw	45568
   274  00FCF5  0002               	dw	2
   275  00FCF7  0035               	dw	53
   276  00FCF9  0036               	dw	54
   277  00FCFB  B300               	dw	45824
   278  00FCFD  0002               	dw	2
   279  00FCFF  0035               	dw	53
   280  00FD01  0036               	dw	54
   281  00FD03  0002               	dw	2
   282  00FD05  0035               	dw	53
   283  00FD07  0036               	dw	54
   284  00FD09  B400               	dw	46080
   285  00FD0B  0000               	dw	0
   286  00FD0D  C000               	dw	49152
   287  00FD0F  00A2               	dw	162
   288  00FD11  0002               	dw	2
   289  00FD13  0084               	dw	132
   290  00FD15  C100               	dw	49408
   291  00FD17  00C5               	dw	197
   292  00FD19  C200               	dw	49664
   293  00FD1B  000D               	dw	13
   294  00FD1D  0000               	dw	0
   295  00FD1F  C300               	dw	49920
   296  00FD21  008D               	dw	141
   297  00FD23  002A               	dw	42
   298  00FD25  C400               	dw	50176
   299  00FD27  008D               	dw	141
   300  00FD29  00EE               	dw	238
   301  00FD2B  C500               	dw	50432
   302  00FD2D  000A               	dw	10
   303  00FD2F  3600               	dw	13824
   304  00FD31  00C8               	dw	200
   305  00FD33  E000               	dw	57344
   306  00FD35  0012               	dw	18
   307  00FD37  001C               	dw	28
   308  00FD39  0010               	dw	16
   309  00FD3B  0018               	dw	24
   310  00FD3D  0033               	dw	51
   311  00FD3F  002C               	dw	44
   312  00FD41  0025               	dw	37
   313  00FD43  0028               	dw	40
   314  00FD45  0028               	dw	40
   315  00FD47  0027               	dw	39
   316  00FD49  002F               	dw	47
   317  00FD4B  003C               	dw	60
   318  00FD4D  0000               	dw	0
   319  00FD4F  0003               	dw	3
   320  00FD51  0003               	dw	3
   321  00FD53  0010               	dw	16
   322  00FD55  0080               	dw	128
   323  00FD57  0078               	dw	120
   324  00FD59  E100               	dw	57600
   325  00FD5B  0012               	dw	18
   326  00FD5D  001C               	dw	28
   327  00FD5F  0010               	dw	16
   328  00FD61  0018               	dw	24
   329  00FD63  002D               	dw	45
   330  00FD65  0028               	dw	40
   331  00FD67  0023               	dw	35
   332  00FD69  0028               	dw	40
   333  00FD6B  0028               	dw	40
   334  00FD6D  0026               	dw	38
   335  00FD6F  002F               	dw	47
   336  00FD71  003B               	dw	59
   337  00FD73  0000               	dw	0
   338  00FD75  0003               	dw	3
   339  00FD77  0003               	dw	3
   340  00FD79  0010               	dw	16
   341  00FD7B  3A00               	dw	14848
   342  00FD7D  0005               	dw	5
   343  00FD7F  2A00               	dw	10752
   344  00FD81  0000               	dw	0
   345  00FD83  0002               	dw	2
   346  00FD85  0000               	dw	0
   347  00FD87  0081               	dw	129
   348  00FD89  2B00               	dw	11008
   349  00FD8B  0000               	dw	0
   350  00FD8D  0003               	dw	3
   351  00FD8F  0000               	dw	0
   352  00FD91  00A2               	dw	162
   353  00FD93  2900               	dw	10496
   354  00FD95  2C00               	dw	11264
   355  00FD97                     __end_of_InitList:
   356                           	opt stack 0
   357  00FD97                     Timer0_Init@PRESCALE:
   358                           	opt stack 0
   359  00FD97  0002               	dw	2
   360  00FD99  0004               	dw	4
   361  00FD9B  0008               	dw	8
   362  00FD9D  0010               	dw	16
   363  00FD9F  0020               	dw	32
   364  00FDA1  0040               	dw	64
   365  00FDA3  0080               	dw	128
   366  00FDA5  0100               	dw	256
   367  00FDA7                     __end_ofTimer0_Init@PRESCALE:
   368                           	opt stack 0
   369  00FDA7                     PortProperty_Valid@F6830:
   370                           	opt stack 0
   371  00FDA7  00                 	db	0
   372  00FDA8  01                 	db	1
   373  00FDA9  02                 	db	2
   374  00FDAA  00                 	db	0
   375  00FDAB  01                 	db	1
   376  00FDAC  00                 	db	0
   377  00FDAD  01                 	db	1
   378  00FDAE  00                 	db	0
   379  00FDAF  02                 	db	2
   380  00FDB0  02                 	db	2
   381  00FDB1  00                 	db	0
   382  00FDB2  00                 	db	0
   383  00FDB3  03                 	db	3
   384  00FDB4  03                 	db	3
   385  00FDB5  03                 	db	3
   386  00FDB6  00                 	db	0
   387  00FDB7                     __end_ofPortProperty_Valid@F6830:
   388                           	opt stack 0
   389  00FDB7                     _dpowers:
   390                           	opt stack 0
   391  00FDB7  0001               	dw	1
   392  00FDB9  000A               	dw	10
   393  00FDBB  0064               	dw	100
   394  00FDBD  03E8               	dw	1000
   395  00FDBF  2710               	dw	10000
   396  00FDC1                     __end_of_dpowers:
   397                           	opt stack 0
   398  00FDC1                     _MASKS:
   399                           	opt stack 0
   400  00FDC1  00                 	db	0
   401  00FDC2  01                 	db	1
   402  00FDC3  03                 	db	3
   403  00FDC4  07                 	db	7
   404  00FDC5  0F                 	db	15
   405  00FDC6  1F                 	db	31
   406  00FDC7  3F                 	db	63
   407  00FDC8  7F                 	db	127
   408  00FDC9  FF                 	db	255
   409  00FDCA                     __end_of_MASKS:
   410                           	opt stack 0
   411  00FDCA                     HMI_SetButton@F7213:
   412                           	opt stack 0
   413  00FDCA  00                 	db	0
   414  00FDCB  02                 	db	2
   415  00FDCC  01                 	db	1
   416  00FDCD  03                 	db	3
   417  00FDCE                     __end_ofHMI_SetButton@F7213:
   418                           	opt stack 0
   419  00FDCE                     Timer2_Init@PRESCALE:
   420                           	opt stack 0
   421  00FDCE  01                 	db	1
   422  00FDCF  04                 	db	4
   423  00FDD0  10                 	db	16
   424  00FDD1                     __end_ofTimer2_Init@PRESCALE:
   425                           	opt stack 0
   426  00FDD1                     _Font5x7:
   427                           	opt stack 0
   428  00FDD1  00                 	db	0
   429  00FDD2  00                 	db	0
   430  00FDD3  00                 	db	0
   431  00FDD4  00                 	db	0
   432  00FDD5  00                 	db	0
   433  00FDD6  00                 	db	0
   434  00FDD7  00                 	db	0
   435  00FDD8  5F                 	db	95
   436  00FDD9  00                 	db	0
   437  00FDDA  00                 	db	0
   438  00FDDB  00                 	db	0
   439  00FDDC  07                 	db	7
   440  00FDDD  00                 	db	0
   441  00FDDE  07                 	db	7
   442  00FDDF  00                 	db	0
   443  00FDE0  14                 	db	20
   444  00FDE1  7F                 	db	127
   445  00FDE2  14                 	db	20
   446  00FDE3  7F                 	db	127
   447  00FDE4  14                 	db	20
   448  00FDE5  24                 	db	36
   449  00FDE6  2A                 	db	42
   450  00FDE7  7F                 	db	127
   451  00FDE8  2A                 	db	42
   452  00FDE9  12                 	db	18
   453  00FDEA  23                 	db	35
   454  00FDEB  13                 	db	19
   455  00FDEC  08                 	db	8
   456  00FDED  64                 	db	100
   457  00FDEE  62                 	db	98
   458  00FDEF  36                 	db	54
   459  00FDF0  49                 	db	73
   460  00FDF1  55                 	db	85
   461  00FDF2  22                 	db	34
   462  00FDF3  50                 	db	80
   463  00FDF4  00                 	db	0
   464  00FDF5  05                 	db	5
   465  00FDF6  03                 	db	3
   466  00FDF7  00                 	db	0
   467  00FDF8  00                 	db	0
   468  00FDF9  00                 	db	0
   469  00FDFA  1C                 	db	28
   470  00FDFB  22                 	db	34
   471  00FDFC  41                 	db	65
   472  00FDFD  00                 	db	0
   473  00FDFE  00                 	db	0
   474  00FDFF  41                 	db	65
   475  00FE00  22                 	db	34
   476  00FE01  1C                 	db	28
   477  00FE02  00                 	db	0
   478  00FE03  08                 	db	8
   479  00FE04  2A                 	db	42
   480  00FE05  1C                 	db	28
   481  00FE06  2A                 	db	42
   482  00FE07  08                 	db	8
   483  00FE08  08                 	db	8
   484  00FE09  08                 	db	8
   485  00FE0A  3E                 	db	62
   486  00FE0B  08                 	db	8
   487  00FE0C  08                 	db	8
   488  00FE0D  00                 	db	0
   489  00FE0E  50                 	db	80
   490  00FE0F  30                 	db	48
   491  00FE10  00                 	db	0
   492  00FE11  00                 	db	0
   493  00FE12  08                 	db	8
   494  00FE13  08                 	db	8
   495  00FE14  08                 	db	8
   496  00FE15  08                 	db	8
   497  00FE16  08                 	db	8
   498  00FE17  00                 	db	0
   499  00FE18  60                 	db	96
   500  00FE19  60                 	db	96
   501  00FE1A  00                 	db	0
   502  00FE1B  00                 	db	0
   503  00FE1C  20                 	db	32
   504  00FE1D  10                 	db	16
   505  00FE1E  08                 	db	8
   506  00FE1F  04                 	db	4
   507  00FE20  02                 	db	2
   508  00FE21  3E                 	db	62
   509  00FE22  51                 	db	81
   510  00FE23  49                 	db	73
   511  00FE24  45                 	db	69
   512  00FE25  3E                 	db	62
   513  00FE26  00                 	db	0
   514  00FE27  42                 	db	66
   515  00FE28  7F                 	db	127
   516  00FE29  40                 	db	64
   517  00FE2A  00                 	db	0
   518  00FE2B  42                 	db	66
   519  00FE2C  61                 	db	97
   520  00FE2D  51                 	db	81
   521  00FE2E  49                 	db	73
   522  00FE2F  46                 	db	70
   523  00FE30  21                 	db	33
   524  00FE31  41                 	db	65
   525  00FE32  45                 	db	69
   526  00FE33  4B                 	db	75
   527  00FE34  31                 	db	49
   528  00FE35  18                 	db	24
   529  00FE36  14                 	db	20
   530  00FE37  12                 	db	18
   531  00FE38  7F                 	db	127
   532  00FE39  10                 	db	16
   533  00FE3A  27                 	db	39
   534  00FE3B  45                 	db	69
   535  00FE3C  45                 	db	69
   536  00FE3D  45                 	db	69
   537  00FE3E  39                 	db	57
   538  00FE3F  3C                 	db	60
   539  00FE40  4A                 	db	74
   540  00FE41  49                 	db	73
   541  00FE42  49                 	db	73
   542  00FE43  30                 	db	48
   543  00FE44  01                 	db	1
   544  00FE45  71                 	db	113
   545  00FE46  09                 	db	9
   546  00FE47  05                 	db	5
   547  00FE48  03                 	db	3
   548  00FE49  36                 	db	54
   549  00FE4A  49                 	db	73
   550  00FE4B  49                 	db	73
   551  00FE4C  49                 	db	73
   552  00FE4D  36                 	db	54
   553  00FE4E  06                 	db	6
   554  00FE4F  49                 	db	73
   555  00FE50  49                 	db	73
   556  00FE51  29                 	db	41
   557  00FE52  1E                 	db	30
   558  00FE53  00                 	db	0
   559  00FE54  36                 	db	54
   560  00FE55  36                 	db	54
   561  00FE56  00                 	db	0
   562  00FE57  00                 	db	0
   563  00FE58  00                 	db	0
   564  00FE59  56                 	db	86
   565  00FE5A  36                 	db	54
   566  00FE5B  00                 	db	0
   567  00FE5C  00                 	db	0
   568  00FE5D  00                 	db	0
   569  00FE5E  08                 	db	8
   570  00FE5F  14                 	db	20
   571  00FE60  22                 	db	34
   572  00FE61  41                 	db	65
   573  00FE62  14                 	db	20
   574  00FE63  14                 	db	20
   575  00FE64  14                 	db	20
   576  00FE65  14                 	db	20
   577  00FE66  14                 	db	20
   578  00FE67  41                 	db	65
   579  00FE68  22                 	db	34
   580  00FE69  14                 	db	20
   581  00FE6A  08                 	db	8
   582  00FE6B  00                 	db	0
   583  00FE6C  02                 	db	2
   584  00FE6D  01                 	db	1
   585  00FE6E  51                 	db	81
   586  00FE6F  09                 	db	9
   587  00FE70  06                 	db	6
   588  00FE71  32                 	db	50
   589  00FE72  49                 	db	73
   590  00FE73  79                 	db	121
   591  00FE74  41                 	db	65
   592  00FE75  3E                 	db	62
   593  00FE76  7E                 	db	126
   594  00FE77  11                 	db	17
   595  00FE78  11                 	db	17
   596  00FE79  11                 	db	17
   597  00FE7A  7E                 	db	126
   598  00FE7B  7F                 	db	127
   599  00FE7C  49                 	db	73
   600  00FE7D  49                 	db	73
   601  00FE7E  49                 	db	73
   602  00FE7F  36                 	db	54
   603  00FE80  3E                 	db	62
   604  00FE81  41                 	db	65
   605  00FE82  41                 	db	65
   606  00FE83  41                 	db	65
   607  00FE84  22                 	db	34
   608  00FE85  7F                 	db	127
   609  00FE86  41                 	db	65
   610  00FE87  41                 	db	65
   611  00FE88  22                 	db	34
   612  00FE89  1C                 	db	28
   613  00FE8A  7F                 	db	127
   614  00FE8B  49                 	db	73
   615  00FE8C  49                 	db	73
   616  00FE8D  49                 	db	73
   617  00FE8E  41                 	db	65
   618  00FE8F  7F                 	db	127
   619  00FE90  09                 	db	9
   620  00FE91  09                 	db	9
   621  00FE92  01                 	db	1
   622  00FE93  01                 	db	1
   623  00FE94  3E                 	db	62
   624  00FE95  41                 	db	65
   625  00FE96  41                 	db	65
   626  00FE97  51                 	db	81
   627  00FE98  32                 	db	50
   628  00FE99  7F                 	db	127
   629  00FE9A  08                 	db	8
   630  00FE9B  08                 	db	8
   631  00FE9C  08                 	db	8
   632  00FE9D  7F                 	db	127
   633  00FE9E  00                 	db	0
   634  00FE9F  41                 	db	65
   635  00FEA0  7F                 	db	127
   636  00FEA1  41                 	db	65
   637  00FEA2  00                 	db	0
   638  00FEA3  20                 	db	32
   639  00FEA4  40                 	db	64
   640  00FEA5  41                 	db	65
   641  00FEA6  3F                 	db	63
   642  00FEA7  01                 	db	1
   643  00FEA8  7F                 	db	127
   644  00FEA9  08                 	db	8
   645  00FEAA  14                 	db	20
   646  00FEAB  22                 	db	34
   647  00FEAC  41                 	db	65
   648  00FEAD  7F                 	db	127
   649  00FEAE  40                 	db	64
   650  00FEAF  40                 	db	64
   651  00FEB0  40                 	db	64
   652  00FEB1  40                 	db	64
   653  00FEB2  7F                 	db	127
   654  00FEB3  02                 	db	2
   655  00FEB4  04                 	db	4
   656  00FEB5  02                 	db	2
   657  00FEB6  7F                 	db	127
   658  00FEB7  7F                 	db	127
   659  00FEB8  04                 	db	4
   660  00FEB9  08                 	db	8
   661  00FEBA  10                 	db	16
   662  00FEBB  7F                 	db	127
   663  00FEBC  3E                 	db	62
   664  00FEBD  41                 	db	65
   665  00FEBE  41                 	db	65
   666  00FEBF  41                 	db	65
   667  00FEC0  3E                 	db	62
   668  00FEC1  7F                 	db	127
   669  00FEC2  09                 	db	9
   670  00FEC3  09                 	db	9
   671  00FEC4  09                 	db	9
   672  00FEC5  06                 	db	6
   673  00FEC6  3E                 	db	62
   674  00FEC7  41                 	db	65
   675  00FEC8  51                 	db	81
   676  00FEC9  21                 	db	33
   677  00FECA  5E                 	db	94
   678  00FECB  7F                 	db	127
   679  00FECC  09                 	db	9
   680  00FECD  19                 	db	25
   681  00FECE  29                 	db	41
   682  00FECF  46                 	db	70
   683  00FED0  46                 	db	70
   684  00FED1  49                 	db	73
   685  00FED2  49                 	db	73
   686  00FED3  49                 	db	73
   687  00FED4  31                 	db	49
   688  00FED5  01                 	db	1
   689  00FED6  01                 	db	1
   690  00FED7  7F                 	db	127
   691  00FED8  01                 	db	1
   692  00FED9  01                 	db	1
   693  00FEDA  3F                 	db	63
   694  00FEDB  40                 	db	64
   695  00FEDC  40                 	db	64
   696  00FEDD  40                 	db	64
   697  00FEDE  3F                 	db	63
   698  00FEDF  1F                 	db	31
   699  00FEE0  20                 	db	32
   700  00FEE1  40                 	db	64
   701  00FEE2  20                 	db	32
   702  00FEE3  1F                 	db	31
   703  00FEE4  7F                 	db	127
   704  00FEE5  20                 	db	32
   705  00FEE6  18                 	db	24
   706  00FEE7  20                 	db	32
   707  00FEE8  7F                 	db	127
   708  00FEE9  63                 	db	99
   709  00FEEA  14                 	db	20
   710  00FEEB  08                 	db	8
   711  00FEEC  14                 	db	20
   712  00FEED  63                 	db	99
   713  00FEEE  03                 	db	3
   714  00FEEF  04                 	db	4
   715  00FEF0  78                 	db	120
   716  00FEF1  04                 	db	4
   717  00FEF2  03                 	db	3
   718  00FEF3  61                 	db	97
   719  00FEF4  51                 	db	81
   720  00FEF5  49                 	db	73
   721  00FEF6  45                 	db	69
   722  00FEF7  43                 	db	67
   723  00FEF8  00                 	db	0
   724  00FEF9  00                 	db	0
   725  00FEFA  7F                 	db	127
   726  00FEFB  41                 	db	65
   727  00FEFC  41                 	db	65
   728  00FEFD  02                 	db	2
   729  00FEFE  04                 	db	4
   730  00FEFF  08                 	db	8
   731  00FF00  10                 	db	16
   732  00FF01  20                 	db	32
   733  00FF02  41                 	db	65
   734  00FF03  41                 	db	65
   735  00FF04  7F                 	db	127
   736  00FF05  00                 	db	0
   737  00FF06  00                 	db	0
   738  00FF07  04                 	db	4
   739  00FF08  02                 	db	2
   740  00FF09  01                 	db	1
   741  00FF0A  02                 	db	2
   742  00FF0B  04                 	db	4
   743  00FF0C  40                 	db	64
   744  00FF0D  40                 	db	64
   745  00FF0E  40                 	db	64
   746  00FF0F  40                 	db	64
   747  00FF10  40                 	db	64
   748  00FF11  00                 	db	0
   749  00FF12  01                 	db	1
   750  00FF13  02                 	db	2
   751  00FF14  04                 	db	4
   752  00FF15  00                 	db	0
   753  00FF16  20                 	db	32
   754  00FF17  54                 	db	84
   755  00FF18  54                 	db	84
   756  00FF19  54                 	db	84
   757  00FF1A  78                 	db	120
   758  00FF1B  7F                 	db	127
   759  00FF1C  48                 	db	72
   760  00FF1D  44                 	db	68
   761  00FF1E  44                 	db	68
   762  00FF1F  38                 	db	56
   763  00FF20  38                 	db	56
   764  00FF21  44                 	db	68
   765  00FF22  44                 	db	68
   766  00FF23  44                 	db	68
   767  00FF24  20                 	db	32
   768  00FF25  38                 	db	56
   769  00FF26  44                 	db	68
   770  00FF27  44                 	db	68
   771  00FF28  48                 	db	72
   772  00FF29  7F                 	db	127
   773  00FF2A  38                 	db	56
   774  00FF2B  54                 	db	84
   775  00FF2C  54                 	db	84
   776  00FF2D  54                 	db	84
   777  00FF2E  18                 	db	24
   778  00FF2F  08                 	db	8
   779  00FF30  7E                 	db	126
   780  00FF31  09                 	db	9
   781  00FF32  01                 	db	1
   782  00FF33  02                 	db	2
   783  00FF34  08                 	db	8
   784  00FF35  14                 	db	20
   785  00FF36  54                 	db	84
   786  00FF37  54                 	db	84
   787  00FF38  3C                 	db	60
   788  00FF39  7F                 	db	127
   789  00FF3A  08                 	db	8
   790  00FF3B  04                 	db	4
   791  00FF3C  04                 	db	4
   792  00FF3D  78                 	db	120
   793  00FF3E  00                 	db	0
   794  00FF3F  44                 	db	68
   795  00FF40  7D                 	db	125
   796  00FF41  40                 	db	64
   797  00FF42  00                 	db	0
   798  00FF43  20                 	db	32
   799  00FF44  40                 	db	64
   800  00FF45  44                 	db	68
   801  00FF46  3D                 	db	61
   802  00FF47  00                 	db	0
   803  00FF48  00                 	db	0
   804  00FF49  7F                 	db	127
   805  00FF4A  10                 	db	16
   806  00FF4B  28                 	db	40
   807  00FF4C  44                 	db	68
   808  00FF4D  00                 	db	0
   809  00FF4E  41                 	db	65
   810  00FF4F  7F                 	db	127
   811  00FF50  40                 	db	64
   812  00FF51  00                 	db	0
   813  00FF52  7C                 	db	124
   814  00FF53  04                 	db	4
   815  00FF54  18                 	db	24
   816  00FF55  04                 	db	4
   817  00FF56  78                 	db	120
   818  00FF57  7C                 	db	124
   819  00FF58  08                 	db	8
   820  00FF59  04                 	db	4
   821  00FF5A  04                 	db	4
   822  00FF5B  78                 	db	120
   823  00FF5C  38                 	db	56
   824  00FF5D  44                 	db	68
   825  00FF5E  44                 	db	68
   826  00FF5F  44                 	db	68
   827  00FF60  38                 	db	56
   828  00FF61  7C                 	db	124
   829  00FF62  14                 	db	20
   830  00FF63  14                 	db	20
   831  00FF64  14                 	db	20
   832  00FF65  08                 	db	8
   833  00FF66  08                 	db	8
   834  00FF67  14                 	db	20
   835  00FF68  14                 	db	20
   836  00FF69  18                 	db	24
   837  00FF6A  7C                 	db	124
   838  00FF6B  7C                 	db	124
   839  00FF6C  08                 	db	8
   840  00FF6D  04                 	db	4
   841  00FF6E  04                 	db	4
   842  00FF6F  08                 	db	8
   843  00FF70  48                 	db	72
   844  00FF71  54                 	db	84
   845  00FF72  54                 	db	84
   846  00FF73  54                 	db	84
   847  00FF74  20                 	db	32
   848  00FF75  04                 	db	4
   849  00FF76  3F                 	db	63
   850  00FF77  44                 	db	68
   851  00FF78  40                 	db	64
   852  00FF79  20                 	db	32
   853  00FF7A  3C                 	db	60
   854  00FF7B  40                 	db	64
   855  00FF7C  40                 	db	64
   856  00FF7D  20                 	db	32
   857  00FF7E  7C                 	db	124
   858  00FF7F  1C                 	db	28
   859  00FF80  20                 	db	32
   860  00FF81  40                 	db	64
   861  00FF82  20                 	db	32
   862  00FF83  1C                 	db	28
   863  00FF84  3C                 	db	60
   864  00FF85  40                 	db	64
   865  00FF86  30                 	db	48
   866  00FF87  40                 	db	64
   867  00FF88  3C                 	db	60
   868  00FF89  44                 	db	68
   869  00FF8A  28                 	db	40
   870  00FF8B  10                 	db	16
   871  00FF8C  28                 	db	40
   872  00FF8D  44                 	db	68
   873  00FF8E  0C                 	db	12
   874  00FF8F  50                 	db	80
   875  00FF90  50                 	db	80
   876  00FF91  50                 	db	80
   877  00FF92  3C                 	db	60
   878  00FF93  44                 	db	68
   879  00FF94  64                 	db	100
   880  00FF95  54                 	db	84
   881  00FF96  4C                 	db	76
   882  00FF97  44                 	db	68
   883  00FF98  00                 	db	0
   884  00FF99  08                 	db	8
   885  00FF9A  36                 	db	54
   886  00FF9B  41                 	db	65
   887  00FF9C  00                 	db	0
   888  00FF9D  00                 	db	0
   889  00FF9E  00                 	db	0
   890  00FF9F  7F                 	db	127
   891  00FFA0  00                 	db	0
   892  00FFA1  00                 	db	0
   893  00FFA2  00                 	db	0
   894  00FFA3  41                 	db	65
   895  00FFA4  36                 	db	54
   896  00FFA5  08                 	db	8
   897  00FFA6  00                 	db	0
   898  00FFA7  08                 	db	8
   899  00FFA8  08                 	db	8
   900  00FFA9  2A                 	db	42
   901  00FFAA  1C                 	db	28
   902  00FFAB  08                 	db	8
   903  00FFAC  08                 	db	8
   904  00FFAD  1C                 	db	28
   905  00FFAE  2A                 	db	42
   906  00FFAF  08                 	db	8
   907  00FFB0  08                 	db	8
   908  00FFB1                     __end_of_Font5x7:
   909                           	opt stack 0
   910  00FFB1                     _PortG_Property:
   911                           	opt stack 0
   912  00FFB1  FC00               	dw	64512
   913  00FFB3                     __end_of_PortG_Property:
   914                           	opt stack 0
   915  00FFB3                     _PortF_Property:
   916                           	opt stack 0
   917  00FFB3  0FFF               	dw	4095
   918  00FFB5                     __end_of_PortF_Property:
   919                           	opt stack 0
   920  00FFB5                     _PortE_Property:
   921                           	opt stack 0
   922  00FFB5  0000               	dw	0
   923  00FFB7                     __end_of_PortE_Property:
   924                           	opt stack 0
   925  00FFB7                     _PortD_Property:
   926                           	opt stack 0
   927  00FFB7  FFFF               	dw	65535
   928  00FFB9                     __end_of_PortD_Property:
   929                           	opt stack 0
   930  00FFB9                     _PortC_Property:
   931                           	opt stack 0
   932  00FFB9  FFF0               	dw	65520
   933  00FFBB                     __end_of_PortC_Property:
   934                           	opt stack 0
   935  00FFBB                     _PortB_Property:
   936                           	opt stack 0
   937  00FFBB  FF00               	dw	65280
   938  00FFBD                     __end_of_PortB_Property:
   939                           	opt stack 0
   940  00FFBD                     _PortA_Property:
   941                           	opt stack 0
   942  00FFBD  00FF               	dw	255
   943  00FFBF                     __end_of_PortA_Property:
   944                           	opt stack 0
   945  0000                     _TMR0	set	4054
   946  0000                     _RCREG1	set	4015
   947  0000                     _TXREG1	set	4014
   948  0000                     _SPBRG1	set	4016
   949  0000                     _TXSTA1bits	set	4013
   950  0000                     _BAUDCON1bits	set	3966
   951  0000                     _RCSTA1	set	4012
   952  0000                     _TXSTA1	set	4013
   953  0000                     _TRISCbits	set	3988
   954  0000                     _PR2	set	4043
   955  0000                     _T2CONbits	set	4042
   956  0000                     _T0CONbits	set	4053
   957  0000                     _RCONbits	set	4048
   958  0000                     _OSCTUNEbits	set	3995
   959  0000                     _PIR3	set	4004
   960  0000                     _PIR2	set	4001
   961  0000                     _PIR1	set	3998
   962  0000                     _INTCONbits	set	4082
   963  0000                     _SSP2CON2bits	set	3947
   964  0000                     _SSP1CON2bits	set	4037
   965  0000                     _SSP1ADD	set	4040
   966  0000                     _ANCON0	set	4033
   967  0000                     _ADRESL	set	4035
   968  0000                     _ADRESH	set	4036
   969  0000                     _ADCON1bits	set	4033
   970  0000                     _ADCON0bits	set	4034
   971  0000                     _SSP2CON1bits	set	3948
   972  0000                     _SSP1CON1bits	set	4038
   973  0000                     _SSP2STATbits	set	3949
   974  0000                     _SSP1STATbits	set	4039
   975  0000                     _PIE3bits	set	4003
   976  0000                     _PIE1bits	set	3997
   977  0000                     _PIR3bits	set	4004
   978  0000                     _PIR1bits	set	3998
   979  0000                     _IPR3bits	set	4005
   980  0000                     _IPR1bits	set	3999
   981  0000                     _PORTFbits	set	3973
   982  0000                     _SSP2CON2	set	3947
   983  0000                     _SSP1CON2	set	4037
   984  0000                     _SSP2BUF	set	3951
   985  0000                     _SSP2CON1	set	3948
   986  0000                     _SSP2STAT	set	3949
   987  0000                     _SSP1BUF	set	4041
   988  0000                     _SSP1CON1	set	4038
   989  0000                     _SSP1STAT	set	4039
   990  0000                     _LATG	set	3983
   991  0000                     _LATF	set	3982
   992  0000                     _LATE	set	3981
   993  0000                     _LATD	set	3980
   994  0000                     _LATC	set	3979
   995  0000                     _LATB	set	3978
   996  0000                     _LATA	set	3977
   997  0000                     _TRISG	set	3992
   998  0000                     _TRISF	set	3991
   999  0000                     _TRISE	set	3990
  1000  0000                     _TRISD	set	3989
  1001  0000                     _TRISC	set	3988
  1002  0000                     _TRISB	set	3987
  1003  0000                     _TRISA	set	3986
  1004  0000                     _PORTG	set	3974
  1005  0000                     _PORTF	set	3973
  1006  0000                     _PORTE	set	3972
  1007  0000                     _PORTD	set	3971
  1008  0000                     _PORTC	set	3970
  1009  0000                     _PORTB	set	3969
  1010  0000                     _PORTA	set	3968
  1011  00FFBF                     STR_2:
  1012  00FFBF  54                 	db	84	;'T'
  1013  00FFC0  6F                 	db	111	;'o'
  1014  00FFC1  74                 	db	116	;'t'
  1015  00FFC2  61                 	db	97	;'a'
  1016  00FFC3  6C                 	db	108	;'l'
  1017  00FFC4  20                 	db	32
  1018  00FFC5  44                 	db	68	;'D'
  1019  00FFC6  69                 	db	105	;'i'
  1020  00FFC7  73                 	db	115	;'s'
  1021  00FFC8  74                 	db	116	;'t'
  1022  00FFC9  61                 	db	97	;'a'
  1023  00FFCA  6E                 	db	110	;'n'
  1024  00FFCB  63                 	db	99	;'c'
  1025  00FFCC  65                 	db	101	;'e'
  1026  00FFCD  3A                 	db	58	;':'
  1027  00FFCE  25                 	db	37
  1028  00FFCF  75                 	db	117	;'u'
  1029  00FFD0  0A                 	db	10
  1030  00FFD1  4C                 	db	76	;'L'
  1031  00FFD2  65                 	db	101	;'e'
  1032  00FFD3  66                 	db	102	;'f'
  1033  00FFD4  74                 	db	116	;'t'
  1034  00FFD5  20                 	db	32
  1035  00FFD6  42                 	db	66	;'B'
  1036  00FFD7  75                 	db	117	;'u'
  1037  00FFD8  6D                 	db	109	;'m'
  1038  00FFD9  70                 	db	112	;'p'
  1039  00FFDA  3A                 	db	58	;':'
  1040  00FFDB  25                 	db	37
  1041  00FFDC  75                 	db	117	;'u'
  1042  00FFDD  0A                 	db	10
  1043  00FFDE  52                 	db	82	;'R'
  1044  00FFDF  69                 	db	105	;'i'
  1045  00FFE0  67                 	db	103	;'g'
  1046  00FFE1  68                 	db	104	;'h'
  1047  00FFE2  74                 	db	116	;'t'
  1048  00FFE3  20                 	db	32
  1049  00FFE4  42                 	db	66	;'B'
  1050  00FFE5  75                 	db	117	;'u'
  1051  00FFE6  6D                 	db	109	;'m'
  1052  00FFE7  70                 	db	112	;'p'
  1053  00FFE8  3A                 	db	58	;':'
  1054  00FFE9  25                 	db	37
  1055  00FFEA  75                 	db	117	;'u'
  1056  00FFEB  0A                 	db	10
  1057  00FFEC  00                 	db	0
  1058  00FFED                     STR_4:
  1059  00FFED  44                 	db	68	;'D'
  1060  00FFEE  69                 	db	105	;'i'
  1061  00FFEF  73                 	db	115	;'s'
  1062  00FFF0  74                 	db	116	;'t'
  1063  00FFF1  61                 	db	97	;'a'
  1064  00FFF2  6E                 	db	110	;'n'
  1065  00FFF3  63                 	db	99	;'c'
  1066  00FFF4  65                 	db	101	;'e'
  1067  00FFF5  3A                 	db	58	;':'
  1068  00FFF6  20                 	db	32
  1069  00FFF7  25                 	db	37
  1070  00FFF8  64                 	db	100	;'d'
  1071  00FFF9  0A                 	db	10
  1072  00FFFA  00                 	db	0
  1073  00FFFB                     STR_1:
  1074  00FFFB  25                 	db	37
  1075  00FFFC  63                 	db	99	;'c'
  1076  00FFFD  00                 	db	0
  1077  0000                     
  1078                           ; #config settings
  1079  00FFFE  00                 	db	0	; dummy byte at the end
  1080  0000                     
  1081                           	psect	cinit
  1082  012CE4                     __pcinit:
  1083                           	opt stack 0
  1084  012CE4                     start_initialization:
  1085                           	opt stack 0
  1086  012CE4                     __initialization:
  1087                           	opt stack 0
  1088                           
  1089                           ; Initialize objects allocated to BANK3 (8 bytes)
  1090                           ; load TBLPTR registers with __pidataBANK3
  1091  012CE4  0E1A               	movlw	low __pidataBANK3
  1092  012CE6  6EF6               	movwf	tblptrl,c
  1093  012CE8  0E4A               	movlw	high __pidataBANK3
  1094  012CEA  6EF7               	movwf	tblptrh,c
  1095  012CEC  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1096  012CEE  6EF8               	movwf	tblptru,c
  1097  012CF0  EE03  F0DF         	lfsr	0,__pdataBANK3
  1098  012CF4  EE10 F008          	lfsr	1,8
  1099  012CF8                     copy_data0:
  1100  012CF8  0009               	tblrd		*+
  1101  012CFA  CFF5 FFEE          	movff	tablat,postinc0
  1102  012CFE  50E5               	movf	postdec1,w,c
  1103  012D00  50E1               	movf	fsr1l,w,c
  1104  012D02  E1FA               	bnz	copy_data0
  1105                           
  1106                           ; Initialize objects allocated to BANK0 (7 bytes)
  1107                           ; load TBLPTR registers with __pidataBANK0
  1108  012D04  0E32               	movlw	low __pidataBANK0
  1109  012D06  6EF6               	movwf	tblptrl,c
  1110  012D08  0E4A               	movlw	high __pidataBANK0
  1111  012D0A  6EF7               	movwf	tblptrh,c
  1112  012D0C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1113  012D0E  6EF8               	movwf	tblptru,c
  1114  012D10  EE00  F0F9         	lfsr	0,__pdataBANK0
  1115  012D14  EE10 F007          	lfsr	1,7
  1116  012D18                     copy_data1:
  1117  012D18  0009               	tblrd		*+
  1118  012D1A  CFF5 FFEE          	movff	tablat,postinc0
  1119  012D1E  50E5               	movf	postdec1,w,c
  1120  012D20  50E1               	movf	fsr1l,w,c
  1121  012D22  E1FA               	bnz	copy_data1
  1122                           
  1123                           ; Initialize objects allocated to COMRAM (10 bytes)
  1124                           ; load TBLPTR registers with __pidataCOMRAM
  1125  012D24  0E06               	movlw	low __pidataCOMRAM
  1126  012D26  6EF6               	movwf	tblptrl,c
  1127  012D28  0E4A               	movlw	high __pidataCOMRAM
  1128  012D2A  6EF7               	movwf	tblptrh,c
  1129  012D2C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1130  012D2E  6EF8               	movwf	tblptru,c
  1131  012D30  EE00  F047         	lfsr	0,__pdataCOMRAM
  1132  012D34  EE10 F00A          	lfsr	1,10
  1133  012D38                     copy_data2:
  1134  012D38  0009               	tblrd		*+
  1135  012D3A  CFF5 FFEE          	movff	tablat,postinc0
  1136  012D3E  50E5               	movf	postdec1,w,c
  1137  012D40  50E1               	movf	fsr1l,w,c
  1138  012D42  E1FA               	bnz	copy_data2
  1139                           
  1140                           ; Clear objects allocated to BIGRAM (300 bytes)
  1141  012D44  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1142  012D48  EE11 F02C          	lfsr	1,300
  1143  012D4C                     clear_0:
  1144  012D4C  6AEE               	clrf	postinc0,c
  1145  012D4E  50E5               	movf	postdec1,w,c
  1146  012D50  50E1               	movf	fsr1l,w,c
  1147  012D52  E1FC               	bnz	clear_0
  1148  012D54  50E2               	movf	fsr1h,w,c
  1149  012D56  E1FA               	bnz	clear_0
  1150                           
  1151                           ; Clear objects allocated to BANK4 (170 bytes)
  1152  012D58  EE04  F000         	lfsr	0,__pbssBANK4
  1153  012D5C  0EAA               	movlw	170
  1154  012D5E                     clear_1:
  1155  012D5E  6AEE               	clrf	postinc0,c
  1156  012D60  06E8               	decf	wreg,f,c
  1157  012D62  E1FD               	bnz	clear_1
  1158                           
  1159                           ; Clear objects allocated to BANK3 (223 bytes)
  1160  012D64  EE03  F000         	lfsr	0,__pbssBANK3
  1161  012D68  0EDF               	movlw	223
  1162  012D6A                     clear_2:
  1163  012D6A  6AEE               	clrf	postinc0,c
  1164  012D6C  06E8               	decf	wreg,f,c
  1165  012D6E  E1FD               	bnz	clear_2
  1166                           
  1167                           ; Clear objects allocated to BANK0 (91 bytes)
  1168  012D70  EE00  F060         	lfsr	0,__pbssBANK0
  1169  012D74  0E5B               	movlw	91
  1170  012D76                     clear_3:
  1171  012D76  6AEE               	clrf	postinc0,c
  1172  012D78  06E8               	decf	wreg,f,c
  1173  012D7A  E1FD               	bnz	clear_3
  1174                           
  1175                           ; Clear objects allocated to COMRAM (30 bytes)
  1176  012D7C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1177  012D80  0E1E               	movlw	30
  1178  012D82                     clear_4:
  1179  012D82  6AEE               	clrf	postinc0,c
  1180  012D84  06E8               	decf	wreg,f,c
  1181  012D86  E1FD               	bnz	clear_4
  1182  012D88                     end_of_initialization:
  1183                           	opt stack 0
  1184  012D88                     __end_of__initialization:
  1185                           	opt stack 0
  1186  012D88  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1187  012D8A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1188  012D8C  0100               	movlb	0
  1189  012D8E  EF38  F0A0         	goto	_main	;jump to C main() function
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           postdec1	equ	0xFE5
  1197                           fsr1h	equ	0xFE2
  1198                           fsr1l	equ	0xFE1
  1199                           
  1200                           	psect	bssCOMRAM
  1201  000029                     __pbssCOMRAM:
  1202                           	opt stack 0
  1203  000029                     _COUNTER:
  1204                           	opt stack 0
  1205  000029                     	ds	2
  1206  00002B                     HMI_GRender@a:
  1207                           	opt stack 0
  1208  00002B                     	ds	2
  1209  00002D                     _iRDropRight:
  1210                           	opt stack 0
  1211  00002D                     	ds	1
  1212  00002E                     _iRVirtualWall:
  1213                           	opt stack 0
  1214  00002E                     	ds	1
  1215  00002F                     _iRCliffR:
  1216                           	opt stack 0
  1217  00002F                     	ds	1
  1218  000030                     _iRCliffFR:
  1219                           	opt stack 0
  1220  000030                     	ds	1
  1221  000031                     _iRCliffFL:
  1222                           	opt stack 0
  1223  000031                     	ds	1
  1224  000032                     _iRCliffL:
  1225                           	opt stack 0
  1226  000032                     	ds	1
  1227  000033                     _iRWall:
  1228                           	opt stack 0
  1229  000033                     	ds	1
  1230  000034                     _iRBumpDrop:
  1231                           	opt stack 0
  1232  000034                     	ds	1
  1233  000035                     _iRScriptIndex:
  1234                           	opt stack 0
  1235  000035                     	ds	1
  1236  000036                     _u:
  1237                           	opt stack 0
  1238  000036                     	ds	1
  1239  000037                     _j:
  1240                           	opt stack 0
  1241  000037                     	ds	1
  1242  000038                     _i:
  1243                           	opt stack 0
  1244  000038                     	ds	1
  1245  000039                     Timer0_Init@PRE:
  1246                           	opt stack 0
  1247  000039                     	ds	1
  1248  00003A                     _INDEX:
  1249                           	opt stack 0
  1250  00003A                     	ds	1
  1251  00003B                     rand@screw:
  1252                           	opt stack 0
  1253  00003B                     	ds	1
  1254  00003C                     _ADC_Initialised:
  1255                           	opt stack 0
  1256  00003C                     	ds	1
  1257  00003D                     OutSeg@a:
  1258                           	opt stack 0
  1259  00003D                     	ds	1
  1260  00003E                     OutSeg@segset:
  1261                           	opt stack 0
  1262  00003E                     	ds	1
  1263  00003F                     OutSeg@cur:
  1264                           	opt stack 0
  1265  00003F                     	ds	1
  1266  000040                     _I2C1T:
  1267                           	opt stack 0
  1268  000040                     	ds	7
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postdec1	equ	0xFE5
  1276                           fsr1h	equ	0xFE2
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           	psect	dataCOMRAM
  1280  000047                     __pdataCOMRAM:
  1281                           	opt stack 0
  1282  000047                     _gCursor:
  1283                           	opt stack 0
  1284  000047                     	ds	4
  1285  00004B                     _Bus_State:
  1286                           	opt stack 0
  1287  00004B                     	ds	1
  1288  00004C                     	ds	1
  1289  00004D                     	ds	1
  1290  00004E                     	ds	1
  1291  00004F                     _l:
  1292                           	opt stack 0
  1293  00004F                     	ds	1
  1294  000050                     _w:
  1295                           	opt stack 0
  1296  000050                     	ds	1
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postdec1	equ	0xFE5
  1304                           fsr1h	equ	0xFE2
  1305                           fsr1l	equ	0xFE1
  1306                           
  1307                           	psect	bssBANK0
  1308  000060                     __pbssBANK0:
  1309                           	opt stack 0
  1310  000060                     _iRDistanceSS:
  1311                           	opt stack 0
  1312  000060                     	ds	4
  1313  000064                     _gISR:
  1314                           	opt stack 0
  1315  000064                     	ds	3
  1316  000067                     _lQueue:
  1317                           	opt stack 0
  1318  000067                     	ds	3
  1319  00006A                     _lStepFunction:
  1320                           	opt stack 0
  1321  00006A                     	ds	3
  1322  00006D                     _selectedMode4:
  1323                           	opt stack 0
  1324  00006D                     	ds	2
  1325  00006F                     _selectedMode3:
  1326                           	opt stack 0
  1327  00006F                     	ds	2
  1328  000071                     _selectedMode2:
  1329                           	opt stack 0
  1330  000071                     	ds	2
  1331  000073                     _selectedMode1:
  1332                           	opt stack 0
  1333  000073                     	ds	2
  1334  000075                     _mode:
  1335                           	opt stack 0
  1336  000075                     	ds	2
  1337  000077                     _angleTotal:
  1338                           	opt stack 0
  1339  000077                     	ds	2
  1340  000079                     _distanceTotal:
  1341                           	opt stack 0
  1342  000079                     	ds	2
  1343  00007B                     _iRAngle:
  1344                           	opt stack 0
  1345  00007B                     	ds	2
  1346  00007D                     _iRDistance:
  1347                           	opt stack 0
  1348  00007D                     	ds	2
  1349  00007F                     _pShiftVal:
  1350                           	opt stack 0
  1351  00007F                     	ds	2
  1352  000081                     _val:
  1353                           	opt stack 0
  1354  000081                     	ds	2
  1355  000083                     _lMotor:
  1356                           	opt stack 0
  1357  000083                     	ds	2
  1358  000085                     _lCurrent:
  1359                           	opt stack 0
  1360  000085                     	ds	2
  1361  000087                     _gBackcolour:
  1362                           	opt stack 0
  1363  000087                     	ds	2
  1364  000089                     SPI_Send9@dat:
  1365                           	opt stack 0
  1366  000089                     	ds	2
  1367  00008B                     _iRDropCaster:
  1368                           	opt stack 0
  1369  00008B                     	ds	1
  1370  00008C                     _iRDropLeft:
  1371                           	opt stack 0
  1372  00008C                     	ds	1
  1373  00008D                     _iRBumpLeft:
  1374                           	opt stack 0
  1375  00008D                     	ds	1
  1376  00008E                     _iRBumpRight:
  1377                           	opt stack 0
  1378  00008E                     	ds	1
  1379  00008F                     Event_TestButton@j:
  1380                           	opt stack 0
  1381  00008F                     	ds	1
  1382  000090                     Timer2_Init@PRE:
  1383                           	opt stack 0
  1384  000090                     	ds	1
  1385  000091                     Timer2_Init@INDEX:
  1386                           	opt stack 0
  1387  000091                     	ds	1
  1388  000092                     _lBufferY:
  1389                           	opt stack 0
  1390  000092                     	ds	1
  1391  000093                     _lBufferX:
  1392                           	opt stack 0
  1393  000093                     	ds	1
  1394  000094                     _clearall:
  1395                           	opt stack 0
  1396  000094                     	ds	1
  1397  000095                     _PortE:
  1398                           	opt stack 0
  1399  000095                     	ds	10
  1400  00009F                     _PortD:
  1401                           	opt stack 0
  1402  00009F                     	ds	10
  1403  0000A9                     _PortC:
  1404                           	opt stack 0
  1405  0000A9                     	ds	10
  1406  0000B3                     LCD_DrawRectangle@p4:
  1407                           	opt stack 0
  1408  0000B3                     	ds	4
  1409  0000B7                     LCD_DrawRectangle@p2:
  1410                           	opt stack 0
  1411  0000B7                     	ds	4
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postdec1	equ	0xFE5
  1419                           fsr1h	equ	0xFE2
  1420                           fsr1l	equ	0xFE1
  1421                           
  1422                           	psect	dataBANK0
  1423  0000F9                     __pdataBANK0:
  1424                           	opt stack 0
  1425  0000F9                     _gCharSize:
  1426                           	opt stack 0
  1427  0000F9                     	ds	4
  1428  0000FD                     _gForecolour:
  1429                           	opt stack 0
  1430  0000FD                     	ds	2
  1431  0000FF                     _change:
  1432                           	opt stack 0
  1433  0000FF                     	ds	1
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1h	equ	0xFE2
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	bssBANK3
  1445  000300                     __pbssBANK3:
  1446                           	opt stack 0
  1447  000300                     _lCBuffer:
  1448                           	opt stack 0
  1449  000300                     	ds	30
  1450  00031E                     _iRAngleSS:
  1451                           	opt stack 0
  1452  00031E                     	ds	4
  1453  000322                     Timer2_Init@DIV:
  1454                           	opt stack 0
  1455  000322                     	ds	4
  1456  000326                     Timer0_Init@DIV:
  1457                           	opt stack 0
  1458  000326                     	ds	4
  1459  00032A                     _I2C2_More:
  1460                           	opt stack 0
  1461  00032A                     	ds	3
  1462  00032D                     _I2C1_More:
  1463                           	opt stack 0
  1464  00032D                     	ds	3
  1465  000330                     _I2C2_Done:
  1466                           	opt stack 0
  1467  000330                     	ds	3
  1468  000333                     _I2C1_Done:
  1469                           	opt stack 0
  1470  000333                     	ds	3
  1471  000336                     _dip:
  1472                           	opt stack 0
  1473  000336                     	ds	2
  1474  000338                     _HMIBoard:
  1475                           	opt stack 0
  1476  000338                     	ds	58
  1477  000372                     _SPI1:
  1478                           	opt stack 0
  1479  000372                     	ds	11
  1480  00037D                     _SPI2:
  1481                           	opt stack 0
  1482  00037D                     	ds	11
  1483  000388                     _DIPSwitch:
  1484                           	opt stack 0
  1485  000388                     	ds	10
  1486  000392                     _TestButton:
  1487                           	opt stack 0
  1488  000392                     	ds	10
  1489  00039C                     _PortG:
  1490                           	opt stack 0
  1491  00039C                     	ds	10
  1492  0003A6                     _PortB:
  1493                           	opt stack 0
  1494  0003A6                     	ds	10
  1495  0003B0                     _PortA:
  1496                           	opt stack 0
  1497  0003B0                     	ds	10
  1498  0003BA                     _PortF:
  1499                           	opt stack 0
  1500  0003BA                     	ds	10
  1501  0003C4                     _I2C2T:
  1502                           	opt stack 0
  1503  0003C4                     	ds	7
  1504  0003CB                     _ADC_AN3:
  1505                           	opt stack 0
  1506  0003CB                     	ds	5
  1507  0003D0                     _ADC_AN2:
  1508                           	opt stack 0
  1509  0003D0                     	ds	5
  1510  0003D5                     _ADC_AN1:
  1511                           	opt stack 0
  1512  0003D5                     	ds	5
  1513  0003DA                     _ADC_AN0:
  1514                           	opt stack 0
  1515  0003DA                     	ds	5
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           postdec1	equ	0xFE5
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           
  1526                           	psect	dataBANK3
  1527  0003DF                     __pdataBANK3:
  1528                           	opt stack 0
  1529  0003DF                     Console_Render@F6956:
  1530                           	opt stack 0
  1531  0003DF                     	ds	4
  1532  0003E3                     _gLineSize:
  1533                           	opt stack 0
  1534  0003E3                     	ds	4
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1h	equ	0xFE2
  1543                           fsr1l	equ	0xFE1
  1544                           
  1545                           	psect	bssBANK4
  1546  000400                     __pbssBANK4:
  1547                           	opt stack 0
  1548  000400                     _iRScriptStack:
  1549                           	opt stack 0
  1550  000400                     	ds	100
  1551  000464                     Console_MakeField@Fill:
  1552                           	opt stack 0
  1553  000464                     	ds	70
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	bssBIGRAM
  1565  0004AA                     __pbssBIGRAM:
  1566                           	opt stack 0
  1567  0004AA                     _lBuffer:
  1568                           	opt stack 0
  1569  0004AA                     	ds	300
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1h	equ	0xFE2
  1578                           fsr1l	equ	0xFE1
  1579                           
  1580                           	psect	cstackBANK3
  1581  0003E7                     __pcstackBANK3:
  1582                           	opt stack 0
  1583  0003E7                     ??_main:
  1584                           
  1585                           ; 1 bytes @ 0x0
  1586  0003E7                     	ds	2
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           postdec1	equ	0xFE5
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597                           	psect	cstackBANK2
  1598  000200                     __pcstackBANK2:
  1599                           	opt stack 0
  1600  000200                     irobot_query_and_update@TXArray:
  1601                           	opt stack 0
  1602                           
  1603                           ; 256 bytes @ 0x0
  1604  000200                     	ds	256
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postdec1	equ	0xFE5
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	cstackBANK1
  1616  000100                     __pcstackBANK1:
  1617                           	opt stack 0
  1618  000100                     ??_Port_SetType:
  1619  000100                     Button_Init@pInput:
  1620                           	opt stack 0
  1621  000100                     irobot_query_and_update@RXArray:
  1622                           	opt stack 0
  1623                           
  1624                           ; 256 bytes @ 0x0
  1625  000100                     	ds	2
  1626  000102                     Button_Init@pThreshold:
  1627                           	opt stack 0
  1628  000102                     Port_Init@pInput:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x2
  1632  000102                     	ds	2
  1633  000104                     Port_Init@pPort:
  1634                           	opt stack 0
  1635  000104                     Button_Init@pInitIO:
  1636                           	opt stack 0
  1637                           
  1638                           ; 3 bytes @ 0x4
  1639  000104                     	ds	1
  1640  000105                     ??_Port_Init:
  1641                           
  1642                           ; 1 bytes @ 0x5
  1643  000105                     	ds	2
  1644  000107                     Port_Init@i:
  1645                           	opt stack 0
  1646  000107                     Button_Init@pGetState:
  1647                           	opt stack 0
  1648                           
  1649                           ; 3 bytes @ 0x7
  1650  000107                     	ds	3
  1651  00010A                     Button_Init@pFunction:
  1652                           	opt stack 0
  1653                           
  1654                           ; 3 bytes @ 0xA
  1655  00010A                     	ds	246
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1h	equ	0xFE2
  1664                           fsr1l	equ	0xFE1
  1665                           
  1666                           	psect	cstackBANK0
  1667  0000BB                     __pcstackBANK0:
  1668                           	opt stack 0
  1669  0000BB                     ??_Console_ClearCursor:
  1670  0000BB                     ??_sort_iRBumpDrop:
  1671  0000BB                     ?_load_iRScriptStack:
  1672                           	opt stack 0
  1673  0000BB                     ??_Console_Init:
  1674  0000BB                     ??_Console_NewLine:
  1675  0000BB                     ??_Console_FormFeed:
  1676  0000BB                     ??_HMI_SetButton:
  1677  0000BB                     ?_GetPortProperties:
  1678                           	opt stack 0
  1679  0000BB                     ?_GetPortPORT:
  1680                           	opt stack 0
  1681  0000BB                     ?_GetPortTRIS:
  1682                           	opt stack 0
  1683  0000BB                     ?_twos_complement_of:
  1684                           	opt stack 0
  1685  0000BB                     ?___wmul:
  1686                           	opt stack 0
  1687  0000BB                     ?___awdiv:
  1688                           	opt stack 0
  1689  0000BB                     ?___lwdiv:
  1690                           	opt stack 0
  1691  0000BB                     ?___lldiv:
  1692                           	opt stack 0
  1693  0000BB                     Mode_Set@pMode:
  1694                           	opt stack 0
  1695  0000BB                     ToSegment@pCHR:
  1696                           	opt stack 0
  1697  0000BB                     HMI_SetBar@pValue:
  1698                           	opt stack 0
  1699  0000BB                     get_packet_size@packetID:
  1700                           	opt stack 0
  1701  0000BB                     eusart_putch@eusartSendChar:
  1702                           	opt stack 0
  1703  0000BB                     Port_GetPin@pInput:
  1704                           	opt stack 0
  1705  0000BB                     Port_GetQuad@pInput:
  1706                           	opt stack 0
  1707  0000BB                     SPI_DisableISR@pInput:
  1708                           	opt stack 0
  1709  0000BB                     SPI_DCS@pInput:
  1710                           	opt stack 0
  1711  0000BB                     SPI_Send@pInput:
  1712                           	opt stack 0
  1713  0000BB                     Byte_SetBit@pInput:
  1714                           	opt stack 0
  1715  0000BB                     Byte_GetBit@pInput:
  1716                           	opt stack 0
  1717  0000BB                     Byte_SetZone@pInput:
  1718                           	opt stack 0
  1719  0000BB                     Byte_GetZone@pInput:
  1720                           	opt stack 0
  1721  0000BB                     Byte_SetByte@pInput:
  1722                           	opt stack 0
  1723  0000BB                     delay_ms@ms:
  1724                           	opt stack 0
  1725  0000BB                     delay_us@us:
  1726                           	opt stack 0
  1727  0000BB                     reverse@input:
  1728                           	opt stack 0
  1729  0000BB                     twos_complement_of@complementValue:
  1730                           	opt stack 0
  1731  0000BB                     ___wmul@multiplier:
  1732                           	opt stack 0
  1733  0000BB                     ___awdiv@dividend:
  1734                           	opt stack 0
  1735  0000BB                     ___lwdiv@dividend:
  1736                           	opt stack 0
  1737  0000BB                     MXK_Queue@pCallback:
  1738                           	opt stack 0
  1739  0000BB                     ___lldiv@dividend:
  1740                           	opt stack 0
  1741                           
  1742                           ; 4 bytes @ 0x0
  1743  0000BB                     	ds	1
  1744  0000BC                     rx_assign@packetIDValue:
  1745                           	opt stack 0
  1746  0000BC                     irobot_song_play@songNumber:
  1747                           	opt stack 0
  1748  0000BC                     HMI_SetSegments@pString:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x1
  1752  0000BC                     	ds	1
  1753  0000BD                     GetPortProperties@pInput:
  1754                           	opt stack 0
  1755  0000BD                     GetPortPORT@pInput:
  1756                           	opt stack 0
  1757  0000BD                     GetPortTRIS@pInput:
  1758                           	opt stack 0
  1759  0000BD                     Port_GetPin@pPin:
  1760                           	opt stack 0
  1761  0000BD                     Port_GetQuad@pQuad:
  1762                           	opt stack 0
  1763  0000BD                     SPI_Send@pData:
  1764                           	opt stack 0
  1765  0000BD                     Byte_SetBit@pBit:
  1766                           	opt stack 0
  1767  0000BD                     Byte_GetBit@pBit:
  1768                           	opt stack 0
  1769  0000BD                     Byte_SetZone@pMax:
  1770                           	opt stack 0
  1771  0000BD                     Byte_GetZone@pMax:
  1772                           	opt stack 0
  1773  0000BD                     Byte_SetByte@pValue:
  1774                           	opt stack 0
  1775  0000BD                     Console_Init@x:
  1776                           	opt stack 0
  1777  0000BD                     Console_FormFeed@x:
  1778                           	opt stack 0
  1779  0000BD                     rx_assign@byteNumber:
  1780                           	opt stack 0
  1781  0000BD                     reverse@length:
  1782                           	opt stack 0
  1783  0000BD                     ___wmul@multiplicand:
  1784                           	opt stack 0
  1785  0000BD                     ___awdiv@divisor:
  1786                           	opt stack 0
  1787  0000BD                     ___lwdiv@divisor:
  1788                           	opt stack 0
  1789  0000BD                     delay_ms@u:
  1790                           	opt stack 0
  1791  0000BD                     delay_us@u:
  1792                           	opt stack 0
  1793  0000BD                     HMI_SetButton@reindex:
  1794                           	opt stack 0
  1795                           
  1796                           ; 4 bytes @ 0x2
  1797  0000BD                     	ds	1
  1798  0000BE                     ??_Port_GetPin:
  1799  0000BE                     ??_Port_GetQuad:
  1800  0000BE                     ??_Byte_GetBit:
  1801  0000BE                     ??_rx_assign:
  1802  0000BE                     LCD_Write@mode:
  1803                           	opt stack 0
  1804  0000BE                     Byte_SetBit@pValue:
  1805                           	opt stack 0
  1806  0000BE                     Byte_SetZone@pChunk:
  1807                           	opt stack 0
  1808  0000BE                     Byte_GetZone@pChunk:
  1809                           	opt stack 0
  1810  0000BE                     Console_Init@y:
  1811                           	opt stack 0
  1812  0000BE                     Console_FormFeed@y:
  1813                           	opt stack 0
  1814                           
  1815                           ; 1 bytes @ 0x3
  1816  0000BE                     	ds	1
  1817  0000BF                     ??_Byte_SetBit:
  1818  0000BF                     ??_Console_IncrementCursor:
  1819  0000BF                     LCD_Write@value:
  1820                           	opt stack 0
  1821  0000BF                     Byte_GetBit@Output:
  1822                           	opt stack 0
  1823  0000BF                     Byte_SetZone@pChunkSize:
  1824                           	opt stack 0
  1825  0000BF                     Byte_GetZone@pChunkSize:
  1826                           	opt stack 0
  1827  0000BF                     reverse@tempVar:
  1828                           	opt stack 0
  1829  0000BF                     ___awdiv@counter:
  1830                           	opt stack 0
  1831  0000BF                     ___lwdiv@counter:
  1832                           	opt stack 0
  1833  0000BF                     HMI_SetSegments@in:
  1834                           	opt stack 0
  1835  0000BF                     ___wmul@product:
  1836                           	opt stack 0
  1837  0000BF                     ___lldiv@divisor:
  1838                           	opt stack 0
  1839                           
  1840                           ; 4 bytes @ 0x4
  1841  0000BF                     	ds	1
  1842  0000C0                     ??_Byte_GetZone:
  1843  0000C0                     ?_Console_MakeField:
  1844                           	opt stack 0
  1845  0000C0                     Set_Addr_Window@ys:
  1846                           	opt stack 0
  1847  0000C0                     Set_Rotation@m:
  1848                           	opt stack 0
  1849  0000C0                     Port_GetPin@Output:
  1850                           	opt stack 0
  1851  0000C0                     Port_GetQuad@Output:
  1852                           	opt stack 0
  1853  0000C0                     Byte_SetZone@pValue:
  1854                           	opt stack 0
  1855  0000C0                     rx_assign@packetID:
  1856                           	opt stack 0
  1857  0000C0                     ___awdiv@sign:
  1858                           	opt stack 0
  1859  0000C0                     LCD_Word_Write@value:
  1860                           	opt stack 0
  1861  0000C0                     reverse@iterator:
  1862                           	opt stack 0
  1863  0000C0                     ___lwdiv@quotient:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x5
  1867  0000C0                     	ds	1
  1868  0000C1                     ?_irobot_query_and_update:
  1869                           	opt stack 0
  1870  0000C1                     ??_Byte_SetZone:
  1871  0000C1                     Set_Addr_Window@xe:
  1872                           	opt stack 0
  1873  0000C1                     Set_Rotation@rotation:
  1874                           	opt stack 0
  1875  0000C1                     Byte_GetZone@MASK:
  1876                           	opt stack 0
  1877  0000C1                     HMI_SetButton@pValue:
  1878                           	opt stack 0
  1879  0000C1                     MXK_BlockSwitchTo@CUR:
  1880                           	opt stack 0
  1881  0000C1                     MXK_SwitchTo@CUR:
  1882                           	opt stack 0
  1883  0000C1                     ___awdiv@quotient:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x6
  1887  0000C1                     	ds	1
  1888  0000C2                     ??_Console_MakeField:
  1889  0000C2                     ?___lwmod:
  1890                           	opt stack 0
  1891  0000C2                     Set_Addr_Window@ye:
  1892                           	opt stack 0
  1893  0000C2                     Byte_GetZone@Offset:
  1894                           	opt stack 0
  1895  0000C2                     HMI_SetButton@v:
  1896                           	opt stack 0
  1897  0000C2                     MXK_BlockSwitchTo@pModule:
  1898                           	opt stack 0
  1899  0000C2                     MXK_SwitchTo@pModule:
  1900                           	opt stack 0
  1901  0000C2                     ___lwmod@dividend:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0x7
  1905  0000C2                     	ds	1
  1906  0000C3                     ??_Console_Tab:
  1907  0000C3                     Set_Addr_Window@xs:
  1908                           	opt stack 0
  1909  0000C3                     Byte_GetZone@Output:
  1910                           	opt stack 0
  1911  0000C3                     ___lldiv@quotient:
  1912                           	opt stack 0
  1913                           
  1914                           ; 4 bytes @ 0x8
  1915  0000C3                     	ds	1
  1916  0000C4                     Byte_SetZone@Offset:
  1917                           	opt stack 0
  1918  0000C4                     LCD_Fill@pColour:
  1919                           	opt stack 0
  1920  0000C4                     LCD_FillRectangle@pColour:
  1921                           	opt stack 0
  1922  0000C4                     Byte_GetPair@pInput:
  1923                           	opt stack 0
  1924  0000C4                     Console_MakeField@Index:
  1925                           	opt stack 0
  1926  0000C4                     ___lwmod@divisor:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x9
  1930  0000C4                     	ds	1
  1931  0000C5                     ??_load_iRScriptStack:
  1932  0000C5                     Byte_SetZone@MASK:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0xA
  1936  0000C5                     	ds	1
  1937  0000C6                     LCD_Fill@i:
  1938                           	opt stack 0
  1939  0000C6                     Byte_GetPair@pPair:
  1940                           	opt stack 0
  1941  0000C6                     Console_MakeField@pInput:
  1942                           	opt stack 0
  1943  0000C6                     ___lwmod@counter:
  1944                           	opt stack 0
  1945  0000C6                     Byte_SetPair@pInput:
  1946                           	opt stack 0
  1947  0000C6                     Byte_SetQuad@pInput:
  1948                           	opt stack 0
  1949  0000C6                     LCD_FillRectangle@pPoint:
  1950                           	opt stack 0
  1951                           
  1952                           ; 4 bytes @ 0xB
  1953  0000C6                     	ds	1
  1954  0000C7                     LCD_Fill@j:
  1955                           	opt stack 0
  1956  0000C7                     ___lldiv@counter:
  1957                           	opt stack 0
  1958  0000C7                     Word_GetPair@pInput:
  1959                           	opt stack 0
  1960  0000C7                     itos@input:
  1961                           	opt stack 0
  1962  0000C7                     Console_MakeField@Column:
  1963                           	opt stack 0
  1964  0000C7                     load_iRScriptStack@loadByte:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0xC
  1968  0000C7                     	ds	1
  1969  0000C8                     Byte_SetPair@pPair:
  1970                           	opt stack 0
  1971  0000C8                     Byte_SetQuad@pQuad:
  1972                           	opt stack 0
  1973  0000C8                     Console_Tab@t:
  1974                           	opt stack 0
  1975  0000C8                     Timer2_Init@pFrequency:
  1976                           	opt stack 0
  1977                           
  1978                           ; 4 bytes @ 0xD
  1979  0000C8                     	ds	1
  1980  0000C9                     Byte_SetPair@pValue:
  1981                           	opt stack 0
  1982  0000C9                     Byte_SetQuad@pValue:
  1983                           	opt stack 0
  1984  0000C9                     Word_GetPair@pPair:
  1985                           	opt stack 0
  1986  0000C9                     Console_Tab@i:
  1987                           	opt stack 0
  1988  0000C9                     load_iRScriptStack@bytesToLoad:
  1989                           	opt stack 0
  1990  0000C9                     itos@destination:
  1991                           	opt stack 0
  1992  0000C9                     _Console_MakeField$10974:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0xE
  1996  0000C9                     	ds	1
  1997  0000CA                     Console_Tab@c:
  1998                           	opt stack 0
  1999  0000CA                     load_iRScriptStack@i:
  2000                           	opt stack 0
  2001  0000CA                     Port_SetPin@pInput:
  2002                           	opt stack 0
  2003  0000CA                     Port_Set@pInput:
  2004                           	opt stack 0
  2005  0000CA                     SPI_MinSpeed@pInput:
  2006                           	opt stack 0
  2007  0000CA                     SPI_MaxSpeed@pInput:
  2008                           	opt stack 0
  2009  0000CA                     Word_SetPair@pInput:
  2010                           	opt stack 0
  2011  0000CA                     PortProperty_Valid@pInput:
  2012                           	opt stack 0
  2013  0000CA                     LCD_FillRectangle@pSize:
  2014                           	opt stack 0
  2015                           
  2016                           ; 4 bytes @ 0xF
  2017  0000CA                     	ds	1
  2018  0000CB                     ??_irobot_query_and_update:
  2019  0000CB                     ??_Console_PrintChar:
  2020  0000CB                     Console_MakeField@x:
  2021                           	opt stack 0
  2022  0000CB                     irobot_leds@LEDBit:
  2023                           	opt stack 0
  2024  0000CB                     itos@Data:
  2025                           	opt stack 0
  2026  0000CB                     irobot_move@moveSpeed:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x10
  2030  0000CB                     	ds	1
  2031  0000CC                     ??_Timer2_Init:
  2032  0000CC                     Port_SetPin@pPin:
  2033                           	opt stack 0
  2034  0000CC                     Port_Set@pValue:
  2035                           	opt stack 0
  2036  0000CC                     Word_SetPair@pPair:
  2037                           	opt stack 0
  2038  0000CC                     PortProperty_Valid@pPinDrive:
  2039                           	opt stack 0
  2040  0000CC                     Console_MakeField@y:
  2041                           	opt stack 0
  2042  0000CC                     irobot_leds@powerColour:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0x11
  2046  0000CC                     	ds	1
  2047  0000CD                     ??_Port_Set:
  2048  0000CD                     Port_SetPin@pValue:
  2049                           	opt stack 0
  2050  0000CD                     Word_SetPair@pValue:
  2051                           	opt stack 0
  2052  0000CD                     PortProperty_Valid@pPin:
  2053                           	opt stack 0
  2054  0000CD                     irobot_leds@powerLuminosity:
  2055                           	opt stack 0
  2056  0000CD                     LCD_DrawField@pField:
  2057                           	opt stack 0
  2058  0000CD                     itos@Length:
  2059                           	opt stack 0
  2060  0000CD                     irobot_move@moveTurnRadius:
  2061                           	opt stack 0
  2062  0000CD                     Timer2_Init@RDIV:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0x12
  2066  0000CD                     	ds	1
  2067  0000CE                     ??_PortProperty_Valid:
  2068  0000CE                     ??_LCD_FillRectangle:
  2069  0000CE                     Port_SetPin@Type:
  2070                           	opt stack 0
  2071  0000CE                     Console_PrintChar@pInput:
  2072                           	opt stack 0
  2073  0000CE                     irobot_leds@isScript:
  2074                           	opt stack 0
  2075                           
  2076                           ; 1 bytes @ 0x13
  2077  0000CE                     	ds	1
  2078  0000CF                     ??_irobot_move:
  2079  0000CF                     LED_Set@pValue:
  2080                           	opt stack 0
  2081  0000CF                     putch@c:
  2082                           	opt stack 0
  2083  0000CF                     irobot_led_power_on@powerOnColour:
  2084                           	opt stack 0
  2085  0000CF                     Port_TogglePin@pInput:
  2086                           	opt stack 0
  2087  0000CF                     itos@Out:
  2088                           	opt stack 0
  2089  0000CF                     LCD_DrawField@pPoint:
  2090                           	opt stack 0
  2091                           
  2092                           ; 4 bytes @ 0x14
  2093  0000CF                     	ds	1
  2094  0000D0                     ?_printf:
  2095                           	opt stack 0
  2096  0000D0                     LCD_FillRectangle@i:
  2097                           	opt stack 0
  2098  0000D0                     LED_Set@pLED:
  2099                           	opt stack 0
  2100  0000D0                     irobot_query_and_update@packetIDs:
  2101                           	opt stack 0
  2102  0000D0                     printf@f:
  2103                           	opt stack 0
  2104  0000D0                     PortProperty_Valid@Errors:
  2105                           	opt stack 0
  2106                           
  2107                           ; 16 bytes @ 0x15
  2108  0000D0                     	ds	1
  2109  0000D1                     LCD_FillRectangle@j:
  2110                           	opt stack 0
  2111  0000D1                     Port_TogglePin@pPin:
  2112                           	opt stack 0
  2113  0000D1                     HMI_SetNumber@pInput:
  2114                           	opt stack 0
  2115  0000D1                     Timer2_Init@pCPUClock:
  2116                           	opt stack 0
  2117                           
  2118                           ; 4 bytes @ 0x16
  2119  0000D1                     	ds	1
  2120  0000D2                     Port_TogglePin@Value:
  2121                           	opt stack 0
  2122  0000D2                     irobot_query_and_update@streamSize:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x17
  2126  0000D2                     	ds	1
  2127  0000D3                     LED_Toggle@pLED:
  2128                           	opt stack 0
  2129  0000D3                     irobot_query_and_update@numberOfPacketRequests:
  2130                           	opt stack 0
  2131  0000D3                     irobot_move@isScript:
  2132                           	opt stack 0
  2133  0000D3                     LCD_DrawField@pSize:
  2134                           	opt stack 0
  2135                           
  2136                           ; 4 bytes @ 0x18
  2137  0000D3                     	ds	1
  2138  0000D4                     Event_DIPSwitch@pState:
  2139                           	opt stack 0
  2140  0000D4                     Event_TestButton@pState:
  2141                           	opt stack 0
  2142  0000D4                     irobot_query_and_update@packetVariable:
  2143                           	opt stack 0
  2144  0000D4                     irobot_stop_motion@isScript:
  2145                           	opt stack 0
  2146  0000D4                     irobot_rotate@rotateAngle:
  2147                           	opt stack 0
  2148  0000D4                     irobot_move_straight@straightSpeed:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x19
  2152  0000D4                     	ds	1
  2153  0000D5                     Event_DIPSwitch@Bar:
  2154                           	opt stack 0
  2155  0000D5                     irobot_query_and_update@j:
  2156                           	opt stack 0
  2157  0000D5                     Timer2_Init@DIVIDE:
  2158                           	opt stack 0
  2159                           
  2160                           ; 4 bytes @ 0x1A
  2161  0000D5                     	ds	1
  2162  0000D6                     irobot_query_and_update@startIndex:
  2163                           	opt stack 0
  2164  0000D6                     Button_Poll@pButton:
  2165                           	opt stack 0
  2166  0000D6                     irobot_rotate@rotateSpeed:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0x1B
  2170  0000D6                     	ds	1
  2171  0000D7                     ??_LCD_DrawField:
  2172  0000D7                     irobot_query_and_update@i:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x1C
  2176  0000D7                     	ds	1
  2177  0000D8                     ??_printf:
  2178  0000D8                     Button_Poll@pIncrement:
  2179                           	opt stack 0
  2180  0000D8                     irobot_rotate@isScript:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x1D
  2184  0000D8                     	ds	1
  2185  0000D9                     ??_Button_Poll:
  2186  0000D9                     printf@prec:
  2187                           	opt stack 0
  2188  0000D9                     LCD_DrawField@count:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x1E
  2192  0000D9                     	ds	1
  2193  0000DA                     printf@flag:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x1F
  2197  0000DA                     	ds	1
  2198  0000DB                     LCD_DrawField@xmax:
  2199                           	opt stack 0
  2200  0000DB                     printf@ap:
  2201                           	opt stack 0
  2202                           
  2203                           ; 2 bytes @ 0x20
  2204  0000DB                     	ds	1
  2205  0000DC                     LCD_DrawField@ymax:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x21
  2209  0000DC                     	ds	1
  2210  0000DD                     LCD_DrawField@i:
  2211                           	opt stack 0
  2212  0000DD                     Port_Set@TypeRequired:
  2213                           	opt stack 0
  2214  0000DD                     printf@val:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x22
  2218  0000DD                     	ds	1
  2219  0000DE                     ??_Console_Render:
  2220  0000DE                     Button_Poll@Pin:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x23
  2224  0000DE                     	ds	1
  2225  0000DF                     printf@c:
  2226                           	opt stack 0
  2227  0000DF                     Port_Set@TypeActual:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x24
  2231  0000DF                     	ds	1
  2232  0000E0                     PortProperty_Valid@Pair:
  2233                           	opt stack 0
  2234  0000E0                     Console_Render@temp:
  2235                           	opt stack 0
  2236                           
  2237                           ; 1 bytes @ 0x25
  2238  0000E0                     	ds	1
  2239  0000E1                     Port_Set@Type:
  2240                           	opt stack 0
  2241  0000E1                     Port_CheckPairType@pInput:
  2242                           	opt stack 0
  2243  0000E1                     Port_SetPinType@pInput:
  2244                           	opt stack 0
  2245  0000E1                     Console_Render@lCursor:
  2246                           	opt stack 0
  2247                           
  2248                           ; 4 bytes @ 0x26
  2249  0000E1                     	ds	2
  2250  0000E3                     Port_CheckPairType@pPair:
  2251                           	opt stack 0
  2252  0000E3                     Port_SetPinType@pPin:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x28
  2256  0000E3                     	ds	1
  2257  0000E4                     Port_CheckPairType@pDrive:
  2258                           	opt stack 0
  2259  0000E4                     Port_SetPinType@pType:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x29
  2263  0000E4                     	ds	1
  2264  0000E5                     Port_CheckPairType@Pin1:
  2265                           	opt stack 0
  2266  0000E5                     Port_SetPinType@Output:
  2267                           	opt stack 0
  2268  0000E5                     Console_Render@x:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x2A
  2272  0000E5                     	ds	1
  2273  0000E6                     Port_CheckPairType@Pin2:
  2274                           	opt stack 0
  2275  0000E6                     Console_Render@y:
  2276                           	opt stack 0
  2277  0000E6                     Port_SetPinType@Props:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x2B
  2281  0000E6                     	ds	1
  2282  0000E7                     Port_CheckPairType@Output:
  2283                           	opt stack 0
  2284  0000E7                     mode2@dist:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x2C
  2288  0000E7                     	ds	1
  2289  0000E8                     LED_Init@pLED:
  2290                           	opt stack 0
  2291  0000E8                     Port_CheckPairType@Props:
  2292                           	opt stack 0
  2293  0000E8                     SPI_Init@pClock:
  2294                           	opt stack 0
  2295                           
  2296                           ; 4 bytes @ 0x2D
  2297  0000E8                     	ds	2
  2298  0000EA                     Port_CheckQuadType@pInput:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x2F
  2302  0000EA                     	ds	2
  2303  0000EC                     Port_CheckQuadType@pQuad:
  2304                           	opt stack 0
  2305  0000EC                     SPI_Init@pChannel:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x31
  2309  0000EC                     	ds	1
  2310  0000ED                     Port_CheckQuadType@pDrive:
  2311                           	opt stack 0
  2312  0000ED                     SPI_Init@pMode:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x32
  2316  0000ED                     	ds	1
  2317  0000EE                     Port_CheckQuadType@Pair1:
  2318                           	opt stack 0
  2319  0000EE                     SPI_Init@pInput:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x33
  2323  0000EE                     	ds	1
  2324  0000EF                     Port_CheckQuadType@Pair2:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x34
  2328  0000EF                     	ds	1
  2329  0000F0                     ??_LCD_Init:
  2330  0000F0                     Port_CheckQuadType@Output:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x35
  2334  0000F0                     	ds	1
  2335  0000F1                     Port_CheckPortType@pInput:
  2336                           	opt stack 0
  2337  0000F1                     Port_SetQuadType@pInput:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x36
  2341  0000F1                     	ds	1
  2342  0000F2                     LCD_Init@i:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x37
  2346  0000F2                     	ds	1
  2347  0000F3                     Port_CheckPortType@pDrive:
  2348                           	opt stack 0
  2349  0000F3                     Port_SetQuadType@pQuad:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x38
  2353  0000F3                     	ds	1
  2354  0000F4                     Port_CheckPortType@Output:
  2355                           	opt stack 0
  2356  0000F4                     Port_SetQuadType@pType:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x39
  2360  0000F4                     	ds	1
  2361  0000F5                     Port_SetQuadType@Output:
  2362                           	opt stack 0
  2363  0000F5                     Port_SetType@pInput:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x3A
  2367  0000F5                     	ds	1
  2368  0000F6                     HMI_Init@in:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x3B
  2372  0000F6                     	ds	1
  2373  0000F7                     Port_SetType@pType:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x3C
  2377  0000F7                     	ds	1
  2378  0000F8                     Port_SetType@Output:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x3D
  2382  0000F8                     	ds	1
  2383  0000F9                     tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postdec1	equ	0xFE5
  2390                           fsr1h	equ	0xFE2
  2391                           fsr1l	equ	0xFE1
  2392                           
  2393                           ; 1 bytes @ 0x3E
  2394                           
  2395                           	psect	cstackCOMRAM
  2396  000001                     __pcstackCOMRAM:
  2397                           	opt stack 0
  2398  000001                     i2Byte_SetBit@pInput:
  2399                           	opt stack 0
  2400  000001                     i2Byte_GetZone@pInput:
  2401                           	opt stack 0
  2402  000001                     i2delay_us@us:
  2403                           	opt stack 0
  2404  000001                     i2MXK_Queue@pCallback:
  2405                           	opt stack 0
  2406                           
  2407                           ; 3 bytes @ 0x0
  2408  000001                     	ds	2
  2409  000003                     i2Byte_SetBit@pBit:
  2410                           	opt stack 0
  2411  000003                     i2Byte_GetZone@pMax:
  2412                           	opt stack 0
  2413  000003                     i2delay_us@u:
  2414                           	opt stack 0
  2415                           
  2416                           ; 4 bytes @ 0x2
  2417  000003                     	ds	1
  2418  000004                     i2Byte_SetBit@pValue:
  2419                           	opt stack 0
  2420  000004                     i2Byte_GetZone@pChunk:
  2421                           	opt stack 0
  2422                           
  2423                           ; 1 bytes @ 0x3
  2424  000004                     	ds	1
  2425  000005                     ??i2_Byte_SetBit:
  2426  000005                     i2Byte_GetZone@pChunkSize:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x4
  2430  000005                     	ds	1
  2431  000006                     ??i2_Byte_GetZone:
  2432                           
  2433                           ; 1 bytes @ 0x5
  2434  000006                     	ds	1
  2435  000007                     i2Byte_GetZone@MASK:
  2436                           	opt stack 0
  2437  000007                     i2MXK_SwitchTo@CUR:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x6
  2441  000007                     	ds	1
  2442  000008                     i2Byte_GetZone@Offset:
  2443                           	opt stack 0
  2444  000008                     i2MXK_SwitchTo@pModule:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x7
  2448  000008                     	ds	1
  2449  000009                     i2Byte_GetZone@Output:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0x8
  2453  000009                     	ds	1
  2454  00000A                     i2Byte_GetPair@pInput:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x9
  2458  00000A                     	ds	2
  2459  00000C                     i2Byte_GetPair@pPair:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0xB
  2463  00000C                     	ds	1
  2464  00000D                     i2Word_GetPair@pInput:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0xC
  2468  00000D                     	ds	2
  2469  00000F                     i2Word_GetPair@pPair:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0xE
  2473  00000F                     	ds	1
  2474  000010                     i2Port_SetPin@pInput:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0xF
  2478  000010                     	ds	2
  2479  000012                     i2Port_SetPin@pPin:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x11
  2483  000012                     	ds	1
  2484  000013                     i2Port_SetPin@pValue:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x12
  2488  000013                     	ds	1
  2489  000014                     i2Port_SetPin@Type:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x13
  2493  000014                     	ds	1
  2494  000015                     
  2495                           ; 1 bytes @ 0x14
  2496  000015                     	ds	2
  2497  000017                     ??_ISR_Function:
  2498                           
  2499                           ; 1 bytes @ 0x16
  2500  000017                     	ds	18
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           postinc0	equ	0xFEE
  2506                           wreg	equ	0xFE8
  2507                           postdec1	equ	0xFE5
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           
  2511 ;;
  2512 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2513 ;;
  2514 ;; *************** function _main *****************
  2515 ;; Defined at:
  2516 ;;		line 160 in file "main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;Total ram usage:        2 bytes
  2535 ;; Hardware stack levels required when called:   18
  2536 ;; This function calls:
  2537 ;;		_init
  2538 ;;		_mode1
  2539 ;;		_mode2
  2540 ;;		_mode3
  2541 ;;		_mode4
  2542 ;; This function is called by:
  2543 ;;		Startup code after reset
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text0
  2548  014070                     __ptext0:
  2549                           	opt stack 0
  2550  014070                     _main:
  2551                           	opt stack 13
  2552                           
  2553                           ;main.c: 161: init();
  2554                           
  2555                           ;incstack = 0
  2556  014070  EC3E  F09B         	call	_init	;wreg free
  2557                           
  2558                           ;main.c: 163: switch (mode) {
  2559                           
  2560                           ;main.c: 162: for(;;) {
  2561  014074  D00B               	goto	l13636
  2562  014076                     
  2563                           ;main.c: 165: mode1();
  2564  014076  EC2E  F0A5         	call	_mode1	;wreg free
  2565                           
  2566                           ;main.c: 166: break;
  2567  01407A  D008               	goto	l13636
  2568  01407C                     
  2569                           ;main.c: 168: mode2();
  2570  01407C  EC6B  F090         	call	_mode2	;wreg free
  2571                           
  2572                           ;main.c: 169: break;
  2573  014080  D005               	goto	l13636
  2574  014082                     
  2575                           ;main.c: 171: mode3();
  2576  014082  EC2C  F0A5         	call	_mode3	;wreg free
  2577                           
  2578                           ;main.c: 172: break;
  2579  014086  D002               	goto	l13636
  2580  014088                     
  2581                           ;main.c: 174: mode4();
  2582  014088  EC02  F00A         	call	_mode4	;wreg free
  2583  01408C                     l13636:
  2584                           
  2585                           ;main.c: 176: }
  2586  01408C  C075  F3E7         	movff	_mode,??_main
  2587  014090  C076  F3E8         	movff	_mode+1,??_main+1
  2588                           
  2589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2590                           ; Switch size 1, requested type "space"
  2591                           ; Number of cases is 1, Range of values is 0 to 0
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte            4     3 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  014094  0103               	movlb	3	; () banked
  2597  014096  51E8               	movf	(??_main+1)& (0+255),w,b
  2598  014098  0A00               	xorlw	0	; case 0
  2599  01409A  A4D8               	btfss	status,2,c
  2600  01409C  D7F7               	goto	l13636
  2601                           
  2602                           ; BSR set to: 3
  2603                           ; Switch size 1, requested type "space"
  2604                           ; Number of cases is 4, Range of values is 1 to 4
  2605                           ; switch strategies available:
  2606                           ; Name         Instructions Cycles
  2607                           ; simple_byte           13     7 (average)
  2608                           ;	Chosen strategy is simple_byte
  2609  01409E  0103               	movlb	3	; () banked
  2610  0140A0  51E7               	movf	??_main& (0+255),w,b
  2611  0140A2  0A01               	xorlw	1	; case 1
  2612  0140A4  B4D8               	btfsc	status,2,c
  2613  0140A6  D7E7               	goto	l2308
  2614  0140A8  0A03               	xorlw	3	; case 2
  2615  0140AA  B4D8               	btfsc	status,2,c
  2616  0140AC  D7E7               	goto	l2310
  2617  0140AE  0A01               	xorlw	1	; case 3
  2618  0140B0  B4D8               	btfsc	status,2,c
  2619  0140B2  D7E7               	goto	l2311
  2620  0140B4  0A07               	xorlw	7	; case 4
  2621  0140B6  B4D8               	btfsc	status,2,c
  2622  0140B8  D7E7               	goto	l2312
  2623                           
  2624                           ; BSR set to: 3
  2625                           ;main.c: 178: }
  2626  0140BA  D7E8               	goto	l13636
  2627  0140BC                     __end_of_main:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1h	equ	0xFE2
  2637                           fsr1l	equ	0xFE1
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _mode4 *****************
  2641 ;; Defined at:
  2642 ;;		line 155 in file "main.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		None
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;Total ram usage:        0 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    7
  2663 ;; This function calls:
  2664 ;;		Nothing
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text1
  2671  001404                     __ptext1:
  2672                           	opt stack 0
  2673  001404                     _mode4:
  2674                           	opt stack 23
  2675                           
  2676                           ; BSR set to: 3
  2677                           ;incstack = 0
  2678  001404  0012               	return		;funcret
  2679  001406                     __end_of_mode4:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1h	equ	0xFE2
  2689                           fsr1l	equ	0xFE1
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _mode3 *****************
  2693 ;; Defined at:
  2694 ;;		line 150 in file "main.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		None
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    7
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_main
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text2
  2723  014A58                     __ptext2:
  2724                           	opt stack 0
  2725  014A58                     _mode3:
  2726                           	opt stack 23
  2727                           
  2728                           ;incstack = 0
  2729  014A58  0012               	return		;funcret
  2730  014A5A                     __end_of_mode3:
  2731                           	opt stack 0
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           postdec1	equ	0xFE5
  2739                           fsr1h	equ	0xFE2
  2740                           fsr1l	equ	0xFE1
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _mode2 *****************
  2744 ;; Defined at:
  2745 ;;		line 113 in file "main.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  dist            2   44[BANK0 ] int 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;Total ram usage:        2 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:   16
  2766 ;; This function calls:
  2767 ;;		_Console_Render
  2768 ;;		_HMI_DIPSwitch
  2769 ;;		_HMI_DownSwitch
  2770 ;;		_HMI_LeftSwitch
  2771 ;;		_HMI_Poll
  2772 ;;		_HMI_RightSwitch
  2773 ;;		_HMI_UpSwitch
  2774 ;;		_MXK_DIPSwitch
  2775 ;;		_MXK_Dequeue
  2776 ;;		_MXK_Release
  2777 ;;		_MXK_SwitchTo
  2778 ;;		_MXK_TestButton
  2779 ;;		_irobot_move_straight
  2780 ;;		_irobot_song_play
  2781 ;;		_irobot_stop_motion
  2782 ;;		_printf
  2783 ;;		_update_angle
  2784 ;;		_update_bump_and_cliff
  2785 ;;		_update_distance
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text3
  2792  0120D6                     __ptext3:
  2793                           	opt stack 0
  2794  0120D6                     _mode2:
  2795                           	opt stack 14
  2796                           
  2797                           ;main.c: 114: update_bump_and_cliff();
  2798                           
  2799                           ;incstack = 0
  2800  0120D6  EC58  F0A2         	call	_update_bump_and_cliff	;wreg free
  2801                           
  2802                           ;main.c: 115: update_distance();
  2803  0120DA  ECB2  F0A4         	call	_update_distance	;wreg free
  2804                           
  2805                           ;main.c: 116: update_angle();
  2806  0120DE  ECBB  F0A4         	call	_update_angle	;wreg free
  2807                           
  2808                           ;main.c: 118: angleTotal += iRAngle;
  2809  0120E2  0100               	movlb	0	; () banked
  2810  0120E4  517B               	movf	_iRAngle& (0+255),w,b
  2811  0120E6  0100               	movlb	0	; () banked
  2812  0120E8  2777               	addwf	_angleTotal& (0+255),f,b
  2813  0120EA  0100               	movlb	0	; () banked
  2814  0120EC  517C               	movf	(_iRAngle+1)& (0+255),w,b
  2815  0120EE  0100               	movlb	0	; () banked
  2816  0120F0  2378               	addwfc	(_angleTotal+1)& (0+255),f,b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 120: if (iRBumpLeft || iRBumpRight) {
  2820  0120F2  0100               	movlb	0	; () banked
  2821  0120F4  518D               	movf	_iRBumpLeft& (0+255),w,b
  2822  0120F6  A4D8               	btfss	status,2,c
  2823  0120F8  D004               	goto	u9610
  2824                           
  2825                           ; BSR set to: 0
  2826  0120FA  0100               	movlb	0	; () banked
  2827  0120FC  518E               	movf	_iRBumpRight& (0+255),w,b
  2828  0120FE  B4D8               	btfsc	status,2,c
  2829  012100  D006               	goto	l2285
  2830  012102                     u9610:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 121: irobot_song_play(0);
  2834                           
  2835                           ; BSR set to: 0
  2836  012102  0E00               	movlw	0
  2837  012104  ECA8  F0A4         	call	_irobot_song_play
  2838                           
  2839                           ;main.c: 122: irobot_stop_motion(0);
  2840  012108  0E00               	movlw	0
  2841  01210A  ECF1  F0A0         	call	_irobot_stop_motion
  2842  01210E                     l2285:
  2843                           
  2844                           ;main.c: 123: }
  2845                           ;main.c: 124: if (angleTotal > 90) {
  2846  01210E  0100               	movlb	0	; () banked
  2847  012110  BF78               	btfsc	(_angleTotal+1)& (0+255),7,b
  2848  012112  D00B               	goto	l2288
  2849  012114  0100               	movlb	0	; () banked
  2850  012116  5178               	movf	(_angleTotal+1)& (0+255),w,b
  2851  012118  E105               	bnz	u9620
  2852  01211A  0E5B               	movlw	91
  2853  01211C  0100               	movlb	0	; () banked
  2854  01211E  5D77               	subwf	_angleTotal& (0+255),w,b
  2855  012120  A0D8               	btfss	status,0,c
  2856  012122  D003               	goto	l2288
  2857  012124                     u9620:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 125: irobot_stop_motion(0);
  2861  012124  0E00               	movlw	0
  2862  012126  ECF1  F0A0         	call	_irobot_stop_motion
  2863  01212A                     l2288:
  2864                           
  2865                           ;main.c: 126: }
  2866                           ;main.c: 127: HMI_Poll();
  2867  01212A  ECB5  F09B         	call	_HMI_Poll	;wreg free
  2868                           
  2869                           ;main.c: 128: if (MXK_SwitchTo(eMXK_HMI)) {
  2870  01212E  0E01               	movlw	1
  2871  012130  EC7C  F0A1         	call	_MXK_SwitchTo
  2872  012134  0900               	iorlw	0
  2873  012136  B4D8               	btfsc	status,2,c
  2874  012138  0012               	return	
  2875                           
  2876                           ;main.c: 129: printf("%c", (char)35);
  2877  01213A  0EFB               	movlw	low STR_1
  2878  01213C  0100               	movlb	0	; () banked
  2879  01213E  6FD0               	movwf	printf@f& (0+255),b
  2880  012140  0EFF               	movlw	high STR_1
  2881  012142  0100               	movlb	0	; () banked
  2882  012144  6FD1               	movwf	(printf@f+1)& (0+255),b
  2883  012146  0E00               	movlw	0
  2884  012148  0100               	movlb	0	; () banked
  2885  01214A  6FD3               	movwf	(?_printf+3)& (0+255),b
  2886  01214C  0E23               	movlw	35
  2887  01214E  6FD2               	movwf	(?_printf+2)& (0+255),b
  2888  012150  EC73  F089         	call	_printf	;wreg free
  2889                           
  2890                           ;main.c: 130: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  2891  012154  0EBF               	movlw	low STR_2
  2892  012156  0100               	movlb	0	; () banked
  2893  012158  6FD0               	movwf	printf@f& (0+255),b
  2894  01215A  0EFF               	movlw	high STR_2
  2895  01215C  0100               	movlb	0	; () banked
  2896  01215E  6FD1               	movwf	(printf@f+1)& (0+255),b
  2897  012160  C079  F0D2         	movff	_distanceTotal,?_printf+2
  2898  012164  C07A  F0D3         	movff	_distanceTotal+1,?_printf+3
  2899  012168  C08D  F0D4         	movff	_iRBumpLeft,?_printf+4
  2900  01216C  0100               	movlb	0	; () banked
  2901  01216E  6BD5               	clrf	(?_printf+5)& (0+255),b
  2902  012170  C08E  F0D6         	movff	_iRBumpRight,?_printf+6
  2903  012174  0100               	movlb	0	; () banked
  2904  012176  6BD7               	clrf	(?_printf+7)& (0+255),b
  2905  012178  EC73  F089         	call	_printf	;wreg free
  2906                           
  2907                           ;main.c: 131: Console_Render();
  2908  01217C  EC6E  F087         	call	_Console_Render	;wreg free
  2909                           
  2910                           ;main.c: 132: if(HMIBoard.mUp.mGetState()) {
  2911  012180  EE23  F05B         	lfsr	2,_HMIBoard+35
  2912  012184  D801               	call	u9648
  2913  012186  D00A               	goto	u9649
  2914  012188                     u9648:
  2915  012188  0005               	push	
  2916  01218A  6EFA               	movwf	pclath,c
  2917  01218C  50DE               	movf	postinc2,w,c
  2918  01218E  6EFD               	movwf	tosl,c
  2919  012190  50DE               	movf	postinc2,w,c
  2920  012192  6EFE               	movwf	tosh,c
  2921  012194  50DE               	movf	postinc2,w,c
  2922  012196  6EFF               	movwf	tosu,c
  2923  012198  50FA               	movf	pclath,w,c
  2924  01219A  0012               	return		;indir
  2925  01219C                     u9649:
  2926  01219C  0900               	iorlw	0
  2927  01219E  B4D8               	btfsc	status,2,c
  2928  0121A0  D040               	goto	l2290
  2929                           
  2930                           ;main.c: 133: int dist = 0;
  2931  0121A2  0E00               	movlw	0
  2932  0121A4  0100               	movlb	0	; () banked
  2933  0121A6  6FE8               	movwf	(mode2@dist+1)& (0+255),b
  2934  0121A8  0E00               	movlw	0
  2935  0121AA  6FE7               	movwf	mode2@dist& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 134: irobot_move_straight(200);
  2939  0121AC  0E00               	movlw	0
  2940  0121AE  0100               	movlb	0	; () banked
  2941  0121B0  6FD5               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  2942  0121B2  0EC8               	movlw	200
  2943  0121B4  6FD4               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  2944  0121B6  EC48  F0A4         	call	_irobot_move_straight	;wreg free
  2945                           
  2946                           ;main.c: 135: while(dist<5000) {
  2947  0121BA  D025               	goto	l2291
  2948  0121BC                     
  2949                           ;main.c: 136: update_distance();
  2950  0121BC  ECB2  F0A4         	call	_update_distance	;wreg free
  2951                           
  2952                           ;main.c: 137: dist += iRDistance;
  2953  0121C0  0100               	movlb	0	; () banked
  2954  0121C2  517D               	movf	_iRDistance& (0+255),w,b
  2955  0121C4  0100               	movlb	0	; () banked
  2956  0121C6  27E7               	addwf	mode2@dist& (0+255),f,b
  2957  0121C8  0100               	movlb	0	; () banked
  2958  0121CA  517E               	movf	(_iRDistance+1)& (0+255),w,b
  2959  0121CC  0100               	movlb	0	; () banked
  2960  0121CE  23E8               	addwfc	(mode2@dist+1)& (0+255),f,b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 138: printf("%c",(char)35);
  2964  0121D0  0EFB               	movlw	low STR_1
  2965  0121D2  0100               	movlb	0	; () banked
  2966  0121D4  6FD0               	movwf	printf@f& (0+255),b
  2967  0121D6  0EFF               	movlw	high STR_1
  2968  0121D8  0100               	movlb	0	; () banked
  2969  0121DA  6FD1               	movwf	(printf@f+1)& (0+255),b
  2970  0121DC  0E00               	movlw	0
  2971  0121DE  0100               	movlb	0	; () banked
  2972  0121E0  6FD3               	movwf	(?_printf+3)& (0+255),b
  2973  0121E2  0E23               	movlw	35
  2974  0121E4  6FD2               	movwf	(?_printf+2)& (0+255),b
  2975  0121E6  EC73  F089         	call	_printf	;wreg free
  2976                           
  2977                           ;main.c: 139: printf("Distance: %d\n",dist);
  2978  0121EA  0EED               	movlw	low STR_4
  2979  0121EC  0100               	movlb	0	; () banked
  2980  0121EE  6FD0               	movwf	printf@f& (0+255),b
  2981  0121F0  0EFF               	movlw	high STR_4
  2982  0121F2  0100               	movlb	0	; () banked
  2983  0121F4  6FD1               	movwf	(printf@f+1)& (0+255),b
  2984  0121F6  C0E7  F0D2         	movff	mode2@dist,?_printf+2
  2985  0121FA  C0E8  F0D3         	movff	mode2@dist+1,?_printf+3
  2986  0121FE  EC73  F089         	call	_printf	;wreg free
  2987                           
  2988                           ;main.c: 140: Console_Render();
  2989  012202  EC6E  F087         	call	_Console_Render	;wreg free
  2990  012206                     l2291:
  2991  012206  0100               	movlb	0	; () banked
  2992  012208  BFE8               	btfsc	(mode2@dist+1)& (0+255),7,b
  2993  01220A  D7D8               	goto	l2292
  2994  01220C  0E88               	movlw	136
  2995  01220E  0100               	movlb	0	; () banked
  2996  012210  5DE7               	subwf	mode2@dist& (0+255),w,b
  2997  012212  0E13               	movlw	19
  2998  012214  0100               	movlb	0	; () banked
  2999  012216  59E8               	subwfb	(mode2@dist+1)& (0+255),w,b
  3000  012218  A0D8               	btfss	status,0,c
  3001  01221A  D7D0               	goto	l2292
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 141: }
  3005                           ;main.c: 142: irobot_stop_motion(0);
  3006                           
  3007                           ; BSR set to: 0
  3008  01221C  0E00               	movlw	0
  3009  01221E  ECF1  F0A0         	call	_irobot_stop_motion
  3010  012222                     l2290:
  3011                           
  3012                           ;main.c: 143: }
  3013                           ;main.c: 144: if (MXK_Release())
  3014  012222  EC2D  F0A4         	call	_MXK_Release	;wreg free
  3015  012226  0900               	iorlw	0
  3016  012228  B4D8               	btfsc	status,2,c
  3017  01222A  0012               	return	
  3018                           
  3019                           ;main.c: 145: MXK_Dequeue();
  3020  01222C  ECDD  F0A1         	call	_MXK_Dequeue	;wreg free
  3021  012230  0012               	return	
  3022  012232                     __end_of_mode2:
  3023                           	opt stack 0
  3024                           tosu	equ	0xFFF
  3025                           tosh	equ	0xFFE
  3026                           tosl	equ	0xFFD
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           postinc2	equ	0xFDE
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _update_distance *****************
  3041 ;; Defined at:
  3042 ;;		line 315 in file "Library/iRobotSerial.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        0 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:   10
  3063 ;; This function calls:
  3064 ;;		_irobot_query_and_update
  3065 ;; This function is called by:
  3066 ;;		_mode2
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text4
  3071  014964                     __ptext4:
  3072                           	opt stack 0
  3073  014964                     _update_distance:
  3074                           	opt stack 19
  3075                           
  3076                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  3077                           
  3078                           ;incstack = 0
  3079  014964  0E00               	movlw	0
  3080  014966  0100               	movlb	0	; () banked
  3081  014968  6FC2               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3082  01496A  0E13               	movlw	19
  3083  01496C  6FC1               	movwf	?_irobot_query_and_update& (0+255),b
  3084  01496E  0E01               	movlw	1
  3085  014970  ECCC  F08C         	call	_irobot_query_and_update
  3086  014974  0012               	return		;funcret
  3087  014976                     __end_of_update_distance:
  3088                           	opt stack 0
  3089                           tosu	equ	0xFFF
  3090                           tosh	equ	0xFFE
  3091                           tosl	equ	0xFFD
  3092                           pclath	equ	0xFFA
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           postdec1	equ	0xFE5
  3100                           fsr1h	equ	0xFE2
  3101                           fsr1l	equ	0xFE1
  3102                           postinc2	equ	0xFDE
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _update_bump_and_cliff *****************
  3106 ;; Defined at:
  3107 ;;		line 308 in file "Library/iRobotSerial.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   10
  3128 ;; This function calls:
  3129 ;;		_irobot_query_and_update
  3130 ;; This function is called by:
  3131 ;;		_mode2
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text5
  3136  0144B0                     __ptext5:
  3137                           	opt stack 0
  3138  0144B0                     _update_bump_and_cliff:
  3139                           	opt stack 19
  3140                           
  3141                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  3142                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  3143                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  3144                           
  3145                           ;incstack = 0
  3146  0144B0  0E00               	movlw	0
  3147  0144B2  0100               	movlb	0	; () banked
  3148  0144B4  6FC2               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3149  0144B6  0E07               	movlw	7
  3150  0144B8  6FC1               	movwf	?_irobot_query_and_update& (0+255),b
  3151  0144BA  0E00               	movlw	0
  3152  0144BC  0100               	movlb	0	; () banked
  3153  0144BE  6FC4               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  3154  0144C0  0E09               	movlw	9
  3155  0144C2  6FC3               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  3156  0144C4  0E00               	movlw	0
  3157  0144C6  0100               	movlb	0	; () banked
  3158  0144C8  6FC6               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  3159  0144CA  0E0A               	movlw	10
  3160  0144CC  6FC5               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  3161  0144CE  0E00               	movlw	0
  3162  0144D0  0100               	movlb	0	; () banked
  3163  0144D2  6FC8               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  3164  0144D4  0E0B               	movlw	11
  3165  0144D6  6FC7               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  3166  0144D8  0E00               	movlw	0
  3167  0144DA  0100               	movlb	0	; () banked
  3168  0144DC  6FCA               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  3169  0144DE  0E0C               	movlw	12
  3170  0144E0  6FC9               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  3171  0144E2  0E05               	movlw	5
  3172  0144E4  ECCC  F08C         	call	_irobot_query_and_update
  3173  0144E8  0012               	return		;funcret
  3174  0144EA                     __end_of_update_bump_and_cliff:
  3175                           	opt stack 0
  3176                           tosu	equ	0xFFF
  3177                           tosh	equ	0xFFE
  3178                           tosl	equ	0xFFD
  3179                           pclath	equ	0xFFA
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1h	equ	0xFE2
  3188                           fsr1l	equ	0xFE1
  3189                           postinc2	equ	0xFDE
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _update_angle *****************
  3193 ;; Defined at:
  3194 ;;		line 320 in file "Library/iRobotSerial.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;Total ram usage:        0 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:   10
  3215 ;; This function calls:
  3216 ;;		_irobot_query_and_update
  3217 ;; This function is called by:
  3218 ;;		_mode2
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text6
  3223  014976                     __ptext6:
  3224                           	opt stack 0
  3225  014976                     _update_angle:
  3226                           	opt stack 19
  3227                           
  3228                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  3229                           
  3230                           ;incstack = 0
  3231  014976  0E00               	movlw	0
  3232  014978  0100               	movlb	0	; () banked
  3233  01497A  6FC2               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3234  01497C  0E14               	movlw	20
  3235  01497E  6FC1               	movwf	?_irobot_query_and_update& (0+255),b
  3236  014980  0E01               	movlw	1
  3237  014982  ECCC  F08C         	call	_irobot_query_and_update
  3238  014986  0012               	return		;funcret
  3239  014988                     __end_of_update_angle:
  3240                           	opt stack 0
  3241                           tosu	equ	0xFFF
  3242                           tosh	equ	0xFFE
  3243                           tosl	equ	0xFFD
  3244                           pclath	equ	0xFFA
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           postdec1	equ	0xFE5
  3252                           fsr1h	equ	0xFE2
  3253                           fsr1l	equ	0xFE1
  3254                           postinc2	equ	0xFDE
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function _irobot_query_and_update *****************
  3258 ;; Defined at:
  3259 ;;		line 130 in file "Library/iRobotSerial.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  numberOfPack    1    wreg     unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  3264 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  3265 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  3266 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  3267 ;;		 -> ?_irobot_query_and_update(1), 
  3268 ;;  i               1   28[BANK0 ] unsigned char 
  3269 ;;  startIndex      1   27[BANK0 ] unsigned char 
  3270 ;;  j               1   26[BANK0 ] unsigned char 
  3271 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  3272 ;;  streamSize      1   23[BANK0 ] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3282 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;Total ram usage:      535 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    9
  3289 ;; This function calls:
  3290 ;;		_eusart_getch
  3291 ;;		_eusart_putch
  3292 ;;		_get_packet_size
  3293 ;;		_rx_assign
  3294 ;; This function is called by:
  3295 ;;		_update_bump_and_cliff
  3296 ;;		_update_distance
  3297 ;;		_update_angle
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text7
  3302  011998                     __ptext7:
  3303                           	opt stack 0
  3304  011998                     _irobot_query_and_update:
  3305                           	opt stack 19
  3306                           
  3307                           ;incstack = 0
  3308                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  3309  011998  0100               	movlb	0	; () banked
  3310  01199A  6FD3               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  3311                           
  3312                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  3313  01199C  0E00               	movlw	0
  3314  01199E  0100               	movlb	0	; () banked
  3315  0119A0  6FD2               	movwf	irobot_query_and_update@streamSize& (0+255),b
  3316  0119A2  0E00               	movlw	0
  3317  0119A4  0100               	movlb	0	; () banked
  3318  0119A6  6FD6               	movwf	irobot_query_and_update@startIndex& (0+255),b
  3319                           
  3320                           ;iRobotSerial.c: 133: va_list packetIDs;
  3321                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  3322  0119A8  0EC1               	movlw	low ?_irobot_query_and_update
  3323  0119AA  0100               	movlb	0	; () banked
  3324  0119AC  6FD0               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  3325  0119AE  0E00               	movlw	high ?_irobot_query_and_update
  3326  0119B0  0100               	movlb	0	; () banked
  3327  0119B2  6FD1               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  3331  0119B4  0E95               	movlw	149
  3332  0119B6  ECDB  F0A4         	call	_eusart_putch
  3333                           
  3334                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  3335  0119BA  0100               	movlb	0	; () banked
  3336  0119BC  51D3               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3337  0119BE  ECDB  F0A4         	call	_eusart_putch
  3338                           
  3339                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  3340  0119C2  0E00               	movlw	0
  3341  0119C4  0100               	movlb	0	; () banked
  3342  0119C6  6FD7               	movwf	irobot_query_and_update@i& (0+255),b
  3343  0119C8  D023               	goto	l2091
  3344  0119CA                     
  3345                           ; BSR set to: 0
  3346                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  3347                           
  3348                           ; BSR set to: 0
  3349  0119CA  C0D0  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  3350  0119CE  C0D1  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  3351  0119D2  50DF               	movf	indf2,w,c
  3352  0119D4  0100               	movlb	0	; () banked
  3353  0119D6  6FD4               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  3354                           
  3355                           ; BSR set to: 0
  3356  0119D8  0E02               	movlw	2
  3357  0119DA  0100               	movlb	0	; () banked
  3358  0119DC  27D0               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  3359  0119DE  0E00               	movlw	0
  3360  0119E0  23D1               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  3364  0119E2  0100               	movlb	0	; () banked
  3365  0119E4  51D4               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3366  0119E6  ECE0  F09D         	call	_get_packet_size
  3367  0119EA  0100               	movlb	0	; () banked
  3368  0119EC  27D2               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  3372  0119EE  0100               	movlb	0	; () banked
  3373  0119F0  51D7               	movf	irobot_query_and_update@i& (0+255),w,b
  3374  0119F2  0D01               	mullw	1
  3375  0119F4  0E00               	movlw	low irobot_query_and_update@TXArray
  3376  0119F6  24F3               	addwf	prodl,w,c
  3377  0119F8  6ED9               	movwf	fsr2l,c
  3378  0119FA  0E02               	movlw	high irobot_query_and_update@TXArray
  3379  0119FC  20F4               	addwfc	prodh,w,c
  3380  0119FE  6EDA               	movwf	fsr2h,c
  3381  011A00  C0D4  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  3385  011A04  0100               	movlb	0	; () banked
  3386  011A06  51D4               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3387  011A08  ECDB  F0A4         	call	_eusart_putch
  3388  011A0C  0100               	movlb	0	; () banked
  3389  011A0E  2BD7               	incf	irobot_query_and_update@i& (0+255),f,b
  3390  011A10                     l2091:
  3391                           
  3392                           ; BSR set to: 0
  3393                           
  3394                           ; BSR set to: 0
  3395  011A10  0100               	movlb	0	; () banked
  3396  011A12  51D3               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3397  011A14  0100               	movlb	0	; () banked
  3398  011A16  5DD7               	subwf	irobot_query_and_update@i& (0+255),w,b
  3399  011A18  A0D8               	btfss	status,0,c
  3400  011A1A  D7D7               	goto	l2092
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;iRobotSerial.c: 142: }
  3404                           ;iRobotSerial.c: 143: ;
  3405                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  3406                           
  3407                           ; BSR set to: 0
  3408  011A1C  0E00               	movlw	0
  3409  011A1E  0100               	movlb	0	; () banked
  3410  011A20  6FD7               	movwf	irobot_query_and_update@i& (0+255),b
  3411  011A22  D00E               	goto	l2094
  3412  011A24                     
  3413                           ; BSR set to: 0
  3414                           
  3415                           ; BSR set to: 0
  3416  011A24  0100               	movlb	0	; () banked
  3417  011A26  51D7               	movf	irobot_query_and_update@i& (0+255),w,b
  3418  011A28  0D01               	mullw	1
  3419  011A2A  0E00               	movlw	low irobot_query_and_update@RXArray
  3420  011A2C  24F3               	addwf	prodl,w,c
  3421  011A2E  6ED9               	movwf	fsr2l,c
  3422  011A30  0E01               	movlw	high irobot_query_and_update@RXArray
  3423  011A32  20F4               	addwfc	prodh,w,c
  3424  011A34  6EDA               	movwf	fsr2h,c
  3425  011A36  EC11  F0A5         	call	_eusart_getch	;wreg free
  3426  011A3A  6EDF               	movwf	indf2,c
  3427  011A3C  0100               	movlb	0	; () banked
  3428  011A3E  2BD7               	incf	irobot_query_and_update@i& (0+255),f,b
  3429  011A40                     l2094:
  3430                           
  3431                           ; BSR set to: 0
  3432                           
  3433                           ; BSR set to: 0
  3434  011A40  0100               	movlb	0	; () banked
  3435  011A42  51D2               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  3436  011A44  0100               	movlb	0	; () banked
  3437  011A46  5DD7               	subwf	irobot_query_and_update@i& (0+255),w,b
  3438  011A48  A0D8               	btfss	status,0,c
  3439  011A4A  D7EC               	goto	l2095
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  3443                           
  3444                           ; BSR set to: 0
  3445  011A4C  0E00               	movlw	0
  3446  011A4E  0100               	movlb	0	; () banked
  3447  011A50  6FD7               	movwf	irobot_query_and_update@i& (0+255),b
  3448  011A52  D05E               	goto	l2097
  3449  011A54                     l2098:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  3453  011A54  C0D6  F0D5         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  3454  011A58  D021               	goto	l2099
  3455  011A5A                     
  3456                           ; BSR set to: 0
  3457                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  3458                           
  3459                           ; BSR set to: 0
  3460  011A5A  0100               	movlb	0	; () banked
  3461  011A5C  51D5               	movf	irobot_query_and_update@j& (0+255),w,b
  3462  011A5E  0D01               	mullw	1
  3463  011A60  0E00               	movlw	low irobot_query_and_update@RXArray
  3464  011A62  24F3               	addwf	prodl,w,c
  3465  011A64  6ED9               	movwf	fsr2l,c
  3466  011A66  0E01               	movlw	high irobot_query_and_update@RXArray
  3467  011A68  20F4               	addwfc	prodh,w,c
  3468  011A6A  6EDA               	movwf	fsr2h,c
  3469  011A6C  50DF               	movf	indf2,w,c
  3470  011A6E  0100               	movlb	0	; () banked
  3471  011A70  6FBC               	movwf	rx_assign@packetIDValue& (0+255),b
  3472  011A72  0100               	movlb	0	; () banked
  3473  011A74  51D6               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3474  011A76  0800               	sublw	0
  3475  011A78  0100               	movlb	0	; () banked
  3476  011A7A  25D5               	addwf	irobot_query_and_update@j& (0+255),w,b
  3477  011A7C  0100               	movlb	0	; () banked
  3478  011A7E  6FBD               	movwf	rx_assign@byteNumber& (0+255),b
  3479  011A80  0100               	movlb	0	; () banked
  3480  011A82  51D7               	movf	irobot_query_and_update@i& (0+255),w,b
  3481  011A84  0D01               	mullw	1
  3482  011A86  0E00               	movlw	low irobot_query_and_update@TXArray
  3483  011A88  24F3               	addwf	prodl,w,c
  3484  011A8A  6ED9               	movwf	fsr2l,c
  3485  011A8C  0E02               	movlw	high irobot_query_and_update@TXArray
  3486  011A8E  20F4               	addwfc	prodh,w,c
  3487  011A90  6EDA               	movwf	fsr2h,c
  3488  011A92  50DF               	movf	indf2,w,c
  3489  011A94  EC2C  F092         	call	_rx_assign
  3490  011A98  0100               	movlb	0	; () banked
  3491  011A9A  2BD5               	incf	irobot_query_and_update@j& (0+255),f,b
  3492  011A9C                     l2099:
  3493                           
  3494                           ; BSR set to: 0
  3495                           
  3496                           ; BSR set to: 0
  3497  011A9C  0100               	movlb	0	; () banked
  3498  011A9E  51D7               	movf	irobot_query_and_update@i& (0+255),w,b
  3499  011AA0  0D01               	mullw	1
  3500  011AA2  0E00               	movlw	low irobot_query_and_update@TXArray
  3501  011AA4  24F3               	addwf	prodl,w,c
  3502  011AA6  6ED9               	movwf	fsr2l,c
  3503  011AA8  0E02               	movlw	high irobot_query_and_update@TXArray
  3504  011AAA  20F4               	addwfc	prodh,w,c
  3505  011AAC  6EDA               	movwf	fsr2h,c
  3506  011AAE  50DF               	movf	indf2,w,c
  3507  011AB0  ECE0  F09D         	call	_get_packet_size
  3508  011AB4  0100               	movlb	0	; () banked
  3509  011AB6  6FCB               	movwf	??_irobot_query_and_update& (0+255),b
  3510  011AB8  6BCC               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  3511  011ABA  0100               	movlb	0	; () banked
  3512  011ABC  51D6               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3513  011ABE  0100               	movlb	0	; () banked
  3514  011AC0  27CB               	addwf	??_irobot_query_and_update& (0+255),f,b
  3515  011AC2  0E00               	movlw	0
  3516  011AC4  23CC               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  3517  011AC6  0100               	movlb	0	; () banked
  3518  011AC8  51D5               	movf	irobot_query_and_update@j& (0+255),w,b
  3519  011ACA  0100               	movlb	0	; () banked
  3520  011ACC  6FCD               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  3521  011ACE  6BCE               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  3522  011AD0  0100               	movlb	0	; () banked
  3523  011AD2  51CB               	movf	??_irobot_query_and_update& (0+255),w,b
  3524  011AD4  0100               	movlb	0	; () banked
  3525  011AD6  5DCD               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  3526  011AD8  0100               	movlb	0	; () banked
  3527  011ADA  51CE               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  3528  011ADC  0A80               	xorlw	128
  3529  011ADE  0100               	movlb	0	; () banked
  3530  011AE0  6FCF               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  3531  011AE2  0100               	movlb	0	; () banked
  3532  011AE4  51CC               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  3533  011AE6  0A80               	xorlw	128
  3534  011AE8  0100               	movlb	0	; () banked
  3535  011AEA  59CF               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  3536  011AEC  A0D8               	btfss	status,0,c
  3537  011AEE  D7B5               	goto	l2100
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;iRobotSerial.c: 150: }
  3541                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  3542                           
  3543                           ; BSR set to: 0
  3544  011AF0  0100               	movlb	0	; () banked
  3545  011AF2  51D7               	movf	irobot_query_and_update@i& (0+255),w,b
  3546  011AF4  0D01               	mullw	1
  3547  011AF6  0E00               	movlw	low irobot_query_and_update@TXArray
  3548  011AF8  24F3               	addwf	prodl,w,c
  3549  011AFA  6ED9               	movwf	fsr2l,c
  3550  011AFC  0E02               	movlw	high irobot_query_and_update@TXArray
  3551  011AFE  20F4               	addwfc	prodh,w,c
  3552  011B00  6EDA               	movwf	fsr2h,c
  3553  011B02  50DF               	movf	indf2,w,c
  3554  011B04  ECE0  F09D         	call	_get_packet_size
  3555  011B08  0100               	movlb	0	; () banked
  3556  011B0A  27D6               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  3557                           
  3558                           ; BSR set to: 0
  3559  011B0C  0100               	movlb	0	; () banked
  3560  011B0E  2BD7               	incf	irobot_query_and_update@i& (0+255),f,b
  3561  011B10                     l2097:
  3562                           
  3563                           ; BSR set to: 0
  3564                           
  3565                           ; BSR set to: 0
  3566  011B10  0100               	movlb	0	; () banked
  3567  011B12  51D3               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3568  011B14  0100               	movlb	0	; () banked
  3569  011B16  5DD7               	subwf	irobot_query_and_update@i& (0+255),w,b
  3570  011B18  B0D8               	btfsc	status,0,c
  3571  011B1A  0012               	return	
  3572  011B1C  D79B               	goto	l2098
  3573  011B1E                     __end_of_irobot_query_and_update:
  3574                           	opt stack 0
  3575                           tosu	equ	0xFFF
  3576                           tosh	equ	0xFFE
  3577                           tosl	equ	0xFFD
  3578                           pclath	equ	0xFFA
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           indf2	equ	0xFDF
  3591                           postinc2	equ	0xFDE
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _rx_assign *****************
  3597 ;; Defined at:
  3598 ;;		line 74 in file "Library/iRobotSerial.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  packetID        1    wreg     unsigned char 
  3601 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  3602 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  packetID        1    5[BANK0 ] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    8
  3621 ;; This function calls:
  3622 ;;		_sort_iRBumpDrop
  3623 ;; This function is called by:
  3624 ;;		_irobot_query_and_update
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           	psect	text8
  3629  012458                     __ptext8:
  3630                           	opt stack 0
  3631  012458                     _rx_assign:
  3632                           	opt stack 19
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;incstack = 0
  3636                           ;rx_assign@packetID stored from wreg
  3637  012458  0100               	movlb	0	; () banked
  3638  01245A  6FC0               	movwf	rx_assign@packetID& (0+255),b
  3639                           
  3640                           ;iRobotSerial.c: 75: switch (packetID) {
  3641  01245C  D057               	goto	l2031
  3642  01245E                     l2032:
  3643                           
  3644                           ; BSR set to: 0
  3645  01245E  C0BC  F034         	movff	rx_assign@packetIDValue,_iRBumpDrop
  3646                           
  3647                           ; BSR set to: 0
  3648  012462  ECF1  F099         	call	_sort_iRBumpDrop	;wreg free
  3649  012466  0012               	return	
  3650  012468                     l2034:
  3651                           
  3652                           ; BSR set to: 0
  3653  012468  C0BC  F033         	movff	rx_assign@packetIDValue,_iRWall
  3654  01246C  0012               	return	
  3655  01246E                     l2035:
  3656                           
  3657                           ; BSR set to: 0
  3658  01246E  C0BC  F032         	movff	rx_assign@packetIDValue,_iRCliffL
  3659  012472  0012               	return	
  3660  012474                     l2036:
  3661                           
  3662                           ; BSR set to: 0
  3663  012474  C0BC  F031         	movff	rx_assign@packetIDValue,_iRCliffFL
  3664  012478  0012               	return	
  3665  01247A                     l2037:
  3666                           
  3667                           ; BSR set to: 0
  3668  01247A  C0BC  F030         	movff	rx_assign@packetIDValue,_iRCliffFR
  3669  01247E  0012               	return	
  3670  012480                     l2038:
  3671                           
  3672                           ; BSR set to: 0
  3673  012480  C0BC  F02F         	movff	rx_assign@packetIDValue,_iRCliffR
  3674  012484  0012               	return	
  3675  012486                     l2039:
  3676                           
  3677                           ; BSR set to: 0
  3678  012486  C0BC  F02E         	movff	rx_assign@packetIDValue,_iRVirtualWall
  3679  01248A  0012               	return	
  3680  01248C                     
  3681                           ; BSR set to: 0
  3682                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  3683                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  3684                           
  3685                           ; BSR set to: 0
  3686  01248C  0100               	movlb	0	; () banked
  3687  01248E  51BD               	movf	rx_assign@byteNumber& (0+255),w,b
  3688  012490  0100               	movlb	0	; () banked
  3689  012492  A4D8               	btfss	status,2,c
  3690  012494  D005               	goto	l2042
  3691                           
  3692                           ; BSR set to: 0
  3693  012496  C0BC  F060         	movff	rx_assign@packetIDValue,_iRDistanceSS
  3694  01249A  0100               	movlb	0	; () banked
  3695  01249C  6B61               	clrf	(_iRDistanceSS+1)& (0+255),b
  3696  01249E  0012               	return	
  3697  0124A0                     l2042:
  3698                           
  3699                           ; BSR set to: 0
  3700  0124A0  C0BC  F062         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  3701  0124A4  0100               	movlb	0	; () banked
  3702  0124A6  6B63               	clrf	(_iRDistanceSS+3)& (0+255),b
  3703                           
  3704                           ; BSR set to: 0
  3705  0124A8  0100               	movlb	0	; () banked
  3706  0124AA  5160               	movf	_iRDistanceSS& (0+255),w,b
  3707  0124AC  0100               	movlb	0	; () banked
  3708  0124AE  6FBF               	movwf	(??_rx_assign+1)& (0+255),b
  3709  0124B0  6BBE               	clrf	??_rx_assign& (0+255),b
  3710  0124B2  0100               	movlb	0	; () banked
  3711  0124B4  5162               	movf	(_iRDistanceSS+2)& (0+255),w,b
  3712  0124B6  0100               	movlb	0	; () banked
  3713  0124B8  25BE               	addwf	??_rx_assign& (0+255),w,b
  3714  0124BA  0100               	movlb	0	; () banked
  3715  0124BC  6F7D               	movwf	_iRDistance& (0+255),b
  3716  0124BE  0100               	movlb	0	; () banked
  3717  0124C0  5163               	movf	(_iRDistanceSS+3)& (0+255),w,b
  3718  0124C2  0100               	movlb	0	; () banked
  3719  0124C4  21BF               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3720  0124C6  0100               	movlb	0	; () banked
  3721  0124C8  6F7E               	movwf	(_iRDistance+1)& (0+255),b
  3722                           
  3723                           ; BSR set to: 0
  3724  0124CA  0012               	return	
  3725  0124CC                     
  3726                           ; BSR set to: 0
  3727                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  3728                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  3729                           
  3730                           ; BSR set to: 0
  3731  0124CC  0100               	movlb	0	; () banked
  3732  0124CE  51BD               	movf	rx_assign@byteNumber& (0+255),w,b
  3733  0124D0  0100               	movlb	0	; () banked
  3734  0124D2  A4D8               	btfss	status,2,c
  3735  0124D4  D005               	goto	l2047
  3736                           
  3737                           ; BSR set to: 0
  3738  0124D6  C0BC  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  3739  0124DA  0103               	movlb	3	; () banked
  3740  0124DC  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  3741  0124DE  0012               	return	
  3742  0124E0                     l2047:
  3743                           
  3744                           ; BSR set to: 0
  3745  0124E0  C0BC  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  3746  0124E4  0103               	movlb	3	; () banked
  3747  0124E6  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  3748                           
  3749                           ; BSR set to: 3
  3750  0124E8  0103               	movlb	3	; () banked
  3751  0124EA  511E               	movf	_iRAngleSS& (0+255),w,b
  3752  0124EC  0100               	movlb	0	; () banked
  3753  0124EE  6FBF               	movwf	(??_rx_assign+1)& (0+255),b
  3754  0124F0  6BBE               	clrf	??_rx_assign& (0+255),b
  3755  0124F2  0103               	movlb	3	; () banked
  3756  0124F4  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  3757  0124F6  0100               	movlb	0	; () banked
  3758  0124F8  25BE               	addwf	??_rx_assign& (0+255),w,b
  3759  0124FA  0100               	movlb	0	; () banked
  3760  0124FC  6F7B               	movwf	_iRAngle& (0+255),b
  3761  0124FE  0103               	movlb	3	; () banked
  3762  012500  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  3763  012502  0100               	movlb	0	; () banked
  3764  012504  21BF               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3765  012506  0100               	movlb	0	; () banked
  3766  012508  6F7C               	movwf	(_iRAngle+1)& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;iRobotSerial.c: 89: }
  3770                           
  3771                           ; BSR set to: 0
  3772  01250A  0012               	return	
  3773  01250C                     l2031:
  3774                           
  3775                           ; BSR set to: 0
  3776  01250C  0100               	movlb	0	; () banked
  3777  01250E  51C0               	movf	rx_assign@packetID& (0+255),w,b
  3778                           
  3779                           ; Switch size 1, requested type "space"
  3780                           ; Number of cases is 9, Range of values is 7 to 20
  3781                           ; switch strategies available:
  3782                           ; Name         Instructions Cycles
  3783                           ; simple_byte           28    15 (average)
  3784                           ;	Chosen strategy is simple_byte
  3785  012510  0A07               	xorlw	7	; case 7
  3786  012512  B4D8               	btfsc	status,2,c
  3787  012514  D7A4               	goto	l2032
  3788  012516  0A0F               	xorlw	15	; case 8
  3789  012518  B4D8               	btfsc	status,2,c
  3790  01251A  D7A6               	goto	l2034
  3791  01251C  0A01               	xorlw	1	; case 9
  3792  01251E  B4D8               	btfsc	status,2,c
  3793  012520  D7A6               	goto	l2035
  3794  012522  0A03               	xorlw	3	; case 10
  3795  012524  B4D8               	btfsc	status,2,c
  3796  012526  D7A6               	goto	l2036
  3797  012528  0A01               	xorlw	1	; case 11
  3798  01252A  B4D8               	btfsc	status,2,c
  3799  01252C  D7A6               	goto	l2037
  3800  01252E  0A07               	xorlw	7	; case 12
  3801  012530  B4D8               	btfsc	status,2,c
  3802  012532  D7A6               	goto	l2038
  3803  012534  0A01               	xorlw	1	; case 13
  3804  012536  B4D8               	btfsc	status,2,c
  3805  012538  D7A6               	goto	l2039
  3806  01253A  0A1E               	xorlw	30	; case 19
  3807  01253C  B4D8               	btfsc	status,2,c
  3808  01253E  D7A6               	goto	l2040
  3809  012540  0A07               	xorlw	7	; case 20
  3810  012542  A4D8               	btfss	status,2,c
  3811  012544  0012               	return	
  3812  012546  D7C2               	goto	l2045
  3813  012548                     __end_of_rx_assign:
  3814                           	opt stack 0
  3815                           tosu	equ	0xFFF
  3816                           tosh	equ	0xFFE
  3817                           tosl	equ	0xFFD
  3818                           pclath	equ	0xFFA
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           postdec1	equ	0xFE5
  3828                           fsr1h	equ	0xFE2
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _sort_iRBumpDrop *****************
  3837 ;; Defined at:
  3838 ;;		line 92 in file "Library/iRobotSerial.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        1 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    7
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_rx_assign
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text9
  3867  0133E2                     __ptext9:
  3868                           	opt stack 0
  3869  0133E2                     _sort_iRBumpDrop:
  3870                           	opt stack 19
  3871                           
  3872                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  3873                           
  3874                           ;incstack = 0
  3875  0133E2  A034               	btfss	_iRBumpDrop,0,c
  3876  0133E4  D002               	goto	l2054
  3877  0133E6  0E01               	movlw	1
  3878  0133E8  D001               	goto	L1
  3879  0133EA                     l2054:
  3880                           
  3881                           ; BSR set to: 0
  3882  0133EA  0E00               	movlw	0
  3883  0133EC                     L1:
  3884  0133EC  0100               	movlb	0	; () banked
  3885  0133EE  6F8E               	movwf	_iRBumpRight& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  3889                           
  3890                           ; BSR set to: 0
  3891  0133F0  C034  F0BB         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3892  0133F4  0100               	movlb	0	; () banked
  3893  0133F6  90D8               	bcf	status,0,c
  3894  0133F8  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3895  0133FA  0100               	movlb	0	; () banked
  3896  0133FC  A1BB               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3897  0133FE  D002               	goto	l2058
  3898                           
  3899                           ; BSR set to: 0
  3900  013400  0E01               	movlw	1
  3901  013402  D001               	goto	L2
  3902  013404                     l2058:
  3903                           
  3904                           ; BSR set to: 0
  3905                           
  3906                           ; BSR set to: 0
  3907  013404  0E00               	movlw	0
  3908  013406                     L2:
  3909  013406  0100               	movlb	0	; () banked
  3910  013408  6F8D               	movwf	_iRBumpLeft& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  3914                           
  3915                           ; BSR set to: 0
  3916  01340A  C034  F0BB         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3917  01340E  0100               	movlb	0	; () banked
  3918  013410  90D8               	bcf	status,0,c
  3919  013412  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3920  013414  0100               	movlb	0	; () banked
  3921  013416  90D8               	bcf	status,0,c
  3922  013418  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3923  01341A  0100               	movlb	0	; () banked
  3924  01341C  A1BB               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3925  01341E  D002               	goto	l2062
  3926                           
  3927                           ; BSR set to: 0
  3928  013420  0E01               	movlw	1
  3929  013422  D001               	goto	L3
  3930  013424                     l2062:
  3931                           
  3932                           ; BSR set to: 0
  3933                           
  3934                           ; BSR set to: 0
  3935  013424  0E00               	movlw	0
  3936  013426                     L3:
  3937  013426  6E2D               	movwf	_iRDropRight,c
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  3941                           
  3942                           ; BSR set to: 0
  3943  013428  C034  F0BB         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3944  01342C  0100               	movlb	0	; () banked
  3945  01342E  90D8               	bcf	status,0,c
  3946  013430  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3947  013432  0100               	movlb	0	; () banked
  3948  013434  90D8               	bcf	status,0,c
  3949  013436  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3950  013438  0100               	movlb	0	; () banked
  3951  01343A  90D8               	bcf	status,0,c
  3952  01343C  33BB               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3953  01343E  0100               	movlb	0	; () banked
  3954  013440  A1BB               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3955  013442  D002               	goto	l2066
  3956                           
  3957                           ; BSR set to: 0
  3958  013444  0E01               	movlw	1
  3959  013446  D001               	goto	L4
  3960  013448                     l2066:
  3961                           
  3962                           ; BSR set to: 0
  3963                           
  3964                           ; BSR set to: 0
  3965  013448  0E00               	movlw	0
  3966  01344A                     L4:
  3967  01344A  0100               	movlb	0	; () banked
  3968  01344C  6F8C               	movwf	_iRDropLeft& (0+255),b
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  3972                           
  3973                           ; BSR set to: 0
  3974  01344E  C034  F0BB         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3975  013452  0100               	movlb	0	; () banked
  3976  013454  3BBB               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  3977  013456  0E0F               	movlw	15
  3978  013458  17BB               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  3979  01345A  0100               	movlb	0	; () banked
  3980  01345C  A1BB               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3981  01345E  D004               	goto	l2070
  3982                           
  3983                           ; BSR set to: 0
  3984  013460  0E01               	movlw	1
  3985  013462  0100               	movlb	0	; () banked
  3986  013464  6F8B               	movwf	_iRDropCaster& (0+255),b
  3987  013466  0012               	return	
  3988  013468                     l2070:
  3989                           
  3990                           ; BSR set to: 0
  3991                           
  3992                           ; BSR set to: 0
  3993  013468  0E00               	movlw	0
  3994  01346A  0100               	movlb	0	; () banked
  3995  01346C  6F8B               	movwf	_iRDropCaster& (0+255),b
  3996  01346E  0012               	return	
  3997  013470                     __end_of_sort_iRBumpDrop:
  3998                           	opt stack 0
  3999                           tosu	equ	0xFFF
  4000                           tosh	equ	0xFFE
  4001                           tosl	equ	0xFFD
  4002                           pclath	equ	0xFFA
  4003                           tblptru	equ	0xFF8
  4004                           tblptrh	equ	0xFF7
  4005                           tblptrl	equ	0xFF6
  4006                           tablat	equ	0xFF5
  4007                           prodh	equ	0xFF4
  4008                           prodl	equ	0xFF3
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _get_packet_size *****************
  4021 ;; Defined at:
  4022 ;;		line 60 in file "Library/iRobotSerial.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  packetID        1    wreg     unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  packetID        1    0[BANK0 ] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      unsigned char 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:        1 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    7
  4043 ;; This function calls:
  4044 ;;		Nothing
  4045 ;; This function is called by:
  4046 ;;		_irobot_query_and_update
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text10
  4051  013BC0                     __ptext10:
  4052                           	opt stack 0
  4053  013BC0                     _get_packet_size:
  4054                           	opt stack 20
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;incstack = 0
  4058                           ;get_packet_size@packetID stored from wreg
  4059  013BC0  0100               	movlb	0	; () banked
  4060  013BC2  6FBB               	movwf	get_packet_size@packetID& (0+255),b
  4061                           
  4062                           ;iRobotSerial.c: 61: switch (packetID) {
  4063  013BC4  D012               	goto	l2017
  4064  013BC6  0E01               	movlw	1
  4065  013BC8  0012               	return	
  4066  013BCA  0E01               	movlw	1
  4067  013BCC  0012               	return	
  4068  013BCE  0E01               	movlw	1
  4069  013BD0  0012               	return	
  4070  013BD2  0E01               	movlw	1
  4071  013BD4  0012               	return	
  4072  013BD6  0E01               	movlw	1
  4073  013BD8  0012               	return	
  4074  013BDA  0E01               	movlw	1
  4075  013BDC  0012               	return	
  4076  013BDE  0E01               	movlw	1
  4077  013BE0  0012               	return	
  4078  013BE2  0E02               	movlw	2
  4079  013BE4  0012               	return	
  4080  013BE6  0E02               	movlw	2
  4081                           
  4082                           ;iRobotSerial.c: 71: }
  4083  013BE8  0012               	return	
  4084  013BEA                     l2017:
  4085  013BEA  0100               	movlb	0	; () banked
  4086  013BEC  51BB               	movf	get_packet_size@packetID& (0+255),w,b
  4087                           
  4088                           ; Switch size 1, requested type "space"
  4089                           ; Number of cases is 9, Range of values is 7 to 20
  4090                           ; switch strategies available:
  4091                           ; Name         Instructions Cycles
  4092                           ; simple_byte           28    15 (average)
  4093                           ;	Chosen strategy is simple_byte
  4094  013BEE  0A07               	xorlw	7	; case 7
  4095  013BF0  B4D8               	btfsc	status,2,c
  4096  013BF2  D7E9               	goto	l2018
  4097  013BF4  0A0F               	xorlw	15	; case 8
  4098  013BF6  B4D8               	btfsc	status,2,c
  4099  013BF8  D7E8               	goto	l2020
  4100  013BFA  0A01               	xorlw	1	; case 9
  4101  013BFC  B4D8               	btfsc	status,2,c
  4102  013BFE  D7E7               	goto	l2021
  4103  013C00  0A03               	xorlw	3	; case 10
  4104  013C02  B4D8               	btfsc	status,2,c
  4105  013C04  D7E6               	goto	l2022
  4106  013C06  0A01               	xorlw	1	; case 11
  4107  013C08  B4D8               	btfsc	status,2,c
  4108  013C0A  D7E5               	goto	l2023
  4109  013C0C  0A07               	xorlw	7	; case 12
  4110  013C0E  B4D8               	btfsc	status,2,c
  4111  013C10  D7E4               	goto	l2024
  4112  013C12  0A01               	xorlw	1	; case 13
  4113  013C14  B4D8               	btfsc	status,2,c
  4114  013C16  D7E3               	goto	l2025
  4115  013C18  0A1E               	xorlw	30	; case 19
  4116  013C1A  B4D8               	btfsc	status,2,c
  4117  013C1C  D7E2               	goto	l2026
  4118  013C1E  0A07               	xorlw	7	; case 20
  4119  013C20  A4D8               	btfss	status,2,c
  4120  013C22  0012               	return	
  4121  013C24  D7E0               	goto	l2027
  4122  013C26                     __end_of_get_packet_size:
  4123                           	opt stack 0
  4124                           tosu	equ	0xFFF
  4125                           tosh	equ	0xFFE
  4126                           tosl	equ	0xFFD
  4127                           pclath	equ	0xFFA
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           prodh	equ	0xFF4
  4133                           prodl	equ	0xFF3
  4134                           postinc0	equ	0xFEE
  4135                           wreg	equ	0xFE8
  4136                           postdec1	equ	0xFE5
  4137                           fsr1h	equ	0xFE2
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           fsr2h	equ	0xFDA
  4142                           fsr2l	equ	0xFD9
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _eusart_getch *****************
  4146 ;; Defined at:
  4147 ;;		line 125 in file "Library/iRobotSerial.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      unsigned char 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    7
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_irobot_query_and_update
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text11
  4176  014A22                     __ptext11:
  4177                           	opt stack 0
  4178  014A22                     _eusart_getch:
  4179                           	opt stack 20
  4180                           
  4181                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  4182                           
  4183                           ;incstack = 0
  4184  014A22  AA9E               	btfss	3998,5,c	;volatile
  4185  014A24  D7FE               	goto	_eusart_getch
  4186                           
  4187                           ;iRobotSerial.c: 127: return RCREG1;
  4188  014A26  50AF               	movf	4015,w,c	;volatile
  4189  014A28  0012               	return	
  4190  014A2A                     __end_of_eusart_getch:
  4191                           	opt stack 0
  4192                           tosu	equ	0xFFF
  4193                           tosh	equ	0xFFE
  4194                           tosl	equ	0xFFD
  4195                           pclath	equ	0xFFA
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           prodh	equ	0xFF4
  4201                           prodl	equ	0xFF3
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           postdec1	equ	0xFE5
  4205                           fsr1h	equ	0xFE2
  4206                           fsr1l	equ	0xFE1
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _printf *****************
  4214 ;; Defined at:
  4215 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4218 ;;		 -> STR_4(14), STR_3(3), STR_2(46), STR_1(3), 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  tmpval          4    0        struct .
  4221 ;;  cp              3    0        PTR const unsigned char 
  4222 ;;  val             2   34[BANK0 ] unsigned int 
  4223 ;;  ap              2   32[BANK0 ] PTR void [1]
  4224 ;;		 -> ?_printf(2), 
  4225 ;;  len             2    0        unsigned int 
  4226 ;;  c               1   36[BANK0 ] char 
  4227 ;;  flag            1   31[BANK0 ] unsigned char 
  4228 ;;  prec            1   30[BANK0 ] char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  2   21[BANK0 ] int 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:       16 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:   12
  4245 ;; This function calls:
  4246 ;;		___lwdiv
  4247 ;;		___lwmod
  4248 ;;		_putch
  4249 ;; This function is called by:
  4250 ;;		_mode2
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text12
  4255  0112E6                     __ptext12:
  4256                           	opt stack 0
  4257  0112E6                     _printf:
  4258                           	opt stack 17
  4259                           
  4260                           ;doprnt.c: 466: va_list ap;
  4261                           ;doprnt.c: 499: signed char c;
  4262                           ;doprnt.c: 506: signed char prec;
  4263                           ;doprnt.c: 508: unsigned char flag;
  4264                           ;doprnt.c: 523: union {
  4265                           ;doprnt.c: 524: unsigned long vd;
  4266                           ;doprnt.c: 525: double integ;
  4267                           ;doprnt.c: 526: } tmpval;
  4268                           ;doprnt.c: 528: unsigned int val;
  4269                           ;doprnt.c: 529: unsigned len;
  4270                           ;doprnt.c: 530: const char * cp;
  4271                           ;doprnt.c: 533: *ap = __va_start();
  4272                           
  4273                           ;incstack = 0
  4274  0112E6  0ED2               	movlw	low (?_printf+2)
  4275  0112E8  0100               	movlb	0	; () banked
  4276  0112EA  6FDB               	movwf	printf@ap& (0+255),b
  4277  0112EC  0E00               	movlw	high (?_printf+2)
  4278  0112EE  0100               	movlb	0	; () banked
  4279  0112F0  6FDC               	movwf	(printf@ap+1)& (0+255),b
  4280                           
  4281                           ;doprnt.c: 536: while(c = *f++) {
  4282  0112F2  D0C9               	goto	u8420
  4283  0112F4                     
  4284                           ; BSR set to: 0
  4285                           ;doprnt.c: 538: if(c != '%')
  4286                           
  4287                           ; BSR set to: 0
  4288  0112F4  0E25               	movlw	37
  4289  0112F6  0100               	movlb	0	; () banked
  4290  0112F8  19DF               	xorwf	printf@c& (0+255),w,b
  4291  0112FA  B4D8               	btfsc	status,2,c
  4292  0112FC  D005               	goto	l2327
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 540: {
  4296                           ;doprnt.c: 541: (putch(c) );
  4297  0112FE  0100               	movlb	0	; () banked
  4298  011300  51DF               	movf	printf@c& (0+255),w,b
  4299  011302  ECCD  F0A4         	call	_putch
  4300                           
  4301                           ;doprnt.c: 542: continue;
  4302  011306  D0BF               	goto	u8420
  4303  011308                     l2327:
  4304                           
  4305                           ;doprnt.c: 543: }
  4306                           ;doprnt.c: 548: flag = 0;
  4307  011308  0E00               	movlw	0
  4308  01130A  0100               	movlb	0	; () banked
  4309  01130C  6FDA               	movwf	printf@flag& (0+255),b
  4310                           
  4311                           ;doprnt.c: 635: switch(c = *f++) {
  4312  01130E  D014               	goto	l2328
  4313  011310                     
  4314                           ; BSR set to: 0
  4315                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4316                           
  4317                           ; BSR set to: 0
  4318  011310  C0DB  FFD9         	movff	printf@ap,fsr2l
  4319  011314  C0DC  FFDA         	movff	printf@ap+1,fsr2h
  4320  011318  50DF               	movf	indf2,w,c
  4321  01131A  0100               	movlb	0	; () banked
  4322  01131C  6FDF               	movwf	printf@c& (0+255),b
  4323                           
  4324                           ; BSR set to: 0
  4325  01131E  0E02               	movlw	2
  4326  011320  0100               	movlb	0	; () banked
  4327  011322  27DB               	addwf	printf@ap& (0+255),f,b
  4328  011324  0E00               	movlw	0
  4329  011326  23DC               	addwfc	(printf@ap+1)& (0+255),f,b
  4330  011328                     
  4331                           ; BSR set to: 0
  4332                           ;doprnt.c: 809: (putch(c) );
  4333                           
  4334                           ; BSR set to: 0
  4335  011328  0100               	movlb	0	; () banked
  4336  01132A  51DF               	movf	printf@c& (0+255),w,b
  4337  01132C  ECCD  F0A4         	call	_putch
  4338                           
  4339                           ;doprnt.c: 810: continue;
  4340  011330  D0AA               	goto	u8420
  4341  011332                     
  4342                           ;doprnt.c: 818: flag |= 0x40;
  4343  011332  0100               	movlb	0	; () banked
  4344  011334  8DDA               	bsf	printf@flag& (0+255),6,b
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 822: }
  4348                           
  4349                           ;doprnt.c: 819: break;
  4350  011336  D01E               	goto	l2333
  4351  011338                     l2328:
  4352                           
  4353                           ; BSR set to: 0
  4354                           
  4355                           ; BSR set to: 0
  4356  011338  C0D0  FFF6         	movff	printf@f,tblptrl
  4357  01133C  C0D1  FFF7         	movff	printf@f+1,tblptrh
  4358  011340  0100               	movlb	0	; () banked
  4359  011342  4BD0               	infsnz	printf@f& (0+255),f,b
  4360  011344  2BD1               	incf	(printf@f+1)& (0+255),f,b
  4361  011346                     	if	0	;tblptru may be non-zero
  4362  011346                     	endif
  4363  011346                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4364  011346  0E00               	movlw	low (__mediumconst shr (0+16))
  4365  011348  6EF8               	movwf	tblptru,c
  4366  01134A                     	endif
  4367  01134A  0008               	tblrd		*
  4368  01134C  CFF5 F0DF          	movff	tablat,printf@c
  4369  011350  0100               	movlb	0	; () banked
  4370  011352  51DF               	movf	printf@c& (0+255),w,b
  4371                           
  4372                           ; Switch size 1, requested type "space"
  4373                           ; Number of cases is 5, Range of values is 0 to 117
  4374                           ; switch strategies available:
  4375                           ; Name         Instructions Cycles
  4376                           ; simple_byte           16     9 (average)
  4377                           ;	Chosen strategy is simple_byte
  4378  011354  0A00               	xorlw	0	; case 0
  4379  011356  B4D8               	btfsc	status,2,c
  4380  011358  0012               	return	
  4381  01135A  0A63               	xorlw	99	; case 99
  4382  01135C  B4D8               	btfsc	status,2,c
  4383  01135E  D7D8               	goto	l2334
  4384  011360  0A07               	xorlw	7	; case 100
  4385  011362  B4D8               	btfsc	status,2,c
  4386  011364  D007               	goto	l2333
  4387  011366  0A0D               	xorlw	13	; case 105
  4388  011368  B4D8               	btfsc	status,2,c
  4389  01136A  D004               	goto	l2333
  4390  01136C  0A1C               	xorlw	28	; case 117
  4391  01136E  B4D8               	btfsc	status,2,c
  4392  011370  D7E0               	goto	l2336
  4393  011372  D7DA               	goto	l2335
  4394  011374                     l2333:
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4398  011374  0100               	movlb	0	; () banked
  4399  011376  BDDA               	btfsc	printf@flag& (0+255),6,b
  4400  011378  D019               	goto	l2337
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;doprnt.c: 1253: {
  4404                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4405  01137A  C0DB  FFD9         	movff	printf@ap,fsr2l
  4406  01137E  C0DC  FFDA         	movff	printf@ap+1,fsr2h
  4407  011382  CFDE F0DD          	movff	postinc2,printf@val
  4408  011386  CFDD F0DE          	movff	postdec2,printf@val+1
  4409                           
  4410                           ; BSR set to: 0
  4411  01138A  0E02               	movlw	2
  4412  01138C  0100               	movlb	0	; () banked
  4413  01138E  27DB               	addwf	printf@ap& (0+255),f,b
  4414  011390  0E00               	movlw	0
  4415  011392  23DC               	addwfc	(printf@ap+1)& (0+255),f,b
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 1261: if((int)val < 0) {
  4419  011394  0100               	movlb	0	; () banked
  4420  011396  AFDE               	btfss	(printf@val+1)& (0+255),7,b
  4421  011398  D016               	goto	l2339
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 1262: flag |= 0x03;
  4425  01139A  0E03               	movlw	3
  4426  01139C  0100               	movlb	0	; () banked
  4427  01139E  13DA               	iorwf	printf@flag& (0+255),f,b
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1263: val = -val;
  4431  0113A0  0100               	movlb	0	; () banked
  4432  0113A2  6DDD               	negf	printf@val& (0+255),b
  4433  0113A4  1FDE               	comf	(printf@val+1)& (0+255),f,b
  4434  0113A6  B0D8               	btfsc	status,0,c
  4435  0113A8  2BDE               	incf	(printf@val+1)& (0+255),f,b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 1264: }
  4439                           ;doprnt.c: 1266: }
  4440  0113AA  D00D               	goto	l2339
  4441  0113AC                     l2337:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 1268: else
  4445                           ;doprnt.c: 1273: {
  4446                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4447                           
  4448                           ; BSR set to: 0
  4449  0113AC  C0DB  FFD9         	movff	printf@ap,fsr2l
  4450  0113B0  C0DC  FFDA         	movff	printf@ap+1,fsr2h
  4451  0113B4  CFDE F0DD          	movff	postinc2,printf@val
  4452  0113B8  CFDD F0DE          	movff	postdec2,printf@val+1
  4453                           
  4454                           ; BSR set to: 0
  4455  0113BC  0E02               	movlw	2
  4456  0113BE  0100               	movlb	0	; () banked
  4457  0113C0  27DB               	addwf	printf@ap& (0+255),f,b
  4458  0113C2  0E00               	movlw	0
  4459  0113C4  23DC               	addwfc	(printf@ap+1)& (0+255),f,b
  4460  0113C6                     l2339:
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;doprnt.c: 1287: }
  4464                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4465                           
  4466                           ; BSR set to: 0
  4467  0113C6  0E01               	movlw	1
  4468  0113C8  0100               	movlb	0	; () banked
  4469  0113CA  6FDF               	movwf	printf@c& (0+255),b
  4470  0113CC                     l12516:
  4471                           
  4472                           ; BSR set to: 0
  4473  0113CC  0E05               	movlw	5
  4474  0113CE  0100               	movlb	0	; () banked
  4475  0113D0  19DF               	xorwf	printf@c& (0+255),w,b
  4476  0113D2  B4D8               	btfsc	status,2,c
  4477  0113D4  D019               	goto	u8400
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;doprnt.c: 1306: if(val < dpowers[c])
  4481                           
  4482                           ; BSR set to: 0
  4483                           
  4484                           ; BSR set to: 0
  4485  0113D6  0100               	movlb	0	; () banked
  4486  0113D8  51DF               	movf	printf@c& (0+255),w,b
  4487  0113DA  0D02               	mullw	2
  4488  0113DC  0EB7               	movlw	low _dpowers
  4489  0113DE  24F3               	addwf	prodl,w,c
  4490  0113E0  6EF6               	movwf	tblptrl,c
  4491  0113E2  0EFD               	movlw	high _dpowers
  4492  0113E4  20F4               	addwfc	prodh,w,c
  4493  0113E6  6EF7               	movwf	tblptrh,c
  4494  0113E8                     	if	1	;There are 3 active tblptr bytes
  4495  0113E8  6AF8               	clrf	tblptru,c
  4496  0113EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4497  0113EC  22F8               	addwfc	tblptru,f,c
  4498  0113EE                     	endif
  4499  0113EE  0009               	tblrd		*+
  4500  0113F0  50F5               	movf	tablat,w,c
  4501  0113F2  0100               	movlb	0	; () banked
  4502  0113F4  5DDD               	subwf	printf@val& (0+255),w,b
  4503  0113F6  0009               	tblrd		*+
  4504  0113F8  50F5               	movf	tablat,w,c
  4505  0113FA  0100               	movlb	0	; () banked
  4506  0113FC  59DE               	subwfb	(printf@val+1)& (0+255),w,b
  4507  0113FE  A0D8               	btfss	status,0,c
  4508  011400  D003               	goto	u8400
  4509                           
  4510                           ; BSR set to: 0
  4511                           
  4512                           ; BSR set to: 0
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;doprnt.c: 1307: break;
  4516  011402  0100               	movlb	0	; () banked
  4517  011404  2BDF               	incf	printf@c& (0+255),f,b
  4518  011406  D7E2               	goto	l12516
  4519  011408                     u8400:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;doprnt.c: 1422: {
  4523                           ;doprnt.c: 1438: if(flag & 0x03)
  4524                           
  4525                           ; BSR set to: 0
  4526  011408  C0DA  F0D8         	movff	printf@flag,??_printf
  4527  01140C  0E03               	movlw	3
  4528  01140E  0100               	movlb	0	; () banked
  4529  011410  17D8               	andwf	??_printf& (0+255),f,b
  4530  011412  B4D8               	btfsc	status,2,c
  4531  011414  D003               	goto	l2343
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 1439: (putch('-') );
  4535  011416  0E2D               	movlw	45
  4536  011418  ECCD  F0A4         	call	_putch
  4537  01141C                     l2343:
  4538                           
  4539                           ;doprnt.c: 1469: }
  4540                           ;doprnt.c: 1472: prec = c;
  4541  01141C  C0DF  F0D9         	movff	printf@c,printf@prec
  4542                           
  4543                           ;doprnt.c: 1474: while(prec--) {
  4544  011420  D02C               	goto	l2344
  4545  011422                     
  4546                           ;doprnt.c: 1478: {
  4547                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4548  011422  0100               	movlb	0	; () banked
  4549  011424  51D9               	movf	printf@prec& (0+255),w,b
  4550  011426  0D02               	mullw	2
  4551  011428  0EB7               	movlw	low _dpowers
  4552  01142A  24F3               	addwf	prodl,w,c
  4553  01142C  6EF6               	movwf	tblptrl,c
  4554  01142E  0EFD               	movlw	high _dpowers
  4555  011430  20F4               	addwfc	prodh,w,c
  4556  011432  6EF7               	movwf	tblptrh,c
  4557  011434                     	if	1	;There are 3 active tblptr bytes
  4558  011434  6AF8               	clrf	tblptru,c
  4559  011436  0E00               	movlw	low (__mediumconst shr (0+16))
  4560  011438  22F8               	addwfc	tblptru,f,c
  4561  01143A                     	endif
  4562  01143A  0009               	tblrd		*+
  4563  01143C  CFF5 F0BD          	movff	tablat,___lwdiv@divisor
  4564  011440  000A               	tblrd		*-
  4565  011442  CFF5 F0BE          	movff	tablat,___lwdiv@divisor+1
  4566  011446  C0DD  F0BB         	movff	printf@val,___lwdiv@dividend
  4567  01144A  C0DE  F0BC         	movff	printf@val+1,___lwdiv@dividend+1
  4568  01144E  EC02  F09B         	call	___lwdiv	;wreg free
  4569  011452  C0BB  F0C2         	movff	?___lwdiv,___lwmod@dividend
  4570  011456  C0BC  F0C3         	movff	?___lwdiv+1,___lwmod@dividend+1
  4571  01145A  0E00               	movlw	0
  4572  01145C  0100               	movlb	0	; () banked
  4573  01145E  6FC5               	movwf	(___lwmod@divisor+1)& (0+255),b
  4574  011460  0E0A               	movlw	10
  4575  011462  6FC4               	movwf	___lwmod@divisor& (0+255),b
  4576  011464  ECAA  F09E         	call	___lwmod	;wreg free
  4577  011468  0100               	movlb	0	; () banked
  4578  01146A  51C2               	movf	?___lwmod& (0+255),w,b
  4579  01146C  0F30               	addlw	48
  4580  01146E  0100               	movlb	0	; () banked
  4581  011470  6FDF               	movwf	printf@c& (0+255),b
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;doprnt.c: 1523: }
  4585                           ;doprnt.c: 1524: (putch(c) );
  4586  011472  0100               	movlb	0	; () banked
  4587  011474  51DF               	movf	printf@c& (0+255),w,b
  4588  011476  ECCD  F0A4         	call	_putch
  4589  01147A                     l2344:
  4590  01147A  0100               	movlb	0	; () banked
  4591  01147C  07D9               	decf	printf@prec& (0+255),f,b
  4592  01147E  0100               	movlb	0	; () banked
  4593  011480  29D9               	incf	printf@prec& (0+255),w,b
  4594  011482  A4D8               	btfss	status,2,c
  4595  011484  D7CE               	goto	l2345
  4596  011486                     u8420:
  4597                           
  4598                           ; BSR set to: 0
  4599                           
  4600                           ; BSR set to: 0
  4601  011486  C0D0  FFF6         	movff	printf@f,tblptrl
  4602  01148A  C0D1  FFF7         	movff	printf@f+1,tblptrh
  4603  01148E  0100               	movlb	0	; () banked
  4604  011490  4BD0               	infsnz	printf@f& (0+255),f,b
  4605  011492  2BD1               	incf	(printf@f+1)& (0+255),f,b
  4606  011494                     	if	0	;tblptru may be non-zero
  4607  011494                     	endif
  4608  011494                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4609  011494  0E00               	movlw	low (__mediumconst shr (0+16))
  4610  011496  6EF8               	movwf	tblptru,c
  4611  011498                     	endif
  4612  011498  0008               	tblrd		*
  4613  01149A  CFF5 F0DF          	movff	tablat,printf@c
  4614  01149E  0100               	movlb	0	; () banked
  4615  0114A0  51DF               	movf	printf@c& (0+255),w,b
  4616  0114A2  B4D8               	btfsc	status,2,c
  4617  0114A4  0012               	return	
  4618  0114A6  D726               	goto	l2326
  4619  0114A8                     __end_of_printf:
  4620                           	opt stack 0
  4621                           tosu	equ	0xFFF
  4622                           tosh	equ	0xFFE
  4623                           tosl	equ	0xFFD
  4624                           pclath	equ	0xFFA
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _putch *****************
  4644 ;; Defined at:
  4645 ;;		line 454 in file "Library/Console.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  c               1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  c               1   20[BANK0 ] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;Total ram usage:        1 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:   11
  4666 ;; This function calls:
  4667 ;;		_Console_PrintChar
  4668 ;; This function is called by:
  4669 ;;		_printf
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text13
  4674  01499A                     __ptext13:
  4675                           	opt stack 0
  4676  01499A                     _putch:
  4677                           	opt stack 17
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;incstack = 0
  4681                           ;putch@c stored from wreg
  4682  01499A  0100               	movlb	0	; () banked
  4683  01499C  6FCF               	movwf	putch@c& (0+255),b
  4684                           
  4685                           ;Console.c: 456: Console_PrintChar(c);
  4686  01499E  0100               	movlb	0	; () banked
  4687  0149A0  51CF               	movf	putch@c& (0+255),w,b
  4688  0149A2  EC34  F08B         	call	_Console_PrintChar
  4689  0149A6  0012               	return		;funcret
  4690  0149A8                     __end_of_putch:
  4691                           	opt stack 0
  4692                           tosu	equ	0xFFF
  4693                           tosh	equ	0xFFE
  4694                           tosl	equ	0xFFD
  4695                           pclath	equ	0xFFA
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           postdec1	equ	0xFE5
  4705                           fsr1h	equ	0xFE2
  4706                           fsr1l	equ	0xFE1
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _Console_PrintChar *****************
  4715 ;; Defined at:
  4716 ;;		line 322 in file "Library/Console.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  pInput          1    wreg     unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  pInput          1   19[BANK0 ] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;Total ram usage:        4 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:   10
  4737 ;; This function calls:
  4738 ;;		_Console_Backspace
  4739 ;;		_Console_FormFeed
  4740 ;;		_Console_IncrementCursor
  4741 ;;		_Console_NewLine
  4742 ;;		_Console_ResetCursor
  4743 ;;		_Console_Tab
  4744 ;; This function is called by:
  4745 ;;		_putch
  4746 ;;		_Console_PrintString
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text14
  4751  011668                     __ptext14:
  4752                           	opt stack 0
  4753  011668                     _Console_PrintChar:
  4754                           	opt stack 17
  4755                           
  4756                           ;incstack = 0
  4757                           ;Console_PrintChar@pInput stored from wreg
  4758  011668  0100               	movlb	0	; () banked
  4759  01166A  6FCE               	movwf	Console_PrintChar@pInput& (0+255),b
  4760                           
  4761                           ;Console.c: 324: switch(pInput)
  4762  01166C  D0B1               	goto	l1036
  4763  01166E                     
  4764                           ;Console.c: 327: case '\n':
  4765                           ;Console.c: 328: Console_NewLine();
  4766  01166E  ECBE  F098         	call	_Console_NewLine	;wreg free
  4767                           
  4768                           ;Console.c: 329: return;
  4769  011672  0012               	return	
  4770  011674                     
  4771                           ;Console.c: 331: Console_Backspace();
  4772  011674  EC0C  F09F         	call	_Console_Backspace	;wreg free
  4773                           
  4774                           ;Console.c: 332: return;
  4775  011678  0012               	return	
  4776  01167A                     
  4777                           ;Console.c: 334: Console_FormFeed();
  4778  01167A  EC38  F09A         	call	_Console_FormFeed	;wreg free
  4779                           
  4780                           ;Console.c: 335: return;
  4781  01167E  0012               	return	
  4782  011680                     
  4783                           ;Console.c: 337: Console_Tab();
  4784  011680  EC44  F094         	call	_Console_Tab	;wreg free
  4785                           
  4786                           ;Console.c: 338: return;
  4787  011684  0012               	return	
  4788  011686                     
  4789                           ;Console.c: 340: Console_IncrementCursor();
  4790  011686  EC13  F09E         	call	_Console_IncrementCursor	;wreg free
  4791                           
  4792                           ;Console.c: 341: return;
  4793  01168A  0012               	return	
  4794  01168C                     
  4795                           ;Console.c: 343: Console_ResetCursor();
  4796  01168C  ECA7  F0A3         	call	_Console_ResetCursor	;wreg free
  4797                           
  4798                           ;Console.c: 344: return;
  4799  011690  0012               	return	
  4800  011692                     
  4801                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4802                           
  4803                           ;Console.c: 349: default:
  4804  011692  C0CE  F0CB         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4805  011696  0E7F               	movlw	127
  4806  011698  0100               	movlb	0	; () banked
  4807  01169A  17CB               	andwf	??_Console_PrintChar& (0+255),f,b
  4808  01169C  0100               	movlb	0	; () banked
  4809  01169E  5192               	movf	_lBufferY& (0+255),w,b
  4810  0116A0  0D14               	mullw	20
  4811  0116A2  0EAA               	movlw	low _lBuffer
  4812  0116A4  0100               	movlb	0	; () banked
  4813  0116A6  6FCC               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4814  0116A8  0E04               	movlw	high _lBuffer
  4815  0116AA  0100               	movlb	0	; () banked
  4816  0116AC  6FCD               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4817  0116AE  50F3               	movf	prodl,w,c
  4818  0116B0  0100               	movlb	0	; () banked
  4819  0116B2  27CC               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4820  0116B4  50F4               	movf	prodh,w,c
  4821  0116B6  0100               	movlb	0	; () banked
  4822  0116B8  23CD               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4823  0116BA  0100               	movlb	0	; () banked
  4824  0116BC  5193               	movf	_lBufferX& (0+255),w,b
  4825  0116BE  0D01               	mullw	1
  4826  0116C0  50F3               	movf	prodl,w,c
  4827  0116C2  0100               	movlb	0	; () banked
  4828  0116C4  25CC               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4829  0116C6  6ED9               	movwf	fsr2l,c
  4830  0116C8  50F4               	movf	prodh,w,c
  4831  0116CA  0100               	movlb	0	; () banked
  4832  0116CC  21CD               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4833  0116CE  6EDA               	movwf	fsr2h,c
  4834  0116D0  50DF               	movf	indf2,w,c
  4835  0116D2  0B7F               	andlw	127
  4836  0116D4  0100               	movlb	0	; () banked
  4837  0116D6  19CB               	xorwf	??_Console_PrintChar& (0+255),w,b
  4838  0116D8  B4D8               	btfsc	status,2,c
  4839  0116DA  D02E               	goto	l1047
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;Console.c: 351: {
  4843                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4844  0116DC  0E01               	movlw	1
  4845  0116DE  0100               	movlb	0	; () banked
  4846  0116E0  6FFF               	movwf	_change& (0+255),b
  4847                           
  4848                           ; BSR set to: 0
  4849  0116E2  0100               	movlb	0	; () banked
  4850  0116E4  5192               	movf	_lBufferY& (0+255),w,b
  4851  0116E6  0D14               	mullw	20
  4852  0116E8  0EAA               	movlw	low _lBuffer
  4853  0116EA  0100               	movlb	0	; () banked
  4854  0116EC  6FCB               	movwf	??_Console_PrintChar& (0+255),b
  4855  0116EE  0E04               	movlw	high _lBuffer
  4856  0116F0  0100               	movlb	0	; () banked
  4857  0116F2  6FCC               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4858  0116F4  50F3               	movf	prodl,w,c
  4859  0116F6  0100               	movlb	0	; () banked
  4860  0116F8  27CB               	addwf	??_Console_PrintChar& (0+255),f,b
  4861  0116FA  50F4               	movf	prodh,w,c
  4862  0116FC  0100               	movlb	0	; () banked
  4863  0116FE  23CC               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4864  011700  0100               	movlb	0	; () banked
  4865  011702  5193               	movf	_lBufferX& (0+255),w,b
  4866  011704  0D01               	mullw	1
  4867  011706  50F3               	movf	prodl,w,c
  4868  011708  0100               	movlb	0	; () banked
  4869  01170A  25CB               	addwf	??_Console_PrintChar& (0+255),w,b
  4870  01170C  6ED9               	movwf	fsr2l,c
  4871  01170E  50F4               	movf	prodh,w,c
  4872  011710  0100               	movlb	0	; () banked
  4873  011712  21CC               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4874  011714  6EDA               	movwf	fsr2h,c
  4875  011716  0100               	movlb	0	; () banked
  4876  011718  51CE               	movf	Console_PrintChar@pInput& (0+255),w,b
  4877  01171A  0980               	iorlw	128
  4878  01171C  6EDF               	movwf	indf2,c
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4882  01171E  0100               	movlb	0	; () banked
  4883  011720  5192               	movf	_lBufferY& (0+255),w,b
  4884  011722  0D02               	mullw	2
  4885  011724  0E00               	movlw	low _lCBuffer
  4886  011726  24F3               	addwf	prodl,w,c
  4887  011728  6ED9               	movwf	fsr2l,c
  4888  01172A  0E03               	movlw	high _lCBuffer
  4889  01172C  20F4               	addwfc	prodh,w,c
  4890  01172E  6EDA               	movwf	fsr2h,c
  4891  011730  C0FD  FFDE         	movff	_gForecolour,postinc2
  4892  011734  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4893  011738                     l1047:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;Console.c: 354: }
  4897                           ;Console.c: 368: if(Console_IncrementCursor())
  4898                           
  4899                           ; BSR set to: 0
  4900  011738  EC13  F09E         	call	_Console_IncrementCursor	;wreg free
  4901  01173C  0900               	iorlw	0
  4902  01173E  B4D8               	btfsc	status,2,c
  4903  011740  0012               	return	
  4904                           
  4905                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4906  011742  C0CE  F0CB         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4907  011746  0E7F               	movlw	127
  4908  011748  0100               	movlb	0	; () banked
  4909  01174A  17CB               	andwf	??_Console_PrintChar& (0+255),f,b
  4910  01174C  0100               	movlb	0	; () banked
  4911  01174E  5192               	movf	_lBufferY& (0+255),w,b
  4912  011750  0D14               	mullw	20
  4913  011752  0EAA               	movlw	low _lBuffer
  4914  011754  0100               	movlb	0	; () banked
  4915  011756  6FCC               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4916  011758  0E04               	movlw	high _lBuffer
  4917  01175A  0100               	movlb	0	; () banked
  4918  01175C  6FCD               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4919  01175E  50F3               	movf	prodl,w,c
  4920  011760  0100               	movlb	0	; () banked
  4921  011762  27CC               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4922  011764  50F4               	movf	prodh,w,c
  4923  011766  0100               	movlb	0	; () banked
  4924  011768  23CD               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4925  01176A  0100               	movlb	0	; () banked
  4926  01176C  5193               	movf	_lBufferX& (0+255),w,b
  4927  01176E  0D01               	mullw	1
  4928  011770  50F3               	movf	prodl,w,c
  4929  011772  0100               	movlb	0	; () banked
  4930  011774  25CC               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4931  011776  6ED9               	movwf	fsr2l,c
  4932  011778  50F4               	movf	prodh,w,c
  4933  01177A  0100               	movlb	0	; () banked
  4934  01177C  21CD               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4935  01177E  6EDA               	movwf	fsr2h,c
  4936  011780  50DF               	movf	indf2,w,c
  4937  011782  0B7F               	andlw	127
  4938  011784  0100               	movlb	0	; () banked
  4939  011786  19CB               	xorwf	??_Console_PrintChar& (0+255),w,b
  4940  011788  B4D8               	btfsc	status,2,c
  4941  01178A  0012               	return	
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4945  01178C  0E01               	movlw	1
  4946  01178E  0100               	movlb	0	; () banked
  4947  011790  6FFF               	movwf	_change& (0+255),b
  4948                           
  4949                           ; BSR set to: 0
  4950  011792  0100               	movlb	0	; () banked
  4951  011794  5192               	movf	_lBufferY& (0+255),w,b
  4952  011796  0D14               	mullw	20
  4953  011798  0EAA               	movlw	low _lBuffer
  4954  01179A  0100               	movlb	0	; () banked
  4955  01179C  6FCB               	movwf	??_Console_PrintChar& (0+255),b
  4956  01179E  0E04               	movlw	high _lBuffer
  4957  0117A0  0100               	movlb	0	; () banked
  4958  0117A2  6FCC               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4959  0117A4  50F3               	movf	prodl,w,c
  4960  0117A6  0100               	movlb	0	; () banked
  4961  0117A8  27CB               	addwf	??_Console_PrintChar& (0+255),f,b
  4962  0117AA  50F4               	movf	prodh,w,c
  4963  0117AC  0100               	movlb	0	; () banked
  4964  0117AE  23CC               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4965  0117B0  0100               	movlb	0	; () banked
  4966  0117B2  5193               	movf	_lBufferX& (0+255),w,b
  4967  0117B4  0D01               	mullw	1
  4968  0117B6  50F3               	movf	prodl,w,c
  4969  0117B8  0100               	movlb	0	; () banked
  4970  0117BA  25CB               	addwf	??_Console_PrintChar& (0+255),w,b
  4971  0117BC  6ED9               	movwf	fsr2l,c
  4972  0117BE  50F4               	movf	prodh,w,c
  4973  0117C0  0100               	movlb	0	; () banked
  4974  0117C2  21CC               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4975  0117C4  6EDA               	movwf	fsr2h,c
  4976  0117C6  0100               	movlb	0	; () banked
  4977  0117C8  51CE               	movf	Console_PrintChar@pInput& (0+255),w,b
  4978  0117CA  0980               	iorlw	128
  4979  0117CC  6EDF               	movwf	indf2,c
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;Console.c: 372: };
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;Console.c: 371: return;
  4986                           
  4987                           ; BSR set to: 0
  4988                           
  4989                           ; BSR set to: 0
  4990  0117CE  0012               	return	
  4991  0117D0                     l1036:
  4992                           
  4993                           ; BSR set to: 0
  4994  0117D0  0100               	movlb	0	; () banked
  4995  0117D2  51CE               	movf	Console_PrintChar@pInput& (0+255),w,b
  4996                           
  4997                           ; Switch size 1, requested type "space"
  4998                           ; Number of cases is 8, Range of values is 7 to 35
  4999                           ; switch strategies available:
  5000                           ; Name         Instructions Cycles
  5001                           ; simple_byte           25    13 (average)
  5002                           ;	Chosen strategy is simple_byte
  5003  0117D4  0A07               	xorlw	7	; case 7
  5004  0117D6  B4D8               	btfsc	status,2,c
  5005  0117D8  D756               	goto	l1043
  5006  0117DA  0A0F               	xorlw	15	; case 8
  5007  0117DC  B4D8               	btfsc	status,2,c
  5008  0117DE  D74A               	goto	l1040
  5009  0117E0  0A01               	xorlw	1	; case 9
  5010  0117E2  B4D8               	btfsc	status,2,c
  5011  0117E4  D74D               	goto	l1042
  5012  0117E6  0A03               	xorlw	3	; case 10
  5013  0117E8  B4D8               	btfsc	status,2,c
  5014  0117EA  D741               	goto	l1037
  5015  0117EC  0A06               	xorlw	6	; case 12
  5016  0117EE  B4D8               	btfsc	status,2,c
  5017  0117F0  D744               	goto	l1041
  5018  0117F2  0A01               	xorlw	1	; case 13
  5019  0117F4  B4D8               	btfsc	status,2,c
  5020  0117F6  D73B               	goto	l1037
  5021  0117F8  0A2D               	xorlw	45	; case 32
  5022  0117FA  B4D8               	btfsc	status,2,c
  5023  0117FC  D74A               	goto	l1045
  5024  0117FE  0A03               	xorlw	3	; case 35
  5025  011800  B4D8               	btfsc	status,2,c
  5026  011802  D744               	goto	l1044
  5027  011804  D746               	goto	l1045
  5028  011806                     __end_of_Console_PrintChar:
  5029                           	opt stack 0
  5030                           tosu	equ	0xFFF
  5031                           tosh	equ	0xFFE
  5032                           tosl	equ	0xFFD
  5033                           pclath	equ	0xFFA
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           postinc0	equ	0xFEE
  5041                           wreg	equ	0xFE8
  5042                           postdec1	equ	0xFE5
  5043                           fsr1h	equ	0xFE2
  5044                           fsr1l	equ	0xFE1
  5045                           indf2	equ	0xFDF
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _Console_Tab *****************
  5053 ;; Defined at:
  5054 ;;		line 260 in file "Library/Console.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  c               1   15[BANK0 ] unsigned char 
  5059 ;;  i               1   14[BANK0 ] unsigned char 
  5060 ;;  t               1   13[BANK0 ] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;Total ram usage:        8 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    9
  5077 ;; This function calls:
  5078 ;;		_Console_ClearCursor
  5079 ;;		_Console_IncrementCursor
  5080 ;;		___awdiv
  5081 ;; This function is called by:
  5082 ;;		_Console_PrintChar
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text15
  5087  012888                     __ptext15:
  5088                           	opt stack 0
  5089  012888                     _Console_Tab:
  5090                           	opt stack 17
  5091                           
  5092                           ;Console.c: 262: UINT8 i = 0;
  5093                           
  5094                           ;incstack = 0
  5095  012888  0E00               	movlw	0
  5096  01288A  0100               	movlb	0	; () banked
  5097  01288C  6FC9               	movwf	Console_Tab@i& (0+255),b
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  5101  01288E  0EFA               	movlw	250
  5102  012890  2447               	addwf	_gCursor,w,c
  5103  012892  0100               	movlb	0	; () banked
  5104  012894  6FBB               	movwf	___awdiv@dividend& (0+255),b
  5105  012896  0EFF               	movlw	255
  5106  012898  2048               	addwfc	_gCursor+1,w,c
  5107  01289A  0100               	movlb	0	; () banked
  5108  01289C  6FBC               	movwf	(___awdiv@dividend+1)& (0+255),b
  5109  01289E  0E00               	movlw	0
  5110  0128A0  0100               	movlb	0	; () banked
  5111  0128A2  6FBE               	movwf	(___awdiv@divisor+1)& (0+255),b
  5112  0128A4  0E06               	movlw	6
  5113  0128A6  6FBD               	movwf	___awdiv@divisor& (0+255),b
  5114  0128A8  ECA5  F094         	call	___awdiv	;wreg free
  5115  0128AC  0100               	movlb	0	; () banked
  5116  0128AE  51BB               	movf	?___awdiv& (0+255),w,b
  5117  0128B0  0100               	movlb	0	; () banked
  5118  0128B2  6FCA               	movwf	Console_Tab@c& (0+255),b
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;Console.c: 264: UINT8 t = c/4;
  5122  0128B4  C0CA  F0BB         	movff	Console_Tab@c,___awdiv@dividend
  5123  0128B8  0100               	movlb	0	; () banked
  5124  0128BA  6BBC               	clrf	(___awdiv@dividend+1)& (0+255),b
  5125  0128BC  0E00               	movlw	0
  5126  0128BE  0100               	movlb	0	; () banked
  5127  0128C0  6FBE               	movwf	(___awdiv@divisor+1)& (0+255),b
  5128  0128C2  0E04               	movlw	4
  5129  0128C4  6FBD               	movwf	___awdiv@divisor& (0+255),b
  5130  0128C6  ECA5  F094         	call	___awdiv	;wreg free
  5131  0128CA  0100               	movlb	0	; () banked
  5132  0128CC  51BB               	movf	?___awdiv& (0+255),w,b
  5133  0128CE  0100               	movlb	0	; () banked
  5134  0128D0  6FC8               	movwf	Console_Tab@t& (0+255),b
  5135                           
  5136                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  5137  0128D2  0E00               	movlw	0
  5138  0128D4  0100               	movlb	0	; () banked
  5139  0128D6  6FC9               	movwf	Console_Tab@i& (0+255),b
  5140  0128D8  D006               	goto	l1009
  5141  0128DA                     
  5142                           ; BSR set to: 0
  5143                           ;Console.c: 266: {
  5144                           ;Console.c: 267: Console_ClearCursor();
  5145                           
  5146                           ; BSR set to: 0
  5147  0128DA  EC9D  F0A1         	call	_Console_ClearCursor	;wreg free
  5148                           
  5149                           ;Console.c: 268: Console_IncrementCursor();
  5150  0128DE  EC13  F09E         	call	_Console_IncrementCursor	;wreg free
  5151  0128E2  0100               	movlb	0	; () banked
  5152  0128E4  2BC9               	incf	Console_Tab@i& (0+255),f,b
  5153  0128E6                     l1009:
  5154                           
  5155                           ; BSR set to: 0
  5156                           
  5157                           ; BSR set to: 0
  5158  0128E6  0100               	movlb	0	; () banked
  5159  0128E8  51C8               	movf	Console_Tab@t& (0+255),w,b
  5160  0128EA  0D04               	mullw	4
  5161  0128EC  1EF3               	comf	prodl,f,c
  5162  0128EE  1EF4               	comf	prodh,f,c
  5163  0128F0  4AF3               	infsnz	prodl,f,c
  5164  0128F2  2AF4               	incf	prodh,f,c
  5165  0128F4  0100               	movlb	0	; () banked
  5166  0128F6  51CA               	movf	Console_Tab@c& (0+255),w,b
  5167  0128F8  0100               	movlb	0	; () banked
  5168  0128FA  6FC3               	movwf	??_Console_Tab& (0+255),b
  5169  0128FC  6BC4               	clrf	(??_Console_Tab+1)& (0+255),b
  5170  0128FE  50F3               	movf	prodl,w,c
  5171  012900  0100               	movlb	0	; () banked
  5172  012902  27C3               	addwf	??_Console_Tab& (0+255),f,b
  5173  012904  50F4               	movf	prodh,w,c
  5174  012906  0100               	movlb	0	; () banked
  5175  012908  23C4               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5176  01290A  0100               	movlb	0	; () banked
  5177  01290C  1FC3               	comf	??_Console_Tab& (0+255),f,b
  5178  01290E  1FC4               	comf	(??_Console_Tab+1)& (0+255),f,b
  5179  012910  4BC3               	infsnz	??_Console_Tab& (0+255),f,b
  5180  012912  2BC4               	incf	(??_Console_Tab+1)& (0+255),f,b
  5181  012914  0E04               	movlw	4
  5182  012916  0100               	movlb	0	; () banked
  5183  012918  27C3               	addwf	??_Console_Tab& (0+255),f,b
  5184  01291A  0E00               	movlw	0
  5185  01291C  23C4               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5186  01291E  0100               	movlb	0	; () banked
  5187  012920  51C9               	movf	Console_Tab@i& (0+255),w,b
  5188  012922  0100               	movlb	0	; () banked
  5189  012924  6FC5               	movwf	(??_Console_Tab+2)& (0+255),b
  5190  012926  6BC6               	clrf	(??_Console_Tab+3)& (0+255),b
  5191  012928  0100               	movlb	0	; () banked
  5192  01292A  51C3               	movf	??_Console_Tab& (0+255),w,b
  5193  01292C  0100               	movlb	0	; () banked
  5194  01292E  5DC5               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5195  012930  0100               	movlb	0	; () banked
  5196  012932  51C6               	movf	(??_Console_Tab+3)& (0+255),w,b
  5197  012934  0A80               	xorlw	128
  5198  012936  0100               	movlb	0	; () banked
  5199  012938  6FC7               	movwf	(??_Console_Tab+4)& (0+255),b
  5200  01293A  0100               	movlb	0	; () banked
  5201  01293C  51C4               	movf	(??_Console_Tab+1)& (0+255),w,b
  5202  01293E  0A80               	xorlw	128
  5203  012940  0100               	movlb	0	; () banked
  5204  012942  59C7               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5205  012944  B0D8               	btfsc	status,0,c
  5206  012946  0012               	return	
  5207  012948  D7C8               	goto	l1010
  5208  01294A                     __end_of_Console_Tab:
  5209                           	opt stack 0
  5210                           tosu	equ	0xFFF
  5211                           tosh	equ	0xFFE
  5212                           tosl	equ	0xFFD
  5213                           pclath	equ	0xFFA
  5214                           tblptru	equ	0xFF8
  5215                           tblptrh	equ	0xFF7
  5216                           tblptrl	equ	0xFF6
  5217                           tablat	equ	0xFF5
  5218                           prodh	equ	0xFF4
  5219                           prodl	equ	0xFF3
  5220                           postinc0	equ	0xFEE
  5221                           wreg	equ	0xFE8
  5222                           postdec1	equ	0xFE5
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           postdec2	equ	0xFDD
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function ___awdiv *****************
  5233 ;; Defined at:
  5234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  dividend        2    0[BANK0 ] int 
  5237 ;;  divisor         2    2[BANK0 ] int 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  quotient        2    6[BANK0 ] int 
  5240 ;;  sign            1    5[BANK0 ] unsigned char 
  5241 ;;  counter         1    4[BANK0 ] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  2    0[BANK0 ] int 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5251 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;Total ram usage:        8 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    7
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_Console_Tab
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text16
  5266  01294A                     __ptext16:
  5267                           	opt stack 0
  5268  01294A                     ___awdiv:
  5269                           	opt stack 18
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;incstack = 0
  5273  01294A  0E00               	movlw	0
  5274  01294C  0100               	movlb	0	; () banked
  5275  01294E  6FC0               	movwf	___awdiv@sign& (0+255),b
  5276                           
  5277                           ; BSR set to: 0
  5278  012950  0100               	movlb	0	; () banked
  5279  012952  AFBE               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5280  012954  D008               	goto	l2516
  5281                           
  5282                           ; BSR set to: 0
  5283  012956  0100               	movlb	0	; () banked
  5284  012958  6DBD               	negf	___awdiv@divisor& (0+255),b
  5285  01295A  1FBE               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5286  01295C  B0D8               	btfsc	status,0,c
  5287  01295E  2BBE               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5288                           
  5289                           ; BSR set to: 0
  5290  012960  0E01               	movlw	1
  5291  012962  0100               	movlb	0	; () banked
  5292  012964  6FC0               	movwf	___awdiv@sign& (0+255),b
  5293  012966                     l2516:
  5294                           
  5295                           ; BSR set to: 0
  5296                           
  5297                           ; BSR set to: 0
  5298  012966  0100               	movlb	0	; () banked
  5299  012968  AFBC               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5300  01296A  D008               	goto	l2517
  5301                           
  5302                           ; BSR set to: 0
  5303  01296C  0100               	movlb	0	; () banked
  5304  01296E  6DBB               	negf	___awdiv@dividend& (0+255),b
  5305  012970  1FBC               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5306  012972  B0D8               	btfsc	status,0,c
  5307  012974  2BBC               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5308                           
  5309                           ; BSR set to: 0
  5310  012976  0E01               	movlw	1
  5311  012978  0100               	movlb	0	; () banked
  5312  01297A  1BC0               	xorwf	___awdiv@sign& (0+255),f,b
  5313  01297C                     l2517:
  5314                           
  5315                           ; BSR set to: 0
  5316                           
  5317                           ; BSR set to: 0
  5318  01297C  0E00               	movlw	0
  5319  01297E  0100               	movlb	0	; () banked
  5320  012980  6FC2               	movwf	(___awdiv@quotient+1)& (0+255),b
  5321  012982  0E00               	movlw	0
  5322  012984  6FC1               	movwf	___awdiv@quotient& (0+255),b
  5323                           
  5324                           ; BSR set to: 0
  5325  012986  0100               	movlb	0	; () banked
  5326  012988  51BD               	movf	___awdiv@divisor& (0+255),w,b
  5327  01298A  0100               	movlb	0	; () banked
  5328  01298C  11BE               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5329  01298E  B4D8               	btfsc	status,2,c
  5330  012990  D02C               	goto	l2524
  5331                           
  5332                           ; BSR set to: 0
  5333  012992  0E01               	movlw	1
  5334  012994  0100               	movlb	0	; () banked
  5335  012996  6FBF               	movwf	___awdiv@counter& (0+255),b
  5336  012998  D006               	goto	l2519
  5337  01299A                     
  5338                           ; BSR set to: 0
  5339                           
  5340                           ; BSR set to: 0
  5341  01299A  0100               	movlb	0	; () banked
  5342  01299C  90D8               	bcf	status,0,c
  5343  01299E  37BD               	rlcf	___awdiv@divisor& (0+255),f,b
  5344  0129A0  37BE               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5345  0129A2  0100               	movlb	0	; () banked
  5346  0129A4  2BBF               	incf	___awdiv@counter& (0+255),f,b
  5347  0129A6                     l2519:
  5348                           
  5349                           ; BSR set to: 0
  5350                           
  5351                           ; BSR set to: 0
  5352  0129A6  0100               	movlb	0	; () banked
  5353  0129A8  AFBE               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5354  0129AA  D7F7               	goto	l2520
  5355  0129AC                     u7100:
  5356                           
  5357                           ; BSR set to: 0
  5358                           
  5359                           ; BSR set to: 0
  5360                           
  5361                           ; BSR set to: 0
  5362  0129AC  0100               	movlb	0	; () banked
  5363  0129AE  90D8               	bcf	status,0,c
  5364  0129B0  37C1               	rlcf	___awdiv@quotient& (0+255),f,b
  5365  0129B2  37C2               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5366                           
  5367                           ; BSR set to: 0
  5368  0129B4  0100               	movlb	0	; () banked
  5369  0129B6  51BD               	movf	___awdiv@divisor& (0+255),w,b
  5370  0129B8  0100               	movlb	0	; () banked
  5371  0129BA  5DBB               	subwf	___awdiv@dividend& (0+255),w,b
  5372  0129BC  0100               	movlb	0	; () banked
  5373  0129BE  51BE               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5374  0129C0  0100               	movlb	0	; () banked
  5375  0129C2  59BC               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5376  0129C4  A0D8               	btfss	status,0,c
  5377  0129C6  D00A               	goto	l2523
  5378                           
  5379                           ; BSR set to: 0
  5380  0129C8  0100               	movlb	0	; () banked
  5381  0129CA  51BD               	movf	___awdiv@divisor& (0+255),w,b
  5382  0129CC  0100               	movlb	0	; () banked
  5383  0129CE  5FBB               	subwf	___awdiv@dividend& (0+255),f,b
  5384  0129D0  0100               	movlb	0	; () banked
  5385  0129D2  51BE               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5386  0129D4  0100               	movlb	0	; () banked
  5387  0129D6  5BBC               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5388                           
  5389                           ; BSR set to: 0
  5390  0129D8  0100               	movlb	0	; () banked
  5391  0129DA  81C1               	bsf	___awdiv@quotient& (0+255),0,b
  5392  0129DC                     l2523:
  5393                           
  5394                           ; BSR set to: 0
  5395                           
  5396                           ; BSR set to: 0
  5397  0129DC  0100               	movlb	0	; () banked
  5398  0129DE  90D8               	bcf	status,0,c
  5399  0129E0  33BE               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5400  0129E2  33BD               	rrcf	___awdiv@divisor& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  0129E4  0100               	movlb	0	; () banked
  5404  0129E6  2FBF               	decfsz	___awdiv@counter& (0+255),f,b
  5405  0129E8  D7E1               	goto	u7100
  5406  0129EA                     l2524:
  5407                           
  5408                           ; BSR set to: 0
  5409                           
  5410                           ; BSR set to: 0
  5411                           
  5412                           ; BSR set to: 0
  5413  0129EA  0100               	movlb	0	; () banked
  5414  0129EC  51C0               	movf	___awdiv@sign& (0+255),w,b
  5415  0129EE  0100               	movlb	0	; () banked
  5416  0129F0  B4D8               	btfsc	status,2,c
  5417  0129F2  D005               	goto	l2525
  5418                           
  5419                           ; BSR set to: 0
  5420  0129F4  0100               	movlb	0	; () banked
  5421  0129F6  6DC1               	negf	___awdiv@quotient& (0+255),b
  5422  0129F8  1FC2               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5423  0129FA  B0D8               	btfsc	status,0,c
  5424  0129FC  2BC2               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5425  0129FE                     l2525:
  5426                           
  5427                           ; BSR set to: 0
  5428                           
  5429                           ; BSR set to: 0
  5430  0129FE  C0C1  F0BB         	movff	___awdiv@quotient,?___awdiv
  5431  012A02  C0C2  F0BC         	movff	___awdiv@quotient+1,?___awdiv+1
  5432  012A06  0012               	return	
  5433  012A08                     __end_of___awdiv:
  5434                           	opt stack 0
  5435                           tosu	equ	0xFFF
  5436                           tosh	equ	0xFFE
  5437                           tosl	equ	0xFFD
  5438                           pclath	equ	0xFFA
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           postdec1	equ	0xFE5
  5448                           fsr1h	equ	0xFE2
  5449                           fsr1l	equ	0xFE1
  5450                           indf2	equ	0xFDF
  5451                           postinc2	equ	0xFDE
  5452                           postdec2	equ	0xFDD
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function _Console_IncrementCursor *****************
  5458 ;; Defined at:
  5459 ;;		line 243 in file "Library/Console.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      unsigned char 
  5466 ;; Registers used:
  5467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;Total ram usage:        2 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    8
  5480 ;; This function calls:
  5481 ;;		_Console_FormFeed
  5482 ;;		_Console_NewLine
  5483 ;; This function is called by:
  5484 ;;		_Console_Tab
  5485 ;;		_Console_PrintChar
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text17
  5490  013C26                     __ptext17:
  5491                           	opt stack 0
  5492  013C26                     _Console_IncrementCursor:
  5493                           	opt stack 17
  5494                           
  5495                           ;Console.c: 246: lBufferX += 1;
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;incstack = 0
  5499  013C26  0100               	movlb	0	; () banked
  5500  013C28  2B93               	incf	_lBufferX& (0+255),f,b
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;Console.c: 248: gCursor.x += 6;
  5504  013C2A  0E06               	movlw	6
  5505  013C2C  2647               	addwf	_gCursor,f,c
  5506  013C2E  0E00               	movlw	0
  5507  013C30  2248               	addwfc	_gCursor+1,f,c
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5511  013C32  0E06               	movlw	6
  5512  013C34  2447               	addwf	_gCursor,w,c
  5513  013C36  0100               	movlb	0	; () banked
  5514  013C38  6FBF               	movwf	??_Console_IncrementCursor& (0+255),b
  5515  013C3A  0E00               	movlw	0
  5516  013C3C  2048               	addwfc	_gCursor+1,w,c
  5517  013C3E  0100               	movlb	0	; () banked
  5518  013C40  6FC0               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5519  013C42  0100               	movlb	0	; () banked
  5520  013C44  BFC0               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5521  013C46  D009               	goto	l1004
  5522  013C48  0100               	movlb	0	; () banked
  5523  013C4A  51C0               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5524  013C4C  E104               	bnz	u7010
  5525  013C4E  0E80               	movlw	128
  5526  013C50  0100               	movlb	0	; () banked
  5527  013C52  5DBF               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5528  013C54  B0D8               	btfsc	status,0,c
  5529  013C56                     u7010:
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;Console.c: 250: Console_NewLine();
  5533  013C56  ECBE  F098         	call	_Console_NewLine	;wreg free
  5534  013C5A                     l1004:
  5535                           
  5536                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5537  013C5A  0E08               	movlw	8
  5538  013C5C  2449               	addwf	_gCursor+2,w,c
  5539  013C5E  0100               	movlb	0	; () banked
  5540  013C60  6FBF               	movwf	??_Console_IncrementCursor& (0+255),b
  5541  013C62  0E00               	movlw	0
  5542  013C64  204A               	addwfc	_gCursor+3,w,c
  5543  013C66  0100               	movlb	0	; () banked
  5544  013C68  6FC0               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5545  013C6A  0100               	movlb	0	; () banked
  5546  013C6C  BFC0               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5547  013C6E  D00C               	goto	l1005
  5548  013C70  0100               	movlb	0	; () banked
  5549  013C72  51C0               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5550  013C74  E105               	bnz	u7020
  5551  013C76  0E80               	movlw	128
  5552  013C78  0100               	movlb	0	; () banked
  5553  013C7A  5DBF               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5554  013C7C  A0D8               	btfss	status,0,c
  5555  013C7E  D004               	goto	l1005
  5556  013C80                     u7020:
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;Console.c: 252: {
  5560                           ;Console.c: 253: Console_FormFeed();
  5561  013C80  EC38  F09A         	call	_Console_FormFeed	;wreg free
  5562                           
  5563                           ;Console.c: 254: return 1;
  5564  013C84  0E01               	movlw	1
  5565  013C86  0012               	return	
  5566  013C88                     l1005:
  5567                           
  5568                           ;Console.c: 255: }
  5569                           ;Console.c: 257: return 0;
  5570  013C88  0E00               	movlw	0
  5571  013C8A  0012               	return	
  5572  013C8C                     __end_of_Console_IncrementCursor:
  5573                           	opt stack 0
  5574                           tosu	equ	0xFFF
  5575                           tosh	equ	0xFFE
  5576                           tosl	equ	0xFFD
  5577                           pclath	equ	0xFFA
  5578                           tblptru	equ	0xFF8
  5579                           tblptrh	equ	0xFF7
  5580                           tblptrl	equ	0xFF6
  5581                           tablat	equ	0xFF5
  5582                           prodh	equ	0xFF4
  5583                           prodl	equ	0xFF3
  5584                           postinc0	equ	0xFEE
  5585                           wreg	equ	0xFE8
  5586                           postdec1	equ	0xFE5
  5587                           fsr1h	equ	0xFE2
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _Console_NewLine *****************
  5597 ;; Defined at:
  5598 ;;		line 175 in file "Library/Console.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;		None
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  1    wreg      void 
  5605 ;; Registers used:
  5606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;Total ram usage:        2 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    7
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_Console_IncrementCursor
  5623 ;;		_Console_PrintChar
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text18
  5628  01317C                     __ptext18:
  5629                           	opt stack 0
  5630  01317C                     _Console_NewLine:
  5631                           	opt stack 17
  5632                           
  5633                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5634                           
  5635                           ;incstack = 0
  5636  01317C  D03E               	goto	l983
  5637  01317E                     
  5638                           ;Console.c: 179: {
  5639                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5640  01317E  0100               	movlb	0	; () banked
  5641  013180  5192               	movf	_lBufferY& (0+255),w,b
  5642  013182  0D14               	mullw	20
  5643  013184  0EAA               	movlw	low _lBuffer
  5644  013186  0100               	movlb	0	; () banked
  5645  013188  6FBB               	movwf	??_Console_NewLine& (0+255),b
  5646  01318A  0E04               	movlw	high _lBuffer
  5647  01318C  0100               	movlb	0	; () banked
  5648  01318E  6FBC               	movwf	(??_Console_NewLine+1)& (0+255),b
  5649  013190  50F3               	movf	prodl,w,c
  5650  013192  0100               	movlb	0	; () banked
  5651  013194  27BB               	addwf	??_Console_NewLine& (0+255),f,b
  5652  013196  50F4               	movf	prodh,w,c
  5653  013198  0100               	movlb	0	; () banked
  5654  01319A  23BC               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5655  01319C  0100               	movlb	0	; () banked
  5656  01319E  5193               	movf	_lBufferX& (0+255),w,b
  5657  0131A0  0D01               	mullw	1
  5658  0131A2  50F3               	movf	prodl,w,c
  5659  0131A4  0100               	movlb	0	; () banked
  5660  0131A6  25BB               	addwf	??_Console_NewLine& (0+255),w,b
  5661  0131A8  6ED9               	movwf	fsr2l,c
  5662  0131AA  50F4               	movf	prodh,w,c
  5663  0131AC  0100               	movlb	0	; () banked
  5664  0131AE  21BC               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5665  0131B0  6EDA               	movwf	fsr2h,c
  5666  0131B2  50DF               	movf	indf2,w,c
  5667  0131B4  B4D8               	btfsc	status,2,c
  5668  0131B6  D01F               	goto	l985
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5672  0131B8  0E01               	movlw	1
  5673  0131BA  0100               	movlb	0	; () banked
  5674  0131BC  6FFF               	movwf	_change& (0+255),b
  5675                           
  5676                           ; BSR set to: 0
  5677  0131BE  0100               	movlb	0	; () banked
  5678  0131C0  5192               	movf	_lBufferY& (0+255),w,b
  5679  0131C2  0D14               	mullw	20
  5680  0131C4  0EAA               	movlw	low _lBuffer
  5681  0131C6  0100               	movlb	0	; () banked
  5682  0131C8  6FBB               	movwf	??_Console_NewLine& (0+255),b
  5683  0131CA  0E04               	movlw	high _lBuffer
  5684  0131CC  0100               	movlb	0	; () banked
  5685  0131CE  6FBC               	movwf	(??_Console_NewLine+1)& (0+255),b
  5686  0131D0  50F3               	movf	prodl,w,c
  5687  0131D2  0100               	movlb	0	; () banked
  5688  0131D4  27BB               	addwf	??_Console_NewLine& (0+255),f,b
  5689  0131D6  50F4               	movf	prodh,w,c
  5690  0131D8  0100               	movlb	0	; () banked
  5691  0131DA  23BC               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5692  0131DC  0100               	movlb	0	; () banked
  5693  0131DE  5193               	movf	_lBufferX& (0+255),w,b
  5694  0131E0  0D01               	mullw	1
  5695  0131E2  50F3               	movf	prodl,w,c
  5696  0131E4  0100               	movlb	0	; () banked
  5697  0131E6  25BB               	addwf	??_Console_NewLine& (0+255),w,b
  5698  0131E8  6ED9               	movwf	fsr2l,c
  5699  0131EA  50F4               	movf	prodh,w,c
  5700  0131EC  0100               	movlb	0	; () banked
  5701  0131EE  21BC               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5702  0131F0  6EDA               	movwf	fsr2h,c
  5703  0131F2  0E80               	movlw	128
  5704  0131F4  6EDF               	movwf	indf2,c
  5705  0131F6                     l985:
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;Console.c: 182: lBufferX ++;
  5709                           
  5710                           ; BSR set to: 0
  5711  0131F6  0100               	movlb	0	; () banked
  5712  0131F8  2B93               	incf	_lBufferX& (0+255),f,b
  5713  0131FA                     l983:
  5714                           
  5715                           ; BSR set to: 0
  5716  0131FA  0E13               	movlw	19
  5717  0131FC  0100               	movlb	0	; () banked
  5718  0131FE  6593               	cpfsgt	_lBufferX& (0+255),b
  5719  013200  D7BE               	goto	l984
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;Console.c: 183: }
  5723                           ;Console.c: 185: lBufferX = 0;
  5724                           
  5725                           ; BSR set to: 0
  5726  013202  0E00               	movlw	0
  5727  013204  0100               	movlb	0	; () banked
  5728  013206  6F93               	movwf	_lBufferX& (0+255),b
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;Console.c: 186: lBufferY ++;
  5732  013208  0100               	movlb	0	; () banked
  5733  01320A  2B92               	incf	_lBufferY& (0+255),f,b
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;Console.c: 188: gCursor.y += 8;
  5737  01320C  0E08               	movlw	8
  5738  01320E  2649               	addwf	_gCursor+2,f,c
  5739  013210  0E00               	movlw	0
  5740  013212  224A               	addwfc	_gCursor+3,f,c
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;Console.c: 189: gCursor.x = 6;
  5744  013214  0E00               	movlw	0
  5745  013216  6E48               	movwf	_gCursor+1,c
  5746  013218  0E06               	movlw	6
  5747  01321A  6E47               	movwf	_gCursor,c
  5748                           
  5749                           ; BSR set to: 0
  5750  01321C  0012               	return		;funcret
  5751  01321E                     __end_of_Console_NewLine:
  5752                           	opt stack 0
  5753                           tosu	equ	0xFFF
  5754                           tosh	equ	0xFFE
  5755                           tosl	equ	0xFFD
  5756                           pclath	equ	0xFFA
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           postdec1	equ	0xFE5
  5766                           fsr1h	equ	0xFE2
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function _Console_FormFeed *****************
  5776 ;; Defined at:
  5777 ;;		line 192 in file "Library/Console.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;		None
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  y               1    3[BANK0 ] unsigned char 
  5782 ;;  x               1    2[BANK0 ] unsigned char 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;Total ram usage:        4 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    7
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_Console_IncrementCursor
  5803 ;;		_Console_PrintChar
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text19
  5808  013470                     __ptext19:
  5809                           	opt stack 0
  5810  013470                     _Console_FormFeed:
  5811                           	opt stack 17
  5812                           
  5813                           ;Console.c: 195: lBufferX = 0;
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;incstack = 0
  5817  013470  0E00               	movlw	0
  5818  013472  0100               	movlb	0	; () banked
  5819  013474  6F93               	movwf	_lBufferX& (0+255),b
  5820                           
  5821                           ;Console.c: 196: lBufferY = 0;
  5822  013476  0E00               	movlw	0
  5823  013478  0100               	movlb	0	; () banked
  5824  01347A  6F92               	movwf	_lBufferY& (0+255),b
  5825                           
  5826                           ;Console.c: 197: UINT8 x, y;
  5827                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5828  01347C  0E00               	movlw	0
  5829  01347E  0100               	movlb	0	; () banked
  5830  013480  6FBE               	movwf	Console_FormFeed@y& (0+255),b
  5831  013482                     l10816:
  5832                           
  5833                           ; BSR set to: 0
  5834  013482  0E0E               	movlw	14
  5835  013484  0100               	movlb	0	; () banked
  5836  013486  65BE               	cpfsgt	Console_FormFeed@y& (0+255),b
  5837  013488  D001               	goto	l990
  5838  01348A  D02D               	goto	u6860
  5839  01348C                     l990:
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5843                           
  5844                           ; BSR set to: 0
  5845  01348C  0E00               	movlw	0
  5846  01348E  0100               	movlb	0	; () banked
  5847  013490  6FBD               	movwf	Console_FormFeed@x& (0+255),b
  5848  013492                     l10822:
  5849                           
  5850                           ; BSR set to: 0
  5851  013492  0E13               	movlw	19
  5852  013494  0100               	movlb	0	; () banked
  5853  013496  65BD               	cpfsgt	Console_FormFeed@x& (0+255),b
  5854  013498  D001               	goto	l992
  5855  01349A  D022               	goto	u6850
  5856  01349C                     l992:
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5860                           
  5861                           ; BSR set to: 0
  5862  01349C  0E01               	movlw	1
  5863  01349E  0100               	movlb	0	; () banked
  5864  0134A0  6FFF               	movwf	_change& (0+255),b
  5865                           
  5866                           ; BSR set to: 0
  5867  0134A2  0100               	movlb	0	; () banked
  5868  0134A4  51BE               	movf	Console_FormFeed@y& (0+255),w,b
  5869  0134A6  0D14               	mullw	20
  5870  0134A8  0EAA               	movlw	low _lBuffer
  5871  0134AA  0100               	movlb	0	; () banked
  5872  0134AC  6FBB               	movwf	??_Console_FormFeed& (0+255),b
  5873  0134AE  0E04               	movlw	high _lBuffer
  5874  0134B0  0100               	movlb	0	; () banked
  5875  0134B2  6FBC               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5876  0134B4  50F3               	movf	prodl,w,c
  5877  0134B6  0100               	movlb	0	; () banked
  5878  0134B8  27BB               	addwf	??_Console_FormFeed& (0+255),f,b
  5879  0134BA  50F4               	movf	prodh,w,c
  5880  0134BC  0100               	movlb	0	; () banked
  5881  0134BE  23BC               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5882  0134C0  0100               	movlb	0	; () banked
  5883  0134C2  51BD               	movf	Console_FormFeed@x& (0+255),w,b
  5884  0134C4  0D01               	mullw	1
  5885  0134C6  50F3               	movf	prodl,w,c
  5886  0134C8  0100               	movlb	0	; () banked
  5887  0134CA  25BB               	addwf	??_Console_FormFeed& (0+255),w,b
  5888  0134CC  6ED9               	movwf	fsr2l,c
  5889  0134CE  50F4               	movf	prodh,w,c
  5890  0134D0  0100               	movlb	0	; () banked
  5891  0134D2  21BC               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5892  0134D4  6EDA               	movwf	fsr2h,c
  5893  0134D6  0E80               	movlw	128
  5894  0134D8  6EDF               	movwf	indf2,c
  5895                           
  5896                           ; BSR set to: 0
  5897  0134DA  0100               	movlb	0	; () banked
  5898  0134DC  2BBD               	incf	Console_FormFeed@x& (0+255),f,b
  5899  0134DE  D7D9               	goto	l10822
  5900  0134E0                     u6850:
  5901                           
  5902                           ; BSR set to: 0
  5903                           
  5904                           ; BSR set to: 0
  5905  0134E0  0100               	movlb	0	; () banked
  5906  0134E2  2BBE               	incf	Console_FormFeed@y& (0+255),f,b
  5907  0134E4  D7CE               	goto	l10816
  5908  0134E6                     u6860:
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;Console.c: 204: clearall = 1;
  5912                           
  5913                           ; BSR set to: 0
  5914  0134E6  0E01               	movlw	1
  5915  0134E8  0100               	movlb	0	; () banked
  5916  0134EA  6F94               	movwf	_clearall& (0+255),b
  5917                           
  5918                           ;Console.c: 205: gCursor.x = 6;
  5919  0134EC  0E00               	movlw	0
  5920  0134EE  6E48               	movwf	_gCursor+1,c
  5921  0134F0  0E06               	movlw	6
  5922  0134F2  6E47               	movwf	_gCursor,c
  5923                           
  5924                           ;Console.c: 206: gCursor.y = 6;
  5925  0134F4  0E00               	movlw	0
  5926  0134F6  6E4A               	movwf	_gCursor+3,c
  5927  0134F8  0E06               	movlw	6
  5928  0134FA  6E49               	movwf	_gCursor+2,c
  5929                           
  5930                           ; BSR set to: 0
  5931  0134FC  0012               	return		;funcret
  5932  0134FE                     __end_of_Console_FormFeed:
  5933                           	opt stack 0
  5934                           tosu	equ	0xFFF
  5935                           tosh	equ	0xFFE
  5936                           tosl	equ	0xFFD
  5937                           pclath	equ	0xFFA
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           postdec1	equ	0xFE5
  5947                           fsr1h	equ	0xFE2
  5948                           fsr1l	equ	0xFE1
  5949                           indf2	equ	0xFDF
  5950                           postinc2	equ	0xFDE
  5951                           postdec2	equ	0xFDD
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _Console_ResetCursor *****************
  5957 ;; Defined at:
  5958 ;;		line 297 in file "Library/Console.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;Total ram usage:        0 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    7
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_Console_PrintChar
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text20
  5987  01474E                     __ptext20:
  5988                           	opt stack 0
  5989  01474E                     _Console_ResetCursor:
  5990                           	opt stack 19
  5991                           
  5992                           ;Console.c: 299: gCursor.x = 6;
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;incstack = 0
  5996  01474E  0E00               	movlw	0
  5997  014750  6E48               	movwf	_gCursor+1,c
  5998  014752  0E06               	movlw	6
  5999  014754  6E47               	movwf	_gCursor,c
  6000                           
  6001                           ;Console.c: 300: gCursor.y = 6;
  6002  014756  0E00               	movlw	0
  6003  014758  6E4A               	movwf	_gCursor+3,c
  6004  01475A  0E06               	movlw	6
  6005  01475C  6E49               	movwf	_gCursor+2,c
  6006                           
  6007                           ;Console.c: 303: lBufferX = 0;
  6008  01475E  0E00               	movlw	0
  6009  014760  0100               	movlb	0	; () banked
  6010  014762  6F93               	movwf	_lBufferX& (0+255),b
  6011                           
  6012                           ;Console.c: 304: lBufferY = 0;
  6013  014764  0E00               	movlw	0
  6014  014766  0100               	movlb	0	; () banked
  6015  014768  6F92               	movwf	_lBufferY& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018  01476A  0012               	return		;funcret
  6019  01476C                     __end_of_Console_ResetCursor:
  6020                           	opt stack 0
  6021                           tosu	equ	0xFFF
  6022                           tosh	equ	0xFFE
  6023                           tosl	equ	0xFFD
  6024                           pclath	equ	0xFFA
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           postinc0	equ	0xFEE
  6032                           wreg	equ	0xFE8
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _Console_Backspace *****************
  6044 ;; Defined at:
  6045 ;;		line 209 in file "Library/Console.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    8
  6066 ;; This function calls:
  6067 ;;		_Console_ClearCursor
  6068 ;; This function is called by:
  6069 ;;		_Console_PrintChar
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text21
  6074  013E18                     __ptext21:
  6075                           	opt stack 0
  6076  013E18                     _Console_Backspace:
  6077                           	opt stack 18
  6078                           
  6079                           ;Console.c: 211: if (lBufferX > 0)
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;incstack = 0
  6083  013E18  0100               	movlb	0	; () banked
  6084  013E1A  5193               	movf	_lBufferX& (0+255),w,b
  6085  013E1C  B4D8               	btfsc	status,2,c
  6086  013E1E  D007               	goto	l997
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;Console.c: 212: {
  6090                           ;Console.c: 213: gCursor.x -= 6;
  6091  013E20  0EFA               	movlw	250
  6092  013E22  2647               	addwf	_gCursor,f,c
  6093  013E24  0EFF               	movlw	255
  6094  013E26  2248               	addwfc	_gCursor+1,f,c
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;Console.c: 216: lBufferX --;
  6098  013E28  0100               	movlb	0	; () banked
  6099  013E2A  0793               	decf	_lBufferX& (0+255),f,b
  6100                           
  6101                           ;Console.c: 218: }
  6102  013E2C  D020               	goto	l1000
  6103  013E2E                     l997:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;Console.c: 219: else if (lBufferY > 0)
  6107                           
  6108                           ; BSR set to: 0
  6109  013E2E  0100               	movlb	0	; () banked
  6110  013E30  5192               	movf	_lBufferY& (0+255),w,b
  6111  013E32  B4D8               	btfsc	status,2,c
  6112  013E34  D00E               	goto	l999
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;Console.c: 220: {
  6116                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  6117  013E36  0E00               	movlw	0
  6118  013E38  6E48               	movwf	_gCursor+1,c
  6119  013E3A  0E72               	movlw	114
  6120  013E3C  6E47               	movwf	_gCursor,c
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;Console.c: 222: gCursor.y -= 8;
  6124  013E3E  0EF8               	movlw	248
  6125  013E40  2649               	addwf	_gCursor+2,f,c
  6126  013E42  0EFF               	movlw	255
  6127  013E44  224A               	addwfc	_gCursor+3,f,c
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  6131  013E46  0E13               	movlw	19
  6132  013E48  0100               	movlb	0	; () banked
  6133  013E4A  6F93               	movwf	_lBufferX& (0+255),b
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;Console.c: 226: lBufferY --;
  6137  013E4C  0100               	movlb	0	; () banked
  6138  013E4E  0792               	decf	_lBufferY& (0+255),f,b
  6139                           
  6140                           ;Console.c: 228: }
  6141  013E50  D00E               	goto	l1000
  6142  013E52                     l999:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;Console.c: 229: else
  6146                           ;Console.c: 230: {
  6147                           ;Console.c: 231: gCursor.x = 6;
  6148                           
  6149                           ; BSR set to: 0
  6150  013E52  0E00               	movlw	0
  6151  013E54  6E48               	movwf	_gCursor+1,c
  6152  013E56  0E06               	movlw	6
  6153  013E58  6E47               	movwf	_gCursor,c
  6154                           
  6155                           ;Console.c: 232: gCursor.y = 6;
  6156  013E5A  0E00               	movlw	0
  6157  013E5C  6E4A               	movwf	_gCursor+3,c
  6158  013E5E  0E06               	movlw	6
  6159  013E60  6E49               	movwf	_gCursor+2,c
  6160                           
  6161                           ;Console.c: 235: lBufferX = 0;
  6162  013E62  0E00               	movlw	0
  6163  013E64  0100               	movlb	0	; () banked
  6164  013E66  6F93               	movwf	_lBufferX& (0+255),b
  6165                           
  6166                           ;Console.c: 236: lBufferY = 0;
  6167  013E68  0E00               	movlw	0
  6168  013E6A  0100               	movlb	0	; () banked
  6169  013E6C  6F92               	movwf	_lBufferY& (0+255),b
  6170  013E6E                     l1000:
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;Console.c: 238: }
  6174                           ;Console.c: 240: Console_ClearCursor();
  6175                           
  6176                           ; BSR set to: 0
  6177                           
  6178                           ; BSR set to: 0
  6179  013E6E  EC9D  F0A1         	call	_Console_ClearCursor	;wreg free
  6180  013E72  0012               	return		;funcret
  6181  013E74                     __end_of_Console_Backspace:
  6182                           	opt stack 0
  6183                           tosu	equ	0xFFF
  6184                           tosh	equ	0xFFE
  6185                           tosl	equ	0xFFD
  6186                           pclath	equ	0xFFA
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           postinc0	equ	0xFEE
  6194                           wreg	equ	0xFE8
  6195                           postdec1	equ	0xFE5
  6196                           fsr1h	equ	0xFE2
  6197                           fsr1l	equ	0xFE1
  6198                           indf2	equ	0xFDF
  6199                           postinc2	equ	0xFDE
  6200                           postdec2	equ	0xFDD
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function _Console_ClearCursor *****************
  6206 ;; Defined at:
  6207 ;;		line 308 in file "Library/Console.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;Total ram usage:        2 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    7
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_Console_Backspace
  6232 ;;		_Console_Tab
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text22
  6237  01433A                     __ptext22:
  6238                           	opt stack 0
  6239  01433A                     _Console_ClearCursor:
  6240                           	opt stack 18
  6241                           
  6242                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6243                           
  6244                           ;incstack = 0
  6245  01433A  0E01               	movlw	1
  6246  01433C  0100               	movlb	0	; () banked
  6247  01433E  6FFF               	movwf	_change& (0+255),b
  6248                           
  6249                           ; BSR set to: 0
  6250  014340  0100               	movlb	0	; () banked
  6251  014342  5192               	movf	_lBufferY& (0+255),w,b
  6252  014344  0D14               	mullw	20
  6253  014346  0EAA               	movlw	low _lBuffer
  6254  014348  0100               	movlb	0	; () banked
  6255  01434A  6FBB               	movwf	??_Console_ClearCursor& (0+255),b
  6256  01434C  0E04               	movlw	high _lBuffer
  6257  01434E  0100               	movlb	0	; () banked
  6258  014350  6FBC               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6259  014352  50F3               	movf	prodl,w,c
  6260  014354  0100               	movlb	0	; () banked
  6261  014356  27BB               	addwf	??_Console_ClearCursor& (0+255),f,b
  6262  014358  50F4               	movf	prodh,w,c
  6263  01435A  0100               	movlb	0	; () banked
  6264  01435C  23BC               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6265  01435E  0100               	movlb	0	; () banked
  6266  014360  5193               	movf	_lBufferX& (0+255),w,b
  6267  014362  0D01               	mullw	1
  6268  014364  50F3               	movf	prodl,w,c
  6269  014366  0100               	movlb	0	; () banked
  6270  014368  25BB               	addwf	??_Console_ClearCursor& (0+255),w,b
  6271  01436A  6ED9               	movwf	fsr2l,c
  6272  01436C  50F4               	movf	prodh,w,c
  6273  01436E  0100               	movlb	0	; () banked
  6274  014370  21BC               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6275  014372  6EDA               	movwf	fsr2h,c
  6276  014374  0E80               	movlw	128
  6277  014376  6EDF               	movwf	indf2,c
  6278                           
  6279                           ; BSR set to: 0
  6280  014378  0012               	return		;funcret
  6281  01437A                     __end_of_Console_ClearCursor:
  6282                           	opt stack 0
  6283                           tosu	equ	0xFFF
  6284                           tosh	equ	0xFFE
  6285                           tosl	equ	0xFFD
  6286                           pclath	equ	0xFFA
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           postinc0	equ	0xFEE
  6294                           wreg	equ	0xFE8
  6295                           postdec1	equ	0xFE5
  6296                           fsr1h	equ	0xFE2
  6297                           fsr1l	equ	0xFE1
  6298                           indf2	equ	0xFDF
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           
  6305 ;; *************** function _irobot_stop_motion *****************
  6306 ;; Defined at:
  6307 ;;		line 288 in file "Library/iRobotSerial.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  isScript        1    wreg     unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  isScript        1   25[BANK0 ] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;Total ram usage:        1 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    9
  6328 ;; This function calls:
  6329 ;;		_irobot_move
  6330 ;; This function is called by:
  6331 ;;		_mode2
  6332 ;;		_irobot_move_to_simple
  6333 ;;		_irobot_rotate_to
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text23
  6338  0141E2                     __ptext23:
  6339                           	opt stack 0
  6340  0141E2                     _irobot_stop_motion:
  6341                           	opt stack 20
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;incstack = 0
  6345                           ;irobot_stop_motion@isScript stored from wreg
  6346  0141E2  0100               	movlb	0	; () banked
  6347  0141E4  6FD4               	movwf	irobot_stop_motion@isScript& (0+255),b
  6348                           
  6349                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6350  0141E6  0100               	movlb	0	; () banked
  6351  0141E8  51D4               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6352  0141EA  0100               	movlb	0	; () banked
  6353  0141EC  B4D8               	btfsc	status,2,c
  6354  0141EE  D00E               	goto	l2163
  6355                           
  6356                           ; BSR set to: 0
  6357  0141F0  0E00               	movlw	0
  6358  0141F2  0100               	movlb	0	; () banked
  6359  0141F4  6FCC               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6360  0141F6  0E00               	movlw	0
  6361  0141F8  6FCB               	movwf	irobot_move@moveSpeed& (0+255),b
  6362  0141FA  0E00               	movlw	0
  6363  0141FC  0100               	movlb	0	; () banked
  6364  0141FE  6FCE               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6365  014200  0E00               	movlw	0
  6366  014202  6FCD               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6367  014204  0E01               	movlw	1
  6368  014206  EC1A  F096         	call	_irobot_move
  6369  01420A  0012               	return	
  6370  01420C                     l2163:
  6371  01420C  0E00               	movlw	0
  6372  01420E  0100               	movlb	0	; () banked
  6373  014210  6FCC               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6374  014212  0E00               	movlw	0
  6375  014214  6FCB               	movwf	irobot_move@moveSpeed& (0+255),b
  6376  014216  0E00               	movlw	0
  6377  014218  0100               	movlb	0	; () banked
  6378  01421A  6FCE               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6379  01421C  0E00               	movlw	0
  6380  01421E  6FCD               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6381  014220  0E00               	movlw	0
  6382  014222  EC1A  F096         	call	_irobot_move
  6383  014226  0012               	return	
  6384  014228                     __end_of_irobot_stop_motion:
  6385                           	opt stack 0
  6386                           tosu	equ	0xFFF
  6387                           tosh	equ	0xFFE
  6388                           tosl	equ	0xFFD
  6389                           pclath	equ	0xFFA
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _irobot_song_play *****************
  6409 ;; Defined at:
  6410 ;;		line 274 in file "Library/iRobotSerial.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  songNumber      1    wreg     unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;Total ram usage:        1 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    8
  6431 ;; This function calls:
  6432 ;;		_eusart_putch
  6433 ;; This function is called by:
  6434 ;;		_mode2
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text24
  6439  014950                     __ptext24:
  6440                           	opt stack 0
  6441  014950                     _irobot_song_play:
  6442                           	opt stack 21
  6443                           
  6444                           ;incstack = 0
  6445                           ;irobot_song_play@songNumber stored from wreg
  6446  014950  0100               	movlb	0	; () banked
  6447  014952  6FBC               	movwf	irobot_song_play@songNumber& (0+255),b
  6448                           
  6449                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6450  014954  0E8D               	movlw	141
  6451  014956  ECDB  F0A4         	call	_eusart_putch
  6452                           
  6453                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6454  01495A  0100               	movlb	0	; () banked
  6455  01495C  51BC               	movf	irobot_song_play@songNumber& (0+255),w,b
  6456  01495E  ECDB  F0A4         	call	_eusart_putch
  6457  014962  0012               	return		;funcret
  6458  014964                     __end_of_irobot_song_play:
  6459                           	opt stack 0
  6460                           tosu	equ	0xFFF
  6461                           tosh	equ	0xFFE
  6462                           tosl	equ	0xFFD
  6463                           pclath	equ	0xFFA
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           postdec1	equ	0xFE5
  6473                           fsr1h	equ	0xFE2
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           
  6482 ;; *************** function _irobot_move_straight *****************
  6483 ;; Defined at:
  6484 ;;		line 303 in file "Library/iRobotSerial.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  straightSpee    2   25[BANK0 ] short 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        2 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    9
  6505 ;; This function calls:
  6506 ;;		_irobot_move
  6507 ;; This function is called by:
  6508 ;;		_mode2
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text25
  6513  014890                     __ptext25:
  6514                           	opt stack 0
  6515  014890                     _irobot_move_straight:
  6516                           	opt stack 20
  6517                           
  6518                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  6519                           
  6520                           ;incstack = 0
  6521  014890  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  6522  014894  C0D5  F0CC         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  6523  014898  0E7F               	movlw	127
  6524  01489A  0100               	movlb	0	; () banked
  6525  01489C  6FCE               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6526  01489E  69CD               	setf	irobot_move@moveTurnRadius& (0+255),b
  6527  0148A0  0E00               	movlw	0
  6528  0148A2  EC1A  F096         	call	_irobot_move
  6529  0148A6  0012               	return		;funcret
  6530  0148A8                     __end_of_irobot_move_straight:
  6531                           	opt stack 0
  6532                           tosu	equ	0xFFF
  6533                           tosh	equ	0xFFE
  6534                           tosl	equ	0xFFD
  6535                           pclath	equ	0xFFA
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           postdec1	equ	0xFE5
  6545                           fsr1h	equ	0xFE2
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function _HMI_Poll *****************
  6555 ;; Defined at:
  6556 ;;		line 252 in file "HMI.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      void 
  6563 ;; Registers used:
  6564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;Total ram usage:        0 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:   15
  6577 ;; This function calls:
  6578 ;;		_Button_Poll
  6579 ;; This function is called by:
  6580 ;;		_mode2
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text26
  6585  01376A                     __ptext26:
  6586                           	opt stack 0
  6587  01376A                     _HMI_Poll:
  6588                           	opt stack 14
  6589                           
  6590                           ;HMI.c: 254: TRISE = 0xFC;
  6591                           
  6592                           ;incstack = 0
  6593  01376A  0EFC               	movlw	252
  6594  01376C  6E96               	movwf	3990,c	;volatile
  6595                           
  6596                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6597  01376E  0E68               	movlw	low (_HMIBoard+48)
  6598  013770  0100               	movlb	0	; () banked
  6599  013772  6FD6               	movwf	Button_Poll@pButton& (0+255),b
  6600  013774  0E03               	movlw	high (_HMIBoard+48)
  6601  013776  0100               	movlb	0	; () banked
  6602  013778  6FD7               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6603  01377A  0E01               	movlw	1
  6604  01377C  0100               	movlb	0	; () banked
  6605  01377E  6FD8               	movwf	Button_Poll@pIncrement& (0+255),b
  6606  013780  EC08  F08F         	call	_Button_Poll	;wreg free
  6607                           
  6608                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6609  013784  0E4A               	movlw	low (_HMIBoard+18)
  6610  013786  0100               	movlb	0	; () banked
  6611  013788  6FD6               	movwf	Button_Poll@pButton& (0+255),b
  6612  01378A  0E03               	movlw	high (_HMIBoard+18)
  6613  01378C  0100               	movlb	0	; () banked
  6614  01378E  6FD7               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6615  013790  0E01               	movlw	1
  6616  013792  0100               	movlb	0	; () banked
  6617  013794  6FD8               	movwf	Button_Poll@pIncrement& (0+255),b
  6618  013796  EC08  F08F         	call	_Button_Poll	;wreg free
  6619                           
  6620                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6621  01379A  0E40               	movlw	low (_HMIBoard+8)
  6622  01379C  0100               	movlb	0	; () banked
  6623  01379E  6FD6               	movwf	Button_Poll@pButton& (0+255),b
  6624  0137A0  0E03               	movlw	high (_HMIBoard+8)
  6625  0137A2  0100               	movlb	0	; () banked
  6626  0137A4  6FD7               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6627  0137A6  0E01               	movlw	1
  6628  0137A8  0100               	movlb	0	; () banked
  6629  0137AA  6FD8               	movwf	Button_Poll@pIncrement& (0+255),b
  6630  0137AC  EC08  F08F         	call	_Button_Poll	;wreg free
  6631                           
  6632                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6633  0137B0  0E54               	movlw	low (_HMIBoard+28)
  6634  0137B2  0100               	movlb	0	; () banked
  6635  0137B4  6FD6               	movwf	Button_Poll@pButton& (0+255),b
  6636  0137B6  0E03               	movlw	high (_HMIBoard+28)
  6637  0137B8  0100               	movlb	0	; () banked
  6638  0137BA  6FD7               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6639  0137BC  0E01               	movlw	1
  6640  0137BE  0100               	movlb	0	; () banked
  6641  0137C0  6FD8               	movwf	Button_Poll@pIncrement& (0+255),b
  6642  0137C2  EC08  F08F         	call	_Button_Poll	;wreg free
  6643                           
  6644                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6645  0137C6  0E5E               	movlw	low (_HMIBoard+38)
  6646  0137C8  0100               	movlb	0	; () banked
  6647  0137CA  6FD6               	movwf	Button_Poll@pButton& (0+255),b
  6648  0137CC  0E03               	movlw	high (_HMIBoard+38)
  6649  0137CE  0100               	movlb	0	; () banked
  6650  0137D0  6FD7               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6651  0137D2  0E01               	movlw	1
  6652  0137D4  0100               	movlb	0	; () banked
  6653  0137D6  6FD8               	movwf	Button_Poll@pIncrement& (0+255),b
  6654  0137D8  EC08  F08F         	call	_Button_Poll	;wreg free
  6655  0137DC  0012               	return		;funcret
  6656  0137DE                     __end_of_HMI_Poll:
  6657                           	opt stack 0
  6658                           tosu	equ	0xFFF
  6659                           tosh	equ	0xFFE
  6660                           tosl	equ	0xFFD
  6661                           pclath	equ	0xFFA
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           postinc0	equ	0xFEE
  6669                           wreg	equ	0xFE8
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _Button_Poll *****************
  6681 ;; Defined at:
  6682 ;;		line 57 in file "Library/Button.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6685 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6686 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  Pin             1   35[BANK0 ] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      unsigned char 
  6691 ;; Registers used:
  6692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6698 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;Total ram usage:        9 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:   14
  6705 ;; This function calls:
  6706 ;;		_Event_DIPSwitch
  6707 ;;		_Event_NULL
  6708 ;;		_Event_TestButton
  6709 ;;		_HMI_DIPSwitch
  6710 ;;		_HMI_DownSwitch
  6711 ;;		_HMI_LeftSwitch
  6712 ;;		_HMI_RightSwitch
  6713 ;;		_HMI_UpSwitch
  6714 ;;		_MXK_DIPSwitch
  6715 ;;		_MXK_TestButton
  6716 ;; This function is called by:
  6717 ;;		_HMI_Poll
  6718 ;;		_MXK_Poll
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text27
  6723  011E10                     __ptext27:
  6724                           	opt stack 0
  6725  011E10                     _Button_Poll:
  6726                           	opt stack 14
  6727                           
  6728                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6729                           
  6730                           ;incstack = 0
  6731  011E10  0100               	movlb	0	; () banked
  6732  011E12  EE20 F007          	lfsr	2,7
  6733  011E16  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6734  011E18  26D9               	addwf	fsr2l,f,c
  6735  011E1A  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6736  011E1C  22DA               	addwfc	fsr2h,f,c
  6737  011E1E  D801               	call	u7768
  6738  011E20  D00A               	goto	u7769
  6739  011E22                     u7768:
  6740  011E22  0005               	push	
  6741  011E24  6EFA               	movwf	pclath,c
  6742  011E26  50DE               	movf	postinc2,w,c
  6743  011E28  6EFD               	movwf	tosl,c
  6744  011E2A  50DE               	movf	postinc2,w,c
  6745  011E2C  6EFE               	movwf	tosh,c
  6746  011E2E  50DE               	movf	postinc2,w,c
  6747  011E30  6EFF               	movwf	tosu,c
  6748  011E32  50FA               	movf	pclath,w,c
  6749  011E34  0012               	return		;indir
  6750  011E36                     u7769:
  6751  011E36  0100               	movlb	0	; () banked
  6752  011E38  6FDE               	movwf	Button_Poll@Pin& (0+255),b
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;Button.c: 61: if (pButton->mState == Pin)
  6756  011E3A  C0D6  FFD9         	movff	Button_Poll@pButton,fsr2l
  6757  011E3E  C0D7  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6758  011E42  0100               	movlb	0	; () banked
  6759  011E44  51DE               	movf	Button_Poll@Pin& (0+255),w,b
  6760  011E46  18DE               	xorwf	postinc2,w,c
  6761  011E48  A4D8               	btfss	status,2,c
  6762  011E4A  D021               	goto	l11
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;Button.c: 62: {
  6766                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6767  011E4C  0100               	movlb	0	; () banked
  6768  011E4E  EE20 F001          	lfsr	2,1
  6769  011E52  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6770  011E54  26D9               	addwf	fsr2l,f,c
  6771  011E56  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6772  011E58  22DA               	addwfc	fsr2h,f,c
  6773  011E5A  0100               	movlb	0	; () banked
  6774  011E5C  51D8               	movf	Button_Poll@pIncrement& (0+255),w,b
  6775  011E5E  5CDE               	subwf	postinc2,w,c
  6776  011E60  B0D8               	btfsc	status,0,c
  6777  011E62  D00A               	goto	l12
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;Button.c: 66: pButton->mCount = 0;
  6781  011E64  0100               	movlb	0	; () banked
  6782  011E66  EE20 F001          	lfsr	2,1
  6783  011E6A  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6784  011E6C  26D9               	addwf	fsr2l,f,c
  6785  011E6E  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6786  011E70  22DA               	addwfc	fsr2h,f,c
  6787  011E72  0E00               	movlw	0
  6788  011E74  6EDF               	movwf	indf2,c
  6789  011E76  0012               	return	
  6790  011E78                     l12:
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;Button.c: 67: else
  6794                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6795                           
  6796                           ; BSR set to: 0
  6797  011E78  0100               	movlb	0	; () banked
  6798  011E7A  EE20 F001          	lfsr	2,1
  6799  011E7E  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6800  011E80  26D9               	addwf	fsr2l,f,c
  6801  011E82  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6802  011E84  22DA               	addwfc	fsr2h,f,c
  6803  011E86  0100               	movlb	0	; () banked
  6804  011E88  51D8               	movf	Button_Poll@pIncrement& (0+255),w,b
  6805  011E8A  5EDF               	subwf	indf2,f,c
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;Button.c: 69: }
  6809  011E8C  0012               	return	
  6810  011E8E                     l11:
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6814                           
  6815                           ; BSR set to: 0
  6816  011E8E  0100               	movlb	0	; () banked
  6817  011E90  EE20 F001          	lfsr	2,1
  6818  011E94  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6819  011E96  26D9               	addwf	fsr2l,f,c
  6820  011E98  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6821  011E9A  22DA               	addwfc	fsr2h,f,c
  6822  011E9C  50DF               	movf	indf2,w,c
  6823  011E9E  0100               	movlb	0	; () banked
  6824  011EA0  6FD9               	movwf	??_Button_Poll& (0+255),b
  6825  011EA2  6BDA               	clrf	(??_Button_Poll+1)& (0+255),b
  6826  011EA4  0100               	movlb	0	; () banked
  6827  011EA6  51D8               	movf	Button_Poll@pIncrement& (0+255),w,b
  6828  011EA8  0100               	movlb	0	; () banked
  6829  011EAA  27D9               	addwf	??_Button_Poll& (0+255),f,b
  6830  011EAC  0E00               	movlw	0
  6831  011EAE  23DA               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6832  011EB0  0100               	movlb	0	; () banked
  6833  011EB2  EE20 F001          	lfsr	2,1
  6834  011EB6  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6835  011EB8  26D9               	addwf	fsr2l,f,c
  6836  011EBA  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6837  011EBC  22DA               	addwfc	fsr2h,f,c
  6838  011EBE  50DF               	movf	indf2,w,c
  6839  011EC0  0100               	movlb	0	; () banked
  6840  011EC2  6FDB               	movwf	(??_Button_Poll+2)& (0+255),b
  6841  011EC4  6BDC               	clrf	(??_Button_Poll+3)& (0+255),b
  6842  011EC6  0100               	movlb	0	; () banked
  6843  011EC8  51D9               	movf	??_Button_Poll& (0+255),w,b
  6844  011ECA  0100               	movlb	0	; () banked
  6845  011ECC  5DDB               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6846  011ECE  0100               	movlb	0	; () banked
  6847  011ED0  51DC               	movf	(??_Button_Poll+3)& (0+255),w,b
  6848  011ED2  0A80               	xorlw	128
  6849  011ED4  0100               	movlb	0	; () banked
  6850  011ED6  6FDD               	movwf	(??_Button_Poll+4)& (0+255),b
  6851  011ED8  0100               	movlb	0	; () banked
  6852  011EDA  51DA               	movf	(??_Button_Poll+1)& (0+255),w,b
  6853  011EDC  0A80               	xorlw	128
  6854  011EDE  0100               	movlb	0	; () banked
  6855  011EE0  59DD               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6856  011EE2  B0D8               	btfsc	status,0,c
  6857  011EE4  0012               	return	
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;Button.c: 73: {
  6861                           ;Button.c: 75: pButton->mCount += pIncrement;
  6862  011EE6  0100               	movlb	0	; () banked
  6863  011EE8  EE20 F001          	lfsr	2,1
  6864  011EEC  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6865  011EEE  26D9               	addwf	fsr2l,f,c
  6866  011EF0  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6867  011EF2  22DA               	addwfc	fsr2h,f,c
  6868  011EF4  0100               	movlb	0	; () banked
  6869  011EF6  51D8               	movf	Button_Poll@pIncrement& (0+255),w,b
  6870  011EF8  26DF               	addwf	indf2,f,c
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6874  011EFA  0100               	movlb	0	; () banked
  6875  011EFC  EE20 F002          	lfsr	2,2
  6876  011F00  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6877  011F02  26D9               	addwf	fsr2l,f,c
  6878  011F04  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6879  011F06  22DA               	addwfc	fsr2h,f,c
  6880  011F08  0100               	movlb	0	; () banked
  6881  011F0A  EE10 F001          	lfsr	1,1
  6882  011F0E  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6883  011F10  26E1               	addwf	fsr1l,f,c
  6884  011F12  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6885  011F14  22E2               	addwfc	fsr1h,f,c
  6886  011F16  50E7               	movf	indf1,w,c
  6887  011F18  0100               	movlb	0	; () banked
  6888  011F1A  6FDB               	movwf	(??_Button_Poll+2)& (0+255),b
  6889  011F1C  6BDC               	clrf	(??_Button_Poll+3)& (0+255),b
  6890  011F1E  50DE               	movf	postinc2,w,c
  6891  011F20  0100               	movlb	0	; () banked
  6892  011F22  5DDB               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6893  011F24  50DE               	movf	postinc2,w,c
  6894  011F26  0100               	movlb	0	; () banked
  6895  011F28  59DC               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6896  011F2A  A0D8               	btfss	status,0,c
  6897  011F2C  0012               	return	
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;Button.c: 77: {
  6901                           ;Button.c: 79: pButton->mState = Pin;
  6902  011F2E  C0D6  FFD9         	movff	Button_Poll@pButton,fsr2l
  6903  011F32  C0D7  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6904  011F36  C0DE  FFDF         	movff	Button_Poll@Pin,indf2
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;Button.c: 80: pButton->mCount = 0;
  6908  011F3A  0100               	movlb	0	; () banked
  6909  011F3C  EE20 F001          	lfsr	2,1
  6910  011F40  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6911  011F42  26D9               	addwf	fsr2l,f,c
  6912  011F44  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6913  011F46  22DA               	addwfc	fsr2h,f,c
  6914  011F48  0E00               	movlw	0
  6915  011F4A  6EDF               	movwf	indf2,c
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;Button.c: 83: pButton->mFunction(Pin);
  6919  011F4C  0100               	movlb	0	; () banked
  6920  011F4E  EE20 F004          	lfsr	2,4
  6921  011F52  51D6               	movf	Button_Poll@pButton& (0+255),w,b
  6922  011F54  26D9               	addwf	fsr2l,f,c
  6923  011F56  51D7               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6924  011F58  22DA               	addwfc	fsr2h,f,c
  6925  011F5A  D801               	call	u7818
  6926  011F5C  0012               	return	
  6927  011F5E                     u7818:
  6928  011F5E  0005               	push	
  6929  011F60  6EFA               	movwf	pclath,c
  6930  011F62  50DE               	movf	postinc2,w,c
  6931  011F64  6EFD               	movwf	tosl,c
  6932  011F66  50DE               	movf	postinc2,w,c
  6933  011F68  6EFE               	movwf	tosh,c
  6934  011F6A  50DE               	movf	postinc2,w,c
  6935  011F6C  6EFF               	movwf	tosu,c
  6936  011F6E  50FA               	movf	pclath,w,c
  6937  011F70  0100               	movlb	0	; () banked
  6938  011F72  51DE               	movf	Button_Poll@Pin& (0+255),w,b
  6939  011F74  0012               	return		;indir
  6940  011F76                     __end_of_Button_Poll:
  6941                           	opt stack 0
  6942                           tosu	equ	0xFFF
  6943                           tosh	equ	0xFFE
  6944                           tosl	equ	0xFFD
  6945                           pclath	equ	0xFFA
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           postinc0	equ	0xFEE
  6953                           wreg	equ	0xFE8
  6954                           indf1	equ	0xFE7
  6955                           postdec1	equ	0xFE5
  6956                           fsr1h	equ	0xFE2
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _MXK_DIPSwitch *****************
  6966 ;; Defined at:
  6967 ;;		line 24 in file "Library/MXK.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      unsigned char 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    8
  6988 ;; This function calls:
  6989 ;;		_Port_GetQuad
  6990 ;; This function is called by:
  6991 ;;		_FunctInitButton
  6992 ;;		_Button_Poll
  6993 ;;		_mode2
  6994 ;;		_getMode
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text28
  6999  0148A8                     __ptext28:
  7000                           	opt stack 0
  7001  0148A8                     _MXK_DIPSwitch:
  7002                           	opt stack 21
  7003                           
  7004                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  7005                           
  7006                           ;incstack = 0
  7007  0148A8  0E9F               	movlw	low _PortD
  7008  0148AA  0100               	movlb	0	; () banked
  7009  0148AC  6FBB               	movwf	Port_GetQuad@pInput& (0+255),b
  7010  0148AE  0E00               	movlw	high _PortD
  7011  0148B0  0100               	movlb	0	; () banked
  7012  0148B2  6FBC               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  7013  0148B4  0E00               	movlw	0
  7014  0148B6  0100               	movlb	0	; () banked
  7015  0148B8  6FBD               	movwf	Port_GetQuad@pQuad& (0+255),b
  7016  0148BA  EC84  F0A0         	call	_Port_GetQuad
  7017  0148BE  0012               	return	
  7018  0148C0                     __end_of_MXK_DIPSwitch:
  7019                           	opt stack 0
  7020                           tosu	equ	0xFFF
  7021                           tosh	equ	0xFFE
  7022                           tosl	equ	0xFFD
  7023                           pclath	equ	0xFFA
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           indf1	equ	0xFE7
  7033                           postdec1	equ	0xFE5
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _HMI_DIPSwitch *****************
  7044 ;; Defined at:
  7045 ;;		line 47 in file "HMI.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      unsigned char 
  7052 ;; Registers used:
  7053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;Total ram usage:        0 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    8
  7066 ;; This function calls:
  7067 ;;		_Port_GetQuad
  7068 ;; This function is called by:
  7069 ;;		_HMI_Init
  7070 ;;		_Button_Poll
  7071 ;;		_mode2
  7072 ;;		_getMode
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text29
  7077  0148C0                     __ptext29:
  7078                           	opt stack 0
  7079  0148C0                     _HMI_DIPSwitch:
  7080                           	opt stack 19
  7081                           
  7082                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  7083                           
  7084                           ;incstack = 0
  7085  0148C0  0E95               	movlw	low _PortE
  7086  0148C2  0100               	movlb	0	; () banked
  7087  0148C4  6FBB               	movwf	Port_GetQuad@pInput& (0+255),b
  7088  0148C6  0E00               	movlw	high _PortE
  7089  0148C8  0100               	movlb	0	; () banked
  7090  0148CA  6FBC               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  7091  0148CC  0E00               	movlw	0
  7092  0148CE  0100               	movlb	0	; () banked
  7093  0148D0  6FBD               	movwf	Port_GetQuad@pQuad& (0+255),b
  7094  0148D2  EC84  F0A0         	call	_Port_GetQuad	;wreg free
  7095  0148D6  0012               	return	
  7096  0148D8                     __end_of_HMI_DIPSwitch:
  7097                           	opt stack 0
  7098                           tosu	equ	0xFFF
  7099                           tosh	equ	0xFFE
  7100                           tosl	equ	0xFFD
  7101                           pclath	equ	0xFFA
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           indf1	equ	0xFE7
  7111                           postdec1	equ	0xFE5
  7112                           fsr1h	equ	0xFE2
  7113                           fsr1l	equ	0xFE1
  7114                           indf2	equ	0xFDF
  7115                           postinc2	equ	0xFDE
  7116                           postdec2	equ	0xFDD
  7117                           fsr2h	equ	0xFDA
  7118                           fsr2l	equ	0xFD9
  7119                           status	equ	0xFD8
  7120                           
  7121 ;; *************** function _HMI_DownSwitch *****************
  7122 ;; Defined at:
  7123 ;;		line 42 in file "HMI.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      unsigned char 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;Total ram usage:        0 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    8
  7144 ;; This function calls:
  7145 ;;		_Port_GetPin
  7146 ;; This function is called by:
  7147 ;;		_HMI_Init
  7148 ;;		_Button_Poll
  7149 ;;		_mode2
  7150 ;;		_getMode
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text30
  7155  0148D8                     __ptext30:
  7156                           	opt stack 0
  7157  0148D8                     _HMI_DownSwitch:
  7158                           	opt stack 19
  7159                           
  7160                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  7161                           
  7162                           ;incstack = 0
  7163  0148D8  0E95               	movlw	low _PortE
  7164  0148DA  0100               	movlb	0	; () banked
  7165  0148DC  6FBB               	movwf	Port_GetPin@pInput& (0+255),b
  7166  0148DE  0E00               	movlw	high _PortE
  7167  0148E0  0100               	movlb	0	; () banked
  7168  0148E2  6FBC               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7169  0148E4  0E06               	movlw	6
  7170  0148E6  0100               	movlb	0	; () banked
  7171  0148E8  6FBD               	movwf	Port_GetPin@pPin& (0+255),b
  7172  0148EA  EC14  F0A1         	call	_Port_GetPin	;wreg free
  7173  0148EE  0012               	return	
  7174  0148F0                     __end_of_HMI_DownSwitch:
  7175                           	opt stack 0
  7176                           tosu	equ	0xFFF
  7177                           tosh	equ	0xFFE
  7178                           tosl	equ	0xFFD
  7179                           pclath	equ	0xFFA
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           prodh	equ	0xFF4
  7185                           prodl	equ	0xFF3
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postdec1	equ	0xFE5
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _HMI_UpSwitch *****************
  7200 ;; Defined at:
  7201 ;;		line 37 in file "HMI.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      unsigned char 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    8
  7222 ;; This function calls:
  7223 ;;		_Port_GetPin
  7224 ;; This function is called by:
  7225 ;;		_HMI_Init
  7226 ;;		_Button_Poll
  7227 ;;		_mode2
  7228 ;;		_getMode
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           	psect	text31
  7233  0148F0                     __ptext31:
  7234                           	opt stack 0
  7235  0148F0                     _HMI_UpSwitch:
  7236                           	opt stack 21
  7237                           
  7238                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  7239                           
  7240                           ;incstack = 0
  7241  0148F0  0E95               	movlw	low _PortE
  7242  0148F2  0100               	movlb	0	; () banked
  7243  0148F4  6FBB               	movwf	Port_GetPin@pInput& (0+255),b
  7244  0148F6  0E00               	movlw	high _PortE
  7245  0148F8  0100               	movlb	0	; () banked
  7246  0148FA  6FBC               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7247  0148FC  0E07               	movlw	7
  7248  0148FE  0100               	movlb	0	; () banked
  7249  014900  6FBD               	movwf	Port_GetPin@pPin& (0+255),b
  7250  014902  EC14  F0A1         	call	_Port_GetPin	;wreg free
  7251  014906  0012               	return	
  7252  014908                     __end_of_HMI_UpSwitch:
  7253                           	opt stack 0
  7254                           tosu	equ	0xFFF
  7255                           tosh	equ	0xFFE
  7256                           tosl	equ	0xFFD
  7257                           pclath	equ	0xFFA
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           postinc0	equ	0xFEE
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postdec1	equ	0xFE5
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           
  7277 ;; *************** function _HMI_RightSwitch *****************
  7278 ;; Defined at:
  7279 ;;		line 32 in file "HMI.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      unsigned char 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;Total ram usage:        0 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    8
  7300 ;; This function calls:
  7301 ;;		_Port_GetPin
  7302 ;; This function is called by:
  7303 ;;		_HMI_Init
  7304 ;;		_Button_Poll
  7305 ;;		_mode2
  7306 ;;		_getMode
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text32
  7311  014908                     __ptext32:
  7312                           	opt stack 0
  7313  014908                     _HMI_RightSwitch:
  7314                           	opt stack 21
  7315                           
  7316                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  7317                           
  7318                           ;incstack = 0
  7319  014908  0E95               	movlw	low _PortE
  7320  01490A  0100               	movlb	0	; () banked
  7321  01490C  6FBB               	movwf	Port_GetPin@pInput& (0+255),b
  7322  01490E  0E00               	movlw	high _PortE
  7323  014910  0100               	movlb	0	; () banked
  7324  014912  6FBC               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7325  014914  0E04               	movlw	4
  7326  014916  0100               	movlb	0	; () banked
  7327  014918  6FBD               	movwf	Port_GetPin@pPin& (0+255),b
  7328  01491A  EC14  F0A1         	call	_Port_GetPin	;wreg free
  7329  01491E  0012               	return	
  7330  014920                     __end_of_HMI_RightSwitch:
  7331                           	opt stack 0
  7332                           tosu	equ	0xFFF
  7333                           tosh	equ	0xFFE
  7334                           tosl	equ	0xFFD
  7335                           pclath	equ	0xFFA
  7336                           tblptru	equ	0xFF8
  7337                           tblptrh	equ	0xFF7
  7338                           tblptrl	equ	0xFF6
  7339                           tablat	equ	0xFF5
  7340                           prodh	equ	0xFF4
  7341                           prodl	equ	0xFF3
  7342                           postinc0	equ	0xFEE
  7343                           wreg	equ	0xFE8
  7344                           indf1	equ	0xFE7
  7345                           postdec1	equ	0xFE5
  7346                           fsr1h	equ	0xFE2
  7347                           fsr1l	equ	0xFE1
  7348                           indf2	equ	0xFDF
  7349                           postinc2	equ	0xFDE
  7350                           postdec2	equ	0xFDD
  7351                           fsr2h	equ	0xFDA
  7352                           fsr2l	equ	0xFD9
  7353                           status	equ	0xFD8
  7354                           
  7355 ;; *************** function _HMI_LeftSwitch *****************
  7356 ;; Defined at:
  7357 ;;		line 27 in file "HMI.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      unsigned char 
  7364 ;; Registers used:
  7365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    8
  7378 ;; This function calls:
  7379 ;;		_Port_GetPin
  7380 ;; This function is called by:
  7381 ;;		_HMI_Init
  7382 ;;		_Button_Poll
  7383 ;;		_mode2
  7384 ;;		_getMode
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text33
  7389  014920                     __ptext33:
  7390                           	opt stack 0
  7391  014920                     _HMI_LeftSwitch:
  7392                           	opt stack 19
  7393                           
  7394                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  7395                           
  7396                           ;incstack = 0
  7397  014920  0E95               	movlw	low _PortE
  7398  014922  0100               	movlb	0	; () banked
  7399  014924  6FBB               	movwf	Port_GetPin@pInput& (0+255),b
  7400  014926  0E00               	movlw	high _PortE
  7401  014928  0100               	movlb	0	; () banked
  7402  01492A  6FBC               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7403  01492C  0E05               	movlw	5
  7404  01492E  0100               	movlb	0	; () banked
  7405  014930  6FBD               	movwf	Port_GetPin@pPin& (0+255),b
  7406  014932  EC14  F0A1         	call	_Port_GetPin	;wreg free
  7407  014936  0012               	return	
  7408  014938                     __end_of_HMI_LeftSwitch:
  7409                           	opt stack 0
  7410                           tosu	equ	0xFFF
  7411                           tosh	equ	0xFFE
  7412                           tosl	equ	0xFFD
  7413                           pclath	equ	0xFFA
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _MXK_TestButton *****************
  7434 ;; Defined at:
  7435 ;;		line 14 in file "Library/MXK.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      unsigned char 
  7442 ;; Registers used:
  7443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:        0 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    8
  7456 ;; This function calls:
  7457 ;;		_Port_GetPin
  7458 ;; This function is called by:
  7459 ;;		_FunctInitButton
  7460 ;;		_Button_Poll
  7461 ;;		_mode2
  7462 ;;		_getMode
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           	psect	text34
  7467  014938                     __ptext34:
  7468                           	opt stack 0
  7469  014938                     _MXK_TestButton:
  7470                           	opt stack 21
  7471                           
  7472                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  7473                           
  7474                           ;incstack = 0
  7475  014938  0EA6               	movlw	low _PortB
  7476  01493A  0100               	movlb	0	; () banked
  7477  01493C  6FBB               	movwf	Port_GetPin@pInput& (0+255),b
  7478  01493E  0E03               	movlw	high _PortB
  7479  014940  0100               	movlb	0	; () banked
  7480  014942  6FBC               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7481  014944  0E04               	movlw	4
  7482  014946  0100               	movlb	0	; () banked
  7483  014948  6FBD               	movwf	Port_GetPin@pPin& (0+255),b
  7484  01494A  EC14  F0A1         	call	_Port_GetPin	;wreg free
  7485  01494E  0012               	return	
  7486  014950                     __end_of_MXK_TestButton:
  7487                           	opt stack 0
  7488                           tosu	equ	0xFFF
  7489                           tosh	equ	0xFFE
  7490                           tosl	equ	0xFFD
  7491                           pclath	equ	0xFFA
  7492                           tblptru	equ	0xFF8
  7493                           tblptrh	equ	0xFF7
  7494                           tblptrl	equ	0xFF6
  7495                           tablat	equ	0xFF5
  7496                           prodh	equ	0xFF4
  7497                           prodl	equ	0xFF3
  7498                           postinc0	equ	0xFEE
  7499                           wreg	equ	0xFE8
  7500                           indf1	equ	0xFE7
  7501                           postdec1	equ	0xFE5
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           
  7511 ;; *************** function _Port_GetQuad *****************
  7512 ;; Defined at:
  7513 ;;		line 498 in file "Library/Port.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7516 ;;		 -> PortE(10), PortD(10), 
  7517 ;;  pQuad           1    2[BANK0 ] enum E6776
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  Output          1    5[BANK0 ] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      unsigned char 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;Total ram usage:        6 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    7
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_HMI_DIPSwitch
  7540 ;;		_MXK_DIPSwitch
  7541 ;;		_Port_ToggleQuad
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text35
  7546  014108                     __ptext35:
  7547                           	opt stack 0
  7548  014108                     _Port_GetQuad:
  7549                           	opt stack 21
  7550                           
  7551                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7552                           
  7553                           ;incstack = 0
  7554  014108  0100               	movlb	0	; () banked
  7555  01410A  EE20 F006          	lfsr	2,6
  7556  01410E  51BB               	movf	Port_GetQuad@pInput& (0+255),w,b
  7557  014110  26D9               	addwf	fsr2l,f,c
  7558  014112  51BC               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7559  014114  22DA               	addwfc	fsr2h,f,c
  7560  014116  CFDE F0BE          	movff	postinc2,??_Port_GetQuad
  7561  01411A  CFDD F0BF          	movff	postdec2,??_Port_GetQuad+1
  7562  01411E  C0BE  FFD9         	movff	??_Port_GetQuad,fsr2l
  7563  014122  C0BF  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7564  014126  50DF               	movf	indf2,w,c
  7565  014128  0100               	movlb	0	; () banked
  7566  01412A  6FC0               	movwf	Port_GetQuad@Output& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7570  01412C  0100               	movlb	0	; () banked
  7571  01412E  51BD               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7572  014130  0D04               	mullw	4
  7573  014132  28F3               	incf	prodl,w,c
  7574  014134  0100               	movlb	0	; () banked
  7575  014136  6FBE               	movwf	??_Port_GetQuad& (0+255),b
  7576  014138  D003               	goto	u7260
  7577  01413A                     u7265:
  7578  01413A  0100               	movlb	0	; () banked
  7579  01413C  90D8               	bcf	status,0,c
  7580  01413E  33C0               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7581  014140                     u7260:
  7582  014140  0100               	movlb	0	; () banked
  7583  014142  2FBE               	decfsz	??_Port_GetQuad& (0+255),f,b
  7584  014144  D7FA               	goto	u7265
  7585                           
  7586                           ;Port.c: 502: Output &= 0xF;
  7587  014146  0E0F               	movlw	15
  7588  014148  0100               	movlb	0	; () banked
  7589  01414A  17C0               	andwf	Port_GetQuad@Output& (0+255),f,b
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;Port.c: 503: return Output;
  7593  01414C  0100               	movlb	0	; () banked
  7594  01414E  51C0               	movf	Port_GetQuad@Output& (0+255),w,b
  7595  014150  0012               	return	
  7596  014152                     __end_of_Port_GetQuad:
  7597                           	opt stack 0
  7598                           tosu	equ	0xFFF
  7599                           tosh	equ	0xFFE
  7600                           tosl	equ	0xFFD
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           postinc0	equ	0xFEE
  7609                           wreg	equ	0xFE8
  7610                           indf1	equ	0xFE7
  7611                           postdec1	equ	0xFE5
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _Event_DIPSwitch *****************
  7622 ;; Defined at:
  7623 ;;		line 22 in file "Events.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  pState          1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  pState          1   25[BANK0 ] unsigned char 
  7628 ;;  Bar             1   26[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;Total ram usage:        2 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:   13
  7645 ;; This function calls:
  7646 ;;		_HMI_GetBar
  7647 ;;		_HMI_SetBar
  7648 ;;		_LED_Toggle
  7649 ;; This function is called by:
  7650 ;;		_FunctInitButton
  7651 ;;		_Button_Poll
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text36
  7656  01461A                     __ptext36:
  7657                           	opt stack 0
  7658  01461A                     _Event_DIPSwitch:
  7659                           	opt stack 14
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;incstack = 0
  7663                           ;Event_DIPSwitch@pState stored from wreg
  7664  01461A  0100               	movlb	0	; () banked
  7665  01461C  6FD4               	movwf	Event_DIPSwitch@pState& (0+255),b
  7666                           
  7667                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  7668  01461E  EC1D  F0A5         	call	_HMI_GetBar	;wreg free
  7669  014622  0100               	movlb	0	; () banked
  7670  014624  6FD5               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;Events.c: 25: Bar &= 0x0F;
  7674  014626  0E0F               	movlw	15
  7675  014628  0100               	movlb	0	; () banked
  7676  01462A  17D5               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;Events.c: 26: pState <<= 4;
  7680  01462C  0100               	movlb	0	; () banked
  7681  01462E  3BD4               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7682  014630  0EF0               	movlw	240
  7683  014632  17D4               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  7687  014634  0100               	movlb	0	; () banked
  7688  014636  51D4               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7689  014638  0100               	movlb	0	; () banked
  7690  01463A  11D5               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7691  01463C  EC08  F0A5         	call	_HMI_SetBar
  7692                           
  7693                           ;Events.c: 32: LED_Toggle(eLED1);
  7694  014640  0E00               	movlw	0
  7695  014642  ECCD  F0A0         	call	_LED_Toggle
  7696  014646  0012               	return		;funcret
  7697  014648                     __end_of_Event_DIPSwitch:
  7698                           	opt stack 0
  7699                           tosu	equ	0xFFF
  7700                           tosh	equ	0xFFE
  7701                           tosl	equ	0xFFD
  7702                           pclath	equ	0xFFA
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           postinc0	equ	0xFEE
  7710                           wreg	equ	0xFE8
  7711                           indf1	equ	0xFE7
  7712                           postdec1	equ	0xFE5
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function _Event_NULL *****************
  7723 ;; Defined at:
  7724 ;;		line 9 in file "Events.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  pState          1    wreg     unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  pState          1    0[COMRAM] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;Total ram usage:        0 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    7
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_HMI_Init
  7749 ;;		_Button_Poll
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text37
  7754  014A5A                     __ptext37:
  7755                           	opt stack 0
  7756  014A5A                     _Event_NULL:
  7757                           	opt stack 20
  7758                           
  7759                           ;incstack = 0
  7760  014A5A  0012               	return		;funcret
  7761  014A5C                     __end_of_Event_NULL:
  7762                           	opt stack 0
  7763                           tosu	equ	0xFFF
  7764                           tosh	equ	0xFFE
  7765                           tosl	equ	0xFFD
  7766                           pclath	equ	0xFFA
  7767                           tblptru	equ	0xFF8
  7768                           tblptrh	equ	0xFF7
  7769                           tblptrl	equ	0xFF6
  7770                           tablat	equ	0xFF5
  7771                           prodh	equ	0xFF4
  7772                           prodl	equ	0xFF3
  7773                           postinc0	equ	0xFEE
  7774                           wreg	equ	0xFE8
  7775                           indf1	equ	0xFE7
  7776                           postdec1	equ	0xFE5
  7777                           fsr1h	equ	0xFE2
  7778                           fsr1l	equ	0xFE1
  7779                           indf2	equ	0xFDF
  7780                           postinc2	equ	0xFDE
  7781                           postdec2	equ	0xFDD
  7782                           fsr2h	equ	0xFDA
  7783                           fsr2l	equ	0xFD9
  7784                           status	equ	0xFD8
  7785                           
  7786 ;; *************** function _Event_TestButton *****************
  7787 ;; Defined at:
  7788 ;;		line 52 in file "Events.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  pState          1    wreg     unsigned char 
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;  pState          1   25[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;Total ram usage:        1 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:   13
  7809 ;; This function calls:
  7810 ;;		_HMI_SetButton
  7811 ;;		_HMI_SetNumber
  7812 ;;		_LED_Toggle
  7813 ;; This function is called by:
  7814 ;;		_FunctInitButton
  7815 ;;		_Button_Poll
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text38
  7820  014474                     __ptext38:
  7821                           	opt stack 0
  7822  014474                     _Event_TestButton:
  7823                           	opt stack 14
  7824                           
  7825                           ;incstack = 0
  7826                           ;Event_TestButton@pState stored from wreg
  7827  014474  0100               	movlb	0	; () banked
  7828  014476  6FD4               	movwf	Event_TestButton@pState& (0+255),b
  7829                           
  7830                           ;Events.c: 56: static UINT8 j = 0;
  7831                           ;Events.c: 60: if (pState == 0)
  7832  014478  0100               	movlb	0	; () banked
  7833  01447A  51D4               	movf	Event_TestButton@pState& (0+255),w,b
  7834  01447C  0100               	movlb	0	; () banked
  7835  01447E  A4D8               	btfss	status,2,c
  7836  014480  D013               	goto	l1873
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;Events.c: 61: {
  7840                           ;Events.c: 62: j++;
  7841  014482  0100               	movlb	0	; () banked
  7842  014484  2B8F               	incf	Event_TestButton@j& (0+255),f,b
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;Events.c: 63: val += j;
  7846  014486  0100               	movlb	0	; () banked
  7847  014488  518F               	movf	Event_TestButton@j& (0+255),w,b
  7848  01448A  0100               	movlb	0	; () banked
  7849  01448C  2781               	addwf	_val& (0+255),f,b
  7850  01448E  0E00               	movlw	0
  7851  014490  2382               	addwfc	(_val+1)& (0+255),f,b
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;Events.c: 64: HMI_SetNumber( val );
  7855  014492  C081  F0D1         	movff	_val,HMI_SetNumber@pInput
  7856  014496  C082  F0D2         	movff	_val+1,HMI_SetNumber@pInput+1
  7857  01449A  EC3B  F0A3         	call	_HMI_SetNumber	;wreg free
  7858                           
  7859                           ;Events.c: 67: HMI_SetButton( j & 3 );
  7860  01449E  0100               	movlb	0	; () banked
  7861  0144A0  518F               	movf	Event_TestButton@j& (0+255),w,b
  7862  0144A2  0B03               	andlw	3
  7863  0144A4  ECA9  F099         	call	_HMI_SetButton
  7864  0144A8                     l1873:
  7865                           
  7866                           ;Events.c: 68: }
  7867                           ;Events.c: 72: LED_Toggle(eLED1);
  7868  0144A8  0E00               	movlw	0
  7869  0144AA  ECCD  F0A0         	call	_LED_Toggle
  7870  0144AE  0012               	return		;funcret
  7871  0144B0                     __end_of_Event_TestButton:
  7872                           	opt stack 0
  7873                           tosu	equ	0xFFF
  7874                           tosh	equ	0xFFE
  7875                           tosl	equ	0xFFD
  7876                           pclath	equ	0xFFA
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           indf1	equ	0xFE7
  7886                           postdec1	equ	0xFE5
  7887                           fsr1h	equ	0xFE2
  7888                           fsr1l	equ	0xFE1
  7889                           indf2	equ	0xFDF
  7890                           postinc2	equ	0xFDE
  7891                           postdec2	equ	0xFDD
  7892                           fsr2h	equ	0xFDA
  7893                           fsr2l	equ	0xFD9
  7894                           status	equ	0xFD8
  7895                           
  7896 ;; *************** function _HMI_SetNumber *****************
  7897 ;; Defined at:
  7898 ;;		line 221 in file "HMI.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  pInput          2   22[BANK0 ] int 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;		None
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;Total ram usage:        2 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    9
  7919 ;; This function calls:
  7920 ;;		_HMI_SetSegments
  7921 ;;		_itos
  7922 ;; This function is called by:
  7923 ;;		_Event_TestButton
  7924 ;;		_Event_HMI_UpButton
  7925 ;;		_Event_HMI_DownButton
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text39
  7930  014676                     __ptext39:
  7931                           	opt stack 0
  7932  014676                     _HMI_SetNumber:
  7933                           	opt stack 17
  7934                           
  7935                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  7936                           
  7937                           ;incstack = 0
  7938  014676  C0D1  F0C7         	movff	HMI_SetNumber@pInput,itos@input
  7939  01467A  C0D2  F0C8         	movff	HMI_SetNumber@pInput+1,itos@input+1
  7940  01467E  0E38               	movlw	low _HMIBoard
  7941  014680  0100               	movlb	0	; () banked
  7942  014682  6FC9               	movwf	itos@destination& (0+255),b
  7943  014684  0E03               	movlw	high _HMIBoard
  7944  014686  0100               	movlb	0	; () banked
  7945  014688  6FCA               	movwf	(itos@destination+1)& (0+255),b
  7946  01468A  ECA4  F092         	call	_itos	;wreg free
  7947                           
  7948                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  7949  01468E  0E38               	movlw	low _HMIBoard
  7950  014690  0100               	movlb	0	; () banked
  7951  014692  6FBC               	movwf	HMI_SetSegments@pString& (0+255),b
  7952  014694  0E03               	movlw	high _HMIBoard
  7953  014696  0100               	movlb	0	; () banked
  7954  014698  6FBD               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  7955  01469A  EC62  F095         	call	_HMI_SetSegments	;wreg free
  7956  01469E  0012               	return		;funcret
  7957  0146A0                     __end_of_HMI_SetNumber:
  7958                           	opt stack 0
  7959                           tosu	equ	0xFFF
  7960                           tosh	equ	0xFFE
  7961                           tosl	equ	0xFFD
  7962                           pclath	equ	0xFFA
  7963                           tblptru	equ	0xFF8
  7964                           tblptrh	equ	0xFF7
  7965                           tblptrl	equ	0xFF6
  7966                           tablat	equ	0xFF5
  7967                           prodh	equ	0xFF4
  7968                           prodl	equ	0xFF3
  7969                           postinc0	equ	0xFEE
  7970                           wreg	equ	0xFE8
  7971                           indf1	equ	0xFE7
  7972                           postdec1	equ	0xFE5
  7973                           fsr1h	equ	0xFE2
  7974                           fsr1l	equ	0xFE1
  7975                           indf2	equ	0xFDF
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function _itos *****************
  7983 ;; Defined at:
  7984 ;;		line 369 in file "Library/Types.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  input           2   12[BANK0 ] unsigned short 
  7987 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  7988 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  Out             2   20[BANK0 ] unsigned short 
  7991 ;;  Length          2   18[BANK0 ] unsigned short 
  7992 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  7993 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;Total ram usage:       10 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    8
  8010 ;; This function calls:
  8011 ;;		___lwdiv
  8012 ;;		___lwmod
  8013 ;;		_reverse
  8014 ;; This function is called by:
  8015 ;;		_HMI_SetNumber
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text40
  8020  012548                     __ptext40:
  8021                           	opt stack 0
  8022  012548                     _itos:
  8023                           	opt stack 17
  8024                           
  8025                           ;Types.c: 371: UINT16 Out = input;
  8026                           
  8027                           ;incstack = 0
  8028  012548  C0C7  F0CF         	movff	itos@input,itos@Out
  8029  01254C  C0C8  F0D0         	movff	itos@input+1,itos@Out+1
  8030                           
  8031                           ;Types.c: 372: UINT16 Length = 0;
  8032  012550  0E00               	movlw	0
  8033  012552  0100               	movlb	0	; () banked
  8034  012554  6FCE               	movwf	(itos@Length+1)& (0+255),b
  8035  012556  0E00               	movlw	0
  8036  012558  6FCD               	movwf	itos@Length& (0+255),b
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;Types.c: 373: char *Data = destination;
  8040  01255A  C0C9  F0CB         	movff	itos@destination,itos@Data
  8041  01255E  C0CA  F0CC         	movff	itos@destination+1,itos@Data+1
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;Types.c: 374: if(Out == 0)
  8045  012562  0100               	movlb	0	; () banked
  8046  012564  51CF               	movf	itos@Out& (0+255),w,b
  8047  012566  0100               	movlb	0	; () banked
  8048  012568  11D0               	iorwf	(itos@Out+1)& (0+255),w,b
  8049  01256A  A4D8               	btfss	status,2,c
  8050  01256C  D034               	goto	l929
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;Types.c: 375: {
  8054                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8055  01256E  C0CB  FFD9         	movff	itos@Data,fsr2l
  8056  012572  C0CC  FFDA         	movff	itos@Data+1,fsr2h
  8057  012576  0E30               	movlw	48
  8058  012578  6EDF               	movwf	indf2,c
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;Types.c: 377: Length = 1;
  8062  01257A  0E00               	movlw	0
  8063  01257C  0100               	movlb	0	; () banked
  8064  01257E  6FCE               	movwf	(itos@Length+1)& (0+255),b
  8065  012580  0E01               	movlw	1
  8066  012582  6FCD               	movwf	itos@Length& (0+255),b
  8067                           
  8068                           ;Types.c: 378: }
  8069  012584  D040               	goto	l928
  8070  012586                     
  8071                           ; BSR set to: 0
  8072                           ;Types.c: 382: {
  8073                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8074                           
  8075                           ; BSR set to: 0
  8076  012586  C0CF  F0C2         	movff	itos@Out,___lwmod@dividend
  8077  01258A  C0D0  F0C3         	movff	itos@Out+1,___lwmod@dividend+1
  8078  01258E  0E00               	movlw	0
  8079  012590  0100               	movlb	0	; () banked
  8080  012592  6FC5               	movwf	(___lwmod@divisor+1)& (0+255),b
  8081  012594  0E0A               	movlw	10
  8082  012596  6FC4               	movwf	___lwmod@divisor& (0+255),b
  8083  012598  ECAA  F09E         	call	___lwmod	;wreg free
  8084  01259C  0100               	movlb	0	; () banked
  8085  01259E  51C2               	movf	?___lwmod& (0+255),w,b
  8086  0125A0  0F30               	addlw	48
  8087  0125A2  C0CB  FFD9         	movff	itos@Data,fsr2l
  8088  0125A6  C0CC  FFDA         	movff	itos@Data+1,fsr2h
  8089  0125AA  6EDF               	movwf	indf2,c
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;Types.c: 384: Out /= 10;
  8093  0125AC  C0CF  F0BB         	movff	itos@Out,___lwdiv@dividend
  8094  0125B0  C0D0  F0BC         	movff	itos@Out+1,___lwdiv@dividend+1
  8095  0125B4  0E00               	movlw	0
  8096  0125B6  0100               	movlb	0	; () banked
  8097  0125B8  6FBE               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8098  0125BA  0E0A               	movlw	10
  8099  0125BC  6FBD               	movwf	___lwdiv@divisor& (0+255),b
  8100  0125BE  EC02  F09B         	call	___lwdiv	;wreg free
  8101  0125C2  C0BB  F0CF         	movff	?___lwdiv,itos@Out
  8102  0125C6  C0BC  F0D0         	movff	?___lwdiv+1,itos@Out+1
  8103                           
  8104                           ;Types.c: 385: Length ++;
  8105  0125CA  0100               	movlb	0	; () banked
  8106  0125CC  4BCD               	infsnz	itos@Length& (0+255),f,b
  8107  0125CE  2BCE               	incf	(itos@Length+1)& (0+255),f,b
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;Types.c: 386: Data++;
  8111  0125D0  0100               	movlb	0	; () banked
  8112  0125D2  4BCB               	infsnz	itos@Data& (0+255),f,b
  8113  0125D4  2BCC               	incf	(itos@Data+1)& (0+255),f,b
  8114  0125D6                     l929:
  8115                           
  8116                           ; BSR set to: 0
  8117                           
  8118                           ; BSR set to: 0
  8119  0125D6  0100               	movlb	0	; () banked
  8120  0125D8  51CF               	movf	itos@Out& (0+255),w,b
  8121  0125DA  0100               	movlb	0	; () banked
  8122  0125DC  11D0               	iorwf	(itos@Out+1)& (0+255),w,b
  8123  0125DE  B4D8               	btfsc	status,2,c
  8124  0125E0  D008               	goto	u7000
  8125                           
  8126                           ; BSR set to: 0
  8127  0125E2  0100               	movlb	0	; () banked
  8128  0125E4  51CE               	movf	(itos@Length+1)& (0+255),w,b
  8129  0125E6  E105               	bnz	l10954
  8130  0125E8  0E06               	movlw	6
  8131  0125EA  0100               	movlb	0	; () banked
  8132  0125EC  5DCD               	subwf	itos@Length& (0+255),w,b
  8133  0125EE  A0D8               	btfss	status,0,c
  8134  0125F0  D7CA               	goto	l930
  8135  0125F2                     u7000:
  8136  0125F2                     l10954:
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;Types.c: 387: }
  8140                           ;Types.c: 388: reverse(destination, Length);
  8141  0125F2  C0C9  F0BB         	movff	itos@destination,reverse@input
  8142  0125F6  C0CA  F0BC         	movff	itos@destination+1,reverse@input+1
  8143  0125FA  C0CD  F0BD         	movff	itos@Length,reverse@length
  8144  0125FE  C0CE  F0BE         	movff	itos@Length+1,reverse@length+1
  8145  012602  ECD5  F09C         	call	_reverse	;wreg free
  8146  012606                     l928:
  8147                           
  8148                           ;Types.c: 389: }
  8149                           ;Types.c: 390: destination[Length] = '\0';
  8150  012606  0100               	movlb	0	; () banked
  8151  012608  51CD               	movf	itos@Length& (0+255),w,b
  8152  01260A  0100               	movlb	0	; () banked
  8153  01260C  25C9               	addwf	itos@destination& (0+255),w,b
  8154  01260E  6ED9               	movwf	fsr2l,c
  8155  012610  0100               	movlb	0	; () banked
  8156  012612  51CE               	movf	(itos@Length+1)& (0+255),w,b
  8157  012614  0100               	movlb	0	; () banked
  8158  012616  21CA               	addwfc	(itos@destination+1)& (0+255),w,b
  8159  012618  6EDA               	movwf	fsr2h,c
  8160  01261A  0E00               	movlw	0
  8161  01261C  6EDF               	movwf	indf2,c
  8162                           
  8163                           ; BSR set to: 0
  8164  01261E  0012               	return		;funcret
  8165  012620                     __end_of_itos:
  8166                           	opt stack 0
  8167                           tosu	equ	0xFFF
  8168                           tosh	equ	0xFFE
  8169                           tosl	equ	0xFFD
  8170                           pclath	equ	0xFFA
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           indf1	equ	0xFE7
  8180                           postdec1	equ	0xFE5
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _reverse *****************
  8191 ;; Defined at:
  8192 ;;		line 357 in file "Library/Types.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8195 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8196 ;;  length          2    2[BANK0 ] unsigned short 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8199 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8200 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8210 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;Total ram usage:        7 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    7
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_itos
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text41
  8225  0139AA                     __ptext41:
  8226                           	opt stack 0
  8227  0139AA                     _reverse:
  8228                           	opt stack 17
  8229                           
  8230                           ;Types.c: 359: char tempVar,
  8231                           ;Types.c: 360: *iterator = input + length;
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;incstack = 0
  8235  0139AA  0100               	movlb	0	; () banked
  8236  0139AC  51BD               	movf	reverse@length& (0+255),w,b
  8237  0139AE  0100               	movlb	0	; () banked
  8238  0139B0  25BB               	addwf	reverse@input& (0+255),w,b
  8239  0139B2  0100               	movlb	0	; () banked
  8240  0139B4  6FC0               	movwf	reverse@iterator& (0+255),b
  8241  0139B6  0100               	movlb	0	; () banked
  8242  0139B8  51BE               	movf	(reverse@length+1)& (0+255),w,b
  8243  0139BA  0100               	movlb	0	; () banked
  8244  0139BC  21BC               	addwfc	(reverse@input+1)& (0+255),w,b
  8245  0139BE  0100               	movlb	0	; () banked
  8246  0139C0  6FC1               	movwf	(reverse@iterator+1)& (0+255),b
  8247                           
  8248                           ;Types.c: 362: while ( --iterator > input )
  8249  0139C2  D01A               	goto	l921
  8250  0139C4                     
  8251                           ; BSR set to: 0
  8252                           ;Types.c: 363: {
  8253                           ;Types.c: 364: tempVar = *input;
  8254                           
  8255                           ; BSR set to: 0
  8256  0139C4  C0BB  FFD9         	movff	reverse@input,fsr2l
  8257  0139C8  C0BC  FFDA         	movff	reverse@input+1,fsr2h
  8258  0139CC  50DF               	movf	indf2,w,c
  8259  0139CE  0100               	movlb	0	; () banked
  8260  0139D0  6FBF               	movwf	reverse@tempVar& (0+255),b
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;Types.c: 365: *input++=*iterator;
  8264  0139D2  C0C0  FFD9         	movff	reverse@iterator,fsr2l
  8265  0139D6  C0C1  FFDA         	movff	reverse@iterator+1,fsr2h
  8266  0139DA  C0BB  FFE1         	movff	reverse@input,fsr1l
  8267  0139DE  C0BC  FFE2         	movff	reverse@input+1,fsr1h
  8268  0139E2  CFDF FFE7          	movff	indf2,indf1
  8269                           
  8270                           ; BSR set to: 0
  8271  0139E6  0100               	movlb	0	; () banked
  8272  0139E8  4BBB               	infsnz	reverse@input& (0+255),f,b
  8273  0139EA  2BBC               	incf	(reverse@input+1)& (0+255),f,b
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;Types.c: 366: *iterator=tempVar;
  8277  0139EC  C0C0  FFD9         	movff	reverse@iterator,fsr2l
  8278  0139F0  C0C1  FFDA         	movff	reverse@iterator+1,fsr2h
  8279  0139F4  C0BF  FFDF         	movff	reverse@tempVar,indf2
  8280  0139F8                     l921:
  8281                           
  8282                           ; BSR set to: 0
  8283                           
  8284                           ; BSR set to: 0
  8285  0139F8  0100               	movlb	0	; () banked
  8286  0139FA  07C0               	decf	reverse@iterator& (0+255),f,b
  8287  0139FC  A0D8               	btfss	status,0,c
  8288  0139FE  07C1               	decf	(reverse@iterator+1)& (0+255),f,b
  8289  013A00  0100               	movlb	0	; () banked
  8290  013A02  51C0               	movf	reverse@iterator& (0+255),w,b
  8291  013A04  0100               	movlb	0	; () banked
  8292  013A06  5DBB               	subwf	reverse@input& (0+255),w,b
  8293  013A08  0100               	movlb	0	; () banked
  8294  013A0A  51C1               	movf	(reverse@iterator+1)& (0+255),w,b
  8295  013A0C  0100               	movlb	0	; () banked
  8296  013A0E  59BC               	subwfb	(reverse@input+1)& (0+255),w,b
  8297  013A10  B0D8               	btfsc	status,0,c
  8298  013A12  0012               	return	
  8299  013A14  D7D7               	goto	l922
  8300  013A16                     __end_of_reverse:
  8301                           	opt stack 0
  8302                           tosu	equ	0xFFF
  8303                           tosh	equ	0xFFE
  8304                           tosl	equ	0xFFD
  8305                           pclath	equ	0xFFA
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           postinc0	equ	0xFEE
  8313                           wreg	equ	0xFE8
  8314                           indf1	equ	0xFE7
  8315                           postdec1	equ	0xFE5
  8316                           fsr1h	equ	0xFE2
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function ___lwmod *****************
  8326 ;; Defined at:
  8327 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  dividend        2    7[BANK0 ] unsigned int 
  8330 ;;  divisor         2    9[BANK0 ] unsigned int 
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  counter         1   11[BANK0 ] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  2    7[BANK0 ] unsigned int 
  8335 ;; Registers used:
  8336 ;;		wreg, status,2, status,0
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8342 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;Total ram usage:        5 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    7
  8349 ;; This function calls:
  8350 ;;		Nothing
  8351 ;; This function is called by:
  8352 ;;		_itos
  8353 ;;		_printf
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text42
  8358  013D54                     __ptext42:
  8359                           	opt stack 0
  8360  013D54                     ___lwmod:
  8361                           	opt stack 21
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;incstack = 0
  8365  013D54  0100               	movlb	0	; () banked
  8366  013D56  51C4               	movf	___lwmod@divisor& (0+255),w,b
  8367  013D58  0100               	movlb	0	; () banked
  8368  013D5A  11C5               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8369  013D5C  B4D8               	btfsc	status,2,c
  8370  013D5E  D026               	goto	l2767
  8371                           
  8372                           ; BSR set to: 0
  8373  013D60  0E01               	movlw	1
  8374  013D62  0100               	movlb	0	; () banked
  8375  013D64  6FC6               	movwf	___lwmod@counter& (0+255),b
  8376  013D66  D006               	goto	l2762
  8377  013D68                     
  8378                           ; BSR set to: 0
  8379                           
  8380                           ; BSR set to: 0
  8381  013D68  0100               	movlb	0	; () banked
  8382  013D6A  90D8               	bcf	status,0,c
  8383  013D6C  37C4               	rlcf	___lwmod@divisor& (0+255),f,b
  8384  013D6E  37C5               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8385  013D70  0100               	movlb	0	; () banked
  8386  013D72  2BC6               	incf	___lwmod@counter& (0+255),f,b
  8387  013D74                     l2762:
  8388                           
  8389                           ; BSR set to: 0
  8390                           
  8391                           ; BSR set to: 0
  8392  013D74  0100               	movlb	0	; () banked
  8393  013D76  AFC5               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8394  013D78  D7F7               	goto	l2763
  8395  013D7A                     u6910:
  8396                           
  8397                           ; BSR set to: 0
  8398                           
  8399                           ; BSR set to: 0
  8400                           
  8401                           ; BSR set to: 0
  8402  013D7A  0100               	movlb	0	; () banked
  8403  013D7C  51C4               	movf	___lwmod@divisor& (0+255),w,b
  8404  013D7E  0100               	movlb	0	; () banked
  8405  013D80  5DC2               	subwf	___lwmod@dividend& (0+255),w,b
  8406  013D82  0100               	movlb	0	; () banked
  8407  013D84  51C5               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8408  013D86  0100               	movlb	0	; () banked
  8409  013D88  59C3               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8410  013D8A  A0D8               	btfss	status,0,c
  8411  013D8C  D008               	goto	l2766
  8412                           
  8413                           ; BSR set to: 0
  8414  013D8E  0100               	movlb	0	; () banked
  8415  013D90  51C4               	movf	___lwmod@divisor& (0+255),w,b
  8416  013D92  0100               	movlb	0	; () banked
  8417  013D94  5FC2               	subwf	___lwmod@dividend& (0+255),f,b
  8418  013D96  0100               	movlb	0	; () banked
  8419  013D98  51C5               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8420  013D9A  0100               	movlb	0	; () banked
  8421  013D9C  5BC3               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8422  013D9E                     l2766:
  8423                           
  8424                           ; BSR set to: 0
  8425                           
  8426                           ; BSR set to: 0
  8427  013D9E  0100               	movlb	0	; () banked
  8428  013DA0  90D8               	bcf	status,0,c
  8429  013DA2  33C5               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8430  013DA4  33C4               	rrcf	___lwmod@divisor& (0+255),f,b
  8431                           
  8432                           ; BSR set to: 0
  8433  013DA6  0100               	movlb	0	; () banked
  8434  013DA8  2FC6               	decfsz	___lwmod@counter& (0+255),f,b
  8435  013DAA  D7E7               	goto	u6910
  8436  013DAC                     l2767:
  8437                           
  8438                           ; BSR set to: 0
  8439                           
  8440                           ; BSR set to: 0
  8441  013DAC  C0C2  F0C2         	movff	___lwmod@dividend,?___lwmod
  8442  013DB0  C0C3  F0C3         	movff	___lwmod@dividend+1,?___lwmod+1
  8443                           
  8444                           ; BSR set to: 0
  8445  013DB4  0012               	return		;funcret
  8446  013DB6                     __end_of___lwmod:
  8447                           	opt stack 0
  8448                           tosu	equ	0xFFF
  8449                           tosh	equ	0xFFE
  8450                           tosl	equ	0xFFD
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           postinc0	equ	0xFEE
  8459                           wreg	equ	0xFE8
  8460                           indf1	equ	0xFE7
  8461                           postdec1	equ	0xFE5
  8462                           fsr1h	equ	0xFE2
  8463                           fsr1l	equ	0xFE1
  8464                           indf2	equ	0xFDF
  8465                           postinc2	equ	0xFDE
  8466                           postdec2	equ	0xFDD
  8467                           fsr2h	equ	0xFDA
  8468                           fsr2l	equ	0xFD9
  8469                           status	equ	0xFD8
  8470                           
  8471 ;; *************** function ___lwdiv *****************
  8472 ;; Defined at:
  8473 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  dividend        2    0[BANK0 ] unsigned int 
  8476 ;;  divisor         2    2[BANK0 ] unsigned int 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  quotient        2    5[BANK0 ] unsigned int 
  8479 ;;  counter         1    4[BANK0 ] unsigned char 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  2    0[BANK0 ] unsigned int 
  8482 ;; Registers used:
  8483 ;;		wreg, status,2, status,0
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;Total ram usage:        7 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    7
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_itos
  8500 ;;		_printf
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           	psect	text43
  8505  013604                     __ptext43:
  8506                           	opt stack 0
  8507  013604                     ___lwdiv:
  8508                           	opt stack 21
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;incstack = 0
  8512  013604  0E00               	movlw	0
  8513  013606  0100               	movlb	0	; () banked
  8514  013608  6FC1               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8515  01360A  0E00               	movlw	0
  8516  01360C  6FC0               	movwf	___lwdiv@quotient& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519  01360E  0100               	movlb	0	; () banked
  8520  013610  51BD               	movf	___lwdiv@divisor& (0+255),w,b
  8521  013612  0100               	movlb	0	; () banked
  8522  013614  11BE               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8523  013616  B4D8               	btfsc	status,2,c
  8524  013618  D02C               	goto	l2757
  8525                           
  8526                           ; BSR set to: 0
  8527  01361A  0E01               	movlw	1
  8528  01361C  0100               	movlb	0	; () banked
  8529  01361E  6FBF               	movwf	___lwdiv@counter& (0+255),b
  8530  013620  D006               	goto	l2752
  8531  013622                     
  8532                           ; BSR set to: 0
  8533                           
  8534                           ; BSR set to: 0
  8535  013622  0100               	movlb	0	; () banked
  8536  013624  90D8               	bcf	status,0,c
  8537  013626  37BD               	rlcf	___lwdiv@divisor& (0+255),f,b
  8538  013628  37BE               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8539  01362A  0100               	movlb	0	; () banked
  8540  01362C  2BBF               	incf	___lwdiv@counter& (0+255),f,b
  8541  01362E                     l2752:
  8542                           
  8543                           ; BSR set to: 0
  8544                           
  8545                           ; BSR set to: 0
  8546  01362E  0100               	movlb	0	; () banked
  8547  013630  AFBE               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8548  013632  D7F7               	goto	l2753
  8549  013634                     u6880:
  8550                           
  8551                           ; BSR set to: 0
  8552                           
  8553                           ; BSR set to: 0
  8554                           
  8555                           ; BSR set to: 0
  8556  013634  0100               	movlb	0	; () banked
  8557  013636  90D8               	bcf	status,0,c
  8558  013638  37C0               	rlcf	___lwdiv@quotient& (0+255),f,b
  8559  01363A  37C1               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8560                           
  8561                           ; BSR set to: 0
  8562  01363C  0100               	movlb	0	; () banked
  8563  01363E  51BD               	movf	___lwdiv@divisor& (0+255),w,b
  8564  013640  0100               	movlb	0	; () banked
  8565  013642  5DBB               	subwf	___lwdiv@dividend& (0+255),w,b
  8566  013644  0100               	movlb	0	; () banked
  8567  013646  51BE               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8568  013648  0100               	movlb	0	; () banked
  8569  01364A  59BC               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8570  01364C  A0D8               	btfss	status,0,c
  8571  01364E  D00A               	goto	l2756
  8572                           
  8573                           ; BSR set to: 0
  8574  013650  0100               	movlb	0	; () banked
  8575  013652  51BD               	movf	___lwdiv@divisor& (0+255),w,b
  8576  013654  0100               	movlb	0	; () banked
  8577  013656  5FBB               	subwf	___lwdiv@dividend& (0+255),f,b
  8578  013658  0100               	movlb	0	; () banked
  8579  01365A  51BE               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8580  01365C  0100               	movlb	0	; () banked
  8581  01365E  5BBC               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8582                           
  8583                           ; BSR set to: 0
  8584  013660  0100               	movlb	0	; () banked
  8585  013662  81C0               	bsf	___lwdiv@quotient& (0+255),0,b
  8586  013664                     l2756:
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  013664  0100               	movlb	0	; () banked
  8592  013666  90D8               	bcf	status,0,c
  8593  013668  33BE               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8594  01366A  33BD               	rrcf	___lwdiv@divisor& (0+255),f,b
  8595                           
  8596                           ; BSR set to: 0
  8597  01366C  0100               	movlb	0	; () banked
  8598  01366E  2FBF               	decfsz	___lwdiv@counter& (0+255),f,b
  8599  013670  D7E1               	goto	u6880
  8600  013672                     l2757:
  8601                           
  8602                           ; BSR set to: 0
  8603                           
  8604                           ; BSR set to: 0
  8605  013672  C0C0  F0BB         	movff	___lwdiv@quotient,?___lwdiv
  8606  013676  C0C1  F0BC         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8607                           
  8608                           ; BSR set to: 0
  8609  01367A  0012               	return		;funcret
  8610  01367C                     __end_of___lwdiv:
  8611                           	opt stack 0
  8612                           tosu	equ	0xFFF
  8613                           tosh	equ	0xFFE
  8614                           tosl	equ	0xFFD
  8615                           pclath	equ	0xFFA
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           indf1	equ	0xFE7
  8625                           postdec1	equ	0xFE5
  8626                           fsr1h	equ	0xFE2
  8627                           fsr1l	equ	0xFE1
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           fsr2h	equ	0xFDA
  8632                           fsr2l	equ	0xFD9
  8633                           status	equ	0xFD8
  8634                           
  8635 ;; *************** function _HMI_SetSegments *****************
  8636 ;; Defined at:
  8637 ;;		line 226 in file "HMI.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  8640 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  in              2    4[BANK0 ] unsigned short 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        5 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    8
  8659 ;; This function calls:
  8660 ;;		_ToSegment
  8661 ;; This function is called by:
  8662 ;;		_HMI_SetNumber
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           	psect	text44
  8667  012AC4                     __ptext44:
  8668                           	opt stack 0
  8669  012AC4                     _HMI_SetSegments:
  8670                           	opt stack 17
  8671                           
  8672                           ;HMI.c: 228: UINT16 in=0;
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;incstack = 0
  8676  012AC4  0E00               	movlw	0
  8677  012AC6  0100               	movlb	0	; () banked
  8678  012AC8  6FC0               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  8679  012ACA  0E00               	movlw	0
  8680  012ACC  6FBF               	movwf	HMI_SetSegments@in& (0+255),b
  8681                           
  8682                           ;HMI.c: 229: while(*pString)
  8683  012ACE  D038               	goto	l1202
  8684  012AD0                     
  8685                           ; BSR set to: 0
  8686                           ;HMI.c: 230: {
  8687                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  8688                           
  8689                           ; BSR set to: 0
  8690  012AD0  0E38               	movlw	low _HMIBoard
  8691  012AD2  0100               	movlb	0	; () banked
  8692  012AD4  25BF               	addwf	HMI_SetSegments@in& (0+255),w,b
  8693  012AD6  6ED9               	movwf	fsr2l,c
  8694  012AD8  0E03               	movlw	high _HMIBoard
  8695  012ADA  0100               	movlb	0	; () banked
  8696  012ADC  21C0               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8697  012ADE  6EDA               	movwf	fsr2h,c
  8698  012AE0  C0BC  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  8699  012AE4  C0BD  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  8700  012AE8  50E7               	movf	indf1,w,c
  8701  012AEA  ECEC  F083         	call	_ToSegment
  8702  012AEE  6EDF               	movwf	indf2,c
  8703                           
  8704                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  8705  012AF0  0E38               	movlw	low _HMIBoard
  8706  012AF2  0100               	movlb	0	; () banked
  8707  012AF4  25BF               	addwf	HMI_SetSegments@in& (0+255),w,b
  8708  012AF6  6ED9               	movwf	fsr2l,c
  8709  012AF8  0E03               	movlw	high _HMIBoard
  8710  012AFA  0100               	movlb	0	; () banked
  8711  012AFC  21C0               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8712  012AFE  6EDA               	movwf	fsr2h,c
  8713  012B00  0E80               	movlw	128
  8714  012B02  18DE               	xorwf	postinc2,w,c
  8715  012B04  A4D8               	btfss	status,2,c
  8716  012B06  D00E               	goto	l1201
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;HMI.c: 234: {
  8720                           ;HMI.c: 235: in--;
  8721  012B08  0100               	movlb	0	; () banked
  8722  012B0A  07BF               	decf	HMI_SetSegments@in& (0+255),f,b
  8723  012B0C  A0D8               	btfss	status,0,c
  8724  012B0E  07C0               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  8728  012B10  0E38               	movlw	low _HMIBoard
  8729  012B12  0100               	movlb	0	; () banked
  8730  012B14  25BF               	addwf	HMI_SetSegments@in& (0+255),w,b
  8731  012B16  6ED9               	movwf	fsr2l,c
  8732  012B18  0E03               	movlw	high _HMIBoard
  8733  012B1A  0100               	movlb	0	; () banked
  8734  012B1C  21C0               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8735  012B1E  6EDA               	movwf	fsr2h,c
  8736  012B20  0E00               	movlw	0
  8737  012B22  8EDB               	bsf	plusw2,7,c
  8738  012B24                     l1201:
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;HMI.c: 237: }
  8742                           ;HMI.c: 239: pString++;
  8743                           
  8744                           ; BSR set to: 0
  8745  012B24  0100               	movlb	0	; () banked
  8746  012B26  4BBC               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  8747  012B28  2BBD               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;HMI.c: 240: in++;
  8751  012B2A  0100               	movlb	0	; () banked
  8752  012B2C  4BBF               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8753  012B2E  2BC0               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;HMI.c: 241: if (in>=6)
  8757  012B30  0100               	movlb	0	; () banked
  8758  012B32  51C0               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8759  012B34  E11A               	bnz	l11006
  8760  012B36  0E06               	movlw	6
  8761  012B38  0100               	movlb	0	; () banked
  8762  012B3A  5DBF               	subwf	HMI_SetSegments@in& (0+255),w,b
  8763  012B3C  B0D8               	btfsc	status,0,c
  8764  012B3E  D015               	goto	l1204
  8765  012B40                     l1202:
  8766                           
  8767                           ; BSR set to: 0
  8768                           
  8769                           ; BSR set to: 0
  8770                           
  8771                           ; BSR set to: 0
  8772  012B40  C0BC  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  8773  012B44  C0BD  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  8774  012B48  50DF               	movf	indf2,w,c
  8775  012B4A  B4D8               	btfsc	status,2,c
  8776  012B4C  D00E               	goto	l1204
  8777  012B4E  D7C0               	goto	l1200
  8778  012B50                     
  8779                           ; BSR set to: 0
  8780                           ;HMI.c: 245: {
  8781                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  8782                           
  8783                           ; BSR set to: 0
  8784  012B50  0E38               	movlw	low _HMIBoard
  8785  012B52  0100               	movlb	0	; () banked
  8786  012B54  25BF               	addwf	HMI_SetSegments@in& (0+255),w,b
  8787  012B56  6ED9               	movwf	fsr2l,c
  8788  012B58  0E03               	movlw	high _HMIBoard
  8789  012B5A  0100               	movlb	0	; () banked
  8790  012B5C  21C0               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8791  012B5E  6EDA               	movwf	fsr2h,c
  8792  012B60  0E00               	movlw	0
  8793  012B62  6EDF               	movwf	indf2,c
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;HMI.c: 247: in++;
  8797  012B64  0100               	movlb	0	; () banked
  8798  012B66  4BBF               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8799  012B68  2BC0               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8800  012B6A                     l1204:
  8801  012B6A                     l11006:
  8802                           
  8803                           ; BSR set to: 0
  8804  012B6A  0100               	movlb	0	; () banked
  8805  012B6C  51C0               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8806  012B6E  E106               	bnz	l1207
  8807  012B70  0E06               	movlw	6
  8808  012B72  0100               	movlb	0	; () banked
  8809  012B74  5DBF               	subwf	HMI_SetSegments@in& (0+255),w,b
  8810  012B76  B0D8               	btfsc	status,0,c
  8811  012B78  0012               	return	
  8812  012B7A  D7EA               	goto	l1205
  8813  012B7C                     l1207:
  8814                           
  8815                           ; BSR set to: 0
  8816  012B7C  0012               	return		;funcret
  8817  012B7E                     __end_of_HMI_SetSegments:
  8818                           	opt stack 0
  8819                           tosu	equ	0xFFF
  8820                           tosh	equ	0xFFE
  8821                           tosl	equ	0xFFD
  8822                           pclath	equ	0xFFA
  8823                           tblptru	equ	0xFF8
  8824                           tblptrh	equ	0xFF7
  8825                           tblptrl	equ	0xFF6
  8826                           tablat	equ	0xFF5
  8827                           prodh	equ	0xFF4
  8828                           prodl	equ	0xFF3
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           indf1	equ	0xFE7
  8832                           postdec1	equ	0xFE5
  8833                           fsr1h	equ	0xFE2
  8834                           fsr1l	equ	0xFE1
  8835                           indf2	equ	0xFDF
  8836                           postinc2	equ	0xFDE
  8837                           postdec2	equ	0xFDD
  8838                           plusw2	equ	0xFDB
  8839                           fsr2h	equ	0xFDA
  8840                           fsr2l	equ	0xFD9
  8841                           status	equ	0xFD8
  8842                           
  8843 ;; *************** function _ToSegment *****************
  8844 ;; Defined at:
  8845 ;;		line 284 in file "Library/Types.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  pCHR            1    wreg     unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  pCHR            1    0[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      unsigned char 
  8852 ;; Registers used:
  8853 ;;		wreg, status,2, status,0
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;Total ram usage:        1 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    7
  8866 ;; This function calls:
  8867 ;;		Nothing
  8868 ;; This function is called by:
  8869 ;;		_HMI_SetSegments
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text45
  8874  0107D8                     __ptext45:
  8875                           	opt stack 0
  8876  0107D8                     _ToSegment:
  8877                           	opt stack 17
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;incstack = 0
  8881                           ;ToSegment@pCHR stored from wreg
  8882  0107D8  0100               	movlb	0	; () banked
  8883  0107DA  6FBB               	movwf	ToSegment@pCHR& (0+255),b
  8884                           
  8885                           ;Types.c: 286: switch(pCHR)
  8886  0107DC  D07E               	goto	l853
  8887  0107DE  0E3F               	movlw	63
  8888  0107E0  0012               	return	
  8889  0107E2  0E06               	movlw	6
  8890  0107E4  0012               	return	
  8891  0107E6  0E5B               	movlw	91
  8892  0107E8  0012               	return	
  8893  0107EA  0E4F               	movlw	79
  8894  0107EC  0012               	return	
  8895  0107EE  0E66               	movlw	102
  8896  0107F0  0012               	return	
  8897  0107F2  0E6D               	movlw	109
  8898  0107F4  0012               	return	
  8899  0107F6  0E7D               	movlw	125
  8900  0107F8  0012               	return	
  8901  0107FA  0E07               	movlw	7
  8902  0107FC  0012               	return	
  8903  0107FE  0E7F               	movlw	127
  8904  010800  0012               	return	
  8905  010802  0E6F               	movlw	111
  8906  010804  0012               	return	
  8907  010806  0E5F               	movlw	95
  8908  010808  0012               	return	
  8909  01080A  0E7C               	movlw	124
  8910  01080C  0012               	return	
  8911  01080E  0E58               	movlw	88
  8912  010810  0012               	return	
  8913  010812  0E5E               	movlw	94
  8914  010814  0012               	return	
  8915  010816  0E7B               	movlw	123
  8916  010818  0012               	return	
  8917  01081A  0E71               	movlw	113
  8918  01081C  0012               	return	
  8919  01081E  0E6F               	movlw	111
  8920  010820  0012               	return	
  8921  010822  0E74               	movlw	116
  8922  010824  0012               	return	
  8923  010826  0E04               	movlw	4
  8924  010828  0012               	return	
  8925  01082A  0E0E               	movlw	14
  8926  01082C  0012               	return	
  8927  01082E  0E7A               	movlw	122
  8928  010830  0012               	return	
  8929  010832  0E06               	movlw	6
  8930  010834  0012               	return	
  8931  010836  0E14               	movlw	20
  8932  010838  0012               	return	
  8933  01083A  0E54               	movlw	84
  8934  01083C  0012               	return	
  8935  01083E  0E5C               	movlw	92
  8936  010840  0012               	return	
  8937  010842  0E73               	movlw	115
  8938  010844  0012               	return	
  8939  010846  0E67               	movlw	103
  8940  010848  0012               	return	
  8941  01084A  0E50               	movlw	80
  8942  01084C  0012               	return	
  8943  01084E  0E6D               	movlw	109
  8944  010850  0012               	return	
  8945  010852  0E78               	movlw	120
  8946  010854  0012               	return	
  8947  010856  0E1C               	movlw	28
  8948  010858  0012               	return	
  8949  01085A  0E62               	movlw	98
  8950  01085C  0012               	return	
  8951  01085E  0E2A               	movlw	42
  8952  010860  0012               	return	
  8953  010862  0E64               	movlw	100
  8954  010864  0012               	return	
  8955  010866  0E6E               	movlw	110
  8956  010868  0012               	return	
  8957  01086A  0E5B               	movlw	91
  8958  01086C  0012               	return	
  8959  01086E  0E77               	movlw	119
  8960  010870  0012               	return	
  8961  010872  0E7F               	movlw	127
  8962  010874  0012               	return	
  8963  010876  0E39               	movlw	57
  8964  010878  0012               	return	
  8965  01087A  0E3F               	movlw	63
  8966  01087C  0012               	return	
  8967  01087E  0E79               	movlw	121
  8968  010880  0012               	return	
  8969  010882  0E71               	movlw	113
  8970  010884  0012               	return	
  8971  010886  0E3D               	movlw	61
  8972  010888  0012               	return	
  8973  01088A  0E76               	movlw	118
  8974  01088C  0012               	return	
  8975  01088E  0E06               	movlw	6
  8976  010890  0012               	return	
  8977  010892  0E1E               	movlw	30
  8978  010894  0012               	return	
  8979  010896  0E57               	movlw	87
  8980  010898  0012               	return	
  8981  01089A  0E38               	movlw	56
  8982  01089C  0012               	return	
  8983  01089E  0E76               	movlw	118
  8984  0108A0  0012               	return	
  8985  0108A2  0E76               	movlw	118
  8986  0108A4  0012               	return	
  8987  0108A6  0E3F               	movlw	63
  8988  0108A8  0012               	return	
  8989  0108AA  0E73               	movlw	115
  8990  0108AC  0012               	return	
  8991  0108AE  0E3F               	movlw	63
  8992  0108B0  0012               	return	
  8993  0108B2  0E77               	movlw	119
  8994  0108B4  0012               	return	
  8995  0108B6  0E6D               	movlw	109
  8996  0108B8  0012               	return	
  8997  0108BA  0E31               	movlw	49
  8998  0108BC  0012               	return	
  8999  0108BE  0E3E               	movlw	62
  9000  0108C0  0012               	return	
  9001  0108C2  0E3E               	movlw	62
  9002  0108C4  0012               	return	
  9003  0108C6  0E7E               	movlw	126
  9004  0108C8  0012               	return	
  9005  0108CA  0E76               	movlw	118
  9006  0108CC  0012               	return	
  9007  0108CE  0E66               	movlw	102
  9008  0108D0  0012               	return	
  9009  0108D2  0E5B               	movlw	91
  9010  0108D4  0012               	return	
  9011  0108D6  0E80               	movlw	128
  9012  0108D8  0012               	return	
  9013  0108DA                     l853:
  9014  0108DA  0100               	movlb	0	; () banked
  9015  0108DC  51BB               	movf	ToSegment@pCHR& (0+255),w,b
  9016                           
  9017                           ; Switch size 1, requested type "space"
  9018                           ; Number of cases is 63, Range of values is 46 to 122
  9019                           ; switch strategies available:
  9020                           ; Name         Instructions Cycles
  9021                           ; simple_byte          190    96 (average)
  9022                           ;	Chosen strategy is simple_byte
  9023  0108DE  0A2E               	xorlw	46	; case 46
  9024  0108E0  B4D8               	btfsc	status,2,c
  9025  0108E2  D7F9               	goto	l917
  9026  0108E4  0A1E               	xorlw	30	; case 48
  9027  0108E6  B4D8               	btfsc	status,2,c
  9028  0108E8  D77A               	goto	l854
  9029  0108EA  0A01               	xorlw	1	; case 49
  9030  0108EC  B4D8               	btfsc	status,2,c
  9031  0108EE  D779               	goto	l856
  9032  0108F0  0A03               	xorlw	3	; case 50
  9033  0108F2  B4D8               	btfsc	status,2,c
  9034  0108F4  D778               	goto	l857
  9035  0108F6  0A01               	xorlw	1	; case 51
  9036  0108F8  B4D8               	btfsc	status,2,c
  9037  0108FA  D777               	goto	l858
  9038  0108FC  0A07               	xorlw	7	; case 52
  9039  0108FE  B4D8               	btfsc	status,2,c
  9040  010900  D776               	goto	l859
  9041  010902  0A01               	xorlw	1	; case 53
  9042  010904  B4D8               	btfsc	status,2,c
  9043  010906  D775               	goto	l860
  9044  010908  0A03               	xorlw	3	; case 54
  9045  01090A  B4D8               	btfsc	status,2,c
  9046  01090C  D774               	goto	l861
  9047  01090E  0A01               	xorlw	1	; case 55
  9048  010910  B4D8               	btfsc	status,2,c
  9049  010912  D773               	goto	l862
  9050  010914  0A0F               	xorlw	15	; case 56
  9051  010916  B4D8               	btfsc	status,2,c
  9052  010918  D772               	goto	l863
  9053  01091A  0A01               	xorlw	1	; case 57
  9054  01091C  B4D8               	btfsc	status,2,c
  9055  01091E  D771               	goto	l864
  9056  010920  0A78               	xorlw	120	; case 65
  9057  010922  B4D8               	btfsc	status,2,c
  9058  010924  D7A4               	goto	l891
  9059  010926  0A03               	xorlw	3	; case 66
  9060  010928  B4D8               	btfsc	status,2,c
  9061  01092A  D7A3               	goto	l892
  9062  01092C  0A01               	xorlw	1	; case 67
  9063  01092E  B4D8               	btfsc	status,2,c
  9064  010930  D7A2               	goto	l893
  9065  010932  0A07               	xorlw	7	; case 68
  9066  010934  B4D8               	btfsc	status,2,c
  9067  010936  D7A1               	goto	l894
  9068  010938  0A01               	xorlw	1	; case 69
  9069  01093A  B4D8               	btfsc	status,2,c
  9070  01093C  D7A0               	goto	l895
  9071  01093E  0A03               	xorlw	3	; case 70
  9072  010940  B4D8               	btfsc	status,2,c
  9073  010942  D79F               	goto	l896
  9074  010944  0A01               	xorlw	1	; case 71
  9075  010946  B4D8               	btfsc	status,2,c
  9076  010948  D79E               	goto	l897
  9077  01094A  0A0F               	xorlw	15	; case 72
  9078  01094C  B4D8               	btfsc	status,2,c
  9079  01094E  D79D               	goto	l898
  9080  010950  0A01               	xorlw	1	; case 73
  9081  010952  B4D8               	btfsc	status,2,c
  9082  010954  D79C               	goto	l899
  9083  010956  0A03               	xorlw	3	; case 74
  9084  010958  B4D8               	btfsc	status,2,c
  9085  01095A  D79B               	goto	l900
  9086  01095C  0A01               	xorlw	1	; case 75
  9087  01095E  B4D8               	btfsc	status,2,c
  9088  010960  D79A               	goto	l901
  9089  010962  0A07               	xorlw	7	; case 76
  9090  010964  B4D8               	btfsc	status,2,c
  9091  010966  D799               	goto	l902
  9092  010968  0A01               	xorlw	1	; case 77
  9093  01096A  B4D8               	btfsc	status,2,c
  9094  01096C  D798               	goto	l903
  9095  01096E  0A03               	xorlw	3	; case 78
  9096  010970  B4D8               	btfsc	status,2,c
  9097  010972  D797               	goto	l904
  9098  010974  0A01               	xorlw	1	; case 79
  9099  010976  B4D8               	btfsc	status,2,c
  9100  010978  D796               	goto	l905
  9101  01097A  0A1F               	xorlw	31	; case 80
  9102  01097C  B4D8               	btfsc	status,2,c
  9103  01097E  D795               	goto	l906
  9104  010980  0A01               	xorlw	1	; case 81
  9105  010982  B4D8               	btfsc	status,2,c
  9106  010984  D794               	goto	l907
  9107  010986  0A03               	xorlw	3	; case 82
  9108  010988  B4D8               	btfsc	status,2,c
  9109  01098A  D793               	goto	l908
  9110  01098C  0A01               	xorlw	1	; case 83
  9111  01098E  B4D8               	btfsc	status,2,c
  9112  010990  D792               	goto	l909
  9113  010992  0A07               	xorlw	7	; case 84
  9114  010994  B4D8               	btfsc	status,2,c
  9115  010996  D791               	goto	l910
  9116  010998  0A01               	xorlw	1	; case 85
  9117  01099A  B4D8               	btfsc	status,2,c
  9118  01099C  D790               	goto	l911
  9119  01099E  0A03               	xorlw	3	; case 86
  9120  0109A0  B4D8               	btfsc	status,2,c
  9121  0109A2  D78F               	goto	l912
  9122  0109A4  0A01               	xorlw	1	; case 87
  9123  0109A6  B4D8               	btfsc	status,2,c
  9124  0109A8  D78E               	goto	l913
  9125  0109AA  0A0F               	xorlw	15	; case 88
  9126  0109AC  B4D8               	btfsc	status,2,c
  9127  0109AE  D78D               	goto	l914
  9128  0109B0  0A01               	xorlw	1	; case 89
  9129  0109B2  B4D8               	btfsc	status,2,c
  9130  0109B4  D78C               	goto	l915
  9131  0109B6  0A03               	xorlw	3	; case 90
  9132  0109B8  B4D8               	btfsc	status,2,c
  9133  0109BA  D78B               	goto	l916
  9134  0109BC  0A3B               	xorlw	59	; case 97
  9135  0109BE  B4D8               	btfsc	status,2,c
  9136  0109C0  D722               	goto	l865
  9137  0109C2  0A03               	xorlw	3	; case 98
  9138  0109C4  B4D8               	btfsc	status,2,c
  9139  0109C6  D721               	goto	l866
  9140  0109C8  0A01               	xorlw	1	; case 99
  9141  0109CA  B4D8               	btfsc	status,2,c
  9142  0109CC  D720               	goto	l867
  9143  0109CE  0A07               	xorlw	7	; case 100
  9144  0109D0  B4D8               	btfsc	status,2,c
  9145  0109D2  D71F               	goto	l868
  9146  0109D4  0A01               	xorlw	1	; case 101
  9147  0109D6  B4D8               	btfsc	status,2,c
  9148  0109D8  D71E               	goto	l869
  9149  0109DA  0A03               	xorlw	3	; case 102
  9150  0109DC  B4D8               	btfsc	status,2,c
  9151  0109DE  D71D               	goto	l870
  9152  0109E0  0A01               	xorlw	1	; case 103
  9153  0109E2  B4D8               	btfsc	status,2,c
  9154  0109E4  D71C               	goto	l871
  9155  0109E6  0A0F               	xorlw	15	; case 104
  9156  0109E8  B4D8               	btfsc	status,2,c
  9157  0109EA  D71B               	goto	l872
  9158  0109EC  0A01               	xorlw	1	; case 105
  9159  0109EE  B4D8               	btfsc	status,2,c
  9160  0109F0  D71A               	goto	l873
  9161  0109F2  0A03               	xorlw	3	; case 106
  9162  0109F4  B4D8               	btfsc	status,2,c
  9163  0109F6  D719               	goto	l874
  9164  0109F8  0A01               	xorlw	1	; case 107
  9165  0109FA  B4D8               	btfsc	status,2,c
  9166  0109FC  D718               	goto	l875
  9167  0109FE  0A07               	xorlw	7	; case 108
  9168  010A00  B4D8               	btfsc	status,2,c
  9169  010A02  D717               	goto	l876
  9170  010A04  0A01               	xorlw	1	; case 109
  9171  010A06  B4D8               	btfsc	status,2,c
  9172  010A08  D716               	goto	l877
  9173  010A0A  0A03               	xorlw	3	; case 110
  9174  010A0C  B4D8               	btfsc	status,2,c
  9175  010A0E  D715               	goto	l878
  9176  010A10  0A01               	xorlw	1	; case 111
  9177  010A12  B4D8               	btfsc	status,2,c
  9178  010A14  D714               	goto	l879
  9179  010A16  0A1F               	xorlw	31	; case 112
  9180  010A18  B4D8               	btfsc	status,2,c
  9181  010A1A  D713               	goto	l880
  9182  010A1C  0A01               	xorlw	1	; case 113
  9183  010A1E  B4D8               	btfsc	status,2,c
  9184  010A20  D712               	goto	l881
  9185  010A22  0A03               	xorlw	3	; case 114
  9186  010A24  B4D8               	btfsc	status,2,c
  9187  010A26  D711               	goto	l882
  9188  010A28  0A01               	xorlw	1	; case 115
  9189  010A2A  B4D8               	btfsc	status,2,c
  9190  010A2C  D710               	goto	l883
  9191  010A2E  0A07               	xorlw	7	; case 116
  9192  010A30  B4D8               	btfsc	status,2,c
  9193  010A32  D70F               	goto	l884
  9194  010A34  0A01               	xorlw	1	; case 117
  9195  010A36  B4D8               	btfsc	status,2,c
  9196  010A38  D70E               	goto	l885
  9197  010A3A  0A03               	xorlw	3	; case 118
  9198  010A3C  B4D8               	btfsc	status,2,c
  9199  010A3E  D70D               	goto	l886
  9200  010A40  0A01               	xorlw	1	; case 119
  9201  010A42  B4D8               	btfsc	status,2,c
  9202  010A44  D70C               	goto	l887
  9203  010A46  0A0F               	xorlw	15	; case 120
  9204  010A48  B4D8               	btfsc	status,2,c
  9205  010A4A  D70B               	goto	l888
  9206  010A4C  0A01               	xorlw	1	; case 121
  9207  010A4E  B4D8               	btfsc	status,2,c
  9208  010A50  D70A               	goto	l889
  9209  010A52  0A03               	xorlw	3	; case 122
  9210  010A54  B4D8               	btfsc	status,2,c
  9211  010A56  D709               	goto	l890
  9212                           
  9213                           ;Types.c: 354: return 0;
  9214                           
  9215                           ; BSR set to: 0
  9216  010A58  0E00               	movlw	0
  9217  010A5A  0012               	return	
  9218  010A5C                     __end_of_ToSegment:
  9219                           	opt stack 0
  9220                           tosu	equ	0xFFF
  9221                           tosh	equ	0xFFE
  9222                           tosl	equ	0xFFD
  9223                           pclath	equ	0xFFA
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           postinc0	equ	0xFEE
  9231                           wreg	equ	0xFE8
  9232                           indf1	equ	0xFE7
  9233                           postdec1	equ	0xFE5
  9234                           fsr1h	equ	0xFE2
  9235                           fsr1l	equ	0xFE1
  9236                           indf2	equ	0xFDF
  9237                           postinc2	equ	0xFDE
  9238                           postdec2	equ	0xFDD
  9239                           plusw2	equ	0xFDB
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _HMI_SetButton *****************
  9245 ;; Defined at:
  9246 ;;		line 186 in file "HMI.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;  pValue          1    wreg     unsigned char 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  pValue          1    6[BANK0 ] unsigned char 
  9251 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  9252 ;;  v               1    7[BANK0 ] unsigned char 
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      void 
  9255 ;; Registers used:
  9256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;Total ram usage:        8 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    7
  9269 ;; This function calls:
  9270 ;;		Nothing
  9271 ;; This function is called by:
  9272 ;;		_Event_TestButton
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text46
  9277  013352                     __ptext46:
  9278                           	opt stack 0
  9279  013352                     _HMI_SetButton:
  9280                           	opt stack 19
  9281                           
  9282                           ;incstack = 0
  9283                           ;HMI_SetButton@pValue stored from wreg
  9284  013352  0100               	movlb	0	; () banked
  9285  013354  6FC1               	movwf	HMI_SetButton@pValue& (0+255),b
  9286                           
  9287                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  9288  013356  0ECA               	movlw	low HMI_SetButton@F7213
  9289  013358  6EF6               	movwf	tblptrl,c
  9290  01335A                     	if	1	;There is more than 1 active tblptr byte
  9291  01335A  0EFD               	movlw	high HMI_SetButton@F7213
  9292  01335C  6EF7               	movwf	tblptrh,c
  9293  01335E                     	endif
  9294  01335E                     	if	1	;There are 3 active tblptr bytes
  9295  01335E  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
  9296  013360  6EF8               	movwf	tblptru,c
  9297  013362                     	endif
  9298  013362  0009               	tblrd		*+
  9299  013364  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex
  9300  013368  0009               	tblrd		*+
  9301  01336A  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+1
  9302  01336E  0009               	tblrd		*+
  9303  013370  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+2
  9304  013374  000A               	tblrd		*-
  9305  013376  CFF5 F0C0          	movff	tablat,HMI_SetButton@reindex+3
  9306                           
  9307                           ;HMI.c: 189: UINT8 v = 0b00010001;
  9308  01337A  0E11               	movlw	17
  9309  01337C  0100               	movlb	0	; () banked
  9310  01337E  6FC2               	movwf	HMI_SetButton@v& (0+255),b
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;HMI.c: 190: pValue &= 3;
  9314  013380  0E03               	movlw	3
  9315  013382  0100               	movlb	0	; () banked
  9316  013384  17C1               	andwf	HMI_SetButton@pValue& (0+255),f,b
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;HMI.c: 191: v = v << reindex[pValue];
  9320  013386  0100               	movlb	0	; () banked
  9321  013388  51C1               	movf	HMI_SetButton@pValue& (0+255),w,b
  9322  01338A  0D01               	mullw	1
  9323  01338C  0EBD               	movlw	low HMI_SetButton@reindex
  9324  01338E  24F3               	addwf	prodl,w,c
  9325  013390  6ED9               	movwf	fsr2l,c
  9326  013392  0E00               	movlw	high HMI_SetButton@reindex
  9327  013394  20F4               	addwfc	prodh,w,c
  9328  013396  6EDA               	movwf	fsr2h,c
  9329  013398  50DF               	movf	indf2,w,c
  9330  01339A  0100               	movlb	0	; () banked
  9331  01339C  6FBB               	movwf	??_HMI_SetButton& (0+255),b
  9332  01339E  C0C2  F0BC         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  9333  0133A2  0100               	movlb	0	; () banked
  9334  0133A4  2BBB               	incf	??_HMI_SetButton& (0+255),f,b
  9335  0133A6  D003               	goto	u7374
  9336  0133A8                     u7375:
  9337  0133A8  0100               	movlb	0	; () banked
  9338  0133AA  90D8               	bcf	status,0,c
  9339  0133AC  37BC               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  9340  0133AE                     u7374:
  9341  0133AE  0100               	movlb	0	; () banked
  9342  0133B0  2FBB               	decfsz	??_HMI_SetButton& (0+255),f,b
  9343  0133B2  D7FA               	goto	u7375
  9344  0133B4  0100               	movlb	0	; () banked
  9345  0133B6  51BC               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  9346  0133B8  0100               	movlb	0	; () banked
  9347  0133BA  6FC2               	movwf	HMI_SetButton@v& (0+255),b
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;HMI.c: 192: v = v >> 4;
  9351  0133BC  0100               	movlb	0	; () banked
  9352  0133BE  39C2               	swapf	HMI_SetButton@v& (0+255),w,b
  9353  0133C0  0B0F               	andlw	15
  9354  0133C2  0100               	movlb	0	; () banked
  9355  0133C4  6FC2               	movwf	HMI_SetButton@v& (0+255),b
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;HMI.c: 193: v = v & 0x0F;
  9359  0133C6  0100               	movlb	0	; () banked
  9360  0133C8  51C2               	movf	HMI_SetButton@v& (0+255),w,b
  9361  0133CA  0B0F               	andlw	15
  9362  0133CC  0100               	movlb	0	; () banked
  9363  0133CE  6FC2               	movwf	HMI_SetButton@v& (0+255),b
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;HMI.c: 194: HMIBoard.pButton = v;
  9367  0133D0  0103               	movlb	3	; () banked
  9368  0133D2  513E               	movf	(_HMIBoard+6)& (0+255),w,b
  9369  0133D4  0100               	movlb	0	; () banked
  9370  0133D6  19C2               	xorwf	HMI_SetButton@v& (0+255),w,b
  9371  0133D8  0BF0               	andlw	-16
  9372  0133DA  19C2               	xorwf	HMI_SetButton@v& (0+255),w,b
  9373  0133DC  0103               	movlb	3	; () banked
  9374  0133DE  6F3E               	movwf	(_HMIBoard+6)& (0+255),b
  9375                           
  9376                           ; BSR set to: 3
  9377  0133E0  0012               	return		;funcret
  9378  0133E2                     __end_of_HMI_SetButton:
  9379                           	opt stack 0
  9380                           tosu	equ	0xFFF
  9381                           tosh	equ	0xFFE
  9382                           tosl	equ	0xFFD
  9383                           pclath	equ	0xFFA
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodh	equ	0xFF4
  9389                           prodl	equ	0xFF3
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           indf1	equ	0xFE7
  9393                           postdec1	equ	0xFE5
  9394                           fsr1h	equ	0xFE2
  9395                           fsr1l	equ	0xFE1
  9396                           indf2	equ	0xFDF
  9397                           postinc2	equ	0xFDE
  9398                           postdec2	equ	0xFDD
  9399                           plusw2	equ	0xFDB
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function _HMI_SetBar *****************
  9405 ;; Defined at:
  9406 ;;		line 205 in file "HMI.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  pValue          1    wreg     unsigned char 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  pValue          1    0[BANK0 ] unsigned char 
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;Total ram usage:        1 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    7
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_Event_DIPSwitch
  9431 ;;		_Event_HMI_DIPSwitch
  9432 ;;		_Event_HMI_LeftButton
  9433 ;;		_Event_HMI_RightButton
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           	psect	text47
  9438  014A10                     __ptext47:
  9439                           	opt stack 0
  9440  014A10                     _HMI_SetBar:
  9441                           	opt stack 19
  9442                           
  9443                           ; BSR set to: 3
  9444                           ;incstack = 0
  9445                           ;HMI_SetBar@pValue stored from wreg
  9446  014A10  0100               	movlb	0	; () banked
  9447  014A12  6FBB               	movwf	HMI_SetBar@pValue& (0+255),b
  9448                           
  9449                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9450  014A14  C0BB  F33F         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9451  014A18  0012               	return		;funcret
  9452  014A1A                     __end_of_HMI_SetBar:
  9453                           	opt stack 0
  9454                           tosu	equ	0xFFF
  9455                           tosh	equ	0xFFE
  9456                           tosl	equ	0xFFD
  9457                           pclath	equ	0xFFA
  9458                           tblptru	equ	0xFF8
  9459                           tblptrh	equ	0xFF7
  9460                           tblptrl	equ	0xFF6
  9461                           tablat	equ	0xFF5
  9462                           prodh	equ	0xFF4
  9463                           prodl	equ	0xFF3
  9464                           postinc0	equ	0xFEE
  9465                           wreg	equ	0xFE8
  9466                           indf1	equ	0xFE7
  9467                           postdec1	equ	0xFE5
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           plusw2	equ	0xFDB
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _HMI_GetBar *****************
  9479 ;; Defined at:
  9480 ;;		line 209 in file "HMI.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      unsigned char 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    7
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_Event_DIPSwitch
  9505 ;;		_Event_HMI_DIPSwitch
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text48
  9510  014A3A                     __ptext48:
  9511                           	opt stack 0
  9512  014A3A                     _HMI_GetBar:
  9513                           	opt stack 19
  9514                           
  9515                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9516                           
  9517                           ;incstack = 0
  9518  014A3A  0103               	movlb	3	; () banked
  9519  014A3C  513F               	movf	(_HMIBoard+7)& (0+255),w,b
  9520  014A3E  0012               	return	
  9521  014A40                     __end_of_HMI_GetBar:
  9522                           	opt stack 0
  9523                           tosu	equ	0xFFF
  9524                           tosh	equ	0xFFE
  9525                           tosl	equ	0xFFD
  9526                           pclath	equ	0xFFA
  9527                           tblptru	equ	0xFF8
  9528                           tblptrh	equ	0xFF7
  9529                           tblptrl	equ	0xFF6
  9530                           tablat	equ	0xFF5
  9531                           prodh	equ	0xFF4
  9532                           prodl	equ	0xFF3
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf1	equ	0xFE7
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           plusw2	equ	0xFDB
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _Console_Render *****************
  9548 ;; Defined at:
  9549 ;;		line 377 in file "Library/Console.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  lCursor         4   38[BANK0 ] struct Point
  9554 ;;  y               1   43[BANK0 ] unsigned char 
  9555 ;;  x               1   42[BANK0 ] unsigned char 
  9556 ;;  temp            1   37[BANK0 ] unsigned char 
  9557 ;;  Temp            2    0        unsigned short 
  9558 ;; Return value:  Size  Location     Type
  9559 ;;                  1    wreg      void 
  9560 ;; Registers used:
  9561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9571 ;;Total ram usage:        9 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:   11
  9574 ;; This function calls:
  9575 ;;		_Console_MakeField
  9576 ;;		_LCD_DrawField
  9577 ;;		_LCD_FillRectangle
  9578 ;; This function is called by:
  9579 ;;		_mode2
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           	psect	text49
  9584  010EDC                     __ptext49:
  9585                           	opt stack 0
  9586  010EDC                     _Console_Render:
  9587                           	opt stack 18
  9588                           
  9589                           ;Console.c: 379: Colour Temp;
  9590                           ;Console.c: 380: if (change)
  9591                           
  9592                           ; BSR set to: 3
  9593                           ;incstack = 0
  9594  010EDC  0100               	movlb	0	; () banked
  9595  010EDE  51FF               	movf	_change& (0+255),w,b
  9596  010EE0  B4D8               	btfsc	status,2,c
  9597  010EE2  0012               	return	
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;Console.c: 381: {
  9601                           ;Console.c: 382: UINT8 x, y, temp;
  9602                           ;Console.c: 383: Point lCursor = {6,6};
  9603  010EE4  C3DF  F0E1         	movff	Console_Render@F6956,Console_Render@lCursor
  9604  010EE8  C3E0  F0E2         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9605  010EEC  C3E1  F0E3         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9606  010EF0  C3E2  F0E4         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;Console.c: 385: if (clearall)
  9610  010EF4  0100               	movlb	0	; () banked
  9611  010EF6  5194               	movf	_clearall& (0+255),w,b
  9612  010EF8  B4D8               	btfsc	status,2,c
  9613  010EFA  D005               	goto	l1056
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;Console.c: 386: {
  9617                           ;Console.c: 389: temp = lBufferY;
  9618  010EFC  C092  F0E0         	movff	_lBufferY,Console_Render@temp
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9622  010F00  0E0F               	movlw	15
  9623  010F02  0100               	movlb	0	; () banked
  9624  010F04  6F92               	movwf	_lBufferY& (0+255),b
  9625  010F06                     l1056:
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;Console.c: 391: }
  9629                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9630  010F06  0E00               	movlw	0
  9631  010F08  0100               	movlb	0	; () banked
  9632  010F0A  6FE6               	movwf	Console_Render@y& (0+255),b
  9633  010F0C  D0DF               	goto	l1057
  9634  010F0E                     
  9635                           ; BSR set to: 0
  9636                           ;Console.c: 394: {
  9637                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9638                           
  9639                           ; BSR set to: 0
  9640  010F0E  0100               	movlb	0	; () banked
  9641  010F10  51E6               	movf	Console_Render@y& (0+255),w,b
  9642  010F12  0D02               	mullw	2
  9643  010F14  0E00               	movlw	low _lCBuffer
  9644  010F16  24F3               	addwf	prodl,w,c
  9645  010F18  6ED9               	movwf	fsr2l,c
  9646  010F1A  0E03               	movlw	high _lCBuffer
  9647  010F1C  20F4               	addwfc	prodh,w,c
  9648  010F1E  6EDA               	movwf	fsr2h,c
  9649  010F20  CFDE F0FD          	movff	postinc2,_gForecolour
  9650  010F24  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9654  010F28  0E00               	movlw	0
  9655  010F2A  0100               	movlb	0	; () banked
  9656  010F2C  6FE5               	movwf	Console_Render@x& (0+255),b
  9657  010F2E                     l12296:
  9658                           
  9659                           ; BSR set to: 0
  9660  010F2E  0E13               	movlw	19
  9661  010F30  0100               	movlb	0	; () banked
  9662  010F32  65E5               	cpfsgt	Console_Render@x& (0+255),b
  9663  010F34  D001               	goto	l1059
  9664  010F36  D0BE               	goto	u8230
  9665  010F38                     l1059:
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;Console.c: 397: {
  9669                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9670                           
  9671                           ; BSR set to: 0
  9672  010F38  0100               	movlb	0	; () banked
  9673  010F3A  51E6               	movf	Console_Render@y& (0+255),w,b
  9674  010F3C  0D14               	mullw	20
  9675  010F3E  0EAA               	movlw	low _lBuffer
  9676  010F40  0100               	movlb	0	; () banked
  9677  010F42  6FDE               	movwf	??_Console_Render& (0+255),b
  9678  010F44  0E04               	movlw	high _lBuffer
  9679  010F46  0100               	movlb	0	; () banked
  9680  010F48  6FDF               	movwf	(??_Console_Render+1)& (0+255),b
  9681  010F4A  50F3               	movf	prodl,w,c
  9682  010F4C  0100               	movlb	0	; () banked
  9683  010F4E  27DE               	addwf	??_Console_Render& (0+255),f,b
  9684  010F50  50F4               	movf	prodh,w,c
  9685  010F52  0100               	movlb	0	; () banked
  9686  010F54  23DF               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9687  010F56  0100               	movlb	0	; () banked
  9688  010F58  51E5               	movf	Console_Render@x& (0+255),w,b
  9689  010F5A  0D01               	mullw	1
  9690  010F5C  50F3               	movf	prodl,w,c
  9691  010F5E  0100               	movlb	0	; () banked
  9692  010F60  25DE               	addwf	??_Console_Render& (0+255),w,b
  9693  010F62  6ED9               	movwf	fsr2l,c
  9694  010F64  50F4               	movf	prodh,w,c
  9695  010F66  0100               	movlb	0	; () banked
  9696  010F68  21DF               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9697  010F6A  6EDA               	movwf	fsr2h,c
  9698  010F6C  AEDF               	btfss	indf2,7,c
  9699  010F6E  D09A               	goto	l1063
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;Console.c: 399: {
  9703                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9704  010F70  0100               	movlb	0	; () banked
  9705  010F72  51E6               	movf	Console_Render@y& (0+255),w,b
  9706  010F74  0D14               	mullw	20
  9707  010F76  0EAA               	movlw	low _lBuffer
  9708  010F78  0100               	movlb	0	; () banked
  9709  010F7A  6FDE               	movwf	??_Console_Render& (0+255),b
  9710  010F7C  0E04               	movlw	high _lBuffer
  9711  010F7E  0100               	movlb	0	; () banked
  9712  010F80  6FDF               	movwf	(??_Console_Render+1)& (0+255),b
  9713  010F82  50F3               	movf	prodl,w,c
  9714  010F84  0100               	movlb	0	; () banked
  9715  010F86  27DE               	addwf	??_Console_Render& (0+255),f,b
  9716  010F88  50F4               	movf	prodh,w,c
  9717  010F8A  0100               	movlb	0	; () banked
  9718  010F8C  23DF               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9719  010F8E  0100               	movlb	0	; () banked
  9720  010F90  51E5               	movf	Console_Render@x& (0+255),w,b
  9721  010F92  0D01               	mullw	1
  9722  010F94  50F3               	movf	prodl,w,c
  9723  010F96  0100               	movlb	0	; () banked
  9724  010F98  25DE               	addwf	??_Console_Render& (0+255),w,b
  9725  010F9A  6ED9               	movwf	fsr2l,c
  9726  010F9C  50F4               	movf	prodh,w,c
  9727  010F9E  0100               	movlb	0	; () banked
  9728  010FA0  21DF               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9729  010FA2  6EDA               	movwf	fsr2h,c
  9730  010FA4  0E7F               	movlw	127
  9731  010FA6  16DF               	andwf	indf2,f,c
  9732                           
  9733                           ;Console.c: 401: if (lBuffer[y][x])
  9734  010FA8  0100               	movlb	0	; () banked
  9735  010FAA  51E6               	movf	Console_Render@y& (0+255),w,b
  9736  010FAC  0D14               	mullw	20
  9737  010FAE  0EAA               	movlw	low _lBuffer
  9738  010FB0  0100               	movlb	0	; () banked
  9739  010FB2  6FDE               	movwf	??_Console_Render& (0+255),b
  9740  010FB4  0E04               	movlw	high _lBuffer
  9741  010FB6  0100               	movlb	0	; () banked
  9742  010FB8  6FDF               	movwf	(??_Console_Render+1)& (0+255),b
  9743  010FBA  50F3               	movf	prodl,w,c
  9744  010FBC  0100               	movlb	0	; () banked
  9745  010FBE  27DE               	addwf	??_Console_Render& (0+255),f,b
  9746  010FC0  50F4               	movf	prodh,w,c
  9747  010FC2  0100               	movlb	0	; () banked
  9748  010FC4  23DF               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9749  010FC6  0100               	movlb	0	; () banked
  9750  010FC8  51E5               	movf	Console_Render@x& (0+255),w,b
  9751  010FCA  0D01               	mullw	1
  9752  010FCC  50F3               	movf	prodl,w,c
  9753  010FCE  0100               	movlb	0	; () banked
  9754  010FD0  25DE               	addwf	??_Console_Render& (0+255),w,b
  9755  010FD2  6ED9               	movwf	fsr2l,c
  9756  010FD4  50F4               	movf	prodh,w,c
  9757  010FD6  0100               	movlb	0	; () banked
  9758  010FD8  21DF               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9759  010FDA  6EDA               	movwf	fsr2h,c
  9760  010FDC  50DF               	movf	indf2,w,c
  9761  010FDE  B4D8               	btfsc	status,2,c
  9762  010FE0  D04A               	goto	l1062
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;Console.c: 402: {
  9766                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9767  010FE2  C087  F0C4         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9768  010FE6  C088  F0C5         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9769  010FEA  C0E1  F0C6         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9770  010FEE  C0E2  F0C7         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9771  010FF2  C0E3  F0C8         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9772  010FF6  C0E4  F0C9         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9773  010FFA  C0F9  F0CA         	movff	_gCharSize,LCD_FillRectangle@pSize
  9774  010FFE  C0FA  F0CB         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9775  011002  C0FB  F0CC         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9776  011006  C0FC  F0CD         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9777  01100A  ECEF  F09B         	call	_LCD_FillRectangle	;wreg free
  9778                           
  9779                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9780  01100E  0100               	movlb	0	; () banked
  9781  011010  51E6               	movf	Console_Render@y& (0+255),w,b
  9782  011012  0D14               	mullw	20
  9783  011014  0EAA               	movlw	low _lBuffer
  9784  011016  0100               	movlb	0	; () banked
  9785  011018  6FDE               	movwf	??_Console_Render& (0+255),b
  9786  01101A  0E04               	movlw	high _lBuffer
  9787  01101C  0100               	movlb	0	; () banked
  9788  01101E  6FDF               	movwf	(??_Console_Render+1)& (0+255),b
  9789  011020  50F3               	movf	prodl,w,c
  9790  011022  0100               	movlb	0	; () banked
  9791  011024  27DE               	addwf	??_Console_Render& (0+255),f,b
  9792  011026  50F4               	movf	prodh,w,c
  9793  011028  0100               	movlb	0	; () banked
  9794  01102A  23DF               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9795  01102C  0100               	movlb	0	; () banked
  9796  01102E  51E5               	movf	Console_Render@x& (0+255),w,b
  9797  011030  0D01               	mullw	1
  9798  011032  50F3               	movf	prodl,w,c
  9799  011034  0100               	movlb	0	; () banked
  9800  011036  25DE               	addwf	??_Console_Render& (0+255),w,b
  9801  011038  6ED9               	movwf	fsr2l,c
  9802  01103A  50F4               	movf	prodh,w,c
  9803  01103C  0100               	movlb	0	; () banked
  9804  01103E  21DF               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9805  011040  6EDA               	movwf	fsr2h,c
  9806  011042  50DF               	movf	indf2,w,c
  9807  011044  EC7A  F093         	call	_Console_MakeField
  9808  011048  C0C0  F0CD         	movff	?_Console_MakeField,LCD_DrawField@pField
  9809  01104C  C0C1  F0CE         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9810  011050  C0E1  F0CF         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9811  011054  C0E2  F0D0         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9812  011058  C0E3  F0D1         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9813  01105C  C0E4  F0D2         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9814  011060  C0F9  F0D3         	movff	_gCharSize,LCD_DrawField@pSize
  9815  011064  C0FA  F0D4         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9816  011068  C0FB  F0D5         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9817  01106C  C0FC  F0D6         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9818  011070  EC6C  F098         	call	_LCD_DrawField	;wreg free
  9819                           
  9820                           ;Console.c: 405: }
  9821  011074  D017               	goto	l1063
  9822  011076                     l1062:
  9823                           
  9824                           ;Console.c: 406: else
  9825                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9826  011076  0E00               	movlw	0
  9827  011078  0100               	movlb	0	; () banked
  9828  01107A  6FC5               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9829  01107C  0E00               	movlw	0
  9830  01107E  6FC4               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9831  011080  C0E1  F0C6         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9832  011084  C0E2  F0C7         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9833  011088  C0E3  F0C8         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9834  01108C  C0E4  F0C9         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9835  011090  C0F9  F0CA         	movff	_gCharSize,LCD_FillRectangle@pSize
  9836  011094  C0FA  F0CB         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9837  011098  C0FB  F0CC         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9838  01109C  C0FC  F0CD         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9839  0110A0  ECEF  F09B         	call	_LCD_FillRectangle	;wreg free
  9840  0110A4                     l1063:
  9841                           
  9842                           ;Console.c: 408: }
  9843                           ;Console.c: 409: lCursor.x += (5 + 1);
  9844  0110A4  0E06               	movlw	6
  9845  0110A6  0100               	movlb	0	; () banked
  9846  0110A8  27E1               	addwf	Console_Render@lCursor& (0+255),f,b
  9847  0110AA  0E00               	movlw	0
  9848  0110AC  23E2               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9849                           
  9850                           ; BSR set to: 0
  9851  0110AE  0100               	movlb	0	; () banked
  9852  0110B0  2BE5               	incf	Console_Render@x& (0+255),f,b
  9853  0110B2  D73D               	goto	l12296
  9854  0110B4                     u8230:
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;Console.c: 410: }
  9858                           ;Console.c: 411: lCursor.y += (7 + 1);
  9859                           
  9860                           ; BSR set to: 0
  9861  0110B4  0E08               	movlw	8
  9862  0110B6  0100               	movlb	0	; () banked
  9863  0110B8  27E3               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9864  0110BA  0E00               	movlw	0
  9865  0110BC  23E4               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;Console.c: 412: lCursor.x = 6;
  9869  0110BE  0E00               	movlw	0
  9870  0110C0  0100               	movlb	0	; () banked
  9871  0110C2  6FE2               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9872  0110C4  0E06               	movlw	6
  9873  0110C6  6FE1               	movwf	Console_Render@lCursor& (0+255),b
  9874                           
  9875                           ; BSR set to: 0
  9876  0110C8  0100               	movlb	0	; () banked
  9877  0110CA  2BE6               	incf	Console_Render@y& (0+255),f,b
  9878  0110CC                     l1057:
  9879                           
  9880                           ; BSR set to: 0
  9881                           
  9882                           ; BSR set to: 0
  9883  0110CC  0100               	movlb	0	; () banked
  9884  0110CE  51E6               	movf	Console_Render@y& (0+255),w,b
  9885  0110D0  0100               	movlb	0	; () banked
  9886  0110D2  5D92               	subwf	_lBufferY& (0+255),w,b
  9887  0110D4  B0D8               	btfsc	status,0,c
  9888  0110D6  D71B               	goto	l1058
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;Console.c: 413: }
  9892                           ;Console.c: 415: if (clearall)
  9893                           
  9894                           ; BSR set to: 0
  9895  0110D8  0100               	movlb	0	; () banked
  9896  0110DA  5194               	movf	_clearall& (0+255),w,b
  9897  0110DC  B4D8               	btfsc	status,2,c
  9898  0110DE  0012               	return	
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;Console.c: 416: {
  9902                           ;Console.c: 417: clearall = 0;
  9903  0110E0  0E00               	movlw	0
  9904  0110E2  0100               	movlb	0	; () banked
  9905  0110E4  6F94               	movwf	_clearall& (0+255),b
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;Console.c: 418: lBufferY = temp;
  9909  0110E6  C0E0  F092         	movff	Console_Render@temp,_lBufferY
  9910                           
  9911                           ; BSR set to: 0
  9912  0110EA  0012               	return	
  9913  0110EC                     __end_of_Console_Render:
  9914                           	opt stack 0
  9915                           tosu	equ	0xFFF
  9916                           tosh	equ	0xFFE
  9917                           tosl	equ	0xFFD
  9918                           pclath	equ	0xFFA
  9919                           tblptru	equ	0xFF8
  9920                           tblptrh	equ	0xFF7
  9921                           tblptrl	equ	0xFF6
  9922                           tablat	equ	0xFF5
  9923                           prodh	equ	0xFF4
  9924                           prodl	equ	0xFF3
  9925                           postinc0	equ	0xFEE
  9926                           wreg	equ	0xFE8
  9927                           indf1	equ	0xFE7
  9928                           postdec1	equ	0xFE5
  9929                           fsr1h	equ	0xFE2
  9930                           fsr1l	equ	0xFE1
  9931                           indf2	equ	0xFDF
  9932                           postinc2	equ	0xFDE
  9933                           postdec2	equ	0xFDD
  9934                           plusw2	equ	0xFDB
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8
  9938                           
  9939 ;; *************** function _LCD_FillRectangle *****************
  9940 ;; Defined at:
  9941 ;;		line 318 in file "Library/LCD.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  pColour         2    9[BANK0 ] unsigned short 
  9944 ;;  pPoint          4   11[BANK0 ] struct Point
  9945 ;;  pSize           4   15[BANK0 ] struct Point
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;  j               1   22[BANK0 ] unsigned char 
  9948 ;;  i               1   21[BANK0 ] unsigned char 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      void 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9958 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;Total ram usage:       14 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:   10
  9965 ;; This function calls:
  9966 ;;		_LCD_Word_Write
  9967 ;;		_Set_Addr_Window
  9968 ;; This function is called by:
  9969 ;;		_Console_Render
  9970 ;;		_Console_ClearLine
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text50
  9975  0137DE                     __ptext50:
  9976                           	opt stack 0
  9977  0137DE                     _LCD_FillRectangle:
  9978                           	opt stack 18
  9979                           
  9980                           ;LCD.c: 320: UINT8 i = 0x00;
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;incstack = 0
  9984  0137DE  0E00               	movlw	0
  9985  0137E0  0100               	movlb	0	; () banked
  9986  0137E2  6FD0               	movwf	LCD_FillRectangle@i& (0+255),b
  9987                           
  9988                           ;LCD.c: 321: UINT8 j = 0x00;
  9989  0137E4  0E00               	movlw	0
  9990  0137E6  0100               	movlb	0	; () banked
  9991  0137E8  6FD1               	movwf	LCD_FillRectangle@j& (0+255),b
  9992                           
  9993                           ; BSR set to: 0
  9994                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9995  0137EA  C0C8  F0C0         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9996  0137EE  0100               	movlb	0	; () banked
  9997  0137F0  51C6               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9998  0137F2  0100               	movlb	0	; () banked
  9999  0137F4  25CA               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10000  0137F6  0100               	movlb	0	; () banked
 10001  0137F8  6FCE               	movwf	??_LCD_FillRectangle& (0+255),b
 10002  0137FA  0100               	movlb	0	; () banked
 10003  0137FC  05CE               	decf	??_LCD_FillRectangle& (0+255),w,b
 10004  0137FE  0100               	movlb	0	; () banked
 10005  013800  6FC1               	movwf	Set_Addr_Window@xe& (0+255),b
 10006  013802  0100               	movlb	0	; () banked
 10007  013804  51C8               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10008  013806  0100               	movlb	0	; () banked
 10009  013808  25CC               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10010  01380A  0100               	movlb	0	; () banked
 10011  01380C  6FCF               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10012  01380E  0100               	movlb	0	; () banked
 10013  013810  05CF               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10014  013812  0100               	movlb	0	; () banked
 10015  013814  6FC2               	movwf	Set_Addr_Window@ye& (0+255),b
 10016  013816  0100               	movlb	0	; () banked
 10017  013818  51C6               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10018  01381A  ECC9  F096         	call	_Set_Addr_Window
 10019                           
 10020                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10021  01381E  C0CC  F0D1         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10022  013822                     l11996:
 10023  013822  0100               	movlb	0	; () banked
 10024  013824  51D1               	movf	LCD_FillRectangle@j& (0+255),w,b
 10025  013826  0100               	movlb	0	; () banked
 10026  013828  B4D8               	btfsc	status,2,c
 10027  01382A  0012               	return	
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10031                           
 10032                           ; BSR set to: 0
 10033  01382C  C0CA  F0D0         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10034  013830                     l12000:
 10035                           
 10036                           ; BSR set to: 0
 10037  013830  0100               	movlb	0	; () banked
 10038  013832  51D0               	movf	LCD_FillRectangle@i& (0+255),w,b
 10039  013834  0100               	movlb	0	; () banked
 10040  013836  B4D8               	btfsc	status,2,c
 10041  013838  D009               	goto	u7880
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10045                           
 10046                           ; BSR set to: 0
 10047                           
 10048                           ; BSR set to: 0
 10049  01383A  C0C4  F0C0         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10050  01383E  C0C5  F0C1         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10051  013842  ECC5  F0A3         	call	_LCD_Word_Write	;wreg free
 10052  013846  0100               	movlb	0	; () banked
 10053  013848  07D0               	decf	LCD_FillRectangle@i& (0+255),f,b
 10054  01384A  D7F2               	goto	l12000
 10055  01384C                     u7880:
 10056                           
 10057                           ; BSR set to: 0
 10058                           
 10059                           ; BSR set to: 0
 10060  01384C  0100               	movlb	0	; () banked
 10061  01384E  07D1               	decf	LCD_FillRectangle@j& (0+255),f,b
 10062  013850  D7E8               	goto	l11996
 10063  013852                     __end_of_LCD_FillRectangle:
 10064                           	opt stack 0
 10065                           tosu	equ	0xFFF
 10066                           tosh	equ	0xFFE
 10067                           tosl	equ	0xFFD
 10068                           pclath	equ	0xFFA
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           prodh	equ	0xFF4
 10074                           prodl	equ	0xFF3
 10075                           postinc0	equ	0xFEE
 10076                           wreg	equ	0xFE8
 10077                           indf1	equ	0xFE7
 10078                           postdec1	equ	0xFE5
 10079                           fsr1h	equ	0xFE2
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           plusw2	equ	0xFDB
 10085                           fsr2h	equ	0xFDA
 10086                           fsr2l	equ	0xFD9
 10087                           status	equ	0xFD8
 10088                           
 10089 ;; *************** function _LCD_DrawField *****************
 10090 ;; Defined at:
 10091 ;;		line 393 in file "Library/LCD.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10094 ;;		 -> Console_MakeField@Fill(70), 
 10095 ;;  pPoint          4   20[BANK0 ] struct Point
 10096 ;;  pSize           4   24[BANK0 ] struct Point
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;  count           2   30[BANK0 ] unsigned short 
 10099 ;;  i               1   34[BANK0 ] unsigned char 
 10100 ;;  ymax            1   33[BANK0 ] unsigned char 
 10101 ;;  xmax            1   32[BANK0 ] unsigned char 
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10111 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;Total ram usage:       17 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:   10
 10118 ;; This function calls:
 10119 ;;		_LCD_Word_Write
 10120 ;;		_Set_Addr_Window
 10121 ;;		___wmul
 10122 ;; This function is called by:
 10123 ;;		_Console_Render
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           	psect	text51
 10128  0130D8                     __ptext51:
 10129                           	opt stack 0
 10130  0130D8                     _LCD_DrawField:
 10131                           	opt stack 18
 10132                           
 10133                           ;LCD.c: 396: UINT8 i = 0x00;
 10134                           
 10135                           ; BSR set to: 0
 10136                           ;incstack = 0
 10137  0130D8  0E00               	movlw	0
 10138  0130DA  0100               	movlb	0	; () banked
 10139  0130DC  6FDD               	movwf	LCD_DrawField@i& (0+255),b
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10143  0130DE  0100               	movlb	0	; () banked
 10144  0130E0  51CF               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10145  0130E2  0100               	movlb	0	; () banked
 10146  0130E4  25D3               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10147  0130E6  0100               	movlb	0	; () banked
 10148  0130E8  6FDB               	movwf	LCD_DrawField@xmax& (0+255),b
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10152  0130EA  0100               	movlb	0	; () banked
 10153  0130EC  51D1               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10154  0130EE  0100               	movlb	0	; () banked
 10155  0130F0  25D5               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10156  0130F2  0100               	movlb	0	; () banked
 10157  0130F4  6FDC               	movwf	LCD_DrawField@ymax& (0+255),b
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10161  0130F6  C0D5  F0BB         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10162  0130FA  C0D6  F0BC         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10163  0130FE  C0D3  F0BD         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10164  013102  C0D4  F0BE         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10165  013106  EC75  F0A2         	call	___wmul	;wreg free
 10166  01310A  C0BB  F0D9         	movff	?___wmul,LCD_DrawField@count
 10167  01310E  C0BC  F0DA         	movff	?___wmul+1,LCD_DrawField@count+1
 10168                           
 10169                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10170  013112  C0D1  F0C0         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10171  013116  0100               	movlb	0	; () banked
 10172  013118  05DB               	decf	LCD_DrawField@xmax& (0+255),w,b
 10173  01311A  0100               	movlb	0	; () banked
 10174  01311C  6FC1               	movwf	Set_Addr_Window@xe& (0+255),b
 10175  01311E  0100               	movlb	0	; () banked
 10176  013120  05DC               	decf	LCD_DrawField@ymax& (0+255),w,b
 10177  013122  0100               	movlb	0	; () banked
 10178  013124  6FC2               	movwf	Set_Addr_Window@ye& (0+255),b
 10179  013126  0100               	movlb	0	; () banked
 10180  013128  51CF               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10181  01312A  ECC9  F096         	call	_Set_Addr_Window
 10182                           
 10183                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10184  01312E  0E00               	movlw	0
 10185  013130  0100               	movlb	0	; () banked
 10186  013132  6FDD               	movwf	LCD_DrawField@i& (0+255),b
 10187  013134  D013               	goto	l183
 10188  013136                     
 10189                           ; BSR set to: 0
 10190                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10191                           
 10192                           ; BSR set to: 0
 10193  013136  0100               	movlb	0	; () banked
 10194  013138  51DD               	movf	LCD_DrawField@i& (0+255),w,b
 10195  01313A  0D02               	mullw	2
 10196  01313C  50F3               	movf	prodl,w,c
 10197  01313E  0100               	movlb	0	; () banked
 10198  013140  25CD               	addwf	LCD_DrawField@pField& (0+255),w,b
 10199  013142  6ED9               	movwf	fsr2l,c
 10200  013144  50F4               	movf	prodh,w,c
 10201  013146  0100               	movlb	0	; () banked
 10202  013148  21CE               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10203  01314A  6EDA               	movwf	fsr2h,c
 10204  01314C  CFDE F0C0          	movff	postinc2,LCD_Word_Write@value
 10205  013150  CFDD F0C1          	movff	postdec2,LCD_Word_Write@value+1
 10206  013154  ECC5  F0A3         	call	_LCD_Word_Write	;wreg free
 10207  013158  0100               	movlb	0	; () banked
 10208  01315A  2BDD               	incf	LCD_DrawField@i& (0+255),f,b
 10209  01315C                     l183:
 10210                           
 10211                           ; BSR set to: 0
 10212                           
 10213                           ; BSR set to: 0
 10214  01315C  0100               	movlb	0	; () banked
 10215  01315E  51DD               	movf	LCD_DrawField@i& (0+255),w,b
 10216  013160  0100               	movlb	0	; () banked
 10217  013162  6FD7               	movwf	??_LCD_DrawField& (0+255),b
 10218  013164  6BD8               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10219  013166  0100               	movlb	0	; () banked
 10220  013168  51D9               	movf	LCD_DrawField@count& (0+255),w,b
 10221  01316A  0100               	movlb	0	; () banked
 10222  01316C  5DD7               	subwf	??_LCD_DrawField& (0+255),w,b
 10223  01316E  0100               	movlb	0	; () banked
 10224  013170  51DA               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10225  013172  0100               	movlb	0	; () banked
 10226  013174  59D8               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10227  013176  B0D8               	btfsc	status,0,c
 10228  013178  0012               	return	
 10229  01317A  D7DD               	goto	l184
 10230  01317C                     __end_of_LCD_DrawField:
 10231                           	opt stack 0
 10232                           tosu	equ	0xFFF
 10233                           tosh	equ	0xFFE
 10234                           tosl	equ	0xFFD
 10235                           pclath	equ	0xFFA
 10236                           tblptru	equ	0xFF8
 10237                           tblptrh	equ	0xFF7
 10238                           tblptrl	equ	0xFF6
 10239                           tablat	equ	0xFF5
 10240                           prodh	equ	0xFF4
 10241                           prodl	equ	0xFF3
 10242                           postinc0	equ	0xFEE
 10243                           wreg	equ	0xFE8
 10244                           indf1	equ	0xFE7
 10245                           postdec1	equ	0xFE5
 10246                           fsr1h	equ	0xFE2
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           plusw2	equ	0xFDB
 10252                           fsr2h	equ	0xFDA
 10253                           fsr2l	equ	0xFD9
 10254                           status	equ	0xFD8
 10255                           
 10256 ;; *************** function ___wmul *****************
 10257 ;; Defined at:
 10258 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10261 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;  product         2    4[BANK0 ] unsigned int 
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  2    0[BANK0 ] unsigned int 
 10266 ;; Registers used:
 10267 ;;		wreg, status,2, status,0, prodl, prodh
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10276 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;Total ram usage:        6 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:    7
 10280 ;; This function calls:
 10281 ;;		Nothing
 10282 ;; This function is called by:
 10283 ;;		_LCD_DrawField
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text52
 10288  0144EA                     __ptext52:
 10289                           	opt stack 0
 10290  0144EA                     ___wmul:
 10291                           	opt stack 20
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;incstack = 0
 10295  0144EA  0100               	movlb	0	; () banked
 10296  0144EC  51BB               	movf	___wmul@multiplier& (0+255),w,b
 10297  0144EE  0100               	movlb	0	; () banked
 10298  0144F0  03BD               	mulwf	___wmul@multiplicand& (0+255),b
 10299  0144F2  CFF3 F0BF          	movff	prodl,___wmul@product
 10300  0144F6  CFF4 F0C0          	movff	prodh,___wmul@product+1
 10301  0144FA  0100               	movlb	0	; () banked
 10302  0144FC  51BB               	movf	___wmul@multiplier& (0+255),w,b
 10303  0144FE  0100               	movlb	0	; () banked
 10304  014500  03BE               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10305  014502  50F3               	movf	prodl,w,c
 10306  014504  0100               	movlb	0	; () banked
 10307  014506  27C0               	addwf	(___wmul@product+1)& (0+255),f,b
 10308  014508  0100               	movlb	0	; () banked
 10309  01450A  51BC               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10310  01450C  0100               	movlb	0	; () banked
 10311  01450E  03BD               	mulwf	___wmul@multiplicand& (0+255),b
 10312  014510  50F3               	movf	prodl,w,c
 10313  014512  0100               	movlb	0	; () banked
 10314  014514  27C0               	addwf	(___wmul@product+1)& (0+255),f,b
 10315                           
 10316                           ; BSR set to: 0
 10317  014516  C0BF  F0BB         	movff	___wmul@product,?___wmul
 10318  01451A  C0C0  F0BC         	movff	___wmul@product+1,?___wmul+1
 10319  01451E  0012               	return	
 10320  014520                     __end_of___wmul:
 10321                           	opt stack 0
 10322                           tosu	equ	0xFFF
 10323                           tosh	equ	0xFFE
 10324                           tosl	equ	0xFFD
 10325                           pclath	equ	0xFFA
 10326                           tblptru	equ	0xFF8
 10327                           tblptrh	equ	0xFF7
 10328                           tblptrl	equ	0xFF6
 10329                           tablat	equ	0xFF5
 10330                           prodh	equ	0xFF4
 10331                           prodl	equ	0xFF3
 10332                           postinc0	equ	0xFEE
 10333                           wreg	equ	0xFE8
 10334                           indf1	equ	0xFE7
 10335                           postdec1	equ	0xFE5
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           plusw2	equ	0xFDB
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346 ;; *************** function _Console_MakeField *****************
 10347 ;; Defined at:
 10348 ;;		line 435 in file "Library/Console.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  pInput          1    wreg     unsigned char 
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  pInput          1   11[BANK0 ] unsigned char 
 10353 ;;  y               1   17[BANK0 ] unsigned char 
 10354 ;;  x               1   16[BANK0 ] unsigned char 
 10355 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10356 ;;		 -> Font5x7(480), 
 10357 ;;  Index           2    9[BANK0 ] unsigned short 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  2    5[BANK0 ] PTR unsigned short 
 10360 ;; Registers used:
 10361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;Total ram usage:       13 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    8
 10374 ;; This function calls:
 10375 ;;		_Byte_GetBit
 10376 ;; This function is called by:
 10377 ;;		_Console_Render
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text53
 10382  0126F4                     __ptext53:
 10383                           	opt stack 0
 10384  0126F4                     _Console_MakeField:
 10385                           	opt stack 20
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;incstack = 0
 10389                           ;Console_MakeField@pInput stored from wreg
 10390  0126F4  0100               	movlb	0	; () banked
 10391  0126F6  6FC6               	movwf	Console_MakeField@pInput& (0+255),b
 10392                           
 10393                           ;Console.c: 437: static Colour Fill[7][5];
 10394                           ;Console.c: 438: pInput -= 32;
 10395  0126F8  0E20               	movlw	32
 10396  0126FA  0100               	movlb	0	; () banked
 10397  0126FC  5FC6               	subwf	Console_MakeField@pInput& (0+255),f,b
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10401  0126FE  0100               	movlb	0	; () banked
 10402  012700  51C6               	movf	Console_MakeField@pInput& (0+255),w,b
 10403  012702  0D05               	mullw	5
 10404  012704  CFF3 F0C4          	movff	prodl,Console_MakeField@Index
 10405  012708  CFF4 F0C5          	movff	prodh,Console_MakeField@Index+1
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10409  01270C  0ED1               	movlw	low _Font5x7
 10410  01270E  0100               	movlb	0	; () banked
 10411  012710  25C4               	addwf	Console_MakeField@Index& (0+255),w,b
 10412  012712  0100               	movlb	0	; () banked
 10413  012714  6FC7               	movwf	Console_MakeField@Column& (0+255),b
 10414  012716  0EFD               	movlw	high _Font5x7
 10415  012718  0100               	movlb	0	; () banked
 10416  01271A  21C5               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10417  01271C  0100               	movlb	0	; () banked
 10418  01271E  6FC8               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10422  012720  0E00               	movlw	0
 10423  012722  0100               	movlb	0	; () banked
 10424  012724  6FCB               	movwf	Console_MakeField@x& (0+255),b
 10425  012726                     l12090:
 10426                           
 10427                           ; BSR set to: 0
 10428  012726  0E04               	movlw	4
 10429  012728  0100               	movlb	0	; () banked
 10430  01272A  65CB               	cpfsgt	Console_MakeField@x& (0+255),b
 10431  01272C  D001               	goto	l1077
 10432  01272E  D043               	goto	u7970
 10433  012730                     l1077:
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;Console.c: 444: {
 10437                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10438                           
 10439                           ; BSR set to: 0
 10440  012730  0E00               	movlw	0
 10441  012732  0100               	movlb	0	; () banked
 10442  012734  6FCC               	movwf	Console_MakeField@y& (0+255),b
 10443  012736                     l12096:
 10444                           
 10445                           ; BSR set to: 0
 10446  012736  0E06               	movlw	6
 10447  012738  0100               	movlb	0	; () banked
 10448  01273A  65CC               	cpfsgt	Console_MakeField@y& (0+255),b
 10449  01273C  D001               	goto	l1079
 10450  01273E  D035               	goto	u7960
 10451  012740                     l1079:
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10455                           
 10456                           ; BSR set to: 0
 10457  012740  C0C7  F0BB         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10458  012744  C0C8  F0BC         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10459  012748  C0CC  F0BD         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10460  01274C  ECAB  F0A2         	call	_Byte_GetBit	;wreg free
 10461  012750  0900               	iorlw	0
 10462  012752  A4D8               	btfss	status,2,c
 10463  012754  D005               	goto	l1082
 10464  012756  C087  F0C9         	movff	_gBackcolour,_Console_MakeField$10974
 10465  01275A  C088  F0CA         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10466  01275E  D004               	goto	l1084
 10467  012760                     l1082:
 10468  012760  C0FD  F0C9         	movff	_gForecolour,_Console_MakeField$10974
 10469  012764  C0FE  F0CA         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10470  012768                     l1084:
 10471  012768  0100               	movlb	0	; () banked
 10472  01276A  51CC               	movf	Console_MakeField@y& (0+255),w,b
 10473  01276C  0D0A               	mullw	10
 10474  01276E  0E64               	movlw	low Console_MakeField@Fill
 10475  012770  0100               	movlb	0	; () banked
 10476  012772  6FC2               	movwf	??_Console_MakeField& (0+255),b
 10477  012774  0E04               	movlw	high Console_MakeField@Fill
 10478  012776  0100               	movlb	0	; () banked
 10479  012778  6FC3               	movwf	(??_Console_MakeField+1)& (0+255),b
 10480  01277A  50F3               	movf	prodl,w,c
 10481  01277C  0100               	movlb	0	; () banked
 10482  01277E  27C2               	addwf	??_Console_MakeField& (0+255),f,b
 10483  012780  50F4               	movf	prodh,w,c
 10484  012782  0100               	movlb	0	; () banked
 10485  012784  23C3               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10486  012786  0100               	movlb	0	; () banked
 10487  012788  51CB               	movf	Console_MakeField@x& (0+255),w,b
 10488  01278A  0D02               	mullw	2
 10489  01278C  50F3               	movf	prodl,w,c
 10490  01278E  0100               	movlb	0	; () banked
 10491  012790  25C2               	addwf	??_Console_MakeField& (0+255),w,b
 10492  012792  6ED9               	movwf	fsr2l,c
 10493  012794  50F4               	movf	prodh,w,c
 10494  012796  0100               	movlb	0	; () banked
 10495  012798  21C3               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10496  01279A  6EDA               	movwf	fsr2h,c
 10497  01279C  C0C9  FFDE         	movff	_Console_MakeField$10974,postinc2
 10498  0127A0  C0CA  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10499                           
 10500                           ; BSR set to: 0
 10501  0127A4  0100               	movlb	0	; () banked
 10502  0127A6  2BCC               	incf	Console_MakeField@y& (0+255),f,b
 10503  0127A8  D7C6               	goto	l12096
 10504  0127AA                     u7960:
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;Console.c: 447: Column += 1;
 10508                           
 10509                           ; BSR set to: 0
 10510  0127AA  0100               	movlb	0	; () banked
 10511  0127AC  4BC7               	infsnz	Console_MakeField@Column& (0+255),f,b
 10512  0127AE  2BC8               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10513  0127B0  0100               	movlb	0	; () banked
 10514  0127B2  2BCB               	incf	Console_MakeField@x& (0+255),f,b
 10515  0127B4  D7B8               	goto	l12090
 10516  0127B6                     u7970:
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;Console.c: 448: }
 10520                           ;Console.c: 449: return (ColourPtr)Fill;
 10521                           
 10522                           ; BSR set to: 0
 10523  0127B6  0E64               	movlw	low Console_MakeField@Fill
 10524  0127B8  0100               	movlb	0	; () banked
 10525  0127BA  6FC0               	movwf	?_Console_MakeField& (0+255),b
 10526  0127BC  0E04               	movlw	high Console_MakeField@Fill
 10527  0127BE  0100               	movlb	0	; () banked
 10528  0127C0  6FC1               	movwf	(?_Console_MakeField+1)& (0+255),b
 10529  0127C2  0012               	return	
 10530  0127C4                     __end_of_Console_MakeField:
 10531                           	opt stack 0
 10532                           tosu	equ	0xFFF
 10533                           tosh	equ	0xFFE
 10534                           tosl	equ	0xFFD
 10535                           pclath	equ	0xFFA
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           postinc0	equ	0xFEE
 10543                           wreg	equ	0xFE8
 10544                           indf1	equ	0xFE7
 10545                           postdec1	equ	0xFE5
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           plusw2	equ	0xFDB
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _Byte_GetBit *****************
 10557 ;; Defined at:
 10558 ;;		line 38 in file "Library/Types.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10561 ;;		 -> Font5x7(480), 
 10562 ;;  pBit            1    2[BANK0 ] unsigned char 
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;  Output          1    4[BANK0 ] unsigned char 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      unsigned char 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:        5 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    7
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_Console_MakeField
 10585 ;;		_Word_GetBit
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text54
 10590  014556                     __ptext54:
 10591                           	opt stack 0
 10592  014556                     _Byte_GetBit:
 10593                           	opt stack 20
 10594                           
 10595                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;incstack = 0
 10599  014556  C0BB  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10600  01455A  C0BC  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10601  01455E                     	if	0	;tblptru may be non-zero
 10602  01455E                     	endif
 10603  01455E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10604  01455E  0E00               	movlw	low (__mediumconst shr (0+16))
 10605  014560  6EF8               	movwf	tblptru,c
 10606  014562                     	endif
 10607  014562  0008               	tblrd		*
 10608  014564  CFF5 F0BF          	movff	tablat,Byte_GetBit@Output
 10609                           
 10610                           ;Types.c: 42: Output >>= pBit;
 10611  014568  0100               	movlb	0	; () banked
 10612  01456A  29BD               	incf	Byte_GetBit@pBit& (0+255),w,b
 10613  01456C  0100               	movlb	0	; () banked
 10614  01456E  6FBE               	movwf	??_Byte_GetBit& (0+255),b
 10615  014570  D003               	goto	u7550
 10616  014572                     u7555:
 10617  014572  0100               	movlb	0	; () banked
 10618  014574  90D8               	bcf	status,0,c
 10619  014576  33BF               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10620  014578                     u7550:
 10621  014578  0100               	movlb	0	; () banked
 10622  01457A  2FBE               	decfsz	??_Byte_GetBit& (0+255),f,b
 10623  01457C  D7FA               	goto	u7555
 10624                           
 10625                           ;Types.c: 43: Output &= 1;
 10626  01457E  0E01               	movlw	1
 10627  014580  0100               	movlb	0	; () banked
 10628  014582  17BF               	andwf	Byte_GetBit@Output& (0+255),f,b
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;Types.c: 44: return Output;
 10632  014584  0100               	movlb	0	; () banked
 10633  014586  51BF               	movf	Byte_GetBit@Output& (0+255),w,b
 10634  014588  0012               	return	
 10635  01458A                     __end_of_Byte_GetBit:
 10636                           	opt stack 0
 10637                           tosu	equ	0xFFF
 10638                           tosh	equ	0xFFE
 10639                           tosl	equ	0xFFD
 10640                           pclath	equ	0xFFA
 10641                           tblptru	equ	0xFF8
 10642                           tblptrh	equ	0xFF7
 10643                           tblptrl	equ	0xFF6
 10644                           tablat	equ	0xFF5
 10645                           prodh	equ	0xFF4
 10646                           prodl	equ	0xFF3
 10647                           postinc0	equ	0xFEE
 10648                           wreg	equ	0xFE8
 10649                           indf1	equ	0xFE7
 10650                           postdec1	equ	0xFE5
 10651                           fsr1h	equ	0xFE2
 10652                           fsr1l	equ	0xFE1
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           plusw2	equ	0xFDB
 10657                           fsr2h	equ	0xFDA
 10658                           fsr2l	equ	0xFD9
 10659                           status	equ	0xFD8
 10660                           
 10661 ;; *************** function _mode1 *****************
 10662 ;; Defined at:
 10663 ;;		line 108 in file "main.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;		None
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      void 
 10670 ;; Registers used:
 10671 ;;		None
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;Total ram usage:        0 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    7
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		_main
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text55
 10692  014A5C                     __ptext55:
 10693                           	opt stack 0
 10694  014A5C                     _mode1:
 10695                           	opt stack 23
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;incstack = 0
 10699  014A5C  0012               	return		;funcret
 10700  014A5E                     __end_of_mode1:
 10701                           	opt stack 0
 10702                           tosu	equ	0xFFF
 10703                           tosh	equ	0xFFE
 10704                           tosl	equ	0xFFD
 10705                           pclath	equ	0xFFA
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           indf1	equ	0xFE7
 10715                           postdec1	equ	0xFE5
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           plusw2	equ	0xFDB
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           
 10726 ;; *************** function _init *****************
 10727 ;; Defined at:
 10728 ;;		line 55 in file "main.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;		None
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;		None
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  1    wreg      void 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;Total ram usage:        0 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:   17
 10749 ;; This function calls:
 10750 ;;		_Console_Init
 10751 ;;		_HMI_Init
 10752 ;;		_LCD_Init
 10753 ;;		_MXK_BlockSwitchTo
 10754 ;;		_MXK_Dequeue
 10755 ;;		_MXK_Init
 10756 ;;		_MXK_Release
 10757 ;;		_delay_ms
 10758 ;;		_eusart_init
 10759 ;;		_irobot_init
 10760 ;;		_irobot_init_song_0
 10761 ;;		_irobot_led_power_on
 10762 ;;		_irobot_rotate
 10763 ;; This function is called by:
 10764 ;;		_main
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           	psect	text56
 10769  01367C                     __ptext56:
 10770                           	opt stack 0
 10771  01367C                     _init:
 10772                           	opt stack 13
 10773                           
 10774                           ;main.c: 57: MXK_Init();
 10775                           
 10776                           ;incstack = 0
 10777  01367C  EC8F  F08D         	call	_MXK_Init	;wreg free
 10778                           
 10779                           ;main.c: 60: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 10780  013680  0E01               	movlw	1
 10781  013682  ECFC  F0A1         	call	_MXK_BlockSwitchTo
 10782  013686  0900               	iorlw	0
 10783  013688  B4D8               	btfsc	status,2,c
 10784  01368A  D00C               	goto	l2266
 10785                           
 10786                           ;main.c: 61: Console_Init();
 10787  01368C  EC7F  F09A         	call	_Console_Init	;wreg free
 10788                           
 10789                           ;main.c: 62: HMI_Init();
 10790  013690  EC76  F088         	call	_HMI_Init	;wreg free
 10791                           
 10792                           ;main.c: 63: LCD_Init();
 10793  013694  EC4F  F08E         	call	_LCD_Init	;wreg free
 10794                           
 10795                           ;main.c: 64: if (MXK_Release())
 10796  013698  EC2D  F0A4         	call	_MXK_Release	;wreg free
 10797  01369C  0900               	iorlw	0
 10798  01369E  A4D8               	btfss	status,2,c
 10799                           
 10800                           ;main.c: 65: MXK_Dequeue();
 10801  0136A0  ECDD  F0A1         	call	_MXK_Dequeue	;wreg free
 10802  0136A4                     l2266:
 10803                           
 10804                           ;main.c: 66: }
 10805                           ;main.c: 67: eusart_init();
 10806  0136A4  ECB6  F0A3         	call	_eusart_init	;wreg free
 10807                           
 10808                           ;main.c: 68: irobot_init();
 10809  0136A8  ECD4  F0A4         	call	_irobot_init	;wreg free
 10810                           
 10811                           ;main.c: 70: irobot_led_power_on(0xA);
 10812  0136AC  0E0A               	movlw	10
 10813  0136AE  EC1F  F0A4         	call	_irobot_led_power_on
 10814                           
 10815                           ;main.c: 71: irobot_init_song_0();
 10816  0136B2  EC97  F0A3         	call	_irobot_init_song_0	;wreg free
 10817                           
 10818                           ;main.c: 72: delay_ms(20);
 10819  0136B6  0E00               	movlw	0
 10820  0136B8  0100               	movlb	0	; () banked
 10821  0136BA  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 10822  0136BC  0E14               	movlw	20
 10823  0136BE  6FBB               	movwf	delay_ms@ms& (0+255),b
 10824  0136C0  EC76  F09D         	call	_delay_ms	;wreg free
 10825                           
 10826                           ;main.c: 75: irobot_rotate(0, 90, 200);
 10827  0136C4  0E00               	movlw	0
 10828  0136C6  0100               	movlb	0	; () banked
 10829  0136C8  6FD5               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10830  0136CA  0E5A               	movlw	90
 10831  0136CC  6FD4               	movwf	irobot_rotate@rotateAngle& (0+255),b
 10832  0136CE  0E00               	movlw	0
 10833  0136D0  0100               	movlb	0	; () banked
 10834  0136D2  6FD7               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
 10835  0136D4  0EC8               	movlw	200
 10836  0136D6  6FD6               	movwf	irobot_rotate@rotateSpeed& (0+255),b
 10837  0136D8  0E00               	movlw	0
 10838  0136DA  EC46  F09E         	call	_irobot_rotate
 10839                           
 10840                           ;main.c: 77: distanceTotal = 0;
 10841  0136DE  0E00               	movlw	0
 10842  0136E0  0100               	movlb	0	; () banked
 10843  0136E2  6F7A               	movwf	(_distanceTotal+1)& (0+255),b
 10844  0136E4  0E00               	movlw	0
 10845  0136E6  6F79               	movwf	_distanceTotal& (0+255),b
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;main.c: 78: angleTotal = 0;
 10849  0136E8  0E00               	movlw	0
 10850  0136EA  0100               	movlb	0	; () banked
 10851  0136EC  6F78               	movwf	(_angleTotal+1)& (0+255),b
 10852  0136EE  0E00               	movlw	0
 10853  0136F0  6F77               	movwf	_angleTotal& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856  0136F2  0012               	return		;funcret
 10857  0136F4                     __end_of_init:
 10858                           	opt stack 0
 10859                           tosu	equ	0xFFF
 10860                           tosh	equ	0xFFE
 10861                           tosl	equ	0xFFD
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           postinc0	equ	0xFEE
 10870                           wreg	equ	0xFE8
 10871                           indf1	equ	0xFE7
 10872                           postdec1	equ	0xFE5
 10873                           fsr1h	equ	0xFE2
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           plusw2	equ	0xFDB
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function _irobot_rotate *****************
 10884 ;; Defined at:
 10885 ;;		line 280 in file "Library/iRobotSerial.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  isScript        1    wreg     unsigned char 
 10888 ;;  rotateAngle     2   25[BANK0 ] short 
 10889 ;;  rotateSpeed     2   27[BANK0 ] short 
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;  isScript        1   29[BANK0 ] unsigned char 
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  1    wreg      void 
 10894 ;; Registers used:
 10895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10896 ;; Tracked objects:
 10897 ;;		On entry : 0/0
 10898 ;;		On exit  : 0/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10901 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;Total ram usage:        5 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    9
 10908 ;; This function calls:
 10909 ;;		_irobot_move
 10910 ;; This function is called by:
 10911 ;;		_init
 10912 ;;		_irobot_rotate_to
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           	psect	text57
 10917  013C8C                     __ptext57:
 10918                           	opt stack 0
 10919  013C8C                     _irobot_rotate:
 10920                           	opt stack 20
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;incstack = 0
 10924                           ;irobot_rotate@isScript stored from wreg
 10925  013C8C  0100               	movlb	0	; () banked
 10926  013C8E  6FD8               	movwf	irobot_rotate@isScript& (0+255),b
 10927                           
 10928                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
 10929  013C90  0100               	movlb	0	; () banked
 10930  013C92  BFD5               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
 10931  013C94  D00D               	goto	l2152
 10932  013C96  0100               	movlb	0	; () banked
 10933  013C98  51D5               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
 10934  013C9A  E104               	bnz	u8320
 10935  013C9C  0100               	movlb	0	; () banked
 10936  013C9E  05D4               	decf	irobot_rotate@rotateAngle& (0+255),w,b
 10937  013CA0  A0D8               	btfss	status,0,c
 10938  013CA2  D006               	goto	l2152
 10939  013CA4                     u8320:
 10940                           
 10941                           ; BSR set to: 0
 10942  013CA4  0E00               	movlw	0
 10943  013CA6  0100               	movlb	0	; () banked
 10944  013CA8  6FD5               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10945  013CAA  0E01               	movlw	1
 10946  013CAC  6FD4               	movwf	irobot_rotate@rotateAngle& (0+255),b
 10947  013CAE  D003               	goto	l2154
 10948  013CB0                     l2152:
 10949                           
 10950                           ; BSR set to: 0
 10951  013CB0  0100               	movlb	0	; () banked
 10952  013CB2  69D4               	setf	irobot_rotate@rotateAngle& (0+255),b
 10953  013CB4  69D5               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10954  013CB6                     l2154:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;iRobotSerial.c: 282: (isScript) ?
 10958                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle) :
 10959                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
 10960                           
 10961                           ; BSR set to: 0
 10962  013CB6  0100               	movlb	0	; () banked
 10963  013CB8  51D8               	movf	irobot_rotate@isScript& (0+255),w,b
 10964  013CBA  0100               	movlb	0	; () banked
 10965  013CBC  B4D8               	btfsc	status,2,c
 10966  013CBE  D00C               	goto	l2156
 10967                           
 10968                           ; BSR set to: 0
 10969  013CC0  C0D6  F0CB         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
 10970  013CC4  C0D7  F0CC         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
 10971  013CC8  C0D4  F0CD         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
 10972  013CCC  C0D5  F0CE         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
 10973  013CD0  0E01               	movlw	1
 10974  013CD2  EC1A  F096         	call	_irobot_move
 10975  013CD6  0012               	return	
 10976  013CD8                     l2156:
 10977  013CD8  C0D6  F0CB         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
 10978  013CDC  C0D7  F0CC         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
 10979  013CE0  C0D4  F0CD         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
 10980  013CE4  C0D5  F0CE         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
 10981  013CE8  0E00               	movlw	0
 10982  013CEA  EC1A  F096         	call	_irobot_move
 10983  013CEE  0012               	return	
 10984  013CF0                     __end_of_irobot_rotate:
 10985                           	opt stack 0
 10986                           tosu	equ	0xFFF
 10987                           tosh	equ	0xFFE
 10988                           tosl	equ	0xFFD
 10989                           pclath	equ	0xFFA
 10990                           tblptru	equ	0xFF8
 10991                           tblptrh	equ	0xFF7
 10992                           tblptrl	equ	0xFF6
 10993                           tablat	equ	0xFF5
 10994                           prodh	equ	0xFF4
 10995                           prodl	equ	0xFF3
 10996                           postinc0	equ	0xFEE
 10997                           wreg	equ	0xFE8
 10998                           indf1	equ	0xFE7
 10999                           postdec1	equ	0xFE5
 11000                           fsr1h	equ	0xFE2
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           plusw2	equ	0xFDB
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _irobot_move *****************
 11011 ;; Defined at:
 11012 ;;		line 220 in file "Library/iRobotSerial.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  isScript        1    wreg     unsigned char 
 11015 ;;  moveSpeed       2   16[BANK0 ] short 
 11016 ;;  moveTurnRadi    2   18[BANK0 ] short 
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;  isScript        1   24[BANK0 ] unsigned char 
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1    wreg      void 
 11021 ;; Registers used:
 11022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11032 ;;Total ram usage:        9 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    8
 11035 ;; This function calls:
 11036 ;;		_eusart_putch
 11037 ;;		_load_iRScriptStack
 11038 ;;		_twos_complement_of
 11039 ;; This function is called by:
 11040 ;;		_irobot_rotate
 11041 ;;		_irobot_stop_motion
 11042 ;;		_irobot_move_straight
 11043 ;;		_irobot_move_to_simple
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           	psect	text58
 11048  012C34                     __ptext58:
 11049                           	opt stack 0
 11050  012C34                     _irobot_move:
 11051                           	opt stack 20
 11052                           
 11053                           ;incstack = 0
 11054                           ;irobot_move@isScript stored from wreg
 11055  012C34  0100               	movlb	0	; () banked
 11056  012C36  6FD3               	movwf	irobot_move@isScript& (0+255),b
 11057                           
 11058                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
 11059  012C38  C0CB  F0BB         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
 11060  012C3C  C0CC  F0BC         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
 11061  012C40  EC5A  F0A1         	call	_twos_complement_of	;wreg free
 11062  012C44  C0BB  F0CB         	movff	?_twos_complement_of,irobot_move@moveSpeed
 11063  012C48  C0BC  F0CC         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
 11064                           
 11065                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
 11066  012C4C  C0CD  F0BB         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
 11067  012C50  C0CE  F0BC         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
 11068  012C54  EC5A  F0A1         	call	_twos_complement_of	;wreg free
 11069  012C58  C0BB  F0CD         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
 11070  012C5C  C0BC  F0CE         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
 11071                           
 11072                           ;iRobotSerial.c: 224: if (isScript) {
 11073  012C60  0100               	movlb	0	; () banked
 11074  012C62  51D3               	movf	irobot_move@isScript& (0+255),w,b
 11075  012C64  0100               	movlb	0	; () banked
 11076  012C66  B4D8               	btfsc	status,2,c
 11077  012C68  D029               	goto	l2135
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
 11081                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
 11082                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
 11083  012C6A  0E00               	movlw	0
 11084  012C6C  0100               	movlb	0	; () banked
 11085  012C6E  6FBC               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 11086  012C70  0E89               	movlw	137
 11087  012C72  6FBB               	movwf	?_load_iRScriptStack& (0+255),b
 11088  012C74  C0CC  F0CF         	movff	irobot_move@moveSpeed+1,??_irobot_move
 11089  012C78  0100               	movlb	0	; () banked
 11090  012C7A  6BD0               	clrf	(??_irobot_move+1)& (0+255),b
 11091  012C7C  BFCF               	btfsc	??_irobot_move& (0+255),7,b
 11092  012C7E  69D0               	setf	(??_irobot_move+1)& (0+255),b
 11093  012C80  0100               	movlb	0	; () banked
 11094  012C82  51CF               	movf	??_irobot_move& (0+255),w,b
 11095  012C84  0100               	movlb	0	; () banked
 11096  012C86  6FBD               	movwf	(?_load_iRScriptStack+2)& (0+255),b
 11097  012C88  6BBE               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 11098  012C8A  0100               	movlb	0	; () banked
 11099  012C8C  51CB               	movf	irobot_move@moveSpeed& (0+255),w,b
 11100  012C8E  0100               	movlb	0	; () banked
 11101  012C90  6FBF               	movwf	(?_load_iRScriptStack+4)& (0+255),b
 11102  012C92  6BC0               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 11103  012C94  C0CE  F0D1         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
 11104  012C98  0100               	movlb	0	; () banked
 11105  012C9A  6BD2               	clrf	(??_irobot_move+3)& (0+255),b
 11106  012C9C  BFD1               	btfsc	(??_irobot_move+2)& (0+255),7,b
 11107  012C9E  69D2               	setf	(??_irobot_move+3)& (0+255),b
 11108  012CA0  0100               	movlb	0	; () banked
 11109  012CA2  51D1               	movf	(??_irobot_move+2)& (0+255),w,b
 11110  012CA4  0100               	movlb	0	; () banked
 11111  012CA6  6FC1               	movwf	(?_load_iRScriptStack+6)& (0+255),b
 11112  012CA8  6BC2               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 11113  012CAA  0100               	movlb	0	; () banked
 11114  012CAC  51CD               	movf	irobot_move@moveTurnRadius& (0+255),w,b
 11115  012CAE  0100               	movlb	0	; () banked
 11116  012CB0  6FC3               	movwf	(?_load_iRScriptStack+8)& (0+255),b
 11117  012CB2  6BC4               	clrf	(?_load_iRScriptStack+9)& (0+255),b
 11118  012CB4  0E05               	movlw	5
 11119  012CB6  EC41  F09D         	call	_load_iRScriptStack
 11120                           
 11121                           ;iRobotSerial.c: 228: }
 11122  012CBA  0012               	return	
 11123  012CBC                     l2135:
 11124                           
 11125                           ;iRobotSerial.c: 229: else{
 11126                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
 11127  012CBC  0E89               	movlw	137
 11128  012CBE  ECDB  F0A4         	call	_eusart_putch
 11129                           
 11130                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
 11131  012CC2  0100               	movlb	0	; () banked
 11132  012CC4  51CC               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
 11133  012CC6  ECDB  F0A4         	call	_eusart_putch
 11134                           
 11135                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
 11136  012CCA  0100               	movlb	0	; () banked
 11137  012CCC  51CB               	movf	irobot_move@moveSpeed& (0+255),w,b
 11138  012CCE  ECDB  F0A4         	call	_eusart_putch
 11139                           
 11140                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
 11141  012CD2  0100               	movlb	0	; () banked
 11142  012CD4  51CE               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
 11143  012CD6  ECDB  F0A4         	call	_eusart_putch
 11144                           
 11145                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
 11146  012CDA  0100               	movlb	0	; () banked
 11147  012CDC  51CD               	movf	irobot_move@moveTurnRadius& (0+255),w,b
 11148  012CDE  ECDB  F0A4         	call	_eusart_putch
 11149  012CE2  0012               	return	
 11150  012CE4                     __end_of_irobot_move:
 11151                           	opt stack 0
 11152                           tosu	equ	0xFFF
 11153                           tosh	equ	0xFFE
 11154                           tosl	equ	0xFFD
 11155                           pclath	equ	0xFFA
 11156                           tblptru	equ	0xFF8
 11157                           tblptrh	equ	0xFF7
 11158                           tblptrl	equ	0xFF6
 11159                           tablat	equ	0xFF5
 11160                           prodh	equ	0xFF4
 11161                           prodl	equ	0xFF3
 11162                           postinc0	equ	0xFEE
 11163                           wreg	equ	0xFE8
 11164                           indf1	equ	0xFE7
 11165                           postdec1	equ	0xFE5
 11166                           fsr1h	equ	0xFE2
 11167                           fsr1l	equ	0xFE1
 11168                           indf2	equ	0xFDF
 11169                           postinc2	equ	0xFDE
 11170                           postdec2	equ	0xFDD
 11171                           plusw2	equ	0xFDB
 11172                           fsr2h	equ	0xFDA
 11173                           fsr2l	equ	0xFD9
 11174                           status	equ	0xFD8
 11175                           
 11176 ;; *************** function _twos_complement_of *****************
 11177 ;; Defined at:
 11178 ;;		line 167 in file "Library/iRobotSerial.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;  complementVa    2    0[BANK0 ] short 
 11181 ;; Auto vars:     Size  Location     Type
 11182 ;;		None
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  2    0[BANK0 ] unsigned short 
 11185 ;; Registers used:
 11186 ;;		wreg, status,2, status,0
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11192 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;Total ram usage:        2 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; Hardware stack levels required when called:    7
 11199 ;; This function calls:
 11200 ;;		Nothing
 11201 ;; This function is called by:
 11202 ;;		_irobot_move
 11203 ;;		_irobot_angle_wait
 11204 ;;		_irobot_distance_wait
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           	psect	text59
 11209  0142B4                     __ptext59:
 11210                           	opt stack 0
 11211  0142B4                     _twos_complement_of:
 11212                           	opt stack 20
 11213                           
 11214                           ;iRobotSerial.c: 168: if (complementValue < 0) {
 11215                           
 11216                           ;incstack = 0
 11217  0142B4  0100               	movlb	0	; () banked
 11218  0142B6  AFBC               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
 11219  0142B8  D01A               	goto	l2106
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
 11223  0142BA  0100               	movlb	0	; () banked
 11224  0142BC  BFBC               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
 11225  0142BE  D007               	goto	u7680
 11226  0142C0  0100               	movlb	0	; () banked
 11227  0142C2  51BC               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
 11228  0142C4  E10A               	bnz	l2108
 11229  0142C6  0100               	movlb	0	; () banked
 11230  0142C8  05BB               	decf	twos_complement_of@complementValue& (0+255),w,b
 11231  0142CA  B0D8               	btfsc	status,0,c
 11232  0142CC  D006               	goto	l2108
 11233  0142CE                     u7680:
 11234                           
 11235                           ; BSR set to: 0
 11236  0142CE  0100               	movlb	0	; () banked
 11237  0142D0  6DBB               	negf	twos_complement_of@complementValue& (0+255),b
 11238  0142D2  1FBC               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11239  0142D4  B0D8               	btfsc	status,0,c
 11240  0142D6  2BBC               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11241  0142D8  D004               	goto	l2110
 11242  0142DA                     l2108:
 11243                           
 11244                           ; BSR set to: 0
 11245  0142DA  C0BB  F0BB         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
 11246  0142DE  C0BC  F0BC         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
 11247  0142E2                     l2110:
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
 11251                           
 11252                           ; BSR set to: 0
 11253  0142E2  0100               	movlb	0	; () banked
 11254  0142E4  1FBB               	comf	twos_complement_of@complementValue& (0+255),f,b
 11255  0142E6  1FBC               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11256                           
 11257                           ;iRobotSerial.c: 171: complementValue += 1;
 11258  0142E8  0100               	movlb	0	; () banked
 11259  0142EA  4BBB               	infsnz	twos_complement_of@complementValue& (0+255),f,b
 11260  0142EC  2BBC               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11261  0142EE                     l2106:
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;iRobotSerial.c: 172: }
 11265                           ;iRobotSerial.c: 173: return complementValue;
 11266                           
 11267                           ; BSR set to: 0
 11268  0142EE  C0BB  F0BB         	movff	twos_complement_of@complementValue,?_twos_complement_of
 11269  0142F2  C0BC  F0BC         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
 11270  0142F6  0012               	return	
 11271  0142F8                     __end_of_twos_complement_of:
 11272                           	opt stack 0
 11273                           tosu	equ	0xFFF
 11274                           tosh	equ	0xFFE
 11275                           tosl	equ	0xFFD
 11276                           pclath	equ	0xFFA
 11277                           tblptru	equ	0xFF8
 11278                           tblptrh	equ	0xFF7
 11279                           tblptrl	equ	0xFF6
 11280                           tablat	equ	0xFF5
 11281                           prodh	equ	0xFF4
 11282                           prodl	equ	0xFF3
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           indf1	equ	0xFE7
 11286                           postdec1	equ	0xFE5
 11287                           fsr1h	equ	0xFE2
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           plusw2	equ	0xFDB
 11293                           fsr2h	equ	0xFDA
 11294                           fsr2l	equ	0xFD9
 11295                           status	equ	0xFD8
 11296                           
 11297 ;; *************** function _irobot_led_power_on *****************
 11298 ;; Defined at:
 11299 ;;		line 293 in file "Library/iRobotSerial.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  powerOnColou    1    wreg     unsigned char 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      void 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;Total ram usage:        1 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    9
 11320 ;; This function calls:
 11321 ;;		_irobot_leds
 11322 ;; This function is called by:
 11323 ;;		_init
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           	psect	text60
 11328  01483E                     __ptext60:
 11329                           	opt stack 0
 11330  01483E                     _irobot_led_power_on:
 11331                           	opt stack 20
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;incstack = 0
 11335                           ;irobot_led_power_on@powerOnColour stored from wreg
 11336  01483E  0100               	movlb	0	; () banked
 11337  014840  6FCF               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 11338                           
 11339                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 11340  014842  0E00               	movlw	0
 11341  014844  0100               	movlb	0	; () banked
 11342  014846  6FCB               	movwf	irobot_leds@LEDBit& (0+255),b
 11343  014848  C0CF  F0CC         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 11344  01484C  0EFF               	movlw	255
 11345  01484E  0100               	movlb	0	; () banked
 11346  014850  6FCD               	movwf	irobot_leds@powerLuminosity& (0+255),b
 11347  014852  0E00               	movlw	0
 11348  014854  EC67  F09F         	call	_irobot_leds
 11349  014858  0012               	return		;funcret
 11350  01485A                     __end_of_irobot_led_power_on:
 11351                           	opt stack 0
 11352                           tosu	equ	0xFFF
 11353                           tosh	equ	0xFFE
 11354                           tosl	equ	0xFFD
 11355                           pclath	equ	0xFFA
 11356                           tblptru	equ	0xFF8
 11357                           tblptrh	equ	0xFF7
 11358                           tblptrl	equ	0xFF6
 11359                           tablat	equ	0xFF5
 11360                           prodh	equ	0xFF4
 11361                           prodl	equ	0xFF3
 11362                           postinc0	equ	0xFEE
 11363                           wreg	equ	0xFE8
 11364                           indf1	equ	0xFE7
 11365                           postdec1	equ	0xFE5
 11366                           fsr1h	equ	0xFE2
 11367                           fsr1l	equ	0xFE1
 11368                           indf2	equ	0xFDF
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           plusw2	equ	0xFDB
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376 ;; *************** function _irobot_leds *****************
 11377 ;; Defined at:
 11378 ;;		line 239 in file "Library/iRobotSerial.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;  isScript        1    wreg     unsigned char 
 11381 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 11382 ;;  powerColour     1   17[BANK0 ] unsigned char 
 11383 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 11384 ;; Auto vars:     Size  Location     Type
 11385 ;;  isScript        1   19[BANK0 ] unsigned char 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  1    wreg      void 
 11388 ;; Registers used:
 11389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11395 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;Total ram usage:        4 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    8
 11402 ;; This function calls:
 11403 ;;		_eusart_putch
 11404 ;;		_load_iRScriptStack
 11405 ;; This function is called by:
 11406 ;;		_irobot_led_power_on
 11407 ;;		_irobot_led_power_off
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           	psect	text61
 11412  013ECE                     __ptext61:
 11413                           	opt stack 0
 11414  013ECE                     _irobot_leds:
 11415                           	opt stack 20
 11416                           
 11417                           ;incstack = 0
 11418                           ;irobot_leds@isScript stored from wreg
 11419  013ECE  0100               	movlb	0	; () banked
 11420  013ED0  6FCE               	movwf	irobot_leds@isScript& (0+255),b
 11421                           
 11422                           ;iRobotSerial.c: 240: if (isScript) {
 11423  013ED2  0100               	movlb	0	; () banked
 11424  013ED4  51CE               	movf	irobot_leds@isScript& (0+255),w,b
 11425  013ED6  0100               	movlb	0	; () banked
 11426  013ED8  B4D8               	btfsc	status,2,c
 11427  013EDA  D015               	goto	l2140
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 11431                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 11432  013EDC  0E00               	movlw	0
 11433  013EDE  0100               	movlb	0	; () banked
 11434  013EE0  6FBC               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 11435  013EE2  0E8B               	movlw	139
 11436  013EE4  6FBB               	movwf	?_load_iRScriptStack& (0+255),b
 11437  013EE6  C0CB  F0BD         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 11438  013EEA  0100               	movlb	0	; () banked
 11439  013EEC  6BBE               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 11440  013EEE  C0CC  F0BF         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 11441  013EF2  0100               	movlb	0	; () banked
 11442  013EF4  6BC0               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 11443  013EF6  C0CD  F0C1         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 11444  013EFA  0100               	movlb	0	; () banked
 11445  013EFC  6BC2               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 11446  013EFE  0E04               	movlw	4
 11447  013F00  EC41  F09D         	call	_load_iRScriptStack
 11448                           
 11449                           ;iRobotSerial.c: 243: }
 11450  013F04  0012               	return	
 11451  013F06                     l2140:
 11452                           
 11453                           ;iRobotSerial.c: 244: else{
 11454                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 11455  013F06  0E8B               	movlw	139
 11456  013F08  ECDB  F0A4         	call	_eusart_putch
 11457                           
 11458                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 11459  013F0C  0100               	movlb	0	; () banked
 11460  013F0E  51CB               	movf	irobot_leds@LEDBit& (0+255),w,b
 11461  013F10  ECDB  F0A4         	call	_eusart_putch
 11462                           
 11463                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 11464  013F14  0100               	movlb	0	; () banked
 11465  013F16  51CC               	movf	irobot_leds@powerColour& (0+255),w,b
 11466  013F18  ECDB  F0A4         	call	_eusart_putch
 11467                           
 11468                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 11469  013F1C  0100               	movlb	0	; () banked
 11470  013F1E  51CD               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 11471  013F20  ECDB  F0A4         	call	_eusart_putch
 11472  013F24  0012               	return	
 11473  013F26                     __end_of_irobot_leds:
 11474                           	opt stack 0
 11475                           tosu	equ	0xFFF
 11476                           tosh	equ	0xFFE
 11477                           tosl	equ	0xFFD
 11478                           pclath	equ	0xFFA
 11479                           tblptru	equ	0xFF8
 11480                           tblptrh	equ	0xFF7
 11481                           tblptrl	equ	0xFF6
 11482                           tablat	equ	0xFF5
 11483                           prodh	equ	0xFF4
 11484                           prodl	equ	0xFF3
 11485                           postinc0	equ	0xFEE
 11486                           wreg	equ	0xFE8
 11487                           indf1	equ	0xFE7
 11488                           postdec1	equ	0xFE5
 11489                           fsr1h	equ	0xFE2
 11490                           fsr1l	equ	0xFE1
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           plusw2	equ	0xFDB
 11495                           fsr2h	equ	0xFDA
 11496                           fsr2l	equ	0xFD9
 11497                           status	equ	0xFD8
 11498                           
 11499 ;; *************** function _load_iRScriptStack *****************
 11500 ;; Defined at:
 11501 ;;		line 176 in file "Library/iRobotSerial.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;  bytesToLoad     1    wreg     unsigned char 
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 11506 ;;  i               1   15[BANK0 ] unsigned char 
 11507 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 11508 ;;		 -> ?_load_iRScriptStack(1), 
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11518 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;Total ram usage:       16 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    7
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_irobot_move
 11529 ;;		_irobot_leds
 11530 ;;		_irobot_angle_wait
 11531 ;;		_irobot_distance_wait
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text62
 11536  013A82                     __ptext62:
 11537                           	opt stack 0
 11538  013A82                     _load_iRScriptStack:
 11539                           	opt stack 20
 11540                           
 11541                           ;incstack = 0
 11542                           ;load_iRScriptStack@bytesToLoad stored from wreg
 11543  013A82  0100               	movlb	0	; () banked
 11544  013A84  6FC9               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 11545                           
 11546                           ;iRobotSerial.c: 177: va_list loadByte;
 11547                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 11548  013A86  0EBB               	movlw	low ?_load_iRScriptStack
 11549  013A88  0100               	movlb	0	; () banked
 11550  013A8A  6FC7               	movwf	load_iRScriptStack@loadByte& (0+255),b
 11551  013A8C  0E00               	movlw	high ?_load_iRScriptStack
 11552  013A8E  0100               	movlb	0	; () banked
 11553  013A90  6FC8               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 11554                           
 11555                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 11556  013A92  0E00               	movlw	0
 11557  013A94  0100               	movlb	0	; () banked
 11558  013A96  6FCA               	movwf	load_iRScriptStack@i& (0+255),b
 11559  013A98  D01F               	goto	l2114
 11560  013A9A                     
 11561                           ; BSR set to: 0
 11562                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 11563                           
 11564                           ; BSR set to: 0
 11565  013A9A  C0C7  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 11566  013A9E  C0C8  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 11567  013AA2  0100               	movlb	0	; () banked
 11568  013AA4  51CA               	movf	load_iRScriptStack@i& (0+255),w,b
 11569  013AA6  C035  F0C5         	movff	_iRScriptIndex,??_load_iRScriptStack
 11570  013AAA  0100               	movlb	0	; () banked
 11571  013AAC  6BC6               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 11572  013AAE  0100               	movlb	0	; () banked
 11573  013AB0  27C5               	addwf	??_load_iRScriptStack& (0+255),f,b
 11574  013AB2  0E00               	movlw	0
 11575  013AB4  23C6               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 11576  013AB6  0E00               	movlw	low _iRScriptStack
 11577  013AB8  0100               	movlb	0	; () banked
 11578  013ABA  25C5               	addwf	??_load_iRScriptStack& (0+255),w,b
 11579  013ABC  6EE1               	movwf	fsr1l,c
 11580  013ABE  0E04               	movlw	high _iRScriptStack
 11581  013AC0  0100               	movlb	0	; () banked
 11582  013AC2  21C6               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 11583  013AC4  6EE2               	movwf	fsr1h,c
 11584  013AC6  CFDF FFE7          	movff	indf2,indf1
 11585                           
 11586                           ; BSR set to: 0
 11587  013ACA  0E02               	movlw	2
 11588  013ACC  0100               	movlb	0	; () banked
 11589  013ACE  27C7               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 11590  013AD0  0E00               	movlw	0
 11591  013AD2  23C8               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 11592                           
 11593                           ; BSR set to: 0
 11594  013AD4  0100               	movlb	0	; () banked
 11595  013AD6  2BCA               	incf	load_iRScriptStack@i& (0+255),f,b
 11596  013AD8                     l2114:
 11597                           
 11598                           ; BSR set to: 0
 11599                           
 11600                           ; BSR set to: 0
 11601  013AD8  0100               	movlb	0	; () banked
 11602  013ADA  51C9               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 11603  013ADC  0100               	movlb	0	; () banked
 11604  013ADE  5DCA               	subwf	load_iRScriptStack@i& (0+255),w,b
 11605  013AE0  A0D8               	btfss	status,0,c
 11606  013AE2  D7DB               	goto	l2115
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;iRobotSerial.c: 181: }
 11610                           ;iRobotSerial.c: 182: ;
 11611                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 11612                           
 11613                           ; BSR set to: 0
 11614  013AE4  0100               	movlb	0	; () banked
 11615  013AE6  51C9               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 11616  013AE8  2635               	addwf	_iRScriptIndex,f,c
 11617                           
 11618                           ; BSR set to: 0
 11619  013AEA  0012               	return		;funcret
 11620  013AEC                     __end_of_load_iRScriptStack:
 11621                           	opt stack 0
 11622                           tosu	equ	0xFFF
 11623                           tosh	equ	0xFFE
 11624                           tosl	equ	0xFFD
 11625                           pclath	equ	0xFFA
 11626                           tblptru	equ	0xFF8
 11627                           tblptrh	equ	0xFF7
 11628                           tblptrl	equ	0xFF6
 11629                           tablat	equ	0xFF5
 11630                           prodh	equ	0xFF4
 11631                           prodl	equ	0xFF3
 11632                           postinc0	equ	0xFEE
 11633                           wreg	equ	0xFE8
 11634                           indf1	equ	0xFE7
 11635                           postdec1	equ	0xFE5
 11636                           fsr1h	equ	0xFE2
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           plusw2	equ	0xFDB
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8
 11645                           
 11646 ;; *************** function _irobot_init_song_0 *****************
 11647 ;; Defined at:
 11648 ;;		line 252 in file "Library/iRobotSerial.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;		None
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      void 
 11655 ;; Registers used:
 11656 ;;		wreg, cstack
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;Total ram usage:        0 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    8
 11669 ;; This function calls:
 11670 ;;		_eusart_putch
 11671 ;; This function is called by:
 11672 ;;		_init
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text63
 11677  01472E                     __ptext63:
 11678                           	opt stack 0
 11679  01472E                     _irobot_init_song_0:
 11680                           	opt stack 21
 11681                           
 11682                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;incstack = 0
 11686  01472E  0E8C               	movlw	140
 11687  014730  ECDB  F0A4         	call	_eusart_putch
 11688                           
 11689                           ;iRobotSerial.c: 254: eusart_putch(0);
 11690  014734  0E00               	movlw	0
 11691  014736  ECDB  F0A4         	call	_eusart_putch
 11692                           
 11693                           ;iRobotSerial.c: 255: eusart_putch(1);
 11694  01473A  0E01               	movlw	1
 11695  01473C  ECDB  F0A4         	call	_eusart_putch
 11696                           
 11697                           ;iRobotSerial.c: 256: eusart_putch(60);
 11698  014740  0E3C               	movlw	60
 11699  014742  ECDB  F0A4         	call	_eusart_putch
 11700                           
 11701                           ;iRobotSerial.c: 257: eusart_putch(4);
 11702  014746  0E04               	movlw	4
 11703  014748  ECDB  F0A4         	call	_eusart_putch
 11704  01474C  0012               	return		;funcret
 11705  01474E                     __end_of_irobot_init_song_0:
 11706                           	opt stack 0
 11707                           tosu	equ	0xFFF
 11708                           tosh	equ	0xFFE
 11709                           tosl	equ	0xFFD
 11710                           pclath	equ	0xFFA
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           postdec1	equ	0xFE5
 11721                           fsr1h	equ	0xFE2
 11722                           fsr1l	equ	0xFE1
 11723                           indf2	equ	0xFDF
 11724                           postinc2	equ	0xFDE
 11725                           postdec2	equ	0xFDD
 11726                           plusw2	equ	0xFDB
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731 ;; *************** function _irobot_init *****************
 11732 ;; Defined at:
 11733 ;;		line 198 in file "Library/iRobotSerial.c"
 11734 ;; Parameters:    Size  Location     Type
 11735 ;;		None
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;		None
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  1    wreg      void 
 11740 ;; Registers used:
 11741 ;;		wreg, cstack
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;Total ram usage:        0 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    8
 11754 ;; This function calls:
 11755 ;;		_eusart_putch
 11756 ;; This function is called by:
 11757 ;;		_init
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text64
 11762  0149A8                     __ptext64:
 11763                           	opt stack 0
 11764  0149A8                     _irobot_init:
 11765                           	opt stack 21
 11766                           
 11767                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 11768                           
 11769                           ;incstack = 0
 11770  0149A8  0E80               	movlw	128
 11771  0149AA  ECDB  F0A4         	call	_eusart_putch
 11772                           
 11773                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 11774  0149AE  0E84               	movlw	132
 11775  0149B0  ECDB  F0A4         	call	_eusart_putch
 11776  0149B4  0012               	return		;funcret
 11777  0149B6                     __end_of_irobot_init:
 11778                           	opt stack 0
 11779                           tosu	equ	0xFFF
 11780                           tosh	equ	0xFFE
 11781                           tosl	equ	0xFFD
 11782                           pclath	equ	0xFFA
 11783                           tblptru	equ	0xFF8
 11784                           tblptrh	equ	0xFF7
 11785                           tblptrl	equ	0xFF6
 11786                           tablat	equ	0xFF5
 11787                           prodh	equ	0xFF4
 11788                           prodl	equ	0xFF3
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           indf1	equ	0xFE7
 11792                           postdec1	equ	0xFE5
 11793                           fsr1h	equ	0xFE2
 11794                           fsr1l	equ	0xFE1
 11795                           indf2	equ	0xFDF
 11796                           postinc2	equ	0xFDE
 11797                           postdec2	equ	0xFDD
 11798                           plusw2	equ	0xFDB
 11799                           fsr2h	equ	0xFDA
 11800                           fsr2l	equ	0xFD9
 11801                           status	equ	0xFD8
 11802                           
 11803 ;; *************** function _eusart_putch *****************
 11804 ;; Defined at:
 11805 ;;		line 120 in file "Library/iRobotSerial.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;  eusartSendCh    1    wreg     unsigned char 
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 11810 ;; Return value:  Size  Location     Type
 11811 ;;                  1    wreg      void 
 11812 ;; Registers used:
 11813 ;;		wreg
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;Total ram usage:        1 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    7
 11826 ;; This function calls:
 11827 ;;		Nothing
 11828 ;; This function is called by:
 11829 ;;		_irobot_query_and_update
 11830 ;;		_irobot_init
 11831 ;;		_irobot_move
 11832 ;;		_irobot_leds
 11833 ;;		_irobot_init_song_0
 11834 ;;		_irobot_song_play
 11835 ;;		_irobot_script_play
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text65
 11840  0149B6                     __ptext65:
 11841                           	opt stack 0
 11842  0149B6                     _eusart_putch:
 11843                           	opt stack 20
 11844                           
 11845                           ;incstack = 0
 11846                           ;eusart_putch@eusartSendChar stored from wreg
 11847  0149B6  0100               	movlb	0	; () banked
 11848  0149B8  6FBB               	movwf	eusart_putch@eusartSendChar& (0+255),b
 11849  0149BA                     
 11850                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 11851  0149BA  A2AD               	btfss	4013,1,c	;volatile
 11852  0149BC  D7FE               	goto	l11832
 11853                           
 11854                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 11855  0149BE  C0BB  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 11856  0149C2  0012               	return		;funcret
 11857  0149C4                     __end_of_eusart_putch:
 11858                           	opt stack 0
 11859                           tosu	equ	0xFFF
 11860                           tosh	equ	0xFFE
 11861                           tosl	equ	0xFFD
 11862                           pclath	equ	0xFFA
 11863                           tblptru	equ	0xFF8
 11864                           tblptrh	equ	0xFF7
 11865                           tblptrl	equ	0xFF6
 11866                           tablat	equ	0xFF5
 11867                           prodh	equ	0xFF4
 11868                           prodl	equ	0xFF3
 11869                           postinc0	equ	0xFEE
 11870                           wreg	equ	0xFE8
 11871                           indf1	equ	0xFE7
 11872                           postdec1	equ	0xFE5
 11873                           fsr1h	equ	0xFE2
 11874                           fsr1l	equ	0xFE1
 11875                           indf2	equ	0xFDF
 11876                           postinc2	equ	0xFDE
 11877                           postdec2	equ	0xFDD
 11878                           plusw2	equ	0xFDB
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function _eusart_init *****************
 11884 ;; Defined at:
 11885 ;;		line 103 in file "Library/iRobotSerial.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;Total ram usage:        0 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    7
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_init
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text66
 11914  01476C                     __ptext66:
 11915                           	opt stack 0
 11916  01476C                     _eusart_init:
 11917                           	opt stack 22
 11918                           
 11919                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 11920                           
 11921                           ;incstack = 0
 11922  01476C  9C94               	bcf	3988,6,c	;volatile
 11923                           
 11924                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 11925  01476E  8E94               	bsf	3988,7,c	;volatile
 11926                           
 11927                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 11928  014770  0E24               	movlw	36
 11929  014772  6EAD               	movwf	4013,c	;volatile
 11930                           
 11931                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 11932  014774  0E98               	movlw	152
 11933  014776  6EAC               	movwf	4012,c	;volatile
 11934                           
 11935                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 11936  014778  9A7E               	bcf	3966,5,c	;volatile
 11937                           
 11938                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 11939  01477A  987E               	bcf	3966,4,c	;volatile
 11940                           
 11941                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 11942  01477C  927E               	bcf	3966,1,c	;volatile
 11943                           
 11944                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 11945  01477E  907E               	bcf	3966,0,c	;volatile
 11946                           
 11947                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 11948  014780  84AD               	bsf	4013,2,c	;volatile
 11949                           
 11950                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 11951  014782  967E               	bcf	3966,3,c	;volatile
 11952                           
 11953                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 11954  014784  0E33               	movlw	51
 11955  014786  6EB0               	movwf	4016,c	;volatile
 11956  014788  0012               	return		;funcret
 11957  01478A                     __end_of_eusart_init:
 11958                           	opt stack 0
 11959                           tosu	equ	0xFFF
 11960                           tosh	equ	0xFFE
 11961                           tosl	equ	0xFFD
 11962                           pclath	equ	0xFFA
 11963                           tblptru	equ	0xFF8
 11964                           tblptrh	equ	0xFF7
 11965                           tblptrl	equ	0xFF6
 11966                           tablat	equ	0xFF5
 11967                           prodh	equ	0xFF4
 11968                           prodl	equ	0xFF3
 11969                           postinc0	equ	0xFEE
 11970                           wreg	equ	0xFE8
 11971                           indf1	equ	0xFE7
 11972                           postdec1	equ	0xFE5
 11973                           fsr1h	equ	0xFE2
 11974                           fsr1l	equ	0xFE1
 11975                           indf2	equ	0xFDF
 11976                           postinc2	equ	0xFDE
 11977                           postdec2	equ	0xFDD
 11978                           plusw2	equ	0xFDB
 11979                           fsr2h	equ	0xFDA
 11980                           fsr2l	equ	0xFD9
 11981                           status	equ	0xFD8
 11982                           
 11983 ;; *************** function _MXK_Init *****************
 11984 ;; Defined at:
 11985 ;;		line 33 in file "Library/MXK.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;		None
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;		None
 11990 ;; Return value:  Size  Location     Type
 11991 ;;                  1    wreg      void 
 11992 ;; Registers used:
 11993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12003 ;;Total ram usage:        0 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:   16
 12006 ;; This function calls:
 12007 ;;		_LED_Init
 12008 ;;		_Port_Init
 12009 ;;		_Port_SetPin
 12010 ;;		_Port_SetPinType
 12011 ;;		_Port_SetQuadType
 12012 ;;		_Port_SetType
 12013 ;;		_delay_ms
 12014 ;; This function is called by:
 12015 ;;		_init
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           	psect	text67
 12020  011B1E                     __ptext67:
 12021                           	opt stack 0
 12022  011B1E                     _MXK_Init:
 12023                           	opt stack 13
 12024                           
 12025                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 12026                           
 12027                           ;incstack = 0
 12028  011B1E  0E01               	movlw	1
 12029  011B20  6E4B               	movwf	_Bus_State,c
 12030                           
 12031                           ;MXK.c: 36: lQueue = (Function)0;
 12032  011B22  0E00               	movlw	0
 12033  011B24  0100               	movlb	0	; () banked
 12034  011B26  6F67               	movwf	_lQueue& (0+255),b	;volatile
 12035  011B28  0E00               	movlw	0
 12036  011B2A  0100               	movlb	0	; () banked
 12037  011B2C  6F68               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12038  011B2E  0E00               	movlw	0
 12039  011B30  0100               	movlb	0	; () banked
 12040  011B32  6F69               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 12044  011B34  0EB0               	movlw	low _PortA
 12045  011B36  0101               	movlb	1	; () banked
 12046  011B38  6F02               	movwf	Port_Init@pInput& (0+255),b
 12047  011B3A  0E03               	movlw	high _PortA
 12048  011B3C  0101               	movlb	1	; () banked
 12049  011B3E  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12050  011B40  0E00               	movlw	0
 12051  011B42  0101               	movlb	1	; () banked
 12052  011B44  6F04               	movwf	Port_Init@pPort& (0+255),b
 12053  011B46  EC03  F08C         	call	_Port_Init	;wreg free
 12054                           
 12055                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 12056  011B4A  0EA6               	movlw	low _PortB
 12057  011B4C  0101               	movlb	1	; () banked
 12058  011B4E  6F02               	movwf	Port_Init@pInput& (0+255),b
 12059  011B50  0E03               	movlw	high _PortB
 12060  011B52  0101               	movlb	1	; () banked
 12061  011B54  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12062  011B56  0E01               	movlw	1
 12063  011B58  0101               	movlb	1	; () banked
 12064  011B5A  6F04               	movwf	Port_Init@pPort& (0+255),b
 12065  011B5C  EC03  F08C         	call	_Port_Init	;wreg free
 12066                           
 12067                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 12068  011B60  0EA9               	movlw	low _PortC
 12069  011B62  0101               	movlb	1	; () banked
 12070  011B64  6F02               	movwf	Port_Init@pInput& (0+255),b
 12071  011B66  0E00               	movlw	high _PortC
 12072  011B68  0101               	movlb	1	; () banked
 12073  011B6A  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12074  011B6C  0E02               	movlw	2
 12075  011B6E  0101               	movlb	1	; () banked
 12076  011B70  6F04               	movwf	Port_Init@pPort& (0+255),b
 12077  011B72  EC03  F08C         	call	_Port_Init	;wreg free
 12078                           
 12079                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 12080  011B76  0E9F               	movlw	low _PortD
 12081  011B78  0101               	movlb	1	; () banked
 12082  011B7A  6F02               	movwf	Port_Init@pInput& (0+255),b
 12083  011B7C  0E00               	movlw	high _PortD
 12084  011B7E  0101               	movlb	1	; () banked
 12085  011B80  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12086  011B82  0E03               	movlw	3
 12087  011B84  0101               	movlb	1	; () banked
 12088  011B86  6F04               	movwf	Port_Init@pPort& (0+255),b
 12089  011B88  EC03  F08C         	call	_Port_Init	;wreg free
 12090                           
 12091                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 12092  011B8C  0E95               	movlw	low _PortE
 12093  011B8E  0101               	movlb	1	; () banked
 12094  011B90  6F02               	movwf	Port_Init@pInput& (0+255),b
 12095  011B92  0E00               	movlw	high _PortE
 12096  011B94  0101               	movlb	1	; () banked
 12097  011B96  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12098  011B98  0E04               	movlw	4
 12099  011B9A  0101               	movlb	1	; () banked
 12100  011B9C  6F04               	movwf	Port_Init@pPort& (0+255),b
 12101  011B9E  EC03  F08C         	call	_Port_Init	;wreg free
 12102                           
 12103                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 12104  011BA2  0EBA               	movlw	low _PortF
 12105  011BA4  0101               	movlb	1	; () banked
 12106  011BA6  6F02               	movwf	Port_Init@pInput& (0+255),b
 12107  011BA8  0E03               	movlw	high _PortF
 12108  011BAA  0101               	movlb	1	; () banked
 12109  011BAC  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12110  011BAE  0E05               	movlw	5
 12111  011BB0  0101               	movlb	1	; () banked
 12112  011BB2  6F04               	movwf	Port_Init@pPort& (0+255),b
 12113  011BB4  EC03  F08C         	call	_Port_Init	;wreg free
 12114                           
 12115                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 12116  011BB8  0E9C               	movlw	low _PortG
 12117  011BBA  0101               	movlb	1	; () banked
 12118  011BBC  6F02               	movwf	Port_Init@pInput& (0+255),b
 12119  011BBE  0E03               	movlw	high _PortG
 12120  011BC0  0101               	movlb	1	; () banked
 12121  011BC2  6F03               	movwf	(Port_Init@pInput+1)& (0+255),b
 12122  011BC4  0E06               	movlw	6
 12123  011BC6  0101               	movlb	1	; () banked
 12124  011BC8  6F04               	movwf	Port_Init@pPort& (0+255),b
 12125  011BCA  EC03  F08C         	call	_Port_Init	;wreg free
 12126                           
 12127                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 12128  011BCE  0EBA               	movlw	low _PortF
 12129  011BD0  0100               	movlb	0	; () banked
 12130  011BD2  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 12131  011BD4  0E03               	movlw	high _PortF
 12132  011BD6  0100               	movlb	0	; () banked
 12133  011BD8  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12134  011BDA  0E05               	movlw	5
 12135  011BDC  0100               	movlb	0	; () banked
 12136  011BDE  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 12137  011BE0  0E00               	movlw	0
 12138  011BE2  0100               	movlb	0	; () banked
 12139  011BE4  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12140  011BE6  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12141                           
 12142                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 12143  011BEA  0EA6               	movlw	low _PortB
 12144  011BEC  0100               	movlb	0	; () banked
 12145  011BEE  6FF1               	movwf	Port_SetQuadType@pInput& (0+255),b
 12146  011BF0  0E03               	movlw	high _PortB
 12147  011BF2  0100               	movlb	0	; () banked
 12148  011BF4  6FF2               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12149  011BF6  0E00               	movlw	0
 12150  011BF8  0100               	movlb	0	; () banked
 12151  011BFA  6FF3               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12152  011BFC  0E00               	movlw	0
 12153  011BFE  0100               	movlb	0	; () banked
 12154  011C00  6FF4               	movwf	Port_SetQuadType@pType& (0+255),b
 12155  011C02  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 12156                           
 12157                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 12158  011C06  0EBA               	movlw	low _PortF
 12159  011C08  0100               	movlb	0	; () banked
 12160  011C0A  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 12161  011C0C  0E03               	movlw	high _PortF
 12162  011C0E  0100               	movlb	0	; () banked
 12163  011C10  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12164  011C12  0E06               	movlw	6
 12165  011C14  0100               	movlb	0	; () banked
 12166  011C16  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 12167  011C18  0E03               	movlw	3
 12168  011C1A  0100               	movlb	0	; () banked
 12169  011C1C  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12170  011C1E  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12171                           
 12172                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12173  011C22  0E9C               	movlw	low _PortG
 12174  011C24  0100               	movlb	0	; () banked
 12175  011C26  6FF5               	movwf	Port_SetType@pInput& (0+255),b
 12176  011C28  0E03               	movlw	high _PortG
 12177  011C2A  0100               	movlb	0	; () banked
 12178  011C2C  6FF6               	movwf	(Port_SetType@pInput+1)& (0+255),b
 12179  011C2E  0E03               	movlw	3
 12180  011C30  0100               	movlb	0	; () banked
 12181  011C32  6FF7               	movwf	Port_SetType@pType& (0+255),b
 12182  011C34  EC59  F086         	call	_Port_SetType	;wreg free
 12183                           
 12184                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12185  011C38  0E9C               	movlw	low _PortG
 12186  011C3A  0100               	movlb	0	; () banked
 12187  011C3C  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 12188  011C3E  0E03               	movlw	high _PortG
 12189  011C40  0100               	movlb	0	; () banked
 12190  011C42  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12191  011C44  0E04               	movlw	4
 12192  011C46  0100               	movlb	0	; () banked
 12193  011C48  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 12194  011C4A  0E00               	movlw	0
 12195  011C4C  0100               	movlb	0	; () banked
 12196  011C4E  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 12197  011C50  ECE2  F093         	call	_Port_SetPin	;wreg free
 12198                           
 12199                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12200  011C54  0EBA               	movlw	low _PortF
 12201  011C56  0100               	movlb	0	; () banked
 12202  011C58  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 12203  011C5A  0E03               	movlw	high _PortF
 12204  011C5C  0100               	movlb	0	; () banked
 12205  011C5E  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12206  011C60  0E06               	movlw	6
 12207  011C62  0100               	movlb	0	; () banked
 12208  011C64  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 12209  011C66  0E01               	movlw	1
 12210  011C68  0100               	movlb	0	; () banked
 12211  011C6A  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 12212  011C6C  ECE2  F093         	call	_Port_SetPin	;wreg free
 12213                           
 12214                           ;MXK.c: 55: LED_Init(eLED1);
 12215  011C70  0E00               	movlw	0
 12216  011C72  ECDB  F09E         	call	_LED_Init
 12217                           
 12218                           ;MXK.c: 56: LED_Init(eLED2);
 12219  011C76  0E01               	movlw	1
 12220  011C78  ECDB  F09E         	call	_LED_Init
 12221                           
 12222                           ;MXK.c: 58: PIR1 = 0;
 12223  011C7C  0E00               	movlw	0
 12224  011C7E  6E9E               	movwf	3998,c	;volatile
 12225                           
 12226                           ;MXK.c: 59: PIR2 = 0;
 12227  011C80  0E00               	movlw	0
 12228  011C82  6EA1               	movwf	4001,c	;volatile
 12229                           
 12230                           ;MXK.c: 60: PIR3 = 0;
 12231  011C84  0E00               	movlw	0
 12232  011C86  6EA4               	movwf	4004,c	;volatile
 12233                           
 12234                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12235  011C88  8E9B               	bsf	3995,7,c	;volatile
 12236                           
 12237                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12238  011C8A  8C9B               	bsf	3995,6,c	;volatile
 12239                           
 12240                           ;MXK.c: 66: delay_ms(100);
 12241  011C8C  0E00               	movlw	0
 12242  011C8E  0100               	movlb	0	; () banked
 12243  011C90  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 12244  011C92  0E64               	movlw	100
 12245  011C94  6FBB               	movwf	delay_ms@ms& (0+255),b
 12246  011C96  EC76  F09D         	call	_delay_ms	;wreg free
 12247                           
 12248                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12249  011C9A  8ED0               	bsf	4048,7,c	;volatile
 12250  011C9C  0012               	return		;funcret
 12251  011C9E                     __end_of_MXK_Init:
 12252                           	opt stack 0
 12253                           tosu	equ	0xFFF
 12254                           tosh	equ	0xFFE
 12255                           tosl	equ	0xFFD
 12256                           pclath	equ	0xFFA
 12257                           tblptru	equ	0xFF8
 12258                           tblptrh	equ	0xFF7
 12259                           tblptrl	equ	0xFF6
 12260                           tablat	equ	0xFF5
 12261                           prodh	equ	0xFF4
 12262                           prodl	equ	0xFF3
 12263                           postinc0	equ	0xFEE
 12264                           wreg	equ	0xFE8
 12265                           indf1	equ	0xFE7
 12266                           postdec1	equ	0xFE5
 12267                           fsr1h	equ	0xFE2
 12268                           fsr1l	equ	0xFE1
 12269                           indf2	equ	0xFDF
 12270                           postinc2	equ	0xFDE
 12271                           postdec2	equ	0xFDD
 12272                           plusw2	equ	0xFDB
 12273                           fsr2h	equ	0xFDA
 12274                           fsr2l	equ	0xFD9
 12275                           status	equ	0xFD8
 12276                           
 12277 ;; *************** function _Port_Init *****************
 12278 ;; Defined at:
 12279 ;;		line 150 in file "Library/Port.c"
 12280 ;; Parameters:    Size  Location     Type
 12281 ;;  pInput          2    2[BANK1 ] const PTR struct Port
 12282 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12283 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12284 ;;  pPort           1    4[BANK1 ] enum E6786
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  i               1    7[BANK1 ] unsigned char 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  1    wreg      void 
 12289 ;; Registers used:
 12290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12296 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;Total ram usage:        6 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:   15
 12303 ;; This function calls:
 12304 ;;		_GetPortPORT
 12305 ;;		_GetPortProperties
 12306 ;;		_GetPortTRIS
 12307 ;;		_Port_Set
 12308 ;;		_Port_SetPinType
 12309 ;;		_Port_SetType
 12310 ;;		_Word_GetPair
 12311 ;; This function is called by:
 12312 ;;		_MXK_Init
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           	psect	text68
 12317  011806                     __ptext68:
 12318                           	opt stack 0
 12319  011806                     _Port_Init:
 12320                           	opt stack 13
 12321                           
 12322                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12323                           
 12324                           ;incstack = 0
 12325  011806  0101               	movlb	1	; () banked
 12326  011808  5104               	movf	Port_Init@pPort& (0+255),w,b
 12327  01180A  ECC6  F097         	call	_GetPortProperties
 12328  01180E  C102  FFD9         	movff	Port_Init@pInput,fsr2l
 12329  011812  C103  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12330  011816  0100               	movlb	0	; () banked
 12331  011818  C0BB  FFDE         	movff	?_GetPortProperties,postinc2
 12332  01181C  0100               	movlb	0	; () banked
 12333  01181E  C0BC  FFDD         	movff	?_GetPortProperties+1,postdec2
 12334                           
 12335                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12336  011822  0101               	movlb	1	; () banked
 12337  011824  5104               	movf	Port_Init@pPort& (0+255),w,b
 12338  011826  EC19  F098         	call	_GetPortPORT
 12339  01182A  0101               	movlb	1	; () banked
 12340  01182C  EE20 F006          	lfsr	2,6
 12341  011830  5102               	movf	Port_Init@pInput& (0+255),w,b
 12342  011832  26D9               	addwf	fsr2l,f,c
 12343  011834  5103               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12344  011836  22DA               	addwfc	fsr2h,f,c
 12345  011838  0100               	movlb	0	; () banked
 12346  01183A  C0BB  FFDE         	movff	?_GetPortPORT,postinc2
 12347  01183E  0100               	movlb	0	; () banked
 12348  011840  C0BC  FFDD         	movff	?_GetPortPORT+1,postdec2
 12349                           
 12350                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12351  011844  0101               	movlb	1	; () banked
 12352  011846  5104               	movf	Port_Init@pPort& (0+255),w,b
 12353  011848  EC19  F098         	call	_GetPortPORT
 12354  01184C  0101               	movlb	1	; () banked
 12355  01184E  EE20 F004          	lfsr	2,4
 12356  011852  5102               	movf	Port_Init@pInput& (0+255),w,b
 12357  011854  26D9               	addwf	fsr2l,f,c
 12358  011856  5103               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12359  011858  22DA               	addwfc	fsr2h,f,c
 12360  01185A  0100               	movlb	0	; () banked
 12361  01185C  C0BB  FFDE         	movff	?_GetPortPORT,postinc2
 12362  011860  0100               	movlb	0	; () banked
 12363  011862  C0BC  FFDD         	movff	?_GetPortPORT+1,postdec2
 12364                           
 12365                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12366  011866  0101               	movlb	1	; () banked
 12367  011868  5104               	movf	Port_Init@pPort& (0+255),w,b
 12368  01186A  EC73  F097         	call	_GetPortTRIS
 12369  01186E  0101               	movlb	1	; () banked
 12370  011870  EE20 F002          	lfsr	2,2
 12371  011874  5102               	movf	Port_Init@pInput& (0+255),w,b
 12372  011876  26D9               	addwf	fsr2l,f,c
 12373  011878  5103               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12374  01187A  22DA               	addwfc	fsr2h,f,c
 12375  01187C  0100               	movlb	0	; () banked
 12376  01187E  C0BB  FFDE         	movff	?_GetPortTRIS,postinc2
 12377  011882  0100               	movlb	0	; () banked
 12378  011884  C0BC  FFDD         	movff	?_GetPortTRIS+1,postdec2
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12382  011888  0101               	movlb	1	; () banked
 12383  01188A  EE20 F004          	lfsr	2,4
 12384  01188E  5102               	movf	Port_Init@pInput& (0+255),w,b
 12385  011890  26D9               	addwf	fsr2l,f,c
 12386  011892  5103               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12387  011894  22DA               	addwfc	fsr2h,f,c
 12388  011896  CFDE F105          	movff	postinc2,??_Port_Init
 12389  01189A  CFDD F106          	movff	postdec2,??_Port_Init+1
 12390  01189E  C105  FFD9         	movff	??_Port_Init,fsr2l
 12391  0118A2  C106  FFDA         	movff	??_Port_Init+1,fsr2h
 12392  0118A6  0E00               	movlw	0
 12393  0118A8  6EDF               	movwf	indf2,c
 12394                           
 12395                           ; BSR set to: 1
 12396                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12397  0118AA  0101               	movlb	1	; () banked
 12398  0118AC  EE20 F002          	lfsr	2,2
 12399  0118B0  5102               	movf	Port_Init@pInput& (0+255),w,b
 12400  0118B2  26D9               	addwf	fsr2l,f,c
 12401  0118B4  5103               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12402  0118B6  22DA               	addwfc	fsr2h,f,c
 12403  0118B8  CFDE F105          	movff	postinc2,??_Port_Init
 12404  0118BC  CFDD F106          	movff	postdec2,??_Port_Init+1
 12405  0118C0  C105  FFD9         	movff	??_Port_Init,fsr2l
 12406  0118C4  C106  FFDA         	movff	??_Port_Init+1,fsr2h
 12407  0118C8  0EFF               	movlw	255
 12408  0118CA  6EDF               	movwf	indf2,c
 12409                           
 12410                           ; BSR set to: 1
 12411                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12412  0118CC  C102  F0F5         	movff	Port_Init@pInput,Port_SetType@pInput
 12413  0118D0  C103  F0F6         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12414  0118D4  0E00               	movlw	0
 12415  0118D6  0100               	movlb	0	; () banked
 12416  0118D8  6FF7               	movwf	Port_SetType@pType& (0+255),b
 12417  0118DA  EC59  F086         	call	_Port_SetType	;wreg free
 12418                           
 12419                           ;Port.c: 166: UINT8 i;
 12420                           ;Port.c: 167: for (i=0; i<8; i++)
 12421  0118DE  0E00               	movlw	0
 12422  0118E0  0101               	movlb	1	; () banked
 12423  0118E2  6F07               	movwf	Port_Init@i& (0+255),b
 12424  0118E4                     l12054:
 12425                           
 12426                           ; BSR set to: 1
 12427  0118E4  0E07               	movlw	7
 12428  0118E6  0101               	movlb	1	; () banked
 12429  0118E8  6507               	cpfsgt	Port_Init@i& (0+255),b
 12430  0118EA  D031               	goto	l403
 12431  0118EC  D04B               	goto	u7920
 12432  0118EE                     
 12433                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12434                           
 12435                           ; BSR set to: 1
 12436  0118EE  C102  F0E1         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12437  0118F2  C103  F0E2         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12438  0118F6  C107  F0E3         	movff	Port_Init@i,Port_SetPinType@pPin
 12439  0118FA  0E03               	movlw	3
 12440  0118FC  0100               	movlb	0	; () banked
 12441  0118FE  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12442  011900  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12443                           
 12444                           ;Port.c: 173: break;
 12445  011904  D03C               	goto	l405
 12446  011906                     
 12447                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12448  011906  C102  F0E1         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12449  01190A  C103  F0E2         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12450  01190E  C107  F0E3         	movff	Port_Init@i,Port_SetPinType@pPin
 12451  011912  0E02               	movlw	2
 12452  011914  0100               	movlb	0	; () banked
 12453  011916  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12454  011918  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12455                           
 12456                           ;Port.c: 176: break;
 12457  01191C  D030               	goto	l405
 12458  01191E                     
 12459                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12460  01191E  C102  F0E1         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12461  011922  C103  F0E2         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12462  011926  C107  F0E3         	movff	Port_Init@i,Port_SetPinType@pPin
 12463  01192A  0E01               	movlw	1
 12464  01192C  0100               	movlb	0	; () banked
 12465  01192E  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12466  011930  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12467                           
 12468                           ;Port.c: 179: break;
 12469  011934  D024               	goto	l405
 12470  011936                     
 12471                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12472  011936  C102  F0E1         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12473  01193A  C103  F0E2         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12474  01193E  C107  F0E3         	movff	Port_Init@i,Port_SetPinType@pPin
 12475  011942  0E00               	movlw	0
 12476  011944  0100               	movlb	0	; () banked
 12477  011946  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 12478  011948  EC54  F08A         	call	_Port_SetPinType	;wreg free
 12479                           
 12480                           ;Port.c: 183: }
 12481                           
 12482                           ;Port.c: 182: break;
 12483  01194C  D018               	goto	l405
 12484  01194E                     l403:
 12485  01194E  C102  FFD9         	movff	Port_Init@pInput,fsr2l
 12486  011952  C103  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12487  011956  CFDE F0C7          	movff	postinc2,Word_GetPair@pInput
 12488  01195A  CFDD F0C8          	movff	postdec2,Word_GetPair@pInput+1
 12489  01195E  C107  F0C9         	movff	Port_Init@i,Word_GetPair@pPair
 12490  011962  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 12491                           
 12492                           ; Switch size 1, requested type "space"
 12493                           ; Number of cases is 4, Range of values is 0 to 3
 12494                           ; switch strategies available:
 12495                           ; Name         Instructions Cycles
 12496                           ; simple_byte           13     7 (average)
 12497                           ;	Chosen strategy is simple_byte
 12498  011966  0A00               	xorlw	0	; case 0
 12499  011968  B4D8               	btfsc	status,2,c
 12500  01196A  D7C1               	goto	l404
 12501  01196C  0A01               	xorlw	1	; case 1
 12502  01196E  B4D8               	btfsc	status,2,c
 12503  011970  D7D6               	goto	l407
 12504  011972  0A03               	xorlw	3	; case 2
 12505  011974  B4D8               	btfsc	status,2,c
 12506  011976  D7C7               	goto	l406
 12507  011978  0A01               	xorlw	1	; case 3
 12508  01197A  B4D8               	btfsc	status,2,c
 12509  01197C  D7DC               	goto	l408
 12510  01197E                     l405:
 12511  01197E  0101               	movlb	1	; () banked
 12512  011980  2B07               	incf	Port_Init@i& (0+255),f,b
 12513  011982  D7B0               	goto	l12054
 12514  011984                     u7920:
 12515                           
 12516                           ; BSR set to: 1
 12517                           ;Port.c: 184: }
 12518                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12519                           
 12520                           ; BSR set to: 1
 12521  011984  C102  F0CA         	movff	Port_Init@pInput,Port_Set@pInput
 12522  011988  C103  F0CB         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12523  01198C  0E00               	movlw	0
 12524  01198E  0100               	movlb	0	; () banked
 12525  011990  6FCC               	movwf	Port_Set@pValue& (0+255),b
 12526  011992  EC0F  F082         	call	_Port_Set	;wreg free
 12527  011996  0012               	return		;funcret
 12528  011998                     __end_of_Port_Init:
 12529                           	opt stack 0
 12530                           tosu	equ	0xFFF
 12531                           tosh	equ	0xFFE
 12532                           tosl	equ	0xFFD
 12533                           pclath	equ	0xFFA
 12534                           tblptru	equ	0xFF8
 12535                           tblptrh	equ	0xFF7
 12536                           tblptrl	equ	0xFF6
 12537                           tablat	equ	0xFF5
 12538                           prodh	equ	0xFF4
 12539                           prodl	equ	0xFF3
 12540                           postinc0	equ	0xFEE
 12541                           wreg	equ	0xFE8
 12542                           indf1	equ	0xFE7
 12543                           postdec1	equ	0xFE5
 12544                           fsr1h	equ	0xFE2
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           plusw2	equ	0xFDB
 12550                           fsr2h	equ	0xFDA
 12551                           fsr2l	equ	0xFD9
 12552                           status	equ	0xFD8
 12553                           
 12554 ;; *************** function _Port_SetType *****************
 12555 ;; Defined at:
 12556 ;;		line 513 in file "Library/Port.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 12559 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12560 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12561 ;;  pType           1   60[BANK0 ] enum E6795
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  Output          1   61[BANK0 ] enum E6475
 12564 ;; Return value:  Size  Location     Type
 12565 ;;                  1    wreg      enum E6475
 12566 ;; Registers used:
 12567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12573 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;Total ram usage:        6 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:   14
 12580 ;; This function calls:
 12581 ;;		_Port_CheckPortType
 12582 ;;		_Word_SetPair
 12583 ;; This function is called by:
 12584 ;;		_Port_Init
 12585 ;;		_MXK_Init
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           	psect	text69
 12590  010CB2                     __ptext69:
 12591                           	opt stack 0
 12592  010CB2                     _Port_SetType:
 12593                           	opt stack 14
 12594                           
 12595                           ;Port.c: 515: ePinError Output = ePinErrorState;
 12596                           
 12597                           ;incstack = 0
 12598  010CB2  0E05               	movlw	5
 12599  010CB4  0100               	movlb	0	; () banked
 12600  010CB6  6FF8               	movwf	Port_SetType@Output& (0+255),b
 12601                           
 12602                           ;Port.c: 517: switch (pType)
 12603  010CB8  D07A               	goto	l509
 12604  010CBA                     
 12605                           ; BSR set to: 0
 12606                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 12607                           
 12608                           ; BSR set to: 0
 12609  010CBA  0100               	movlb	0	; () banked
 12610  010CBC  EE20 F002          	lfsr	2,2
 12611  010CC0  51F5               	movf	Port_SetType@pInput& (0+255),w,b
 12612  010CC2  26D9               	addwf	fsr2l,f,c
 12613  010CC4  51F6               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12614  010CC6  22DA               	addwfc	fsr2h,f,c
 12615  010CC8  CFDE F100          	movff	postinc2,??_Port_SetType
 12616  010CCC  CFDD F101          	movff	postdec2,??_Port_SetType+1
 12617  010CD0  C100  FFD9         	movff	??_Port_SetType,fsr2l
 12618  010CD4  C101  FFDA         	movff	??_Port_SetType+1,fsr2h
 12619  010CD8  0EFF               	movlw	255
 12620  010CDA  D067               	goto	L7
 12621  010CDC                     
 12622                           ; BSR set to: 0
 12623                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 12624                           
 12625                           ; BSR set to: 0
 12626  010CDC  C0F5  F0F1         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12627  010CE0  C0F6  F0F2         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12628  010CE4  0E01               	movlw	1
 12629  010CE6  0100               	movlb	0	; () banked
 12630  010CE8  6FF3               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12631  010CEA  ECA9  F0A0         	call	_Port_CheckPortType	;wreg free
 12632  010CEE  0100               	movlb	0	; () banked
 12633  010CF0  6FF8               	movwf	Port_SetType@Output& (0+255),b
 12634  010CF2  0100               	movlb	0	; () banked
 12635  010CF4  51F8               	movf	Port_SetType@Output& (0+255),w,b
 12636  010CF6  A4D8               	btfss	status,2,c
 12637  010CF8  0012               	return	
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;Port.c: 527: {
 12641                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 12642  010CFA  0100               	movlb	0	; () banked
 12643  010CFC  EE20 F002          	lfsr	2,2
 12644  010D00  51F5               	movf	Port_SetType@pInput& (0+255),w,b
 12645  010D02  26D9               	addwf	fsr2l,f,c
 12646  010D04  51F6               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12647  010D06  22DA               	addwfc	fsr2h,f,c
 12648  010D08  CFDE F100          	movff	postinc2,??_Port_SetType
 12649  010D0C  CFDD F101          	movff	postdec2,??_Port_SetType+1
 12650  010D10  C100  FFD9         	movff	??_Port_SetType,fsr2l
 12651  010D14  C101  FFDA         	movff	??_Port_SetType+1,fsr2h
 12652  010D18  0E00               	movlw	0
 12653  010D1A  6EDF               	movwf	indf2,c
 12654                           
 12655                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 12656  010D1C  0100               	movlb	0	; () banked
 12657  010D1E  EE20 F004          	lfsr	2,4
 12658  010D22  D036               	goto	L12
 12659  010D24                     
 12660                           ; BSR set to: 0
 12661                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 12662                           
 12663                           ; BSR set to: 0
 12664  010D24  C0F5  F0F1         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12665  010D28  C0F6  F0F2         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12666  010D2C  0E02               	movlw	2
 12667  010D2E  0100               	movlb	0	; () banked
 12668  010D30  6FF3               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12669  010D32  ECA9  F0A0         	call	_Port_CheckPortType	;wreg free
 12670  010D36  0100               	movlb	0	; () banked
 12671  010D38  6FF8               	movwf	Port_SetType@Output& (0+255),b
 12672  010D3A  0100               	movlb	0	; () banked
 12673  010D3C  51F8               	movf	Port_SetType@Output& (0+255),w,b
 12674  010D3E  A4D8               	btfss	status,2,c
 12675  010D40  0012               	return	
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;Port.c: 538: {
 12679                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 12680  010D42  0100               	movlb	0	; () banked
 12681  010D44  EE20 F002          	lfsr	2,2
 12682  010D48  51F5               	movf	Port_SetType@pInput& (0+255),w,b
 12683  010D4A  26D9               	addwf	fsr2l,f,c
 12684  010D4C  51F6               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12685  010D4E  22DA               	addwfc	fsr2h,f,c
 12686  010D50  CFDE F100          	movff	postinc2,??_Port_SetType
 12687  010D54  CFDD F101          	movff	postdec2,??_Port_SetType+1
 12688  010D58  C100  FFD9         	movff	??_Port_SetType,fsr2l
 12689  010D5C  C101  FFDA         	movff	??_Port_SetType+1,fsr2h
 12690  010D60  0EFF               	movlw	255
 12691  010D62  6EDF               	movwf	indf2,c
 12692                           
 12693                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 12694  010D64  0100               	movlb	0	; () banked
 12695  010D66  EE20 F004          	lfsr	2,4
 12696  010D6A  D7AA               	goto	L8
 12697  010D6C                     
 12698                           ; BSR set to: 0
 12699                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 12700                           
 12701                           ; BSR set to: 0
 12702  010D6C  C0F5  F0F1         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12703  010D70  C0F6  F0F2         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12704  010D74  0E00               	movlw	0
 12705  010D76  0100               	movlb	0	; () banked
 12706  010D78  6FF3               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12707  010D7A  ECA9  F0A0         	call	_Port_CheckPortType	;wreg free
 12708  010D7E  0100               	movlb	0	; () banked
 12709  010D80  6FF8               	movwf	Port_SetType@Output& (0+255),b
 12710  010D82  0100               	movlb	0	; () banked
 12711  010D84  51F8               	movf	Port_SetType@Output& (0+255),w,b
 12712  010D86  A4D8               	btfss	status,2,c
 12713  010D88  0012               	return	
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;Port.c: 549: {
 12717                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 12718  010D8A  0100               	movlb	0	; () banked
 12719  010D8C  EE20 F002          	lfsr	2,2
 12720  010D90                     L12:
 12721  010D90  51F5               	movf	Port_SetType@pInput& (0+255),w,b
 12722  010D92  26D9               	addwf	fsr2l,f,c
 12723  010D94  51F6               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12724  010D96  22DA               	addwfc	fsr2h,f,c
 12725  010D98  CFDE F100          	movff	postinc2,??_Port_SetType
 12726  010D9C  CFDD F101          	movff	postdec2,??_Port_SetType+1
 12727  010DA0  C100  FFD9         	movff	??_Port_SetType,fsr2l
 12728  010DA4  C101  FFDA         	movff	??_Port_SetType+1,fsr2h
 12729  010DA8  0E00               	movlw	0
 12730  010DAA                     L7:
 12731  010DAA  6EDF               	movwf	indf2,c
 12732                           
 12733                           ;Port.c: 552: }
 12734  010DAC  D00E               	goto	l511
 12735  010DAE                     l509:
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ; BSR set to: 0
 12740  010DAE  0100               	movlb	0	; () banked
 12741  010DB0  51F7               	movf	Port_SetType@pType& (0+255),w,b
 12742                           
 12743                           ; Switch size 1, requested type "space"
 12744                           ; Number of cases is 4, Range of values is 0 to 3
 12745                           ; switch strategies available:
 12746                           ; Name         Instructions Cycles
 12747                           ; simple_byte           13     7 (average)
 12748                           ;	Chosen strategy is simple_byte
 12749  010DB2  0A00               	xorlw	0	; case 0
 12750  010DB4  B4D8               	btfsc	status,2,c
 12751  010DB6  D781               	goto	l510
 12752  010DB8  0A01               	xorlw	1	; case 1
 12753  010DBA  B4D8               	btfsc	status,2,c
 12754  010DBC  D78F               	goto	l512
 12755  010DBE  0A03               	xorlw	3	; case 2
 12756  010DC0  B4D8               	btfsc	status,2,c
 12757  010DC2  D7B0               	goto	l516
 12758  010DC4  0A01               	xorlw	1	; case 3
 12759  010DC6  B4D8               	btfsc	status,2,c
 12760  010DC8  D7D1               	goto	l519
 12761  010DCA                     l511:
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 12765                           
 12766                           ; BSR set to: 0
 12767  010DCA  0E08               	movlw	8
 12768  010DCC  0100               	movlb	0	; () banked
 12769  010DCE  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12770  010DD0  0100               	movlb	0	; () banked
 12771  010DD2  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12772  010DD4  0E00               	movlw	0
 12773  010DD6  0100               	movlb	0	; () banked
 12774  010DD8  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12775  010DDA  0100               	movlb	0	; () banked
 12776  010DDC  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12777  010DDE  0E00               	movlw	0
 12778  010DE0  0100               	movlb	0	; () banked
 12779  010DE2  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12780  010DE4  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12781  010DE8  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12782                           
 12783                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 12784  010DEC  0E08               	movlw	8
 12785  010DEE  0100               	movlb	0	; () banked
 12786  010DF0  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12787  010DF2  0100               	movlb	0	; () banked
 12788  010DF4  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12789  010DF6  0E00               	movlw	0
 12790  010DF8  0100               	movlb	0	; () banked
 12791  010DFA  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12792  010DFC  0100               	movlb	0	; () banked
 12793  010DFE  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12794  010E00  0E01               	movlw	1
 12795  010E02  0100               	movlb	0	; () banked
 12796  010E04  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12797  010E06  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12798  010E0A  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12799                           
 12800                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 12801  010E0E  0E08               	movlw	8
 12802  010E10  0100               	movlb	0	; () banked
 12803  010E12  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12804  010E14  0100               	movlb	0	; () banked
 12805  010E16  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12806  010E18  0E00               	movlw	0
 12807  010E1A  0100               	movlb	0	; () banked
 12808  010E1C  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12809  010E1E  0100               	movlb	0	; () banked
 12810  010E20  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12811  010E22  0E02               	movlw	2
 12812  010E24  0100               	movlb	0	; () banked
 12813  010E26  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12814  010E28  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12815  010E2C  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12816                           
 12817                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 12818  010E30  0E08               	movlw	8
 12819  010E32  0100               	movlb	0	; () banked
 12820  010E34  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12821  010E36  0100               	movlb	0	; () banked
 12822  010E38  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12823  010E3A  0E00               	movlw	0
 12824  010E3C  0100               	movlb	0	; () banked
 12825  010E3E  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12826  010E40  0100               	movlb	0	; () banked
 12827  010E42  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12828  010E44  0E03               	movlw	3
 12829  010E46  0100               	movlb	0	; () banked
 12830  010E48  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12831  010E4A  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12832  010E4E  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12833                           
 12834                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 12835  010E52  0E08               	movlw	8
 12836  010E54  0100               	movlb	0	; () banked
 12837  010E56  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12838  010E58  0100               	movlb	0	; () banked
 12839  010E5A  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12840  010E5C  0E00               	movlw	0
 12841  010E5E  0100               	movlb	0	; () banked
 12842  010E60  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12843  010E62  0100               	movlb	0	; () banked
 12844  010E64  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12845  010E66  0E04               	movlw	4
 12846  010E68  0100               	movlb	0	; () banked
 12847  010E6A  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12848  010E6C  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12849  010E70  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12850                           
 12851                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 12852  010E74  0E08               	movlw	8
 12853  010E76  0100               	movlb	0	; () banked
 12854  010E78  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12855  010E7A  0100               	movlb	0	; () banked
 12856  010E7C  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12857  010E7E  0E00               	movlw	0
 12858  010E80  0100               	movlb	0	; () banked
 12859  010E82  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12860  010E84  0100               	movlb	0	; () banked
 12861  010E86  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12862  010E88  0E05               	movlw	5
 12863  010E8A  0100               	movlb	0	; () banked
 12864  010E8C  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12865  010E8E  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12866  010E92  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12867                           
 12868                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 12869  010E96  0E08               	movlw	8
 12870  010E98  0100               	movlb	0	; () banked
 12871  010E9A  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12872  010E9C  0100               	movlb	0	; () banked
 12873  010E9E  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12874  010EA0  0E00               	movlw	0
 12875  010EA2  0100               	movlb	0	; () banked
 12876  010EA4  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12877  010EA6  0100               	movlb	0	; () banked
 12878  010EA8  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12879  010EAA  0E06               	movlw	6
 12880  010EAC  0100               	movlb	0	; () banked
 12881  010EAE  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12882  010EB0  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12883  010EB4  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12884                           
 12885                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 12886  010EB8  0E08               	movlw	8
 12887  010EBA  0100               	movlb	0	; () banked
 12888  010EBC  25F5               	addwf	Port_SetType@pInput& (0+255),w,b
 12889  010EBE  0100               	movlb	0	; () banked
 12890  010EC0  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 12891  010EC2  0E00               	movlw	0
 12892  010EC4  0100               	movlb	0	; () banked
 12893  010EC6  21F6               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12894  010EC8  0100               	movlb	0	; () banked
 12895  010ECA  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12896  010ECC  0E07               	movlw	7
 12897  010ECE  0100               	movlb	0	; () banked
 12898  010ED0  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 12899  010ED2  C0F7  F0CD         	movff	Port_SetType@pType,Word_SetPair@pValue
 12900  010ED6  EC37  F0A1         	call	_Word_SetPair	;wreg free
 12901  010EDA  0012               	return	
 12902  010EDC                     __end_of_Port_SetType:
 12903                           	opt stack 0
 12904                           tosu	equ	0xFFF
 12905                           tosh	equ	0xFFE
 12906                           tosl	equ	0xFFD
 12907                           pclath	equ	0xFFA
 12908                           tblptru	equ	0xFF8
 12909                           tblptrh	equ	0xFF7
 12910                           tblptrl	equ	0xFF6
 12911                           tablat	equ	0xFF5
 12912                           prodh	equ	0xFF4
 12913                           prodl	equ	0xFF3
 12914                           postinc0	equ	0xFEE
 12915                           wreg	equ	0xFE8
 12916                           indf1	equ	0xFE7
 12917                           postdec1	equ	0xFE5
 12918                           fsr1h	equ	0xFE2
 12919                           fsr1l	equ	0xFE1
 12920                           indf2	equ	0xFDF
 12921                           postinc2	equ	0xFDE
 12922                           postdec2	equ	0xFDD
 12923                           plusw2	equ	0xFDB
 12924                           fsr2h	equ	0xFDA
 12925                           fsr2l	equ	0xFD9
 12926                           status	equ	0xFD8
 12927                           
 12928 ;; *************** function _Port_CheckPortType *****************
 12929 ;; Defined at:
 12930 ;;		line 138 in file "Library/Port.c"
 12931 ;; Parameters:    Size  Location     Type
 12932 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 12933 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12934 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12935 ;;  pDrive          1   56[BANK0 ] enum E6469
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  Output          1   57[BANK0 ] enum E6475
 12938 ;; Return value:  Size  Location     Type
 12939 ;;                  1    wreg      enum E6475
 12940 ;; Registers used:
 12941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12942 ;; Tracked objects:
 12943 ;;		On entry : 0/0
 12944 ;;		On exit  : 0/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12947 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12950 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;Total ram usage:        4 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:   13
 12954 ;; This function calls:
 12955 ;;		_Port_CheckQuadType
 12956 ;; This function is called by:
 12957 ;;		_Port_SetType
 12958 ;; This function uses a non-reentrant model
 12959 ;;
 12960                           
 12961                           	psect	text70
 12962  014152                     __ptext70:
 12963                           	opt stack 0
 12964  014152                     _Port_CheckPortType:
 12965                           	opt stack 14
 12966                           
 12967                           ;Port.c: 140: ePinError Output = ePinErrorState;
 12968                           
 12969                           ;incstack = 0
 12970  014152  0E05               	movlw	5
 12971  014154  0100               	movlb	0	; () banked
 12972  014156  6FF4               	movwf	Port_CheckPortType@Output& (0+255),b
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 12976  014158  C0F1  F0EA         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 12977  01415C  C0F2  F0EB         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 12978  014160  0E00               	movlw	0
 12979  014162  0100               	movlb	0	; () banked
 12980  014164  6FEC               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 12981  014166  C0F3  F0ED         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 12982  01416A  EC3A  F09F         	call	_Port_CheckQuadType	;wreg free
 12983  01416E  0100               	movlb	0	; () banked
 12984  014170  6FF4               	movwf	Port_CheckPortType@Output& (0+255),b
 12985  014172  0100               	movlb	0	; () banked
 12986  014174  51F4               	movf	Port_CheckPortType@Output& (0+255),w,b
 12987  014176  A4D8               	btfss	status,2,c
 12988  014178  D00D               	goto	l397
 12989                           
 12990                           ; BSR set to: 0
 12991                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 12992  01417A  C0F1  F0EA         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 12993  01417E  C0F2  F0EB         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 12994  014182  0E01               	movlw	1
 12995  014184  0100               	movlb	0	; () banked
 12996  014186  6FEC               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 12997  014188  C0F3  F0ED         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 12998  01418C  EC3A  F09F         	call	_Port_CheckQuadType	;wreg free
 12999  014190  0100               	movlb	0	; () banked
 13000  014192  6FF4               	movwf	Port_CheckPortType@Output& (0+255),b
 13001  014194                     l397:
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;Port.c: 146: return Output;
 13005                           
 13006                           ; BSR set to: 0
 13007  014194  0100               	movlb	0	; () banked
 13008  014196  51F4               	movf	Port_CheckPortType@Output& (0+255),w,b
 13009  014198  0012               	return	
 13010  01419A                     __end_of_Port_CheckPortType:
 13011                           	opt stack 0
 13012                           tosu	equ	0xFFF
 13013                           tosh	equ	0xFFE
 13014                           tosl	equ	0xFFD
 13015                           pclath	equ	0xFFA
 13016                           tblptru	equ	0xFF8
 13017                           tblptrh	equ	0xFF7
 13018                           tblptrl	equ	0xFF6
 13019                           tablat	equ	0xFF5
 13020                           prodh	equ	0xFF4
 13021                           prodl	equ	0xFF3
 13022                           postinc0	equ	0xFEE
 13023                           wreg	equ	0xFE8
 13024                           indf1	equ	0xFE7
 13025                           postdec1	equ	0xFE5
 13026                           fsr1h	equ	0xFE2
 13027                           fsr1l	equ	0xFE1
 13028                           indf2	equ	0xFDF
 13029                           postinc2	equ	0xFDE
 13030                           postdec2	equ	0xFDD
 13031                           plusw2	equ	0xFDB
 13032                           fsr2h	equ	0xFDA
 13033                           fsr2l	equ	0xFD9
 13034                           status	equ	0xFD8
 13035                           
 13036 ;; *************** function _Port_Set *****************
 13037 ;; Defined at:
 13038 ;;		line 570 in file "Library/Port.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13041 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13042 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13043 ;;  pValue          1   17[BANK0 ] unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 13046 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 13047 ;;  Type            1   38[BANK0 ] enum E6795
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      void 
 13050 ;; Registers used:
 13051 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13057 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13058 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13059 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13060 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;Total ram usage:       24 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:   10
 13064 ;; This function calls:
 13065 ;;		_Byte_SetByte
 13066 ;;		_Word_GetPair
 13067 ;; This function is called by:
 13068 ;;		_Port_Init
 13069 ;;		_Port_Toggle
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           	psect	text71
 13074  01041E                     __ptext71:
 13075                           	opt stack 0
 13076  01041E                     _Port_Set:
 13077                           	opt stack 17
 13078                           
 13079                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;incstack = 0
 13083  01041E  0E08               	movlw	8
 13084  010420  0100               	movlb	0	; () banked
 13085  010422  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13086  010424  0100               	movlb	0	; () banked
 13087  010426  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13088  010428  0E00               	movlw	0
 13089  01042A  0100               	movlb	0	; () banked
 13090  01042C  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13091  01042E  0100               	movlb	0	; () banked
 13092  010430  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13093  010432  0E00               	movlw	0
 13094  010434  0100               	movlb	0	; () banked
 13095  010436  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13096  010438  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13097  01043C  0100               	movlb	0	; () banked
 13098  01043E  6FE1               	movwf	Port_Set@Type& (0+255),b
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 13102  010440  0100               	movlb	0	; () banked
 13103  010442  51E1               	movf	Port_Set@Type& (0+255),w,b
 13104  010444  0100               	movlb	0	; () banked
 13105  010446  6FCD               	movwf	??_Port_Set& (0+255),b
 13106  010448  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13107  01044A  0E0E               	movlw	14
 13108  01044C                     u7465:
 13109  01044C  90D8               	bcf	status,0,c
 13110  01044E  0100               	movlb	0	; () banked
 13111  010450  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13112  010452  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13113  010454  2EE8               	decfsz	wreg,f,c
 13114  010456  D7FA               	goto	u7465
 13115  010458  0100               	movlb	0	; () banked
 13116  01045A  51E1               	movf	Port_Set@Type& (0+255),w,b
 13117  01045C  0100               	movlb	0	; () banked
 13118  01045E  6FCF               	movwf	(??_Port_Set+2)& (0+255),b
 13119  010460  6BD0               	clrf	(??_Port_Set+3)& (0+255),b
 13120  010462  0E0C               	movlw	12
 13121  010464                     u7475:
 13122  010464  90D8               	bcf	status,0,c
 13123  010466  0100               	movlb	0	; () banked
 13124  010468  37CF               	rlcf	(??_Port_Set+2)& (0+255),f,b
 13125  01046A  37D0               	rlcf	(??_Port_Set+3)& (0+255),f,b
 13126  01046C  2EE8               	decfsz	wreg,f,c
 13127  01046E  D7FA               	goto	u7475
 13128  010470  0100               	movlb	0	; () banked
 13129  010472  51E1               	movf	Port_Set@Type& (0+255),w,b
 13130  010474  0100               	movlb	0	; () banked
 13131  010476  6FD1               	movwf	(??_Port_Set+4)& (0+255),b
 13132  010478  6BD2               	clrf	(??_Port_Set+5)& (0+255),b
 13133  01047A  0E0A               	movlw	10
 13134  01047C                     u7485:
 13135  01047C  90D8               	bcf	status,0,c
 13136  01047E  0100               	movlb	0	; () banked
 13137  010480  37D1               	rlcf	(??_Port_Set+4)& (0+255),f,b
 13138  010482  37D2               	rlcf	(??_Port_Set+5)& (0+255),f,b
 13139  010484  2EE8               	decfsz	wreg,f,c
 13140  010486  D7FA               	goto	u7485
 13141  010488  0100               	movlb	0	; () banked
 13142  01048A  51E1               	movf	Port_Set@Type& (0+255),w,b
 13143  01048C  0100               	movlb	0	; () banked
 13144  01048E  6FD4               	movwf	(??_Port_Set+7)& (0+255),b
 13145  010490  6BD3               	clrf	(??_Port_Set+6)& (0+255),b
 13146  010492  0100               	movlb	0	; () banked
 13147  010494  51E1               	movf	Port_Set@Type& (0+255),w,b
 13148  010496  0100               	movlb	0	; () banked
 13149  010498  6FD5               	movwf	(??_Port_Set+8)& (0+255),b
 13150  01049A  6BD6               	clrf	(??_Port_Set+9)& (0+255),b
 13151  01049C  0E06               	movlw	6
 13152  01049E                     u7495:
 13153  01049E  90D8               	bcf	status,0,c
 13154  0104A0  0100               	movlb	0	; () banked
 13155  0104A2  37D5               	rlcf	(??_Port_Set+8)& (0+255),f,b
 13156  0104A4  37D6               	rlcf	(??_Port_Set+9)& (0+255),f,b
 13157  0104A6  2EE8               	decfsz	wreg,f,c
 13158  0104A8  D7FA               	goto	u7495
 13159  0104AA  0100               	movlb	0	; () banked
 13160  0104AC  51E1               	movf	Port_Set@Type& (0+255),w,b
 13161  0104AE  0100               	movlb	0	; () banked
 13162  0104B0  6FD7               	movwf	(??_Port_Set+10)& (0+255),b
 13163  0104B2  6BD8               	clrf	(??_Port_Set+11)& (0+255),b
 13164  0104B4  0100               	movlb	0	; () banked
 13165  0104B6  3BD7               	swapf	(??_Port_Set+10)& (0+255),f,b
 13166  0104B8  3BD8               	swapf	(??_Port_Set+11)& (0+255),f,b
 13167  0104BA  0EF0               	movlw	240
 13168  0104BC  17D8               	andwf	(??_Port_Set+11)& (0+255),f,b
 13169  0104BE  51D7               	movf	(??_Port_Set+10)& (0+255),w,b
 13170  0104C0  0B0F               	andlw	15
 13171  0104C2  13D8               	iorwf	(??_Port_Set+11)& (0+255),f,b
 13172  0104C4  0EF0               	movlw	240
 13173  0104C6  17D7               	andwf	(??_Port_Set+10)& (0+255),f,b
 13174  0104C8  0100               	movlb	0	; () banked
 13175  0104CA  51E1               	movf	Port_Set@Type& (0+255),w,b
 13176  0104CC  0100               	movlb	0	; () banked
 13177  0104CE  6FD9               	movwf	(??_Port_Set+12)& (0+255),b
 13178  0104D0  6BDA               	clrf	(??_Port_Set+13)& (0+255),b
 13179  0104D2  0100               	movlb	0	; () banked
 13180  0104D4  90D8               	bcf	status,0,c
 13181  0104D6  37D9               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13182  0104D8  37DA               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13183  0104DA  0100               	movlb	0	; () banked
 13184  0104DC  90D8               	bcf	status,0,c
 13185  0104DE  37D9               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13186  0104E0  37DA               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13187  0104E2  0100               	movlb	0	; () banked
 13188  0104E4  51E1               	movf	Port_Set@Type& (0+255),w,b
 13189  0104E6  0100               	movlb	0	; () banked
 13190  0104E8  6FDB               	movwf	(??_Port_Set+14)& (0+255),b
 13191  0104EA  6BDC               	clrf	(??_Port_Set+15)& (0+255),b
 13192  0104EC  0100               	movlb	0	; () banked
 13193  0104EE  51D9               	movf	(??_Port_Set+12)& (0+255),w,b
 13194  0104F0  0100               	movlb	0	; () banked
 13195  0104F2  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13196  0104F4  0100               	movlb	0	; () banked
 13197  0104F6  51DA               	movf	(??_Port_Set+13)& (0+255),w,b
 13198  0104F8  0100               	movlb	0	; () banked
 13199  0104FA  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13200  0104FC  0100               	movlb	0	; () banked
 13201  0104FE  51D7               	movf	(??_Port_Set+10)& (0+255),w,b
 13202  010500  0100               	movlb	0	; () banked
 13203  010502  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13204  010504  0100               	movlb	0	; () banked
 13205  010506  51D8               	movf	(??_Port_Set+11)& (0+255),w,b
 13206  010508  0100               	movlb	0	; () banked
 13207  01050A  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13208  01050C  0100               	movlb	0	; () banked
 13209  01050E  51D5               	movf	(??_Port_Set+8)& (0+255),w,b
 13210  010510  0100               	movlb	0	; () banked
 13211  010512  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13212  010514  0100               	movlb	0	; () banked
 13213  010516  51D6               	movf	(??_Port_Set+9)& (0+255),w,b
 13214  010518  0100               	movlb	0	; () banked
 13215  01051A  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13216  01051C  0100               	movlb	0	; () banked
 13217  01051E  51D3               	movf	(??_Port_Set+6)& (0+255),w,b
 13218  010520  0100               	movlb	0	; () banked
 13219  010522  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13220  010524  0100               	movlb	0	; () banked
 13221  010526  51D4               	movf	(??_Port_Set+7)& (0+255),w,b
 13222  010528  0100               	movlb	0	; () banked
 13223  01052A  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13224  01052C  0100               	movlb	0	; () banked
 13225  01052E  51D1               	movf	(??_Port_Set+4)& (0+255),w,b
 13226  010530  0100               	movlb	0	; () banked
 13227  010532  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13228  010534  0100               	movlb	0	; () banked
 13229  010536  51D2               	movf	(??_Port_Set+5)& (0+255),w,b
 13230  010538  0100               	movlb	0	; () banked
 13231  01053A  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13232  01053C  0100               	movlb	0	; () banked
 13233  01053E  51CF               	movf	(??_Port_Set+2)& (0+255),w,b
 13234  010540  0100               	movlb	0	; () banked
 13235  010542  13DB               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13236  010544  0100               	movlb	0	; () banked
 13237  010546  51D0               	movf	(??_Port_Set+3)& (0+255),w,b
 13238  010548  0100               	movlb	0	; () banked
 13239  01054A  13DC               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13240  01054C  0100               	movlb	0	; () banked
 13241  01054E  51CD               	movf	??_Port_Set& (0+255),w,b
 13242  010550  0100               	movlb	0	; () banked
 13243  010552  11DB               	iorwf	(??_Port_Set+14)& (0+255),w,b
 13244  010554  0100               	movlb	0	; () banked
 13245  010556  6FDD               	movwf	Port_Set@TypeRequired& (0+255),b
 13246  010558  0100               	movlb	0	; () banked
 13247  01055A  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13248  01055C  0100               	movlb	0	; () banked
 13249  01055E  11DC               	iorwf	(??_Port_Set+15)& (0+255),w,b
 13250  010560  0100               	movlb	0	; () banked
 13251  010562  6FDE               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;Port.c: 574: UINT16 TypeActual = Type;
 13255  010564  C0E1  F0DF         	movff	Port_Set@Type,Port_Set@TypeActual
 13256  010568  0100               	movlb	0	; () banked
 13257  01056A  6BE0               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13261  01056C  0E08               	movlw	8
 13262  01056E  0100               	movlb	0	; () banked
 13263  010570  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13264  010572  0100               	movlb	0	; () banked
 13265  010574  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13266  010576  0E00               	movlw	0
 13267  010578  0100               	movlb	0	; () banked
 13268  01057A  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13269  01057C  0100               	movlb	0	; () banked
 13270  01057E  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13271  010580  0E01               	movlw	1
 13272  010582  0100               	movlb	0	; () banked
 13273  010584  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13274  010586  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13275  01058A  0100               	movlb	0	; () banked
 13276  01058C  6FCD               	movwf	??_Port_Set& (0+255),b
 13277  01058E  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13278  010590  0100               	movlb	0	; () banked
 13279  010592  90D8               	bcf	status,0,c
 13280  010594  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13281  010596  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13282  010598  0100               	movlb	0	; () banked
 13283  01059A  90D8               	bcf	status,0,c
 13284  01059C  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13285  01059E  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13286  0105A0  0100               	movlb	0	; () banked
 13287  0105A2  51CD               	movf	??_Port_Set& (0+255),w,b
 13288  0105A4  0100               	movlb	0	; () banked
 13289  0105A6  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13290  0105A8  0100               	movlb	0	; () banked
 13291  0105AA  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13292  0105AC  0100               	movlb	0	; () banked
 13293  0105AE  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13297  0105B0  0E08               	movlw	8
 13298  0105B2  0100               	movlb	0	; () banked
 13299  0105B4  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13300  0105B6  0100               	movlb	0	; () banked
 13301  0105B8  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13302  0105BA  0E00               	movlw	0
 13303  0105BC  0100               	movlb	0	; () banked
 13304  0105BE  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13305  0105C0  0100               	movlb	0	; () banked
 13306  0105C2  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13307  0105C4  0E02               	movlw	2
 13308  0105C6  0100               	movlb	0	; () banked
 13309  0105C8  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13310  0105CA  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13311  0105CE  0100               	movlb	0	; () banked
 13312  0105D0  6FCD               	movwf	??_Port_Set& (0+255),b
 13313  0105D2  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13314  0105D4  0100               	movlb	0	; () banked
 13315  0105D6  3BCD               	swapf	??_Port_Set& (0+255),f,b
 13316  0105D8  3BCE               	swapf	(??_Port_Set+1)& (0+255),f,b
 13317  0105DA  0EF0               	movlw	240
 13318  0105DC  17CE               	andwf	(??_Port_Set+1)& (0+255),f,b
 13319  0105DE  51CD               	movf	??_Port_Set& (0+255),w,b
 13320  0105E0  0B0F               	andlw	15
 13321  0105E2  13CE               	iorwf	(??_Port_Set+1)& (0+255),f,b
 13322  0105E4  0EF0               	movlw	240
 13323  0105E6  17CD               	andwf	??_Port_Set& (0+255),f,b
 13324  0105E8  0100               	movlb	0	; () banked
 13325  0105EA  51CD               	movf	??_Port_Set& (0+255),w,b
 13326  0105EC  0100               	movlb	0	; () banked
 13327  0105EE  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13328  0105F0  0100               	movlb	0	; () banked
 13329  0105F2  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13330  0105F4  0100               	movlb	0	; () banked
 13331  0105F6  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13335  0105F8  0E08               	movlw	8
 13336  0105FA  0100               	movlb	0	; () banked
 13337  0105FC  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13338  0105FE  0100               	movlb	0	; () banked
 13339  010600  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13340  010602  0E00               	movlw	0
 13341  010604  0100               	movlb	0	; () banked
 13342  010606  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13343  010608  0100               	movlb	0	; () banked
 13344  01060A  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13345  01060C  0E03               	movlw	3
 13346  01060E  0100               	movlb	0	; () banked
 13347  010610  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13348  010612  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13349  010616  0100               	movlb	0	; () banked
 13350  010618  6FCD               	movwf	??_Port_Set& (0+255),b
 13351  01061A  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13352  01061C  0E06               	movlw	6
 13353  01061E                     u7505:
 13354  01061E  90D8               	bcf	status,0,c
 13355  010620  0100               	movlb	0	; () banked
 13356  010622  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13357  010624  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13358  010626  2EE8               	decfsz	wreg,f,c
 13359  010628  D7FA               	goto	u7505
 13360  01062A  0100               	movlb	0	; () banked
 13361  01062C  51CD               	movf	??_Port_Set& (0+255),w,b
 13362  01062E  0100               	movlb	0	; () banked
 13363  010630  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13364  010632  0100               	movlb	0	; () banked
 13365  010634  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13366  010636  0100               	movlb	0	; () banked
 13367  010638  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13371  01063A  0E08               	movlw	8
 13372  01063C  0100               	movlb	0	; () banked
 13373  01063E  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13374  010640  0100               	movlb	0	; () banked
 13375  010642  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13376  010644  0E00               	movlw	0
 13377  010646  0100               	movlb	0	; () banked
 13378  010648  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13379  01064A  0100               	movlb	0	; () banked
 13380  01064C  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13381  01064E  0E04               	movlw	4
 13382  010650  0100               	movlb	0	; () banked
 13383  010652  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13384  010654  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13385  010658  0100               	movlb	0	; () banked
 13386  01065A  6FCD               	movwf	??_Port_Set& (0+255),b
 13387  01065C  0100               	movlb	0	; () banked
 13388  01065E  51CD               	movf	??_Port_Set& (0+255),w,b
 13389  010660  0100               	movlb	0	; () banked
 13390  010662  6FCF               	movwf	(??_Port_Set+2)& (0+255),b
 13391  010664  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13392  010666  0100               	movlb	0	; () banked
 13393  010668  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13394  01066A  0100               	movlb	0	; () banked
 13395  01066C  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13396  01066E  0100               	movlb	0	; () banked
 13397  010670  51CF               	movf	(??_Port_Set+2)& (0+255),w,b
 13398  010672  0100               	movlb	0	; () banked
 13399  010674  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13400                           
 13401                           ; BSR set to: 0
 13402                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13403  010676  0E08               	movlw	8
 13404  010678  0100               	movlb	0	; () banked
 13405  01067A  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13406  01067C  0100               	movlb	0	; () banked
 13407  01067E  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13408  010680  0E00               	movlw	0
 13409  010682  0100               	movlb	0	; () banked
 13410  010684  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13411  010686  0100               	movlb	0	; () banked
 13412  010688  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13413  01068A  0E05               	movlw	5
 13414  01068C  0100               	movlb	0	; () banked
 13415  01068E  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13416  010690  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13417  010694  0100               	movlb	0	; () banked
 13418  010696  6FCD               	movwf	??_Port_Set& (0+255),b
 13419  010698  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13420  01069A  0E0A               	movlw	10
 13421  01069C                     u7515:
 13422  01069C  90D8               	bcf	status,0,c
 13423  01069E  0100               	movlb	0	; () banked
 13424  0106A0  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13425  0106A2  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13426  0106A4  2EE8               	decfsz	wreg,f,c
 13427  0106A6  D7FA               	goto	u7515
 13428  0106A8  0100               	movlb	0	; () banked
 13429  0106AA  51CD               	movf	??_Port_Set& (0+255),w,b
 13430  0106AC  0100               	movlb	0	; () banked
 13431  0106AE  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13432  0106B0  0100               	movlb	0	; () banked
 13433  0106B2  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13434  0106B4  0100               	movlb	0	; () banked
 13435  0106B6  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13439  0106B8  0E08               	movlw	8
 13440  0106BA  0100               	movlb	0	; () banked
 13441  0106BC  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13442  0106BE  0100               	movlb	0	; () banked
 13443  0106C0  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13444  0106C2  0E00               	movlw	0
 13445  0106C4  0100               	movlb	0	; () banked
 13446  0106C6  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13447  0106C8  0100               	movlb	0	; () banked
 13448  0106CA  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13449  0106CC  0E06               	movlw	6
 13450  0106CE  0100               	movlb	0	; () banked
 13451  0106D0  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13452  0106D2  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13453  0106D6  0100               	movlb	0	; () banked
 13454  0106D8  6FCD               	movwf	??_Port_Set& (0+255),b
 13455  0106DA  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13456  0106DC  0E0C               	movlw	12
 13457  0106DE                     u7525:
 13458  0106DE  90D8               	bcf	status,0,c
 13459  0106E0  0100               	movlb	0	; () banked
 13460  0106E2  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13461  0106E4  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13462  0106E6  2EE8               	decfsz	wreg,f,c
 13463  0106E8  D7FA               	goto	u7525
 13464  0106EA  0100               	movlb	0	; () banked
 13465  0106EC  51CD               	movf	??_Port_Set& (0+255),w,b
 13466  0106EE  0100               	movlb	0	; () banked
 13467  0106F0  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13468  0106F2  0100               	movlb	0	; () banked
 13469  0106F4  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13470  0106F6  0100               	movlb	0	; () banked
 13471  0106F8  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13475  0106FA  0E08               	movlw	8
 13476  0106FC  0100               	movlb	0	; () banked
 13477  0106FE  25CA               	addwf	Port_Set@pInput& (0+255),w,b
 13478  010700  0100               	movlb	0	; () banked
 13479  010702  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 13480  010704  0E00               	movlw	0
 13481  010706  0100               	movlb	0	; () banked
 13482  010708  21CB               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13483  01070A  0100               	movlb	0	; () banked
 13484  01070C  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13485  01070E  0E07               	movlw	7
 13486  010710  0100               	movlb	0	; () banked
 13487  010712  6FC9               	movwf	Word_GetPair@pPair& (0+255),b
 13488  010714  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 13489  010718  0100               	movlb	0	; () banked
 13490  01071A  6FCD               	movwf	??_Port_Set& (0+255),b
 13491  01071C  6BCE               	clrf	(??_Port_Set+1)& (0+255),b
 13492  01071E  0E0E               	movlw	14
 13493  010720                     u7535:
 13494  010720  90D8               	bcf	status,0,c
 13495  010722  0100               	movlb	0	; () banked
 13496  010724  37CD               	rlcf	??_Port_Set& (0+255),f,b
 13497  010726  37CE               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13498  010728  2EE8               	decfsz	wreg,f,c
 13499  01072A  D7FA               	goto	u7535
 13500  01072C  0100               	movlb	0	; () banked
 13501  01072E  51CD               	movf	??_Port_Set& (0+255),w,b
 13502  010730  0100               	movlb	0	; () banked
 13503  010732  13DF               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13504  010734  0100               	movlb	0	; () banked
 13505  010736  51CE               	movf	(??_Port_Set+1)& (0+255),w,b
 13506  010738  0100               	movlb	0	; () banked
 13507  01073A  13E0               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13508                           
 13509                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13510  01073C  0100               	movlb	0	; () banked
 13511  01073E  51DF               	movf	Port_Set@TypeActual& (0+255),w,b
 13512  010740  0100               	movlb	0	; () banked
 13513  010742  19DD               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13514  010744  E148               	bnz	l528
 13515  010746  0100               	movlb	0	; () banked
 13516  010748  51E0               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13517  01074A  0100               	movlb	0	; () banked
 13518  01074C  19DE               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13519  01074E  A4D8               	btfss	status,2,c
 13520  010750  0012               	return	
 13521  010752  D032               	goto	l526
 13522  010754                     
 13523                           ; BSR set to: 0
 13524                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 13525                           
 13526                           ; BSR set to: 0
 13527  010754  0100               	movlb	0	; () banked
 13528  010756  EE20 F002          	lfsr	2,2
 13529  01075A  51CA               	movf	Port_Set@pInput& (0+255),w,b
 13530  01075C  26D9               	addwf	fsr2l,f,c
 13531  01075E  51CB               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13532  010760  22DA               	addwfc	fsr2h,f,c
 13533  010762  CFDE F0BB          	movff	postinc2,Byte_SetByte@pInput
 13534  010766  CFDD F0BC          	movff	postdec2,Byte_SetByte@pInput+1
 13535  01076A  C0CC  F0BD         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13536  01076E  ECE2  F0A4         	call	_Byte_SetByte	;wreg free
 13537                           
 13538                           ;Port.c: 594: break;
 13539  010772  0012               	return	
 13540  010774                     
 13541                           ;Port.c: 597: pValue = ~pValue;
 13542  010774  0100               	movlb	0	; () banked
 13543  010776  1FCC               	comf	Port_Set@pValue& (0+255),f,b
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 13547  010778  0100               	movlb	0	; () banked
 13548  01077A  EE20 F002          	lfsr	2,2
 13549  01077E  51CA               	movf	Port_Set@pInput& (0+255),w,b
 13550  010780  26D9               	addwf	fsr2l,f,c
 13551  010782  51CB               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13552  010784  22DA               	addwfc	fsr2h,f,c
 13553  010786  CFDE F0BB          	movff	postinc2,Byte_SetByte@pInput
 13554  01078A  CFDD F0BC          	movff	postdec2,Byte_SetByte@pInput+1
 13555  01078E  C0CC  F0BD         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13556  010792  ECE2  F0A4         	call	_Byte_SetByte	;wreg free
 13557                           
 13558                           ;Port.c: 599: break;
 13559  010796  0012               	return	
 13560  010798                     
 13561                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 13562  010798  0100               	movlb	0	; () banked
 13563  01079A  EE20 F004          	lfsr	2,4
 13564  01079E  51CA               	movf	Port_Set@pInput& (0+255),w,b
 13565  0107A0  26D9               	addwf	fsr2l,f,c
 13566  0107A2  51CB               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13567  0107A4  22DA               	addwfc	fsr2h,f,c
 13568  0107A6  CFDE F0BB          	movff	postinc2,Byte_SetByte@pInput
 13569  0107AA  CFDD F0BC          	movff	postdec2,Byte_SetByte@pInput+1
 13570  0107AE  C0CC  F0BD         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13571  0107B2  ECE2  F0A4         	call	_Byte_SetByte	;wreg free
 13572                           
 13573                           ;Port.c: 606: }
 13574                           
 13575                           ;Port.c: 605: break;
 13576                           
 13577                           ;Port.c: 604: default:
 13578                           
 13579                           ;Port.c: 603: break;
 13580  0107B6  0012               	return	
 13581  0107B8                     l526:
 13582  0107B8  0100               	movlb	0	; () banked
 13583  0107BA  51E1               	movf	Port_Set@Type& (0+255),w,b
 13584                           
 13585                           ; Switch size 1, requested type "space"
 13586                           ; Number of cases is 4, Range of values is 0 to 3
 13587                           ; switch strategies available:
 13588                           ; Name         Instructions Cycles
 13589                           ; simple_byte           13     7 (average)
 13590                           ;	Chosen strategy is simple_byte
 13591  0107BC  0A00               	xorlw	0	; case 0
 13592  0107BE  B4D8               	btfsc	status,2,c
 13593  0107C0  0012               	return	
 13594  0107C2  0A01               	xorlw	1	; case 1
 13595  0107C4  B4D8               	btfsc	status,2,c
 13596  0107C6  D7C6               	goto	l529
 13597  0107C8  0A03               	xorlw	3	; case 2
 13598  0107CA  B4D8               	btfsc	status,2,c
 13599  0107CC  D7D3               	goto	l531
 13600  0107CE  0A01               	xorlw	1	; case 3
 13601  0107D0  A4D8               	btfss	status,2,c
 13602                           
 13603                           ; BSR set to: 0
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;Port.c: 607: }
 13607  0107D2  0012               	return	
 13608  0107D4  D7E1               	goto	l532
 13609  0107D6                     l528:
 13610  0107D6  0012               	return		;funcret
 13611  0107D8                     __end_of_Port_Set:
 13612                           	opt stack 0
 13613                           tosu	equ	0xFFF
 13614                           tosh	equ	0xFFE
 13615                           tosl	equ	0xFFD
 13616                           pclath	equ	0xFFA
 13617                           tblptru	equ	0xFF8
 13618                           tblptrh	equ	0xFF7
 13619                           tblptrl	equ	0xFF6
 13620                           tablat	equ	0xFF5
 13621                           prodh	equ	0xFF4
 13622                           prodl	equ	0xFF3
 13623                           postinc0	equ	0xFEE
 13624                           wreg	equ	0xFE8
 13625                           indf1	equ	0xFE7
 13626                           postdec1	equ	0xFE5
 13627                           fsr1h	equ	0xFE2
 13628                           fsr1l	equ	0xFE1
 13629                           indf2	equ	0xFDF
 13630                           postinc2	equ	0xFDE
 13631                           postdec2	equ	0xFDD
 13632                           plusw2	equ	0xFDB
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _Byte_SetByte *****************
 13638 ;; Defined at:
 13639 ;;		line 110 in file "Library/Types.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13642 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 13643 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13644 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13645 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13646 ;;		 -> NULL(0), 
 13647 ;;  pValue          1    2[BANK0 ] unsigned char 
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  1    wreg      void 
 13652 ;; Registers used:
 13653 ;;		fsr2l, fsr2h
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13659 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;Total ram usage:        3 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    7
 13666 ;; This function calls:
 13667 ;;		Nothing
 13668 ;; This function is called by:
 13669 ;;		_Port_Set
 13670 ;;		_I2C_Init
 13671 ;; This function uses a non-reentrant model
 13672 ;;
 13673                           
 13674                           	psect	text72
 13675  0149C4                     __ptext72:
 13676                           	opt stack 0
 13677  0149C4                     _Byte_SetByte:
 13678                           	opt stack 19
 13679                           
 13680                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 13681                           
 13682                           ;incstack = 0
 13683  0149C4  C0BB  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 13684  0149C8  C0BC  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 13685  0149CC  C0BD  FFDF         	movff	Byte_SetByte@pValue,indf2
 13686  0149D0  0012               	return		;funcret
 13687  0149D2                     __end_of_Byte_SetByte:
 13688                           	opt stack 0
 13689                           tosu	equ	0xFFF
 13690                           tosh	equ	0xFFE
 13691                           tosl	equ	0xFFD
 13692                           pclath	equ	0xFFA
 13693                           tblptru	equ	0xFF8
 13694                           tblptrh	equ	0xFF7
 13695                           tblptrl	equ	0xFF6
 13696                           tablat	equ	0xFF5
 13697                           prodh	equ	0xFF4
 13698                           prodl	equ	0xFF3
 13699                           postinc0	equ	0xFEE
 13700                           wreg	equ	0xFE8
 13701                           indf1	equ	0xFE7
 13702                           postdec1	equ	0xFE5
 13703                           fsr1h	equ	0xFE2
 13704                           fsr1l	equ	0xFE1
 13705                           indf2	equ	0xFDF
 13706                           postinc2	equ	0xFDE
 13707                           postdec2	equ	0xFDD
 13708                           plusw2	equ	0xFDB
 13709                           fsr2h	equ	0xFDA
 13710                           fsr2l	equ	0xFD9
 13711                           status	equ	0xFD8
 13712                           
 13713 ;; *************** function _GetPortTRIS *****************
 13714 ;; Defined at:
 13715 ;;		line 67 in file "Library/Port.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;  pInput          1    wreg     enum E6786
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;  pInput          1    2[BANK0 ] enum E6786
 13720 ;; Return value:  Size  Location     Type
 13721 ;;                  2    0[BANK0 ] PTR struct Byte
 13722 ;; Registers used:
 13723 ;;		wreg, status,2, status,0
 13724 ;; Tracked objects:
 13725 ;;		On entry : 0/0
 13726 ;;		On exit  : 0/0
 13727 ;;		Unchanged: 0/0
 13728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13729 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13732 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13733 ;;Total ram usage:        3 bytes
 13734 ;; Hardware stack levels used:    1
 13735 ;; Hardware stack levels required when called:    7
 13736 ;; This function calls:
 13737 ;;		Nothing
 13738 ;; This function is called by:
 13739 ;;		_Port_Init
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           	psect	text73
 13744  012EE6                     __ptext73:
 13745                           	opt stack 0
 13746  012EE6                     _GetPortTRIS:
 13747                           	opt stack 20
 13748                           
 13749                           ;incstack = 0
 13750                           ;GetPortTRIS@pInput stored from wreg
 13751  012EE6  0100               	movlb	0	; () banked
 13752  012EE8  6FBD               	movwf	GetPortTRIS@pInput& (0+255),b
 13753                           
 13754                           ;Port.c: 69: switch (pInput)
 13755  012EEA  D038               	goto	l363
 13756  012EEC                     
 13757                           ;Port.c: 72: return (BytePtr)&TRISA;
 13758  012EEC  0E92               	movlw	146
 13759  012EEE  0100               	movlb	0	; () banked
 13760  012EF0  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13761  012EF2  0E0F               	movlw	15
 13762  012EF4  0100               	movlb	0	; () banked
 13763  012EF6  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13764                           
 13765                           ; BSR set to: 0
 13766  012EF8  0012               	return	
 13767  012EFA                     
 13768                           ; BSR set to: 0
 13769                           ;Port.c: 74: return (BytePtr)&TRISB;
 13770                           
 13771                           ; BSR set to: 0
 13772  012EFA  0E93               	movlw	147
 13773  012EFC  0100               	movlb	0	; () banked
 13774  012EFE  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13775  012F00  0E0F               	movlw	15
 13776  012F02  0100               	movlb	0	; () banked
 13777  012F04  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13778                           
 13779                           ; BSR set to: 0
 13780  012F06  0012               	return	
 13781  012F08                     
 13782                           ; BSR set to: 0
 13783                           ;Port.c: 76: return (BytePtr)&TRISC;
 13784                           
 13785                           ; BSR set to: 0
 13786  012F08  0E94               	movlw	148
 13787  012F0A  0100               	movlb	0	; () banked
 13788  012F0C  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13789  012F0E  0E0F               	movlw	15
 13790  012F10  0100               	movlb	0	; () banked
 13791  012F12  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13792                           
 13793                           ; BSR set to: 0
 13794  012F14  0012               	return	
 13795  012F16                     
 13796                           ; BSR set to: 0
 13797                           ;Port.c: 78: return (BytePtr)&TRISD;
 13798                           
 13799                           ; BSR set to: 0
 13800  012F16  0E95               	movlw	149
 13801  012F18  0100               	movlb	0	; () banked
 13802  012F1A  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13803  012F1C  0E0F               	movlw	15
 13804  012F1E  0100               	movlb	0	; () banked
 13805  012F20  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13806                           
 13807                           ; BSR set to: 0
 13808  012F22  0012               	return	
 13809  012F24                     
 13810                           ; BSR set to: 0
 13811                           ;Port.c: 80: return (BytePtr)&TRISE;
 13812                           
 13813                           ; BSR set to: 0
 13814  012F24  0E96               	movlw	150
 13815  012F26  0100               	movlb	0	; () banked
 13816  012F28  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13817  012F2A  0E0F               	movlw	15
 13818  012F2C  0100               	movlb	0	; () banked
 13819  012F2E  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13820                           
 13821                           ; BSR set to: 0
 13822  012F30  0012               	return	
 13823  012F32                     
 13824                           ; BSR set to: 0
 13825                           ;Port.c: 82: return (BytePtr)&TRISF;
 13826                           
 13827                           ; BSR set to: 0
 13828  012F32  0E97               	movlw	151
 13829  012F34  0100               	movlb	0	; () banked
 13830  012F36  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13831  012F38  0E0F               	movlw	15
 13832  012F3A  0100               	movlb	0	; () banked
 13833  012F3C  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13834                           
 13835                           ; BSR set to: 0
 13836  012F3E  0012               	return	
 13837  012F40                     
 13838                           ; BSR set to: 0
 13839                           ;Port.c: 84: return (BytePtr)&TRISG;
 13840                           
 13841                           ; BSR set to: 0
 13842  012F40  0E98               	movlw	152
 13843  012F42  0100               	movlb	0	; () banked
 13844  012F44  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13845  012F46  0E0F               	movlw	15
 13846  012F48  0100               	movlb	0	; () banked
 13847  012F4A  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13848                           
 13849                           ; BSR set to: 0
 13850  012F4C  0012               	return	
 13851  012F4E                     
 13852                           ; BSR set to: 0
 13853                           ;Port.c: 86: return (void*)0;
 13854                           
 13855                           ; BSR set to: 0
 13856  012F4E  0E00               	movlw	0
 13857  012F50  0100               	movlb	0	; () banked
 13858  012F52  6FBB               	movwf	?_GetPortTRIS& (0+255),b
 13859  012F54  0E00               	movlw	0
 13860  012F56  0100               	movlb	0	; () banked
 13861  012F58  6FBC               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;Port.c: 87: }
 13865                           
 13866                           ; BSR set to: 0
 13867  012F5A  0012               	return	
 13868  012F5C                     l363:
 13869                           
 13870                           ; BSR set to: 0
 13871  012F5C  0100               	movlb	0	; () banked
 13872  012F5E  51BD               	movf	GetPortTRIS@pInput& (0+255),w,b
 13873                           
 13874                           ; Switch size 1, requested type "space"
 13875                           ; Number of cases is 7, Range of values is 0 to 6
 13876                           ; switch strategies available:
 13877                           ; Name         Instructions Cycles
 13878                           ; simple_byte           22    12 (average)
 13879                           ;	Chosen strategy is simple_byte
 13880  012F60  0A00               	xorlw	0	; case 0
 13881  012F62  B4D8               	btfsc	status,2,c
 13882  012F64  D7C3               	goto	l364
 13883  012F66  0A01               	xorlw	1	; case 1
 13884  012F68  B4D8               	btfsc	status,2,c
 13885  012F6A  D7C7               	goto	l366
 13886  012F6C  0A03               	xorlw	3	; case 2
 13887  012F6E  B4D8               	btfsc	status,2,c
 13888  012F70  D7CB               	goto	l367
 13889  012F72  0A01               	xorlw	1	; case 3
 13890  012F74  B4D8               	btfsc	status,2,c
 13891  012F76  D7CF               	goto	l368
 13892  012F78  0A07               	xorlw	7	; case 4
 13893  012F7A  B4D8               	btfsc	status,2,c
 13894  012F7C  D7D3               	goto	l369
 13895  012F7E  0A01               	xorlw	1	; case 5
 13896  012F80  B4D8               	btfsc	status,2,c
 13897  012F82  D7D7               	goto	l370
 13898  012F84  0A03               	xorlw	3	; case 6
 13899  012F86  B4D8               	btfsc	status,2,c
 13900  012F88  D7DB               	goto	l371
 13901  012F8A  D7E1               	goto	l372
 13902  012F8C                     __end_of_GetPortTRIS:
 13903                           	opt stack 0
 13904                           tosu	equ	0xFFF
 13905                           tosh	equ	0xFFE
 13906                           tosl	equ	0xFFD
 13907                           pclath	equ	0xFFA
 13908                           tblptru	equ	0xFF8
 13909                           tblptrh	equ	0xFF7
 13910                           tblptrl	equ	0xFF6
 13911                           tablat	equ	0xFF5
 13912                           prodh	equ	0xFF4
 13913                           prodl	equ	0xFF3
 13914                           postinc0	equ	0xFEE
 13915                           wreg	equ	0xFE8
 13916                           indf1	equ	0xFE7
 13917                           postdec1	equ	0xFE5
 13918                           fsr1h	equ	0xFE2
 13919                           fsr1l	equ	0xFE1
 13920                           indf2	equ	0xFDF
 13921                           postinc2	equ	0xFDE
 13922                           postdec2	equ	0xFDD
 13923                           plusw2	equ	0xFDB
 13924                           fsr2h	equ	0xFDA
 13925                           fsr2l	equ	0xFD9
 13926                           status	equ	0xFD8
 13927                           
 13928 ;; *************** function _GetPortProperties *****************
 13929 ;; Defined at:
 13930 ;;		line 21 in file "Library/Port.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;  pInput          1    wreg     enum E6786
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  pInput          1    2[BANK0 ] enum E6786
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  2    0[BANK0 ] PTR struct PortProperty
 13937 ;; Registers used:
 13938 ;;		wreg, status,2, status,0
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13944 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;Total ram usage:        3 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    7
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_Port_Init
 13955 ;; This function uses a non-reentrant model
 13956 ;;
 13957                           
 13958                           	psect	text74
 13959  012F8C                     __ptext74:
 13960                           	opt stack 0
 13961  012F8C                     _GetPortProperties:
 13962                           	opt stack 20
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;incstack = 0
 13966                           ;GetPortProperties@pInput stored from wreg
 13967  012F8C  0100               	movlb	0	; () banked
 13968  012F8E  6FBD               	movwf	GetPortProperties@pInput& (0+255),b
 13969                           
 13970                           ;Port.c: 23: switch (pInput)
 13971  012F90  D038               	goto	l337
 13972  012F92                     
 13973                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 13974  012F92  0EBD               	movlw	low _PortA_Property
 13975  012F94  0100               	movlb	0	; () banked
 13976  012F96  6FBB               	movwf	?_GetPortProperties& (0+255),b
 13977  012F98  0EFF               	movlw	high _PortA_Property
 13978  012F9A  0100               	movlb	0	; () banked
 13979  012F9C  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 13980                           
 13981                           ; BSR set to: 0
 13982  012F9E  0012               	return	
 13983  012FA0                     
 13984                           ; BSR set to: 0
 13985                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 13986                           
 13987                           ; BSR set to: 0
 13988  012FA0  0EBB               	movlw	low _PortB_Property
 13989  012FA2  0100               	movlb	0	; () banked
 13990  012FA4  6FBB               	movwf	?_GetPortProperties& (0+255),b
 13991  012FA6  0EFF               	movlw	high _PortB_Property
 13992  012FA8  0100               	movlb	0	; () banked
 13993  012FAA  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 13994                           
 13995                           ; BSR set to: 0
 13996  012FAC  0012               	return	
 13997  012FAE                     
 13998                           ; BSR set to: 0
 13999                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 14000                           
 14001                           ; BSR set to: 0
 14002  012FAE  0EB9               	movlw	low _PortC_Property
 14003  012FB0  0100               	movlb	0	; () banked
 14004  012FB2  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14005  012FB4  0EFF               	movlw	high _PortC_Property
 14006  012FB6  0100               	movlb	0	; () banked
 14007  012FB8  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14008                           
 14009                           ; BSR set to: 0
 14010  012FBA  0012               	return	
 14011  012FBC                     
 14012                           ; BSR set to: 0
 14013                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 14014                           
 14015                           ; BSR set to: 0
 14016  012FBC  0EB7               	movlw	low _PortD_Property
 14017  012FBE  0100               	movlb	0	; () banked
 14018  012FC0  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14019  012FC2  0EFF               	movlw	high _PortD_Property
 14020  012FC4  0100               	movlb	0	; () banked
 14021  012FC6  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14022                           
 14023                           ; BSR set to: 0
 14024  012FC8  0012               	return	
 14025  012FCA                     
 14026                           ; BSR set to: 0
 14027                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 14028                           
 14029                           ; BSR set to: 0
 14030  012FCA  0EB5               	movlw	low _PortE_Property
 14031  012FCC  0100               	movlb	0	; () banked
 14032  012FCE  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14033  012FD0  0EFF               	movlw	high _PortE_Property
 14034  012FD2  0100               	movlb	0	; () banked
 14035  012FD4  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14036                           
 14037                           ; BSR set to: 0
 14038  012FD6  0012               	return	
 14039  012FD8                     
 14040                           ; BSR set to: 0
 14041                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 14042                           
 14043                           ; BSR set to: 0
 14044  012FD8  0EB3               	movlw	low _PortF_Property
 14045  012FDA  0100               	movlb	0	; () banked
 14046  012FDC  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14047  012FDE  0EFF               	movlw	high _PortF_Property
 14048  012FE0  0100               	movlb	0	; () banked
 14049  012FE2  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14050                           
 14051                           ; BSR set to: 0
 14052  012FE4  0012               	return	
 14053  012FE6                     
 14054                           ; BSR set to: 0
 14055                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 14056                           
 14057                           ; BSR set to: 0
 14058  012FE6  0EB1               	movlw	low _PortG_Property
 14059  012FE8  0100               	movlb	0	; () banked
 14060  012FEA  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14061  012FEC  0EFF               	movlw	high _PortG_Property
 14062  012FEE  0100               	movlb	0	; () banked
 14063  012FF0  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14064                           
 14065                           ; BSR set to: 0
 14066  012FF2  0012               	return	
 14067  012FF4                     
 14068                           ; BSR set to: 0
 14069                           ;Port.c: 40: return (void*)0;
 14070                           
 14071                           ; BSR set to: 0
 14072  012FF4  0E00               	movlw	0
 14073  012FF6  0100               	movlb	0	; () banked
 14074  012FF8  6FBB               	movwf	?_GetPortProperties& (0+255),b
 14075  012FFA  0E00               	movlw	0
 14076  012FFC  0100               	movlb	0	; () banked
 14077  012FFE  6FBC               	movwf	(?_GetPortProperties+1)& (0+255),b
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;Port.c: 41: }
 14081                           
 14082                           ; BSR set to: 0
 14083  013000  0012               	return	
 14084  013002                     l337:
 14085                           
 14086                           ; BSR set to: 0
 14087  013002  0100               	movlb	0	; () banked
 14088  013004  51BD               	movf	GetPortProperties@pInput& (0+255),w,b
 14089                           
 14090                           ; Switch size 1, requested type "space"
 14091                           ; Number of cases is 7, Range of values is 0 to 6
 14092                           ; switch strategies available:
 14093                           ; Name         Instructions Cycles
 14094                           ; simple_byte           22    12 (average)
 14095                           ;	Chosen strategy is simple_byte
 14096  013006  0A00               	xorlw	0	; case 0
 14097  013008  B4D8               	btfsc	status,2,c
 14098  01300A  D7C3               	goto	l338
 14099  01300C  0A01               	xorlw	1	; case 1
 14100  01300E  B4D8               	btfsc	status,2,c
 14101  013010  D7C7               	goto	l340
 14102  013012  0A03               	xorlw	3	; case 2
 14103  013014  B4D8               	btfsc	status,2,c
 14104  013016  D7CB               	goto	l341
 14105  013018  0A01               	xorlw	1	; case 3
 14106  01301A  B4D8               	btfsc	status,2,c
 14107  01301C  D7CF               	goto	l342
 14108  01301E  0A07               	xorlw	7	; case 4
 14109  013020  B4D8               	btfsc	status,2,c
 14110  013022  D7D3               	goto	l343
 14111  013024  0A01               	xorlw	1	; case 5
 14112  013026  B4D8               	btfsc	status,2,c
 14113  013028  D7D7               	goto	l344
 14114  01302A  0A03               	xorlw	3	; case 6
 14115  01302C  B4D8               	btfsc	status,2,c
 14116  01302E  D7DB               	goto	l345
 14117  013030  D7E1               	goto	l346
 14118  013032                     __end_of_GetPortProperties:
 14119                           	opt stack 0
 14120                           tosu	equ	0xFFF
 14121                           tosh	equ	0xFFE
 14122                           tosl	equ	0xFFD
 14123                           pclath	equ	0xFFA
 14124                           tblptru	equ	0xFF8
 14125                           tblptrh	equ	0xFF7
 14126                           tblptrl	equ	0xFF6
 14127                           tablat	equ	0xFF5
 14128                           prodh	equ	0xFF4
 14129                           prodl	equ	0xFF3
 14130                           postinc0	equ	0xFEE
 14131                           wreg	equ	0xFE8
 14132                           indf1	equ	0xFE7
 14133                           postdec1	equ	0xFE5
 14134                           fsr1h	equ	0xFE2
 14135                           fsr1l	equ	0xFE1
 14136                           indf2	equ	0xFDF
 14137                           postinc2	equ	0xFDE
 14138                           postdec2	equ	0xFDD
 14139                           plusw2	equ	0xFDB
 14140                           fsr2h	equ	0xFDA
 14141                           fsr2l	equ	0xFD9
 14142                           status	equ	0xFD8
 14143                           
 14144 ;; *************** function _GetPortPORT *****************
 14145 ;; Defined at:
 14146 ;;		line 44 in file "Library/Port.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  pInput          1    wreg     enum E6786
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  pInput          1    2[BANK0 ] enum E6786
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  2    0[BANK0 ] PTR struct Byte
 14153 ;; Registers used:
 14154 ;;		wreg, status,2, status,0
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/0
 14157 ;;		On exit  : 0/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14160 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14164 ;;Total ram usage:        3 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    7
 14167 ;; This function calls:
 14168 ;;		Nothing
 14169 ;; This function is called by:
 14170 ;;		_Port_Init
 14171 ;; This function uses a non-reentrant model
 14172 ;;
 14173                           
 14174                           	psect	text75
 14175  013032                     __ptext75:
 14176                           	opt stack 0
 14177  013032                     _GetPortPORT:
 14178                           	opt stack 20
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;incstack = 0
 14182                           ;GetPortPORT@pInput stored from wreg
 14183  013032  0100               	movlb	0	; () banked
 14184  013034  6FBD               	movwf	GetPortPORT@pInput& (0+255),b
 14185                           
 14186                           ;Port.c: 46: switch (pInput)
 14187  013036  D038               	goto	l350
 14188  013038                     
 14189                           ;Port.c: 49: return (BytePtr)&PORTA;
 14190  013038  0E80               	movlw	128
 14191  01303A  0100               	movlb	0	; () banked
 14192  01303C  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14193  01303E  0E0F               	movlw	15
 14194  013040  0100               	movlb	0	; () banked
 14195  013042  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14196                           
 14197                           ; BSR set to: 0
 14198  013044  0012               	return	
 14199  013046                     
 14200                           ; BSR set to: 0
 14201                           ;Port.c: 51: return (BytePtr)&PORTB;
 14202                           
 14203                           ; BSR set to: 0
 14204  013046  0E81               	movlw	129
 14205  013048  0100               	movlb	0	; () banked
 14206  01304A  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14207  01304C  0E0F               	movlw	15
 14208  01304E  0100               	movlb	0	; () banked
 14209  013050  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14210                           
 14211                           ; BSR set to: 0
 14212  013052  0012               	return	
 14213  013054                     
 14214                           ; BSR set to: 0
 14215                           ;Port.c: 53: return (BytePtr)&PORTC;
 14216                           
 14217                           ; BSR set to: 0
 14218  013054  0E82               	movlw	130
 14219  013056  0100               	movlb	0	; () banked
 14220  013058  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14221  01305A  0E0F               	movlw	15
 14222  01305C  0100               	movlb	0	; () banked
 14223  01305E  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14224                           
 14225                           ; BSR set to: 0
 14226  013060  0012               	return	
 14227  013062                     
 14228                           ; BSR set to: 0
 14229                           ;Port.c: 55: return (BytePtr)&PORTD;
 14230                           
 14231                           ; BSR set to: 0
 14232  013062  0E83               	movlw	131
 14233  013064  0100               	movlb	0	; () banked
 14234  013066  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14235  013068  0E0F               	movlw	15
 14236  01306A  0100               	movlb	0	; () banked
 14237  01306C  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14238                           
 14239                           ; BSR set to: 0
 14240  01306E  0012               	return	
 14241  013070                     
 14242                           ; BSR set to: 0
 14243                           ;Port.c: 57: return (BytePtr)&PORTE;
 14244                           
 14245                           ; BSR set to: 0
 14246  013070  0E84               	movlw	132
 14247  013072  0100               	movlb	0	; () banked
 14248  013074  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14249  013076  0E0F               	movlw	15
 14250  013078  0100               	movlb	0	; () banked
 14251  01307A  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14252                           
 14253                           ; BSR set to: 0
 14254  01307C  0012               	return	
 14255  01307E                     
 14256                           ; BSR set to: 0
 14257                           ;Port.c: 59: return (BytePtr)&PORTF;
 14258                           
 14259                           ; BSR set to: 0
 14260  01307E  0E85               	movlw	133
 14261  013080  0100               	movlb	0	; () banked
 14262  013082  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14263  013084  0E0F               	movlw	15
 14264  013086  0100               	movlb	0	; () banked
 14265  013088  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14266                           
 14267                           ; BSR set to: 0
 14268  01308A  0012               	return	
 14269  01308C                     
 14270                           ; BSR set to: 0
 14271                           ;Port.c: 61: return (BytePtr)&PORTG;
 14272                           
 14273                           ; BSR set to: 0
 14274  01308C  0E86               	movlw	134
 14275  01308E  0100               	movlb	0	; () banked
 14276  013090  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14277  013092  0E0F               	movlw	15
 14278  013094  0100               	movlb	0	; () banked
 14279  013096  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14280                           
 14281                           ; BSR set to: 0
 14282  013098  0012               	return	
 14283  01309A                     
 14284                           ; BSR set to: 0
 14285                           ;Port.c: 63: return (void*)0;
 14286                           
 14287                           ; BSR set to: 0
 14288  01309A  0E00               	movlw	0
 14289  01309C  0100               	movlb	0	; () banked
 14290  01309E  6FBB               	movwf	?_GetPortPORT& (0+255),b
 14291  0130A0  0E00               	movlw	0
 14292  0130A2  0100               	movlb	0	; () banked
 14293  0130A4  6FBC               	movwf	(?_GetPortPORT+1)& (0+255),b
 14294                           
 14295                           ; BSR set to: 0
 14296                           ;Port.c: 64: }
 14297                           
 14298                           ; BSR set to: 0
 14299  0130A6  0012               	return	
 14300  0130A8                     l350:
 14301                           
 14302                           ; BSR set to: 0
 14303  0130A8  0100               	movlb	0	; () banked
 14304  0130AA  51BD               	movf	GetPortPORT@pInput& (0+255),w,b
 14305                           
 14306                           ; Switch size 1, requested type "space"
 14307                           ; Number of cases is 7, Range of values is 0 to 6
 14308                           ; switch strategies available:
 14309                           ; Name         Instructions Cycles
 14310                           ; simple_byte           22    12 (average)
 14311                           ;	Chosen strategy is simple_byte
 14312  0130AC  0A00               	xorlw	0	; case 0
 14313  0130AE  B4D8               	btfsc	status,2,c
 14314  0130B0  D7C3               	goto	l351
 14315  0130B2  0A01               	xorlw	1	; case 1
 14316  0130B4  B4D8               	btfsc	status,2,c
 14317  0130B6  D7C7               	goto	l353
 14318  0130B8  0A03               	xorlw	3	; case 2
 14319  0130BA  B4D8               	btfsc	status,2,c
 14320  0130BC  D7CB               	goto	l354
 14321  0130BE  0A01               	xorlw	1	; case 3
 14322  0130C0  B4D8               	btfsc	status,2,c
 14323  0130C2  D7CF               	goto	l355
 14324  0130C4  0A07               	xorlw	7	; case 4
 14325  0130C6  B4D8               	btfsc	status,2,c
 14326  0130C8  D7D3               	goto	l356
 14327  0130CA  0A01               	xorlw	1	; case 5
 14328  0130CC  B4D8               	btfsc	status,2,c
 14329  0130CE  D7D7               	goto	l357
 14330  0130D0  0A03               	xorlw	3	; case 6
 14331  0130D2  B4D8               	btfsc	status,2,c
 14332  0130D4  D7DB               	goto	l358
 14333  0130D6  D7E1               	goto	l359
 14334  0130D8                     __end_of_GetPortPORT:
 14335                           	opt stack 0
 14336                           tosu	equ	0xFFF
 14337                           tosh	equ	0xFFE
 14338                           tosl	equ	0xFFD
 14339                           pclath	equ	0xFFA
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodh	equ	0xFF4
 14345                           prodl	equ	0xFF3
 14346                           postinc0	equ	0xFEE
 14347                           wreg	equ	0xFE8
 14348                           indf1	equ	0xFE7
 14349                           postdec1	equ	0xFE5
 14350                           fsr1h	equ	0xFE2
 14351                           fsr1l	equ	0xFE1
 14352                           indf2	equ	0xFDF
 14353                           postinc2	equ	0xFDE
 14354                           postdec2	equ	0xFDD
 14355                           plusw2	equ	0xFDB
 14356                           fsr2h	equ	0xFDA
 14357                           fsr2l	equ	0xFD9
 14358                           status	equ	0xFD8
 14359                           
 14360 ;; *************** function _LED_Init *****************
 14361 ;; Defined at:
 14362 ;;		line 15 in file "Library/LED.c"
 14363 ;; Parameters:    Size  Location     Type
 14364 ;;  pLED            1    wreg     enum E6739
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  pLED            1   45[BANK0 ] enum E6739
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  1    wreg      void 
 14369 ;; Registers used:
 14370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;Total ram usage:        1 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:   12
 14383 ;; This function calls:
 14384 ;;		_LED_Set
 14385 ;;		_Port_SetPinType
 14386 ;; This function is called by:
 14387 ;;		_MXK_Init
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text76
 14392  013DB6                     __ptext76:
 14393                           	opt stack 0
 14394  013DB6                     _LED_Init:
 14395                           	opt stack 16
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;incstack = 0
 14399                           ;LED_Init@pLED stored from wreg
 14400  013DB6  0100               	movlb	0	; () banked
 14401  013DB8  6FE8               	movwf	LED_Init@pLED& (0+255),b
 14402                           
 14403                           ;LED.c: 17: switch (pLED)
 14404  013DBA  D01E               	goto	l220
 14405  013DBC                     
 14406                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14407  013DBC  0EA9               	movlw	low _PortC
 14408  013DBE  0100               	movlb	0	; () banked
 14409  013DC0  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 14410  013DC2  0E00               	movlw	high _PortC
 14411  013DC4  0100               	movlb	0	; () banked
 14412  013DC6  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14413  013DC8  0E00               	movlw	0
 14414  013DCA  0100               	movlb	0	; () banked
 14415  013DCC  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 14416  013DCE  0E03               	movlw	3
 14417  013DD0  0100               	movlb	0	; () banked
 14418  013DD2  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 14419  013DD4  EC54  F08A         	call	_Port_SetPinType	;wreg free
 14420                           
 14421                           ;LED.c: 21: break;
 14422  013DD8  D017               	goto	l222
 14423  013DDA                     
 14424                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14425  013DDA  0EA9               	movlw	low _PortC
 14426  013DDC  0100               	movlb	0	; () banked
 14427  013DDE  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 14428  013DE0  0E00               	movlw	high _PortC
 14429  013DE2  0100               	movlb	0	; () banked
 14430  013DE4  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14431  013DE6  0E01               	movlw	1
 14432  013DE8  0100               	movlb	0	; () banked
 14433  013DEA  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 14434  013DEC  0E03               	movlw	3
 14435  013DEE  0100               	movlb	0	; () banked
 14436  013DF0  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 14437  013DF2  EC54  F08A         	call	_Port_SetPinType	;wreg free
 14438                           
 14439                           ;LED.c: 25: }
 14440                           
 14441                           ;LED.c: 24: break;
 14442  013DF6  D008               	goto	l222
 14443  013DF8                     l220:
 14444  013DF8  0100               	movlb	0	; () banked
 14445  013DFA  51E8               	movf	LED_Init@pLED& (0+255),w,b
 14446                           
 14447                           ; Switch size 1, requested type "space"
 14448                           ; Number of cases is 2, Range of values is 0 to 1
 14449                           ; switch strategies available:
 14450                           ; Name         Instructions Cycles
 14451                           ; simple_byte            7     4 (average)
 14452                           ;	Chosen strategy is simple_byte
 14453  013DFC  0A00               	xorlw	0	; case 0
 14454  013DFE  B4D8               	btfsc	status,2,c
 14455  013E00  D7DD               	goto	l221
 14456  013E02  0A01               	xorlw	1	; case 1
 14457  013E04  B4D8               	btfsc	status,2,c
 14458  013E06  D7E9               	goto	l223
 14459  013E08                     l222:
 14460                           
 14461                           ;LED.c: 26: LED_Set(pLED, 0);
 14462                           
 14463                           ; BSR set to: 0
 14464  013E08  0E00               	movlw	0
 14465  013E0A  0100               	movlb	0	; () banked
 14466  013E0C  6FCF               	movwf	LED_Set@pValue& (0+255),b
 14467  013E0E  0100               	movlb	0	; () banked
 14468  013E10  51E8               	movf	LED_Init@pLED& (0+255),w,b
 14469  013E12  ECE8  F09F         	call	_LED_Set
 14470  013E16  0012               	return		;funcret
 14471  013E18                     __end_of_LED_Init:
 14472                           	opt stack 0
 14473                           tosu	equ	0xFFF
 14474                           tosh	equ	0xFFE
 14475                           tosl	equ	0xFFD
 14476                           pclath	equ	0xFFA
 14477                           tblptru	equ	0xFF8
 14478                           tblptrh	equ	0xFF7
 14479                           tblptrl	equ	0xFF6
 14480                           tablat	equ	0xFF5
 14481                           prodh	equ	0xFF4
 14482                           prodl	equ	0xFF3
 14483                           postinc0	equ	0xFEE
 14484                           wreg	equ	0xFE8
 14485                           indf1	equ	0xFE7
 14486                           postdec1	equ	0xFE5
 14487                           fsr1h	equ	0xFE2
 14488                           fsr1l	equ	0xFE1
 14489                           indf2	equ	0xFDF
 14490                           postinc2	equ	0xFDE
 14491                           postdec2	equ	0xFDD
 14492                           plusw2	equ	0xFDB
 14493                           fsr2h	equ	0xFDA
 14494                           fsr2l	equ	0xFD9
 14495                           status	equ	0xFD8
 14496                           
 14497 ;; *************** function _LED_Set *****************
 14498 ;; Defined at:
 14499 ;;		line 33 in file "Library/LED.c"
 14500 ;; Parameters:    Size  Location     Type
 14501 ;;  pLED            1    wreg     enum E6739
 14502 ;;  pValue          1   20[BANK0 ] unsigned char 
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;  pLED            1   21[BANK0 ] enum E6739
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14514 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14518 ;;Total ram usage:        2 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:   11
 14521 ;; This function calls:
 14522 ;;		_Port_SetPin
 14523 ;; This function is called by:
 14524 ;;		_LED_Init
 14525 ;;		_SYSTEM_Initialize
 14526 ;; This function uses a non-reentrant model
 14527 ;;
 14528                           
 14529                           	psect	text77
 14530  013FD0                     __ptext77:
 14531                           	opt stack 0
 14532  013FD0                     _LED_Set:
 14533                           	opt stack 16
 14534                           
 14535                           ;incstack = 0
 14536                           ;LED_Set@pLED stored from wreg
 14537  013FD0  0100               	movlb	0	; () banked
 14538  013FD2  6FD0               	movwf	LED_Set@pLED& (0+255),b
 14539                           
 14540                           ;LED.c: 35: switch (pLED)
 14541  013FD4  D01C               	goto	l227
 14542  013FD6                     
 14543                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 14544  013FD6  0EA9               	movlw	low _PortC
 14545  013FD8  0100               	movlb	0	; () banked
 14546  013FDA  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14547  013FDC  0E00               	movlw	high _PortC
 14548  013FDE  0100               	movlb	0	; () banked
 14549  013FE0  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14550  013FE2  0E00               	movlw	0
 14551  013FE4  0100               	movlb	0	; () banked
 14552  013FE6  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14553  013FE8  C0CF  F0CD         	movff	LED_Set@pValue,Port_SetPin@pValue
 14554  013FEC  ECE2  F093         	call	_Port_SetPin	;wreg free
 14555                           
 14556                           ;LED.c: 39: break;
 14557  013FF0  0012               	return	
 14558  013FF2                     
 14559                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 14560  013FF2  0EA9               	movlw	low _PortC
 14561  013FF4  0100               	movlb	0	; () banked
 14562  013FF6  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14563  013FF8  0E00               	movlw	high _PortC
 14564  013FFA  0100               	movlb	0	; () banked
 14565  013FFC  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14566  013FFE  0E01               	movlw	1
 14567  014000  0100               	movlb	0	; () banked
 14568  014002  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14569  014004  C0CF  F0CD         	movff	LED_Set@pValue,Port_SetPin@pValue
 14570  014008  ECE2  F093         	call	_Port_SetPin	;wreg free
 14571                           
 14572                           ;LED.c: 43: }
 14573                           
 14574                           ;LED.c: 42: break;
 14575  01400C  0012               	return	
 14576  01400E                     l227:
 14577  01400E  0100               	movlb	0	; () banked
 14578  014010  51D0               	movf	LED_Set@pLED& (0+255),w,b
 14579                           
 14580                           ; Switch size 1, requested type "space"
 14581                           ; Number of cases is 2, Range of values is 0 to 1
 14582                           ; switch strategies available:
 14583                           ; Name         Instructions Cycles
 14584                           ; simple_byte            7     4 (average)
 14585                           ;	Chosen strategy is simple_byte
 14586  014012  0A00               	xorlw	0	; case 0
 14587  014014  B4D8               	btfsc	status,2,c
 14588  014016  D7DF               	goto	l228
 14589  014018  0A01               	xorlw	1	; case 1
 14590  01401A  A4D8               	btfss	status,2,c
 14591  01401C  0012               	return	
 14592  01401E  D7E9               	goto	l230
 14593  014020                     __end_of_LED_Set:
 14594                           	opt stack 0
 14595                           tosu	equ	0xFFF
 14596                           tosh	equ	0xFFE
 14597                           tosl	equ	0xFFD
 14598                           pclath	equ	0xFFA
 14599                           tblptru	equ	0xFF8
 14600                           tblptrh	equ	0xFF7
 14601                           tblptrl	equ	0xFF6
 14602                           tablat	equ	0xFF5
 14603                           prodh	equ	0xFF4
 14604                           prodl	equ	0xFF3
 14605                           postinc0	equ	0xFEE
 14606                           wreg	equ	0xFE8
 14607                           indf1	equ	0xFE7
 14608                           postdec1	equ	0xFE5
 14609                           fsr1h	equ	0xFE2
 14610                           fsr1l	equ	0xFE1
 14611                           indf2	equ	0xFDF
 14612                           postinc2	equ	0xFDE
 14613                           postdec2	equ	0xFDD
 14614                           plusw2	equ	0xFDB
 14615                           fsr2h	equ	0xFDA
 14616                           fsr2l	equ	0xFD9
 14617                           status	equ	0xFD8
 14618                           
 14619 ;; *************** function _MXK_Dequeue *****************
 14620 ;; Defined at:
 14621 ;;		line 153 in file "Library/MXK.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;		None
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;		None
 14626 ;; Return value:  Size  Location     Type
 14627 ;;                  1    wreg      void 
 14628 ;; Registers used:
 14629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;Total ram usage:        0 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; Hardware stack levels required when called:   12
 14642 ;; This function calls:
 14643 ;;		Absolute function
 14644 ;;		_Motor_Step
 14645 ;; This function is called by:
 14646 ;;		_init
 14647 ;;		_mode2
 14648 ;; This function uses a non-reentrant model
 14649 ;;
 14650                           
 14651                           	psect	text78
 14652  0143BA                     __ptext78:
 14653                           	opt stack 0
 14654  0143BA                     _MXK_Dequeue:
 14655                           	opt stack 17
 14656                           
 14657                           ;MXK.c: 155: if (lQueue)
 14658                           
 14659                           ;incstack = 0
 14660  0143BA  0100               	movlb	0	; () banked
 14661  0143BC  5167               	movf	_lQueue& (0+255),w,b	;volatile
 14662  0143BE  0100               	movlb	0	; () banked
 14663  0143C0  1168               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 14664  0143C2  0100               	movlb	0	; () banked
 14665  0143C4  1169               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 14666  0143C6  B4D8               	btfsc	status,2,c
 14667  0143C8  D00D               	goto	u9559
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;MXK.c: 156: lQueue();
 14671  0143CA  D801               	call	u9558
 14672  0143CC  D00B               	goto	u9559
 14673  0143CE                     u9558:
 14674  0143CE  0005               	push	
 14675  0143D0  6EFA               	movwf	pclath,c
 14676  0143D2  0100               	movlb	0	; () banked
 14677  0143D4  5167               	movf	_lQueue& (0+255),w,b	;volatile
 14678  0143D6  6EFD               	movwf	tosl,c
 14679  0143D8  5168               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 14680  0143DA  6EFE               	movwf	tosh,c
 14681  0143DC  5169               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 14682  0143DE  6EFF               	movwf	tosu,c
 14683  0143E0  50FA               	movf	pclath,w,c
 14684  0143E2  0012               	return		;indir
 14685  0143E4                     u9559:
 14686                           
 14687                           ;MXK.c: 157: lQueue = 0;
 14688  0143E4  0E00               	movlw	0
 14689  0143E6  0100               	movlb	0	; () banked
 14690  0143E8  6F67               	movwf	_lQueue& (0+255),b	;volatile
 14691  0143EA  0E00               	movlw	0
 14692  0143EC  0100               	movlb	0	; () banked
 14693  0143EE  6F68               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14694  0143F0  0E00               	movlw	0
 14695  0143F2  0100               	movlb	0	; () banked
 14696  0143F4  6F69               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14697                           
 14698                           ; BSR set to: 0
 14699  0143F6  0012               	return		;funcret
 14700  0143F8                     __end_of_MXK_Dequeue:
 14701                           	opt stack 0
 14702                           tosu	equ	0xFFF
 14703                           tosh	equ	0xFFE
 14704                           tosl	equ	0xFFD
 14705                           pclath	equ	0xFFA
 14706                           tblptru	equ	0xFF8
 14707                           tblptrh	equ	0xFF7
 14708                           tblptrl	equ	0xFF6
 14709                           tablat	equ	0xFF5
 14710                           prodh	equ	0xFF4
 14711                           prodl	equ	0xFF3
 14712                           postinc0	equ	0xFEE
 14713                           wreg	equ	0xFE8
 14714                           indf1	equ	0xFE7
 14715                           postdec1	equ	0xFE5
 14716                           fsr1h	equ	0xFE2
 14717                           fsr1l	equ	0xFE1
 14718                           indf2	equ	0xFDF
 14719                           postinc2	equ	0xFDE
 14720                           postdec2	equ	0xFDD
 14721                           plusw2	equ	0xFDB
 14722                           fsr2h	equ	0xFDA
 14723                           fsr2l	equ	0xFD9
 14724                           status	equ	0xFD8
 14725                           
 14726 ;; *************** function _Motor_Step *****************
 14727 ;; Defined at:
 14728 ;;		line 75 in file "Library/Motor.c"
 14729 ;; Parameters:    Size  Location     Type
 14730 ;;		None
 14731 ;; Auto vars:     Size  Location     Type
 14732 ;;		None
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      void 
 14735 ;; Registers used:
 14736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 0/0
 14739 ;;		On exit  : 0/0
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14746 ;;Total ram usage:        2 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:   11
 14749 ;; This function calls:
 14750 ;;		_MXK_Queue
 14751 ;;		_MXK_Release
 14752 ;;		_MXK_SwitchTo
 14753 ;;		_Port_SetPin
 14754 ;;		_Timer0_Restart
 14755 ;;		_Timer0_Stop
 14756 ;; This function is called by:
 14757 ;;		_Motor_Init
 14758 ;;		_MXK_Dequeue
 14759 ;;		_Timer0_ISR
 14760 ;; This function uses a non-reentrant model
 14761 ;;
 14762                           
 14763                           	psect	text79
 14764  012232                     __ptext79:
 14765                           	opt stack 0
 14766  012232                     _Motor_Step:
 14767                           	opt stack 0
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;Skip over the trampoline to the duplicate function for level 2
 14771  012232  B251               	btfsc	btemp,1,c
 14772  012234  EFAC  F091         	goto	i2_Motor_Step
 14773  012238                     _Motor_Step$intlevel0:
 14774                           	opt stack 17
 14775                           
 14776                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 14777                           
 14778                           ;incstack = 0
 14779  012238  0100               	movlb	0	; () banked
 14780  01223A  EE20 F004          	lfsr	2,4
 14781  01223E  5183               	movf	_lMotor& (0+255),w,b
 14782  012240  26D9               	addwf	fsr2l,f,c
 14783  012242  5184               	movf	(_lMotor+1)& (0+255),w,b
 14784  012244  22DA               	addwfc	fsr2h,f,c
 14785  012246  50DF               	movf	indf2,w,c
 14786  012248  EC7C  F0A1         	call	_MXK_SwitchTo
 14787  01224C  0900               	iorlw	0
 14788  01224E  B4D8               	btfsc	status,2,c
 14789  012250  D07A               	goto	l1627
 14790                           
 14791                           ;Motor.c: 78: {
 14792                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 14793  012252  C083  FFD9         	movff	_lMotor,fsr2l
 14794  012256  C084  FFDA         	movff	_lMotor+1,fsr2h
 14795  01225A  50DE               	movf	postinc2,w,c
 14796  01225C  10DE               	iorwf	postinc2,w,c
 14797  01225E  B4D8               	btfsc	status,2,c
 14798  012260  D06D               	goto	l1628
 14799                           
 14800                           ;Motor.c: 80: {
 14801                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 14802  012262  C083  FFD9         	movff	_lMotor,fsr2l
 14803  012266  C084  FFDA         	movff	_lMotor+1,fsr2h
 14804  01226A  0E01               	movlw	1
 14805  01226C  BEDB               	btfsc	plusw2,7,c
 14806  01226E  D026               	goto	l1629
 14807  012270  0E01               	movlw	1
 14808  012272  50DB               	movf	plusw2,w,c
 14809  012274  E103               	bnz	u8000
 14810  012276  04DE               	decf	postinc2,w,c
 14811  012278  A0D8               	btfss	status,0,c
 14812  01227A  D020               	goto	l1629
 14813  01227C                     u8000:
 14814                           
 14815                           ;Motor.c: 83: {
 14816                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 14817  01227C  C083  FFD9         	movff	_lMotor,fsr2l
 14818  012280  C084  FFDA         	movff	_lMotor+1,fsr2h
 14819  012284  28DE               	incf	postinc2,w,c
 14820  012286  E104               	bnz	u8010
 14821  012288  0E7F               	movlw	127
 14822  01228A  18DE               	xorwf	postinc2,w,c
 14823  01228C  B4D8               	btfsc	status,2,c
 14824  01228E  D007               	goto	l1630
 14825  012290                     u8010:
 14826                           
 14827                           ;Motor.c: 85: lMotor->mDelta --;
 14828  012290  C083  FFD9         	movff	_lMotor,fsr2l
 14829  012294  C084  FFDA         	movff	_lMotor+1,fsr2h
 14830  012298  06DE               	decf	postinc2,f,c
 14831  01229A  0E00               	movlw	0
 14832  01229C  5ADD               	subwfb	postdec2,f,c
 14833  01229E                     l1630:
 14834                           
 14835                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 14836  01229E  0E95               	movlw	low _PortE
 14837  0122A0  0100               	movlb	0	; () banked
 14838  0122A2  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14839  0122A4  0E00               	movlw	high _PortE
 14840  0122A6  0100               	movlb	0	; () banked
 14841  0122A8  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14842  0122AA  0E00               	movlw	0
 14843  0122AC  0100               	movlb	0	; () banked
 14844  0122AE  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14845  0122B0  0E01               	movlw	1
 14846  0122B2  0100               	movlb	0	; () banked
 14847  0122B4  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 14848  0122B6  ECE2  F093         	call	_Port_SetPin	;wreg free
 14849                           
 14850                           ;Motor.c: 88: }
 14851  0122BA  D01F               	goto	l1631
 14852  0122BC                     l1629:
 14853                           
 14854                           ;Motor.c: 89: else
 14855                           ;Motor.c: 90: {
 14856                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 14857  0122BC  C083  FFD9         	movff	_lMotor,fsr2l
 14858  0122C0  C084  FFDA         	movff	_lMotor+1,fsr2h
 14859  0122C4  04DE               	decf	postinc2,w,c
 14860  0122C6  E104               	bnz	u8020
 14861  0122C8  0E80               	movlw	128
 14862  0122CA  18DE               	xorwf	postinc2,w,c
 14863  0122CC  B4D8               	btfsc	status,2,c
 14864  0122CE  D007               	goto	l1632
 14865  0122D0                     u8020:
 14866                           
 14867                           ;Motor.c: 92: lMotor->mDelta ++;
 14868  0122D0  C083  FFD9         	movff	_lMotor,fsr2l
 14869  0122D4  C084  FFDA         	movff	_lMotor+1,fsr2h
 14870  0122D8  2ADE               	incf	postinc2,f,c
 14871  0122DA  0E00               	movlw	0
 14872  0122DC  22DD               	addwfc	postdec2,f,c
 14873  0122DE                     l1632:
 14874                           
 14875                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 14876  0122DE  0E95               	movlw	low _PortE
 14877  0122E0  0100               	movlb	0	; () banked
 14878  0122E2  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14879  0122E4  0E00               	movlw	high _PortE
 14880  0122E6  0100               	movlb	0	; () banked
 14881  0122E8  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14882  0122EA  0E00               	movlw	0
 14883  0122EC  0100               	movlb	0	; () banked
 14884  0122EE  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14885  0122F0  0E00               	movlw	0
 14886  0122F2  0100               	movlb	0	; () banked
 14887  0122F4  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 14888  0122F6  ECE2  F093         	call	_Port_SetPin	;wreg free
 14889  0122FA                     l1631:
 14890                           
 14891                           ;Motor.c: 95: }
 14892                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 14893  0122FA  0E95               	movlw	low _PortE
 14894  0122FC  0100               	movlb	0	; () banked
 14895  0122FE  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14896  012300  0E00               	movlw	high _PortE
 14897  012302  0100               	movlb	0	; () banked
 14898  012304  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14899  012306  0E01               	movlw	1
 14900  012308  0100               	movlb	0	; () banked
 14901  01230A  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14902  01230C  0E01               	movlw	1
 14903  01230E  0100               	movlb	0	; () banked
 14904  012310  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 14905  012312  ECE2  F093         	call	_Port_SetPin	;wreg free
 14906                           
 14907                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 14908  012316  0E95               	movlw	low _PortE
 14909  012318  0100               	movlb	0	; () banked
 14910  01231A  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 14911  01231C  0E00               	movlw	high _PortE
 14912  01231E  0100               	movlb	0	; () banked
 14913  012320  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14914  012322  0E01               	movlw	1
 14915  012324  0100               	movlb	0	; () banked
 14916  012326  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 14917  012328  0E00               	movlw	0
 14918  01232A  0100               	movlb	0	; () banked
 14919  01232C  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 14920  01232E  ECE2  F093         	call	_Port_SetPin	;wreg free
 14921                           
 14922                           ;Motor.c: 101: MXK_Release();
 14923  012332  EC2D  F0A4         	call	_MXK_Release	;wreg free
 14924                           
 14925                           ;Motor.c: 102: Timer0_Restart();
 14926  012336  ECF7  F0A4         	call	_Timer0_Restart	;wreg free
 14927                           
 14928                           ;Motor.c: 103: return;
 14929  01233A  0012               	return	
 14930  01233C                     l1628:
 14931                           
 14932                           ;Motor.c: 104: }
 14933                           ;Motor.c: 105: MXK_Release();
 14934  01233C  EC2D  F0A4         	call	_MXK_Release	;wreg free
 14935                           
 14936                           ;Motor.c: 106: Timer0_Stop();
 14937  012340  EC20  F0A5         	call	_Timer0_Stop	;wreg free
 14938                           
 14939                           ;Motor.c: 107: return;
 14940  012344  0012               	return	
 14941  012346                     l1627:
 14942                           
 14943                           ;Motor.c: 108: }
 14944                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 14945  012346  C06A  F0BB         	movff	_lStepFunction,MXK_Queue@pCallback
 14946  01234A  C06B  F0BC         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 14947  01234E  C06C  F0BD         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 14948  012352  ECE9  F0A4         	call	_MXK_Queue	;wreg free
 14949  012356  0012               	return		;funcret
 14950  012358                     __end_of_Motor_Step:
 14951                           	opt stack 0
 14952                           tosu	equ	0xFFF
 14953                           tosh	equ	0xFFE
 14954                           tosl	equ	0xFFD
 14955                           pclath	equ	0xFFA
 14956                           tblptru	equ	0xFF8
 14957                           tblptrh	equ	0xFF7
 14958                           tblptrl	equ	0xFF6
 14959                           tablat	equ	0xFF5
 14960                           prodh	equ	0xFF4
 14961                           prodl	equ	0xFF3
 14962                           postinc0	equ	0xFEE
 14963                           wreg	equ	0xFE8
 14964                           indf1	equ	0xFE7
 14965                           postdec1	equ	0xFE5
 14966                           fsr1h	equ	0xFE2
 14967                           fsr1l	equ	0xFE1
 14968                           indf2	equ	0xFDF
 14969                           postinc2	equ	0xFDE
 14970                           postdec2	equ	0xFDD
 14971                           plusw2	equ	0xFDB
 14972                           fsr2h	equ	0xFDA
 14973                           fsr2l	equ	0xFD9
 14974                           status	equ	0xFD8
 14975                           
 14976 ;; *************** function _Timer0_Stop *****************
 14977 ;; Defined at:
 14978 ;;		line 89 in file "Library/Timer0.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;		None
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;		None
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		None
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14996 ;;Total ram usage:        0 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:    7
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		_Motor_Step
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           	psect	text80
 15007  014A40                     __ptext80:
 15008                           	opt stack 0
 15009  014A40                     _Timer0_Stop:
 15010                           	opt stack 20
 15011                           
 15012                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 15013                           
 15014                           ;incstack = 0
 15015  014A40  9AF2               	bcf	intcon,5,c	;volatile
 15016                           
 15017                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 15018  014A42  94F2               	bcf	intcon,2,c	;volatile
 15019  014A44  0012               	return		;funcret
 15020  014A46                     __end_of_Timer0_Stop:
 15021                           	opt stack 0
 15022                           tosu	equ	0xFFF
 15023                           tosh	equ	0xFFE
 15024                           tosl	equ	0xFFD
 15025                           pclath	equ	0xFFA
 15026                           tblptru	equ	0xFF8
 15027                           tblptrh	equ	0xFF7
 15028                           tblptrl	equ	0xFF6
 15029                           tablat	equ	0xFF5
 15030                           prodh	equ	0xFF4
 15031                           prodl	equ	0xFF3
 15032                           intcon	equ	0xFF2
 15033                           postinc0	equ	0xFEE
 15034                           wreg	equ	0xFE8
 15035                           indf1	equ	0xFE7
 15036                           postdec1	equ	0xFE5
 15037                           fsr1h	equ	0xFE2
 15038                           fsr1l	equ	0xFE1
 15039                           indf2	equ	0xFDF
 15040                           postinc2	equ	0xFDE
 15041                           postdec2	equ	0xFDD
 15042                           plusw2	equ	0xFDB
 15043                           fsr2h	equ	0xFDA
 15044                           fsr2l	equ	0xFD9
 15045                           status	equ	0xFD8
 15046                           
 15047 ;; *************** function _Timer0_Restart *****************
 15048 ;; Defined at:
 15049 ;;		line 83 in file "Library/Timer0.c"
 15050 ;; Parameters:    Size  Location     Type
 15051 ;;		None
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;		None
 15054 ;; Return value:  Size  Location     Type
 15055 ;;                  1    wreg      void 
 15056 ;; Registers used:
 15057 ;;		None
 15058 ;; Tracked objects:
 15059 ;;		On entry : 0/0
 15060 ;;		On exit  : 0/0
 15061 ;;		Unchanged: 0/0
 15062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15067 ;;Total ram usage:        0 bytes
 15068 ;; Hardware stack levels used:    1
 15069 ;; Hardware stack levels required when called:    7
 15070 ;; This function calls:
 15071 ;;		Nothing
 15072 ;; This function is called by:
 15073 ;;		_Motor_Step
 15074 ;; This function uses a non-reentrant model
 15075 ;;
 15076                           
 15077                           	psect	text81
 15078  0149EE                     __ptext81:
 15079                           	opt stack 0
 15080  0149EE                     _Timer0_Restart:
 15081                           	opt stack 20
 15082                           
 15083                           ;Timer0.c: 85: TMR0 = COUNTER;
 15084                           
 15085                           ;incstack = 0
 15086  0149EE  C029  FFD6         	movff	_COUNTER,4054	;volatile
 15087  0149F2  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 15088                           
 15089                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 15090  0149F6  8AF2               	bsf	intcon,5,c	;volatile
 15091  0149F8  0012               	return		;funcret
 15092  0149FA                     __end_of_Timer0_Restart:
 15093                           	opt stack 0
 15094                           tosu	equ	0xFFF
 15095                           tosh	equ	0xFFE
 15096                           tosl	equ	0xFFD
 15097                           pclath	equ	0xFFA
 15098                           tblptru	equ	0xFF8
 15099                           tblptrh	equ	0xFF7
 15100                           tblptrl	equ	0xFF6
 15101                           tablat	equ	0xFF5
 15102                           prodh	equ	0xFF4
 15103                           prodl	equ	0xFF3
 15104                           intcon	equ	0xFF2
 15105                           postinc0	equ	0xFEE
 15106                           wreg	equ	0xFE8
 15107                           indf1	equ	0xFE7
 15108                           postdec1	equ	0xFE5
 15109                           fsr1h	equ	0xFE2
 15110                           fsr1l	equ	0xFE1
 15111                           indf2	equ	0xFDF
 15112                           postinc2	equ	0xFDE
 15113                           postdec2	equ	0xFDD
 15114                           plusw2	equ	0xFDB
 15115                           fsr2h	equ	0xFDA
 15116                           fsr2l	equ	0xFD9
 15117                           status	equ	0xFD8
 15118                           
 15119 ;; *************** function _MXK_SwitchTo *****************
 15120 ;; Defined at:
 15121 ;;		line 105 in file "Library/MXK.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;  pModule         1    wreg     enum E6927
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;  pModule         1    7[BANK0 ] enum E6927
 15126 ;;  CUR             1    6[BANK0 ] unsigned char 
 15127 ;; Return value:  Size  Location     Type
 15128 ;;                  1    wreg      unsigned char 
 15129 ;; Registers used:
 15130 ;;		wreg, status,2, status,0, cstack
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15140 ;;Total ram usage:        2 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    8
 15143 ;; This function calls:
 15144 ;;		_delay_us
 15145 ;; This function is called by:
 15146 ;;		_Motor_Step
 15147 ;;		_mode2
 15148 ;; This function uses a non-reentrant model
 15149 ;;
 15150                           
 15151                           	psect	text82
 15152  0142F8                     __ptext82:
 15153                           	opt stack 0
 15154  0142F8                     _MXK_SwitchTo:
 15155                           	opt stack 21
 15156                           
 15157                           ;incstack = 0
 15158                           ;MXK_SwitchTo@pModule stored from wreg
 15159  0142F8  0100               	movlb	0	; () banked
 15160  0142FA  6FC2               	movwf	MXK_SwitchTo@pModule& (0+255),b
 15161                           
 15162                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 15163  0142FC  5086               	movf	3974,w,c	;volatile
 15164  0142FE  0B0F               	andlw	15
 15165  014300  0100               	movlb	0	; () banked
 15166  014302  6FC1               	movwf	MXK_SwitchTo@CUR& (0+255),b
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15170  014304  504B               	movf	_Bus_State,w,c
 15171  014306  A4D8               	btfss	status,2,c
 15172  014308  D002               	goto	l1730
 15173                           
 15174                           ; BSR set to: 0
 15175                           ;MXK.c: 110: return 0;
 15176  01430A  0E00               	movlw	0
 15177                           
 15178                           ; BSR set to: 0
 15179  01430C  0012               	return	
 15180  01430E                     l1730:
 15181                           
 15182                           ; BSR set to: 0
 15183                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15184                           
 15185                           ; BSR set to: 0
 15186  01430E  0E00               	movlw	0
 15187  014310  6E4B               	movwf	_Bus_State,c
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;MXK.c: 114: if (CUR != pModule)
 15191  014312  0100               	movlb	0	; () banked
 15192  014314  51C2               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15193  014316  0100               	movlb	0	; () banked
 15194  014318  19C1               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15195  01431A  B4D8               	btfsc	status,2,c
 15196  01431C  D00C               	goto	l1732
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;MXK.c: 115: {
 15200                           ;MXK.c: 116: PORTG &= ~(0xF);
 15201  01431E  0EF0               	movlw	240
 15202  014320  1686               	andwf	3974,f,c	;volatile
 15203                           
 15204                           ;MXK.c: 117: PORTG |= pModule;
 15205  014322  0100               	movlb	0	; () banked
 15206  014324  51C2               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15207  014326  1286               	iorwf	3974,f,c	;volatile
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;MXK.c: 120: delay_us(10);
 15211  014328  0E00               	movlw	0
 15212  01432A  0100               	movlb	0	; () banked
 15213  01432C  6FBC               	movwf	(delay_us@us+1)& (0+255),b
 15214  01432E  0E0A               	movlw	10
 15215  014330  6FBB               	movwf	delay_us@us& (0+255),b
 15216  014332  ECBF  F09F         	call	_delay_us	;wreg free
 15217  014336                     l1732:
 15218                           
 15219                           ;MXK.c: 121: }
 15220                           ;MXK.c: 122: return 1;
 15221  014336  0E01               	movlw	1
 15222  014338  0012               	return	
 15223  01433A                     __end_of_MXK_SwitchTo:
 15224                           	opt stack 0
 15225                           tosu	equ	0xFFF
 15226                           tosh	equ	0xFFE
 15227                           tosl	equ	0xFFD
 15228                           pclath	equ	0xFFA
 15229                           tblptru	equ	0xFF8
 15230                           tblptrh	equ	0xFF7
 15231                           tblptrl	equ	0xFF6
 15232                           tablat	equ	0xFF5
 15233                           prodh	equ	0xFF4
 15234                           prodl	equ	0xFF3
 15235                           intcon	equ	0xFF2
 15236                           postinc0	equ	0xFEE
 15237                           wreg	equ	0xFE8
 15238                           indf1	equ	0xFE7
 15239                           postdec1	equ	0xFE5
 15240                           fsr1h	equ	0xFE2
 15241                           fsr1l	equ	0xFE1
 15242                           indf2	equ	0xFDF
 15243                           postinc2	equ	0xFDE
 15244                           postdec2	equ	0xFDD
 15245                           plusw2	equ	0xFDB
 15246                           fsr2h	equ	0xFDA
 15247                           fsr2l	equ	0xFD9
 15248                           status	equ	0xFD8
 15249                           
 15250 ;; *************** function _MXK_Release *****************
 15251 ;; Defined at:
 15252 ;;		line 130 in file "Library/MXK.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;		None
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;		None
 15257 ;; Return value:  Size  Location     Type
 15258 ;;                  1    wreg      unsigned char 
 15259 ;; Registers used:
 15260 ;;		wreg, status,2, status,0
 15261 ;; Tracked objects:
 15262 ;;		On entry : 0/0
 15263 ;;		On exit  : 0/0
 15264 ;;		Unchanged: 0/0
 15265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15270 ;;Total ram usage:        0 bytes
 15271 ;; Hardware stack levels used:    1
 15272 ;; Hardware stack levels required when called:    7
 15273 ;; This function calls:
 15274 ;;		Nothing
 15275 ;; This function is called by:
 15276 ;;		_Motor_Step
 15277 ;;		_init
 15278 ;;		_mode2
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           	psect	text83
 15283  01485A                     __ptext83:
 15284                           	opt stack 0
 15285  01485A                     _MXK_Release:
 15286                           	opt stack 22
 15287                           
 15288                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15289                           
 15290                           ;incstack = 0
 15291  01485A  0E01               	movlw	1
 15292  01485C  6E4B               	movwf	_Bus_State,c
 15293                           
 15294                           ;MXK.c: 134: if (lQueue != 0)
 15295  01485E  0100               	movlb	0	; () banked
 15296  014860  5167               	movf	_lQueue& (0+255),w,b	;volatile
 15297  014862  0100               	movlb	0	; () banked
 15298  014864  1168               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15299  014866  0100               	movlb	0	; () banked
 15300  014868  1169               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15301  01486A  B4D8               	btfsc	status,2,c
 15302  01486C  D002               	goto	l1735
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;MXK.c: 135: return 1;
 15306  01486E  0E01               	movlw	1
 15307                           
 15308                           ; BSR set to: 0
 15309  014870  0012               	return	
 15310  014872                     l1735:
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;MXK.c: 137: return 0;
 15314                           
 15315                           ; BSR set to: 0
 15316  014872  0E00               	movlw	0
 15317  014874  0012               	return	
 15318  014876                     __end_of_MXK_Release:
 15319                           	opt stack 0
 15320                           tosu	equ	0xFFF
 15321                           tosh	equ	0xFFE
 15322                           tosl	equ	0xFFD
 15323                           pclath	equ	0xFFA
 15324                           tblptru	equ	0xFF8
 15325                           tblptrh	equ	0xFF7
 15326                           tblptrl	equ	0xFF6
 15327                           tablat	equ	0xFF5
 15328                           prodh	equ	0xFF4
 15329                           prodl	equ	0xFF3
 15330                           intcon	equ	0xFF2
 15331                           postinc0	equ	0xFEE
 15332                           wreg	equ	0xFE8
 15333                           indf1	equ	0xFE7
 15334                           postdec1	equ	0xFE5
 15335                           fsr1h	equ	0xFE2
 15336                           fsr1l	equ	0xFE1
 15337                           indf2	equ	0xFDF
 15338                           postinc2	equ	0xFDE
 15339                           postdec2	equ	0xFDD
 15340                           plusw2	equ	0xFDB
 15341                           fsr2h	equ	0xFDA
 15342                           fsr2l	equ	0xFD9
 15343                           status	equ	0xFD8
 15344                           
 15345 ;; *************** function _MXK_Queue *****************
 15346 ;; Defined at:
 15347 ;;		line 144 in file "Library/MXK.c"
 15348 ;; Parameters:    Size  Location     Type
 15349 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15350 ;;		 -> Absolute function(1), Motor_Step(1), 
 15351 ;; Auto vars:     Size  Location     Type
 15352 ;;		None
 15353 ;; Return value:  Size  Location     Type
 15354 ;;                  1    wreg      void 
 15355 ;; Registers used:
 15356 ;;		wreg, status,2, status,0
 15357 ;; Tracked objects:
 15358 ;;		On entry : 0/0
 15359 ;;		On exit  : 0/0
 15360 ;;		Unchanged: 0/0
 15361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15362 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15366 ;;Total ram usage:        3 bytes
 15367 ;; Hardware stack levels used:    1
 15368 ;; Hardware stack levels required when called:    7
 15369 ;; This function calls:
 15370 ;;		Nothing
 15371 ;; This function is called by:
 15372 ;;		_Motor_Step
 15373 ;; This function uses a non-reentrant model
 15374 ;;
 15375                           
 15376                           	psect	text84
 15377  0149D2                     __ptext84:
 15378                           	opt stack 0
 15379  0149D2                     _MXK_Queue:
 15380                           	opt stack 20
 15381                           
 15382                           ;MXK.c: 146: lQueue = pCallback;
 15383                           
 15384                           ; BSR set to: 0
 15385                           ;incstack = 0
 15386  0149D2  C0BB  F067         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15387  0149D6  C0BC  F068         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15388  0149DA  C0BD  F069         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15389  0149DE  0012               	return		;funcret
 15390  0149E0                     __end_of_MXK_Queue:
 15391                           	opt stack 0
 15392                           tosu	equ	0xFFF
 15393                           tosh	equ	0xFFE
 15394                           tosl	equ	0xFFD
 15395                           pclath	equ	0xFFA
 15396                           tblptru	equ	0xFF8
 15397                           tblptrh	equ	0xFF7
 15398                           tblptrl	equ	0xFF6
 15399                           tablat	equ	0xFF5
 15400                           prodh	equ	0xFF4
 15401                           prodl	equ	0xFF3
 15402                           intcon	equ	0xFF2
 15403                           postinc0	equ	0xFEE
 15404                           wreg	equ	0xFE8
 15405                           indf1	equ	0xFE7
 15406                           postdec1	equ	0xFE5
 15407                           fsr1h	equ	0xFE2
 15408                           fsr1l	equ	0xFE1
 15409                           indf2	equ	0xFDF
 15410                           postinc2	equ	0xFDE
 15411                           postdec2	equ	0xFDD
 15412                           plusw2	equ	0xFDB
 15413                           fsr2h	equ	0xFDA
 15414                           fsr2l	equ	0xFD9
 15415                           status	equ	0xFD8
 15416                           
 15417 ;; *************** function _MXK_BlockSwitchTo *****************
 15418 ;; Defined at:
 15419 ;;		line 82 in file "Library/MXK.c"
 15420 ;; Parameters:    Size  Location     Type
 15421 ;;  pModule         1    wreg     enum E6927
 15422 ;; Auto vars:     Size  Location     Type
 15423 ;;  pModule         1    7[BANK0 ] enum E6927
 15424 ;;  CUR             1    6[BANK0 ] unsigned char 
 15425 ;; Return value:  Size  Location     Type
 15426 ;;                  1    wreg      unsigned char 
 15427 ;; Registers used:
 15428 ;;		wreg, status,2, status,0, cstack
 15429 ;; Tracked objects:
 15430 ;;		On entry : 0/0
 15431 ;;		On exit  : 0/0
 15432 ;;		Unchanged: 0/0
 15433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15438 ;;Total ram usage:        2 bytes
 15439 ;; Hardware stack levels used:    1
 15440 ;; Hardware stack levels required when called:    8
 15441 ;; This function calls:
 15442 ;;		_delay_us
 15443 ;; This function is called by:
 15444 ;;		_init
 15445 ;; This function uses a non-reentrant model
 15446 ;;
 15447                           
 15448                           	psect	text85
 15449  0143F8                     __ptext85:
 15450                           	opt stack 0
 15451  0143F8                     _MXK_BlockSwitchTo:
 15452                           	opt stack 21
 15453                           
 15454                           ;incstack = 0
 15455                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15456  0143F8  0100               	movlb	0	; () banked
 15457  0143FA  6FC2               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15458                           
 15459                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15460  0143FC  5086               	movf	3974,w,c	;volatile
 15461  0143FE  0B0F               	andlw	15
 15462  014400  0100               	movlb	0	; () banked
 15463  014402  6FC1               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15464  014404                     
 15465                           ; BSR set to: 0
 15466                           
 15467                           ; BSR set to: 0
 15468  014404  504B               	movf	_Bus_State,w,c
 15469  014406  B4D8               	btfsc	status,2,c
 15470  014408  D7FD               	goto	l1724
 15471                           
 15472                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15473  01440A  0E00               	movlw	0
 15474  01440C  6E4B               	movwf	_Bus_State,c
 15475                           
 15476                           ;MXK.c: 90: if (CUR != pModule)
 15477  01440E  0100               	movlb	0	; () banked
 15478  014410  51C2               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15479  014412  0100               	movlb	0	; () banked
 15480  014414  19C1               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15481  014416  B4D8               	btfsc	status,2,c
 15482  014418  D00C               	goto	l1726
 15483                           
 15484                           ; BSR set to: 0
 15485                           ;MXK.c: 91: {
 15486                           ;MXK.c: 92: PORTG &= ~(0xF);
 15487  01441A  0EF0               	movlw	240
 15488  01441C  1686               	andwf	3974,f,c	;volatile
 15489                           
 15490                           ;MXK.c: 93: PORTG |= pModule;
 15491  01441E  0100               	movlb	0	; () banked
 15492  014420  51C2               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15493  014422  1286               	iorwf	3974,f,c	;volatile
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;MXK.c: 96: delay_us(10);
 15497  014424  0E00               	movlw	0
 15498  014426  0100               	movlb	0	; () banked
 15499  014428  6FBC               	movwf	(delay_us@us+1)& (0+255),b
 15500  01442A  0E0A               	movlw	10
 15501  01442C  6FBB               	movwf	delay_us@us& (0+255),b
 15502  01442E  ECBF  F09F         	call	_delay_us	;wreg free
 15503  014432                     l1726:
 15504                           
 15505                           ;MXK.c: 97: }
 15506                           ;MXK.c: 98: return 1;
 15507  014432  0E01               	movlw	1
 15508  014434  0012               	return	
 15509  014436                     __end_of_MXK_BlockSwitchTo:
 15510                           	opt stack 0
 15511                           tosu	equ	0xFFF
 15512                           tosh	equ	0xFFE
 15513                           tosl	equ	0xFFD
 15514                           pclath	equ	0xFFA
 15515                           tblptru	equ	0xFF8
 15516                           tblptrh	equ	0xFF7
 15517                           tblptrl	equ	0xFF6
 15518                           tablat	equ	0xFF5
 15519                           prodh	equ	0xFF4
 15520                           prodl	equ	0xFF3
 15521                           intcon	equ	0xFF2
 15522                           postinc0	equ	0xFEE
 15523                           wreg	equ	0xFE8
 15524                           indf1	equ	0xFE7
 15525                           postdec1	equ	0xFE5
 15526                           fsr1h	equ	0xFE2
 15527                           fsr1l	equ	0xFE1
 15528                           indf2	equ	0xFDF
 15529                           postinc2	equ	0xFDE
 15530                           postdec2	equ	0xFDD
 15531                           plusw2	equ	0xFDB
 15532                           fsr2h	equ	0xFDA
 15533                           fsr2l	equ	0xFD9
 15534                           status	equ	0xFD8
 15535                           
 15536 ;; *************** function _delay_us *****************
 15537 ;; Defined at:
 15538 ;;		line 255 in file "Library/Types.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;  us              2    0[BANK0 ] unsigned short 
 15541 ;; Auto vars:     Size  Location     Type
 15542 ;;  u               4    2[BANK0 ] unsigned long 
 15543 ;; Return value:  Size  Location     Type
 15544 ;;                  1    wreg      void 
 15545 ;; Registers used:
 15546 ;;		wreg, status,2, status,0
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15552 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15553 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15556 ;;Total ram usage:        6 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    7
 15559 ;; This function calls:
 15560 ;;		Nothing
 15561 ;; This function is called by:
 15562 ;;		_MXK_BlockSwitchTo
 15563 ;;		_MXK_SwitchTo
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           	psect	text86
 15568  013F7E                     __ptext86:
 15569                           	opt stack 0
 15570  013F7E                     _delay_us:
 15571                           	opt stack 21
 15572                           
 15573                           ;Types.c: 256: unsigned long u;
 15574                           ;Types.c: 257: while (us--) {
 15575                           
 15576                           ;incstack = 0
 15577  013F7E  D01C               	goto	u7320
 15578  013F80                     l11230:
 15579                           
 15580                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15581  013F80  0E00               	movlw	0
 15582  013F82  0100               	movlb	0	; () banked
 15583  013F84  6FBD               	movwf	delay_us@u& (0+255),b
 15584  013F86  0E00               	movlw	0
 15585  013F88  6FBE               	movwf	(delay_us@u+1)& (0+255),b
 15586  013F8A  0E00               	movlw	0
 15587  013F8C  6FBF               	movwf	(delay_us@u+2)& (0+255),b
 15588  013F8E  0E00               	movlw	0
 15589  013F90  6FC0               	movwf	(delay_us@u+3)& (0+255),b
 15590  013F92                     l11232:
 15591                           
 15592                           ; BSR set to: 0
 15593  013F92  0100               	movlb	0	; () banked
 15594  013F94  51BD               	movf	delay_us@u& (0+255),w,b
 15595  013F96  0100               	movlb	0	; () banked
 15596  013F98  11BE               	iorwf	(delay_us@u+1)& (0+255),w,b
 15597  013F9A  0100               	movlb	0	; () banked
 15598  013F9C  11BF               	iorwf	(delay_us@u+2)& (0+255),w,b
 15599  013F9E  0100               	movlb	0	; () banked
 15600  013FA0  11C0               	iorwf	(delay_us@u+3)& (0+255),w,b
 15601  013FA2  A4D8               	btfss	status,2,c
 15602  013FA4  D009               	goto	u7320
 15603                           
 15604                           ; BSR set to: 0
 15605                           
 15606                           ; BSR set to: 0
 15607  013FA6  F000               	nop		; ;# 
 15608  013FA8  0E01               	movlw	1
 15609  013FAA  0100               	movlb	0	; () banked
 15610  013FAC  27BD               	addwf	delay_us@u& (0+255),f,b
 15611  013FAE  0E00               	movlw	0
 15612  013FB0  23BE               	addwfc	(delay_us@u+1)& (0+255),f,b
 15613  013FB2  23BF               	addwfc	(delay_us@u+2)& (0+255),f,b
 15614  013FB4  23C0               	addwfc	(delay_us@u+3)& (0+255),f,b
 15615  013FB6  D7ED               	goto	l11232
 15616  013FB8                     u7320:
 15617                           
 15618                           ; BSR set to: 0
 15619                           
 15620                           ; BSR set to: 0
 15621  013FB8  0100               	movlb	0	; () banked
 15622  013FBA  07BB               	decf	delay_us@us& (0+255),f,b
 15623  013FBC  A0D8               	btfss	status,0,c
 15624  013FBE  07BC               	decf	(delay_us@us+1)& (0+255),f,b
 15625  013FC0  0100               	movlb	0	; () banked
 15626  013FC2  29BB               	incf	delay_us@us& (0+255),w,b
 15627  013FC4  E1DD               	bnz	l11230
 15628  013FC6  0100               	movlb	0	; () banked
 15629  013FC8  29BC               	incf	(delay_us@us+1)& (0+255),w,b
 15630  013FCA  B4D8               	btfsc	status,2,c
 15631  013FCC  0012               	return	
 15632  013FCE  D7D8               	goto	l832
 15633  013FD0                     __end_of_delay_us:
 15634                           	opt stack 0
 15635                           tosu	equ	0xFFF
 15636                           tosh	equ	0xFFE
 15637                           tosl	equ	0xFFD
 15638                           pclath	equ	0xFFA
 15639                           tblptru	equ	0xFF8
 15640                           tblptrh	equ	0xFF7
 15641                           tblptrl	equ	0xFF6
 15642                           tablat	equ	0xFF5
 15643                           prodh	equ	0xFF4
 15644                           prodl	equ	0xFF3
 15645                           intcon	equ	0xFF2
 15646                           postinc0	equ	0xFEE
 15647                           wreg	equ	0xFE8
 15648                           indf1	equ	0xFE7
 15649                           postdec1	equ	0xFE5
 15650                           fsr1h	equ	0xFE2
 15651                           fsr1l	equ	0xFE1
 15652                           indf2	equ	0xFDF
 15653                           postinc2	equ	0xFDE
 15654                           postdec2	equ	0xFDD
 15655                           plusw2	equ	0xFDB
 15656                           fsr2h	equ	0xFDA
 15657                           fsr2l	equ	0xFD9
 15658                           status	equ	0xFD8
 15659                           
 15660 ;; *************** function _LCD_Init *****************
 15661 ;; Defined at:
 15662 ;;		line 172 in file "Library/LCD.c"
 15663 ;; Parameters:    Size  Location     Type
 15664 ;;		None
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;  i               2   55[BANK0 ] unsigned short 
 15667 ;; Return value:  Size  Location     Type
 15668 ;;                  1    wreg      void 
 15669 ;; Registers used:
 15670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15671 ;; Tracked objects:
 15672 ;;		On entry : 0/0
 15673 ;;		On exit  : 0/0
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15679 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;Total ram usage:        4 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:   15
 15683 ;; This function calls:
 15684 ;;		_Configure_GPIOs
 15685 ;;		_LCD_Fill
 15686 ;;		_LCD_Write
 15687 ;;		_Set_Rotation
 15688 ;;		_delay_ms
 15689 ;; This function is called by:
 15690 ;;		_init
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           	psect	text87
 15695  011C9E                     __ptext87:
 15696                           	opt stack 0
 15697  011C9E                     _LCD_Init:
 15698                           	opt stack 14
 15699                           
 15700                           ;LCD.c: 174: UINT16 i;
 15701                           ;LCD.c: 175: Configure_GPIOs();
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;incstack = 0
 15705  011C9E  EC9D  F09C         	call	_Configure_GPIOs	;wreg free
 15706                           
 15707                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 15708  011CA2  0E00               	movlw	0
 15709  011CA4  0100               	movlb	0	; () banked
 15710  011CA6  6FF3               	movwf	(LCD_Init@i+1)& (0+255),b
 15711  011CA8  0E00               	movlw	0
 15712  011CAA  6FF2               	movwf	LCD_Init@i& (0+255),b
 15713                           
 15714                           ; BSR set to: 0
 15715  011CAC  0100               	movlb	0	; () banked
 15716  011CAE  51F3               	movf	(LCD_Init@i+1)& (0+255),w,b
 15717  011CB0  E106               	bnz	u8090
 15718  011CB2  0E59               	movlw	89
 15719  011CB4  0100               	movlb	0	; () banked
 15720  011CB6  5DF2               	subwf	LCD_Init@i& (0+255),w,b
 15721  011CB8  B0D8               	btfsc	status,0,c
 15722  011CBA  D08B               	goto	u8130
 15723  011CBC  D001               	goto	l85
 15724  011CBE                     u8090:
 15725                           
 15726                           ; BSR set to: 0
 15727  011CBE  D089               	goto	u8130
 15728  011CC0                     l85:
 15729                           
 15730                           ; BSR set to: 0
 15731                           ;LCD.c: 178: {
 15732                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 15733                           
 15734                           ; BSR set to: 0
 15735  011CC0  90D8               	bcf	status,0,c
 15736  011CC2  0100               	movlb	0	; () banked
 15737  011CC4  35F2               	rlcf	LCD_Init@i& (0+255),w,b
 15738  011CC6  6EF6               	movwf	tblptrl,c
 15739  011CC8  0100               	movlb	0	; () banked
 15740  011CCA  35F3               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15741  011CCC  6EF7               	movwf	tblptrh,c
 15742  011CCE  0EE5               	movlw	low _InitList
 15743  011CD0  26F6               	addwf	tblptrl,f,c
 15744  011CD2  0EFC               	movlw	high _InitList
 15745  011CD4  22F7               	addwfc	tblptrh,f,c
 15746  011CD6                     	if	1	;There are 3 active tblptr bytes
 15747  011CD6  6AF8               	clrf	tblptru,c
 15748  011CD8  0E00               	movlw	low (__mediumconst shr (0+16))
 15749  011CDA  22F8               	addwfc	tblptru,f,c
 15750  011CDC                     	endif
 15751  011CDC  0009               	tblrd		*+
 15752  011CDE  0E80               	movlw	128
 15753  011CE0  18F5               	xorwf	tablat,w,c
 15754  011CE2  0009               	tblrd		*+
 15755  011CE4  10F5               	iorwf	tablat,w,c
 15756  011CE6  A4D8               	btfss	status,2,c
 15757  011CE8  D022               	goto	l87
 15758                           
 15759                           ; BSR set to: 0
 15760  011CEA  0100               	movlb	0	; () banked
 15761  011CEC  51F3               	movf	(LCD_Init@i+1)& (0+255),w,b
 15762  011CEE  E11F               	bnz	l12240
 15763  011CF0  0E58               	movlw	88
 15764  011CF2  0100               	movlb	0	; () banked
 15765  011CF4  5DF2               	subwf	LCD_Init@i& (0+255),w,b
 15766  011CF6  B0D8               	btfsc	status,0,c
 15767  011CF8  D01A               	goto	l87
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;LCD.c: 180: delay_ms(InitList[++i]);
 15771  011CFA  0100               	movlb	0	; () banked
 15772  011CFC  4BF2               	infsnz	LCD_Init@i& (0+255),f,b
 15773  011CFE  2BF3               	incf	(LCD_Init@i+1)& (0+255),f,b
 15774  011D00  90D8               	bcf	status,0,c
 15775  011D02  0100               	movlb	0	; () banked
 15776  011D04  35F2               	rlcf	LCD_Init@i& (0+255),w,b
 15777  011D06  6EF6               	movwf	tblptrl,c
 15778  011D08  0100               	movlb	0	; () banked
 15779  011D0A  35F3               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15780  011D0C  6EF7               	movwf	tblptrh,c
 15781  011D0E  0EE5               	movlw	low _InitList
 15782  011D10  26F6               	addwf	tblptrl,f,c
 15783  011D12  0EFC               	movlw	high _InitList
 15784  011D14  22F7               	addwfc	tblptrh,f,c
 15785  011D16                     	if	1	;There are 3 active tblptr bytes
 15786  011D16  6AF8               	clrf	tblptru,c
 15787  011D18  0E00               	movlw	low (__mediumconst shr (0+16))
 15788  011D1A  22F8               	addwfc	tblptru,f,c
 15789  011D1C                     	endif
 15790  011D1C  0009               	tblrd		*+
 15791  011D1E  CFF5 F0BB          	movff	tablat,delay_ms@ms
 15792  011D22  000A               	tblrd		*-
 15793  011D24  CFF5 F0BC          	movff	tablat,delay_ms@ms+1
 15794  011D28  EC76  F09D         	call	_delay_ms	;wreg free
 15795  011D2C  D04B               	goto	l90
 15796  011D2E                     l87:
 15797  011D2E                     l12240:
 15798                           
 15799                           ;LCD.c: 181: else
 15800                           ;LCD.c: 182: {
 15801                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 15802  011D2E  90D8               	bcf	status,0,c
 15803  011D30  0100               	movlb	0	; () banked
 15804  011D32  35F2               	rlcf	LCD_Init@i& (0+255),w,b
 15805  011D34  6EF6               	movwf	tblptrl,c
 15806  011D36  0100               	movlb	0	; () banked
 15807  011D38  35F3               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15808  011D3A  6EF7               	movwf	tblptrh,c
 15809  011D3C  0EE5               	movlw	low _InitList
 15810  011D3E  26F6               	addwf	tblptrl,f,c
 15811  011D40  0EFC               	movlw	high _InitList
 15812  011D42  22F7               	addwfc	tblptrh,f,c
 15813  011D44                     	if	1	;There are 3 active tblptr bytes
 15814  011D44  6AF8               	clrf	tblptru,c
 15815  011D46  0E00               	movlw	low (__mediumconst shr (0+16))
 15816  011D48  22F8               	addwfc	tblptru,f,c
 15817  011D4A                     	endif
 15818  011D4A  0009               	tblrd		*+
 15819  011D4C  0E00               	movlw	0
 15820  011D4E  5EF5               	subwf	tablat,f,c
 15821  011D50  0009               	tblrd		*+
 15822  011D52  0E01               	movlw	1
 15823  011D54  5AF5               	subwfb	tablat,f,c
 15824  011D56  A0D8               	btfss	status,0,c
 15825  011D58  D020               	goto	l89
 15826                           
 15827                           ; BSR set to: 0
 15828  011D5A  0E00               	movlw	0
 15829  011D5C  0100               	movlb	0	; () banked
 15830  011D5E  6FBE               	movwf	LCD_Write@mode& (0+255),b
 15831  011D60  90D8               	bcf	status,0,c
 15832  011D62  0100               	movlb	0	; () banked
 15833  011D64  35F2               	rlcf	LCD_Init@i& (0+255),w,b
 15834  011D66  6EF6               	movwf	tblptrl,c
 15835  011D68  0100               	movlb	0	; () banked
 15836  011D6A  35F3               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15837  011D6C  6EF7               	movwf	tblptrh,c
 15838  011D6E  0EE5               	movlw	low _InitList
 15839  011D70  26F6               	addwf	tblptrl,f,c
 15840  011D72  0EFC               	movlw	high _InitList
 15841  011D74  22F7               	addwfc	tblptrh,f,c
 15842  011D76                     	if	1	;There are 3 active tblptr bytes
 15843  011D76  6AF8               	clrf	tblptru,c
 15844  011D78  0E00               	movlw	low (__mediumconst shr (0+16))
 15845  011D7A  22F8               	addwfc	tblptru,f,c
 15846  011D7C                     	endif
 15847  011D7C  0009               	tblrd		*+
 15848  011D7E  CFF5 F0F0          	movff	tablat,??_LCD_Init
 15849  011D82  0009               	tblrd		*+
 15850  011D84  CFF5 F0F1          	movff	tablat,??_LCD_Init+1
 15851  011D88  C0F1  F0F0         	movff	??_LCD_Init+1,??_LCD_Init
 15852  011D8C  0100               	movlb	0	; () banked
 15853  011D8E  6BF1               	clrf	(??_LCD_Init+1)& (0+255),b
 15854  011D90  0100               	movlb	0	; () banked
 15855  011D92  51F0               	movf	??_LCD_Init& (0+255),w,b
 15856  011D94  EC64  F0A3         	call	_LCD_Write
 15857  011D98  D015               	goto	l90
 15858  011D9A                     l89:
 15859                           
 15860                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 15861  011D9A  0E01               	movlw	1
 15862  011D9C  0100               	movlb	0	; () banked
 15863  011D9E  6FBE               	movwf	LCD_Write@mode& (0+255),b
 15864  011DA0  90D8               	bcf	status,0,c
 15865  011DA2  0100               	movlb	0	; () banked
 15866  011DA4  35F2               	rlcf	LCD_Init@i& (0+255),w,b
 15867  011DA6  6EF6               	movwf	tblptrl,c
 15868  011DA8  0100               	movlb	0	; () banked
 15869  011DAA  35F3               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15870  011DAC  6EF7               	movwf	tblptrh,c
 15871  011DAE  0EE5               	movlw	low _InitList
 15872  011DB0  26F6               	addwf	tblptrl,f,c
 15873  011DB2  0EFC               	movlw	high _InitList
 15874  011DB4  22F7               	addwfc	tblptrh,f,c
 15875  011DB6                     	if	1	;There are 3 active tblptr bytes
 15876  011DB6  6AF8               	clrf	tblptru,c
 15877  011DB8  0E00               	movlw	low (__mediumconst shr (0+16))
 15878  011DBA  22F8               	addwfc	tblptru,f,c
 15879  011DBC                     	endif
 15880  011DBC  0008               	tblrd		*
 15881  011DBE  50F5               	movf	tablat,w,c
 15882  011DC0  EC64  F0A3         	call	_LCD_Write
 15883  011DC4                     l90:
 15884  011DC4  0100               	movlb	0	; () banked
 15885  011DC6  4BF2               	infsnz	LCD_Init@i& (0+255),f,b
 15886  011DC8  2BF3               	incf	(LCD_Init@i+1)& (0+255),f,b
 15887                           
 15888                           ; BSR set to: 0
 15889  011DCA  0100               	movlb	0	; () banked
 15890  011DCC  51F3               	movf	(LCD_Init@i+1)& (0+255),w,b
 15891  011DCE  E101               	bnz	l12250
 15892  011DD0  D770               	goto	L9
 15893  011DD2                     u8130:
 15894  011DD2                     l12250:
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;LCD.c: 185: }
 15898                           ;LCD.c: 186: }
 15899                           ;LCD.c: 187: delay_ms(100);
 15900  011DD2  0E00               	movlw	0
 15901  011DD4  0100               	movlb	0	; () banked
 15902  011DD6  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 15903  011DD8  0E64               	movlw	100
 15904  011DDA  6FBB               	movwf	delay_ms@ms& (0+255),b
 15905  011DDC  EC76  F09D         	call	_delay_ms	;wreg free
 15906                           
 15907                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 15908  011DE0  0E00               	movlw	0
 15909  011DE2  0100               	movlb	0	; () banked
 15910  011DE4  6FBE               	movwf	LCD_Write@mode& (0+255),b
 15911  011DE6  0E29               	movlw	41
 15912  011DE8  EC64  F0A3         	call	_LCD_Write
 15913                           
 15914                           ;LCD.c: 189: Set_Rotation(1);
 15915  011DEC  0E01               	movlw	1
 15916  011DEE  EC5D  F099         	call	_Set_Rotation
 15917                           
 15918                           ;LCD.c: 191: delay_ms(100);
 15919  011DF2  0E00               	movlw	0
 15920  011DF4  0100               	movlb	0	; () banked
 15921  011DF6  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 15922  011DF8  0E64               	movlw	100
 15923  011DFA  6FBB               	movwf	delay_ms@ms& (0+255),b
 15924  011DFC  EC76  F09D         	call	_delay_ms	;wreg free
 15925                           
 15926                           ;LCD.c: 192: LCD_Fill(0x0000);
 15927  011E00  0E00               	movlw	0
 15928  011E02  0100               	movlb	0	; () banked
 15929  011E04  6FC5               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 15930  011E06  0E00               	movlw	0
 15931  011E08  6FC4               	movwf	LCD_Fill@pColour& (0+255),b
 15932  011E0A  EC93  F09F         	call	_LCD_Fill	;wreg free
 15933  011E0E  0012               	return		;funcret
 15934  011E10                     __end_of_LCD_Init:
 15935                           	opt stack 0
 15936                           tosu	equ	0xFFF
 15937                           tosh	equ	0xFFE
 15938                           tosl	equ	0xFFD
 15939                           pclath	equ	0xFFA
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           postinc0	equ	0xFEE
 15948                           wreg	equ	0xFE8
 15949                           indf1	equ	0xFE7
 15950                           postdec1	equ	0xFE5
 15951                           fsr1h	equ	0xFE2
 15952                           fsr1l	equ	0xFE1
 15953                           indf2	equ	0xFDF
 15954                           postinc2	equ	0xFDE
 15955                           postdec2	equ	0xFDD
 15956                           plusw2	equ	0xFDB
 15957                           fsr2h	equ	0xFDA
 15958                           fsr2l	equ	0xFD9
 15959                           status	equ	0xFD8
 15960                           
 15961 ;; *************** function _Set_Rotation *****************
 15962 ;; Defined at:
 15963 ;;		line 248 in file "Library/LCD.c"
 15964 ;; Parameters:    Size  Location     Type
 15965 ;;  m               1    wreg     unsigned char 
 15966 ;; Auto vars:     Size  Location     Type
 15967 ;;  m               1    5[BANK0 ] unsigned char 
 15968 ;;  rotation        1    6[BANK0 ] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      void 
 15971 ;; Registers used:
 15972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15973 ;; Tracked objects:
 15974 ;;		On entry : 0/0
 15975 ;;		On exit  : 0/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15982 ;;Total ram usage:        2 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:    9
 15985 ;; This function calls:
 15986 ;;		_LCD_Write
 15987 ;; This function is called by:
 15988 ;;		_LCD_Init
 15989 ;; This function uses a non-reentrant model
 15990 ;;
 15991                           
 15992                           	psect	text88
 15993  0132BA                     __ptext88:
 15994                           	opt stack 0
 15995  0132BA                     _Set_Rotation:
 15996                           	opt stack 19
 15997                           
 15998                           ;incstack = 0
 15999                           ;Set_Rotation@m stored from wreg
 16000  0132BA  0100               	movlb	0	; () banked
 16001  0132BC  6FC0               	movwf	Set_Rotation@m& (0+255),b
 16002                           
 16003                           ;LCD.c: 250: UINT8 rotation = 0x00;
 16004  0132BE  0E00               	movlw	0
 16005  0132C0  0100               	movlb	0	; () banked
 16006  0132C2  6FC1               	movwf	Set_Rotation@rotation& (0+255),b
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 16010  0132C4  0E00               	movlw	0
 16011  0132C6  0100               	movlb	0	; () banked
 16012  0132C8  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16013  0132CA  0E36               	movlw	54
 16014  0132CC  EC64  F0A3         	call	_LCD_Write
 16015                           
 16016                           ;LCD.c: 253: rotation = (m % 4);
 16017  0132D0  0100               	movlb	0	; () banked
 16018  0132D2  51C0               	movf	Set_Rotation@m& (0+255),w,b
 16019  0132D4  0B03               	andlw	3
 16020  0132D6  0100               	movlb	0	; () banked
 16021  0132D8  6FC1               	movwf	Set_Rotation@rotation& (0+255),b
 16022                           
 16023                           ;LCD.c: 255: switch(rotation)
 16024  0132DA  D02C               	goto	l117
 16025  0132DC                     
 16026                           ; BSR set to: 0
 16027                           ;LCD.c: 258: {
 16028                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 16029                           
 16030                           ; BSR set to: 0
 16031  0132DC  0E01               	movlw	1
 16032  0132DE  0100               	movlb	0	; () banked
 16033  0132E0  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16034  0132E2  0EC8               	movlw	200
 16035  0132E4  EC64  F0A3         	call	_LCD_Write
 16036                           
 16037                           ;LCD.c: 260: w = 128;
 16038  0132E8  0E80               	movlw	128
 16039  0132EA  6E50               	movwf	_w,c
 16040                           
 16041                           ;LCD.c: 261: l = 128;
 16042  0132EC  0E80               	movlw	128
 16043  0132EE  6E4F               	movwf	_l,c
 16044                           
 16045                           ;LCD.c: 262: break;
 16046  0132F0  0012               	return	
 16047  0132F2                     
 16048                           ;LCD.c: 265: {
 16049                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 16050  0132F2  0E01               	movlw	1
 16051  0132F4  0100               	movlb	0	; () banked
 16052  0132F6  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16053  0132F8  0EA8               	movlw	168
 16054  0132FA  EC64  F0A3         	call	_LCD_Write
 16055                           
 16056                           ;LCD.c: 267: w = 128;
 16057  0132FE  0E80               	movlw	128
 16058  013300  6E50               	movwf	_w,c
 16059                           
 16060                           ;LCD.c: 268: l = 128;
 16061  013302  0E80               	movlw	128
 16062  013304  6E4F               	movwf	_l,c
 16063                           
 16064                           ;LCD.c: 269: break;
 16065  013306  0012               	return	
 16066  013308                     
 16067                           ;LCD.c: 272: {
 16068                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 16069  013308  0E01               	movlw	1
 16070  01330A  0100               	movlb	0	; () banked
 16071  01330C  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16072  01330E  0E08               	movlw	8
 16073  013310  EC64  F0A3         	call	_LCD_Write
 16074                           
 16075                           ;LCD.c: 274: w = 128;
 16076  013314  0E80               	movlw	128
 16077  013316  6E50               	movwf	_w,c
 16078                           
 16079                           ;LCD.c: 275: l = 128;
 16080  013318  0E80               	movlw	128
 16081  01331A  6E4F               	movwf	_l,c
 16082                           
 16083                           ;LCD.c: 276: break;
 16084  01331C  0012               	return	
 16085  01331E                     
 16086                           ;LCD.c: 279: {
 16087                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 16088  01331E  0E01               	movlw	1
 16089  013320  0100               	movlb	0	; () banked
 16090  013322  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16091  013324  0E68               	movlw	104
 16092  013326  EC64  F0A3         	call	_LCD_Write
 16093                           
 16094                           ;LCD.c: 281: w = 128;
 16095  01332A  0E80               	movlw	128
 16096  01332C  6E50               	movwf	_w,c
 16097                           
 16098                           ;LCD.c: 282: l = 128;
 16099  01332E  0E80               	movlw	128
 16100  013330  6E4F               	movwf	_l,c
 16101                           
 16102                           ;LCD.c: 284: }
 16103                           ;LCD.c: 285: }
 16104                           
 16105                           ;LCD.c: 283: break;
 16106  013332  0012               	return	
 16107  013334                     l117:
 16108  013334  0100               	movlb	0	; () banked
 16109  013336  51C1               	movf	Set_Rotation@rotation& (0+255),w,b
 16110                           
 16111                           ; Switch size 1, requested type "space"
 16112                           ; Number of cases is 4, Range of values is 0 to 3
 16113                           ; switch strategies available:
 16114                           ; Name         Instructions Cycles
 16115                           ; simple_byte           13     7 (average)
 16116                           ;	Chosen strategy is simple_byte
 16117  013338  0A00               	xorlw	0	; case 0
 16118  01333A  B4D8               	btfsc	status,2,c
 16119  01333C  D7CF               	goto	l118
 16120  01333E  0A01               	xorlw	1	; case 1
 16121  013340  B4D8               	btfsc	status,2,c
 16122  013342  D7D7               	goto	l120
 16123  013344  0A03               	xorlw	3	; case 2
 16124  013346  B4D8               	btfsc	status,2,c
 16125  013348  D7DF               	goto	l121
 16126  01334A  0A01               	xorlw	1	; case 3
 16127  01334C  A4D8               	btfss	status,2,c
 16128  01334E  0012               	return	
 16129  013350  D7E6               	goto	l122
 16130  013352                     __end_of_Set_Rotation:
 16131                           	opt stack 0
 16132                           tosu	equ	0xFFF
 16133                           tosh	equ	0xFFE
 16134                           tosl	equ	0xFFD
 16135                           pclath	equ	0xFFA
 16136                           tblptru	equ	0xFF8
 16137                           tblptrh	equ	0xFF7
 16138                           tblptrl	equ	0xFF6
 16139                           tablat	equ	0xFF5
 16140                           prodh	equ	0xFF4
 16141                           prodl	equ	0xFF3
 16142                           intcon	equ	0xFF2
 16143                           postinc0	equ	0xFEE
 16144                           wreg	equ	0xFE8
 16145                           indf1	equ	0xFE7
 16146                           postdec1	equ	0xFE5
 16147                           fsr1h	equ	0xFE2
 16148                           fsr1l	equ	0xFE1
 16149                           indf2	equ	0xFDF
 16150                           postinc2	equ	0xFDE
 16151                           postdec2	equ	0xFDD
 16152                           plusw2	equ	0xFDB
 16153                           fsr2h	equ	0xFDA
 16154                           fsr2l	equ	0xFD9
 16155                           status	equ	0xFD8
 16156                           
 16157 ;; *************** function _LCD_Fill *****************
 16158 ;; Defined at:
 16159 ;;		line 287 in file "Library/LCD.c"
 16160 ;; Parameters:    Size  Location     Type
 16161 ;;  pColour         2    9[BANK0 ] unsigned short 
 16162 ;; Auto vars:     Size  Location     Type
 16163 ;;  j               1   12[BANK0 ] unsigned char 
 16164 ;;  i               1   11[BANK0 ] unsigned char 
 16165 ;; Return value:  Size  Location     Type
 16166 ;;                  1    wreg      void 
 16167 ;; Registers used:
 16168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16169 ;; Tracked objects:
 16170 ;;		On entry : 0/0
 16171 ;;		On exit  : 0/0
 16172 ;;		Unchanged: 0/0
 16173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16174 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16178 ;;Total ram usage:        4 bytes
 16179 ;; Hardware stack levels used:    1
 16180 ;; Hardware stack levels required when called:   10
 16181 ;; This function calls:
 16182 ;;		_LCD_Word_Write
 16183 ;;		_Set_Addr_Window
 16184 ;; This function is called by:
 16185 ;;		_LCD_Init
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           	psect	text89
 16190  013F26                     __ptext89:
 16191                           	opt stack 0
 16192  013F26                     _LCD_Fill:
 16193                           	opt stack 18
 16194                           
 16195                           ;LCD.c: 296: UINT8 i = 0x00;
 16196                           
 16197                           ;incstack = 0
 16198  013F26  0E00               	movlw	0
 16199  013F28  0100               	movlb	0	; () banked
 16200  013F2A  6FC6               	movwf	LCD_Fill@i& (0+255),b
 16201                           
 16202                           ;LCD.c: 297: UINT8 j = 0x00;
 16203  013F2C  0E00               	movlw	0
 16204  013F2E  0100               	movlb	0	; () banked
 16205  013F30  6FC7               	movwf	LCD_Fill@j& (0+255),b
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16209  013F32  0E00               	movlw	0
 16210  013F34  0100               	movlb	0	; () banked
 16211  013F36  6FC0               	movwf	Set_Addr_Window@ys& (0+255),b
 16212  013F38  0450               	decf	_w,w,c
 16213  013F3A  0100               	movlb	0	; () banked
 16214  013F3C  6FC1               	movwf	Set_Addr_Window@xe& (0+255),b
 16215  013F3E  044F               	decf	_l,w,c
 16216  013F40  0100               	movlb	0	; () banked
 16217  013F42  6FC2               	movwf	Set_Addr_Window@ye& (0+255),b
 16218  013F44  0E00               	movlw	0
 16219  013F46  ECC9  F096         	call	_Set_Addr_Window
 16220                           
 16221                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16222  013F4A  C04F  F0C7         	movff	_l,LCD_Fill@j
 16223  013F4E                     l11972:
 16224  013F4E  0100               	movlb	0	; () banked
 16225  013F50  51C7               	movf	LCD_Fill@j& (0+255),w,b
 16226  013F52  0100               	movlb	0	; () banked
 16227  013F54  B4D8               	btfsc	status,2,c
 16228  013F56  0012               	return	
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16232                           
 16233                           ; BSR set to: 0
 16234  013F58  C050  F0C6         	movff	_w,LCD_Fill@i
 16235  013F5C                     l11976:
 16236                           
 16237                           ; BSR set to: 0
 16238  013F5C  0100               	movlb	0	; () banked
 16239  013F5E  51C6               	movf	LCD_Fill@i& (0+255),w,b
 16240  013F60  0100               	movlb	0	; () banked
 16241  013F62  B4D8               	btfsc	status,2,c
 16242  013F64  D009               	goto	u7840
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16246                           
 16247                           ; BSR set to: 0
 16248                           
 16249                           ; BSR set to: 0
 16250  013F66  C0C4  F0C0         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16251  013F6A  C0C5  F0C1         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16252  013F6E  ECC5  F0A3         	call	_LCD_Word_Write	;wreg free
 16253  013F72  0100               	movlb	0	; () banked
 16254  013F74  07C6               	decf	LCD_Fill@i& (0+255),f,b
 16255  013F76  D7F2               	goto	l11976
 16256  013F78                     u7840:
 16257                           
 16258                           ; BSR set to: 0
 16259                           
 16260                           ; BSR set to: 0
 16261  013F78  0100               	movlb	0	; () banked
 16262  013F7A  07C7               	decf	LCD_Fill@j& (0+255),f,b
 16263  013F7C  D7E8               	goto	l11972
 16264  013F7E                     __end_of_LCD_Fill:
 16265                           	opt stack 0
 16266                           tosu	equ	0xFFF
 16267                           tosh	equ	0xFFE
 16268                           tosl	equ	0xFFD
 16269                           pclath	equ	0xFFA
 16270                           tblptru	equ	0xFF8
 16271                           tblptrh	equ	0xFF7
 16272                           tblptrl	equ	0xFF6
 16273                           tablat	equ	0xFF5
 16274                           prodh	equ	0xFF4
 16275                           prodl	equ	0xFF3
 16276                           intcon	equ	0xFF2
 16277                           postinc0	equ	0xFEE
 16278                           wreg	equ	0xFE8
 16279                           indf1	equ	0xFE7
 16280                           postdec1	equ	0xFE5
 16281                           fsr1h	equ	0xFE2
 16282                           fsr1l	equ	0xFE1
 16283                           indf2	equ	0xFDF
 16284                           postinc2	equ	0xFDE
 16285                           postdec2	equ	0xFDD
 16286                           plusw2	equ	0xFDB
 16287                           fsr2h	equ	0xFDA
 16288                           fsr2l	equ	0xFD9
 16289                           status	equ	0xFD8
 16290                           
 16291 ;; *************** function _Set_Addr_Window *****************
 16292 ;; Defined at:
 16293 ;;		line 214 in file "Library/LCD.c"
 16294 ;; Parameters:    Size  Location     Type
 16295 ;;  xs              1    wreg     unsigned char 
 16296 ;;  ys              1    5[BANK0 ] unsigned char 
 16297 ;;  xe              1    6[BANK0 ] unsigned char 
 16298 ;;  ye              1    7[BANK0 ] unsigned char 
 16299 ;; Auto vars:     Size  Location     Type
 16300 ;;  xs              1    8[BANK0 ] unsigned char 
 16301 ;; Return value:  Size  Location     Type
 16302 ;;                  1    wreg      void 
 16303 ;; Registers used:
 16304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16305 ;; Tracked objects:
 16306 ;;		On entry : 0/0
 16307 ;;		On exit  : 0/0
 16308 ;;		Unchanged: 0/0
 16309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16310 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16313 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16314 ;;Total ram usage:        4 bytes
 16315 ;; Hardware stack levels used:    1
 16316 ;; Hardware stack levels required when called:    9
 16317 ;; This function calls:
 16318 ;;		_LCD_Write
 16319 ;; This function is called by:
 16320 ;;		_LCD_Fill
 16321 ;;		_LCD_FillRectangle
 16322 ;;		_LCD_DrawField
 16323 ;;		_RAM_Address_Set
 16324 ;;		_LCD_DrawPixel
 16325 ;; This function uses a non-reentrant model
 16326 ;;
 16327                           
 16328                           	psect	text90
 16329  012D92                     __ptext90:
 16330                           	opt stack 0
 16331  012D92                     _Set_Addr_Window:
 16332                           	opt stack 18
 16333                           
 16334                           ; BSR set to: 0
 16335                           ;incstack = 0
 16336                           ;Set_Addr_Window@xs stored from wreg
 16337  012D92  0100               	movlb	0	; () banked
 16338  012D94  6FC3               	movwf	Set_Addr_Window@xs& (0+255),b
 16339                           
 16340                           ;LCD.c: 216: ys+=2;
 16341  012D96  0E02               	movlw	2
 16342  012D98  0100               	movlb	0	; () banked
 16343  012D9A  27C0               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16344                           
 16345                           ;LCD.c: 217: ye+=2;
 16346  012D9C  0E02               	movlw	2
 16347  012D9E  0100               	movlb	0	; () banked
 16348  012DA0  27C2               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16349                           
 16350                           ;LCD.c: 218: xs+=3;
 16351  012DA2  0E03               	movlw	3
 16352  012DA4  0100               	movlb	0	; () banked
 16353  012DA6  27C3               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16354                           
 16355                           ;LCD.c: 219: xe+=3;
 16356  012DA8  0E03               	movlw	3
 16357  012DAA  0100               	movlb	0	; () banked
 16358  012DAC  27C1               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16362  012DAE  0E00               	movlw	0
 16363  012DB0  0100               	movlb	0	; () banked
 16364  012DB2  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16365  012DB4  0E2A               	movlw	42
 16366  012DB6  EC64  F0A3         	call	_LCD_Write
 16367                           
 16368                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16369  012DBA  0E01               	movlw	1
 16370  012DBC  0100               	movlb	0	; () banked
 16371  012DBE  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16372  012DC0  0E00               	movlw	0
 16373  012DC2  EC64  F0A3         	call	_LCD_Write
 16374                           
 16375                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16376  012DC6  0E01               	movlw	1
 16377  012DC8  0100               	movlb	0	; () banked
 16378  012DCA  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16379  012DCC  0100               	movlb	0	; () banked
 16380  012DCE  51C3               	movf	Set_Addr_Window@xs& (0+255),w,b
 16381  012DD0  EC64  F0A3         	call	_LCD_Write
 16382                           
 16383                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16384  012DD4  0E01               	movlw	1
 16385  012DD6  0100               	movlb	0	; () banked
 16386  012DD8  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16387  012DDA  0E00               	movlw	0
 16388  012DDC  EC64  F0A3         	call	_LCD_Write
 16389                           
 16390                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16391  012DE0  0E01               	movlw	1
 16392  012DE2  0100               	movlb	0	; () banked
 16393  012DE4  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16394  012DE6  0100               	movlb	0	; () banked
 16395  012DE8  51C1               	movf	Set_Addr_Window@xe& (0+255),w,b
 16396  012DEA  EC64  F0A3         	call	_LCD_Write
 16397                           
 16398                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16399  012DEE  0E00               	movlw	0
 16400  012DF0  0100               	movlb	0	; () banked
 16401  012DF2  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16402  012DF4  0E2B               	movlw	43
 16403  012DF6  EC64  F0A3         	call	_LCD_Write
 16404                           
 16405                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16406  012DFA  0E01               	movlw	1
 16407  012DFC  0100               	movlb	0	; () banked
 16408  012DFE  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16409  012E00  0E00               	movlw	0
 16410  012E02  EC64  F0A3         	call	_LCD_Write
 16411                           
 16412                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16413  012E06  0E01               	movlw	1
 16414  012E08  0100               	movlb	0	; () banked
 16415  012E0A  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16416  012E0C  0100               	movlb	0	; () banked
 16417  012E0E  51C0               	movf	Set_Addr_Window@ys& (0+255),w,b
 16418  012E10  EC64  F0A3         	call	_LCD_Write
 16419                           
 16420                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16421  012E14  0E01               	movlw	1
 16422  012E16  0100               	movlb	0	; () banked
 16423  012E18  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16424  012E1A  0E00               	movlw	0
 16425  012E1C  EC64  F0A3         	call	_LCD_Write
 16426                           
 16427                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16428  012E20  0E01               	movlw	1
 16429  012E22  0100               	movlb	0	; () banked
 16430  012E24  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16431  012E26  0100               	movlb	0	; () banked
 16432  012E28  51C2               	movf	Set_Addr_Window@ye& (0+255),w,b
 16433  012E2A  EC64  F0A3         	call	_LCD_Write
 16434                           
 16435                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16436  012E2E  0E00               	movlw	0
 16437  012E30  0100               	movlb	0	; () banked
 16438  012E32  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16439  012E34  0E2C               	movlw	44
 16440  012E36  EC64  F0A3         	call	_LCD_Write
 16441  012E3A  0012               	return		;funcret
 16442  012E3C                     __end_of_Set_Addr_Window:
 16443                           	opt stack 0
 16444                           tosu	equ	0xFFF
 16445                           tosh	equ	0xFFE
 16446                           tosl	equ	0xFFD
 16447                           pclath	equ	0xFFA
 16448                           tblptru	equ	0xFF8
 16449                           tblptrh	equ	0xFF7
 16450                           tblptrl	equ	0xFF6
 16451                           tablat	equ	0xFF5
 16452                           prodh	equ	0xFF4
 16453                           prodl	equ	0xFF3
 16454                           intcon	equ	0xFF2
 16455                           postinc0	equ	0xFEE
 16456                           wreg	equ	0xFE8
 16457                           indf1	equ	0xFE7
 16458                           postdec1	equ	0xFE5
 16459                           fsr1h	equ	0xFE2
 16460                           fsr1l	equ	0xFE1
 16461                           indf2	equ	0xFDF
 16462                           postinc2	equ	0xFDE
 16463                           postdec2	equ	0xFDD
 16464                           plusw2	equ	0xFDB
 16465                           fsr2h	equ	0xFDA
 16466                           fsr2l	equ	0xFD9
 16467                           status	equ	0xFD8
 16468                           
 16469 ;; *************** function _LCD_Word_Write *****************
 16470 ;; Defined at:
 16471 ;;		line 198 in file "Library/LCD.c"
 16472 ;; Parameters:    Size  Location     Type
 16473 ;;  value           2    5[BANK0 ] unsigned short 
 16474 ;; Auto vars:     Size  Location     Type
 16475 ;;		None
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  1    wreg      void 
 16478 ;; Registers used:
 16479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16480 ;; Tracked objects:
 16481 ;;		On entry : 0/0
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16485 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;Total ram usage:        2 bytes
 16490 ;; Hardware stack levels used:    1
 16491 ;; Hardware stack levels required when called:    9
 16492 ;; This function calls:
 16493 ;;		_LCD_Write
 16494 ;; This function is called by:
 16495 ;;		_LCD_Fill
 16496 ;;		_LCD_FillRectangle
 16497 ;;		_LCD_DrawField
 16498 ;;		_LCD_DrawPixel
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text91
 16503  01478A                     __ptext91:
 16504                           	opt stack 0
 16505  01478A                     _LCD_Word_Write:
 16506                           	opt stack 18
 16507                           
 16508                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16509                           
 16510                           ;incstack = 0
 16511  01478A  0E01               	movlw	1
 16512  01478C  0100               	movlb	0	; () banked
 16513  01478E  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16514  014790  0100               	movlb	0	; () banked
 16515  014792  51C1               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16516  014794  EC64  F0A3         	call	_LCD_Write
 16517                           
 16518                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16519  014798  0E01               	movlw	1
 16520  01479A  0100               	movlb	0	; () banked
 16521  01479C  6FBE               	movwf	LCD_Write@mode& (0+255),b
 16522  01479E  0100               	movlb	0	; () banked
 16523  0147A0  51C0               	movf	LCD_Word_Write@value& (0+255),w,b
 16524  0147A2  EC64  F0A3         	call	_LCD_Write
 16525  0147A6  0012               	return		;funcret
 16526  0147A8                     __end_of_LCD_Word_Write:
 16527                           	opt stack 0
 16528                           tosu	equ	0xFFF
 16529                           tosh	equ	0xFFE
 16530                           tosl	equ	0xFFD
 16531                           pclath	equ	0xFFA
 16532                           tblptru	equ	0xFF8
 16533                           tblptrh	equ	0xFF7
 16534                           tblptrl	equ	0xFF6
 16535                           tablat	equ	0xFF5
 16536                           prodh	equ	0xFF4
 16537                           prodl	equ	0xFF3
 16538                           intcon	equ	0xFF2
 16539                           postinc0	equ	0xFEE
 16540                           wreg	equ	0xFE8
 16541                           indf1	equ	0xFE7
 16542                           postdec1	equ	0xFE5
 16543                           fsr1h	equ	0xFE2
 16544                           fsr1l	equ	0xFE1
 16545                           indf2	equ	0xFDF
 16546                           postinc2	equ	0xFDE
 16547                           postdec2	equ	0xFDD
 16548                           plusw2	equ	0xFDB
 16549                           fsr2h	equ	0xFDA
 16550                           fsr2l	equ	0xFD9
 16551                           status	equ	0xFD8
 16552                           
 16553 ;; *************** function _LCD_Write *****************
 16554 ;; Defined at:
 16555 ;;		line 67 in file "Library/LCD.c"
 16556 ;; Parameters:    Size  Location     Type
 16557 ;;  value           1    wreg     unsigned char 
 16558 ;;  mode            1    3[BANK0 ] enum E6761
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  value           1    4[BANK0 ] unsigned char 
 16561 ;; Return value:  Size  Location     Type
 16562 ;;                  1    wreg      void 
 16563 ;; Registers used:
 16564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16565 ;; Tracked objects:
 16566 ;;		On entry : 0/0
 16567 ;;		On exit  : 0/0
 16568 ;;		Unchanged: 0/0
 16569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16570 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;Total ram usage:        2 bytes
 16575 ;; Hardware stack levels used:    1
 16576 ;; Hardware stack levels required when called:    8
 16577 ;; This function calls:
 16578 ;;		_Mode_Set
 16579 ;;		_SPI_Send
 16580 ;; This function is called by:
 16581 ;;		_LCD_Init
 16582 ;;		_LCD_Word_Write
 16583 ;;		_Set_Addr_Window
 16584 ;;		_Set_Rotation
 16585 ;;		_LCD_WriteCMD
 16586 ;;		_LCD_WriteData
 16587 ;;		_LCD_Data_Write
 16588 ;;		_LCD_Data_Write_4k
 16589 ;;		_Invert_Display
 16590 ;; This function uses a non-reentrant model
 16591 ;;
 16592                           
 16593                           	psect	text92
 16594  0146C8                     __ptext92:
 16595                           	opt stack 0
 16596  0146C8                     _LCD_Write:
 16597                           	opt stack 18
 16598                           
 16599                           ;incstack = 0
 16600                           ;LCD_Write@value stored from wreg
 16601  0146C8  0100               	movlb	0	; () banked
 16602  0146CA  6FBF               	movwf	LCD_Write@value& (0+255),b
 16603                           
 16604                           ;LCD.c: 89: Mode_Set(mode);
 16605  0146CC  0100               	movlb	0	; () banked
 16606  0146CE  51BE               	movf	LCD_Write@mode& (0+255),w,b
 16607  0146D0  ECC4  F0A4         	call	_Mode_Set
 16608                           
 16609                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16610  0146D4  0E7D               	movlw	low _SPI2
 16611  0146D6  0100               	movlb	0	; () banked
 16612  0146D8  6FBB               	movwf	SPI_Send@pInput& (0+255),b
 16613  0146DA  0E03               	movlw	high _SPI2
 16614  0146DC  0100               	movlb	0	; () banked
 16615  0146DE  6FBC               	movwf	(SPI_Send@pInput+1)& (0+255),b
 16616  0146E0  C0BF  F0BD         	movff	LCD_Write@value,SPI_Send@pData
 16617  0146E4  EC0B  F09D         	call	_SPI_Send	;wreg free
 16618  0146E8  0012               	return		;funcret
 16619  0146EA                     __end_of_LCD_Write:
 16620                           	opt stack 0
 16621                           tosu	equ	0xFFF
 16622                           tosh	equ	0xFFE
 16623                           tosl	equ	0xFFD
 16624                           pclath	equ	0xFFA
 16625                           tblptru	equ	0xFF8
 16626                           tblptrh	equ	0xFF7
 16627                           tblptrl	equ	0xFF6
 16628                           tablat	equ	0xFF5
 16629                           prodh	equ	0xFF4
 16630                           prodl	equ	0xFF3
 16631                           intcon	equ	0xFF2
 16632                           postinc0	equ	0xFEE
 16633                           wreg	equ	0xFE8
 16634                           indf1	equ	0xFE7
 16635                           postdec1	equ	0xFE5
 16636                           fsr1h	equ	0xFE2
 16637                           fsr1l	equ	0xFE1
 16638                           indf2	equ	0xFDF
 16639                           postinc2	equ	0xFDE
 16640                           postdec2	equ	0xFDD
 16641                           plusw2	equ	0xFDB
 16642                           fsr2h	equ	0xFDA
 16643                           fsr2l	equ	0xFD9
 16644                           status	equ	0xFD8
 16645                           
 16646 ;; *************** function _SPI_Send *****************
 16647 ;; Defined at:
 16648 ;;		line 226 in file "Library/SPI.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16651 ;;		 -> SPI1(11), SPI2(11), 
 16652 ;;  pData           1    2[BANK0 ] unsigned char 
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;		None
 16655 ;; Return value:  Size  Location     Type
 16656 ;;                  1    wreg      unsigned char 
 16657 ;; Registers used:
 16658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16664 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16668 ;;Total ram usage:        3 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    7
 16671 ;; This function calls:
 16672 ;;		Nothing
 16673 ;; This function is called by:
 16674 ;;		_LCD_Write
 16675 ;;		_OutSeg
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           	psect	text93
 16680  013A16                     __ptext93:
 16681                           	opt stack 0
 16682  013A16                     _SPI_Send:
 16683                           	opt stack 18
 16684                           
 16685                           ;SPI.c: 253: switch (pInput->mChannel)
 16686                           
 16687                           ;incstack = 0
 16688  013A16  D026               	goto	l678
 16689  013A18                     
 16690                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 16691  013A18  C0AD  FFD9         	movff	_PortC+4,fsr2l
 16692  013A1C  C0AE  FFDA         	movff	_PortC+5,fsr2h
 16693  013A20  0100               	movlb	0	; () banked
 16694  013A22  94DF               	bcf	indf2,2,c
 16695                           
 16696                           ; BSR set to: 0
 16697                           ;SPI.c: 257: SSP1BUF = pData;
 16698  013A24  C0BD  FFC9         	movff	SPI_Send@pData,4041	;volatile
 16699  013A28                     
 16700                           ; BSR set to: 0
 16701  013A28  A0C7               	btfss	4039,0,c	;volatile
 16702  013A2A  D7FE               	goto	l681
 16703                           
 16704                           ;SPI.c: 259: pData = SSP1BUF;
 16705  013A2C  CFC9 F0BD          	movff	4041,SPI_Send@pData	;volatile
 16706                           
 16707                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 16708  013A30  C0AD  FFD9         	movff	_PortC+4,fsr2l
 16709  013A34  C0AE  FFDA         	movff	_PortC+5,fsr2h
 16710  013A38  0100               	movlb	0	; () banked
 16711  013A3A  84DF               	bsf	indf2,2,c
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;SPI.c: 261: return pData;
 16715                           ;	Return value of _SPI_Send is never used
 16716  013A3C  0012               	return	
 16717  013A3E                     
 16718                           ; BSR set to: 0
 16719                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 16720                           
 16721                           ; BSR set to: 0
 16722  013A3E  C0A3  FFD9         	movff	_PortD+4,fsr2l
 16723  013A42  C0A4  FFDA         	movff	_PortD+5,fsr2h
 16724  013A46  0100               	movlb	0	; () banked
 16725  013A48  9EDF               	bcf	indf2,7,c
 16726                           
 16727                           ; BSR set to: 0
 16728                           ;SPI.c: 264: SSP2BUF = pData;
 16729  013A4A  C0BD  FF6F         	movff	SPI_Send@pData,3951	;volatile
 16730  013A4E                     
 16731                           ; BSR set to: 0
 16732  013A4E  A06D               	btfss	3949,0,c	;volatile
 16733  013A50  D7FE               	goto	l686
 16734                           
 16735                           ;SPI.c: 266: pData = SSP2BUF;
 16736  013A52  CF6F F0BD          	movff	3951,SPI_Send@pData	;volatile
 16737                           
 16738                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 16739  013A56  C0A3  FFD9         	movff	_PortD+4,fsr2l
 16740  013A5A  C0A4  FFDA         	movff	_PortD+5,fsr2h
 16741  013A5E  0100               	movlb	0	; () banked
 16742  013A60  8EDF               	bsf	indf2,7,c
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;SPI.c: 269: };
 16746                           
 16747                           ; BSR set to: 0
 16748                           ;SPI.c: 268: return pData;
 16749                           ;	Return value of _SPI_Send is never used
 16750  013A62  0012               	return	
 16751  013A64                     l678:
 16752                           
 16753                           ; BSR set to: 0
 16754  013A64  0100               	movlb	0	; () banked
 16755  013A66  EE20 F002          	lfsr	2,2
 16756  013A6A  51BB               	movf	SPI_Send@pInput& (0+255),w,b
 16757  013A6C  26D9               	addwf	fsr2l,f,c
 16758  013A6E  51BC               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 16759  013A70  22DA               	addwfc	fsr2h,f,c
 16760  013A72  50DF               	movf	indf2,w,c
 16761                           
 16762                           ; Switch size 1, requested type "space"
 16763                           ; Number of cases is 2, Range of values is 0 to 1
 16764                           ; switch strategies available:
 16765                           ; Name         Instructions Cycles
 16766                           ; simple_byte            7     4 (average)
 16767                           ;	Chosen strategy is simple_byte
 16768  013A74  0A00               	xorlw	0	; case 0
 16769  013A76  B4D8               	btfsc	status,2,c
 16770  013A78  D7CF               	goto	l679
 16771  013A7A  0A01               	xorlw	1	; case 1
 16772  013A7C  A4D8               	btfss	status,2,c
 16773  013A7E  0012               	return	
 16774  013A80  D7DE               	goto	l684
 16775  013A82                     __end_of_SPI_Send:
 16776                           	opt stack 0
 16777                           tosu	equ	0xFFF
 16778                           tosh	equ	0xFFE
 16779                           tosl	equ	0xFFD
 16780                           pclath	equ	0xFFA
 16781                           tblptru	equ	0xFF8
 16782                           tblptrh	equ	0xFF7
 16783                           tblptrl	equ	0xFF6
 16784                           tablat	equ	0xFF5
 16785                           prodh	equ	0xFF4
 16786                           prodl	equ	0xFF3
 16787                           intcon	equ	0xFF2
 16788                           postinc0	equ	0xFEE
 16789                           wreg	equ	0xFE8
 16790                           indf1	equ	0xFE7
 16791                           postdec1	equ	0xFE5
 16792                           fsr1h	equ	0xFE2
 16793                           fsr1l	equ	0xFE1
 16794                           indf2	equ	0xFDF
 16795                           postinc2	equ	0xFDE
 16796                           postdec2	equ	0xFDD
 16797                           plusw2	equ	0xFDB
 16798                           fsr2h	equ	0xFDA
 16799                           fsr2l	equ	0xFD9
 16800                           status	equ	0xFD8
 16801                           
 16802 ;; *************** function _Mode_Set *****************
 16803 ;; Defined at:
 16804 ;;		line 40 in file "Library/LCD.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;  pMode           1    wreg     enum E6761
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;  pMode           1    0[BANK0 ] enum E6761
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  1    wreg      void 
 16811 ;; Registers used:
 16812 ;;		wreg
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;Total ram usage:        1 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    7
 16825 ;; This function calls:
 16826 ;;		Nothing
 16827 ;; This function is called by:
 16828 ;;		_LCD_Write
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           	psect	text94
 16833  014988                     __ptext94:
 16834                           	opt stack 0
 16835  014988                     _Mode_Set:
 16836                           	opt stack 18
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;incstack = 0
 16840                           ;Mode_Set@pMode stored from wreg
 16841  014988  0100               	movlb	0	; () banked
 16842  01498A  6FBB               	movwf	Mode_Set@pMode& (0+255),b
 16843                           
 16844                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 16845  01498C  0100               	movlb	0	; () banked
 16846  01498E  B1BB               	btfsc	Mode_Set@pMode& (0+255),0,b
 16847  014990  D002               	bra	u6935
 16848  014992  9E85               	bcf	3973,7,c	;volatile
 16849  014994  D001               	bra	u6936
 16850  014996                     u6935:
 16851  014996  8E85               	bsf	3973,7,c	;volatile
 16852  014998                     u6936:
 16853  014998  0012               	return		;funcret
 16854  01499A                     __end_of_Mode_Set:
 16855                           	opt stack 0
 16856                           tosu	equ	0xFFF
 16857                           tosh	equ	0xFFE
 16858                           tosl	equ	0xFFD
 16859                           pclath	equ	0xFFA
 16860                           tblptru	equ	0xFF8
 16861                           tblptrh	equ	0xFF7
 16862                           tblptrl	equ	0xFF6
 16863                           tablat	equ	0xFF5
 16864                           prodh	equ	0xFF4
 16865                           prodl	equ	0xFF3
 16866                           intcon	equ	0xFF2
 16867                           postinc0	equ	0xFEE
 16868                           wreg	equ	0xFE8
 16869                           indf1	equ	0xFE7
 16870                           postdec1	equ	0xFE5
 16871                           fsr1h	equ	0xFE2
 16872                           fsr1l	equ	0xFE1
 16873                           indf2	equ	0xFDF
 16874                           postinc2	equ	0xFDE
 16875                           postdec2	equ	0xFDD
 16876                           plusw2	equ	0xFDB
 16877                           fsr2h	equ	0xFDA
 16878                           fsr2l	equ	0xFD9
 16879                           status	equ	0xFD8
 16880                           
 16881 ;; *************** function _Configure_GPIOs *****************
 16882 ;; Defined at:
 16883 ;;		line 46 in file "Library/LCD.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;		None
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;                  1    wreg      void 
 16890 ;; Registers used:
 16891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;Total ram usage:        0 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:   14
 16904 ;; This function calls:
 16905 ;;		_LCD_Reset
 16906 ;;		_Port_SetPinType
 16907 ;;		_SPI_Init
 16908 ;;		_SPI_MaxSpeed
 16909 ;; This function is called by:
 16910 ;;		_LCD_Init
 16911 ;; This function uses a non-reentrant model
 16912 ;;
 16913                           
 16914                           	psect	text95
 16915  01393A                     __ptext95:
 16916                           	opt stack 0
 16917  01393A                     _Configure_GPIOs:
 16918                           	opt stack 14
 16919                           
 16920                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 16921                           
 16922                           ;incstack = 0
 16923  01393A  0EBA               	movlw	low _PortF
 16924  01393C  0100               	movlb	0	; () banked
 16925  01393E  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 16926  013940  0E03               	movlw	high _PortF
 16927  013942  0100               	movlb	0	; () banked
 16928  013944  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16929  013946  0E07               	movlw	7
 16930  013948  0100               	movlb	0	; () banked
 16931  01394A  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 16932  01394C  0E03               	movlw	3
 16933  01394E  0100               	movlb	0	; () banked
 16934  013950  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 16935  013952  EC54  F08A         	call	_Port_SetPinType	;wreg free
 16936                           
 16937                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 16938  013956  0EBA               	movlw	low _PortF
 16939  013958  0100               	movlb	0	; () banked
 16940  01395A  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 16941  01395C  0E03               	movlw	high _PortF
 16942  01395E  0100               	movlb	0	; () banked
 16943  013960  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16944  013962  0E06               	movlw	6
 16945  013964  0100               	movlb	0	; () banked
 16946  013966  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 16947  013968  0E03               	movlw	3
 16948  01396A  0100               	movlb	0	; () banked
 16949  01396C  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 16950  01396E  EC54  F08A         	call	_Port_SetPinType	;wreg free
 16951                           
 16952                           ;LCD.c: 55: LCD_Reset();
 16953  013972  EC10  F0A0         	call	_LCD_Reset	;wreg free
 16954                           
 16955                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 16956  013976  0EC0               	movlw	192
 16957  013978  0100               	movlb	0	; () banked
 16958  01397A  6FE8               	movwf	SPI_Init@pClock& (0+255),b
 16959  01397C  0EC6               	movlw	198
 16960  01397E  6FE9               	movwf	(SPI_Init@pClock+1)& (0+255),b
 16961  013980  0E2D               	movlw	45
 16962  013982  6FEA               	movwf	(SPI_Init@pClock+2)& (0+255),b
 16963  013984  0E00               	movlw	0
 16964  013986  6FEB               	movwf	(SPI_Init@pClock+3)& (0+255),b
 16965  013988  0E01               	movlw	1
 16966  01398A  0100               	movlb	0	; () banked
 16967  01398C  6FEC               	movwf	SPI_Init@pChannel& (0+255),b
 16968  01398E  0E01               	movlw	1
 16969  013990  0100               	movlb	0	; () banked
 16970  013992  6FED               	movwf	SPI_Init@pMode& (0+255),b
 16971  013994  EC00  F080         	call	_SPI_Init	;wreg free
 16972                           
 16973                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 16974  013998  0E7D               	movlw	low _SPI2
 16975  01399A  0100               	movlb	0	; () banked
 16976  01399C  6FCA               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 16977  01399E  0E03               	movlw	high _SPI2
 16978  0139A0  0100               	movlb	0	; () banked
 16979  0139A2  6FCB               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 16980  0139A4  EC29  F09C         	call	_SPI_MaxSpeed	;wreg free
 16981  0139A8  0012               	return		;funcret
 16982  0139AA                     __end_of_Configure_GPIOs:
 16983                           	opt stack 0
 16984                           tosu	equ	0xFFF
 16985                           tosh	equ	0xFFE
 16986                           tosl	equ	0xFFD
 16987                           pclath	equ	0xFFA
 16988                           tblptru	equ	0xFF8
 16989                           tblptrh	equ	0xFF7
 16990                           tblptrl	equ	0xFF6
 16991                           tablat	equ	0xFF5
 16992                           prodh	equ	0xFF4
 16993                           prodl	equ	0xFF3
 16994                           intcon	equ	0xFF2
 16995                           postinc0	equ	0xFEE
 16996                           wreg	equ	0xFE8
 16997                           indf1	equ	0xFE7
 16998                           postdec1	equ	0xFE5
 16999                           fsr1h	equ	0xFE2
 17000                           fsr1l	equ	0xFE1
 17001                           indf2	equ	0xFDF
 17002                           postinc2	equ	0xFDE
 17003                           postdec2	equ	0xFDD
 17004                           plusw2	equ	0xFDB
 17005                           fsr2h	equ	0xFDA
 17006                           fsr2l	equ	0xFD9
 17007                           status	equ	0xFD8
 17008                           
 17009 ;; *************** function _SPI_MaxSpeed *****************
 17010 ;; Defined at:
 17011 ;;		line 201 in file "Library/SPI.c"
 17012 ;; Parameters:    Size  Location     Type
 17013 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 17014 ;;		 -> SPI2(11), 
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;		None
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  1    wreg      void 
 17019 ;; Registers used:
 17020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17030 ;;Total ram usage:        2 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    9
 17033 ;; This function calls:
 17034 ;;		_Byte_SetBit
 17035 ;;		_Byte_SetQuad
 17036 ;; This function is called by:
 17037 ;;		_Configure_GPIOs
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           	psect	text96
 17042  013852                     __ptext96:
 17043                           	opt stack 0
 17044  013852                     _SPI_MaxSpeed:
 17045                           	opt stack 18
 17046                           
 17047                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17048                           
 17049                           ;incstack = 0
 17050  013852  0100               	movlb	0	; () banked
 17051  013854  EE20 F006          	lfsr	2,6
 17052  013858  51CA               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17053  01385A  26D9               	addwf	fsr2l,f,c
 17054  01385C  51CB               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17055  01385E  22DA               	addwfc	fsr2h,f,c
 17056  013860  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 17057  013864  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 17058  013868  0E05               	movlw	5
 17059  01386A  0100               	movlb	0	; () banked
 17060  01386C  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 17061  01386E  0E00               	movlw	0
 17062  013870  0100               	movlb	0	; () banked
 17063  013872  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 17064  013874  EC78  F09E         	call	_Byte_SetBit	;wreg free
 17065                           
 17066                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 17067  013878  0100               	movlb	0	; () banked
 17068  01387A  EE20 F006          	lfsr	2,6
 17069  01387E  51CA               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17070  013880  26D9               	addwf	fsr2l,f,c
 17071  013882  51CB               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17072  013884  22DA               	addwfc	fsr2h,f,c
 17073  013886  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 17074  01388A  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 17075  01388E  0E00               	movlw	0
 17076  013890  0100               	movlb	0	; () banked
 17077  013892  6FC8               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17078  013894  0E00               	movlw	0
 17079  013896  0100               	movlb	0	; () banked
 17080  013898  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 17081  01389A  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 17082                           
 17083                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17084  01389E  0100               	movlb	0	; () banked
 17085  0138A0  EE20 F006          	lfsr	2,6
 17086  0138A4  51CA               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17087  0138A6  26D9               	addwf	fsr2l,f,c
 17088  0138A8  51CB               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17089  0138AA  22DA               	addwfc	fsr2h,f,c
 17090  0138AC  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 17091  0138B0  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 17092  0138B4  0E05               	movlw	5
 17093  0138B6  0100               	movlb	0	; () banked
 17094  0138B8  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 17095  0138BA  0E01               	movlw	1
 17096  0138BC  0100               	movlb	0	; () banked
 17097  0138BE  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 17098  0138C0  EC78  F09E         	call	_Byte_SetBit	;wreg free
 17099  0138C4  0012               	return		;funcret
 17100  0138C6                     __end_of_SPI_MaxSpeed:
 17101                           	opt stack 0
 17102                           tosu	equ	0xFFF
 17103                           tosh	equ	0xFFE
 17104                           tosl	equ	0xFFD
 17105                           pclath	equ	0xFFA
 17106                           tblptru	equ	0xFF8
 17107                           tblptrh	equ	0xFF7
 17108                           tblptrl	equ	0xFF6
 17109                           tablat	equ	0xFF5
 17110                           prodh	equ	0xFF4
 17111                           prodl	equ	0xFF3
 17112                           intcon	equ	0xFF2
 17113                           postinc0	equ	0xFEE
 17114                           wreg	equ	0xFE8
 17115                           indf1	equ	0xFE7
 17116                           postdec1	equ	0xFE5
 17117                           fsr1h	equ	0xFE2
 17118                           fsr1l	equ	0xFE1
 17119                           indf2	equ	0xFDF
 17120                           postinc2	equ	0xFDE
 17121                           postdec2	equ	0xFDD
 17122                           plusw2	equ	0xFDB
 17123                           fsr2h	equ	0xFDA
 17124                           fsr2l	equ	0xFD9
 17125                           status	equ	0xFD8
 17126                           
 17127 ;; *************** function _LCD_Reset *****************
 17128 ;; Defined at:
 17129 ;;		line 95 in file "Library/LCD.c"
 17130 ;; Parameters:    Size  Location     Type
 17131 ;;		None
 17132 ;; Auto vars:     Size  Location     Type
 17133 ;;		None
 17134 ;; Return value:  Size  Location     Type
 17135 ;;                  1    wreg      void 
 17136 ;; Registers used:
 17137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17138 ;; Tracked objects:
 17139 ;;		On entry : 0/0
 17140 ;;		On exit  : 0/0
 17141 ;;		Unchanged: 0/0
 17142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17147 ;;Total ram usage:        0 bytes
 17148 ;; Hardware stack levels used:    1
 17149 ;; Hardware stack levels required when called:   13
 17150 ;; This function calls:
 17151 ;;		_LED_Toggle
 17152 ;;		_Reset_High
 17153 ;;		_Reset_Low
 17154 ;;		_delay_ms
 17155 ;; This function is called by:
 17156 ;;		_Configure_GPIOs
 17157 ;; This function uses a non-reentrant model
 17158 ;;
 17159                           
 17160                           	psect	text97
 17161  014020                     __ptext97:
 17162                           	opt stack 0
 17163  014020                     _LCD_Reset:
 17164                           	opt stack 14
 17165                           
 17166                           ;LCD.c: 97: Reset_High();
 17167                           
 17168                           ;incstack = 0
 17169  014020  ECE3  F0A3         	call	_Reset_High	;wreg free
 17170                           
 17171                           ;LCD.c: 98: LED_Toggle(eLED2);
 17172  014024  0E01               	movlw	1
 17173  014026  ECCD  F0A0         	call	_LED_Toggle
 17174                           
 17175                           ;LCD.c: 99: delay_ms(0x80);
 17176  01402A  0E00               	movlw	0
 17177  01402C  0100               	movlb	0	; () banked
 17178  01402E  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 17179  014030  0E80               	movlw	128
 17180  014032  6FBB               	movwf	delay_ms@ms& (0+255),b
 17181  014034  EC76  F09D         	call	_delay_ms	;wreg free
 17182                           
 17183                           ;LCD.c: 100: LED_Toggle(eLED2);
 17184  014038  0E01               	movlw	1
 17185  01403A  ECCD  F0A0         	call	_LED_Toggle
 17186                           
 17187                           ;LCD.c: 101: Reset_Low();
 17188  01403E  ECD4  F0A3         	call	_Reset_Low	;wreg free
 17189                           
 17190                           ;LCD.c: 102: delay_ms(0x80);
 17191  014042  0E00               	movlw	0
 17192  014044  0100               	movlb	0	; () banked
 17193  014046  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 17194  014048  0E80               	movlw	128
 17195  01404A  6FBB               	movwf	delay_ms@ms& (0+255),b
 17196  01404C  EC76  F09D         	call	_delay_ms	;wreg free
 17197                           
 17198                           ;LCD.c: 103: LED_Toggle(eLED2);
 17199  014050  0E01               	movlw	1
 17200  014052  ECCD  F0A0         	call	_LED_Toggle
 17201                           
 17202                           ;LCD.c: 104: Reset_High();
 17203  014056  ECE3  F0A3         	call	_Reset_High	;wreg free
 17204                           
 17205                           ;LCD.c: 105: delay_ms(0x80);
 17206  01405A  0E00               	movlw	0
 17207  01405C  0100               	movlb	0	; () banked
 17208  01405E  6FBC               	movwf	(delay_ms@ms+1)& (0+255),b
 17209  014060  0E80               	movlw	128
 17210  014062  6FBB               	movwf	delay_ms@ms& (0+255),b
 17211  014064  EC76  F09D         	call	_delay_ms	;wreg free
 17212                           
 17213                           ;LCD.c: 106: LED_Toggle(eLED2);
 17214  014068  0E01               	movlw	1
 17215  01406A  ECCD  F0A0         	call	_LED_Toggle
 17216  01406E  0012               	return		;funcret
 17217  014070                     __end_of_LCD_Reset:
 17218                           	opt stack 0
 17219                           tosu	equ	0xFFF
 17220                           tosh	equ	0xFFE
 17221                           tosl	equ	0xFFD
 17222                           pclath	equ	0xFFA
 17223                           tblptru	equ	0xFF8
 17224                           tblptrh	equ	0xFF7
 17225                           tblptrl	equ	0xFF6
 17226                           tablat	equ	0xFF5
 17227                           prodh	equ	0xFF4
 17228                           prodl	equ	0xFF3
 17229                           intcon	equ	0xFF2
 17230                           postinc0	equ	0xFEE
 17231                           wreg	equ	0xFE8
 17232                           indf1	equ	0xFE7
 17233                           postdec1	equ	0xFE5
 17234                           fsr1h	equ	0xFE2
 17235                           fsr1l	equ	0xFE1
 17236                           indf2	equ	0xFDF
 17237                           postinc2	equ	0xFDE
 17238                           postdec2	equ	0xFDD
 17239                           plusw2	equ	0xFDB
 17240                           fsr2h	equ	0xFDA
 17241                           fsr2l	equ	0xFD9
 17242                           status	equ	0xFD8
 17243                           
 17244 ;; *************** function _delay_ms *****************
 17245 ;; Defined at:
 17246 ;;		line 240 in file "Library/Types.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;  ms              2    0[BANK0 ] unsigned short 
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17251 ;; Return value:  Size  Location     Type
 17252 ;;                  1    wreg      void 
 17253 ;; Registers used:
 17254 ;;		wreg, status,2, status,0
 17255 ;; Tracked objects:
 17256 ;;		On entry : 0/0
 17257 ;;		On exit  : 0/0
 17258 ;;		Unchanged: 0/0
 17259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17260 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17261 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17263 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;Total ram usage:        6 bytes
 17265 ;; Hardware stack levels used:    1
 17266 ;; Hardware stack levels required when called:    7
 17267 ;; This function calls:
 17268 ;;		Nothing
 17269 ;; This function is called by:
 17270 ;;		_LCD_Reset
 17271 ;;		_LCD_Init
 17272 ;;		_MXK_Init
 17273 ;;		_init
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           	psect	text98
 17278  013AEC                     __ptext98:
 17279                           	opt stack 0
 17280  013AEC                     _delay_ms:
 17281                           	opt stack 22
 17282                           
 17283                           ;Types.c: 242: volatile unsigned long u;
 17284                           ;Types.c: 243: while (ms--)
 17285                           
 17286                           ;incstack = 0
 17287  013AEC  D01F               	goto	u7200
 17288  013AEE                     l11126:
 17289                           
 17290                           ;Types.c: 244: {
 17291                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17292  013AEE  0E00               	movlw	0
 17293  013AF0  0100               	movlb	0	; () banked
 17294  013AF2  6FBD               	movwf	delay_ms@u& (0+255),b	;volatile
 17295  013AF4  0E00               	movlw	0
 17296  013AF6  6FBE               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17297  013AF8  0E00               	movlw	0
 17298  013AFA  6FBF               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17299  013AFC  0E00               	movlw	0
 17300  013AFE  6FC0               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17301  013B00                     l11128:
 17302                           
 17303                           ; BSR set to: 0
 17304  013B00  0100               	movlb	0	; () banked
 17305  013B02  51C0               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17306  013B04  0100               	movlb	0	; () banked
 17307  013B06  11BF               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17308  013B08  E111               	bnz	l11134
 17309  013B0A  0EB0               	movlw	176
 17310  013B0C  0100               	movlb	0	; () banked
 17311  013B0E  5DBD               	subwf	delay_ms@u& (0+255),w,b	;volatile
 17312  013B10  0E04               	movlw	4
 17313  013B12  0100               	movlb	0	; () banked
 17314  013B14  59BE               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17315  013B16  B0D8               	btfsc	status,0,c
 17316  013B18  D009               	goto	u7200
 17317                           
 17318                           ; BSR set to: 0
 17319                           
 17320                           ; BSR set to: 0
 17321  013B1A  F000               	nop		; ;# 
 17322  013B1C  0E01               	movlw	1
 17323  013B1E  0100               	movlb	0	; () banked
 17324  013B20  27BD               	addwf	delay_ms@u& (0+255),f,b	;volatile
 17325  013B22  0E00               	movlw	0
 17326  013B24  23BE               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17327  013B26  23BF               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17328  013B28  23C0               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17329  013B2A  D7EA               	goto	l11128
 17330  013B2C                     u7200:
 17331  013B2C                     l11134:
 17332  013B2C  0100               	movlb	0	; () banked
 17333  013B2E  07BB               	decf	delay_ms@ms& (0+255),f,b
 17334  013B30  A0D8               	btfss	status,0,c
 17335  013B32  07BC               	decf	(delay_ms@ms+1)& (0+255),f,b
 17336  013B34  0100               	movlb	0	; () banked
 17337  013B36  29BB               	incf	delay_ms@ms& (0+255),w,b
 17338  013B38  E1DA               	bnz	l11126
 17339  013B3A  0100               	movlb	0	; () banked
 17340  013B3C  29BC               	incf	(delay_ms@ms+1)& (0+255),w,b
 17341  013B3E  A4D8               	btfss	status,2,c
 17342  013B40  D7D6               	goto	l824
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;Types.c: 251: }
 17346                           ;Types.c: 252: }
 17347                           ;Types.c: 253: u = 0x8008;
 17348                           
 17349                           ; BSR set to: 0
 17350  013B42  0E08               	movlw	8
 17351  013B44  0100               	movlb	0	; () banked
 17352  013B46  6FBD               	movwf	delay_ms@u& (0+255),b	;volatile
 17353  013B48  0E80               	movlw	128
 17354  013B4A  6FBE               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17355  013B4C  0E00               	movlw	0
 17356  013B4E  6FBF               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17357  013B50  0E00               	movlw	0
 17358  013B52  6FC0               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17359                           
 17360                           ; BSR set to: 0
 17361  013B54  0012               	return		;funcret
 17362  013B56                     __end_of_delay_ms:
 17363                           	opt stack 0
 17364                           tosu	equ	0xFFF
 17365                           tosh	equ	0xFFE
 17366                           tosl	equ	0xFFD
 17367                           pclath	equ	0xFFA
 17368                           tblptru	equ	0xFF8
 17369                           tblptrh	equ	0xFF7
 17370                           tblptrl	equ	0xFF6
 17371                           tablat	equ	0xFF5
 17372                           prodh	equ	0xFF4
 17373                           prodl	equ	0xFF3
 17374                           intcon	equ	0xFF2
 17375                           postinc0	equ	0xFEE
 17376                           wreg	equ	0xFE8
 17377                           indf1	equ	0xFE7
 17378                           postdec1	equ	0xFE5
 17379                           fsr1h	equ	0xFE2
 17380                           fsr1l	equ	0xFE1
 17381                           indf2	equ	0xFDF
 17382                           postinc2	equ	0xFDE
 17383                           postdec2	equ	0xFDD
 17384                           plusw2	equ	0xFDB
 17385                           fsr2h	equ	0xFDA
 17386                           fsr2l	equ	0xFD9
 17387                           status	equ	0xFD8
 17388                           
 17389 ;; *************** function _Reset_Low *****************
 17390 ;; Defined at:
 17391 ;;		line 32 in file "Library/LCD.c"
 17392 ;; Parameters:    Size  Location     Type
 17393 ;;		None
 17394 ;; Auto vars:     Size  Location     Type
 17395 ;;		None
 17396 ;; Return value:  Size  Location     Type
 17397 ;;                  1    wreg      void 
 17398 ;; Registers used:
 17399 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17400 ;; Tracked objects:
 17401 ;;		On entry : 0/0
 17402 ;;		On exit  : 0/0
 17403 ;;		Unchanged: 0/0
 17404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17409 ;;Total ram usage:        0 bytes
 17410 ;; Hardware stack levels used:    1
 17411 ;; Hardware stack levels required when called:   11
 17412 ;; This function calls:
 17413 ;;		_Port_SetPin
 17414 ;; This function is called by:
 17415 ;;		_LCD_Reset
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           	psect	text99
 17420  0147A8                     __ptext99:
 17421                           	opt stack 0
 17422  0147A8                     _Reset_Low:
 17423                           	opt stack 15
 17424                           
 17425                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17426                           
 17427                           ; BSR set to: 0
 17428                           ;incstack = 0
 17429  0147A8  0EBA               	movlw	low _PortF
 17430  0147AA  0100               	movlb	0	; () banked
 17431  0147AC  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 17432  0147AE  0E03               	movlw	high _PortF
 17433  0147B0  0100               	movlb	0	; () banked
 17434  0147B2  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17435  0147B4  0E06               	movlw	6
 17436  0147B6  0100               	movlb	0	; () banked
 17437  0147B8  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 17438  0147BA  0E01               	movlw	1
 17439  0147BC  0100               	movlb	0	; () banked
 17440  0147BE  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 17441  0147C0  ECE2  F093         	call	_Port_SetPin	;wreg free
 17442  0147C4  0012               	return		;funcret
 17443  0147C6                     __end_of_Reset_Low:
 17444                           	opt stack 0
 17445                           tosu	equ	0xFFF
 17446                           tosh	equ	0xFFE
 17447                           tosl	equ	0xFFD
 17448                           pclath	equ	0xFFA
 17449                           tblptru	equ	0xFF8
 17450                           tblptrh	equ	0xFF7
 17451                           tblptrl	equ	0xFF6
 17452                           tablat	equ	0xFF5
 17453                           prodh	equ	0xFF4
 17454                           prodl	equ	0xFF3
 17455                           intcon	equ	0xFF2
 17456                           postinc0	equ	0xFEE
 17457                           wreg	equ	0xFE8
 17458                           indf1	equ	0xFE7
 17459                           postdec1	equ	0xFE5
 17460                           fsr1h	equ	0xFE2
 17461                           fsr1l	equ	0xFE1
 17462                           indf2	equ	0xFDF
 17463                           postinc2	equ	0xFDE
 17464                           postdec2	equ	0xFDD
 17465                           plusw2	equ	0xFDB
 17466                           fsr2h	equ	0xFDA
 17467                           fsr2l	equ	0xFD9
 17468                           status	equ	0xFD8
 17469                           
 17470 ;; *************** function _Reset_High *****************
 17471 ;; Defined at:
 17472 ;;		line 36 in file "Library/LCD.c"
 17473 ;; Parameters:    Size  Location     Type
 17474 ;;		None
 17475 ;; Auto vars:     Size  Location     Type
 17476 ;;		None
 17477 ;; Return value:  Size  Location     Type
 17478 ;;                  1    wreg      void 
 17479 ;; Registers used:
 17480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17481 ;; Tracked objects:
 17482 ;;		On entry : 0/0
 17483 ;;		On exit  : 0/0
 17484 ;;		Unchanged: 0/0
 17485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17490 ;;Total ram usage:        0 bytes
 17491 ;; Hardware stack levels used:    1
 17492 ;; Hardware stack levels required when called:   11
 17493 ;; This function calls:
 17494 ;;		_Port_SetPin
 17495 ;; This function is called by:
 17496 ;;		_LCD_Reset
 17497 ;; This function uses a non-reentrant model
 17498 ;;
 17499                           
 17500                           	psect	text100
 17501  0147C6                     __ptext100:
 17502                           	opt stack 0
 17503  0147C6                     _Reset_High:
 17504                           	opt stack 15
 17505                           
 17506                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 17507                           
 17508                           ;incstack = 0
 17509  0147C6  0EBA               	movlw	low _PortF
 17510  0147C8  0100               	movlb	0	; () banked
 17511  0147CA  6FCA               	movwf	Port_SetPin@pInput& (0+255),b
 17512  0147CC  0E03               	movlw	high _PortF
 17513  0147CE  0100               	movlb	0	; () banked
 17514  0147D0  6FCB               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17515  0147D2  0E06               	movlw	6
 17516  0147D4  0100               	movlb	0	; () banked
 17517  0147D6  6FCC               	movwf	Port_SetPin@pPin& (0+255),b
 17518  0147D8  0E00               	movlw	0
 17519  0147DA  0100               	movlb	0	; () banked
 17520  0147DC  6FCD               	movwf	Port_SetPin@pValue& (0+255),b
 17521  0147DE  ECE2  F093         	call	_Port_SetPin	;wreg free
 17522  0147E2  0012               	return		;funcret
 17523  0147E4                     __end_of_Reset_High:
 17524                           	opt stack 0
 17525                           tosu	equ	0xFFF
 17526                           tosh	equ	0xFFE
 17527                           tosl	equ	0xFFD
 17528                           pclath	equ	0xFFA
 17529                           tblptru	equ	0xFF8
 17530                           tblptrh	equ	0xFF7
 17531                           tblptrl	equ	0xFF6
 17532                           tablat	equ	0xFF5
 17533                           prodh	equ	0xFF4
 17534                           prodl	equ	0xFF3
 17535                           intcon	equ	0xFF2
 17536                           postinc0	equ	0xFEE
 17537                           wreg	equ	0xFE8
 17538                           indf1	equ	0xFE7
 17539                           postdec1	equ	0xFE5
 17540                           fsr1h	equ	0xFE2
 17541                           fsr1l	equ	0xFE1
 17542                           indf2	equ	0xFDF
 17543                           postinc2	equ	0xFDE
 17544                           postdec2	equ	0xFDD
 17545                           plusw2	equ	0xFDB
 17546                           fsr2h	equ	0xFDA
 17547                           fsr2l	equ	0xFD9
 17548                           status	equ	0xFD8
 17549                           
 17550 ;; *************** function _LED_Toggle *****************
 17551 ;; Defined at:
 17552 ;;		line 50 in file "Library/LED.c"
 17553 ;; Parameters:    Size  Location     Type
 17554 ;;  pLED            1    wreg     enum E6739
 17555 ;; Auto vars:     Size  Location     Type
 17556 ;;  pLED            1   24[BANK0 ] enum E6739
 17557 ;; Return value:  Size  Location     Type
 17558 ;;                  1    wreg      void 
 17559 ;; Registers used:
 17560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17561 ;; Tracked objects:
 17562 ;;		On entry : 0/0
 17563 ;;		On exit  : 0/0
 17564 ;;		Unchanged: 0/0
 17565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17570 ;;Total ram usage:        1 bytes
 17571 ;; Hardware stack levels used:    1
 17572 ;; Hardware stack levels required when called:   12
 17573 ;; This function calls:
 17574 ;;		_Port_TogglePin
 17575 ;; This function is called by:
 17576 ;;		_LCD_Reset
 17577 ;;		_Event_DIPSwitch
 17578 ;;		_Event_TestButton
 17579 ;;		_Event_ADCSequenceComplete
 17580 ;;		_Event_HMI_DIPSwitch
 17581 ;;		_Event_HMI_LeftButton
 17582 ;;		_Event_HMI_RightButton
 17583 ;;		_Event_HMI_UpButton
 17584 ;;		_Event_HMI_DownButton
 17585 ;; This function uses a non-reentrant model
 17586 ;;
 17587                           
 17588                           	psect	text101
 17589  01419A                     __ptext101:
 17590                           	opt stack 0
 17591  01419A                     _LED_Toggle:
 17592                           	opt stack 14
 17593                           
 17594                           ;incstack = 0
 17595                           ;LED_Toggle@pLED stored from wreg
 17596  01419A  0100               	movlb	0	; () banked
 17597  01419C  6FD3               	movwf	LED_Toggle@pLED& (0+255),b
 17598                           
 17599                           ;LED.c: 52: switch (pLED)
 17600  01419E  D018               	goto	l234
 17601  0141A0                     
 17602                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 17603  0141A0  0EA9               	movlw	low _PortC
 17604  0141A2  0100               	movlb	0	; () banked
 17605  0141A4  6FCF               	movwf	Port_TogglePin@pInput& (0+255),b
 17606  0141A6  0E00               	movlw	high _PortC
 17607  0141A8  0100               	movlb	0	; () banked
 17608  0141AA  6FD0               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17609  0141AC  0E00               	movlw	0
 17610  0141AE  0100               	movlb	0	; () banked
 17611  0141B0  6FD1               	movwf	Port_TogglePin@pPin& (0+255),b
 17612  0141B2  ECC5  F0A2         	call	_Port_TogglePin	;wreg free
 17613                           
 17614                           ;LED.c: 56: break;
 17615  0141B6  0012               	return	
 17616  0141B8                     
 17617                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 17618  0141B8  0EA9               	movlw	low _PortC
 17619  0141BA  0100               	movlb	0	; () banked
 17620  0141BC  6FCF               	movwf	Port_TogglePin@pInput& (0+255),b
 17621  0141BE  0E00               	movlw	high _PortC
 17622  0141C0  0100               	movlb	0	; () banked
 17623  0141C2  6FD0               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17624  0141C4  0E01               	movlw	1
 17625  0141C6  0100               	movlb	0	; () banked
 17626  0141C8  6FD1               	movwf	Port_TogglePin@pPin& (0+255),b
 17627  0141CA  ECC5  F0A2         	call	_Port_TogglePin	;wreg free
 17628                           
 17629                           ;LED.c: 60: }
 17630                           
 17631                           ;LED.c: 59: break;
 17632  0141CE  0012               	return	
 17633  0141D0                     l234:
 17634  0141D0  0100               	movlb	0	; () banked
 17635  0141D2  51D3               	movf	LED_Toggle@pLED& (0+255),w,b
 17636                           
 17637                           ; Switch size 1, requested type "space"
 17638                           ; Number of cases is 2, Range of values is 0 to 1
 17639                           ; switch strategies available:
 17640                           ; Name         Instructions Cycles
 17641                           ; simple_byte            7     4 (average)
 17642                           ;	Chosen strategy is simple_byte
 17643  0141D4  0A00               	xorlw	0	; case 0
 17644  0141D6  B4D8               	btfsc	status,2,c
 17645  0141D8  D7E3               	goto	l235
 17646  0141DA  0A01               	xorlw	1	; case 1
 17647  0141DC  A4D8               	btfss	status,2,c
 17648  0141DE  0012               	return	
 17649  0141E0  D7EB               	goto	l237
 17650  0141E2                     __end_of_LED_Toggle:
 17651                           	opt stack 0
 17652                           tosu	equ	0xFFF
 17653                           tosh	equ	0xFFE
 17654                           tosl	equ	0xFFD
 17655                           pclath	equ	0xFFA
 17656                           tblptru	equ	0xFF8
 17657                           tblptrh	equ	0xFF7
 17658                           tblptrl	equ	0xFF6
 17659                           tablat	equ	0xFF5
 17660                           prodh	equ	0xFF4
 17661                           prodl	equ	0xFF3
 17662                           intcon	equ	0xFF2
 17663                           postinc0	equ	0xFEE
 17664                           wreg	equ	0xFE8
 17665                           indf1	equ	0xFE7
 17666                           postdec1	equ	0xFE5
 17667                           fsr1h	equ	0xFE2
 17668                           fsr1l	equ	0xFE1
 17669                           indf2	equ	0xFDF
 17670                           postinc2	equ	0xFDE
 17671                           postdec2	equ	0xFDD
 17672                           plusw2	equ	0xFDB
 17673                           fsr2h	equ	0xFDA
 17674                           fsr2l	equ	0xFD9
 17675                           status	equ	0xFD8
 17676                           
 17677 ;; *************** function _Port_TogglePin *****************
 17678 ;; Defined at:
 17679 ;;		line 278 in file "Library/Port.c"
 17680 ;; Parameters:    Size  Location     Type
 17681 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 17682 ;;		 -> PortC(10), 
 17683 ;;  pPin            1   22[BANK0 ] enum E6750
 17684 ;; Auto vars:     Size  Location     Type
 17685 ;;  Value           1   23[BANK0 ] unsigned char 
 17686 ;; Return value:  Size  Location     Type
 17687 ;;                  1    wreg      void 
 17688 ;; Registers used:
 17689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17690 ;; Tracked objects:
 17691 ;;		On entry : 0/0
 17692 ;;		On exit  : 0/0
 17693 ;;		Unchanged: 0/0
 17694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17695 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17698 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17699 ;;Total ram usage:        4 bytes
 17700 ;; Hardware stack levels used:    1
 17701 ;; Hardware stack levels required when called:   11
 17702 ;; This function calls:
 17703 ;;		_Port_GetPin
 17704 ;;		_Port_SetPin
 17705 ;; This function is called by:
 17706 ;;		_LED_Toggle
 17707 ;; This function uses a non-reentrant model
 17708 ;;
 17709                           
 17710                           	psect	text102
 17711  01458A                     __ptext102:
 17712                           	opt stack 0
 17713  01458A                     _Port_TogglePin:
 17714                           	opt stack 14
 17715                           
 17716                           ;Port.c: 280: UINT8 Value;
 17717                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 17718                           
 17719                           ;incstack = 0
 17720  01458A  C0CF  F0BB         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 17721  01458E  C0D0  F0BC         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 17722  014592  C0D1  F0BD         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 17723  014596  EC14  F0A1         	call	_Port_GetPin	;wreg free
 17724  01459A  0100               	movlb	0	; () banked
 17725  01459C  6FD2               	movwf	Port_TogglePin@Value& (0+255),b
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;Port.c: 282: Value ^= 0x01;
 17729  01459E  0E01               	movlw	1
 17730  0145A0  0100               	movlb	0	; () banked
 17731  0145A2  1BD2               	xorwf	Port_TogglePin@Value& (0+255),f,b
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 17735  0145A4  C0CF  F0CA         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 17736  0145A8  C0D0  F0CB         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 17737  0145AC  C0D1  F0CC         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 17738  0145B0  C0D2  F0CD         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 17739  0145B4  ECE2  F093         	call	_Port_SetPin	;wreg free
 17740  0145B8  0012               	return		;funcret
 17741  0145BA                     __end_of_Port_TogglePin:
 17742                           	opt stack 0
 17743                           tosu	equ	0xFFF
 17744                           tosh	equ	0xFFE
 17745                           tosl	equ	0xFFD
 17746                           pclath	equ	0xFFA
 17747                           tblptru	equ	0xFF8
 17748                           tblptrh	equ	0xFF7
 17749                           tblptrl	equ	0xFF6
 17750                           tablat	equ	0xFF5
 17751                           prodh	equ	0xFF4
 17752                           prodl	equ	0xFF3
 17753                           intcon	equ	0xFF2
 17754                           postinc0	equ	0xFEE
 17755                           wreg	equ	0xFE8
 17756                           indf1	equ	0xFE7
 17757                           postdec1	equ	0xFE5
 17758                           fsr1h	equ	0xFE2
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           plusw2	equ	0xFDB
 17764                           fsr2h	equ	0xFDA
 17765                           fsr2l	equ	0xFD9
 17766                           status	equ	0xFD8
 17767                           
 17768 ;; *************** function _Port_SetPin *****************
 17769 ;; Defined at:
 17770 ;;		line 247 in file "Library/Port.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17773 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 17774 ;;  pPin            1   17[BANK0 ] enum E6750
 17775 ;;  pValue          1   18[BANK0 ] unsigned char 
 17776 ;; Auto vars:     Size  Location     Type
 17777 ;;  Type            1   19[BANK0 ] enum E6795
 17778 ;; Return value:  Size  Location     Type
 17779 ;;                  1    wreg      void 
 17780 ;; Registers used:
 17781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17782 ;; Tracked objects:
 17783 ;;		On entry : 0/0
 17784 ;;		On exit  : 0/0
 17785 ;;		Unchanged: 0/0
 17786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17790 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17791 ;;Total ram usage:        5 bytes
 17792 ;; Hardware stack levels used:    1
 17793 ;; Hardware stack levels required when called:   10
 17794 ;; This function calls:
 17795 ;;		_Byte_SetBit
 17796 ;;		_Word_GetPair
 17797 ;; This function is called by:
 17798 ;;		_Reset_Low
 17799 ;;		_Reset_High
 17800 ;;		_LED_Set
 17801 ;;		_Port_TogglePin
 17802 ;;		_Motor_Step
 17803 ;;		_MXK_Init
 17804 ;;		_Motor_Init
 17805 ;; This function uses a non-reentrant model
 17806 ;;
 17807                           
 17808                           	psect	text103
 17809  0127C4                     __ptext103:
 17810                           	opt stack 0
 17811  0127C4                     _Port_SetPin:
 17812                           	opt stack 17
 17813                           
 17814                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 17815                           
 17816                           ;incstack = 0
 17817  0127C4  0E08               	movlw	8
 17818  0127C6  0100               	movlb	0	; () banked
 17819  0127C8  25CA               	addwf	Port_SetPin@pInput& (0+255),w,b
 17820  0127CA  0100               	movlb	0	; () banked
 17821  0127CC  6FC7               	movwf	Word_GetPair@pInput& (0+255),b
 17822  0127CE  0E00               	movlw	0
 17823  0127D0  0100               	movlb	0	; () banked
 17824  0127D2  21CB               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 17825  0127D4  0100               	movlb	0	; () banked
 17826  0127D6  6FC8               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17827  0127D8  C0CC  F0C9         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 17828  0127DC  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 17829  0127E0  0100               	movlb	0	; () banked
 17830  0127E2  6FCE               	movwf	Port_SetPin@Type& (0+255),b
 17831                           
 17832                           ;Port.c: 250: switch (Type)
 17833  0127E4  D042               	goto	l427
 17834  0127E6                     
 17835                           ; BSR set to: 0
 17836                           ;Port.c: 256: pValue &= 1;
 17837                           
 17838                           ; BSR set to: 0
 17839  0127E6  0E01               	movlw	1
 17840  0127E8  0100               	movlb	0	; () banked
 17841  0127EA  17CD               	andwf	Port_SetPin@pValue& (0+255),f,b
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17845  0127EC  0100               	movlb	0	; () banked
 17846  0127EE  EE20 F002          	lfsr	2,2
 17847  0127F2  51CA               	movf	Port_SetPin@pInput& (0+255),w,b
 17848  0127F4  26D9               	addwf	fsr2l,f,c
 17849  0127F6  51CB               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17850  0127F8  22DA               	addwfc	fsr2h,f,c
 17851  0127FA  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 17852  0127FE  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 17853  012802  C0CC  F0BD         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17854  012806  C0CD  F0BE         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17855  01280A  EC78  F09E         	call	_Byte_SetBit	;wreg free
 17856                           
 17857                           ;Port.c: 258: break;
 17858  01280E  0012               	return	
 17859  012810                     
 17860                           ;Port.c: 261: pValue &= 1;
 17861  012810  0E01               	movlw	1
 17862  012812  0100               	movlb	0	; () banked
 17863  012814  17CD               	andwf	Port_SetPin@pValue& (0+255),f,b
 17864                           
 17865                           ;Port.c: 262: pValue ^= 1;
 17866  012816  0E01               	movlw	1
 17867  012818  0100               	movlb	0	; () banked
 17868  01281A  1BCD               	xorwf	Port_SetPin@pValue& (0+255),f,b
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17872  01281C  0100               	movlb	0	; () banked
 17873  01281E  EE20 F002          	lfsr	2,2
 17874  012822  51CA               	movf	Port_SetPin@pInput& (0+255),w,b
 17875  012824  26D9               	addwf	fsr2l,f,c
 17876  012826  51CB               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17877  012828  22DA               	addwfc	fsr2h,f,c
 17878  01282A  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 17879  01282E  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 17880  012832  C0CC  F0BD         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17881  012836  C0CD  F0BE         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17882  01283A  EC78  F09E         	call	_Byte_SetBit	;wreg free
 17883                           
 17884                           ;Port.c: 264: break;
 17885  01283E  0012               	return	
 17886  012840                     
 17887                           ;Port.c: 266: pValue &= 1;
 17888  012840  0E01               	movlw	1
 17889  012842  0100               	movlb	0	; () banked
 17890  012844  17CD               	andwf	Port_SetPin@pValue& (0+255),f,b
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 17894  012846  0100               	movlb	0	; () banked
 17895  012848  EE20 F004          	lfsr	2,4
 17896  01284C  51CA               	movf	Port_SetPin@pInput& (0+255),w,b
 17897  01284E  26D9               	addwf	fsr2l,f,c
 17898  012850  51CB               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17899  012852  22DA               	addwfc	fsr2h,f,c
 17900  012854  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 17901  012858  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 17902  01285C  C0CC  F0BD         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17903  012860  C0CD  F0BE         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17904  012864  EC78  F09E         	call	_Byte_SetBit	;wreg free
 17905                           
 17906                           ;Port.c: 269: }
 17907                           
 17908                           ;Port.c: 268: break;
 17909  012868  0012               	return	
 17910  01286A                     l427:
 17911  01286A  0100               	movlb	0	; () banked
 17912  01286C  51CE               	movf	Port_SetPin@Type& (0+255),w,b
 17913                           
 17914                           ; Switch size 1, requested type "space"
 17915                           ; Number of cases is 4, Range of values is 0 to 3
 17916                           ; switch strategies available:
 17917                           ; Name         Instructions Cycles
 17918                           ; simple_byte           13     7 (average)
 17919                           ;	Chosen strategy is simple_byte
 17920  01286E  0A00               	xorlw	0	; case 0
 17921  012870  B4D8               	btfsc	status,2,c
 17922  012872  0012               	return	
 17923  012874  0A01               	xorlw	1	; case 1
 17924  012876  B4D8               	btfsc	status,2,c
 17925  012878  D7B6               	goto	l430
 17926  01287A  0A03               	xorlw	3	; case 2
 17927  01287C  B4D8               	btfsc	status,2,c
 17928  01287E  D7C8               	goto	l432
 17929  012880  0A01               	xorlw	1	; case 3
 17930  012882  A4D8               	btfss	status,2,c
 17931  012884  0012               	return	
 17932  012886  D7DC               	goto	l433
 17933  012888                     __end_of_Port_SetPin:
 17934                           	opt stack 0
 17935                           tosu	equ	0xFFF
 17936                           tosh	equ	0xFFE
 17937                           tosl	equ	0xFFD
 17938                           pclath	equ	0xFFA
 17939                           tblptru	equ	0xFF8
 17940                           tblptrh	equ	0xFF7
 17941                           tblptrl	equ	0xFF6
 17942                           tablat	equ	0xFF5
 17943                           prodh	equ	0xFF4
 17944                           prodl	equ	0xFF3
 17945                           intcon	equ	0xFF2
 17946                           postinc0	equ	0xFEE
 17947                           wreg	equ	0xFE8
 17948                           indf1	equ	0xFE7
 17949                           postdec1	equ	0xFE5
 17950                           fsr1h	equ	0xFE2
 17951                           fsr1l	equ	0xFE1
 17952                           indf2	equ	0xFDF
 17953                           postinc2	equ	0xFDE
 17954                           postdec2	equ	0xFDD
 17955                           plusw2	equ	0xFDB
 17956                           fsr2h	equ	0xFDA
 17957                           fsr2l	equ	0xFD9
 17958                           status	equ	0xFD8
 17959                           
 17960 ;; *************** function _Port_GetPin *****************
 17961 ;; Defined at:
 17962 ;;		line 271 in file "Library/Port.c"
 17963 ;; Parameters:    Size  Location     Type
 17964 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 17965 ;;		 -> PortB(10), PortE(10), PortC(10), 
 17966 ;;  pPin            1    2[BANK0 ] enum E6750
 17967 ;; Auto vars:     Size  Location     Type
 17968 ;;  Output          1    5[BANK0 ] unsigned char 
 17969 ;; Return value:  Size  Location     Type
 17970 ;;                  1    wreg      unsigned char 
 17971 ;; Registers used:
 17972 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17973 ;; Tracked objects:
 17974 ;;		On entry : 0/0
 17975 ;;		On exit  : 0/0
 17976 ;;		Unchanged: 0/0
 17977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17978 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17980 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17982 ;;Total ram usage:        6 bytes
 17983 ;; Hardware stack levels used:    1
 17984 ;; Hardware stack levels required when called:    7
 17985 ;; This function calls:
 17986 ;;		Nothing
 17987 ;; This function is called by:
 17988 ;;		_Port_TogglePin
 17989 ;;		_HMI_LeftSwitch
 17990 ;;		_HMI_RightSwitch
 17991 ;;		_HMI_UpSwitch
 17992 ;;		_HMI_DownSwitch
 17993 ;;		_MXK_TestButton
 17994 ;; This function uses a non-reentrant model
 17995 ;;
 17996                           
 17997                           	psect	text104
 17998  014228                     __ptext104:
 17999                           	opt stack 0
 18000  014228                     _Port_GetPin:
 18001                           	opt stack 21
 18002                           
 18003                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 18004                           
 18005                           ;incstack = 0
 18006  014228  0100               	movlb	0	; () banked
 18007  01422A  EE20 F006          	lfsr	2,6
 18008  01422E  51BB               	movf	Port_GetPin@pInput& (0+255),w,b
 18009  014230  26D9               	addwf	fsr2l,f,c
 18010  014232  51BC               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 18011  014234  22DA               	addwfc	fsr2h,f,c
 18012  014236  CFDE F0BE          	movff	postinc2,??_Port_GetPin
 18013  01423A  CFDD F0BF          	movff	postdec2,??_Port_GetPin+1
 18014  01423E  C0BE  FFD9         	movff	??_Port_GetPin,fsr2l
 18015  014242  C0BF  FFDA         	movff	??_Port_GetPin+1,fsr2h
 18016  014246  50DF               	movf	indf2,w,c
 18017  014248  0100               	movlb	0	; () banked
 18018  01424A  6FC0               	movwf	Port_GetPin@Output& (0+255),b
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;Port.c: 274: Output >>= (UINT8)pPin;
 18022  01424C  0100               	movlb	0	; () banked
 18023  01424E  29BD               	incf	Port_GetPin@pPin& (0+255),w,b
 18024  014250  0100               	movlb	0	; () banked
 18025  014252  6FBE               	movwf	??_Port_GetPin& (0+255),b
 18026  014254  D003               	goto	u6790
 18027  014256                     u6795:
 18028  014256  0100               	movlb	0	; () banked
 18029  014258  90D8               	bcf	status,0,c
 18030  01425A  33C0               	rrcf	Port_GetPin@Output& (0+255),f,b
 18031  01425C                     u6790:
 18032  01425C  0100               	movlb	0	; () banked
 18033  01425E  2FBE               	decfsz	??_Port_GetPin& (0+255),f,b
 18034  014260  D7FA               	goto	u6795
 18035                           
 18036                           ;Port.c: 275: Output &= 1;
 18037  014262  0E01               	movlw	1
 18038  014264  0100               	movlb	0	; () banked
 18039  014266  17C0               	andwf	Port_GetPin@Output& (0+255),f,b
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;Port.c: 276: return Output;
 18043  014268  0100               	movlb	0	; () banked
 18044  01426A  51C0               	movf	Port_GetPin@Output& (0+255),w,b
 18045  01426C  0012               	return	
 18046  01426E                     __end_of_Port_GetPin:
 18047                           	opt stack 0
 18048                           tosu	equ	0xFFF
 18049                           tosh	equ	0xFFE
 18050                           tosl	equ	0xFFD
 18051                           pclath	equ	0xFFA
 18052                           tblptru	equ	0xFF8
 18053                           tblptrh	equ	0xFF7
 18054                           tblptrl	equ	0xFF6
 18055                           tablat	equ	0xFF5
 18056                           prodh	equ	0xFF4
 18057                           prodl	equ	0xFF3
 18058                           intcon	equ	0xFF2
 18059                           postinc0	equ	0xFEE
 18060                           wreg	equ	0xFE8
 18061                           indf1	equ	0xFE7
 18062                           postdec1	equ	0xFE5
 18063                           fsr1h	equ	0xFE2
 18064                           fsr1l	equ	0xFE1
 18065                           indf2	equ	0xFDF
 18066                           postinc2	equ	0xFDE
 18067                           postdec2	equ	0xFDD
 18068                           plusw2	equ	0xFDB
 18069                           fsr2h	equ	0xFDA
 18070                           fsr2l	equ	0xFD9
 18071                           status	equ	0xFD8
 18072                           
 18073 ;; *************** function _HMI_Init *****************
 18074 ;; Defined at:
 18075 ;;		line 104 in file "HMI.c"
 18076 ;; Parameters:    Size  Location     Type
 18077 ;;		None
 18078 ;; Auto vars:     Size  Location     Type
 18079 ;;  in              2   59[BANK0 ] unsigned short 
 18080 ;; Return value:  Size  Location     Type
 18081 ;;                  1    wreg      void 
 18082 ;; Registers used:
 18083 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18084 ;; Tracked objects:
 18085 ;;		On entry : 0/0
 18086 ;;		On exit  : 0/0
 18087 ;;		Unchanged: 0/0
 18088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18093 ;;Total ram usage:        2 bytes
 18094 ;; Hardware stack levels used:    1
 18095 ;; Hardware stack levels required when called:   16
 18096 ;; This function calls:
 18097 ;;		_Button_Init
 18098 ;;		_SPI_Init
 18099 ;;		_SPI_MinSpeed
 18100 ;; This function is called by:
 18101 ;;		_init
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text105
 18106  0110EC                     __ptext105:
 18107                           	opt stack 0
 18108  0110EC                     _HMI_Init:
 18109                           	opt stack 13
 18110                           
 18111                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18112                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;incstack = 0
 18116  0110EC  0E68               	movlw	low (_HMIBoard+48)
 18117  0110EE  0101               	movlb	1	; () banked
 18118  0110F0  6F00               	movwf	Button_Init@pInput& (0+255),b
 18119  0110F2  0E03               	movlw	high (_HMIBoard+48)
 18120  0110F4  0101               	movlb	1	; () banked
 18121  0110F6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 18122  0110F8  0E00               	movlw	0
 18123  0110FA  0101               	movlb	1	; () banked
 18124  0110FC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18125  0110FE  0E02               	movlw	2
 18126  011100  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18127  011102  0E46               	movlw	low _HMI_InitButtons
 18128  011104  0101               	movlb	1	; () banked
 18129  011106  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 18130  011108  0E4A               	movlw	high _HMI_InitButtons
 18131  01110A  0101               	movlb	1	; () banked
 18132  01110C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18133  01110E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18134  011110  0101               	movlb	1	; () banked
 18135  011112  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18136  011114  0EC0               	movlw	low _HMI_DIPSwitch
 18137  011116  0101               	movlb	1	; () banked
 18138  011118  6F07               	movwf	Button_Init@pGetState& (0+255),b
 18139  01111A  0E48               	movlw	high _HMI_DIPSwitch
 18140  01111C  0101               	movlb	1	; () banked
 18141  01111E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18142  011120  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18143  011122  0101               	movlb	1	; () banked
 18144  011124  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18145  011126  0E5A               	movlw	low _Event_NULL
 18146  011128  0101               	movlb	1	; () banked
 18147  01112A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 18148  01112C  0E4A               	movlw	high _Event_NULL
 18149  01112E  0101               	movlb	1	; () banked
 18150  011130  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18151  011132  0E01               	movlw	low (_Event_NULL shr (0+16))
 18152  011134  0101               	movlb	1	; () banked
 18153  011136  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18154  011138  EC10  F093         	call	_Button_Init	;wreg free
 18155                           
 18156                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18157                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 18158  01113C  0E4A               	movlw	low (_HMIBoard+18)
 18159  01113E  0101               	movlb	1	; () banked
 18160  011140  6F00               	movwf	Button_Init@pInput& (0+255),b
 18161  011142  0E03               	movlw	high (_HMIBoard+18)
 18162  011144  0101               	movlb	1	; () banked
 18163  011146  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 18164  011148  0E00               	movlw	0
 18165  01114A  0101               	movlb	1	; () banked
 18166  01114C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18167  01114E  0E02               	movlw	2
 18168  011150  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18169  011152  0E46               	movlw	low _HMI_InitButtons
 18170  011154  0101               	movlb	1	; () banked
 18171  011156  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 18172  011158  0E4A               	movlw	high _HMI_InitButtons
 18173  01115A  0101               	movlb	1	; () banked
 18174  01115C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18175  01115E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18176  011160  0101               	movlb	1	; () banked
 18177  011162  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18178  011164  0E20               	movlw	low _HMI_LeftSwitch
 18179  011166  0101               	movlb	1	; () banked
 18180  011168  6F07               	movwf	Button_Init@pGetState& (0+255),b
 18181  01116A  0E49               	movlw	high _HMI_LeftSwitch
 18182  01116C  0101               	movlb	1	; () banked
 18183  01116E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18184  011170  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18185  011172  0101               	movlb	1	; () banked
 18186  011174  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18187  011176  0E5A               	movlw	low _Event_NULL
 18188  011178  0101               	movlb	1	; () banked
 18189  01117A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 18190  01117C  0E4A               	movlw	high _Event_NULL
 18191  01117E  0101               	movlb	1	; () banked
 18192  011180  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18193  011182  0E01               	movlw	low (_Event_NULL shr (0+16))
 18194  011184  0101               	movlb	1	; () banked
 18195  011186  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18196  011188  EC10  F093         	call	_Button_Init	;wreg free
 18197                           
 18198                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18199                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 18200  01118C  0E40               	movlw	low (_HMIBoard+8)
 18201  01118E  0101               	movlb	1	; () banked
 18202  011190  6F00               	movwf	Button_Init@pInput& (0+255),b
 18203  011192  0E03               	movlw	high (_HMIBoard+8)
 18204  011194  0101               	movlb	1	; () banked
 18205  011196  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 18206  011198  0E00               	movlw	0
 18207  01119A  0101               	movlb	1	; () banked
 18208  01119C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18209  01119E  0E02               	movlw	2
 18210  0111A0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18211  0111A2  0E46               	movlw	low _HMI_InitButtons
 18212  0111A4  0101               	movlb	1	; () banked
 18213  0111A6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 18214  0111A8  0E4A               	movlw	high _HMI_InitButtons
 18215  0111AA  0101               	movlb	1	; () banked
 18216  0111AC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18217  0111AE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18218  0111B0  0101               	movlb	1	; () banked
 18219  0111B2  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18220  0111B4  0E08               	movlw	low _HMI_RightSwitch
 18221  0111B6  0101               	movlb	1	; () banked
 18222  0111B8  6F07               	movwf	Button_Init@pGetState& (0+255),b
 18223  0111BA  0E49               	movlw	high _HMI_RightSwitch
 18224  0111BC  0101               	movlb	1	; () banked
 18225  0111BE  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18226  0111C0  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 18227  0111C2  0101               	movlb	1	; () banked
 18228  0111C4  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18229  0111C6  0E5A               	movlw	low _Event_NULL
 18230  0111C8  0101               	movlb	1	; () banked
 18231  0111CA  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 18232  0111CC  0E4A               	movlw	high _Event_NULL
 18233  0111CE  0101               	movlb	1	; () banked
 18234  0111D0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18235  0111D2  0E01               	movlw	low (_Event_NULL shr (0+16))
 18236  0111D4  0101               	movlb	1	; () banked
 18237  0111D6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18238  0111D8  EC10  F093         	call	_Button_Init	;wreg free
 18239                           
 18240                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18241                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 18242  0111DC  0E54               	movlw	low (_HMIBoard+28)
 18243  0111DE  0101               	movlb	1	; () banked
 18244  0111E0  6F00               	movwf	Button_Init@pInput& (0+255),b
 18245  0111E2  0E03               	movlw	high (_HMIBoard+28)
 18246  0111E4  0101               	movlb	1	; () banked
 18247  0111E6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 18248  0111E8  0E00               	movlw	0
 18249  0111EA  0101               	movlb	1	; () banked
 18250  0111EC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18251  0111EE  0E02               	movlw	2
 18252  0111F0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18253  0111F2  0E46               	movlw	low _HMI_InitButtons
 18254  0111F4  0101               	movlb	1	; () banked
 18255  0111F6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 18256  0111F8  0E4A               	movlw	high _HMI_InitButtons
 18257  0111FA  0101               	movlb	1	; () banked
 18258  0111FC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18259  0111FE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18260  011200  0101               	movlb	1	; () banked
 18261  011202  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18262  011204  0EF0               	movlw	low _HMI_UpSwitch
 18263  011206  0101               	movlb	1	; () banked
 18264  011208  6F07               	movwf	Button_Init@pGetState& (0+255),b
 18265  01120A  0E48               	movlw	high _HMI_UpSwitch
 18266  01120C  0101               	movlb	1	; () banked
 18267  01120E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18268  011210  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 18269  011212  0101               	movlb	1	; () banked
 18270  011214  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18271  011216  0E5A               	movlw	low _Event_NULL
 18272  011218  0101               	movlb	1	; () banked
 18273  01121A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 18274  01121C  0E4A               	movlw	high _Event_NULL
 18275  01121E  0101               	movlb	1	; () banked
 18276  011220  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18277  011222  0E01               	movlw	low (_Event_NULL shr (0+16))
 18278  011224  0101               	movlb	1	; () banked
 18279  011226  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18280  011228  EC10  F093         	call	_Button_Init	;wreg free
 18281                           
 18282                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18283                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 18284  01122C  0E5E               	movlw	low (_HMIBoard+38)
 18285  01122E  0101               	movlb	1	; () banked
 18286  011230  6F00               	movwf	Button_Init@pInput& (0+255),b
 18287  011232  0E03               	movlw	high (_HMIBoard+38)
 18288  011234  0101               	movlb	1	; () banked
 18289  011236  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 18290  011238  0E00               	movlw	0
 18291  01123A  0101               	movlb	1	; () banked
 18292  01123C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18293  01123E  0E02               	movlw	2
 18294  011240  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18295  011242  0E46               	movlw	low _HMI_InitButtons
 18296  011244  0101               	movlb	1	; () banked
 18297  011246  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 18298  011248  0E4A               	movlw	high _HMI_InitButtons
 18299  01124A  0101               	movlb	1	; () banked
 18300  01124C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18301  01124E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18302  011250  0101               	movlb	1	; () banked
 18303  011252  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18304  011254  0ED8               	movlw	low _HMI_DownSwitch
 18305  011256  0101               	movlb	1	; () banked
 18306  011258  6F07               	movwf	Button_Init@pGetState& (0+255),b
 18307  01125A  0E48               	movlw	high _HMI_DownSwitch
 18308  01125C  0101               	movlb	1	; () banked
 18309  01125E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18310  011260  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 18311  011262  0101               	movlb	1	; () banked
 18312  011264  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18313  011266  0E5A               	movlw	low _Event_NULL
 18314  011268  0101               	movlb	1	; () banked
 18315  01126A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 18316  01126C  0E4A               	movlw	high _Event_NULL
 18317  01126E  0101               	movlb	1	; () banked
 18318  011270  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18319  011272  0E01               	movlw	low (_Event_NULL shr (0+16))
 18320  011274  0101               	movlb	1	; () banked
 18321  011276  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18322  011278  EC10  F093         	call	_Button_Init	;wreg free
 18323                           
 18324                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18325  01127C  0EA0               	movlw	160
 18326  01127E  0100               	movlb	0	; () banked
 18327  011280  6FE8               	movwf	SPI_Init@pClock& (0+255),b
 18328  011282  0E86               	movlw	134
 18329  011284  6FE9               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18330  011286  0E01               	movlw	1
 18331  011288  6FEA               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18332  01128A  0E00               	movlw	0
 18333  01128C  6FEB               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18334  01128E  0E00               	movlw	0
 18335  011290  0100               	movlb	0	; () banked
 18336  011292  6FEC               	movwf	SPI_Init@pChannel& (0+255),b
 18337  011294  0E02               	movlw	2
 18338  011296  0100               	movlb	0	; () banked
 18339  011298  6FED               	movwf	SPI_Init@pMode& (0+255),b
 18340  01129A  EC00  F080         	call	_SPI_Init	;wreg free
 18341                           
 18342                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18343  01129E  0E72               	movlw	low _SPI1
 18344  0112A0  0100               	movlb	0	; () banked
 18345  0112A2  6FCA               	movwf	SPI_MinSpeed@pInput& (0+255),b
 18346  0112A4  0E03               	movlw	high _SPI1
 18347  0112A6  0100               	movlb	0	; () banked
 18348  0112A8  6FCB               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18349  0112AA  EC63  F09C         	call	_SPI_MinSpeed	;wreg free
 18350                           
 18351                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18352  0112AE  0E00               	movlw	0
 18353  0112B0  0100               	movlb	0	; () banked
 18354  0112B2  6FF7               	movwf	(HMI_Init@in+1)& (0+255),b
 18355  0112B4  0E00               	movlw	0
 18356  0112B6  6FF6               	movwf	HMI_Init@in& (0+255),b
 18357  0112B8                     l12338:
 18358                           
 18359                           ; BSR set to: 0
 18360  0112B8  0100               	movlb	0	; () banked
 18361  0112BA  51F7               	movf	(HMI_Init@in+1)& (0+255),w,b
 18362  0112BC  E113               	bnz	l1153
 18363  0112BE  0E08               	movlw	8
 18364  0112C0  0100               	movlb	0	; () banked
 18365  0112C2  5DF6               	subwf	HMI_Init@in& (0+255),w,b
 18366  0112C4  B0D8               	btfsc	status,0,c
 18367  0112C6  0012               	return	
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18371                           
 18372                           ; BSR set to: 0
 18373                           
 18374                           ; BSR set to: 0
 18375  0112C8  0E38               	movlw	low _HMIBoard
 18376  0112CA  0100               	movlb	0	; () banked
 18377  0112CC  25F6               	addwf	HMI_Init@in& (0+255),w,b
 18378  0112CE  6ED9               	movwf	fsr2l,c
 18379  0112D0  0E03               	movlw	high _HMIBoard
 18380  0112D2  0100               	movlb	0	; () banked
 18381  0112D4  21F7               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18382  0112D6  6EDA               	movwf	fsr2h,c
 18383  0112D8  0E00               	movlw	0
 18384  0112DA  6EDF               	movwf	indf2,c
 18385                           
 18386                           ; BSR set to: 0
 18387  0112DC  0100               	movlb	0	; () banked
 18388  0112DE  4BF6               	infsnz	HMI_Init@in& (0+255),f,b
 18389  0112E0  2BF7               	incf	(HMI_Init@in+1)& (0+255),f,b
 18390  0112E2  D7EA               	goto	l12338
 18391  0112E4                     l1153:
 18392                           
 18393                           ; BSR set to: 0
 18394  0112E4  0012               	return		;funcret
 18395  0112E6                     __end_of_HMI_Init:
 18396                           	opt stack 0
 18397                           tosu	equ	0xFFF
 18398                           tosh	equ	0xFFE
 18399                           tosl	equ	0xFFD
 18400                           pclath	equ	0xFFA
 18401                           tblptru	equ	0xFF8
 18402                           tblptrh	equ	0xFF7
 18403                           tblptrl	equ	0xFF6
 18404                           tablat	equ	0xFF5
 18405                           prodh	equ	0xFF4
 18406                           prodl	equ	0xFF3
 18407                           intcon	equ	0xFF2
 18408                           postinc0	equ	0xFEE
 18409                           wreg	equ	0xFE8
 18410                           indf1	equ	0xFE7
 18411                           postdec1	equ	0xFE5
 18412                           fsr1h	equ	0xFE2
 18413                           fsr1l	equ	0xFE1
 18414                           indf2	equ	0xFDF
 18415                           postinc2	equ	0xFDE
 18416                           postdec2	equ	0xFDD
 18417                           plusw2	equ	0xFDB
 18418                           fsr2h	equ	0xFDA
 18419                           fsr2l	equ	0xFD9
 18420                           status	equ	0xFD8
 18421                           
 18422 ;; *************** function _SPI_MinSpeed *****************
 18423 ;; Defined at:
 18424 ;;		line 190 in file "Library/SPI.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18427 ;;		 -> SPI1(11), 
 18428 ;; Auto vars:     Size  Location     Type
 18429 ;;		None
 18430 ;; Return value:  Size  Location     Type
 18431 ;;                  1    wreg      void 
 18432 ;; Registers used:
 18433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18434 ;; Tracked objects:
 18435 ;;		On entry : 0/0
 18436 ;;		On exit  : 0/0
 18437 ;;		Unchanged: 0/0
 18438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;Total ram usage:        2 bytes
 18444 ;; Hardware stack levels used:    1
 18445 ;; Hardware stack levels required when called:    9
 18446 ;; This function calls:
 18447 ;;		_Byte_SetBit
 18448 ;;		_Byte_SetQuad
 18449 ;; This function is called by:
 18450 ;;		_HMI_Init
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           	psect	text106
 18455  0138C6                     __ptext106:
 18456                           	opt stack 0
 18457  0138C6                     _SPI_MinSpeed:
 18458                           	opt stack 19
 18459                           
 18460                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18461                           
 18462                           ; BSR set to: 0
 18463                           ;incstack = 0
 18464  0138C6  0100               	movlb	0	; () banked
 18465  0138C8  EE20 F006          	lfsr	2,6
 18466  0138CC  51CA               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18467  0138CE  26D9               	addwf	fsr2l,f,c
 18468  0138D0  51CB               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18469  0138D2  22DA               	addwfc	fsr2h,f,c
 18470  0138D4  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18471  0138D8  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18472  0138DC  0E05               	movlw	5
 18473  0138DE  0100               	movlb	0	; () banked
 18474  0138E0  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18475  0138E2  0E00               	movlw	0
 18476  0138E4  0100               	movlb	0	; () banked
 18477  0138E6  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18478  0138E8  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18479                           
 18480                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 18481  0138EC  0100               	movlb	0	; () banked
 18482  0138EE  EE20 F006          	lfsr	2,6
 18483  0138F2  51CA               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18484  0138F4  26D9               	addwf	fsr2l,f,c
 18485  0138F6  51CB               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18486  0138F8  22DA               	addwfc	fsr2h,f,c
 18487  0138FA  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 18488  0138FE  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 18489  013902  0E00               	movlw	0
 18490  013904  0100               	movlb	0	; () banked
 18491  013906  6FC8               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18492  013908  0E02               	movlw	2
 18493  01390A  0100               	movlb	0	; () banked
 18494  01390C  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 18495  01390E  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 18496                           
 18497                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18498  013912  0100               	movlb	0	; () banked
 18499  013914  EE20 F006          	lfsr	2,6
 18500  013918  51CA               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18501  01391A  26D9               	addwf	fsr2l,f,c
 18502  01391C  51CB               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18503  01391E  22DA               	addwfc	fsr2h,f,c
 18504  013920  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18505  013924  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18506  013928  0E05               	movlw	5
 18507  01392A  0100               	movlb	0	; () banked
 18508  01392C  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18509  01392E  0E01               	movlw	1
 18510  013930  0100               	movlb	0	; () banked
 18511  013932  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18512  013934  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18513  013938  0012               	return		;funcret
 18514  01393A                     __end_of_SPI_MinSpeed:
 18515                           	opt stack 0
 18516                           tosu	equ	0xFFF
 18517                           tosh	equ	0xFFE
 18518                           tosl	equ	0xFFD
 18519                           pclath	equ	0xFFA
 18520                           tblptru	equ	0xFF8
 18521                           tblptrh	equ	0xFF7
 18522                           tblptrl	equ	0xFF6
 18523                           tablat	equ	0xFF5
 18524                           prodh	equ	0xFF4
 18525                           prodl	equ	0xFF3
 18526                           intcon	equ	0xFF2
 18527                           postinc0	equ	0xFEE
 18528                           wreg	equ	0xFE8
 18529                           indf1	equ	0xFE7
 18530                           postdec1	equ	0xFE5
 18531                           fsr1h	equ	0xFE2
 18532                           fsr1l	equ	0xFE1
 18533                           indf2	equ	0xFDF
 18534                           postinc2	equ	0xFDE
 18535                           postdec2	equ	0xFDD
 18536                           plusw2	equ	0xFDB
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _SPI_Init *****************
 18542 ;; Defined at:
 18543 ;;		line 12 in file "Library/SPI.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;  pClock          4   45[BANK0 ] unsigned long 
 18546 ;;  pChannel        1   49[BANK0 ] enum E6744
 18547 ;;  pMode           1   50[BANK0 ] enum E6748
 18548 ;; Auto vars:     Size  Location     Type
 18549 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 18550 ;;		 -> SPI1(11), SPI2(11), 
 18551 ;; Return value:  Size  Location     Type
 18552 ;;                  1    wreg      void 
 18553 ;; Registers used:
 18554 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18555 ;; Tracked objects:
 18556 ;;		On entry : 0/0
 18557 ;;		On exit  : 0/0
 18558 ;;		Unchanged: 0/0
 18559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18560 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18563 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18564 ;;Total ram usage:        8 bytes
 18565 ;; Hardware stack levels used:    1
 18566 ;; Hardware stack levels required when called:   12
 18567 ;; This function calls:
 18568 ;;		_Byte_SetBit
 18569 ;;		_Byte_SetQuad
 18570 ;;		_Port_SetPinType
 18571 ;;		_SPI_DCS
 18572 ;;		_SPI_DisableISR
 18573 ;;		_Timer2_Init
 18574 ;; This function is called by:
 18575 ;;		_Configure_GPIOs
 18576 ;;		_HMI_Init
 18577 ;; This function uses a non-reentrant model
 18578 ;;
 18579                           
 18580                           	psect	text107
 18581  010000                     __ptext107:
 18582                           	opt stack 0
 18583  010000                     _SPI_Init:
 18584                           	opt stack 15
 18585                           
 18586                           ;SPI.c: 14: SPIPtr pInput;
 18587                           ;SPI.c: 16: switch (pChannel)
 18588                           
 18589                           ;incstack = 0
 18590  010000  D00C               	goto	l597
 18591  010002                     
 18592                           ;SPI.c: 19: pInput = &SPI1;
 18593  010002  0E72               	movlw	low _SPI1
 18594  010004  0100               	movlb	0	; () banked
 18595  010006  6FEE               	movwf	SPI_Init@pInput& (0+255),b
 18596  010008  0E03               	movlw	high _SPI1
 18597  01000A  D004               	goto	L10
 18598  01000C                     
 18599                           ; BSR set to: 0
 18600                           ;SPI.c: 22: pInput = &SPI2;
 18601                           
 18602                           ; BSR set to: 0
 18603  01000C  0E7D               	movlw	low _SPI2
 18604  01000E  0100               	movlb	0	; () banked
 18605  010010  6FEE               	movwf	SPI_Init@pInput& (0+255),b
 18606  010012  0E03               	movlw	high _SPI2
 18607  010014                     L10:
 18608  010014  0100               	movlb	0	; () banked
 18609  010016  6FEF               	movwf	(SPI_Init@pInput+1)& (0+255),b
 18610                           
 18611                           ; BSR set to: 0
 18612                           ;SPI.c: 24: };
 18613                           
 18614                           ;SPI.c: 23: break;
 18615  010018  D008               	goto	l599
 18616  01001A                     l597:
 18617                           
 18618                           ; BSR set to: 0
 18619  01001A  0100               	movlb	0	; () banked
 18620  01001C  51EC               	movf	SPI_Init@pChannel& (0+255),w,b
 18621                           
 18622                           ; Switch size 1, requested type "space"
 18623                           ; Number of cases is 2, Range of values is 0 to 1
 18624                           ; switch strategies available:
 18625                           ; Name         Instructions Cycles
 18626                           ; simple_byte            7     4 (average)
 18627                           ;	Chosen strategy is simple_byte
 18628  01001E  0A00               	xorlw	0	; case 0
 18629  010020  B4D8               	btfsc	status,2,c
 18630  010022  D7EF               	goto	l598
 18631  010024  0A01               	xorlw	1	; case 1
 18632  010026  B4D8               	btfsc	status,2,c
 18633  010028  D7F1               	goto	l600
 18634  01002A                     l599:
 18635                           
 18636                           ; BSR set to: 0
 18637                           ;SPI.c: 26: pInput->mChannel = pChannel;
 18638                           
 18639                           ; BSR set to: 0
 18640  01002A  0100               	movlb	0	; () banked
 18641  01002C  EE20 F002          	lfsr	2,2
 18642  010030  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18643  010032  26D9               	addwf	fsr2l,f,c
 18644  010034  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18645  010036  22DA               	addwfc	fsr2h,f,c
 18646  010038  C0EC  FFDF         	movff	SPI_Init@pChannel,indf2
 18647                           
 18648                           ;SPI.c: 35: switch (pChannel)
 18649  01003C  D0B1               	goto	l601
 18650  01003E                     
 18651                           ; BSR set to: 0
 18652                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 18653                           
 18654                           ; BSR set to: 0
 18655  01003E  0EA9               	movlw	low _PortC
 18656  010040  0100               	movlb	0	; () banked
 18657  010042  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18658  010044  0E00               	movlw	high _PortC
 18659  010046  0100               	movlb	0	; () banked
 18660  010048  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18661  01004A  0E02               	movlw	2
 18662  01004C  0100               	movlb	0	; () banked
 18663  01004E  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18664  010050  0E03               	movlw	3
 18665  010052  0100               	movlb	0	; () banked
 18666  010054  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18667  010056  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18668                           
 18669                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 18670  01005A  0EA9               	movlw	low _PortC
 18671  01005C  0100               	movlb	0	; () banked
 18672  01005E  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18673  010060  0E00               	movlw	high _PortC
 18674  010062  0100               	movlb	0	; () banked
 18675  010064  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18676  010066  0E03               	movlw	3
 18677  010068  0100               	movlb	0	; () banked
 18678  01006A  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18679  01006C  0E03               	movlw	3
 18680  01006E  0100               	movlb	0	; () banked
 18681  010070  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18682  010072  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18683                           
 18684                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 18685  010076  0EA9               	movlw	low _PortC
 18686  010078  0100               	movlb	0	; () banked
 18687  01007A  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18688  01007C  0E00               	movlw	high _PortC
 18689  01007E  0100               	movlb	0	; () banked
 18690  010080  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18691  010082  0E05               	movlw	5
 18692  010084  0100               	movlb	0	; () banked
 18693  010086  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18694  010088  0E03               	movlw	3
 18695  01008A  0100               	movlb	0	; () banked
 18696  01008C  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18697  01008E  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18698                           
 18699                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 18700  010092  0EA9               	movlw	low _PortC
 18701  010094  0100               	movlb	0	; () banked
 18702  010096  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18703  010098  0E00               	movlw	high _PortC
 18704  01009A  0100               	movlb	0	; () banked
 18705  01009C  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18706  01009E  0E04               	movlw	4
 18707  0100A0  0100               	movlb	0	; () banked
 18708  0100A2  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18709  0100A4  0E00               	movlw	0
 18710  0100A6  0100               	movlb	0	; () banked
 18711  0100A8  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18712  0100AA  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18713                           
 18714                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 18715  0100AE  0100               	movlb	0	; () banked
 18716  0100B0  EE20 F003          	lfsr	2,3
 18717  0100B4  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18718  0100B6  26D9               	addwf	fsr2l,f,c
 18719  0100B8  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18720  0100BA  22DA               	addwfc	fsr2h,f,c
 18721  0100BC  0EC7               	movlw	199
 18722  0100BE  6EDE               	movwf	postinc2,c
 18723  0100C0  0E0F               	movlw	15
 18724  0100C2  6EDD               	movwf	postdec2,c
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 18728  0100C4  0100               	movlb	0	; () banked
 18729  0100C6  EE20 F006          	lfsr	2,6
 18730  0100CA  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18731  0100CC  26D9               	addwf	fsr2l,f,c
 18732  0100CE  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18733  0100D0  22DA               	addwfc	fsr2h,f,c
 18734  0100D2  0EC6               	movlw	198
 18735  0100D4  6EDE               	movwf	postinc2,c
 18736  0100D6  0E0F               	movlw	15
 18737  0100D8  6EDD               	movwf	postdec2,c
 18738                           
 18739                           ; BSR set to: 0
 18740                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 18741  0100DA  0100               	movlb	0	; () banked
 18742  0100DC  EE20 F009          	lfsr	2,9
 18743  0100E0  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18744  0100E2  26D9               	addwf	fsr2l,f,c
 18745  0100E4  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18746  0100E6  22DA               	addwfc	fsr2h,f,c
 18747  0100E8  0EC9               	movlw	201
 18748  0100EA  D056               	goto	L11
 18749  0100EC                     
 18750                           ; BSR set to: 0
 18751                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 18752                           
 18753                           ; BSR set to: 0
 18754  0100EC  0E9F               	movlw	low _PortD
 18755  0100EE  0100               	movlb	0	; () banked
 18756  0100F0  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18757  0100F2  0E00               	movlw	high _PortD
 18758  0100F4  0100               	movlb	0	; () banked
 18759  0100F6  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18760  0100F8  0E07               	movlw	7
 18761  0100FA  0100               	movlb	0	; () banked
 18762  0100FC  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18763  0100FE  0E03               	movlw	3
 18764  010100  0100               	movlb	0	; () banked
 18765  010102  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18766  010104  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18767                           
 18768                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 18769  010108  0E9F               	movlw	low _PortD
 18770  01010A  0100               	movlb	0	; () banked
 18771  01010C  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18772  01010E  0E00               	movlw	high _PortD
 18773  010110  0100               	movlb	0	; () banked
 18774  010112  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18775  010114  0E06               	movlw	6
 18776  010116  0100               	movlb	0	; () banked
 18777  010118  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18778  01011A  0E03               	movlw	3
 18779  01011C  0100               	movlb	0	; () banked
 18780  01011E  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18781  010120  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18782                           
 18783                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 18784  010124  0E9F               	movlw	low _PortD
 18785  010126  0100               	movlb	0	; () banked
 18786  010128  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18787  01012A  0E00               	movlw	high _PortD
 18788  01012C  0100               	movlb	0	; () banked
 18789  01012E  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18790  010130  0E04               	movlw	4
 18791  010132  0100               	movlb	0	; () banked
 18792  010134  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18793  010136  0E03               	movlw	3
 18794  010138  0100               	movlb	0	; () banked
 18795  01013A  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18796  01013C  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18797                           
 18798                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 18799  010140  0E9F               	movlw	low _PortD
 18800  010142  0100               	movlb	0	; () banked
 18801  010144  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 18802  010146  0E00               	movlw	high _PortD
 18803  010148  0100               	movlb	0	; () banked
 18804  01014A  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18805  01014C  0E05               	movlw	5
 18806  01014E  0100               	movlb	0	; () banked
 18807  010150  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 18808  010152  0E00               	movlw	0
 18809  010154  0100               	movlb	0	; () banked
 18810  010156  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 18811  010158  EC54  F08A         	call	_Port_SetPinType	;wreg free
 18812                           
 18813                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 18814  01015C  0100               	movlb	0	; () banked
 18815  01015E  EE20 F003          	lfsr	2,3
 18816  010162  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18817  010164  26D9               	addwf	fsr2l,f,c
 18818  010166  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18819  010168  22DA               	addwfc	fsr2h,f,c
 18820  01016A  0E6D               	movlw	109
 18821  01016C  6EDE               	movwf	postinc2,c
 18822  01016E  0E0F               	movlw	15
 18823  010170  6EDD               	movwf	postdec2,c
 18824                           
 18825                           ; BSR set to: 0
 18826                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 18827  010172  0100               	movlb	0	; () banked
 18828  010174  EE20 F006          	lfsr	2,6
 18829  010178  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18830  01017A  26D9               	addwf	fsr2l,f,c
 18831  01017C  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18832  01017E  22DA               	addwfc	fsr2h,f,c
 18833  010180  0E6C               	movlw	108
 18834  010182  6EDE               	movwf	postinc2,c
 18835  010184  0E0F               	movlw	15
 18836  010186  6EDD               	movwf	postdec2,c
 18837                           
 18838                           ; BSR set to: 0
 18839                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 18840  010188  0100               	movlb	0	; () banked
 18841  01018A  EE20 F009          	lfsr	2,9
 18842  01018E  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18843  010190  26D9               	addwf	fsr2l,f,c
 18844  010192  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18845  010194  22DA               	addwfc	fsr2h,f,c
 18846  010196  0E6F               	movlw	111
 18847  010198                     L11:
 18848  010198  6EDE               	movwf	postinc2,c
 18849  01019A  0E0F               	movlw	15
 18850  01019C  6EDD               	movwf	postdec2,c
 18851                           
 18852                           ;SPI.c: 68: break;
 18853  01019E  D009               	goto	l603
 18854  0101A0                     l601:
 18855                           
 18856                           ; BSR set to: 0
 18857                           
 18858                           ; BSR set to: 0
 18859  0101A0  0100               	movlb	0	; () banked
 18860  0101A2  51EC               	movf	SPI_Init@pChannel& (0+255),w,b
 18861                           
 18862                           ; Switch size 1, requested type "space"
 18863                           ; Number of cases is 2, Range of values is 0 to 1
 18864                           ; switch strategies available:
 18865                           ; Name         Instructions Cycles
 18866                           ; simple_byte            7     4 (average)
 18867                           ;	Chosen strategy is simple_byte
 18868  0101A4  0A00               	xorlw	0	; case 0
 18869  0101A6  B4D8               	btfsc	status,2,c
 18870  0101A8  D74A               	goto	l602
 18871  0101AA  0A01               	xorlw	1	; case 1
 18872  0101AC  A4D8               	btfss	status,2,c
 18873  0101AE  0012               	return	
 18874  0101B0  D79D               	goto	l604
 18875  0101B2                     l603:
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18879                           
 18880                           ; BSR set to: 0
 18881  0101B2  0100               	movlb	0	; () banked
 18882  0101B4  EE20 F006          	lfsr	2,6
 18883  0101B8  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18884  0101BA  26D9               	addwf	fsr2l,f,c
 18885  0101BC  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18886  0101BE  22DA               	addwfc	fsr2h,f,c
 18887  0101C0  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18888  0101C4  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18889  0101C8  0E05               	movlw	5
 18890  0101CA  0100               	movlb	0	; () banked
 18891  0101CC  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18892  0101CE  0E00               	movlw	0
 18893  0101D0  0100               	movlb	0	; () banked
 18894  0101D2  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18895  0101D4  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18896                           
 18897                           ;SPI.c: 77: switch(pMode)
 18898  0101D8  D09C               	goto	l607
 18899  0101DA                     
 18900                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18901  0101DA  0100               	movlb	0	; () banked
 18902  0101DC  EE20 F006          	lfsr	2,6
 18903  0101E0  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18904  0101E2  26D9               	addwf	fsr2l,f,c
 18905  0101E4  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18906  0101E6  22DA               	addwfc	fsr2h,f,c
 18907  0101E8  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18908  0101EC  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18909  0101F0  0E04               	movlw	4
 18910  0101F2  0100               	movlb	0	; () banked
 18911  0101F4  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18912  0101F6  0E00               	movlw	0
 18913  0101F8  0100               	movlb	0	; () banked
 18914  0101FA  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18915  0101FC  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18916                           
 18917                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 18918  010200  0100               	movlb	0	; () banked
 18919  010202  EE20 F003          	lfsr	2,3
 18920  010206  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18921  010208  26D9               	addwf	fsr2l,f,c
 18922  01020A  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18923  01020C  22DA               	addwfc	fsr2h,f,c
 18924  01020E  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18925  010212  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18926  010216  0E06               	movlw	6
 18927  010218  0100               	movlb	0	; () banked
 18928  01021A  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18929  01021C  0E00               	movlw	0
 18930  01021E  0100               	movlb	0	; () banked
 18931  010220  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18932  010222  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18933                           
 18934                           ;SPI.c: 82: break;
 18935  010226  D084               	goto	l609
 18936  010228                     
 18937                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18938  010228  0100               	movlb	0	; () banked
 18939  01022A  EE20 F006          	lfsr	2,6
 18940  01022E  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18941  010230  26D9               	addwf	fsr2l,f,c
 18942  010232  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18943  010234  22DA               	addwfc	fsr2h,f,c
 18944  010236  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18945  01023A  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18946  01023E  0E04               	movlw	4
 18947  010240  0100               	movlb	0	; () banked
 18948  010242  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18949  010244  0E00               	movlw	0
 18950  010246  0100               	movlb	0	; () banked
 18951  010248  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18952  01024A  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18953                           
 18954                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 18955  01024E  0100               	movlb	0	; () banked
 18956  010250  EE20 F003          	lfsr	2,3
 18957  010254  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18958  010256  26D9               	addwf	fsr2l,f,c
 18959  010258  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18960  01025A  22DA               	addwfc	fsr2h,f,c
 18961  01025C  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18962  010260  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18963  010264  0E06               	movlw	6
 18964  010266  0100               	movlb	0	; () banked
 18965  010268  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18966  01026A  0E01               	movlw	1
 18967  01026C  0100               	movlb	0	; () banked
 18968  01026E  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18969  010270  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18970                           
 18971                           ;SPI.c: 86: break;
 18972  010274  D05D               	goto	l609
 18973  010276                     
 18974                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 18975  010276  0100               	movlb	0	; () banked
 18976  010278  EE20 F006          	lfsr	2,6
 18977  01027C  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18978  01027E  26D9               	addwf	fsr2l,f,c
 18979  010280  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18980  010282  22DA               	addwfc	fsr2h,f,c
 18981  010284  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18982  010288  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 18983  01028C  0E04               	movlw	4
 18984  01028E  0100               	movlb	0	; () banked
 18985  010290  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 18986  010292  0E01               	movlw	1
 18987  010294  0100               	movlb	0	; () banked
 18988  010296  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 18989  010298  EC78  F09E         	call	_Byte_SetBit	;wreg free
 18990                           
 18991                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 18992  01029C  0100               	movlb	0	; () banked
 18993  01029E  EE20 F003          	lfsr	2,3
 18994  0102A2  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 18995  0102A4  26D9               	addwf	fsr2l,f,c
 18996  0102A6  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18997  0102A8  22DA               	addwfc	fsr2h,f,c
 18998  0102AA  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 18999  0102AE  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19000  0102B2  0E06               	movlw	6
 19001  0102B4  0100               	movlb	0	; () banked
 19002  0102B6  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19003  0102B8  0E00               	movlw	0
 19004  0102BA  0100               	movlb	0	; () banked
 19005  0102BC  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19006  0102BE  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19007                           
 19008                           ;SPI.c: 90: break;
 19009  0102C2  D036               	goto	l609
 19010  0102C4                     
 19011                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19012  0102C4  0100               	movlb	0	; () banked
 19013  0102C6  EE20 F006          	lfsr	2,6
 19014  0102CA  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19015  0102CC  26D9               	addwf	fsr2l,f,c
 19016  0102CE  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19017  0102D0  22DA               	addwfc	fsr2h,f,c
 19018  0102D2  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 19019  0102D6  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19020  0102DA  0E04               	movlw	4
 19021  0102DC  0100               	movlb	0	; () banked
 19022  0102DE  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19023  0102E0  0E01               	movlw	1
 19024  0102E2  0100               	movlb	0	; () banked
 19025  0102E4  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19026  0102E6  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19027                           
 19028                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19029  0102EA  0100               	movlb	0	; () banked
 19030  0102EC  EE20 F003          	lfsr	2,3
 19031  0102F0  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19032  0102F2  26D9               	addwf	fsr2l,f,c
 19033  0102F4  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19034  0102F6  22DA               	addwfc	fsr2h,f,c
 19035  0102F8  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 19036  0102FC  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19037  010300  0E06               	movlw	6
 19038  010302  0100               	movlb	0	; () banked
 19039  010304  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19040  010306  0E01               	movlw	1
 19041  010308  0100               	movlb	0	; () banked
 19042  01030A  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19043  01030C  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19044                           
 19045                           ;SPI.c: 94: break;
 19046  010310  D00F               	goto	l609
 19047  010312                     l607:
 19048  010312  0100               	movlb	0	; () banked
 19049  010314  51ED               	movf	SPI_Init@pMode& (0+255),w,b
 19050                           
 19051                           ; Switch size 1, requested type "space"
 19052                           ; Number of cases is 4, Range of values is 0 to 3
 19053                           ; switch strategies available:
 19054                           ; Name         Instructions Cycles
 19055                           ; simple_byte           13     7 (average)
 19056                           ;	Chosen strategy is simple_byte
 19057  010316  0A00               	xorlw	0	; case 0
 19058  010318  B4D8               	btfsc	status,2,c
 19059  01031A  D75F               	goto	l608
 19060  01031C  0A01               	xorlw	1	; case 1
 19061  01031E  B4D8               	btfsc	status,2,c
 19062  010320  D783               	goto	l610
 19063  010322  0A03               	xorlw	3	; case 2
 19064  010324  B4D8               	btfsc	status,2,c
 19065  010326  D7A7               	goto	l611
 19066  010328  0A01               	xorlw	1	; case 3
 19067  01032A  A4D8               	btfss	status,2,c
 19068  01032C  0012               	return	
 19069  01032E  D7CA               	goto	l612
 19070  010330                     l609:
 19071                           
 19072                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19073                           
 19074                           ; BSR set to: 0
 19075  010330  0100               	movlb	0	; () banked
 19076  010332  EE20 F006          	lfsr	2,6
 19077  010336  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19078  010338  26D9               	addwf	fsr2l,f,c
 19079  01033A  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19080  01033C  22DA               	addwfc	fsr2h,f,c
 19081  01033E  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 19082  010342  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19083  010346  0E07               	movlw	7
 19084  010348  0100               	movlb	0	; () banked
 19085  01034A  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19086  01034C  0E00               	movlw	0
 19087  01034E  0100               	movlb	0	; () banked
 19088  010350  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19089  010352  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19090                           
 19091                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19092  010356  0100               	movlb	0	; () banked
 19093  010358  EE20 F006          	lfsr	2,6
 19094  01035C  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19095  01035E  26D9               	addwf	fsr2l,f,c
 19096  010360  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19097  010362  22DA               	addwfc	fsr2h,f,c
 19098  010364  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 19099  010368  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19100  01036C  0E06               	movlw	6
 19101  01036E  0100               	movlb	0	; () banked
 19102  010370  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19103  010372  0E00               	movlw	0
 19104  010374  0100               	movlb	0	; () banked
 19105  010376  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19106  010378  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19107                           
 19108                           ;SPI.c: 106: Timer2_Init(pClock);
 19109  01037C  C0E8  F0C8         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19110  010380  C0E9  F0C9         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19111  010384  C0EA  F0CA         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19112  010388  C0EB  F0CB         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19113  01038C  ECBB  F08F         	call	_Timer2_Init	;wreg free
 19114                           
 19115                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19116  010390  C0EE  F0BB         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19117  010394  C0EF  F0BC         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19118  010398  EC50  F0A3         	call	_SPI_DisableISR	;wreg free
 19119                           
 19120                           ;SPI.c: 116: switch (pChannel)
 19121  01039C  D004               	goto	l614
 19122  01039E                     l615:
 19123                           
 19124                           ; BSR set to: 0
 19125  01039E  869F               	bsf	3999,3,c	;volatile
 19126  0103A0  D00B               	goto	l616
 19127  0103A2                     l617:
 19128                           
 19129                           ; BSR set to: 0
 19130  0103A2  8EA5               	bsf	4005,7,c	;volatile
 19131  0103A4  D009               	goto	l616
 19132  0103A6                     l614:
 19133                           
 19134                           ; BSR set to: 0
 19135  0103A6  0100               	movlb	0	; () banked
 19136  0103A8  51EC               	movf	SPI_Init@pChannel& (0+255),w,b
 19137                           
 19138                           ; Switch size 1, requested type "space"
 19139                           ; Number of cases is 2, Range of values is 0 to 1
 19140                           ; switch strategies available:
 19141                           ; Name         Instructions Cycles
 19142                           ; simple_byte            7     4 (average)
 19143                           ;	Chosen strategy is simple_byte
 19144  0103AA  0A00               	xorlw	0	; case 0
 19145  0103AC  B4D8               	btfsc	status,2,c
 19146  0103AE  D7F7               	goto	l615
 19147  0103B0  0A01               	xorlw	1	; case 1
 19148  0103B2  A4D8               	btfss	status,2,c
 19149  0103B4  0012               	return	
 19150  0103B6  D7F5               	goto	l617
 19151  0103B8                     l616:
 19152                           
 19153                           ; BSR set to: 0
 19154                           ;SPI.c: 124: SPI_DCS(pInput);
 19155                           
 19156                           ; BSR set to: 0
 19157  0103B8  C0EE  F0BB         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19158  0103BC  C0EF  F0BC         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19159  0103C0  ECDD  F0A2         	call	_SPI_DCS	;wreg free
 19160                           
 19161                           ;SPI.c: 126: pInput->mBusy = 0;
 19162  0103C4  C0EE  FFD9         	movff	SPI_Init@pInput,fsr2l
 19163  0103C8  C0EF  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19164  0103CC  0E00               	movlw	0
 19165  0103CE  6EDF               	movwf	indf2,c
 19166                           
 19167                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19168  0103D0  0100               	movlb	0	; () banked
 19169  0103D2  EE20 F006          	lfsr	2,6
 19170  0103D6  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19171  0103D8  26D9               	addwf	fsr2l,f,c
 19172  0103DA  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19173  0103DC  22DA               	addwfc	fsr2h,f,c
 19174  0103DE  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 19175  0103E2  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 19176  0103E6  0E00               	movlw	0
 19177  0103E8  0100               	movlb	0	; () banked
 19178  0103EA  6FC8               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19179  0103EC  0E03               	movlw	3
 19180  0103EE  0100               	movlb	0	; () banked
 19181  0103F0  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 19182  0103F2  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 19183                           
 19184                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19185  0103F6  0100               	movlb	0	; () banked
 19186  0103F8  EE20 F006          	lfsr	2,6
 19187  0103FC  51EE               	movf	SPI_Init@pInput& (0+255),w,b
 19188  0103FE  26D9               	addwf	fsr2l,f,c
 19189  010400  51EF               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19190  010402  22DA               	addwfc	fsr2h,f,c
 19191  010404  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 19192  010408  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 19193  01040C  0E05               	movlw	5
 19194  01040E  0100               	movlb	0	; () banked
 19195  010410  6FBD               	movwf	Byte_SetBit@pBit& (0+255),b
 19196  010412  0E01               	movlw	1
 19197  010414  0100               	movlb	0	; () banked
 19198  010416  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 19199  010418  EC78  F09E         	call	_Byte_SetBit	;wreg free
 19200  01041C  0012               	return		;funcret
 19201  01041E                     __end_of_SPI_Init:
 19202                           	opt stack 0
 19203                           tosu	equ	0xFFF
 19204                           tosh	equ	0xFFE
 19205                           tosl	equ	0xFFD
 19206                           pclath	equ	0xFFA
 19207                           tblptru	equ	0xFF8
 19208                           tblptrh	equ	0xFF7
 19209                           tblptrl	equ	0xFF6
 19210                           tablat	equ	0xFF5
 19211                           prodh	equ	0xFF4
 19212                           prodl	equ	0xFF3
 19213                           intcon	equ	0xFF2
 19214                           postinc0	equ	0xFEE
 19215                           wreg	equ	0xFE8
 19216                           indf1	equ	0xFE7
 19217                           postdec1	equ	0xFE5
 19218                           fsr1h	equ	0xFE2
 19219                           fsr1l	equ	0xFE1
 19220                           indf2	equ	0xFDF
 19221                           postinc2	equ	0xFDE
 19222                           postdec2	equ	0xFDD
 19223                           plusw2	equ	0xFDB
 19224                           fsr2h	equ	0xFDA
 19225                           fsr2l	equ	0xFD9
 19226                           status	equ	0xFD8
 19227                           
 19228 ;; *************** function _Timer2_Init *****************
 19229 ;; Defined at:
 19230 ;;		line 10 in file "Library/Timer2.c"
 19231 ;; Parameters:    Size  Location     Type
 19232 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19233 ;; Auto vars:     Size  Location     Type
 19234 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19235 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19236 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19237 ;; Return value:  Size  Location     Type
 19238 ;;                  1    wreg      void 
 19239 ;; Registers used:
 19240 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19241 ;; Tracked objects:
 19242 ;;		On entry : 0/0
 19243 ;;		On exit  : 0/0
 19244 ;;		Unchanged: 0/0
 19245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19246 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19249 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19250 ;;Total ram usage:       17 bytes
 19251 ;; Hardware stack levels used:    1
 19252 ;; Hardware stack levels required when called:    8
 19253 ;; This function calls:
 19254 ;;		_Timer2_Clear
 19255 ;;		___lldiv
 19256 ;; This function is called by:
 19257 ;;		_SPI_Init
 19258 ;; This function uses a non-reentrant model
 19259 ;;
 19260                           
 19261                           	psect	text108
 19262  011F76                     __ptext108:
 19263                           	opt stack 0
 19264  011F76                     _Timer2_Init:
 19265                           	opt stack 18
 19266                           
 19267                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19268                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19269                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19270                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19271                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19272                           
 19273                           ;incstack = 0
 19274  011F76  0E00               	movlw	0
 19275  011F78  0100               	movlb	0	; () banked
 19276  011F7A  6FD1               	movwf	Timer2_Init@pCPUClock& (0+255),b
 19277  011F7C  0E6C               	movlw	108
 19278  011F7E  6FD2               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19279  011F80  0EDC               	movlw	220
 19280  011F82  6FD3               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19281  011F84  0E02               	movlw	2
 19282  011F86  6FD4               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19286                           ;Timer2.c: 20: pFrequency *= 2;
 19287  011F88  0100               	movlb	0	; () banked
 19288  011F8A  90D8               	bcf	status,0,c
 19289  011F8C  37C8               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19290  011F8E  37C9               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19291  011F90  37CA               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19292  011F92  37CB               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19293                           
 19294                           ; BSR set to: 0
 19295                           ;Timer2.c: 23: pCPUClock /= 4;
 19296  011F94  0E02               	movlw	2
 19297  011F96  0100               	movlb	0	; () banked
 19298  011F98  6FCC               	movwf	??_Timer2_Init& (0+255),b
 19299  011F9A                     u7275:
 19300  011F9A  90D8               	bcf	status,0,c
 19301  011F9C  0100               	movlb	0	; () banked
 19302  011F9E  33D4               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19303  011FA0  33D3               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19304  011FA2  33D2               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19305  011FA4  33D1               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19306  011FA6  0100               	movlb	0	; () banked
 19307  011FA8  2FCC               	decfsz	??_Timer2_Init& (0+255),f,b
 19308  011FAA  D7F7               	goto	u7275
 19309                           
 19310                           ; BSR set to: 0
 19311                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19312  011FAC  C0D1  F0BB         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19313  011FB0  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19314  011FB4  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19315  011FB8  C0D4  F0BE         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19316  011FBC  C0C8  F0BF         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19317  011FC0  C0C9  F0C0         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19318  011FC4  C0CA  F0C1         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19319  011FC8  C0CB  F0C2         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19320  011FCC  EC04  F095         	call	___lldiv	;wreg free
 19321  011FD0  C0BB  F0D5         	movff	?___lldiv,Timer2_Init@DIVIDE
 19322  011FD4  C0BC  F0D6         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19323  011FD8  C0BD  F0D7         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19324  011FDC  C0BE  F0D8         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19325                           
 19326                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19327  011FE0  D010               	goto	l1828
 19328  011FE2                     l11192:
 19329                           
 19330                           ;Timer2.c: 28: {
 19331                           ;Timer2.c: 29: RDIV = 0;
 19332  011FE2  0E00               	movlw	0
 19333  011FE4  0100               	movlb	0	; () banked
 19334  011FE6  6FCD               	movwf	Timer2_Init@RDIV& (0+255),b
 19335  011FE8  0E00               	movlw	0
 19336  011FEA  6FCE               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19337  011FEC  0E00               	movlw	0
 19338  011FEE  6FCF               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19339  011FF0  0E00               	movlw	0
 19340  011FF2  6FD0               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19341                           
 19342                           ; BSR set to: 0
 19343                           ;Timer2.c: 30: INDEX ++;
 19344  011FF4  0100               	movlb	0	; () banked
 19345  011FF6  2B91               	incf	Timer2_Init@INDEX& (0+255),f,b
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;Timer2.c: 31: if (INDEX >= 3)
 19349  011FF8  0E02               	movlw	2
 19350  011FFA  0100               	movlb	0	; () banked
 19351  011FFC  6591               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 19352  011FFE  D001               	goto	l1828
 19353  012000  D026               	goto	u7290
 19354  012002                     l1828:
 19355                           
 19356                           ; BSR set to: 0
 19357                           
 19358                           ; BSR set to: 0
 19359  012002  C0D5  F0BB         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19360  012006  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19361  01200A  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19362  01200E  C0D8  F0BE         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19363  012012  0100               	movlb	0	; () banked
 19364  012014  5191               	movf	Timer2_Init@INDEX& (0+255),w,b
 19365  012016  0D01               	mullw	1
 19366  012018  0ECE               	movlw	low Timer2_Init@PRESCALE
 19367  01201A  24F3               	addwf	prodl,w,c
 19368  01201C  6EF6               	movwf	tblptrl,c
 19369  01201E  0EFD               	movlw	high Timer2_Init@PRESCALE
 19370  012020  20F4               	addwfc	prodh,w,c
 19371  012022  6EF7               	movwf	tblptrh,c
 19372  012024                     	if	1	;There are 3 active tblptr bytes
 19373  012024  6AF8               	clrf	tblptru,c
 19374  012026  0E00               	movlw	low (__mediumconst shr (0+16))
 19375  012028  22F8               	addwfc	tblptru,f,c
 19376  01202A                     	endif
 19377  01202A  0008               	tblrd		*
 19378  01202C  50F5               	movf	tablat,w,c
 19379  01202E  0100               	movlb	0	; () banked
 19380  012030  6FBF               	movwf	___lldiv@divisor& (0+255),b
 19381  012032  6BC0               	clrf	(___lldiv@divisor+1)& (0+255),b
 19382  012034  6BC1               	clrf	(___lldiv@divisor+2)& (0+255),b
 19383  012036  6BC2               	clrf	(___lldiv@divisor+3)& (0+255),b
 19384  012038  EC04  F095         	call	___lldiv	;wreg free
 19385  01203C  0100               	movlb	0	; () banked
 19386  01203E  51BE               	movf	(?___lldiv+3)& (0+255),w,b
 19387  012040  0100               	movlb	0	; () banked
 19388  012042  11BD               	iorwf	(?___lldiv+2)& (0+255),w,b
 19389  012044  E1CE               	bnz	l11192
 19390  012046  0100               	movlb	0	; () banked
 19391  012048  05BC               	decf	(?___lldiv+1)& (0+255),w,b
 19392  01204A  B0D8               	btfsc	status,0,c
 19393  01204C  D7CA               	goto	l1827
 19394  01204E                     u7290:
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;Timer2.c: 33: }
 19398                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19399                           
 19400                           ; BSR set to: 0
 19401  01204E  50CA               	movf	4042,w,c	;volatile
 19402  012050  0100               	movlb	0	; () banked
 19403  012052  1991               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19404  012054  0BFC               	andlw	-4
 19405  012056  1991               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19406  012058  6ECA               	movwf	4042,c	;volatile
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19410  01205A  84CA               	bsf	4042,2,c	;volatile
 19411                           
 19412                           ; BSR set to: 0
 19413                           ;Timer2.c: 44: Timer2_Clear();
 19414  01205C  EC15  F0A5         	call	_Timer2_Clear	;wreg free
 19415                           
 19416                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19417  012060  0100               	movlb	0	; () banked
 19418  012062  5191               	movf	Timer2_Init@INDEX& (0+255),w,b
 19419  012064  0D01               	mullw	1
 19420  012066  0ECE               	movlw	low Timer2_Init@PRESCALE
 19421  012068  24F3               	addwf	prodl,w,c
 19422  01206A  6EF6               	movwf	tblptrl,c
 19423  01206C  0EFD               	movlw	high Timer2_Init@PRESCALE
 19424  01206E  20F4               	addwfc	prodh,w,c
 19425  012070  6EF7               	movwf	tblptrh,c
 19426  012072                     	if	1	;There are 3 active tblptr bytes
 19427  012072  6AF8               	clrf	tblptru,c
 19428  012074  0E00               	movlw	low (__mediumconst shr (0+16))
 19429  012076  22F8               	addwfc	tblptru,f,c
 19430  012078                     	endif
 19431  012078  0008               	tblrd		*
 19432  01207A  CFF5 F090          	movff	tablat,Timer2_Init@PRE
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19436  01207E  0EFF               	movlw	255
 19437  012080  0100               	movlb	0	; () banked
 19438  012082  25D5               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19439  012084  0103               	movlb	3	; () banked
 19440  012086  6F22               	movwf	Timer2_Init@DIV& (0+255),b
 19441  012088  0EFF               	movlw	255
 19442  01208A  0100               	movlb	0	; () banked
 19443  01208C  21D6               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19444  01208E  0103               	movlb	3	; () banked
 19445  012090  6F23               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19446  012092  0EFF               	movlw	255
 19447  012094  0100               	movlb	0	; () banked
 19448  012096  21D7               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19449  012098  0103               	movlb	3	; () banked
 19450  01209A  6F24               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19451  01209C  0EFF               	movlw	255
 19452  01209E  0100               	movlb	0	; () banked
 19453  0120A0  21D8               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19454  0120A2  0103               	movlb	3	; () banked
 19455  0120A4  6F25               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19456                           
 19457                           ; BSR set to: 3
 19458                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19459  0120A6  C322  F0BB         	movff	Timer2_Init@DIV,___lldiv@dividend
 19460  0120AA  C323  F0BC         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19461  0120AE  C324  F0BD         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19462  0120B2  C325  F0BE         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19463  0120B6  0100               	movlb	0	; () banked
 19464  0120B8  5190               	movf	Timer2_Init@PRE& (0+255),w,b
 19465  0120BA  0100               	movlb	0	; () banked
 19466  0120BC  6FBF               	movwf	___lldiv@divisor& (0+255),b
 19467  0120BE  6BC0               	clrf	(___lldiv@divisor+1)& (0+255),b
 19468  0120C0  6BC1               	clrf	(___lldiv@divisor+2)& (0+255),b
 19469  0120C2  6BC2               	clrf	(___lldiv@divisor+3)& (0+255),b
 19470  0120C4  EC04  F095         	call	___lldiv	;wreg free
 19471  0120C8  0100               	movlb	0	; () banked
 19472  0120CA  51BB               	movf	?___lldiv& (0+255),w,b
 19473  0120CC  0100               	movlb	0	; () banked
 19474  0120CE  6F91               	movwf	Timer2_Init@INDEX& (0+255),b
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;Timer2.c: 49: PR2 = INDEX;
 19478  0120D0  C091  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 19479                           
 19480                           ; BSR set to: 0
 19481  0120D4  0012               	return		;funcret
 19482  0120D6                     __end_of_Timer2_Init:
 19483                           	opt stack 0
 19484                           tosu	equ	0xFFF
 19485                           tosh	equ	0xFFE
 19486                           tosl	equ	0xFFD
 19487                           pclath	equ	0xFFA
 19488                           tblptru	equ	0xFF8
 19489                           tblptrh	equ	0xFF7
 19490                           tblptrl	equ	0xFF6
 19491                           tablat	equ	0xFF5
 19492                           prodh	equ	0xFF4
 19493                           prodl	equ	0xFF3
 19494                           intcon	equ	0xFF2
 19495                           postinc0	equ	0xFEE
 19496                           wreg	equ	0xFE8
 19497                           indf1	equ	0xFE7
 19498                           postdec1	equ	0xFE5
 19499                           fsr1h	equ	0xFE2
 19500                           fsr1l	equ	0xFE1
 19501                           indf2	equ	0xFDF
 19502                           postinc2	equ	0xFDE
 19503                           postdec2	equ	0xFDD
 19504                           plusw2	equ	0xFDB
 19505                           fsr2h	equ	0xFDA
 19506                           fsr2l	equ	0xFD9
 19507                           status	equ	0xFD8
 19508                           
 19509 ;; *************** function ___lldiv *****************
 19510 ;; Defined at:
 19511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 19512 ;; Parameters:    Size  Location     Type
 19513 ;;  dividend        4    0[BANK0 ] unsigned long 
 19514 ;;  divisor         4    4[BANK0 ] unsigned long 
 19515 ;; Auto vars:     Size  Location     Type
 19516 ;;  quotient        4    8[BANK0 ] unsigned long 
 19517 ;;  counter         1   12[BANK0 ] unsigned char 
 19518 ;; Return value:  Size  Location     Type
 19519 ;;                  4    0[BANK0 ] unsigned long 
 19520 ;; Registers used:
 19521 ;;		wreg, status,2, status,0
 19522 ;; Tracked objects:
 19523 ;;		On entry : 0/0
 19524 ;;		On exit  : 0/0
 19525 ;;		Unchanged: 0/0
 19526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19527 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19528 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19530 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19531 ;;Total ram usage:       13 bytes
 19532 ;; Hardware stack levels used:    1
 19533 ;; Hardware stack levels required when called:    7
 19534 ;; This function calls:
 19535 ;;		Nothing
 19536 ;; This function is called by:
 19537 ;;		_Timer2_Init
 19538 ;;		_rand_between
 19539 ;;		_I2C_Init
 19540 ;;		_Timer0_Init
 19541 ;; This function uses a non-reentrant model
 19542 ;;
 19543                           
 19544                           	psect	text109
 19545  012A08                     __ptext109:
 19546                           	opt stack 0
 19547  012A08                     ___lldiv:
 19548                           	opt stack 18
 19549                           
 19550                           ; BSR set to: 0
 19551                           ;incstack = 0
 19552  012A08  0E00               	movlw	0
 19553  012A0A  0100               	movlb	0	; () banked
 19554  012A0C  6FC3               	movwf	___lldiv@quotient& (0+255),b
 19555  012A0E  0E00               	movlw	0
 19556  012A10  6FC4               	movwf	(___lldiv@quotient+1)& (0+255),b
 19557  012A12  0E00               	movlw	0
 19558  012A14  6FC5               	movwf	(___lldiv@quotient+2)& (0+255),b
 19559  012A16  0E00               	movlw	0
 19560  012A18  6FC6               	movwf	(___lldiv@quotient+3)& (0+255),b
 19561                           
 19562                           ; BSR set to: 0
 19563  012A1A  0100               	movlb	0	; () banked
 19564  012A1C  51BF               	movf	___lldiv@divisor& (0+255),w,b
 19565  012A1E  0100               	movlb	0	; () banked
 19566  012A20  11C0               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19567  012A22  0100               	movlb	0	; () banked
 19568  012A24  11C1               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19569  012A26  0100               	movlb	0	; () banked
 19570  012A28  11C2               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19571  012A2A  B4D8               	btfsc	status,2,c
 19572  012A2C  D042               	goto	l2704
 19573                           
 19574                           ; BSR set to: 0
 19575  012A2E  0E01               	movlw	1
 19576  012A30  0100               	movlb	0	; () banked
 19577  012A32  6FC7               	movwf	___lldiv@counter& (0+255),b
 19578  012A34  D008               	goto	l2699
 19579  012A36                     
 19580                           ; BSR set to: 0
 19581                           
 19582                           ; BSR set to: 0
 19583  012A36  0100               	movlb	0	; () banked
 19584  012A38  90D8               	bcf	status,0,c
 19585  012A3A  37BF               	rlcf	___lldiv@divisor& (0+255),f,b
 19586  012A3C  37C0               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19587  012A3E  37C1               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19588  012A40  37C2               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19589  012A42  0100               	movlb	0	; () banked
 19590  012A44  2BC7               	incf	___lldiv@counter& (0+255),f,b
 19591  012A46                     l2699:
 19592                           
 19593                           ; BSR set to: 0
 19594                           
 19595                           ; BSR set to: 0
 19596  012A46  0100               	movlb	0	; () banked
 19597  012A48  AFC2               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19598  012A4A  D7F5               	goto	l2700
 19599  012A4C                     u7140:
 19600                           
 19601                           ; BSR set to: 0
 19602                           
 19603                           ; BSR set to: 0
 19604                           
 19605                           ; BSR set to: 0
 19606  012A4C  0100               	movlb	0	; () banked
 19607  012A4E  90D8               	bcf	status,0,c
 19608  012A50  37C3               	rlcf	___lldiv@quotient& (0+255),f,b
 19609  012A52  37C4               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19610  012A54  37C5               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19611  012A56  37C6               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19612                           
 19613                           ; BSR set to: 0
 19614  012A58  0100               	movlb	0	; () banked
 19615  012A5A  51BF               	movf	___lldiv@divisor& (0+255),w,b
 19616  012A5C  0100               	movlb	0	; () banked
 19617  012A5E  5DBB               	subwf	___lldiv@dividend& (0+255),w,b
 19618  012A60  0100               	movlb	0	; () banked
 19619  012A62  51C0               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19620  012A64  0100               	movlb	0	; () banked
 19621  012A66  59BC               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19622  012A68  0100               	movlb	0	; () banked
 19623  012A6A  51C1               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19624  012A6C  0100               	movlb	0	; () banked
 19625  012A6E  59BD               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19626  012A70  0100               	movlb	0	; () banked
 19627  012A72  51C2               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19628  012A74  0100               	movlb	0	; () banked
 19629  012A76  59BE               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19630  012A78  A0D8               	btfss	status,0,c
 19631  012A7A  D012               	goto	l2703
 19632                           
 19633                           ; BSR set to: 0
 19634  012A7C  0100               	movlb	0	; () banked
 19635  012A7E  51BF               	movf	___lldiv@divisor& (0+255),w,b
 19636  012A80  0100               	movlb	0	; () banked
 19637  012A82  5FBB               	subwf	___lldiv@dividend& (0+255),f,b
 19638  012A84  0100               	movlb	0	; () banked
 19639  012A86  51C0               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19640  012A88  0100               	movlb	0	; () banked
 19641  012A8A  5BBC               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19642  012A8C  0100               	movlb	0	; () banked
 19643  012A8E  51C1               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19644  012A90  0100               	movlb	0	; () banked
 19645  012A92  5BBD               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19646  012A94  0100               	movlb	0	; () banked
 19647  012A96  51C2               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19648  012A98  0100               	movlb	0	; () banked
 19649  012A9A  5BBE               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19650                           
 19651                           ; BSR set to: 0
 19652  012A9C  0100               	movlb	0	; () banked
 19653  012A9E  81C3               	bsf	___lldiv@quotient& (0+255),0,b
 19654  012AA0                     l2703:
 19655                           
 19656                           ; BSR set to: 0
 19657                           
 19658                           ; BSR set to: 0
 19659  012AA0  0100               	movlb	0	; () banked
 19660  012AA2  90D8               	bcf	status,0,c
 19661  012AA4  33C2               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19662  012AA6  33C1               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19663  012AA8  33C0               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19664  012AAA  33BF               	rrcf	___lldiv@divisor& (0+255),f,b
 19665                           
 19666                           ; BSR set to: 0
 19667  012AAC  0100               	movlb	0	; () banked
 19668  012AAE  2FC7               	decfsz	___lldiv@counter& (0+255),f,b
 19669  012AB0  D7CD               	goto	u7140
 19670  012AB2                     l2704:
 19671                           
 19672                           ; BSR set to: 0
 19673                           
 19674                           ; BSR set to: 0
 19675  012AB2  C0C3  F0BB         	movff	___lldiv@quotient,?___lldiv
 19676  012AB6  C0C4  F0BC         	movff	___lldiv@quotient+1,?___lldiv+1
 19677  012ABA  C0C5  F0BD         	movff	___lldiv@quotient+2,?___lldiv+2
 19678  012ABE  C0C6  F0BE         	movff	___lldiv@quotient+3,?___lldiv+3
 19679                           
 19680                           ; BSR set to: 0
 19681  012AC2  0012               	return		;funcret
 19682  012AC4                     __end_of___lldiv:
 19683                           	opt stack 0
 19684                           tosu	equ	0xFFF
 19685                           tosh	equ	0xFFE
 19686                           tosl	equ	0xFFD
 19687                           pclath	equ	0xFFA
 19688                           tblptru	equ	0xFF8
 19689                           tblptrh	equ	0xFF7
 19690                           tblptrl	equ	0xFF6
 19691                           tablat	equ	0xFF5
 19692                           prodh	equ	0xFF4
 19693                           prodl	equ	0xFF3
 19694                           intcon	equ	0xFF2
 19695                           postinc0	equ	0xFEE
 19696                           wreg	equ	0xFE8
 19697                           indf1	equ	0xFE7
 19698                           postdec1	equ	0xFE5
 19699                           fsr1h	equ	0xFE2
 19700                           fsr1l	equ	0xFE1
 19701                           indf2	equ	0xFDF
 19702                           postinc2	equ	0xFDE
 19703                           postdec2	equ	0xFDD
 19704                           plusw2	equ	0xFDB
 19705                           fsr2h	equ	0xFDA
 19706                           fsr2l	equ	0xFD9
 19707                           status	equ	0xFD8
 19708                           
 19709 ;; *************** function _Timer2_Clear *****************
 19710 ;; Defined at:
 19711 ;;		line 3 in file "Library/Timer2.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;		None
 19716 ;; Return value:  Size  Location     Type
 19717 ;;                  1    wreg      void 
 19718 ;; Registers used:
 19719 ;;		None
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19729 ;;Total ram usage:        0 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    7
 19732 ;; This function calls:
 19733 ;;		Nothing
 19734 ;; This function is called by:
 19735 ;;		_Timer2_Init
 19736 ;; This function uses a non-reentrant model
 19737 ;;
 19738                           
 19739                           	psect	text110
 19740  014A2A                     __ptext110:
 19741                           	opt stack 0
 19742  014A2A                     _Timer2_Clear:
 19743                           	opt stack 18
 19744                           
 19745                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;incstack = 0
 19749  014A2A  929E               	bcf	3998,1,c	;volatile
 19750                           
 19751                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 19752  014A2C  929D               	bcf	3997,1,c	;volatile
 19753                           
 19754                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 19755  014A2E  929F               	bcf	3999,1,c	;volatile
 19756  014A30  0012               	return		;funcret
 19757  014A32                     __end_of_Timer2_Clear:
 19758                           	opt stack 0
 19759                           tosu	equ	0xFFF
 19760                           tosh	equ	0xFFE
 19761                           tosl	equ	0xFFD
 19762                           pclath	equ	0xFFA
 19763                           tblptru	equ	0xFF8
 19764                           tblptrh	equ	0xFF7
 19765                           tblptrl	equ	0xFF6
 19766                           tablat	equ	0xFF5
 19767                           prodh	equ	0xFF4
 19768                           prodl	equ	0xFF3
 19769                           intcon	equ	0xFF2
 19770                           postinc0	equ	0xFEE
 19771                           wreg	equ	0xFE8
 19772                           indf1	equ	0xFE7
 19773                           postdec1	equ	0xFE5
 19774                           fsr1h	equ	0xFE2
 19775                           fsr1l	equ	0xFE1
 19776                           indf2	equ	0xFDF
 19777                           postinc2	equ	0xFDE
 19778                           postdec2	equ	0xFDD
 19779                           plusw2	equ	0xFDB
 19780                           fsr2h	equ	0xFDA
 19781                           fsr2l	equ	0xFD9
 19782                           status	equ	0xFD8
 19783                           
 19784 ;; *************** function _SPI_DisableISR *****************
 19785 ;; Defined at:
 19786 ;;		line 181 in file "Library/SPI.c"
 19787 ;; Parameters:    Size  Location     Type
 19788 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19789 ;;		 -> SPI1(11), SPI2(11), 
 19790 ;; Auto vars:     Size  Location     Type
 19791 ;;		None
 19792 ;; Return value:  Size  Location     Type
 19793 ;;                  1    wreg      void 
 19794 ;; Registers used:
 19795 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19796 ;; Tracked objects:
 19797 ;;		On entry : 0/0
 19798 ;;		On exit  : 0/0
 19799 ;;		Unchanged: 0/0
 19800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19805 ;;Total ram usage:        2 bytes
 19806 ;; Hardware stack levels used:    1
 19807 ;; Hardware stack levels required when called:    7
 19808 ;; This function calls:
 19809 ;;		Nothing
 19810 ;; This function is called by:
 19811 ;;		_SPI_Init
 19812 ;; This function uses a non-reentrant model
 19813 ;;
 19814                           
 19815                           	psect	text111
 19816  0146A0                     __ptext111:
 19817                           	opt stack 0
 19818  0146A0                     _SPI_DisableISR:
 19819                           	opt stack 19
 19820                           
 19821                           ;SPI.c: 183: switch (pInput->mChannel)
 19822                           
 19823                           ;incstack = 0
 19824  0146A0  D004               	goto	l654
 19825  0146A2                     l655:
 19826                           
 19827                           ; BSR set to: 0
 19828  0146A2  969D               	bcf	3997,3,c	;volatile
 19829  0146A4  0012               	return	
 19830  0146A6                     l657:
 19831                           
 19832                           ; BSR set to: 0
 19833  0146A6  9EA3               	bcf	4003,7,c	;volatile
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;SPI.c: 188: };
 19837                           
 19838                           ; BSR set to: 0
 19839                           
 19840                           ;SPI.c: 187: default: return;
 19841  0146A8  0012               	return	
 19842  0146AA                     l654:
 19843                           
 19844                           ; BSR set to: 0
 19845  0146AA  0100               	movlb	0	; () banked
 19846  0146AC  EE20 F002          	lfsr	2,2
 19847  0146B0  51BB               	movf	SPI_DisableISR@pInput& (0+255),w,b
 19848  0146B2  26D9               	addwf	fsr2l,f,c
 19849  0146B4  51BC               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 19850  0146B6  22DA               	addwfc	fsr2h,f,c
 19851  0146B8  50DF               	movf	indf2,w,c
 19852                           
 19853                           ; Switch size 1, requested type "space"
 19854                           ; Number of cases is 2, Range of values is 0 to 1
 19855                           ; switch strategies available:
 19856                           ; Name         Instructions Cycles
 19857                           ; simple_byte            7     4 (average)
 19858                           ;	Chosen strategy is simple_byte
 19859  0146BA  0A00               	xorlw	0	; case 0
 19860  0146BC  B4D8               	btfsc	status,2,c
 19861  0146BE  D7F1               	goto	l655
 19862  0146C0  0A01               	xorlw	1	; case 1
 19863  0146C2  A4D8               	btfss	status,2,c
 19864  0146C4  0012               	return	
 19865  0146C6  D7EF               	goto	l657
 19866  0146C8                     __end_of_SPI_DisableISR:
 19867                           	opt stack 0
 19868                           tosu	equ	0xFFF
 19869                           tosh	equ	0xFFE
 19870                           tosl	equ	0xFFD
 19871                           pclath	equ	0xFFA
 19872                           tblptru	equ	0xFF8
 19873                           tblptrh	equ	0xFF7
 19874                           tblptrl	equ	0xFF6
 19875                           tablat	equ	0xFF5
 19876                           prodh	equ	0xFF4
 19877                           prodl	equ	0xFF3
 19878                           intcon	equ	0xFF2
 19879                           postinc0	equ	0xFEE
 19880                           wreg	equ	0xFE8
 19881                           indf1	equ	0xFE7
 19882                           postdec1	equ	0xFE5
 19883                           fsr1h	equ	0xFE2
 19884                           fsr1l	equ	0xFE1
 19885                           indf2	equ	0xFDF
 19886                           postinc2	equ	0xFDE
 19887                           postdec2	equ	0xFDD
 19888                           plusw2	equ	0xFDB
 19889                           fsr2h	equ	0xFDA
 19890                           fsr2l	equ	0xFD9
 19891                           status	equ	0xFD8
 19892                           
 19893 ;; *************** function _SPI_DCS *****************
 19894 ;; Defined at:
 19895 ;;		line 219 in file "Library/SPI.c"
 19896 ;; Parameters:    Size  Location     Type
 19897 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19898 ;;		 -> SPI1(11), SPI2(11), 
 19899 ;; Auto vars:     Size  Location     Type
 19900 ;;		None
 19901 ;; Return value:  Size  Location     Type
 19902 ;;                  1    wreg      void 
 19903 ;; Registers used:
 19904 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19905 ;; Tracked objects:
 19906 ;;		On entry : 0/0
 19907 ;;		On exit  : 0/0
 19908 ;;		Unchanged: 0/0
 19909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19914 ;;Total ram usage:        2 bytes
 19915 ;; Hardware stack levels used:    1
 19916 ;; Hardware stack levels required when called:    7
 19917 ;; This function calls:
 19918 ;;		Nothing
 19919 ;; This function is called by:
 19920 ;;		_SPI_Init
 19921 ;; This function uses a non-reentrant model
 19922 ;;
 19923                           
 19924                           	psect	text112
 19925  0145BA                     __ptext112:
 19926                           	opt stack 0
 19927  0145BA                     _SPI_DCS:
 19928                           	opt stack 19
 19929                           
 19930                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;incstack = 0
 19934  0145BA  0100               	movlb	0	; () banked
 19935  0145BC  EE20 F002          	lfsr	2,2
 19936  0145C0  51BB               	movf	SPI_DCS@pInput& (0+255),w,b
 19937  0145C2  26D9               	addwf	fsr2l,f,c
 19938  0145C4  51BC               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 19939  0145C6  22DA               	addwfc	fsr2h,f,c
 19940  0145C8  50DF               	movf	indf2,w,c
 19941  0145CA  A4D8               	btfss	status,2,c
 19942  0145CC  D007               	goto	l673
 19943                           
 19944                           ; BSR set to: 0
 19945                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 19946  0145CE  C0AD  FFD9         	movff	_PortC+4,fsr2l
 19947  0145D2  C0AE  FFDA         	movff	_PortC+5,fsr2h
 19948  0145D6  0100               	movlb	0	; () banked
 19949  0145D8  84DF               	bsf	indf2,2,c
 19950  0145DA  0012               	return	
 19951  0145DC                     l673:
 19952                           
 19953                           ; BSR set to: 0
 19954                           ;SPI.c: 223: else
 19955                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 19956                           
 19957                           ; BSR set to: 0
 19958  0145DC  C0A3  FFD9         	movff	_PortD+4,fsr2l
 19959  0145E0  C0A4  FFDA         	movff	_PortD+5,fsr2h
 19960  0145E4  0100               	movlb	0	; () banked
 19961  0145E6  8EDF               	bsf	indf2,7,c
 19962  0145E8  0012               	return	
 19963  0145EA                     __end_of_SPI_DCS:
 19964                           	opt stack 0
 19965                           tosu	equ	0xFFF
 19966                           tosh	equ	0xFFE
 19967                           tosl	equ	0xFFD
 19968                           pclath	equ	0xFFA
 19969                           tblptru	equ	0xFF8
 19970                           tblptrh	equ	0xFF7
 19971                           tblptrl	equ	0xFF6
 19972                           tablat	equ	0xFF5
 19973                           prodh	equ	0xFF4
 19974                           prodl	equ	0xFF3
 19975                           intcon	equ	0xFF2
 19976                           postinc0	equ	0xFEE
 19977                           wreg	equ	0xFE8
 19978                           indf1	equ	0xFE7
 19979                           postdec1	equ	0xFE5
 19980                           fsr1h	equ	0xFE2
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           plusw2	equ	0xFDB
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function _Button_Init *****************
 19991 ;; Defined at:
 19992 ;;		line 18 in file "Library/Button.c"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 19995 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 19996 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 19997 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 19998 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 19999 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 20000 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 20001 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 20002 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 20003 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 20004 ;; Auto vars:     Size  Location     Type
 20005 ;;		None
 20006 ;; Return value:  Size  Location     Type
 20007 ;;                  1    wreg      void 
 20008 ;; Registers used:
 20009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20010 ;; Tracked objects:
 20011 ;;		On entry : 0/0
 20012 ;;		On exit  : 0/0
 20013 ;;		Unchanged: 0/0
 20014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20015 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20018 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20019 ;;Total ram usage:       13 bytes
 20020 ;; Hardware stack levels used:    1
 20021 ;; Hardware stack levels required when called:   15
 20022 ;; This function calls:
 20023 ;;		_HMI_InitButtons
 20024 ;;		_MXK_InitDIPSwitch
 20025 ;;		_MXK_InitTestButton
 20026 ;; This function is called by:
 20027 ;;		_HMI_Init
 20028 ;;		_FunctInitButton
 20029 ;; This function uses a non-reentrant model
 20030 ;;
 20031                           
 20032                           	psect	text113
 20033  012620                     __ptext113:
 20034                           	opt stack 0
 20035  012620                     _Button_Init:
 20036                           	opt stack 13
 20037                           
 20038                           ;Button.c: 21: if(pInput==(void*)0)
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;incstack = 0
 20042  012620  0101               	movlb	1	; () banked
 20043  012622  5100               	movf	Button_Init@pInput& (0+255),w,b
 20044  012624  0101               	movlb	1	; () banked
 20045  012626  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20046  012628  B4D8               	btfsc	status,2,c
 20047  01262A  0012               	return	
 20048                           
 20049                           ; BSR set to: 1
 20050                           ;Button.c: 23: if(pInitIO==(void*)0)
 20051                           
 20052                           ; BSR set to: 1
 20053                           
 20054                           ; BSR set to: 1
 20055                           ;Button.c: 22: return;
 20056  01262C  0101               	movlb	1	; () banked
 20057  01262E  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 20058  012630  0101               	movlb	1	; () banked
 20059  012632  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 20060  012634  0101               	movlb	1	; () banked
 20061  012636  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 20062  012638  B4D8               	btfsc	status,2,c
 20063  01263A  0012               	return	
 20064                           
 20065                           ; BSR set to: 1
 20066                           ;Button.c: 25: if(pGetState==(void*)0)
 20067                           
 20068                           ; BSR set to: 1
 20069                           
 20070                           ; BSR set to: 1
 20071                           ;Button.c: 24: return;
 20072  01263C  0101               	movlb	1	; () banked
 20073  01263E  5107               	movf	Button_Init@pGetState& (0+255),w,b
 20074  012640  0101               	movlb	1	; () banked
 20075  012642  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 20076  012644  0101               	movlb	1	; () banked
 20077  012646  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 20078  012648  B4D8               	btfsc	status,2,c
 20079  01264A  0012               	return	
 20080                           
 20081                           ; BSR set to: 1
 20082                           ;Button.c: 27: if(pFunction==(void*)0)
 20083                           
 20084                           ; BSR set to: 1
 20085                           
 20086                           ; BSR set to: 1
 20087                           ;Button.c: 26: return;
 20088  01264C  0101               	movlb	1	; () banked
 20089  01264E  510A               	movf	Button_Init@pFunction& (0+255),w,b
 20090  012650  0101               	movlb	1	; () banked
 20091  012652  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 20092  012654  0101               	movlb	1	; () banked
 20093  012656  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 20094  012658  B4D8               	btfsc	status,2,c
 20095  01265A  0012               	return	
 20096                           
 20097                           ; BSR set to: 1
 20098                           ;Button.c: 30: if(pThreshold == 0)
 20099                           
 20100                           ; BSR set to: 1
 20101                           
 20102                           ; BSR set to: 1
 20103                           ;Button.c: 28: return;
 20104  01265C  0101               	movlb	1	; () banked
 20105  01265E  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 20106  012660  0101               	movlb	1	; () banked
 20107  012662  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 20108  012664  A4D8               	btfss	status,2,c
 20109  012666  D005               	goto	l8
 20110                           
 20111                           ; BSR set to: 1
 20112                           ;Button.c: 31: pThreshold = 1;
 20113  012668  0E00               	movlw	0
 20114  01266A  0101               	movlb	1	; () banked
 20115  01266C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20116  01266E  0E01               	movlw	1
 20117  012670  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20118  012672                     l8:
 20119                           
 20120                           ; BSR set to: 1
 20121                           ;Button.c: 34: pInput->mState = 0;
 20122                           
 20123                           ; BSR set to: 1
 20124  012672  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 20125  012676  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 20126  01267A  0E00               	movlw	0
 20127  01267C  6EDF               	movwf	indf2,c
 20128                           
 20129                           ; BSR set to: 1
 20130                           ;Button.c: 35: pInput->mCount = 0;
 20131  01267E  0101               	movlb	1	; () banked
 20132  012680  EE20 F001          	lfsr	2,1
 20133  012684  5100               	movf	Button_Init@pInput& (0+255),w,b
 20134  012686  26D9               	addwf	fsr2l,f,c
 20135  012688  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20136  01268A  22DA               	addwfc	fsr2h,f,c
 20137  01268C  0E00               	movlw	0
 20138  01268E  6EDF               	movwf	indf2,c
 20139                           
 20140                           ; BSR set to: 1
 20141                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 20142  012690  0101               	movlb	1	; () banked
 20143  012692  EE20 F002          	lfsr	2,2
 20144  012696  5100               	movf	Button_Init@pInput& (0+255),w,b
 20145  012698  26D9               	addwf	fsr2l,f,c
 20146  01269A  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20147  01269C  22DA               	addwfc	fsr2h,f,c
 20148  01269E  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 20149  0126A2  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 20150                           
 20151                           ; BSR set to: 1
 20152                           ;Button.c: 37: pInput->mFunction = pFunction;
 20153  0126A6  0101               	movlb	1	; () banked
 20154  0126A8  EE20 F004          	lfsr	2,4
 20155  0126AC  5100               	movf	Button_Init@pInput& (0+255),w,b
 20156  0126AE  26D9               	addwf	fsr2l,f,c
 20157  0126B0  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20158  0126B2  22DA               	addwfc	fsr2h,f,c
 20159  0126B4  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 20160  0126B8  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 20161  0126BC  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 20162                           
 20163                           ; BSR set to: 1
 20164                           ;Button.c: 38: pInput->mGetState = pGetState;
 20165  0126C0  0101               	movlb	1	; () banked
 20166  0126C2  EE20 F007          	lfsr	2,7
 20167  0126C6  5100               	movf	Button_Init@pInput& (0+255),w,b
 20168  0126C8  26D9               	addwf	fsr2l,f,c
 20169  0126CA  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20170  0126CC  22DA               	addwfc	fsr2h,f,c
 20171  0126CE  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 20172  0126D2  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 20173  0126D6  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 20174                           
 20175                           ; BSR set to: 1
 20176                           ;Button.c: 41: pInitIO();
 20177  0126DA  D801               	call	u7758
 20178  0126DC  0012               	return	
 20179  0126DE                     u7758:
 20180  0126DE  0005               	push	
 20181  0126E0  6EFA               	movwf	pclath,c
 20182  0126E2  0101               	movlb	1	; () banked
 20183  0126E4  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 20184  0126E6  6EFD               	movwf	tosl,c
 20185  0126E8  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20186  0126EA  6EFE               	movwf	tosh,c
 20187  0126EC  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20188  0126EE  6EFF               	movwf	tosu,c
 20189  0126F0  50FA               	movf	pclath,w,c
 20190  0126F2  0012               	return		;indir
 20191  0126F4                     __end_of_Button_Init:
 20192                           	opt stack 0
 20193                           tosu	equ	0xFFF
 20194                           tosh	equ	0xFFE
 20195                           tosl	equ	0xFFD
 20196                           pclath	equ	0xFFA
 20197                           tblptru	equ	0xFF8
 20198                           tblptrh	equ	0xFF7
 20199                           tblptrl	equ	0xFF6
 20200                           tablat	equ	0xFF5
 20201                           prodh	equ	0xFF4
 20202                           prodl	equ	0xFF3
 20203                           intcon	equ	0xFF2
 20204                           postinc0	equ	0xFEE
 20205                           wreg	equ	0xFE8
 20206                           indf1	equ	0xFE7
 20207                           postdec1	equ	0xFE5
 20208                           fsr1h	equ	0xFE2
 20209                           fsr1l	equ	0xFE1
 20210                           indf2	equ	0xFDF
 20211                           postinc2	equ	0xFDE
 20212                           postdec2	equ	0xFDD
 20213                           plusw2	equ	0xFDB
 20214                           fsr2h	equ	0xFDA
 20215                           fsr2l	equ	0xFD9
 20216                           status	equ	0xFD8
 20217                           
 20218 ;; *************** function _MXK_InitDIPSwitch *****************
 20219 ;; Defined at:
 20220 ;;		line 20 in file "Library/MXK.c"
 20221 ;; Parameters:    Size  Location     Type
 20222 ;;		None
 20223 ;; Auto vars:     Size  Location     Type
 20224 ;;		None
 20225 ;; Return value:  Size  Location     Type
 20226 ;;                  1    wreg      void 
 20227 ;; Registers used:
 20228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20229 ;; Tracked objects:
 20230 ;;		On entry : 0/0
 20231 ;;		On exit  : 0/0
 20232 ;;		Unchanged: 0/0
 20233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20238 ;;Total ram usage:        0 bytes
 20239 ;; Hardware stack levels used:    1
 20240 ;; Hardware stack levels required when called:   14
 20241 ;; This function calls:
 20242 ;;		_Port_SetQuadType
 20243 ;; This function is called by:
 20244 ;;		_FunctInitButton
 20245 ;;		_Button_Init
 20246 ;; This function uses a non-reentrant model
 20247 ;;
 20248                           
 20249                           	psect	text114
 20250  0147E4                     __ptext114:
 20251                           	opt stack 0
 20252  0147E4                     _MXK_InitDIPSwitch:
 20253                           	opt stack 13
 20254                           
 20255                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20256                           
 20257                           ;incstack = 0
 20258  0147E4  0E9F               	movlw	low _PortD
 20259  0147E6  0100               	movlb	0	; () banked
 20260  0147E8  6FF1               	movwf	Port_SetQuadType@pInput& (0+255),b
 20261  0147EA  0E00               	movlw	high _PortD
 20262  0147EC  0100               	movlb	0	; () banked
 20263  0147EE  6FF2               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20264  0147F0  0E00               	movlw	0
 20265  0147F2  0100               	movlb	0	; () banked
 20266  0147F4  6FF3               	movwf	Port_SetQuadType@pQuad& (0+255),b
 20267  0147F6  0E00               	movlw	0
 20268  0147F8  0100               	movlb	0	; () banked
 20269  0147FA  6FF4               	movwf	Port_SetQuadType@pType& (0+255),b
 20270  0147FC  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 20271  014800  0012               	return		;funcret
 20272  014802                     __end_of_MXK_InitDIPSwitch:
 20273                           	opt stack 0
 20274                           tosu	equ	0xFFF
 20275                           tosh	equ	0xFFE
 20276                           tosl	equ	0xFFD
 20277                           pclath	equ	0xFFA
 20278                           tblptru	equ	0xFF8
 20279                           tblptrh	equ	0xFF7
 20280                           tblptrl	equ	0xFF6
 20281                           tablat	equ	0xFF5
 20282                           prodh	equ	0xFF4
 20283                           prodl	equ	0xFF3
 20284                           intcon	equ	0xFF2
 20285                           postinc0	equ	0xFEE
 20286                           wreg	equ	0xFE8
 20287                           indf1	equ	0xFE7
 20288                           postdec1	equ	0xFE5
 20289                           fsr1h	equ	0xFE2
 20290                           fsr1l	equ	0xFE1
 20291                           indf2	equ	0xFDF
 20292                           postinc2	equ	0xFDE
 20293                           postdec2	equ	0xFDD
 20294                           plusw2	equ	0xFDB
 20295                           fsr2h	equ	0xFDA
 20296                           fsr2l	equ	0xFD9
 20297                           status	equ	0xFD8
 20298                           
 20299 ;; *************** function _HMI_InitButtons *****************
 20300 ;; Defined at:
 20301 ;;		line 21 in file "HMI.c"
 20302 ;; Parameters:    Size  Location     Type
 20303 ;;		None
 20304 ;; Auto vars:     Size  Location     Type
 20305 ;;		None
 20306 ;; Return value:  Size  Location     Type
 20307 ;;                  1    wreg      void 
 20308 ;; Registers used:
 20309 ;;		wreg, status,2
 20310 ;; Tracked objects:
 20311 ;;		On entry : 0/0
 20312 ;;		On exit  : 0/0
 20313 ;;		Unchanged: 0/0
 20314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20319 ;;Total ram usage:        0 bytes
 20320 ;; Hardware stack levels used:    1
 20321 ;; Hardware stack levels required when called:    7
 20322 ;; This function calls:
 20323 ;;		Nothing
 20324 ;; This function is called by:
 20325 ;;		_HMI_Init
 20326 ;;		_Button_Init
 20327 ;; This function uses a non-reentrant model
 20328 ;;
 20329                           
 20330                           	psect	text115
 20331  014A46                     __ptext115:
 20332                           	opt stack 0
 20333  014A46                     _HMI_InitButtons:
 20334                           	opt stack 20
 20335                           
 20336                           ;HMI.c: 23: TRISE = 0xFC;
 20337                           
 20338                           ;incstack = 0
 20339  014A46  0EFC               	movlw	252
 20340  014A48  6E96               	movwf	3990,c	;volatile
 20341  014A4A  0012               	return		;funcret
 20342  014A4C                     __end_of_HMI_InitButtons:
 20343                           	opt stack 0
 20344                           tosu	equ	0xFFF
 20345                           tosh	equ	0xFFE
 20346                           tosl	equ	0xFFD
 20347                           pclath	equ	0xFFA
 20348                           tblptru	equ	0xFF8
 20349                           tblptrh	equ	0xFF7
 20350                           tblptrl	equ	0xFF6
 20351                           tablat	equ	0xFF5
 20352                           prodh	equ	0xFF4
 20353                           prodl	equ	0xFF3
 20354                           intcon	equ	0xFF2
 20355                           postinc0	equ	0xFEE
 20356                           wreg	equ	0xFE8
 20357                           indf1	equ	0xFE7
 20358                           postdec1	equ	0xFE5
 20359                           fsr1h	equ	0xFE2
 20360                           fsr1l	equ	0xFE1
 20361                           indf2	equ	0xFDF
 20362                           postinc2	equ	0xFDE
 20363                           postdec2	equ	0xFDD
 20364                           plusw2	equ	0xFDB
 20365                           fsr2h	equ	0xFDA
 20366                           fsr2l	equ	0xFD9
 20367                           status	equ	0xFD8
 20368                           
 20369 ;; *************** function _MXK_InitTestButton *****************
 20370 ;; Defined at:
 20371 ;;		line 10 in file "Library/MXK.c"
 20372 ;; Parameters:    Size  Location     Type
 20373 ;;		None
 20374 ;; Auto vars:     Size  Location     Type
 20375 ;;		None
 20376 ;; Return value:  Size  Location     Type
 20377 ;;                  1    wreg      void 
 20378 ;; Registers used:
 20379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20380 ;; Tracked objects:
 20381 ;;		On entry : 0/0
 20382 ;;		On exit  : 0/0
 20383 ;;		Unchanged: 0/0
 20384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20389 ;;Total ram usage:        0 bytes
 20390 ;; Hardware stack levels used:    1
 20391 ;; Hardware stack levels required when called:   12
 20392 ;; This function calls:
 20393 ;;		_Port_SetPinType
 20394 ;; This function is called by:
 20395 ;;		_FunctInitButton
 20396 ;;		_Button_Init
 20397 ;; This function uses a non-reentrant model
 20398 ;;
 20399                           
 20400                           	psect	text116
 20401  014802                     __ptext116:
 20402                           	opt stack 0
 20403  014802                     _MXK_InitTestButton:
 20404                           	opt stack 15
 20405                           
 20406                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20407                           
 20408                           ;incstack = 0
 20409  014802  0EA6               	movlw	low _PortB
 20410  014804  0100               	movlb	0	; () banked
 20411  014806  6FE1               	movwf	Port_SetPinType@pInput& (0+255),b
 20412  014808  0E03               	movlw	high _PortB
 20413  01480A  0100               	movlb	0	; () banked
 20414  01480C  6FE2               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20415  01480E  0E04               	movlw	4
 20416  014810  0100               	movlb	0	; () banked
 20417  014812  6FE3               	movwf	Port_SetPinType@pPin& (0+255),b
 20418  014814  0E00               	movlw	0
 20419  014816  0100               	movlb	0	; () banked
 20420  014818  6FE4               	movwf	Port_SetPinType@pType& (0+255),b
 20421  01481A  EC54  F08A         	call	_Port_SetPinType	;wreg free
 20422  01481E  0012               	return		;funcret
 20423  014820                     __end_of_MXK_InitTestButton:
 20424                           	opt stack 0
 20425                           tosu	equ	0xFFF
 20426                           tosh	equ	0xFFE
 20427                           tosl	equ	0xFFD
 20428                           pclath	equ	0xFFA
 20429                           tblptru	equ	0xFF8
 20430                           tblptrh	equ	0xFF7
 20431                           tblptrl	equ	0xFF6
 20432                           tablat	equ	0xFF5
 20433                           prodh	equ	0xFF4
 20434                           prodl	equ	0xFF3
 20435                           intcon	equ	0xFF2
 20436                           postinc0	equ	0xFEE
 20437                           wreg	equ	0xFE8
 20438                           indf1	equ	0xFE7
 20439                           postdec1	equ	0xFE5
 20440                           fsr1h	equ	0xFE2
 20441                           fsr1l	equ	0xFE1
 20442                           indf2	equ	0xFDF
 20443                           postinc2	equ	0xFDE
 20444                           postdec2	equ	0xFDD
 20445                           plusw2	equ	0xFDB
 20446                           fsr2h	equ	0xFDA
 20447                           fsr2l	equ	0xFD9
 20448                           status	equ	0xFD8
 20449                           
 20450 ;; *************** function _Port_SetPinType *****************
 20451 ;; Defined at:
 20452 ;;		line 189 in file "Library/Port.c"
 20453 ;; Parameters:    Size  Location     Type
 20454 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20455 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20456 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20457 ;;  pPin            1   40[BANK0 ] enum E6750
 20458 ;;  pType           1   41[BANK0 ] enum E6795
 20459 ;; Auto vars:     Size  Location     Type
 20460 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20461 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20462 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 20463 ;;  Output          1   42[BANK0 ] enum E6475
 20464 ;; Return value:  Size  Location     Type
 20465 ;;                  1    wreg      enum E6475
 20466 ;; Registers used:
 20467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20468 ;; Tracked objects:
 20469 ;;		On entry : 0/0
 20470 ;;		On exit  : 0/0
 20471 ;;		Unchanged: 0/0
 20472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20473 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20474 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20476 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20477 ;;Total ram usage:        7 bytes
 20478 ;; Hardware stack levels used:    1
 20479 ;; Hardware stack levels required when called:   11
 20480 ;; This function calls:
 20481 ;;		_Byte_SetBit
 20482 ;;		_PortProperty_Valid
 20483 ;;		_Word_SetPair
 20484 ;; This function is called by:
 20485 ;;		_Configure_GPIOs
 20486 ;;		_LED_Init
 20487 ;;		_Port_Init
 20488 ;;		_SPI_Init
 20489 ;;		_MXK_InitTestButton
 20490 ;;		_MXK_Init
 20491 ;;		_I2C_Init
 20492 ;;		_Motor_Init
 20493 ;; This function uses a non-reentrant model
 20494 ;;
 20495                           
 20496                           	psect	text117
 20497  0114A8                     __ptext117:
 20498                           	opt stack 0
 20499  0114A8                     _Port_SetPinType:
 20500                           	opt stack 17
 20501                           
 20502                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 20503                           
 20504                           ;incstack = 0
 20505  0114A8  C0E1  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 20506  0114AC  C0E2  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 20507  0114B0  CFDE F0E6          	movff	postinc2,Port_SetPinType@Props
 20508  0114B4  CFDD F0E7          	movff	postdec2,Port_SetPinType@Props+1
 20509                           
 20510                           ;Port.c: 192: ePinError Output = ePinErrorState;
 20511  0114B8  0E05               	movlw	5
 20512  0114BA  0100               	movlb	0	; () banked
 20513  0114BC  6FE5               	movwf	Port_SetPinType@Output& (0+255),b
 20514                           
 20515                           ;Port.c: 193: switch (pType)
 20516  0114BE  D0B5               	goto	l412
 20517  0114C0                     
 20518                           ; BSR set to: 0
 20519                           ;Port.c: 197: {
 20520                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20521                           
 20522                           ; BSR set to: 0
 20523  0114C0  0100               	movlb	0	; () banked
 20524  0114C2  EE20 F002          	lfsr	2,2
 20525  0114C6  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20526  0114C8  26D9               	addwf	fsr2l,f,c
 20527  0114CA  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20528  0114CC  22DA               	addwfc	fsr2h,f,c
 20529  0114CE  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20530  0114D2  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20531  0114D6  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20532  0114DA  0E01               	movlw	1
 20533  0114DC  0100               	movlb	0	; () banked
 20534  0114DE  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20535  0114E0  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20536                           
 20537                           ;Port.c: 203: break;
 20538  0114E4  D0B0               	goto	l414
 20539  0114E6                     
 20540                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 20541  0114E6  C0E6  F0CA         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20542  0114EA  C0E7  F0CB         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20543  0114EE  0E01               	movlw	1
 20544  0114F0  0100               	movlb	0	; () banked
 20545  0114F2  6FCC               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20546  0114F4  C0E3  F0CD         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20547  0114F8  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 20548  0114FC  0100               	movlb	0	; () banked
 20549  0114FE  6FE5               	movwf	Port_SetPinType@Output& (0+255),b
 20550  011500  0100               	movlb	0	; () banked
 20551  011502  51E5               	movf	Port_SetPinType@Output& (0+255),w,b
 20552  011504  A4D8               	btfss	status,2,c
 20553  011506  0012               	return	
 20554                           
 20555                           ; BSR set to: 0
 20556                           ;Port.c: 208: {
 20557                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20558  011508  0100               	movlb	0	; () banked
 20559  01150A  EE20 F002          	lfsr	2,2
 20560  01150E  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20561  011510  26D9               	addwf	fsr2l,f,c
 20562  011512  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20563  011514  22DA               	addwfc	fsr2h,f,c
 20564  011516  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20565  01151A  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20566  01151E  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20567  011522  0E00               	movlw	0
 20568  011524  0100               	movlb	0	; () banked
 20569  011526  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20570  011528  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20571                           
 20572                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20573  01152C  0100               	movlb	0	; () banked
 20574  01152E  EE20 F004          	lfsr	2,4
 20575  011532  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20576  011534  26D9               	addwf	fsr2l,f,c
 20577  011536  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20578  011538  22DA               	addwfc	fsr2h,f,c
 20579  01153A  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20580  01153E  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20581  011542  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20582  011546  0E00               	movlw	0
 20583  011548  0100               	movlb	0	; () banked
 20584  01154A  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20585  01154C  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20586                           
 20587                           ;Port.c: 214: break;
 20588  011550  D07A               	goto	l414
 20589  011552                     
 20590                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 20591                           
 20592                           ;Port.c: 218: case eTypeOutputOpenSource:
 20593  011552  C0E6  F0CA         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20594  011556  C0E7  F0CB         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20595  01155A  0E02               	movlw	2
 20596  01155C  0100               	movlb	0	; () banked
 20597  01155E  6FCC               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20598  011560  C0E3  F0CD         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20599  011564  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 20600  011568  0100               	movlb	0	; () banked
 20601  01156A  6FE5               	movwf	Port_SetPinType@Output& (0+255),b
 20602  01156C  0100               	movlb	0	; () banked
 20603  01156E  51E5               	movf	Port_SetPinType@Output& (0+255),w,b
 20604  011570  A4D8               	btfss	status,2,c
 20605  011572  0012               	return	
 20606                           
 20607                           ; BSR set to: 0
 20608                           ;Port.c: 220: {
 20609                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20610  011574  0100               	movlb	0	; () banked
 20611  011576  EE20 F002          	lfsr	2,2
 20612  01157A  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20613  01157C  26D9               	addwf	fsr2l,f,c
 20614  01157E  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20615  011580  22DA               	addwfc	fsr2h,f,c
 20616  011582  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20617  011586  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20618  01158A  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20619  01158E  0E01               	movlw	1
 20620  011590  0100               	movlb	0	; () banked
 20621  011592  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20622  011594  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20623                           
 20624                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 20625  011598  0100               	movlb	0	; () banked
 20626  01159A  EE20 F004          	lfsr	2,4
 20627  01159E  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20628  0115A0  26D9               	addwf	fsr2l,f,c
 20629  0115A2  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20630  0115A4  22DA               	addwfc	fsr2h,f,c
 20631  0115A6  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20632  0115AA  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20633  0115AE  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20634  0115B2  0E01               	movlw	1
 20635  0115B4  0100               	movlb	0	; () banked
 20636  0115B6  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20637  0115B8  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20638                           
 20639                           ;Port.c: 226: break;
 20640  0115BC  D044               	goto	l414
 20641  0115BE                     
 20642                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 20643                           
 20644                           ;Port.c: 230: case eTypeOutputPushPull:
 20645  0115BE  C0E6  F0CA         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20646  0115C2  C0E7  F0CB         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20647  0115C6  0E00               	movlw	0
 20648  0115C8  0100               	movlb	0	; () banked
 20649  0115CA  6FCC               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20650  0115CC  C0E3  F0CD         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20651  0115D0  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 20652  0115D4  0100               	movlb	0	; () banked
 20653  0115D6  6FE5               	movwf	Port_SetPinType@Output& (0+255),b
 20654  0115D8  0100               	movlb	0	; () banked
 20655  0115DA  51E5               	movf	Port_SetPinType@Output& (0+255),w,b
 20656  0115DC  A4D8               	btfss	status,2,c
 20657  0115DE  0012               	return	
 20658                           
 20659                           ; BSR set to: 0
 20660                           ;Port.c: 232: {
 20661                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20662  0115E0  0100               	movlb	0	; () banked
 20663  0115E2  EE20 F002          	lfsr	2,2
 20664  0115E6  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20665  0115E8  26D9               	addwf	fsr2l,f,c
 20666  0115EA  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20667  0115EC  22DA               	addwfc	fsr2h,f,c
 20668  0115EE  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20669  0115F2  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20670  0115F6  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20671  0115FA  0E00               	movlw	0
 20672  0115FC  0100               	movlb	0	; () banked
 20673  0115FE  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20674  011600  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20675                           
 20676                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20677  011604  0100               	movlb	0	; () banked
 20678  011606  EE20 F004          	lfsr	2,4
 20679  01160A  51E1               	movf	Port_SetPinType@pInput& (0+255),w,b
 20680  01160C  26D9               	addwf	fsr2l,f,c
 20681  01160E  51E2               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20682  011610  22DA               	addwfc	fsr2h,f,c
 20683  011612  CFDE F0BB          	movff	postinc2,Byte_SetBit@pInput
 20684  011616  CFDD F0BC          	movff	postdec2,Byte_SetBit@pInput+1
 20685  01161A  C0E3  F0BD         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20686  01161E  0E00               	movlw	0
 20687  011620  0100               	movlb	0	; () banked
 20688  011622  6FBE               	movwf	Byte_SetBit@pValue& (0+255),b
 20689  011624  EC78  F09E         	call	_Byte_SetBit	;wreg free
 20690                           
 20691                           ;Port.c: 239: }
 20692                           
 20693                           ;Port.c: 238: break;
 20694  011628  D00E               	goto	l414
 20695  01162A                     l412:
 20696  01162A  0100               	movlb	0	; () banked
 20697  01162C  51E4               	movf	Port_SetPinType@pType& (0+255),w,b
 20698                           
 20699                           ; Switch size 1, requested type "space"
 20700                           ; Number of cases is 4, Range of values is 0 to 3
 20701                           ; switch strategies available:
 20702                           ; Name         Instructions Cycles
 20703                           ; simple_byte           13     7 (average)
 20704                           ;	Chosen strategy is simple_byte
 20705  01162E  0A00               	xorlw	0	; case 0
 20706  011630  B4D8               	btfsc	status,2,c
 20707  011632  D746               	goto	l413
 20708  011634  0A01               	xorlw	1	; case 1
 20709  011636  B4D8               	btfsc	status,2,c
 20710  011638  D756               	goto	l415
 20711  01163A  0A03               	xorlw	3	; case 2
 20712  01163C  B4D8               	btfsc	status,2,c
 20713  01163E  D789               	goto	l417
 20714  011640  0A01               	xorlw	1	; case 3
 20715  011642  B4D8               	btfsc	status,2,c
 20716  011644  D7BC               	goto	l421
 20717  011646                     l414:
 20718                           
 20719                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 20720                           
 20721                           ; BSR set to: 0
 20722  011646  0E08               	movlw	8
 20723  011648  0100               	movlb	0	; () banked
 20724  01164A  25E1               	addwf	Port_SetPinType@pInput& (0+255),w,b
 20725  01164C  0100               	movlb	0	; () banked
 20726  01164E  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 20727  011650  0E00               	movlw	0
 20728  011652  0100               	movlb	0	; () banked
 20729  011654  21E2               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 20730  011656  0100               	movlb	0	; () banked
 20731  011658  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 20732  01165A  C0E3  F0CC         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 20733  01165E  C0E4  F0CD         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 20734  011662  EC37  F0A1         	call	_Word_SetPair	;wreg free
 20735  011666  0012               	return	
 20736  011668                     __end_of_Port_SetPinType:
 20737                           	opt stack 0
 20738                           tosu	equ	0xFFF
 20739                           tosh	equ	0xFFE
 20740                           tosl	equ	0xFFD
 20741                           pclath	equ	0xFFA
 20742                           tblptru	equ	0xFF8
 20743                           tblptrh	equ	0xFF7
 20744                           tblptrl	equ	0xFF6
 20745                           tablat	equ	0xFF5
 20746                           prodh	equ	0xFF4
 20747                           prodl	equ	0xFF3
 20748                           intcon	equ	0xFF2
 20749                           postinc0	equ	0xFEE
 20750                           wreg	equ	0xFE8
 20751                           indf1	equ	0xFE7
 20752                           postdec1	equ	0xFE5
 20753                           fsr1h	equ	0xFE2
 20754                           fsr1l	equ	0xFE1
 20755                           indf2	equ	0xFDF
 20756                           postinc2	equ	0xFDE
 20757                           postdec2	equ	0xFDD
 20758                           plusw2	equ	0xFDB
 20759                           fsr2h	equ	0xFDA
 20760                           fsr2l	equ	0xFD9
 20761                           status	equ	0xFD8
 20762                           
 20763 ;; *************** function _Byte_SetBit *****************
 20764 ;; Defined at:
 20765 ;;		line 32 in file "Library/Types.c"
 20766 ;; Parameters:    Size  Location     Type
 20767 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20768 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20769 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20770 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20771 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20772 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20773 ;;		 -> NULL(0), 
 20774 ;;  pBit            1    2[BANK0 ] unsigned char 
 20775 ;;  pValue          1    3[BANK0 ] unsigned char 
 20776 ;; Auto vars:     Size  Location     Type
 20777 ;;		None
 20778 ;; Return value:  Size  Location     Type
 20779 ;;                  1    wreg      void 
 20780 ;; Registers used:
 20781 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20782 ;; Tracked objects:
 20783 ;;		On entry : 0/0
 20784 ;;		On exit  : 0/0
 20785 ;;		Unchanged: 0/0
 20786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20789 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20790 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20791 ;;Total ram usage:        7 bytes
 20792 ;; Hardware stack levels used:    1
 20793 ;; Hardware stack levels required when called:    7
 20794 ;; This function calls:
 20795 ;;		Nothing
 20796 ;; This function is called by:
 20797 ;;		_Port_SetPinType
 20798 ;;		_Port_SetPin
 20799 ;;		_SPI_Init
 20800 ;;		_SPI_MinSpeed
 20801 ;;		_SPI_MaxSpeed
 20802 ;;		_Word_SetBit
 20803 ;;		_I2C_Init
 20804 ;; This function uses a non-reentrant model
 20805 ;;
 20806                           
 20807                           	psect	text118
 20808  013CF0                     __ptext118:
 20809                           	opt stack 0
 20810  013CF0                     _Byte_SetBit:
 20811                           	opt stack 19
 20812                           
 20813                           ;Types.c: 34: pValue &= 1;
 20814                           
 20815                           ;incstack = 0
 20816  013CF0  0E01               	movlw	1
 20817  013CF2  0100               	movlb	0	; () banked
 20818  013CF4  17BE               	andwf	Byte_SetBit@pValue& (0+255),f,b
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20822  013CF6  C0BD  F0BF         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20823  013CFA  0E01               	movlw	1
 20824  013CFC  0100               	movlb	0	; () banked
 20825  013CFE  6FC0               	movwf	(??_Byte_SetBit+1)& (0+255),b
 20826  013D00  0100               	movlb	0	; () banked
 20827  013D02  2BBF               	incf	??_Byte_SetBit& (0+255),f,b
 20828  013D04  D003               	goto	u6734
 20829  013D06                     u6735:
 20830  013D06  0100               	movlb	0	; () banked
 20831  013D08  90D8               	bcf	status,0,c
 20832  013D0A  37C0               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20833  013D0C                     u6734:
 20834  013D0C  0100               	movlb	0	; () banked
 20835  013D0E  2FBF               	decfsz	??_Byte_SetBit& (0+255),f,b
 20836  013D10  D7FA               	goto	u6735
 20837  013D12  0100               	movlb	0	; () banked
 20838  013D14  51C0               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20839  013D16  0AFF               	xorlw	255
 20840  013D18  0100               	movlb	0	; () banked
 20841  013D1A  6FC1               	movwf	(??_Byte_SetBit+2)& (0+255),b
 20842  013D1C  C0BB  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20843  013D20  C0BC  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20844  013D24  0100               	movlb	0	; () banked
 20845  013D26  51C1               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 20846  013D28  16DF               	andwf	indf2,f,c
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20850  013D2A  C0BD  F0BF         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20851  013D2E  C0BE  F0C0         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 20852  013D32  0100               	movlb	0	; () banked
 20853  013D34  2BBF               	incf	??_Byte_SetBit& (0+255),f,b
 20854  013D36  D003               	goto	u6744
 20855  013D38                     u6745:
 20856  013D38  0100               	movlb	0	; () banked
 20857  013D3A  90D8               	bcf	status,0,c
 20858  013D3C  37C0               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20859  013D3E                     u6744:
 20860  013D3E  0100               	movlb	0	; () banked
 20861  013D40  2FBF               	decfsz	??_Byte_SetBit& (0+255),f,b
 20862  013D42  D7FA               	goto	u6745
 20863  013D44  C0BB  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20864  013D48  C0BC  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20865  013D4C  0100               	movlb	0	; () banked
 20866  013D4E  51C0               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20867  013D50  12DF               	iorwf	indf2,f,c
 20868                           
 20869                           ; BSR set to: 0
 20870  013D52  0012               	return		;funcret
 20871  013D54                     __end_of_Byte_SetBit:
 20872                           	opt stack 0
 20873                           tosu	equ	0xFFF
 20874                           tosh	equ	0xFFE
 20875                           tosl	equ	0xFFD
 20876                           pclath	equ	0xFFA
 20877                           tblptru	equ	0xFF8
 20878                           tblptrh	equ	0xFF7
 20879                           tblptrl	equ	0xFF6
 20880                           tablat	equ	0xFF5
 20881                           prodh	equ	0xFF4
 20882                           prodl	equ	0xFF3
 20883                           intcon	equ	0xFF2
 20884                           postinc0	equ	0xFEE
 20885                           wreg	equ	0xFE8
 20886                           indf1	equ	0xFE7
 20887                           postdec1	equ	0xFE5
 20888                           fsr1h	equ	0xFE2
 20889                           fsr1l	equ	0xFE1
 20890                           indf2	equ	0xFDF
 20891                           postinc2	equ	0xFDE
 20892                           postdec2	equ	0xFDD
 20893                           plusw2	equ	0xFDB
 20894                           fsr2h	equ	0xFDA
 20895                           fsr2l	equ	0xFD9
 20896                           status	equ	0xFD8
 20897                           
 20898 ;; *************** function _Port_SetQuadType *****************
 20899 ;; Defined at:
 20900 ;;		line 399 in file "Library/Port.c"
 20901 ;; Parameters:    Size  Location     Type
 20902 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 20903 ;;		 -> PortB(10), PortD(10), 
 20904 ;;  pQuad           1   56[BANK0 ] enum E6776
 20905 ;;  pType           1   57[BANK0 ] enum E6795
 20906 ;; Auto vars:     Size  Location     Type
 20907 ;;  Output          1   58[BANK0 ] enum E6475
 20908 ;; Return value:  Size  Location     Type
 20909 ;;                  1    wreg      enum E6475
 20910 ;; Registers used:
 20911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20912 ;; Tracked objects:
 20913 ;;		On entry : 0/0
 20914 ;;		On exit  : 0/0
 20915 ;;		Unchanged: 0/0
 20916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;Total ram usage:        5 bytes
 20922 ;; Hardware stack levels used:    1
 20923 ;; Hardware stack levels required when called:   13
 20924 ;; This function calls:
 20925 ;;		_Byte_SetQuad
 20926 ;;		_Port_CheckQuadType
 20927 ;;		_Word_SetPair
 20928 ;; This function is called by:
 20929 ;;		_MXK_InitDIPSwitch
 20930 ;;		_MXK_Init
 20931 ;; This function uses a non-reentrant model
 20932 ;;
 20933                           
 20934                           	psect	text119
 20935  010A5C                     __ptext119:
 20936                           	opt stack 0
 20937  010A5C                     _Port_SetQuadType:
 20938                           	opt stack 15
 20939                           
 20940                           ;Port.c: 401: ePinError Output = ePinErrorState;
 20941                           
 20942                           ; BSR set to: 0
 20943                           ;incstack = 0
 20944  010A5C  0E05               	movlw	5
 20945  010A5E  0100               	movlb	0	; () banked
 20946  010A60  6FF5               	movwf	Port_SetQuadType@Output& (0+255),b
 20947                           
 20948                           ;Port.c: 403: switch (pType)
 20949  010A62  D0C7               	goto	l476
 20950  010A64                     
 20951                           ; BSR set to: 0
 20952                           ;Port.c: 407: {
 20953                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 20954                           
 20955                           ; BSR set to: 0
 20956  010A64  0100               	movlb	0	; () banked
 20957  010A66  EE20 F002          	lfsr	2,2
 20958  010A6A  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 20959  010A6C  26D9               	addwf	fsr2l,f,c
 20960  010A6E  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20961  010A70  22DA               	addwfc	fsr2h,f,c
 20962  010A72  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 20963  010A76  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 20964  010A7A  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20965  010A7E  0E0F               	movlw	15
 20966  010A80  0100               	movlb	0	; () banked
 20967  010A82  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 20968  010A84  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 20969                           
 20970                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 20971  010A88  0100               	movlb	0	; () banked
 20972  010A8A  EE20 F004          	lfsr	2,4
 20973  010A8E  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 20974  010A90  26D9               	addwf	fsr2l,f,c
 20975  010A92  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20976  010A94  22DA               	addwfc	fsr2h,f,c
 20977  010A96  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 20978  010A9A  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 20979  010A9E  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20980  010AA2  0E00               	movlw	0
 20981  010AA4  0100               	movlb	0	; () banked
 20982  010AA6  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 20983  010AA8  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 20984                           
 20985                           ;Port.c: 413: }
 20986                           ;Port.c: 415: break;
 20987  010AAC  D0B0               	goto	l478
 20988  010AAE                     
 20989                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 20990  010AAE  C0F1  F0EA         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 20991  010AB2  C0F2  F0EB         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 20992  010AB6  C0F3  F0EC         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 20993  010ABA  0E03               	movlw	3
 20994  010ABC  0100               	movlb	0	; () banked
 20995  010ABE  6FED               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 20996  010AC0  EC3A  F09F         	call	_Port_CheckQuadType	;wreg free
 20997  010AC4  0100               	movlb	0	; () banked
 20998  010AC6  6FF5               	movwf	Port_SetQuadType@Output& (0+255),b
 20999  010AC8  0100               	movlb	0	; () banked
 21000  010ACA  51F5               	movf	Port_SetQuadType@Output& (0+255),w,b
 21001  010ACC  A4D8               	btfss	status,2,c
 21002  010ACE  0012               	return	
 21003                           
 21004                           ; BSR set to: 0
 21005                           ;Port.c: 418: {
 21006                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21007  010AD0  0100               	movlb	0	; () banked
 21008  010AD2  EE20 F002          	lfsr	2,2
 21009  010AD6  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21010  010AD8  26D9               	addwf	fsr2l,f,c
 21011  010ADA  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21012  010ADC  22DA               	addwfc	fsr2h,f,c
 21013  010ADE  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21014  010AE2  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21015  010AE6  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21016  010AEA  0E00               	movlw	0
 21017  010AEC  0100               	movlb	0	; () banked
 21018  010AEE  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21019  010AF0  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21020                           
 21021                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21022  010AF4  0100               	movlb	0	; () banked
 21023  010AF6  EE20 F004          	lfsr	2,4
 21024  010AFA  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21025  010AFC  26D9               	addwf	fsr2l,f,c
 21026  010AFE  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21027  010B00  22DA               	addwfc	fsr2h,f,c
 21028  010B02  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21029  010B06  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21030  010B0A  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21031  010B0E  0E00               	movlw	0
 21032  010B10  0100               	movlb	0	; () banked
 21033  010B12  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21034  010B14  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21035                           
 21036                           ;Port.c: 424: }
 21037  010B18  D07A               	goto	l478
 21038  010B1A                     
 21039                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21040  010B1A  C0F1  F0EA         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21041  010B1E  C0F2  F0EB         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21042  010B22  C0F3  F0EC         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21043  010B26  0E03               	movlw	3
 21044  010B28  0100               	movlb	0	; () banked
 21045  010B2A  6FED               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21046  010B2C  EC3A  F09F         	call	_Port_CheckQuadType	;wreg free
 21047  010B30  0100               	movlb	0	; () banked
 21048  010B32  6FF5               	movwf	Port_SetQuadType@Output& (0+255),b
 21049  010B34  0100               	movlb	0	; () banked
 21050  010B36  51F5               	movf	Port_SetQuadType@Output& (0+255),w,b
 21051  010B38  A4D8               	btfss	status,2,c
 21052  010B3A  0012               	return	
 21053                           
 21054                           ; BSR set to: 0
 21055                           ;Port.c: 429: {
 21056                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21057  010B3C  0100               	movlb	0	; () banked
 21058  010B3E  EE20 F002          	lfsr	2,2
 21059  010B42  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21060  010B44  26D9               	addwf	fsr2l,f,c
 21061  010B46  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21062  010B48  22DA               	addwfc	fsr2h,f,c
 21063  010B4A  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21064  010B4E  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21065  010B52  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21066  010B56  0E0F               	movlw	15
 21067  010B58  0100               	movlb	0	; () banked
 21068  010B5A  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21069  010B5C  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21070                           
 21071                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 21072  010B60  0100               	movlb	0	; () banked
 21073  010B62  EE20 F004          	lfsr	2,4
 21074  010B66  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21075  010B68  26D9               	addwf	fsr2l,f,c
 21076  010B6A  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21077  010B6C  22DA               	addwfc	fsr2h,f,c
 21078  010B6E  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21079  010B72  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21080  010B76  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21081  010B7A  0E0F               	movlw	15
 21082  010B7C  0100               	movlb	0	; () banked
 21083  010B7E  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21084  010B80  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21085                           
 21086                           ;Port.c: 435: }
 21087  010B84  D044               	goto	l478
 21088  010B86                     
 21089                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21090  010B86  C0F1  F0EA         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21091  010B8A  C0F2  F0EB         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21092  010B8E  C0F3  F0EC         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21093  010B92  0E03               	movlw	3
 21094  010B94  0100               	movlb	0	; () banked
 21095  010B96  6FED               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21096  010B98  EC3A  F09F         	call	_Port_CheckQuadType	;wreg free
 21097  010B9C  0100               	movlb	0	; () banked
 21098  010B9E  6FF5               	movwf	Port_SetQuadType@Output& (0+255),b
 21099  010BA0  0100               	movlb	0	; () banked
 21100  010BA2  51F5               	movf	Port_SetQuadType@Output& (0+255),w,b
 21101  010BA4  A4D8               	btfss	status,2,c
 21102  010BA6  0012               	return	
 21103                           
 21104                           ; BSR set to: 0
 21105                           ;Port.c: 440: {
 21106                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21107  010BA8  0100               	movlb	0	; () banked
 21108  010BAA  EE20 F002          	lfsr	2,2
 21109  010BAE  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21110  010BB0  26D9               	addwf	fsr2l,f,c
 21111  010BB2  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21112  010BB4  22DA               	addwfc	fsr2h,f,c
 21113  010BB6  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21114  010BBA  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21115  010BBE  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21116  010BC2  0E00               	movlw	0
 21117  010BC4  0100               	movlb	0	; () banked
 21118  010BC6  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21119  010BC8  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21120                           
 21121                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21122  010BCC  0100               	movlb	0	; () banked
 21123  010BCE  EE20 F004          	lfsr	2,4
 21124  010BD2  51F1               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21125  010BD4  26D9               	addwf	fsr2l,f,c
 21126  010BD6  51F2               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21127  010BD8  22DA               	addwfc	fsr2h,f,c
 21128  010BDA  CFDE F0C6          	movff	postinc2,Byte_SetQuad@pInput
 21129  010BDE  CFDD F0C7          	movff	postdec2,Byte_SetQuad@pInput+1
 21130  010BE2  C0F3  F0C8         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21131  010BE6  0E00               	movlw	0
 21132  010BE8  0100               	movlb	0	; () banked
 21133  010BEA  6FC9               	movwf	Byte_SetQuad@pValue& (0+255),b
 21134  010BEC  EC86  F0A3         	call	_Byte_SetQuad	;wreg free
 21135                           
 21136                           ;Port.c: 446: }
 21137  010BF0  D00E               	goto	l478
 21138  010BF2                     l476:
 21139  010BF2  0100               	movlb	0	; () banked
 21140  010BF4  51F4               	movf	Port_SetQuadType@pType& (0+255),w,b
 21141                           
 21142                           ; Switch size 1, requested type "space"
 21143                           ; Number of cases is 4, Range of values is 0 to 3
 21144                           ; switch strategies available:
 21145                           ; Name         Instructions Cycles
 21146                           ; simple_byte           13     7 (average)
 21147                           ;	Chosen strategy is simple_byte
 21148  010BF6  0A00               	xorlw	0	; case 0
 21149  010BF8  B4D8               	btfsc	status,2,c
 21150  010BFA  D734               	goto	l477
 21151  010BFC  0A01               	xorlw	1	; case 1
 21152  010BFE  B4D8               	btfsc	status,2,c
 21153  010C00  D756               	goto	l479
 21154  010C02  0A03               	xorlw	3	; case 2
 21155  010C04  B4D8               	btfsc	status,2,c
 21156  010C06  D789               	goto	l483
 21157  010C08  0A01               	xorlw	1	; case 3
 21158  010C0A  B4D8               	btfsc	status,2,c
 21159  010C0C  D7BC               	goto	l486
 21160  010C0E                     l478:
 21161                           
 21162                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 21163                           
 21164                           ; BSR set to: 0
 21165  010C0E  0E08               	movlw	8
 21166  010C10  0100               	movlb	0	; () banked
 21167  010C12  25F1               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21168  010C14  0100               	movlb	0	; () banked
 21169  010C16  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 21170  010C18  0E00               	movlw	0
 21171  010C1A  0100               	movlb	0	; () banked
 21172  010C1C  21F2               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21173  010C1E  0100               	movlb	0	; () banked
 21174  010C20  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21175  010C22  0100               	movlb	0	; () banked
 21176  010C24  51F3               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21177  010C26  0D04               	mullw	4
 21178  010C28  CFF3 F0CC          	movff	prodl,Word_SetPair@pPair
 21179  010C2C  C0F4  F0CD         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21180  010C30  EC37  F0A1         	call	_Word_SetPair	;wreg free
 21181                           
 21182                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21183  010C34  0E08               	movlw	8
 21184  010C36  0100               	movlb	0	; () banked
 21185  010C38  25F1               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21186  010C3A  0100               	movlb	0	; () banked
 21187  010C3C  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 21188  010C3E  0E00               	movlw	0
 21189  010C40  0100               	movlb	0	; () banked
 21190  010C42  21F2               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21191  010C44  0100               	movlb	0	; () banked
 21192  010C46  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21193  010C48  0100               	movlb	0	; () banked
 21194  010C4A  51F3               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21195  010C4C  0D04               	mullw	4
 21196  010C4E  28F3               	incf	prodl,w,c
 21197  010C50  0100               	movlb	0	; () banked
 21198  010C52  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 21199  010C54  C0F4  F0CD         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21200  010C58  EC37  F0A1         	call	_Word_SetPair	;wreg free
 21201                           
 21202                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21203  010C5C  0E08               	movlw	8
 21204  010C5E  0100               	movlb	0	; () banked
 21205  010C60  25F1               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21206  010C62  0100               	movlb	0	; () banked
 21207  010C64  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 21208  010C66  0E00               	movlw	0
 21209  010C68  0100               	movlb	0	; () banked
 21210  010C6A  21F2               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21211  010C6C  0100               	movlb	0	; () banked
 21212  010C6E  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21213  010C70  0100               	movlb	0	; () banked
 21214  010C72  51F3               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21215  010C74  0D04               	mullw	4
 21216  010C76  50F3               	movf	prodl,w,c
 21217  010C78  0F02               	addlw	2
 21218  010C7A  0100               	movlb	0	; () banked
 21219  010C7C  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 21220  010C7E  C0F4  F0CD         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21221  010C82  EC37  F0A1         	call	_Word_SetPair	;wreg free
 21222                           
 21223                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21224  010C86  0E08               	movlw	8
 21225  010C88  0100               	movlb	0	; () banked
 21226  010C8A  25F1               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21227  010C8C  0100               	movlb	0	; () banked
 21228  010C8E  6FCA               	movwf	Word_SetPair@pInput& (0+255),b
 21229  010C90  0E00               	movlw	0
 21230  010C92  0100               	movlb	0	; () banked
 21231  010C94  21F2               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21232  010C96  0100               	movlb	0	; () banked
 21233  010C98  6FCB               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21234  010C9A  0100               	movlb	0	; () banked
 21235  010C9C  51F3               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21236  010C9E  0D04               	mullw	4
 21237  010CA0  50F3               	movf	prodl,w,c
 21238  010CA2  0F03               	addlw	3
 21239  010CA4  0100               	movlb	0	; () banked
 21240  010CA6  6FCC               	movwf	Word_SetPair@pPair& (0+255),b
 21241  010CA8  C0F4  F0CD         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21242  010CAC  EC37  F0A1         	call	_Word_SetPair	;wreg free
 21243  010CB0  0012               	return	
 21244  010CB2                     __end_of_Port_SetQuadType:
 21245                           	opt stack 0
 21246                           tosu	equ	0xFFF
 21247                           tosh	equ	0xFFE
 21248                           tosl	equ	0xFFD
 21249                           pclath	equ	0xFFA
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           postinc0	equ	0xFEE
 21258                           wreg	equ	0xFE8
 21259                           indf1	equ	0xFE7
 21260                           postdec1	equ	0xFE5
 21261                           fsr1h	equ	0xFE2
 21262                           fsr1l	equ	0xFE1
 21263                           indf2	equ	0xFDF
 21264                           postinc2	equ	0xFDE
 21265                           postdec2	equ	0xFDD
 21266                           plusw2	equ	0xFDB
 21267                           fsr2h	equ	0xFDA
 21268                           fsr2l	equ	0xFD9
 21269                           status	equ	0xFD8
 21270                           
 21271 ;; *************** function _Word_SetPair *****************
 21272 ;; Defined at:
 21273 ;;		line 149 in file "Library/Types.c"
 21274 ;; Parameters:    Size  Location     Type
 21275 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21276 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21277 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21278 ;;  pPair           1   17[BANK0 ] unsigned char 
 21279 ;;  pValue          1   18[BANK0 ] unsigned char 
 21280 ;; Auto vars:     Size  Location     Type
 21281 ;;		None
 21282 ;; Return value:  Size  Location     Type
 21283 ;;                  1    wreg      void 
 21284 ;; Registers used:
 21285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21286 ;; Tracked objects:
 21287 ;;		On entry : 0/0
 21288 ;;		On exit  : 0/0
 21289 ;;		Unchanged: 0/0
 21290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21291 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21294 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21295 ;;Total ram usage:        4 bytes
 21296 ;; Hardware stack levels used:    1
 21297 ;; Hardware stack levels required when called:    9
 21298 ;; This function calls:
 21299 ;;		_Byte_SetPair
 21300 ;; This function is called by:
 21301 ;;		_Port_SetPinType
 21302 ;;		_Port_SetQuadType
 21303 ;;		_Port_SetType
 21304 ;;		_Port_SetPairType
 21305 ;;		_PortProperty_Init
 21306 ;; This function uses a non-reentrant model
 21307 ;;
 21308                           
 21309                           	psect	text120
 21310  01426E                     __ptext120:
 21311                           	opt stack 0
 21312  01426E                     _Word_SetPair:
 21313                           	opt stack 18
 21314                           
 21315                           ;Types.c: 151: if (pPair >= 4)
 21316                           
 21317                           ;incstack = 0
 21318  01426E  0E03               	movlw	3
 21319  014270  0100               	movlb	0	; () banked
 21320  014272  65CC               	cpfsgt	Word_SetPair@pPair& (0+255),b
 21321  014274  D014               	goto	l776
 21322                           
 21323                           ; BSR set to: 0
 21324                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21325  014276  0E01               	movlw	1
 21326  014278  0100               	movlb	0	; () banked
 21327  01427A  25CA               	addwf	Word_SetPair@pInput& (0+255),w,b
 21328  01427C  0100               	movlb	0	; () banked
 21329  01427E  6FC6               	movwf	Byte_SetPair@pInput& (0+255),b
 21330  014280  0E00               	movlw	0
 21331  014282  0100               	movlb	0	; () banked
 21332  014284  21CB               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21333  014286  0100               	movlb	0	; () banked
 21334  014288  6FC7               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21335  01428A  0100               	movlb	0	; () banked
 21336  01428C  51CC               	movf	Word_SetPair@pPair& (0+255),w,b
 21337  01428E  0FFC               	addlw	252
 21338  014290  0100               	movlb	0	; () banked
 21339  014292  6FC8               	movwf	Byte_SetPair@pPair& (0+255),b
 21340  014294  C0CD  F0C9         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21341  014298  EC75  F0A3         	call	_Byte_SetPair	;wreg free
 21342  01429C  0012               	return	
 21343  01429E                     l776:
 21344                           
 21345                           ;Types.c: 153: else
 21346                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21347  01429E  C0CA  F0C6         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21348  0142A2  C0CB  F0C7         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21349  0142A6  C0CC  F0C8         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21350  0142AA  C0CD  F0C9         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21351  0142AE  EC75  F0A3         	call	_Byte_SetPair	;wreg free
 21352  0142B2  0012               	return	
 21353  0142B4                     __end_of_Word_SetPair:
 21354                           	opt stack 0
 21355                           tosu	equ	0xFFF
 21356                           tosh	equ	0xFFE
 21357                           tosl	equ	0xFFD
 21358                           pclath	equ	0xFFA
 21359                           tblptru	equ	0xFF8
 21360                           tblptrh	equ	0xFF7
 21361                           tblptrl	equ	0xFF6
 21362                           tablat	equ	0xFF5
 21363                           prodh	equ	0xFF4
 21364                           prodl	equ	0xFF3
 21365                           intcon	equ	0xFF2
 21366                           postinc0	equ	0xFEE
 21367                           wreg	equ	0xFE8
 21368                           indf1	equ	0xFE7
 21369                           postdec1	equ	0xFE5
 21370                           fsr1h	equ	0xFE2
 21371                           fsr1l	equ	0xFE1
 21372                           indf2	equ	0xFDF
 21373                           postinc2	equ	0xFDE
 21374                           postdec2	equ	0xFDD
 21375                           plusw2	equ	0xFDB
 21376                           fsr2h	equ	0xFDA
 21377                           fsr2l	equ	0xFD9
 21378                           status	equ	0xFD8
 21379                           
 21380 ;; *************** function _Byte_SetPair *****************
 21381 ;; Defined at:
 21382 ;;		line 83 in file "Library/Types.c"
 21383 ;; Parameters:    Size  Location     Type
 21384 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21385 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21386 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21387 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21388 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21389 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21390 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21391 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21392 ;;		 -> NULL(0), 
 21393 ;;  pPair           1   13[BANK0 ] unsigned char 
 21394 ;;  pValue          1   14[BANK0 ] unsigned char 
 21395 ;; Auto vars:     Size  Location     Type
 21396 ;;		None
 21397 ;; Return value:  Size  Location     Type
 21398 ;;                  1    wreg      void 
 21399 ;; Registers used:
 21400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21401 ;; Tracked objects:
 21402 ;;		On entry : 0/0
 21403 ;;		On exit  : 0/0
 21404 ;;		Unchanged: 0/0
 21405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21410 ;;Total ram usage:        4 bytes
 21411 ;; Hardware stack levels used:    1
 21412 ;; Hardware stack levels required when called:    8
 21413 ;; This function calls:
 21414 ;;		_Byte_SetZone
 21415 ;; This function is called by:
 21416 ;;		_Word_SetPair
 21417 ;;		_Port_SetPairType
 21418 ;;		_Port_SetPair
 21419 ;; This function uses a non-reentrant model
 21420 ;;
 21421                           
 21422                           	psect	text121
 21423  0146EA                     __ptext121:
 21424                           	opt stack 0
 21425  0146EA                     _Byte_SetPair:
 21426                           	opt stack 18
 21427                           
 21428                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21429                           
 21430                           ;incstack = 0
 21431  0146EA  C0C6  F0BB         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21432  0146EE  C0C7  F0BC         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21433  0146F2  0E04               	movlw	4
 21434  0146F4  0100               	movlb	0	; () banked
 21435  0146F6  6FBD               	movwf	Byte_SetZone@pMax& (0+255),b
 21436  0146F8  C0C8  F0BE         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21437  0146FC  0E02               	movlw	2
 21438  0146FE  0100               	movlb	0	; () banked
 21439  014700  6FBF               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21440  014702  C0C9  F0C0         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21441  014706  ECBF  F095         	call	_Byte_SetZone	;wreg free
 21442  01470A  0012               	return		;funcret
 21443  01470C                     __end_of_Byte_SetPair:
 21444                           	opt stack 0
 21445                           tosu	equ	0xFFF
 21446                           tosh	equ	0xFFE
 21447                           tosl	equ	0xFFD
 21448                           pclath	equ	0xFFA
 21449                           tblptru	equ	0xFF8
 21450                           tblptrh	equ	0xFF7
 21451                           tblptrl	equ	0xFF6
 21452                           tablat	equ	0xFF5
 21453                           prodh	equ	0xFF4
 21454                           prodl	equ	0xFF3
 21455                           intcon	equ	0xFF2
 21456                           postinc0	equ	0xFEE
 21457                           wreg	equ	0xFE8
 21458                           indf1	equ	0xFE7
 21459                           postdec1	equ	0xFE5
 21460                           fsr1h	equ	0xFE2
 21461                           fsr1l	equ	0xFE1
 21462                           indf2	equ	0xFDF
 21463                           postinc2	equ	0xFDE
 21464                           postdec2	equ	0xFDD
 21465                           plusw2	equ	0xFDB
 21466                           fsr2h	equ	0xFDA
 21467                           fsr2l	equ	0xFD9
 21468                           status	equ	0xFD8
 21469                           
 21470 ;; *************** function _Port_CheckQuadType *****************
 21471 ;; Defined at:
 21472 ;;		line 126 in file "Library/Port.c"
 21473 ;; Parameters:    Size  Location     Type
 21474 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 21475 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21476 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21477 ;;  pQuad           1   49[BANK0 ] enum E6776
 21478 ;;  pDrive          1   50[BANK0 ] enum E6469
 21479 ;; Auto vars:     Size  Location     Type
 21480 ;;  Output          1   53[BANK0 ] enum E6475
 21481 ;;  Pair2           1   52[BANK0 ] enum E6760
 21482 ;;  Pair1           1   51[BANK0 ] enum E6760
 21483 ;; Return value:  Size  Location     Type
 21484 ;;                  1    wreg      enum E6475
 21485 ;; Registers used:
 21486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21487 ;; Tracked objects:
 21488 ;;		On entry : 0/0
 21489 ;;		On exit  : 0/0
 21490 ;;		Unchanged: 0/0
 21491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21493 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21495 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21496 ;;Total ram usage:        7 bytes
 21497 ;; Hardware stack levels used:    1
 21498 ;; Hardware stack levels required when called:   12
 21499 ;; This function calls:
 21500 ;;		_Port_CheckPairType
 21501 ;; This function is called by:
 21502 ;;		_Port_CheckPortType
 21503 ;;		_Port_SetQuadType
 21504 ;; This function uses a non-reentrant model
 21505 ;;
 21506                           
 21507                           	psect	text122
 21508  013E74                     __ptext122:
 21509                           	opt stack 0
 21510  013E74                     _Port_CheckQuadType:
 21511                           	opt stack 14
 21512                           
 21513                           ;Port.c: 128: ePinError Output = ePinErrorState;
 21514                           
 21515                           ;incstack = 0
 21516  013E74  0E05               	movlw	5
 21517  013E76  0100               	movlb	0	; () banked
 21518  013E78  6FF0               	movwf	Port_CheckQuadType@Output& (0+255),b
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 21522  013E7A  0100               	movlb	0	; () banked
 21523  013E7C  51EC               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21524  013E7E  0D02               	mullw	2
 21525  013E80  CFF3 F0EE          	movff	prodl,Port_CheckQuadType@Pair1
 21526                           
 21527                           ; BSR set to: 0
 21528                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 21529  013E84  0100               	movlb	0	; () banked
 21530  013E86  51EC               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21531  013E88  0D02               	mullw	2
 21532  013E8A  28F3               	incf	prodl,w,c
 21533  013E8C  0100               	movlb	0	; () banked
 21534  013E8E  6FEF               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 21538  013E90  C0EA  F0E1         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21539  013E94  C0EB  F0E2         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21540  013E98  C0EE  F0E3         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 21541  013E9C  C0ED  F0E4         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21542  013EA0  ECAB  F09D         	call	_Port_CheckPairType	;wreg free
 21543  013EA4  0100               	movlb	0	; () banked
 21544  013EA6  6FF0               	movwf	Port_CheckQuadType@Output& (0+255),b
 21545  013EA8  0100               	movlb	0	; () banked
 21546  013EAA  51F0               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21547  013EAC  A4D8               	btfss	status,2,c
 21548  013EAE  D00C               	goto	l393
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 21552  013EB0  C0EA  F0E1         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21553  013EB4  C0EB  F0E2         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21554  013EB8  C0EF  F0E3         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 21555  013EBC  C0ED  F0E4         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21556  013EC0  ECAB  F09D         	call	_Port_CheckPairType	;wreg free
 21557  013EC4  0100               	movlb	0	; () banked
 21558  013EC6  6FF0               	movwf	Port_CheckQuadType@Output& (0+255),b
 21559  013EC8                     l393:
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;Port.c: 136: return Output;
 21563                           
 21564                           ; BSR set to: 0
 21565  013EC8  0100               	movlb	0	; () banked
 21566  013ECA  51F0               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21567  013ECC  0012               	return	
 21568  013ECE                     __end_of_Port_CheckQuadType:
 21569                           	opt stack 0
 21570                           tosu	equ	0xFFF
 21571                           tosh	equ	0xFFE
 21572                           tosl	equ	0xFFD
 21573                           pclath	equ	0xFFA
 21574                           tblptru	equ	0xFF8
 21575                           tblptrh	equ	0xFF7
 21576                           tblptrl	equ	0xFF6
 21577                           tablat	equ	0xFF5
 21578                           prodh	equ	0xFF4
 21579                           prodl	equ	0xFF3
 21580                           intcon	equ	0xFF2
 21581                           postinc0	equ	0xFEE
 21582                           wreg	equ	0xFE8
 21583                           indf1	equ	0xFE7
 21584                           postdec1	equ	0xFE5
 21585                           fsr1h	equ	0xFE2
 21586                           fsr1l	equ	0xFE1
 21587                           indf2	equ	0xFDF
 21588                           postinc2	equ	0xFDE
 21589                           postdec2	equ	0xFDD
 21590                           plusw2	equ	0xFDB
 21591                           fsr2h	equ	0xFDA
 21592                           fsr2l	equ	0xFD9
 21593                           status	equ	0xFD8
 21594                           
 21595 ;; *************** function _Port_CheckPairType *****************
 21596 ;; Defined at:
 21597 ;;		line 112 in file "Library/Port.c"
 21598 ;; Parameters:    Size  Location     Type
 21599 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21600 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21601 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21602 ;;  pPair           1   40[BANK0 ] enum E6760
 21603 ;;  pDrive          1   41[BANK0 ] enum E6469
 21604 ;; Auto vars:     Size  Location     Type
 21605 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 21606 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21607 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21608 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21609 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21610 ;;  Output          1   44[BANK0 ] enum E6475
 21611 ;;  Pin2            1   43[BANK0 ] enum E6750
 21612 ;;  Pin1            1   42[BANK0 ] enum E6750
 21613 ;; Return value:  Size  Location     Type
 21614 ;;                  1    wreg      enum E6475
 21615 ;; Registers used:
 21616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21617 ;; Tracked objects:
 21618 ;;		On entry : 0/0
 21619 ;;		On exit  : 0/0
 21620 ;;		Unchanged: 0/0
 21621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21623 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21625 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21626 ;;Total ram usage:        9 bytes
 21627 ;; Hardware stack levels used:    1
 21628 ;; Hardware stack levels required when called:   11
 21629 ;; This function calls:
 21630 ;;		_PortProperty_Valid
 21631 ;; This function is called by:
 21632 ;;		_Port_CheckQuadType
 21633 ;;		_Port_SetPairType
 21634 ;; This function uses a non-reentrant model
 21635 ;;
 21636                           
 21637                           	psect	text123
 21638  013B56                     __ptext123:
 21639                           	opt stack 0
 21640  013B56                     _Port_CheckPairType:
 21641                           	opt stack 14
 21642                           
 21643                           ;Port.c: 114: ePinError Output = ePinErrorState;
 21644                           
 21645                           ; BSR set to: 0
 21646                           ;incstack = 0
 21647  013B56  0E05               	movlw	5
 21648  013B58  0100               	movlb	0	; () banked
 21649  013B5A  6FE7               	movwf	Port_CheckPairType@Output& (0+255),b
 21650                           
 21651                           ; BSR set to: 0
 21652                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 21653  013B5C  C0E1  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 21654  013B60  C0E2  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 21655  013B64  CFDE F0E8          	movff	postinc2,Port_CheckPairType@Props
 21656  013B68  CFDD F0E9          	movff	postdec2,Port_CheckPairType@Props+1
 21657                           
 21658                           ; BSR set to: 0
 21659                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 21660  013B6C  0100               	movlb	0	; () banked
 21661  013B6E  51E3               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21662  013B70  0D02               	mullw	2
 21663  013B72  CFF3 F0E5          	movff	prodl,Port_CheckPairType@Pin1
 21664                           
 21665                           ; BSR set to: 0
 21666                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 21667  013B76  0100               	movlb	0	; () banked
 21668  013B78  51E3               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21669  013B7A  0D02               	mullw	2
 21670  013B7C  28F3               	incf	prodl,w,c
 21671  013B7E  0100               	movlb	0	; () banked
 21672  013B80  6FE6               	movwf	Port_CheckPairType@Pin2& (0+255),b
 21673                           
 21674                           ; BSR set to: 0
 21675                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 21676  013B82  C0E8  F0CA         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21677  013B86  C0E9  F0CB         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21678  013B8A  C0E4  F0CC         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21679  013B8E  C0E5  F0CD         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 21680  013B92  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 21681  013B96  0100               	movlb	0	; () banked
 21682  013B98  6FE7               	movwf	Port_CheckPairType@Output& (0+255),b
 21683  013B9A  0100               	movlb	0	; () banked
 21684  013B9C  51E7               	movf	Port_CheckPairType@Output& (0+255),w,b
 21685  013B9E  A4D8               	btfss	status,2,c
 21686  013BA0  D00C               	goto	l389
 21687                           
 21688                           ; BSR set to: 0
 21689                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 21690  013BA2  C0E8  F0CA         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21691  013BA6  C0E9  F0CB         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21692  013BAA  C0E4  F0CC         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21693  013BAE  C0E6  F0CD         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 21694  013BB2  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 21695  013BB6  0100               	movlb	0	; () banked
 21696  013BB8  6FE7               	movwf	Port_CheckPairType@Output& (0+255),b
 21697  013BBA                     l389:
 21698                           
 21699                           ; BSR set to: 0
 21700                           ;Port.c: 124: return Output;
 21701                           
 21702                           ; BSR set to: 0
 21703  013BBA  0100               	movlb	0	; () banked
 21704  013BBC  51E7               	movf	Port_CheckPairType@Output& (0+255),w,b
 21705  013BBE  0012               	return	
 21706  013BC0                     __end_of_Port_CheckPairType:
 21707                           	opt stack 0
 21708                           tosu	equ	0xFFF
 21709                           tosh	equ	0xFFE
 21710                           tosl	equ	0xFFD
 21711                           pclath	equ	0xFFA
 21712                           tblptru	equ	0xFF8
 21713                           tblptrh	equ	0xFF7
 21714                           tblptrl	equ	0xFF6
 21715                           tablat	equ	0xFF5
 21716                           prodh	equ	0xFF4
 21717                           prodl	equ	0xFF3
 21718                           intcon	equ	0xFF2
 21719                           postinc0	equ	0xFEE
 21720                           wreg	equ	0xFE8
 21721                           indf1	equ	0xFE7
 21722                           postdec1	equ	0xFE5
 21723                           fsr1h	equ	0xFE2
 21724                           fsr1l	equ	0xFE1
 21725                           indf2	equ	0xFDF
 21726                           postinc2	equ	0xFDE
 21727                           postdec2	equ	0xFDD
 21728                           plusw2	equ	0xFDB
 21729                           fsr2h	equ	0xFDA
 21730                           fsr2l	equ	0xFD9
 21731                           status	equ	0xFD8
 21732                           
 21733 ;; *************** function _PortProperty_Valid *****************
 21734 ;; Defined at:
 21735 ;;		line 220 in file "Library/Types.c"
 21736 ;; Parameters:    Size  Location     Type
 21737 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 21738 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21739 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21740 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21741 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21742 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 21743 ;;  pPin            1   18[BANK0 ] unsigned char 
 21744 ;; Auto vars:     Size  Location     Type
 21745 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 21746 ;;  Pair            1   37[BANK0 ] enum E6469
 21747 ;; Return value:  Size  Location     Type
 21748 ;;                  1    wreg      enum E6475
 21749 ;; Registers used:
 21750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21751 ;; Tracked objects:
 21752 ;;		On entry : 0/0
 21753 ;;		On exit  : 0/0
 21754 ;;		Unchanged: 0/0
 21755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21757 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21759 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;Total ram usage:       23 bytes
 21761 ;; Hardware stack levels used:    1
 21762 ;; Hardware stack levels required when called:   10
 21763 ;; This function calls:
 21764 ;;		_Word_GetPair
 21765 ;; This function is called by:
 21766 ;;		_Port_CheckPairType
 21767 ;;		_Port_SetPinType
 21768 ;; This function uses a non-reentrant model
 21769 ;;
 21770                           
 21771                           	psect	text124
 21772  013588                     __ptext124:
 21773                           	opt stack 0
 21774  013588                     _PortProperty_Valid:
 21775                           	opt stack 14
 21776                           
 21777                           ;Types.c: 222: ePinDrive Pair;
 21778                           ;Types.c: 223: const ePinError Errors[4][4] =
 21779                           ;Types.c: 224: {
 21780                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 21781                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 21782                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 21783                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 21784                           ;Types.c: 230: };
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;incstack = 0
 21788  013588  0EA7               	movlw	low PortProperty_Valid@F6830
 21789  01358A  6EF6               	movwf	tblptrl,c
 21790  01358C                     	if	1	;There is more than 1 active tblptr byte
 21791  01358C  0EFD               	movlw	high PortProperty_Valid@F6830
 21792  01358E  6EF7               	movwf	tblptrh,c
 21793  013590                     	endif
 21794  013590                     	if	1	;There are 3 active tblptr bytes
 21795  013590  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 21796  013592  6EF8               	movwf	tblptru,c
 21797  013594                     	endif
 21798  013594  EE20  F0D0         	lfsr	2,PortProperty_Valid@Errors
 21799  013598  0E0F               	movlw	15
 21800  01359A                     u6700:
 21801  01359A  0009               	tblrd		*+
 21802  01359C  CFF5 FFDE          	movff	tablat,postinc2
 21803  0135A0  06E8               	decf	wreg,f,c
 21804  0135A2  E2FB               	bc	u6700
 21805                           
 21806                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 21807  0135A4  C0CA  F0C7         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 21808  0135A8  C0CB  F0C8         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 21809  0135AC  C0CD  F0C9         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 21810  0135B0  EC1B  F0A2         	call	_Word_GetPair	;wreg free
 21811  0135B4  0100               	movlb	0	; () banked
 21812  0135B6  6FE0               	movwf	PortProperty_Valid@Pair& (0+255),b
 21813                           
 21814                           ; BSR set to: 0
 21815                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 21816  0135B8  0E04               	movlw	4
 21817  0135BA  0100               	movlb	0	; () banked
 21818  0135BC  61CC               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 21819  0135BE  D020               	goto	l819
 21820                           
 21821                           ; BSR set to: 0
 21822  0135C0  0E04               	movlw	4
 21823  0135C2  0100               	movlb	0	; () banked
 21824  0135C4  61E0               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 21825  0135C6  D01C               	goto	l819
 21826                           
 21827                           ; BSR set to: 0
 21828                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 21829  0135C8  0100               	movlb	0	; () banked
 21830  0135CA  51CC               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 21831  0135CC  0D04               	mullw	4
 21832  0135CE  0ED0               	movlw	low PortProperty_Valid@Errors
 21833  0135D0  0100               	movlb	0	; () banked
 21834  0135D2  6FCE               	movwf	??_PortProperty_Valid& (0+255),b
 21835  0135D4  0E00               	movlw	high PortProperty_Valid@Errors
 21836  0135D6  0100               	movlb	0	; () banked
 21837  0135D8  6FCF               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 21838  0135DA  50F3               	movf	prodl,w,c
 21839  0135DC  0100               	movlb	0	; () banked
 21840  0135DE  27CE               	addwf	??_PortProperty_Valid& (0+255),f,b
 21841  0135E0  50F4               	movf	prodh,w,c
 21842  0135E2  0100               	movlb	0	; () banked
 21843  0135E4  23CF               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 21844  0135E6  0100               	movlb	0	; () banked
 21845  0135E8  51E0               	movf	PortProperty_Valid@Pair& (0+255),w,b
 21846  0135EA  0D01               	mullw	1
 21847  0135EC  50F3               	movf	prodl,w,c
 21848  0135EE  0100               	movlb	0	; () banked
 21849  0135F0  25CE               	addwf	??_PortProperty_Valid& (0+255),w,b
 21850  0135F2  6ED9               	movwf	fsr2l,c
 21851  0135F4  50F4               	movf	prodh,w,c
 21852  0135F6  0100               	movlb	0	; () banked
 21853  0135F8  21CF               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 21854  0135FA  6EDA               	movwf	fsr2h,c
 21855  0135FC  50DF               	movf	indf2,w,c
 21856                           
 21857                           ; BSR set to: 0
 21858  0135FE  0012               	return	
 21859  013600                     l819:
 21860                           
 21861                           ; BSR set to: 0
 21862                           ;Types.c: 237: return ePinErrorState;
 21863                           
 21864                           ; BSR set to: 0
 21865  013600  0E05               	movlw	5
 21866  013602  0012               	return	
 21867  013604                     __end_of_PortProperty_Valid:
 21868                           	opt stack 0
 21869                           tosu	equ	0xFFF
 21870                           tosh	equ	0xFFE
 21871                           tosl	equ	0xFFD
 21872                           pclath	equ	0xFFA
 21873                           tblptru	equ	0xFF8
 21874                           tblptrh	equ	0xFF7
 21875                           tblptrl	equ	0xFF6
 21876                           tablat	equ	0xFF5
 21877                           prodh	equ	0xFF4
 21878                           prodl	equ	0xFF3
 21879                           intcon	equ	0xFF2
 21880                           postinc0	equ	0xFEE
 21881                           wreg	equ	0xFE8
 21882                           indf1	equ	0xFE7
 21883                           postdec1	equ	0xFE5
 21884                           fsr1h	equ	0xFE2
 21885                           fsr1l	equ	0xFE1
 21886                           indf2	equ	0xFDF
 21887                           postinc2	equ	0xFDE
 21888                           postdec2	equ	0xFDD
 21889                           plusw2	equ	0xFDB
 21890                           fsr2h	equ	0xFDA
 21891                           fsr2l	equ	0xFD9
 21892                           status	equ	0xFD8
 21893                           
 21894 ;; *************** function _Word_GetPair *****************
 21895 ;; Defined at:
 21896 ;;		line 156 in file "Library/Types.c"
 21897 ;; Parameters:    Size  Location     Type
 21898 ;;  pInput          2   12[BANK0 ] PTR struct Word
 21899 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21900 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21901 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21902 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21903 ;;  pPair           1   14[BANK0 ] unsigned char 
 21904 ;; Auto vars:     Size  Location     Type
 21905 ;;		None
 21906 ;; Return value:  Size  Location     Type
 21907 ;;                  1    wreg      unsigned char 
 21908 ;; Registers used:
 21909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21910 ;; Tracked objects:
 21911 ;;		On entry : 0/0
 21912 ;;		On exit  : 0/0
 21913 ;;		Unchanged: 0/0
 21914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21915 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21918 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21919 ;;Total ram usage:        3 bytes
 21920 ;; Hardware stack levels used:    1
 21921 ;; Hardware stack levels required when called:    9
 21922 ;; This function calls:
 21923 ;;		_Byte_GetPair
 21924 ;; This function is called by:
 21925 ;;		_Port_Init
 21926 ;;		_Port_SetPin
 21927 ;;		_Port_Set
 21928 ;;		_PortProperty_Valid
 21929 ;;		_Port_SetPair
 21930 ;;		_Port_SetQuad
 21931 ;; This function uses a non-reentrant model
 21932 ;;
 21933                           
 21934                           	psect	text125
 21935  014436                     __ptext125:
 21936                           	opt stack 0
 21937  014436                     _Word_GetPair:
 21938                           	opt stack 17
 21939                           
 21940                           ;Types.c: 158: if (pPair >= 4)
 21941                           
 21942                           ; BSR set to: 0
 21943                           ;incstack = 0
 21944  014436  0E03               	movlw	3
 21945  014438  0100               	movlb	0	; () banked
 21946  01443A  65C9               	cpfsgt	Word_GetPair@pPair& (0+255),b
 21947  01443C  D012               	goto	l781
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 21951  01443E  0E01               	movlw	1
 21952  014440  0100               	movlb	0	; () banked
 21953  014442  25C7               	addwf	Word_GetPair@pInput& (0+255),w,b
 21954  014444  0100               	movlb	0	; () banked
 21955  014446  6FC4               	movwf	Byte_GetPair@pInput& (0+255),b
 21956  014448  0E00               	movlw	0
 21957  01444A  0100               	movlb	0	; () banked
 21958  01444C  21C8               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 21959  01444E  0100               	movlb	0	; () banked
 21960  014450  6FC5               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 21961  014452  0100               	movlb	0	; () banked
 21962  014454  51C9               	movf	Word_GetPair@pPair& (0+255),w,b
 21963  014456  0FFC               	addlw	252
 21964  014458  0100               	movlb	0	; () banked
 21965  01445A  6FC6               	movwf	Byte_GetPair@pPair& (0+255),b
 21966  01445C  EC10  F0A4         	call	_Byte_GetPair	;wreg free
 21967  014460  0012               	return	
 21968  014462                     l781:
 21969                           
 21970                           ;Types.c: 160: else
 21971                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 21972  014462  C0C7  F0C4         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 21973  014466  C0C8  F0C5         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 21974  01446A  C0C9  F0C6         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 21975  01446E  EC10  F0A4         	call	_Byte_GetPair	;wreg free
 21976  014472  0012               	return	
 21977  014474                     __end_of_Word_GetPair:
 21978                           	opt stack 0
 21979                           tosu	equ	0xFFF
 21980                           tosh	equ	0xFFE
 21981                           tosl	equ	0xFFD
 21982                           pclath	equ	0xFFA
 21983                           tblptru	equ	0xFF8
 21984                           tblptrh	equ	0xFF7
 21985                           tblptrl	equ	0xFF6
 21986                           tablat	equ	0xFF5
 21987                           prodh	equ	0xFF4
 21988                           prodl	equ	0xFF3
 21989                           intcon	equ	0xFF2
 21990                           postinc0	equ	0xFEE
 21991                           wreg	equ	0xFE8
 21992                           indf1	equ	0xFE7
 21993                           postdec1	equ	0xFE5
 21994                           fsr1h	equ	0xFE2
 21995                           fsr1l	equ	0xFE1
 21996                           indf2	equ	0xFDF
 21997                           postinc2	equ	0xFDE
 21998                           postdec2	equ	0xFDD
 21999                           plusw2	equ	0xFDB
 22000                           fsr2h	equ	0xFDA
 22001                           fsr2l	equ	0xFD9
 22002                           status	equ	0xFD8
 22003                           
 22004 ;; *************** function _Byte_GetPair *****************
 22005 ;; Defined at:
 22006 ;;		line 87 in file "Library/Types.c"
 22007 ;; Parameters:    Size  Location     Type
 22008 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 22009 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22010 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22011 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22012 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22013 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22014 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22015 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22016 ;;		 -> NULL(0), 
 22017 ;;  pPair           1   11[BANK0 ] unsigned char 
 22018 ;; Auto vars:     Size  Location     Type
 22019 ;;		None
 22020 ;; Return value:  Size  Location     Type
 22021 ;;                  1    wreg      unsigned char 
 22022 ;; Registers used:
 22023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22024 ;; Tracked objects:
 22025 ;;		On entry : 0/0
 22026 ;;		On exit  : 0/0
 22027 ;;		Unchanged: 0/0
 22028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22032 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22033 ;;Total ram usage:        3 bytes
 22034 ;; Hardware stack levels used:    1
 22035 ;; Hardware stack levels required when called:    8
 22036 ;; This function calls:
 22037 ;;		_Byte_GetZone
 22038 ;; This function is called by:
 22039 ;;		_Word_GetPair
 22040 ;; This function uses a non-reentrant model
 22041 ;;
 22042                           
 22043                           	psect	text126
 22044  014820                     __ptext126:
 22045                           	opt stack 0
 22046  014820                     _Byte_GetPair:
 22047                           	opt stack 17
 22048                           
 22049                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22050                           
 22051                           ;incstack = 0
 22052  014820  C0C4  F0BB         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 22053  014824  C0C5  F0BC         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 22054  014828  0E04               	movlw	4
 22055  01482A  0100               	movlb	0	; () banked
 22056  01482C  6FBD               	movwf	Byte_GetZone@pMax& (0+255),b
 22057  01482E  C0C6  F0BE         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 22058  014832  0E02               	movlw	2
 22059  014834  0100               	movlb	0	; () banked
 22060  014836  6FBF               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 22061  014838  EC0F  F099         	call	_Byte_GetZone	;wreg free
 22062  01483C  0012               	return	
 22063  01483E                     __end_of_Byte_GetPair:
 22064                           	opt stack 0
 22065                           tosu	equ	0xFFF
 22066                           tosh	equ	0xFFE
 22067                           tosl	equ	0xFFD
 22068                           pclath	equ	0xFFA
 22069                           tblptru	equ	0xFF8
 22070                           tblptrh	equ	0xFF7
 22071                           tblptrl	equ	0xFF6
 22072                           tablat	equ	0xFF5
 22073                           prodh	equ	0xFF4
 22074                           prodl	equ	0xFF3
 22075                           intcon	equ	0xFF2
 22076                           postinc0	equ	0xFEE
 22077                           wreg	equ	0xFE8
 22078                           indf1	equ	0xFE7
 22079                           postdec1	equ	0xFE5
 22080                           fsr1h	equ	0xFE2
 22081                           fsr1l	equ	0xFE1
 22082                           indf2	equ	0xFDF
 22083                           postinc2	equ	0xFDE
 22084                           postdec2	equ	0xFDD
 22085                           plusw2	equ	0xFDB
 22086                           fsr2h	equ	0xFDA
 22087                           fsr2l	equ	0xFD9
 22088                           status	equ	0xFD8
 22089                           
 22090 ;; *************** function _Byte_GetZone *****************
 22091 ;; Defined at:
 22092 ;;		line 64 in file "Library/Types.c"
 22093 ;; Parameters:    Size  Location     Type
 22094 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22095 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22096 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22097 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22098 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22099 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22100 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22101 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22102 ;;		 -> NULL(0), 
 22103 ;;  pMax            1    2[BANK0 ] unsigned char 
 22104 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22105 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22106 ;; Auto vars:     Size  Location     Type
 22107 ;;  Output          1    8[BANK0 ] unsigned char 
 22108 ;;  Offset          1    7[BANK0 ] unsigned char 
 22109 ;;  MASK            1    6[BANK0 ] unsigned char 
 22110 ;; Return value:  Size  Location     Type
 22111 ;;                  1    wreg      unsigned char 
 22112 ;; Registers used:
 22113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22114 ;; Tracked objects:
 22115 ;;		On entry : 0/0
 22116 ;;		On exit  : 0/0
 22117 ;;		Unchanged: 0/0
 22118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22119 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22122 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22123 ;;Total ram usage:        9 bytes
 22124 ;; Hardware stack levels used:    1
 22125 ;; Hardware stack levels required when called:    7
 22126 ;; This function calls:
 22127 ;;		Nothing
 22128 ;; This function is called by:
 22129 ;;		_Byte_GetPair
 22130 ;;		_Byte_GetTriple
 22131 ;;		_Byte_GetQuad
 22132 ;; This function uses a non-reentrant model
 22133 ;;
 22134                           
 22135                           	psect	text127
 22136  01321E                     __ptext127:
 22137                           	opt stack 0
 22138  01321E                     _Byte_GetZone:
 22139                           	opt stack 17
 22140                           
 22141                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22142                           
 22143                           ;incstack = 0
 22144  01321E  C0BB  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 22145  013222  C0BC  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 22146  013226  0E00               	movlw	low (__mediumconst shr (0+16))
 22147  013228  6EF8               	movwf	tblptru,c
 22148  01322A  0E0F               	movlw	(high __ramtop+-1)
 22149  01322C  64F7               	cpfsgt	tblptrh,c
 22150  01322E  D003               	bra	u6667
 22151  013230  0008               	tblrd		*
 22152  013232  50F5               	movf	tablat,w,c
 22153  013234  D005               	bra	u6660
 22154  013236                     u6667:
 22155  013236  CFF6 FFE9          	movff	tblptrl,fsr0l
 22156  01323A  CFF7 FFEA          	movff	tblptrh,fsr0h
 22157  01323E  50EF               	movf	indf0,w,c
 22158  013240                     u6660:
 22159  013240  0100               	movlb	0	; () banked
 22160  013242  6FC3               	movwf	Byte_GetZone@Output& (0+255),b
 22161                           
 22162                           ; BSR set to: 0
 22163                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22164  013244  0100               	movlb	0	; () banked
 22165  013246  51BF               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22166  013248  0D01               	mullw	1
 22167  01324A  0EC1               	movlw	low _MASKS
 22168  01324C  24F3               	addwf	prodl,w,c
 22169  01324E  6EF6               	movwf	tblptrl,c
 22170  013250  0EFD               	movlw	high _MASKS
 22171  013252  20F4               	addwfc	prodh,w,c
 22172  013254  6EF7               	movwf	tblptrh,c
 22173  013256                     	if	1	;There are 3 active tblptr bytes
 22174  013256  6AF8               	clrf	tblptru,c
 22175  013258  0E00               	movlw	low (__mediumconst shr (0+16))
 22176  01325A  22F8               	addwfc	tblptru,f,c
 22177  01325C                     	endif
 22178  01325C  0008               	tblrd		*
 22179  01325E  CFF5 F0C1          	movff	tablat,Byte_GetZone@MASK
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;Types.c: 68: UINT8 Offset = 0;
 22183  013262  0E00               	movlw	0
 22184  013264  0100               	movlb	0	; () banked
 22185  013266  6FC2               	movwf	Byte_GetZone@Offset& (0+255),b
 22186                           
 22187                           ;Types.c: 70: while (pChunk >= pMax)
 22188  013268  D006               	goto	l732
 22189  01326A                     
 22190                           ; BSR set to: 0
 22191                           ;Types.c: 71: {
 22192                           ;Types.c: 72: pChunk -= pMax;
 22193                           
 22194                           ; BSR set to: 0
 22195  01326A  0100               	movlb	0	; () banked
 22196  01326C  51BD               	movf	Byte_GetZone@pMax& (0+255),w,b
 22197  01326E  0100               	movlb	0	; () banked
 22198  013270  5FBE               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22199                           
 22200                           ; BSR set to: 0
 22201                           ;Types.c: 73: Offset += 1;
 22202  013272  0100               	movlb	0	; () banked
 22203  013274  2BC2               	incf	Byte_GetZone@Offset& (0+255),f,b
 22204  013276                     l732:
 22205                           
 22206                           ; BSR set to: 0
 22207                           
 22208                           ; BSR set to: 0
 22209  013276  0100               	movlb	0	; () banked
 22210  013278  51BD               	movf	Byte_GetZone@pMax& (0+255),w,b
 22211  01327A  0100               	movlb	0	; () banked
 22212  01327C  5DBE               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22213  01327E  B0D8               	btfsc	status,0,c
 22214  013280  D7F4               	goto	l733
 22215                           
 22216                           ; BSR set to: 0
 22217                           ;Types.c: 74: }
 22218                           ;Types.c: 75: pChunk *= pChunkSize;
 22219                           
 22220                           ; BSR set to: 0
 22221  013282  0100               	movlb	0	; () banked
 22222  013284  51BF               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22223  013286  0100               	movlb	0	; () banked
 22224  013288  03BE               	mulwf	Byte_GetZone@pChunk& (0+255),b
 22225  01328A  50F3               	movf	prodl,w,c
 22226  01328C  6FBE               	movwf	Byte_GetZone@pChunk& (0+255),b
 22227                           
 22228                           ; BSR set to: 0
 22229                           ;Types.c: 76: pChunk += Offset;
 22230  01328E  0100               	movlb	0	; () banked
 22231  013290  51C2               	movf	Byte_GetZone@Offset& (0+255),w,b
 22232  013292  0100               	movlb	0	; () banked
 22233  013294  27BE               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22234                           
 22235                           ; BSR set to: 0
 22236                           ;Types.c: 78: Output >>= pChunk;
 22237  013296  0100               	movlb	0	; () banked
 22238  013298  29BE               	incf	Byte_GetZone@pChunk& (0+255),w,b
 22239  01329A  0100               	movlb	0	; () banked
 22240  01329C  6FC0               	movwf	??_Byte_GetZone& (0+255),b
 22241  01329E  D003               	goto	u6680
 22242  0132A0                     u6685:
 22243  0132A0  0100               	movlb	0	; () banked
 22244  0132A2  90D8               	bcf	status,0,c
 22245  0132A4  33C3               	rrcf	Byte_GetZone@Output& (0+255),f,b
 22246  0132A6                     u6680:
 22247  0132A6  0100               	movlb	0	; () banked
 22248  0132A8  2FC0               	decfsz	??_Byte_GetZone& (0+255),f,b
 22249  0132AA  D7FA               	goto	u6685
 22250                           
 22251                           ;Types.c: 79: Output &= MASK;
 22252  0132AC  0100               	movlb	0	; () banked
 22253  0132AE  51C1               	movf	Byte_GetZone@MASK& (0+255),w,b
 22254  0132B0  0100               	movlb	0	; () banked
 22255  0132B2  17C3               	andwf	Byte_GetZone@Output& (0+255),f,b
 22256                           
 22257                           ; BSR set to: 0
 22258                           ;Types.c: 80: return Output;
 22259  0132B4  0100               	movlb	0	; () banked
 22260  0132B6  51C3               	movf	Byte_GetZone@Output& (0+255),w,b
 22261  0132B8  0012               	return	
 22262  0132BA                     __end_of_Byte_GetZone:
 22263                           	opt stack 0
 22264                           tosu	equ	0xFFF
 22265                           tosh	equ	0xFFE
 22266                           tosl	equ	0xFFD
 22267                           pclath	equ	0xFFA
 22268                           tblptru	equ	0xFF8
 22269                           tblptrh	equ	0xFF7
 22270                           tblptrl	equ	0xFF6
 22271                           tablat	equ	0xFF5
 22272                           prodh	equ	0xFF4
 22273                           prodl	equ	0xFF3
 22274                           intcon	equ	0xFF2
 22275                           indf0	equ	0xFEF
 22276                           postinc0	equ	0xFEE
 22277                           fsr0h	equ	0xFEA
 22278                           fsr0l	equ	0xFE9
 22279                           wreg	equ	0xFE8
 22280                           indf1	equ	0xFE7
 22281                           postdec1	equ	0xFE5
 22282                           fsr1h	equ	0xFE2
 22283                           fsr1l	equ	0xFE1
 22284                           indf2	equ	0xFDF
 22285                           postinc2	equ	0xFDE
 22286                           postdec2	equ	0xFDD
 22287                           plusw2	equ	0xFDB
 22288                           fsr2h	equ	0xFDA
 22289                           fsr2l	equ	0xFD9
 22290                           status	equ	0xFD8
 22291                           
 22292 ;; *************** function _Byte_SetQuad *****************
 22293 ;; Defined at:
 22294 ;;		line 101 in file "Library/Types.c"
 22295 ;; Parameters:    Size  Location     Type
 22296 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22297 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22298 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22299 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22300 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22301 ;;		 -> NULL(0), 
 22302 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22303 ;;  pValue          1   14[BANK0 ] unsigned char 
 22304 ;; Auto vars:     Size  Location     Type
 22305 ;;		None
 22306 ;; Return value:  Size  Location     Type
 22307 ;;                  1    wreg      void 
 22308 ;; Registers used:
 22309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22310 ;; Tracked objects:
 22311 ;;		On entry : 0/0
 22312 ;;		On exit  : 0/0
 22313 ;;		Unchanged: 0/0
 22314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22315 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22318 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22319 ;;Total ram usage:        4 bytes
 22320 ;; Hardware stack levels used:    1
 22321 ;; Hardware stack levels required when called:    8
 22322 ;; This function calls:
 22323 ;;		_Byte_SetZone
 22324 ;; This function is called by:
 22325 ;;		_Port_SetQuadType
 22326 ;;		_SPI_Init
 22327 ;;		_SPI_MinSpeed
 22328 ;;		_SPI_MaxSpeed
 22329 ;;		_Port_SetQuad
 22330 ;;		_Word_SetQuad
 22331 ;;		_I2C_Init
 22332 ;; This function uses a non-reentrant model
 22333 ;;
 22334                           
 22335                           	psect	text128
 22336  01470C                     __ptext128:
 22337                           	opt stack 0
 22338  01470C                     _Byte_SetQuad:
 22339                           	opt stack 19
 22340                           
 22341                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;incstack = 0
 22345  01470C  C0C6  F0BB         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22346  014710  C0C7  F0BC         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22347  014714  0E02               	movlw	2
 22348  014716  0100               	movlb	0	; () banked
 22349  014718  6FBD               	movwf	Byte_SetZone@pMax& (0+255),b
 22350  01471A  C0C8  F0BE         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22351  01471E  0E04               	movlw	4
 22352  014720  0100               	movlb	0	; () banked
 22353  014722  6FBF               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22354  014724  C0C9  F0C0         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22355  014728  ECBF  F095         	call	_Byte_SetZone	;wreg free
 22356  01472C  0012               	return		;funcret
 22357  01472E                     __end_of_Byte_SetQuad:
 22358                           	opt stack 0
 22359                           tosu	equ	0xFFF
 22360                           tosh	equ	0xFFE
 22361                           tosl	equ	0xFFD
 22362                           pclath	equ	0xFFA
 22363                           tblptru	equ	0xFF8
 22364                           tblptrh	equ	0xFF7
 22365                           tblptrl	equ	0xFF6
 22366                           tablat	equ	0xFF5
 22367                           prodh	equ	0xFF4
 22368                           prodl	equ	0xFF3
 22369                           intcon	equ	0xFF2
 22370                           indf0	equ	0xFEF
 22371                           postinc0	equ	0xFEE
 22372                           fsr0h	equ	0xFEA
 22373                           fsr0l	equ	0xFE9
 22374                           wreg	equ	0xFE8
 22375                           indf1	equ	0xFE7
 22376                           postdec1	equ	0xFE5
 22377                           fsr1h	equ	0xFE2
 22378                           fsr1l	equ	0xFE1
 22379                           indf2	equ	0xFDF
 22380                           postinc2	equ	0xFDE
 22381                           postdec2	equ	0xFDD
 22382                           plusw2	equ	0xFDB
 22383                           fsr2h	equ	0xFDA
 22384                           fsr2l	equ	0xFD9
 22385                           status	equ	0xFD8
 22386                           
 22387 ;; *************** function _Byte_SetZone *****************
 22388 ;; Defined at:
 22389 ;;		line 47 in file "Library/Types.c"
 22390 ;; Parameters:    Size  Location     Type
 22391 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22392 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22393 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22394 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22395 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22396 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22397 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22398 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22399 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22400 ;;  pMax            1    2[BANK0 ] unsigned char 
 22401 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22402 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22403 ;;  pValue          1    5[BANK0 ] unsigned char 
 22404 ;; Auto vars:     Size  Location     Type
 22405 ;;  MASK            1   10[BANK0 ] unsigned char 
 22406 ;;  Offset          1    9[BANK0 ] unsigned char 
 22407 ;; Return value:  Size  Location     Type
 22408 ;;                  1    wreg      void 
 22409 ;; Registers used:
 22410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22411 ;; Tracked objects:
 22412 ;;		On entry : 0/0
 22413 ;;		On exit  : 0/0
 22414 ;;		Unchanged: 0/0
 22415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22416 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22418 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22419 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22420 ;;Total ram usage:       11 bytes
 22421 ;; Hardware stack levels used:    1
 22422 ;; Hardware stack levels required when called:    7
 22423 ;; This function calls:
 22424 ;;		Nothing
 22425 ;; This function is called by:
 22426 ;;		_Byte_SetPair
 22427 ;;		_Byte_SetQuad
 22428 ;;		_Byte_SetTriple
 22429 ;; This function uses a non-reentrant model
 22430 ;;
 22431                           
 22432                           	psect	text129
 22433  012B7E                     __ptext129:
 22434                           	opt stack 0
 22435  012B7E                     _Byte_SetZone:
 22436                           	opt stack 18
 22437                           
 22438                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22439                           
 22440                           ;incstack = 0
 22441  012B7E  0100               	movlb	0	; () banked
 22442  012B80  51BF               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22443  012B82  0D01               	mullw	1
 22444  012B84  0EC1               	movlw	low _MASKS
 22445  012B86  24F3               	addwf	prodl,w,c
 22446  012B88  6EF6               	movwf	tblptrl,c
 22447  012B8A  0EFD               	movlw	high _MASKS
 22448  012B8C  20F4               	addwfc	prodh,w,c
 22449  012B8E  6EF7               	movwf	tblptrh,c
 22450  012B90                     	if	1	;There are 3 active tblptr bytes
 22451  012B90  6AF8               	clrf	tblptru,c
 22452  012B92  0E00               	movlw	low (__mediumconst shr (0+16))
 22453  012B94  22F8               	addwfc	tblptru,f,c
 22454  012B96                     	endif
 22455  012B96  0008               	tblrd		*
 22456  012B98  CFF5 F0C5          	movff	tablat,Byte_SetZone@MASK
 22457                           
 22458                           ; BSR set to: 0
 22459                           ;Types.c: 50: UINT8 Offset = 0;
 22460  012B9C  0E00               	movlw	0
 22461  012B9E  0100               	movlb	0	; () banked
 22462  012BA0  6FC4               	movwf	Byte_SetZone@Offset& (0+255),b
 22463                           
 22464                           ;Types.c: 52: while (pChunk >= pMax)
 22465  012BA2  D006               	goto	l726
 22466  012BA4                     
 22467                           ; BSR set to: 0
 22468                           ;Types.c: 53: {
 22469                           ;Types.c: 54: pChunk -= pMax;
 22470                           
 22471                           ; BSR set to: 0
 22472  012BA4  0100               	movlb	0	; () banked
 22473  012BA6  51BD               	movf	Byte_SetZone@pMax& (0+255),w,b
 22474  012BA8  0100               	movlb	0	; () banked
 22475  012BAA  5FBE               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 22476                           
 22477                           ; BSR set to: 0
 22478                           ;Types.c: 55: Offset += 1;
 22479  012BAC  0100               	movlb	0	; () banked
 22480  012BAE  2BC4               	incf	Byte_SetZone@Offset& (0+255),f,b
 22481  012BB0                     l726:
 22482                           
 22483                           ; BSR set to: 0
 22484                           
 22485                           ; BSR set to: 0
 22486  012BB0  0100               	movlb	0	; () banked
 22487  012BB2  51BD               	movf	Byte_SetZone@pMax& (0+255),w,b
 22488  012BB4  0100               	movlb	0	; () banked
 22489  012BB6  5DBE               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 22490  012BB8  B0D8               	btfsc	status,0,c
 22491  012BBA  D7F4               	goto	l727
 22492                           
 22493                           ; BSR set to: 0
 22494                           ;Types.c: 56: }
 22495                           ;Types.c: 57: pChunk *= pChunkSize;
 22496                           
 22497                           ; BSR set to: 0
 22498  012BBC  0100               	movlb	0	; () banked
 22499  012BBE  51BF               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22500  012BC0  0100               	movlb	0	; () banked
 22501  012BC2  03BE               	mulwf	Byte_SetZone@pChunk& (0+255),b
 22502  012BC4  50F3               	movf	prodl,w,c
 22503  012BC6  6FBE               	movwf	Byte_SetZone@pChunk& (0+255),b
 22504                           
 22505                           ; BSR set to: 0
 22506                           ;Types.c: 58: pChunk += Offset;
 22507  012BC8  0100               	movlb	0	; () banked
 22508  012BCA  51C4               	movf	Byte_SetZone@Offset& (0+255),w,b
 22509  012BCC  0100               	movlb	0	; () banked
 22510  012BCE  27BE               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 22511                           
 22512                           ; BSR set to: 0
 22513                           ;Types.c: 60: pValue &= MASK;
 22514  012BD0  0100               	movlb	0	; () banked
 22515  012BD2  51C5               	movf	Byte_SetZone@MASK& (0+255),w,b
 22516  012BD4  0100               	movlb	0	; () banked
 22517  012BD6  17C0               	andwf	Byte_SetZone@pValue& (0+255),f,b
 22518                           
 22519                           ; BSR set to: 0
 22520                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 22521  012BD8  C0BE  F0C1         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22522  012BDC  C0C5  F0C2         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 22523  012BE0  0100               	movlb	0	; () banked
 22524  012BE2  2BC1               	incf	??_Byte_SetZone& (0+255),f,b
 22525  012BE4  D003               	goto	u6764
 22526  012BE6                     u6765:
 22527  012BE6  0100               	movlb	0	; () banked
 22528  012BE8  90D8               	bcf	status,0,c
 22529  012BEA  37C2               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22530  012BEC                     u6764:
 22531  012BEC  0100               	movlb	0	; () banked
 22532  012BEE  2FC1               	decfsz	??_Byte_SetZone& (0+255),f,b
 22533  012BF0  D7FA               	goto	u6765
 22534  012BF2  0100               	movlb	0	; () banked
 22535  012BF4  51C2               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22536  012BF6  0AFF               	xorlw	255
 22537  012BF8  0100               	movlb	0	; () banked
 22538  012BFA  6FC3               	movwf	(??_Byte_SetZone+2)& (0+255),b
 22539  012BFC  C0BB  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22540  012C00  C0BC  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22541  012C04  0100               	movlb	0	; () banked
 22542  012C06  51C3               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 22543  012C08  16DF               	andwf	indf2,f,c
 22544                           
 22545                           ; BSR set to: 0
 22546                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 22547  012C0A  C0BE  F0C1         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22548  012C0E  C0C0  F0C2         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 22549  012C12  0100               	movlb	0	; () banked
 22550  012C14  2BC1               	incf	??_Byte_SetZone& (0+255),f,b
 22551  012C16  D003               	goto	u6774
 22552  012C18                     u6775:
 22553  012C18  0100               	movlb	0	; () banked
 22554  012C1A  90D8               	bcf	status,0,c
 22555  012C1C  37C2               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22556  012C1E                     u6774:
 22557  012C1E  0100               	movlb	0	; () banked
 22558  012C20  2FC1               	decfsz	??_Byte_SetZone& (0+255),f,b
 22559  012C22  D7FA               	goto	u6775
 22560  012C24  C0BB  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22561  012C28  C0BC  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22562  012C2C  0100               	movlb	0	; () banked
 22563  012C2E  51C2               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22564  012C30  12DF               	iorwf	indf2,f,c
 22565                           
 22566                           ; BSR set to: 0
 22567  012C32  0012               	return		;funcret
 22568  012C34                     __end_of_Byte_SetZone:
 22569                           	opt stack 0
 22570                           tosu	equ	0xFFF
 22571                           tosh	equ	0xFFE
 22572                           tosl	equ	0xFFD
 22573                           pclath	equ	0xFFA
 22574                           tblptru	equ	0xFF8
 22575                           tblptrh	equ	0xFF7
 22576                           tblptrl	equ	0xFF6
 22577                           tablat	equ	0xFF5
 22578                           prodh	equ	0xFF4
 22579                           prodl	equ	0xFF3
 22580                           intcon	equ	0xFF2
 22581                           indf0	equ	0xFEF
 22582                           postinc0	equ	0xFEE
 22583                           fsr0h	equ	0xFEA
 22584                           fsr0l	equ	0xFE9
 22585                           wreg	equ	0xFE8
 22586                           indf1	equ	0xFE7
 22587                           postdec1	equ	0xFE5
 22588                           fsr1h	equ	0xFE2
 22589                           fsr1l	equ	0xFE1
 22590                           indf2	equ	0xFDF
 22591                           postinc2	equ	0xFDE
 22592                           postdec2	equ	0xFDD
 22593                           plusw2	equ	0xFDB
 22594                           fsr2h	equ	0xFDA
 22595                           fsr2l	equ	0xFD9
 22596                           status	equ	0xFD8
 22597                           
 22598 ;; *************** function _Console_Init *****************
 22599 ;; Defined at:
 22600 ;;		line 157 in file "Library/Console.c"
 22601 ;; Parameters:    Size  Location     Type
 22602 ;;		None
 22603 ;; Auto vars:     Size  Location     Type
 22604 ;;  y               1    3[BANK0 ] unsigned char 
 22605 ;;  x               1    2[BANK0 ] unsigned char 
 22606 ;; Return value:  Size  Location     Type
 22607 ;;                  1    wreg      void 
 22608 ;; Registers used:
 22609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22610 ;; Tracked objects:
 22611 ;;		On entry : 0/0
 22612 ;;		On exit  : 0/0
 22613 ;;		Unchanged: 0/0
 22614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22619 ;;Total ram usage:        4 bytes
 22620 ;; Hardware stack levels used:    1
 22621 ;; Hardware stack levels required when called:    7
 22622 ;; This function calls:
 22623 ;;		Nothing
 22624 ;; This function is called by:
 22625 ;;		_init
 22626 ;; This function uses a non-reentrant model
 22627 ;;
 22628                           
 22629                           	psect	text130
 22630  0134FE                     __ptext130:
 22631                           	opt stack 0
 22632  0134FE                     _Console_Init:
 22633                           	opt stack 22
 22634                           
 22635                           ;Console.c: 160: lBufferX = 0;
 22636                           
 22637                           ; BSR set to: 0
 22638                           ;incstack = 0
 22639  0134FE  0E00               	movlw	0
 22640  013500  0100               	movlb	0	; () banked
 22641  013502  6F93               	movwf	_lBufferX& (0+255),b
 22642                           
 22643                           ;Console.c: 161: lBufferY = 0;
 22644  013504  0E00               	movlw	0
 22645  013506  0100               	movlb	0	; () banked
 22646  013508  6F92               	movwf	_lBufferY& (0+255),b
 22647                           
 22648                           ;Console.c: 163: UINT8 x, y;
 22649                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22650  01350A  0E00               	movlw	0
 22651  01350C  0100               	movlb	0	; () banked
 22652  01350E  6FBD               	movwf	Console_Init@x& (0+255),b
 22653  013510                     l12262:
 22654                           
 22655                           ; BSR set to: 0
 22656  013510  0E13               	movlw	19
 22657  013512  0100               	movlb	0	; () banked
 22658  013514  65BD               	cpfsgt	Console_Init@x& (0+255),b
 22659  013516  D001               	goto	l976
 22660  013518  0012               	return	
 22661  01351A                     l976:
 22662                           
 22663                           ; BSR set to: 0
 22664                           ;Console.c: 165: {
 22665                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22666                           
 22667                           ; BSR set to: 0
 22668  01351A  0E00               	movlw	0
 22669  01351C  0100               	movlb	0	; () banked
 22670  01351E  6FBE               	movwf	Console_Init@y& (0+255),b
 22671  013520                     l12268:
 22672                           
 22673                           ; BSR set to: 0
 22674  013520  0E0E               	movlw	14
 22675  013522  0100               	movlb	0	; () banked
 22676  013524  65BE               	cpfsgt	Console_Init@y& (0+255),b
 22677  013526  D001               	goto	l978
 22678  013528  D02C               	goto	u8160
 22679  01352A                     l978:
 22680                           
 22681                           ; BSR set to: 0
 22682                           ;Console.c: 167: {
 22683                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22684                           
 22685                           ; BSR set to: 0
 22686  01352A  0100               	movlb	0	; () banked
 22687  01352C  51BE               	movf	Console_Init@y& (0+255),w,b
 22688  01352E  0D14               	mullw	20
 22689  013530  0EAA               	movlw	low _lBuffer
 22690  013532  0100               	movlb	0	; () banked
 22691  013534  6FBB               	movwf	??_Console_Init& (0+255),b
 22692  013536  0E04               	movlw	high _lBuffer
 22693  013538  0100               	movlb	0	; () banked
 22694  01353A  6FBC               	movwf	(??_Console_Init+1)& (0+255),b
 22695  01353C  50F3               	movf	prodl,w,c
 22696  01353E  0100               	movlb	0	; () banked
 22697  013540  27BB               	addwf	??_Console_Init& (0+255),f,b
 22698  013542  50F4               	movf	prodh,w,c
 22699  013544  0100               	movlb	0	; () banked
 22700  013546  23BC               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22701  013548  0100               	movlb	0	; () banked
 22702  01354A  51BD               	movf	Console_Init@x& (0+255),w,b
 22703  01354C  0D01               	mullw	1
 22704  01354E  50F3               	movf	prodl,w,c
 22705  013550  0100               	movlb	0	; () banked
 22706  013552  25BB               	addwf	??_Console_Init& (0+255),w,b
 22707  013554  6ED9               	movwf	fsr2l,c
 22708  013556  50F4               	movf	prodh,w,c
 22709  013558  0100               	movlb	0	; () banked
 22710  01355A  21BC               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22711  01355C  6EDA               	movwf	fsr2h,c
 22712  01355E  0E00               	movlw	0
 22713  013560  6EDF               	movwf	indf2,c
 22714                           
 22715                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22716  013562  0100               	movlb	0	; () banked
 22717  013564  51BE               	movf	Console_Init@y& (0+255),w,b
 22718  013566  0D02               	mullw	2
 22719  013568  0E00               	movlw	low _lCBuffer
 22720  01356A  24F3               	addwf	prodl,w,c
 22721  01356C  6ED9               	movwf	fsr2l,c
 22722  01356E  0E03               	movlw	high _lCBuffer
 22723  013570  20F4               	addwfc	prodh,w,c
 22724  013572  6EDA               	movwf	fsr2h,c
 22725  013574  0EFF               	movlw	255
 22726  013576  6EDE               	movwf	postinc2,c
 22727  013578  0EFF               	movlw	255
 22728  01357A  6EDD               	movwf	postdec2,c
 22729                           
 22730                           ; BSR set to: 0
 22731  01357C  0100               	movlb	0	; () banked
 22732  01357E  2BBE               	incf	Console_Init@y& (0+255),f,b
 22733  013580  D7CF               	goto	l12268
 22734  013582                     u8160:
 22735                           
 22736                           ; BSR set to: 0
 22737                           
 22738                           ; BSR set to: 0
 22739  013582  0100               	movlb	0	; () banked
 22740  013584  2BBD               	incf	Console_Init@x& (0+255),f,b
 22741  013586  D7C4               	goto	l12262
 22742  013588                     __end_of_Console_Init:
 22743                           	opt stack 0
 22744                           tosu	equ	0xFFF
 22745                           tosh	equ	0xFFE
 22746                           tosl	equ	0xFFD
 22747                           pclath	equ	0xFFA
 22748                           tblptru	equ	0xFF8
 22749                           tblptrh	equ	0xFF7
 22750                           tblptrl	equ	0xFF6
 22751                           tablat	equ	0xFF5
 22752                           prodh	equ	0xFF4
 22753                           prodl	equ	0xFF3
 22754                           intcon	equ	0xFF2
 22755                           indf0	equ	0xFEF
 22756                           postinc0	equ	0xFEE
 22757                           fsr0h	equ	0xFEA
 22758                           fsr0l	equ	0xFE9
 22759                           wreg	equ	0xFE8
 22760                           indf1	equ	0xFE7
 22761                           postdec1	equ	0xFE5
 22762                           fsr1h	equ	0xFE2
 22763                           fsr1l	equ	0xFE1
 22764                           indf2	equ	0xFDF
 22765                           postinc2	equ	0xFDE
 22766                           postdec2	equ	0xFDD
 22767                           plusw2	equ	0xFDB
 22768                           fsr2h	equ	0xFDA
 22769                           fsr2l	equ	0xFD9
 22770                           status	equ	0xFD8
 22771                           
 22772 ;; *************** function _ISR_Function *****************
 22773 ;; Defined at:
 22774 ;;		line 38 in file "Library/ISR.c"
 22775 ;; Parameters:    Size  Location     Type
 22776 ;;		None
 22777 ;; Auto vars:     Size  Location     Type
 22778 ;;		None
 22779 ;; Return value:  Size  Location     Type
 22780 ;;                  1    wreg      void 
 22781 ;; Registers used:
 22782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22783 ;; Tracked objects:
 22784 ;;		On entry : 0/0
 22785 ;;		On exit  : 0/0
 22786 ;;		Unchanged: 0/0
 22787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;Total ram usage:       18 bytes
 22793 ;; Hardware stack levels used:    1
 22794 ;; Hardware stack levels required when called:    6
 22795 ;; This function calls:
 22796 ;;		_Timer0_ISR
 22797 ;; This function is called by:
 22798 ;;		Interrupt level 2
 22799 ;; This function uses a non-reentrant model
 22800 ;;
 22801                           
 22802                           	psect	intcode
 22803  001408                     __pintcode:
 22804                           	opt stack 0
 22805  001408                     _ISR_Function:
 22806                           	opt stack 13
 22807                           
 22808                           ; BSR set to: 0
 22809                           ;incstack = 0
 22810  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22811  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 22812  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 22813  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 22814  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 22815  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 22816  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 22817  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 22818  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 22819  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 22820  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 22821  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 22822  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 22823  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 22824  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 22825  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 22826  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 22827  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 22828  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 22829                           
 22830                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22831  001452  92F2               	bcf	intcon,1,c	;volatile
 22832                           
 22833                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22834  001454  B4F2               	btfsc	intcon,2,c	;volatile
 22835  001456  AAF2               	btfss	intcon,5,c	;volatile
 22836  001458  D002               	goto	i2l1590
 22837                           
 22838                           ;ISR.c: 68: Timer0_ISR();
 22839  00145A  EC24  F0A3         	call	_Timer0_ISR	;wreg free
 22840  00145E                     i2l1590:
 22841  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 22842  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 22843  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 22844  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 22845  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 22846  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 22847  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 22848  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 22849  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 22850  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 22851  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 22852  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 22853  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 22854  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 22855  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 22856  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 22857  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 22858  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 22859  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22860  0014A8  0011               	retfie		f
 22861  0014AA                     __end_of_ISR_Function:
 22862                           	opt stack 0
 22863                           tosu	equ	0xFFF
 22864                           tosh	equ	0xFFE
 22865                           tosl	equ	0xFFD
 22866                           pclatu	equ	0xFFB
 22867                           pclath	equ	0xFFA
 22868                           tblptru	equ	0xFF8
 22869                           tblptrh	equ	0xFF7
 22870                           tblptrl	equ	0xFF6
 22871                           tablat	equ	0xFF5
 22872                           prodh	equ	0xFF4
 22873                           prodl	equ	0xFF3
 22874                           intcon	equ	0xFF2
 22875                           indf0	equ	0xFEF
 22876                           postinc0	equ	0xFEE
 22877                           fsr0h	equ	0xFEA
 22878                           fsr0l	equ	0xFE9
 22879                           wreg	equ	0xFE8
 22880                           indf1	equ	0xFE7
 22881                           postdec1	equ	0xFE5
 22882                           fsr1h	equ	0xFE2
 22883                           fsr1l	equ	0xFE1
 22884                           indf2	equ	0xFDF
 22885                           postinc2	equ	0xFDE
 22886                           postdec2	equ	0xFDD
 22887                           plusw2	equ	0xFDB
 22888                           fsr2h	equ	0xFDA
 22889                           fsr2l	equ	0xFD9
 22890                           status	equ	0xFD8
 22891                           
 22892 ;; *************** function _Timer0_ISR *****************
 22893 ;; Defined at:
 22894 ;;		line 94 in file "Library/Timer0.c"
 22895 ;; Parameters:    Size  Location     Type
 22896 ;;		None
 22897 ;; Auto vars:     Size  Location     Type
 22898 ;;		None
 22899 ;; Return value:  Size  Location     Type
 22900 ;;                  1    wreg      void 
 22901 ;; Registers used:
 22902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22903 ;; Tracked objects:
 22904 ;;		On entry : 0/0
 22905 ;;		On exit  : 0/0
 22906 ;;		Unchanged: 0/0
 22907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22912 ;;Total ram usage:        0 bytes
 22913 ;; Hardware stack levels used:    1
 22914 ;; Hardware stack levels required when called:    5
 22915 ;; This function calls:
 22916 ;;		Absolute function
 22917 ;;		i2_Motor_Step
 22918 ;;		i2_Timer0_Stop
 22919 ;; This function is called by:
 22920 ;;		_ISR_Function
 22921 ;; This function uses a non-reentrant model
 22922 ;;
 22923                           
 22924                           	psect	text132
 22925  014648                     __ptext132:
 22926                           	opt stack 0
 22927  014648                     _Timer0_ISR:
 22928                           	opt stack 13
 22929                           
 22930                           ;Timer0.c: 96: Timer0_Stop();
 22931                           
 22932                           ;incstack = 0
 22933  014648  EC26  F0A5         	call	i2_Timer0_Stop	;wreg free
 22934                           
 22935                           ;Timer0.c: 99: if (gISR != 0)
 22936  01464C  0100               	movlb	0	; () banked
 22937  01464E  5164               	movf	_gISR& (0+255),w,b
 22938  014650  0100               	movlb	0	; () banked
 22939  014652  1165               	iorwf	(_gISR+1)& (0+255),w,b
 22940  014654  0100               	movlb	0	; () banked
 22941  014656  1166               	iorwf	(_gISR+2)& (0+255),w,b
 22942  014658  B4D8               	btfsc	status,2,c
 22943  01465A  0012               	return	
 22944                           
 22945                           ; BSR set to: 0
 22946                           ;Timer0.c: 100: gISR();
 22947  01465C  D801               	call	i2u957_48
 22948  01465E  0012               	return	
 22949  014660                     i2u957_48:
 22950  014660  0005               	push	
 22951  014662  6EFA               	movwf	pclath,c
 22952  014664  0100               	movlb	0	; () banked
 22953  014666  5164               	movf	_gISR& (0+255),w,b
 22954  014668  6EFD               	movwf	tosl,c
 22955  01466A  5165               	movf	(_gISR+1)& (0+255),w,b
 22956  01466C  6EFE               	movwf	tosh,c
 22957  01466E  5166               	movf	(_gISR+2)& (0+255),w,b
 22958  014670  6EFF               	movwf	tosu,c
 22959  014672  50FA               	movf	pclath,w,c
 22960  014674  0012               	return		;indir
 22961  014676                     __end_of_Timer0_ISR:
 22962                           	opt stack 0
 22963                           tosu	equ	0xFFF
 22964                           tosh	equ	0xFFE
 22965                           tosl	equ	0xFFD
 22966                           pclatu	equ	0xFFB
 22967                           pclath	equ	0xFFA
 22968                           tblptru	equ	0xFF8
 22969                           tblptrh	equ	0xFF7
 22970                           tblptrl	equ	0xFF6
 22971                           tablat	equ	0xFF5
 22972                           prodh	equ	0xFF4
 22973                           prodl	equ	0xFF3
 22974                           intcon	equ	0xFF2
 22975                           indf0	equ	0xFEF
 22976                           postinc0	equ	0xFEE
 22977                           fsr0h	equ	0xFEA
 22978                           fsr0l	equ	0xFE9
 22979                           wreg	equ	0xFE8
 22980                           indf1	equ	0xFE7
 22981                           postdec1	equ	0xFE5
 22982                           fsr1h	equ	0xFE2
 22983                           fsr1l	equ	0xFE1
 22984                           indf2	equ	0xFDF
 22985                           postinc2	equ	0xFDE
 22986                           postdec2	equ	0xFDD
 22987                           plusw2	equ	0xFDB
 22988                           fsr2h	equ	0xFDA
 22989                           fsr2l	equ	0xFD9
 22990                           status	equ	0xFD8
 22991                           
 22992 ;; *************** function i2_Motor_Step *****************
 22993 ;; Defined at:
 22994 ;;		line 75 in file "Library/Motor.c"
 22995 ;; Parameters:    Size  Location     Type
 22996 ;;		None
 22997 ;; Auto vars:     Size  Location     Type
 22998 ;;		None
 22999 ;; Return value:  Size  Location     Type
 23000 ;;                  1    wreg      void 
 23001 ;; Registers used:
 23002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23003 ;; Tracked objects:
 23004 ;;		On entry : 0/0
 23005 ;;		On exit  : 0/0
 23006 ;;		Unchanged: 0/0
 23007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23012 ;;Total ram usage:        2 bytes
 23013 ;; Hardware stack levels used:    1
 23014 ;; Hardware stack levels required when called:    4
 23015 ;; This function calls:
 23016 ;;		i2_MXK_Queue
 23017 ;;		i2_MXK_Release
 23018 ;;		i2_MXK_SwitchTo
 23019 ;;		i2_Port_SetPin
 23020 ;;		i2_Timer0_Restart
 23021 ;;		i2_Timer0_Stop
 23022 ;; This function is called by:
 23023 ;; This function uses a non-reentrant model
 23024 ;;
 23025                           
 23026                           	psect	text133
 23027  012358                     __ptext133:
 23028                           	opt stack 0
 23029  012358                     i2_Motor_Step:
 23030                           	opt stack 13
 23031                           
 23032                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 23033                           
 23034                           ;incstack = 0
 23035  012358  0100               	movlb	0	; () banked
 23036  01235A  EE20 F004          	lfsr	2,4
 23037  01235E  5183               	movf	_lMotor& (0+255),w,b
 23038  012360  26D9               	addwf	fsr2l,f,c
 23039  012362  5184               	movf	(_lMotor+1)& (0+255),w,b
 23040  012364  22DA               	addwfc	fsr2h,f,c
 23041  012366  50DF               	movf	indf2,w,c
 23042  012368  EC90  F0A2         	call	i2_MXK_SwitchTo
 23043  01236C  0900               	iorlw	0
 23044  01236E  B4D8               	btfsc	status,2,c
 23045  012370  D06A               	goto	i2l1627
 23046                           
 23047                           ;Motor.c: 78: {
 23048                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 23049  012372  C083  FFD9         	movff	_lMotor,fsr2l
 23050  012376  C084  FFDA         	movff	_lMotor+1,fsr2h
 23051  01237A  50DE               	movf	postinc2,w,c
 23052  01237C  10DE               	iorwf	postinc2,w,c
 23053  01237E  B4D8               	btfsc	status,2,c
 23054  012380  D05D               	goto	i2l1628
 23055                           
 23056                           ;Motor.c: 80: {
 23057                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 23058  012382  C083  FFD9         	movff	_lMotor,fsr2l
 23059  012386  C084  FFDA         	movff	_lMotor+1,fsr2h
 23060  01238A  0E01               	movlw	1
 23061  01238C  BEDB               	btfsc	plusw2,7,c
 23062  01238E  D022               	goto	i2l1629
 23063  012390  0E01               	movlw	1
 23064  012392  50DB               	movf	plusw2,w,c
 23065  012394  E103               	bnz	i2u538_40
 23066  012396  04DE               	decf	postinc2,w,c
 23067  012398  A0D8               	btfss	status,0,c
 23068  01239A  D01C               	goto	i2l1629
 23069  01239C                     i2u538_40:
 23070                           
 23071                           ;Motor.c: 83: {
 23072                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 23073  01239C  C083  FFD9         	movff	_lMotor,fsr2l
 23074  0123A0  C084  FFDA         	movff	_lMotor+1,fsr2h
 23075  0123A4  28DE               	incf	postinc2,w,c
 23076  0123A6  E104               	bnz	i2u539_40
 23077  0123A8  0E7F               	movlw	127
 23078  0123AA  18DE               	xorwf	postinc2,w,c
 23079  0123AC  B4D8               	btfsc	status,2,c
 23080  0123AE  D007               	goto	i2l1630
 23081  0123B0                     i2u539_40:
 23082                           
 23083                           ;Motor.c: 85: lMotor->mDelta --;
 23084  0123B0  C083  FFD9         	movff	_lMotor,fsr2l
 23085  0123B4  C084  FFDA         	movff	_lMotor+1,fsr2h
 23086  0123B8  06DE               	decf	postinc2,f,c
 23087  0123BA  0E00               	movlw	0
 23088  0123BC  5ADD               	subwfb	postdec2,f,c
 23089  0123BE                     i2l1630:
 23090                           
 23091                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 23092  0123BE  0E95               	movlw	low _PortE
 23093  0123C0  6E10               	movwf	i2Port_SetPin@pInput,c
 23094  0123C2  0E00               	movlw	high _PortE
 23095  0123C4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23096  0123C6  0E00               	movlw	0
 23097  0123C8  6E12               	movwf	i2Port_SetPin@pPin,c
 23098  0123CA  0E01               	movlw	1
 23099  0123CC  6E13               	movwf	i2Port_SetPin@pValue,c
 23100  0123CE  EC1E  F097         	call	i2_Port_SetPin	;wreg free
 23101                           
 23102                           ;Motor.c: 88: }
 23103  0123D2  D01B               	goto	i2l1631
 23104  0123D4                     i2l1629:
 23105                           
 23106                           ;Motor.c: 89: else
 23107                           ;Motor.c: 90: {
 23108                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 23109  0123D4  C083  FFD9         	movff	_lMotor,fsr2l
 23110  0123D8  C084  FFDA         	movff	_lMotor+1,fsr2h
 23111  0123DC  04DE               	decf	postinc2,w,c
 23112  0123DE  E104               	bnz	i2u540_40
 23113  0123E0  0E80               	movlw	128
 23114  0123E2  18DE               	xorwf	postinc2,w,c
 23115  0123E4  B4D8               	btfsc	status,2,c
 23116  0123E6  D007               	goto	i2l1632
 23117  0123E8                     i2u540_40:
 23118                           
 23119                           ;Motor.c: 92: lMotor->mDelta ++;
 23120  0123E8  C083  FFD9         	movff	_lMotor,fsr2l
 23121  0123EC  C084  FFDA         	movff	_lMotor+1,fsr2h
 23122  0123F0  2ADE               	incf	postinc2,f,c
 23123  0123F2  0E00               	movlw	0
 23124  0123F4  22DD               	addwfc	postdec2,f,c
 23125  0123F6                     i2l1632:
 23126                           
 23127                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 23128  0123F6  0E95               	movlw	low _PortE
 23129  0123F8  6E10               	movwf	i2Port_SetPin@pInput,c
 23130  0123FA  0E00               	movlw	high _PortE
 23131  0123FC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23132  0123FE  0E00               	movlw	0
 23133  012400  6E12               	movwf	i2Port_SetPin@pPin,c
 23134  012402  0E00               	movlw	0
 23135  012404  6E13               	movwf	i2Port_SetPin@pValue,c
 23136  012406  EC1E  F097         	call	i2_Port_SetPin	;wreg free
 23137  01240A                     i2l1631:
 23138                           
 23139                           ;Motor.c: 95: }
 23140                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 23141  01240A  0E95               	movlw	low _PortE
 23142  01240C  6E10               	movwf	i2Port_SetPin@pInput,c
 23143  01240E  0E00               	movlw	high _PortE
 23144  012410  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23145  012412  0E01               	movlw	1
 23146  012414  6E12               	movwf	i2Port_SetPin@pPin,c
 23147  012416  0E01               	movlw	1
 23148  012418  6E13               	movwf	i2Port_SetPin@pValue,c
 23149  01241A  EC1E  F097         	call	i2_Port_SetPin	;wreg free
 23150                           
 23151                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 23152  01241E  0E95               	movlw	low _PortE
 23153  012420  6E10               	movwf	i2Port_SetPin@pInput,c
 23154  012422  0E00               	movlw	high _PortE
 23155  012424  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23156  012426  0E01               	movlw	1
 23157  012428  6E12               	movwf	i2Port_SetPin@pPin,c
 23158  01242A  0E00               	movlw	0
 23159  01242C  6E13               	movwf	i2Port_SetPin@pValue,c
 23160  01242E  EC1E  F097         	call	i2_Port_SetPin	;wreg free
 23161                           
 23162                           ;Motor.c: 101: MXK_Release();
 23163  012432  EC29  F0A5         	call	i2_MXK_Release	;wreg free
 23164                           
 23165                           ;Motor.c: 102: Timer0_Restart();
 23166  012436  ECFD  F0A4         	call	i2_Timer0_Restart	;wreg free
 23167                           
 23168                           ;Motor.c: 103: return;
 23169  01243A  0012               	return	
 23170  01243C                     i2l1628:
 23171                           
 23172                           ;Motor.c: 104: }
 23173                           ;Motor.c: 105: MXK_Release();
 23174  01243C  EC29  F0A5         	call	i2_MXK_Release	;wreg free
 23175                           
 23176                           ;Motor.c: 106: Timer0_Stop();
 23177  012440  EC26  F0A5         	call	i2_Timer0_Stop	;wreg free
 23178                           
 23179                           ;Motor.c: 107: return;
 23180  012444  0012               	return	
 23181  012446                     i2l1627:
 23182                           
 23183                           ;Motor.c: 108: }
 23184                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23185  012446  C06A  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 23186  01244A  C06B  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23187  01244E  C06C  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23188  012452  ECF0  F0A4         	call	i2_MXK_Queue	;wreg free
 23189  012456  0012               	return		;funcret
 23190  012458                     __end_ofi2_Motor_Step:
 23191                           	opt stack 0
 23192                           tosu	equ	0xFFF
 23193                           tosh	equ	0xFFE
 23194                           tosl	equ	0xFFD
 23195                           pclatu	equ	0xFFB
 23196                           pclath	equ	0xFFA
 23197                           tblptru	equ	0xFF8
 23198                           tblptrh	equ	0xFF7
 23199                           tblptrl	equ	0xFF6
 23200                           tablat	equ	0xFF5
 23201                           prodh	equ	0xFF4
 23202                           prodl	equ	0xFF3
 23203                           intcon	equ	0xFF2
 23204                           indf0	equ	0xFEF
 23205                           postinc0	equ	0xFEE
 23206                           fsr0h	equ	0xFEA
 23207                           fsr0l	equ	0xFE9
 23208                           wreg	equ	0xFE8
 23209                           indf1	equ	0xFE7
 23210                           postdec1	equ	0xFE5
 23211                           fsr1h	equ	0xFE2
 23212                           fsr1l	equ	0xFE1
 23213                           indf2	equ	0xFDF
 23214                           postinc2	equ	0xFDE
 23215                           postdec2	equ	0xFDD
 23216                           plusw2	equ	0xFDB
 23217                           fsr2h	equ	0xFDA
 23218                           fsr2l	equ	0xFD9
 23219                           status	equ	0xFD8
 23220                           
 23221 ;; *************** function i2_Timer0_Stop *****************
 23222 ;; Defined at:
 23223 ;;		line 89 in file "Library/Timer0.c"
 23224 ;; Parameters:    Size  Location     Type
 23225 ;;		None
 23226 ;; Auto vars:     Size  Location     Type
 23227 ;;		None
 23228 ;; Return value:  Size  Location     Type
 23229 ;;                  1    wreg      void 
 23230 ;; Registers used:
 23231 ;;		None
 23232 ;; Tracked objects:
 23233 ;;		On entry : 0/0
 23234 ;;		On exit  : 0/0
 23235 ;;		Unchanged: 0/0
 23236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23241 ;;Total ram usage:        0 bytes
 23242 ;; Hardware stack levels used:    1
 23243 ;; This function calls:
 23244 ;;		Nothing
 23245 ;; This function is called by:
 23246 ;;		_Timer0_ISR
 23247 ;;		i2_Motor_Step
 23248 ;; This function uses a non-reentrant model
 23249 ;;
 23250                           
 23251                           	psect	text134
 23252  014A4C                     __ptext134:
 23253                           	opt stack 0
 23254  014A4C                     i2_Timer0_Stop:
 23255                           	opt stack 17
 23256                           
 23257                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23258                           
 23259                           ;incstack = 0
 23260  014A4C  9AF2               	bcf	intcon,5,c	;volatile
 23261                           
 23262                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23263  014A4E  94F2               	bcf	intcon,2,c	;volatile
 23264  014A50  0012               	return		;funcret
 23265  014A52                     __end_ofi2_Timer0_Stop:
 23266                           	opt stack 0
 23267                           tosu	equ	0xFFF
 23268                           tosh	equ	0xFFE
 23269                           tosl	equ	0xFFD
 23270                           pclatu	equ	0xFFB
 23271                           pclath	equ	0xFFA
 23272                           tblptru	equ	0xFF8
 23273                           tblptrh	equ	0xFF7
 23274                           tblptrl	equ	0xFF6
 23275                           tablat	equ	0xFF5
 23276                           prodh	equ	0xFF4
 23277                           prodl	equ	0xFF3
 23278                           intcon	equ	0xFF2
 23279                           indf0	equ	0xFEF
 23280                           postinc0	equ	0xFEE
 23281                           fsr0h	equ	0xFEA
 23282                           fsr0l	equ	0xFE9
 23283                           wreg	equ	0xFE8
 23284                           indf1	equ	0xFE7
 23285                           postdec1	equ	0xFE5
 23286                           fsr1h	equ	0xFE2
 23287                           fsr1l	equ	0xFE1
 23288                           indf2	equ	0xFDF
 23289                           postinc2	equ	0xFDE
 23290                           postdec2	equ	0xFDD
 23291                           plusw2	equ	0xFDB
 23292                           fsr2h	equ	0xFDA
 23293                           fsr2l	equ	0xFD9
 23294                           status	equ	0xFD8
 23295                           
 23296 ;; *************** function i2_Timer0_Restart *****************
 23297 ;; Defined at:
 23298 ;;		line 83 in file "Library/Timer0.c"
 23299 ;; Parameters:    Size  Location     Type
 23300 ;;		None
 23301 ;; Auto vars:     Size  Location     Type
 23302 ;;		None
 23303 ;; Return value:  Size  Location     Type
 23304 ;;                  1    wreg      void 
 23305 ;; Registers used:
 23306 ;;		None
 23307 ;; Tracked objects:
 23308 ;;		On entry : 0/0
 23309 ;;		On exit  : 0/0
 23310 ;;		Unchanged: 0/0
 23311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23316 ;;Total ram usage:        0 bytes
 23317 ;; Hardware stack levels used:    1
 23318 ;; This function calls:
 23319 ;;		Nothing
 23320 ;; This function is called by:
 23321 ;;		i2_Motor_Step
 23322 ;; This function uses a non-reentrant model
 23323 ;;
 23324                           
 23325                           	psect	text135
 23326  0149FA                     __ptext135:
 23327                           	opt stack 0
 23328  0149FA                     i2_Timer0_Restart:
 23329                           	opt stack 16
 23330                           
 23331                           ;Timer0.c: 85: TMR0 = COUNTER;
 23332                           
 23333                           ;incstack = 0
 23334  0149FA  C029  FFD6         	movff	_COUNTER,4054	;volatile
 23335  0149FE  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 23336                           
 23337                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23338  014A02  8AF2               	bsf	intcon,5,c	;volatile
 23339  014A04  0012               	return		;funcret
 23340  014A06                     __end_ofi2_Timer0_Restart:
 23341                           	opt stack 0
 23342                           tosu	equ	0xFFF
 23343                           tosh	equ	0xFFE
 23344                           tosl	equ	0xFFD
 23345                           pclatu	equ	0xFFB
 23346                           pclath	equ	0xFFA
 23347                           tblptru	equ	0xFF8
 23348                           tblptrh	equ	0xFF7
 23349                           tblptrl	equ	0xFF6
 23350                           tablat	equ	0xFF5
 23351                           prodh	equ	0xFF4
 23352                           prodl	equ	0xFF3
 23353                           intcon	equ	0xFF2
 23354                           indf0	equ	0xFEF
 23355                           postinc0	equ	0xFEE
 23356                           fsr0h	equ	0xFEA
 23357                           fsr0l	equ	0xFE9
 23358                           wreg	equ	0xFE8
 23359                           indf1	equ	0xFE7
 23360                           postdec1	equ	0xFE5
 23361                           fsr1h	equ	0xFE2
 23362                           fsr1l	equ	0xFE1
 23363                           indf2	equ	0xFDF
 23364                           postinc2	equ	0xFDE
 23365                           postdec2	equ	0xFDD
 23366                           plusw2	equ	0xFDB
 23367                           fsr2h	equ	0xFDA
 23368                           fsr2l	equ	0xFD9
 23369                           status	equ	0xFD8
 23370                           
 23371 ;; *************** function i2_Port_SetPin *****************
 23372 ;; Defined at:
 23373 ;;		line 247 in file "Library/Port.c"
 23374 ;; Parameters:    Size  Location     Type
 23375 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23376 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23377 ;;  pPin            1   17[COMRAM] enum E6750
 23378 ;;  pValue          1   18[COMRAM] unsigned char 
 23379 ;; Auto vars:     Size  Location     Type
 23380 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23381 ;; Return value:  Size  Location     Type
 23382 ;;                  1    wreg      void 
 23383 ;; Registers used:
 23384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23385 ;; Tracked objects:
 23386 ;;		On entry : 0/0
 23387 ;;		On exit  : 0/0
 23388 ;;		Unchanged: 0/0
 23389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23393 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23394 ;;Total ram usage:        5 bytes
 23395 ;; Hardware stack levels used:    1
 23396 ;; Hardware stack levels required when called:    3
 23397 ;; This function calls:
 23398 ;;		i2_Byte_SetBit
 23399 ;;		i2_Word_GetPair
 23400 ;; This function is called by:
 23401 ;;		i2_Motor_Step
 23402 ;; This function uses a non-reentrant model
 23403 ;;
 23404                           
 23405                           	psect	text136
 23406  012E3C                     __ptext136:
 23407                           	opt stack 0
 23408  012E3C                     i2_Port_SetPin:
 23409                           	opt stack 13
 23410                           
 23411                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23412                           
 23413                           ;incstack = 0
 23414  012E3C  0E08               	movlw	8
 23415  012E3E  2410               	addwf	i2Port_SetPin@pInput,w,c
 23416  012E40  6E0D               	movwf	i2Word_GetPair@pInput,c
 23417  012E42  0E00               	movlw	0
 23418  012E44  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23419  012E46  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23420  012E48  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23421  012E4C  ECF5  F0A2         	call	i2_Word_GetPair	;wreg free
 23422  012E50  6E14               	movwf	i2Port_SetPin@Type,c
 23423                           
 23424                           ;Port.c: 250: switch (Type)
 23425  012E52  D03B               	goto	i2l427
 23426  012E54                     
 23427                           ;Port.c: 256: pValue &= 1;
 23428  012E54  0E01               	movlw	1
 23429  012E56  1613               	andwf	i2Port_SetPin@pValue,f,c
 23430                           
 23431                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23432  012E58  EE20 F002          	lfsr	2,2
 23433  012E5C  5010               	movf	i2Port_SetPin@pInput,w,c
 23434  012E5E  26D9               	addwf	fsr2l,f,c
 23435  012E60  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23436  012E62  22DA               	addwfc	fsr2h,f,c
 23437  012E64  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23438  012E68  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23439  012E6C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23440  012E70  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23441  012E74  EC5E  F0A0         	call	i2_Byte_SetBit	;wreg free
 23442                           
 23443                           ;Port.c: 258: break;
 23444  012E78  0012               	return	
 23445  012E7A                     
 23446                           ;Port.c: 261: pValue &= 1;
 23447  012E7A  0E01               	movlw	1
 23448  012E7C  1613               	andwf	i2Port_SetPin@pValue,f,c
 23449                           
 23450                           ;Port.c: 262: pValue ^= 1;
 23451  012E7E  0E01               	movlw	1
 23452  012E80  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23453                           
 23454                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23455  012E82  EE20 F002          	lfsr	2,2
 23456  012E86  5010               	movf	i2Port_SetPin@pInput,w,c
 23457  012E88  26D9               	addwf	fsr2l,f,c
 23458  012E8A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23459  012E8C  22DA               	addwfc	fsr2h,f,c
 23460  012E8E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23461  012E92  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23462  012E96  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23463  012E9A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23464  012E9E  EC5E  F0A0         	call	i2_Byte_SetBit	;wreg free
 23465                           
 23466                           ;Port.c: 264: break;
 23467  012EA2  0012               	return	
 23468  012EA4                     
 23469                           ;Port.c: 266: pValue &= 1;
 23470  012EA4  0E01               	movlw	1
 23471  012EA6  1613               	andwf	i2Port_SetPin@pValue,f,c
 23472                           
 23473                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23474  012EA8  EE20 F004          	lfsr	2,4
 23475  012EAC  5010               	movf	i2Port_SetPin@pInput,w,c
 23476  012EAE  26D9               	addwf	fsr2l,f,c
 23477  012EB0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23478  012EB2  22DA               	addwfc	fsr2h,f,c
 23479  012EB4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23480  012EB8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23481  012EBC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23482  012EC0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23483  012EC4  EC5E  F0A0         	call	i2_Byte_SetBit	;wreg free
 23484                           
 23485                           ;Port.c: 269: }
 23486                           
 23487                           ;Port.c: 268: break;
 23488  012EC8  0012               	return	
 23489  012ECA                     i2l427:
 23490  012ECA  5014               	movf	i2Port_SetPin@Type,w,c
 23491                           
 23492                           ; Switch size 1, requested type "space"
 23493                           ; Number of cases is 4, Range of values is 0 to 3
 23494                           ; switch strategies available:
 23495                           ; Name         Instructions Cycles
 23496                           ; simple_byte           13     7 (average)
 23497                           ;	Chosen strategy is simple_byte
 23498  012ECC  0A00               	xorlw	0	; case 0
 23499  012ECE  B4D8               	btfsc	status,2,c
 23500  012ED0  0012               	return	
 23501  012ED2  0A01               	xorlw	1	; case 1
 23502  012ED4  B4D8               	btfsc	status,2,c
 23503  012ED6  D7BE               	goto	i2l430
 23504  012ED8  0A03               	xorlw	3	; case 2
 23505  012EDA  B4D8               	btfsc	status,2,c
 23506  012EDC  D7CE               	goto	i2l432
 23507  012EDE  0A01               	xorlw	1	; case 3
 23508  012EE0  A4D8               	btfss	status,2,c
 23509  012EE2  0012               	return	
 23510  012EE4  D7DF               	goto	i2l433
 23511  012EE6                     __end_ofi2_Port_SetPin:
 23512                           	opt stack 0
 23513                           tosu	equ	0xFFF
 23514                           tosh	equ	0xFFE
 23515                           tosl	equ	0xFFD
 23516                           pclatu	equ	0xFFB
 23517                           pclath	equ	0xFFA
 23518                           tblptru	equ	0xFF8
 23519                           tblptrh	equ	0xFF7
 23520                           tblptrl	equ	0xFF6
 23521                           tablat	equ	0xFF5
 23522                           prodh	equ	0xFF4
 23523                           prodl	equ	0xFF3
 23524                           intcon	equ	0xFF2
 23525                           indf0	equ	0xFEF
 23526                           postinc0	equ	0xFEE
 23527                           fsr0h	equ	0xFEA
 23528                           fsr0l	equ	0xFE9
 23529                           wreg	equ	0xFE8
 23530                           indf1	equ	0xFE7
 23531                           postdec1	equ	0xFE5
 23532                           fsr1h	equ	0xFE2
 23533                           fsr1l	equ	0xFE1
 23534                           indf2	equ	0xFDF
 23535                           postinc2	equ	0xFDE
 23536                           postdec2	equ	0xFDD
 23537                           plusw2	equ	0xFDB
 23538                           fsr2h	equ	0xFDA
 23539                           fsr2l	equ	0xFD9
 23540                           status	equ	0xFD8
 23541                           
 23542 ;; *************** function i2_Word_GetPair *****************
 23543 ;; Defined at:
 23544 ;;		line 156 in file "Library/Types.c"
 23545 ;; Parameters:    Size  Location     Type
 23546 ;;  pInput          2   12[COMRAM] PTR struct Word
 23547 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23548 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23549 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23550 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23551 ;;  pPair           1   14[COMRAM] unsigned char 
 23552 ;; Auto vars:     Size  Location     Type
 23553 ;;		None
 23554 ;; Return value:  Size  Location     Type
 23555 ;;                  1    wreg      unsigned char 
 23556 ;; Registers used:
 23557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23558 ;; Tracked objects:
 23559 ;;		On entry : 0/0
 23560 ;;		On exit  : 0/0
 23561 ;;		Unchanged: 0/0
 23562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23563 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23566 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23567 ;;Total ram usage:        3 bytes
 23568 ;; Hardware stack levels used:    1
 23569 ;; Hardware stack levels required when called:    2
 23570 ;; This function calls:
 23571 ;;		i2_Byte_GetPair
 23572 ;; This function is called by:
 23573 ;;		i2_Port_SetPin
 23574 ;; This function uses a non-reentrant model
 23575 ;;
 23576                           
 23577                           	psect	text137
 23578  0145EA                     __ptext137:
 23579                           	opt stack 0
 23580  0145EA                     i2_Word_GetPair:
 23581                           	opt stack 13
 23582                           
 23583                           ;Types.c: 158: if (pPair >= 4)
 23584                           
 23585                           ;incstack = 0
 23586  0145EA  0E03               	movlw	3
 23587  0145EC  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23588  0145EE  D00C               	goto	i2l781
 23589                           
 23590                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23591  0145F0  0E01               	movlw	1
 23592  0145F2  240D               	addwf	i2Word_GetPair@pInput,w,c
 23593  0145F4  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23594  0145F6  0E00               	movlw	0
 23595  0145F8  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23596  0145FA  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23597  0145FC  500F               	movf	i2Word_GetPair@pPair,w,c
 23598  0145FE  0FFC               	addlw	252
 23599  014600  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23600  014602  EC3B  F0A4         	call	i2_Byte_GetPair	;wreg free
 23601  014606  0012               	return	
 23602  014608                     i2l781:
 23603                           
 23604                           ;Types.c: 160: else
 23605                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23606  014608  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23607  01460C  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23608  014610  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23609  014614  EC3B  F0A4         	call	i2_Byte_GetPair	;wreg free
 23610  014618  0012               	return	
 23611  01461A                     __end_ofi2_Word_GetPair:
 23612                           	opt stack 0
 23613                           tosu	equ	0xFFF
 23614                           tosh	equ	0xFFE
 23615                           tosl	equ	0xFFD
 23616                           pclatu	equ	0xFFB
 23617                           pclath	equ	0xFFA
 23618                           tblptru	equ	0xFF8
 23619                           tblptrh	equ	0xFF7
 23620                           tblptrl	equ	0xFF6
 23621                           tablat	equ	0xFF5
 23622                           prodh	equ	0xFF4
 23623                           prodl	equ	0xFF3
 23624                           intcon	equ	0xFF2
 23625                           indf0	equ	0xFEF
 23626                           postinc0	equ	0xFEE
 23627                           fsr0h	equ	0xFEA
 23628                           fsr0l	equ	0xFE9
 23629                           wreg	equ	0xFE8
 23630                           indf1	equ	0xFE7
 23631                           postdec1	equ	0xFE5
 23632                           fsr1h	equ	0xFE2
 23633                           fsr1l	equ	0xFE1
 23634                           indf2	equ	0xFDF
 23635                           postinc2	equ	0xFDE
 23636                           postdec2	equ	0xFDD
 23637                           plusw2	equ	0xFDB
 23638                           fsr2h	equ	0xFDA
 23639                           fsr2l	equ	0xFD9
 23640                           status	equ	0xFD8
 23641                           
 23642 ;; *************** function i2_Byte_GetPair *****************
 23643 ;; Defined at:
 23644 ;;		line 87 in file "Library/Types.c"
 23645 ;; Parameters:    Size  Location     Type
 23646 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23647 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23648 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23649 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23650 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23651 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23652 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23653 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23654 ;;		 -> NULL(0), 
 23655 ;;  pPair           1   11[COMRAM] unsigned char 
 23656 ;; Auto vars:     Size  Location     Type
 23657 ;;		None
 23658 ;; Return value:  Size  Location     Type
 23659 ;;                  1    wreg      unsigned char 
 23660 ;; Registers used:
 23661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23662 ;; Tracked objects:
 23663 ;;		On entry : 0/0
 23664 ;;		On exit  : 0/0
 23665 ;;		Unchanged: 0/0
 23666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23671 ;;Total ram usage:        3 bytes
 23672 ;; Hardware stack levels used:    1
 23673 ;; Hardware stack levels required when called:    1
 23674 ;; This function calls:
 23675 ;;		i2_Byte_GetZone
 23676 ;; This function is called by:
 23677 ;;		i2_Word_GetPair
 23678 ;; This function uses a non-reentrant model
 23679 ;;
 23680                           
 23681                           	psect	text138
 23682  014876                     __ptext138:
 23683                           	opt stack 0
 23684  014876                     i2_Byte_GetPair:
 23685                           	opt stack 13
 23686                           
 23687                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23688                           
 23689                           ;incstack = 0
 23690  014876  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23691  01487A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23692  01487E  0E04               	movlw	4
 23693  014880  6E03               	movwf	i2Byte_GetZone@pMax,c
 23694  014882  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23695  014886  0E02               	movlw	2
 23696  014888  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23697  01488A  EC7A  F09B         	call	i2_Byte_GetZone	;wreg free
 23698  01488E  0012               	return	
 23699  014890                     __end_ofi2_Byte_GetPair:
 23700                           	opt stack 0
 23701                           tosu	equ	0xFFF
 23702                           tosh	equ	0xFFE
 23703                           tosl	equ	0xFFD
 23704                           pclatu	equ	0xFFB
 23705                           pclath	equ	0xFFA
 23706                           tblptru	equ	0xFF8
 23707                           tblptrh	equ	0xFF7
 23708                           tblptrl	equ	0xFF6
 23709                           tablat	equ	0xFF5
 23710                           prodh	equ	0xFF4
 23711                           prodl	equ	0xFF3
 23712                           intcon	equ	0xFF2
 23713                           indf0	equ	0xFEF
 23714                           postinc0	equ	0xFEE
 23715                           fsr0h	equ	0xFEA
 23716                           fsr0l	equ	0xFE9
 23717                           wreg	equ	0xFE8
 23718                           indf1	equ	0xFE7
 23719                           postdec1	equ	0xFE5
 23720                           fsr1h	equ	0xFE2
 23721                           fsr1l	equ	0xFE1
 23722                           indf2	equ	0xFDF
 23723                           postinc2	equ	0xFDE
 23724                           postdec2	equ	0xFDD
 23725                           plusw2	equ	0xFDB
 23726                           fsr2h	equ	0xFDA
 23727                           fsr2l	equ	0xFD9
 23728                           status	equ	0xFD8
 23729                           
 23730 ;; *************** function i2_Byte_GetZone *****************
 23731 ;; Defined at:
 23732 ;;		line 64 in file "Library/Types.c"
 23733 ;; Parameters:    Size  Location     Type
 23734 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23735 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23736 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23737 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23738 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23739 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23740 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23741 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23742 ;;		 -> NULL(0), 
 23743 ;;  pMax            1    2[COMRAM] unsigned char 
 23744 ;;  pChunk          1    3[COMRAM] unsigned char 
 23745 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23746 ;; Auto vars:     Size  Location     Type
 23747 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23748 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23749 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23750 ;; Return value:  Size  Location     Type
 23751 ;;                  1    wreg      unsigned char 
 23752 ;; Registers used:
 23753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23754 ;; Tracked objects:
 23755 ;;		On entry : 0/0
 23756 ;;		On exit  : 0/0
 23757 ;;		Unchanged: 0/0
 23758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23759 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23760 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23761 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23762 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23763 ;;Total ram usage:        9 bytes
 23764 ;; Hardware stack levels used:    1
 23765 ;; This function calls:
 23766 ;;		Nothing
 23767 ;; This function is called by:
 23768 ;;		i2_Byte_GetPair
 23769 ;; This function uses a non-reentrant model
 23770 ;;
 23771                           
 23772                           	psect	text139
 23773  0136F4                     __ptext139:
 23774                           	opt stack 0
 23775  0136F4                     i2_Byte_GetZone:
 23776                           	opt stack 13
 23777                           
 23778                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23779                           
 23780                           ;incstack = 0
 23781  0136F4  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23782  0136F8  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23783  0136FC  0E00               	movlw	low (__mediumconst shr (0+16))
 23784  0136FE  6EF8               	movwf	tblptru,c
 23785  013700  0E0F               	movlw	(high __ramtop+-1)
 23786  013702  64F7               	cpfsgt	tblptrh,c
 23787  013704  D003               	bra	i2u387_47
 23788  013706  0008               	tblrd		*
 23789  013708  50F5               	movf	tablat,w,c
 23790  01370A  D005               	bra	i2u387_40
 23791  01370C                     i2u387_47:
 23792  01370C  CFF6 FFE9          	movff	tblptrl,fsr0l
 23793  013710  CFF7 FFEA          	movff	tblptrh,fsr0h
 23794  013714  50EF               	movf	indf0,w,c
 23795  013716                     i2u387_40:
 23796  013716  6E09               	movwf	i2Byte_GetZone@Output,c
 23797                           
 23798                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23799  013718  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23800  01371A  0D01               	mullw	1
 23801  01371C  0EC1               	movlw	low _MASKS
 23802  01371E  24F3               	addwf	prodl,w,c
 23803  013720  6EF6               	movwf	tblptrl,c
 23804  013722  0EFD               	movlw	high _MASKS
 23805  013724  20F4               	addwfc	prodh,w,c
 23806  013726  6EF7               	movwf	tblptrh,c
 23807  013728                     	if	1	;There are 3 active tblptr bytes
 23808  013728  6AF8               	clrf	tblptru,c
 23809  01372A  0E00               	movlw	low (__mediumconst shr (0+16))
 23810  01372C  22F8               	addwfc	tblptru,f,c
 23811  01372E                     	endif
 23812  01372E  0008               	tblrd		*
 23813  013730  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 23814                           
 23815                           ;Types.c: 68: UINT8 Offset = 0;
 23816  013734  0E00               	movlw	0
 23817  013736  6E08               	movwf	i2Byte_GetZone@Offset,c
 23818                           
 23819                           ;Types.c: 70: while (pChunk >= pMax)
 23820  013738  D003               	goto	i2l732
 23821  01373A                     
 23822                           ;Types.c: 71: {
 23823                           ;Types.c: 72: pChunk -= pMax;
 23824  01373A  5003               	movf	i2Byte_GetZone@pMax,w,c
 23825  01373C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 23826                           
 23827                           ;Types.c: 73: Offset += 1;
 23828  01373E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 23829  013740                     i2l732:
 23830  013740  5003               	movf	i2Byte_GetZone@pMax,w,c
 23831  013742  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 23832  013744  B0D8               	btfsc	status,0,c
 23833  013746  D7F9               	goto	i2l733
 23834                           
 23835                           ;Types.c: 74: }
 23836                           ;Types.c: 75: pChunk *= pChunkSize;
 23837  013748  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23838  01374A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 23839  01374C  50F3               	movf	prodl,w,c
 23840  01374E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 23841                           
 23842                           ;Types.c: 76: pChunk += Offset;
 23843  013750  5008               	movf	i2Byte_GetZone@Offset,w,c
 23844  013752  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 23845                           
 23846                           ;Types.c: 78: Output >>= pChunk;
 23847  013754  2804               	incf	i2Byte_GetZone@pChunk,w,c
 23848  013756  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 23849  013758  D002               	goto	i2u389_40
 23850  01375A                     i2u389_45:
 23851  01375A  90D8               	bcf	status,0,c
 23852  01375C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 23853  01375E                     i2u389_40:
 23854  01375E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 23855  013760  D7FC               	goto	i2u389_45
 23856                           
 23857                           ;Types.c: 79: Output &= MASK;
 23858  013762  5007               	movf	i2Byte_GetZone@MASK,w,c
 23859  013764  1609               	andwf	i2Byte_GetZone@Output,f,c
 23860                           
 23861                           ;Types.c: 80: return Output;
 23862  013766  5009               	movf	i2Byte_GetZone@Output,w,c
 23863  013768  0012               	return	
 23864  01376A                     __end_ofi2_Byte_GetZone:
 23865                           	opt stack 0
 23866                           tosu	equ	0xFFF
 23867                           tosh	equ	0xFFE
 23868                           tosl	equ	0xFFD
 23869                           pclatu	equ	0xFFB
 23870                           pclath	equ	0xFFA
 23871                           tblptru	equ	0xFF8
 23872                           tblptrh	equ	0xFF7
 23873                           tblptrl	equ	0xFF6
 23874                           tablat	equ	0xFF5
 23875                           prodh	equ	0xFF4
 23876                           prodl	equ	0xFF3
 23877                           intcon	equ	0xFF2
 23878                           indf0	equ	0xFEF
 23879                           postinc0	equ	0xFEE
 23880                           fsr0h	equ	0xFEA
 23881                           fsr0l	equ	0xFE9
 23882                           wreg	equ	0xFE8
 23883                           indf1	equ	0xFE7
 23884                           postdec1	equ	0xFE5
 23885                           fsr1h	equ	0xFE2
 23886                           fsr1l	equ	0xFE1
 23887                           indf2	equ	0xFDF
 23888                           postinc2	equ	0xFDE
 23889                           postdec2	equ	0xFDD
 23890                           plusw2	equ	0xFDB
 23891                           fsr2h	equ	0xFDA
 23892                           fsr2l	equ	0xFD9
 23893                           status	equ	0xFD8
 23894                           
 23895 ;; *************** function i2_Byte_SetBit *****************
 23896 ;; Defined at:
 23897 ;;		line 32 in file "Library/Types.c"
 23898 ;; Parameters:    Size  Location     Type
 23899 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23900 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 23901 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 23902 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23903 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23904 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23905 ;;		 -> NULL(0), 
 23906 ;;  pBit            1    2[COMRAM] unsigned char 
 23907 ;;  pValue          1    3[COMRAM] unsigned char 
 23908 ;; Auto vars:     Size  Location     Type
 23909 ;;		None
 23910 ;; Return value:  Size  Location     Type
 23911 ;;                  1    wreg      void 
 23912 ;; Registers used:
 23913 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23914 ;; Tracked objects:
 23915 ;;		On entry : 0/0
 23916 ;;		On exit  : 0/0
 23917 ;;		Unchanged: 0/0
 23918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23919 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23922 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23923 ;;Total ram usage:        7 bytes
 23924 ;; Hardware stack levels used:    1
 23925 ;; This function calls:
 23926 ;;		Nothing
 23927 ;; This function is called by:
 23928 ;;		i2_Port_SetPin
 23929 ;; This function uses a non-reentrant model
 23930 ;;
 23931                           
 23932                           	psect	text140
 23933  0140BC                     __ptext140:
 23934                           	opt stack 0
 23935  0140BC                     i2_Byte_SetBit:
 23936                           	opt stack 15
 23937                           
 23938                           ;Types.c: 34: pValue &= 1;
 23939                           
 23940                           ;incstack = 0
 23941  0140BC  0E01               	movlw	1
 23942  0140BE  1604               	andwf	i2Byte_SetBit@pValue,f,c
 23943                           
 23944                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 23945  0140C0  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23946  0140C4  0E01               	movlw	1
 23947  0140C6  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 23948  0140C8  2A05               	incf	??i2_Byte_SetBit,f,c
 23949  0140CA  D002               	goto	i2u444_44
 23950  0140CC                     i2u444_45:
 23951  0140CC  90D8               	bcf	status,0,c
 23952  0140CE  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23953  0140D0                     i2u444_44:
 23954  0140D0  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23955  0140D2  D7FC               	goto	i2u444_45
 23956  0140D4  5006               	movf	??i2_Byte_SetBit+1,w,c
 23957  0140D6  0AFF               	xorlw	255
 23958  0140D8  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 23959  0140DA  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23960  0140DE  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23961  0140E2  5007               	movf	??i2_Byte_SetBit+2,w,c
 23962  0140E4  16DF               	andwf	indf2,f,c
 23963                           
 23964                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 23965  0140E6  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23966  0140EA  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 23967  0140EE  2A05               	incf	??i2_Byte_SetBit,f,c
 23968  0140F0  D002               	goto	i2u445_44
 23969  0140F2                     i2u445_45:
 23970  0140F2  90D8               	bcf	status,0,c
 23971  0140F4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23972  0140F6                     i2u445_44:
 23973  0140F6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23974  0140F8  D7FC               	goto	i2u445_45
 23975  0140FA  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23976  0140FE  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23977  014102  5006               	movf	??i2_Byte_SetBit+1,w,c
 23978  014104  12DF               	iorwf	indf2,f,c
 23979  014106  0012               	return		;funcret
 23980  014108                     __end_ofi2_Byte_SetBit:
 23981                           	opt stack 0
 23982                           tosu	equ	0xFFF
 23983                           tosh	equ	0xFFE
 23984                           tosl	equ	0xFFD
 23985                           pclatu	equ	0xFFB
 23986                           pclath	equ	0xFFA
 23987                           tblptru	equ	0xFF8
 23988                           tblptrh	equ	0xFF7
 23989                           tblptrl	equ	0xFF6
 23990                           tablat	equ	0xFF5
 23991                           prodh	equ	0xFF4
 23992                           prodl	equ	0xFF3
 23993                           intcon	equ	0xFF2
 23994                           indf0	equ	0xFEF
 23995                           postinc0	equ	0xFEE
 23996                           fsr0h	equ	0xFEA
 23997                           fsr0l	equ	0xFE9
 23998                           wreg	equ	0xFE8
 23999                           indf1	equ	0xFE7
 24000                           postdec1	equ	0xFE5
 24001                           fsr1h	equ	0xFE2
 24002                           fsr1l	equ	0xFE1
 24003                           indf2	equ	0xFDF
 24004                           postinc2	equ	0xFDE
 24005                           postdec2	equ	0xFDD
 24006                           plusw2	equ	0xFDB
 24007                           fsr2h	equ	0xFDA
 24008                           fsr2l	equ	0xFD9
 24009                           status	equ	0xFD8
 24010                           
 24011 ;; *************** function i2_MXK_SwitchTo *****************
 24012 ;; Defined at:
 24013 ;;		line 105 in file "Library/MXK.c"
 24014 ;; Parameters:    Size  Location     Type
 24015 ;;  pModule         1    wreg     enum E6927
 24016 ;; Auto vars:     Size  Location     Type
 24017 ;;  pModule         1    7[COMRAM] enum E6927
 24018 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 24019 ;; Return value:  Size  Location     Type
 24020 ;;                  1    wreg      unsigned char 
 24021 ;; Registers used:
 24022 ;;		wreg, status,2, status,0, cstack
 24023 ;; Tracked objects:
 24024 ;;		On entry : 0/0
 24025 ;;		On exit  : 0/0
 24026 ;;		Unchanged: 0/0
 24027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24032 ;;Total ram usage:        2 bytes
 24033 ;; Hardware stack levels used:    1
 24034 ;; Hardware stack levels required when called:    1
 24035 ;; This function calls:
 24036 ;;		i2_delay_us
 24037 ;; This function is called by:
 24038 ;;		i2_Motor_Step
 24039 ;; This function uses a non-reentrant model
 24040 ;;
 24041                           
 24042                           	psect	text141
 24043  014520                     __ptext141:
 24044                           	opt stack 0
 24045  014520                     i2_MXK_SwitchTo:
 24046                           	opt stack 15
 24047                           
 24048                           ;incstack = 0
 24049                           ;i2MXK_SwitchTo@pModule stored from wreg
 24050  014520  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 24051                           
 24052                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 24053  014522  5086               	movf	3974,w,c	;volatile
 24054  014524  0B0F               	andlw	15
 24055  014526  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 24056                           
 24057                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 24058  014528  504B               	movf	_Bus_State,w,c
 24059  01452A  A4D8               	btfss	status,2,c
 24060  01452C  D002               	goto	i2l1730
 24061                           
 24062                           ;MXK.c: 110: return 0;
 24063  01452E  0E00               	movlw	0
 24064  014530  0012               	return	
 24065  014532                     i2l1730:
 24066                           
 24067                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 24068  014532  0E00               	movlw	0
 24069  014534  6E4B               	movwf	_Bus_State,c
 24070                           
 24071                           ;MXK.c: 114: if (CUR != pModule)
 24072  014536  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24073  014538  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 24074  01453A  B4D8               	btfsc	status,2,c
 24075  01453C  D00A               	goto	i2l1732
 24076                           
 24077                           ;MXK.c: 115: {
 24078                           ;MXK.c: 116: PORTG &= ~(0xF);
 24079  01453E  0EF0               	movlw	240
 24080  014540  1686               	andwf	3974,f,c	;volatile
 24081                           
 24082                           ;MXK.c: 117: PORTG |= pModule;
 24083  014542  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24084  014544  1286               	iorwf	3974,f,c	;volatile
 24085                           
 24086                           ;MXK.c: 120: delay_us(10);
 24087  014546  0E00               	movlw	0
 24088  014548  6E02               	movwf	i2delay_us@us+1,c
 24089  01454A  0E0A               	movlw	10
 24090  01454C  6E01               	movwf	i2delay_us@us,c
 24091  01454E  ECBD  F0A1         	call	i2_delay_us	;wreg free
 24092  014552                     i2l1732:
 24093                           
 24094                           ;MXK.c: 121: }
 24095                           ;MXK.c: 122: return 1;
 24096  014552  0E01               	movlw	1
 24097  014554  0012               	return	
 24098  014556                     __end_ofi2_MXK_SwitchTo:
 24099                           	opt stack 0
 24100                           tosu	equ	0xFFF
 24101                           tosh	equ	0xFFE
 24102                           tosl	equ	0xFFD
 24103                           pclatu	equ	0xFFB
 24104                           pclath	equ	0xFFA
 24105                           tblptru	equ	0xFF8
 24106                           tblptrh	equ	0xFF7
 24107                           tblptrl	equ	0xFF6
 24108                           tablat	equ	0xFF5
 24109                           prodh	equ	0xFF4
 24110                           prodl	equ	0xFF3
 24111                           intcon	equ	0xFF2
 24112                           indf0	equ	0xFEF
 24113                           postinc0	equ	0xFEE
 24114                           fsr0h	equ	0xFEA
 24115                           fsr0l	equ	0xFE9
 24116                           wreg	equ	0xFE8
 24117                           indf1	equ	0xFE7
 24118                           postdec1	equ	0xFE5
 24119                           fsr1h	equ	0xFE2
 24120                           fsr1l	equ	0xFE1
 24121                           indf2	equ	0xFDF
 24122                           postinc2	equ	0xFDE
 24123                           postdec2	equ	0xFDD
 24124                           plusw2	equ	0xFDB
 24125                           fsr2h	equ	0xFDA
 24126                           fsr2l	equ	0xFD9
 24127                           status	equ	0xFD8
 24128                           
 24129 ;; *************** function i2_delay_us *****************
 24130 ;; Defined at:
 24131 ;;		line 255 in file "Library/Types.c"
 24132 ;; Parameters:    Size  Location     Type
 24133 ;;  us              2    0[COMRAM] unsigned short 
 24134 ;; Auto vars:     Size  Location     Type
 24135 ;;  delay_us        4    2[COMRAM] unsigned long 
 24136 ;; Return value:  Size  Location     Type
 24137 ;;                  1    wreg      void 
 24138 ;; Registers used:
 24139 ;;		wreg, status,2, status,0
 24140 ;; Tracked objects:
 24141 ;;		On entry : 0/0
 24142 ;;		On exit  : 0/0
 24143 ;;		Unchanged: 0/0
 24144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24146 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24148 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24149 ;;Total ram usage:        6 bytes
 24150 ;; Hardware stack levels used:    1
 24151 ;; This function calls:
 24152 ;;		Nothing
 24153 ;; This function is called by:
 24154 ;;		i2_MXK_SwitchTo
 24155 ;; This function uses a non-reentrant model
 24156 ;;
 24157                           
 24158                           	psect	text142
 24159  01437A                     __ptext142:
 24160                           	opt stack 0
 24161  01437A                     i2_delay_us:
 24162                           	opt stack 15
 24163                           
 24164                           ;Types.c: 256: unsigned long u;
 24165                           ;Types.c: 257: while (us--) {
 24166                           
 24167                           ;incstack = 0
 24168  01437A  D016               	goto	i2u448_40
 24169  01437C                     i2l8318:
 24170                           
 24171                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24172  01437C  0E00               	movlw	0
 24173  01437E  6E03               	movwf	i2delay_us@u,c
 24174  014380  0E00               	movlw	0
 24175  014382  6E04               	movwf	i2delay_us@u+1,c
 24176  014384  0E00               	movlw	0
 24177  014386  6E05               	movwf	i2delay_us@u+2,c
 24178  014388  0E00               	movlw	0
 24179  01438A  6E06               	movwf	i2delay_us@u+3,c
 24180  01438C                     i2l8320:
 24181  01438C  5003               	movf	i2delay_us@u,w,c
 24182  01438E  1004               	iorwf	i2delay_us@u+1,w,c
 24183  014390  1005               	iorwf	i2delay_us@u+2,w,c
 24184  014392  1006               	iorwf	i2delay_us@u+3,w,c
 24185  014394  A4D8               	btfss	status,2,c
 24186  014396  D008               	goto	i2u448_40
 24187  014398  F000               	nop		; ;# 
 24188  01439A  0E01               	movlw	1
 24189  01439C  2603               	addwf	i2delay_us@u,f,c
 24190  01439E  0E00               	movlw	0
 24191  0143A0  2204               	addwfc	i2delay_us@u+1,f,c
 24192  0143A2  2205               	addwfc	i2delay_us@u+2,f,c
 24193  0143A4  2206               	addwfc	i2delay_us@u+3,f,c
 24194  0143A6  D7F2               	goto	i2l8320
 24195  0143A8                     i2u448_40:
 24196  0143A8  0601               	decf	i2delay_us@us,f,c
 24197  0143AA  A0D8               	btfss	status,0,c
 24198  0143AC  0602               	decf	i2delay_us@us+1,f,c
 24199  0143AE  2801               	incf	i2delay_us@us,w,c
 24200  0143B0  E1E5               	bnz	i2l8318
 24201  0143B2  2802               	incf	i2delay_us@us+1,w,c
 24202  0143B4  B4D8               	btfsc	status,2,c
 24203  0143B6  0012               	return	
 24204  0143B8  D7E1               	goto	i2l832
 24205  0143BA                     __end_ofi2_delay_us:
 24206                           	opt stack 0
 24207                           tosu	equ	0xFFF
 24208                           tosh	equ	0xFFE
 24209                           tosl	equ	0xFFD
 24210                           pclatu	equ	0xFFB
 24211                           pclath	equ	0xFFA
 24212                           tblptru	equ	0xFF8
 24213                           tblptrh	equ	0xFF7
 24214                           tblptrl	equ	0xFF6
 24215                           tablat	equ	0xFF5
 24216                           prodh	equ	0xFF4
 24217                           prodl	equ	0xFF3
 24218                           intcon	equ	0xFF2
 24219                           indf0	equ	0xFEF
 24220                           postinc0	equ	0xFEE
 24221                           fsr0h	equ	0xFEA
 24222                           fsr0l	equ	0xFE9
 24223                           wreg	equ	0xFE8
 24224                           indf1	equ	0xFE7
 24225                           postdec1	equ	0xFE5
 24226                           fsr1h	equ	0xFE2
 24227                           fsr1l	equ	0xFE1
 24228                           indf2	equ	0xFDF
 24229                           postinc2	equ	0xFDE
 24230                           postdec2	equ	0xFDD
 24231                           plusw2	equ	0xFDB
 24232                           fsr2h	equ	0xFDA
 24233                           fsr2l	equ	0xFD9
 24234                           status	equ	0xFD8
 24235                           
 24236 ;; *************** function i2_MXK_Release *****************
 24237 ;; Defined at:
 24238 ;;		line 130 in file "Library/MXK.c"
 24239 ;; Parameters:    Size  Location     Type
 24240 ;;		None
 24241 ;; Auto vars:     Size  Location     Type
 24242 ;;		None
 24243 ;; Return value:  Size  Location     Type
 24244 ;;                  1    wreg      unsigned char 
 24245 ;; Registers used:
 24246 ;;		wreg, status,2, status,0
 24247 ;; Tracked objects:
 24248 ;;		On entry : 0/0
 24249 ;;		On exit  : 0/0
 24250 ;;		Unchanged: 0/0
 24251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24256 ;;Total ram usage:        0 bytes
 24257 ;; Hardware stack levels used:    1
 24258 ;; This function calls:
 24259 ;;		Nothing
 24260 ;; This function is called by:
 24261 ;;		i2_Motor_Step
 24262 ;; This function uses a non-reentrant model
 24263 ;;
 24264                           
 24265                           	psect	text143
 24266  014A52                     __ptext143:
 24267                           	opt stack 0
 24268  014A52                     i2_MXK_Release:
 24269                           	opt stack 16
 24270                           
 24271                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24272                           
 24273                           ;incstack = 0
 24274  014A52  0E01               	movlw	1
 24275  014A54  6E4B               	movwf	_Bus_State,c
 24276                           
 24277                           ;MXK.c: 135: return 1;
 24278                           ;	Return value of i2_MXK_Release is never used
 24279  014A56  0012               	return	
 24280  014A58                     __end_ofi2_MXK_Release:
 24281                           	opt stack 0
 24282                           tosu	equ	0xFFF
 24283                           tosh	equ	0xFFE
 24284                           tosl	equ	0xFFD
 24285                           pclatu	equ	0xFFB
 24286                           pclath	equ	0xFFA
 24287                           tblptru	equ	0xFF8
 24288                           tblptrh	equ	0xFF7
 24289                           tblptrl	equ	0xFF6
 24290                           tablat	equ	0xFF5
 24291                           prodh	equ	0xFF4
 24292                           prodl	equ	0xFF3
 24293                           intcon	equ	0xFF2
 24294                           indf0	equ	0xFEF
 24295                           postinc0	equ	0xFEE
 24296                           fsr0h	equ	0xFEA
 24297                           fsr0l	equ	0xFE9
 24298                           wreg	equ	0xFE8
 24299                           indf1	equ	0xFE7
 24300                           postdec1	equ	0xFE5
 24301                           fsr1h	equ	0xFE2
 24302                           fsr1l	equ	0xFE1
 24303                           indf2	equ	0xFDF
 24304                           postinc2	equ	0xFDE
 24305                           postdec2	equ	0xFDD
 24306                           plusw2	equ	0xFDB
 24307                           fsr2h	equ	0xFDA
 24308                           fsr2l	equ	0xFD9
 24309                           status	equ	0xFD8
 24310                           
 24311 ;; *************** function i2_MXK_Queue *****************
 24312 ;; Defined at:
 24313 ;;		line 144 in file "Library/MXK.c"
 24314 ;; Parameters:    Size  Location     Type
 24315 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24316 ;;		 -> Absolute function(1), Motor_Step(1), 
 24317 ;; Auto vars:     Size  Location     Type
 24318 ;;		None
 24319 ;; Return value:  Size  Location     Type
 24320 ;;                  1    wreg      void 
 24321 ;; Registers used:
 24322 ;;		wreg, status,2, status,0
 24323 ;; Tracked objects:
 24324 ;;		On entry : 0/0
 24325 ;;		On exit  : 0/0
 24326 ;;		Unchanged: 0/0
 24327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24328 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24331 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24332 ;;Total ram usage:        3 bytes
 24333 ;; Hardware stack levels used:    1
 24334 ;; This function calls:
 24335 ;;		Nothing
 24336 ;; This function is called by:
 24337 ;;		i2_Motor_Step
 24338 ;; This function uses a non-reentrant model
 24339 ;;
 24340                           
 24341                           	psect	text144
 24342  0149E0                     __ptext144:
 24343                           	opt stack 0
 24344  0149E0                     i2_MXK_Queue:
 24345                           	opt stack 16
 24346                           
 24347                           ;MXK.c: 146: lQueue = pCallback;
 24348                           
 24349                           ;incstack = 0
 24350  0149E0  C001  F067         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24351  0149E4  C002  F068         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24352  0149E8  C003  F069         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24353  0149EC  0012               	return		;funcret
 24354  0149EE                     __end_ofi2_MXK_Queue:
 24355                           	opt stack 0
 24356                           tosu	equ	0xFFF
 24357                           tosh	equ	0xFFE
 24358                           tosl	equ	0xFFD
 24359                           pclatu	equ	0xFFB
 24360                           pclath	equ	0xFFA
 24361                           tblptru	equ	0xFF8
 24362                           tblptrh	equ	0xFF7
 24363                           tblptrl	equ	0xFF6
 24364                           tablat	equ	0xFF5
 24365                           prodh	equ	0xFF4
 24366                           prodl	equ	0xFF3
 24367                           intcon	equ	0xFF2
 24368                           indf0	equ	0xFEF
 24369                           postinc0	equ	0xFEE
 24370                           fsr0h	equ	0xFEA
 24371                           fsr0l	equ	0xFE9
 24372                           wreg	equ	0xFE8
 24373                           indf1	equ	0xFE7
 24374                           postdec1	equ	0xFE5
 24375                           fsr1h	equ	0xFE2
 24376                           fsr1l	equ	0xFE1
 24377                           indf2	equ	0xFDF
 24378                           postinc2	equ	0xFDE
 24379                           postdec2	equ	0xFDD
 24380                           plusw2	equ	0xFDB
 24381                           fsr2h	equ	0xFDA
 24382                           fsr2l	equ	0xFD9
 24383                           status	equ	0xFD8
 24384                           tosu	equ	0xFFF
 24385                           tosh	equ	0xFFE
 24386                           tosl	equ	0xFFD
 24387                           pclatu	equ	0xFFB
 24388                           pclath	equ	0xFFA
 24389                           tblptru	equ	0xFF8
 24390                           tblptrh	equ	0xFF7
 24391                           tblptrl	equ	0xFF6
 24392                           tablat	equ	0xFF5
 24393                           prodh	equ	0xFF4
 24394                           prodl	equ	0xFF3
 24395                           intcon	equ	0xFF2
 24396                           indf0	equ	0xFEF
 24397                           postinc0	equ	0xFEE
 24398                           fsr0h	equ	0xFEA
 24399                           fsr0l	equ	0xFE9
 24400                           wreg	equ	0xFE8
 24401                           indf1	equ	0xFE7
 24402                           postdec1	equ	0xFE5
 24403                           fsr1h	equ	0xFE2
 24404                           fsr1l	equ	0xFE1
 24405                           indf2	equ	0xFDF
 24406                           postinc2	equ	0xFDE
 24407                           postdec2	equ	0xFDD
 24408                           plusw2	equ	0xFDB
 24409                           fsr2h	equ	0xFDA
 24410                           fsr2l	equ	0xFD9
 24411                           status	equ	0xFD8
 24412                           
 24413                           	psect	text145
 24414  000000                     __ptext145:
 24415                           	opt stack 0
 24416                           tosu	equ	0xFFF
 24417                           tosh	equ	0xFFE
 24418                           tosl	equ	0xFFD
 24419                           pclatu	equ	0xFFB
 24420                           pclath	equ	0xFFA
 24421                           tblptru	equ	0xFF8
 24422                           tblptrh	equ	0xFF7
 24423                           tblptrl	equ	0xFF6
 24424                           tablat	equ	0xFF5
 24425                           prodh	equ	0xFF4
 24426                           prodl	equ	0xFF3
 24427                           intcon	equ	0xFF2
 24428                           indf0	equ	0xFEF
 24429                           postinc0	equ	0xFEE
 24430                           fsr0h	equ	0xFEA
 24431                           fsr0l	equ	0xFE9
 24432                           wreg	equ	0xFE8
 24433                           indf1	equ	0xFE7
 24434                           postdec1	equ	0xFE5
 24435                           fsr1h	equ	0xFE2
 24436                           fsr1l	equ	0xFE1
 24437                           indf2	equ	0xFDF
 24438                           postinc2	equ	0xFDE
 24439                           postdec2	equ	0xFDD
 24440                           plusw2	equ	0xFDB
 24441                           fsr2h	equ	0xFDA
 24442                           fsr2l	equ	0xFD9
 24443                           status	equ	0xFD8
 24444                           
 24445                           	psect	rparam
 24446  0000                     tosu	equ	0xFFF
 24447                           tosh	equ	0xFFE
 24448                           tosl	equ	0xFFD
 24449                           pclatu	equ	0xFFB
 24450                           pclath	equ	0xFFA
 24451                           tblptru	equ	0xFF8
 24452                           tblptrh	equ	0xFF7
 24453                           tblptrl	equ	0xFF6
 24454                           tablat	equ	0xFF5
 24455                           prodh	equ	0xFF4
 24456                           prodl	equ	0xFF3
 24457                           intcon	equ	0xFF2
 24458                           indf0	equ	0xFEF
 24459                           postinc0	equ	0xFEE
 24460                           fsr0h	equ	0xFEA
 24461                           fsr0l	equ	0xFE9
 24462                           wreg	equ	0xFE8
 24463                           indf1	equ	0xFE7
 24464                           postdec1	equ	0xFE5
 24465                           fsr1h	equ	0xFE2
 24466                           fsr1l	equ	0xFE1
 24467                           indf2	equ	0xFDF
 24468                           postinc2	equ	0xFDE
 24469                           postdec2	equ	0xFDD
 24470                           plusw2	equ	0xFDB
 24471                           fsr2h	equ	0xFDA
 24472                           fsr2l	equ	0xFD9
 24473                           status	equ	0xFD8
 24474                           
 24475                           	psect	temp
 24476  000051                     btemp:
 24477                           	opt stack 0
 24478  000051                     	ds	1
 24479  0000                     int$flags	set	btemp
 24480  0000                     wtemp6	set	btemp+1
 24481                           tosu	equ	0xFFF
 24482                           tosh	equ	0xFFE
 24483                           tosl	equ	0xFFD
 24484                           pclatu	equ	0xFFB
 24485                           pclath	equ	0xFFA
 24486                           tblptru	equ	0xFF8
 24487                           tblptrh	equ	0xFF7
 24488                           tblptrl	equ	0xFF6
 24489                           tablat	equ	0xFF5
 24490                           prodh	equ	0xFF4
 24491                           prodl	equ	0xFF3
 24492                           intcon	equ	0xFF2
 24493                           indf0	equ	0xFEF
 24494                           postinc0	equ	0xFEE
 24495                           fsr0h	equ	0xFEA
 24496                           fsr0l	equ	0xFE9
 24497                           wreg	equ	0xFE8
 24498                           indf1	equ	0xFE7
 24499                           postdec1	equ	0xFE5
 24500                           fsr1h	equ	0xFE2
 24501                           fsr1l	equ	0xFE1
 24502                           indf2	equ	0xFDF
 24503                           postinc2	equ	0xFDE
 24504                           postdec2	equ	0xFDD
 24505                           plusw2	equ	0xFDB
 24506                           fsr2h	equ	0xFDA
 24507                           fsr2l	equ	0xFD9
 24508                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    730
    Data        25
    BSS         814
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     62     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      2     233
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_4(CODE[14]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK3[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode2->_Console_Render
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_song_play->_eusart_putch
    _irobot_move_straight->_irobot_move
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _irobot_rotate->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1088967
                                              0 BANK3      2     2      0
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  179680
                                             44 BANK0      2     2      0
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    17      8    4971
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84405
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84405
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _mode1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  909287
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
                      _irobot_rotate
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                        5     1      4    3975
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              2 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      4     1      3
                                              0 BANK1      2     2      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (7) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
   _mode1
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_Dequeue *
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release *
     _MXK_SwitchTo *
       _delay_us
     _MXK_TestButton *
       _Port_GetPin
     _irobot_move_straight *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play *
       _eusart_putch
     _irobot_stop_motion *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      2      E9      11       91.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     483      12        0.0%
DATA                 0      0     5AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 08 19:56:40 2017

                                 _update_angle 4976                                  i2_Timer0_Stop 4A4C  
                             SPI_Init@pChannel 00EC                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 2358                                              _A 004C  
                        __end_of_irobot_rotate 3CF0                                              l8 2672  
                                            _a 004D                                              _i 0038  
                                            _j 0037                                              _l 004F  
                                            _u 0036                                              _w 0050  
                          _irobot_led_power_on 483E                                             l11 1E8E  
                                           l12 1E78                                             l90 1DC4  
                                           l85 1CC0                                             l87 1D2E  
                                           l89 1D9A                                   ___awdiv@sign 00C0  
                          ___wmul@multiplicand 00BD                                  _HMI_DIPSwitch 48C0  
                           LCD_DrawField@pSize 00D3                             LCD_DrawField@count 00D9  
                   __end_of_irobot_stop_motion 4228                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 49FA                                            l120 32F2  
                                          l121 3308                                            l122 331E  
                                          l220 3DF8                                            l117 3334  
                                          l221 3DBC                                            l118 32DC  
                                          l230 3FF2                                            l222 3E08  
                                          l223 3DDA                                    ?_LED_Toggle 0001  
                                          l234 41D0                                            l235 41A0  
                                          l227 400E                                            l403 194E  
                                          l412 162A                                            l228 3FD6  
                                          l340 2FA0                                            l404 18EE  
                                          l421 15BE                                            l413 14C0  
                                          l237 41B8                                            l341 2FAE  
                                          l405 197E                                  ??_Console_Tab 00C3  
                                          l414 1646                                            l430 27E6  
                                          l350 30A8                                            l342 2FBC  
                                          l510 0CBA                                            l406 1906  
                                          l415 14E6                                            l351 3038  
                                          l343 2FCA                                            l511 0DCA  
                                          l407 191E                                            l183 315C  
                                          l600 000C                                            l432 2810  
                                          l344 2FD8                                            l512 0CDC  
                                          l408 1936                                            l184 3136  
                                          l417 1552                                            l601 01A0  
                                          l433 2840                                            l353 3046  
                                          l337 3002                                            l345 2FE6  
                                          l610 0228                                            l602 003E  
                                          l354 3054                                            l346 2FF4  
                                          l338 2F92                                            l370 2F32  
                                          l611 0276                                            l603 01B2  
                                          l427 286A                                            l355 3062  
                                          l363 2F5C                                            l371 2F40  
                                          l531 0774                                    ?_HMI_GetBar 0001  
                                          l612 02C4                                            l604 00EC  
                                          l356 3070                                            l372 2F4E  
                                          l364 2EEC                                            l532 0798  
                                          l516 0D24                                            l357 307E  
                                          l509 0DAE                                            l614 03A6  
                                          l358 308C                                            l366 2EFA  
                                          l526 07B8                                            l615 039E  
                                          l607 0312                                            l359 309A  
                                          l367 2F08                                            l519 0D6C  
                                          l616 03B8                                            l608 01DA  
                                          l368 2F16                                            l528 07D6  
                                          l393 3EC8                                            l617 03A2  
                                          l609 0330                                            l369 2F24  
                                          l529 0754                                            l483 0B1A  
                                          l732 3276                                            l476 0BF2  
                                          l900 0892                                            l733 326A  
                                          l389 3BBA                                            l477 0A64  
                                          l397 4194                                            l901 0896  
                                          l726 2BB0                                            l478 0C0E  
                                          l486 0B86                                            l654 46AA  
                                          l910 08BA                                            l902 089A  
                                          l727 2BA4                                            l479 0AAE  
                                          l655 46A2                                            l911 08BE  
                                          l903 089E                                            l824 3AEE  
                                          l832 3F80                                            l912 08C2  
                                          l904 08A2                                            l673 45DC  
                                          l657 46A6                                            l681 3A28  
                                          l913 08C6                                            l905 08A6  
                                          l921 39F8                                            l914 08CA  
                                          l906 08AA                                            l922 39C4  
                                          l930 2586                                            l819 3600  
                                          l915 08CE                                            l907 08AE  
                                          l684 3A3E                                            l916 08D2  
                                          l908 08B2                                            l860 07F2  
                                          l781 4462                                            l597 001A  
                                          l853 08DA                                            l917 08D6  
                                          l909 08B6                                            l861 07F6  
                                          l598 0002                                            l678 3A64  
                                          l686 3A4E                                            l870 081A  
                                          l862 07FA                                            l854 07DE  
                                          l599 002A                                            l679 3A18  
                                          l871 081E                                            l863 07FE  
                                          l776 429E                                            l880 0842  
                                          l872 0822                                            l864 0802  
                                          l856 07E2                                            l928 2606  
                                          l881 0846                                            l873 0826  
                                          l865 0806                                            l857 07E6  
                                          l929 25D6                                            l890 086A  
                                          l882 084A                                            l874 082A  
                                          l866 080A                                            l858 07EA  
                                          l891 086E                                            l883 084E  
                                          l875 082E                                            l867 080E  
                                          l859 07EE                                            l892 0872  
                                          l884 0852                                            l876 0832  
                                          l868 0812                                            l893 0876  
                                          l885 0856                                            l877 0836  
                                          l869 0816                                            l894 087A  
                                          l886 085A                                            l878 083A  
                                          l990 348C                                            l895 087E  
                                          l887 085E                                            l879 083E  
                                          l983 31FA                                            l976 351A  
                                          l896 0882                                            l888 0862  
                                          l992 349C                                            l984 317E  
                                          l897 0886                                            l889 0866  
                                          l985 31F6                                            l978 352A  
                                          l898 088A                                            l899 088E  
                                          l997 3E2E                                            l999 3E52  
                                          _PR2 000FCB                                            _dip 0336  
                                          _val 0081                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D4                                   _Word_GetPair 4436  
                                          prod 000FF3                            MXK_SwitchTo@pModule 00C2  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CB                             Console_MakeField@y 00CC  
                                   _TXSTA1bits 000FAD                                _update_distance 4964  
                                 Console_Tab@c 00CA                                   Console_Tab@i 00C9  
                          LCD_DrawField@pField 00CD                                   Console_Tab@t 00C8  
                                   i2_delay_us 437A                           Port_Set@TypeRequired 00DD  
                            Console_FormFeed@x 00BD                              Console_FormFeed@y 00BE  
                          LCD_DrawField@pPoint 00CF                                 ?_LCD_DrawField 00CD  
                        Port_SetPinType@Output 00E5                                Port_SetPin@Type 00CE  
                              Port_SetPin@pPin 00CC                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C4                                __end_of_LED_Set 4020  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 2E3C  
                                 _Word_SetPair 426E                                           l1000 3E6E  
                                         l1010 28DA                                           l1004 3C5A  
                                ?_Byte_GetZone 00BB                                           l1005 3C88  
                                         l1200 2AD0                                           l1040 1674  
                                         l1201 2B24                                           l1009 28E6  
                                         l1041 167A                                           l1202 2B40  
                                         l1042 1680                                           l1043 1686  
                                         l1204 2B6A                                           l1036 17D0  
                                         l1044 168C                                           l2020 3BCA  
                                         l2100 1A5A                                           l1205 2B50  
                                         l1045 1692                                           l1037 166E  
                                         l2021 3BCE                                           l2110 42E2  
                                         l1062 1076                                           l2022 3BD2  
                                         l1063 10A4                                           l1207 2B7C  
                                         l1047 1738                                           l2023 3BD6  
                                         l2031 250C                                           l1056 0F06  
                                         l2024 3BDA                                           l2040 248C  
                                         l2032 245E                                           l1153 12E4  
                                         l1057 10CC                                           l2017 3BEA  
                                         l2025 3BDE                                           l2114 3AD8  
                                         l2106 42EE                                           l1082 2760  
                                         l1058 0F0E                                           l2026 3BE2  
                                         l2018 3BC6                                           l2042 24A0  
                                         l2034 2468                                           l2115 3A9A  
                                         l1059 0F38                                           l2027 3BE6  
                                         l2035 246E                                           l2140 3F06  
                                         l2108 42DA                                           l1084 2768  
                                         l2036 2474                                           l1077 2730  
                                         l2045 24CC                                           l2037 247A  
                                         l2070 3468                                           l2062 3424  
                                         l2054 33EA                                           l2038 2480  
                                         l2310 407C                                           l2135 2CBC  
                                         l1079 2740                                           l2047 24E0  
                                         l2039 2486                                           l2311 4082  
                                         l2152 3CB0                                           l2312 4088  
                                         l2154 3CB6                                           l2066 3448  
                                         l2058 3404                                           l2163 420C  
                                         l2091 1A10                                           l2156 3CD8  
                                         l2092 19CA                                           l2308 4076  
                                         l2333 1374                                           l1630 229E  
                                         l2334 1310                                           l2326 12F4  
                                         l2094 1A40                                           l1631 22FA  
                                         l2343 141C                                           l2335 1328  
                                         l2327 1308                                           l2095 1A24  
                                         l1632 22DE                                           l2520 299A  
                                         l2344 147A                                           l2328 1338  
                                         l2336 1332                                           l2345 1422  
                                         l2337 13AC                                           l2097 1B10  
                                         l1730 430E                                           l2266 36A4  
                                         l2098 1A54                                           l2290 2222  
                                         l1627 2346                                           l2523 29DC  
                                         l2339 13C6                                           l2099 1A9C  
                                         l2291 2206                                           l2700 2A36  
                                         l1724 4404                                           l1732 4336  
                                         l1628 233C                                           l2524 29EA  
                                         l2516 2966                                           l2292 21BC  
                                         l1629 22BC                                           l2525 29FE  
                                         l2517 297C                                           l2285 210E  
                                         l1726 4432                                           l2703 2AA0  
                                         l1735 4872                                           l2519 29A6  
                                         l2704 2AB2                                           l2288 212A  
                                         l1827 1FE2                                           l1828 2002  
                                         l2752 362E                                           l2753 3622  
                                         l1873 44A8                                           l2762 3D74  
                                         l2763 3D68                                           l2756 3664  
                                         l2757 3672                                           l2766 3D9E  
                                         l2767 3DAC                                           l2699 2A46  
                               ??_Console_Init 00BB                          Port_SetPinType@pInput 00E1  
                                         STR_1 FFFB                                           STR_2 FFBF  
                                         STR_3 FFFB                                           STR_4 FFED  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 30D8                                           u7000 25F2  
                                         u7010 3C56                                           u7020 3C80  
                                         u7100 29AC                                           u7200 3B2C  
                                         u8000 227C                                           u8010 2290  
                     __end_of_irobot_song_play 4964                                           u7140 2A4C  
                                         u8020 22D0                                           u7320 3FB8  
                                         _PIR1 000F9E                                           u8130 1DD2  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u6700 359A                                           u7260 4140  
                                         u8230 10B4                                           u8160 3582  
                          __end_of_GetPortTRIS 2F8C                                           u8320 3CA4  
                                         u8400 1408                                           u7505 061E  
                                         u7265 413A                                           u7290 204E  
                                         u8090 1CBE                                           u7275 1F9A  
                                         u7515 069C                                           u6660 3240  
                                         u8420 1486                                           u7525 06DE  
                                         u6734 3D0C                                           u7550 4578  
                                         u7374 33AE                                           u6910 3D7A  
                                         u6735 3D06                                           u7535 0720  
                                         u7375 33A8                                           u6680 32A6  
                                         u6744 3D3E                                           u6745 3D38  
                                         u7465 044C                                           u6850 34E0  
                                         u6667 3236                                           u7475 0464  
                                         u7555 4572                                           u6764 2BEC  
                                         u6860 34E6                                           u6765 2BE6  
                                         u6685 32A0                                           u7485 047C  
                                         u6774 2C1E                                           u6790 425C  
                                         u6775 2C18                                           u6935 4996  
                                         u7495 049E                                           u6936 4998  
                                         u7840 3F78                                           u7920 1984  
                                         u7680 42CE                                           u6880 3634  
                                         u7818 1F5E                                           u9610 2102  
                                         u6795 4256                                           u9620 2124  
                                         u7758 26DE                                           u7960 27AA  
                                         u7880 384C                                           u7768 1E22  
                                         u7769 1E36                                           u7970 27B6  
                                         _SPI1 0372                                           _SPI2 037D  
                                         u9558 43CE                                           u9559 43E4  
                                         u9648 2188                                           u9649 219C  
                                         _TMR0 000FD6                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00C0                                           _gISR 0064  
                           Event_DIPSwitch@Bar 00D5                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00BE                                  _iRVirtualWall 002E  
                           SPI_MaxSpeed@pInput 00CA                                  ?_Byte_SetByte 00BB  
                                ?_Byte_SetPair 00C6                                __end_of_SPI_DCS 45EA  
                                         _main 4070                     irobot_leds@powerLuminosity 00CD  
                                         _init 367C                                           _mode 0075  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C6  
                                         _itos 2548                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00BB                                           btemp 0051  
                                         _zero 004E                                  ??_Byte_SetBit 00BF  
                           __size_of_LCD_Reset 0050                                           prodh 000FF4  
                                         prodl 000FF3                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ?_SPI_DisableISR 00BB                            HMI_SetButton@pValue 00C1  
                                Console_Init@x 00BD                                  Console_Init@y 00BE  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FFB1  
                         Set_Rotation@rotation 00C1                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                             _irobot_init_song_0 472E  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 3F7E  
                             __end_of_LCD_Init 1E10                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 3E18  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F6  
                      GetPortProperties@pInput 00BD                                  ??_Button_Poll 00D9  
                             __end_of_HMI_Init 12E6                                          l11006 2B6A  
                                        l12000 3830                                          l11126 3AEE  
                                        l11134 3B2C                                          l11230 3F80  
                                        l11128 3B00                                          l11232 3F92  
                                        l12054 18E4                                          l11192 1FE2  
                                        l12240 1D2E                                          l12250 1DD2  
                                        l12090 2726                                          l12262 3510  
                                        l10822 3492                                          l12096 2736  
                                        l10816 3482                                          l12338 12B8  
                                        l12268 3520                                          l12516 13CC  
                                        l11832 49BA                                          l12296 0F2E  
                                        l10954 25F2                                          l11972 3F4E  
                                        l13636 408C                                          l11976 3F5C  
                                        l11996 3822                               __end_of_HMI_Poll 37DE  
                                        _I2C1T 0040                                          _I2C2T 03C4  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___awdiv 2A08                          irobot_rotate@isScript 00D8  
                                        ?_itos 00C7                                _Event_DIPSwitch 461A  
                              __end_of___lldiv 2AC4                        __size_of_HMI_LeftSwitch 0018  
                              ___awdiv@divisor 00BD                                          _INDEX 003A  
                              __end_of___lwdiv 367C                                          _MASKS FDC1  
                              __end_of___lwmod 3DB6                                          i2l430 2E54  
                                        i2l432 2E7A                                          i2l433 2EA4  
                                        i2l427 2ECA                                          i2l732 3740  
                                        i2l733 373A                                          i2l832 437C  
                                        i2l781 4608                                ___awdiv@counter 00BF  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00D1                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B0                                          _PortB 03A6  
                                        _PortC 00A9                                          _PortD 009F  
                                        _PortE 0095                                          _PortF 03BA  
                                        _PortG 039C                        __end_of_Port_SetPinType 1668  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C7  
                        ??_irobot_led_power_on 00CF                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00D0                                __end_of_dpowers FDC1  
                               ??_Byte_GetZone 00C0                      irobot_move@moveTurnRadius 00CD  
                                        _mode1 4A5C                                          _mode2 20D6  
                                        _mode3 4A58                                          _mode4 1404  
                               Button_Poll@Pin 00DE                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 294A                               __end_of_MXK_Init 1C9E  
                     __size_of_sort_iRBumpDrop 008E                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 499A  
                             __end_of_SPI_Init 041E                               __end_of_SPI_Send 3A82  
                        __end_ofi2_MXK_Release 4A58                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 3A16  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00BE  
                               ??_Byte_SetPair 00CA                                 ??_Byte_SetQuad 00CA  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C1  
                                        status 000FD8                                          wtemp6 0052  
                              _Configure_GPIOs 393A                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BC  
                               _LCD_Word_Write 478A                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 4A5A                    __size_of_Port_CheckPairType 006A  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00CB  
                                 ?_irobot_init 0001                                __initialization 2CE4  
                                 ?_irobot_move 00CB                            __end_of_Byte_GetBit 458A  
                       irobot_leds@powerColour 00CC                                   __end_of_main 40BC  
                                 __end_of_init 36F4               irobot_query_and_update@packetIDs 00D0  
                                 __end_of_itos 2620                           HMI_SetButton@reindex 00BD  
                                 SPI_Send9@dat 0089                            __end_of_Byte_SetBit 3D54  
                             __end_of_InitList FD97                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 499A                        __end_of_update_distance 4976  
                  __size_of_Port_CheckPortType 0048                                         ??_main 03E7  
                                       ??_init 00F9                                         ??_itos 00CB  
                      _Console_MakeField$10974 00C9                                  __activetblptr 000003  
                            Port_SetPin@pInput 00CA                              __end_of_LCD_Reset 4070  
                            Port_SetPin@pValue 00CD                                      ??_LED_Set 00D0  
                            _MXK_InitDIPSwitch 47E4                              GetPortPORT@pInput 00BD  
                       Port_CheckPairType@Pin1 00E5                         Port_CheckPairType@Pin2 00E6  
                            __end_of_LCD_Write 46EA                                    _GetPortPORT 3032  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 2EE6  
                              ??_LCD_DrawField 00D7                     __end_of_PortProperty_Valid 3604  
                             __end_of_Port_Set 07D8                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 26F4  
                          __end_of_Button_Poll 1F76                              Word_GetPair@pPair 00C9  
                      LCD_FillRectangle@pPoint 00C6                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 3352                                      ??_SPI_DCS 00BD  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                _HMI_SetNumber 4676                         Port_SetQuadType@Output 00F5  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BB  
                                       ?_putch 0001                               ??_Console_Render 00DE  
                                ToSegment@pCHR 00BB                               _Console_FormFeed 3470  
                       Port_SetQuadType@pInput 00F1                                         i2l1630 23BE  
                                       i2l1631 240A                                         i2l1632 23F6  
                                       i2l1730 4532                                         i2l1627 2446  
                                       i2l1732 4552                                         i2l1628 243C  
                                       i2l1629 23D4                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                                         i2l8320 438C  
                                       i2l8318 437C                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 47A8  
                               _Timer0_Restart 49EE                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F6                                         _TXREG1 000FAE  
                               i2_MXK_SwitchTo 4520                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BD                                     _Reset_High 47C6  
                           Console_Render@temp 00E0                                 ??_HMI_UpSwitch 00C1  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 00D2  
                             __end_of_delay_ms 3B56                                   LED_Init@pLED 00E8  
                             __end_of_delay_us 3FD0                                  ??_Timer2_Init 00CC  
                                ??_Timer0_Stop 00BB                                     _Timer0_ISR 4648  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 00D5  
                               __CFG_XINST$OFF 000000                       __size_of_HMI_InitButtons 0006  
                   __end_of_load_iRScriptStack 3AEC                                         _iRWall 0033  
                                   _Motor_Step 2232                            rx_assign@byteNumber 00BD  
                      __end_of_Event_DIPSwitch 4648                                         ___wmul 44EA  
                              ??_HMI_DIPSwitch 00C1                  load_iRScriptStack@bytesToLoad 00C9  
                                    ??___awdiv 00BF                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                         _lMotor 0083  
                                    ??___lldiv 00C3                                         _lQueue 0067  
                                   _TestButton 0392                                      ??___lwdiv 00BF  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C6  
                     __end_of_Port_SetQuadType 0CB2                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 3588  
                            GetPortTRIS@pInput 00BD                             __size_of_Reset_Low 001E  
                                       clear_0 2D4C                                         clear_1 2D5E  
                                       clear_2 2D6A                                         clear_3 2D76  
                                       clear_4 2D82                               ___awdiv@quotient 00C1  
                   irobot_stop_motion@isScript 00D4                                  ?_eusart_getch 0001  
                                   Port_Init@i 0107                                     _iRDistance 007D  
                            __end_of_MXK_Queue 49E0                     __end_ofHMI_SetButton@F7213 FDCE  
                                   _iRBumpLeft 008D                                         _printf 12E6  
                                   _iRBumpDrop 0034                      __end_of_MXK_InitDIPSwitch 4802  
                                   _iRDropLeft 008C                                 HMI_SetButton@v 00C2  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BC  
                                  _Console_Tab 2888                            LCD_Word_Write@value 00C0  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BE                       Port_CheckPortType@Output 00F4  
                           _twos_complement_of 42B4                                ??i2_Port_SetPin 0014  
                                 __mediumconst FCE4                    __end_ofTimer2_Init@PRESCALE FDD1  
                     Port_CheckPortType@pDrive 00F3                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00F1                                  ??_Port_SetPin 00CE  
                                    ??_reverse 00BF                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E1                                         putch@c 00CF  
                               ?_HMI_SetNumber 00D1                                 i2_Word_GetPair 45EA  
                      __end_of_Configure_GPIOs 39AA                            irobot_leds@isScript 00CE  
                             ??_MXK_TestButton 00C1                         __end_of_Timer0_Restart 49FA  
                                Set_Rotation@m 00C0                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BB                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 4556  
                                 i2delay_us@us 0001                          _update_bump_and_cliff 44B0  
                              ?_LCD_Word_Write 00C0                                     __accesstop 0060  
                      __end_of__initialization 2D88                                      ?_LCD_Fill 00C4  
        irobot_query_and_update@packetVariable 00D4                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00ED                                    _Byte_GetBit 4556  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 4A06  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C3  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BB  
                                  _Byte_SetBit 3CF0                                  __end_of_MASKS FDCA  
                               _PortA_Property FFBD                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 00C6                                      LCD_Fill@j 00C7  
                          load_iRScriptStack@i 00CA                                      LCD_Init@i 00F2  
                               __pcstackCOMRAM 0001                                 _PortB_Property FFBB  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 4A32  
                                 __pidataBANK3 4A1A              irobot_move_straight@straightSpeed 00D4  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 483E  
                              Console_Render@x 00E5                                Console_Render@y 00E6  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD97                           __end_of_Byte_GetZone 32BA  
                                __end_of_mode1 4A5E                                  __end_of_mode2 2232  
                                __end_of_mode3 4A5A                                  __end_of_mode4 1406  
                         ??_twos_complement_of 00BD                              irobot_leds@LEDBit 00CB  
                               _PortC_Property FFB9                                  __end_of_putch 49A8  
                               ??_eusart_getch 00BB                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 20D6                            __end_of_Timer0_Stop 4A46  
                                    ?_SPI_Init 00E8                               ?_update_distance 0001  
                                    ?_SPI_Send 00BB                                 ??_eusart_putch 00BB  
                                  _Button_Init 2620                              Port_SetType@pType 00F7  
                                  _Button_Poll 1E10                           __end_of_Byte_SetByte 49D2  
                         __end_of_Byte_SetPair 470C                                 _HMI_LeftSwitch 4920  
                               _PortD_Property FFB7                           __end_of_Byte_SetQuad 472E  
                                 ??_LED_Toggle 00D3                                   ??_HMI_GetBar 00BB  
                   eusart_putch@eusartSendChar 00BB                           __end_of_Byte_SetZone 2C34  
                               _HMI_DownSwitch 48D8                                  SPI_Send@pData 00BD  
                        __end_of_MXK_DIPSwitch 48C0                                   ??_HMI_SetBar 00BB  
                     __size_of_get_packet_size 0066                                 _PortE_Property FFB5  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 461A  
                               _PortF_Property FFB3                        Port_CheckQuadType@Pair1 00EE  
                      Port_CheckQuadType@Pair2 00EF                       MXK_BlockSwitchTo@pModule 00C2  
                                      ??_mode1 00BB                                        ??_mode2 00E7  
                                      ??_mode3 00BB                                        ??_mode4 00BB  
                            _Console_Backspace 3E18                                ?_Timer0_Restart 0001  
                                      ??_putch 00CF                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 433A                              __end_of_ToSegment 0A5C  
                               _PortG_Property FFB1                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 426E                             _irobot_stop_motion 41E2  
                      Port_CheckQuadType@pQuad 00EC                                reverse@iterator 00C0  
                             ??_SPI_DisableISR 00BD                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 47C6                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C6  
                                   ??_LCD_Init 00F0                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 2888                         __end_of_PortA_Property FFBF  
             irobot_led_power_on@powerOnColour 00CF                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BB                                     ??_LED_Init 00E8  
                           Byte_SetByte@pValue 00BD                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                                     ??_HMI_Init 00F6  
                           ??_irobot_song_play 00BC                                     ??_HMI_Poll 00DF  
                                ?_Timer2_Clear 0001                        Port_CheckPairType@Props 00E8  
                       __end_of_PortB_Property FFBD                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 1998                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E3                             __end_of_LED_Toggle 41E2  
                           __end_of_HMI_GetBar 4A40                       LCD_FillRectangle@pColour 00C4  
                                   _angleTotal 0077                            ??_Console_Backspace 00BD  
                            Set_Addr_Window@xe 00C1                              Set_Addr_Window@ye 00C2  
                            Set_Addr_Window@xs 00C3                              Set_Addr_Window@ys 00C0  
                           Byte_SetPair@pInput 00C6                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C9                             __end_of_HMI_SetBar 4A1A  
                       __end_of_PortC_Property FFBB                             Word_GetPair@pInput 00C7  
                               ??_Set_Rotation 00C0                                      ?_Port_Set 00CA  
                                      ?___wmul 00BB                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00C0                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 4938                         __end_of_PortD_Property FFB9  
                                      _ADC_AN0 03DA                                        _ADC_AN1 03D5  
                                      _ADC_AN2 03D0                                        _ADC_AN3 03CB  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BB  
                            _Console_MakeField 26F4                              ??_Console_NewLine 00BB  
                       __end_of_HMI_DownSwitch 48F0                                     ??_SPI_Init 00EE  
                       Event_TestButton@pState 00D4                                     ??_SPI_Send 00BE  
                                      ?_printf 00D0                              ??_HMI_InitButtons 00BB  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FFB7  
                          Console_Render@F6956 03DF                             ?_Console_MakeField 00C0  
                                      _COUNTER 0029                                ??_HMI_SetButton 00BB  
                         __end_of_HMI_UpSwitch 4908                           ??_irobot_stop_motion 00D4  
                                      _LED_Set 3FD0                        _Console_IncrementCursor 3C26  
                       __end_of_PortF_Property FFB5                                    _gBackcolour 0087  
                              ??_HMI_SetNumber 00D3                                      _I2C1_Done 0333  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0330  
                                    _I2C1_More 032D                                      _I2C2_More 032A  
                                    ?_delay_ms 00BB                      __end_of_Console_Backspace 3E74  
                                    ?_delay_us 00BB                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 4820                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                         __end_of_PortG_Property FFB3  
                          ??_Console_MakeField 00C2                                        _SPI_DCS 45BA  
                         __size_ofi2_MXK_Queue 000E                               ?_Configure_GPIOs 0001  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 0064  
                         i2Byte_GetZone@Offset 0008                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                              Event_TestButton@j 008F  
                                   ??_Mode_Set 00BB                                 ??_Timer2_Clear 00BB  
                                      _Font5x7 FDD1                           i2Byte_GetZone@pChunk 0004  
                         i2Byte_GetZone@pInput 0001                           SPI_DisableISR@pInput 00BB  
                                ?_Port_GetQuad 00BB                                Byte_SetBit@pBit 00BD  
                         Port_TogglePin@pInput 00CF                          __end_ofi2_Byte_SetBit 4108  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00BD  
                                  _Timer2_Init 1F76                                        __Lparam 0000  
                                  _Timer0_Stop 4A40                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FDB7  
                                      _iRAngle 007B                                  LCD_Write@mode 00BE  
                                   ??_Port_Set 00CD                      __end_of_Console_MakeField 27C4  
                            _Console_PrintChar 1668                                  ?_Port_SetType 00F5  
                                      _gCursor 0047                                        ___awdiv 294A  
                        ??_Console_ClearCursor 00BB                                        _lBuffer 04AA  
                                      ___lldiv 2A08                                __size_of___wmul 0036  
                                      ___lwdiv 3604                                        ___lwmod 3D54  
                              ?_HMI_LeftSwitch 0001                       __end_of_Console_FormFeed 34FE  
                           ?_Console_PrintChar 0001                                        __pcinit 2CE4  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      __ptext0 4070                                        __ptext1 1404  
                                      __ptext2 4A58                                        __ptext3 20D6  
                                      __ptext4 4964                                        __ptext5 44B0  
                                      __ptext6 4976                                        __ptext7 1998  
                                      __ptext8 2458                                        __ptext9 33E2  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 485A                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FDB7                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CF                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D4                                   ?_GetPortPORT 00BB  
                                 ?_GetPortTRIS 00BB                            ??_Console_PrintChar 00CB  
                                  _Port_GetPin 4228                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 00B7                            LCD_DrawRectangle@p4 00B3  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00BD  
                                   ??_delay_us 00BD                                        _reverse 39AA  
                                    _DIPSwitch 0388                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 27C4                                    _iRBumpRight 008E  
                               LCD_DrawField@i 00DD                                      _LCD_Reset 4020  
                          __size_of_Motor_Step 0126                                      _LCD_Write 46C8  
                                  _iRDropRight 002D                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00BB                           end_of_initialization 2D88  
                            ??_get_packet_size 00BB  irobot_query_and_update@numberOfPacketRequests 00D3  
                                   delay_us@us 00BB                              ??_HMI_SetSegments 00BE  
                      Console_PrintChar@pInput 00CE                                   _Console_Init 34FE  
                         __end_of_eusart_getch 4A2A                        _irobot_query_and_update 1998  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 3BC0  
                         __end_of_eusart_putch 49C4                                        itos@Out 00CF  
                               ??_Port_GetQuad 00BE                             _PortProperty_Valid 3588  
                           Byte_SetQuad@pInput 00C6                             SPI_MinSpeed@pInput 00CA  
                           Byte_SetQuad@pValue 00C9                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 00BF  
                        __size_of_Byte_GetZone 009C                              ??_HMI_RightSwitch 00C1  
                              ___lldiv@counter 00C7                      __end_of_Console_PrintChar 1806  
                               ??_Port_SetType 0100                     __end_of_Port_CheckQuadType 3ECE  
                                      printf@c 00DF                                        printf@f 00D0  
                               Port_Init@pPort 0104                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00C4  
                            __end_of_rx_assign 2548                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00CA  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 419A  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 43BA  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 3C8C  
                            ?_Port_SetQuadType 00F1                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BF                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F5  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C1  
                        Console_Render@lCursor 00E1                             _load_iRScriptStack 3A82  
                                    _MXK_Queue 49D2                               __CFG_CPUDIV$OSC1 000000  
                             Byte_GetZone@pMax 00BD                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C7  
                              _Set_Addr_Window 2D92                                 SPI_Init@pClock 00E8  
                             ??_LCD_Word_Write 00C2                                _sort_iRBumpDrop 33E2  
                        __end_of_LCD_DrawField 317C                                 Port_Set@pInput 00CA  
                               SPI_Init@pInput 00EE                           ??_PortProperty_Valid 00CE  
                               Port_Set@pValue 00CC                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 3352                                     ?_LCD_Write 00BE  
                                 _Byte_GetPair 4820                             HMI_SetButton@F7213 FDCA  
                          ?_load_iRScriptStack 00BB                                   _Byte_GetZone 321E  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 00DB  
                            LCD_DrawField@ymax 00DC                                 _Port_TogglePin 458A  
                             _Event_TestButton 4474                           Port_SetPinType@Props 00E6  
                                 ?_Byte_GetBit 00BB                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 49C4                                   _Byte_SetPair 46EA  
                                 _Byte_SetQuad 470C                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 2B7E                           Port_SetPinType@pType 00E4  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BB  
                                ?_SPI_MaxSpeed 00CA                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BB                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00CA  
                        __end_ofi2_Timer0_Stop 4A52                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D4  
                         ??_load_iRScriptStack 00C5                   __end_of_irobot_move_straight 48A8  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 4520  
                        __end_of_HMI_DIPSwitch 48D8                                  __pidataCOMRAM 4A06  
                                 ?_Button_Init 0100                                   ?_Button_Poll 00D6  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 4A32                                 __end_of_printf 14A8  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BB  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C7  
                             ??_Timer0_Restart 00BB                             Port_SetType@Output 00F8  
                          start_initialization 2CE4                                     ?_MXK_Queue 00BB  
                     PortProperty_Valid@Errors 00D0                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 37DE                             Port_SetType@pInput 00F5  
                                   HMI_Init@in 00F6                            HMI_SetNumber@pInput 00D1  
                        __end_ofi2_Port_SetPin 2EE6                             __end_of_Event_NULL 4A5C  
                       rx_assign@packetIDValue 00BC                         __end_of_Port_TogglePin 45BA  
                                ?_Word_SetPair 00CA                              Byte_SetBit@pInput 00BB  
                               ??_MXK_SwitchTo 00C1                              Byte_SetBit@pValue 00BE  
                           ?_LCD_FillRectangle 00C4                      ??_irobot_query_and_update 00CB  
                          _Console_ResetCursor 474E                    PortProperty_Valid@pPinDrive 00CC  
                         MXK_BlockSwitchTo@CUR 00C1                       PortProperty_Valid@pInput 00CA  
                                i2_MXK_Release 4A52                         LCD_FillRectangle@pSize 00CA  
                               SPI_Send@pInput 00BB                                   ??_Reset_High 00CF  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00CC  
                        Port_SetQuadType@pQuad 00F3                                      _ToSegment 07D8  
                          ??_LCD_FillRectangle 00CE                          Port_SetQuadType@pType 00F4  
                              _Console_NewLine 317C                                 ??_SPI_MinSpeed 00CC  
                                 _HMI_UpSwitch 48F0                                      _Reset_Low 47A8  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 4A46  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D8                                      _gCharSize 00F9  
                             Timer2_Init@INDEX 0091                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                        __size_of_Console_Render 0210  
                                 ??_Motor_Step 00CF                                      _iRAngleSS 031E  
                                    _iRCliffFL 0031                                      _iRCliffFR 0030  
                           Byte_SetZone@Offset 00C4                                       ??___wmul 00BF  
                         ?_Console_ResetCursor 0001                                      _Port_Init 1806  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03DF  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00BE  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BB  
                           Byte_SetZone@pValue 00C0                                  Mode_Set@pMode 00BB  
                                     ??_printf 00D8                        __end_of_Set_Addr_Window 2E3C  
                     Port_CheckQuadType@Output 00F0                        __end_of_sort_iRBumpDrop 3470  
                                    _gLineSize 03E3                       Port_CheckQuadType@pDrive 00ED  
                               ??_Word_GetPair 00CA                       Port_CheckQuadType@pInput 00EA  
                         __end_of_Port_GetQuad 4152                                  _selectedMode1 0073  
                                _selectedMode2 0071                                  _selectedMode3 006F  
                                _selectedMode4 006D                      __end_of_LCD_FillRectangle 3852  
                                  __pbssBIGRAM 04AA                                       ?_LED_Set 00CF  
                                  __pbssCOMRAM 0029                             __end_of_Reset_High 47E4  
                                __pcstackBANK0 00BB                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03E7  
                      ??_update_bump_and_cliff 00D8                                     itos@Length 00CD  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CE  
                     __size_of_update_distance 0012                             __end_of_Timer0_ISR 4676  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 00D4  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 0EDC  
                                     ?_SPI_DCS 00BB                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 00CF                                  ??_eusart_init 00BB  
                                  ??_LCD_Write 00BF                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Step 2358                          Timer2_Init@pFrequency 00C8  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 00E7  
            twos_complement_of@complementValue 00BB                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00E4                       Port_CheckPairType@pInput 00E1  
                               reverse@tempVar 00BF                             _MXK_InitTestButton 4802  
                                   ?_Reset_Low 0001                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C8                               ??_HMI_LeftSwitch 00C1  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00BB  
                                ??_irobot_leds 00CE                                  ??_irobot_init 00BC  
                              ??_irobot_rotate 00D8                                  ??_irobot_move 00CF  
                                _lStepFunction 006A                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C8                               ??_HMI_DownSwitch 00C1  
                                    __pintcode 1408                                  __pmediumconst FCE4  
                        ??_Console_ResetCursor 00BB                                       ?___awdiv 00BB  
                                    __ptext100 47C6                                      __ptext101 419A  
                                    __ptext110 4A2A                                      __ptext102 458A  
                                    __ptext111 46A0                                      __ptext103 27C4  
                                    __ptext120 426E                                      __ptext112 45BA  
                                    __ptext104 4228                                      __ptext121 46EA  
                                    __ptext113 2620                                      __ptext105 10EC  
                                    __ptext130 34FE                                      __ptext122 3E74  
                                    __ptext114 47E4                                      __ptext106 38C6  
                                    __ptext123 3B56                                      __ptext115 4A46  
                                    __ptext107 0000                                      __ptext140 40BC  
                                    __ptext132 4648                                      __ptext124 3588  
                                    __ptext116 4802                                      __ptext108 1F76  
                                    __ptext141 4520                                      __ptext133 2358  
                                    __ptext125 4436                                      __ptext117 14A8  
                                    __ptext109 2A08                                      __ptext142 437A  
                                    __ptext134 4A4C                                      __ptext126 4820  
                                    __ptext118 3CF0                                      __ptext143 4A52  
                                    __ptext135 49FA                                      __ptext127 321E  
                                    __ptext119 0A5C                                      __ptext144 49E0  
                                    __ptext136 2E3C                                      __ptext128 470C  
                                    __ptext145 0000                                      __ptext137 45EA  
                                    __ptext129 2B7E                                      __ptext138 4876  
                                    __ptext139 36F4                __end_of_irobot_query_and_update 1B1E  
                                    _pShiftVal 007F                                       ?___lldiv 00BB  
                                   ?_Port_Init 0102                                       ?___lwdiv 00BB  
                                     ?___lwmod 00C2                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 2F8C  
                                 _eusart_getch 4A22                    __end_ofTimer0_Init@PRESCALE FDA7  
                              _get_packet_size 3BC0                                   _eusart_putch 49B6  
                           ??_Console_FormFeed 00BB                                _HMI_SetSegments 2AC4  
                           ?_GetPortProperties 00BB                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                                ??i2_MXK_Queue 0004                                    ??_MXK_Queue 00BE  
                  __size_of_irobot_stop_motion 0046                                   ?_Port_GetPin 00BB  
                        __end_of_HMI_SetButton 33E2                           __size_of_Console_Tab 00C2  
                                     ?_reverse 00BB                           irobot_move@moveSpeed 00CB  
                                 ?_Port_SetPin 00CA                          __end_of_HMI_SetNumber 46A0  
                             ___lwdiv@quotient 00C0                                _HMI_RightSwitch 4908  
                               __size_of_mode1 0002                                 __size_of_mode2 015C  
                               __size_of_mode3 0002                                 __size_of_mode4 0002  
                          ??_GetPortProperties 00BD                        __end_of_Console_NewLine 321E  
                         ??_MXK_InitTestButton 00E8                             Byte_GetPair@pInput 00C4  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 4A4C  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 4890  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 4876  
                                     _LCD_Fill 3F26                                       _LCD_Init 1C9E  
                               ___wmul@product 00BF                                       _HMIBoard 0338  
                               i2_Byte_GetZone 36F4                                       _LED_Init 3DB6  
                                    delay_ms@u 00BD                             Button_Poll@pButton 00D6  
                                    delay_us@u 00BD                                       _HMI_Init 10EC  
                                     _HMI_Poll 376A                             MXK_Queue@pCallback 00BB  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 478A  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 437A  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C8                                       _PIR1bits 000F9E  
                                     i2u540_40 23E8                                       i2u444_44 40D0  
                                     i2u444_45 40CC                                       _PIR3bits 000FA4  
                                     i2u445_44 40F6                                       i2u445_45 40F2  
                                     i2u448_40 43A8                                       i2u538_40 239C  
                                     i2u387_40 3716                                       i2u539_40 23B0  
                                     i2u387_47 370C                                       i2u389_40 375E  
                                     i2u389_45 375A                           __size_of_Byte_SetBit 0064  
                                     i2u957_48 4660                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00BC                               HMI_SetBar@pValue 00BB  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E5  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 3032  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 32BA  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 433A  
                           _Port_CheckPairType 3B56                                       _MXK_Init 1B1E  
                              MXK_SwitchTo@CUR 00C1                            __end_of_irobot_leds 3F26  
                                     _SPI_Init 0000                            __end_of_irobot_init 49B6  
                     __end_of_Event_TestButton 44B0                                       _SPI_Send 3A16  
                          __end_of_irobot_move 2CE4                                      _rx_assign 2458  
                                   _ADCON0bits 000FC2                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00C0                              ___wmul@multiplier 00BB  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BF  
                                   printf@flag 00DA                           Timer2_Init@pCPUClock 00D1  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 38C6                                     printf@prec 00D9  
                            Byte_GetBit@pInput 00BB                            Port_SetPinType@pPin 00E3  
                         __size_of_Button_Poll 0166                             _Port_CheckQuadType 3E74  
                                _MXK_DIPSwitch 48A8                            ?_Port_CheckPairType 00E1  
                         __end_of_SPI_MinSpeed 393A                                  ??_MXK_Dequeue 00D1  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 4152                           __end_of_update_angle 4988  
                        Button_Poll@pIncrement 00D8                        PortProperty_Valid@F6830 FDA7  
                         __end_ofi2_Motor_Step 2458                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 2CF8  
                                    copy_data1 2D18                                      copy_data2 2D38  
                                ??_MXK_Release 00BB                         __end_ofi2_Byte_GetPair 4890  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00EA                          ?_irobot_move_straight 00D4  
                       __end_ofi2_Byte_GetZone 376A                            __end_ofi2_MXK_Queue 49EE  
                                    mode2@dist 00E7                            ?_Port_CheckPortType 00F1  
                              itos@destination 00C9                                       _InitList FCE5  
                   __end_of_irobot_init_song_0 474E                           _Motor_Step$intlevel0 2238  
                                     _Mode_Set 4988                             Port_GetQuad@Output 00C0  
                            ??_update_distance 00D8                                    ??_ToSegment 00BB  
                                 _ISR_Function 1408                             Port_GetQuad@pInput 00BB  
                                 _Timer2_Clear 4A2A                           __end_of_Word_GetPair 4474  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E5  
                                  ??_Reset_Low 00CF                                       __Hrparam 0000  
                               _Console_Render 0EDC                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CD                                       _iRCliffL 0032  
                                     _iRCliffR 002F                                 LCD_Write@value 00BF  
                                     _Port_Set 041E                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 42B4  
                      __end_of_get_packet_size 3C26                                    ??_Port_Init 0105  
                      __end_of_HMI_SetSegments 2B7E                           ??_Port_CheckQuadType 00EE  
                             _irobot_song_play 4950                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 43F8                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00F4                               __size_of___lwmod 0062  
                                     _lBufferX 0093                                       _lBufferY 0092  
                          Timer2_Init@PRESCALE FDCE                                     ?_rx_assign 00BC  
                              LCD_Fill@pColour 00C4                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0085  
                      __end_of_HMI_RightSwitch 4920                         Byte_GetZone@pChunkSize 00BF  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BF  
                        __size_of_Port_SetType 022A                                  reverse@length 00BD  
                                    itos@input 00C7                          i2MXK_SwitchTo@pModule 0008  
                          irobot_move@isScript 00D3                                       _delay_ms 3AEC  
                                     _delay_us 3F7E                                       _clearall 0094  
                              ___lwdiv@divisor 00BD                                ___lwdiv@counter 00BF  
                              Port_GetPin@pPin 00BD                                       __ptext10 3BC0  
                                     __ptext11 4A22                                       __ptext20 474E  
                                     __ptext12 12E6                                       __ptext21 3E18  
                                     __ptext13 499A                                       __ptext30 48D8  
                                     __ptext22 433A                                       __ptext14 1668  
                                     __ptext31 48F0                                       __ptext23 41E2  
                                     __ptext15 2888                                       __ptext40 2548  
                                     __ptext32 4908                                       __ptext24 4950  
                                     __ptext16 294A                                       __ptext41 39AA  
                                     __ptext33 4920                                       __ptext25 4890  
                                     __ptext17 3C26                                       __ptext50 37DE  
                                     __ptext42 3D54                                       __ptext34 4938  
                                     __ptext26 376A                                       __ptext18 317C  
                                     __ptext51 30D8                                       __ptext43 3604  
                                     __ptext35 4108                                       __ptext27 1E10  
                                     __ptext19 3470                                       __ptext60 483E  
                                     __ptext52 44EA                                       __ptext44 2AC4  
                                     __ptext36 461A                                       __ptext28 48A8  
                                     __ptext61 3ECE                                       __ptext53 26F4  
                                     __ptext45 07D8                                       __ptext37 4A5A  
                                     __ptext29 48C0                                       __ptext70 4152  
                                     __ptext62 3A82                                       __ptext54 4556  
                                     __ptext46 3352                                       __ptext38 4474  
                                     __ptext71 041E                                       __ptext63 472E  
                                     __ptext55 4A5C                                       __ptext47 4A10  
                                     __ptext39 4676                            ??_MXK_BlockSwitchTo 00C1  
                                     __ptext80 4A40                                       __ptext72 49C4  
                                     __ptext64 49A8                                       __ptext56 367C  
                                     __ptext48 4A3A                                       __ptext81 49EE  
                                     __ptext73 2EE6                                       __ptext65 49B6  
                                     __ptext57 3C8C                                       __ptext49 0EDC  
                                     __ptext90 2D92                                       __ptext82 42F8  
                                     __ptext74 2F8C                                       __ptext66 476C  
                                     __ptext58 2C34                                       __ptext91 478A  
                                     __ptext83 485A                                       __ptext75 3032  
                                     __ptext67 1B1E                                       __ptext59 42B4  
                                     __ptext92 46C8                                       __ptext84 49D2  
                                     __ptext76 3DB6                                       __ptext68 1806  
                                     __ptext93 3A16                                       __ptext85 43F8  
                                     __ptext77 3FD0                                       __ptext69 0CB2  
                                     __ptext94 4988                                       __ptext86 3F7E  
                                     __ptext78 43BA                                       __ptext95 393A  
                                     __ptext87 1C9E                                       __ptext79 2232  
                                     __ptext96 3852                                       __ptext88 32BA  
                                     __ptext97 4020                                       __ptext89 3F26  
                                     __ptext98 3AEC                                       __ptext99 47A8  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 476C  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D4                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                          __end_of_MXK_Dequeue 43F8                              HMI_SetSegments@in 00BF  
                        Button_Init@pThreshold 0102                                  __size_of_main 004C  
                                __size_of_init 0078                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C6                         __end_of_Console_Render 10EC  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 4108                            __end_of_MXK_Release 4876  
                               _MXK_TestButton 4938                                  i2_Byte_SetBit 40BC  
                                 _iRDistanceSS 0060                                    _irobot_leds 3ECE  
                                  _irobot_init 49A8                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 2C34                      __end_of_MXK_BlockSwitchTo 4436  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 0CB2                                   Port_Set@Type 00E1  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 008B                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00F0                                      printf@val 00DD  
                                 _SSP1STATbits 000FC7                                 Timer0_Init@DIV 0326  
                               Timer0_Init@PRE 0039                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 419A                                     _HMI_GetBar 4A3A  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00E0  
                             ??_Port_TogglePin 00D2                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00CD  
                                   _HMI_SetBar 4A10                               Byte_SetZone@MASK 00C5  
                                  i2_MXK_Queue 49E0                                 Timer2_Init@DIV 0322  
                               Timer2_Init@PRE 0090                               Byte_SetZone@pMax 00BD  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D6                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00CB  
                __end_of_update_bump_and_cliff 44EA                             LCD_FillRectangle@i 00D0  
                           LCD_FillRectangle@j 00D1                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00BB  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00C2  
                             ___lldiv@dividend 00BB                         __end_of_MXK_TestButton 4950  
                              ?_Console_Render 0001                                  _iRScriptIndex 0035  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D7                       irobot_query_and_update@j 00D5  
                               _SPI_DisableISR 46A0                     __end_of_twos_complement_of 42F8  
                     irobot_rotate@rotateAngle 00D4                                Port_Init@pInput 0102  
                                     printf@ap 00DB                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 00D6  
                             ?_HMI_SetSegments 00BC                        Console_MakeField@Column 00C7  
                        __size_of_SPI_MaxSpeed 0074                                  SPI_DCS@pInput 00BB  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00C1  
                                  ??_rx_assign 00BE                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                        Console_MakeField@pInput 00C6  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C3  
                                ??_GetPortPORT 00BD                                ___lwmod@divisor 00C4  
                                ??_GetPortTRIS 00BD                             Word_SetPair@pInput 00CA  
                              ___lwmod@counter 00C6                             Word_SetPair@pValue 00CD  
                     ?_irobot_query_and_update 00C1                                    _MXK_Dequeue 43BA  
                                _distanceTotal 0079                                 LED_Toggle@pLED 00D3  
                                _LCD_DrawField 30D8                               _Port_SetQuadType 0A5C  
                                  _MXK_Release 485A                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 42F8                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D6                             Byte_GetZone@Offset 00C2  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00CC  
                              _Port_SetPinType 14A8                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00C3                             Byte_GetZone@pChunk 00BE  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 476C  
                           Byte_GetZone@pInput 00BB                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 3C8C                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 46C8                                   _SPI_MaxSpeed 3852  
            irobot_query_and_update@streamSize 00D2                                   _SPI_MinSpeed 38C6  
                           Port_Set@TypeActual 00DF  
